(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@helix/platform/document/designer'), require('@helix/platform/association/designer'), require('@helix/platform/config/designer'), require('@helix/platform/view/designer-page'), require('@helix/platform/process/designer'), require('@helix/platform/view/shell-designer-page'), require('@angular/router'), require('@helix/platform/event/designer'), require('@helix/platform/named-list/designer'), require('@helix/platform/record/designer'), require('@helix/platform/shared/api'), require('@helix/platform/view/api'), require('@helix/platform/web-api/designer'), require('lodash'), require('rxjs/operators'), require('@ngx-translate/core'), require('@bmc-ux/adapt-angular'), require('@helix/platform/record/api'), require('@helix/platform/shared/components'), require('@helix/platform/ui-kit'), require('rxjs'), require('@helix/platform/view/components'), require('@angular/forms'), require('@angular/common/http'), require('@helix/platform/document/api'), require('@helix/platform/web-api/api'), require('@helix/platform/utils'), require('@helix/platform/process/api'), require('@helix/platform/rule/api'), require('@helix/platform/association/api'), require('@helix/platform/named-list/api'), require('@helix/platform/event/api'), require('@helix/platform/event-statistics/api'), require('@helix/platform/chatbot/api'), require('file-saver'), require('@bmc-ux/adapt-table'), require('@helix/platform/view/actions'), require('@helix/platform/view/runtime'), require('moment-es6'), require('@helix/platform/process/components')) :
    typeof define === 'function' && define.amd ? define('@helix/com-bmc-arsys-rx-innovationstudio', ['exports', '@angular/common', '@angular/core', '@helix/platform/document/designer', '@helix/platform/association/designer', '@helix/platform/config/designer', '@helix/platform/view/designer-page', '@helix/platform/process/designer', '@helix/platform/view/shell-designer-page', '@angular/router', '@helix/platform/event/designer', '@helix/platform/named-list/designer', '@helix/platform/record/designer', '@helix/platform/shared/api', '@helix/platform/view/api', '@helix/platform/web-api/designer', 'lodash', 'rxjs/operators', '@ngx-translate/core', '@bmc-ux/adapt-angular', '@helix/platform/record/api', '@helix/platform/shared/components', '@helix/platform/ui-kit', 'rxjs', '@helix/platform/view/components', '@angular/forms', '@angular/common/http', '@helix/platform/document/api', '@helix/platform/web-api/api', '@helix/platform/utils', '@helix/platform/process/api', '@helix/platform/rule/api', '@helix/platform/association/api', '@helix/platform/named-list/api', '@helix/platform/event/api', '@helix/platform/event-statistics/api', '@helix/platform/chatbot/api', 'file-saver', '@bmc-ux/adapt-table', '@helix/platform/view/actions', '@helix/platform/view/runtime', 'moment-es6', '@helix/platform/process/components'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.helix = global.helix || {}, global.helix["com-bmc-arsys-rx-innovationstudio"] = {}), global.ng.common, global.ng.core, global.designer$4, global.designer$1, global.designer$6, global.designerPage, global.designer, global.shellDesignerPage, global.ng.router, global.designer$5, global.designer$2, global.i7, global.i2, global.i2$2, global.designer$3, global.lodash, global.rxjs.operators, global.i3, global.i1, global.i1$5, global.i2$1, global.i3$1, global.rxjs, global.i5, global.ng.forms, global.ng.common.http, global.i1$3, global.i1$4, global.i5$1, global.i6, global.i2$3, global.i1$6, global.i1$7, global.i1$8, global.i1$9, global.i5$2, global.fileSaver, global.i9, global.i7$1, global.i6$1, global.moment, global.i2$4));
})(this, (function (exports, i8, i0, designer$4, designer$1, designer$6, designerPage, designer, shellDesignerPage, i1$1, designer$5, designer$2, i7, i2, i2$2, designer$3, lodash, operators, i3, i1, i1$5, i2$1, i3$1, rxjs, i5, i4, i1$2, i1$3, i1$4, i5$1, i6, i2$3, i1$6, i1$7, i1$8, i1$9, i5$2, fileSaver, i9, i7$1, i6$1, moment, i2$4) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i1__namespace$8 = /*#__PURE__*/_interopNamespace(i1$8);
    var i1__namespace$9 = /*#__PURE__*/_interopNamespace(i1$9);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);

    var BundleDefinitionTab;
    (function (BundleDefinitionTab) {
        BundleDefinitionTab["Records"] = "record-definitions";
        BundleDefinitionTab["Views"] = "view-definitions";
        BundleDefinitionTab["Processes"] = "process-definitions";
        BundleDefinitionTab["Rules"] = "rule-definitions";
        BundleDefinitionTab["Associations"] = "association-definitions";
        BundleDefinitionTab["NamedLists"] = "named-list-definitions";
        BundleDefinitionTab["Documents"] = "document-definitions";
        BundleDefinitionTab["WebAPIs"] = "web-api-definitions";
        BundleDefinitionTab["Events"] = "event-definitions";
        BundleDefinitionTab["EventStatistics"] = "event-statistics-definitions";
        BundleDefinitionTab["Chatbots"] = "chatbot-definitions";
        BundleDefinitionTab["Configurations"] = "config-definitions";
    })(BundleDefinitionTab || (BundleDefinitionTab = {}));
    var PackageTypes;
    (function (PackageTypes) {
        PackageTypes["Content"] = "CONTENT";
        PackageTypes["Install"] = "INSTALL";
        PackageTypes["Update"] = "UPDATE";
    })(PackageTypes || (PackageTypes = {}));

    var _a$2;
    var standardDefinitionActionNames = {
        new: 'new',
        copy: 'copy',
        delete: 'delete',
        rename: 'rename',
        revertCustomization: 'revert-customization'
    };
    var AX_BUNDLE_DETAILS = {
        standardDefinitionActionNames: standardDefinitionActionNames,
        standardDefinitionActions: (_a$2 = {},
            _a$2[standardDefinitionActionNames.copy] = {
                labelKey: 'com.bmc.arsys.rx.client.common.copy.label',
                id: standardDefinitionActionNames.copy,
                disabled: true,
                rxId: 'copy-button',
                icon: 'files_copy_o'
            },
            _a$2[standardDefinitionActionNames.new] = {
                labelKey: 'com.bmc.arsys.rx.client.common.new.label',
                id: standardDefinitionActionNames.new,
                disabled: true,
                rxId: 'new-button',
                icon: 'plus_circle'
            },
            _a$2[standardDefinitionActionNames.delete] = {
                labelKey: 'com.bmc.arsys.rx.client.common.delete.label',
                id: standardDefinitionActionNames.delete,
                disabled: true,
                rxId: 'delete-button',
                icon: 'trash'
            },
            _a$2[standardDefinitionActionNames.rename] = {
                labelKey: 'com.bmc.arsys.rx.client.common.rename.label',
                id: standardDefinitionActionNames.rename,
                disabled: true,
                rxId: 'rename-button',
                icon: 'field_text'
            },
            _a$2[standardDefinitionActionNames.revertCustomization] = {
                labelKey: 'com.bmc.arsys.rx.innovation-studio.definition-actions.revert-customization.label',
                id: standardDefinitionActionNames.revertCustomization,
                disabled: true,
                rxId: 'revert-button',
                icon: 'undo'
            },
            _a$2),
        definitionGridColumns: {
            name: {
                title: 'com.bmc.arsys.rx.client.common.name.label',
                fieldId: 'name'
            },
            scope: {
                title: 'com.bmc.arsys.rx.client.admin.web-api-connections.scope.label',
                fieldId: 'scope',
                visible: false
            },
            customizationPerspective: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-search.status.label',
                fieldId: 'customizationPerspective',
                visible: false
            },
            lastUpdateTime: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.modified-date.label',
                fieldId: 'lastUpdateTime'
            },
            lastChangedBy: {
                title: 'com.bmc.arsys.rx.client.common.modified-by.label',
                fieldId: 'lastChangedBy'
            },
            isEnabled: {
                title: 'com.bmc.arsys.rx.client.approval.notification-configuration.enabled-field.label',
                fieldId: 'isEnabled'
            }
        },
        configurationGridColumns: {
            component: {
                title: 'com.bmc.arsys.rx.client.common.name.label',
                fieldId: 'component'
            },
            componentType: {
                title: 'com.bmc.arsys.rx.client.common.item-type.label',
                fieldId: 'componentType'
            },
            status: {
                title: 'com.bmc.arsys.rx.client.common.status.label',
                fieldId: 'status'
            }
        },
        tabs: [
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.records.label',
                id: BundleDefinitionTab.Records
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.views.label',
                id: BundleDefinitionTab.Views
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.processes.label',
                id: BundleDefinitionTab.Processes
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.rules.label',
                id: BundleDefinitionTab.Rules
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.associations.label',
                id: BundleDefinitionTab.Associations
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.named-lists.label',
                id: BundleDefinitionTab.NamedLists
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.documents.label',
                id: BundleDefinitionTab.Documents
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.web-apis.label',
                id: BundleDefinitionTab.WebAPIs
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.events.label',
                id: BundleDefinitionTab.Events
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.event-statistics.label',
                id: BundleDefinitionTab.EventStatistics
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.chatbots.label',
                id: BundleDefinitionTab.Chatbots
            },
            {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.label',
                id: BundleDefinitionTab.Configurations
            }
        ],
        errorCodes: {
            packageCreationAlreadyInProgress: 6117
        },
        packageExportStatuses: {
            packageCreated: 'PackageCreated',
            pendingPackageCreate: 'PendingPackageCreate',
            error: 'Error'
        },
        packageDeployStatuses: {
            error: 'Error',
            deployed: 'Deployed'
        },
        duplicateDataActions: {
            create: {
                value: 'CREATE_NEW_RECORD',
                displayName: 'Create New'
            },
            ignore: {
                value: 'THROW_ERROR',
                displayName: 'Ignore'
            },
            merge: {
                value: 'MERGE',
                displayName: 'Merge'
            },
            overwrite: {
                value: 'REPLACE',
                displayName: 'Overwrite'
            }
        },
        definitionTypes: {
            association: 'ASSOCIATION',
            document: 'DOCUMENT',
            event: 'EVENT',
            eventStatistics: 'EVENT_STATISTICS',
            namedList: 'NAMED_LIST',
            process: 'PROCESS',
            record: 'RECORD',
            rule: 'RULE',
            view: 'VIEW',
            webApi: 'WEBAPI'
        }
    };

    var DefinitionTabComponent = /** @class */ (function () {
        function DefinitionTabComponent(translateService, rxBundleCacheService, rxSessionExpirationService, rxGainsightConfiguratorService) {
            this.translateService = translateService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            this.customAction = new i0.EventEmitter();
            this.deleteDefinition = new i0.EventEmitter();
            this.renameDefinition = new i0.EventEmitter();
            this.revertCustomization = new i0.EventEmitter();
            this.copyDefinition = new i0.EventEmitter();
            this.addDefinition = new i0.EventEmitter();
            this.rowSelectionChanged = new i0.EventEmitter();
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(DefinitionTabComponent.prototype, "definitionActions", {
            get: function () {
                return this._definitionActions;
            },
            set: function (definitionActions) {
                this._definitionActions = (definitionActions || []).map(function (definitionAction) { return (Object.assign(Object.assign({}, (AX_BUNDLE_DETAILS.standardDefinitionActions[definitionAction.id] || {})), definitionAction)); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DefinitionTabComponent.prototype, "gridColumns", {
            get: function () {
                return this._gridColumns;
            },
            set: function (columns) {
                var _this = this;
                this._gridColumns = columns.map(function (column) {
                    var columnConfig = Object.assign(Object.assign({}, column), { title: _this.translateService.instant(column.title) });
                    if (column.fieldId === AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId) {
                        columnConfig.cellTemplate = _this.customizationStatusCellTemplate;
                    }
                    else if (column.fieldId === AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId) {
                        columnConfig.cellTemplate = _this.isEnabledCellTemplate;
                    }
                    else if (column.fieldId === AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId && !column.cellTemplate) {
                        columnConfig.cellTemplate = _this.nameCellTemplate;
                    }
                    else if (column.fieldId === AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId && !column.cellTemplate) {
                        columnConfig.cellTemplate = _this.scopeCellTemplate;
                    }
                    if (column.fieldId === AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId) {
                        columnConfig.sortable = { direction: i5.ColumnSortDirection.Desc, priority: 0 };
                    }
                    return columnConfig;
                });
            },
            enumerable: false,
            configurable: true
        });
        DefinitionTabComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            (_a = this.editRouterLink) !== null && _a !== void 0 ? _a : (this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/" + this.definitionType + "/edit/");
            this.recordGridConfig$ = rxjs.of({
                guid: "ax-" + this.definitionType + "-definitions-grid",
                enableRowSelection: i5.RowSelectionMode.Multiple,
                getRecordDefinition: function () { return rxjs.of(_this.recordDefinition); },
                columns: this.gridColumns,
                enableFiltering: false,
                useExternalFiltering: false,
                recordIdField: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                styles: 'flex-fill',
                getData: function () { return _this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMapTo(_this.definitions$)); },
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.definition-tab.no-definition.label')
            });
            this.recordGrid.rowSelectionChanged.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (selectedRows) {
                _this.rowSelectionChanged.emit(lodash.cloneDeep(selectedRows));
            });
            this.rxBundleCacheService
                .getCurrentBundleDescriptor()
                .subscribe(function (bundleDescriptor) { return (_this.bundleDescriptor = bundleDescriptor); });
            this.rxGainsightConfiguratorService.updateGlobalContext({
                subProductLevel1: {
                    name: 'Design'
                },
                subProductLevel2: {
                    name: 'Bundle workspace'
                }
            });
        };
        DefinitionTabComponent.prototype.onClick = function (actionId) {
            switch (actionId) {
                case AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy:
                    this.copyDefinition.emit(this.recordGrid.api.getFirstSelectedRow());
                    break;
                case AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete:
                    this.deleteDefinition.emit(this.recordGrid.api.getSelectedRows());
                    break;
                case AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization:
                    this.revertCustomization.emit(this.recordGrid.api.getSelectedRows());
                    break;
                case AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename:
                    this.renameDefinition.emit({
                        selectedRow: this.recordGrid.api.getFirstSelectedRow(),
                        definitionNames: lodash.map(this.recordGrid.adaptTableConfig.data, AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId)
                    });
                    break;
                case AX_BUNDLE_DETAILS.standardDefinitionActionNames.new:
                    this.addDefinition.emit();
                    break;
                default:
                    this.customAction.emit({ actionId: actionId, selectedRows: this.recordGrid.api.getSelectedRows() });
                    break;
            }
        };
        DefinitionTabComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (((_a = changes.isActionInProgress) === null || _a === void 0 ? void 0 : _a.currentValue) === true) {
                this.busySubscription = rxjs.NEVER.subscribe();
            }
            else {
                (_b = this.busySubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
            }
        };
        DefinitionTabComponent.prototype.trackByFn = function (definitionAction) {
            return definitionAction.id;
        };
        DefinitionTabComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
            this.rxGainsightConfiguratorService.removeGlobalContext(['subProductLevel2']);
        };
        DefinitionTabComponent.prototype.getDeleteSelectedDefinitionMessage = function () {
            var selectedRows = this.recordGrid.api.getSelectedRows();
            var visibleRows = this.recordGrid.api.getVisibleRows();
            var areAllSelectedRowsVisible = lodash.intersectionBy(selectedRows, visibleRows, function (row) { return row.name; }).length === selectedRows.length;
            var message;
            if (selectedRows.length > 1) {
                if (areAllSelectedRowsVisible) {
                    message = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.delete-definitions-confirmation.message');
                }
                else {
                    message = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.delete-hidden-definitions-confirmation.message', {
                        count: selectedRows.length
                    });
                }
            }
            else {
                if (areAllSelectedRowsVisible) {
                    message = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.delete-definition-confirmation.message');
                }
                else {
                    message = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.delete-hidden-definition-confirmation.message');
                }
            }
            return message;
        };
        return DefinitionTabComponent;
    }());
    /** @nocollapse */ DefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabComponent, deps: [{ token: i3__namespace.TranslateService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxSessionExpirationService }, { token: i2__namespace$1.RxGainsightConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: { isActionInProgress: "isActionInProgress", definitionType: "definitionType", definitionActions: "definitionActions", gridColumns: "gridColumns", definitions$: "definitions$", recordDefinition: "recordDefinition", editRouterLink: "editRouterLink" }, outputs: { customAction: "customAction", deleteDefinition: "deleteDefinition", renameDefinition: "renameDefinition", revertCustomization: "revertCustomization", copyDefinition: "copyDefinition", addDefinition: "addDefinition", rowSelectionChanged: "rowSelectionChanged" }, viewQueries: [{ propertyName: "customizationStatusCellTemplate", first: true, predicate: ["customizationStatusCellTemplate"], descendants: true, static: true }, { propertyName: "isEnabledCellTemplate", first: true, predicate: ["isEnabledCellTemplate"], descendants: true, static: true }, { propertyName: "nameCellTemplate", first: true, predicate: ["nameCellTemplate"], descendants: true, static: true }, { propertyName: "scopeCellTemplate", first: true, predicate: ["scopeCellTemplate"], descendants: true, static: true }, { propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"d-flex flex-row ml-1\">\n  <ng-container *ngFor=\"let toolbarItem of definitionActions; trackBy: trackByFn\">\n    <ng-container *ngIf=\"toolbarItem.subActions?.length\">\n      <div class=\"dropdown\" adaptDropdown placement=\"bottom-left\">\n        <button\n          adapt-button\n          btn-type=\"tertiary\"\n          [disabled]=\"toolbarItem.isDisabled\"\n          adaptDropdownToggle\n          [attr.rx-id]=\"toolbarItem.rxId\"\n          class=\"pl-0 ml-4\"\n        >\n          <adapt-icon [name]=\"toolbarItem.icon\"></adapt-icon>\n\n          {{ toolbarItem.labelKey | translate }}\n        </button>\n\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <ng-container *ngFor=\"let dropdownItem of toolbarItem.subActions\">\n            <div *ngIf=\"dropdownItem.groupTitle\" class=\"dropdown-header\">{{ dropdownItem.groupTitle }}</div>\n            <button\n              *ngIf=\"!dropdownItem.groupTitle\"\n              class=\"dropdown-item\"\n              (click)=\"onClick(dropdownItem.id)\"\n              [attr.rx-id]=\"dropdownItem.rxId\"\n            >\n              {{ dropdownItem.labelKey | translate }}\n            </button>\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"!toolbarItem.subActions?.length\">\n      <button\n        adapt-button\n        btn-type=\"tertiary\"\n        [disabled]=\"toolbarItem.isDisabled\"\n        (click)=\"onClick(toolbarItem.id)\"\n        [attr.rx-id]=\"toolbarItem.rxId\"\n        class=\"px-3\"\n      >\n        <adapt-icon *ngIf=\"toolbarItem.icon\" [name]=\"toolbarItem.icon\"></adapt-icon>\n\n        {{ toolbarItem.labelKey | translate }}\n      </button>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #nameCellTemplate let-dataItem=\"dataItem\">\n  <a [routerLink]=\"editRouterLink + dataItem.$ID$\">\n    {{ dataItem.name | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n\n<ng-template #customizationStatusCellTemplate let-dataItem=\"dataItem\">\n  {{ dataItem.customizationPerspective | rxCustomizationStatus }}\n</ng-template>\n\n<ng-template #isEnabledCellTemplate let-dataItem=\"dataItem\">\n  {{\n    (dataItem.isEnabled ? 'com.bmc.arsys.rx.client.common.yes.label' : 'com.bmc.arsys.rx.client.common.no.label')\n      | translate\n  }}\n</ng-template>\n\n<ng-template #scopeCellTemplate let-dataItem=\"dataItem\">\n  {{ dataItem.scope | rxDefinitionScopePipe: bundleDescriptor }}\n</ng-template>\n\n<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n\n<rx-busy-indicator [options]=\"{ busy: busySubscription }\"></rx-busy-indicator>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{position:relative;display:flex;flex-direction:column;height:100%;width:100%;overflow:hidden}\n"], components: [{ type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i3__namespace$1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe, "rxCustomizationStatus": i2__namespace.RxCustomizationStatusPipe, "rxDefinitionScopePipe": i2__namespace.RxDefinitionScopePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-definition-tab',
                        templateUrl: './definition-tab.component.html',
                        styleUrls: ['./definition-tab.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslateService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxSessionExpirationService }, { type: i2__namespace$1.RxGainsightConfiguratorService }]; }, propDecorators: { customizationStatusCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['customizationStatusCellTemplate', { static: true }]
                }], isEnabledCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['isEnabledCellTemplate', { static: true }]
                }], nameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['nameCellTemplate', { static: true }]
                }], scopeCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['scopeCellTemplate', { static: true }]
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }], isActionInProgress: [{
                    type: i0.Input
                }], definitionType: [{
                    type: i0.Input
                }], definitionActions: [{
                    type: i0.Input
                }], gridColumns: [{
                    type: i0.Input
                }], definitions$: [{
                    type: i0.Input
                }], recordDefinition: [{
                    type: i0.Input
                }], editRouterLink: [{
                    type: i0.Input
                }], customAction: [{
                    type: i0.Output
                }], deleteDefinition: [{
                    type: i0.Output
                }], renameDefinition: [{
                    type: i0.Output
                }], revertCustomization: [{
                    type: i0.Output
                }], copyDefinition: [{
                    type: i0.Output
                }], addDefinition: [{
                    type: i0.Output
                }], rowSelectionChanged: [{
                    type: i0.Output
                }] } });

    var _a$1;
    var RX_COPY_DEFINITION = {
        resourceType: 'com.bmc.arsys.rx.application.common.CopyDefinitionCommand'
    };
    var CopyDefinitionType;
    (function (CopyDefinitionType) {
        CopyDefinitionType["Document"] = "document";
        CopyDefinitionType["Event"] = "event";
        CopyDefinitionType["EventStatistics"] = "event-statistics";
        CopyDefinitionType["NamedList"] = "named-list";
        CopyDefinitionType["Process"] = "process";
        CopyDefinitionType["Record"] = "record";
        CopyDefinitionType["Rule"] = "rule";
        CopyDefinitionType["View"] = "view";
        CopyDefinitionType["WebApi"] = "web-api";
    })(CopyDefinitionType || (CopyDefinitionType = {}));
    var copyDefinitionTypeMap = (_a$1 = {},
        _a$1[CopyDefinitionType.Document] = 'DOCUMENT_DEFINITION',
        _a$1[CopyDefinitionType.Event] = 'EVENT_DEFINITION',
        _a$1[CopyDefinitionType.EventStatistics] = 'EVENT_STATISTICS_DEFINITION',
        _a$1[CopyDefinitionType.NamedList] = 'NAMED_LIST',
        _a$1[CopyDefinitionType.Process] = 'PROCESS_DEFINITION',
        _a$1[CopyDefinitionType.Record] = 'RECORD_DEFINITION',
        _a$1[CopyDefinitionType.Rule] = 'RULE_DEFINITION',
        _a$1[CopyDefinitionType.View] = 'VIEW_DEFINITION',
        _a$1[CopyDefinitionType.WebApi] = 'WEBAPI_DEFINITION',
        _a$1);

    var AX_RECORD_DEFINITION_TAB = {
        archiving: {
            recordDefinitionName: 'AR System Archive Policy',
            fieldIds: {
                runNow: 357
            }
        }
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var dataSourceDataPageQuery = 'com.bmc.arsys.rx.application.datasource.datapage.DataSourceDataPageQuery';
    var RxDataSourceDataPageService = /** @class */ (function (_super) {
        __extends(RxDataSourceDataPageService, _super);
        function RxDataSourceDataPageService(injector) {
            var _this = _super.call(this, injector, dataSourceDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxDataSourceDataPageService;
    }(i2.DataPage));
    /** @nocollapse */ RxDataSourceDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxDataSourceDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceDataPageService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceDataPageService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var RxExternalDataService = /** @class */ (function () {
        function RxExternalDataService(httpClient, rxDataSourceDataPageService, rxDocumentDefinitionDataPageService, rxSessionExpirationService, rxWebApiDefinitionDataPageService) {
            this.httpClient = httpClient;
            this.rxDataSourceDataPageService = rxDataSourceDataPageService;
            this.rxDocumentDefinitionDataPageService = rxDocumentDefinitionDataPageService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxWebApiDefinitionDataPageService = rxWebApiDefinitionDataPageService;
        }
        RxExternalDataService.prototype.getArsTables = function (pageSize, startIndex, dataSourceName, tableName, sortBy) {
            if (sortBy === void 0) { sortBy = []; }
            var queryParams = {
                pageSize: pageSize,
                startIndex: startIndex,
                dataSourceName: dataSourceName
            };
            if (tableName.length) {
                Object.assign(queryParams, { tableName: tableName });
            }
            if (sortBy.length) {
                Object.assign(queryParams, { sortBy: sortBy });
            }
            return this.rxDataSourceDataPageService.get({
                params: queryParams
            });
        };
        RxExternalDataService.prototype.getArsTableDefinition = function (dataSourceName, tableName) {
            return this.httpClient.get("/api/rx/application/datasource/table/" + dataSourceName + "/" + tableName);
        };
        RxExternalDataService.prototype.getDataSourceNames = function (dataSourceType) {
            return this.httpClient.get("/api/rx/application/datasource/type/" + dataSourceType);
        };
        RxExternalDataService.prototype.getDataSourceTypes = function () {
            return this.httpClient.get('/api/rx/application/datasource/type');
        };
        RxExternalDataService.prototype.getWebApiDefinitions = function () {
            var _this = this;
            return this.rxSessionExpirationService
                .keepSessionAlive()
                .pipe(operators.switchMap(function () { return _this.rxWebApiDefinitionDataPageService.get(); }));
        };
        RxExternalDataService.prototype.getWebApiDocuments = function (webApiRequestDefinitions) {
            return this.rxDocumentDefinitionDataPageService.get().pipe(operators.map(function (documentDefinitions) {
                lodash.remove(documentDefinitions.data, function (document) { return !webApiRequestDefinitions[document.name]; });
                documentDefinitions.totalSize = documentDefinitions.data.length;
                return documentDefinitions;
            }));
        };
        return RxExternalDataService;
    }());
    /** @nocollapse */ RxExternalDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExternalDataService, deps: [{ token: i1__namespace$2.HttpClient }, { token: RxDataSourceDataPageService }, { token: i1__namespace$3.RxDocumentDefinitionDataPageService }, { token: i2__namespace.RxSessionExpirationService }, { token: i1__namespace$4.RxWebApiDefinitionDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxExternalDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExternalDataService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExternalDataService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: RxDataSourceDataPageService }, { type: i1__namespace$3.RxDocumentDefinitionDataPageService }, { type: i2__namespace.RxSessionExpirationService }, { type: i1__namespace$4.RxWebApiDefinitionDataPageService }]; } });

    var CreateCustomRecordComponent = /** @class */ (function (_super) {
        __extends(CreateCustomRecordComponent, _super);
        function CreateCustomRecordComponent(injector, formBuilder, activeModalRef, rxExternalDataService, rxRecordDefinitionService, rxDefinitionNameService, rxBundleCache, router) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.injector = injector;
            _this.formBuilder = formBuilder;
            _this.activeModalRef = activeModalRef;
            _this.rxExternalDataService = rxExternalDataService;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxBundleCache = rxBundleCache;
            _this.router = router;
            _this.initForm();
            _this.customDataSourceNames$ = _this.rxExternalDataService
                .getDataSourceNames(i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom)
                .pipe(operators.startWith([]));
            return _this;
        }
        CreateCustomRecordComponent.prototype.submit = function () {
            var _this = this;
            var createCustomRecordFormValue = this.createCustomRecordForm.value;
            var recordDefinitionName = this.rxDefinitionNameService.getDefinitionName(this.rxBundleCache.bundleId, createCustomRecordFormValue.name);
            var customRecordDefinition = {
                name: recordDefinitionName,
                dataSourceName: createCustomRecordFormValue.dataSourceName[0],
                resourceType: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType,
                fieldDefinitions: [
                    {
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                        name: 'Display ID',
                        id: 1,
                        fieldOption: i1$5.RX_RECORD_DEFINITION.fieldOptions.system
                    },
                    {
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                        name: 'ID',
                        id: 379,
                        fieldOption: i1$5.RX_RECORD_DEFINITION.fieldOptions.system
                    },
                    {
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                        name: 'Data Provider ID',
                        id: 380,
                        fieldOption: i1$5.RX_RECORD_DEFINITION.fieldOptions.required
                    }
                ]
            };
            this.allowDismiss = false;
            this.rxRecordDefinitionService
                .create(customRecordDefinition)
                .pipe(operators.finalize(function () {
                _this.allowDismiss = true;
            }))
                .subscribe(function () {
                _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'record', 'edit', recordDefinitionName]);
            });
        };
        CreateCustomRecordComponent.prototype.cancel = function () {
            this.dismissDialog();
        };
        CreateCustomRecordComponent.prototype.initForm = function () {
            this.createCustomRecordForm = this.formBuilder.group({
                name: this.formBuilder.control(null, [i4.Validators.required]),
                dataSourceName: this.formBuilder.control(null, [i4.Validators.required])
            });
        };
        return CreateCustomRecordComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ CreateCustomRecordComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordComponent, deps: [{ token: i0__namespace.Injector }, { token: i4__namespace.FormBuilder }, { token: i1__namespace.ActiveModalRef }, { token: RxExternalDataService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$1.Router }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreateCustomRecordComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CreateCustomRecordComponent, selector: "ax-create-custom-record", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.innovation-studio.create-custom-record-modal.title' | translate }}\n  </h5>\n  <button\n    class=\"close close-inverse\"\n    data-dismiss=\"modal\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <form [formGroup]=\"createCustomRecordForm\">\n    <adapt-rx-textfield\n      autofocus\n      rx-id=\"name\"\n      class=\"d-block form-group\"\n      name=\"name\"\n      formControlName=\"name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n    ></adapt-rx-textfield>\n    <adapt-rx-select\n      rx-id=\"data-source-name\"\n      class=\"form-group\"\n      label=\"{{ 'com.bmc.arsys.rx.innovation-studio.create-custom-record-modal.data-source-name.label' | translate }}\"\n      name=\"dataSourceName\"\n      formControlName=\"dataSourceName\"\n      [disabled]=\"!allowDismiss\"\n      [options]=\"customDataSourceNames$ | async\"\n    ></adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"createCustomRecordForm.pristine || createCustomRecordForm.invalid || !allowDismiss\"\n    (click)=\"submit()\"\n    rx-id=\"create-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.create.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n    rx-id=\"cancel-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i4__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-create-custom-record',
                        templateUrl: './create-custom-record.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i4__namespace.FormBuilder }, { type: i1__namespace.ActiveModalRef }, { type: RxExternalDataService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$1.Router }]; } });

    var JoinCriteriaExpressionConfigurator$1 = /** @class */ (function (_super) {
        __extends(JoinCriteriaExpressionConfigurator, _super);
        function JoinCriteriaExpressionConfigurator(primaryRecordDefinition$, secondaryRecordDefinition$, injector) {
            var _this = _super.call(this) || this;
            _this.primaryRecordDefinition$ = primaryRecordDefinition$;
            _this.secondaryRecordDefinition$ = secondaryRecordDefinition$;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i3.TranslateService);
            _this.rxDefinitionNameService = _this.injector.get(i2.RxDefinitionNameService);
            _this.commonDataDictionary$ = rxjs.combineLatest([
                _this.primaryRecordDefinition$,
                _this.secondaryRecordDefinition$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), primaryRecordDefinition = _b[0], secondaryRecordDefinition = _b[1];
                if (primaryRecordDefinition && secondaryRecordDefinition) {
                    var records = [
                        {
                            recordDefinitionName: _this.rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name),
                            label: "(" + _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.primary.label') + ")",
                            type: i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.primary,
                            fieldDefinitions: primaryRecordDefinition.fieldDefinitions
                        },
                        {
                            recordDefinitionName: _this.rxDefinitionNameService.getDisplayName(secondaryRecordDefinition.name),
                            label: "(" + _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.secondary.label') + ")",
                            type: i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.secondary,
                            fieldDefinitions: secondaryRecordDefinition.fieldDefinitions
                        }
                    ];
                    return records.map(function (record) { return ({
                        label: record.recordDefinitionName + " " + record.label,
                        expanded: true,
                        children: lodash.chain(record.fieldDefinitions)
                            .reject({ resourceType: i1$5.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType })
                            .map(function (fieldDefinition) { return ({
                            label: record.recordDefinitionName + "." + fieldDefinition.name,
                            icon: 'd-icon-field_text',
                            expression: "${" + record.recordDefinitionName + "." + record.type + "." + fieldDefinition.name + "}"
                        }); })
                            .sortBy(function (item) { return item.label.toLocaleLowerCase(); })
                            .value()
                    }); });
                }
                else {
                    return [];
                }
            }));
            return _this;
        }
        JoinCriteriaExpressionConfigurator.prototype.getDefaultConfig = function () {
            return Object.assign(Object.assign({}, _super.prototype.getDefaultConfig.call(this)), { operators: i2.ExpressionOperatorRowsByGroup.get(i2.ExpressionOperatorGroup.AllServer) });
        };
        return JoinCriteriaExpressionConfigurator;
    }(i2.RxExpressionConfigurator));

    var CreateJoinRecordComponent = /** @class */ (function (_super) {
        __extends(CreateJoinRecordComponent, _super);
        function CreateJoinRecordComponent(injector, activeModalRef, rxRecordDefinitionService, rxDefinitionNameService, rxBundleCache, router, translateService, rxRecordDefinitionCacheService, rxExpressionEditorService, rxRecordDesignerService, changeDetector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.injector = injector;
            _this.activeModalRef = activeModalRef;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxBundleCache = rxBundleCache;
            _this.router = router;
            _this.translateService = translateService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.rxRecordDesignerService = rxRecordDesignerService;
            _this.changeDetector = changeDetector;
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.expressionFormControlLabel = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-join-record-modal.join-criteria.on-statement.label');
            _this.expressionFormControlTooltip = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-join-record-modal.join-criteria.on-statement.tooltip');
            _this.primaryRecordDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-join-record-modal.primary-record.label'),
                definitionType: i2$1.RxDefinitionPickerType.Record,
                required: true
            };
            _this.secondaryRecordDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-join-record-modal.secondary-record.label'),
                definitionType: i2$1.RxDefinitionPickerType.Record,
                required: true
            };
            _this.joinTypes = [i1$5.RX_RECORD_DEFINITION.joinTypes.inner, i1$5.RX_RECORD_DEFINITION.joinTypes.outer];
            _this.primaryRecordDefinitionNameFormControl = new i4.FormControl('', i4.Validators.required);
            _this.secondaryRecordDefinitionNameFormControl = new i4.FormControl('', i4.Validators.required);
            _this.primaryRecordDefinition$ = _this.primaryRecordDefinitionNameFormControl.valueChanges.pipe(operators.startWith(null), operators.switchMap(function (primaryRecordDefinitionName) { return primaryRecordDefinitionName
                ? _this.rxRecordDefinitionCacheService.getRecordDefinition(primaryRecordDefinitionName)
                : rxjs.of(null); }), operators.shareReplay(1));
            _this.secondaryRecordDefinition$ = _this.secondaryRecordDefinitionNameFormControl.valueChanges.pipe(operators.startWith(null), operators.switchMap(function (secondaryRecordDefinitionName) { return secondaryRecordDefinitionName
                ? _this.rxRecordDefinitionCacheService.getRecordDefinition(secondaryRecordDefinitionName)
                : rxjs.of(null); }), operators.shareReplay(1));
            _this.createJoinRecordForm = new i4.FormGroup({
                name: new i4.FormControl('', i4.Validators.required),
                primaryRecordDefinitionName: _this.primaryRecordDefinitionNameFormControl,
                secondaryRecordDefinitionName: _this.secondaryRecordDefinitionNameFormControl,
                joinType: new i4.FormControl([], i4.Validators.required),
                joinCriteria: new i4.FormControl('')
            });
            _this.expressionConfigurator = new JoinCriteriaExpressionConfigurator$1(_this.primaryRecordDefinition$, _this.secondaryRecordDefinition$, _this.injector);
            _this.expressionFormControlOptions = {
                label: _this.expressionFormControlLabel,
                tooltip: {
                    iconName: 'question_circle_o',
                    content: _this.expressionFormControlTooltip
                },
                dataDictionary$: _this.expressionConfigurator.getDataDictionary(),
                operators: _this.expressionConfigurator.getOperators()
            };
            return _this;
        }
        CreateJoinRecordComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            rxjs.combineLatest([this.primaryRecordDefinition$, this.secondaryRecordDefinition$])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.createJoinRecordForm.controls.joinCriteria.reset();
            });
        };
        CreateJoinRecordComponent.prototype.optionFormatter = function (selectOption) {
            return selectOption.displayName;
        };
        CreateJoinRecordComponent.prototype.openEditor = function () {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    value: this.createJoinRecordForm.controls.joinCriteria.value,
                    path: 'joinCriteria',
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-join-record-modal.join-criteria.on-statement.label')
                },
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (expression) {
                _this.createJoinRecordForm.controls.joinCriteria.setValue(expression.value);
                _this.changeDetector.markForCheck();
            });
        };
        CreateJoinRecordComponent.prototype.createRecord = function () {
            var _this = this;
            var createJoinRecordFormValue = this.createJoinRecordForm.value;
            var recordDefinitionName = this.rxDefinitionNameService.getDefinitionName(this.rxBundleCache.bundleId, createJoinRecordFormValue.name);
            var joinRecordDefinition = {
                allowFieldsOverlay: false,
                allowIndexesOverlay: false,
                allowNonAdminToDeleteRecordInstances: false,
                allowOtherPropertiesOverlay: false,
                allowPermissionsOverlay: false,
                name: recordDefinitionName,
                primaryRecordDefinitionName: createJoinRecordFormValue.primaryRecordDefinitionName,
                secondaryRecordDefinitionName: createJoinRecordFormValue.secondaryRecordDefinitionName,
                joinType: createJoinRecordFormValue.joinType[0].value,
                joinCriteria: this.rxRecordDesignerService.getJoinCriteriaArExpression(createJoinRecordFormValue.joinCriteria, createJoinRecordFormValue.primaryRecordDefinitionName, createJoinRecordFormValue.secondaryRecordDefinitionName),
                resourceType: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType,
                fieldDefinitions: [
                    {
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                        name: 'Display ID',
                        id: 1,
                        fieldOption: i1$5.RX_RECORD_DEFINITION.fieldOptions.system
                    },
                    {
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                        name: 'ID',
                        id: 379,
                        fieldOption: i1$5.RX_RECORD_DEFINITION.fieldOptions.system
                    }
                ]
            };
            this.allowDismiss = false;
            this.rxRecordDefinitionService
                .create(joinRecordDefinition)
                .pipe(operators.finalize(function () {
                _this.allowDismiss = true;
                _this.changeDetector.markForCheck();
            }))
                .subscribe(function () {
                _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'record', 'edit2', recordDefinitionName]);
            });
        };
        CreateJoinRecordComponent.prototype.cancel = function () {
            this.dismissDialog();
        };
        return CreateJoinRecordComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ CreateJoinRecordComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace.ActiveModalRef }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$1.Router }, { token: i3__namespace.TranslateService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i2__namespace$1.RxExpressionEditorService }, { token: i7__namespace.RxRecordDesignerService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreateJoinRecordComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CreateJoinRecordComponent, selector: "rx-create-join-record", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.client.record-designer.create-new-join-record-editor.title' | translate }}\n  </h5>\n  <button\n    class=\"close close-inverse\"\n    data-dismiss=\"modal\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"d-flex flex-column control-width\">\n    <form [formGroup]=\"createJoinRecordForm\">\n      <adapt-rx-textfield\n        autofocus\n        rx-id=\"name\"\n        class=\"d-block form-group\"\n        formControlName=\"name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n      ></adapt-rx-textfield>\n\n      <rx-definition-picker\n        class=\"d-block form-group\"\n        rx-id=\"primary-record-definition-name\"\n        [options]=\"primaryRecordDefinitionPickerOptions\"\n        formControlName=\"primaryRecordDefinitionName\"\n      ></rx-definition-picker>\n\n      <rx-definition-picker\n        class=\"d-block form-group\"\n        rx-id=\"secondary-record-definition-name\"\n        [options]=\"secondaryRecordDefinitionPickerOptions\"\n        formControlName=\"secondaryRecordDefinitionName\"\n      ></rx-definition-picker>\n\n      <adapt-rx-select\n        class=\"d-block form-group\"\n        rx-id=\"join-type\"\n        [required]=\"true\"\n        [label]=\"'com.bmc.arsys.rx.innovation-studio.create-join-record-modal.join-type.label' | translate\"\n        [options]=\"joinTypes\"\n        [optionFormatter]=\"optionFormatter\"\n        formControlName=\"joinType\"\n      ></adapt-rx-select>\n\n      <rx-expression-form-control\n        rx-id=\"join-criteria\"\n        class=\"d-block form-group\"\n        (events)=\"openEditor()\"\n        [options]=\"expressionFormControlOptions\"\n        formControlName=\"joinCriteria\"\n      ></rx-expression-form-control>\n    </form>\n  </div>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"createJoinRecordForm.pristine || createJoinRecordForm.invalid || !allowDismiss\"\n    (click)=\"createRecord()\"\n    rx-id=\"create-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.create.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n    rx-id=\"cancel-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i2__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i4__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i3__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-create-join-record',
                        templateUrl: './create-join-record.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace.ActiveModalRef }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$1.Router }, { type: i3__namespace.TranslateService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i2__namespace$1.RxExpressionEditorService }, { type: i7__namespace.RxRecordDesignerService }, { type: i0__namespace.ChangeDetectorRef }]; } });

    var CopyDefinitionComponent = /** @class */ (function (_super) {
        __extends(CopyDefinitionComponent, _super);
        function CopyDefinitionComponent(activeModalRef, rxOverlayService, rxGlobalCacheService, rxNotificationService, router, translateService, rxDefinitionNameService, httpClient, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxOverlayService = rxOverlayService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxNotificationService = rxNotificationService;
            _this.router = router;
            _this.translateService = translateService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.httpClient = httpClient;
            _this.injector = injector;
            _this.targetBundle = [];
            _this.autoFocusTargetBundleField = true;
            _this.config = _this.activeModalRef.getData();
            _this.definitionDisplayName = _this.rxDefinitionNameService.getDisplayName(_this.config.definitionName);
            _this.bundles$ = _this.rxGlobalCacheService.getBundleDescriptors().pipe(operators.startWith([]), operators.map(function (bundleDescriptors) { return bundleDescriptors
                .filter(function (bundleDescriptor) { return ![
                i2.RX_APPLICATION.settingsBundleId,
                i2.RX_APPLICATION.standardlib,
                i2.RX_APPLICATION.innovationStudioBundleId,
                i2.RX_APPLICATION.platformBundleId
            ].includes(bundleDescriptor.id) && _this.rxOverlayService.areNewDefinitionsAllowedSync(bundleDescriptor); })
                .sort(function (bundle, bundleToCompare) { return bundle.friendlyName.localeCompare(bundleToCompare.friendlyName); }); }), operators.tap(function (bundleDescriptors) {
                var sourceBundleDescriptor = bundleDescriptors.find(function (bundle) { return bundle.id === _this.rxDefinitionNameService.getBundleId(_this.config.definitionName); });
                if (sourceBundleDescriptor) {
                    _this.targetBundle = lodash.castArray(sourceBundleDescriptor);
                    _this.autoFocusTargetBundleField = false;
                }
            }));
            return _this;
        }
        CopyDefinitionComponent.prototype.isDirty = function () {
            return this.selectBundleForm.dirty;
        };
        CopyDefinitionComponent.prototype.optionFormatter = function (bundleDescriptor) {
            return bundleDescriptor.friendlyName;
        };
        CopyDefinitionComponent.prototype.copyDefinition = function () {
            var _this = this;
            var targetDefinitionName = this.rxDefinitionNameService.getDefinitionName(this.targetBundle[0].id, this.definitionDisplayName);
            this.allowDismiss = false;
            this.httpClient
                .post(i2.RX_RESOURCE_URLS.command, {
                resourceType: RX_COPY_DEFINITION.resourceType,
                type: copyDefinitionTypeMap[this.config.definitionType],
                srcName: this.config.definitionName,
                destName: targetDefinitionName
            })
                .pipe(operators.finalize(function () {
                _this.allowDismiss = true;
            }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.definition-copied.message'));
                _this.activeModalRef.close();
                _this.router.navigate([
                    i2.RX_APPLICATION.innovationStudioBundleId,
                    _this.config.definitionType,
                    _this.config.editFragment || 'edit',
                    targetDefinitionName
                ]);
            });
        };
        CopyDefinitionComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        return CopyDefinitionComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ CopyDefinitionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$1.Router }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$2.HttpClient }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CopyDefinitionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CopyDefinitionComponent, selector: "ax-copy-definition", viewQueries: [{ propertyName: "selectBundleForm", first: true, predicate: ["selectBundleForm"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.innovation-studio.copy-definition.label' | translate }}\n  </h5>\n  <button\n    class=\"close dp-close\"\n    data-dismiss=\"modal\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <form #selectBundleForm=\"ngForm\">\n    <adapt-rx-select\n      [autofocus]=\"autoFocusTargetBundleField\"\n      rx-id=\"application-name\"\n      required\n      name=\"targetBundle\"\n      [(ngModel)]=\"targetBundle\"\n      [options]=\"bundles$ | async\"\n      [optionFormatter]=\"optionFormatter\"\n      [disabled]=\"!allowDismiss\"\n      label=\"{{ 'com.bmc.arsys.rx.innovation-studio.copy-definition.target-application.label' | translate }}\"\n      class=\"mb-3\"\n    >\n    </adapt-rx-select>\n    <adapt-rx-textfield\n      [autofocus]=\"!autoFocusTargetBundleField\"\n      rx-id=\"definition-name\"\n      class=\"mb-6\"\n      label=\"{{ 'com.bmc.arsys.rx.innovation-studio.definition-name.label' | translate }}\"\n      name=\"definition\"\n      required\n      [(ngModel)]=\"definitionDisplayName\"\n      [disabled]=\"!allowDismiss\"\n    >\n    </adapt-rx-textfield>\n  </form>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    (click)=\"copyDefinition()\"\n    [disabled]=\"selectBundleForm.pristine || selectBundleForm.invalid || !allowDismiss\"\n    rx-id=\"ok-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.copy.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n    rx-id=\"cancel-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i4__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-copy-definition',
                        templateUrl: './copy-definition.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$1.Router }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$2.HttpClient }, { type: i0__namespace.Injector }]; }, propDecorators: { selectBundleForm: [{
                    type: i0.ViewChild,
                    args: ['selectBundleForm']
                }] } });

    var RxCopyDefinitionService = /** @class */ (function () {
        function RxCopyDefinitionService(rxModalService) {
            this.rxModalService = rxModalService;
        }
        RxCopyDefinitionService.prototype.openCopyDefinitionComponentModal = function (row, definitionType, editFragment) {
            return this.rxModalService.openModal({
                content: CopyDefinitionComponent,
                data: {
                    definitionName: row.name,
                    definitionType: definitionType,
                    editFragment: editFragment
                },
                size: 'sm'
            });
        };
        return RxCopyDefinitionService;
    }());
    /** @nocollapse */ RxCopyDefinitionService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCopyDefinitionService, deps: [{ token: i3__namespace$1.RxModalService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxCopyDefinitionService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCopyDefinitionService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCopyDefinitionService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$1.RxModalService }]; } });

    var FieldSelectionStepComponent$1 = /** @class */ (function () {
        function FieldSelectionStepComponent(rxWizardModalComponent, translateService, rxDefinitionNameService, rxFieldDefinitionService, rxGuidService, rxRecordDefinitionService) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxFieldDefinitionService = rxFieldDefinitionService;
            this.rxGuidService = rxGuidService;
            this.rxRecordDefinitionService = rxRecordDefinitionService;
            this.notificationMessage = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.notification.message');
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.alertConfig = {
                content: this.notificationMessage,
                variant: 'info',
                type: 'inline',
                dismissible: false
            };
            this.selectTexts = {
                headerText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.select.header'),
                numberOptionsText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.select.fields.label'),
                checked: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.select.selected.label')
            };
            this.primarySelectedFieldsFormControl = new i4.FormControl([]);
            this.secondarySelectedFieldsFormControl = new i4.FormControl([]);
        }
        FieldSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxWizardModalComponent.api.enableFinishButton();
            var context$ = this.rxWizardModalComponent.context$.pipe(operators.tap(function (context) {
                if (!context.selectedFields) {
                    _this.primarySelectedFieldsFormControl.setValue([]);
                    _this.secondarySelectedFieldsFormControl.setValue([]);
                }
            }), operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            var primaryRecordDefinitionName$ = context$.pipe(operators.pluck('primaryRecordDefinitionName'), operators.distinctUntilChanged(), operators.filter(Boolean), operators.shareReplay(1));
            var secondaryRecordDefinitionName$ = context$.pipe(operators.pluck('secondaryRecordDefinitionName'), operators.distinctUntilChanged(), operators.filter(Boolean), operators.shareReplay(1));
            rxjs.combineLatest([primaryRecordDefinitionName$, secondaryRecordDefinitionName$]).subscribe(function (_a) {
                var _b = __read(_a, 2), primaryRecordDefinitionName = _b[0], secondaryRecordDefinitionName = _b[1];
                _this.selectLabel = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.select.label', {
                    primaryRecordDefinitionName: _this.rxDefinitionNameService.getDisplayName(primaryRecordDefinitionName),
                    secondaryRecordDefinitionName: _this.rxDefinitionNameService.getDisplayName(secondaryRecordDefinitionName)
                });
            });
            this.primaryAvailableFields$ = primaryRecordDefinitionName$.pipe(operators.switchMap(function (primaryRecordDefinitionName) { return _this.rxRecordDefinitionService.get(primaryRecordDefinitionName, {}, true); }), operators.map(function (recordDefinition) { return _this.getJoinFieldDefinitions(recordDefinition, i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.primary); }));
            this.secondaryAvailableFields$ = secondaryRecordDefinitionName$.pipe(operators.switchMap(function (secondaryRecordDefinitionName) { return _this.rxRecordDefinitionService.get(secondaryRecordDefinitionName, {}, true); }), operators.map(function (recordDefinition) { return _this.getJoinFieldDefinitions(recordDefinition, i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.secondary); }));
            var primarySelectedFields$ = this.primarySelectedFieldsFormControl.valueChanges.pipe(operators.startWith([]));
            var secondarySelectedFields$ = this.secondarySelectedFieldsFormControl.valueChanges.pipe(operators.startWith([]));
            var duplicateNames$ = rxjs.combineLatest([primarySelectedFields$, secondarySelectedFields$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), primarySelectedFields = _b[0], secondarySelectedFields = _b[1];
                var selectedPrimaryFieldNames = lodash.map(primarySelectedFields, 'name');
                var selectedSecondaryFieldNames = lodash.map(secondarySelectedFields, 'name');
                return lodash.intersection(selectedPrimaryFieldNames, selectedSecondaryFieldNames).concat(lodash.intersection(lodash.map(i1$5.RX_RECORD_DEFINITION.joinRecordDefinitionCoreFields, 'name'), selectedPrimaryFieldNames.concat(selectedSecondaryFieldNames)));
            }), operators.shareReplay(1));
            this.hasDuplicates$ = duplicateNames$.pipe(operators.map(function (duplicateNames) { return !!duplicateNames.length; }));
            rxjs.combineLatest([primarySelectedFields$, secondarySelectedFields$])
                .pipe(operators.withLatestFrom(duplicateNames$, primaryRecordDefinitionName$, secondaryRecordDefinitionName$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 4), _c = __read(_b[0], 2), primarySelectedFields = _c[0], secondarySelectedFields = _c[1], duplicateNames = _b[1], primaryRecordDefinitionName = _b[2], secondaryRecordDefinitionName = _b[3];
                var nonRetainableFieldIds = lodash.chain(primarySelectedFields)
                    .concat(secondarySelectedFields)
                    .map('fieldMapping.sourceFieldId')
                    .filter(function (fieldId, index, selectedFieldIds) { return lodash.includes(selectedFieldIds, fieldId, index + 1); })
                    .union(i1$5.RX_RECORD_DEFINITION.joinRecordDefinitionCoreFieldIds)
                    .value();
                var primaryRecordDisplayName = _this.rxDefinitionNameService.getDisplayName(primaryRecordDefinitionName);
                var secondaryRecordDisplayName = _this.rxDefinitionNameService.getDisplayName(secondaryRecordDefinitionName);
                _this.rxWizardModalComponent.api.updateContext({
                    selectedFields: lodash.concat(primarySelectedFields, secondarySelectedFields)
                        .filter(function (fieldDefinition) { return _this.rxFieldDefinitionService.isJoinedField(fieldDefinition); })
                        .map(function (fieldDefinition) {
                        var field = lodash.cloneDeep(fieldDefinition);
                        if (lodash.includes(duplicateNames, field.name)) {
                            if (field.fieldMapping.source === i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.primary) {
                                field.name = field.name + " - " + primaryRecordDisplayName;
                            }
                            else {
                                field.name = field.name + " - " + secondaryRecordDisplayName;
                            }
                        }
                        if (!lodash.includes(nonRetainableFieldIds, field.fieldMapping.sourceFieldId)) {
                            field.customId = field.fieldMapping.sourceFieldId;
                        }
                        return field;
                    })
                        .concat(i1$5.RX_RECORD_DEFINITION.joinRecordDefinitionCoreFields)
                });
            });
        };
        FieldSelectionStepComponent.prototype.optionFormatter = function (field) {
            return field.name;
        };
        FieldSelectionStepComponent.prototype.getJoinFieldDefinitions = function (record, sourceType) {
            var _this = this;
            return lodash.map(record === null || record === void 0 ? void 0 : record.fieldDefinitions, function (fieldDefinition) {
                var joinFieldDefinition = lodash.cloneDeep(fieldDefinition);
                joinFieldDefinition.fieldMapping = {
                    resourceType: i1$5.RX_RECORD_DEFINITION.joinFieldMapping,
                    sourceFieldId: fieldDefinition.id,
                    source: sourceType
                };
                joinFieldDefinition.id = _this.rxGuidService.generate('rx-');
                // Join record should not carry forward FTS properties from primary and secondary record.
                if (joinFieldDefinition.searchDefinition) {
                    joinFieldDefinition.searchDefinition = null;
                }
                delete joinFieldDefinition.lastUpdateTime;
                return joinFieldDefinition;
            });
        };
        FieldSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return FieldSelectionStepComponent;
    }());
    /** @nocollapse */ FieldSelectionStepComponent$1.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectionStepComponent$1, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: i5__namespace$1.RxGuidService }, { token: i1__namespace$5.RxRecordDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FieldSelectionStepComponent$1.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldSelectionStepComponent$1, selector: "ax-field-selection-step", ngImport: i0__namespace, template: "<div class=\"d-flex flex-column mh-100\">\n  <div>\n    <adapt-alert *ngIf=\"hasDuplicates$ | async\" class=\"mb-3\" [config]=\"alertConfig\"></adapt-alert>\n  </div>\n\n  <label>{{ selectLabel }}</label>\n\n  <div class=\"d-flex flex-row select-container\">\n    <adapt-rx-select\n      class=\"d-flex flex-column h-100\"\n      *ngIf=\"primaryAvailableFields$ | async as primaryAvailableFields\"\n      [inline]=\"true\"\n      [multiple]=\"true\"\n      [options]=\"primaryAvailableFields\"\n      [optionFormatter]=\"optionFormatter\"\n      [selectAllButton]=\"true\"\n      [deselectAllButton]=\"true\"\n      [texts]=\"selectTexts\"\n      [popupMaxHeight]=\"'100%'\"\n      [formControl]=\"primarySelectedFieldsFormControl\"\n      [label]=\"'com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.primary-record.label' | translate\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"ml-4 d-flex flex-column h-100\"\n      *ngIf=\"secondaryAvailableFields$ | async as secondaryAvailableFields\"\n      [inline]=\"true\"\n      [multiple]=\"true\"\n      [options]=\"secondaryAvailableFields\"\n      [optionFormatter]=\"optionFormatter\"\n      [selectAllButton]=\"true\"\n      [deselectAllButton]=\"true\"\n      [texts]=\"selectTexts\"\n      [popupMaxHeight]=\"'100%'\"\n      [formControl]=\"secondarySelectedFieldsFormControl\"\n      [label]=\"\n        'com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.secondary-record.label' | translate\n      \"\n    >\n    </adapt-rx-select>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;position:relative;height:100%}:host ::ng-deep adapt-rx-select{width:100%;max-width:400px}:host ::ng-deep adapt-rx-select .rx-select__options-wrapper{flex:1 1 auto;overflow:auto}.select-container{overflow:auto}\n"], components: [{ type: i1__namespace.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectionStepComponent$1, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-field-selection-step',
                        templateUrl: './field-selection-step.component.html',
                        styleUrls: ['./field-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: i5__namespace$1.RxGuidService }, { type: i1__namespace$5.RxRecordDefinitionService }]; } });

    var JoinCriteriaExpressionConfigurator = /** @class */ (function (_super) {
        __extends(JoinCriteriaExpressionConfigurator, _super);
        function JoinCriteriaExpressionConfigurator(primaryRecordDefinition, secondaryRecordDefinition, injector) {
            var _this = _super.call(this) || this;
            _this.commonDataDictionary$ = null;
            var translateService = injector.get(i3.TranslateService);
            var rxDefinitionNameService = injector.get(i2.RxDefinitionNameService);
            var records = [
                {
                    recordDefinitionName: rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name),
                    label: "(" + translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.primary.label') + ")",
                    type: i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.primary,
                    fieldDefinitions: primaryRecordDefinition.fieldDefinitions
                },
                {
                    recordDefinitionName: rxDefinitionNameService.getDisplayName(secondaryRecordDefinition.name),
                    label: "(" + translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.secondary.label') + ")",
                    type: i1$5.RX_RECORD_DEFINITION.sourceRecordTypes.secondary,
                    fieldDefinitions: secondaryRecordDefinition.fieldDefinitions
                }
            ];
            _this.commonDataDictionary$ = rxjs.of(records.map(function (record) { return ({
                label: record.recordDefinitionName + " " + record.label,
                expanded: true,
                children: lodash.chain(record.fieldDefinitions)
                    .map(function (fieldDefinition) {
                    if (fieldDefinition.resourceType !== i1$5.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType) {
                        return {
                            label: record.recordDefinitionName + "." + fieldDefinition.name,
                            icon: 'd-icon-field_text',
                            expression: "${" + record.recordDefinitionName + "." + record.type + "." + fieldDefinition.name + "}"
                        };
                    }
                })
                    .compact()
                    .sortBy(function (item) { return item.label.toLocaleLowerCase(); })
                    .value()
            }); }));
            return _this;
        }
        return JoinCriteriaExpressionConfigurator;
    }(i2.RxExpressionConfigurator));

    var JoinCriteriaStepComponent = /** @class */ (function () {
        function JoinCriteriaStepComponent(injector, translateService, rxExpressionEditorService, rxWizardModalComponent, rxRecordDefinitionCacheService) {
            this.injector = injector;
            this.translateService = translateService;
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.isExpressionFormControlVisible = false;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.expressionFormControlLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.on-statement.label');
            this.expressionFormControlTooltip = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.on-statement.tooltip');
        }
        JoinCriteriaStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var primaryRecordDefinition$ = this.rxWizardModalComponent.context$.pipe(operators.pluck('primaryRecordDefinitionName'), operators.distinctUntilChanged(), operators.filter(Boolean), operators.switchMap(function (primaryRecordDefinitionName) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(primaryRecordDefinitionName); }));
            var secondaryRecordDefinition$ = this.rxWizardModalComponent.context$.pipe(operators.pluck('secondaryRecordDefinitionName'), operators.distinctUntilChanged(), operators.filter(Boolean), operators.switchMap(function (secondaryRecordDefinitionName) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(secondaryRecordDefinitionName); }));
            this.expressionOptions$ = rxjs.combineLatest([primaryRecordDefinition$, secondaryRecordDefinition$]).pipe(operators.tap(function () {
                _this.isExpressionFormControlVisible = false;
                setTimeout(function () {
                    _this.isExpressionFormControlVisible = true;
                });
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), primaryRecordDefinition = _b[0], secondaryRecordDefinition = _b[1];
                _this.expressionConfigurator = new JoinCriteriaExpressionConfigurator(primaryRecordDefinition, secondaryRecordDefinition, _this.injector);
                _this.expressionConfigurator.configureForProperty({
                    propertyPath: 'joinCriteria',
                    operators: i2.ExpressionOperatorRowsByGroup.get(i2.ExpressionOperatorGroup.All)
                });
                return {
                    dataDictionary$: _this.expressionConfigurator.getDataDictionary('joinCriteria'),
                    label: _this.expressionFormControlLabel,
                    tooltip: {
                        iconName: 'question_circle_o',
                        content: _this.expressionFormControlTooltip
                    },
                    operators: _this.expressionConfigurator.getOperators('joinCriteria')
                };
            }));
        };
        JoinCriteriaStepComponent.prototype.openEditor = function () {
            var _this = this;
            this.rxWizardModalComponent.context$
                .pipe(operators.pluck('joinCriteria'), operators.take(1), operators.switchMap(function (joinCriteria) { return _this.rxExpressionEditorService.openEditor({
                property: {
                    value: joinCriteria,
                    path: 'joinCriteria',
                    label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.on-statement.label')
                },
                expressionConfigurator: _this.expressionConfigurator,
                legend: [
                    {
                        label: _this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            }); }))
                .subscribe(function (expression) {
                _this.rxWizardModalComponent.api.updateContext({ joinCriteria: expression.value });
            });
        };
        JoinCriteriaStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return JoinCriteriaStepComponent;
    }());
    /** @nocollapse */ JoinCriteriaStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinCriteriaStepComponent, deps: [{ token: i0__namespace.Injector }, { token: i3__namespace.TranslateService }, { token: i2__namespace$1.RxExpressionEditorService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i1__namespace$5.RxRecordDefinitionCacheService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ JoinCriteriaStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JoinCriteriaStepComponent, selector: "ax-join-criteria-step", ngImport: i0__namespace, template: "<p>\n  {{ 'com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.info' | translate }}\n</p>\n\n<div *ngIf=\"expressionOptions$ | async as expressionOptions\">\n  <ng-container *ngIf=\"isExpressionFormControlVisible\">\n    <rx-expression-form-control\n      [ngModel]=\"(rxWizardModalComponent.context$ | async).joinCriteria\"\n      (events)=\"openEditor()\"\n      [options]=\"expressionOptions\"\n    ></rx-expression-form-control>\n  </ng-container>\n</div>\n", components: [{ type: i2__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinCriteriaStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-join-criteria-step',
                        templateUrl: 'join-criteria-step.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i3__namespace.TranslateService }, { type: i2__namespace$1.RxExpressionEditorService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i1__namespace$5.RxRecordDefinitionCacheService }]; } });

    var RecordDefinitionsStepComponent = /** @class */ (function () {
        function RecordDefinitionsStepComponent(translateService, rxWizardModalComponent) {
            this.translateService = translateService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.definitionPickerConfig = {
                label: '',
                definitionType: i2$1.RxDefinitionPickerType.Record,
                availableDefinitionPickerStates: {
                    definitionButtonsGroups: [i2$1.RxDefinitionPickerScope.Bundle, i2$1.RxDefinitionPickerScope.All],
                    search: i2$1.RxDefinitionPickerScope.All
                },
                required: true
            };
            this.primaryDefinitionPickerConfig = Object.assign(Object.assign({}, this.definitionPickerConfig), { label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.record-definitions.primary-record.label') });
            this.secondaryDefinitionPickerConfig = Object.assign(Object.assign({}, this.definitionPickerConfig), { label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.record-definitions.secondary-record.label') });
            this.joinTypes = [i1$5.RX_RECORD_DEFINITION.joinTypes.inner, i1$5.RX_RECORD_DEFINITION.joinTypes.outer];
            this.primaryRecordDefinitionNameFormControl = new i4.FormControl('', i4.Validators.required);
            this.secondaryRecordDefinitionNameFormControl = new i4.FormControl('', i4.Validators.required);
            this.joinTypeFormControl = new i4.FormControl([], i4.Validators.required);
        }
        RecordDefinitionsStepComponent.prototype.optionFormatter = function (selectOption) {
            return selectOption.displayName;
        };
        RecordDefinitionsStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxWizardModalComponent.api.disableFinishButton();
            this.rxWizardModalComponent.api.disableNextButton();
            this.primaryRecordDefinitionNameFormControl.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), primaryRecordDefinitionName = _b[0], context = _b[1];
                var newContext = { primaryRecordDefinitionName: primaryRecordDefinitionName };
                if (primaryRecordDefinitionName !== context.primaryRecordDefinitionName) {
                    newContext.joinCriteria = null;
                    newContext.selectedFields = null;
                }
                _this.rxWizardModalComponent.api.updateContext(newContext);
            });
            this.secondaryRecordDefinitionNameFormControl.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), secondaryRecordDefinitionName = _b[0], context = _b[1];
                var newContext = { secondaryRecordDefinitionName: secondaryRecordDefinitionName };
                if (secondaryRecordDefinitionName !== context.primaryRecordDefinitionName) {
                    newContext.joinCriteria = null;
                    newContext.selectedFields = null;
                }
                _this.rxWizardModalComponent.api.updateContext(newContext);
            });
            this.joinTypeFormControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (joinType) {
                _this.rxWizardModalComponent.api.updateContext({
                    joinType: lodash.head(joinType).value
                });
            });
            this.rxWizardModalComponent.context$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (context) {
                if (context.primaryRecordDefinitionName && context.secondaryRecordDefinitionName && context.joinType) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        RecordDefinitionsStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return RecordDefinitionsStepComponent;
    }());
    /** @nocollapse */ RecordDefinitionsStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionsStepComponent, deps: [{ token: i3__namespace.TranslateService }, { token: i2__namespace$1.RxWizardModalComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RecordDefinitionsStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordDefinitionsStepComponent, selector: "ax-record-definitions-step", ngImport: i0__namespace, template: "<div class=\"d-flex flex-column control-width\">\n  <rx-definition-picker\n    [options]=\"primaryDefinitionPickerConfig\"\n    [formControl]=\"primaryRecordDefinitionNameFormControl\"\n    class=\"form-group\"\n  ></rx-definition-picker>\n\n  <rx-definition-picker\n    [options]=\"secondaryDefinitionPickerConfig\"\n    [formControl]=\"secondaryRecordDefinitionNameFormControl\"\n    class=\"form-group\"\n  ></rx-definition-picker>\n\n  <adapt-rx-select\n    [required]=\"true\"\n    [label]=\"'com.bmc.arsys.rx.innovation-studio.join-record-wizard.record-definitions.type.label' | translate\"\n    [options]=\"joinTypes\"\n    [optionFormatter]=\"optionFormatter\"\n    [formControl]=\"joinTypeFormControl\"\n  ></adapt-rx-select>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.control-width{max-width:400px}\n"], components: [{ type: i2__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionsStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-record-definitions-step',
                        templateUrl: './record-definitions-step.component.html',
                        styleUrls: ['./record-definitions-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslateService }, { type: i2__namespace$1.RxWizardModalComponent }]; } });

    var JoinRecordWizardService = /** @class */ (function () {
        function JoinRecordWizardService(rxWizardService, translateService, componentFactoryResolver) {
            this.rxWizardService = rxWizardService;
            this.translateService = translateService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.title = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.title');
            this.finishButtonLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.save.label');
        }
        JoinRecordWizardService.prototype.open = function () {
            var wizardConfig = {
                title: this.title,
                allowFinish: true,
                finishButtonLabel: this.finishButtonLabel,
                steps: [
                    {
                        id: 'record-definitions',
                        name: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.record-definitions.title'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordDefinitionsStepComponent)
                    },
                    {
                        id: 'join-criteria',
                        name: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.join-criteria.title'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(JoinCriteriaStepComponent)
                    },
                    {
                        id: 'field-selection',
                        name: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.join-record-wizard.field-selection.title'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(FieldSelectionStepComponent$1)
                    }
                ]
            };
            return this.rxWizardService
                .open({
                context: {},
                options: wizardConfig
            })
                .then(function (context) {
                if (context) {
                    return {
                        primaryRecordDefinitionName: context.primaryRecordDefinitionName,
                        secondaryRecordDefinitionName: context.secondaryRecordDefinitionName,
                        joinCriteria: context.joinCriteria,
                        joinType: context.joinType,
                        resourceType: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType,
                        fieldDefinitions: context.selectedFields
                    };
                }
                else {
                    return null;
                }
            });
        };
        return JoinRecordWizardService;
    }());
    /** @nocollapse */ JoinRecordWizardService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardService, deps: [{ token: i2__namespace$1.RxWizardService }, { token: i3__namespace.TranslateService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ JoinRecordWizardService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardService }, { type: i3__namespace.TranslateService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var DocumentSelectionStepComponent = /** @class */ (function () {
        function DocumentSelectionStepComponent(rxExternalDataService, rxWizardModalComponent, translateService) {
            this.rxExternalDataService = rxExternalDataService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        DocumentSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.document-selection.label');
            var gridColumns = [
                {
                    fieldId: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    cellTemplate: this.documentNameCellTemplate
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.document-selection.grid.empty-state.label'),
                enableRowSelection: i5.RowSelectionMode.Single,
                enableFiltering: false,
                recordIdField: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return _this.context.webApi
                    ? _this.rxExternalDataService.getWebApiDocuments(_this.getWebApiRequests())
                    : rxjs.of({
                        totalSize: 0,
                        data: []
                    }); }
            });
            this.recordGrid.rowSelectionChanged
                .pipe(operators.skip(2), operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedRows) {
                _this.rxWizardModalComponent.api.updateContext({
                    document: lodash.head(selectedRows) || null
                });
            });
            var documentSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            documentSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.webApi; }), operators.distinctUntilChanged(lodash.isEqual), operators.skip(1))
                .subscribe(function () {
                _this.rxWizardModalComponent.api.updateContext({ document: null });
                _this.recordGrid.api.refresh().subscribe();
            });
            var isCurrentStep$ = rxjs.combineLatest([
                this.rxWizardModalComponent.steps$,
                this.rxWizardModalComponent.tabIndex$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), steps = _b[0], tabIndex = _b[1];
                return steps[tabIndex].id === 'document-selection';
            }), operators.takeUntil(this.destroyed$));
            var changedDocument$ = documentSelectionStepContext$.pipe(operators.map(function (stepContext) { return stepContext.document; }), operators.distinctUntilChanged(lodash.isEqual));
            rxjs.combineLatest([isCurrentStep$, changedDocument$])
                .pipe(operators.filter(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], changedDocument = _b[1];
                return isCurrentStep;
            }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], changedDocument = _b[1];
                if (changedDocument) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        DocumentSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        DocumentSelectionStepComponent.prototype.getWebApiRequests = function () {
            return this.context.webApi.requestDefinitions.reduce(function (result, requestDefinition) {
                if (requestDefinition.body && !result[requestDefinition.body]) {
                    result[requestDefinition.body] = requestDefinition.body;
                }
                if (requestDefinition.output && !result[requestDefinition.output]) {
                    result[requestDefinition.output] = requestDefinition.output;
                }
                return result;
            }, {});
        };
        return DocumentSelectionStepComponent;
    }());
    /** @nocollapse */ DocumentSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentSelectionStepComponent, deps: [{ token: RxExternalDataService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DocumentSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DocumentSelectionStepComponent, selector: "ax-document-selection-wizard-step", inputs: { context: "context" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }, { propertyName: "documentNameCellTemplate", first: true, predicate: ["documentNameCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<adapt-rx-control-label [label]=\"sectionLabel\" [showRequiredLabel]=\"true\"></adapt-rx-control-label>\n\n<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n\n<ng-template #documentNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-document-selection-wizard-step',
                        templateUrl: 'document-selection-step.component.html',
                        styleUrls: ['./document-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxExternalDataService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }], documentNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['documentNameCellTemplate', { static: true }]
                }] } });

    var FieldSelectionStepComponent = /** @class */ (function () {
        function FieldSelectionStepComponent(rxWizardModalComponent, translateService) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.externalFieldIdPath = 'fieldMapping.externalFieldId';
            this.availableExternalColumns = [];
            this.selectedExternalColumns = [];
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        FieldSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.availableFieldsSectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.available-fields.section.label');
            this.selectedFieldsSectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.selected-fields.section.label');
            this.rxWizardModalComponent.api.enableFinishButton();
            var fieldSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            fieldSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.mappedInternalFields; }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function () { return _this.updateGridsData(); });
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'name'
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.field-id.label'),
                    fieldId: 'id',
                    sortable: {
                        direction: i5.ColumnSortDirection.Asc,
                        priority: 1
                    }
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label'),
                    fieldId: 'resourceType',
                    cellTemplate: this.resourceTypeCellTemplate
                }
            ];
            var selectColumnGridConfig = {
                columns: gridColumns,
                enableColumnSelection: false,
                enableFiltering: false,
                enableRowSelection: i5.RowSelectionMode.Multiple,
                recordIdField: 'id',
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of({
                    fieldDefinitions: [
                        {
                            id: 'name',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'id',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'resourceType',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        }
                    ]
                }); }
            };
            this.availableFieldsGridConfig$ = rxjs.of(lodash.defaults({
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.available-fields.grid.empty-state.label'),
                getData: function () { return rxjs.of({
                    totalSize: _this.availableExternalColumns.length,
                    data: _this.availableExternalColumns
                }); }
            }, selectColumnGridConfig));
            this.selectedFieldsGridConfig$ = rxjs.of(lodash.defaults({
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.selected-fields.grid.empty-state.label'),
                getData: function () { return rxjs.of({
                    totalSize: _this.selectedExternalColumns.length,
                    data: _this.selectedExternalColumns
                }); }
            }, selectColumnGridConfig));
        };
        FieldSelectionStepComponent.prototype.deselectColumns = function () {
            var sourceColumnIds = lodash.map(this.selectedFieldsGrid.api.getSelectedRows(), 'id');
            this.moveColumns(sourceColumnIds, this.selectedExternalColumns, this.availableExternalColumns);
        };
        FieldSelectionStepComponent.prototype.selectColumns = function () {
            var sourceColumnIds = lodash.map(this.availableFieldsGrid.api.getSelectedRows(), 'id');
            this.moveColumns(sourceColumnIds, this.availableExternalColumns, this.selectedExternalColumns);
        };
        FieldSelectionStepComponent.prototype.getAvailableColumns = function () {
            var _this = this;
            return lodash.reject(this.context.externalTableDefinition.fieldDefinitions, function (column) { return _this.isAssociatedColumn(column) || _this.isSelectedColumn(column); });
        };
        FieldSelectionStepComponent.prototype.getExternalFieldId = function (column) {
            return lodash.get(column, this.externalFieldIdPath);
        };
        FieldSelectionStepComponent.prototype.isAssociatedColumn = function (column) {
            return lodash.some(this.context.mappedInternalFields, [this.externalFieldIdPath, this.getExternalFieldId(column)]);
        };
        FieldSelectionStepComponent.prototype.isSelectedColumn = function (column) {
            return lodash.some(this.selectedExternalColumns, [this.externalFieldIdPath, this.getExternalFieldId(column)]);
        };
        FieldSelectionStepComponent.prototype.moveColumns = function (columnIds, source, target) {
            lodash.chain(source)
                .remove(function (column) { return lodash.includes(columnIds, column.id); })
                .forEach(function (column) { return target.push(column); })
                .value();
            this.refreshElements();
            this.rxWizardModalComponent.api.updateContext({ selectedExternalFields: this.selectedExternalColumns });
        };
        FieldSelectionStepComponent.prototype.refreshElements = function () {
            var _a, _b;
            (_a = this.availableFieldsGrid) === null || _a === void 0 ? void 0 : _a.api.refresh().subscribe();
            (_b = this.selectedFieldsGrid) === null || _b === void 0 ? void 0 : _b.api.refresh().subscribe();
        };
        FieldSelectionStepComponent.prototype.updateGridsData = function () {
            this.selectedExternalColumns = [];
            this.availableExternalColumns = this.getAvailableColumns();
            this.refreshElements();
        };
        FieldSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return FieldSelectionStepComponent;
    }());
    /** @nocollapse */ FieldSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectionStepComponent, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FieldSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldSelectionStepComponent, selector: "ax-field-selection-step", inputs: { context: "context" }, viewQueries: [{ propertyName: "resourceTypeCellTemplate", first: true, predicate: ["resourceTypeCellTemplate"], descendants: true, static: true }, { propertyName: "availableFieldsGrid", first: true, predicate: ["availableFieldsGrid"], descendants: true }, { propertyName: "selectedFieldsGrid", first: true, predicate: ["selectedFieldsGrid"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"rx-external-record-wizard__content\">\n  <div class=\"rx-external-record-wizard__content--left\">\n    <adapt-rx-control-label [label]=\"availableFieldsSectionLabel\"></adapt-rx-control-label>\n    <rx-record-grid #availableFieldsGrid [config]=\"availableFieldsGridConfig$\"></rx-record-grid>\n  </div>\n  <div class=\"rx-external-record-wizard__content--middle\">\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"secondary\"\n      class=\"d-icon-angle_right\"\n      rx-id=\"select-button\"\n      [disabled]=\"!availableFieldsGrid?.api.getSelectedRowCount()\"\n      (click)=\"selectColumns()\"\n    ></button>\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"secondary\"\n      class=\"d-icon-angle_left\"\n      rx-id=\"deselect-button\"\n      [disabled]=\"!selectedFieldsGrid?.api.getSelectedRowCount()\"\n      (click)=\"deselectColumns()\"\n    ></button>\n  </div>\n  <div class=\"rx-external-record-wizard__content--right\">\n    <adapt-rx-control-label [label]=\"selectedFieldsSectionLabel\"></adapt-rx-control-label>\n    <rx-record-grid #selectedFieldsGrid [config]=\"selectedFieldsGridConfig$\"></rx-record-grid>\n  </div>\n</div>\n\n<ng-template #resourceTypeCellTemplate let-dataItem=\"dataItem\">\n  {{ dataItem.resourceType | rxRecordDefinitionResourceType }}\n</ng-template>\n", styles: [":host{display:flex;height:100%}:host .rx-external-record-wizard__content{display:flex}:host .rx-external-record-wizard__content--left,:host .rx-external-record-wizard__content--right{flex:0 0 45%;max-width:45%}:host .rx-external-record-wizard__content--middle{flex:0 0 10%;display:flex;flex-direction:column;justify-content:center;align-items:center}:host .rx-external-record-wizard__content--middle>*:not(:first-child){margin-top:5px}:host rx-record-grid{height:calc(100% - 1.5rem)}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "rxRecordDefinitionResourceType": i1__namespace$5.RxRecordDefinitionResourceTypePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-field-selection-step',
                        templateUrl: 'field-selection-step.component.html',
                        styleUrls: ['./field-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], resourceTypeCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['resourceTypeCellTemplate', { static: true }]
                }], availableFieldsGrid: [{
                    type: i0.ViewChild,
                    args: ['availableFieldsGrid']
                }], selectedFieldsGrid: [{
                    type: i0.ViewChild,
                    args: ['selectedFieldsGrid']
                }] } });

    var FieldTreeSelectionStepComponent = /** @class */ (function () {
        function FieldTreeSelectionStepComponent(rxDefinitionNameService, rxDocumentDefinitionService, rxJsonParserService, rxWizardModalComponent, translateService) {
            var _this = this;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxDocumentDefinitionService = rxDocumentDefinitionService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.selectedDocumentTreeNodes = [];
            this.treeWrap = i1.TreeWrap.WrapAll;
            this.selectedDocumentSchemaFields = [];
            this.selectedFieldsGroup = new i4.FormGroup({});
            this.mappingGroup = new i4.FormGroup({
                displayId: new i4.FormControl([]),
                id: new i4.FormControl([])
            });
            this.supportedFieldTypes = ['boolean', 'character', 'dateOnly', 'dateTime', 'decimal', 'integer', 'real', 'timeOnly'];
            this.fieldTypes = lodash.sortBy(lodash.reduce(i1$5.RX_RECORD_DEFINITION.dataTypes, function (result, type, key) {
                if (lodash.includes(_this.supportedFieldTypes, key)) {
                    result.push(type);
                }
                return result;
            }, []), 'displayName');
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        FieldTreeSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.availableFieldsSectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.available-fields.section.label');
            this.mapToDisplayIdLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.map-to-display-id.label');
            this.mapToIdLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.map-to-id.label');
            this.selectedFieldsSectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.selected-fields.section.label');
            var gridColumns = [
                {
                    fieldId: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    title: this.translateService.instant(AX_BUNDLE_DETAILS.definitionGridColumns.name.title)
                },
                {
                    fieldId: 'type',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label'),
                    sortable: false,
                    cellTemplate: this.typeCellTemplate
                },
                {
                    fieldId: 'delete',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    sortable: false,
                    cellTemplate: this.deleteCellTemplate
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'type',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'delete',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.grid.empty-state.label'),
                enableFiltering: false,
                enableRowSelection: null,
                recordIdField: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                styles: 'flex-fill',
                toolbarConfig: {
                    filter: false,
                    visibleColumnsMenu: false
                },
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return rxjs.of({
                    data: _this.selectedDocumentSchemaFields,
                    totalSize: _this.selectedDocumentSchemaFields.length
                }); }
            });
            var fieldTreeSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            fieldTreeSelectionStepContext$
                .pipe(operators.map(function (stepContext) { var _a; return (_a = stepContext.document) === null || _a === void 0 ? void 0 : _a.name; }), operators.distinctUntilChanged(lodash.isEqual), operators.switchMap(function (documentName) {
                _this.selectedDocumentTreeNodes = [];
                _this.selectedDocumentSchemaFields = [];
                _this.rxWizardModalComponent.api.updateContext({
                    documentSchemaFields: [],
                    nonDocumentSchemaFields: []
                });
                if (documentName) {
                    return _this.rxDocumentDefinitionService.get(documentName);
                }
                else {
                    return rxjs.of();
                }
            }), operators.skipWhile(lodash.isEmpty))
                .subscribe(function (documentDefinition) {
                _this.documentTree = [
                    {
                        data: documentDefinition.guid,
                        label: _this.rxDefinitionNameService.getDisplayName(documentDefinition.name),
                        children: _this.prepareTreeForAdapt(documentDefinition.documentSchema, []),
                        expanded: true,
                        disallowMultipleNodeSelection: true
                    }
                ];
                _this.recordGrid.api.refresh().subscribe();
            });
            var isCurrentStep$ = rxjs.combineLatest([
                this.rxWizardModalComponent.steps$,
                this.rxWizardModalComponent.tabIndex$
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 2), steps = _d[0], tabIndex = _d[1];
                return steps[tabIndex].id === 'field-tree-selection';
            }), operators.takeUntil(this.destroyed$));
            var documentSchemaFields$ = fieldTreeSelectionStepContext$.pipe(operators.map(function (stepContext) { return stepContext.documentSchemaFields; }), operators.distinctUntilChanged(lodash.isEqual));
            rxjs.combineLatest([isCurrentStep$, documentSchemaFields$])
                .pipe(operators.filter(function (_c) {
                var _d = __read(_c, 2), isCurrentStep = _d[0], documentSchemaFields = _d[1];
                return isCurrentStep;
            }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), isCurrentStep = _d[0], documentSchemaFields = _d[1];
                if (documentSchemaFields.length) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
                lodash.forEach(_this.mappingGroup.controls, function (formControl) {
                    if (formControl.value.length && !lodash.some(documentSchemaFields, ['path', formControl.value[0].path])) {
                        formControl.reset([]);
                    }
                });
            });
            this.mappingGroup.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (mappedValues) {
                var _a, _b;
                var selectedFieldMapping = {
                    displayId: (mappedValues.displayId && ((_a = mappedValues.displayId[0]) === null || _a === void 0 ? void 0 : _a.path)) || '',
                    id: (mappedValues.id && ((_b = mappedValues.id[0]) === null || _b === void 0 ? void 0 : _b.path)) || ''
                };
                _this.rxWizardModalComponent.api.updateContext({ selectedFieldMapping: selectedFieldMapping });
            });
            this.selectedFieldsGroup.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), value = _d[0], context = _d[1];
                var documentSchemaFields = lodash.cloneDeep(context.documentSchemaFields);
                documentSchemaFields.forEach(function (field) {
                    field.type = value[field.path][0].resourceType;
                });
                _this.rxWizardModalComponent.api.updateContext({ documentSchemaFields: documentSchemaFields });
            });
        };
        FieldTreeSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        FieldTreeSelectionStepComponent.prototype.getCoreFieldMappingOptions = function () {
            return lodash.sortBy(this.selectedDocumentSchemaFields, 'name');
        };
        FieldTreeSelectionStepComponent.prototype.optionFormatter = function (selectOption) {
            return selectOption.displayName || selectOption.name;
        };
        FieldTreeSelectionStepComponent.prototype.selectFields = function () {
            var _this = this;
            this.selectedDocumentSchemaFields = this.selectedDocumentTreeNodes.reduce(function (result, node) {
                if (!node.children) {
                    var field = {
                        name: node.name,
                        path: node.path,
                        type: i1$5.RX_RECORD_DEFINITION.dataTypes.character.resourceType
                    };
                    if (!node.disallowMultipleNodeSelection) {
                        node.disallowMultipleNodeSelection = true;
                        _this.selectedFieldsGroup.setControl(node.path, new i4.FormControl([i1$5.RX_RECORD_DEFINITION.dataTypes.character]));
                    }
                    result.push(field);
                }
                return result;
            }, []);
            this.rxWizardModalComponent.api.updateContext({
                documentSchemaFields: lodash.cloneDeep(this.selectedDocumentSchemaFields)
            });
            this.recordGrid.api.refresh().subscribe();
        };
        FieldTreeSelectionStepComponent.prototype.unselectField = function (field) {
            lodash.find(this.selectedDocumentTreeNodes, { data: field.path }).disallowMultipleNodeSelection = false;
            this.selectedDocumentTreeNodes = this.selectedDocumentTreeNodes.filter(function (node) { var _a; return node.data !== field.path && !((_a = node.children) === null || _a === void 0 ? void 0 : _a.some(function (element) { return element.data === field.path; })); });
            lodash.remove(this.selectedDocumentSchemaFields, { path: field.path });
            this.rxWizardModalComponent.api.updateContext({
                documentSchemaFields: lodash.cloneDeep(this.selectedDocumentSchemaFields)
            });
            this.recordGrid.api.refresh().subscribe();
        };
        FieldTreeSelectionStepComponent.prototype.prepareTreeForAdapt = function (documentSchema, selectedFields) {
            var documentSchemaJson = this.rxJsonParserService.tryParseJson(documentSchema, {});
            if (lodash.isArray(documentSchemaJson)) {
                documentSchemaJson = lodash.head(documentSchemaJson);
            }
            return this.deepProcessJson(documentSchemaJson, '', [], selectedFields);
        };
        // Due to backend limitation, arrays can be processed only once per node
        // i.e. all arrays nested in arrays should be displayed as a leaf and in the tree
        // In runtime server will store complete stringified array as a value in record definition
        FieldTreeSelectionStepComponent.prototype.deepProcessJson = function (json, currentPath, arraysProcessedInPath, selectedFields, parentNode) {
            var _this = this;
            return lodash.reduce(json, function (tree, value, key) {
                var path = (currentPath ? currentPath + '||' : '') + key;
                var isNodeSelected = lodash.some(selectedFields, ['path', path]);
                var childNodes = null;
                var node = {
                    name: key,
                    label: key,
                    data: path,
                    path: path,
                    type: i1$5.RX_RECORD_DEFINITION.resourceTypes.character,
                    isArray: lodash.isArray(value),
                    parent: parentNode,
                    children: null,
                    expanded: true,
                    disallowMultipleNodeSelection: null
                };
                if (lodash.isArray(value)) {
                    var arrayHasBeenProcessedInSamePath = arraysProcessedInPath.some(function (processedPath) { return path.indexOf(processedPath) !== -1; });
                    if (!arrayHasBeenProcessedInSamePath) {
                        arraysProcessedInPath.push(path);
                        childNodes = _this.flattenListStructure(value, path, arraysProcessedInPath, selectedFields, node);
                    }
                }
                else if (lodash.isObject(value)) {
                    childNodes = _this.deepProcessJson(value, path, arraysProcessedInPath, selectedFields, node);
                }
                node.children = childNodes;
                node.disallowMultipleNodeSelection = Boolean(childNodes);
                tree.push(node);
                return tree;
            }, []);
        };
        FieldTreeSelectionStepComponent.prototype.flattenListStructure = function (list, currentPath, arraysProcessedInPath, selectedFields, parentNode) {
            var entry = lodash.head(list);
            return lodash.isObject(entry)
                ? this.deepProcessJson(entry, currentPath, arraysProcessedInPath, selectedFields, parentNode)
                : [];
        };
        return FieldTreeSelectionStepComponent;
    }());
    /** @nocollapse */ FieldTreeSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldTreeSelectionStepComponent, deps: [{ token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$3.RxDocumentDefinitionService }, { token: i5__namespace$1.RxJsonParserService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FieldTreeSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldTreeSelectionStepComponent, selector: "ax-field-tree-selection-step", viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }, { propertyName: "typeCellTemplate", first: true, predicate: ["typeCellTemplate"], descendants: true, static: true }, { propertyName: "deleteCellTemplate", first: true, predicate: ["deleteCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"row\">\n  <div class=\"col-5 d-flex flex-column pr-0 mh-100\">\n    <adapt-rx-control-label [label]=\"availableFieldsSectionLabel\"></adapt-rx-control-label>\n    <div class=\"border h-100 p-1 field-tree-wrapper\">\n      <adapt-tree\n        [(selection)]=\"selectedDocumentTreeNodes\"\n        [value]=\"documentTree\"\n        [wrap]=\"treeWrap\"\n        selectionMode=\"checkbox\"\n      ></adapt-tree>\n    </div>\n  </div>\n\n  <div class=\"col-1 d-flex align-items-center\">\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"secondary\"\n      class=\"d-icon-angle_right\"\n      rx-id=\"add-button\"\n      (click)=\"selectFields()\"\n    ></button>\n  </div>\n\n  <div class=\"col-6 d-flex flex-column pl-0\">\n    <adapt-rx-control-label [label]=\"selectedFieldsSectionLabel\" [showRequiredLabel]=\"true\"></adapt-rx-control-label>\n\n    <rx-record-grid class=\"form-group\" [config]=\"recordGridConfig$\"></rx-record-grid>\n\n    <div class=\"d-flex flex-column control-width\">\n      <adapt-rx-select\n        class=\"form-group\"\n        appendToBody=\"true\"\n        [formControl]=\"mappingGroup.controls.displayId\"\n        [label]=\"mapToDisplayIdLabel\"\n        [options]=\"getCoreFieldMappingOptions()\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n      <adapt-rx-select\n        appendToBody=\"true\"\n        [formControl]=\"mappingGroup.controls.id\"\n        [label]=\"mapToIdLabel\"\n        [options]=\"getCoreFieldMappingOptions()\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n    </div>\n  </div>\n</div>\n\n<ng-template #typeCellTemplate let-dataItem=\"dataItem\">\n  <adapt-rx-select\n    class=\"type-selector\"\n    appendToBody=\"true\"\n    [formControl]=\"selectedFieldsGroup.controls[dataItem.path]\"\n    [options]=\"fieldTypes\"\n    [optionFormatter]=\"optionFormatter\"\n    [popupMaxHeight]=\"290\"\n  >\n  </adapt-rx-select>\n</ng-template>\n\n<ng-template #deleteCellTemplate let-dataItem=\"dataItem\">\n  <button\n    class=\"unselect-field-button d-icon-minus_circle text-danger\"\n    adapt-button\n    btn-type=\"tertiary\"\n    type=\"button\"\n    (click)=\"unselectField(dataItem)\"\n  ></button>\n</ng-template>\n", styles: [":host{display:flex;height:100%}:host ::ng-deep .rx-custom-cell{max-height:38px}:host ::ng-deep .type-selector,:host ::ng-deep .unselect-field-button{margin:-.5rem -13px}rx-record-grid{height:100%}.field-tree-wrapper{overflow:auto}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldTreeSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-field-tree-selection-step',
                        templateUrl: 'field-tree-selection-step.component.html',
                        styleUrls: ['./field-tree-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$3.RxDocumentDefinitionService }, { type: i5__namespace$1.RxJsonParserService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }], typeCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['typeCellTemplate', { static: true }]
                }], deleteCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['deleteCellTemplate', { static: true }]
                }] } });

    var OperationSelectionStepComponent = /** @class */ (function () {
        function OperationSelectionStepComponent(rxDefinitionNameService, rxWizardModalComponent, translateService) {
            var _this = this;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.availableOperationTypes = ['GET'];
            this.operationTypeFormControl = new i4.FormControl('GET', null);
            this.webApiRequestNameFormControl = new i4.FormControl([], i4.Validators.required);
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.optionFormatter = function (option) { return _this.rxDefinitionNameService.getDisplayName(option.displayValue); };
        }
        OperationSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.operationTypeLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.operation-selection.operation-type.section.label');
            this.webApiRequestLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.operation-selection.web-api-request.section.label');
            var operationSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            operationSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.document; }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (document) {
                _this.webApiRequestNameFormControl.setValue([]);
                _this.availableRequests = document
                    ? _this.context.webApi.requestDefinitions.reduce(function (result, request) {
                        if (lodash.includes(_this.availableOperationTypes, request.method) && request.output === document.name) {
                            result.push({
                                webRequestGuid: request.guid,
                                displayValue: request.name,
                                method: request.method
                            });
                        }
                        return result;
                    }, [])
                    : [];
            });
            operationSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.operations; }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (operations) {
                if (operations) {
                    _this.rxWizardModalComponent.api.enableFinishButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableFinishButton();
                }
            });
            this.webApiRequestNameFormControl.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedWebApiRequest) {
                _this.rxWizardModalComponent.api.updateContext({
                    operations: selectedWebApiRequest.length
                        ? selectedWebApiRequest.map(function (request) { return ({
                            webRequestGuid: request.webRequestGuid,
                            operation: request.method
                        }); })
                        : null
                });
            });
        };
        return OperationSelectionStepComponent;
    }());
    /** @nocollapse */ OperationSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OperationSelectionStepComponent, deps: [{ token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ OperationSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: OperationSelectionStepComponent, selector: "ax-operation-selection-step", inputs: { context: "context" }, ngImport: i0__namespace, template: "<div class=\"row\">\n  <div class=\"col-2\">\n    <adapt-rx-control-label [label]=\"operationTypeLabel\"></adapt-rx-control-label>\n  </div>\n  <div class=\"col-10\">\n    <adapt-rx-control-label [label]=\"webApiRequestLabel\" [showRequiredLabel]=\"true\"></adapt-rx-control-label>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-2\">\n    <adapt-rx-radiobutton-group [formControl]=\"operationTypeFormControl\">\n      <adapt-rx-radiobutton *ngFor=\"let item of availableOperationTypes\" [value]=\"item\" [label]=\"item\">\n      </adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n  </div>\n  <div class=\"col-10\">\n    <adapt-rx-select\n      [options]=\"availableRequests\"\n      [required]=\"true\"\n      [formControl]=\"webApiRequestNameFormControl\"\n      [optionFormatter]=\"optionFormatter\"\n    ></adapt-rx-select>\n  </div>\n</div>\n", components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OperationSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-operation-selection-step',
                        templateUrl: 'operation-selection-step.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }] } });

    var RecordIdFieldsStepComponent = /** @class */ (function () {
        function RecordIdFieldsStepComponent(rxExternalDataService, rxWizardModalComponent, translateService) {
            this.rxExternalDataService = rxExternalDataService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.externalColumns = [];
            this.externalColumnIds = [];
            this.internalFieldsForMapping = [];
            this.rawExternalColumns = [];
            this.gridRowsData = [];
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.externalColumnOptionFormatter = function (externalColumnOption) { return externalColumnOption.name; };
            this.externalColumnIdOptionFormatter = function (externalColumnOption) { return externalColumnOption.id; };
        }
        RecordIdFieldsStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.label');
            this.sectionInfoLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.section-info.label');
            this.sectionInfoTooltip = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.section-info.tooltip');
            this.rxWizardModalComponent.api.disableNextButton();
            var recordIdFieldsStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            recordIdFieldsStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.tableName; }), operators.distinctUntilChanged(lodash.isEqual), operators.switchMap(function (tableName) {
                _this.rawExternalColumns = [];
                _this.gridRowsData = [];
                _this.externalColumnIds = [];
                _this.externalColumns = [];
                if (_this.recordIdFieldsStepRecordGrid) {
                    _this.recordIdFieldsStepRecordGrid.api.refresh().subscribe();
                }
                if (tableName) {
                    _this.internalFieldsForMapping = lodash.chain(i1$5.RX_RECORD_DEFINITION.coreFields)
                        .filter(function (field) { return i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds.includes(field.id); })
                        .map(function (coreField) { return lodash.defaults(lodash.cloneDeep(coreField), { fieldMapping: { externalFieldId: String(coreField.id) } }); })
                        .value();
                    return _this.rxExternalDataService.getArsTableDefinition(_this.context.dataSourceName, tableName);
                }
                else {
                    _this.internalFieldsForMapping = [];
                    _this.rxWizardModalComponent.api.updateContext({
                        externalTableDefinition: {},
                        mappedInternalFields: []
                    });
                    return rxjs.of();
                }
            }), operators.skipWhile(lodash.isEmpty))
                .subscribe(function (externalTableDefinition) {
                _this.rawExternalColumns = externalTableDefinition.fieldDefinitions;
                _this.setGridRowsData();
                _this.rxWizardModalComponent.api.updateContext({
                    externalTableDefinition: externalTableDefinition,
                    mappedInternalFields: lodash.cloneDeep(_this.internalFieldsForMapping)
                });
                _this.externalColumnIds = _this.rawExternalColumns.map(function (externalColumn) { return ({
                    id: externalColumn.fieldMapping.externalFieldId,
                    name: externalColumn.name
                }); });
                _this.externalColumns = lodash.sortBy(_this.externalColumnIds, 'name');
                _this.recordIdFieldsStepRecordGrid.api.refresh().subscribe();
            });
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.grid.record-id-field.label'),
                    fieldId: 'name'
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.grid.field-id.label'),
                    fieldId: 'id'
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.grid.external-record-id-field.label'),
                    fieldId: 'externalColumnName',
                    sortable: false,
                    cellTemplate: this.externalColumnCellTemplate
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.grid.external-field-id.label'),
                    fieldId: 'externalColumnId',
                    sortable: false,
                    cellTemplate: this.externalColumnIdCellTemplate
                }
            ];
            this.recordIdFieldsRecordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableColumnSelection: false,
                enableFiltering: false,
                enableRowSelection: null,
                recordIdField: 'id',
                styles: 'flex-fill',
                toolbarConfig: {
                    filter: false,
                    visibleColumnsMenu: false
                },
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of({
                    fieldDefinitions: [
                        {
                            id: 'name',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'id',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'externalColumnName',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'externalColumnId',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        }
                    ]
                }); },
                getData: function () { return rxjs.of({
                    totalSize: _this.gridRowsData.length,
                    data: _this.gridRowsData
                }); }
            });
            this.rxWizardModalComponent.api.enableNextButton();
        };
        RecordIdFieldsStepComponent.prototype.onExternalColumnChange = function (rowDataItem) {
            var _a;
            var field = this.internalFieldsForMapping.find(function (internalField) { return internalField.id === rowDataItem.id; });
            field.fieldMapping.externalFieldId = ((_a = rowDataItem.selectedExternalColumns[0]) === null || _a === void 0 ? void 0 : _a.id) || String(field.id);
            this.setGridRowsData();
            this.rxWizardModalComponent.api.updateContext({ mappedInternalFields: lodash.cloneDeep(this.internalFieldsForMapping) });
            this.recordIdFieldsStepRecordGrid.api.refresh().subscribe();
        };
        RecordIdFieldsStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RecordIdFieldsStepComponent.prototype.setGridRowsData = function () {
            var _this = this;
            this.internalFieldsForMapping.forEach(function (internalField) {
                var externalColumn = _this.rawExternalColumns.find(function (column) { return column.fieldMapping.externalFieldId === internalField.fieldMapping.externalFieldId; });
                var selectedExternalColumns = [];
                if (externalColumn) {
                    selectedExternalColumns.push({
                        id: externalColumn.fieldMapping.externalFieldId,
                        name: externalColumn.name
                    });
                }
                var gridRowData = _this.gridRowsData.find(function (_b) {
                    var id = _b.id;
                    return id === internalField.id;
                });
                if (gridRowData) {
                    gridRowData.selectedExternalColumns = selectedExternalColumns;
                }
                else {
                    _this.gridRowsData.push({
                        id: internalField.id,
                        name: internalField.name,
                        selectedExternalColumns: selectedExternalColumns
                    });
                }
            });
        };
        return RecordIdFieldsStepComponent;
    }());
    /** @nocollapse */ RecordIdFieldsStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordIdFieldsStepComponent, deps: [{ token: RxExternalDataService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RecordIdFieldsStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordIdFieldsStepComponent, selector: "ax-record-id-fields-step", inputs: { context: "context" }, viewQueries: [{ propertyName: "recordIdFieldsStepRecordGrid", first: true, predicate: ["recordIdFieldsStepRecordGrid"], descendants: true }, { propertyName: "externalColumnCellTemplate", first: true, predicate: ["externalColumnCellTemplate"], descendants: true, static: true }, { propertyName: "externalColumnIdCellTemplate", first: true, predicate: ["externalColumnIdCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"section-title\">\n  <adapt-rx-control-label [label]=\"sectionLabel\" class=\"section-label\"></adapt-rx-control-label>\n\n  <ng-template #tooltipContentTemplate>\n    <div class=\"text-left\" [innerHTML]=\"sectionInfoTooltip\"></div>\n  </ng-template>\n\n  <span class=\"section-info\">\n    <adapt-icon\n      name=\"info_circle_o_adapt\"\n      [adaptPopover]=\"tooltipContentTemplate\"\n      width=\"250\"\n      placement=\"bottom\"\n    ></adapt-icon>\n    {{ sectionInfoLabel }}\n  </span>\n</div>\n\n<rx-record-grid #recordIdFieldsStepRecordGrid [config]=\"recordIdFieldsRecordGridConfig$\"></rx-record-grid>\n\n<ng-template #externalColumnCellTemplate let-dataItem=\"dataItem\">\n  <adapt-rx-select\n    [options]=\"externalColumns\"\n    [optionFormatter]=\"externalColumnOptionFormatter\"\n    [emptyOption]=\"true\"\n    [(ngModel)]=\"dataItem.selectedExternalColumns\"\n    (ngModelChange)=\"onExternalColumnChange(dataItem)\"\n    [appendToBody]=\"true\"\n  >\n  </adapt-rx-select>\n</ng-template>\n\n<ng-template #externalColumnIdCellTemplate let-dataItem=\"dataItem\">\n  <adapt-rx-select\n    [options]=\"externalColumnIds\"\n    [optionFormatter]=\"externalColumnIdOptionFormatter\"\n    [emptyOption]=\"true\"\n    [(ngModel)]=\"dataItem.selectedExternalColumns\"\n    (ngModelChange)=\"onExternalColumnChange(dataItem)\"\n    [appendToBody]=\"true\"\n  >\n  </adapt-rx-select>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;height:100%}:host .section-title{display:flex}:host .section-label{flex-grow:1}:host .section-info{color:#00a79d}:host ::ng-deep .rx-custom-cell{max-height:38px}:host ::ng-deep adapt-rx-select{margin:-.5rem -13px}rx-record-grid{height:100%}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordIdFieldsStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-record-id-fields-step',
                        templateUrl: 'record-id-fields-step.component.html',
                        styleUrls: ['record-id-fields-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxExternalDataService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], recordIdFieldsStepRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['recordIdFieldsStepRecordGrid']
                }], externalColumnCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['externalColumnCellTemplate', { static: true }]
                }], externalColumnIdCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['externalColumnIdCellTemplate', { static: true }]
                }] } });

    var TableSelectionStepComponent = /** @class */ (function () {
        function TableSelectionStepComponent(rxExternalDataService, rxWizardModalComponent, translateService) {
            this.rxExternalDataService = rxExternalDataService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        TableSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.table-selection.label');
            var tableSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            tableSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.dataSourceName; }), operators.distinctUntilChanged(lodash.isEqual), operators.skip(1))
                .subscribe(function () {
                _this.selectedRow = null;
                _this.rxWizardModalComponent.api.updateContext({ tableName: '' });
                _this.tableSelectionStepRecordGrid.api.refresh().subscribe();
            });
            var isCurrentStep$ = rxjs.combineLatest([
                this.rxWizardModalComponent.steps$,
                this.rxWizardModalComponent.tabIndex$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), steps = _b[0], tabIndex = _b[1];
                return steps[tabIndex].id === 'table-selection';
            }), operators.takeUntil(this.destroyed$));
            var changedTableName$ = tableSelectionStepContext$.pipe(operators.map(function (stepContext) { return stepContext.tableName; }), operators.distinctUntilChanged(lodash.isEqual));
            rxjs.combineLatest([isCurrentStep$, changedTableName$])
                .pipe(operators.filter(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], externalTableName = _b[1];
                return isCurrentStep;
            }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], externalTableName = _b[1];
                if (externalTableName) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'name'
                }
            ];
            this.tableSelectionRecordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableColumnSelection: false,
                enableFiltering: false,
                enableRowSelection: i5.RowSelectionMode.Single,
                recordIdField: 'name',
                styles: 'flex-fill',
                useExternalFiltering: true,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.table-selection.grid.empty-state.label'),
                getRecordDefinition: function () { return rxjs.of({
                    fieldDefinitions: [
                        {
                            id: 'name',
                            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                        }
                    ]
                }); },
                getData: function (queryParams) { return _this.context.dataSourceName
                    ? _this.rxExternalDataService.getArsTables(queryParams.pageSize, queryParams.startIndex, _this.context.dataSourceName, queryParams.searchText, queryParams.sortBy)
                    : rxjs.of({
                        totalSize: 0,
                        data: []
                    }); }
            });
            this.tableSelectionStepRecordGrid.rowSelectionChanged
                .pipe(operators.skip(2), // first time there are no columns, second time there are no rows selected
            operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedRows) {
                if (selectedRows.length) {
                    _this.selectedRow = selectedRows[0];
                    _this.rxWizardModalComponent.api.updateContext({ tableName: _this.selectedRow.name });
                }
                else if (_this.selectedRow) {
                    _this.tableSelectionStepRecordGrid.api.setSelectedRows(_this.selectedRow);
                }
            });
        };
        TableSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return TableSelectionStepComponent;
    }());
    /** @nocollapse */ TableSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TableSelectionStepComponent, deps: [{ token: RxExternalDataService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TableSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TableSelectionStepComponent, selector: "ax-table-selection-step", inputs: { context: "context" }, viewQueries: [{ propertyName: "tableSelectionStepRecordGrid", first: true, predicate: ["tableSelectionStepRecordGrid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<adapt-rx-control-label [label]=\"sectionLabel\" [showRequiredLabel]=\"true\"></adapt-rx-control-label>\n<rx-record-grid #tableSelectionStepRecordGrid [config]=\"tableSelectionRecordGridConfig$\"> </rx-record-grid>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TableSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-table-selection-step',
                        templateUrl: 'table-selection-step.component.html',
                        styleUrls: ['./table-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxExternalDataService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], tableSelectionStepRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['tableSelectionStepRecordGrid', { static: true }]
                }] } });

    var WebApiSelectionStepComponent = /** @class */ (function () {
        function WebApiSelectionStepComponent(rxExternalDataService, rxWizardModalComponent, translateService) {
            this.rxExternalDataService = rxExternalDataService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        WebApiSelectionStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sectionLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.web-api-selection.label');
            var webApiSelectionStepContext$ = this.rxWizardModalComponent.context$.pipe(operators.shareReplay(1), operators.takeUntil(this.destroyed$));
            webApiSelectionStepContext$
                .pipe(operators.map(function (stepContext) { return stepContext.dataSourceName; }), operators.distinctUntilChanged(lodash.isEqual), operators.skip(1))
                .subscribe(function () {
                _this.rxWizardModalComponent.api.updateContext({ webApi: null });
                _this.recordGrid.api.refresh().subscribe();
            });
            var isCurrentStep$ = rxjs.combineLatest([
                this.rxWizardModalComponent.steps$,
                this.rxWizardModalComponent.tabIndex$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), steps = _b[0], tabIndex = _b[1];
                return steps[tabIndex].id === 'web-api-selection';
            }), operators.takeUntil(this.destroyed$));
            var changedWebApi$ = webApiSelectionStepContext$.pipe(operators.map(function (stepContext) { return stepContext.webApi; }), operators.distinctUntilChanged(lodash.isEqual));
            rxjs.combineLatest([isCurrentStep$, changedWebApi$])
                .pipe(operators.filter(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], changedWebApi = _b[1];
                return isCurrentStep;
            }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), isCurrentStep = _b[0], changedWebApi = _b[1];
                if (changedWebApi) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
            var gridColumns = [
                {
                    fieldId: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    cellTemplate: this.webApiNameCellTemplate
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.web-api-selection.grid.empty-state.label'),
                enableRowSelection: i5.RowSelectionMode.Single,
                enableFiltering: false,
                recordIdField: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return _this.context.dataSourceName
                    ? _this.rxExternalDataService.getWebApiDefinitions()
                    : rxjs.of({
                        totalSize: 0,
                        data: []
                    }); }
            });
            this.recordGrid.rowSelectionChanged
                .pipe(operators.skip(2), operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedRows) {
                _this.rxWizardModalComponent.api.updateContext({
                    webApi: lodash.head(selectedRows) || null
                });
            });
        };
        WebApiSelectionStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return WebApiSelectionStepComponent;
    }());
    /** @nocollapse */ WebApiSelectionStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiSelectionStepComponent, deps: [{ token: RxExternalDataService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ WebApiSelectionStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiSelectionStepComponent, selector: "ax-web-api-selection-wizard-step", inputs: { context: "context" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }, { propertyName: "webApiNameCellTemplate", first: true, predicate: ["webApiNameCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<adapt-rx-control-label [label]=\"sectionLabel\" [showRequiredLabel]=\"true\"></adapt-rx-control-label>\n\n<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n\n<ng-template #webApiNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiSelectionStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-web-api-selection-wizard-step',
                        templateUrl: 'web-api-selection-step.component.html',
                        styleUrls: ['./web-api-selection-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxExternalDataService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }], webApiNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['webApiNameCellTemplate', { static: true }]
                }] } });

    var DataSourceStepComponent = /** @class */ (function () {
        function DataSourceStepComponent(componentFactoryResolver, rxExternalDataService, rxWizardModalComponent, translateService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxExternalDataService = rxExternalDataService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.dataSourceTypeFormControl = new i4.FormControl([], i4.Validators.required);
            this.dataSourceTypes = [];
            this.dataSourceNameFormControl = new i4.FormControl([], i4.Validators.required);
            this.dataSourceNames = [];
        }
        DataSourceStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataSourceNameLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.data-source.data-source-name.label');
            this.dataSourceTypeLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.data-source.data-source-type.label');
            this.rxWizardModalComponent.api.disableNextButton();
            this.rxExternalDataService
                .getDataSourceTypes()
                .subscribe(function (availableDataSourceTypes) { return (_this.dataSourceTypes = availableDataSourceTypes.filter(function (type) { return type !== i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom; })); });
            this.dataSourceTypeFormControl.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedDataSourceTypes) {
                var dataSourceType = selectedDataSourceTypes[0];
                if (dataSourceType === i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionDataSourceTypes.webApi) {
                    _this.rxWizardModalComponent.api.removeNextSteps(1);
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'web-api-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.web-api-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(WebApiSelectionStepComponent)
                    });
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'document-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.document-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(DocumentSelectionStepComponent)
                    });
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'field-tree-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-tree-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(FieldTreeSelectionStepComponent)
                    });
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'operation-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.operation-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OperationSelectionStepComponent)
                    });
                }
                else {
                    _this.rxWizardModalComponent.api.removeNextSteps(1);
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'table-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.table-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(TableSelectionStepComponent)
                    });
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'record-id-fields',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.record-id-fields.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(RecordIdFieldsStepComponent)
                    });
                    _this.rxWizardModalComponent.api.addStep({
                        id: 'field-selection',
                        name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.field-selection.title'),
                        componentFactory: _this.componentFactoryResolver.resolveComponentFactory(FieldSelectionStepComponent)
                    });
                }
                _this.rxWizardModalComponent.api.updateContext({ dataSourceType: dataSourceType });
                if (_this.dataSourceNameFormControl.value.length) {
                    _this.dataSourceNames = [];
                    _this.dataSourceNameFormControl.setValue([]);
                }
                _this.rxExternalDataService
                    .getDataSourceNames(dataSourceType)
                    .subscribe(function (availableDataSourceNames) { return (_this.dataSourceNames = availableDataSourceNames); });
            });
            this.dataSourceNameFormControl.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (selectedDataSourceNames) {
                _this.rxWizardModalComponent.api.updateContext({
                    dataSourceName: selectedDataSourceNames[0]
                });
            });
            this.rxWizardModalComponent.context$
                .pipe(operators.takeUntil(this.destroyed$), operators.map(function (_a) {
                var dataSourceType = _a.dataSourceType, dataSourceName = _a.dataSourceName;
                return ({ dataSourceType: dataSourceType, dataSourceName: dataSourceName });
            }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (_a) {
                var dataSourceType = _a.dataSourceType, dataSourceName = _a.dataSourceName;
                if (dataSourceType && dataSourceName) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        DataSourceStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return DataSourceStepComponent;
    }());
    /** @nocollapse */ DataSourceStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceStepComponent, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: RxExternalDataService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DataSourceStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceStepComponent, selector: "ax-data-source-step", ngImport: i0__namespace, template: "<div class=\"d-flex flex-column control-width\">\n  <adapt-rx-select\n    [label]=\"dataSourceTypeLabel\"\n    [options]=\"dataSourceTypes\"\n    [required]=\"true\"\n    [formControl]=\"dataSourceTypeFormControl\"\n    class=\"form-group\"\n  ></adapt-rx-select>\n  <adapt-rx-select\n    [label]=\"dataSourceNameLabel\"\n    [options]=\"dataSourceNames\"\n    [required]=\"true\"\n    [formControl]=\"dataSourceNameFormControl\"\n    class=\"form-group\"\n  ></adapt-rx-select>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.control-width{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-data-source-step',
                        templateUrl: 'data-source-step.component.html',
                        styleUrls: ['./data-source-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: RxExternalDataService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; } });

    var ExternalRecordWizardService = /** @class */ (function () {
        function ExternalRecordWizardService(componentFactoryResolver, rxIdService, rxFieldDefinitionManagerService, rxWizardService, translateService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxIdService = rxIdService;
            this.rxFieldDefinitionManagerService = rxFieldDefinitionManagerService;
            this.rxWizardService = rxWizardService;
            this.translateService = translateService;
            this.systemFieldsNames = {
                idFieldName: 'Record ID',
                displayIdFieldName: 'Request ID'
            };
        }
        ExternalRecordWizardService.prototype.open = function () {
            var _this = this;
            var wizardConfig = {
                title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.title'),
                allowFinish: true,
                finishButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),
                steps: [
                    {
                        id: 'data-source',
                        name: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.data-source.title'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceStepComponent)
                    }
                ]
            };
            return this.rxWizardService
                .open({
                context: {},
                options: wizardConfig
            })
                .then(function (context) {
                var webApiProperties = (context === null || context === void 0 ? void 0 : context.webApi)
                    ? {
                        vendorSchemaDescriptor: {
                            dataSourceEntity: {
                                webApiDefinitionGuid: context.webApi.guid,
                                documentDefinitionGuid: context.document.guid
                            },
                            dataSourceOperations: context.operations
                        },
                        tableName: context.dataSourceName
                    }
                    : {};
                return context
                    ? Object.assign({ dataSourceName: context.dataSourceName, fieldDefinitions: context.webApi
                            ? _this.getWebApiFieldDefinitions(context)
                            : _this.getArsFieldDefinitions(context), resourceType: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType, tableName: context.tableName }, webApiProperties) : null;
            });
        };
        ExternalRecordWizardService.prototype.getArsFieldDefinitions = function (context) {
            var _this = this;
            var mappedCoreFields = lodash.map(context.mappedInternalFields, function (coreField) {
                coreField.fieldMapping.resourceType = i1$5.RX_RECORD_DEFINITION.externalFieldMapping;
                return coreField;
            });
            var selectedExternalFields = lodash.chain(context.selectedExternalFields)
                .reject(isAssociatedField)
                .map(function (externalField) {
                externalField.id = _this.rxIdService.generate();
                if (externalField.fieldOption === i1$5.RecordFieldOption.System) {
                    externalField.fieldOption = i1$5.RecordFieldOption.Required;
                }
                ['lastChangedBy', 'lastUpdateTime'].forEach(function (columnProperty) {
                    delete externalField[columnProperty];
                });
                return externalField;
            })
                .value();
            function isAssociatedField(externalField) {
                var path = 'fieldMapping.externalFieldId';
                return lodash.some(context.mappedInternalFields, [path, lodash.get(externalField, path)]);
            }
            return mappedCoreFields.concat(selectedExternalFields);
        };
        ExternalRecordWizardService.prototype.getWebApiFieldDefinitions = function (context) {
            var _this = this;
            var _a, _b;
            var nonDocumentSchemaFields = [];
            if ((_a = context.selectedFieldMapping) === null || _a === void 0 ? void 0 : _a.id) {
                nonDocumentSchemaFields = lodash.reject(context.nonDocumentSchemaFields, { name: this.systemFieldsNames.idFieldName });
            }
            if ((_b = context.selectedFieldMapping) === null || _b === void 0 ? void 0 : _b.displayId) {
                nonDocumentSchemaFields = lodash.reject(nonDocumentSchemaFields, { name: this.systemFieldsNames.displayIdFieldName });
            }
            return __spreadArray(__spreadArray([], __read(context.documentSchemaFields)), __read(nonDocumentSchemaFields)).map(function (field) {
                var _a, _b;
                if (((_a = context.selectedFieldMapping) === null || _a === void 0 ? void 0 : _a.id) === field.path || field.name === _this.systemFieldsNames.idFieldName) {
                    return getIdFieldDefinition(i1$5.RX_RECORD_DEFINITION.coreFieldIds.id, field);
                }
                else if (((_b = context.selectedFieldMapping) === null || _b === void 0 ? void 0 : _b.displayId) === field.path ||
                    field.name === _this.systemFieldsNames.displayIdFieldName) {
                    return getIdFieldDefinition(i1$5.RX_RECORD_DEFINITION.coreFieldIds.displayId, field);
                }
                function getIdFieldDefinition(coreFieldId, documentSchemaField) {
                    var fieldDefinition = lodash.find(i1$5.RX_RECORD_DEFINITION.coreFields, { id: coreFieldId });
                    return Object.assign({ fieldMapping: {
                            resourceType: i1$5.RX_RECORD_DEFINITION.externalFieldMapping,
                            externalFieldId: documentSchemaField.path
                        } }, fieldDefinition);
                }
                var newFieldDefinition = _this.rxFieldDefinitionManagerService.getNewFieldDefinitionModel(field.type, {
                    name: field.name
                });
                return Object.assign({ fieldMapping: {
                        resourceType: i1$5.RX_RECORD_DEFINITION.externalFieldMapping,
                        externalFieldId: field.path
                    } }, newFieldDefinition);
            });
        };
        return ExternalRecordWizardService;
    }());
    /** @nocollapse */ ExternalRecordWizardService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardService, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i5__namespace$1.RxIdService }, { token: i7__namespace.RxFieldDefinitionManagerService }, { token: i2__namespace$1.RxWizardService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ExternalRecordWizardService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i5__namespace$1.RxIdService }, { type: i7__namespace.RxFieldDefinitionManagerService }, { type: i2__namespace$1.RxWizardService }, { type: i3__namespace.TranslateService }]; } });

    var AxRecordDefinitionTypePipe = /** @class */ (function () {
        function AxRecordDefinitionTypePipe(translateService) {
            this.translateService = translateService;
        }
        AxRecordDefinitionTypePipe.prototype.transform = function (recordDefinition) {
            var displayName = '';
            if (recordDefinition.recordDefinitionType === i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType) {
                displayName = this.translateService.instant('com.bmc.arsys.rx.client.record-definition.type.regular.label');
            }
            if (recordDefinition.recordDefinitionType === i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) {
                displayName = this.translateService.instant('com.bmc.arsys.rx.client.record-definition.type.join.label');
            }
            if (recordDefinition.recordDefinitionType === i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType) {
                if (recordDefinition.type === i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom) {
                    displayName = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.record.type.custom.label');
                }
                else {
                    displayName = this.translateService.instant('com.bmc.arsys.rx.client.record-definition.type.external.label');
                }
            }
            if (recordDefinition.isAuditRecordDefinition) {
                displayName = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.record.audit.label', {
                    recordType: displayName
                });
            }
            if (recordDefinition.archiveSourceRecordDefinitionName) {
                displayName = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.record.archive.label', {
                    recordType: displayName
                });
            }
            return displayName;
        };
        return AxRecordDefinitionTypePipe;
    }());
    /** @nocollapse */ AxRecordDefinitionTypePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxRecordDefinitionTypePipe, deps: [{ token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ AxRecordDefinitionTypePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxRecordDefinitionTypePipe, name: "axRecordDefinitionType" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxRecordDefinitionTypePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'axRecordDefinitionType'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.TranslateService }]; } });

    var RecordDefinitionTabComponent = /** @class */ (function () {
        function RecordDefinitionTabComponent(rxRecordDefinitionDataPageService, rxBundleCache, rxOverlayService, rxModalService, translateService, rxCommandFactoryService, router, rxCopyDefinitionService, joinRecordWizardService, externalRecordWizardService, rxRecordDefinitionService, rxNotificationService, rxRecordInstanceService, rxRecordInstanceUpdateService, rxRecordInstanceDataPageService, rxFeatureService) {
            var _this = this;
            this.rxRecordDefinitionDataPageService = rxRecordDefinitionDataPageService;
            this.rxBundleCache = rxBundleCache;
            this.rxOverlayService = rxOverlayService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.router = router;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.joinRecordWizardService = joinRecordWizardService;
            this.externalRecordWizardService = externalRecordWizardService;
            this.rxRecordDefinitionService = rxRecordDefinitionService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxFeatureService = rxFeatureService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }), operators.takeUntil(this.destroyed$));
            this.gridColumns = [];
            this.isActionInProgress = false;
            this.dataEditorRoute = this.rxFeatureService.isFeatureEnabled('DRD21-10996') ? 'edit-data-new' : 'edit-data';
        }
        RecordDefinitionTabComponent.prototype.ngOnInit = function () {
            if (this.rxFeatureService.isFeatureEnabled('DRD21-15263')) {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/record/edit2/";
            }
            this.areNewDefinitionsAllowed = this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor);
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                {
                    fieldId: 'recordDefinitionType',
                    title: 'com.bmc.arsys.rx.client.common.item-type.label',
                    index: 3,
                    cellTemplate: this.recordDefinitionTypeTemplate
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'recordDefinitionType',
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxRecordDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'customizationPerspective',
                        'recordDefinitionType',
                        'overlayGroupId',
                        'overlayDescriptor',
                        'isAuditRecordDefinition',
                        'scope',
                        'externalDataSourceType',
                        'archiveSourceRecordDefinitionName',
                        'type'
                    ]
                }
            });
        };
        RecordDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (result) { return result
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.record.command.DeleteRecordDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of(false); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        RecordDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var _a, _b, _c;
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCache.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.areNewDefinitionsAllowed,
                    subActions: [
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.new.regular-record.label',
                            id: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType,
                            rxId: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType
                        },
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.new.join-record.label',
                            id: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType,
                            rxId: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType
                        },
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.new.external-record.label',
                            id: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType,
                            rxId: i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType
                        },
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.new.custom-record.label',
                            id: i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom,
                            rxId: i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom
                        }
                    ]
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: selectedRows.length !== 1 || !isBundleEditable
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                },
                {
                    id: 'archive',
                    labelKey: 'com.bmc.arsys.rx.innovation-studio.definition-actions.archive.label',
                    rxId: 'archive',
                    icon: 'file_o_gear',
                    isDisabled: selectedRows.length !== 1 ||
                        selectedRows[0].recordDefinitionType !==
                            i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType
                },
                {
                    id: 'edit-data',
                    labelKey: 'com.bmc.arsys.rx.innovation-studio.definition-actions.edit-data.label',
                    rxId: 'edit-data',
                    icon: 'storages',
                    isDisabled: selectedRows.length !== 1 ||
                        (((_a = selectedRows[0]) === null || _a === void 0 ? void 0 : _a.recordDefinitionType) ===
                            i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&
                            (!((_b = selectedRows[0]) === null || _b === void 0 ? void 0 : _b.externalDataSourceType) ||
                                ((_c = selectedRows[0]) === null || _c === void 0 ? void 0 : _c.externalDataSourceType) ===
                                    i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionDataSourceTypes.webApi))
                }
            ];
        };
        RecordDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        RecordDefinitionTabComponent.prototype.onCustomAction = function (event) {
            var _this = this;
            switch (event.actionId) {
                case i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType: {
                    this.router.navigate([
                        i2.RX_APPLICATION.innovationStudioBundleId,
                        'record',
                        this.rxFeatureService.isFeatureEnabled('DRD21-15263') ? 'new2' : 'new',
                        this.rxBundleCache.bundleId
                    ]);
                    break;
                }
                case i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType: {
                    if (this.rxFeatureService.isFeatureEnabled('DRD21-15263')) {
                        this.rxModalService
                            .openModal({
                            content: CreateJoinRecordComponent,
                            size: 'sm'
                        })
                            .catch(lodash.noop);
                    }
                    else {
                        this.joinRecordWizardService.open().then(function (joinRecordDesignerOptions) {
                            if (joinRecordDesignerOptions) {
                                _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'record', 'new', _this.rxBundleCache.bundleId], { state: { designerOptions: joinRecordDesignerOptions } });
                            }
                        });
                    }
                    break;
                }
                case i1$5.RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType: {
                    this.externalRecordWizardService
                        .open()
                        .then(function (externalRecordDesignerOptions) {
                        if (externalRecordDesignerOptions) {
                            _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'record', 'new', _this.rxBundleCache.bundleId], { state: { designerOptions: externalRecordDesignerOptions } });
                        }
                    });
                    break;
                }
                case i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom: {
                    this.rxModalService
                        .openModal({
                        content: CreateCustomRecordComponent,
                        size: 'sm'
                    })
                        .catch(lodash.noop);
                    break;
                }
                case 'edit-data': {
                    this.router.navigate([
                        i2.RX_APPLICATION.innovationStudioBundleId,
                        'record',
                        this.dataEditorRoute,
                        event.selectedRows[0][i2$2.RowDataItemIdFieldName]
                    ]);
                    break;
                }
                case 'archive': {
                    this.rxRecordDefinitionService
                        .get(event.selectedRows[0].name)
                        .pipe(operators.take(1), operators.switchMap(function (recordDefinition) {
                        var _a, _b, _c;
                        if (!((_a = recordDefinition.archiveDescriptor) === null || _a === void 0 ? void 0 : _a.isEnabled) ||
                            ((_b = recordDefinition.archiveDescriptor) === null || _b === void 0 ? void 0 : _b.archiveType) === 'NONE') {
                            _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.tabs.records.archiving-disabled.message'));
                            return rxjs.of(null);
                        }
                        else {
                            var message = '';
                            var archiveType = (_c = recordDefinition.archiveDescriptor) === null || _c === void 0 ? void 0 : _c.archiveType;
                            if (archiveType === 'COPY_TO_ARCHIVE_AND_DELETE_FROM_SOURCE') {
                                message = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.tabs.records.archive-and-delete.confirmation.message', { recordAge: recordDefinition.archiveDescriptor.ageQualifierInDays });
                            }
                            else if (archiveType === 'DELETE_FROM_SOURCE') {
                                message = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.tabs.records.delete-without-archiving.confirmation.message', { recordAge: recordDefinition.archiveDescriptor.ageQualifierInDays });
                            }
                            return rxjs.from(_this.rxModalService.confirm({
                                title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                                message: message
                            }));
                        }
                    }), operators.switchMap(function (result) {
                        if (result) {
                            return _this.rxRecordInstanceDataPageService
                                .post({
                                params: {
                                    recorddefinition: AX_RECORD_DEFINITION_TAB.archiving.recordDefinitionName,
                                    pageSize: 1,
                                    startIndex: 0,
                                    propertySelection: i1$5.RX_RECORD_DEFINITION.coreFieldIds.id,
                                    queryExpression: "'" + i1$5.RX_RECORD_DEFINITION.coreFieldIds.description + "' = \"" + event.selectedRows[0].name + "\""
                                }
                            })
                                .pipe(operators.switchMap(function (dataPageResult) { return _this.rxRecordInstanceService.get(AX_RECORD_DEFINITION_TAB.archiving.recordDefinitionName, dataPageResult.data[0][i1$5.RX_RECORD_DEFINITION.coreFieldIds.id]); }), operators.switchMap(function (recordInstance) {
                                recordInstance.setFieldValue(AX_RECORD_DEFINITION_TAB.archiving.fieldIds.runNow, 1);
                                return _this.rxRecordInstanceUpdateService.execute(recordInstance);
                            }), operators.tap(function () {
                                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.tabs.records.archiving-started.message'));
                            }));
                        }
                        else {
                            return rxjs.of(null);
                        }
                    }))
                        .subscribe();
                    break;
                }
            }
        };
        RecordDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.Record).catch(lodash.noop);
        };
        RecordDefinitionTabComponent.prototype.onRenameDefinition = function (_d) {
            var _this = this;
            var selectedRow = _d.selectedRow, definitionNames = _d.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.record.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newRecordDefinitionName) { return _this.rxRecordDefinitionService.rename(selectedRow.name, newRecordDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        RecordDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxRecordDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        RecordDefinitionTabComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return RecordDefinitionTabComponent;
    }());
    /** @nocollapse */ RecordDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabComponent, deps: [{ token: i1__namespace$5.RxRecordDefinitionDataPageService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i1__namespace$1.Router }, { token: RxCopyDefinitionService }, { token: JoinRecordWizardService }, { token: ExternalRecordWizardService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$5.RxRecordInstanceService }, { token: i1__namespace$5.RxRecordInstanceUpdateService }, { token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i2__namespace.RxFeatureService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RecordDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordDefinitionTabComponent, selector: "ax-record-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "recordDefinitionTypeTemplate", first: true, predicate: ["recordDefinitionTypeTemplate"], descendants: true, static: true }, { propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'record'\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (customAction)=\"onCustomAction($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  [editRouterLink]=\"editRouterLink\"\n></ax-definition-tab>\n\n<ng-template #recordDefinitionTypeTemplate let-dataItem=\"dataItem\">\n  <div>\n    {{ dataItem | axRecordDefinitionType }}\n  </div>\n</ng-template>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe, "axRecordDefinitionType": AxRecordDefinitionTypePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-record-definition-tab',
                        templateUrl: './record-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordDefinitionDataPageService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i1__namespace$1.Router }, { type: RxCopyDefinitionService }, { type: JoinRecordWizardService }, { type: ExternalRecordWizardService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$5.RxRecordInstanceService }, { type: i1__namespace$5.RxRecordInstanceUpdateService }, { type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i2__namespace.RxFeatureService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], recordDefinitionTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['recordDefinitionTypeTemplate', { static: true }]
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var ViewDefinitionTabComponent = /** @class */ (function () {
        function ViewDefinitionTabComponent(rxOverlayService, rxViewDefinitionDataPageService, rxModalService, translateService, rxCommandFactoryService, router, rxBundleCacheService, rxViewDefinitionService, rxCopyDefinitionService) {
            var _this = this;
            this.rxOverlayService = rxOverlayService;
            this.rxViewDefinitionDataPageService = rxViewDefinitionDataPageService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.router = router;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxViewDefinitionService = rxViewDefinitionService;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.gridColumns = [];
            this.isActionInProgress = false;
        }
        ViewDefinitionTabComponent.prototype.getNewViewSubAction = function (layout) {
            return {
                id: String(layout.id),
                rxId: 'view-layout-template-' + layout.id,
                labelKey: layout.label
            };
        };
        ViewDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.areNewDefinitionsAllowed,
                    subActions: lodash.concat({
                        groupTitle: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.view.layout-flexible.menu.label')
                    }, lodash.filter(i2$2.RX_VIEW_LAYOUTS, { layoutType: i2$2.LayoutTypes.Flexible }).map(this.getNewViewSubAction), {
                        groupTitle: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.view.layout-fixed.menu.label')
                    }, lodash.filter(i2$2.RX_VIEW_LAYOUTS, { layoutType: i2$2.LayoutTypes.Fixed }).map(this.getNewViewSubAction))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: selectedRows.length !== 1 || !isBundleEditable
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        ViewDefinitionTabComponent.prototype.ngOnInit = function () {
            this.areNewDefinitionsAllowed = this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor);
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxViewDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'scope',
                        'customizationPerspective',
                        'overlayGroupId',
                        'overlayDescriptor'
                    ],
                    viewType: i2$2.RX_VIEW_DEFINITION.types.regular,
                    excludeExtensionViews: false
                }
            });
        };
        ViewDefinitionTabComponent.prototype.onCustomAction = function (event) {
            this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'view', 'new', this.rxBundleCacheService.bundleId], {
                queryParams: { layoutTemplate: event.actionId }
            });
        };
        ViewDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.View).catch(lodash.noop);
        };
        ViewDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.view.command.DeleteViewDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ViewDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.view.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newViewDefinitionName) { return _this.rxViewDefinitionService.rename(selectedRow.name, newViewDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        ViewDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxViewDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ViewDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        return ViewDefinitionTabComponent;
    }());
    /** @nocollapse */ ViewDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabComponent, deps: [{ token: i2__namespace.RxOverlayService }, { token: i2__namespace$2.RxViewDefinitionDataPageService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace$2.RxViewDefinitionService }, { token: RxCopyDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ViewDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ViewDefinitionTabComponent, selector: "ax-view-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'view'\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (customAction)=\"onCustomAction($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-view-definition-tab',
                        templateUrl: './view-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxOverlayService }, { type: i2__namespace$2.RxViewDefinitionDataPageService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace$2.RxViewDefinitionService }, { type: RxCopyDefinitionService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AX_PROCESS_DEFINITION_TAB = {
        copyWithinApplication: 'copyWithinApplication',
        copyToAnotherApplication: 'copyToAnotherApplication',
        manageProcesses: 'manageProcesses',
        processInstanceStatuses: {
            active: 'ACTIVE',
            suspended: 'SUSPENDED',
            errored: 'ERRORED',
            completed: 'COMPLETED'
        },
        processInstanceActions: {
            suspend: 'SUSPEND',
            resume: ' RESUME',
            cancel: 'CANCEL',
            viewLog: 'VIEW_LOG',
            downloadLog: 'DOWNLOAD_LOG'
        }
    };

    var ProcessDefinitionTabComponent = /** @class */ (function () {
        function ProcessDefinitionTabComponent(adaptModalService, router, rxOverlayService, rxBundleCacheService, rxCommandFactoryService, rxProcessDefinitionDataPageService, rxModalService, translateService, rxCopyDefinitionService, rxFeatureService) {
            var _this = this;
            this.adaptModalService = adaptModalService;
            this.router = router;
            this.rxOverlayService = rxOverlayService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxProcessDefinitionDataPageService = rxProcessDefinitionDataPageService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rxFeatureService = rxFeatureService;
            this.gridColumns = [];
            this.isActionInProgress = false;
            this.definitions$ = this.rxProcessDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'scope',
                        'customizationPerspective',
                        'overlayGroupId',
                        'overlayDescriptor',
                        'isEnabled'
                    ],
                    bundleId: this.rxBundleCacheService.bundleId
                }
            });
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
        }
        ProcessDefinitionTabComponent.prototype.ngOnInit = function () {
            if (this.rxFeatureService.isFeatureEnabled('DRD21-11025')) {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/process/edit2/";
            }
            this.areNewDefinitionsAllowed = this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor);
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective,
                AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
        };
        ProcessDefinitionTabComponent.prototype.onCustomAction = function (_a) {
            var actionId = _a.actionId, selectedRows = _a.selectedRows;
            if (actionId === AX_PROCESS_DEFINITION_TAB.manageProcesses) {
                var route = [i2.RX_APPLICATION.innovationStudioBundleId, 'process', 'manage', this.rxBundleCacheService.bundleId];
                if (selectedRows.length > 0) {
                    this.router.navigate(route, { queryParams: { definitionName: selectedRows[0].name } });
                }
                else {
                    this.router.navigate(route);
                }
            }
        };
        ProcessDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService
                .openCopyDefinitionComponentModal(row, CopyDefinitionType.Process, this.rxFeatureService.isFeatureEnabled('DRD21-11025') ? 'edit2' : 'edit')
                .catch(lodash.noop);
        };
        ProcessDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.process.command.DeleteProcessDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ProcessDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'process',
                this.rxFeatureService.isFeatureEnabled('DRD21-11025') ? 'new2' : 'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        ProcessDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.process.command.RevertProcessDefinitionCommand')
                    .execute({
                    processDefinitionName: definition.name
                }); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ProcessDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        ProcessDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.process.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newViewDefinitionName) { return _this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.process.command.RenameProcessDefinitionCommand')
                .execute({
                name: selectedRow.name,
                newName: newViewDefinitionName
            }); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        ProcessDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            var definitionActions = [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.areNewDefinitionsAllowed
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                },
                {
                    id: AX_PROCESS_DEFINITION_TAB.manageProcesses,
                    isDisabled: !isBundleEditable || selectedRows.length > 1,
                    labelKey: 'com.bmc.arsys.rx.innovation-studio.manage-processes.menu.label',
                    rxId: 'manage-processes-button',
                    icon: 'flow'
                }
            ];
            return definitionActions;
        };
        return ProcessDefinitionTabComponent;
    }());
    /** @nocollapse */ ProcessDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabComponent, deps: [{ token: i1__namespace.AdaptModalService }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxCommandFactoryService }, { token: i6__namespace.RxProcessDefinitionDataPageService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: RxCopyDefinitionService }, { token: i2__namespace.RxFeatureService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ProcessDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ProcessDefinitionTabComponent, selector: "ax-process-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'process'\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (customAction)=\"onCustomAction($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (addDefinition)=\"onAddDefinition()\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  [editRouterLink]=\"editRouterLink\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-process-definition-tab',
                        templateUrl: './process-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AdaptModalService }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxCommandFactoryService }, { type: i6__namespace.RxProcessDefinitionDataPageService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: RxCopyDefinitionService }, { type: i2__namespace.RxFeatureService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AX_RULE_DEFINITION_TAB = {
        definitionGridColumns: {
            primaryRecordDefinition: {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.rules.grid.primary-record-definition.label',
                fieldId: 'primaryRecordDefinition'
            },
            triggerEvent: {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.rules.grid.trigger-event.label',
                fieldId: 'triggerEvent'
            },
            executionOrder: {
                titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.rules.grid.execution-order.label',
                fieldId: 'executionOrder'
            },
            recordDefinitionNames: {
                fieldId: 'recordDefinitionNames'
            }
        },
        deleteRuleResource: 'com.bmc.arsys.rx.application.rule.command.DeleteRuleDefinitionsCommand'
    };

    var RuleDefinitionTabComponent = /** @class */ (function () {
        function RuleDefinitionTabComponent(router, rxRuleTriggerEventPipe, rxRuleDefinitionService, rxOverlayService, rxRuleDefinitionDataPageService, rxModalService, translateService, rxCommandFactoryService, rxBundleCacheService, rxGlobalCacheService, rxCopyDefinitionService, rxDefinitionNameService) {
            var _this = this;
            this.router = router;
            this.rxRuleTriggerEventPipe = rxRuleTriggerEventPipe;
            this.rxRuleDefinitionService = rxRuleDefinitionService;
            this.rxOverlayService = rxOverlayService;
            this.rxRuleDefinitionDataPageService = rxRuleDefinitionDataPageService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.definitions$ = rxjs.forkJoin([
                this.rxBundleCacheService.bundleId$.pipe(operators.take(1), operators.switchMap(function (bundleId) { return _this.rxGlobalCacheService.getBundleDescriptor(bundleId); })),
                this.rxRuleDefinitionDataPageService.get({
                    params: {
                        propertySelection: [
                            AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                            AX_RULE_DEFINITION_TAB.definitionGridColumns.recordDefinitionNames.fieldId,
                            AX_RULE_DEFINITION_TAB.definitionGridColumns.triggerEvent.fieldId,
                            AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                            AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                            AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                            AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                            AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                            'overlayGroupId'
                        ]
                    }
                })
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), bundleDescriptor = _b[0], dataPage = _b[1];
                dataPage.data = lodash.map(dataPage.data, function (definition) {
                    if (definition.scope === i2.RX_BUNDLE.definitionScopeTypes.bundle) {
                        definition.scope = bundleDescriptor.isApplication
                            ? i2.RX_BUNDLE.definitionScopeNames.application
                            : i2.RX_BUNDLE.definitionScopeNames.library;
                    }
                    else {
                        definition.scope = i2.RX_BUNDLE.definitionScopeNames.public;
                    }
                    return lodash.assign(definition, {
                        primaryRecordDefinition: _this.rxDefinitionNameService.getDisplayName(definition.recordDefinitionNames[0]) ||
                            _this.translateService.instant('com.bmc.arsys.rx.client.common.not-applicable.label'),
                        executionOrder: definition.triggerEvent.executionOrder,
                        triggerEvent: _this.rxRuleTriggerEventPipe.transform(definition.triggerEvent)
                    });
                });
                return dataPage;
            }));
            this.gridColumns = [];
            this.isActionInProgress = false;
        }
        RuleDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.areNewDefinitionsAllowed
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !this.areNewDefinitionsAllowed || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        RuleDefinitionTabComponent.prototype.ngOnInit = function () {
            this.areNewDefinitionsAllowed = this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor);
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                {
                    title: AX_RULE_DEFINITION_TAB.definitionGridColumns.primaryRecordDefinition.titleKey,
                    fieldId: AX_RULE_DEFINITION_TAB.definitionGridColumns.primaryRecordDefinition.fieldId
                },
                {
                    title: AX_RULE_DEFINITION_TAB.definitionGridColumns.triggerEvent.titleKey,
                    fieldId: AX_RULE_DEFINITION_TAB.definitionGridColumns.triggerEvent.fieldId
                },
                {
                    title: AX_RULE_DEFINITION_TAB.definitionGridColumns.executionOrder.titleKey,
                    fieldId: AX_RULE_DEFINITION_TAB.definitionGridColumns.executionOrder.fieldId
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_RULE_DEFINITION_TAB.definitionGridColumns.primaryRecordDefinition.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_RULE_DEFINITION_TAB.definitionGridColumns.executionOrder.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_RULE_DEFINITION_TAB.definitionGridColumns.triggerEvent.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
        };
        RuleDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.rule.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newRuleDefinitionName) { return _this.rxRuleDefinitionService.rename(selectedRow.name, newRuleDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        RuleDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.Rule).catch(lodash.noop);
        };
        RuleDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType(AX_RULE_DEFINITION_TAB.deleteRuleResource)
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        RuleDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxRuleDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        RuleDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'rule', 'new', this.rxBundleCacheService.bundleId]);
        };
        RuleDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        return RuleDefinitionTabComponent;
    }());
    /** @nocollapse */ RuleDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabComponent, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace$3.RxRuleTriggerEventPipe }, { token: i2__namespace$3.RxRuleDefinitionService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace$3.RxRuleDefinitionDataPageService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxGlobalCacheService }, { token: RxCopyDefinitionService }, { token: i2__namespace.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RuleDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RuleDefinitionTabComponent, selector: "ax-rule-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, providers: [i2$3.RxRuleTriggerEventPipe], viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }, { propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'rule'\"\n  (addDefinition)=\"onAddDefinition()\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-rule-definition-tab',
                        templateUrl: './rule-definition-tab.component.html',
                        providers: [i2$3.RxRuleTriggerEventPipe]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace$3.RxRuleTriggerEventPipe }, { type: i2__namespace$3.RxRuleDefinitionService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace$3.RxRuleDefinitionDataPageService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxGlobalCacheService }, { type: RxCopyDefinitionService }, { type: i2__namespace.RxDefinitionNameService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }], definitionNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['definitionNameCellTemplate', { static: true }]
                }] } });

    var AX_ASSOCIATION_DEFINITION_TAB = {
        definitionGridColumns: {
            firstRecord: {
                titleKey: 'com.bmc.arsys.rx.client.association.grid.first-record.title',
                fieldId: 'firstRecord'
            },
            cardinalityString: {
                titleKey: 'com.bmc.arsys.rx.client.association.grid.cardinality.title',
                fieldId: 'cardinalityString'
            },
            secondRecord: {
                titleKey: 'com.bmc.arsys.rx.client.association.grid.second-record.title',
                fieldId: 'secondRecord'
            },
            shouldCascadeDeleteString: {
                titleKey: 'com.bmc.arsys.rx.client.association.grid.constraints.title',
                fieldId: 'shouldCascadeDeleteString'
            }
        }
    };

    var AssociationDefinitionTabComponent = /** @class */ (function () {
        function AssociationDefinitionTabComponent(rxAssociationDefinitionDataPageService, rxAssociationDefinitionService, rxOverlayService, rxModalService, translateService, rxCommandFactoryService, rxBundleCacheService, rxFeatureService, router, rxDefinitionNameService, rxAssociationConstraintsPipe, rxAssociationCardinalityPipe) {
            var _this = this;
            this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;
            this.rxAssociationDefinitionService = rxAssociationDefinitionService;
            this.rxOverlayService = rxOverlayService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxFeatureService = rxFeatureService;
            this.router = router;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxAssociationConstraintsPipe = rxAssociationConstraintsPipe;
            this.rxAssociationCardinalityPipe = rxAssociationCardinalityPipe;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.gridColumns = [];
            this.isActionInProgress = false;
        }
        AssociationDefinitionTabComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.rxFeatureService.isFeatureEnabled('DRD21-14986')) {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/association/edit2/";
            }
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                {
                    title: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.firstRecord.titleKey,
                    fieldId: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.firstRecord.fieldId
                },
                {
                    title: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.cardinalityString.titleKey,
                    fieldId: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.cardinalityString.fieldId
                },
                {
                    title: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.secondRecord.titleKey,
                    fieldId: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.secondRecord.fieldId
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                {
                    title: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.shouldCascadeDeleteString.titleKey,
                    fieldId: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.shouldCascadeDeleteString.fieldId
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.firstRecord.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.cardinalityString.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.secondRecord.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_ASSOCIATION_DEFINITION_TAB.definitionGridColumns.shouldCascadeDeleteString.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            this.cardinalityStrings = {
                ONE_TO_ONE: this.rxAssociationCardinalityPipe.transform(i1$6.RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value),
                ONE_TO_MANY: this.rxAssociationCardinalityPipe.transform(i1$6.RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value),
                MANY_TO_MANY: this.rxAssociationCardinalityPipe.transform(i1$6.RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value)
            };
            this.shouldCascadeDeleteStrings = {
                true: this.rxAssociationConstraintsPipe.transform(true),
                false: this.rxAssociationConstraintsPipe.transform(false)
            };
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxAssociationDefinitionDataPageService
                .get({
                params: {
                    propertySelection: [
                        'name',
                        'nodeAId',
                        'cardinality',
                        'nodeBId',
                        'shouldCascadeDelete',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'customizationPerspective',
                        'isEnabled',
                        'scope',
                        'overlayGroupId',
                        'overlayDescriptor'
                    ]
                }
            })
                .pipe(operators.map(function (dataPage) { return ({
                totalSize: dataPage.totalSize,
                data: dataPage.data.map(function (association) { return (Object.assign(Object.assign({}, association), { firstRecord: _this.rxDefinitionNameService.getDisplayName(association.nodeAId), secondRecord: _this.rxDefinitionNameService.getDisplayName(association.nodeBId), cardinalityString: _this.cardinalityStrings[association.cardinality], shouldCascadeDeleteString: _this.shouldCascadeDeleteStrings[String(association.shouldCascadeDelete)] })); })
            }); }));
        };
        AssociationDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        AssociationDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'association',
                this.rxFeatureService.isFeatureEnabled('DRD21-14986') ? 'new2' : 'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        AssociationDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.association.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newViewDefinitionName) { return _this.rxAssociationDefinitionService.rename(selectedRow.name, newViewDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        AssociationDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        AssociationDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.association.command.DeleteAssociationDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        AssociationDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxAssociationDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        return AssociationDefinitionTabComponent;
    }());
    /** @nocollapse */ AssociationDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabComponent, deps: [{ token: i1__namespace$6.RxAssociationDefinitionDataPageService }, { token: i1__namespace$6.RxAssociationDefinitionService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxFeatureService }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$6.RxAssociationConstraintsPipe }, { token: i1__namespace$6.RxAssociationCardinalityPipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AssociationDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AssociationDefinitionTabComponent, selector: "ax-association-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, providers: [i1$6.RxAssociationCardinalityPipe, i1$6.RxAssociationConstraintsPipe], viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'association'\"\n  [editRouterLink]=\"editRouterLink\"\n  (addDefinition)=\"onAddDefinition()\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-association-definition-tab',
                        templateUrl: './association-definition-tab.component.html',
                        providers: [i1$6.RxAssociationCardinalityPipe, i1$6.RxAssociationConstraintsPipe]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxAssociationDefinitionDataPageService }, { type: i1__namespace$6.RxAssociationDefinitionService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxFeatureService }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$6.RxAssociationConstraintsPipe }, { type: i1__namespace$6.RxAssociationCardinalityPipe }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AX_NAMED_LIST_DEFINITION_TAB = {
        definitionGridColumns: {
            recordDefinitionName: {
                title: 'com.bmc.arsys.rx.innovation-studio.tabs.named-lists.column.record-definition-name.label',
                fieldId: 'recordDefinitionName'
            }
        }
    };

    var NamedListDefinitionTabComponent = /** @class */ (function () {
        function NamedListDefinitionTabComponent(rxNamedListDefinitionDataPageService, rxOverlayService, rxBundleCacheService, translateService, rxModalService, rxCommandFactoryService, rxNamedListDefinitionService, router, rxCopyDefinitionService, rxDefinitionNameService) {
            var _this = this;
            this.rxNamedListDefinitionDataPageService = rxNamedListDefinitionDataPageService;
            this.rxOverlayService = rxOverlayService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.translateService = translateService;
            this.rxModalService = rxModalService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxNamedListDefinitionService = rxNamedListDefinitionService;
            this.router = router;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.isActionInProgress = false;
            this.definitions$ = this.rxNamedListDefinitionDataPageService
                .get({
                params: {
                    propertySelection: [
                        'name',
                        'recordDefinitionName',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'customizationPerspective',
                        'scope',
                        'overlayGroupId',
                        'overlayDescriptor'
                    ]
                }
            })
                .pipe(operators.tap(function (dataPage) {
                dataPage.data.forEach(function (namedList) {
                    namedList.recordDefinitionName = _this.rxDefinitionNameService.getDisplayName(namedList.recordDefinitionName);
                });
            }));
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
        }
        NamedListDefinitionTabComponent.prototype.ngOnInit = function () {
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                {
                    title: AX_NAMED_LIST_DEFINITION_TAB.definitionGridColumns.recordDefinitionName.title,
                    fieldId: AX_NAMED_LIST_DEFINITION_TAB.definitionGridColumns.recordDefinitionName.fieldId
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_NAMED_LIST_DEFINITION_TAB.definitionGridColumns.recordDefinitionName.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
        };
        NamedListDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'named-list',
                'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        NamedListDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.named-list.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newViewDefinitionName) { return _this.rxNamedListDefinitionService.rename(selectedRow.name, newViewDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        NamedListDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxNamedListDefinitionService.delete(definitionNames).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        NamedListDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxNamedListDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        NamedListDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        NamedListDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        NamedListDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService
                .openCopyDefinitionComponentModal(row, CopyDefinitionType.NamedList, 'edit')
                .catch(lodash.noop);
        };
        return NamedListDefinitionTabComponent;
    }());
    /** @nocollapse */ NamedListDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabComponent, deps: [{ token: i1__namespace$7.RxNamedListDefinitionDataPageService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxBundleCacheService }, { token: i3__namespace.TranslateService }, { token: i3__namespace$1.RxModalService }, { token: i2__namespace.RxCommandFactoryService }, { token: i1__namespace$7.RxNamedListDefinitionService }, { token: i1__namespace$1.Router }, { token: RxCopyDefinitionService }, { token: i2__namespace.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NamedListDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: NamedListDefinitionTabComponent, selector: "ax-named-list-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'named-list'\"\n  (addDefinition)=\"onAddDefinition()\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-named-list-definition-tab',
                        templateUrl: './named-list-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$7.RxNamedListDefinitionDataPageService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxBundleCacheService }, { type: i3__namespace.TranslateService }, { type: i3__namespace$1.RxModalService }, { type: i2__namespace.RxCommandFactoryService }, { type: i1__namespace$7.RxNamedListDefinitionService }, { type: i1__namespace$1.Router }, { type: RxCopyDefinitionService }, { type: i2__namespace.RxDefinitionNameService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var DocumentDefinitionTabComponent = /** @class */ (function () {
        function DocumentDefinitionTabComponent(rxDocumentDefinitionDataPageService, rxDocumentDefinitionService, rxFeatureService, rxOverlayService, rxModalService, translateService, rxCommandFactoryService, rxBundleCacheService, router, rxCopyDefinitionService) {
            var _this = this;
            this.rxDocumentDefinitionDataPageService = rxDocumentDefinitionDataPageService;
            this.rxDocumentDefinitionService = rxDocumentDefinitionService;
            this.rxFeatureService = rxFeatureService;
            this.rxOverlayService = rxOverlayService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.router = router;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.gridColumns = [];
            this.isActionInProgress = false;
        }
        DocumentDefinitionTabComponent.prototype.ngOnInit = function () {
            if (this.rxFeatureService.isFeatureEnabled('DRD21-14961')) {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/document/edit2/";
            }
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxDocumentDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'customizationPerspective',
                        'scope',
                        'overlayGroupId',
                        'overlayDescriptor'
                    ]
                }
            });
        };
        DocumentDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        DocumentDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'document',
                this.rxFeatureService.isFeatureEnabled('DRD21-14961') ? 'new2' : 'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        DocumentDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.document.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newDocumentDefinitionName) { return _this.rxDocumentDefinitionService.rename(selectedRow.name, newDocumentDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        DocumentDefinitionTabComponent.prototype.getEditDefinitionUrl = function () {
            return window.location.origin + "/innovationstudio/index.html#/app/bundle/" + this.rxBundleCacheService.bundleId + "/document/";
        };
        DocumentDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        DocumentDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.document.command.DeleteDocumentDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        DocumentDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxDocumentDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        DocumentDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService
                .openCopyDefinitionComponentModal(row, CopyDefinitionType.Document, this.rxFeatureService.isFeatureEnabled('DRD21-14961') ? 'edit2' : 'edit')
                .catch(lodash.noop);
        };
        return DocumentDefinitionTabComponent;
    }());
    /** @nocollapse */ DocumentDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabComponent, deps: [{ token: i1__namespace$3.RxDocumentDefinitionDataPageService }, { token: i1__namespace$3.RxDocumentDefinitionService }, { token: i2__namespace.RxFeatureService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$1.Router }, { token: RxCopyDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DocumentDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DocumentDefinitionTabComponent, selector: "ax-document-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'document'\"\n  [editRouterLink]=\"editRouterLink\"\n  (addDefinition)=\"onAddDefinition()\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-document-definition-tab',
                        templateUrl: './document-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.RxDocumentDefinitionDataPageService }, { type: i1__namespace$3.RxDocumentDefinitionService }, { type: i2__namespace.RxFeatureService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$1.Router }, { type: RxCopyDefinitionService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AX_WEB_API_DEFINITION_TAB = {
        definitionGridColumns: {
            description: {
                title: 'com.bmc.arsys.rx.client.admin.chatbots.description.title',
                fieldId: 'description'
            }
        }
    };

    var WebApiDefinitionTabComponent = /** @class */ (function () {
        function WebApiDefinitionTabComponent(rxWebApiDefinitionDataPageService, rxWebApiDefinitionService, rxOverlayService, rxModalService, translateService, rxCommandFactoryService, rxBundleCacheService, router, rxCopyDefinitionService) {
            var _this = this;
            this.rxWebApiDefinitionDataPageService = rxWebApiDefinitionDataPageService;
            this.rxWebApiDefinitionService = rxWebApiDefinitionService;
            this.rxOverlayService = rxOverlayService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.router = router;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.gridColumns = [];
            this.isActionInProgress = false;
        }
        WebApiDefinitionTabComponent.prototype.ngOnInit = function () {
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_WEB_API_DEFINITION_TAB.definitionGridColumns.description
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_WEB_API_DEFINITION_TAB.definitionGridColumns.description.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxWebApiDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'description',
                        'scope',
                        'customizationPerspective',
                        'overlayGroupId',
                        'overlayDescriptor'
                    ]
                }
            });
        };
        WebApiDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable ||
                        !(selectedRows.length === 1 &&
                            this.rxOverlayService.isCustomizationEnabled('allowOverlay', selectedRows[0]))
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        WebApiDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'web-api',
                'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        WebApiDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.web-api.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: lodash.lowerFirst(definitionType)
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    definitionName: selectedRow.name,
                    infoText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.info.message'),
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newWebApiDefinitionName) { return _this.rxWebApiDefinitionService.rename(selectedRow.name, newWebApiDefinitionName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        WebApiDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        WebApiDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.webapi.command.DeleteWebApiDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        WebApiDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.WebApi).catch(lodash.noop);
        };
        return WebApiDefinitionTabComponent;
    }());
    /** @nocollapse */ WebApiDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabComponent, deps: [{ token: i1__namespace$4.RxWebApiDefinitionDataPageService }, { token: i1__namespace$4.RxWebApiDefinitionService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$1.Router }, { token: RxCopyDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ WebApiDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiDefinitionTabComponent, selector: "ax-web-api-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'web-api'\"\n  (addDefinition)=\"onAddDefinition()\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-web-api-definition-tab',
                        templateUrl: './web-api-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxWebApiDefinitionDataPageService }, { type: i1__namespace$4.RxWebApiDefinitionService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$1.Router }, { type: RxCopyDefinitionService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var EventDefinitionTabComponent = /** @class */ (function () {
        function EventDefinitionTabComponent(rxEventDefinitionDataPageService, rxOverlayService, translateService, rxModalService, rxCommandFactoryService, rxBundleCacheService, rxEventDefinitionService, rxCopyDefinitionService, router) {
            var _this = this;
            this.rxEventDefinitionDataPageService = rxEventDefinitionDataPageService;
            this.rxOverlayService = rxOverlayService;
            this.translateService = translateService;
            this.rxModalService = rxModalService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxEventDefinitionService = rxEventDefinitionService;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.router = router;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.gridColumns = [];
            this.isActionInProgress = false;
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
        }
        EventDefinitionTabComponent.prototype.ngOnInit = function () {
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxEventDefinitionDataPageService.get({
                params: {
                    propertySelection: ['name', 'lastUpdateTime', 'lastChangedBy', 'isEnabled', 'customizationPerspective', 'scope']
                }
            });
        };
        EventDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        EventDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'event', 'new', this.rxBundleCacheService.bundleId]);
        };
        EventDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        EventDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.event.command.DeleteEventDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        EventDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxEventDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        EventDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.Event).catch(lodash.noop);
        };
        return EventDefinitionTabComponent;
    }());
    /** @nocollapse */ EventDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabComponent, deps: [{ token: i1__namespace$8.RxEventDefinitionDataPageService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace.TranslateService }, { token: i3__namespace$1.RxModalService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$8.RxEventDefinitionService }, { token: RxCopyDefinitionService }, { token: i1__namespace$1.Router }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ EventDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: EventDefinitionTabComponent, selector: "ax-event-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'event'\"\n  (addDefinition)=\"onAddDefinition()\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-event-definition-tab',
                        templateUrl: './event-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$8.RxEventDefinitionDataPageService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace.TranslateService }, { type: i3__namespace$1.RxModalService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$8.RxEventDefinitionService }, { type: RxCopyDefinitionService }, { type: i1__namespace$1.Router }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AX_EVENT_STATISTICS_TAB = {
        definitionGridColumns: {
            eventName: {
                title: 'com.bmc.arsys.rx.innovation-studio.tabs.event-statistics.grid.event.label',
                fieldId: 'eventName'
            }
        }
    };

    var EventStatisticsDefinitionTabComponent = /** @class */ (function () {
        function EventStatisticsDefinitionTabComponent(rxEventStatisticsDefinitionDataPageService, rxOverlayService, translateService, rxModalService, rxCommandFactoryService, rxBundleCacheService, rxEventStatisticsDefinitionService, router, rxCopyDefinitionService) {
            var _this = this;
            this.rxEventStatisticsDefinitionDataPageService = rxEventStatisticsDefinitionDataPageService;
            this.rxOverlayService = rxOverlayService;
            this.translateService = translateService;
            this.rxModalService = rxModalService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxEventStatisticsDefinitionService = rxEventStatisticsDefinitionService;
            this.router = router;
            this.rxCopyDefinitionService = rxCopyDefinitionService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.gridColumns = [];
            this.isActionInProgress = false;
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
        }
        EventStatisticsDefinitionTabComponent.prototype.ngOnInit = function () {
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                {
                    title: AX_EVENT_STATISTICS_TAB.definitionGridColumns.eventName.title,
                    fieldId: AX_EVENT_STATISTICS_TAB.definitionGridColumns.eventName.fieldId,
                    cellTemplate: this.eventNameCellTemplate
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled,
                AX_BUNDLE_DETAILS.definitionGridColumns.scope,
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_EVENT_STATISTICS_TAB.definitionGridColumns.eventName.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.isEnabled.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.scope.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.definitions$ = this.rxEventStatisticsDefinitionDataPageService.get({
                params: {
                    propertySelection: [
                        'name',
                        'eventName',
                        'lastUpdateTime',
                        'lastChangedBy',
                        'isEnabled',
                        'customizationPerspective',
                        'scope'
                    ]
                }
            });
        };
        EventStatisticsDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.revertCustomization,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.customizedInThisOverlayGroup; })
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.copy,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable ||
                        selectedRows.length === 0 ||
                        lodash.some(selectedRows, function (selectedRow) { return selectedRow.customizationPerspective !== i2.RX_OVERLAY.customizationPerspective.createdInThisOverlayGroup; })
                }
            ];
        };
        EventStatisticsDefinitionTabComponent.prototype.onAddDefinition = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'event-statistics',
                'new',
                this.rxBundleCacheService.bundleId
            ]);
        };
        EventStatisticsDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        EventStatisticsDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxCommandFactoryService
                    .forResourceType('com.bmc.arsys.rx.application.event.command.DeleteEventStatisticsDefinitionsCommand')
                    .execute({
                    definitionNames: definitionNames
                })
                    .pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        EventStatisticsDefinitionTabComponent.prototype.onRevertCustomization = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.revert-customization.confirmation.message')
            }))
                .pipe(operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (response) { return response
                ? rxjs.forkJoin(selectedRows.map(function (definition) { return _this.rxEventStatisticsDefinitionService.revertCustomization(definition.name); })).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        EventStatisticsDefinitionTabComponent.prototype.onCopyDefinition = function (row) {
            this.rxCopyDefinitionService.openCopyDefinitionComponentModal(row, CopyDefinitionType.EventStatistics).catch(lodash.noop);
        };
        return EventStatisticsDefinitionTabComponent;
    }());
    /** @nocollapse */ EventStatisticsDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabComponent, deps: [{ token: i1__namespace$9.RxeventStatisticsDefinitionDataPageService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace.TranslateService }, { token: i3__namespace$1.RxModalService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxBundleCacheService }, { token: i1__namespace$9.RxEventStatisticsDefinitionService }, { token: i1__namespace$1.Router }, { token: RxCopyDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ EventStatisticsDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: EventStatisticsDefinitionTabComponent, selector: "ax-event-statistics-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }, { propertyName: "eventNameCellTemplate", first: true, predicate: ["eventNameCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'event-statistics'\"\n  (addDefinition)=\"onAddDefinition()\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n  (copyDefinition)=\"onCopyDefinition($event)\"\n  (revertCustomization)=\"onRevertCustomization($event)\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n></ax-definition-tab>\n\n<ng-template #eventNameCellTemplate let-dataItem=\"dataItem\">\n  {{ dataItem.eventName | rxDefinitionNamePipe }}\n</ng-template>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-event-statistics-definition-tab',
                        templateUrl: './event-statistics-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$9.RxeventStatisticsDefinitionDataPageService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace.TranslateService }, { type: i3__namespace$1.RxModalService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxBundleCacheService }, { type: i1__namespace$9.RxEventStatisticsDefinitionService }, { type: i1__namespace$1.Router }, { type: RxCopyDefinitionService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }], eventNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['eventNameCellTemplate', { static: true }]
                }] } });

    var AX_CHATBOT_DEFINITION_TAB = {
        definitionGridColumns: {
            description: {
                titleKey: 'com.bmc.arsys.rx.client.common.description.label',
                fieldId: 'description'
            }
        }
    };

    var ChatbotDefinitionTabComponent = /** @class */ (function () {
        function ChatbotDefinitionTabComponent(router, rxChatbotDefinitionDataPageService, rxDefinitionNameService, rxOverlayService, rxBundleCacheService, rxModalService, translateService, rxChatbotDefinitionService) {
            var _this = this;
            this.router = router;
            this.rxChatbotDefinitionDataPageService = rxChatbotDefinitionDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxOverlayService = rxOverlayService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxChatbotDefinitionService = rxChatbotDefinitionService;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
            this.definitions$ = this.rxChatbotDefinitionDataPageService.get();
            this.gridColumns = [];
            this.isActionInProgress = false;
            this.botNameMaxLength = this.rxBundleCacheService.bundleId === i2.RX_APPLICATION.chatbotBundleId
                ? 254
                : 254 - (this.rxBundleCacheService.bundleId + ':').length;
        }
        ChatbotDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            var isBundleEditable = this.rxOverlayService.isBundleEditable(this.rxBundleCacheService.bundleId);
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    isDisabled: !this.rxOverlayService.areNewDefinitionsAllowedSync(this.bundleDescriptor)
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.rename,
                    isDisabled: !isBundleEditable || selectedRows.length !== 1
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: !isBundleEditable || selectedRows.length === 0
                }
            ];
        };
        ChatbotDefinitionTabComponent.prototype.ngOnInit = function () {
            this.gridColumns = [
                AX_BUNDLE_DETAILS.definitionGridColumns.name,
                {
                    title: AX_CHATBOT_DEFINITION_TAB.definitionGridColumns.description.titleKey,
                    fieldId: AX_CHATBOT_DEFINITION_TAB.definitionGridColumns.description.fieldId
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime,
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_CHATBOT_DEFINITION_TAB.definitionGridColumns.description.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
        };
        ChatbotDefinitionTabComponent.prototype.onAddDefinition = function () {
            var _this = this;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.chatbot.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.new-chatbot.title'),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    autoFocus: false,
                    maxLength: this.botNameMaxLength,
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: lodash.map(this.definitionTabComponent.recordGrid.adaptTableConfig.data, AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId)
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.withLatestFrom(this.rxBundleCacheService.getCurrentBundleDescriptor()), operators.switchMap(function (_a) {
                var _b = __read(_a, 2), chatbotName = _b[0], bundleDescriptor = _b[1];
                var newChatbotName = _this.rxBundleCacheService.bundleId === i2.RX_APPLICATION.chatbotBundleId
                    ? chatbotName
                    : _this.rxDefinitionNameService.getDefinitionName(_this.rxBundleCacheService.bundleId, chatbotName);
                return _this.rxChatbotDefinitionService.create(newChatbotName, bundleDescriptor).pipe(operators.tap(function () {
                    _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'chatbot', 'edit', newChatbotName]);
                }));
            }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ChatbotDefinitionTabComponent.prototype.onRenameDefinition = function (_a) {
            var _this = this;
            var selectedRow = _a.selectedRow, definitionNames = _a.definitionNames;
            var definitionType = this.translateService.instant('com.bmc.arsys.rx.client.definition-type.chatbot.label');
            rxjs.from(this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.title', {
                    definitionType: definitionType.toLowerCase()
                }),
                size: 'sm',
                content: i2$1.RenameDefinitionModalComponent,
                data: {
                    maxLength: this.botNameMaxLength,
                    definitionName: selectedRow.name,
                    fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.definition-name.label', { definitionType: definitionType }),
                    validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.rename-definition-modal.name-validation.message', { definitionType: definitionType }),
                    definitionType: definitionType,
                    definitionNames: definitionNames
                }
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.switchMap(function (newChatbotName) { return _this.rxChatbotDefinitionService.rename(selectedRow.id, newChatbotName); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        ChatbotDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.switchMap(function (response) {
                var defaultChatbot = lodash.find(selectedRows, {
                    id: i5$2.RX_CHATBOTS.chatbotSettings.defaultBotId
                });
                if (defaultChatbot && response) {
                    return rxjs.from(_this.rxModalService.confirm({
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                        modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                        message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.configurations-delete-confirmation.message', { defaultChatbotName: defaultChatbot[AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId] })
                    }));
                }
                else if (response) {
                    return rxjs.of(true);
                }
                else {
                    return rxjs.of(false);
                }
            }), operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxChatbotDefinitionService.delete(lodash.map(selectedRows, 'id')).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ChatbotDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        return ChatbotDefinitionTabComponent;
    }());
    /** @nocollapse */ ChatbotDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabComponent, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace.RxChatbotDefinitionDataPageService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxBundleCacheService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i5__namespace$2.RxChatbotDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ChatbotDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotDefinitionTabComponent, selector: "ax-chatbot-definition-tab", inputs: { bundleDescriptor: "bundleDescriptor" }, viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  [definitionType]=\"'chatbot'\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  (addDefinition)=\"onAddDefinition()\"\n  (renameDefinition)=\"onRenameDefinition($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n></ax-definition-tab>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-chatbot-definition-tab',
                        templateUrl: './chatbot-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace.RxChatbotDefinitionDataPageService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxBundleCacheService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i5__namespace$2.RxChatbotDefinitionService }]; }, propDecorators: { bundleDescriptor: [{
                    type: i0.Input
                }], definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }] } });

    var AdminSettingEditorComponent = /** @class */ (function (_super) {
        __extends(AdminSettingEditorComponent, _super);
        function AdminSettingEditorComponent(injector, dockedPanelContext, formBuilder, translateService, rxAdminSettingsService, rxNotificationService) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.injector = injector;
            _this.dockedPanelContext = dockedPanelContext;
            _this.formBuilder = formBuilder;
            _this.translateService = translateService;
            _this.rxAdminSettingsService = rxAdminSettingsService;
            _this.rxNotificationService = rxNotificationService;
            _this.isEditMode = _this.dockedPanelContext.getData().editMode;
            _this.settingForm = _this.createSettingForm();
            _this.adminSetting = _this.dockedPanelContext.getData().selectedAdminSetting;
            _this.viewDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.definition-type.view.label'),
                definitionType: i2$1.RxDefinitionPickerType.View,
                required: true
            };
            _this.permissionEditorOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.common.permissions.label'),
                type: 'externalconfig',
                permissionScope: i2.RX_PERMISSION.permissionScope.all
            };
            return _this;
        }
        AdminSettingEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            if (this.isEditMode) {
                this.initializeSettingForm();
            }
        };
        AdminSettingEditorComponent.prototype.createSettingForm = function () {
            return this.formBuilder.group({
                componentName: '',
                registeredModuleName: '',
                innovationStudio: false,
                application: !this.isEditMode,
                componentLabel: '',
                firstMenu: '',
                secondMenu: '',
                externalLink: '',
                permissions: ''
            });
        };
        AdminSettingEditorComponent.prototype.initializeSettingForm = function () {
            this.settingForm.get('componentName').setValue(this.adminSetting.componentName);
            this.settingForm.controls.componentName.disable();
            this.settingForm.get('registeredModuleName').setValue(this.adminSetting.registeredModuleName);
            this.settingForm.get('externalLink').setValue(this.adminSetting.externalLink);
            if (this.adminSetting.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.both.value) {
                this.settingForm.get('innovationStudio').setValue(true);
                this.settingForm.get('application').setValue(true);
            }
            else if (this.adminSetting.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.innovationStudio.value) {
                this.settingForm.get('innovationStudio').setValue(true);
                this.settingForm.get('application').setValue(false);
            }
            else if (this.adminSetting.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.application.value) {
                this.settingForm.get('application').setValue(true);
            }
            this.settingForm.get('componentLabel').setValue(this.adminSetting.localeList[0].componentLabel);
            this.settingForm.get('permissions').setValue(this.adminSetting.permissions);
            this.settingForm.get('firstMenu').setValue(this.adminSetting.localeList[0].firstMenu);
            this.settingForm.get('secondMenu').setValue(this.adminSetting.localeList[0].secondMenu);
        };
        AdminSettingEditorComponent.prototype.saveAdminSetting = function () {
            var _this = this;
            var adminSettingRecord = this.transformFormControlData();
            this.settingForm.markAsPristine();
            if (this.isEditMode) {
                this.rxAdminSettingsService.updateAdminSetting(adminSettingRecord).subscribe(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.configurations.setting-saved.message'));
                    _this.dockedPanelContext.close(adminSettingRecord);
                });
            }
            else {
                this.rxAdminSettingsService.createAdminSetting(adminSettingRecord).subscribe(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.configurations.setting-saved.message'));
                    _this.dockedPanelContext.close(adminSettingRecord);
                });
            }
        };
        AdminSettingEditorComponent.prototype.transformFormControlData = function () {
            var settingRecord = lodash.cloneDeep(this.settingForm.value);
            if (this.isEditMode) {
                settingRecord.componentName = this.adminSetting.componentName;
            }
            settingRecord.localeList = [];
            settingRecord.viewToOpen = 'CustomView';
            if (settingRecord.innovationStudio && settingRecord.application) {
                settingRecord.showInLocation = i2.RX_ADMINISTRATION.settingAccessOptions.both.value;
            }
            else if (settingRecord.innovationStudio) {
                settingRecord.showInLocation = i2.RX_ADMINISTRATION.settingAccessOptions.innovationStudio.value;
            }
            else if (settingRecord.application) {
                settingRecord.showInLocation = i2.RX_ADMINISTRATION.settingAccessOptions.application.value;
            }
            else {
                settingRecord.showInLocation = i2.RX_ADMINISTRATION.settingAccessOptions.none.value;
            }
            settingRecord.localeList.push(Object.assign({ locale: 'en' }, lodash.pick(settingRecord, ['componentLabel', 'firstMenu', 'secondMenu'])));
            if (this.adminSetting.linkType === i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.value) {
                settingRecord.linkType = this.adminSetting.linkType;
                settingRecord.externalLink = null;
                settingRecord.viewComponent = true;
            }
            else {
                settingRecord.linkType = this.adminSetting.linkType;
                settingRecord.viewComponent = false;
                settingRecord.registeredModuleName = null;
            }
            if (!settingRecord.permissions) {
                settingRecord.permissions = [];
            }
            delete settingRecord.firstMenu;
            delete settingRecord.secondMenu;
            delete settingRecord.componentLabel;
            delete settingRecord.innovationStudio;
            delete settingRecord.application;
            return settingRecord;
        };
        AdminSettingEditorComponent.prototype.isSettingActive = function () {
            return this.settingForm.get('innovationStudio').value || this.settingForm.get('application').value;
        };
        AdminSettingEditorComponent.prototype.isInBundleSetting = function () {
            return this.adminSetting.linkType === i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.value;
        };
        AdminSettingEditorComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        AdminSettingEditorComponent.prototype.isDirty = function () {
            var _a;
            return this.settingForm.dirty || ((_a = this.rxPermissionEditorComponent) === null || _a === void 0 ? void 0 : _a.isDirty());
        };
        return AdminSettingEditorComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ AdminSettingEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminSettingEditorComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace.DockedPanelContext }, { token: i4__namespace.FormBuilder }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxAdminSettingsService }, { token: i2__namespace.RxNotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AdminSettingEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminSettingEditorComponent, selector: "ax-admin-setting-editor", viewQueries: [{ propertyName: "rxPermissionEditorComponent", first: true, predicate: i2$1.RxPermissionEditorComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <form [formGroup]=\"settingForm\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"component-name\"\n          label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.component-name.label' | translate }}\"\n          formControlName=\"componentName\"\n          required=\"true\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"isInBundleSetting()\">\n      <div class=\"col-12\">\n        <rx-definition-picker\n          class=\"d-block form-group\"\n          [options]=\"viewDefinitionPickerOptions\"\n          formControlName=\"registeredModuleName\"\n          rx-id=\"view\"\n          required=\"true\"\n        >\n        </rx-definition-picker>\n      </div>\n    </div>\n    <div class=\"row\" *ngIf=\"!isInBundleSetting()\">\n      <div class=\"col-12\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"external-link\"\n          label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.external-link.label' | translate }}\"\n          formControlName=\"externalLink\"\n          required=\"true\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-control-label\n          label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.enable-access-from.label' | translate }}\"\n        ></adapt-rx-control-label>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-checkbox\n          class=\"d-block form-group\"\n          formControlName=\"innovationStudio\"\n          rx-id=\"innovation-studio\"\n          label=\"Innovation Studio\"\n        ></adapt-rx-checkbox>\n        <adapt-rx-checkbox\n          class=\"d-block form-group\"\n          formControlName=\"application\"\n          rx-id=\"application\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}\"\n        ></adapt-rx-checkbox>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"component-label\"\n          label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.component-label.label' | translate }}\"\n          formControlName=\"componentLabel\"\n          required=\"true\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <rx-permission-editor\n          class=\"d-block form-group\"\n          [options]=\"permissionEditorOptions\"\n          rx-id=\"permissions\"\n          formControlName=\"permissions\"\n        >\n        </rx-permission-editor>\n      </div>\n    </div>\n    <div *ngIf=\"isSettingActive()\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <adapt-rx-textfield\n            class=\"d-block form-group\"\n            rx-id=\"first-menu\"\n            label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.first-menu.label' | translate }}\"\n            formControlName=\"firstMenu\"\n            required=\"true\"\n          >\n          </adapt-rx-textfield>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <adapt-rx-textfield\n            class=\"d-block form-group\"\n            rx-id=\"second-menu\"\n            label=\"{{ 'com.bmc.arsys.rx.innovation-studio.configurations.second-menu.label' | translate }}\"\n            formControlName=\"secondMenu\"\n          >\n          </adapt-rx-textfield>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"saveAdminSetting()\"\n    [disabled]=\"settingForm.pristine || settingForm.invalid\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" type=\"button\" (click)=\"cancel()\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i2__namespace$1.RxPermissionEditorComponent, selector: "rx-permission-editor", inputs: ["options"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i4__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminSettingEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-admin-setting-editor',
                        templateUrl: './admin-setting-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace.DockedPanelContext }, { type: i4__namespace.FormBuilder }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxAdminSettingsService }, { type: i2__namespace.RxNotificationService }]; }, propDecorators: { rxPermissionEditorComponent: [{
                    type: i0.ViewChild,
                    args: [i2$1.RxPermissionEditorComponent]
                }] } });

    var AX_CONFIG_DEFINITION_TAB = {
        definitionGridColumns: {
            showInLocation: {
                title: 'com.bmc.arsys.rx.innovation-studio.configurations.grid.column.access.title',
                fieldId: 'showInLocation'
            }
        }
    };

    var AX_CONFIGURATION_DEFINITION = {
        configurationSettingTypes: {
            shared: {
                configurationType: 'shared-settings',
                labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.setting-type.shared.label'
            },
            inbundle: {
                configurationType: 'in-bundle-settings',
                labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.setting-type.in-bundle.label'
            },
            external: {
                configurationType: 'external-settings',
                labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.setting-type.external.label'
            }
        }
    };

    var ConfigurationDefinitionTabComponent = /** @class */ (function () {
        function ConfigurationDefinitionTabComponent(rxAdminComponentDataPageQuery, rxModalService, translateService, rxAdminSettingsService, router, rxBundleCache, rxFeatureService) {
            var _this = this;
            this.rxAdminComponentDataPageQuery = rxAdminComponentDataPageQuery;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.router = router;
            this.rxBundleCache = rxBundleCache;
            this.rxFeatureService = rxFeatureService;
            this.definitions$ = this.rxAdminComponentDataPageQuery.get().pipe(operators.map(function (dataPage) { return ({
                totalSize: dataPage.totalSize,
                data: dataPage.data.map(function (item) {
                    if (item.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.application.value) {
                        item.showInLocation = _this.translateService.instant('com.bmc.arsys.rx.client.common.application.label');
                    }
                    else if (item.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.innovationStudio.value) {
                        item.showInLocation = 'Innovation Studio';
                    }
                    else if (item.showInLocation === i2.RX_ADMINISTRATION.settingAccessOptions.both.value) {
                        item.showInLocation = _this.translateService.instant('com.bmc.arsys.rx.client.common.application.label') + ", Innovation Studio";
                    }
                    else {
                        item.showInLocation = _this.translateService.instant('com.bmc.arsys.rx.client.common.none.label');
                    }
                    return Object.assign(Object.assign({}, item), { name: item.component, componentType: _this.getComponentType(item) });
                })
            }); }));
            this.isActionInProgress = false;
            this.rowSelectionChanged$ = new rxjs.BehaviorSubject([]);
            this.definitionType = 'config';
            this.definitionActions$ = this.rowSelectionChanged$.pipe(operators.map(function (selectedRows) { return _this.getDefinitionActions(selectedRows); }));
        }
        ConfigurationDefinitionTabComponent.prototype.ngOnInit = function () {
            if (this.rxFeatureService.isFeatureEnabled('DRD21-14987')) {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/" + this.definitionType + "/edit2/" + this.rxBundleCache.bundleId + ":";
            }
            else {
                this.editRouterLink = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/" + this.definitionType + "/edit/" + this.rxBundleCache.bundleId + ":";
            }
            this.gridColumns = [
                {
                    title: AX_BUNDLE_DETAILS.configurationGridColumns.component.title,
                    fieldId: AX_BUNDLE_DETAILS.configurationGridColumns.component.fieldId,
                    cellTemplate: this.componentCellTemplate,
                    sortable: { direction: i5.ColumnSortDirection.Asc, priority: 0 }
                },
                AX_BUNDLE_DETAILS.configurationGridColumns.componentType,
                AX_CONFIG_DEFINITION_TAB.definitionGridColumns.showInLocation
            ];
            var fieldDefinitions = [
                {
                    id: AX_BUNDLE_DETAILS.configurationGridColumns.component.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_BUNDLE_DETAILS.configurationGridColumns.componentType.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: AX_CONFIG_DEFINITION_TAB.definitionGridColumns.showInLocation.fieldId,
                    resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            this.recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            this.settingTypeLabels = {
                external: this.translateService.instant(AX_CONFIGURATION_DEFINITION.configurationSettingTypes.external.labelKey),
                inBundle: this.translateService.instant(AX_CONFIGURATION_DEFINITION.configurationSettingTypes.inbundle.labelKey),
                shared: this.translateService.instant(AX_CONFIGURATION_DEFINITION.configurationSettingTypes.shared.labelKey)
            };
        };
        ConfigurationDefinitionTabComponent.prototype.getComponentType = function (adminComponent) {
            return adminComponent.uiLocation === 'External Location'
                ? this.settingTypeLabels.external
                : adminComponent.custom === 'CommonSettings'
                    ? this.settingTypeLabels.shared
                    : this.settingTypeLabels.inBundle;
        };
        ConfigurationDefinitionTabComponent.prototype.getDefinitionActions = function (selectedRows) {
            return [
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.new,
                    subActions: [
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.shared-setting.label',
                            id: i2.RX_ADMINISTRATION.configurationSettingTypes.shared.configurationType,
                            rxId: i2.RX_ADMINISTRATION.configurationSettingTypes.shared.configurationType
                        },
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.in-bundle-setting.label',
                            id: i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.configurationType,
                            rxId: i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.configurationType
                        },
                        {
                            labelKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.external-setting.label',
                            id: i2.RX_ADMINISTRATION.configurationSettingTypes.external.configurationType,
                            rxId: i2.RX_ADMINISTRATION.configurationSettingTypes.external.configurationType
                        }
                    ]
                },
                {
                    id: AX_BUNDLE_DETAILS.standardDefinitionActionNames.delete,
                    isDisabled: selectedRows.length === 0
                }
            ];
        };
        ConfigurationDefinitionTabComponent.prototype.onCustomAction = function (event) {
            if (event.actionId === i2.RX_ADMINISTRATION.configurationSettingTypes.shared.configurationType) {
                this.router.navigate([
                    i2.RX_APPLICATION.innovationStudioBundleId,
                    this.definitionType,
                    this.rxFeatureService.isFeatureEnabled('DRD21-14987') ? 'new2' : 'new',
                    this.rxBundleCache.bundleId
                ]);
            }
            else if (event.actionId === i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.configurationType) {
                this.openInBundleSettingsEditor({
                    editMode: false,
                    titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.in-bundle-setting.title',
                    selectedAdminSetting: {
                        linkType: i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.value
                    }
                });
            }
            else if (event.actionId === i2.RX_ADMINISTRATION.configurationSettingTypes.external.configurationType) {
                this.openInBundleSettingsEditor({
                    editMode: false,
                    titleKey: 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.external-setting.title',
                    selectedAdminSetting: {
                        linkType: i2.RX_ADMINISTRATION.configurationSettingTypes.external.value
                    }
                });
            }
        };
        ConfigurationDefinitionTabComponent.prototype.editAdminSetting = function (row) {
            var _this = this;
            if (row.custom === 'CustomView') {
                this.rxAdminSettingsService.getAdminSetting(row.component).subscribe(function (adminSetting) {
                    _this.openInBundleSettingsEditor({
                        editMode: true,
                        titleKey: _this.getTitleKey(adminSetting.linkType),
                        selectedAdminSetting: adminSetting
                    });
                });
            }
        };
        ConfigurationDefinitionTabComponent.prototype.openInBundleSettingsEditor = function (data) {
            var _this = this;
            rxjs.from(this.rxModalService
                .openDockedPanel({
                title: this.translateService.instant(data.titleKey),
                content: AdminSettingEditorComponent,
                size: i2$2.OpenViewActionModalSize.Small,
                data: Object.assign({}, data)
            })
                .catch(lodash.noop))
                .pipe(operators.filter(Boolean), operators.tap(function () {
                _this.isActionInProgress = true;
            }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                .subscribe();
        };
        ConfigurationDefinitionTabComponent.prototype.getTitleKey = function (linkType) {
            return linkType === i2.RX_ADMINISTRATION.configurationSettingTypes.inbundle.value
                ? 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.in-bundle-setting.label'
                : 'com.bmc.arsys.rx.innovation-studio.tabs.configurations.new.external-setting.label';
        };
        ConfigurationDefinitionTabComponent.prototype.onDeleteDefinition = function (selectedRows) {
            var _this = this;
            var definitionNames = selectedRows.map(function (definition) { return definition.name; });
            rxjs.from(this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.definitionTabComponent.getDeleteSelectedDefinitionMessage()
            }))
                .pipe(operators.tap(function (result) {
                _this.isActionInProgress = result;
            }), operators.switchMap(function (response) { return response
                ? _this.rxAdminSettingsService.deleteAdminSetting(definitionNames).pipe(operators.tap(function () {
                    _this.isActionInProgress = false;
                }), operators.switchMap(function () { return _this.definitionTabComponent.recordGrid.api.refresh(); }))
                : rxjs.of({}); }), operators.finalize(function () {
                _this.isActionInProgress = false;
            }))
                .subscribe();
        };
        ConfigurationDefinitionTabComponent.prototype.onRowSelectionChanged = function (selectedRows) {
            this.rowSelectionChanged$.next(selectedRows);
        };
        return ConfigurationDefinitionTabComponent;
    }());
    /** @nocollapse */ ConfigurationDefinitionTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabComponent, deps: [{ token: i2__namespace.RxAdminComponentDataPageService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxAdminSettingsService }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxFeatureService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConfigurationDefinitionTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConfigurationDefinitionTabComponent, selector: "ax-configuration-definition-tab", viewQueries: [{ propertyName: "definitionTabComponent", first: true, predicate: DefinitionTabComponent, descendants: true, static: true }, { propertyName: "componentCellTemplate", first: true, predicate: ["componentCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ax-definition-tab\n  [definitionActions]=\"definitionActions$ | async\"\n  [gridColumns]=\"gridColumns\"\n  [recordDefinition]=\"recordDefinition\"\n  [definitionType]=\"'config-definition'\"\n  [definitions$]=\"definitions$\"\n  [isActionInProgress]=\"isActionInProgress\"\n  (rowSelectionChanged)=\"onRowSelectionChanged($event)\"\n  (customAction)=\"onCustomAction($event)\"\n  (deleteDefinition)=\"onDeleteDefinition($event)\"\n></ax-definition-tab>\n\n<ng-template #componentCellTemplate let-dataItem=\"dataItem\">\n  <div (click)=\"editAdminSetting(dataItem)\" *ngIf=\"dataItem.custom === 'CustomView'\">\n    <a [routerLink]=\"\" (click)=\"(false)\">\n      {{ dataItem.component }}\n    </a>\n  </div>\n  <div *ngIf=\"dataItem.custom === 'CommonSettings'\">\n    <a [routerLink]=\"editRouterLink + dataItem.component\">\n      {{ dataItem.component }}\n    </a>\n  </div>\n</ng-template>\n", components: [{ type: DefinitionTabComponent, selector: "ax-definition-tab", inputs: ["isActionInProgress", "definitionType", "definitionActions", "gridColumns", "definitions$", "recordDefinition", "editRouterLink"], outputs: ["customAction", "deleteDefinition", "renameDefinition", "revertCustomization", "copyDefinition", "addDefinition", "rowSelectionChanged"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-configuration-definition-tab',
                        templateUrl: './configuration-definition-tab.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxAdminComponentDataPageService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxAdminSettingsService }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxFeatureService }]; }, propDecorators: { definitionTabComponent: [{
                    type: i0.ViewChild,
                    args: [DefinitionTabComponent, { static: true }]
                }], componentCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['componentCellTemplate', { static: true }]
                }] } });

    var BundleDefinitionsComponent = /** @class */ (function () {
        function BundleDefinitionsComponent(activatedRoute, rxBundleCacheService, rxGlobalCacheService, rxOverlayService, rxPageTitleService, translateService, router) {
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxOverlayService = rxOverlayService;
            this.rxPageTitleService = rxPageTitleService;
            this.translateService = translateService;
            this.router = router;
            this.tabs = AX_BUNDLE_DETAILS.tabs.map(function (tab) { return (Object.assign(Object.assign({}, tab), { isVisited: false })); });
            this.bundleDescriptor$ = this.rxBundleCacheService.getCurrentBundleDescriptor();
            this.activeTabIndex$ = this.activatedRoute.params.pipe(operators.pluck('tab'), operators.map(function (tabId) { return lodash.findIndex(AX_BUNDLE_DETAILS.tabs, { id: tabId }); }), operators.tap(function (index) {
                if (index === -1) {
                    _this.router.navigate([BundleDefinitionTab.Records], { relativeTo: _this.activatedRoute.parent });
                }
                else {
                    _this.tabs[index].isVisited = true;
                    _this.setPageTitle(AX_BUNDLE_DETAILS.tabs[index].titleKey);
                }
            }));
        }
        BundleDefinitionsComponent.prototype.onTabChanged = function (tabChangeEvent) {
            var nextActiveTab = AX_BUNDLE_DETAILS.tabs[tabChangeEvent.index];
            this.router.navigate([nextActiveTab.id], { relativeTo: this.activatedRoute.parent });
        };
        BundleDefinitionsComponent.prototype.setPageTitle = function (titleKey) {
            var _this = this;
            this.rxGlobalCacheService
                .getBundleFriendlyName(this.rxBundleCacheService.bundleId)
                .pipe(operators.take(1))
                .subscribe(function (bundleFriendlyName) {
                _this.rxPageTitleService.set([_this.translateService.instant(titleKey), bundleFriendlyName], _this.rxGlobalCacheService.applicationId);
            });
        };
        return BundleDefinitionsComponent;
    }());
    /** @nocollapse */ BundleDefinitionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxPageTitleService }, { token: i3__namespace.TranslateService }, { token: i1__namespace$1.Router }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BundleDefinitionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BundleDefinitionsComponent, selector: "ax-bundle-definitions", ngImport: i0__namespace, template: "<adapt-tabset\n  *ngIf=\"bundleDescriptor$ | async as bundleDescriptor\"\n  [tab-active]=\"activeTabIndex$ | async\"\n  [fullHeight]=\"true\"\n  (tab-active-changed)=\"onTabChanged($event)\"\n>\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[0].titleKey | translate\">\n    <ax-record-definition-tab\n      *ngIf=\"tabs[0].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-record-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[1].titleKey | translate\">\n    <ax-view-definition-tab *ngIf=\"tabs[1].isVisited\" [bundleDescriptor]=\"bundleDescriptor\"></ax-view-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[2].titleKey | translate\">\n    <ax-process-definition-tab\n      *ngIf=\"tabs[2].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-process-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[3].titleKey | translate\">\n    <ax-rule-definition-tab *ngIf=\"tabs[3].isVisited\" [bundleDescriptor]=\"bundleDescriptor\"></ax-rule-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[4].titleKey | translate\">\n    <ax-association-definition-tab\n      *ngIf=\"tabs[4].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-association-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[5].titleKey | translate\">\n    <ax-named-list-definition-tab\n      *ngIf=\"tabs[5].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-named-list-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[6].titleKey | translate\">\n    <ax-document-definition-tab\n      *ngIf=\"tabs[6].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-document-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[7].titleKey | translate\">\n    <ax-web-api-definition-tab\n      *ngIf=\"tabs[7].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-web-api-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[8].titleKey | translate\">\n    <ax-event-definition-tab *ngIf=\"tabs[8].isVisited\" [bundleDescriptor]=\"bundleDescriptor\"></ax-event-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[9].titleKey | translate\">\n    <ax-event-statistics-definition-tab\n      *ngIf=\"tabs[9].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-event-statistics-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[10].titleKey | translate\">\n    <ax-chatbot-definition-tab\n      *ngIf=\"tabs[10].isVisited\"\n      [bundleDescriptor]=\"bundleDescriptor\"\n    ></ax-chatbot-definition-tab>\n  </adapt-tab-panel>\n\n  <adapt-tab-panel [adapt-tab-title]=\"tabs[11].titleKey | translate\">\n    <ax-configuration-definition-tab *ngIf=\"tabs[11].isVisited\"></ax-configuration-definition-tab>\n  </adapt-tab-panel>\n</adapt-tabset>\n", styles: [":host{height:100%}:host ::ng-deep adapt-tabset .tab-content{padding:0}\n"], components: [{ type: i1__namespace.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: RecordDefinitionTabComponent, selector: "ax-record-definition-tab", inputs: ["bundleDescriptor"] }, { type: ViewDefinitionTabComponent, selector: "ax-view-definition-tab", inputs: ["bundleDescriptor"] }, { type: ProcessDefinitionTabComponent, selector: "ax-process-definition-tab", inputs: ["bundleDescriptor"] }, { type: RuleDefinitionTabComponent, selector: "ax-rule-definition-tab", inputs: ["bundleDescriptor"] }, { type: AssociationDefinitionTabComponent, selector: "ax-association-definition-tab", inputs: ["bundleDescriptor"] }, { type: NamedListDefinitionTabComponent, selector: "ax-named-list-definition-tab", inputs: ["bundleDescriptor"] }, { type: DocumentDefinitionTabComponent, selector: "ax-document-definition-tab", inputs: ["bundleDescriptor"] }, { type: WebApiDefinitionTabComponent, selector: "ax-web-api-definition-tab", inputs: ["bundleDescriptor"] }, { type: EventDefinitionTabComponent, selector: "ax-event-definition-tab", inputs: ["bundleDescriptor"] }, { type: EventStatisticsDefinitionTabComponent, selector: "ax-event-statistics-definition-tab", inputs: ["bundleDescriptor"] }, { type: ChatbotDefinitionTabComponent, selector: "ax-chatbot-definition-tab", inputs: ["bundleDescriptor"] }, { type: ConfigurationDefinitionTabComponent, selector: "ax-configuration-definition-tab" }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-bundle-definitions',
                        templateUrl: './bundle-definitions.component.html',
                        styleUrls: ['./bundle-definitions.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxPageTitleService }, { type: i3__namespace.TranslateService }, { type: i1__namespace$1.Router }]; } });

    var AX_ADD_DATA_WIZARD_STEP$1 = {
        duplicateDataActionTypes: {
            THROW_ERROR: 'Ignore',
            CREATE_NEW_RECORD: 'Create New',
            REPLACE: 'Overwrite',
            MERGE: 'Merge'
        }
    };

    var DataFilterColumnExpressionConfiguratorClass$1 = /** @class */ (function (_super) {
        __extends(DataFilterColumnExpressionConfiguratorClass, _super);
        function DataFilterColumnExpressionConfiguratorClass(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i3.TranslateService);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    children: [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                            icon: 'd-icon-dollar',
                            expression: '$DATE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-groups.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-group-ids.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPIDS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-roles.title'),
                            icon: 'd-icon-dollar',
                            expression: '$ROLES$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIME$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                            icon: 'd-icon-dollar',
                            expression: '$USER$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user-locale.title'),
                            icon: 'd-icon-dollar',
                            expression: '$LOCALE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-week-day.title'),
                            icon: 'd-icon-dollar',
                            expression: '$WEEKDAY$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.null.title'),
                            icon: 'd-icon-dollar',
                            expression: '$NULL$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.server-url.title'),
                            icon: 'd-icon-dollar',
                            expression: '$SERVERURL$'
                        }
                    ]
                }
            ]);
            return _this;
        }
        return DataFilterColumnExpressionConfiguratorClass;
    }(i2.RxExpressionConfigurator));

    var GlobalDataFilterExpressionConfiguratorClass$1 = /** @class */ (function (_super) {
        __extends(GlobalDataFilterExpressionConfiguratorClass, _super);
        function GlobalDataFilterExpressionConfiguratorClass(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i3.TranslateService);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    children: [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                            icon: 'd-icon-dollar',
                            expression: '$DATE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-groups.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-group-ids.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPIDS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-roles.title'),
                            icon: 'd-icon-dollar',
                            expression: '$ROLES$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIME$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                            icon: 'd-icon-dollar',
                            expression: '$USER$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user-locale.title'),
                            icon: 'd-icon-dollar',
                            expression: '$LOCALE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-week-day.title'),
                            icon: 'd-icon-dollar',
                            expression: '$WEEKDAY$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.null.title'),
                            icon: 'd-icon-dollar',
                            expression: '$NULL$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.server-url.title'),
                            icon: 'd-icon-dollar',
                            expression: '$SERVERURL$'
                        }
                    ]
                },
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.common-core-fields.title'),
                    expanded: true,
                    children: i1$5.RX_RECORD_DEFINITION.coreFields.map(function (field) { return ({
                        label: field.name,
                        icon: 'd-icon-field_text',
                        expression: "'" + field.id + "'"
                    }); })
                }
            ]);
            return _this;
        }
        return GlobalDataFilterExpressionConfiguratorClass;
    }(i2.RxExpressionConfigurator));

    var AddBundleContentDataWizardStepComponent = /** @class */ (function () {
        function AddBundleContentDataWizardStepComponent(injector, rxDefinitionNameService, rxExpressionEditorService, rxModalService, rxRecordDefinitionCacheService, rxRecordGridUtilsService, rxWizardModalComponent, translateService) {
            this.injector = injector;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxModalService = rxModalService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.recordDefinitionsFormControl = new i4.FormControl();
            this.duplicateDataActionTypeOptions = lodash.keys(AX_ADD_DATA_WIZARD_STEP$1.duplicateDataActionTypes);
            this.recordDefinitions = [];
            this.selectedDataSources = {};
            this.selectedDefinitions = [];
            this.duplicateConfigurationDataActionTypeOptions = lodash.chain(AX_ADD_DATA_WIZARD_STEP$1.duplicateDataActionTypes)
                .pick(['THROW_ERROR', 'REPLACE'])
                .keys()
                .value();
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.optionFormatter = this.optionFormatter.bind(this);
            this.titleFormatter = this.titleFormatter.bind(this);
        }
        AddBundleContentDataWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataFilterColumnExpressionConfigurator = new DataFilterColumnExpressionConfiguratorClass$1(this.injector);
            this.globalDataFilterExpressionConfigurator = new GlobalDataFilterExpressionConfiguratorClass$1(this.injector);
            this.globalDataFilterExpressionConfigurator.configureForProperty({
                propertyPath: 'globalDataFilter',
                operators: this.globalDataFilterExpressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All),
                dataDictionary$: this.globalDataFilterExpressionConfigurator.commonDataDictionary$
            });
            this.globalDataFilterExpressionFormControlOptions = {
                isLabelHidden: true,
                dataDictionary$: this.globalDataFilterExpressionConfigurator.getDataDictionary('globalDataFilter'),
                operators: this.globalDataFilterExpressionConfigurator.getOperators(),
                clickToBuildExpressionLabel: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.global-data-filter.click-to-build-expression.label')
            };
            var gridColumns = [
                {
                    fieldId: 'dataSource',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-source.label'),
                    wrapText: true,
                    cellTemplate: this.recordNameCellTemplate
                },
                {
                    fieldId: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.name.label'),
                    wrapText: true,
                    visible: false,
                    cellTemplate: this.recordNameCellTemplate
                },
                {
                    fieldId: 'aliasName',
                    wrapText: true,
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.alias-name.label'),
                    visible: false
                },
                {
                    fieldId: 'dataFilterExpression',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label'),
                    cellTemplate: this.dataFilterCellTemplate
                },
                {
                    fieldId: 'dataFilterColumnExpressionFormControlOptions',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label'),
                    visible: false
                },
                {
                    fieldId: 'ignoreRuleExecution',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.ignore-rules.label'),
                    cellTemplate: this.ignoreRulesCellTemplate
                },
                {
                    fieldId: 'duplicateDataActionType',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.duplicates.label'),
                    cellTemplate: this.duplicateDataActionTypeCellTemplate
                }
            ].filter(function (column) { return lodash.includes(_this.options.gridConfig.columns, column.fieldId); });
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'dataSource',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'aliasName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'dataFilterExpression',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'dataFilterColumnExpressionFormControlOptions',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.object
                    },
                    {
                        id: 'ignoreRuleExecution',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'duplicateDataActionType',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ].filter(function (definition) { return lodash.includes(_this.options.gridConfig.columns, definition.id); })
            };
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                context.cache.recordDefinitions.forEach(function (recordDefinition) {
                    _this.dataFilterColumnExpressionConfigurator.configureForProperty({
                        propertyPath: "dataFilterExpression:" + recordDefinition.name,
                        operators: _this.dataFilterColumnExpressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All),
                        dataDictionary$: _this.dataFilterColumnExpressionConfigurator.commonDataDictionary$.pipe(operators.switchMap(function (commonDataDictionary) { return _this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(operators.switchMap(function (associationDescriptors) { return rxjs.forkJoin(__spreadArray([
                            _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinition.name)
                        ], __read(associationDescriptors.map(function (associationDescriptor) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(associationDescriptor.recordDefinitionName); })))).pipe(operators.map(function (definitions) { return [
                            commonDataDictionary[0],
                            {
                                label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.definition-fields.title', {
                                    definitionName: _this.rxDefinitionNameService.getDisplayName(recordDefinition.name)
                                }),
                                expanded: true,
                                children: __spreadArray(__spreadArray([], __read(lodash.chain(definitions)
                                    .find({ name: recordDefinition.name })
                                    .get('fieldDefinitions')
                                    .map(function (fieldDefinition) { return ({
                                    label: fieldDefinition.name,
                                    icon: 'd-icon-field_text',
                                    expression: "'" + fieldDefinition.id + "'"
                                }); })
                                    .value())), [
                                    lodash.isEmpty(associationDescriptors)
                                        ? []
                                        : {
                                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition-associations.title'),
                                            children: associationDescriptors.map(function (associationDescriptor) { return ({
                                                label: _this.rxDefinitionNameService.getDisplayName(associationDescriptor.recordDefinitionName) + " (" + associationDescriptor.label + ")",
                                                children: _this.getAssociationsDataDictionary(definitions, associationDescriptor.recordDefinitionName, associationDescriptor)
                                            }); })
                                        }
                                ])
                            }
                        ]; })); })); }))
                    });
                });
                var recordDefinitions = [];
                var preSelectedRecordDefinitions = [];
                var recordDefinitionsByBundles = context.cache.recordDefinitions
                    .filter(function (recordDefinition) { return recordDefinition.type !== i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom; })
                    .reduce(function (result, recordDefinition) {
                    var newRecordDefinition = {
                        duplicateDataActionType: [_this.options.gridConfig.defaultDuplicateDataActionType],
                        aliasName: recordDefinition.aliasName,
                        name: recordDefinition.name,
                        dataSource: recordDefinition.aliasName || _this.rxDefinitionNameService.getDisplayName(recordDefinition.name),
                        shouldExportData: recordDefinition.shouldExportData,
                        ignoreRuleExecution: false,
                        disabled: recordDefinition.disabled || recordDefinition.selected,
                        selected: recordDefinition.selected,
                        dataFilter: recordDefinition.dataFilter,
                        dataFilterExpression: recordDefinition.dataFilterExpression || null,
                        defaultFilter: recordDefinition.defaultFilter || null,
                        dataFilterColumnExpressionFormControlOptions: {
                            isLabelHidden: true,
                            operators: _this.dataFilterColumnExpressionConfigurator.getOperators(),
                            dataDictionary$: _this.dataFilterColumnExpressionConfigurator.getDataDictionary("dataFilterExpression:" + recordDefinition.name)
                        }
                    };
                    var bundleFriendlyName = context.bundleFriendlyNamesById[_this.rxDefinitionNameService.getBundleId(newRecordDefinition.name)];
                    result[bundleFriendlyName] = result[bundleFriendlyName] || [];
                    result[bundleFriendlyName].push(newRecordDefinition);
                    return result;
                }, {});
                _this.recordDefinitions = lodash.reduce(recordDefinitionsByBundles, function (result, recordDefinitionList, bundleName) {
                    result.push({ name: bundleName, children: recordDefinitionList });
                    preSelectedRecordDefinitions = preSelectedRecordDefinitions.concat(recordDefinitionList.filter(function (recordDefinition) { return recordDefinition.selected; }));
                    recordDefinitions = recordDefinitions.concat(recordDefinitionList);
                    return result;
                }, []);
                _this.addDataForm = new i4.FormGroup({
                    globalDataFilter: new i4.FormControl(null),
                    isConfigurationDataIncluded: new i4.FormControl(context.deploymentPackageDescriptor.isConfigurationDataIncluded),
                    duplicateConfigurationDataActionType: new i4.FormControl([
                        context.deploymentPackageDescriptor.duplicateDataActionTypeForConfigurationData
                    ])
                });
                _this.recordDefinitionsFormControl.valueChanges
                    .pipe(operators.startWith(null), operators.pairwise(), operators.takeUntil(_this.destroyed$))
                    .subscribe(function (_c) {
                    var _d = __read(_c, 2), prev = _d[0], next = _d[1];
                    var selectedRows = _this.definitionsDataGrid.api.getSelectedRows();
                    var newRows;
                    if (prev && prev.length !== next.length) {
                        _this.definitionsDataGrid.api.refresh().subscribe();
                    }
                    if (prev) {
                        newRows = lodash.differenceBy(next, prev, 'dataSource');
                    }
                    else {
                        newRows = next.filter(function (recordDefinition) { return !recordDefinition.selected; });
                    }
                    _this.definitionsDataGrid.api.setSelectedRows(__spreadArray(__spreadArray([], __read(newRows)), __read(selectedRows.filter(function (row) { return lodash.find(next, { dataSource: row.dataSource }); }))));
                });
                _this.recordDefinitionsFormControl.patchValue(preSelectedRecordDefinitions);
                _this.definitionsDataGrid.rowSelectionChanged.pipe(operators.takeUntil(_this.destroyed$)).subscribe(function (selectedRows) {
                    var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                    var singleSelectDataSource = lodash.find(selectedRows, 'isSingleSelect');
                    _this.selectedDataSources = {};
                    _this.selectedDefinitions = [];
                    selectedRows.forEach(function (row) {
                        _this.selectedDataSources[row.dataSource] = true;
                        _this.selectedDefinitions.push(lodash.find(recordDefinitions, { dataSource: row.dataSource }));
                    });
                    if (selectedRows.length > 1 && singleSelectDataSource) {
                        if (_this.isSingleSelectDataSourceSelected) {
                            _this.rxModalService
                                .alert({
                                title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                                message: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.single-select-data-source-selected.message', { dataSource: singleSelectDataSource.dataSource })
                            })
                                .then(function () {
                                _this.definitionsDataGrid.api.setSelectedRows([singleSelectDataSource]);
                            });
                        }
                        else {
                            _this.rxModalService
                                .confirm({
                                title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                                message: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.single-select-data-source-selection-confirmation.message', { dataSource: singleSelectDataSource.dataSource })
                            })
                                .then(function (response) {
                                if (response) {
                                    _this.isSingleSelectDataSourceSelected = true;
                                    _this.definitionsDataGrid.api.setSelectedRows([singleSelectDataSource]);
                                }
                                else {
                                    _this.isSingleSelectDataSourceSelected = false;
                                    _this.definitionsDataGrid.api.setSelectedRows(lodash.reject(selectedRows, singleSelectDataSource));
                                }
                            });
                        }
                    }
                    else {
                        if (_this.isSingleSelectDataSourceSelected && !singleSelectDataSource) {
                            _this.isSingleSelectDataSourceSelected = false;
                        }
                        lodash.assign(newDeploymentPackageDescriptor, {
                            dataImportOptionsByRecordDefinitionName: _this.getDataImportOptionsByRecordDefinitionName(_this.selectedDefinitions)
                        });
                        _this.rxWizardModalComponent.api.updateContext({
                            deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                            isPackageDataModified: true
                        }, selectedRows.length > 0);
                    }
                });
            });
            this.addDataForm.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), value = _d[0], context = _d[1];
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                lodash.assign(newDeploymentPackageDescriptor, {
                    isConfigurationDataIncluded: value.isConfigurationDataIncluded,
                    duplicateDataActionTypeForConfigurationData: lodash.head(value.duplicateConfigurationDataActionType)
                });
                if (value.globalDataFilter) {
                    lodash.assign(newDeploymentPackageDescriptor, {
                        dataImportOptionsByRecordDefinitionName: _this.getDataImportOptionsByRecordDefinitionName(_this.selectedDefinitions)
                    });
                }
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                });
            });
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableRowSelection: i5.RowSelectionMode.Multiple,
                enableFiltering: false,
                recordIdField: 'dataSource',
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return rxjs.of({
                    data: _this.recordDefinitionsFormControl.value,
                    totalSize: _this.recordDefinitionsFormControl.value.length
                }); }
            });
        };
        AddBundleContentDataWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        AddBundleContentDataWizardStepComponent.prototype.optionFormatter = function (recordDefinitionData) {
            return this.rxDefinitionNameService.getDisplayName(recordDefinitionData.dataSource);
        };
        AddBundleContentDataWizardStepComponent.prototype.titleFormatter = function (selectedOptions) {
            var title = lodash.chain(selectedOptions).map(this.optionFormatter).join(', ').truncate({ length: 200 }).value();
            return title || this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        };
        AddBundleContentDataWizardStepComponent.prototype.duplicateDataActionTypesOptionFormatter = function (option) {
            return AX_ADD_DATA_WIZARD_STEP$1.duplicateDataActionTypes[option];
        };
        AddBundleContentDataWizardStepComponent.prototype.openDataFilterColumnExpressionEditor = function (dataItem, columnField) {
            var _this = this;
            // To simplify implementation we mark wizard as dirty as soon as we open expression builder.
            this.rxWizardModalComponent.api.markDirty();
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: "dataFilterExpression:" + dataItem.name,
                    value: dataItem[columnField],
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label')
                },
                expressionConfigurator: this.dataFilterColumnExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.legend.activity-result.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .pipe(operators.tap(function (expression) {
                dataItem[columnField] = expression.value;
                _this.updateDataImportOptionsByRecordDefinitionName(expression.value, dataItem, columnField);
            }))
                .subscribe();
        };
        AddBundleContentDataWizardStepComponent.prototype.openGlobalDataFilterExpressionEditor = function () {
            var _this = this;
            // To simplify implementation we mark wizard as dirty as soon as we open expression builder.
            this.rxWizardModalComponent.api.markDirty();
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'globalDataFilter',
                    value: this.addDataForm.controls.globalDataFilter.value,
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.global-data-filter-expression-editor.label')
                },
                expressionConfigurator: this.globalDataFilterExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .subscribe(function (expression) {
                _this.addDataForm.controls.globalDataFilter.setValue(expression.value);
            });
        };
        AddBundleContentDataWizardStepComponent.prototype.updateDataImportOptionsByRecordDefinitionName = function (cellValue, recordDefinitionData, columnField) {
            var _this = this;
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                var recordDefinitions = _this.recordDefinitionsFormControl.value;
                var recordDefinition = lodash.find(recordDefinitions, { dataSource: recordDefinitionData.dataSource });
                newDeploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName[recordDefinition.name][columnField] =
                    lodash.isArray(cellValue) ? lodash.head(cellValue) : cellValue;
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor
                });
                recordDefinition[columnField] = cellValue;
                _this.recordDefinitionsFormControl.setValue(recordDefinitions);
            });
        };
        AddBundleContentDataWizardStepComponent.prototype.getAssociationsDataDictionary = function (recordDefinitions, recordDefinitionName, parentAssociation) {
            var fieldDefinitions = lodash.find(recordDefinitions, {
                name: recordDefinitionName
            }).fieldDefinitions;
            return fieldDefinitions.map(function (fieldDefinition) { return ({
                label: fieldDefinition.name,
                icon: 'd-icon-field_text',
                expression: "'recordContext._associations." + parentAssociation.associationDefinition.guid + "." + parentAssociation.nodeSide + "[0]." + fieldDefinition.id + "'"
            }); });
        };
        AddBundleContentDataWizardStepComponent.prototype.getDataImportOptionsByRecordDefinitionName = function (recordDefinitions) {
            var _this = this;
            return recordDefinitions.reduce(function (result, recordDefinition) {
                var _a, _b;
                var dataImportOptionsByRecordDefinitionName = {
                    duplicateDataActionType: lodash.head(recordDefinition.duplicateDataActionType),
                    ignoreRuleExecution: recordDefinition.ignoreRuleExecution
                };
                dataImportOptionsByRecordDefinitionName.defaultFilter = recordDefinition.defaultFilter;
                dataImportOptionsByRecordDefinitionName.dataFilterExpression = recordDefinition.dataFilterExpression;
                dataImportOptionsByRecordDefinitionName.dataFilterColumnExpressionFormControlOptions =
                    recordDefinition.dataFilterColumnExpressionFormControlOptions;
                var combinedExpression = lodash.chain([
                    recordDefinition.defaultFilter,
                    recordDefinition.dataFilterExpression,
                    _this.addDataForm.controls.globalDataFilter.value
                ])
                    .compact()
                    .map(function (expression) { return "(" + expression + ")"; })
                    .join(' AND ')
                    .value();
                if (combinedExpression) {
                    if ((_a = result[recordDefinition.name]) === null || _a === void 0 ? void 0 : _a.dataFilter) {
                        dataImportOptionsByRecordDefinitionName.dataFilter = ((_b = result[recordDefinition.name]) === null || _b === void 0 ? void 0 : _b.dataFilter) + " OR (" + combinedExpression + ")";
                    }
                    else {
                        dataImportOptionsByRecordDefinitionName.dataFilter = combinedExpression;
                    }
                }
                result[recordDefinition.name] = dataImportOptionsByRecordDefinitionName;
                return result;
            }, {});
        };
        return AddBundleContentDataWizardStepComponent;
    }());
    /** @nocollapse */ AddBundleContentDataWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepComponent, deps: [{ token: i0__namespace.Injector }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$1.RxExpressionEditorService }, { token: i3__namespace$1.RxModalService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i5__namespace.RxRecordGridUtilsService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AddBundleContentDataWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AddBundleContentDataWizardStepComponent, selector: "ax-add-bundle-content-data-wizard-step", inputs: { options: "options" }, viewQueries: [{ propertyName: "definitionsDataGrid", first: true, predicate: ["definitionsDataGrid"], descendants: true, static: true }, { propertyName: "recordNameCellTemplate", first: true, predicate: ["recordNameCellTemplate"], descendants: true, static: true }, { propertyName: "dataFilterCellTemplate", first: true, predicate: ["dataFilterCellTemplate"], descendants: true, static: true }, { propertyName: "ignoreRulesCellTemplate", first: true, predicate: ["ignoreRulesCellTemplate"], descendants: true, static: true }, { propertyName: "duplicateDataActionTypeCellTemplate", first: true, predicate: ["duplicateDataActionTypeCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">\n    {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.title' | translate }}\n    <span\n      class=\"d-icon-right-question_circle_o\"\n      [adaptPopover]=\"tooltipContentTemplate\"\n      placement=\"bottom\"\n      appendToBody=\"true\"\n      maxWidth=\"400\"\n    ></span>\n  </h5>\n  <div>\n    {{ options?.countTitle | translate: { count: selectedDefinitions.length } }}\n  </div>\n</div>\n\n<ng-template #tooltipContentTemplate>\n  <div\n    [innerHTML]=\"'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-bundle-content-data.tooltip' | translate\"\n  ></div>\n</ng-template>\n\n<div class=\"mb-3\">{{ options?.descriptionTitle | translate }}</div>\n\n<ng-container [formGroup]=\"addDataForm\">\n  <div class=\"d-flex mb-3 justify-content-between\">\n    <adapt-rx-select\n      [formControl]=\"recordDefinitionsFormControl\"\n      [options]=\"recordDefinitions\"\n      [optionFormatter]=\"optionFormatter\"\n      [multiple]=\"true\"\n      [selectAllButton]=\"true\"\n      [deselectAllButton]=\"true\"\n      [enableFilter]=\"true\"\n      [titleFormatter]=\"titleFormatter\"\n      class=\"add-data-record-definitions-select\"\n    >\n    </adapt-rx-select>\n\n    <rx-expression-form-control\n      class=\"d-flex ml-4\"\n      *ngIf=\"options?.showGlobalFilterExpressionEditor\"\n      [options]=\"globalDataFilterExpressionFormControlOptions\"\n      (events)=\"openGlobalDataFilterExpressionEditor()\"\n      [formControl]=\"addDataForm.controls.globalDataFilter\"\n    >\n    </rx-expression-form-control>\n  </div>\n\n  <rx-record-grid class=\"mb-3\" [config]=\"recordGridConfig$\" #definitionsDataGrid></rx-record-grid>\n\n  <div class=\"d-flex pb-3\">\n    <adapt-rx-checkbox\n      class=\"add-data-is-configuration-data-included-checkbox pr-3\"\n      [label]=\"\n        'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.include-configuration-data-in-the-package.label'\n          | translate\n      \"\n      formControlName=\"isConfigurationDataIncluded\"\n    ></adapt-rx-checkbox>\n\n    <adapt-rx-select\n      *ngIf=\"addDataForm.controls.isConfigurationDataIncluded.value\"\n      class=\"flex-grow-1\"\n      appendToBody=\"true\"\n      [options]=\"duplicateConfigurationDataActionTypeOptions\"\n      [optionFormatter]=\"duplicateDataActionTypesOptionFormatter\"\n      formControlName=\"duplicateConfigurationDataActionType\"\n    ></adapt-rx-select>\n  </div>\n</ng-container>\n\n<ng-template #recordNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n\n<ng-template #dataFilterCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <rx-expression-form-control\n      [options]=\"dataItem.dataFilterColumnExpressionFormControlOptions\"\n      (events)=\"openDataFilterColumnExpressionEditor(dataItem, column.field)\"\n      [(ngModel)]=\"dataItem[column.field]\"\n      [disabled]=\"!selectedDataSources[dataItem.dataSource]\"\n    >\n    </rx-expression-form-control>\n  </div>\n</ng-template>\n\n<ng-template #ignoreRulesCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <adapt-rx-switch\n      [(ngModel)]=\"dataItem[column.field]\"\n      (ngModelChange)=\"updateDataImportOptionsByRecordDefinitionName($event, dataItem, column.field)\"\n      [disabled]=\"!selectedDataSources[dataItem.dataSource]\"\n    ></adapt-rx-switch>\n  </div>\n</ng-template>\n\n<ng-template #duplicateDataActionTypeCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <adapt-rx-select\n      appendToBody=\"true\"\n      [options]=\"duplicateDataActionTypeOptions\"\n      [optionFormatter]=\"duplicateDataActionTypesOptionFormatter\"\n      [(ngModel)]=\"dataItem[column.field]\"\n      (ngModelChange)=\"updateDataImportOptionsByRecordDefinitionName($event, dataItem, column.field)\"\n      [disabled]=\"!selectedDataSources[dataItem.dataSource]\"\n    >\n    </adapt-rx-select>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}.add-data-record-definitions-select,.add-data-is-configuration-data-included-checkbox{width:400px}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i2__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-add-bundle-content-data-wizard-step',
                        templateUrl: 'add-bundle-content-data-wizard-step.component.html',
                        styleUrls: ['./add-bundle-content-data-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$1.RxExpressionEditorService }, { type: i3__namespace$1.RxModalService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i5__namespace.RxRecordGridUtilsService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], definitionsDataGrid: [{
                    type: i0.ViewChild,
                    args: ['definitionsDataGrid', { static: true }]
                }], recordNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['recordNameCellTemplate', { static: true }]
                }], dataFilterCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['dataFilterCellTemplate', { static: true }]
                }], ignoreRulesCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['ignoreRulesCellTemplate', { static: true }]
                }], duplicateDataActionTypeCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['duplicateDataActionTypeCellTemplate', { static: true }]
                }] } });

    var AX_ADD_DATA_WIZARD_STEP = {
        duplicateDataActionTypes: {
            THROW_ERROR: 'Ignore',
            CREATE_NEW_RECORD: 'Create New',
            REPLACE: 'Overwrite',
            MERGE: 'Merge'
        }
    };

    var DataFilterColumnExpressionConfiguratorClass = /** @class */ (function (_super) {
        __extends(DataFilterColumnExpressionConfiguratorClass, _super);
        function DataFilterColumnExpressionConfiguratorClass(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i3.TranslateService);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    children: [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                            icon: 'd-icon-dollar',
                            expression: '$DATE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-groups.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-group-ids.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPIDS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-roles.title'),
                            icon: 'd-icon-dollar',
                            expression: '$ROLES$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIME$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                            icon: 'd-icon-dollar',
                            expression: '$USER$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user-locale.title'),
                            icon: 'd-icon-dollar',
                            expression: '$LOCALE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-week-day.title'),
                            icon: 'd-icon-dollar',
                            expression: '$WEEKDAY$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.null.title'),
                            icon: 'd-icon-dollar',
                            expression: '$NULL$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.server-url.title'),
                            icon: 'd-icon-dollar',
                            expression: '$SERVERURL$'
                        }
                    ]
                }
            ]);
            return _this;
        }
        return DataFilterColumnExpressionConfiguratorClass;
    }(i2.RxExpressionConfigurator));

    var GlobalDataFilterExpressionConfiguratorClass = /** @class */ (function (_super) {
        __extends(GlobalDataFilterExpressionConfiguratorClass, _super);
        function GlobalDataFilterExpressionConfiguratorClass(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i3.TranslateService);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.labe'),
                    children: [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                            icon: 'd-icon-dollar',
                            expression: '$DATE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-groups.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-group-ids.title'),
                            icon: 'd-icon-dollar',
                            expression: '$GROUPIDS$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-roles.title'),
                            icon: 'd-icon-dollar',
                            expression: '$ROLES$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIME$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                            icon: 'd-icon-dollar',
                            expression: '$USER$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-user-locale.title'),
                            icon: 'd-icon-dollar',
                            expression: '$LOCALE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.current-week-day.title'),
                            icon: 'd-icon-dollar',
                            expression: '$WEEKDAY$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.null.title'),
                            icon: 'd-icon-dollar',
                            expression: '$NULL$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.general-group.pill.server-url.title'),
                            icon: 'd-icon-dollar',
                            expression: '$SERVERURL$'
                        }
                    ]
                },
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.common-core-fields.title'),
                    expanded: true,
                    children: i1$5.RX_RECORD_DEFINITION.coreFields.map(function (field) { return ({
                        label: field.name,
                        icon: 'd-icon-field_text',
                        expression: "'" + field.id + "'"
                    }); })
                }
            ]);
            return _this;
        }
        return GlobalDataFilterExpressionConfiguratorClass;
    }(i2.RxExpressionConfigurator));

    var AddDataWizardStepComponent = /** @class */ (function () {
        function AddDataWizardStepComponent(injector, rxDefinitionNameService, rxExpressionEditorService, rxRecordDefinitionCacheService, rxRecordGridUtilsService, rxWizardModalComponent, translateService) {
            this.injector = injector;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.duplicateDataActionTypeOptions = lodash.keys(AX_ADD_DATA_WIZARD_STEP.duplicateDataActionTypes);
            this.recordDefinitions = [];
            this.duplicateConfigurationDataActionTypeOptions = lodash.chain(AX_ADD_DATA_WIZARD_STEP.duplicateDataActionTypes)
                .pick(['THROW_ERROR', 'REPLACE'])
                .keys()
                .value();
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.optionFormatter = this.optionFormatter.bind(this);
        }
        AddDataWizardStepComponent.prototype.isDeleteButtonDisabled = function () {
            var isDeleteButtonDisabled = true;
            if (this.definitionsDataGrid) {
                var selectedRows = this.definitionsDataGrid.api.getSelectedRows();
                isDeleteButtonDisabled = !selectedRows.length || Boolean(lodash.find(selectedRows, 'shouldExportData'));
            }
            return isDeleteButtonDisabled;
        };
        AddDataWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.dataFilterColumnExpressionConfigurator = new DataFilterColumnExpressionConfiguratorClass(this.injector);
            this.globalDataFilterExpressionConfigurator = new GlobalDataFilterExpressionConfiguratorClass(this.injector);
            this.globalDataFilterExpressionConfigurator.configureForProperty({
                propertyPath: 'globalDataFilter',
                operators: this.globalDataFilterExpressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All),
                dataDictionary$: this.globalDataFilterExpressionConfigurator.commonDataDictionary$
            });
            this.globalDataFilterExpressionFormControlOptions = {
                isLabelHidden: true,
                dataDictionary$: this.globalDataFilterExpressionConfigurator.getDataDictionary('globalDataFilter'),
                operators: this.globalDataFilterExpressionConfigurator.getOperators(),
                clickToBuildExpressionLabel: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.global-data-filter.click-to-build-expression.label')
            };
            var gridColumns = [
                {
                    fieldId: 'dataSource',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-source.label'),
                    wrapText: true
                },
                {
                    fieldId: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.name.label'),
                    wrapText: true,
                    visible: false,
                    cellTemplate: this.recordNameCellTemplate
                },
                {
                    fieldId: 'aliasName',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.alias-name.label'),
                    visible: false
                },
                {
                    fieldId: 'dataFilterExpression',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label'),
                    cellTemplate: this.dataFilterCellTemplate
                },
                {
                    fieldId: 'dataFilterColumnExpressionFormControlOptions',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label'),
                    visible: false
                },
                {
                    fieldId: 'ignoreRuleExecution',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.ignore-rules.label'),
                    cellTemplate: this.ignoreRulesCellTemplate
                },
                {
                    fieldId: 'duplicateDataActionType',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.duplicates.label'),
                    cellTemplate: this.duplicateDataActionTypeCellTemplate
                }
            ].filter(function (column) { return lodash.includes(_this.options.gridConfig.columns, column.fieldId); });
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'dataSource',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.name.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'aliasName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'dataFilterExpression',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'dataFilterColumnExpressionFormControlOptions',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.object
                    },
                    {
                        id: 'ignoreRuleExecution',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'duplicateDataActionType',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ].filter(function (definition) { return lodash.includes(_this.options.gridConfig.columns, definition.id); })
            };
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                context.cache.recordDefinitions.forEach(function (recordDefinition) {
                    _this.dataFilterColumnExpressionConfigurator.configureForProperty({
                        propertyPath: "dataFilterExpression:" + recordDefinition.name,
                        operators: _this.dataFilterColumnExpressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All),
                        dataDictionary$: _this.dataFilterColumnExpressionConfigurator.commonDataDictionary$.pipe(operators.switchMap(function (commonDataDictionary) { return _this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(operators.switchMap(function (associationDescriptors) { return rxjs.forkJoin(__spreadArray([
                            _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinition.name)
                        ], __read(associationDescriptors.map(function (associationDescriptor) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(associationDescriptor.recordDefinitionName); })))).pipe(operators.map(function (definitions) { return [
                            commonDataDictionary[0],
                            {
                                label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.data-dictionary.values.definition-fields.title', {
                                    definitionName: _this.rxDefinitionNameService.getDisplayName(recordDefinition.name)
                                }),
                                expanded: true,
                                children: __spreadArray(__spreadArray([], __read(lodash.chain(definitions)
                                    .find({ name: recordDefinition.name })
                                    .get('fieldDefinitions')
                                    .map(function (fieldDefinition) { return ({
                                    label: fieldDefinition.name,
                                    icon: 'd-icon-field_text',
                                    expression: "'" + fieldDefinition.id + "'"
                                }); })
                                    .value())), [
                                    lodash.isEmpty(associationDescriptors)
                                        ? []
                                        : {
                                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition-associations.title'),
                                            children: associationDescriptors.map(function (associationDescriptor) { return ({
                                                label: _this.rxDefinitionNameService.getDisplayName(associationDescriptor.recordDefinitionName) + " (" + associationDescriptor.label + ")",
                                                children: _this.getAssociationsDataDictionary(definitions, associationDescriptor.recordDefinitionName, associationDescriptor)
                                            }); })
                                        }
                                ])
                            }
                        ]; })); })); }))
                    });
                });
                var recordDefinitions = [];
                _this.recordDefinitions = context.cache.recordDefinitions
                    .filter(function (recordDefinition) { return recordDefinition.type !== i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom; })
                    .map(function (recordDefinition) {
                    var newRecordDefinition = {
                        duplicateDataActionType: [_this.options.gridConfig.defaultDuplicateDataActionType],
                        name: recordDefinition.name,
                        dataSource: recordDefinition.aliasName || _this.rxDefinitionNameService.getDisplayName(recordDefinition.name),
                        shouldExportData: recordDefinition.shouldExportData,
                        ignoreRuleExecution: false,
                        disabled: recordDefinition.shouldExportData,
                        selected: recordDefinition.shouldExportData
                    };
                    if (newRecordDefinition.selected) {
                        recordDefinitions.push(newRecordDefinition);
                    }
                    return newRecordDefinition;
                });
                _this.addDataForm = new i4.FormGroup({
                    globalDataFilter: new i4.FormControl(null),
                    isConfigurationDataIncluded: new i4.FormControl(context.deploymentPackageDescriptor.isConfigurationDataIncluded),
                    duplicateConfigurationDataActionType: new i4.FormControl([
                        context.deploymentPackageDescriptor.duplicateDataActionTypeForConfigurationData
                    ]),
                    recordDefinitions: new i4.FormControl(recordDefinitions)
                });
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                lodash.assign(newDeploymentPackageDescriptor, {
                    dataImportOptionsByRecordDefinitionName: _this.getDataImportOptionsByRecordDefinitionName(recordDefinitions)
                });
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor
                }, false);
            });
            this.addDataForm.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), value = _b[0], context = _b[1];
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                var isConfigurationDataIncluded = newDeploymentPackageDescriptor.isConfigurationDataIncluded;
                lodash.assign(newDeploymentPackageDescriptor, {
                    isConfigurationDataIncluded: value.isConfigurationDataIncluded,
                    duplicateDataActionTypeForConfigurationData: lodash.head(value.duplicateConfigurationDataActionType),
                    dataImportOptionsByRecordDefinitionName: _this.getDataImportOptionsByRecordDefinitionName(value.recordDefinitions)
                });
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                });
                if (isConfigurationDataIncluded === value.isConfigurationDataIncluded) {
                    _this.definitionsDataGrid.api.refresh().subscribe();
                }
            });
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableRowSelection: i5.RowSelectionMode.Multiple,
                enableFiltering: false,
                recordIdField: 'dataSource',
                styles: 'flex-fill',
                useExternalFiltering: false,
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.remove.label'),
                        style: 'tertiary',
                        iconCls: 'trash',
                        disabled: this.isDeleteButtonDisabled.bind(this),
                        actions: [
                            {
                                name: this.deleteDefinitionsDataFromSelection.bind(this)
                            }
                        ]
                    }
                ],
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return rxjs.of({
                    data: _this.addDataForm.controls.recordDefinitions.value,
                    totalSize: _this.addDataForm.controls.recordDefinitions.value.length
                }); }
            });
        };
        AddDataWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        AddDataWizardStepComponent.prototype.optionFormatter = function (recordDefinitionData) {
            return recordDefinitionData.dataSource;
        };
        AddDataWizardStepComponent.prototype.duplicateDataActionTypesOptionFormatter = function (option) {
            return AX_ADD_DATA_WIZARD_STEP.duplicateDataActionTypes[option];
        };
        AddDataWizardStepComponent.prototype.openDataFilterColumnExpressionEditor = function (dataItem, columnField) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: "dataFilterExpression:" + dataItem.name,
                    value: dataItem[columnField],
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label')
                },
                expressionConfigurator: this.dataFilterColumnExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.expression-editor.legend.activity-result.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .subscribe(function (expression) {
                var recordDefinitions = _this.addDataForm.controls.recordDefinitions.value;
                var recordDefinition = lodash.find(recordDefinitions, { name: dataItem.name });
                recordDefinition.dataFilterExpression = expression.value;
                _this.addDataForm.controls.recordDefinitions.setValue(recordDefinitions);
            });
        };
        AddDataWizardStepComponent.prototype.openGlobalDataFilterExpressionEditor = function () {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'globalDataFilter',
                    value: this.addDataForm.controls.globalDataFilter.value,
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.global-data-filter-expression-editor.label')
                },
                expressionConfigurator: this.globalDataFilterExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .subscribe(function (expression) {
                _this.addDataForm.controls.globalDataFilter.setValue(expression.value);
            });
        };
        AddDataWizardStepComponent.prototype.deleteDefinitionsDataFromSelection = function () {
            var selectedRows = this.definitionsDataGrid.api.getSelectedRows();
            this.addDataForm.controls.recordDefinitions.patchValue(this.addDataForm.controls.recordDefinitions.value.filter(function (recordDefinition) { return !lodash.find(selectedRows, { dataSource: recordDefinition.dataSource }); }));
        };
        AddDataWizardStepComponent.prototype.updateDataImportOptionsByRecordDefinitionName = function (cellValue, recordDefinitionName, optionName) {
            var newDeploymentPackageDescriptor = lodash.cloneDeep(this.context.deploymentPackageDescriptor);
            newDeploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName[recordDefinitionName][optionName] = lodash.isArray(cellValue)
                ? lodash.head(cellValue)
                : cellValue;
            this.rxWizardModalComponent.api.updateContext({
                deploymentPackageDescriptor: newDeploymentPackageDescriptor
            });
        };
        AddDataWizardStepComponent.prototype.getAssociationsDataDictionary = function (recordDefinitions, recordDefinitionName, parentAssociation) {
            var fieldDefinitions = lodash.find(recordDefinitions, {
                name: recordDefinitionName
            }).fieldDefinitions;
            return fieldDefinitions.map(function (fieldDefinition) { return ({
                label: fieldDefinition.name,
                icon: 'd-icon-field_text',
                expression: "'recordContext._associations." + parentAssociation.associationDefinition.guid + "." + parentAssociation.nodeSide + "[0]." + fieldDefinition.id + "'"
            }); });
        };
        AddDataWizardStepComponent.prototype.getDataImportOptionsByRecordDefinitionName = function (recordDefinitions) {
            return recordDefinitions.reduce(function (result, recordDefinition) {
                var dataImportOptionsByRecordDefinitionName = {
                    duplicateDataActionType: lodash.head(recordDefinition.duplicateDataActionType),
                    ignoreRuleExecution: recordDefinition.ignoreRuleExecution
                };
                result[recordDefinition.name] = dataImportOptionsByRecordDefinitionName;
                return result;
            }, {});
        };
        return AddDataWizardStepComponent;
    }());
    /** @nocollapse */ AddDataWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepComponent, deps: [{ token: i0__namespace.Injector }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$1.RxExpressionEditorService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i5__namespace.RxRecordGridUtilsService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AddDataWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AddDataWizardStepComponent, selector: "ax-add-data-wizard-step", inputs: { context: "context", options: "options" }, viewQueries: [{ propertyName: "definitionsDataGrid", first: true, predicate: ["definitionsDataGrid"], descendants: true }, { propertyName: "recordNameCellTemplate", first: true, predicate: ["recordNameCellTemplate"], descendants: true, static: true }, { propertyName: "dataFilterCellTemplate", first: true, predicate: ["dataFilterCellTemplate"], descendants: true, static: true }, { propertyName: "ignoreRulesCellTemplate", first: true, predicate: ["ignoreRulesCellTemplate"], descendants: true, static: true }, { propertyName: "duplicateDataActionTypeCellTemplate", first: true, predicate: ["duplicateDataActionTypeCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.title' | translate }}</h5>\n  <div>\n    {{ options?.countTitle | translate: { count: addDataForm?.controls?.recordDefinitions?.value?.length } }}\n  </div>\n</div>\n\n<div class=\"mb-3\">{{ options?.descriptionTitle | translate }}</div>\n\n<ng-container [formGroup]=\"addDataForm\">\n  <div class=\"d-flex mb-3 justify-content-between\">\n    <adapt-rx-select\n      [formControl]=\"addDataForm.controls.recordDefinitions\"\n      [options]=\"recordDefinitions\"\n      [optionFormatter]=\"optionFormatter\"\n      [multiple]=\"true\"\n      [selectAllButton]=\"true\"\n      [deselectAllButton]=\"true\"\n      [enableFilter]=\"true\"\n      class=\"add-data-record-definitions-select\"\n    >\n    </adapt-rx-select>\n\n    <rx-expression-form-control\n      class=\"d-flex\"\n      *ngIf=\"options?.showGlobalFilterExpressionEditor\"\n      [options]=\"globalDataFilterExpressionFormControlOptions\"\n      (events)=\"openGlobalDataFilterExpressionEditor()\"\n      [formControl]=\"addDataForm.controls.globalDataFilter\"\n    >\n    </rx-expression-form-control>\n  </div>\n\n  <rx-record-grid class=\"mb-3\" [config]=\"recordGridConfig$\" #definitionsDataGrid></rx-record-grid>\n\n  <div class=\"d-flex pb-3\">\n    <adapt-rx-checkbox\n      class=\"add-data-is-configuration-data-included-checkbox pr-3\"\n      [label]=\"\n        'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.include-configuration-data-in-the-package.label'\n          | translate\n      \"\n      formControlName=\"isConfigurationDataIncluded\"\n    ></adapt-rx-checkbox>\n\n    <adapt-rx-select\n      *ngIf=\"addDataForm.controls.isConfigurationDataIncluded.value\"\n      class=\"flex-grow-1\"\n      appendToBody=\"true\"\n      [options]=\"duplicateConfigurationDataActionTypeOptions\"\n      [optionFormatter]=\"duplicateDataActionTypesOptionFormatter\"\n      formControlName=\"duplicateConfigurationDataActionType\"\n    ></adapt-rx-select>\n  </div>\n</ng-container>\n\n<ng-template #recordNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n\n<ng-template #dataFilterCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <rx-expression-form-control\n      [options]=\"dataItem.dataFilterColumnExpressionFormControlOptions\"\n      (events)=\"openDataFilterColumnExpressionEditor(dataItem, column.field)\"\n      [(ngModel)]=\"dataItem[column.field]\"\n    >\n    </rx-expression-form-control>\n  </div>\n</ng-template>\n\n<ng-template #ignoreRulesCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <adapt-rx-switch\n      [(ngModel)]=\"dataItem[column.field]\"\n      (ngModelChange)=\"updateDataImportOptionsByRecordDefinitionName($event, dataItem.name, 'ignoreRuleExecution')\"\n    ></adapt-rx-switch>\n  </div>\n</ng-template>\n\n<ng-template #duplicateDataActionTypeCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div>\n    <adapt-rx-select\n      appendToBody=\"true\"\n      [options]=\"duplicateDataActionTypeOptions\"\n      [optionFormatter]=\"duplicateDataActionTypesOptionFormatter\"\n      [(ngModel)]=\"dataItem[column.field]\"\n      (ngModelChange)=\"updateDataImportOptionsByRecordDefinitionName($event, dataItem.name, 'duplicateDataActionType')\"\n    >\n    </adapt-rx-select>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}.add-data-record-definitions-select,.add-data-is-configuration-data-included-checkbox{width:400px}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i2__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-add-data-wizard-step',
                        templateUrl: 'add-data-wizard-step.component.html',
                        styleUrls: ['./add-data-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$1.RxExpressionEditorService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i5__namespace.RxRecordGridUtilsService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], definitionsDataGrid: [{
                    type: i0.ViewChild,
                    args: ['definitionsDataGrid']
                }], recordNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['recordNameCellTemplate', { static: true }]
                }], dataFilterCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['dataFilterCellTemplate', { static: true }]
                }], ignoreRulesCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['ignoreRulesCellTemplate', { static: true }]
                }], duplicateDataActionTypeCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['duplicateDataActionTypeCellTemplate', { static: true }]
                }] } });

    var AX_BUNDLE_DEPLOYMENT = {
        deploymentStatuses: {
            succeeded: ['Deployed', 'DeployedWithImportWarning', 'Undeployed', 'PackageCreated', 'UndeployedVersion'],
            failed: ['Error', 'DeployedWithImportError'],
            pending: [
                'PendingDeploy',
                'ReadyDeploy',
                'Deploying',
                'PendingUndeploy',
                'ReadyUndeploy',
                'Undeploying',
                'PendingPackageCreate'
            ]
        },
        deploymentStatusPollInterval: 5000
    };

    var AxBundleDeploymentService = /** @class */ (function () {
        function AxBundleDeploymentService(httpClient, ngZone, translateService, rxFileService) {
            this.httpClient = httpClient;
            this.ngZone = ngZone;
            this.translateService = translateService;
            this.rxFileService = rxFileService;
            this.createBundleUrl = '/api/rx/application/bundle/bundledescriptor/';
            this.deployBundleUrl = '/api/rx/application/bundle/deploymentpackage/';
            this.deploymentStatusUrl = '/api/rx/application/bundle/deploymentstatus';
            this.cancelPolling$ = new rxjs.Subject();
        }
        AxBundleDeploymentService.prototype.create = function (bundleDescriptor) {
            return this.httpClient.post(this.createBundleUrl, bundleDescriptor, { observe: 'response' });
        };
        AxBundleDeploymentService.prototype.downloadContentPackage = function (bundleId, packageId) {
            var _this = this;
            return this.httpClient
                .get("" + this.deployBundleUrl + bundleId + "/" + packageId, { responseType: 'arraybuffer', observe: 'response' })
                .pipe(operators.tap(function (fileStream) {
                var arrayBufferView = new Uint8Array(fileStream.body);
                var file = new Blob([arrayBufferView], {
                    type: fileStream.headers.get('content-type')
                });
                var fileName = _this.rxFileService.extractFileName(fileStream);
                _this.ngZone.runOutsideAngular(function () {
                    fileSaver.saveAs(file, fileName);
                });
            }));
        };
        AxBundleDeploymentService.prototype.download = function (bundleId, packageId) {
            return this.httpClient.get(this.deployBundleUrl + (bundleId + "/" + packageId), {
                observe: 'response',
                responseType: 'arraybuffer'
            });
        };
        AxBundleDeploymentService.prototype.install = function (file) {
            var formData = new FormData();
            formData.append('file', file);
            return this.httpClient.post(this.deployBundleUrl, formData, {
                headers: new i1$2.HttpHeaders({ 'Expect-Package-Type': 'INSTALL' }),
                observe: 'response'
            });
        };
        AxBundleDeploymentService.prototype.reinstall = function (bundleId, file) {
            var formData = new FormData();
            formData.append('file', file);
            return this.httpClient.post(this.deployBundleUrl, formData, {
                headers: new i1$2.HttpHeaders({ 'Expect-Package-Type': 'INSTALL', 'Reinstall-To-Bundle-Id': bundleId }),
                observe: 'response'
            });
        };
        AxBundleDeploymentService.prototype.update = function (file) {
            var formData = new FormData();
            formData.append('file', file);
            return this.httpClient.post(this.deployBundleUrl, formData, {
                headers: new i1$2.HttpHeaders({ 'Expect-Package-Type': 'UPDATE' }),
                observe: 'response'
            });
        };
        AxBundleDeploymentService.prototype.import = function (bundleId, file) {
            var formData = new FormData();
            formData.append('file', file);
            return this.httpClient.post(this.deployBundleUrl, formData, {
                headers: new i1$2.HttpHeaders({
                    'Expect-Package-Type': 'EXPORT',
                    'Reinstall-To-Bundle-Id': bundleId
                }),
                observe: 'response'
            });
        };
        AxBundleDeploymentService.prototype.uninstall = function (bundleId) {
            return this.httpClient.delete(this.deployBundleUrl + ("" + bundleId), {
                observe: 'response'
            });
        };
        AxBundleDeploymentService.prototype.buildStatusMessage = function (deploymentParsedStatus) {
            var _this = this;
            var newLine = '\n';
            var errorMessages = !lodash.isEmpty(deploymentParsedStatus.errorMessages)
                ? lodash.chain(deploymentParsedStatus.errorMessages)
                    .unshift(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.errors.label'))
                    .join(newLine)
                    .value()
                : '';
            var definitionImportStatusMessages = !lodash.isEmpty(deploymentParsedStatus.definitionsStatusContent)
                ? lodash.chain(deploymentParsedStatus.definitionsStatusContent)
                    .unshift(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.definition.status.messages.label'))
                    .join(newLine)
                    .value()
                : '';
            var tenantDataImportStatusMessages = !lodash.isEmpty(deploymentParsedStatus.tenantDataStatusContent)
                ? Object.keys(deploymentParsedStatus.tenantDataStatusContent).map(function (key) { return lodash.chain(deploymentParsedStatus.tenantDataStatusContent[key])
                    .unshift(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.data.status.messages.label', {
                    tenant: key
                }))
                    .join(newLine)
                    .value(); })
                : [];
            return lodash.chain(tenantDataImportStatusMessages)
                .unshift(errorMessages, definitionImportStatusMessages)
                .compact()
                .join(newLine + newLine)
                .value();
        };
        AxBundleDeploymentService.prototype.pollDeploymentStatus = function (guid, customDeploymentStatusUrl) {
            var _this = this;
            return rxjs.timer(0, AX_BUNDLE_DEPLOYMENT.deploymentStatusPollInterval)
                .pipe(operators.takeUntil(this.cancelPolling$), operators.switchMap(function () { return _this.httpClient.get((customDeploymentStatusUrl || _this.deploymentStatusUrl) + ("/" + guid)); }), operators.tap(function (deploymentStatus) {
                if (AX_BUNDLE_DEPLOYMENT.deploymentStatuses.failed.includes(deploymentStatus.packageDeployStatus) ||
                    AX_BUNDLE_DEPLOYMENT.deploymentStatuses.failed.includes(deploymentStatus.packageExportStatus)) {
                    _this.cancelPolling$.next();
                    deploymentStatus.errorMessage = _this.buildStatusMessage(deploymentStatus.deploymentParsedStatus);
                }
                else if (AX_BUNDLE_DEPLOYMENT.deploymentStatuses.succeeded.includes(deploymentStatus.packageDeployStatus) ||
                    AX_BUNDLE_DEPLOYMENT.deploymentStatuses.succeeded.includes(deploymentStatus.packageExportStatus)) {
                    _this.cancelPolling$.next();
                    deploymentStatus.isFinished = true;
                }
            }));
        };
        return AxBundleDeploymentService;
    }());
    /** @nocollapse */ AxBundleDeploymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleDeploymentService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i0__namespace.NgZone }, { token: i3__namespace.TranslateService }, { token: i5__namespace$1.RxFileService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxBundleDeploymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleDeploymentService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleDeploymentService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i0__namespace.NgZone }, { type: i3__namespace.TranslateService }, { type: i5__namespace$1.RxFileService }]; } });

    var DownloadWizardStepComponent = /** @class */ (function () {
        function DownloadWizardStepComponent(rxWizardModalComponent, axBundleDeploymentService) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.axBundleDeploymentService = axBundleDeploymentService;
        }
        DownloadWizardStepComponent.prototype.download = function () {
            var _this = this;
            this.rxWizardModalComponent.context$
                .pipe(operators.take(1), operators.switchMap(function (context) { return _this.axBundleDeploymentService.downloadContentPackage(context.deploymentPackageDescriptor.id, context.packageGuid); }))
                .subscribe();
        };
        return DownloadWizardStepComponent;
    }());
    /** @nocollapse */ DownloadWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepComponent, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: AxBundleDeploymentService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DownloadWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DownloadWizardStepComponent, selector: "ax-download-wizard-step", ngImport: i0__namespace, template: "<h5 class=\"mt-0\">{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.download.title' | translate }}</h5>\n\n<button adapt-button type=\"button\" btn-type=\"primary\" (click)=\"download()\" rx-id=\"download-button\">\n  {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n</button>\n", components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-download-wizard-step',
                        templateUrl: 'download-wizard-step.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: AxBundleDeploymentService }]; } });

    var OptionsWizardStepComponent = /** @class */ (function () {
        function OptionsWizardStepComponent(rxWizardModalComponent, translateService) {
            var _this = this;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.versionRegexp = /^((\d+\.\d+)(\.\d+)?)(.*)$/;
            this.isApplication$ = this.rxWizardModalComponent.context$.pipe(operators.take(1), operators.pluck('bundleDetails', 'isApplication'));
            this.bundlesList$ = this.rxWizardModalComponent.context$.pipe(operators.take(1), operators.map(function (context) { return context.bundleDescriptors
                .sort(function (a, b) { return a.friendlyName.localeCompare(b.friendlyName); })
                .reduce(function (result, bundleDescriptor) {
                if (!lodash.includes([
                    i2.RX_APPLICATION.standardlib,
                    i2.RX_APPLICATION.innovationStudioBundleId,
                    i2.RX_APPLICATION.platformBundleId,
                    context.bundleDetails.id
                ], bundleDescriptor.id)) {
                    result.push(Object.assign({}, bundleDescriptor));
                }
                return result;
            }, []); }), operators.shareReplay(1));
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.versionIncrementValidator = function (fromVersionControl) { return function (control) {
                var isValidateIncrementation = true;
                if ((fromVersionControl === null || fromVersionControl === void 0 ? void 0 : fromVersionControl.value) && control.value && _this.versionRegexp.test(control.value)) {
                    isValidateIncrementation = _this.isValidateIncrementation(fromVersionControl.value, control.value);
                }
                return isValidateIncrementation
                    ? null
                    : {
                        invalidVersion: {
                            value: control.value,
                            message: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.version-increment.error.message')
                        }
                    };
            }; };
        }
        OptionsWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            rxjs.combineLatest([this.bundlesList$, this.rxWizardModalComponent.context$])
                .pipe(operators.take(1))
                .subscribe(function (_g) {
                var _h = __read(_g, 2), bundlesList = _h[0], context = _h[1];
                var _a, _b, _c, _d, _e, _f;
                var dependentBundles = bundlesList.filter(function (bundleDescriptor) { return lodash.some(context.bundleDetails.dependentBundles, { id: bundleDescriptor.id }); });
                var optionsFormGroup = {};
                if ((_b = (_a = _this.options) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.bundleUpdateFromVersion) {
                    optionsFormGroup.bundleUpdateFromVersion = new i4.FormControl(context.deploymentPackageDescriptor.bundleUpdateFromVersion);
                }
                if ((_d = (_c = _this.options) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.customPackageName) {
                    optionsFormGroup.customPackageName = new i4.FormControl(context.deploymentPackageDescriptor.customPackageName);
                }
                Object.assign(optionsFormGroup, {
                    id: new i4.FormControl(context.bundleDetails.id),
                    friendlyName: new i4.FormControl(context.deploymentPackageDescriptor.friendlyName, [i4.Validators.required]),
                    version: new i4.FormControl(context.deploymentPackageDescriptor.version, lodash.compact([
                        i4.Validators.required,
                        i4.Validators.pattern(_this.versionRegexp),
                        ((_f = (_e = _this.options) === null || _e === void 0 ? void 0 : _e.fields) === null || _f === void 0 ? void 0 : _f.bundleUpdateFromVersion)
                            ? _this.versionIncrementValidator(optionsFormGroup.bundleUpdateFromVersion)
                            : null
                    ])),
                    description: new i4.FormControl(context.deploymentPackageDescriptor.description, [i4.Validators.required]),
                    dependentBundles: new i4.FormControl(dependentBundles)
                });
                _this.optionsForm = new i4.FormGroup(optionsFormGroup);
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                lodash.assign(newDeploymentPackageDescriptor, {
                    friendlyName: context.bundleDetails.friendlyName,
                    version: context.bundleDetails.version,
                    description: context.bundleDetails.description,
                    id: context.bundleDetails.id,
                    dependentBundles: dependentBundles.map(function (dependentBundleDetails) { return ({
                        id: dependentBundleDetails.id,
                        name: dependentBundleDetails.friendlyName,
                        version: dependentBundleDetails.version
                    }); })
                });
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor
                }, false);
            });
            this.optionsForm.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_g) {
                var _h = __read(_g, 2), value = _h[0], context = _h[1];
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                lodash.assign(newDeploymentPackageDescriptor, value);
                newDeploymentPackageDescriptor.dependentBundles = value.dependentBundles.map(function (dependentBundleDetails) { return ({
                    id: dependentBundleDetails.id,
                    name: dependentBundleDetails.friendlyName,
                    version: dependentBundleDetails.version
                }); });
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor
                });
                if (_this.optionsForm.valid) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        OptionsWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        OptionsWizardStepComponent.prototype.optionFormatter = function (field) {
            return field.friendlyName + ", " + field.version;
        };
        OptionsWizardStepComponent.prototype.isValidateIncrementation = function (currentVersion, newVersion) {
            var isUpdateToVersionIncrementedCorrectly = false;
            var newVersionBase = this.getBaseVersion(newVersion);
            var currentVersionBase = this.getBaseVersion(currentVersion);
            if (newVersionBase) {
                var newVersionBaseProperties = newVersionBase.split('.');
                var currentVersionBaseProperties = currentVersionBase.split('.');
                // check if the last digit incremented correctly
                // e.g. 1.1 > 1.2
                //      1.1 > 1.1.1
                //      1.1.0 > 1.1.1
                var isTheLastDigitNotDecremented = newVersionBaseProperties.length === currentVersionBaseProperties.length
                    ? +lodash.last(newVersionBaseProperties) >= +lodash.last(currentVersionBaseProperties)
                    : +lodash.last(lodash.initial(newVersionBaseProperties)) >= +lodash.last(currentVersionBaseProperties);
                // create regular expression based on current version
                // only the last and additional component can be changed
                // e.g. 1.1.0 > 1.1.n or 1.1.n-SNAPSHOT
                //      1.0 > 1.n or 1.n-SNAPSHOT or 1.1.n or 1.1.n-SNAPSHOT
                var correctRegExpGroup = currentVersionBaseProperties.length === 3 ? 2 : 3;
                var regExpSuffix = correctRegExpGroup === 2 ? '(\\.\\d+)' : '(\\.\\d+)(\\.\\d+)?';
                var updateToVersionRegExp = new RegExp('^' + currentVersionBase.match(this.versionRegexp)[correctRegExpGroup] + regExpSuffix + '$');
                isUpdateToVersionIncrementedCorrectly =
                    updateToVersionRegExp.test(newVersionBase) && isTheLastDigitNotDecremented;
            }
            return isUpdateToVersionIncrementedCorrectly;
        };
        // get version without the optional qualifier, e.g. 1.1.0-SNAPSHOT > 1.1.0
        OptionsWizardStepComponent.prototype.getBaseVersion = function (version) {
            var baseVersion = version.match(this.versionRegexp);
            return baseVersion ? baseVersion[1] : null;
        };
        return OptionsWizardStepComponent;
    }());
    /** @nocollapse */ OptionsWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepComponent, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ OptionsWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: OptionsWizardStepComponent, selector: "ax-options-wizard-step", inputs: { options: "options" }, ngImport: i0__namespace, template: "<h5 class=\"mt-0\">{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.label' | translate }}</h5>\n\n<ng-container [formGroup]=\"optionsForm\">\n  <div class=\"row h-100\">\n    <div class=\"col-6\">\n      <adapt-rx-textfield\n        *ngIf=\"options?.fields.customPackageName\"\n        [label]=\"'com.bmc.arsys.rx.innovation-studio.packaging.package-name.label' | translate\"\n        class=\"d-block form-group\"\n        formControlName=\"customPackageName\"\n        name=\"customPackageName\"\n        required=\"true\"\n      ></adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        [label]=\"\n          ((isApplication$ | async)\n            ? 'com.bmc.arsys.rx.client.common.application-name.label'\n            : 'com.bmc.arsys.rx.client.common.library-name.label'\n          ) | translate\n        \"\n        formControlName=\"friendlyName\"\n        required=\"true\"\n        [readonly]=\"options?.fields.friendlyName?.disabled\"\n        [disabledStyleForReadonlyState]=\"true\"\n        class=\"d-block form-group\"\n        name=\"friendlyName\"\n      >\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        *ngIf=\"options?.fields?.bundleUpdateFromVersion\"\n        [disabledStyleForReadonlyState]=\"true\"\n        [label]=\"\n          'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.update-from-version.label' | translate\n        \"\n        [pattern]=\"versionRegexp\"\n        [readonly]=\"true\"\n        class=\"d-block form-group\"\n        formControlName=\"bundleUpdateFromVersion\"\n        name=\"bundleUpdateFromVersion\"\n        [tooltip]=\"{\n          content: options?.fields.bundleUpdateFromVersion?.tooltip || bundleUpdateFromVersionTooltip,\n          iconName: 'question_circle_o',\n          placement: 'right'\n        }\"\n      >\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        [label]=\"options?.fields.version?.label || 'com.bmc.arsys.rx.client.common.version.label' | translate\"\n        formControlName=\"version\"\n        required=\"true\"\n        [readonly]=\"options?.fields.version?.disabled\"\n        [disabledStyleForReadonlyState]=\"true\"\n        class=\"d-block form-group\"\n        name=\"version\"\n        [pattern]=\"versionRegexp\"\n        [class.mb-0]=\"optionsForm.controls.version.errors?.invalidVersion\"\n        [tooltip]=\"\n          options?.fields.version?.hideTooltip\n            ? null\n            : {\n                content: versionTooltip,\n                iconName: 'question_circle_o',\n                placement: 'right'\n              }\n        \"\n      >\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        [label]=\"'com.bmc.arsys.rx.client.common.description.label' | translate\"\n        formControlName=\"description\"\n        required=\"true\"\n        [readonly]=\"options?.fields.description?.disabled\"\n        [disabledStyleForReadonlyState]=\"true\"\n        class=\"d-block form-group\"\n        name=\"description\"\n      >\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        formControlName=\"id\"\n        [label]=\"\n          ((isApplication$ | async)\n            ? 'com.bmc.arsys.rx.client.common.application-id.label'\n            : 'com.bmc.arsys.rx.client.common.library-id.label'\n          ) | translate\n        \"\n        [readonly]=\"true\"\n        [disabledStyleForReadonlyState]=\"true\"\n        class=\"d-block form-group\"\n        name=\"id\"\n      >\n      </adapt-rx-textfield>\n    </div>\n\n    <div class=\"col-6 d-flex flex-column h-100\" *ngIf=\"!options?.fields.dependentBundlesList?.hidden\">\n      <adapt-rx-select\n        [inline]=\"true\"\n        [multiple]=\"true\"\n        [options]=\"bundlesList$ | async\"\n        [optionFormatter]=\"optionFormatter\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [popupMaxHeight]=\"560\"\n        [formControl]=\"optionsForm.controls.dependentBundles\"\n        [label]=\"'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.depends-on.label' | translate\"\n        class=\"h-100\"\n      >\n      </adapt-rx-select>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #bundleUpdateFromVersionTooltip>\n  <div\n    [innerHTML]=\"\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.update-from-version.tooltip' | translate\n    \"\n  ></div>\n</ng-template>\n\n<ng-template #versionTooltip>\n  <div\n    *ngIf=\"options?.fields.version?.tooltip; else defaultVersionTooltip\"\n    [innerHTML]=\"options?.fields.version?.tooltip | translate\"\n  ></div>\n</ng-template>\n\n<ng-template #defaultVersionTooltip>\n  <div\n    [innerHTML]=\"'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.version.tooltip' | translate\"\n  ></div>\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}.ax-dependent-bundles-list{overflow-y:scroll}\n"], components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4__namespace.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-options-wizard-step',
                        templateUrl: 'options-wizard-step.component.html',
                        styleUrls: ['./options-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var OrderDataWizardStepComponent = /** @class */ (function () {
        function OrderDataWizardStepComponent(rxWizardModalComponent, rxArrayUtilsService) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.rxArrayUtilsService = rxArrayUtilsService;
            this.recordDefinitions = [];
        }
        OrderDataWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                var _a;
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                if ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.importRecordDefinitionFromCache) {
                    newDeploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName = lodash.reduce(lodash.filter(context.cache.recordDefinitions, 'shouldExportData'), function (result, recordDefinition, recordDefinitionIndex) {
                        _this.recordDefinitions.push({
                            name: recordDefinition.name,
                            importOrder: recordDefinitionIndex
                        });
                        result[recordDefinition.name] = { importOrder: recordDefinitionIndex };
                        return result;
                    }, {});
                }
                else {
                    var startIndex_1 = 0;
                    lodash.forEach(newDeploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName, function (recordDefinition, recordDefinitionName) {
                        var recordDefinitionDetails = lodash.find(context.cache.recordDefinitions, { name: recordDefinitionName });
                        _this.recordDefinitions.push({
                            name: recordDefinitionName,
                            importOrder: startIndex_1++,
                            disallowChangeOrder: recordDefinitionDetails.disallowChangeOrder
                        });
                    });
                }
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor
                }, false);
                _this.updateIndexes(false);
            });
            this.rxWizardModalComponent.context$.pipe(operators.skip(1)).subscribe(function (context) {
                var startIndex = _this.recordDefinitions.length;
                _this.recordDefinitions = lodash.sortBy(lodash.transform(context.deploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName, function (result, recordDefinition, recordDefinitionName) {
                    var importOrder;
                    var existing = lodash.find(_this.recordDefinitions, { name: recordDefinitionName });
                    var recordDefinitionDetails = lodash.find(context.cache.recordDefinitions, { name: recordDefinitionName });
                    if (!lodash.isUndefined(recordDefinitionDetails.initialFixedOrder) &&
                        recordDefinitionDetails.initialFixedOrder === (existing === null || existing === void 0 ? void 0 : existing.importOrder)) {
                        importOrder = recordDefinitionDetails.initialFixedOrder;
                    }
                    else if (existing) {
                        importOrder = existing.importOrder;
                    }
                    result.push({
                        name: recordDefinitionName,
                        importOrder: !lodash.isUndefined(importOrder) ? importOrder : startIndex++,
                        disallowChangeOrder: recordDefinitionDetails.disallowChangeOrder,
                        selected: existing === null || existing === void 0 ? void 0 : existing.selected
                    });
                }, []), 'importOrder');
            });
        };
        OrderDataWizardStepComponent.prototype.isMoveDownButtonDisabled = function () {
            return (!this.recordDefinitions.length ||
                lodash.last(this.recordDefinitions).selected ||
                !lodash.find(this.recordDefinitions, 'selected'));
        };
        OrderDataWizardStepComponent.prototype.isMoveUpButtonDisabled = function () {
            return (!this.recordDefinitions.length ||
                lodash.head(this.recordDefinitions).selected ||
                !lodash.find(this.recordDefinitions, 'selected'));
        };
        OrderDataWizardStepComponent.prototype.moveDown = function () {
            this.recordDefinitions = this.rxArrayUtilsService.moveArrayElements(this.recordDefinitions, this.getSelectedIndexes(), 1);
            this.updateIndexes();
        };
        OrderDataWizardStepComponent.prototype.moveUp = function () {
            this.recordDefinitions = this.rxArrayUtilsService.moveArrayElements(this.recordDefinitions, this.getSelectedIndexes(), -1);
            this.updateIndexes();
        };
        OrderDataWizardStepComponent.prototype.trackBy = function (index, recordDefinition) {
            return recordDefinition.name;
        };
        OrderDataWizardStepComponent.prototype.getSelectedIndexes = function () {
            return this.recordDefinitions.reduce(function (result, recordDefinition, recordDefinitionIndex) {
                if (recordDefinition.selected) {
                    result.push(recordDefinitionIndex);
                }
                return result;
            }, []);
        };
        OrderDataWizardStepComponent.prototype.updateIndexes = function (markDirty) {
            var _this = this;
            if (markDirty === void 0) { markDirty = true; }
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                _this.recordDefinitions.forEach(function (recordDefinition, index) {
                    recordDefinition.importOrder = index;
                    newDeploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName[recordDefinition.name].importOrder =
                        index;
                });
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                }, markDirty);
            });
        };
        return OrderDataWizardStepComponent;
    }());
    /** @nocollapse */ OrderDataWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepComponent, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: i5__namespace$1.RxArrayUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ OrderDataWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: OrderDataWizardStepComponent, selector: "ax-order-data-wizard-step", inputs: { options: "options" }, ngImport: i0__namespace, template: "<h5 class=\"mt-0\">Data</h5>\n\n<div>Move data items up or down to set the order in which the data will be loaded onto target systems:</div>\n\n<div class=\"d-flex row\">\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-triangle_up_adapt\"\n    rx-id=\"move-up-button\"\n    [disabled]=\"isMoveUpButtonDisabled()\"\n    (click)=\"moveUp()\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.order-data.move-up.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-triangle_down_adapt\"\n    rx-id=\"move-down-button\"\n    [disabled]=\"isMoveDownButtonDisabled()\"\n    (click)=\"moveDown()\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.order-data.move-down.label' | translate }}\n  </button>\n</div>\n\n<div class=\"d-flex flex-column border h-100 p-2 record-definitions-list\">\n  <div class=\"d-flex justify-content-center\">\n    <adapt-empty-state\n      class=\"align-self-center\"\n      type=\"objects\"\n      *ngIf=\"!recordDefinitions.length\"\n      [label]=\"'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label' | translate\"\n    ></adapt-empty-state>\n  </div>\n\n  <div class=\"checkbox p-2 text-break\" *ngFor=\"let recordDefinition of recordDefinitions; trackBy: trackBy\">\n    <label>\n      <input\n        type=\"checkbox\"\n        [(ngModel)]=\"recordDefinition.selected\"\n        [disabled]=\"recordDefinition.disallowChangeOrder\"\n      />\n      <span class=\"checkbox__item\">{{ recordDefinition.name | rxDefinitionNamePipe }}</span>\n    </label>\n  </div>\n</div>\n", styles: [":host{display:flex;flex-direction:column;height:100%}.record-definitions-list{overflow-y:auto}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-order-data-wizard-step',
                        templateUrl: 'order-data-wizard-step.component.html',
                        styleUrls: ['./order-data-wizard-step.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: i5__namespace$1.RxArrayUtilsService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var PackageWizardStepComponent = /** @class */ (function () {
        function PackageWizardStepComponent(httpClient, axBundleDeploymentService, rxCommandFactoryService, rxServerErrorHandlerService, rxUtilityModalsService, rxWizardModalComponent, translateService) {
            var _this = this;
            this.httpClient = httpClient;
            this.axBundleDeploymentService = axBundleDeploymentService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxServerErrorHandlerService = rxServerErrorHandlerService;
            this.rxUtilityModalsService = rxUtilityModalsService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.queueCreateDeploymentPackageCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.bundledeploy.command.QueueCreateDeploymentPackageCommand');
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.operationStatusSubject = new rxjs.BehaviorSubject('');
            this.operationStatus$ = this.operationStatusSubject.asObservable();
            this.operationStatusMessage = null;
            this.operationStatuses = {
                pending: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.status.pending.label'),
                failed: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.status.failed.label'),
                succeeded: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.status.succeeded.label')
            };
            this.isApprovalConfigurationDataIncluded$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return !lodash.isEmpty(context.deploymentPackageDescriptor.approvalConfigurationQueryOptions); }));
            this.isConfigurationDataIncluded$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return _this.options.isInstallOperation || context.deploymentPackageDescriptor.isConfigurationDataIncluded; }));
            this.isDataImportOptionsByRecordDefinitionNameIncluded$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return _this.options.isInstallOperation ||
                !lodash.isEmpty(context.deploymentPackageDescriptor.dataImportOptionsByRecordDefinitionName); }));
            this.isDefinitionsToDeleteByTypeIncluded$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return _this.options.isInstallOperation || !lodash.isEmpty(context.deploymentPackageDescriptor.definitionsToDeleteByType); }));
            this.isDefinitionsToDeployByTypeIncluded$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return _this.options.isInstallOperation || !lodash.isEmpty(context.deploymentPackageDescriptor.definitionsToDeployByType); }));
            this.isPackageDataEmpty$ = rxjs.combineLatest([
                this.isDefinitionsToDeployByTypeIncluded$,
                this.isDataImportOptionsByRecordDefinitionNameIncluded$,
                this.isConfigurationDataIncluded$,
                this.isDefinitionsToDeleteByTypeIncluded$
            ]).pipe(operators.map(function (params) { return params.every(function (value) { return !value; }); }));
            this.isCreatePackageButtonDisabled$ = this.rxWizardModalComponent.context$.pipe(operators.withLatestFrom(this.isPackageDataEmpty$, this.operationStatus$), operators.map(function (_b) {
                var _c = __read(_b, 3), context = _c[0], isPackageDataEmpty = _c[1], operationStatus = _c[2];
                return operationStatus === _this.operationStatuses.pending || !context.isPackageDataModified || isPackageDataEmpty;
            }));
        }
        PackageWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.isAllPackageDataIncluded$ = rxjs.combineLatest([
                this.isDefinitionsToDeployByTypeIncluded$,
                this.isDataImportOptionsByRecordDefinitionNameIncluded$,
                this.isConfigurationDataIncluded$,
                this.isDefinitionsToDeleteByTypeIncluded$
            ].concat(((_a = this.options) === null || _a === void 0 ? void 0 : _a.isContentPackageOperation) ? [this.isApprovalConfigurationDataIncluded$] : [])).pipe(operators.map(function (params) { return params.every(Boolean); }));
            this.rxWizardModalComponent.steps$
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.tabIndex$, this.operationStatus$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 3), steps = _c[0], tabIndex = _c[1], operationStatus = _c[2];
                if (steps[tabIndex].id === 'package' && operationStatus !== _this.operationStatuses.succeeded) {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        PackageWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        PackageWizardStepComponent.prototype.createPackage = function (forceStart) {
            var _this = this;
            if (forceStart === void 0) { forceStart = false; }
            this.rxWizardModalComponent.context$
                .pipe(operators.take(1), operators.tap(function () {
                var _a;
                _this.rxWizardModalComponent.api.updateContext({
                    isPackageDataModified: false
                });
                _this.operationStatusSubject.next(_this.operationStatuses.pending);
                if ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.isContentPackageOperation) {
                    _this.rxWizardModalComponent.api.setFinishButtonLabel(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.close-and-continue-packaging.label'));
                    _this.rxWizardModalComponent.api.complete();
                }
            }), operators.map(function (context) {
                var parameters = {
                    bundlePackageDescriptor: lodash.cloneDeep(context.deploymentPackageDescriptor),
                    shouldForce: forceStart
                };
                lodash.forEach(parameters.bundlePackageDescriptor.dataImportOptionsByRecordDefinitionName, function (dataImportOptionByRecordDefinitionName) {
                    delete dataImportOptionByRecordDefinitionName.dataFilterColumnExpressionFormControlOptions;
                    delete dataImportOptionByRecordDefinitionName.dataFilterExpression;
                    delete dataImportOptionByRecordDefinitionName.defaultFilter;
                });
                return parameters;
            }), operators.switchMap(function (parameters) { return _this.queueCreateDeploymentPackageCommand.execute(parameters, { responseType: 'text' }); }), operators.tap(function (response) {
                _this.guid = lodash.last(response.split('/'));
                _this.rxWizardModalComponent.api.updateContext({
                    packageGuid: _this.guid
                });
            }), operators.switchMap(function () { return _this.axBundleDeploymentService
                .pollDeploymentStatus(_this.guid, '/api/rx/application/bundle/createpackagestatus')
                .pipe(operators.takeUntil(_this.destroyed$)); }), operators.tap(function (deploymentStatus) {
                if (deploymentStatus.isFinished) {
                    _this.operationStatusSubject.next(_this.operationStatuses.succeeded);
                    _this.rxWizardModalComponent.api.setFinishButtonLabel(_this.translateService.instant('com.bmc.arsys.rx.client.common.close.label'));
                    _this.rxWizardModalComponent.api.complete();
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else if (deploymentStatus.errorMessage) {
                    _this.operationStatusSubject.next(_this.operationStatuses.failed);
                    _this.operationStatusMessage = deploymentStatus.errorMessage;
                }
            }), operators.catchError(function (error) {
                _this.operationStatusSubject.next(_this.operationStatuses.failed);
                _this.rxWizardModalComponent.api.disableNextButton();
                _this.rxWizardModalComponent.api.renew();
                var errorDetails = _this.rxServerErrorHandlerService.getServerResponseErrorDetails(error.error);
                if (lodash.some(errorDetails, { messageNumber: AX_BUNDLE_DETAILS.errorCodes.packageCreationAlreadyInProgress })) {
                    _this.rxUtilityModalsService
                        .confirm(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.creation-operation-in-progress.message'))
                        .then(function (isConfirmed) {
                        if (isConfirmed) {
                            _this.createPackage(true);
                        }
                        else {
                            _this.rxWizardModalComponent.api.updateContext({ isPackageDataModified: true });
                        }
                    });
                }
                return rxjs.EMPTY;
            }))
                .subscribe();
        };
        return PackageWizardStepComponent;
    }());
    /** @nocollapse */ PackageWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepComponent, deps: [{ token: i1__namespace$2.HttpClient }, { token: AxBundleDeploymentService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxServerErrorHandlerService }, { token: i3__namespace$1.RxUtilityModalsService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PackageWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PackageWizardStepComponent, selector: "ax-package-wizard-step", inputs: { options: "options" }, ngImport: i0__namespace, template: "<h5 class=\"mt-0\">{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.label' | translate }}</h5>\n\n<button\n  adapt-button\n  btn-type=\"primary\"\n  rx-id=\"create-package-button\"\n  type=\"button\"\n  (click)=\"createPackage()\"\n  [disabled]=\"isCreatePackageButtonDisabled$ | async\"\n>\n  {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.create-package.label' | translate }}\n</button>\n\n<span\n  class=\"empty-package-warning d-icon-left-exclamation_triangle\"\n  rx-id=\"empty-package-message\"\n  [hidden]=\"!(isPackageDataEmpty$ | async)\"\n>\n  {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.empty-package.message' | translate }}\n</span>\n\n<ng-container *ngIf=\"!(isPackageDataEmpty$ | async)\">\n  <h6>{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.included.label' | translate }}:</h6>\n\n  <ul>\n    <li [hidden]=\"!(isDefinitionsToDeployByTypeIncluded$ | async)\">\n      {{\n        'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.customized-definitions.label'\n          | translate\n      }}\n    </li>\n    <li [hidden]=\"!(isDataImportOptionsByRecordDefinitionNameIncluded$ | async)\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.data-items.label' | translate }}\n    </li>\n    <li [hidden]=\"!(isConfigurationDataIncluded$ | async)\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.configuration-data.label' | translate }}\n    </li>\n    <li [hidden]=\"!(isApprovalConfigurationDataIncluded$ | async)\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.approval-configurations.label' | translate }}\n    </li>\n    <li [hidden]=\"!(!options?.isInstallOperation && isDefinitionsToDeleteByTypeIncluded$ | async)\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.definitions-to-delete.label' | translate }}\n    </li>\n  </ul>\n</ng-container>\n\n<ng-container *ngIf=\"!(isAllPackageDataIncluded$ | async)\">\n  <h6>{{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.not-included.label' | translate }}:</h6>\n\n  <ul>\n    <li [hidden]=\"isDefinitionsToDeployByTypeIncluded$ | async\">\n      {{\n        'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.customized-definitions.label'\n          | translate\n      }}\n    </li>\n    <li [hidden]=\"isDataImportOptionsByRecordDefinitionNameIncluded$ | async\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.data-items.label' | translate }}\n    </li>\n    <li [hidden]=\"isConfigurationDataIncluded$ | async\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.configuration-data.label' | translate }}\n    </li>\n    <li [hidden]=\"!(options?.isContentPackageOperation && !(isApprovalConfigurationDataIncluded$ | async))\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.approval-configurations.label' | translate }}\n    </li>\n    <li [hidden]=\"isDefinitionsToDeleteByTypeIncluded$ | async\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.definitions-to-delete.label' | translate }}\n    </li>\n  </ul>\n</ng-container>\n\n<div class=\"mt-4\" *ngIf=\"operationStatus$ | async as operationStatus\">\n  <div *ngIf=\"operationStatus === operationStatuses.pending\">\n    <div class=\"mb-3\">\n      {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.creating-package.message' | translate }}\n    </div>\n\n    <div class=\"progress\">\n      <div\n        class=\"progress-bar progress-bar-intermediate w-100\"\n        role=\"progressbar\"\n        aria-valuenow=\"100\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n      ></div>\n    </div>\n  </div>\n\n  <adapt-alert\n    *ngIf=\"operationStatus === operationStatuses.succeeded\"\n    [config]=\"{\n      content: translateService.instant(\n        'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.packaging-completed.message'\n      ),\n      dismissible: false,\n      type: 'inline',\n      variant: 'success'\n    }\"\n  ></adapt-alert>\n\n  <div *ngIf=\"operationStatus === operationStatuses.failed\">\n    <adapt-alert\n      [config]=\"{\n        content: translateService.instant(\n          'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.packaging-failed.message'\n        ),\n        dismissible: false,\n        type: 'inline',\n        variant: 'danger'\n      }\"\n    ></adapt-alert>\n\n    <adapt-rx-textarea\n      *ngIf=\"operationStatusMessage\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.messages.label' | translate }}\"\n      [ngModel]=\"operationStatusMessage\"\n      rx-id=\"messages-textarea\"\n      rows=\"13\"\n      [disabledStyleForReadonlyState]=\"true\"\n      [readonly]=\"true\"\n    ></adapt-rx-textarea>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.empty-package-warning{margin-left:15px}.empty-package-warning:before{color:#f1b521}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-package-wizard-step',
                        templateUrl: './package-wizard-step.component.html',
                        styleUrls: ['./package-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: AxBundleDeploymentService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxServerErrorHandlerService }, { type: i3__namespace$1.RxUtilityModalsService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var SelectApprovalConfigurationsWizardStepComponent = /** @class */ (function () {
        function SelectApprovalConfigurationsWizardStepComponent(rxDataPageService, rxDefinitionNameService, rxSessionExpirationService, translateService, rxWizardModalComponent) {
            this.rxDataPageService = rxDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.translateService = translateService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        SelectApprovalConfigurationsWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            var columns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.record-definition.label'),
                    fieldId: 'recordDefinitionName',
                    sortable: { direction: i5.ColumnSortDirection.Asc, priority: 0 }
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-approval-configurations.flow-group.label'),
                    fieldId: 'flowGroupName',
                    sortable: { direction: i5.ColumnSortDirection.Asc, priority: 1 }
                }
            ];
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'recordDefinitionName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.dataTypes.character.resourceType
                    },
                    {
                        id: 'flowGroupName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.dataTypes.character.resourceType
                    }
                ]
            };
            this.recordGridConfig$ = rxjs.of({
                columns: columns,
                enableColumnSelection: false,
                enableRowSelection: (_a = this.options.gridConfig) === null || _a === void 0 ? void 0 : _a.enableRowSelection,
                recordIdField: 'definitionNameWithFlowGroup',
                styles: 'flex-fill',
                useExternalFiltering: false,
                expandGroups: true,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function () {
                    _this.rxWizardModalComponent.api.disableNextButton();
                    return _this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMap(function () { return _this.rxDataPageService
                        .withType('com.bmc.arsys.rx.approval.application.datapage.ApprovalConfigurationsDataPageQuery')
                        .get({
                        params: {
                            startIndex: -1,
                            pageSize: 0,
                            bundleId: _this.context.deploymentPackageDescriptor.id
                        }
                    })
                        .pipe(operators.map(function (response) {
                        _this.selectedDefinitionCount = 0;
                        var data = lodash.reduce(response.data[0], function (result, flowGroupNames, recordDefinitionName) {
                            var bundleFriendlyName = _this.context.bundleFriendlyNamesById[_this.rxDefinitionNameService.getBundleId(recordDefinitionName)];
                            var recordDefinitionDisplayName = _this.rxDefinitionNameService.getDisplayName(recordDefinitionName);
                            var dataItem = lodash.find(result, { groupValue: bundleFriendlyName });
                            if (dataItem) {
                                flowGroupNames.forEach(function (flowGroupName) {
                                    dataItem.items.push({
                                        definitionName: recordDefinitionName,
                                        bundleName: bundleFriendlyName,
                                        recordDefinitionName: recordDefinitionDisplayName,
                                        flowGroupName: flowGroupName,
                                        definitionNameWithFlowGroup: flowGroupName + ":" + recordDefinitionName
                                    });
                                });
                            }
                            else {
                                dataItem = {
                                    groupValue: bundleFriendlyName,
                                    groupField: 'bundleName',
                                    items: flowGroupNames.map(function (flowGroupName) { return ({
                                        definitionName: recordDefinitionName,
                                        bundleName: bundleFriendlyName,
                                        recordDefinitionName: recordDefinitionDisplayName,
                                        flowGroupName: flowGroupName,
                                        definitionNameWithFlowGroup: flowGroupName + ":" + recordDefinitionName
                                    }); })
                                };
                                result.push(dataItem);
                            }
                            return result;
                        }, []);
                        return {
                            data: data,
                            totalSize: data.length
                        };
                    })); }));
                }
            });
            rxjs.combineLatest([this.recordGrid.rowSelectionChanged, this.rxWizardModalComponent.context$.pipe(operators.take(1))])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), selectedRows = _c[0], context = _c[1];
                _this.selectedDefinitionCount = selectedRows.length;
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                newDeploymentPackageDescriptor.approvalConfigurationQueryOptions = lodash.chain(selectedRows)
                    .groupBy('definitionName')
                    .map(function (config, definitionName) { return ({
                    recordDefinitionName: definitionName,
                    flowGroups: lodash.map(config, 'flowGroupName')
                }); })
                    .value();
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                }, _this.selectedDefinitionCount > 0);
            });
        };
        SelectApprovalConfigurationsWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        SelectApprovalConfigurationsWizardStepComponent.prototype.onDataLoaded = function () {
            this.rxWizardModalComponent.api.enableNextButton();
        };
        return SelectApprovalConfigurationsWizardStepComponent;
    }());
    /** @nocollapse */ SelectApprovalConfigurationsWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepComponent, deps: [{ token: i2__namespace.RxDataPageFactoryService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxSessionExpirationService }, { token: i3__namespace.TranslateService }, { token: i2__namespace$1.RxWizardModalComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectApprovalConfigurationsWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectApprovalConfigurationsWizardStepComponent, selector: "ax-select-approval-configurations-wizard-step", inputs: { context: "context", options: "options" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-approval-configurations.approval-configurations.label'\n        | translate\n    }}\n  </h5>\n  <div>\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-approval-configurations.approval-configurations-count.label'\n        | translate: { count: selectedDefinitionCount }\n    }}\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  {{\n    'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-approval-configurations.selected-approval-configurations.label'\n      | translate\n  }}\n</div>\n\n<rx-record-grid [config]=\"recordGridConfig$\" (dataLoaded)=\"onDataLoaded()\"></rx-record-grid>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-select-approval-configurations-wizard-step',
                        templateUrl: 'select-approval-configurations-wizard-step.component.html',
                        styleUrls: ['./select-approval-configurations-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDataPageFactoryService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxSessionExpirationService }, { type: i3__namespace.TranslateService }, { type: i2__namespace$1.RxWizardModalComponent }]; }, propDecorators: { context: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }] } });

    var SelectBundleContentDefinitionsWizardStepComponent = /** @class */ (function () {
        function SelectBundleContentDefinitionsWizardStepComponent(rxBundleCacheService, rxDataPageService, rxDefinitionNameService, rxRecordDefinitionDataPageService, rxSessionExpirationService, rxStringService, rxWizardModalComponent, translateService) {
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxDataPageService = rxDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxRecordDefinitionDataPageService = rxRecordDefinitionDataPageService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxStringService = rxStringService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        SelectBundleContentDefinitionsWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.currentBundleId = this.rxBundleCacheService.bundleId;
            this.rxWizardModalComponent.api.updateContext({
                cache: {}
            }, false);
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label'),
                    fieldId: 'displayType',
                    filterable: false,
                    sortable: {
                        direction: i5.ColumnSortDirection.Asc,
                        priority: 0
                    }
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'displayName',
                    searchable: false,
                    filterable: false,
                    visible: false
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'definitionTypeWithName',
                    cellTemplate: this.displayTypeWithCellTemplate
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.bundle-name.label'),
                    fieldId: 'bundleName',
                    visible: false,
                    filterable: false,
                    sortable: {
                        direction: i5.ColumnSortDirection.Asc,
                        priority: 1
                    }
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                Object.assign(Object.assign({}, AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime), { sortable: {
                        direction: i5.ColumnSortDirection.Asc,
                        priority: 2
                    } })
            ].map(function (column) { return (Object.assign(Object.assign({}, column), { title: _this.translateService.instant(column.title) })); });
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'displayType',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'displayName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'definitionTypeWithName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'bundleName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                    }
                ]
            };
            var defaultParams = {
                propertySelection: ['name', 'lastUpdateTime', 'lastChangedBy']
            };
            var recordDefinitionsParams = { propertySelection: __spreadArray(__spreadArray([], __read(defaultParams.propertySelection)), ['shouldExportData']) };
            var viewDefinitionsParams = {
                excludeExtensionViews: false,
                propertySelection: __spreadArray([], __read(defaultParams.propertySelection))
            };
            var bundleContentRecordDefinitionParams = {
                requireDependent: true,
                recursive: true,
                propertySelection: __spreadArray(__spreadArray([], __read(defaultParams.propertySelection)), ['internal', 'type'])
            };
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableColumnSelection: false,
                enableFiltering: true,
                enableRowSelection: ((_a = this.options.gridConfig) === null || _a === void 0 ? void 0 : _a.enableRowSelection) || null,
                recordIdField: 'definitionTypeWithName',
                styles: 'flex-fill',
                useExternalFiltering: false,
                expandGroups: true,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function (queryParams) {
                    _this.rxWizardModalComponent.api.disableNextButton();
                    return _this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMap(function () { return rxjs.combineLatest([
                        _this.rxWizardModalComponent.context$.pipe(operators.take(1)),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentAssociationDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentDocumentDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentEventDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentEventStatisticsDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentNamedListDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentProcessDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentRecordDefinitionDataPageQuery')
                            .get({
                            params: recordDefinitionsParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentRuleDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentViewDefinitionDataPageQuery')
                            .get({
                            params: viewDefinitionsParams
                        }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentWebApiDefinitionDataPageQuery')
                            .get({
                            params: defaultParams
                        }),
                        _this.rxRecordDefinitionDataPageService.get({ params: bundleContentRecordDefinitionParams }),
                        _this.rxDataPageService
                            .withType('com.bmc.arsys.rx.application.bundle.datapage.BundleContentRecordInstanceProviderDataPageQuery')
                            .get({
                            params: defaultParams
                        })
                    ]).pipe(operators.map(function (_b) {
                        var _c = __read(_b, 13), context = _c[0], associationDefinitions = _c[1], documentDefinitions = _c[2], eventDefinitions = _c[3], eventStatisticsDefinitions = _c[4], namedListDefinitions = _c[5], processDefinitions = _c[6], recordDefinitions = _c[7], ruleDefinitions = _c[8], viewDefinitions = _c[9], webApiDefinitions = _c[10], dependentBundleRecordDefinitions = _c[11], recordInstances = _c[12];
                        var platformBundleIdPrefix = 'com.bmc.arsys';
                        var cacheRecordInstanceDefinitions = recordInstances.data.reduce(function (result, recordInstance, index) {
                            recordInstance.selected = true;
                            recordInstance.initialFixedOrder = index;
                            if (!recordInstance.internal &&
                                !(lodash.startsWith(recordInstance.name, platformBundleIdPrefix) &&
                                    !lodash.startsWith(_this.currentBundleId, platformBundleIdPrefix))) {
                                recordInstance.defaultFilter = recordInstance.dataFilter;
                                recordInstance.dataFilter = null;
                                recordInstance.duplicateDataActionType = _this.options.gridConfig.defaultDuplicateDataActionType;
                                recordInstance.ignoreRuleExecution = false;
                                recordInstance.bundleName =
                                    context.bundleFriendlyNamesById[_this.rxDefinitionNameService.getBundleId(recordInstance.name)];
                                result.push(recordInstance);
                            }
                            return result;
                        }, []);
                        var cacheDependentBundleRecordDefinitions = dependentBundleRecordDefinitions.data
                            .filter(function (instance) {
                            return !lodash.find(cacheRecordInstanceDefinitions, { name: instance.name });
                        })
                            .reduce(function (result, instance) {
                            if (!instance.internal &&
                                !(lodash.startsWith(instance.name, platformBundleIdPrefix) &&
                                    !lodash.startsWith(_this.currentBundleId, platformBundleIdPrefix))) {
                                instance.defaultFilter = instance.dataFilter;
                                instance.dataFilter = null;
                                instance.duplicateDataActionType = _this.options.gridConfig.defaultDuplicateDataActionType;
                                instance.ignoreRuleExecution = false;
                                instance.bundleName =
                                    context.bundleFriendlyNamesById[_this.rxDefinitionNameService.getBundleId(instance.name)];
                                result.push(instance);
                            }
                            return result;
                        }, []);
                        var cacheRecordDefinitions = __spreadArray(__spreadArray([], __read(cacheRecordInstanceDefinitions)), __read(cacheDependentBundleRecordDefinitions));
                        _this.rxWizardModalComponent.api.updateContext({
                            cache: {
                                recordDefinitions: lodash.cloneDeep(cacheRecordDefinitions)
                            }
                        }, false);
                        _this.selectedDefinitionCount = 0;
                        var definitions = lodash.reduce({
                            association: associationDefinitions,
                            document: documentDefinitions,
                            event: eventDefinitions,
                            eventStatistics: eventStatisticsDefinitions,
                            namedList: namedListDefinitions,
                            process: processDefinitions,
                            record: recordDefinitions,
                            rule: ruleDefinitions,
                            view: viewDefinitions,
                            webApi: webApiDefinitions
                        }, function (allDefinitions, dataPage, definitionType) {
                            var displayType = _this.rxStringService.prettify(definitionType);
                            var definitionsByBundleName = dataPage.data.reduce(function (result, definition) {
                                if (definition.customizationPerspective !==
                                    i2.RX_OVERLAY.operationTypes.notCustomizedInThisOverlayGroup) {
                                    definition.type = definitionType;
                                    definition.displayType = displayType;
                                    definition.displayName = _this.rxDefinitionNameService.getDisplayName(definition.name);
                                    definition.definitionTypeWithName = definitionType + ":" + definition.name;
                                    definition.bundleId = _this.rxDefinitionNameService.getBundleId(definition.name);
                                    definition.bundleFriendlyName = context.bundleFriendlyNamesById[definition.bundleId];
                                    definition.bundleIdWithDefinitionType = definition.bundleId + ":" + definitionType;
                                    var bundleGroup = lodash.find(result, { groupValue: definition.bundleIdWithDefinitionType });
                                    if (bundleGroup) {
                                        bundleGroup.items.push(definition);
                                    }
                                    else {
                                        bundleGroup = {
                                            groupTitle: definition.bundleFriendlyName,
                                            groupValue: definition.bundleIdWithDefinitionType,
                                            groupField: 'bundleName',
                                            items: [definition]
                                        };
                                        result.push(bundleGroup);
                                    }
                                }
                                return result;
                            }, []);
                            return allDefinitions.concat(definitionsByBundleName.length
                                ? [
                                    {
                                        groupValue: displayType,
                                        groupField: 'displayType',
                                        items: definitionsByBundleName
                                    }
                                ]
                                : []);
                        }, []);
                        return {
                            data: definitions,
                            totalSize: definitions.length
                        };
                    })); }));
                }
            });
            rxjs.combineLatest([this.recordGrid.rowSelectionChanged, this.rxWizardModalComponent.context$.pipe(operators.take(1))])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), selectedRows = _c[0], context = _c[1];
                _this.selectedDefinitionCount = selectedRows.length;
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                newDeploymentPackageDescriptor.definitionsToDeployByType = selectedRows.reduce(function (definitionsToDeployByType, row) {
                    var _a;
                    var definitionType = AX_BUNDLE_DETAILS.definitionTypes[row.type];
                    definitionsToDeployByType[definitionType] = (_a = definitionsToDeployByType[definitionType]) !== null && _a !== void 0 ? _a : [];
                    definitionsToDeployByType[definitionType].push(row.name);
                    return definitionsToDeployByType;
                }, {});
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                }, _this.selectedDefinitionCount > 0);
            });
        };
        SelectBundleContentDefinitionsWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        SelectBundleContentDefinitionsWizardStepComponent.prototype.onDataLoaded = function () {
            this.rxWizardModalComponent.api.enableNextButton();
        };
        return SelectBundleContentDefinitionsWizardStepComponent;
    }());
    /** @nocollapse */ SelectBundleContentDefinitionsWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepComponent, deps: [{ token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxDataPageFactoryService }, { token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$5.RxRecordDefinitionDataPageService }, { token: i2__namespace.RxSessionExpirationService }, { token: i5__namespace$1.RxStringService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectBundleContentDefinitionsWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectBundleContentDefinitionsWizardStepComponent, selector: "ax-select-bundle-content-definitions-wizard-step", inputs: { options: "options" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }, { propertyName: "displayTypeWithCellTemplate", first: true, predicate: ["displayTypeWithCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.customized-definitions.label'\n        | translate\n    }}\n  </h5>\n  <div>\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.definitions-count.label'\n        | translate\n          : {\n              count: selectedDefinitionCount,\n              packageType: this.options.displayName.toLowerCase()\n            }\n    }}\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  {{\n    'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-bundle-content-definitions.select-customized-definitions-to-include-in-the-package-content-package.label'\n      | translate\n  }}\n</div>\n\n<rx-record-grid [config]=\"recordGridConfig$\" (dataLoaded)=\"onDataLoaded()\"></rx-record-grid>\n\n<ng-template #displayTypeWithCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-select-bundle-content-definitions-wizard-step',
                        templateUrl: './select-bundle-content-definitions-wizard-step.component.html',
                        styleUrls: ['./select-bundle-content-definitions-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxDataPageFactoryService }, { type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$5.RxRecordDefinitionDataPageService }, { type: i2__namespace.RxSessionExpirationService }, { type: i5__namespace$1.RxStringService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }], displayTypeWithCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['displayTypeWithCellTemplate', { static: true }]
                }] } });

    var DefinitionHistoryDataPageService = /** @class */ (function (_super) {
        __extends(DefinitionHistoryDataPageService, _super);
        function DefinitionHistoryDataPageService(injector) {
            var _this = _super.call(this, injector, 'com.bmc.arsys.rx.application.definitionhistory.datapage.DefinitionHistoryDataPageQuery') || this;
            _this.injector = injector;
            return _this;
        }
        return DefinitionHistoryDataPageService;
    }(i2.DataPage));
    /** @nocollapse */ DefinitionHistoryDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionHistoryDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ DefinitionHistoryDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionHistoryDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionHistoryDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var SelectDefinitionsToDeleteWizardStepComponent = /** @class */ (function () {
        function SelectDefinitionsToDeleteWizardStepComponent(definitionHistoryDataPageService, rxDefinitionNameService, rxSessionExpirationService, rxStringService, rxWizardModalComponent, translateService) {
            this.definitionHistoryDataPageService = definitionHistoryDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxStringService = rxStringService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.selectedDefinitionCount = 0;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        SelectDefinitionsToDeleteWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label'),
                    fieldId: 'displayType',
                    sortable: {
                        priority: 0,
                        direction: i5.ColumnSortDirection.Asc
                    },
                    filterable: false
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'objectName',
                    wrapText: true,
                    cellTemplate: this.recordNameCellTemplate
                },
                {
                    fieldId: 'createdBy',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.deleted-by.label')
                },
                {
                    fieldId: 'createDate',
                    title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.deleted-date.label'),
                    sortable: {
                        priority: 2,
                        direction: i5.ColumnSortDirection.Asc
                    }
                },
                {
                    fieldId: 'bundleName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.bundle-name.label'),
                    sortable: {
                        priority: 1,
                        direction: i5.ColumnSortDirection.Asc
                    },
                    filterable: false,
                    visible: false
                }
            ].map(function (column) { return (Object.assign(Object.assign({}, column), { title: _this.translateService.instant(column.title) })); });
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'objectName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'createdBy',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'createDate',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                    },
                    {
                        id: 'displayType',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'bundleName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            rxjs.combineLatest([this.recordGrid.rowSelectionChanged, this.rxWizardModalComponent.context$.pipe(operators.take(1))])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), selectedRows = _c[0], context = _c[1];
                var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                _this.selectedDefinitionCount = selectedRows.length;
                newDeploymentPackageDescriptor.definitionsToDeleteByType = selectedRows.reduce(function (definitionsToDeleteByType, row) {
                    var _a;
                    var definitionType = AX_BUNDLE_DETAILS.definitionTypes[row.type];
                    definitionsToDeleteByType[definitionType] = (_a = definitionsToDeleteByType[definitionType]) !== null && _a !== void 0 ? _a : [];
                    definitionsToDeleteByType[definitionType].push(row.objectName);
                    return definitionsToDeleteByType;
                }, {});
                _this.rxWizardModalComponent.api.updateContext({
                    deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                    isPackageDataModified: true
                }, _this.selectedDefinitionCount > 0);
            });
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableColumnSelection: false,
                enableFiltering: true,
                enableRowSelection: i5.RowSelectionMode.Multiple,
                recordIdField: 'definitionTypeWithName',
                styles: 'flex-fill',
                useExternalFiltering: false,
                expandGroups: true,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function (queryParams) {
                    _this.rxWizardModalComponent.api.disableNextButton();
                    return _this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMap(function () {
                        var _a;
                        var defaultParams = {
                            operationType: 'DELETE'
                        };
                        if ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.isContentPackageOperation) {
                            defaultParams.requireDependent = true;
                            defaultParams.recursive = true;
                            defaultParams.requireLatestVersion = true;
                        }
                        return rxjs.combineLatest([
                            _this.definitionHistoryDataPageService.get({ params: Object.assign({ objectType: 'ASSOCIATION' }, defaultParams) }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'DOCUMENT_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'EVENT_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'EVENT_STATISTICS_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({ params: Object.assign({ objectType: 'NAMED_LIST' }, defaultParams) }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'PROCESS_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'RECORD_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'RULE_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'VIEW_DEFINITION' }, defaultParams)
                            }),
                            _this.definitionHistoryDataPageService.get({
                                params: Object.assign({ objectType: 'WEBAPI_DEFINITION' }, defaultParams)
                            })
                        ]).pipe(operators.map(function (_b) {
                            var _c = __read(_b, 10), associationDefinitions = _c[0], documentDefinitions = _c[1], eventDefinitions = _c[2], eventStatisticsDefinitions = _c[3], namedListDefinitions = _c[4], processDefinitions = _c[5], recordDefinitions = _c[6], ruleDefinitions = _c[7], viewDefinitions = _c[8], webApiDefinitions = _c[9];
                            var definitions = lodash.reduce({
                                association: associationDefinitions,
                                document: documentDefinitions,
                                event: eventDefinitions,
                                eventStatistic: eventStatisticsDefinitions,
                                namedList: namedListDefinitions,
                                process: processDefinitions,
                                record: recordDefinitions,
                                rule: ruleDefinitions,
                                view: viewDefinitions,
                                webApi: webApiDefinitions
                            }, function (allDefinitions, dataPage, definitionType) {
                                var definitionsByType = dataPage.data;
                                var displayType = _this.rxStringService.prettify(definitionType);
                                definitionsByType.forEach(function (definition) {
                                    definition.type = definitionType;
                                    definition.displayType = displayType;
                                    definition.displayName = _this.rxDefinitionNameService.getDisplayName(definition.objectName);
                                    definition.definitionTypeWithName = definitionType + ":" + definition.objectName;
                                });
                                return allDefinitions.concat(definitionsByType.length
                                    ? [
                                        {
                                            groupValue: displayType,
                                            groupField: 'type',
                                            items: definitionsByType
                                        }
                                    ]
                                    : []);
                            }, []);
                            return {
                                data: definitions,
                                totalSize: definitions.length
                            };
                        }));
                    }));
                }
            });
        };
        SelectDefinitionsToDeleteWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        SelectDefinitionsToDeleteWizardStepComponent.prototype.onDataLoaded = function () {
            this.rxWizardModalComponent.api.enableNextButton();
        };
        return SelectDefinitionsToDeleteWizardStepComponent;
    }());
    /** @nocollapse */ SelectDefinitionsToDeleteWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepComponent, deps: [{ token: DefinitionHistoryDataPageService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxSessionExpirationService }, { token: i5__namespace$1.RxStringService }, { token: i2__namespace$1.RxWizardModalComponent }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectDefinitionsToDeleteWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectDefinitionsToDeleteWizardStepComponent, selector: "ax-select-definitions-to-delete-wizard-step", inputs: { options: "options" }, viewQueries: [{ propertyName: "recordNameCellTemplate", first: true, predicate: ["recordNameCellTemplate"], descendants: true, static: true }, { propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">\n    {{'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.deleted-definitions.label' |\n    translate}}\n\n    <adapt-icon\n      name=\"question_circle_o\"\n      class=\"ml-2\"\n      placement=\"bottom\"\n      maxWidth=\"400\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.tooltip' | translate\"\n    ></adapt-icon>\n  </h5>\n  <div>\n    {{'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.deleted-definitions-count.label'\n    | translate : { count: selectedDefinitionCount } }}\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  {{'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.selected-deleted-definitions.label'\n  | translate}}\n</div>\n\n<rx-record-grid [config]=\"recordGridConfig$\" (dataLoaded)=\"onDataLoaded()\"></rx-record-grid>\n\n<ng-template #recordNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-select-definitions-to-delete-wizard-step',
                        templateUrl: 'select-definitions-to-delete-wizard-step.components.html',
                        styleUrls: ['./select-definitions-to-delete-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: DefinitionHistoryDataPageService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxSessionExpirationService }, { type: i5__namespace$1.RxStringService }, { type: i2__namespace$1.RxWizardModalComponent }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], recordNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['recordNameCellTemplate', { static: true }]
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }] } });

    var SelectDefinitionsWizardStepComponent = /** @class */ (function () {
        function SelectDefinitionsWizardStepComponent(rxWizardModalComponent, rxAssociationDefinitionDataPageService, rxDefinitionNameService, rxDocumentDefinitionDataPageService, rxEventDefinitionDataPageService, rxEventStatisticsDefinitionDataPageService, rxNamedListDefinitionDataPageService, rxProcessDefinitionDataPageService, rxRecordDefinitionDataPageService, rxRuleDefinitionDataPageService, rxSessionExpirationService, rxStringService, rxViewDefinitionDataPageService, rxWebApiDefinitionDataPageService, translateService) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxDocumentDefinitionDataPageService = rxDocumentDefinitionDataPageService;
            this.rxEventDefinitionDataPageService = rxEventDefinitionDataPageService;
            this.rxEventStatisticsDefinitionDataPageService = rxEventStatisticsDefinitionDataPageService;
            this.rxNamedListDefinitionDataPageService = rxNamedListDefinitionDataPageService;
            this.rxProcessDefinitionDataPageService = rxProcessDefinitionDataPageService;
            this.rxRecordDefinitionDataPageService = rxRecordDefinitionDataPageService;
            this.rxRuleDefinitionDataPageService = rxRuleDefinitionDataPageService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxStringService = rxStringService;
            this.rxViewDefinitionDataPageService = rxViewDefinitionDataPageService;
            this.rxWebApiDefinitionDataPageService = rxWebApiDefinitionDataPageService;
            this.translateService = translateService;
            this.selectedDefinitionCount = 0;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        SelectDefinitionsWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.rxWizardModalComponent.api.updateContext({
                cache: {}
            }, false);
            var gridColumns = [
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label'),
                    fieldId: 'displayType',
                    sortable: { direction: i5.ColumnSortDirection.Desc, priority: 0 }
                },
                {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: 'displayName'
                },
                AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy,
                Object.assign({ sortable: { direction: i5.ColumnSortDirection.Desc, priority: 1 } }, AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime),
                AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective
            ].map(function (column) { return (Object.assign(Object.assign({}, column), { title: _this.translateService.instant(column.title) })); });
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'displayType',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'displayName',
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.lastChangedBy.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.lastUpdateTime.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
                    },
                    {
                        id: AX_BUNDLE_DETAILS.definitionGridColumns.customizationPerspective.fieldId,
                        resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var defaultParams = {
                propertySelection: ['name', 'lastUpdateTime', 'lastChangedBy', 'customizationPerspective']
            };
            var recordDefinitionsParams = {
                propertySelection: __spreadArray(__spreadArray([], __read(defaultParams.propertySelection)), ['shouldExportData', 'type'])
            };
            var viewDefinitionsParams = {
                excludeExtensionViews: false,
                propertySelection: __spreadArray([], __read(defaultParams.propertySelection))
            };
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableColumnSelection: false,
                enableRowSelection: ((_a = this.options.gridConfig) === null || _a === void 0 ? void 0 : _a.enableRowSelection) || null,
                recordIdField: 'definitionTypeWithName',
                styles: 'flex-fill',
                useExternalFiltering: false,
                expandGroups: true,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function (queryParams) {
                    _this.rxWizardModalComponent.api.disableNextButton();
                    return _this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMap(function () { return rxjs.combineLatest([
                        _this.rxRecordDefinitionDataPageService.get({ params: recordDefinitionsParams }),
                        _this.rxAssociationDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxDocumentDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxEventDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxEventStatisticsDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxNamedListDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxProcessDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxRuleDefinitionDataPageService.get({ params: defaultParams }),
                        _this.rxViewDefinitionDataPageService.get({ params: viewDefinitionsParams }),
                        _this.rxWebApiDefinitionDataPageService.get({ params: viewDefinitionsParams })
                    ]).pipe(operators.map(function (_c) {
                        var _d = __read(_c, 10), recordDefinitions = _d[0], associationDefinitions = _d[1], documentDefinitions = _d[2], eventDefinitions = _d[3], eventStatisticsDefinitions = _d[4], namedListDefinitions = _d[5], processDefinitions = _d[6], ruleDefinitions = _d[7], viewDefinitions = _d[8], webApiDefinitions = _d[9];
                        _this.rxWizardModalComponent.api.updateContext({
                            cache: {
                                recordDefinitions: lodash.cloneDeep(recordDefinitions.data)
                            }
                        }, false);
                        _this.selectedDefinitionCount = 0;
                        var definitions = lodash.reduce({
                            association: associationDefinitions,
                            document: documentDefinitions,
                            event: eventDefinitions,
                            eventStatistic: eventStatisticsDefinitions,
                            namedList: namedListDefinitions,
                            process: processDefinitions,
                            record: recordDefinitions,
                            rule: ruleDefinitions,
                            view: viewDefinitions,
                            webApi: webApiDefinitions
                        }, function (allDefinitions, dataPage, definitionType) {
                            var _a;
                            var definitionsByType = lodash.reject(dataPage.data, function (definition) { return definition.customizationPerspective ===
                                i2.RX_OVERLAY.operationTypes.notCustomizedInThisOverlayGroup; });
                            var displayType = _this.rxStringService.prettify(definitionType);
                            definitionsByType.forEach(function (definition) {
                                definition.type = definitionType;
                                definition.displayType = displayType;
                                definition.displayName = _this.rxDefinitionNameService.getDisplayName(definition.name);
                                definition.definitionTypeWithName = definitionType + ":" + definition.name;
                            });
                            if (!((_a = _this.options.gridConfig) === null || _a === void 0 ? void 0 : _a.enableRowSelection)) {
                                _this.selectedDefinitionCount += definitionsByType.length;
                            }
                            return allDefinitions.concat((definitionsByType === null || definitionsByType === void 0 ? void 0 : definitionsByType.length)
                                ? [
                                    {
                                        groupValue: displayType,
                                        groupField: 'displayType',
                                        items: definitionsByType
                                    }
                                ]
                                : []);
                        }, []);
                        return {
                            data: definitions,
                            totalSize: definitions.length
                        };
                    })); }));
                }
            });
            if ((_b = this.options.gridConfig) === null || _b === void 0 ? void 0 : _b.enableRowSelection) {
                rxjs.combineLatest([this.recordGrid.rowSelectionChanged, this.rxWizardModalComponent.context$.pipe(operators.take(1))])
                    .pipe(operators.takeUntil(this.destroyed$))
                    .subscribe(function (_c) {
                    var _d = __read(_c, 2), selectedRows = _d[0], context = _d[1];
                    _this.selectedDefinitionCount = selectedRows.length;
                    var newDeploymentPackageDescriptor = lodash.cloneDeep(context.deploymentPackageDescriptor);
                    newDeploymentPackageDescriptor.definitionsToDeployByType = selectedRows.reduce(function (definitionsToDeployByType, row) {
                        var _a;
                        var definitionType = AX_BUNDLE_DETAILS.definitionTypes[row.type];
                        definitionsToDeployByType[definitionType] = (_a = definitionsToDeployByType[definitionType]) !== null && _a !== void 0 ? _a : [];
                        definitionsToDeployByType[definitionType].push(row.name);
                        return definitionsToDeployByType;
                    }, {});
                    _this.rxWizardModalComponent.api.updateContext({
                        deploymentPackageDescriptor: newDeploymentPackageDescriptor,
                        isPackageDataModified: true
                    }, _this.selectedDefinitionCount > 0);
                });
            }
        };
        SelectDefinitionsWizardStepComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        SelectDefinitionsWizardStepComponent.prototype.onDataLoaded = function () {
            this.rxWizardModalComponent.api.enableNextButton();
        };
        return SelectDefinitionsWizardStepComponent;
    }());
    /** @nocollapse */ SelectDefinitionsWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepComponent, deps: [{ token: i2__namespace$1.RxWizardModalComponent }, { token: i1__namespace$6.RxAssociationDefinitionDataPageService }, { token: i2__namespace.RxDefinitionNameService }, { token: i1__namespace$3.RxDocumentDefinitionDataPageService }, { token: i1__namespace$8.RxEventDefinitionDataPageService }, { token: i1__namespace$9.RxeventStatisticsDefinitionDataPageService }, { token: i1__namespace$7.RxNamedListDefinitionDataPageService }, { token: i6__namespace.RxProcessDefinitionDataPageService }, { token: i1__namespace$5.RxRecordDefinitionDataPageService }, { token: i2__namespace$3.RxRuleDefinitionDataPageService }, { token: i2__namespace.RxSessionExpirationService }, { token: i5__namespace$1.RxStringService }, { token: i2__namespace$2.RxViewDefinitionDataPageService }, { token: i1__namespace$4.RxWebApiDefinitionDataPageService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectDefinitionsWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectDefinitionsWizardStepComponent, selector: "ax-select-definitions-wizard-step", inputs: { options: "options" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: i5.RecordGridComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex justify-content-between\">\n  <h5 class=\"mt-0\">\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.customized-definitions.label'\n        | translate\n    }}\n  </h5>\n  <div>\n    {{\n      'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.definitions-count.label'\n        | translate\n          : {\n              count: selectedDefinitionCount,\n              packageType: this.options.displayName.toLowerCase()\n            }\n    }}\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  {{\n    'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.definitions-included-in-the-package.label'\n      | translate\n  }}\n</div>\n\n<rx-record-grid [config]=\"recordGridConfig$\" (dataLoaded)=\"onDataLoaded()\"></rx-record-grid>\n", styles: [":host{display:flex;flex-direction:column;height:100%}rx-record-grid{height:100%}\n"], components: [{ type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-select-definitions-wizard-step',
                        templateUrl: './select-definitions-wizard-step.component.html',
                        styleUrls: ['./select-definitions-wizard-step.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxWizardModalComponent }, { type: i1__namespace$6.RxAssociationDefinitionDataPageService }, { type: i2__namespace.RxDefinitionNameService }, { type: i1__namespace$3.RxDocumentDefinitionDataPageService }, { type: i1__namespace$8.RxEventDefinitionDataPageService }, { type: i1__namespace$9.RxeventStatisticsDefinitionDataPageService }, { type: i1__namespace$7.RxNamedListDefinitionDataPageService }, { type: i6__namespace.RxProcessDefinitionDataPageService }, { type: i1__namespace$5.RxRecordDefinitionDataPageService }, { type: i2__namespace$3.RxRuleDefinitionDataPageService }, { type: i2__namespace.RxSessionExpirationService }, { type: i5__namespace$1.RxStringService }, { type: i2__namespace$2.RxViewDefinitionDataPageService }, { type: i1__namespace$4.RxWebApiDefinitionDataPageService }, { type: i3__namespace.TranslateService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], recordGrid: [{
                    type: i0.ViewChild,
                    args: [i5.RecordGridComponent, { static: true }]
                }] } });

    var AX_BUNDLE_PACKAGING = {
        packageRegistry: {
            recordDefinitionName: 'BundleDeploy:PackageRegistry',
            fieldIds: {
                deployError: 3292,
                type: 3303,
                bundlePackageDescriptor: 3311,
                name: 3276,
                packageDeployStatus: i1$5.RX_RECORD_DEFINITION.coreFieldIds.status
            }
        },
        packageTypes: {
            content: 3
        }
    };

    var AX_CONTENT_PACKAGE_IMPORT_LOGS = {
        messageTypes: {
            all: 'ALL'
        },
        importStatuses: {
            IMPORT_DEFINITIONS_SUCCESS: 'success',
            IMPORT_DEFINITIONS_WARNING: 'warning',
            IMPORT_DEFINITIONS_ERROR: 'error',
            IMPORT_DEFINITIONS_UNCHANGED: 'unchanged'
        },
        definitionTypeMap: {
            DOCUMENT_DEFINITION: 'Document',
            EVENT_DEFINITION: 'Event',
            EVENT_STATISTICS_DEFINITION: 'Event Statistic',
            NAMED_LIST: 'Names List',
            PROCESS_DEFINITION: 'Process',
            RECORD_DEFINITION: 'Record',
            RULE_DEFINITION: 'Rule',
            VIEW_DEFINITION: 'View',
            WEBAPI_DEFINITION: 'Web API'
        }
    };

    var RxCreatePackageStatusDataPageService = /** @class */ (function (_super) {
        __extends(RxCreatePackageStatusDataPageService, _super);
        function RxCreatePackageStatusDataPageService(injector) {
            var _this = _super.call(this, injector, 'com.bmc.arsys.rx.application.bundle.datapage.CreatePackageStatusDataPageQuery') || this;
            _this.injector = injector;
            return _this;
        }
        return RxCreatePackageStatusDataPageService;
    }(i2.DataPage));
    /** @nocollapse */ RxCreatePackageStatusDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCreatePackageStatusDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxCreatePackageStatusDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCreatePackageStatusDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCreatePackageStatusDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var ContentPackageImportLogsComponent = /** @class */ (function (_super) {
        __extends(ContentPackageImportLogsComponent, _super);
        function ContentPackageImportLogsComponent(activeModalRef, axBundleDeploymentService, datePipe, injector, rxBundleCacheService, rxDefinitionNameService, rxGlobalCacheService, rxJsonParserService, rxModalService, rxRecordInstanceDataPageService, rxRecordInstanceService, rxStringService, translateService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.axBundleDeploymentService = axBundleDeploymentService;
            _this.datePipe = datePipe;
            _this.injector = injector;
            _this.rxBundleCacheService = rxBundleCacheService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxJsonParserService = rxJsonParserService;
            _this.rxModalService = rxModalService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxStringService = rxStringService;
            _this.translateService = translateService;
            _this.busyConfig = {
                busy: null,
                sticky: true,
                message: _this.translateService.instant('com.bmc.arsys.rx.client.loading-data.label'),
                loaderType: i1.LoaderType.LINE
            };
            _this.viewTypes = [true, false];
            _this.messageTypes = [true, false, false, false];
            _this.packageCreationDateControl = new i4.FormControl([]);
            _this.packageNameControl = new i4.FormControl('');
            _this.createdByControl = new i4.FormControl('');
            _this.viewTypeControl = new i4.FormControl(_this.viewTypes);
            _this.messagesTypeControl = new i4.FormControl(_this.messageTypes);
            _this.buttonGroupConfig = [
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.definitions.label')
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.title')
                }
            ];
            _this.messagesButtonGroupConfig = [
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.all.label'),
                    value: AX_CONTENT_PACKAGE_IMPORT_LOGS.messageTypes.all
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.success.label'),
                    value: 'SUCCESS'
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    value: 'WARNING'
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.error.label'),
                    value: 'ERROR'
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.content-package-import-logs.unchanged.label'),
                    value: 'UNCHANGED'
                }
            ];
            _this.selectedPackageContent = {};
            _this.gridColumns = [
                {
                    field: 'bundleName',
                    header: ''
                }
            ];
            _this.expandedRowColumns = {
                data: [
                    {
                        field: 'dataSource',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-source.label')
                    },
                    {
                        field: 'successCount',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.success.label')
                    },
                    {
                        field: 'warningCount',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label')
                    },
                    {
                        field: 'errorCount',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.error.label')
                    },
                    {
                        field: 'UnchangedCount',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.content-package-import-logs.unchanged.label')
                    }
                ],
                definitions: [
                    {
                        field: 'definitionType',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.definition-type.label')
                    },
                    {
                        field: 'success',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.success.label')
                    },
                    {
                        field: 'warning',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label')
                    },
                    {
                        field: 'error',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.error.label')
                    },
                    {
                        field: 'Unchanged',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.content-package-import-logs.unchanged.label')
                    }
                ]
            };
            _this.messagesGridColumns = {
                data: [
                    {
                        field: 'dataSource',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-source.label'),
                        width: '20%'
                    },
                    {
                        field: 'message',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.message.label')
                    }
                ],
                definitions: [
                    {
                        field: 'definitionType',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.definition-type.label'),
                        width: '20%'
                    },
                    {
                        field: 'name',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.name.label')
                    },
                    {
                        field: 'message',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.message.label')
                    }
                ]
            };
            _this.gridData = [];
            _this.messagesGridData = [];
            _this.gridSelectedItems = [];
            _this.expandedRowKeys = {};
            _this.packagesList$ = _this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: AX_BUNDLE_PACKAGING.packageRegistry.recordDefinitionName,
                    propertySelection: __spreadArray([
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.createdBy,
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.id
                    ], __read(lodash.values(AX_BUNDLE_PACKAGING.packageRegistry.fieldIds))),
                    queryExpression: [
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.name + "'=\"" + _this.rxBundleCacheService.bundleId + "\"",
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.type + "'=" + AX_BUNDLE_PACKAGING.packageTypes.content,
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.deployError + "'!=$NULL$",
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.packageDeployStatus + "'=\"" + AX_BUNDLE_DETAILS.packageDeployStatuses.deployed + "\""
                    ].join(' AND '),
                    sortBy: -i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate
                }
            })
                .pipe(operators.map(function (recordInstanceDataPage) { return recordInstanceDataPage.data; }));
            _this.packagesList = [];
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.optionFormatter = _this.optionFormatter.bind(_this);
            return _this;
        }
        ContentPackageImportLogsComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.busyConfig.busy = this.packagesList$.pipe(operators.take(1)).subscribe(function (packagesList) {
                if (packagesList.length) {
                    _this.packageCreationDateControl.setValue([packagesList[0]]);
                }
                _this.packagesList = packagesList;
            });
            this.packageCreationDateControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                var selectedPackage = lodash.first(value);
                if (selectedPackage) {
                    _this.packageNameControl.setValue(selectedPackage[AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.name]);
                    _this.createdByControl.setValue(selectedPackage[i1$5.RX_RECORD_DEFINITION.coreFieldIds.createdBy]);
                    _this.selectedPackageContent = _this.rxJsonParserService.tryParseJson(selectedPackage[AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.deployError]);
                }
                else {
                    _this.selectedPackageContent = {};
                }
                _this.updateGridData();
            });
            this.viewTypeControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (buttonGroup) {
                _this.viewTypes = buttonGroup;
                _this.gridSelectedItems = [];
                _this.updateGridData();
                _this.updateMessagesGridData();
            });
            this.messagesTypeControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (messagesButtonGroup) {
                _this.messageTypes = messagesButtonGroup;
                _this.updateMessagesGridData();
            });
        };
        ContentPackageImportLogsComponent.prototype.updateGridData = function () {
            var _this = this;
            var _a, _b, _c, _d;
            if (this.viewTypes[0] && ((_b = (_a = this.selectedPackageContent) === null || _a === void 0 ? void 0 : _a.overallImportSummary) === null || _b === void 0 ? void 0 : _b.definition)) {
                this.gridData = this.selectedPackageContent.overallImportSummary.definition.reduce(function (result, definitionsByType) {
                    definitionsByType.status.forEach(function (status) {
                        var bundle = _this.rxDefinitionNameService.getBundleId(status.name);
                        var bundleGroup = lodash.find(result, { groupValue: bundle });
                        if (bundleGroup) {
                            var definition = lodash.find(bundleGroup.subTableItems, {
                                definitionType: AX_CONTENT_PACKAGE_IMPORT_LOGS.definitionTypeMap[definitionsByType.definitionType]
                            });
                            if (!definition) {
                                definition = {
                                    definitionType: AX_CONTENT_PACKAGE_IMPORT_LOGS.definitionTypeMap[definitionsByType.definitionType],
                                    error: 0,
                                    statuses: [],
                                    success: 0,
                                    unchanged: 0,
                                    warning: 0
                                };
                                bundleGroup.subTableItems.push(definition);
                            }
                            definition[AX_CONTENT_PACKAGE_IMPORT_LOGS.importStatuses[status.messageType]]++;
                            definition.statuses.push(status);
                        }
                        else {
                            var definition = {
                                definitionType: AX_CONTENT_PACKAGE_IMPORT_LOGS.definitionTypeMap[definitionsByType.definitionType],
                                error: 0,
                                statuses: [status],
                                success: 0,
                                unchanged: 0,
                                warning: 0
                            };
                            definition[AX_CONTENT_PACKAGE_IMPORT_LOGS.importStatuses[status.messageType]]++;
                            bundleGroup = {
                                bundleName: bundle,
                                groupValue: bundle,
                                groupField: 'bundleName',
                                subTableItems: [definition]
                            };
                            _this.rxGlobalCacheService
                                .getBundleFriendlyName(bundle)
                                .pipe(operators.take(1))
                                .subscribe(function (bundleFriendlyName) {
                                bundleGroup.bundleName = bundleFriendlyName;
                                _this.expandedRowKeys[bundleFriendlyName] = true;
                            });
                            result.push(bundleGroup);
                        }
                    });
                    return result;
                }, []);
            }
            else if (this.viewTypes[1] && ((_d = (_c = this.selectedPackageContent) === null || _c === void 0 ? void 0 : _c.overallImportSummary) === null || _d === void 0 ? void 0 : _d.data)) {
                this.gridData = this.selectedPackageContent.overallImportSummary.data.reduce(function (result, dataItem) {
                    var bundle = _this.rxDefinitionNameService.getBundleId(dataItem.recordDefinitionName);
                    var dataSource = _this.rxDefinitionNameService.getDisplayName(dataItem.recordDefinitionName);
                    var item = Object.assign({ dataSource: dataSource }, dataItem);
                    var bundleGroup = lodash.find(result, { groupValue: bundle });
                    if (bundleGroup) {
                        bundleGroup.subTableItems.push(item);
                    }
                    else {
                        bundleGroup = {
                            bundleName: bundle,
                            groupValue: bundle,
                            groupField: 'bundleName',
                            subTableItems: [item]
                        };
                        _this.rxGlobalCacheService
                            .getBundleFriendlyName(bundle)
                            .pipe(operators.take(1))
                            .subscribe(function (bundleFriendlyName) {
                            bundleGroup.bundleName = bundleFriendlyName;
                        });
                        result.push(bundleGroup);
                    }
                    return result;
                }, []);
            }
        };
        ContentPackageImportLogsComponent.prototype.updateMessagesGridData = function () {
            var _this = this;
            var messagesType = this.messagesButtonGroupConfig[this.messageTypes.indexOf(true)].value;
            if (this.viewTypes[0]) {
                this.messagesGridData = this.gridSelectedItems.reduce(function (result, item) {
                    var messages = item.statuses.reduce(function (res, status) {
                        var statusMessages = status.messages.reduce(function (resultMessages, message) {
                            if (messagesType === AX_CONTENT_PACKAGE_IMPORT_LOGS.messageTypes.all || lodash.startsWith(message, messagesType)) {
                                resultMessages.push({
                                    definitionType: item.definitionType,
                                    message: message,
                                    name: _this.rxDefinitionNameService.getDisplayName(status.name)
                                });
                            }
                            return resultMessages;
                        }, []);
                        return __spreadArray(__spreadArray([], __read(res)), __read(statusMessages));
                    }, []);
                    return __spreadArray(__spreadArray([], __read(result)), __read(messages));
                }, []);
            }
            else if (this.viewTypes[1]) {
                this.messagesGridData = this.gridSelectedItems.reduce(function (result, item) {
                    var messages = item.messages.reduce(function (res, message) {
                        if (messagesType === AX_CONTENT_PACKAGE_IMPORT_LOGS.messageTypes.all || lodash.startsWith(message, messagesType)) {
                            res.push({
                                dataSource: item.dataSource,
                                message: message
                            });
                        }
                        return res;
                    }, []);
                    return __spreadArray(__spreadArray([], __read(result)), __read(messages));
                }, []);
            }
        };
        ContentPackageImportLogsComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        ContentPackageImportLogsComponent.prototype.optionFormatter = function (entry) {
            return this.datePipe.transform(entry[i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate], 'medium');
        };
        ContentPackageImportLogsComponent.prototype.onSelectionChange = function (selectedData) {
            this.gridSelectedItems = selectedData;
            this.updateMessagesGridData();
        };
        ContentPackageImportLogsComponent.prototype.close = function () {
            this.activeModalRef.close();
        };
        return ContentPackageImportLogsComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ ContentPackageImportLogsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: AxBundleDeploymentService }, { token: i8__namespace.DatePipe }, { token: i0__namespace.Injector }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxGlobalCacheService }, { token: i5__namespace$1.RxJsonParserService }, { token: i3__namespace$1.RxModalService }, { token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceService }, { token: i5__namespace$1.RxStringService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContentPackageImportLogsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ContentPackageImportLogsComponent, selector: "ax-content-package-import-logs", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.innovation-studio.content-package-import-logs.label' | translate }}\n  </h5>\n\n  <button\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.close.label' | translate\"\n    (click)=\"close()\"\n    class=\"close dp-close\"\n    rx-id=\"x-button\"\n    type=\"button\"\n  ></button>\n</div>\n\n<div class=\"modal-body d-flex flex-column\">\n  <div [ngBusy]=\"busyConfig\" class=\"container-fluid mb-3 pr-0\">\n    <div class=\"row flex-nowrap\">\n      <div class=\"row col-12 pr-0\">\n        <div class=\"col pl-0\">\n          <adapt-rx-select\n            [options]=\"packagesList\"\n            [optionFormatter]=\"optionFormatter\"\n            [popupMaxHeight]=\"560\"\n            [formControl]=\"packageCreationDateControl\"\n            [label]=\"\n              'com.bmc.arsys.rx.innovation-studio.manage-content-packages.package-creation-date.label' | translate\n            \"\n            appendToBody=\"true\"\n            rx-id=\"package-creation-date-select\"\n          >\n          </adapt-rx-select>\n        </div>\n        <div class=\"col\">\n          <adapt-rx-textfield\n            [disabledStyleForReadonlyState]=\"true\"\n            [label]=\"'com.bmc.arsys.rx.innovation-studio.packaging.package-name.label' | translate\"\n            [readonly]=\"true\"\n            [formControl]=\"packageNameControl\"\n            name=\"packageName\"\n            rx-id=\"package-name-field\"\n          ></adapt-rx-textfield>\n        </div>\n        <div class=\"col\">\n          <adapt-rx-textfield\n            [disabledStyleForReadonlyState]=\"true\"\n            [label]=\"'com.bmc.arsys.rx.innovation-studio.manage-content-packages.created-by.label' | translate\"\n            [readonly]=\"true\"\n            [formControl]=\"createdByControl\"\n            name=\"createdBy\"\n            rx-id=\"created-by-field\"\n          ></adapt-rx-textfield>\n        </div>\n        <div class=\"col pr-0\">\n          <adapt-rx-control-label label=\"{{ 'com.bmc.arsys.rx.client.common.action-view.label' | translate }}\">\n          </adapt-rx-control-label>\n\n          <adapt-button-group\n            [config]=\"buttonGroupConfig\"\n            [multiselectable]=\"false\"\n            [uncheckable]=\"false\"\n            [formControl]=\"viewTypeControl\"\n          ></adapt-button-group>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"adapt-table-toolbar adapt-table-toolbar_bordered font-weight-bold px-5 pt-2\">\n    {{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}/{{\n      'com.bmc.arsys.rx.client.common.library.label' | translate\n    }}\n  </div>\n  <div class=\"h-100\">\n    <div class=\"h-50\">\n      <adapt-table\n        [bordered]=\"true\"\n        [columns]=\"gridColumns\"\n        [sortable]=\"true\"\n        [value]=\"gridData\"\n        [dataKey]=\"'bundleName'\"\n        [expandedRowKeys]=\"expandedRowKeys\"\n        [expandedRowTemplate]=\"expandedRowTemplate\"\n        [scrollable]=\"true\"\n        scrollHeight=\"flex\"\n        class=\"application-library-table\"\n      ></adapt-table>\n    </div>\n    <div class=\"h-50 overflow-hidden border-bottom\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.common.messages.label' | translate }}\"\n        class=\"d-flex my-2\"\n      ></adapt-rx-control-label>\n      <div class=\"my-2\">\n        <adapt-button-group\n          [config]=\"messagesButtonGroupConfig\"\n          [multiselectable]=\"false\"\n          [uncheckable]=\"false\"\n          [formControl]=\"messagesTypeControl\"\n          class=\"mb-2\"\n        ></adapt-button-group>\n      </div>\n      <adapt-table\n        [bordered]=\"true\"\n        [columns]=\"viewTypeControl.value[0] ? messagesGridColumns.definitions : messagesGridColumns.data\"\n        [dataKey]=\"'definitionType'\"\n        [sortable]=\"true\"\n        [sortMode]=\"'multiple'\"\n        [value]=\"messagesGridData\"\n        [scrollable]=\"true\"\n        scrollHeight=\"190px\"\n      ></adapt-table>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n\n<ng-template #expandedRowTemplate let-dataItem=\"dataItem\" let-rowIndex=\"rowIndex\">\n  <div>\n    <adapt-table\n      [columns]=\"viewTypeControl.value[0] ? expandedRowColumns.definitions : expandedRowColumns.data\"\n      [value]=\"dataItem.subTableItems\"\n      [sortable]=\"true\"\n      [sortMode]=\"'multiple'\"\n      [selectionMode]=\"'multiple'\"\n      [selection]=\"gridSelectedItems\"\n      (selectionChange)=\"onSelectionChange($event)\"\n    ></adapt-table>\n  </div>\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}adapt-table.application-library-table::ng-deep .ui-table-thead{display:none}adapt-table.application-library-table::ng-deep adapt-table .ui-table-thead{display:table-header-group}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptButtonGroupComponent, selector: "adapt-button-group", inputs: ["config", "size", "groupType", "isVertical", "multiselectable", "uncheckable", "useCheckboxStyle"], outputs: ["modelArrayChanged"], exportAs: ["adaptBtnGroup"] }, { type: i9__namespace.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace.AdaptBusyDirective, selector: "[adapt-busy], [ngBusy]", inputs: ["ngBusy", "adaptRadarDisableEventSending", "busyPromise", "determinate"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-content-package-import-logs',
                        templateUrl: './content-package-import-logs.component.html',
                        styleUrls: ['content-package-import-logs.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: AxBundleDeploymentService }, { type: i8__namespace.DatePipe }, { type: i0__namespace.Injector }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxGlobalCacheService }, { type: i5__namespace$1.RxJsonParserService }, { type: i3__namespace$1.RxModalService }, { type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceService }, { type: i5__namespace$1.RxStringService }, { type: i3__namespace.TranslateService }]; } });

    var ManageContentPackagesComponent = /** @class */ (function (_super) {
        __extends(ManageContentPackagesComponent, _super);
        function ManageContentPackagesComponent(activeModalRef, axBundleDeploymentService, datePipe, injector, rxBundleCacheService, rxDefinitionNameService, rxGlobalCacheService, rxJsonParserService, rxModalService, rxRecordInstanceDataPageService, rxRecordInstanceService, rxStringService, translateService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.axBundleDeploymentService = axBundleDeploymentService;
            _this.datePipe = datePipe;
            _this.injector = injector;
            _this.rxBundleCacheService = rxBundleCacheService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxJsonParserService = rxJsonParserService;
            _this.rxModalService = rxModalService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxStringService = rxStringService;
            _this.translateService = translateService;
            _this.busyConfig = {
                busy: null,
                sticky: true,
                message: _this.translateService.instant('com.bmc.arsys.rx.client.common.loading-data'),
                loaderType: i1.LoaderType.LINE
            };
            _this.viewType = [true, false];
            _this.packageCreationDateControl = new i4.FormControl([]);
            _this.packageNameControl = new i4.FormControl('');
            _this.createdByControl = new i4.FormControl('');
            _this.viewTypeControl = new i4.FormControl(_this.viewType);
            _this.buttonGroupConfig = [
                {
                    name: 'Definitions',
                    value: _this.translateService.instant('com.bmc.arsys.rx.client.common.definitions.label')
                },
                {
                    name: 'Data',
                    value: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.title')
                }
            ];
            _this.gridColumns = [
                {
                    field: 'bundleName',
                    header: ''
                }
            ];
            _this.gridData = [];
            _this.expandedRowColumns = {
                definitions: [
                    {
                        field: 'type',
                        header: _this.translateService.instant('com.bmc.arsys.rx.client.common.definition-type.label')
                    },
                    { field: 'name', header: _this.translateService.instant('com.bmc.arsys.rx.client.common.name.label') }
                ],
                data: [
                    {
                        field: 'dataSource',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-source.label')
                    },
                    {
                        field: 'dataFilter',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.data-filter.label')
                    },
                    {
                        field: 'ignoreRuleExecution',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.ignore-rules.label')
                    },
                    {
                        field: 'duplicateDataActionType',
                        header: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.duplicates.label')
                    }
                ]
            };
            _this.expandedRowKeys = {};
            _this.packagesList$ = _this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: AX_BUNDLE_PACKAGING.packageRegistry.recordDefinitionName,
                    propertySelection: __spreadArray([
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.createdBy,
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,
                        i1$5.RX_RECORD_DEFINITION.coreFieldIds.id
                    ], __read(lodash.values(AX_BUNDLE_PACKAGING.packageRegistry.fieldIds))),
                    queryExpression: [
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.name + "'=\"" + _this.rxBundleCacheService.bundleId + "\"",
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.type + "'=" + AX_BUNDLE_PACKAGING.packageTypes.content,
                        "'" + AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.bundlePackageDescriptor + "'!=$NULL$"
                    ].join(' AND '),
                    sortBy: -i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate
                }
            })
                .pipe(operators.map(function (recordInstanceDataPage) { return recordInstanceDataPage.data; }));
            _this.packageCreationDateTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.manage-content-packages.package-creation-date.tooltip')
            };
            _this.packagesList = [];
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.optionFormatter = _this.optionFormatter.bind(_this);
            return _this;
        }
        ManageContentPackagesComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.busyConfig.busy = this.packagesList$.pipe(operators.take(1)).subscribe(function (packagesList) {
                if (packagesList.length) {
                    _this.packageCreationDateControl.setValue([packagesList[0]]);
                }
                _this.packagesList = packagesList;
            });
            this.packageCreationDateControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                var selectedPackage = lodash.first(value);
                if (selectedPackage) {
                    _this.selectedPackageContent = _this.rxJsonParserService.tryParseJson(selectedPackage[AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.bundlePackageDescriptor]);
                    _this.createdByControl.setValue(selectedPackage[i1$5.RX_RECORD_DEFINITION.coreFieldIds.createdBy]);
                    _this.packageNameControl.setValue(_this.selectedPackageContent.customPackageName);
                }
                else {
                    _this.selectedPackageContent = {};
                }
                _this.updateGridData();
            });
            this.viewTypeControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (buttonGroup) {
                _this.viewType = buttonGroup;
                _this.updateGridData();
            });
        };
        ManageContentPackagesComponent.prototype.updateGridData = function () {
            var _this = this;
            var _a, _b;
            if (this.viewType[0] && ((_a = this.selectedPackageContent) === null || _a === void 0 ? void 0 : _a.definitionsToDeployByType)) {
                this.gridData = lodash.reduce(this.selectedPackageContent.definitionsToDeployByType, function (result, definitionsByType, definitionType) {
                    var displayType = _this.rxStringService.prettify(definitionType);
                    definitionsByType.forEach(function (definitionName) {
                        var definition = {
                            type: displayType,
                            bundle: _this.rxDefinitionNameService.getBundleId(definitionName),
                            name: _this.rxDefinitionNameService.getDisplayName(definitionName)
                        };
                        var bundleGroup = lodash.find(result, { groupValue: definition.bundle });
                        if (bundleGroup) {
                            bundleGroup.subTableItems.push(definition);
                        }
                        else {
                            bundleGroup = {
                                bundleName: definition.bundle,
                                groupValue: definition.bundle,
                                groupField: 'bundleName',
                                subTableItems: [definition]
                            };
                            _this.rxGlobalCacheService
                                .getBundleFriendlyName(_this.rxDefinitionNameService.getBundleId(definitionName))
                                .pipe(operators.take(1))
                                .subscribe(function (bundleFriendlyName) {
                                bundleGroup.bundleName = bundleFriendlyName;
                                _this.expandedRowKeys[bundleFriendlyName] = true;
                            });
                            result.push(bundleGroup);
                        }
                    });
                    return result;
                }, []);
            }
            else if (this.viewType[1] && ((_b = this.selectedPackageContent) === null || _b === void 0 ? void 0 : _b.dataImportOptionsByRecordDefinitionName)) {
                this.gridData = lodash.reduce(this.selectedPackageContent.dataImportOptionsByRecordDefinitionName, function (result, data, definitionName) {
                    var bundle = _this.rxDefinitionNameService.getBundleId(definitionName);
                    data.dataSource = _this.rxDefinitionNameService.getDisplayName(definitionName);
                    var bundleGroup = lodash.find(result, { groupValue: bundle });
                    if (bundleGroup) {
                        bundleGroup.subTableItems.push(data);
                    }
                    else {
                        bundleGroup = {
                            bundleName: bundle,
                            groupValue: bundle,
                            groupField: 'bundleName',
                            subTableItems: [data]
                        };
                        _this.rxGlobalCacheService
                            .getBundleFriendlyName(_this.rxDefinitionNameService.getBundleId(definitionName))
                            .pipe(operators.take(1))
                            .subscribe(function (bundleFriendlyName) {
                            bundleGroup.bundleName = bundleFriendlyName;
                            _this.expandedRowKeys[bundleFriendlyName] = true;
                        });
                        result.push(bundleGroup);
                    }
                    return result;
                }, []);
            }
        };
        ManageContentPackagesComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        ManageContentPackagesComponent.prototype.optionFormatter = function (entry) {
            return this.datePipe.transform(entry[i1$5.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate], 'medium');
        };
        ManageContentPackagesComponent.prototype.downloadPackage = function () {
            this.axBundleDeploymentService
                .download(lodash.first(this.packageCreationDateControl.value)[AX_BUNDLE_PACKAGING.packageRegistry.fieldIds.name], lodash.first(this.packageCreationDateControl.value)[i1$5.RX_RECORD_DEFINITION.coreFieldIds.id])
                .subscribe(function (data) {
                i5$1.RxFileService.saveFile(data);
            });
        };
        ManageContentPackagesComponent.prototype.deletePackage = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.manage-content-packages.delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    _this.busyConfig.busy = _this.rxRecordInstanceService
                        .delete(AX_BUNDLE_PACKAGING.packageRegistry.recordDefinitionName, lodash.first(_this.packageCreationDateControl.value)[i1$5.RX_RECORD_DEFINITION.coreFieldIds.id])
                        .pipe(operators.switchMapTo(_this.packagesList$), operators.take(1))
                        .subscribe(function (packagesList) {
                        _this.packagesList = packagesList;
                        _this.gridData = [];
                        _this.packageCreationDateControl.setValue([]);
                        _this.packageNameControl.setValue('');
                        _this.createdByControl.setValue('');
                    });
                }
            });
        };
        ManageContentPackagesComponent.prototype.close = function () {
            this.activeModalRef.close();
        };
        return ManageContentPackagesComponent;
    }(i3$1.RxModalClass));
    /** @nocollapse */ ManageContentPackagesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: AxBundleDeploymentService }, { token: i8__namespace.DatePipe }, { token: i0__namespace.Injector }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxGlobalCacheService }, { token: i5__namespace$1.RxJsonParserService }, { token: i3__namespace$1.RxModalService }, { token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceService }, { token: i5__namespace$1.RxStringService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ManageContentPackagesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ManageContentPackagesComponent, selector: "ax-manage-content-packages", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.innovation-studio.manage-content-packages.label' | translate }}\n  </h5>\n\n  <button\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.close.label' | translate\"\n    (click)=\"close()\"\n    class=\"close dp-close\"\n    rx-id=\"x-button\"\n    type=\"button\"\n  ></button>\n</div>\n\n<div class=\"modal-body d-flex flex-column\">\n  <div [ngBusy]=\"busyConfig\" class=\"container-fluid mb-3 pr-0\">\n    <div class=\"row flex-nowrap\">\n      <div class=\"row col-12 pr-0\">\n        <div class=\"col pl-0\">\n          <adapt-rx-select\n            [options]=\"packagesList\"\n            [optionFormatter]=\"optionFormatter\"\n            [popupMaxHeight]=\"560\"\n            [formControl]=\"packageCreationDateControl\"\n            [label]=\"\n              'com.bmc.arsys.rx.innovation-studio.manage-content-packages.package-creation-date.label' | translate\n            \"\n            [tooltip]=\"packageCreationDateTooltip\"\n            appendToBody=\"true\"\n            rx-id=\"package-creation-date-select\"\n          >\n          </adapt-rx-select>\n        </div>\n        <div class=\"col\">\n          <adapt-rx-textfield\n            [disabledStyleForReadonlyState]=\"true\"\n            [label]=\"'com.bmc.arsys.rx.innovation-studio.packaging.package-name.label' | translate\"\n            [readonly]=\"true\"\n            [formControl]=\"packageNameControl\"\n            name=\"packageName\"\n            rx-id=\"package-name-field\"\n          ></adapt-rx-textfield>\n        </div>\n        <div class=\"col\">\n          <adapt-rx-textfield\n            [disabledStyleForReadonlyState]=\"true\"\n            [label]=\"'com.bmc.arsys.rx.innovation-studio.manage-content-packages.created-by.label' | translate\"\n            [readonly]=\"true\"\n            [formControl]=\"createdByControl\"\n            name=\"createdBy\"\n            rx-id=\"created-by-field\"\n          ></adapt-rx-textfield>\n        </div>\n        <div class=\"col pr-0\">\n          <adapt-rx-control-label label=\"{{ 'com.bmc.arsys.rx.client.common.action-view.label' | translate }}\">\n          </adapt-rx-control-label>\n\n          <adapt-button-group\n            [config]=\"buttonGroupConfig\"\n            [multiselectable]=\"false\"\n            [uncheckable]=\"false\"\n            [formControl]=\"viewTypeControl\"\n          ></adapt-button-group>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"adapt-table-toolbar adapt-table-toolbar_bordered font-weight-bold px-5 pt-2\">\n    {{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}/{{\n      'com.bmc.arsys.rx.client.common.library.label' | translate\n    }}\n  </div>\n\n  <adapt-table\n    [bordered]=\"true\"\n    [columns]=\"gridColumns\"\n    [sortable]=\"true\"\n    [value]=\"gridData\"\n    [dataKey]=\"'bundleName'\"\n    [expandedRowTemplate]=\"expandedRowTemplate\"\n    [expandedRowKeys]=\"expandedRowKeys\"\n    [scrollable]=\"true\"\n    scrollHeight=\"flex\"\n  ></adapt-table>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"download-button\"\n    [disabled]=\"!packageCreationDateControl.value?.length\"\n    (click)=\"downloadPackage()\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.download.title' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    rx-id=\"delete-button\"\n    [disabled]=\"!packageCreationDateControl.value?.length\"\n    (click)=\"deletePackage()\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.manage-content-packages.delete-package.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n\n<ng-template #expandedRowTemplate let-dataItem=\"dataItem\" let-rowIndex=\"rowIndex\">\n  <div>\n    <adapt-table\n      [columns]=\"viewTypeControl.value[0] ? expandedRowColumns.definitions : expandedRowColumns.data\"\n      [value]=\"dataItem.subTableItems\"\n      [sortable]=\"true\"\n      [sortMode]=\"'multiple'\"\n    ></adapt-table>\n  </div>\n</ng-template>\n", styles: [":host{display:flex;flex-direction:column;height:100%}adapt-table::ng-deep .ui-table-thead{display:none}adapt-table::ng-deep adapt-table .ui-table-thead{display:table-header-group}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptButtonGroupComponent, selector: "adapt-button-group", inputs: ["config", "size", "groupType", "isVertical", "multiselectable", "uncheckable", "useCheckboxStyle"], outputs: ["modelArrayChanged"], exportAs: ["adaptBtnGroup"] }, { type: i9__namespace.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace.AdaptBusyDirective, selector: "[adapt-busy], [ngBusy]", inputs: ["ngBusy", "adaptRadarDisableEventSending", "busyPromise", "determinate"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-manage-content-packages',
                        templateUrl: './manage-content-packages.component.html',
                        styleUrls: ['manage-content-packages.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: AxBundleDeploymentService }, { type: i8__namespace.DatePipe }, { type: i0__namespace.Injector }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxGlobalCacheService }, { type: i5__namespace$1.RxJsonParserService }, { type: i3__namespace$1.RxModalService }, { type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceService }, { type: i5__namespace$1.RxStringService }, { type: i3__namespace.TranslateService }]; } });

    var BundleDetails = /** @class */ (function () {
        function BundleDetails(bundleDescriptor, injector) {
            this.bundleDescriptor = bundleDescriptor;
            this.injector = injector;
            var rxOverlayService = injector.get(i2.RxOverlayService);
            var rxCurrentUserService = injector.get(i2.RxCurrentUserService);
            var rxBundleService = injector.get(i2.RxBundleService);
            this.friendlyName = bundleDescriptor.friendlyName;
            this.description = bundleDescriptor.description;
            this.version = bundleDescriptor.displayVersion || bundleDescriptor.version;
            this.developerId = bundleDescriptor.developerId;
            this.developerName = bundleDescriptor.developerName;
            this.id = bundleDescriptor.id;
            this.hasCustomEntryPoint = bundleDescriptor.hasCustomEntryPoint;
            this.containsJavaScript = bundleDescriptor.containsJavaScript;
            var overlayContext = rxOverlayService.getCurrentOverlayContext();
            this.isBundleFromCurrentOverlayGroup =
                overlayContext &&
                    bundleDescriptor.overlayGroupId === overlayContext.overlayGroupId &&
                    bundleDescriptor.customizationPerspective ===
                        i2.RX_OVERLAY.bundleCustomizationOperationTypes.createdInThisOverlayGroup;
            this.type = bundleDescriptor.isApplication ? i2.RX_BUNDLE.bundleTypes.application : i2.RX_BUNDLE.bundleTypes.library;
            this.isFoundationBundle = bundleDescriptor.id === i2.RX_APPLICATION.platformBundleIds.foundation;
            this.isActionMenuVisible =
                this.isFoundationBundle || this.isBundleFromCurrentOverlayGroup || !bundleDescriptor.platformBundle;
            this.isBusinessAnalyst = rxCurrentUserService.isBusinessAnalyst();
            this.isApplication = bundleDescriptor.isApplication;
        }
        return BundleDetails;
    }());

    var localizedStringsDataPageQuery = 'com.bmc.arsys.rx.application.localization.datapage.LocalizedStringsDataPageQuery';
    var AxLocalizedStringsDataPageQuery = /** @class */ (function (_super) {
        __extends(AxLocalizedStringsDataPageQuery, _super);
        function AxLocalizedStringsDataPageQuery(injector) {
            var _this = _super.call(this, injector, localizedStringsDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return AxLocalizedStringsDataPageQuery;
    }(i2.DataPage));
    /** @nocollapse */ AxLocalizedStringsDataPageQuery.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLocalizedStringsDataPageQuery, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxLocalizedStringsDataPageQuery.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLocalizedStringsDataPageQuery, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLocalizedStringsDataPageQuery, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var BundleDetailsComponent = /** @class */ (function () {
        function BundleDetailsComponent(activatedRoute, componentFactoryResolver, rxAngularApplicationService, rxBundleCacheService, rxBundleService, rxWizardService, injector, axBundleDeploymentService, rxModalService, translateService, adaptModalService, router, axLocalizedStringsDataPageQuery, ngZone, rxLocalizedStringsLoaderService, rxNotificationService, rxGlobalCacheService, rxCreatePackageStatusDataPageService, rxOverlayService, renderer, rxSessionExpirationService) {
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxAngularApplicationService = rxAngularApplicationService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxBundleService = rxBundleService;
            this.rxWizardService = rxWizardService;
            this.injector = injector;
            this.axBundleDeploymentService = axBundleDeploymentService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.adaptModalService = adaptModalService;
            this.router = router;
            this.axLocalizedStringsDataPageQuery = axLocalizedStringsDataPageQuery;
            this.ngZone = ngZone;
            this.rxLocalizedStringsLoaderService = rxLocalizedStringsLoaderService;
            this.rxNotificationService = rxNotificationService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxCreatePackageStatusDataPageService = rxCreatePackageStatusDataPageService;
            this.rxOverlayService = rxOverlayService;
            this.renderer = renderer;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.loadData$ = new rxjs.BehaviorSubject(true);
            this.bundleTypes = i2.RX_BUNDLE.bundleTypes;
            this.bundleDescriptor$ = rxjs.combineLatest([this.activatedRoute.params.pipe(operators.pluck('bundleId')), this.loadData$]).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 1), bundleId = _b[0];
                _this.rxBundleCacheService.bundleId = bundleId;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), bundleId = _b[0];
                return _this.rxGlobalCacheService.getBundleDescriptor(bundleId);
            }), operators.shareReplay(1));
            this.bundleDetails$ = this.bundleDescriptor$.pipe(operators.map(function (bundleDescriptor) { return new BundleDetails(bundleDescriptor, _this.injector); }), operators.shareReplay(1));
            this.applicationLink$ = this.bundleDetails$.pipe(operators.switchMap(function (bundleDetails) { return _this.rxAngularApplicationService.isAngularJsApplication(bundleDetails.id); }), operators.withLatestFrom(this.bundleDetails$), operators.map(function (_a) {
                var _b = __read(_a, 2), isAngularJsApplication = _b[0], bundleDetails = _b[1];
                if (bundleDetails.hasCustomEntryPoint) {
                    return "/" + bundleDetails.id + "/index.html";
                }
                else if (isAngularJsApplication) {
                    return "/innovationsuite/index.html#/" + bundleDetails.id;
                }
                else {
                    return "/helix/index.html#/" + bundleDetails.id;
                }
            }), operators.shareReplay(1));
            this.shellDesignerLink$ = this.bundleDetails$.pipe(operators.map(function (bundleDetails) { return "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/shell/" + bundleDetails.id; }));
        }
        BundleDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.bundleDescriptor$.pipe(operators.take(1)).subscribe(function (bundleDescriptor) {
                if (!_this.rxOverlayService.areNewDefinitionsAllowedSync(bundleDescriptor)) {
                    _this.rxNotificationService.addWarningMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-details.read-only-definitions.warning'));
                }
            });
        };
        BundleDetailsComponent.prototype.createContentPackage = function () {
            var _this = this;
            rxjs.combineLatest([
                this.rxBundleService.get(this.rxBundleCacheService.bundleId),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), bundleDescriptor = _b[0], bundleDescriptors = _b[1];
                var options = {
                    title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-content-package.label'),
                    allowFinish: true,
                    finishButtonLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.close.label'),
                    notificationMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.create-content-package.notification'),
                    steps: [
                        {
                            id: 'selectDefinitions',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectBundleContentDefinitionsWizardStepComponent),
                            options: {
                                displayName: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.content-package.label'),
                                gridConfig: {
                                    defaultDuplicateDataActionType: 'THROW_ERROR',
                                    enableRowSelection: i5.RowSelectionMode.Multiple
                                }
                            }
                        },
                        {
                            id: 'addData',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(AddBundleContentDataWizardStepComponent),
                            options: {
                                countTitle: 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.create-content.count',
                                descriptionTitle: 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.create-content.description',
                                showGlobalFilterExpressionEditor: true,
                                gridConfig: {
                                    defaultDuplicateDataActionType: AX_BUNDLE_DETAILS.duplicateDataActions.ignore.value,
                                    columns: [
                                        'dataSource',
                                        'name',
                                        'aliasName',
                                        'dataFilter',
                                        'dataFilterExpression',
                                        'ignoreRuleExecution',
                                        'duplicateDataActionType'
                                    ]
                                }
                            }
                        },
                        {
                            id: 'orderData',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.order-data.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OrderDataWizardStepComponent)
                        },
                        {
                            id: 'selectApprovalConfigurations',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-approval-configurations.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectApprovalConfigurationsWizardStepComponent),
                            options: {
                                gridConfig: {
                                    enableRowSelection: i5.RowSelectionMode.Multiple
                                }
                            }
                        },
                        {
                            id: 'selectDefinitionsToDelete',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectDefinitionsToDeleteWizardStepComponent),
                            options: {
                                gridConfig: {
                                    enableRowSelection: i5.RowSelectionMode.Multiple
                                },
                                isInstallOperation: false,
                                isContentPackageOperation: true
                            }
                        },
                        {
                            id: 'options',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OptionsWizardStepComponent),
                            options: {
                                fields: {
                                    customPackageName: {},
                                    friendlyName: {
                                        disabled: true
                                    },
                                    version: {
                                        disabled: true,
                                        hideTooltip: true
                                    },
                                    description: {
                                        disabled: true
                                    },
                                    dependentBundlesList: {
                                        hidden: true
                                    }
                                }
                            }
                        },
                        {
                            id: 'package',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(PackageWizardStepComponent),
                            options: {
                                isInstallOperation: false,
                                isContentPackageOperation: true
                            }
                        },
                        {
                            id: 'download',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.download.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(DownloadWizardStepComponent)
                        }
                    ]
                };
                var bundleDetails = lodash.assign(lodash.pick(bundleDescriptor, [
                    'id',
                    'name',
                    'isApplication',
                    'friendlyName',
                    'version',
                    'groupId',
                    'description',
                    'dependentBundles'
                ]), {
                    type: bundleDescriptor.isApplication ? i2.RX_BUNDLE.bundleTypes.application : i2.RX_BUNDLE.bundleTypes.library
                });
                var bundleFriendlyNamesById = bundleDescriptors.reduce(function (result, bundleDescriptor) {
                    result[bundleDescriptor.id] = bundleDescriptor.friendlyName;
                    return result;
                }, {});
                var dependentBundlesList = lodash.chain(bundleDescriptors)
                    .reject({ id: i2.RX_APPLICATION.standardlib })
                    .reject({ id: bundleDescriptor.id })
                    .reject({ id: i2.RX_APPLICATION.innovationStudioBundleId })
                    .value();
                lodash.forEach(dependentBundlesList, function (bundle) {
                    bundle.isDependedOn = Boolean(lodash.find(bundleDetails.dependentBundles, { id: bundle.id }));
                });
                var context = {
                    bundleDescriptors: bundleDescriptors,
                    bundleDetails: bundleDetails,
                    bundleFriendlyNamesById: bundleFriendlyNamesById,
                    dependentBundlesList: dependentBundlesList,
                    deploymentPackageDescriptor: {
                        customPackageName: bundleDescriptor.id,
                        packageType: PackageTypes.Content,
                        id: bundleDescriptor.id,
                        name: bundleDescriptor.name,
                        friendlyName: bundleDescriptor.friendlyName,
                        version: bundleDescriptor.version,
                        description: bundleDescriptor.description,
                        groupId: bundleDescriptor.groupId,
                        developerName: bundleDescriptor.developerName,
                        isApplication: bundleDescriptor.isApplication,
                        containsJavaScript: bundleDescriptor.containsJavaScript,
                        overlayGroupId: '',
                        hasCustomEntryPoint: true,
                        userRequestedDependentBundles: null,
                        isConfigurationDataIncluded: false,
                        duplicateDataActionTypeForConfigurationData: AX_BUNDLE_DETAILS.duplicateDataActions.ignore.value,
                        definitionsToDeployByType: {},
                        definitionsToDeleteByType: {},
                        dataImportOptionsByRecordDefinitionName: {},
                        approvalConfigurationQueryOptions: []
                    }
                };
                _this.rxWizardService
                    .open({
                    context: context,
                    options: options
                })
                    .then(lodash.noop);
            });
        };
        BundleDetailsComponent.prototype.openContentPackageImportLogsModal = function () {
            this.rxModalService
                .openModal({
                content: ContentPackageImportLogsComponent,
                size: 'rx-lg'
            })
                .catch(lodash.noop);
        };
        BundleDetailsComponent.prototype.createInstallPackage = function () {
            var _this = this;
            rxjs.combineLatest([
                this.rxBundleService.get(this.rxBundleCacheService.bundleId),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), bundleDetails = _b[0], bundleDescriptors = _b[1];
                var wizardOptions = {
                    title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-install-package.label'),
                    allowFinish: true,
                    finishButtonLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.close.label'),
                    notificationMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.install-package.notification'),
                    steps: [
                        {
                            id: 'selectDefinitions',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectDefinitionsWizardStepComponent),
                            options: {
                                displayName: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.install-package.label')
                            }
                        },
                        {
                            id: 'orderData',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.order-data.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OrderDataWizardStepComponent),
                            options: {
                                importRecordDefinitionFromCache: true
                            }
                        },
                        {
                            id: 'options',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OptionsWizardStepComponent)
                        },
                        {
                            id: 'package',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(PackageWizardStepComponent),
                            options: {
                                isInstallOperation: true,
                                isContentPackageOperation: false
                            }
                        },
                        {
                            id: 'download',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.download.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(DownloadWizardStepComponent)
                        }
                    ]
                };
                var createInstallPackageContext = {
                    bundleDetails: bundleDetails,
                    bundleDescriptors: bundleDescriptors,
                    deploymentPackageDescriptor: {
                        packageType: PackageTypes.Install,
                        id: bundleDetails.id,
                        name: bundleDetails.friendlyName,
                        friendlyName: bundleDetails.friendlyName,
                        version: bundleDetails.version,
                        description: bundleDetails.description,
                        developerName: bundleDetails.developerName,
                        isApplication: bundleDetails.isApplication,
                        containsJavaScript: bundleDetails.containsJavaScript,
                        overlayGroupId: '',
                        hasCustomEntryPoint: true,
                        userRequestedDependentBundles: null,
                        isConfigurationDataIncluded: false,
                        duplicateDataActionTypeForConfigurationData: AX_BUNDLE_DETAILS.duplicateDataActions.ignore.value,
                        definitionsToDeployByType: {},
                        definitionsToDeleteByType: {},
                        dataImportOptionsByRecordDefinitionName: {}
                    }
                };
                _this.rxWizardService
                    .open({
                    context: createInstallPackageContext,
                    options: wizardOptions
                })
                    .then(lodash.noop);
            });
        };
        BundleDetailsComponent.prototype.createUpdatePackage = function () {
            var _this = this;
            rxjs.combineLatest([
                this.rxBundleService.get(this.rxBundleCacheService.bundleId),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), bundleDetails = _b[0], bundleDescriptors = _b[1];
                var wizardOptions = {
                    title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-update-package.label'),
                    allowFinish: true,
                    finishButtonLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.close.label'),
                    notificationMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.create-update-package.notification'),
                    steps: [
                        {
                            id: 'selectDefinitions',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectDefinitionsWizardStepComponent),
                            options: {
                                displayName: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.update-package.label'),
                                subtitleMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions.message'),
                                gridConfig: {
                                    enableRowSelection: i5.RowSelectionMode.Multiple
                                }
                            }
                        },
                        {
                            id: 'addData',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(AddDataWizardStepComponent),
                            options: {
                                countTitle: 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.update-package.count',
                                descriptionTitle: 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.add-data.update-package.description',
                                showGlobalFilterExpressionEditor: false,
                                gridConfig: {
                                    columns: ['dataSource', 'name'],
                                    defaultDuplicateDataActionType: AX_BUNDLE_DETAILS.duplicateDataActions.ignore.value
                                }
                            }
                        },
                        {
                            id: 'orderData',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.order-data.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OrderDataWizardStepComponent)
                        },
                        {
                            id: 'selectDefinitionsToDelete',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.select-definitions-to-delete.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(SelectDefinitionsToDeleteWizardStepComponent),
                            options: {
                                gridConfig: {
                                    enableRowSelection: i5.RowSelectionMode.Multiple
                                }
                            }
                        },
                        {
                            id: 'options',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(OptionsWizardStepComponent),
                            options: {
                                fields: {
                                    bundleUpdateFromVersion: {},
                                    version: {
                                        label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.update-to-version.label'),
                                        tooltip: 'com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.options.update-to-version.tooltip'
                                    }
                                }
                            }
                        },
                        {
                            id: 'package',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.package.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(PackageWizardStepComponent),
                            options: {
                                isInstallOperation: false,
                                isContentPackageOperation: false
                            }
                        },
                        {
                            id: 'download',
                            name: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.bundle-action-wizard.download.label'),
                            componentFactory: _this.componentFactoryResolver.resolveComponentFactory(DownloadWizardStepComponent)
                        }
                    ]
                };
                var createUpdatePackageContext = {
                    bundleDetails: bundleDetails,
                    bundleDescriptors: bundleDescriptors,
                    deploymentPackageDescriptor: {
                        bundleUpdateFromVersion: bundleDetails.version,
                        containsJavaScript: bundleDetails.containsJavaScript,
                        dataImportOptionsByRecordDefinitionName: {},
                        definitionsToDeleteByType: {},
                        definitionsToDeployByType: {},
                        description: bundleDetails.description,
                        developerName: bundleDetails.developerName,
                        duplicateDataActionTypeForConfigurationData: AX_BUNDLE_DETAILS.duplicateDataActions.ignore.value,
                        friendlyName: bundleDetails.friendlyName,
                        hasCustomEntryPoint: true,
                        id: bundleDetails.id,
                        isApplication: bundleDetails.isApplication,
                        isConfigurationDataIncluded: false,
                        name: bundleDetails.friendlyName,
                        overlayGroupId: '',
                        packageType: PackageTypes.Update,
                        version: bundleDetails.version,
                        userRequestedDependentBundles: null
                    }
                };
                _this.rxWizardService
                    .open({
                    context: createUpdatePackageContext,
                    options: wizardOptions
                })
                    .then(lodash.noop);
            });
        };
        BundleDetailsComponent.prototype.downloadTranslations = function (bundleId) {
            var _this = this;
            this.rxSessionExpirationService
                .keepSessionAlive()
                .pipe(operators.switchMap(function () { return _this.axLocalizedStringsDataPageQuery.get({
                params: {
                    startIndex: 0,
                    pageSize: 0,
                    includeStringsFromUserOverlayOnly: false,
                    locale: 'default',
                    bundleId: bundleId
                }
            }); }))
                .subscribe(function (response) {
                var file = new Blob([JSON.stringify(response.data[0], null, '\t')], { type: 'application/json' });
                _this.ngZone.runOutsideAngular(function () {
                    fileSaver.saveAs(file, 'localizable-strings.json');
                });
            });
        };
        BundleDetailsComponent.prototype.manageContentPackages = function () {
            this.rxModalService
                .openModal({
                content: ManageContentPackagesComponent,
                size: 'rx-lg'
            })
                .catch(lodash.noop);
        };
        BundleDetailsComponent.prototype.openConfirmationModal = function (confirmationMessage) {
            return this.rxModalService.confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i3$1.RX_MODAL.modalStyles.warning,
                message: confirmationMessage
            });
        };
        BundleDetailsComponent.prototype.onClickFileInput = function (event) {
            var element = event.target;
            element.value = '';
        };
        BundleDetailsComponent.prototype.reinstallBundle = function (bundle) {
            var _this = this;
            var confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.confirmation.message', {
                bundleName: bundle.friendlyName
            });
            this.openConfirmationModal(confirmationMessage).then(function (result) {
                if (result) {
                    _this.renderer.setAttribute(_this.fileInput.nativeElement, 'accept', '.zip');
                    var unlisten_1 = _this.renderer.listen(_this.fileInput.nativeElement, 'change', function (event) {
                        var element = event.target;
                        var file = lodash.toArray(element.files)[0];
                        if (file) {
                            var bundleDeploymentProgressConfig_1 = {
                                title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.label'),
                                status: i3$1.ProgressIndicatorStatus.InProgress,
                                header: bundle.friendlyName,
                                subHeader: file === null || file === void 0 ? void 0 : file.name.replace(/\.zip$/i, ''),
                                inProgressMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.in-progress.label'),
                                finishedMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.success.message', { bundleType: bundle.type }),
                                operationStatusMessage: '',
                                failedMessage: ''
                            };
                            _this.openModal(i3$1.ProgressIndicatorModalComponent, bundleDeploymentProgressConfig_1)
                                .then(function () {
                                if (bundleDeploymentProgressConfig_1.status === i3$1.ProgressIndicatorStatus.Finished) {
                                    window.location.reload();
                                }
                                else {
                                    _this.loadData$.next(true);
                                }
                            })
                                .catch(lodash.noop);
                            _this.axBundleDeploymentService
                                .reinstall(bundle.id, file)
                                .pipe(operators.catchError(function (error) {
                                bundleDeploymentProgressConfig_1.status = i3$1.ProgressIndicatorStatus.Failed;
                                bundleDeploymentProgressConfig_1.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.failure.message', { bundleType: bundle.type });
                                return rxjs.throwError(error);
                            }))
                                .subscribe(function (response) {
                                _this.axBundleDeploymentService
                                    .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/')))
                                    .subscribe(function (deploymentStatus) {
                                    if (deploymentStatus.isFinished) {
                                        bundleDeploymentProgressConfig_1.status = i3$1.ProgressIndicatorStatus.Finished;
                                        bundleDeploymentProgressConfig_1.operationStatusMessage =
                                            _this.axBundleDeploymentService.buildStatusMessage(deploymentStatus.deploymentParsedStatus);
                                    }
                                    else if (deploymentStatus.errorMessage) {
                                        bundleDeploymentProgressConfig_1.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.reinstall-bundle.failure.message', { bundleType: bundle.type });
                                        bundleDeploymentProgressConfig_1.status = i3$1.ProgressIndicatorStatus.Failed;
                                        bundleDeploymentProgressConfig_1.operationStatusMessage = deploymentStatus.errorMessage;
                                    }
                                });
                            });
                            element.value = '';
                        }
                        unlisten_1();
                    });
                    _this.renderer.selectRootElement(_this.fileInput.nativeElement, true).click();
                }
            });
        };
        BundleDetailsComponent.prototype.uninstallBundle = function (bundle) {
            var _this = this;
            var confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.confirmation.message', {
                bundleName: bundle.friendlyName
            });
            this.openConfirmationModal(confirmationMessage).then(function (result) {
                if (result) {
                    var bundleDeploymentProgressConfig_2 = {
                        title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.label'),
                        status: i3$1.ProgressIndicatorStatus.InProgress,
                        header: bundle.friendlyName,
                        subHeader: bundle.type + " (" + bundle.id + ", " + bundle.developerId + ")",
                        inProgressMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.uninstalling.label'),
                        finishedMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.success.message', { bundleType: bundle.type }),
                        operationStatusMessage: '',
                        failedMessage: ''
                    };
                    _this.openModal(i3$1.ProgressIndicatorModalComponent, bundleDeploymentProgressConfig_2)
                        .then(function () { return _this.router
                        .navigate([i2.RX_APPLICATION.innovationStudioBundleId, 'workspace'])
                        .then(function () { return window.location.reload(); }); })
                        .catch(lodash.noop);
                    _this.axBundleDeploymentService
                        .uninstall(bundle.id)
                        .pipe(operators.catchError(function (error) {
                        bundleDeploymentProgressConfig_2.status = i3$1.ProgressIndicatorStatus.Failed;
                        bundleDeploymentProgressConfig_2.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.failure.message');
                        return rxjs.throwError(error);
                    }))
                        .subscribe(function (response) {
                        _this.axBundleDeploymentService
                            .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/').slice(0, -1)))
                            .subscribe(function (deploymentStatus) {
                            if (deploymentStatus.isFinished) {
                                bundleDeploymentProgressConfig_2.status = i3$1.ProgressIndicatorStatus.Finished;
                            }
                            else if (deploymentStatus.errorMessage) {
                                bundleDeploymentProgressConfig_2.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.uninstall-bundle.failure.message');
                                bundleDeploymentProgressConfig_2.status = i3$1.ProgressIndicatorStatus.Failed;
                                bundleDeploymentProgressConfig_2.operationStatusMessage = deploymentStatus.errorMessage;
                            }
                        });
                    });
                }
            });
        };
        BundleDetailsComponent.prototype.updateBundle = function (bundle) {
            var _this = this;
            var confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.confirmation.message', {
                bundleName: bundle.friendlyName
            });
            this.openConfirmationModal(confirmationMessage).then(function (result) {
                if (result) {
                    _this.renderer.setAttribute(_this.fileInput.nativeElement, 'accept', '.zip');
                    var unlisten_2 = _this.renderer.listen(_this.fileInput.nativeElement, 'change', function (event) {
                        var element = event.target;
                        var file = lodash.toArray(element.files)[0];
                        if (file) {
                            var bundleDeploymentProgressConfig_3 = {
                                title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.label'),
                                status: i3$1.ProgressIndicatorStatus.InProgress,
                                header: bundle.friendlyName,
                                subHeader: file === null || file === void 0 ? void 0 : file.name.replace(/\.zip$/i, ''),
                                inProgressMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.in-progress.label'),
                                finishedMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.success.message', { bundleType: bundle.type }),
                                operationStatusMessage: '',
                                failedMessage: ''
                            };
                            _this.openModal(i3$1.ProgressIndicatorModalComponent, bundleDeploymentProgressConfig_3)
                                .then(function () {
                                if (bundleDeploymentProgressConfig_3.status === i3$1.ProgressIndicatorStatus.Finished) {
                                    window.location.reload();
                                }
                                else {
                                    _this.loadData$.next(true);
                                }
                            })
                                .catch(lodash.noop);
                            _this.axBundleDeploymentService
                                .update(file)
                                .pipe(operators.catchError(function (error) {
                                bundleDeploymentProgressConfig_3.status = i3$1.ProgressIndicatorStatus.Failed;
                                bundleDeploymentProgressConfig_3.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.failure.message', { bundleType: bundle.type });
                                return rxjs.throwError(error);
                            }))
                                .subscribe(function (response) {
                                _this.axBundleDeploymentService
                                    .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/')))
                                    .subscribe(function (deploymentStatus) {
                                    if (deploymentStatus.isFinished) {
                                        bundleDeploymentProgressConfig_3.status = i3$1.ProgressIndicatorStatus.Finished;
                                    }
                                    else if (deploymentStatus.errorMessage) {
                                        bundleDeploymentProgressConfig_3.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.update-bundle.failure.message', { bundleType: bundle.type });
                                        bundleDeploymentProgressConfig_3.status = i3$1.ProgressIndicatorStatus.Failed;
                                        bundleDeploymentProgressConfig_3.operationStatusMessage = deploymentStatus.errorMessage;
                                    }
                                });
                            });
                            element.value = '';
                        }
                        unlisten_2();
                    });
                    _this.renderer.selectRootElement(_this.fileInput.nativeElement, true).click();
                }
            });
        };
        BundleDetailsComponent.prototype.uploadTranslations = function (bundle) {
            var _this = this;
            var unlisten = this.renderer.listen(this.fileInput.nativeElement, 'change', function (event) {
                var element = event.target;
                var file = lodash.toArray(element.files)[0];
                var fileReader = new FileReader();
                var translationsToUpload$ = [];
                var successfulLocales = [];
                var failedLocales = [];
                if (file) {
                    fileReader.onloadend = function () {
                        var content = lodash.attempt(JSON.parse.bind(null, fileReader.result));
                        Object.keys(content).map(function (locale) {
                            var translations = content[locale];
                            if (!lodash.isObject(translations)) {
                                _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.upload-translations.locale-error.message'));
                            }
                            translationsToUpload$.push(_this.rxLocalizedStringsLoaderService.uploadTranslation(bundle.id, locale, translations).pipe(operators.tap(function () {
                                successfulLocales.push(locale);
                            }), operators.catchError(function () {
                                failedLocales.push(locale);
                                return rxjs.of({});
                            })));
                        });
                        rxjs.forkJoin(translationsToUpload$).subscribe(function () {
                            if (failedLocales.length > 0) {
                                _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.upload-translations.partial-failure.message', {
                                    locales: failedLocales.join(' ')
                                }));
                            }
                            if (successfulLocales.length === 0) {
                                _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.upload-translations.failure.message'));
                            }
                            if (failedLocales.length === 0) {
                                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.upload-translations.success.message'));
                            }
                        });
                    };
                    fileReader.onerror = function () {
                        _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.upload-translations.file-load-failure.message'));
                    };
                    fileReader.readAsText(file);
                    element.value = '';
                }
                unlisten();
            });
            this.renderer.setAttribute(this.fileInput.nativeElement, 'accept', '.json');
            this.renderer.selectRootElement(this.fileInput.nativeElement, true).click();
        };
        BundleDetailsComponent.prototype.importDefinitionsAndData = function (bundle) {
            var _this = this;
            var confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.confirmation.message');
            this.openConfirmationModal(confirmationMessage).then(function (result) {
                if (result) {
                    _this.renderer.setAttribute(_this.fileInput.nativeElement, 'accept', '.zip');
                    var unlisten_3 = _this.renderer.listen(_this.fileInput.nativeElement, 'change', function (event) {
                        var element = event.target;
                        var file = lodash.toArray(element.files)[0];
                        if (file) {
                            var bundleDeploymentProgressConfig_4 = {
                                title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.label'),
                                status: i3$1.ProgressIndicatorStatus.InProgress,
                                header: bundle.friendlyName,
                                subHeader: file.name.replace(/\.zip$/i, ''),
                                inProgressMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.in-progress.label'),
                                finishedMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.success.message'),
                                operationStatusMessage: '',
                                failedMessage: ''
                            };
                            _this.openModal(i3$1.ProgressIndicatorModalComponent, bundleDeploymentProgressConfig_4)
                                .then(function () {
                                if (bundleDeploymentProgressConfig_4.status === i3$1.ProgressIndicatorStatus.Finished) {
                                    window.location.reload();
                                }
                                else {
                                    _this.loadData$.next(true);
                                }
                            })
                                .catch(lodash.noop);
                            _this.axBundleDeploymentService
                                .import(bundle.id, file)
                                .pipe(operators.catchError(function (error) {
                                bundleDeploymentProgressConfig_4.status = i3$1.ProgressIndicatorStatus.Failed;
                                bundleDeploymentProgressConfig_4.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.failure.message');
                                return rxjs.throwError(error);
                            }))
                                .subscribe(function (response) {
                                _this.axBundleDeploymentService
                                    .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/')))
                                    .subscribe(function (deploymentStatus) {
                                    if (deploymentStatus.isFinished) {
                                        bundleDeploymentProgressConfig_4.status = i3$1.ProgressIndicatorStatus.Finished;
                                    }
                                    else if (deploymentStatus.errorMessage) {
                                        bundleDeploymentProgressConfig_4.failedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.import-definition-and-data.failure.message');
                                        bundleDeploymentProgressConfig_4.status = i3$1.ProgressIndicatorStatus.Failed;
                                        bundleDeploymentProgressConfig_4.operationStatusMessage = deploymentStatus.errorMessage;
                                    }
                                });
                            });
                            element.value = '';
                        }
                        unlisten_3();
                    });
                    _this.renderer.selectRootElement(_this.fileInput.nativeElement, true).click();
                }
            });
        };
        BundleDetailsComponent.prototype.openModal = function (content, data) {
            return this.adaptModalService.open({
                content: content,
                data: data,
                size: 'sm',
                isDialog: true,
                hideBackdrop: false
            });
        };
        BundleDetailsComponent.prototype.downloadContentPackage = function (bundleDetails) {
            var _this = this;
            this.rxCreatePackageStatusDataPageService
                .get({
                params: {
                    startIndex: 0,
                    pageSize: -1,
                    bundleId: bundleDetails.id
                }
            })
                .subscribe(function (response) {
                var contentPackage = lodash.find(response === null || response === void 0 ? void 0 : response.data, { packageType: 'CONTENT' });
                if ((contentPackage === null || contentPackage === void 0 ? void 0 : contentPackage.packageExportStatus) === AX_BUNDLE_DETAILS.packageExportStatuses.packageCreated) {
                    _this.axBundleDeploymentService.download(bundleDetails.id, contentPackage.packageId).subscribe(function (data) {
                        i5$1.RxFileService.saveFile(data);
                    });
                }
                else if ((contentPackage === null || contentPackage === void 0 ? void 0 : contentPackage.packageExportStatus) === AX_BUNDLE_DETAILS.packageExportStatuses.pendingPackageCreate) {
                    _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.download-content-package.package-creation-in-progress.error.message'));
                }
                else if ((contentPackage === null || contentPackage === void 0 ? void 0 : contentPackage.packageExportStatus) === AX_BUNDLE_DETAILS.packageExportStatuses.error) {
                    var contentPackageConfig = {
                        title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.download-content-package.label'),
                        status: i3$1.ProgressIndicatorStatus.Failed,
                        finishedMessage: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.download-content-package.package-creation-failed.error.message'),
                        operationStatusMessage: _this.axBundleDeploymentService.buildStatusMessage(contentPackage.deploymentParsedStatus)
                    };
                    _this.openModal(i3$1.ProgressIndicatorModalComponent, contentPackageConfig);
                }
                else {
                    _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.download-content-package.package-not-available.error.message'));
                }
            });
        };
        BundleDetailsComponent.prototype.publishChatEnabledService = function (bundleId) {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                'chatbot',
                bundleId,
                'publish-chat-enabled-service'
            ]);
        };
        return BundleDetailsComponent;
    }());
    /** @nocollapse */ BundleDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i0__namespace.ComponentFactoryResolver }, { token: i2__namespace.RxAngularApplicationService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxBundleService }, { token: i2__namespace$1.RxWizardService }, { token: i0__namespace.Injector }, { token: AxBundleDeploymentService }, { token: i3__namespace$1.RxModalService }, { token: i3__namespace.TranslateService }, { token: i1__namespace.AdaptModalService }, { token: i1__namespace$1.Router }, { token: AxLocalizedStringsDataPageQuery }, { token: i0__namespace.NgZone }, { token: i2__namespace.RxLocalizedStringsLoaderService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxGlobalCacheService }, { token: RxCreatePackageStatusDataPageService }, { token: i2__namespace.RxOverlayService }, { token: i0__namespace.Renderer2 }, { token: i2__namespace.RxSessionExpirationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BundleDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BundleDetailsComponent, selector: "ax-bundle-details", viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"d-flex flex-column py-3\" *ngIf=\"bundleDetails$ | async as bundleDetails\">\n  <div class=\"d-flex flex-row-reverse align-items-center justify-content-between flex-fill pl-4\">\n    <div class=\"d-flex flex-row\">\n      <a\n        adapt-button\n        *ngIf=\"bundleDetails.isApplication\"\n        btn-type=\"tertiary\"\n        size=\"large\"\n        rx-id=\"navigation-button\"\n        class=\"d-icon-left-app_eye\"\n        [routerLink]=\"shellDesignerLink$ | async\"\n      >\n        {{ 'com.bmc.arsys.rx.innovation-studio.bundle-details.navigation.label' | translate }}\n      </a>\n\n      <div class=\"dropdown\" *ngIf=\"bundleDetails.isActionMenuVisible\" adaptDropdown placement=\"bottom-right\">\n        <button\n          adapt-button\n          adaptDropdownToggle\n          btn-type=\"tertiary\"\n          size=\"large\"\n          rx-id=\"actions-buttons\"\n          class=\"d-icon-left-action_button_cursor\"\n        >\n          {{ 'com.bmc.arsys.rx.innovation-studio.actions.label' | translate }}\n        </button>\n\n        <div class=\"dropdown-menu\" adaptDropdownMenu *ngIf=\"!bundleDetails.isBusinessAnalyst\">\n          <div class=\"dropdown-header\">\n            {{ 'com.bmc.arsys.rx.innovation-studio.packaging.label' | translate }}\n          </div>\n\n          <ng-container *ngIf=\"bundleDetails.isBundleFromCurrentOverlayGroup\">\n            <button rx-id=\"create-install-package-menu-item\" class=\"dropdown-item\" (click)=\"createInstallPackage()\">\n              {{ 'com.bmc.arsys.rx.innovation-studio.create-install-package.label' | translate }}\n            </button>\n            <button rx-id=\"create-update-package-menu-item\" class=\"dropdown-item\" (click)=\"createUpdatePackage()\">\n              {{ 'com.bmc.arsys.rx.innovation-studio.create-update-package.label' | translate }}\n            </button>\n          </ng-container>\n\n          <ng-container *ngIf=\"!bundleDetails.isBundleFromCurrentOverlayGroup\">\n            <button rx-id=\"create-content-package-menu-item\" class=\"dropdown-item\" (click)=\"createContentPackage()\">\n              {{ 'com.bmc.arsys.rx.innovation-studio.create-content-package.label' | translate }}\n            </button>\n            <button\n              rx-id=\"download-content-package-menu-item\"\n              class=\"dropdown-item\"\n              (click)=\"downloadContentPackage(bundleDetails)\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.download-content-package.label' | translate }}\n            </button>\n            <button rx-id=\"manage-content-packages-menu-item\" class=\"dropdown-item\" (click)=\"manageContentPackages()\">\n              {{ 'com.bmc.arsys.rx.innovation-studio.manage-content-packages.label' | translate }}\n            </button>\n            <button\n              rx-id=\"content-package-import-logs-menu-item\"\n              class=\"dropdown-item\"\n              (click)=\"openContentPackageImportLogsModal()\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.content-package-import-logs.label' | translate }}\n            </button>\n          </ng-container>\n\n          <div class=\"dropdown-header\">\n            {{ 'com.bmc.arsys.rx.innovation-studio.deployment.label' | translate }}\n          </div>\n\n          <button\n            rx-id=\"import-definitions-and-data-menu-item\"\n            class=\"dropdown-item\"\n            *ngIf=\"!bundleDetails.isBundleFromCurrentOverlayGroup\"\n            (click)=\"importDefinitionsAndData(bundleDetails)\"\n          >\n            {{ 'com.bmc.arsys.rx.innovation-studio.import-definition-and-data.label' | translate }}\n          </button>\n\n          <ng-container *ngIf=\"bundleDetails.isBundleFromCurrentOverlayGroup\">\n            <button rx-id=\"update-menu-item\" class=\"dropdown-item\" (click)=\"updateBundle(bundleDetails)\">\n              {{\n                'com.bmc.arsys.rx.innovation-studio.update-bundle.menu.label'\n                  | translate: { bundleType: bundleDetails.type.toLowerCase() }\n              }}\n            </button>\n            <button rx-id=\"reinstall-menu-item\" class=\"dropdown-item\" (click)=\"reinstallBundle(bundleDetails)\">\n              {{\n                'com.bmc.arsys.rx.innovation-studio.reinstall-bundle.menu.label'\n                  | translate: { bundleType: bundleDetails.type.toLowerCase() }\n              }}\n            </button>\n            <button rx-id=\"uninstall-menu-item\" class=\"dropdown-item\" (click)=\"uninstallBundle(bundleDetails)\">\n              {{\n                'com.bmc.arsys.rx.innovation-studio.uninstall-bundle.menu.label'\n                  | translate: { bundleType: bundleDetails.type.toLowerCase() }\n              }}\n            </button>\n          </ng-container>\n\n          <ng-container *ngIf=\"!bundleDetails.isFoundationBundle\">\n            <div class=\"dropdown-header\">\n              {{ 'com.bmc.arsys.rx.innovation-studio.translations.menu.label' | translate }}\n            </div>\n            <button\n              rx-id=\"download-translations-menu-item\"\n              class=\"dropdown-item\"\n              (click)=\"downloadTranslations(bundleDetails.id)\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.download-translations.menu.label' | translate }}\n            </button>\n            <button\n              rx-id=\"upload-translations-menu-item\"\n              class=\"dropdown-item\"\n              (click)=\"uploadTranslations(bundleDetails)\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.upload-translations.menu.label' | translate }}\n            </button>\n\n            <div class=\"dropdown-header\">{{ 'com.bmc.arsys.rx.innovation-studio.chat.label' | translate }}</div>\n            <button\n              rx-id=\"enable-chat-for-service\"\n              class=\"dropdown-item\"\n              (click)=\"publishChatEnabledService(bundleDetails.id)\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.publish-chat-enabled-service.label' | translate }}\n            </button>\n          </ng-container>\n        </div>\n\n        <div class=\"dropdown-menu\" adaptDropdownMenu *ngIf=\"bundleDetails.isBusinessAnalyst\">\n          <div class=\"dropdown-header\">{{ 'com.bmc.arsys.rx.innovation-studio.chat.label' | translate }}</div>\n          <button\n            rx-id=\"enable-chat-for-service\"\n            class=\"dropdown-item\"\n            (click)=\"publishChatEnabledService(bundleDetails.id)\"\n          >\n            {{ 'com.bmc.arsys.rx.innovation-studio.publish-chat-enabled-service.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <a\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"large\"\n        class=\"d-icon-left-pop_up\"\n        rx-id=\"visit-deployed-application-button\"\n        *ngIf=\"bundleDetails.isApplication\"\n        target=\"_blank\"\n        href=\"{{ applicationLink$ | async }}\"\n      >\n        {{ 'com.bmc.arsys.rx.innovation-studio.visit-deployed-application.label' | translate }}\n      </a>\n    </div>\n    <div class=\"d-flex flex-row align-items-center rx-ellipsis\">\n      <adapt-icon name=\"app\" class=\"mr-3 app-icon\"></adapt-icon>\n\n      <h1 class=\"m-0 py-2 rx-ellipsis\" title=\"{{ bundleDetails.friendlyName }}\">{{ bundleDetails.friendlyName }}</h1>\n\n      <adapt-icon\n        name=\"info_circle_o_adapt\"\n        class=\"ml-2 mt-1\"\n        placement=\"bottom\"\n        [autoClose]=\"'outside'\"\n        [adaptPopover]=\"popover\"\n      >\n      </adapt-icon>\n    </div>\n  </div>\n\n  <span class=\"text-tertiary ml-6 pl-3 rx-ellipsis\">{{ bundleDetails.description }}</span>\n\n  <input\n    #fileInput\n    type=\"file\"\n    accept=\".zip\"\n    hidden\n    [multiple]=\"false\"\n    (click)=\"onClickFileInput($event)\"\n    rx-id=\"package-file-input\"\n  />\n\n  <ng-template #popover>\n    <div class=\"bundle-info-popover\">\n      <strong>{{\n        (bundleDetails.type === bundleTypes.application\n          ? 'com.bmc.arsys.rx.client.common.application-id.label'\n          : 'com.bmc.arsys.rx.client.common.library-id.label'\n        ) | translate\n      }}</strong>\n      <div class=\"mb-2\">{{ bundleDetails.id }}</div>\n\n      <strong>{{ 'com.bmc.arsys.rx.innovation-studio.bundle-details.version.label' | translate }}</strong>\n      <div class=\"mb-2\">{{ bundleDetails.version }}</div>\n\n      <strong>{{ 'com.bmc.arsys.rx.innovation-studio.bundle-details.developer.label' | translate }}</strong>\n      <div>{{ bundleDetails.developerName }}</div>\n    </div>\n  </ng-template>\n</div>\n\n<router-outlet></router-outlet>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;height:100%}.app-icon{font-size:2rem}.bundle-info-popover{font-size:.75rem}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1__namespace$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-bundle-details',
                        templateUrl: './bundle-details.component.html',
                        styleUrls: ['./bundle-details.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i0__namespace.ComponentFactoryResolver }, { type: i2__namespace.RxAngularApplicationService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxBundleService }, { type: i2__namespace$1.RxWizardService }, { type: i0__namespace.Injector }, { type: AxBundleDeploymentService }, { type: i3__namespace$1.RxModalService }, { type: i3__namespace.TranslateService }, { type: i1__namespace.AdaptModalService }, { type: i1__namespace$1.Router }, { type: AxLocalizedStringsDataPageQuery }, { type: i0__namespace.NgZone }, { type: i2__namespace.RxLocalizedStringsLoaderService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxGlobalCacheService }, { type: RxCreatePackageStatusDataPageService }, { type: i2__namespace.RxOverlayService }, { type: i0__namespace.Renderer2 }, { type: i2__namespace.RxSessionExpirationService }]; }, propDecorators: { fileInput: [{
                    type: i0.ViewChild,
                    args: ['fileInput', { static: false }]
                }] } });

    var RxRecordEditorBuilder = /** @class */ (function () {
        function RxRecordEditorBuilder(rxGuidService, rxDefaultRecordEditorInputType, rxFieldDefinitionService, translateService) {
            this.rxGuidService = rxGuidService;
            this.rxDefaultRecordEditorInputType = rxDefaultRecordEditorInputType;
            this.rxFieldDefinitionService = rxFieldDefinitionService;
            this.translateService = translateService;
        }
        RxRecordEditorBuilder.prototype.getViewDefinition = function (recordDefinition, recordInstanceId, isEditable) {
            if (isEditable === void 0) { isEditable = true; }
            var closeButtonId = this.rxGuidService.generate();
            var containerId = this.rxGuidService.generate();
            var recordEditorId = this.rxGuidService.generate();
            var saveButtonId = this.rxGuidService.generate();
            var viewDefinitionId = this.rxGuidService.generate();
            var recordEditorMode = recordInstanceId ? i5.RecordEditorMode.Edit : i5.RecordEditorMode.Create;
            var recordEditorComponentDefinitions = this.getComponentDefinitions(recordDefinition, recordEditorMode, recordEditorId);
            return {
                guid: viewDefinitionId,
                layout: JSON.stringify({
                    outlets: [
                        {
                            name: 'DEFAULT',
                            columns: [
                                {
                                    children: [recordEditorId]
                                }
                            ]
                        },
                        {
                            name: 'footer',
                            height: 60,
                            columns: [
                                {
                                    children: [containerId]
                                }
                            ]
                        }
                    ]
                }),
                outputParams: [
                    {
                        name: 'recordInstance',
                        source: '${view.components.' + recordEditorId + '.recordInstance}'
                    }
                ],
                inputParams: [],
                componentDefinitions: [
                    {
                        resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                        guid: recordEditorId,
                        type: i2$2.RxViewComponentType.RecordEditor,
                        propertiesByName: {
                            recordInstanceId: "\"" + recordInstanceId + "\"",
                            mode: recordEditorMode,
                            recordDefinitionName: recordDefinition.name,
                            styles: 'p-0 border-0',
                            allowEdit: isEditable ? '1' : '0'
                        },
                        componentDefinitions: recordEditorComponentDefinitions,
                        layout: JSON.stringify({
                            outlets: [
                                {
                                    name: 'DEFAULT',
                                    columns: [
                                        {
                                            children: recordEditorComponentDefinitions.map(function (componentDefinition) { return componentDefinition.guid; })
                                        }
                                    ]
                                }
                            ]
                        })
                    },
                    {
                        resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                        guid: containerId,
                        type: i2$2.RxViewComponentType.ButtonBar,
                        propertiesByName: {
                            alignment: 'right',
                            hidden: '0'
                        },
                        layout: JSON.stringify({
                            outlets: [
                                {
                                    name: 'DEFAULT',
                                    columns: [
                                        {
                                            children: [saveButtonId, closeButtonId]
                                        }
                                    ]
                                }
                            ]
                        }),
                        componentDefinitions: [
                            {
                                resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                                guid: closeButtonId,
                                type: i2$2.RxViewComponentType.ActionButton,
                                propertiesByName: {
                                    label: isEditable
                                        ? this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label')
                                        : this.translateService.instant('com.bmc.arsys.rx.client.common.close.label'),
                                    style: 'secondary',
                                    size: 'default'
                                },
                                componentDefinitions: [
                                    {
                                        resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.viewComponent,
                                        guid: this.rxGuidService.generate(),
                                        type: i2$2.RxViewComponentType.Action,
                                        propertiesByName: {
                                            viewApi: '${view.api}',
                                            name: 'rxCloseViewAction',
                                            actAsCancel: 'true'
                                        }
                                    }
                                ]
                            },
                            {
                                resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                                guid: saveButtonId,
                                type: i2$2.RxViewComponentType.ActionButton,
                                propertiesByName: {
                                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),
                                    hidden: isEditable ? '0' : '1',
                                    style: 'primary',
                                    disabled: 'NOT${view.components.' + recordEditorId + '.canSave}',
                                    size: 'default'
                                },
                                componentDefinitions: [
                                    {
                                        resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.viewComponent,
                                        guid: this.rxGuidService.generate(),
                                        type: i2$2.RxViewComponentType.Action,
                                        propertiesByName: {
                                            viewApi: '${view.api}',
                                            name: 'rxSaveAction',
                                            targetApi: '${view.api}',
                                            closeAfterSave: true
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };
        };
        RxRecordEditorBuilder.prototype.getComponentDefinitions = function (recordDefinition, recordEditorMode, recordEditorId) {
            var fieldGroupFilters = [i1$5.RX_RECORD_DEFINITION.fieldOptions.required, i1$5.RX_RECORD_DEFINITION.fieldOptions.optional];
            if (recordEditorMode === i5.RecordEditorMode.Edit) {
                fieldGroupFilters.push(i1$5.RX_RECORD_DEFINITION.fieldOptions.system);
            }
            var componentDefinitions = [];
            for (var i = 0; i < fieldGroupFilters.length; i++) {
                var recordFieldsComponentDefinitions = this.getFieldComponentDefinitions(recordDefinition, recordEditorMode, recordEditorId, fieldGroupFilters[i]);
                componentDefinitions.push({
                    resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                    guid: this.rxGuidService.generate(),
                    type: i2$2.RxViewComponentType.Container,
                    propertiesByName: {
                        rowWrap: i5.ContainerRowWrap.Sm,
                        columnCount: '2',
                        styles: i + 1 !== fieldGroupFilters.length ? 'border-bottom pb-4' : ''
                    },
                    componentDefinitions: recordFieldsComponentDefinitions,
                    layout: JSON.stringify({
                        outlets: [
                            {
                                name: 'DEFAULT',
                                columns: [
                                    {
                                        children: recordFieldsComponentDefinitions
                                            .filter(function (componentDefinition, index) { return index % 2 === 0; })
                                            .map(function (componentDefinition) { return componentDefinition.guid; }),
                                        span: '6'
                                    },
                                    {
                                        children: recordFieldsComponentDefinitions
                                            .filter(function (componentDefinition, index) { return index % 2 === 1; })
                                            .map(function (componentDefinition) { return componentDefinition.guid; }),
                                        span: '6'
                                    }
                                ]
                            }
                        ]
                    })
                });
            }
            return componentDefinitions;
        };
        RxRecordEditorBuilder.prototype.getFieldComponentDefinitions = function (recordDefinition, recordEditorMode, recordEditorId, fieldGroupFilter) {
            var _this = this;
            return lodash.reject(recordDefinition.fieldDefinitions, function (fieldDefinition) { return recordEditorMode === i5.RecordEditorMode.Create && _this.rxFieldDefinitionService.isSystemField(fieldDefinition); })
                .filter(function (fieldDefinition) { return fieldDefinition.fieldOption === fieldGroupFilter; })
                .map(function (fieldDefinition) {
                var componentDefinition = {
                    resourceType: i2$2.RX_VIEW_DEFINITION.resourceTypes.viewComponent,
                    guid: _this.rxGuidService.generate(),
                    type: _this.rxDefaultRecordEditorInputType.getFieldTypeByFieldDefinition(fieldDefinition),
                    propertiesByName: {
                        fieldId: fieldDefinition.id,
                        recordDefinition: '${view.components.' + recordEditorId + '.recordDefinition}',
                        recordInstance: '${view.components.' + recordEditorId + '.recordInstance}',
                        label: fieldDefinition.name
                    }
                };
                if (fieldDefinition.resourceType === i1$5.RX_RECORD_DEFINITION.dataTypes.character.resourceType &&
                    fieldDefinition.namedListDefinition) {
                    componentDefinition.propertiesByName.enableMultiSelection = 'true';
                }
                return componentDefinition;
            })
                .sort(function (a, b) { return a.propertiesByName.label.localeCompare(b.propertiesByName.label); });
        };
        return RxRecordEditorBuilder;
    }());
    /** @nocollapse */ RxRecordEditorBuilder.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorBuilder, deps: [{ token: i5__namespace$1.RxGuidService }, { token: i5__namespace.RxDefaultRecordEditorInputType }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxRecordEditorBuilder.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorBuilder, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorBuilder, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i5__namespace$1.RxGuidService }, { type: i5__namespace.RxDefaultRecordEditorInputType }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: i3__namespace.TranslateService }]; } });

    var RecordDataEditorComponent = /** @class */ (function () {
        function RecordDataEditorComponent(rxRecordEditorBuilder, route, router, translateService, rxDefinitionNameService, rxGlobalCacheService, rxPageTitleService, rxRecordDefinitionCacheService, rxBundleCacheService, viewComponentEventManager, rxOpenViewActionService, rxEditRecordsViewActionService) {
            var _this = this;
            this.rxRecordEditorBuilder = rxRecordEditorBuilder;
            this.route = route;
            this.router = router;
            this.translateService = translateService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxPageTitleService = rxPageTitleService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxBundleCacheService = rxBundleCacheService;
            this.viewComponentEventManager = viewComponentEventManager;
            this.rxOpenViewActionService = rxOpenViewActionService;
            this.rxEditRecordsViewActionService = rxEditRecordsViewActionService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.recordDefinitionName$ = this.route.params.pipe(operators.map(function (params) { return params.definitionName; }), operators.shareReplay(1));
            this.recordDefinition$ = this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName); }));
            this.dataEditorGridConfig$ = this.recordDefinition$.pipe(operators.tap(function (recordDefinition) {
                var _a;
                _this.recordDefinition = recordDefinition;
                _this.isCustomRecordDefinition =
                    ((_a = _this.recordDefinition) === null || _a === void 0 ? void 0 : _a.type) === i1$5.RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom;
            }), operators.map(function (recordDefinition) {
                var coreFieldIds = lodash.map(i1$5.RX_RECORD_DEFINITION.coreFields, 'id');
                var gridColumns = lodash.map(recordDefinition.fieldDefinitions, function (fieldDefinition) { return ({
                    title: fieldDefinition.name,
                    fieldId: String(fieldDefinition.id),
                    visible: fieldDefinition.id !== i1$5.RX_RECORD_DEFINITION.coreFieldIds.notifierListening &&
                        lodash.includes(coreFieldIds, fieldDefinition.id),
                    cellTemplate: fieldDefinition.id === i1$5.RX_RECORD_DEFINITION.coreFieldIds.displayId && !_this.isCustomRecordDefinition
                        ? _this.displayIdColumnTemplate
                        : undefined
                }); });
                return {
                    recordDefinitionName: recordDefinition.name,
                    columns: gridColumns,
                    getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                    guid: 'rx-data-editor-' + recordDefinition.guid,
                    styles: 'flex-fill',
                    enableRowSelection: _this.isCustomRecordDefinition ? null : i5.RowSelectionMode.Multiple,
                    actionButtons: [
                        {
                            label: _this.isRecordEditable(_this.recordDefinition)
                                ? _this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label')
                                : _this.translateService.instant('com.bmc.arsys.rx.client.common.action-view.label'),
                            icon: _this.isRecordEditable(_this.recordDefinition) ? 'pencil' : 'eye',
                            style: 'tertiary',
                            actions: [
                                {
                                    name: function () {
                                        if (_this.dataEditorGrid.api.getSelectedRowCount() === 1) {
                                            _this.editRecord(_this.dataEditorGrid.api.getSelectedRows()[0][i1$5.RX_RECORD_DEFINITION.coreFieldIds.id]);
                                        }
                                        else {
                                            _this.rxEditRecordsViewActionService
                                                .execute({
                                                recordDefinitionName: recordDefinition.name,
                                                records: _this.dataEditorGrid.api
                                            })
                                                .subscribe();
                                        }
                                    }
                                }
                            ],
                            disabled: function () { return _this.isCustomRecordDefinition ||
                                (!_this.isRecordEditable(_this.recordDefinition) && _this.dataEditorGrid.api.getSelectedRowCount() !== 1); }
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                            icon: 'trash',
                            style: 'tertiary',
                            actions: [
                                {
                                    name: 'rxDeleteRecordsAction',
                                    params: {
                                        recordDefinitionName: recordDefinition.name,
                                        records: _this.dataEditorGrid.api
                                    }
                                }
                            ],
                            disabled: _this.isCustomRecordDefinition
                        }
                    ],
                    rowActionButtons: []
                };
            }), operators.shareReplay(1));
            this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);
        }
        RecordDataEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.recordDefinitionName$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (recordDefinitionName) {
                _this.rxBundleCacheService.bundleId = _this.rxDefinitionNameService.getBundleId(recordDefinitionName);
                _this.setPageTitle(recordDefinitionName);
            });
        };
        RecordDataEditorComponent.prototype.close = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                this.rxBundleCacheService.bundleId,
                'record-definitions'
            ]);
        };
        RecordDataEditorComponent.prototype.createRecord = function () {
            var _this = this;
            this.viewComponentEventManager
                .executeActions([
                {
                    guid: 'rx-data-editor-new-' + this.recordDefinition.guid,
                    name: 'rxOpenViewAction',
                    parameters: {
                        viewDefinitionName: this.rxRecordEditorBuilder.getViewDefinition(this.recordDefinition, null, this.isRecordEditable(this.recordDefinition)),
                        viewParams: null,
                        presentation: {
                            title: this.translateService.instant('com.bmc.arsys.rx.client.data-editor.new-record.title'),
                            modalSize: i7$1.RX_OPEN_VIEW.modalSize.Large,
                            type: i7$1.RX_OPEN_VIEW.type.DockedRightModal
                        }
                    }
                }
            ], function () { return _this.dataEditorGrid.api.refresh().subscribe(); })
                .catch(rxjs.noop);
        };
        RecordDataEditorComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        RecordDataEditorComponent.prototype.editRecord = function (recordInstanceId) {
            var _this = this;
            this.viewComponentEventManager
                .executeActions([
                {
                    guid: 'rx-data-editor-edit-' + recordInstanceId,
                    name: 'rxOpenViewAction',
                    parameters: {
                        viewDefinitionName: this.rxRecordEditorBuilder.getViewDefinition(this.recordDefinition, recordInstanceId, this.isRecordEditable(this.recordDefinition)),
                        viewParams: null,
                        presentation: {
                            title: this.isRecordEditable(this.recordDefinition)
                                ? this.translateService.instant('com.bmc.arsys.rx.client.data-editor.edit-record.title')
                                : this.translateService.instant('com.bmc.arsys.rx.client.data-editor.view-record.title'),
                            modalSize: i7$1.RX_OPEN_VIEW.modalSize.Large,
                            type: i7$1.RX_OPEN_VIEW.type.DockedRightModal
                        }
                    }
                }
            ], function () { return _this.dataEditorGrid.api.refresh().subscribe(); })
                .catch(rxjs.noop);
        };
        RecordDataEditorComponent.prototype.isRecordEditable = function (recordDefinition) {
            return !recordDefinition.isAuditRecordDefinition;
        };
        RecordDataEditorComponent.prototype.setPageTitle = function (recordDefinitionName) {
            var _this = this;
            this.rxGlobalCacheService
                .getBundleFriendlyName(this.rxBundleCacheService.bundleId)
                .pipe(operators.take(1))
                .subscribe(function (bundleFriendlyName) {
                _this.rxPageTitleService.set([
                    _this.rxDefinitionNameService.getDisplayName(recordDefinitionName),
                    _this.translateService.instant('com.bmc.arsys.rx.client.data-editor.title'),
                    bundleFriendlyName
                ], _this.rxGlobalCacheService.applicationId);
            });
        };
        return RecordDataEditorComponent;
    }());
    /** @nocollapse */ RecordDataEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorComponent, deps: [{ token: RxRecordEditorBuilder }, { token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace$1.Router }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxPageTitleService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i2__namespace.RxBundleCacheService }, { token: i6__namespace$1.ViewComponentEventManager }, { token: i7__namespace$1.RxOpenViewActionService }, { token: i7__namespace$1.RxEditRecordsViewActionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RecordDataEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordDataEditorComponent, selector: "ax-record-data-editor", viewQueries: [{ propertyName: "dataEditorGrid", first: true, predicate: ["dataEditorGrid"], descendants: true }, { propertyName: "displayIdColumnTemplate", first: true, predicate: ["displayIdColumnTemplate"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"header d-flex align-items-center\">\n  <h5 class=\"ml-3\">\n    {{ 'com.bmc.arsys.rx.client.data-editor.title' | translate }} ({{\n      recordDefinitionName$ | async | rxDefinitionNamePipe\n    }})\n  </h5>\n\n  <div class=\"ml-auto m-2\">\n    <button\n      rx-id=\"close-button\"\n      size=\"small\"\n      adapt-button\n      type=\"button\"\n      rx-id=\"close-button\"\n      (click)=\"close()\"\n      btn-type=\"secondary\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</div>\n<div>\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-left-plus_circle\"\n    rx-id=\"new-button\"\n    [disabled]=\"this.recordDefinition?.isAuditRecordDefinition || isCustomRecordDefinition\"\n    (click)=\"createRecord()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n</div>\n\n<rx-record-grid rx-id=\"data-editor-grid\" #dataEditorGrid [config]=\"dataEditorGridConfig$\"></rx-record-grid>\n\n<ng-template #displayIdColumnTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div class=\"rx-ellipsis\">\n    <a href=\"javascript:void(0)\" (click)=\"editRecord(dataItem['$ID$'])\">\n      {{ dataItem[1] }}\n    </a>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{position:relative;display:flex;flex-direction:column;height:100%;width:100%;overflow:hidden}.header{background:#f0f1f1;border-bottom:1px solid #d6d7d8}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i3__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-record-data-editor',
                        templateUrl: './record-data-editor.component.html',
                        styleUrls: ['./record-data-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxRecordEditorBuilder }, { type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace$1.Router }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxPageTitleService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i2__namespace.RxBundleCacheService }, { type: i6__namespace$1.ViewComponentEventManager }, { type: i7__namespace$1.RxOpenViewActionService }, { type: i7__namespace$1.RxEditRecordsViewActionService }]; }, propDecorators: { dataEditorGrid: [{
                    type: i0.ViewChild,
                    args: ['dataEditorGrid']
                }], displayIdColumnTemplate: [{
                    type: i0.ViewChild,
                    args: ['displayIdColumnTemplate']
                }] } });

    var AX_DESIGNER_FRAME = {
        designerPageTitleKeys: {
            association: 'com.bmc.arsys.rx.client.association-designer.title',
            document: 'com.bmc.arsys.rx.client.document-designer.title',
            chatbot: 'com.bmc.arsys.rx.client.chatbot-designer.title',
            config: 'com.bmc.arsys.rx.client.config-designer.title',
            event: 'com.bmc.arsys.rx.client.event-designer.title',
            'event-statistics': 'com.bmc.arsys.rx.client.event-statistics-designer.title',
            'named-list': 'com.bmc.arsys.rx.client.named-list-designer.title',
            process: 'com.bmc.arsys.rx.client.process-designer.title',
            record: 'com.bmc.arsys.rx.client.record-designer.title',
            rule: 'com.bmc.arsys.rx.client.rule-designer.title',
            view: 'com.bmc.arsys.rx.client.view-designer.title',
            'web-api': 'com.bmc.arsys.rx.client.web-api-designer.title'
        },
        legacyDesignerNames: {
            processPreview: 'process-preview',
            chatWizard: 'chat-wizard',
            recordDataEditor: 'record-data-editor'
        },
        designerModes: {
            new: 'new',
            edit: 'edit'
        }
    };

    var DesignerFrameComponent = /** @class */ (function () {
        function DesignerFrameComponent(router, activatedRoute, rxDefinitionNameService, rxPageTitleService, rxGlobalCacheService, translateService, rxComponentCanDeactivateGuard, rxUtilityModalsService, rxIframeService, rxJsonParserService, rxPreviousStateService, rxGainsightConfiguratorService) {
            var _this = this;
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxPageTitleService = rxPageTitleService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.translateService = translateService;
            this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;
            this.rxUtilityModalsService = rxUtilityModalsService;
            this.rxIframeService = rxIframeService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxPreviousStateService = rxPreviousStateService;
            this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            this.isDefinitionDirty = false;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.designerOptions = lodash.get(this.router.getCurrentNavigation(), 'extras.state.designerOptions');
            this.router.events
                .pipe(operators.filter(function (event) { return event instanceof i1$1.NavigationEnd; }), operators.withLatestFrom(this.activatedRoute.data, function (_, data) { return data; }), operators.startWith(undefined), operators.pairwise(), operators.withLatestFrom(this.activatedRoute.params, this.activatedRoute.queryParams), operators.tap(function (_c) {
                var _d = __read(_c, 2), _e = __read(_d[0], 2), prevData = _e[0], nextData = _e[1], params = _d[1];
                if (((prevData === null || prevData === void 0 ? void 0 : prevData.designerMode) &&
                    nextData.designerMode &&
                    prevData.designerMode !== AX_DESIGNER_FRAME.designerModes.new &&
                    nextData.designerMode !== AX_DESIGNER_FRAME.designerModes.edit) ||
                    (prevData === null || prevData === void 0 ? void 0 : prevData.definitionType) !== nextData.definitionType) {
                    _this.intervalId = setInterval(lodash.noop, 100000);
                    _this.busySubscription = rxjs.NEVER.subscribe();
                }
                _this.currentBundleId =
                    params.bundleId ||
                        _this.rxDefinitionNameService.getBundleId(params.definitionName) ||
                        _this.activatedRoute.parent.snapshot.data.defaultBundleId;
                _this.setPageTitle(_this.currentBundleId, _this.activatedRoute.parent.snapshot.data.definitionType, _this.activatedRoute.snapshot.data.legacyDesignerName, params.definitionName);
            }), operators.map(function (_c) {
                var _d = __read(_c, 3), _ = _d[0], params = _d[1], queryParams = _d[2];
                return _this.buildDesignerUrl(_this.currentBundleId, _this.activatedRoute.parent.snapshot.data.definitionType, _this.activatedRoute.snapshot.data.legacyDesignerName, params, queryParams);
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function (url) {
                _this.rxIframeService.showIframe(url);
                _this.iframeComponentApi = _this.rxIframeService.getIframeApi();
            });
        }
        DesignerFrameComponent.prototype.ngOnInit = function () {
            this.rxComponentCanDeactivateGuard.setPageComponent(this);
            this.rxGainsightConfiguratorService.updateGlobalContext({
                subProductLevel1: {
                    name: 'Design'
                },
                subProductLevel2: {
                    name: lodash.capitalize(this.activatedRoute.snapshot.data.definitionType) + " designer"
                }
            });
        };
        DesignerFrameComponent.prototype.ngOnDestroy = function () {
            this.rxComponentCanDeactivateGuard.setPageComponent(null);
            this.destroyed$.next();
            this.destroyed$.complete();
            this.rxIframeService.hideIframe();
        };
        DesignerFrameComponent.prototype.canDeactivate = function () {
            return !this.isDefinitionDirty;
        };
        DesignerFrameComponent.prototype.confirmDeactivation = function () {
            var _this = this;
            return this.rxUtilityModalsService.confirmUnsavedChanges().then(function (isConfirmed) {
                if (isConfirmed) {
                    _this.isDefinitionDirty = false;
                }
                return isConfirmed;
            });
        };
        DesignerFrameComponent.prototype.onMessage = function (event) {
            var _a, _b;
            var windowMessage = this.rxJsonParserService.tryParseJson(event.data);
            switch (windowMessage === null || windowMessage === void 0 ? void 0 : windowMessage.messageType) {
                case i2.RX_DESIGNER.messageTypes.designerLoaded: {
                    (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
                    clearInterval(this.intervalId);
                    break;
                }
                case i2.RX_DESIGNER.messageTypes.closeDesigner: {
                    if (this.activatedRoute.parent.snapshot.data.definitionType === 'shell' ||
                        this.activatedRoute.snapshot.data.legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.processPreview) {
                        this.rxPreviousStateService.goToPrevState();
                    }
                    else if (this.activatedRoute.snapshot.data.legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.chatWizard) {
                        this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, this.activatedRoute.snapshot.params.bundleId]);
                    }
                    else {
                        this.router.navigate([
                            i2.RX_APPLICATION.innovationStudioBundleId,
                            this.currentBundleId,
                            this.activatedRoute.parent.snapshot.data.definitionType + "-definitions"
                        ]);
                    }
                    break;
                }
                case i2.RX_DESIGNER.messageTypes.afterSave: {
                    if (!windowMessage.payload.isEditMode) {
                        this.router.navigate(['edit', windowMessage.payload.definitionName], {
                            relativeTo: this.activatedRoute.parent
                        });
                    }
                    this.isDefinitionDirty = false;
                    break;
                }
                case i2.RX_DESIGNER.messageTypes.waitingForDesignerOptions: {
                    this.iframeComponentApi.postMessageToFrame({
                        messageType: 'designerOptions',
                        payload: this.designerOptions
                    });
                    break;
                }
                case i2.RX_DESIGNER.messageTypes.designerLoadFailed: {
                    (_b = this.busySubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();
                    clearInterval(this.intervalId);
                    rxjs.from(this.router.navigate([
                        i2.RX_APPLICATION.innovationStudioBundleId,
                        this.currentBundleId,
                        this.activatedRoute.parent.snapshot.data.definitionType + "-definitions"
                    ]))
                        .pipe(operators.switchMap(function () {
                        var err = windowMessage.payload.err;
                        return rxjs.throwError(new i1$2.HttpErrorResponse({
                            error: err.data,
                            headers: new i1$2.HttpHeaders(err.config.headers),
                            status: err.status,
                            statusText: err.statusText,
                            url: err.config.url
                        }));
                    }))
                        .subscribe();
                    break;
                }
                case i2.RX_DESIGNER.messageTypes.definitionStatusChanged: {
                    this.isDefinitionDirty = windowMessage.payload.isDirty;
                    break;
                }
            }
        };
        DesignerFrameComponent.prototype.buildDesignerUrl = function (bundleId, type, legacyDesignerName, params, queryParams) {
            var definitionName = params.definitionName, instanceId = params.instanceId;
            var debugOptions = window['rx'].logger.getCategories();
            var queryString = debugOptions.length ? "?debug=" + debugOptions.join(',') : '';
            var baseInnovationStudioUrl = "/" + i2.RX_APPLICATION.innovationStudioBundleId + "/index.html" + queryString + "#";
            if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.processPreview) {
                return baseInnovationStudioUrl + "/app/bundle/" + bundleId + "/iprocess-instance/view/" + definitionName + "/" + instanceId;
            }
            else if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.chatWizard) {
                return baseInnovationStudioUrl + "/app/bundle/" + bundleId + "/enable-chat-for-service";
            }
            else if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.recordDataEditor) {
                return baseInnovationStudioUrl + "/app/bundle/" + bundleId + "/irecord-data-editor/" + definitionName;
            }
            else if (type === 'shell') {
                return baseInnovationStudioUrl + "/app/bundle/" + bundleId + "/ishell/config";
            }
            else {
                var baseUrl = baseInnovationStudioUrl + "/app/bundle/" + bundleId + "/i" + type + "/" + (definitionName || '');
                if (!lodash.isEmpty(queryParams)) {
                    var queryParamsString = lodash.map(queryParams, function (value, name) { return encodeURIComponent(name) + "=" + encodeURIComponent(value); }).join('&');
                    baseUrl += "?" + queryParamsString;
                }
                return this.designerOptions ? baseUrl + "?waitForDesignerOptions=true" : baseUrl;
            }
        };
        DesignerFrameComponent.prototype.setPageTitle = function (bundleId, type, legacyDesignerName, definitionName) {
            var _this = this;
            this.rxGlobalCacheService
                .getBundleFriendlyName(bundleId)
                .pipe(operators.take(1))
                .subscribe(function (bundleFriendlyName) {
                if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.processPreview) {
                    _this.rxPageTitleService.set([
                        _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.process-preview.title'),
                        bundleFriendlyName
                    ], _this.rxGlobalCacheService.applicationId);
                }
                else if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.recordDataEditor) {
                    _this.rxPageTitleService.set([
                        _this.rxDefinitionNameService.getDisplayName(definitionName),
                        _this.translateService.instant('com.bmc.arsys.rx.client.data-editor.title'),
                        bundleFriendlyName
                    ], _this.rxGlobalCacheService.applicationId);
                }
                else if (legacyDesignerName === AX_DESIGNER_FRAME.legacyDesignerNames.chatWizard) {
                    _this.rxPageTitleService.set([
                        _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.publish-chat-enabled-service.label'),
                        bundleFriendlyName
                    ], i2.RX_APPLICATION.innovationStudioBundleId);
                }
                else if (type === 'shell') {
                    _this.rxPageTitleService.set([i2.RX_APPLICATION.shellDefinitionName, bundleFriendlyName], i2.RX_APPLICATION.innovationStudioBundleId);
                }
                else {
                    _this.rxPageTitleService.set([
                        definitionName
                            ? _this.rxDefinitionNameService.getDisplayName(definitionName)
                            : _this.translateService.instant('com.bmc.arsys.rx.client.create-new.title'),
                        _this.translateService.instant(AX_DESIGNER_FRAME.designerPageTitleKeys[type]),
                        bundleFriendlyName
                    ], _this.rxGlobalCacheService.applicationId);
                }
            });
        };
        return DesignerFrameComponent;
    }());
    /** @nocollapse */ DesignerFrameComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameComponent, deps: [{ token: i1__namespace$1.Router }, { token: i1__namespace$1.ActivatedRoute }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxPageTitleService }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxComponentCanDeactivateGuard }, { token: i3__namespace$1.RxUtilityModalsService }, { token: i2__namespace$1.RxIframeService }, { token: i5__namespace$1.RxJsonParserService }, { token: i2__namespace.RxPreviousStateService }, { token: i2__namespace$1.RxGainsightConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DesignerFrameComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DesignerFrameComponent, selector: "ax-designer-frame", host: { listeners: { "window:message": "onMessage($event)" } }, ngImport: i0__namespace, template: "<rx-busy-indicator [options]=\"{ busy: busySubscription }\"></rx-busy-indicator>\n", styles: [":host{position:relative;display:block;height:100%}\n"], components: [{ type: i3__namespace$1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-designer-frame',
                        templateUrl: './designer-frame.component.html',
                        styleUrls: ['./designer-frame.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i1__namespace$1.ActivatedRoute }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxPageTitleService }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxComponentCanDeactivateGuard }, { type: i3__namespace$1.RxUtilityModalsService }, { type: i2__namespace$1.RxIframeService }, { type: i5__namespace$1.RxJsonParserService }, { type: i2__namespace.RxPreviousStateService }, { type: i2__namespace$1.RxGainsightConfiguratorService }]; }, propDecorators: { onMessage: [{
                    type: i0.HostListener,
                    args: ['window:message', ['$event']]
                }] } });

    var _a;
    var processInstanceGridColumns = {
        status: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.status.label',
            fieldId: 'status',
            visible: false,
            filterable: false,
            searchable: false,
            sortable: true
        },
        contextKey: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.context-key.label',
            fieldId: 'contextKey',
            searchable: false,
            sortable: false
        },
        instanceId: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.process-id.label',
            fieldId: 'instanceId',
            filterable: false,
            searchable: true,
            sortable: true
        },
        processDefinitionName: {
            title: 'com.bmc.arsys.rx.client.common.process-definition.label',
            fieldId: 'processDefinitionName',
            searchable: false,
            filterable: false,
            sortable: true
        },
        owner: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.owner.label',
            fieldId: 'owner',
            searchable: false,
            sortable: true
        },
        startTime: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.start-time.label',
            fieldId: 'startTime',
            searchable: false,
            filterable: false,
            sortable: true
        },
        endTime: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.completed-time.label',
            fieldId: 'endTime',
            searchable: false,
            filterable: false,
            sortable: true
        },
        isStartInstanceError: {
            title: 'com.bmc.arsys.rx.innovation-studio.process-management.grid-column.process-start-error.label',
            fieldId: 'isStartInstanceError',
            searchable: false,
            filterable: false,
            sortable: true
        }
    };
    var fieldDefinitions = {
        status: {
            id: processInstanceGridColumns.status.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
        },
        processDefinitionName: {
            id: processInstanceGridColumns.processDefinitionName.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
        },
        startTime: {
            id: processInstanceGridColumns.startTime.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
        },
        endTime: {
            id: processInstanceGridColumns.endTime.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime
        },
        contextKey: {
            id: processInstanceGridColumns.contextKey.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
        },
        instanceId: {
            id: processInstanceGridColumns.instanceId.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
        },
        owner: {
            id: processInstanceGridColumns.owner.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.character
        },
        isStartInstanceError: {
            id: processInstanceGridColumns.isStartInstanceError.fieldId,
            resourceType: i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean
        }
    };
    var AX_PROCESS_MANAGEMENT = {
        statusTabs: (_a = {},
            _a[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active] = {
                title: 'com.bmc.arsys.rx.innovation-studio.process-management.status.active.label',
                badgeType: 'primary',
                status: AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active,
                guid: 'rx-process-management-grid-active',
                gridColumns: [
                    processInstanceGridColumns.contextKey,
                    processInstanceGridColumns.instanceId,
                    processInstanceGridColumns.processDefinitionName,
                    processInstanceGridColumns.owner,
                    processInstanceGridColumns.startTime,
                    processInstanceGridColumns.status
                ],
                fieldDefinitions: [
                    fieldDefinitions.contextKey,
                    fieldDefinitions.instanceId,
                    fieldDefinitions.processDefinitionName,
                    fieldDefinitions.owner,
                    fieldDefinitions.startTime,
                    fieldDefinitions.status
                ]
            },
            _a[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended] = {
                title: 'com.bmc.arsys.rx.innovation-studio.process-management.status.suspended.label',
                badgeType: 'warning',
                status: AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended,
                guid: 'rx-process-management-grid-suspended',
                gridColumns: [
                    processInstanceGridColumns.contextKey,
                    processInstanceGridColumns.instanceId,
                    processInstanceGridColumns.processDefinitionName,
                    processInstanceGridColumns.owner,
                    processInstanceGridColumns.startTime,
                    processInstanceGridColumns.status
                ],
                fieldDefinitions: [
                    fieldDefinitions.contextKey,
                    fieldDefinitions.instanceId,
                    fieldDefinitions.processDefinitionName,
                    fieldDefinitions.owner,
                    fieldDefinitions.startTime,
                    fieldDefinitions.status
                ]
            },
            _a[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.errored] = {
                title: 'com.bmc.arsys.rx.innovation-studio.process-management.status.errored.label',
                badgeType: 'danger',
                status: AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.errored,
                guid: 'rx-process-management-grid-errored',
                gridColumns: [
                    processInstanceGridColumns.contextKey,
                    processInstanceGridColumns.instanceId,
                    processInstanceGridColumns.processDefinitionName,
                    processInstanceGridColumns.owner,
                    processInstanceGridColumns.startTime,
                    processInstanceGridColumns.isStartInstanceError,
                    processInstanceGridColumns.status
                ],
                fieldDefinitions: [
                    fieldDefinitions.contextKey,
                    fieldDefinitions.instanceId,
                    fieldDefinitions.processDefinitionName,
                    fieldDefinitions.owner,
                    fieldDefinitions.startTime,
                    fieldDefinitions.isStartInstanceError,
                    fieldDefinitions.status
                ]
            },
            _a[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.completed] = {
                title: 'com.bmc.arsys.rx.innovation-studio.process-management.status.completed.label',
                badgeType: 'success',
                status: AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.completed,
                guid: 'rx-process-management-grid-completed',
                gridColumns: [
                    processInstanceGridColumns.contextKey,
                    processInstanceGridColumns.instanceId,
                    processInstanceGridColumns.processDefinitionName,
                    processInstanceGridColumns.owner,
                    processInstanceGridColumns.startTime,
                    processInstanceGridColumns.endTime,
                    processInstanceGridColumns.status
                ],
                fieldDefinitions: [
                    fieldDefinitions.contextKey,
                    fieldDefinitions.instanceId,
                    fieldDefinitions.processDefinitionName,
                    fieldDefinitions.owner,
                    fieldDefinitions.startTime,
                    fieldDefinitions.endTime,
                    fieldDefinitions.status
                ]
            },
            _a),
        timeframes: [
            {
                id: '$LASTHOUR$',
                label: 'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.last-hour.label',
                value: moment__default["default"].duration(1, 'hour')
            },
            {
                id: '$LASTDAY$',
                label: 'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.last-day.label',
                value: moment__default["default"].duration(1, 'day')
            },
            {
                id: '$LASTWEEK$',
                label: 'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.last-week.label',
                value: moment__default["default"].duration(1, 'week')
            },
            {
                id: '$LASTMONTH$',
                label: 'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.last-month.label',
                value: moment__default["default"].duration(1, 'month')
            },
            {
                id: '$LASTTHREEMONTHS$',
                label: 'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.last-three-months.label',
                value: moment__default["default"].duration(3, 'month')
            }
        ],
        processInstanceGridColumns: processInstanceGridColumns
    };

    var ProcessPreviewModalComponent = /** @class */ (function () {
        function ProcessPreviewModalComponent(activeModalRef) {
            this.activeModalRef = activeModalRef;
            this.processDefinitionName = this.activeModalRef.getData().processDefinitionName;
            this.isRunButtonDisabled = this.activeModalRef.getData().allowRun;
            this.processPreviewConfiguration$ = rxjs.of({ processDefinitionName: this.processDefinitionName, zoomToFit: true });
        }
        ProcessPreviewModalComponent.prototype.zoomIn = function () {
            this.processPreview.zoomIn();
        };
        ProcessPreviewModalComponent.prototype.zoomOut = function () {
            this.processPreview.zoomOut();
        };
        return ProcessPreviewModalComponent;
    }());
    /** @nocollapse */ ProcessPreviewModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ProcessPreviewModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ProcessPreviewModalComponent, selector: "ax-process-preview-modal", viewQueries: [{ propertyName: "processPreview", first: true, predicate: ["processPreview"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div>\n  <div class=\"canvas-toolbar\">\n    <button adapt-button type=\"button\" class=\"zoom-in\" (click)=\"zoomIn()\">\n      <span class=\"d-icon-search_plus\"></span>\n    </button>\n\n    <button adapt-button type=\"button\" class=\"zoom-out\" (click)=\"zoomOut()\">\n      <span class=\"d-icon-search_minus\"></span>\n    </button>\n  </div>\n  <rx-process-preview #processPreview [config]=\"processPreviewConfiguration$\"></rx-process-preview>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"ok-button\"\n    (click)=\"activeModalRef.close()\"\n    [disabled]=\"isRunButtonDisabled\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.process-management.run-process.button.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    rx-id=\"cancel-button\"\n    (click)=\"activeModalRef.dismiss()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.canvas-toolbar{background:#f0f1f1;border-bottom:1px solid #d6d7d8}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i2__namespace$4.RxProcessPreviewComponent, selector: "rx-process-preview", inputs: ["config"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-process-preview-modal',
                        templateUrl: './process-preview-modal.component.html',
                        styleUrls: ['./process-preview-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }]; }, propDecorators: { processPreview: [{
                    type: i0.ViewChild,
                    args: ['processPreview', { static: true }]
                }] } });

    var ProcessManagementService = /** @class */ (function () {
        function ProcessManagementService(rxNumberUtilsService) {
            this.rxNumberUtilsService = rxNumberUtilsService;
        }
        ProcessManagementService.prototype.buildInputParamsControls = function (inputParams) {
            var _this = this;
            var propertyControls = [];
            lodash.forEach(inputParams, function (inputParam) {
                var config = {
                    name: inputParam.name,
                    options: {
                        label: inputParam.name,
                        required: inputParam.fieldOption === 'REQUIRED'
                    },
                    defaultValue: inputParam.defaultValue || null,
                    dataType: inputParam.resourceType,
                    validators: []
                };
                if (config.options.required) {
                    config.validators.push(i4.Validators.required);
                }
                switch (inputParam.resourceType) {
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.selection: {
                        var selectionInputParam = inputParam;
                        config.component = i2$1.SelectFormControlComponent;
                        config.options = Object.assign(Object.assign({}, config.options), { options: lodash.map(selectionInputParam.optionNamesById, function (value, key) { return ({
                                id: key,
                                name: value
                            }); }), emptyOption: !config.options.required });
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.recordInstance: {
                        config.component = i2$1.RecordInstanceFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.character: {
                        config.component = i2$1.TextFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean: {
                        config.component = i2$1.BooleanFormControlComponent;
                        config.options.label = '';
                        config.options.description = inputParam.name;
                        config.options.shouldDisplayAsCheckbox = config.options.required;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.decimal:
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.integer:
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.real: {
                        config.component = i2$1.CounterFormControlComponent;
                        config.options.allowIntegerOnly = inputParam.resourceType === i1$5.RX_RECORD_DEFINITION.resourceTypes.integer;
                        if (_this.rxNumberUtilsService.isFiniteNumberString(inputParam.defaultValue)) {
                            config.defaultValue = Number(inputParam.defaultValue);
                        }
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.dateOnly: {
                        config.component = i2$1.DateFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.dateTime: {
                        config.component = i2$1.DateTimeFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.timeOnly: {
                        config.component = i2$1.TimeFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.attachment: {
                        config.component = i2$1.AttachmentFormControlComponent;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.list: {
                        var listInputParam = inputParam;
                        if (listInputParam.subType === i6.RX_PROCESS_DEFINITION.processVariableSubTypes.attachment) {
                            config.component = i2$1.AttachmentFormControlComponent;
                            config.options.filesCount = '1000';
                        }
                        else {
                            config.component = i2$1.InputListFormControlComponent;
                        }
                        break;
                    }
                    default: {
                        config.component = i2$1.TextFormControlComponent;
                        break;
                    }
                }
                propertyControls.push(config);
            });
            return propertyControls;
        };
        ProcessManagementService.prototype.buildInputParamsModel = function (inputParams) {
            var propertyModel = {};
            lodash.forEach(inputParams, function (inputParam) {
                var _a;
                if (inputParam.resourceType === i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean) {
                    if (inputParam.defaultValue === '1') {
                        propertyModel[inputParam.name] = true;
                    }
                    else if (inputParam.defaultValue === '0') {
                        propertyModel[inputParam.name] = false;
                    }
                    else {
                        propertyModel[inputParam.name] = inputParam.defaultValue;
                    }
                }
                else {
                    propertyModel[inputParam.name] = (_a = inputParam.defaultValue) !== null && _a !== void 0 ? _a : null;
                }
            });
            return propertyModel;
        };
        return ProcessManagementService;
    }());
    /** @nocollapse */ ProcessManagementService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementService, deps: [{ token: i5__namespace$1.RxNumberUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ProcessManagementService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i5__namespace$1.RxNumberUtilsService }]; } });

    var ProcessRunModalComponent = /** @class */ (function () {
        function ProcessRunModalComponent(context, manageProcessesService) {
            this.context = context;
            this.manageProcessesService = manageProcessesService;
            this.inputParamsControls = this.manageProcessesService.buildInputParamsControls(context.getData().inputParams);
            this.inputParamsModel = this.manageProcessesService.buildInputParamsModel(context.getData().inputParams);
        }
        ProcessRunModalComponent.prototype.onModelChange = function (model) {
            this.inputParamsModel = Object.assign(Object.assign({}, this.inputParamsModel), model);
        };
        ProcessRunModalComponent.prototype.startProcess = function () {
            this.onBeforeStart();
            this.context.close(this.inputParamsModel);
        };
        ProcessRunModalComponent.prototype.isRunButtonDisabled = function () {
            var _this = this;
            var isDisabled = false;
            this.inputParamsControls
                .filter(function (param) { return param.options.required; })
                .map(function (param) {
                var value = _this.inputParamsModel[param.name];
                switch (param.dataType) {
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.character:
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.object:
                        if (lodash.isEmpty(value) || (value === null || value === void 0 ? void 0 : value.trim().length) === 0) {
                            isDisabled = true;
                        }
                        break;
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.recordInstance:
                        if (lodash.isEmpty(value) ||
                            !lodash.has(value, 'id') ||
                            !lodash.has(value, 'recordDefinitionName') ||
                            lodash.isEmpty(value.id) ||
                            lodash.isEmpty(value.recordDefinitionName)) {
                            isDisabled = true;
                        }
                        break;
                    default:
                        if (lodash.isNull(value) || lodash.isUndefined(value)) {
                            isDisabled = true;
                        }
                        break;
                }
            });
            return isDisabled;
        };
        ProcessRunModalComponent.prototype.onBeforeStart = function () {
            var _this = this;
            this.inputParamsControls.map(function (param) {
                var value = _this.inputParamsModel[param.name];
                switch (param.dataType) {
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.boolean: {
                        if (value === true) {
                            _this.inputParamsModel[param.name] = '1';
                        }
                        else if (value === false) {
                            _this.inputParamsModel[param.name] = '0';
                        }
                        else {
                            _this.inputParamsModel[param.name] = value;
                        }
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.decimal:
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.integer:
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.real: {
                        _this.inputParamsModel[param.name] = (value === null || value === void 0 ? void 0 : value.toString()) || null;
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.character: {
                        _this.inputParamsModel[param.name] = value === null || value === void 0 ? void 0 : value.trim();
                        break;
                    }
                    case i1$5.RX_RECORD_DEFINITION.resourceTypes.object: {
                        _this.inputParamsModel[param.name] = (value === null || value === void 0 ? void 0 : value.trim()) || null;
                        break;
                    }
                }
            });
        };
        return ProcessRunModalComponent;
    }());
    /** @nocollapse */ ProcessRunModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalComponent, deps: [{ token: i1__namespace.DockedPanelContext }, { token: ProcessManagementService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ProcessRunModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ProcessRunModalComponent, selector: "ax-process-run-modal", ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <rx-form-builder\n    *ngIf=\"inputParamsControls.length > 0\"\n    [config]=\"[{ controls: inputParamsControls }]\"\n    [model]=\"inputParamsModel\"\n    (modelChange)=\"onModelChange($event)\"\n  ></rx-form-builder>\n\n  <span *ngIf=\"inputParamsControls.length === 0\">{{\n    'com.bmc.arsys.rx.innovation-studio.process-management.run-process.no-input-params.label' | translate\n  }}</span>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"ok-button\"\n    [disabled]=\"isRunButtonDisabled()\"\n    (click)=\"startProcess()\"\n  >\n    {{ 'com.bmc.arsys.rx.innovation-studio.process-management.run-process.button.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    (click)=\"context.dismiss(0)\"\n    rx-id=\"cancel-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i2__namespace$1.FormBuilderComponent, selector: "rx-form-builder", inputs: ["config", "model", "guid", "isReadOnly", "focusEditor$"], outputs: ["modelChange", "editorEvent", "formInitialized"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-process-run-modal',
                        templateUrl: './process-run-modal.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.DockedPanelContext }, { type: ProcessManagementService }]; } });

    var ProcessViewLogModalComponent = /** @class */ (function () {
        function ProcessViewLogModalComponent(activeModalRef, translateService, ngZone, rxNotificationService, rxProcessInstanceService) {
            this.activeModalRef = activeModalRef;
            this.translateService = translateService;
            this.ngZone = ngZone;
            this.rxNotificationService = rxNotificationService;
            this.rxProcessInstanceService = rxProcessInstanceService;
            this.emptyStateLabel = this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.view-log.modal.no-log.label');
            this.logs = this.activeModalRef.getData().logContent;
        }
        ProcessViewLogModalComponent.prototype.downloadLog = function () {
            var _this = this;
            this.rxProcessInstanceService
                .downloadLog(this.activeModalRef.getData().processDefinitionName, this.activeModalRef.getData().instanceId)
                .subscribe(function (fileStream) {
                if ((fileStream === null || fileStream === void 0 ? void 0 : fileStream.size) > 0) {
                    var file_1 = new Blob([fileStream], {
                        type: fileStream.type
                    });
                    _this.ngZone.runOutsideAngular(function () {
                        fileSaver.saveAs(file_1, 'process.log');
                    });
                }
                else {
                    _this.rxNotificationService.addInfoMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.view-log.modal.no-log.label'), '');
                }
            });
        };
        return ProcessViewLogModalComponent;
    }());
    /** @nocollapse */ ProcessViewLogModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i3__namespace.TranslateService }, { token: i0__namespace.NgZone }, { token: i2__namespace.RxNotificationService }, { token: i6__namespace.RxProcessInstanceService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ProcessViewLogModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ProcessViewLogModalComponent, selector: "ax-process-view-log-modal", ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <textarea class=\"form-control\" readonly *ngIf=\"this.logs\">{{ logs }}</textarea>\n  <adapt-empty-state [type]=\"'config'\" [label]=\"emptyStateLabel\" *ngIf=\"!this.logs\"> </adapt-empty-state>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"download-log-button\"\n    *ngIf=\"this.logs\"\n    (click)=\"downloadLog()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n  </button>\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    rx-id=\"close-button\"\n    (click)=\"activeModalRef.dismiss()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}textarea{color:#000;resize:none}.modal-body{justify-content:center;display:flex}adapt-empty-state{align-self:center}\n"], components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-process-view-log-modal',
                        templateUrl: './process-view-log-modal.component.html',
                        styleUrls: ['./process-view-log-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i3__namespace.TranslateService }, { type: i0__namespace.NgZone }, { type: i2__namespace.RxNotificationService }, { type: i6__namespace.RxProcessInstanceService }]; } });

    var ProcessManagementComponent = /** @class */ (function () {
        function ProcessManagementComponent(activatedRoute, adaptDockedPanelService, adaptModalService, errorHandler, ngZone, router, rxBundleCacheService, rxCommandFactoryService, rxDefinitionNameService, rxGainsightConfiguratorService, rxGlobalCacheService, rxModalService, rxNotificationService, rxPageTitleService, rxPreviousStateService, rxProcessDefinitionDataPageService, rxProcessDefinitionService, rxProcessInstanceDataPageService, rxProcessInstanceCountsByStatusDataPageService, rxProcessInstanceService, rxSessionExpirationService, rxSystemConfigurationService, translateService) {
            var _b;
            var _this = this;
            this.activatedRoute = activatedRoute;
            this.adaptDockedPanelService = adaptDockedPanelService;
            this.adaptModalService = adaptModalService;
            this.errorHandler = errorHandler;
            this.ngZone = ngZone;
            this.router = router;
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.rxPageTitleService = rxPageTitleService;
            this.rxPreviousStateService = rxPreviousStateService;
            this.rxProcessDefinitionDataPageService = rxProcessDefinitionDataPageService;
            this.rxProcessDefinitionService = rxProcessDefinitionService;
            this.rxProcessInstanceDataPageService = rxProcessInstanceDataPageService;
            this.rxProcessInstanceCountsByStatusDataPageService = rxProcessInstanceCountsByStatusDataPageService;
            this.rxProcessInstanceService = rxProcessInstanceService;
            this.rxSessionExpirationService = rxSessionExpirationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.translateService = translateService;
            this.activatedTabs = (_b = {},
                _b[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active] = false,
                _b[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended] = false,
                _b[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.errored] = false,
                _b[AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.completed] = false,
                _b);
            this.busySubscription = rxjs.NEVER.subscribe();
            this.innovationStudioBundleId = i2.RX_APPLICATION.innovationStudioBundleId;
            this.processInstanceStatuses = [
                AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active,
                AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended,
                AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.errored,
                AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.completed
            ];
            this.selectedTimeframe = [];
            this.tabs = lodash.mapValues(AX_PROCESS_MANAGEMENT.statusTabs, function (tab) { return (Object.assign(Object.assign({}, tab), { title: _this.translateService.instant(tab.title) })); });
            this.texts = {
                searchPlaceholder: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label')
            };
            this.timeframes = AX_PROCESS_MANAGEMENT.timeframes.map(function (timeframe) { return (Object.assign(Object.assign({}, timeframe), { label: _this.translateService.instant(timeframe.label) })); });
            this.activeTabStatus = AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.refreshProcessInstanceCountsSubject = new rxjs.Subject();
            this.refreshProcessDataSubject = new rxjs.BehaviorSubject(true);
            this.breadcrumbItems$ = rxjs.combineLatest([
                this.refreshProcessInstanceCountsSubject,
                this.refreshProcessDataSubject
            ]).pipe(operators.map(function () {
                var breadcrumbItems = [
                    {
                        data: {},
                        label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.manage-processes.menu.label')
                    }
                ];
                if (_this.selectedProcess && _this.selectedProcess[0].data.name) {
                    breadcrumbItems.push({
                        label: _this.rxDefinitionNameService.getDisplayName(_this.selectedProcess[0].data.name),
                        data: {}
                    });
                }
                return breadcrumbItems;
            }));
            this.bundleId$ = this.activatedRoute.params.pipe(operators.pluck('bundleId'), operators.shareReplay(1));
            this.bundleDescriptor$ = this.bundleId$.pipe(operators.switchMap(function (bundleId) { return _this.rxGlobalCacheService.getBundleDescriptor(bundleId); }));
            this.isProcessHistoryEnabled$ = this.rxSystemConfigurationService.getConfiguration('Process-History-Level').pipe(operators.take(1), operators.map(function (processHistoryLevel) { return processHistoryLevel.value !== 0; }), operators.shareReplay(1));
            this.processActionButtonsState$ = rxjs.combineLatest([
                this.refreshProcessInstanceCountsSubject,
                this.refreshProcessDataSubject
            ]).pipe(operators.switchMap(function () { return rxjs.of({
                isRunButtonDisabled: !_this.selectedProcess || !_this.selectedProcess[0].data.isEnabled,
                isViewButtonDisabled: !_this.selectedProcess || lodash.isEmpty(_this.selectedProcess[0].data.name)
            }); }));
            this.processDefinitionOptions$ = this.bundleId$.pipe(operators.switchMap(function (bundleId) { return rxjs.combineLatest([
                _this.activatedRoute.queryParams.pipe(operators.pluck('definitionName')),
                _this.getProcessDefinitions(bundleId)
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), processDefinitionName = _c[0], processDefinitions = _c[1];
                var _a;
                processDefinitionName = processDefinitionName || '';
                var options = processDefinitions.data.map(function (processDefinition) { return ({
                    label: _this.rxDefinitionNameService.getDisplayName(processDefinition.name),
                    data: processDefinition
                }); });
                options.unshift({
                    label: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.all-processes.label'),
                    data: { name: '' }
                });
                var processOption = (_a = options.find(function (option) { return option.data.name === processDefinitionName; })) !== null && _a !== void 0 ? _a : options[0];
                _this.resetProcessSelection(processOption);
                _this.refreshProcessInstanceCountsSubject.next();
                return options;
            })); }));
            this.processInstanceCounts$ = this.refreshProcessInstanceCountsSubject.pipe(operators.switchMap(function () {
                var _a;
                var queryParams = {
                    pageSize: -1,
                    startedAfter: moment__default["default"]().subtract(_this.selectedTimeframe[0].value).toISOString()
                };
                var params = ((_a = _this.selectedProcess[0]) === null || _a === void 0 ? void 0 : _a.data.name)
                    ? Object.assign(Object.assign({}, queryParams), { processDefinitionName: _this.selectedProcess[0].data.name }) : queryParams;
                return _this.rxProcessInstanceCountsByStatusDataPageService
                    .get({
                    params: params
                })
                    .pipe(operators.map(function (response) { return response.data[0]; }), operators.catchError(function (error) {
                    _this.errorHandler.handleError(error);
                    return rxjs.of({ status: '', data: [] });
                }));
            }), operators.map(function (result) { return lodash.transform(result, function (acc, status, key) { return (acc[key] = status); }, {}); }));
            this.vm$ = rxjs.combineLatest([
                this.bundleDescriptor$,
                this.processDefinitionOptions$,
                this.isProcessHistoryEnabled$,
                this.processInstanceCounts$,
                this.processActionButtonsState$,
                this.breadcrumbItems$
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 6), bundleDescriptor = _c[0], processDefinitionOptions = _c[1], isProcessHistoryEnabled = _c[2], processInstanceCounts = _c[3], processActionButtonsState = _c[4], breadcrumbItems = _c[5];
                return ({
                    bundleDescriptor: bundleDescriptor,
                    processDefinitionOptions: processDefinitionOptions,
                    isProcessHistoryEnabled: isProcessHistoryEnabled,
                    processInstanceCounts: processInstanceCounts,
                    processActionButtonsState: processActionButtonsState,
                    breadcrumbItems: breadcrumbItems
                });
            }), operators.tap(function () {
                _this.busySubscription.unsubscribe();
            }), operators.catchError(function (error) {
                var bundleDesc = { friendlyName: '', id: '' };
                _this.busySubscription.unsubscribe();
                _this.errorHandler.handleError(error);
                return rxjs.of({
                    bundleDescriptor: bundleDesc,
                    processDefinitionOptions: [],
                    isProcessHistoryEnabled: true,
                    processInstanceCounts: [0, 0, 0, 0],
                    processActionButtonsState: { isRunButtonDisabled: true, isViewButtonDisabled: true },
                    breadcrumbItems: []
                });
            }));
        }
        ProcessManagementComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.activatedRoute.params.pipe(operators.pluck('bundleId'), operators.take(1), operators.takeUntil(this.destroyed$)).subscribe(function (bundleId) {
                _this.rxBundleCacheService.bundleId = bundleId;
                _this.setPageTitle();
            });
            this.activatedRoute.queryParams.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (queryParams) {
                var newQueryParams = {};
                var activeTabIndex = lodash.findIndex(_this.processInstanceStatuses, function (el) { return el === queryParams.status; });
                var timeframe = lodash.find(_this.timeframes, { id: queryParams.timeframe });
                if (activeTabIndex !== -1) {
                    _this.activeTabIndex = activeTabIndex;
                    _this.activeTabStatus = queryParams.status;
                }
                else {
                    newQueryParams = Object.assign(Object.assign({}, newQueryParams), { status: AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active });
                }
                if (timeframe) {
                    _this.selectedTimeframe = [timeframe];
                }
                else {
                    newQueryParams = Object.assign(Object.assign({}, newQueryParams), { timeframe: lodash.head(_this.timeframes).id });
                }
                if (!lodash.isEmpty(newQueryParams)) {
                    _this.router.navigate([], {
                        relativeTo: _this.activatedRoute,
                        queryParams: newQueryParams,
                        queryParamsHandling: 'merge'
                    });
                }
                else {
                    if (!_this.activatedTabs[queryParams.status]) {
                        _this.activatedTabs[queryParams.status] = true;
                    }
                    else {
                        _this.refreshData();
                    }
                }
            });
            this.rxGainsightConfiguratorService.updateGlobalContext({
                subProductLevel1: {
                    name: 'Design'
                },
                subProductLevel2: {
                    name: 'Manage processes'
                }
            });
        };
        ProcessManagementComponent.prototype.ngOnDestroy = function () {
            this.refreshProcessDataSubject.complete();
            this.refreshProcessInstanceCountsSubject.complete();
            this.destroyed$.next(true);
            this.destroyed$.complete();
            this.rxGainsightConfiguratorService.removeGlobalContext(['subProductLevel2', 'subProductLevel3']);
        };
        ProcessManagementComponent.prototype.close = function () {
            this.router.navigate([
                i2.RX_APPLICATION.innovationStudioBundleId,
                this.rxBundleCacheService.bundleId,
                'process-definitions'
            ]);
        };
        ProcessManagementComponent.prototype.getRecordGridConfig = function (status) {
            var _this = this;
            return rxjs.of({
                enableFiltering: true,
                columns: this.getGridColumns(status),
                enableRowSelection: i5.RowSelectionMode.Multiple,
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition(status)); },
                recordIdField: AX_PROCESS_MANAGEMENT.processInstanceGridColumns.instanceId.fieldId,
                actionButtons: this.getActionButtons(),
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.no-processes.label'),
                guid: AX_PROCESS_MANAGEMENT.statusTabs[status].guid,
                searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.search.placeholder'),
                getData: function (queryParams) {
                    lodash.remove(queryParams.propertySelection, function (property) { return property === String(i1$5.RX_RECORD_DEFINITION.coreFieldIds.id); });
                    _this.refreshProcessInstanceCountsSubject.next(true);
                    return _this.getProcessInstanceRuns(Object.assign({}, lodash.omit(queryParams, ['shouldIncludeTotalSize', 'recorddefinition', 'searchText'])), _this.tabs[status].status);
                },
                styles: 'flex-fill'
            });
        };
        ProcessManagementComponent.prototype.onTimeframeChange = function (timeframe) {
            this.router.navigate([], {
                relativeTo: this.activatedRoute,
                queryParams: {
                    timeframe: lodash.head(timeframe).id
                },
                queryParamsHandling: 'merge'
            });
        };
        ProcessManagementComponent.prototype.optionFormatter = function (option) {
            return option.label;
        };
        ProcessManagementComponent.prototype.previewProcess = function (allowRun) {
            var _this = this;
            this.adaptModalService
                .open({
                title: this.rxDefinitionNameService.getDisplayName(this.selectedProcess[0].data.name),
                content: ProcessPreviewModalComponent,
                data: {
                    processDefinitionName: this.selectedProcess[0].data.name,
                    allowRun: allowRun
                }
            })
                .then(function () {
                _this.runProcess();
            })
                .catch(lodash.noop);
        };
        ProcessManagementComponent.prototype.refreshData = function () {
            var _this = this;
            this.isProcessHistoryEnabled$.subscribe(function (isProcessHistoryEnabled) {
                var _a;
                if (isProcessHistoryEnabled) {
                    (_a = _this.getCurrentGrid()) === null || _a === void 0 ? void 0 : _a.api.refresh().subscribe();
                }
                else {
                    _this.refreshProcessDataSubject.next(true);
                }
                var processName = (_this.selectedProcess && _this.selectedProcess[0].data.name) || '';
                var route = [i2.RX_APPLICATION.innovationStudioBundleId, 'process', 'manage', _this.rxBundleCacheService.bundleId];
                var currentQueryParams = _this.activatedRoute.snapshot.queryParams;
                if (processName) {
                    _this.router.navigate(route, { queryParams: { definitionName: processName }, queryParamsHandling: 'merge' });
                }
                else {
                    _this.router.navigate(route, { queryParams: lodash.omit(currentQueryParams, 'definitionName') });
                }
            });
        };
        ProcessManagementComponent.prototype.resetProcessSelection = function (processDefinitionOption) {
            this.selectedProcess = [processDefinitionOption];
            this.refreshData();
        };
        ProcessManagementComponent.prototype.runProcess = function () {
            var _this = this;
            this.rxProcessDefinitionService.getInputParams(this.selectedProcess[0].data.name).subscribe(function (inputParams) {
                rxjs.from(_this.adaptDockedPanelService.open({
                    title: _this.rxDefinitionNameService.getDisplayName(_this.selectedProcess[0].data.name),
                    content: ProcessRunModalComponent,
                    size: 'lg',
                    data: { inputParams: inputParams }
                }))
                    .pipe(operators.switchMap(function (inputValues) {
                    var hasAttachmentInputs = lodash.some(inputValues, function (inputValue) { return lodash.some(inputValue, function (item) { return item instanceof File; }); });
                    if (hasAttachmentInputs) {
                        return _this.runProcessWithAttachments(inputValues);
                    }
                    else {
                        return _this.rxCommandFactoryService
                            .forResourceType('com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand')
                            .execute({
                            processDefinitionName: _this.selectedProcess[0].data.name,
                            processInputValues: inputValues
                        });
                    }
                }), operators.tap(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.run-process.success.message'));
                    _this.refreshData();
                }), operators.catchError(function (error) {
                    if (error !== i1.DismissReasons.CLOSE_BTN) {
                        _this.refreshData();
                    }
                    return rxjs.throwError(error);
                }))
                    .subscribe();
            });
        };
        ProcessManagementComponent.prototype.tabChanged = function (_b) {
            var index = _b.index;
            this.activeTabStatus = this.processInstanceStatuses[index];
            this.router.navigate([], {
                relativeTo: this.activatedRoute,
                queryParams: {
                    status: this.activeTabStatus
                },
                queryParamsHandling: 'merge'
            });
        };
        ProcessManagementComponent.prototype.executeAction = function (command, reason) {
            var _this = this;
            var records = lodash.castArray(this.getCurrentGrid().api.getSelectedRows());
            var actions$ = records.map(function (record) {
                var payload = {
                    processDefinitionName: record.processDefinitionName,
                    processInstanceId: record.instanceId
                };
                return _this.rxCommandFactoryService
                    .forResourceType(command)
                    .execute(reason ? Object.assign(Object.assign({}, payload), { cancelReason: reason }) : payload);
            });
            rxjs.forkJoin(actions$)
                .pipe(operators.finalize(function () {
                _this.refreshData();
            }))
                .subscribe();
        };
        ProcessManagementComponent.prototype.getActionButtons = function () {
            var _this = this;
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.suspend.button.label'),
                    style: 'tertiary',
                    iconCls: 'pause_circle_o',
                    hidden: function () { return _this.isActionButtonDisabled(AX_PROCESS_DEFINITION_TAB.processInstanceActions.suspend); },
                    actions: [
                        {
                            name: function () {
                                _this.executeAction('com.bmc.arsys.rx.application.process.command.SuspendProcessInstanceCommand');
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.resume.button.label'),
                    style: 'tertiary',
                    iconCls: 'play_o',
                    hidden: function () { return _this.isActionButtonDisabled(AX_PROCESS_DEFINITION_TAB.processInstanceActions.resume); },
                    actions: [
                        {
                            name: function () {
                                _this.executeAction('com.bmc.arsys.rx.application.process.command.ActivateProcessInstanceCommand');
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label'),
                    style: 'tertiary',
                    iconCls: 'cross_adapt',
                    hidden: function () { return _this.isActionButtonDisabled(AX_PROCESS_DEFINITION_TAB.processInstanceActions.cancel); },
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .prompt({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.cancel-process.label'),
                                    modalStyle: i3$1.RX_MODAL.modalStyles.prompt,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.cancellation-reason.label')
                                })
                                    .then(function (promptResponse) {
                                    if (promptResponse.response) {
                                        _this.executeAction('com.bmc.arsys.rx.application.process.command.CancelProcessInstanceCommand', promptResponse.answer);
                                    }
                                });
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.view-log.button.label'),
                    style: 'tertiary',
                    iconCls: 'monitor_gear_eye',
                    disabled: function () { return _this.isActionButtonDisabled(AX_PROCESS_DEFINITION_TAB.processInstanceActions.viewLog); },
                    actions: [
                        {
                            name: function () {
                                var processInstance = _this.getCurrentGrid().api.getFirstSelectedRow();
                                _this.rxProcessInstanceService
                                    .getLog(processInstance.processDefinitionName, processInstance.instanceId)
                                    .subscribe(function (data) {
                                    _this.adaptModalService
                                        .open({
                                        title: _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.view-log.modal.title', {
                                            processDefinitionName: _this.rxDefinitionNameService.getDisplayName(processInstance.processDefinitionName),
                                            processInstanceId: processInstance.instanceId
                                        }),
                                        content: ProcessViewLogModalComponent,
                                        size: i2$2.OpenViewActionModalSize.Xlarge,
                                        data: data
                                    })
                                        .catch(lodash.noop);
                                });
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.download-log.button.label'),
                    style: 'tertiary',
                    iconCls: 'download',
                    disabled: function () { return _this.isActionButtonDisabled(AX_PROCESS_DEFINITION_TAB.processInstanceActions.downloadLog); },
                    actions: [
                        {
                            name: function () {
                                var processInstance = _this.getCurrentGrid().api.getFirstSelectedRow();
                                _this.rxProcessInstanceService
                                    .downloadLog(processInstance.processDefinitionName, processInstance.instanceId)
                                    .subscribe(function (fileStream) {
                                    if ((fileStream === null || fileStream === void 0 ? void 0 : fileStream.size) > 0) {
                                        var file_1 = new Blob([fileStream], {
                                            type: fileStream.type
                                        });
                                        _this.ngZone.runOutsideAngular(function () {
                                            fileSaver.saveAs(file_1, 'process.log');
                                        });
                                    }
                                    else {
                                        _this.rxNotificationService.addInfoMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.process-management.view-log.modal.no-log.label'), '');
                                    }
                                });
                            }
                        }
                    ]
                }
            ];
        };
        ProcessManagementComponent.prototype.getCurrentGrid = function () {
            var _this = this;
            return this.recordGrids.find(function (grid) { return grid.guid === AX_PROCESS_MANAGEMENT.statusTabs[_this.activeTabStatus].guid; });
        };
        ProcessManagementComponent.prototype.getGridColumns = function (status) {
            var _this = this;
            var gridColumns = AX_PROCESS_MANAGEMENT.statusTabs[status].gridColumns;
            return gridColumns.map(function (column) {
                var columnConfig = Object.assign(Object.assign({}, column), { title: _this.translateService.instant(column.title) });
                if (column.fieldId === AX_PROCESS_MANAGEMENT.processInstanceGridColumns.contextKey.fieldId) {
                    columnConfig.cellTemplate = _this.contextKeyCellTemplate;
                }
                else if (column.fieldId === AX_PROCESS_MANAGEMENT.processInstanceGridColumns.processDefinitionName.fieldId) {
                    columnConfig.cellTemplate = _this.processDefinitionCellTemplate;
                }
                return columnConfig;
            });
        };
        ProcessManagementComponent.prototype.getProcessDefinitions = function (bundleId) {
            var _this = this;
            return this.rxSessionExpirationService.keepSessionAlive().pipe(operators.switchMap(function () { return _this.rxProcessDefinitionDataPageService
                .get({
                params: {
                    propertySelection: ['name', 'isEnabled'],
                    bundleId: bundleId
                }
            })
                .pipe(operators.catchError(function (error) {
                _this.errorHandler.handleError(error);
                return _this.rxProcessDefinitionDataPageService.getEmptyDataPage();
            })); }));
        };
        ProcessManagementComponent.prototype.getProcessInstanceRuns = function (parameters, status) {
            var _this = this;
            var _a;
            var params = Object.assign(Object.assign({}, parameters), { startedAfter: moment__default["default"]().subtract(this.selectedTimeframe[0].value).toISOString() });
            var queryParams = ((_a = this.selectedProcess[0]) === null || _a === void 0 ? void 0 : _a.data.name)
                ? Object.assign(Object.assign({}, params), { processDefinitionName: this.selectedProcess[0].data.name }) : params;
            return this.rxProcessInstanceDataPageService
                .get({
                params: Object.assign(Object.assign({}, queryParams), { status: status })
            })
                .pipe(operators.map(function (response) { return (Object.assign(Object.assign({}, response), { status: status })); }), operators.catchError(function (error) {
                _this.errorHandler.handleError(error);
                return rxjs.of({ status: '', data: [] });
            }));
        };
        ProcessManagementComponent.prototype.getRecordDefinition = function (status) {
            var fieldDefinitions = AX_PROCESS_MANAGEMENT.statusTabs[status].fieldDefinitions;
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = fieldDefinition;
                return result;
            }, {});
            return {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
        };
        ProcessManagementComponent.prototype.isActionButtonDisabled = function (action) {
            var dataSets = this.getCurrentGrid().api.getSelectedRows();
            switch (action) {
                case AX_PROCESS_DEFINITION_TAB.processInstanceActions.suspend:
                    return lodash.some(dataSets, function (dataset) { return dataset.status !== AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active; });
                case AX_PROCESS_DEFINITION_TAB.processInstanceActions.resume:
                    return lodash.some(dataSets, function (dataset) { return dataset.status !== AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended; });
                case AX_PROCESS_DEFINITION_TAB.processInstanceActions.cancel:
                    return lodash.some(dataSets, function (dataset) { return dataset.status !== AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.suspended &&
                        dataset.status !== AX_PROCESS_DEFINITION_TAB.processInstanceStatuses.active; });
                case AX_PROCESS_DEFINITION_TAB.processInstanceActions.downloadLog:
                case AX_PROCESS_DEFINITION_TAB.processInstanceActions.viewLog:
                    return dataSets.length !== 1;
                default:
                    return true;
            }
        };
        ProcessManagementComponent.prototype.runProcessWithAttachments = function (inputValues) {
            var formData = new FormData();
            var attachmentInputParams = lodash.pickBy(inputValues, function (inputValue) { return lodash.some(inputValue, function (item) { return item instanceof File; }); });
            lodash.forOwn(attachmentInputParams, function (inputParamValue, inputParamName) {
                inputParamValue.forEach(function (file) {
                    formData.append(inputParamName, file);
                });
                delete inputValues[inputParamName];
            });
            var commandInstance = {
                processDefinitionName: this.selectedProcess[0].data.name,
                resourceType: 'com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand',
                processInputValues: inputValues
            };
            formData.append('commandInstance', JSON.stringify(commandInstance));
            return this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand')
                .execute(formData);
        };
        ProcessManagementComponent.prototype.setPageTitle = function () {
            var _this = this;
            this.rxGlobalCacheService
                .getBundleFriendlyName(this.rxBundleCacheService.bundleId)
                .pipe(operators.take(1))
                .subscribe(function (bundleFriendlyName) {
                _this.rxPageTitleService.set([
                    _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.manage-processes.menu.label'),
                    bundleFriendlyName
                ], _this.rxGlobalCacheService.applicationId);
            });
        };
        return ProcessManagementComponent;
    }());
    /** @nocollapse */ ProcessManagementComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementComponent, deps: [{ token: i1__namespace$1.ActivatedRoute }, { token: i1__namespace.AdaptDockedPanelService }, { token: i1__namespace.AdaptModalService }, { token: i0__namespace.ErrorHandler }, { token: i0__namespace.NgZone }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$1.RxGainsightConfiguratorService }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$1.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxPageTitleService }, { token: i2__namespace.RxPreviousStateService }, { token: i6__namespace.RxProcessDefinitionDataPageService }, { token: i6__namespace.RxProcessDefinitionService }, { token: i6__namespace.RxProcessInstanceDataPageService }, { token: i6__namespace.RxProcessInstanceCountsByStatusDataPageService }, { token: i6__namespace.RxProcessInstanceService }, { token: i2__namespace.RxSessionExpirationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i3__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ProcessManagementComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ProcessManagementComponent, selector: "ax-process-management", viewQueries: [{ propertyName: "contextKeyCellTemplate", first: true, predicate: ["contextKeyCellTemplate"], descendants: true, static: true }, { propertyName: "processDefinitionCellTemplate", first: true, predicate: ["processDefinitionCellTemplate"], descendants: true, static: true }, { propertyName: "recordGrids", predicate: i5.RecordGridComponent, descendants: true }], ngImport: i0__namespace, template: "<div class=\"h-100\" *ngIf=\"vm$ | async as vm\">\n  <div class=\"header d-flex align-items-center\">\n    <h5 class=\"rx-ellipsis col-2 pb-1\" [adaptTooltip]=\"vm.bundleDescriptor.friendlyName\">\n      {{ vm.bundleDescriptor.friendlyName }}\n    </h5>\n\n    <div class=\"breadcrumbs-container pt-1\">\n      <rx-breadcrumb-bar\n        (selectedItem)=\"resetProcessSelection(vm.processDefinitionOptions[0])\"\n        [items]=\"vm.breadcrumbItems\"\n      ></rx-breadcrumb-bar>\n    </div>\n\n    <div class=\"ml-auto m-2\">\n      <button rx-id=\"close-button\" adapt-button type=\"button\" size=\"small\" (click)=\"close()\" btn-type=\"secondary\">\n        {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n      </button>\n    </div>\n  </div>\n\n  <div class=\"process-management-container\">\n    <adapt-sidebar [openedId]=\"0\" [adjustMainContainerWidth]=\"true\">\n      <adapt-sidebar-item\n        [iconClass]=\"'d-icon-layout_preview'\"\n        [headerTitle]=\"'com.bmc.arsys.rx.innovation-studio.process-management.process-sidebar.title' | translate\"\n      >\n        <div class=\"d-flex flex-column h-100\">\n          <div class=\"d-flex justify-content-start mb-3\">\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"primary\"\n              rx-id=\"run-button\"\n              class=\"mr-2 d-icon-left-play_o\"\n              size=\"small\"\n              (click)=\"runProcess()\"\n              [disabled]=\"vm.processActionButtonsState.isRunButtonDisabled\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.process-management.run-process.button.label' | translate }}\n            </button>\n            <button\n              adapt-button\n              type=\"button\"\n              rx-id=\"view-button\"\n              class=\"d-icon-left-eye\"\n              size=\"small\"\n              [disabled]=\"vm.processActionButtonsState.isViewButtonDisabled\"\n              (click)=\"previewProcess(vm.processActionButtonsState.isRunButtonDisabled)\"\n              btn-type=\"secondary\"\n            >\n              {{ 'com.bmc.arsys.rx.innovation-studio.process-management.view-process.button.label' | translate }}\n            </button>\n          </div>\n\n          <div class=\"process-list h-100\">\n            <adapt-rx-select\n              class=\"h-100 d-flex\"\n              [(ngModel)]=\"selectedProcess\"\n              [options]=\"vm.processDefinitionOptions\"\n              [optionFormatter]=\"optionFormatter\"\n              [enableFilter]=\"true\"\n              [inline]=\"true\"\n              [selectAllButton]=\"false\"\n              [deselectAllButton]=\"false\"\n              [texts]=\"texts\"\n              [multiple]=\"false\"\n              [singleSelectStyle]=\"'line'\"\n              [popupMaxHeight]=\"'100%'\"\n              (ngModelChange)=\"refreshData()\"\n            ></adapt-rx-select>\n          </div>\n        </div>\n      </adapt-sidebar-item>\n      <div class=\"main h-100\">\n        <div class=\"h-100 d-flex flex-column\" *ngIf=\"vm.isProcessHistoryEnabled\">\n          <adapt-rx-select\n            class=\"form-group d-block\"\n            [label]=\"'com.bmc.arsys.rx.innovation-studio.process-management.timeframe.select.label' | translate\"\n            rx-id=\"timeframe\"\n            [ngModel]=\"selectedTimeframe\"\n            [options]=\"timeframes\"\n            [optionFormatter]=\"optionFormatter\"\n            (ngModelChange)=\"onTimeframeChange($event)\"\n            name=\"timeframe\"\n          >\n          </adapt-rx-select>\n          <adapt-tabset\n            rx-id=\"tabs\"\n            [type]=\"'pills'\"\n            [tab-active]=\"activeTabIndex\"\n            (tab-active-changed)=\"tabChanged($event)\"\n            class=\"h-100\"\n          >\n            <ng-container *ngFor=\"let status of processInstanceStatuses\">\n              <adapt-tab-panel\n                [adapt-tab-title]=\"tabs[status].title\"\n                [badge]=\"vm.processInstanceCounts[status]\"\n                [badge-type]=\"tabs[status].badgeType\"\n                [attr.rx-id]=\"'process-instances-tab-panel-' + status | lowercase\"\n              >\n                <rx-record-grid\n                  class=\"pt-3\"\n                  *ngIf=\"activatedTabs[status]\"\n                  [config]=\"getRecordGridConfig(status)\"\n                ></rx-record-grid>\n              </adapt-tab-panel>\n            </ng-container>\n          </adapt-tabset>\n        </div>\n\n        <div\n          class=\"d-flex align-items-center justify-content-center h-100\"\n          *ngIf=\"vm.isProcessHistoryEnabled === false\"\n        >\n          <adapt-empty-state\n            type=\"objects\"\n            label=\"{{\n              'com.bmc.arsys.rx.innovation-studio.process-management.process-history-disabled.message' | translate\n            }}\"\n          ></adapt-empty-state>\n        </div>\n      </div>\n    </adapt-sidebar>\n  </div>\n</div>\n<ng-template #contextKeyCellTemplate let-dataItem=\"dataItem\">\n  <div class=\"rx-ellipsis\">\n    <a\n      [routerLink]=\"[\n        '/',\n        innovationStudioBundleId,\n        'process',\n        'instance',\n        dataItem.processDefinitionName,\n        dataItem.instanceId\n      ]\"\n      >{{\n        dataItem.contextKey || 'com.bmc.arsys.rx.innovation-studio.process-management.process-instance.label'\n          | translate\n      }}\n    </a>\n  </div>\n</ng-template>\n\n<ng-template #processDefinitionCellTemplate let-dataItem=\"dataItem\">\n  {{ dataItem.processDefinitionName | rxDefinitionNamePipe }}\n</ng-template>\n\n<rx-busy-indicator [options]=\"{ busy: busySubscription }\"></rx-busy-indicator>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{position:relative;display:block;height:100%}adapt-rx-select{max-width:400px}.header{background:#f0f1f1;border-bottom:1px solid #d6d7d8}.breadcrumbs-container{font-size:.9375rem}.process-management-container{height:calc(100% - 60px)}.process-list{overflow:auto}:host::ng-deep .rx-select__controls{display:none}:host::ng-deep .rx-select__options-wrapper{width:100%}:host::ng-deep .tab-content{padding:0}:host::ng-deep .tab-content>.active{display:flex;flex-direction:column}\n"], components: [{ type: i3__namespace$1.RxBreadcrumbBarComponent, selector: "rx-breadcrumb-bar", inputs: ["items"], outputs: ["selectedItem"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptSidebarComponent, selector: "adapt-sidebar", inputs: ["className", "navClassName", "panelWidth", "panel2Width", "position", "theme", "widthLimit", "openedId", "adjustMainContainerWidth"], outputs: ["openedIdChange", "isPanelOpenedCurrently"], exportAs: ["adaptSidebar"] }, { type: i1__namespace.AdaptSidebarItemComponent, selector: "adapt-sidebar-item", inputs: ["iconClass", "headerTitle", "tooltipText", "aria-label"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: i5__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i3__namespace$1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptTooltipDirective, selector: "[adaptTooltip]", inputs: ["popupDelay", "placement", "width", "minWidth", "useWidthFitting", "adaptRadarDisableEventSending", "adaptTooltip", "manual"], outputs: ["shown", "hidden"], exportAs: ["tooltip"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i3__namespace.TranslatePipe, "lowercase": i8__namespace.LowerCasePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-process-management',
                        templateUrl: './process-management.component.html',
                        styleUrls: ['./process-management.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActivatedRoute }, { type: i1__namespace.AdaptDockedPanelService }, { type: i1__namespace.AdaptModalService }, { type: i0__namespace.ErrorHandler }, { type: i0__namespace.NgZone }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$1.RxGainsightConfiguratorService }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$1.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxPageTitleService }, { type: i2__namespace.RxPreviousStateService }, { type: i6__namespace.RxProcessDefinitionDataPageService }, { type: i6__namespace.RxProcessDefinitionService }, { type: i6__namespace.RxProcessInstanceDataPageService }, { type: i6__namespace.RxProcessInstanceCountsByStatusDataPageService }, { type: i6__namespace.RxProcessInstanceService }, { type: i2__namespace.RxSessionExpirationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i3__namespace.TranslateService }]; }, propDecorators: { contextKeyCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['contextKeyCellTemplate', { static: true }]
                }], processDefinitionCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['processDefinitionCellTemplate', { static: true }]
                }], recordGrids: [{
                    type: i0.ViewChildren,
                    args: [i5.RecordGridComponent]
                }] } });

    var RxValidViewDefinitionGuard = /** @class */ (function () {
        function RxValidViewDefinitionGuard(rxDefinitionNameService, rxGlobalCacheService, router) {
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.router = router;
        }
        RxValidViewDefinitionGuard.prototype.canActivate = function (route) {
            var _this = this;
            var viewDefinitionName = route.params.definitionName;
            var bundleId = this.rxDefinitionNameService.getBundleId(viewDefinitionName);
            return this.rxGlobalCacheService.getBundleDescriptor(bundleId).pipe(operators.map(function (bundleDescriptor) {
                if (bundleDescriptor.isApplication &&
                    _this.rxDefinitionNameService.getDisplayName(viewDefinitionName) === i2.RX_APPLICATION.shellDefinitionName) {
                    return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'shell', bundleId]);
                }
                return true;
            }));
        };
        return RxValidViewDefinitionGuard;
    }());
    /** @nocollapse */ RxValidViewDefinitionGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxValidViewDefinitionGuard, deps: [{ token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxGlobalCacheService }, { token: i1__namespace$1.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RxValidViewDefinitionGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxValidViewDefinitionGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxValidViewDefinitionGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxGlobalCacheService }, { type: i1__namespace$1.Router }]; } });

    var CreateBundleModalComponent = /** @class */ (function () {
        function CreateBundleModalComponent(context, translateService, axBundleDeploymentService) {
            this.context = context;
            this.translateService = translateService;
            this.axBundleDeploymentService = axBundleDeploymentService;
            this.bundleId = '';
            this.bundleCreationStatus = '';
            this.bundleCreationFinishedMessage = '';
            this.bundleName = '';
            this.bundleShortName = '';
            this.deploymentStatus = i3$1.ProgressIndicatorStatus;
            this.groupId = '';
            this.type = this.context.getData().type === i2.RX_BUNDLE.bundleTypes.application
                ? this.translateService.instant('com.bmc.arsys.rx.client.common.application.label')
                : this.translateService.instant('com.bmc.arsys.rx.client.common.library.label');
            this.bundleNameTooltip = new i2.Tooltip(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-bundle.name.tooltip', {
                bundleType: this.type.toLowerCase()
            }));
            this.bundleShortNameTooltip = new i2.Tooltip(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-bundle.short-name.tooltip', {
                bundleType: this.type.toLowerCase()
            }));
            this.groupIdTooltip = new i2.Tooltip(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-bundle.group-id.tooltip', {
                bundleType: this.type.toLowerCase()
            }));
        }
        CreateBundleModalComponent.prototype.create = function () {
            var _this = this;
            this.bundleCreationStatus = i3$1.ProgressIndicatorStatus.InProgress;
            this.axBundleDeploymentService
                .create({
                id: this.bundleId,
                name: this.bundleShortName,
                friendlyName: this.bundleName,
                developerId: this.groupId,
                isApplication: this.context.getData().type === i2.RX_BUNDLE.bundleTypes.application
            })
                .pipe(operators.catchError(function (error) {
                _this.bundleCreationStatus = i3$1.ProgressIndicatorStatus.Failed;
                _this.bundleCreationFinishedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-bundle.failure.message', { bundleType: _this.type });
                return rxjs.throwError(error);
            }))
                .subscribe(function (response) {
                _this.axBundleDeploymentService
                    .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/')))
                    .subscribe(function (deploymentStatus) {
                    if (deploymentStatus.isFinished) {
                        _this.bundleCreationStatus = i3$1.ProgressIndicatorStatus.Finished;
                        _this.bundleCreationFinishedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.bundle.create.successful.label', { bundleType: _this.type });
                    }
                    else if (deploymentStatus.errorMessage) {
                        _this.bundleCreationStatus = i3$1.ProgressIndicatorStatus.Failed;
                        _this.bundleCreationFinishedMessage = deploymentStatus.errorMessage;
                    }
                });
            });
        };
        CreateBundleModalComponent.prototype.close = function (bundleId) {
            if (!lodash.isEmpty(bundleId) && this.bundleCreationStatus === i3$1.ProgressIndicatorStatus.Finished) {
                this.context.close({ bundleId: bundleId });
            }
            else {
                this.context.close();
            }
        };
        CreateBundleModalComponent.prototype.dismiss = function () {
            this.context.dismiss();
        };
        CreateBundleModalComponent.prototype.setBundleId = function () {
            this.bundleId = this.groupId + "." + this.bundleShortName;
        };
        return CreateBundleModalComponent;
    }());
    /** @nocollapse */ CreateBundleModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i3__namespace.TranslateService }, { token: AxBundleDeploymentService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CreateBundleModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CreateBundleModalComponent, selector: "ax-create-bundle-modal", ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{\n      'com.bmc.arsys.rx.innovation-studio.workspace.bundle.new.label'\n        | translate: { bundleType: this.type.toLowerCase() }\n    }}\n  </h5>\n  <button\n    class=\"close dp-close\"\n    data-dismiss=\"modal\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"bundleCreationStatus === deploymentStatus.InProgress\"\n    (click)=\"dismiss()\"\n  ></button>\n</div>\n<div class=\"modal-body\">\n  <form #createBundleForm=\"ngForm\">\n    <adapt-rx-textfield\n      rx-id=\"bundle-name\"\n      label=\"{{\n        'com.bmc.arsys.rx.innovation-studio.workspace.bundle.name.label' | translate: { bundleType: this.type }\n      }}\"\n      [(ngModel)]=\"bundleName\"\n      maxlength=\"254\"\n      required=\"true\"\n      class=\"d-block form-group\"\n      name=\"bundleName\"\n      [tooltip]=\"bundleNameTooltip\"\n      [autofocus]=\"true\"\n      [disabled]=\"\n        bundleCreationStatus === deploymentStatus.InProgress || bundleCreationStatus === deploymentStatus.Finished\n      \"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"bundle-short-name\"\n      label=\"{{\n        'com.bmc.arsys.rx.innovation-studio.workspace.bundle.short-name.label' | translate: { bundleType: this.type }\n      }}\"\n      [(ngModel)]=\"bundleShortName\"\n      required=\"true\"\n      class=\"d-block form-group\"\n      name=\"bundleShortName\"\n      pattern=\"^([a-zA-Z0-9]+|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])$\"\n      (ngModelChange)=\"setBundleId()\"\n      [tooltip]=\"bundleShortNameTooltip\"\n      [disabled]=\"\n        bundleCreationStatus === deploymentStatus.InProgress || bundleCreationStatus === deploymentStatus.Finished\n      \"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"group-id\"\n      label=\"{{ 'com.bmc.arsys.rx.innovation-studio.workspace.groupId.label' | translate }}\"\n      [(ngModel)]=\"groupId\"\n      pattern=\"[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]+)*\"\n      required=\"true\"\n      class=\"d-block form-group\"\n      name=\"groupId\"\n      (ngModelChange)=\"setBundleId()\"\n      [tooltip]=\"groupIdTooltip\"\n      [disabled]=\"\n        bundleCreationStatus === deploymentStatus.InProgress || bundleCreationStatus === deploymentStatus.Finished\n      \"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"id\"\n      label=\"{{\n        'com.bmc.arsys.rx.innovation-studio.workspace.bundle.id.label' | translate: { bundleType: this.type }\n      }}\"\n      [(ngModel)]=\"bundleId\"\n      class=\"d-block form-group\"\n      name=\"bundleId\"\n      [disabled]=\"true\"\n    >\n    </adapt-rx-textfield>\n  </form>\n  <div *ngIf=\"bundleCreationStatus === deploymentStatus.InProgress\" class=\"progress\" rx-id=\"progress-bar\">\n    <div\n      class=\"progress-bar progress-bar-intermediate\"\n      role=\"progressbar\"\n      style=\"width: 100%\"\n      aria-valuenow=\"100\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n    ></div>\n  </div>\n  <p\n    *ngIf=\"bundleCreationStatus === deploymentStatus.Finished\"\n    class=\"d-icon-left-check_adapt\"\n    rx-id=\"operation-succeeded-message\"\n  >\n    {{ bundleCreationFinishedMessage }}\n  </p>\n  <p\n    *ngIf=\"bundleCreationStatus === deploymentStatus.Failed\"\n    class=\"d-icon-left-exclamation_triangle\"\n    rx-id=\"operation-failed-message\"\n  >\n    {{ bundleCreationFinishedMessage }}\n  </p>\n</div>\n\n<div class=\"modal-footer d-flex w-100\">\n  <button\n    *ngIf=\"bundleCreationStatus !== deploymentStatus.Finished\"\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    (click)=\"create()\"\n    [disabled]=\"\n      bundleCreationStatus === deploymentStatus.InProgress || createBundleForm.pristine || createBundleForm.invalid\n    \"\n    rx-id=\"create-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.create.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"secondary\"\n    (click)=\"close(bundleId)\"\n    [disabled]=\"bundleCreationStatus === deploymentStatus.InProgress\"\n    rx-id=\"close-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.d-icon-left-check_adapt:before{color:#00a79d}.d-icon-left-exclamation_triangle:before{color:#f83200}\n"], components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i4__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4__namespace.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i3__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-create-bundle-modal',
                        templateUrl: './create-bundle-modal.component.html',
                        styleUrls: ['./create-bundle-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i3__namespace.TranslateService }, { type: AxBundleDeploymentService }]; } });

    var BundleTypeFilter;
    (function (BundleTypeFilter) {
        BundleTypeFilter["All"] = "all";
        BundleTypeFilter["Applications"] = "applications";
        BundleTypeFilter["Libraries"] = "libraries";
    })(BundleTypeFilter || (BundleTypeFilter = {}));
    var EditableBundleFilter;
    (function (EditableBundleFilter) {
        EditableBundleFilter["All"] = "all";
        EditableBundleFilter["Editable"] = "editable";
    })(EditableBundleFilter || (EditableBundleFilter = {}));

    var WorkspaceComponent = /** @class */ (function () {
        function WorkspaceComponent(rxCurrentUserService, rxGlobalCacheService, rxOverlayService, rxPageTitleService, translateService, rxSmartReportingService, rxNotificationService, axBundleDeploymentService, adaptModalService, router, renderer, rxGainsightConfiguratorService) {
            var _this = this;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxOverlayService = rxOverlayService;
            this.rxPageTitleService = rxPageTitleService;
            this.translateService = translateService;
            this.rxSmartReportingService = rxSmartReportingService;
            this.rxNotificationService = rxNotificationService;
            this.axBundleDeploymentService = axBundleDeploymentService;
            this.adaptModalService = adaptModalService;
            this.router = router;
            this.renderer = renderer;
            this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            this.bundleTypeSelectorModel = [true, false, false];
            this.bundleTypes = i2.RX_BUNDLE.bundleTypes;
            this.editableBundles = this.rxCurrentUserService.getEditableBundles();
            this.editableBundleSelectorModel = [false, true];
            this.isBusinessAnalyst = this.rxCurrentUserService.isBusinessAnalyst();
            this.isShared = this.rxOverlayService.getCurrentOverlayContext().isShared;
            this.isInstallBundleActionAvailable = this.rxCurrentUserService.isAdministrator() && !this.isShared;
            this.innovationStudioBundleId = i2.RX_APPLICATION.innovationStudioBundleId;
            this.isLoadingData = true;
            this.isNewBundleActionAvailable = !this.isShared;
            this.texts = {
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.no-editable-bundles.label')
            };
            this.applicationLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.application.label');
            this.bundleTypeSelector$ = new rxjs.BehaviorSubject(BundleTypeFilter.All);
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.editableBundleSelector$ = new rxjs.BehaviorSubject(EditableBundleFilter.Editable);
            this.libraryLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.library.label');
            this.bundles$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(operators.map(function (bundleDescriptors) { return bundleDescriptors
                .filter(function (bundleDescriptor) { return bundleDescriptor.id !== i2.RX_APPLICATION.settingsBundleId &&
                bundleDescriptor.id !== i2.RX_APPLICATION.standardlib &&
                bundleDescriptor.id !== i2.RX_APPLICATION.innovationStudioBundleId &&
                bundleDescriptor.id !== i2.RX_APPLICATION.platformBundleId; })
                .map(function (bundle) { return (Object.assign(Object.assign({}, bundle), {
                type: bundle.isApplication ? _this.applicationLabel : _this.libraryLabel,
                isEditable: !_this.isBusinessAnalyst || lodash.includes(_this.editableBundles, bundle.id)
            })); }); }), operators.tap(function () {
                _this.isLoadingData = false;
            }), operators.catchError(function (error) {
                _this.isLoadingData = false;
                return rxjs.throwError(error);
            }));
            this.bundlesToDisplay$ = rxjs.combineLatest([
                this.bundleTypeSelector$,
                this.editableBundleSelector$,
                this.bundles$
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 3), bundleTypeFiler = _c[0], editableBundleFilter = _c[1], allBundles = _c[2];
                return allBundles.filter(function (bundle) { return (bundleTypeFiler === BundleTypeFilter.All ||
                    (bundleTypeFiler === BundleTypeFilter.Applications && bundle.isApplication) ||
                    (bundleTypeFiler === BundleTypeFilter.Libraries && !bundle.isApplication)) &&
                    (editableBundleFilter === EditableBundleFilter.All || bundle.isEditable); });
            }), operators.takeUntil(this.destroyed$));
            this.bundleTypeSelectorConfig = [
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.all.label'),
                    value: BundleTypeFilter.All
                },
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.applications.label'),
                    value: BundleTypeFilter.Applications
                },
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.libraries.label'),
                    value: BundleTypeFilter.Libraries
                }
            ];
            this.editableBundleSelectorConfig = [
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.all.label'),
                    value: EditableBundleFilter.All
                },
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.bundle.editable.label'),
                    value: EditableBundleFilter.Editable
                }
            ];
        }
        WorkspaceComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.columns = [
                {
                    field: 'friendlyName',
                    header: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    cellTemplate: this.nameColumnTemplate
                },
                { field: 'type', header: this.translateService.instant('com.bmc.arsys.rx.client.common.item-type.label') },
                {
                    field: 'developerName',
                    header: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.column.developer.label')
                },
                {
                    field: 'displayVersion',
                    header: this.translateService.instant('com.bmc.arsys.rx.client.common.version.label')
                },
                {
                    field: 'id',
                    hidden: true
                }
            ];
            this.rxSmartReportingService.getSmartReportingUrl().subscribe(function (smartReportingUrl) {
                _this.smartReportingUrl = smartReportingUrl;
            });
            this.setPageTitle();
            this.rxGainsightConfiguratorService.updateGlobalContext({
                subProductLevel1: {
                    name: 'Design'
                },
                subProductLevel2: {
                    name: 'Workspace'
                }
            });
        };
        WorkspaceComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
            this.rxGainsightConfiguratorService.removeGlobalContext(['subProductLevel2']);
        };
        WorkspaceComponent.prototype.updateBundleType = function (bundleTypeSelectorModel) {
            this.bundleTypeSelector$.next(this.bundleTypeSelectorConfig[lodash.findIndex(bundleTypeSelectorModel, Boolean)].value);
        };
        WorkspaceComponent.prototype.toggleEditableBundles = function (editableSelectorModel) {
            this.editableBundleSelector$.next(this.editableBundleSelectorConfig[lodash.findIndex(editableSelectorModel, Boolean)].value);
        };
        WorkspaceComponent.prototype.openFileDialog = function () {
            this.renderer.selectRootElement(this.fileInput.nativeElement, true).click();
        };
        WorkspaceComponent.prototype.onClickFileInput = function (event) {
            var element = event.target;
            element.value = '';
        };
        WorkspaceComponent.prototype.onChangeFileInput = function (event) {
            var _this = this;
            var _a;
            var files = lodash.toArray(event.target.files);
            var bundleDeploymentProgressConfig = {
                title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.install.button.label'),
                status: i3$1.ProgressIndicatorStatus.InProgress,
                header: this.translateService.instant('com.bmc.arsys.rx.client.common.application-or-library.label'),
                subHeader: (_a = files[0]) === null || _a === void 0 ? void 0 : _a.name.replace(/\.zip$/i, ''),
                inProgressMessage: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.installing.label'),
                finishedMessage: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.install-successful.label'),
                failedMessage: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.install-failed.label'),
                operationStatusMessage: ''
            };
            this.openModal(i3$1.ProgressIndicatorModalComponent, bundleDeploymentProgressConfig)
                .then(function () { return window.location.reload(); })
                .catch(lodash.noop);
            this.axBundleDeploymentService
                .install(files[0])
                .pipe(operators.catchError(function (error) {
                bundleDeploymentProgressConfig.status = i3$1.ProgressIndicatorStatus.Failed;
                bundleDeploymentProgressConfig.finishedMessage = _this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.install-failed.label');
                return rxjs.throwError(error);
            }))
                .subscribe(function (response) {
                _this.axBundleDeploymentService
                    .pollDeploymentStatus(lodash.last(response.headers.get('location').split('/')))
                    .subscribe(function (deploymentStatus) {
                    if (deploymentStatus.isFinished) {
                        bundleDeploymentProgressConfig.status = i3$1.ProgressIndicatorStatus.Finished;
                        bundleDeploymentProgressConfig.operationStatusMessage = _this.axBundleDeploymentService.buildStatusMessage(deploymentStatus.deploymentParsedStatus);
                    }
                    else if (deploymentStatus.errorMessage) {
                        bundleDeploymentProgressConfig.status = i3$1.ProgressIndicatorStatus.Failed;
                        bundleDeploymentProgressConfig.operationStatusMessage = deploymentStatus.errorMessage;
                    }
                });
            });
        };
        WorkspaceComponent.prototype.createBundle = function (bundleType) {
            var _this = this;
            this.openModal(CreateBundleModalComponent, { type: bundleType })
                .then(function (result) {
                var bundleId = result === null || result === void 0 ? void 0 : result.bundleId;
                if (bundleId) {
                    _this.rxGlobalCacheService.clear();
                    _this.router.navigate([i2.RX_APPLICATION.innovationStudioBundleId, bundleId]).then(function () {
                        window.location.reload();
                    });
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.innovation-studio.create-bundle.success.message', {
                        bundleType: bundleType.toLowerCase()
                    }));
                }
            })
                .catch(lodash.noop);
        };
        WorkspaceComponent.prototype.openModal = function (content, data) {
            return this.adaptModalService.open({
                content: content,
                data: data,
                size: 'sm',
                isDialog: true,
                hideBackdrop: false
            });
        };
        WorkspaceComponent.prototype.setPageTitle = function () {
            this.rxPageTitleService.set(this.translateService.instant('com.bmc.arsys.rx.innovation-studio.workspace.page.label'), this.rxGlobalCacheService.applicationId);
        };
        return WorkspaceComponent;
    }());
    /** @nocollapse */ WorkspaceComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceComponent, deps: [{ token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxPageTitleService }, { token: i3__namespace.TranslateService }, { token: i2__namespace.RxSmartReportingService }, { token: i2__namespace.RxNotificationService }, { token: AxBundleDeploymentService }, { token: i1__namespace.AdaptModalService }, { token: i1__namespace$1.Router }, { token: i0__namespace.Renderer2 }, { token: i2__namespace$1.RxGainsightConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ WorkspaceComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WorkspaceComponent, selector: "ax-workspace", viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }, { propertyName: "nameColumnTemplate", first: true, predicate: ["nameColumnTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"d-flex flex-column h-100\">\n  <div class=\"row w-100 align-items-center\">\n    <h1 class=\"h1 px-6 py-3 m-0\">{{ 'com.bmc.arsys.rx.innovation-studio.workspace.page.label' | translate }}</h1>\n\n    <div class=\"d-flex py-3\">\n      <span class=\"pl-6 pt-3 pr-2 workspace-toolbar-label mb-2\">\n        {{ 'com.bmc.arsys.rx.innovation-studio.workspace.show.label' | translate }}\n      </span>\n\n      <adapt-button-group\n        [(ngModel)]=\"bundleTypeSelectorModel\"\n        [config]=\"bundleTypeSelectorConfig\"\n        [multiselectable]=\"false\"\n        [uncheckable]=\"false\"\n        size=\"small\"\n        (ngModelChange)=\"updateBundleType($event)\"\n        rx-id=\"select-bundle-type\"\n        class=\"pt-1\"\n      ></adapt-button-group>\n\n      <adapt-button-group\n        class=\"pl-5 pt-1\"\n        *ngIf=\"isBusinessAnalyst\"\n        [(ngModel)]=\"editableBundleSelectorModel\"\n        [config]=\"editableBundleSelectorConfig\"\n        [multiselectable]=\"false\"\n        [uncheckable]=\"false\"\n        size=\"small\"\n        (ngModelChange)=\"toggleEditableBundles($event)\"\n        rx-id=\"select-bundle-type-ba\"\n      ></adapt-button-group>\n    </div>\n\n    <div class=\"d-flex py-3 align-items-center\">\n      <div\n        class=\"split-line ml-4\"\n        *ngIf=\"(isInstallBundleActionAvailable || isNewBundleActionAvailable) && !isBusinessAnalyst\"\n      ></div>\n\n      <div *ngIf=\"isNewBundleActionAvailable && !isBusinessAnalyst\" class=\"dropdown\" adaptDropdown>\n        <button\n          adapt-button\n          adaptDropdownToggle\n          type=\"button\"\n          btn-type=\"tertiary\"\n          class=\"d-icon-plus_circle align-self-start\"\n          rx-id=\"new-button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n        </button>\n\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <button (click)=\"createBundle(bundleTypes.application)\" class=\"dropdown-item\" rx-id=\"create-application\">\n            {{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}\n          </button>\n          <button (click)=\"createBundle(bundleTypes.library)\" class=\"dropdown-item\" rx-id=\"create-library\">\n            {{ 'com.bmc.arsys.rx.client.common.library.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <button\n        *ngIf=\"isInstallBundleActionAvailable && !isBusinessAnalyst\"\n        adapt-button\n        type=\"file\"\n        btn-type=\"tertiary\"\n        class=\"d-icon-left-download\"\n        rx-id=\"install-button\"\n        (click)=\"openFileDialog()\"\n      >\n        {{ 'com.bmc.arsys.rx.innovation-studio.workspace.install.button.label' | translate }}\n      </button>\n\n      <input\n        #fileInput\n        type=\"file\"\n        accept=\".zip\"\n        hidden\n        [multiple]=\"false\"\n        (change)=\"onChangeFileInput($event)\"\n        (click)=\"onClickFileInput($event)\"\n        rx-id=\"install-file-input\"\n      />\n    </div>\n\n    <div class=\"ml-auto py-3\" *ngIf=\"smartReportingUrl\">\n      <a\n        rx-id=\"reports-link\"\n        target=\"_blank\"\n        class=\"d-icon-file_chart d-icon-left px-4 py-2\"\n        [href]=\"smartReportingUrl\"\n      >\n        {{ 'com.bmc.arsys.rx.innovation-studio.workspace.reports.button.label' | translate }}\n      </a>\n    </div>\n  </div>\n\n  <div class=\"h-100\">\n    <adapt-table\n      class=\"mt-2\"\n      [value]=\"bundlesToDisplay$ | async\"\n      [columns]=\"columns\"\n      [sortable]=\"true\"\n      dataKey=\"friendlyName\"\n      sortField=\"friendlyName\"\n      [sortOrder]=\"1\"\n      [loading]=\"isLoadingData\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'flex'\"\n      [hasEmptyState]=\"isBusinessAnalyst && editableBundles.length === 0\"\n      [texts]=\"texts\"\n      [bordered]=\"true\"\n    >\n    </adapt-table>\n  </div>\n</div>\n<ng-template #nameColumnTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div class=\"rx-ellipsis\">\n    <a [routerLink]=\"['/', innovationStudioBundleId, dataItem.id]\">\n      {{ dataItem[column.field] }}\n    </a>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.workspace-toolbar-label{font-size:.75rem}.split-line{height:1.125rem;border-left:1px solid #d6d7d8}\n"], components: [{ type: i1__namespace.AdaptButtonGroupComponent, selector: "adapt-button-group", inputs: ["config", "size", "groupType", "isVertical", "multiselectable", "uncheckable", "useCheckboxStyle"], outputs: ["modelArrayChanged"], exportAs: ["adaptBtnGroup"] }, { type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i9__namespace.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }], directives: [{ type: i4__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i1__namespace$1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "translate": i3__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ax-workspace',
                        templateUrl: './workspace.component.html',
                        styleUrls: ['./workspace.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxPageTitleService }, { type: i3__namespace.TranslateService }, { type: i2__namespace.RxSmartReportingService }, { type: i2__namespace.RxNotificationService }, { type: AxBundleDeploymentService }, { type: i1__namespace.AdaptModalService }, { type: i1__namespace$1.Router }, { type: i0__namespace.Renderer2 }, { type: i2__namespace$1.RxGainsightConfiguratorService }]; }, propDecorators: { fileInput: [{
                    type: i0.ViewChild,
                    args: ['fileInput', { static: false }]
                }], nameColumnTemplate: [{
                    type: i0.ViewChild,
                    args: ['nameColumnTemplate', { static: true }]
                }] } });

    var AxBundleResolver = /** @class */ (function () {
        function AxBundleResolver(rxBundleService, rxLogService, rxGlobalCacheService, rxViewActionRegistryService, rxViewComponentRegistryService) {
            this.rxBundleService = rxBundleService;
            this.rxLogService = rxLogService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxViewActionRegistryService = rxViewActionRegistryService;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        }
        AxBundleResolver.prototype.resolve = function () {
            var _this = this;
            var angularBundleDescriptors = [];
            return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(operators.map(function (bundleDescriptors) { return bundleDescriptors.filter(function (bundleDescriptor) { return bundleDescriptor.containsAngular; }); }), operators.tap(function (bundleDescriptors) { return (angularBundleDescriptors = bundleDescriptors); }), operators.map(function (bundleDescriptors) { return bundleDescriptors.map(function (bundleDescriptor) { return bundleDescriptor.id; }); }), operators.switchMap(function (bundleIds) { return bundleIds.length ? _this.rxBundleService.loadBundles(bundleIds, true) : rxjs.of(bundleIds); }), operators.switchMap(function (bundleContexts) { return _this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(operators.map(function () { return bundleContexts; })); }), operators.tap(function (bundleContexts) {
                var registeredComponents = _this.rxViewComponentRegistryService.getRegisteredComponents();
                var registeredActions = _this.rxViewActionRegistryService.getRegisteredActions();
                lodash.forEach(bundleContexts, function (bundleContext) {
                    if (bundleContext.isBundleCompiled) {
                        var bundleDescriptor = lodash.find(angularBundleDescriptors, {
                            id: bundleContext.bundleId
                        });
                        if (bundleDescriptor) {
                            var unregisteredComponents = lodash.filter(bundleDescriptor.uiOptions.viewComponents, function (rxViewComponentName) { return !registeredComponents.has(rxViewComponentName); });
                            var unregisteredActions = lodash.filter(bundleDescriptor.uiOptions.viewActions, function (rxViewActionName) { return !registeredActions.has(rxViewActionName); });
                            if (!lodash.isEmpty(unregisteredComponents)) {
                                _this.rxLogService.warning(bundleDescriptor.id + ": Unregistered view components found in the manifest \n " + unregisteredComponents);
                            }
                            if (!lodash.isEmpty(unregisteredActions)) {
                                _this.rxLogService.warning(bundleDescriptor.id + ": Unregistered view actions found in the manifest \n " + unregisteredActions);
                            }
                        }
                    }
                });
            }), operators.shareReplay(1));
        };
        return AxBundleResolver;
    }());
    /** @nocollapse */ AxBundleResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleResolver, deps: [{ token: i2__namespace.RxBundleService }, { token: i2__namespace.RxLogService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace$2.RxViewActionRegistryService }, { token: i2__namespace$2.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxBundleResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxBundleResolver, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxBundleService }, { type: i2__namespace.RxLogService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace$2.RxViewActionRegistryService }, { type: i2__namespace$2.RxViewComponentRegistryService }]; } });

    var AxLegacyShellGuard = /** @class */ (function () {
        function AxLegacyShellGuard(router, rxAngularApplicationService, rxDefinitionNameService, rxViewDefinitionService, rxLogService) {
            this.router = router;
            this.rxAngularApplicationService = rxAngularApplicationService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxViewDefinitionService = rxViewDefinitionService;
            this.rxLogService = rxLogService;
        }
        AxLegacyShellGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            var bundleId = route.params.bundleId;
            return rxjs.forkJoin({
                isAngularJsApplication: this.rxAngularApplicationService.isAngularJsApplication(bundleId),
                shellViewDefinition: this.rxViewDefinitionService.get(this.rxDefinitionNameService.getDefinitionName(bundleId, i2.RX_APPLICATION.shellDefinitionName))
            }).pipe(operators.map(function (_a) {
                var isAngularJsApplication = _a.isAngularJsApplication, shellViewDefinition = _a.shellViewDefinition;
                var isAngularJs = isAngularJsApplication && !lodash.includes(shellViewDefinition.layout, '"outlets"');
                if (isAngularJs && route.parent.routeConfig.path === 'shell') {
                    return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'shell-legacy', bundleId]);
                }
                else if (!isAngularJs && route.parent.routeConfig.path === 'shell-legacy') {
                    return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'shell', bundleId]);
                }
                else {
                    return true;
                }
            }), operators.catchError(function (error) {
                _this.rxLogService.error(error.message);
                return rxjs.of(_this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, bundleId, 'record-definitions']));
            }));
        };
        return AxLegacyShellGuard;
    }());
    /** @nocollapse */ AxLegacyShellGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyShellGuard, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace.RxAngularApplicationService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$2.RxViewDefinitionService }, { token: i2__namespace.RxLogService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxLegacyShellGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyShellGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyShellGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace.RxAngularApplicationService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$2.RxViewDefinitionService }, { type: i2__namespace.RxLogService }]; } });

    var AxLegacyViewGuard = /** @class */ (function () {
        function AxLegacyViewGuard(router, rxAngularApplicationService, rxDefinitionNameService, rxViewDefinitionService, rxLogService) {
            this.router = router;
            this.rxAngularApplicationService = rxAngularApplicationService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxViewDefinitionService = rxViewDefinitionService;
            this.rxLogService = rxLogService;
        }
        AxLegacyViewGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            var _e = route.params, bundleId = _e.bundleId, definitionName = _e.definitionName;
            var effectiveBundleId = bundleId || this.rxDefinitionNameService.getBundleId(definitionName);
            return rxjs.forkJoin({
                isAngularJsViewDesigner: this.rxAngularApplicationService.isAngularJsViewDesignerBundle(effectiveBundleId),
                viewDefinition: definitionName
                    ? this.rxViewDefinitionService.get(definitionName, {
                        headers: new i1$2.HttpHeaders({
                            'Design-Time': 'true',
                            'default-bundle-scope': effectiveBundleId
                        })
                    })
                    : rxjs.of(null)
            }).pipe(operators.map(function (_e) {
                var isAngularJsViewDesigner = _e.isAngularJsViewDesigner, viewDefinition = _e.viewDefinition;
                var _a, _b, _c, _d;
                if (route.routeConfig.path.includes('new')) {
                    if (isAngularJsViewDesigner && ((_a = route.routeConfig.data) === null || _a === void 0 ? void 0 : _a.routerGroup) !== 'legacy-designer') {
                        return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'view', 'new-legacy', effectiveBundleId], {
                            queryParams: route.queryParams
                        });
                    }
                    else if (!isAngularJsViewDesigner && ((_b = route.routeConfig.data) === null || _b === void 0 ? void 0 : _b.routerGroup) === 'legacy-designer') {
                        return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'view', 'new', effectiveBundleId], {
                            queryParams: route.queryParams
                        });
                    }
                    else {
                        return true;
                    }
                }
                var isAngularJsEditMode = isAngularJsViewDesigner && !lodash.includes(viewDefinition === null || viewDefinition === void 0 ? void 0 : viewDefinition.layout, '"outlets"');
                if (!isAngularJsEditMode && ((_c = route.routeConfig.data) === null || _c === void 0 ? void 0 : _c.routerGroup) === 'legacy-designer') {
                    return _this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, 'view', 'edit', definitionName]);
                }
                else if (isAngularJsEditMode && ((_d = route.routeConfig.data) === null || _d === void 0 ? void 0 : _d.routerGroup) !== 'legacy-designer') {
                    return _this.router.createUrlTree([
                        i2.RX_APPLICATION.innovationStudioBundleId,
                        'view',
                        'edit-legacy',
                        definitionName
                    ]);
                }
                else {
                    return true;
                }
            }), operators.catchError(function (error) {
                _this.rxLogService.error(error.message);
                return rxjs.of(_this.router.createUrlTree([i2.RX_APPLICATION.innovationStudioBundleId, effectiveBundleId, 'view-definitions']));
            }));
        };
        return AxLegacyViewGuard;
    }());
    /** @nocollapse */ AxLegacyViewGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyViewGuard, deps: [{ token: i1__namespace$1.Router }, { token: i2__namespace.RxAngularApplicationService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace$2.RxViewDefinitionService }, { token: i2__namespace.RxLogService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxLegacyViewGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyViewGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxLegacyViewGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Router }, { type: i2__namespace.RxAngularApplicationService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace$2.RxViewDefinitionService }, { type: i2__namespace.RxLogService }]; } });

    var AxValidBundleGuard = /** @class */ (function () {
        function AxValidBundleGuard(rxGlobalCacheService, router, rxSessionService, rxLogService) {
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.router = router;
            this.rxSessionService = rxSessionService;
            this.rxLogService = rxLogService;
            this.defaultUrlTree = this.router.parseUrl('/innovationstudio');
        }
        AxValidBundleGuard.prototype.canActivate = function (route, state) {
            var _this = this;
            return this.rxSessionService.sessionActive$.pipe(operators.switchMap(function () { return _this.checkBundleState(route); }));
        };
        AxValidBundleGuard.prototype.checkBundleState = function (route) {
            var _this = this;
            var bundleId = route.paramMap.get('bundleId');
            return this.rxGlobalCacheService.getBundleDescriptor(bundleId).pipe(operators.map(function (bundleDescriptor) {
                if (!bundleDescriptor) {
                    _this.rxLogService.warning("Invalid bundle ID: " + bundleId + ". Redirecting to home page.");
                    return _this.defaultUrlTree;
                }
                return true;
            }));
        };
        return AxValidBundleGuard;
    }());
    /** @nocollapse */ AxValidBundleGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxValidBundleGuard, deps: [{ token: i2__namespace.RxGlobalCacheService }, { token: i1__namespace$1.Router }, { token: i2__namespace.RxSessionService }, { token: i2__namespace.RxLogService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AxValidBundleGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxValidBundleGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AxValidBundleGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxGlobalCacheService }, { type: i1__namespace$1.Router }, { type: i2__namespace.RxSessionService }, { type: i2__namespace.RxLogService }]; } });

    var routes = [
        {
            path: '',
            redirectTo: 'workspace',
            pathMatch: 'full'
        },
        {
            path: 'workspace',
            component: WorkspaceComponent,
            pathMatch: 'full'
        },
        {
            path: 'record',
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            data: {
                definitionType: 'record',
                routerGroup: 'legacy-designer'
            },
            children: [
                {
                    path: 'new2/:bundleId',
                    component: i7.RecordDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-15263' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: i7.RecordDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-15263' }
                },
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: 'edit-data-new/:definitionName',
                    component: RecordDataEditorComponent,
                    data: { featureId: 'DRD21-10996' },
                    canActivate: [i2.RxFeatureGuard]
                },
                {
                    path: 'edit-data/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        legacyDesignerName: AX_DESIGNER_FRAME.legacyDesignerNames.recordDataEditor
                    }
                }
            ]
        },
        {
            path: 'view',
            data: {
                definitionType: 'view',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { AxBundleResolver: AxBundleResolver, RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: designerPage.ViewDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, AxLegacyViewGuard]
                },
                {
                    path: 'edit/:definitionName',
                    component: designerPage.ViewDesignerPageComponent,
                    canActivate: [RxValidViewDefinitionGuard, AxLegacyViewGuard]
                },
                {
                    path: 'new-legacy/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard, AxLegacyViewGuard],
                    data: {
                        routerGroup: 'legacy-designer'
                    }
                },
                {
                    path: 'edit-legacy/:definitionName',
                    component: DesignerFrameComponent,
                    canActivate: [RxValidViewDefinitionGuard, AxLegacyViewGuard],
                    data: {
                        routerGroup: 'legacy-designer'
                    }
                }
            ]
        },
        {
            path: 'process',
            data: {
                definitionType: 'process',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new2/:bundleId',
                    component: designer.ProcessDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
                    data: { featureId: 'DRD21-11025' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer.ProcessDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
                    data: { featureId: 'DRD21-11025' }
                },
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: 'manage/:bundleId',
                    component: ProcessManagementComponent,
                    canActivate: [AxValidBundleGuard]
                },
                {
                    path: 'instance/:definitionName/:instanceId',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        legacyDesignerName: AX_DESIGNER_FRAME.legacyDesignerNames.processPreview
                    }
                }
            ]
        },
        {
            path: 'rule',
            data: {
                definitionType: 'rule',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                }
            ]
        },
        {
            path: 'association',
            data: {
                definitionType: 'association',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: 'new2/:bundleId',
                    component: designer$1.RxAssociationDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14986' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer$1.RxAssociationDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14986' }
                }
            ]
        },
        {
            path: 'named-list',
            data: {
                definitionType: 'named-list'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: designer$2.RxNamedListDesignerPageComponent,
                    canActivate: [AxValidBundleGuard]
                },
                {
                    path: 'edit/:definitionName',
                    component: designer$2.RxNamedListDesignerPageComponent
                }
            ]
        },
        {
            path: 'web-api',
            data: {
                definitionType: 'web-api',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: 'new2/:bundleId',
                    component: designer$3.RxWebApiDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-17752' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer$3.RxWebApiDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-17752' }
                }
            ]
        },
        {
            path: 'document',
            data: {
                definitionType: 'document',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new2/:bundleId',
                    component: designer$4.DocumentDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14961' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer$4.DocumentDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14961' }
                },
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                }
            ]
        },
        {
            path: 'event',
            data: {
                definitionType: 'event',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: 'new2/:bundleId',
                    component: designer$5.RxEventDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-17753' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer$5.RxEventDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-17753' }
                }
            ]
        },
        {
            path: 'event-statistics',
            data: {
                definitionType: 'event-statistics',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                }
            ]
        },
        {
            path: 'chatbot',
            data: {
                definitionType: 'chatbot',
                defaultBundleId: i2.RX_APPLICATION.chatbotBundleId,
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                },
                {
                    path: ':bundleId/publish-chat-enabled-service',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        legacyDesignerName: AX_DESIGNER_FRAME.legacyDesignerNames.chatWizard
                    }
                }
            ]
        },
        {
            path: 'shell',
            data: {
                definitionType: 'shell'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxViewComponentResolver: i2$2.RxViewComponentResolver, RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: ':bundleId',
                    component: shellDesignerPage.RxShellDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, AxLegacyShellGuard]
                }
            ]
        },
        {
            path: 'shell-legacy',
            data: {
                definitionType: 'shell',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            resolve: { RxKeepSessionAliveResolver: i2.RxKeepSessionAliveResolver },
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: ':bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard, AxLegacyShellGuard],
                    data: {
                        routerGroup: 'legacy-designer'
                    }
                }
            ]
        },
        {
            path: ':bundleId',
            component: BundleDetailsComponent,
            canActivate: [AxValidBundleGuard],
            children: [
                {
                    path: '',
                    redirectTo: 'record-definitions'
                },
                {
                    canDeactivate: [i2.RxComponentCanDeactivateGuard],
                    path: ':tab',
                    data: {
                        routeReuseStrategy: i2.RX_APPLICATION.routeReuseStrategies.checkParentParams
                    },
                    component: BundleDefinitionsComponent
                }
            ]
        },
        {
            path: 'config',
            data: {
                definitionType: 'config',
                routerGroup: 'legacy-designer'
            },
            canDeactivate: [i2.RxComponentCanDeactivateGuard],
            runGuardsAndResolvers: 'always',
            children: [
                {
                    path: 'new2/:bundleId',
                    component: designer$6.ConfigDesignerPageComponent,
                    canActivate: [AxValidBundleGuard, i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14987' }
                },
                {
                    path: 'edit2/:definitionName',
                    component: designer$6.ConfigDesignerPageComponent,
                    canActivate: [i2.RxFeatureGuard],
                    data: { featureId: 'DRD21-14987' }
                },
                {
                    path: 'new/:bundleId',
                    component: DesignerFrameComponent,
                    canActivate: [AxValidBundleGuard],
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.new
                    }
                },
                {
                    path: 'edit/:definitionName',
                    component: DesignerFrameComponent,
                    data: {
                        routerGroup: 'legacy-designer',
                        designerMode: AX_DESIGNER_FRAME.designerModes.edit
                    }
                }
            ]
        }
    ];
    var ComBmcArsysRxInnovationstudioRoutingModule = /** @class */ (function () {
        function ComBmcArsysRxInnovationstudioRoutingModule() {
        }
        return ComBmcArsysRxInnovationstudioRoutingModule;
    }());
    /** @nocollapse */ ComBmcArsysRxInnovationstudioRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ComBmcArsysRxInnovationstudioRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioRoutingModule, imports: [i1__namespace$1.RouterModule], exports: [i1$1.RouterModule] });
    /** @nocollapse */ ComBmcArsysRxInnovationstudioRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioRoutingModule, imports: [[i1$1.RouterModule.forChild(routes)], i1$1.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.RouterModule.forChild(routes)],
                        exports: [i1$1.RouterModule]
                    }]
            }] });

    var DefinitionTabModule = /** @class */ (function () {
        function DefinitionTabModule() {
        }
        return DefinitionTabModule;
    }());
    /** @nocollapse */ DefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabModule, declarations: [DefinitionTabComponent], imports: [i8.CommonModule,
            i1.AdaptButtonModule,
            i1.AdaptIconModule,
            i1.AdaptDropdownModule,
            i2.RxDefinitionModule,
            i5.RecordGridModule,
            i3$1.RxBusyIndicatorModule,
            i2.RxOverlayModule,
            i3.TranslateModule,
            i1$1.RouterModule], exports: [DefinitionTabComponent] });
    /** @nocollapse */ DefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabModule, imports: [[
                i8.CommonModule,
                i1.AdaptButtonModule,
                i1.AdaptIconModule,
                i1.AdaptDropdownModule,
                i2.RxDefinitionModule,
                i5.RecordGridModule,
                i3$1.RxBusyIndicatorModule,
                i2.RxOverlayModule,
                i3.TranslateModule,
                i1$1.RouterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i1.AdaptButtonModule,
                            i1.AdaptIconModule,
                            i1.AdaptDropdownModule,
                            i2.RxDefinitionModule,
                            i5.RecordGridModule,
                            i3$1.RxBusyIndicatorModule,
                            i2.RxOverlayModule,
                            i3.TranslateModule,
                            i1$1.RouterModule
                        ],
                        declarations: [DefinitionTabComponent],
                        exports: [DefinitionTabComponent]
                    }]
            }] });

    var AssociationDefinitionTabModule = /** @class */ (function () {
        function AssociationDefinitionTabModule() {
        }
        return AssociationDefinitionTabModule;
    }());
    /** @nocollapse */ AssociationDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AssociationDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabModule, declarations: [AssociationDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i1$6.RxAssociationPipesModule], exports: [AssociationDefinitionTabComponent] });
    /** @nocollapse */ AssociationDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i1$6.RxAssociationPipesModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AssociationDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i1$6.RxAssociationPipesModule],
                        exports: [AssociationDefinitionTabComponent]
                    }]
            }] });

    var DocumentDefinitionTabModule = /** @class */ (function () {
        function DocumentDefinitionTabModule() {
        }
        return DocumentDefinitionTabModule;
    }());
    /** @nocollapse */ DocumentDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DocumentDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabModule, declarations: [DocumentDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule], exports: [DocumentDefinitionTabComponent] });
    /** @nocollapse */ DocumentDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [DocumentDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule],
                        exports: [DocumentDefinitionTabComponent]
                    }]
            }] });

    var CreateCustomRecordModule = /** @class */ (function () {
        function CreateCustomRecordModule() {
        }
        return CreateCustomRecordModule;
    }());
    /** @nocollapse */ CreateCustomRecordModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CreateCustomRecordModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordModule, declarations: [CreateCustomRecordComponent], imports: [i8.CommonModule,
            i4.ReactiveFormsModule,
            i3$1.RxModalModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptRxSelectModule,
            i1.AdaptButtonModule,
            i1.AdaptBusyModule,
            i3.TranslateModule] });
    /** @nocollapse */ CreateCustomRecordModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordModule, imports: [[
                i8.CommonModule,
                i4.ReactiveFormsModule,
                i3$1.RxModalModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptRxSelectModule,
                i1.AdaptButtonModule,
                i1.AdaptBusyModule,
                i3.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateCustomRecordModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i4.ReactiveFormsModule,
                            i3$1.RxModalModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptButtonModule,
                            i1.AdaptBusyModule,
                            i3.TranslateModule
                        ],
                        declarations: [CreateCustomRecordComponent]
                    }]
            }] });

    var CreateJoinRecordModule = /** @class */ (function () {
        function CreateJoinRecordModule() {
        }
        return CreateJoinRecordModule;
    }());
    /** @nocollapse */ CreateJoinRecordModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CreateJoinRecordModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordModule, declarations: [CreateJoinRecordComponent], imports: [i8.CommonModule,
            i4.ReactiveFormsModule,
            i3$1.RxModalModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptRxSelectModule,
            i1.AdaptButtonModule,
            i1.AdaptBusyModule,
            i3.TranslateModule,
            i2$1.ExpressionFormControlModule,
            i2$1.RxDefinitionPickerModule] });
    /** @nocollapse */ CreateJoinRecordModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordModule, imports: [[
                i8.CommonModule,
                i4.ReactiveFormsModule,
                i3$1.RxModalModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptRxSelectModule,
                i1.AdaptButtonModule,
                i1.AdaptBusyModule,
                i3.TranslateModule,
                i2$1.ExpressionFormControlModule,
                i2$1.RxDefinitionPickerModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateJoinRecordModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i4.ReactiveFormsModule,
                            i3$1.RxModalModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptButtonModule,
                            i1.AdaptBusyModule,
                            i3.TranslateModule,
                            i2$1.ExpressionFormControlModule,
                            i2$1.RxDefinitionPickerModule
                        ],
                        declarations: [CreateJoinRecordComponent]
                    }]
            }] });

    var ExternalRecordWizardModule = /** @class */ (function () {
        function ExternalRecordWizardModule() {
        }
        return ExternalRecordWizardModule;
    }());
    /** @nocollapse */ ExternalRecordWizardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ExternalRecordWizardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardModule, declarations: [DataSourceStepComponent,
            DocumentSelectionStepComponent,
            FieldSelectionStepComponent,
            FieldTreeSelectionStepComponent,
            OperationSelectionStepComponent,
            RecordIdFieldsStepComponent,
            TableSelectionStepComponent,
            WebApiSelectionStepComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptIconModule,
            i1.AdaptRxFormControlModule,
            i1.AdaptRxRadiobuttonModule,
            i1.AdaptRxSelectModule,
            i1.AdaptTooltipModule,
            i1.AdaptTreeModule,
            i8.CommonModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i5.RecordGridModule,
            i2.RxDefinitionModule,
            i1$5.RxRecordDefinitionResourceTypePipeModule,
            i7.RecordDesignerModule,
            i2$1.RxWizardModule,
            i3.TranslateModule,
            i1.AdaptPopoverModule] });
    /** @nocollapse */ ExternalRecordWizardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardModule, providers: [ExternalRecordWizardService, RxDataSourceDataPageService, RxExternalDataService], imports: [[
                i1.AdaptButtonModule,
                i1.AdaptIconModule,
                i1.AdaptRxFormControlModule,
                i1.AdaptRxRadiobuttonModule,
                i1.AdaptRxSelectModule,
                i1.AdaptTooltipModule,
                i1.AdaptTreeModule,
                i8.CommonModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i5.RecordGridModule,
                i2.RxDefinitionModule,
                i1$5.RxRecordDefinitionResourceTypePipeModule,
                i7.RecordDesignerModule,
                i2$1.RxWizardModule,
                i3.TranslateModule,
                i1.AdaptPopoverModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExternalRecordWizardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptIconModule,
                            i1.AdaptRxFormControlModule,
                            i1.AdaptRxRadiobuttonModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptTooltipModule,
                            i1.AdaptTreeModule,
                            i8.CommonModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i5.RecordGridModule,
                            i2.RxDefinitionModule,
                            i1$5.RxRecordDefinitionResourceTypePipeModule,
                            i7.RecordDesignerModule,
                            i2$1.RxWizardModule,
                            i3.TranslateModule,
                            i1.AdaptPopoverModule
                        ],
                        providers: [ExternalRecordWizardService, RxDataSourceDataPageService, RxExternalDataService],
                        declarations: [
                            DataSourceStepComponent,
                            DocumentSelectionStepComponent,
                            FieldSelectionStepComponent,
                            FieldTreeSelectionStepComponent,
                            OperationSelectionStepComponent,
                            RecordIdFieldsStepComponent,
                            TableSelectionStepComponent,
                            WebApiSelectionStepComponent
                        ]
                    }]
            }] });

    var JoinRecordWizardModule = /** @class */ (function () {
        function JoinRecordWizardModule() {
        }
        return JoinRecordWizardModule;
    }());
    /** @nocollapse */ JoinRecordWizardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ JoinRecordWizardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardModule, declarations: [RecordDefinitionsStepComponent, JoinCriteriaStepComponent, FieldSelectionStepComponent$1], imports: [i8.CommonModule,
            i2$1.RxDefinitionPickerModule,
            i3.TranslateModule,
            i1.AdaptRxSelectModule,
            i2$1.RxWizardModule,
            i1.AdaptAlertModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i2$1.ExpressionFormControlModule] });
    /** @nocollapse */ JoinRecordWizardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardModule, providers: [JoinRecordWizardService], imports: [[
                i8.CommonModule,
                i2$1.RxDefinitionPickerModule,
                i3.TranslateModule,
                i1.AdaptRxSelectModule,
                i2$1.RxWizardModule,
                i1.AdaptAlertModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i2$1.ExpressionFormControlModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JoinRecordWizardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i2$1.RxDefinitionPickerModule,
                            i3.TranslateModule,
                            i1.AdaptRxSelectModule,
                            i2$1.RxWizardModule,
                            i1.AdaptAlertModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i2$1.ExpressionFormControlModule
                        ],
                        providers: [JoinRecordWizardService],
                        declarations: [RecordDefinitionsStepComponent, JoinCriteriaStepComponent, FieldSelectionStepComponent$1]
                    }]
            }] });

    var RecordDefinitionTabModule = /** @class */ (function () {
        function RecordDefinitionTabModule() {
        }
        return RecordDefinitionTabModule;
    }());
    /** @nocollapse */ RecordDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ RecordDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabModule, declarations: [RecordDefinitionTabComponent, AxRecordDefinitionTypePipe], imports: [i8.CommonModule,
            DefinitionTabModule,
            ExternalRecordWizardModule,
            JoinRecordWizardModule,
            CreateCustomRecordModule,
            CreateJoinRecordModule], exports: [RecordDefinitionTabComponent] });
    /** @nocollapse */ RecordDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabModule, imports: [[
                i8.CommonModule,
                DefinitionTabModule,
                ExternalRecordWizardModule,
                JoinRecordWizardModule,
                CreateCustomRecordModule,
                CreateJoinRecordModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            DefinitionTabModule,
                            ExternalRecordWizardModule,
                            JoinRecordWizardModule,
                            CreateCustomRecordModule,
                            CreateJoinRecordModule
                        ],
                        declarations: [RecordDefinitionTabComponent, AxRecordDefinitionTypePipe],
                        exports: [RecordDefinitionTabComponent]
                    }]
            }] });

    var ViewDefinitionTabModule = /** @class */ (function () {
        function ViewDefinitionTabModule() {
        }
        return ViewDefinitionTabModule;
    }());
    /** @nocollapse */ ViewDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ViewDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabModule, declarations: [ViewDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$1.RenameDefinitionModalModule], exports: [ViewDefinitionTabComponent] });
    /** @nocollapse */ ViewDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$1.RenameDefinitionModalModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ViewDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$1.RenameDefinitionModalModule],
                        exports: [ViewDefinitionTabComponent]
                    }]
            }] });

    var ProcessRunModalModule = /** @class */ (function () {
        function ProcessRunModalModule() {
        }
        return ProcessRunModalModule;
    }());
    /** @nocollapse */ ProcessRunModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ProcessRunModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalModule, declarations: [ProcessRunModalComponent], imports: [i8.CommonModule, i4.FormsModule, i2$1.RxFormBuilderModule, i3.TranslateModule, i1.AdaptButtonModule] });
    /** @nocollapse */ ProcessRunModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalModule, imports: [[i8.CommonModule, i4.FormsModule, i2$1.RxFormBuilderModule, i3.TranslateModule, i1.AdaptButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessRunModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProcessRunModalComponent],
                        imports: [i8.CommonModule, i4.FormsModule, i2$1.RxFormBuilderModule, i3.TranslateModule, i1.AdaptButtonModule]
                    }]
            }] });

    var ProcessPreviewModalModule = /** @class */ (function () {
        function ProcessPreviewModalModule() {
        }
        return ProcessPreviewModalModule;
    }());
    /** @nocollapse */ ProcessPreviewModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ProcessPreviewModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalModule, declarations: [ProcessPreviewModalComponent], imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i2$4.RxProcessPreviewModule] });
    /** @nocollapse */ ProcessPreviewModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalModule, imports: [[i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i2$4.RxProcessPreviewModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessPreviewModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProcessPreviewModalComponent],
                        imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i2$4.RxProcessPreviewModule]
                    }]
            }] });

    var ProcessViewLogModalModule = /** @class */ (function () {
        function ProcessViewLogModalModule() {
        }
        return ProcessViewLogModalModule;
    }());
    /** @nocollapse */ ProcessViewLogModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ProcessViewLogModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalModule, declarations: [ProcessViewLogModalComponent], imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptEmptyStateModule, i2$4.RxProcessPreviewModule] });
    /** @nocollapse */ ProcessViewLogModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalModule, imports: [[i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptEmptyStateModule, i2$4.RxProcessPreviewModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessViewLogModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProcessViewLogModalComponent],
                        imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptEmptyStateModule, i2$4.RxProcessPreviewModule]
                    }]
            }] });

    var ProcessManagementModule = /** @class */ (function () {
        function ProcessManagementModule() {
        }
        return ProcessManagementModule;
    }());
    /** @nocollapse */ ProcessManagementModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ProcessManagementModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementModule, declarations: [ProcessManagementComponent], imports: [i8.CommonModule,
            i1.AdaptButtonModule,
            i1.AdaptDockedPanelModule,
            i3.TranslateModule,
            i1.AdaptIconModule,
            i1.AdaptTreeModule,
            i1.AdaptTabsModule,
            i1.AdaptRxSelectModule,
            i1.AdaptRxFormControlModule,
            i4.FormsModule,
            i2.RxDefinitionModule,
            i5.RecordGridModule,
            ProcessPreviewModalModule,
            ProcessViewLogModalModule,
            ProcessRunModalModule,
            i2$1.RxFormBuilderModule,
            i3$1.RxBusyIndicatorModule,
            i3$1.RxBreadcrumbBarModule,
            i1.AdaptTooltipModule,
            i1.AdaptEmptyStateModule,
            i1.AdaptSidebarModule,
            i1$1.RouterModule] });
    /** @nocollapse */ ProcessManagementModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementModule, imports: [[
                i8.CommonModule,
                i1.AdaptButtonModule,
                i1.AdaptDockedPanelModule,
                i3.TranslateModule,
                i1.AdaptIconModule,
                i1.AdaptTreeModule,
                i1.AdaptTabsModule,
                i1.AdaptRxSelectModule,
                i1.AdaptRxFormControlModule,
                i4.FormsModule,
                i2.RxDefinitionModule,
                i5.RecordGridModule,
                ProcessPreviewModalModule,
                ProcessViewLogModalModule,
                ProcessRunModalModule,
                i2$1.RxFormBuilderModule,
                i3$1.RxBusyIndicatorModule,
                i3$1.RxBreadcrumbBarModule,
                i1.AdaptTooltipModule,
                i1.AdaptEmptyStateModule,
                i1.AdaptSidebarModule,
                i1$1.RouterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessManagementModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProcessManagementComponent],
                        imports: [
                            i8.CommonModule,
                            i1.AdaptButtonModule,
                            i1.AdaptDockedPanelModule,
                            i3.TranslateModule,
                            i1.AdaptIconModule,
                            i1.AdaptTreeModule,
                            i1.AdaptTabsModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptRxFormControlModule,
                            i4.FormsModule,
                            i2.RxDefinitionModule,
                            i5.RecordGridModule,
                            ProcessPreviewModalModule,
                            ProcessViewLogModalModule,
                            ProcessRunModalModule,
                            i2$1.RxFormBuilderModule,
                            i3$1.RxBusyIndicatorModule,
                            i3$1.RxBreadcrumbBarModule,
                            i1.AdaptTooltipModule,
                            i1.AdaptEmptyStateModule,
                            i1.AdaptSidebarModule,
                            i1$1.RouterModule
                        ]
                    }]
            }] });

    var ProcessDefinitionTabModule = /** @class */ (function () {
        function ProcessDefinitionTabModule() {
        }
        return ProcessDefinitionTabModule;
    }());
    /** @nocollapse */ ProcessDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ProcessDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabModule, declarations: [ProcessDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, ProcessManagementModule, i2.RxDefinitionModule], exports: [ProcessDefinitionTabComponent] });
    /** @nocollapse */ ProcessDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, ProcessManagementModule, i2.RxDefinitionModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ProcessDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProcessDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, ProcessManagementModule, i2.RxDefinitionModule],
                        exports: [ProcessDefinitionTabComponent]
                    }]
            }] });

    var RuleDefinitionTabModule = /** @class */ (function () {
        function RuleDefinitionTabModule() {
        }
        return RuleDefinitionTabModule;
    }());
    /** @nocollapse */ RuleDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ RuleDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabModule, declarations: [RuleDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$3.RxRulePipesModule], exports: [RuleDefinitionTabComponent] });
    /** @nocollapse */ RuleDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$3.RxRulePipesModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RuleDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i1$1.RouterModule, i2.RxDefinitionModule, i2$3.RxRulePipesModule],
                        exports: [RuleDefinitionTabComponent]
                    }]
            }] });

    var NamedListDefinitionTabModule = /** @class */ (function () {
        function NamedListDefinitionTabModule() {
        }
        return NamedListDefinitionTabModule;
    }());
    /** @nocollapse */ NamedListDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NamedListDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabModule, declarations: [NamedListDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule], exports: [NamedListDefinitionTabComponent] });
    /** @nocollapse */ NamedListDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedListDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [NamedListDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule],
                        exports: [NamedListDefinitionTabComponent]
                    }]
            }] });

    var WebApiDefinitionTabModule = /** @class */ (function () {
        function WebApiDefinitionTabModule() {
        }
        return WebApiDefinitionTabModule;
    }());
    /** @nocollapse */ WebApiDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ WebApiDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabModule, declarations: [WebApiDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule], exports: [WebApiDefinitionTabComponent] });
    /** @nocollapse */ WebApiDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [WebApiDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule],
                        exports: [WebApiDefinitionTabComponent]
                    }]
            }] });

    var ChatbotDefinitionTabModule = /** @class */ (function () {
        function ChatbotDefinitionTabModule() {
        }
        return ChatbotDefinitionTabModule;
    }());
    /** @nocollapse */ ChatbotDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ChatbotDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabModule, declarations: [ChatbotDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule], exports: [ChatbotDefinitionTabComponent] });
    /** @nocollapse */ ChatbotDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ChatbotDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule],
                        exports: [ChatbotDefinitionTabComponent]
                    }]
            }] });

    var EventDefinitionTabModule = /** @class */ (function () {
        function EventDefinitionTabModule() {
        }
        return EventDefinitionTabModule;
    }());
    /** @nocollapse */ EventDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ EventDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabModule, declarations: [EventDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule], exports: [EventDefinitionTabComponent] });
    /** @nocollapse */ EventDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [EventDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule],
                        exports: [EventDefinitionTabComponent]
                    }]
            }] });

    var EventStatisticsDefinitionTabModule = /** @class */ (function () {
        function EventStatisticsDefinitionTabModule() {
        }
        return EventStatisticsDefinitionTabModule;
    }());
    /** @nocollapse */ EventStatisticsDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ EventStatisticsDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabModule, declarations: [EventStatisticsDefinitionTabComponent], imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule], exports: [EventStatisticsDefinitionTabComponent] });
    /** @nocollapse */ EventStatisticsDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabModule, imports: [[i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EventStatisticsDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [EventStatisticsDefinitionTabComponent],
                        imports: [i8.CommonModule, DefinitionTabModule, i2.RxDefinitionModule, i3.TranslateModule],
                        exports: [EventStatisticsDefinitionTabComponent]
                    }]
            }] });

    var ConfigurationDefinitionTabModule = /** @class */ (function () {
        function ConfigurationDefinitionTabModule() {
        }
        return ConfigurationDefinitionTabModule;
    }());
    /** @nocollapse */ ConfigurationDefinitionTabModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ConfigurationDefinitionTabModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabModule, declarations: [ConfigurationDefinitionTabComponent, AdminSettingEditorComponent], imports: [i1.AdaptModalModule,
            i1.AdaptButtonModule,
            i8.CommonModule,
            DefinitionTabModule,
            i1$1.RouterModule,
            i3.TranslateModule,
            i4.ReactiveFormsModule,
            i2$1.RxDefinitionPickerModule,
            i2$1.RxPermissionEditorModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptRxLabelModule,
            i1.AdaptRxCheckboxModule], exports: [ConfigurationDefinitionTabComponent] });
    /** @nocollapse */ ConfigurationDefinitionTabModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabModule, imports: [[
                i1.AdaptModalModule,
                i1.AdaptButtonModule,
                i8.CommonModule,
                DefinitionTabModule,
                i1$1.RouterModule,
                i3.TranslateModule,
                i4.ReactiveFormsModule,
                i2$1.RxDefinitionPickerModule,
                i2$1.RxPermissionEditorModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptRxLabelModule,
                i1.AdaptRxCheckboxModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConfigurationDefinitionTabModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ConfigurationDefinitionTabComponent, AdminSettingEditorComponent],
                        imports: [
                            i1.AdaptModalModule,
                            i1.AdaptButtonModule,
                            i8.CommonModule,
                            DefinitionTabModule,
                            i1$1.RouterModule,
                            i3.TranslateModule,
                            i4.ReactiveFormsModule,
                            i2$1.RxDefinitionPickerModule,
                            i2$1.RxPermissionEditorModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptRxLabelModule,
                            i1.AdaptRxCheckboxModule
                        ],
                        exports: [ConfigurationDefinitionTabComponent]
                    }]
            }] });

    var BundleDefinitionsModule = /** @class */ (function () {
        function BundleDefinitionsModule() {
        }
        return BundleDefinitionsModule;
    }());
    /** @nocollapse */ BundleDefinitionsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BundleDefinitionsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsModule, declarations: [BundleDefinitionsComponent], imports: [i1.AdaptTabsModule,
            ProcessDefinitionTabModule,
            AssociationDefinitionTabModule,
            ChatbotDefinitionTabModule,
            i8.CommonModule,
            NamedListDefinitionTabModule,
            DocumentDefinitionTabModule,
            RecordDefinitionTabModule,
            RuleDefinitionTabModule,
            i1$1.RouterModule,
            i3.TranslateModule,
            ViewDefinitionTabModule,
            EventDefinitionTabModule,
            EventStatisticsDefinitionTabModule,
            WebApiDefinitionTabModule,
            ConfigurationDefinitionTabModule], exports: [BundleDefinitionsComponent] });
    /** @nocollapse */ BundleDefinitionsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsModule, imports: [[
                i1.AdaptTabsModule,
                ProcessDefinitionTabModule,
                AssociationDefinitionTabModule,
                ChatbotDefinitionTabModule,
                i8.CommonModule,
                NamedListDefinitionTabModule,
                DocumentDefinitionTabModule,
                RecordDefinitionTabModule,
                RuleDefinitionTabModule,
                i1$1.RouterModule,
                i3.TranslateModule,
                ViewDefinitionTabModule,
                EventDefinitionTabModule,
                EventStatisticsDefinitionTabModule,
                WebApiDefinitionTabModule,
                ConfigurationDefinitionTabModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDefinitionsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptTabsModule,
                            ProcessDefinitionTabModule,
                            AssociationDefinitionTabModule,
                            ChatbotDefinitionTabModule,
                            i8.CommonModule,
                            NamedListDefinitionTabModule,
                            DocumentDefinitionTabModule,
                            RecordDefinitionTabModule,
                            RuleDefinitionTabModule,
                            i1$1.RouterModule,
                            i3.TranslateModule,
                            ViewDefinitionTabModule,
                            EventDefinitionTabModule,
                            EventStatisticsDefinitionTabModule,
                            WebApiDefinitionTabModule,
                            ConfigurationDefinitionTabModule
                        ],
                        declarations: [BundleDefinitionsComponent],
                        exports: [BundleDefinitionsComponent]
                    }]
            }] });

    var AddBundleContentDataWizardStepModule = /** @class */ (function () {
        function AddBundleContentDataWizardStepModule() {
        }
        return AddBundleContentDataWizardStepModule;
    }());
    /** @nocollapse */ AddBundleContentDataWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AddBundleContentDataWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepModule, declarations: [AddBundleContentDataWizardStepComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptDropdownModule,
            i1.AdaptIconModule,
            i1.AdaptRxCheckboxModule,
            i1.AdaptRxSelectModule,
            i1.AdaptRxSwitchModule,
            i8.CommonModule,
            i2$1.ExpressionFormControlModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i5.RecordGridModule,
            i2.RxDefinitionModule,
            i2$1.RxDefinitionPickerModule,
            i3.TranslateModule,
            i1.AdaptPopoverModule], exports: [AddBundleContentDataWizardStepComponent] });
    /** @nocollapse */ AddBundleContentDataWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepModule, imports: [[
                i1.AdaptButtonModule,
                i1.AdaptDropdownModule,
                i1.AdaptIconModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxSelectModule,
                i1.AdaptRxSwitchModule,
                i8.CommonModule,
                i2$1.ExpressionFormControlModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i5.RecordGridModule,
                i2.RxDefinitionModule,
                i2$1.RxDefinitionPickerModule,
                i3.TranslateModule,
                i1.AdaptPopoverModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddBundleContentDataWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptDropdownModule,
                            i1.AdaptIconModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptRxSwitchModule,
                            i8.CommonModule,
                            i2$1.ExpressionFormControlModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i5.RecordGridModule,
                            i2.RxDefinitionModule,
                            i2$1.RxDefinitionPickerModule,
                            i3.TranslateModule,
                            i1.AdaptPopoverModule
                        ],
                        declarations: [AddBundleContentDataWizardStepComponent],
                        exports: [AddBundleContentDataWizardStepComponent]
                    }]
            }] });

    var AddDataWizardStepModule = /** @class */ (function () {
        function AddDataWizardStepModule() {
        }
        return AddDataWizardStepModule;
    }());
    /** @nocollapse */ AddDataWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AddDataWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepModule, declarations: [AddDataWizardStepComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptDropdownModule,
            i1.AdaptIconModule,
            i1.AdaptRxCheckboxModule,
            i1.AdaptRxSelectModule,
            i1.AdaptRxSwitchModule,
            i8.CommonModule,
            i2$1.ExpressionFormControlModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i5.RecordGridModule,
            i2.RxDefinitionModule,
            i2$1.RxDefinitionPickerModule,
            i3.TranslateModule], exports: [AddDataWizardStepComponent] });
    /** @nocollapse */ AddDataWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepModule, imports: [[
                i1.AdaptButtonModule,
                i1.AdaptDropdownModule,
                i1.AdaptIconModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxSelectModule,
                i1.AdaptRxSwitchModule,
                i8.CommonModule,
                i2$1.ExpressionFormControlModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i5.RecordGridModule,
                i2.RxDefinitionModule,
                i2$1.RxDefinitionPickerModule,
                i3.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddDataWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptDropdownModule,
                            i1.AdaptIconModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptRxSwitchModule,
                            i8.CommonModule,
                            i2$1.ExpressionFormControlModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i5.RecordGridModule,
                            i2.RxDefinitionModule,
                            i2$1.RxDefinitionPickerModule,
                            i3.TranslateModule
                        ],
                        declarations: [AddDataWizardStepComponent],
                        exports: [AddDataWizardStepComponent]
                    }]
            }] });

    var DownloadWizardStepModule = /** @class */ (function () {
        function DownloadWizardStepModule() {
        }
        return DownloadWizardStepModule;
    }());
    /** @nocollapse */ DownloadWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DownloadWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepModule, declarations: [DownloadWizardStepComponent], imports: [i8.CommonModule, i1.AdaptButtonModule, i3.TranslateModule], exports: [DownloadWizardStepComponent] });
    /** @nocollapse */ DownloadWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepModule, imports: [[i8.CommonModule, i1.AdaptButtonModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i1.AdaptButtonModule, i3.TranslateModule],
                        declarations: [DownloadWizardStepComponent],
                        exports: [DownloadWizardStepComponent]
                    }]
            }] });

    var OptionsWizardStepModule = /** @class */ (function () {
        function OptionsWizardStepModule() {
        }
        return OptionsWizardStepModule;
    }());
    /** @nocollapse */ OptionsWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ OptionsWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepModule, declarations: [OptionsWizardStepComponent], imports: [i1.AdaptRxCheckboxModule,
            i1.AdaptRxLabelModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptTreeModule,
            i1.AdaptRxSelectModule,
            i8.CommonModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i3$1.ReadOnlyFieldModule,
            i3.TranslateModule], exports: [OptionsWizardStepComponent] });
    /** @nocollapse */ OptionsWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepModule, imports: [[
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxLabelModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptTreeModule,
                i1.AdaptRxSelectModule,
                i8.CommonModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i3$1.ReadOnlyFieldModule,
                i3.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OptionsWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxLabelModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptTreeModule,
                            i1.AdaptRxSelectModule,
                            i8.CommonModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i3$1.ReadOnlyFieldModule,
                            i3.TranslateModule
                        ],
                        declarations: [OptionsWizardStepComponent],
                        exports: [OptionsWizardStepComponent]
                    }]
            }] });

    var OrderDataWizardStepModule = /** @class */ (function () {
        function OrderDataWizardStepModule() {
        }
        return OrderDataWizardStepModule;
    }());
    /** @nocollapse */ OrderDataWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ OrderDataWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepModule, declarations: [OrderDataWizardStepComponent], imports: [i8.CommonModule, i4.FormsModule, i3.TranslateModule, i1.AdaptButtonModule, i2.RxDefinitionModule, i1.AdaptEmptyStateModule], exports: [OrderDataWizardStepComponent] });
    /** @nocollapse */ OrderDataWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepModule, imports: [[i8.CommonModule, i4.FormsModule, i3.TranslateModule, i1.AdaptButtonModule, i2.RxDefinitionModule, i1.AdaptEmptyStateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OrderDataWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i4.FormsModule, i3.TranslateModule, i1.AdaptButtonModule, i2.RxDefinitionModule, i1.AdaptEmptyStateModule],
                        declarations: [OrderDataWizardStepComponent],
                        exports: [OrderDataWizardStepComponent]
                    }]
            }] });

    var PackageWizardStepModule = /** @class */ (function () {
        function PackageWizardStepModule() {
        }
        return PackageWizardStepModule;
    }());
    /** @nocollapse */ PackageWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PackageWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepModule, declarations: [PackageWizardStepComponent], imports: [i8.CommonModule, i1.AdaptAlertModule, i1.AdaptButtonModule, i3.TranslateModule, i1.AdaptRxTextareaModule, i4.FormsModule], exports: [PackageWizardStepComponent] });
    /** @nocollapse */ PackageWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepModule, imports: [[i8.CommonModule, i1.AdaptAlertModule, i1.AdaptButtonModule, i3.TranslateModule, i1.AdaptRxTextareaModule, i4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PackageWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i1.AdaptAlertModule, i1.AdaptButtonModule, i3.TranslateModule, i1.AdaptRxTextareaModule, i4.FormsModule],
                        declarations: [PackageWizardStepComponent],
                        exports: [PackageWizardStepComponent]
                    }]
            }] });

    var SelectApprovalConfigurationsWizardStepModule = /** @class */ (function () {
        function SelectApprovalConfigurationsWizardStepModule() {
        }
        return SelectApprovalConfigurationsWizardStepModule;
    }());
    /** @nocollapse */ SelectApprovalConfigurationsWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SelectApprovalConfigurationsWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepModule, declarations: [SelectApprovalConfigurationsWizardStepComponent], imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule], exports: [SelectApprovalConfigurationsWizardStepComponent] });
    /** @nocollapse */ SelectApprovalConfigurationsWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepModule, imports: [[i8.CommonModule, i5.RecordGridModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectApprovalConfigurationsWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule],
                        declarations: [SelectApprovalConfigurationsWizardStepComponent],
                        exports: [SelectApprovalConfigurationsWizardStepComponent]
                    }]
            }] });

    var SelectBundleContentDefinitionsWizardStepModule = /** @class */ (function () {
        function SelectBundleContentDefinitionsWizardStepModule() {
        }
        return SelectBundleContentDefinitionsWizardStepModule;
    }());
    /** @nocollapse */ SelectBundleContentDefinitionsWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SelectBundleContentDefinitionsWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepModule, declarations: [SelectBundleContentDefinitionsWizardStepComponent], imports: [i8.CommonModule, i5.RecordGridModule, i2.RxDefinitionModule, i3.TranslateModule], exports: [SelectBundleContentDefinitionsWizardStepComponent] });
    /** @nocollapse */ SelectBundleContentDefinitionsWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepModule, imports: [[i8.CommonModule, i5.RecordGridModule, i2.RxDefinitionModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectBundleContentDefinitionsWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i5.RecordGridModule, i2.RxDefinitionModule, i3.TranslateModule],
                        declarations: [SelectBundleContentDefinitionsWizardStepComponent],
                        exports: [SelectBundleContentDefinitionsWizardStepComponent]
                    }]
            }] });

    var SelectDefinitionsToDeleteWizardStepModule = /** @class */ (function () {
        function SelectDefinitionsToDeleteWizardStepModule() {
        }
        return SelectDefinitionsToDeleteWizardStepModule;
    }());
    /** @nocollapse */ SelectDefinitionsToDeleteWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SelectDefinitionsToDeleteWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepModule, declarations: [SelectDefinitionsToDeleteWizardStepComponent], imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule, i1.AdaptPopoverModule, i1.AdaptIconModule, i2.RxDefinitionModule], exports: [SelectDefinitionsToDeleteWizardStepComponent] });
    /** @nocollapse */ SelectDefinitionsToDeleteWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepModule, imports: [[i8.CommonModule, i5.RecordGridModule, i3.TranslateModule, i1.AdaptPopoverModule, i1.AdaptIconModule, i2.RxDefinitionModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsToDeleteWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule, i1.AdaptPopoverModule, i1.AdaptIconModule, i2.RxDefinitionModule],
                        declarations: [SelectDefinitionsToDeleteWizardStepComponent],
                        exports: [SelectDefinitionsToDeleteWizardStepComponent]
                    }]
            }] });

    var SelectDefinitionsWizardStepModule = /** @class */ (function () {
        function SelectDefinitionsWizardStepModule() {
        }
        return SelectDefinitionsWizardStepModule;
    }());
    /** @nocollapse */ SelectDefinitionsWizardStepModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SelectDefinitionsWizardStepModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepModule, declarations: [SelectDefinitionsWizardStepComponent], imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule], exports: [SelectDefinitionsWizardStepComponent] });
    /** @nocollapse */ SelectDefinitionsWizardStepModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepModule, imports: [[i8.CommonModule, i5.RecordGridModule, i3.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectDefinitionsWizardStepModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i5.RecordGridModule, i3.TranslateModule],
                        declarations: [SelectDefinitionsWizardStepComponent],
                        exports: [SelectDefinitionsWizardStepComponent]
                    }]
            }] });

    var ContentPackageImportLogsModule = /** @class */ (function () {
        function ContentPackageImportLogsModule() {
        }
        return ContentPackageImportLogsModule;
    }());
    /** @nocollapse */ ContentPackageImportLogsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContentPackageImportLogsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsModule, declarations: [ContentPackageImportLogsComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptButtonGroupModule,
            i1.AdaptRxSelectModule,
            i1.AdaptRxTextfieldModule,
            i8.CommonModule,
            i4.FormsModule,
            i3.TranslateModule,
            i3$1.RxBusyIndicatorModule,
            i4.ReactiveFormsModule,
            i5.RecordGridModule,
            i1.AdaptRxLabelModule,
            i9.AdaptTableModule,
            i1.AdaptBusyModule] });
    /** @nocollapse */ ContentPackageImportLogsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsModule, providers: [i8.DatePipe], imports: [[
                i1.AdaptButtonModule,
                i1.AdaptButtonGroupModule,
                i1.AdaptRxSelectModule,
                i1.AdaptRxTextfieldModule,
                i8.CommonModule,
                i4.FormsModule,
                i3.TranslateModule,
                i3$1.RxBusyIndicatorModule,
                i4.ReactiveFormsModule,
                i5.RecordGridModule,
                i1.AdaptRxLabelModule,
                i9.AdaptTableModule,
                i1.AdaptBusyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContentPackageImportLogsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContentPackageImportLogsComponent],
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptButtonGroupModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptRxTextfieldModule,
                            i8.CommonModule,
                            i4.FormsModule,
                            i3.TranslateModule,
                            i3$1.RxBusyIndicatorModule,
                            i4.ReactiveFormsModule,
                            i5.RecordGridModule,
                            i1.AdaptRxLabelModule,
                            i9.AdaptTableModule,
                            i1.AdaptBusyModule
                        ],
                        providers: [i8.DatePipe]
                    }]
            }] });

    var ManageContentPackagesModule = /** @class */ (function () {
        function ManageContentPackagesModule() {
        }
        return ManageContentPackagesModule;
    }());
    /** @nocollapse */ ManageContentPackagesModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ManageContentPackagesModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesModule, declarations: [ManageContentPackagesComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptButtonGroupModule,
            i1.AdaptRxSelectModule,
            i1.AdaptRxTextfieldModule,
            i8.CommonModule,
            i4.FormsModule,
            i3.TranslateModule,
            i3$1.RxBusyIndicatorModule,
            i4.ReactiveFormsModule,
            i5.RecordGridModule,
            i1.AdaptRxLabelModule,
            i9.AdaptTableModule,
            i1.AdaptBusyModule] });
    /** @nocollapse */ ManageContentPackagesModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesModule, providers: [i8.DatePipe], imports: [[
                i1.AdaptButtonModule,
                i1.AdaptButtonGroupModule,
                i1.AdaptRxSelectModule,
                i1.AdaptRxTextfieldModule,
                i8.CommonModule,
                i4.FormsModule,
                i3.TranslateModule,
                i3$1.RxBusyIndicatorModule,
                i4.ReactiveFormsModule,
                i5.RecordGridModule,
                i1.AdaptRxLabelModule,
                i9.AdaptTableModule,
                i1.AdaptBusyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageContentPackagesModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ManageContentPackagesComponent],
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptButtonGroupModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptRxTextfieldModule,
                            i8.CommonModule,
                            i4.FormsModule,
                            i3.TranslateModule,
                            i3$1.RxBusyIndicatorModule,
                            i4.ReactiveFormsModule,
                            i5.RecordGridModule,
                            i1.AdaptRxLabelModule,
                            i9.AdaptTableModule,
                            i1.AdaptBusyModule
                        ],
                        providers: [i8.DatePipe]
                    }]
            }] });

    var BundleDetailsModule = /** @class */ (function () {
        function BundleDetailsModule() {
        }
        return BundleDetailsModule;
    }());
    /** @nocollapse */ BundleDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BundleDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsModule, declarations: [BundleDetailsComponent], imports: [i8.CommonModule,
            i1.AdaptButtonModule,
            i1.AdaptTabsModule,
            i1$1.RouterModule,
            i1.AdaptIconModule,
            i1.AdaptPopoverModule,
            i1.AdaptDropdownModule,
            i3.TranslateModule,
            AddBundleContentDataWizardStepModule,
            AddDataWizardStepModule,
            ContentPackageImportLogsModule,
            DownloadWizardStepModule,
            ManageContentPackagesModule,
            OptionsWizardStepModule,
            OrderDataWizardStepModule,
            PackageWizardStepModule,
            SelectApprovalConfigurationsWizardStepModule,
            SelectBundleContentDefinitionsWizardStepModule,
            SelectDefinitionsToDeleteWizardStepModule,
            SelectDefinitionsWizardStepModule], exports: [BundleDetailsComponent] });
    /** @nocollapse */ BundleDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsModule, imports: [[
                i8.CommonModule,
                i1.AdaptButtonModule,
                i1.AdaptTabsModule,
                i1$1.RouterModule,
                i1.AdaptIconModule,
                i1.AdaptPopoverModule,
                i1.AdaptDropdownModule,
                i3.TranslateModule,
                AddBundleContentDataWizardStepModule,
                AddDataWizardStepModule,
                ContentPackageImportLogsModule,
                DownloadWizardStepModule,
                ManageContentPackagesModule,
                OptionsWizardStepModule,
                OrderDataWizardStepModule,
                PackageWizardStepModule,
                SelectApprovalConfigurationsWizardStepModule,
                SelectBundleContentDefinitionsWizardStepModule,
                SelectDefinitionsToDeleteWizardStepModule,
                SelectDefinitionsWizardStepModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BundleDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i1.AdaptButtonModule,
                            i1.AdaptTabsModule,
                            i1$1.RouterModule,
                            i1.AdaptIconModule,
                            i1.AdaptPopoverModule,
                            i1.AdaptDropdownModule,
                            i3.TranslateModule,
                            AddBundleContentDataWizardStepModule,
                            AddDataWizardStepModule,
                            ContentPackageImportLogsModule,
                            DownloadWizardStepModule,
                            ManageContentPackagesModule,
                            OptionsWizardStepModule,
                            OrderDataWizardStepModule,
                            PackageWizardStepModule,
                            SelectApprovalConfigurationsWizardStepModule,
                            SelectBundleContentDefinitionsWizardStepModule,
                            SelectDefinitionsToDeleteWizardStepModule,
                            SelectDefinitionsWizardStepModule
                        ],
                        declarations: [BundleDetailsComponent],
                        exports: [BundleDetailsComponent]
                    }]
            }] });

    var RecordDataEditorModule = /** @class */ (function () {
        function RecordDataEditorModule() {
        }
        return RecordDataEditorModule;
    }());
    /** @nocollapse */ RecordDataEditorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ RecordDataEditorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorModule, declarations: [RecordDataEditorComponent], imports: [i8.CommonModule,
            i2$1.RxIframeModule,
            i3$1.RxBusyIndicatorModule,
            i3.TranslateModule,
            i5.RecordGridModule,
            i1.AdaptButtonModule,
            i2.RxDefinitionModule,
            i5.ActionButtonModule], exports: [RecordDataEditorComponent] });
    /** @nocollapse */ RecordDataEditorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorModule, imports: [[
                i8.CommonModule,
                i2$1.RxIframeModule,
                i3$1.RxBusyIndicatorModule,
                i3.TranslateModule,
                i5.RecordGridModule,
                i1.AdaptButtonModule,
                i2.RxDefinitionModule,
                i5.ActionButtonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataEditorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i2$1.RxIframeModule,
                            i3$1.RxBusyIndicatorModule,
                            i3.TranslateModule,
                            i5.RecordGridModule,
                            i1.AdaptButtonModule,
                            i2.RxDefinitionModule,
                            i5.ActionButtonModule
                        ],
                        declarations: [RecordDataEditorComponent],
                        exports: [RecordDataEditorComponent]
                    }]
            }] });

    var DesignerFrameModule = /** @class */ (function () {
        function DesignerFrameModule() {
        }
        return DesignerFrameModule;
    }());
    /** @nocollapse */ DesignerFrameModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DesignerFrameModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameModule, declarations: [DesignerFrameComponent], imports: [i8.CommonModule, i2$1.RxIframeModule, i3$1.RxBusyIndicatorModule], exports: [DesignerFrameComponent] });
    /** @nocollapse */ DesignerFrameModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameModule, imports: [[i8.CommonModule, i2$1.RxIframeModule, i3$1.RxBusyIndicatorModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DesignerFrameModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i2$1.RxIframeModule, i3$1.RxBusyIndicatorModule],
                        declarations: [DesignerFrameComponent],
                        exports: [DesignerFrameComponent]
                    }]
            }] });

    var CreateBundleModalModule = /** @class */ (function () {
        function CreateBundleModalModule() {
        }
        return CreateBundleModalModule;
    }());
    /** @nocollapse */ CreateBundleModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CreateBundleModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalModule, declarations: [CreateBundleModalComponent], imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule, i4.FormsModule, i4.ReactiveFormsModule] });
    /** @nocollapse */ CreateBundleModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalModule, imports: [[i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule, i4.FormsModule, i4.ReactiveFormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateBundleModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CreateBundleModalComponent],
                        imports: [i8.CommonModule, i3.TranslateModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule, i4.FormsModule, i4.ReactiveFormsModule]
                    }]
            }] });

    var WorkspaceModule = /** @class */ (function () {
        function WorkspaceModule() {
        }
        return WorkspaceModule;
    }());
    /** @nocollapse */ WorkspaceModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ WorkspaceModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceModule, declarations: [WorkspaceComponent], imports: [i8.CommonModule,
            i9.AdaptTableModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i1.AdaptButtonModule,
            i1.AdaptButtonGroupModule,
            i1.AdaptDropdownModule,
            i3.TranslateModule,
            CreateBundleModalModule,
            i1$1.RouterModule] });
    /** @nocollapse */ WorkspaceModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceModule, imports: [[
                i8.CommonModule,
                i9.AdaptTableModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i1.AdaptButtonModule,
                i1.AdaptButtonGroupModule,
                i1.AdaptDropdownModule,
                i3.TranslateModule,
                CreateBundleModalModule,
                i1$1.RouterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WorkspaceModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [WorkspaceComponent],
                        imports: [
                            i8.CommonModule,
                            i9.AdaptTableModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i1.AdaptButtonModule,
                            i1.AdaptButtonGroupModule,
                            i1.AdaptDropdownModule,
                            i3.TranslateModule,
                            CreateBundleModalModule,
                            i1$1.RouterModule
                        ]
                    }]
            }] });

    var CopyDefinitionModule = /** @class */ (function () {
        function CopyDefinitionModule() {
        }
        return CopyDefinitionModule;
    }());
    /** @nocollapse */ CopyDefinitionModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CopyDefinitionModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionModule, declarations: [CopyDefinitionComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptRxSelectModule,
            i8.CommonModule,
            i4.FormsModule,
            i4.ReactiveFormsModule,
            i3.TranslateModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptBusyModule] });
    /** @nocollapse */ CopyDefinitionModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionModule, imports: [[
                i1.AdaptButtonModule,
                i1.AdaptRxSelectModule,
                i8.CommonModule,
                i4.FormsModule,
                i4.ReactiveFormsModule,
                i3.TranslateModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptBusyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CopyDefinitionModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CopyDefinitionComponent],
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptRxSelectModule,
                            i8.CommonModule,
                            i4.FormsModule,
                            i4.ReactiveFormsModule,
                            i3.TranslateModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptBusyModule
                        ]
                    }]
            }] });

    var ComBmcArsysRxInnovationstudioModule = /** @class */ (function () {
        function ComBmcArsysRxInnovationstudioModule() {
        }
        return ComBmcArsysRxInnovationstudioModule;
    }());
    /** @nocollapse */ ComBmcArsysRxInnovationstudioModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ComBmcArsysRxInnovationstudioModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioModule, imports: [i8.CommonModule,
            ComBmcArsysRxInnovationstudioRoutingModule,
            BundleDetailsModule,
            BundleDefinitionsModule,
            DesignerFrameModule,
            designer$4.DocumentDesignerPageModule,
            CopyDefinitionModule,
            RecordDataEditorModule,
            WorkspaceModule,
            designerPage.RxViewDesignerPageModule,
            shellDesignerPage.RxShellDesignerPageModule,
            designer$1.RxAssociationDesignerPageModule,
            designer$2.RxNamedListDesignerPageModule,
            designer.ProcessDesignerPageModule,
            i7.RecordDesignerPageModule,
            designer$3.RxWebApiDesignerPageModule,
            designer$5.RxEventDesignerPageModule,
            designer$6.ConfigDesignerPageModule] });
    /** @nocollapse */ ComBmcArsysRxInnovationstudioModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioModule, imports: [[
                i8.CommonModule,
                ComBmcArsysRxInnovationstudioRoutingModule,
                BundleDetailsModule,
                BundleDefinitionsModule,
                DesignerFrameModule,
                designer$4.DocumentDesignerPageModule,
                CopyDefinitionModule,
                RecordDataEditorModule,
                WorkspaceModule,
                designerPage.RxViewDesignerPageModule,
                shellDesignerPage.RxShellDesignerPageModule,
                designer$1.RxAssociationDesignerPageModule,
                designer$2.RxNamedListDesignerPageModule,
                designer.ProcessDesignerPageModule,
                i7.RecordDesignerPageModule,
                designer$3.RxWebApiDesignerPageModule,
                designer$5.RxEventDesignerPageModule,
                designer$6.ConfigDesignerPageModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComBmcArsysRxInnovationstudioModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            ComBmcArsysRxInnovationstudioRoutingModule,
                            BundleDetailsModule,
                            BundleDefinitionsModule,
                            DesignerFrameModule,
                            designer$4.DocumentDesignerPageModule,
                            CopyDefinitionModule,
                            RecordDataEditorModule,
                            WorkspaceModule,
                            designerPage.RxViewDesignerPageModule,
                            shellDesignerPage.RxShellDesignerPageModule,
                            designer$1.RxAssociationDesignerPageModule,
                            designer$2.RxNamedListDesignerPageModule,
                            designer.ProcessDesignerPageModule,
                            i7.RecordDesignerPageModule,
                            designer$3.RxWebApiDesignerPageModule,
                            designer$5.RxEventDesignerPageModule,
                            designer$6.ConfigDesignerPageModule
                        ]
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ComBmcArsysRxInnovationstudioModule = ComBmcArsysRxInnovationstudioModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=helix-com-bmc-arsys-rx-innovationstudio.umd.js.map
