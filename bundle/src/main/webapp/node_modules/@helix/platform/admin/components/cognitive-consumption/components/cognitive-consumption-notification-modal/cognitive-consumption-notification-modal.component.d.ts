import { Injector, OnInit } from '@angular/core';
import { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';
import { ActiveModalRef, AdaptModalService } from '@bmc-ux/adapt-angular';
import { IPlainObject, RxCurrentUserService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';
import { RxModalClass } from '@helix/platform/ui-kit';
import { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';
import { TranslateService } from '@ngx-translate/core';
import { Observable, Subscription } from 'rxjs';
import { RxCognitiveConsumptionService } from '../../cognitive-consumption.service';
import { ICognitiveConsumptionGroup, ICognitiveConsumptionNotificationEntity } from '../../cognitive-consumption.types';
import * as i0 from "@angular/core";
export declare class CognitiveConsumptionNotificationModalComponent extends RxModalClass implements OnInit {
    private activeModalRef;
    private adaptModalService;
    private rxCognitiveConsumptionService;
    private rxCurrentUserService;
    private rxLogService;
    private rxNotificationService;
    private translateService;
    protected injector: Injector;
    availableEmailNotificationRecipientsRecordGrid: RecordGridComponent;
    notificationForm: NgForm;
    busy: Subscription;
    entity: ICognitiveConsumptionNotificationEntity;
    group: ICognitiveConsumptionGroup;
    isAdministrator: boolean;
    label: string;
    modalData: IPlainObject;
    recordGridConfig: Observable<IRecordGridConfig>;
    isEdit: boolean;
    selectedEmailRecipients: string[];
    thresholds: IPlainObject[];
    constructor(activeModalRef: ActiveModalRef, adaptModalService: AdaptModalService, rxCognitiveConsumptionService: RxCognitiveConsumptionService, rxCurrentUserService: RxCurrentUserService, rxLogService: RxLogService, rxNotificationService: RxNotificationService, translateService: TranslateService, injector: Injector);
    ngOnInit(): void;
    isDirty(): boolean;
    canSelectRecipients(): boolean;
    getEmptyCapacityValueValidator(): (control: AbstractControl) => ValidationErrors | null;
    getEmptyThresholdValuesValidator(): (control: AbstractControl) => ValidationErrors | null;
    isSaveButtonDisabled(): boolean;
    onCloseClick(): void;
    onMoveToSelectedClick(): void;
    onNotificationHistoryClick(): void;
    onRemoveRecipientClick(index: number): void;
    onSaveClick(): void;
    onThresholdCounterModelChange(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CognitiveConsumptionNotificationModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CognitiveConsumptionNotificationModalComponent, "rx-cognitive-consumption-notification-modal", never, {}, {}, never, never>;
}
