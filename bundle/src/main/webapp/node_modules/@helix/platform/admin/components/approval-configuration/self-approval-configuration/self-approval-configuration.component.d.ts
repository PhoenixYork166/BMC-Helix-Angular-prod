import { Injector, OnInit, TemplateRef } from '@angular/core';
import { IExpressionFormControlOptions, RxExpressionEditorService } from '@helix/platform/shared/components';
import { RxApprovalExpressionConfigurator } from '../approval-expression-configurator';
import { RxDefinitionNameService, RxGlobalCacheService, RxNotificationService } from '@helix/platform/shared/api';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { RxRecordDefinitionCacheService } from '@helix/platform/record/api';
import { Alert, RxSelectOption, RxSelectOptionsGroup } from '@bmc-ux/adapt-angular';
import { FormBuilder, FormGroup } from '@angular/forms';
import { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';
import { RxApprovalMappingDataPageService } from './approval-mapping-data-page.service';
import { RxApprovalConfigurationService } from '../approval-configuration.service';
import { RxModalService } from '@helix/platform/ui-kit';
import { DataCellTemplateParams } from '@bmc-ux/adapt-table';
import * as i0 from "@angular/core";
export declare class SelfApprovalConfigurationComponent implements OnInit {
    private injector;
    private formBuilder;
    private rxModalService;
    protected translateService: TranslateService;
    private rxGlobalCacheService;
    private rxNotificationService;
    protected rxDefinitionNameService: RxDefinitionNameService;
    private rxExpressionEditorService;
    private rxApprovalConfigurationService;
    protected rxRecordDefinitionCacheService: RxRecordDefinitionCacheService;
    private rxApprovalMappingDataPageService;
    private dialogApi;
    registeredRecordDefinitionName: string;
    definitionNameCellTemplate: TemplateRef<DataCellTemplateParams>;
    constructor(injector: Injector, formBuilder: FormBuilder, rxModalService: RxModalService, translateService: TranslateService, rxGlobalCacheService: RxGlobalCacheService, rxNotificationService: RxNotificationService, rxDefinitionNameService: RxDefinitionNameService, rxExpressionEditorService: RxExpressionEditorService, rxApprovalConfigurationService: RxApprovalConfigurationService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxApprovalMappingDataPageService: RxApprovalMappingDataPageService);
    protected expressionConfigurator: RxApprovalExpressionConfigurator;
    alertConfig: Alert;
    options: IExpressionFormControlOptions;
    selfApprovalConfigurationForm: FormGroup;
    grid: RecordGridComponent;
    gridConfig: Observable<IRecordGridConfig>;
    processOptions: RxSelectOptionsGroup[];
    loadingProcesses: boolean;
    isUpdateButtonVisible: boolean;
    ngOnInit(): void;
    private getData;
    private loadProcesses;
    onEvent(): void;
    private selectApprovalQualificationExpression;
    createSelfApprovalConfiguration(): void;
    updateSelfApprovalConfiguration(): void;
    private getSelfApprovalConfiguration;
    private setCurrentRecordValuesToForm;
    private deleteConfiguration;
    clearFormValues(): void;
    optionFormatter(option: RxSelectOption): string;
    private getRecordDefinition;
    private getColumns;
    isDirty(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelfApprovalConfigurationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelfApprovalConfigurationComponent, "rx-self-approval-configuration", never, { "registeredRecordDefinitionName": "registeredRecordDefinitionName"; }, {}, never, never>;
}
