import { Injector, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';
import { ActiveModalRef, AdaptTreeNodeTyped, RxSelectOption, TreeWrap } from '@bmc-ux/adapt-angular';
import { IFunctionalRole, IFunctionalRoleDescriptor, RxGlobalCacheService, RxNotificationService, RxRoleDataPageService } from '@helix/platform/shared/api';
import { RxModalClass } from '@helix/platform/ui-kit';
import { Subscription } from 'rxjs';
import { RxFuntionalRoleService } from '../functional-role.service';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class FunctionalRoleEditorComponent extends RxModalClass implements OnInit, OnDestroy {
    private rxGlobalCacheService;
    private activeModalRef;
    private rxRoleDataPage;
    private rxFuntionalRoleService;
    private rxNotificationService;
    private translateService;
    protected injector: Injector;
    applicationOptions: RxSelectOption[];
    availableRoles: AdaptTreeNodeTyped<IFunctionalRoleDescriptor>[];
    busy: Subscription;
    functionalRole: IFunctionalRole;
    isEditMode: boolean;
    isSaveButtonDisabled: boolean;
    selectedApplication: RxSelectOption;
    private oldRoleName;
    private selectedRolesList;
    private destroyed$;
    treeWrap: TreeWrap;
    functionalRoleEditorForm: NgForm;
    validatorFn: any;
    constructor(rxGlobalCacheService: RxGlobalCacheService, activeModalRef: ActiveModalRef, rxRoleDataPage: RxRoleDataPageService, rxFuntionalRoleService: RxFuntionalRoleService, rxNotificationService: RxNotificationService, translateService: TranslateService, injector: Injector);
    get selectedRoles(): AdaptTreeNodeTyped<IFunctionalRoleDescriptor>[];
    set selectedRoles(roles: AdaptTreeNodeTyped<IFunctionalRoleDescriptor>[]);
    ngOnInit(): void;
    isDirty(): boolean;
    private getChildren;
    private checkAndAddToSelectedRoles;
    private updateParentNodesForSelectedRoles;
    optionFormatter(option: RxSelectOption): string;
    save(): void;
    functionalRoleNameValidator(control: AbstractControl): ValidationErrors | null;
    cancel(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FunctionalRoleEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FunctionalRoleEditorComponent, "rx-functional-role-editor", never, {}, {}, never, never>;
}
