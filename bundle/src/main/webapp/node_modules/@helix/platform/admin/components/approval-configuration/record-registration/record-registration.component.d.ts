import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { RxApprovalConfigurationService } from '../approval-configuration.service';
import { IFieldDefinition, IRecordDefinition, ISecurityLabel, RxRecordDefinitionCacheService, RxRecordInstanceDataPageService } from '@helix/platform/record/api';
import { IDefinitionPickerComponentOptions } from '@helix/platform/shared/components';
import { IRecordRegistration } from '../approval-configuration.types';
import { Observable } from 'rxjs';
import { RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import { IFieldDefinitionPickerComponentOptions } from './field-definition-picker/field-definition-picker-component.types';
import { AdaptRxControlLabelTooltip, Alert } from '@bmc-ux/adapt-angular';
import { RxFieldDefinitionPickerService } from './field-definition-picker/field-definition-picker.service';
import { RxRecordGridUtilsService } from '@helix/platform/view/components';
import * as i0 from "@angular/core";
export declare class RecordRegistrationComponent implements OnInit, OnDestroy {
    private formBuilder;
    private changeDetector;
    private translateService;
    private rxDefinitionNameService;
    private rxApprovalConfigurationService;
    private rxRecordDefinitionCacheService;
    private rxRecordInstanceDataPageService;
    private rxNotificationService;
    private rxRecordGridUtilsService;
    private rxFieldDefinitionPickerService;
    registeredRecordDefinitionName: string;
    isEditMode: boolean;
    recordRegistered: EventEmitter<string>;
    recordRegistrationForm: FormGroup;
    recordDefinition: IRecordDefinition;
    recordDefinitionSecurityLabels: ISecurityLabel[];
    fieldNames: string[];
    private isSaveInProgress;
    alertConfig: Alert;
    recordDefinitionPickerOptions: IDefinitionPickerComponentOptions;
    permissionTooltip: AdaptRxControlLabelTooltip;
    justificationTooltip: AdaptRxControlLabelTooltip;
    private recordDefinitionName$;
    private fieldsTree$;
    requesterFieldDefinitionPickerOptions$: Observable<IFieldDefinitionPickerComponentOptions>;
    approverExclusionFieldDefinitionPickerOptions$: Observable<IFieldDefinitionPickerComponentOptions>;
    summaryFieldDefinitionPickerOptions$: Observable<IFieldDefinitionPickerComponentOptions>;
    notesFieldDefinitionPickerOptions$: Observable<IFieldDefinitionPickerComponentOptions>;
    fieldDefinitionPickerOptions$: Observable<IFieldDefinitionPickerComponentOptions>;
    private destroyed$;
    private isNewConfiguration;
    constructor(formBuilder: FormBuilder, changeDetector: ChangeDetectorRef, translateService: TranslateService, rxDefinitionNameService: RxDefinitionNameService, rxApprovalConfigurationService: RxApprovalConfigurationService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService, rxNotificationService: RxNotificationService, rxRecordGridUtilsService: RxRecordGridUtilsService, rxFieldDefinitionPickerService: RxFieldDefinitionPickerService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    createRecordRegistrationForm(): FormGroup;
    initializeRecordRegistrationForm(): void;
    getSecurityLabels(approvalRegistrationRecord: IRecordRegistration): ISecurityLabel[];
    private createAdditionalField;
    private onFieldMappingChange;
    private setAssociatedRecordFieldLabel;
    private onRecordDefinitionChange;
    private initializeFormControls;
    optionFormatter(securityLabel: ISecurityLabel): string;
    justificationReasonOptionFormatter(fieldDefinition: IFieldDefinition): string;
    save(): void;
    canSave(): boolean;
    isFormValid(): boolean;
    isFormDirty(): boolean;
    saveRecordRegistration(): void;
    updateRecordRegistration(): void;
    transformFormControlData(): IRecordRegistration;
    private updateAdditionalFieldLabel;
    reset(): void;
    handleJustificationField(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RecordRegistrationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RecordRegistrationComponent, "rx-record-registration", never, { "registeredRecordDefinitionName": "registeredRecordDefinitionName"; "isEditMode": "isEditMode"; }, { "recordRegistered": "recordRegistered"; }, never, never>;
}
