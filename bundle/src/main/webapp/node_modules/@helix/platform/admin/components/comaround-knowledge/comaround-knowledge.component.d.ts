import { HttpClient } from '@angular/common/http';
import { OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormControl, FormGroup, ValidationErrors } from '@angular/forms';
import { RxAdminSettingsService, RxCommandFactoryService, RxNotificationService } from '@helix/platform/shared/api';
import { ConnectionTestStatus } from '@helix/platform/ui-kit';
import { RxUrlUtilsService } from '@helix/platform/utils';
import { BaseViewComponent } from '@helix/platform/view/runtime';
import { Observable, Subscription } from 'rxjs';
import { RxCognitiveServiceService } from '../cognitive-service/cognitive-service.service';
import { ComaroundPortal } from './comaround-knowledge.interfaces';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class ComaroundKnowledgeAdminComponent extends BaseViewComponent implements OnInit, OnDestroy {
    private formBuilder;
    private rxUrlUtilsService;
    private rxNotificationService;
    private rxAdminSettingsService;
    private rxCommandFactoryService;
    private rxCognitiveServiceService;
    private httpClient;
    private translateService;
    busy: Subscription;
    knowledgeConfigForm: FormGroup;
    connectionTestStatus: ConnectionTestStatus;
    availablePortals: ComaroundPortal[];
    private isNewConfigurationSetting;
    private comaroundComponentSettingsValues;
    private subscription;
    constructor(formBuilder: FormBuilder, rxUrlUtilsService: RxUrlUtilsService, rxNotificationService: RxNotificationService, rxAdminSettingsService: RxAdminSettingsService, rxCommandFactoryService: RxCommandFactoryService, rxCognitiveServiceService: RxCognitiveServiceService, httpClient: HttpClient, translateService: TranslateService);
    private get comaroundConfigFormGroup();
    get portalControl(): FormControl;
    ngOnInit(): void;
    private getComaroundComponentSettings;
    getAvailablePortals(): Observable<ComaroundPortal[]>;
    portalOptionFormatter(option: ComaroundPortal): string;
    private getValue;
    ngOnDestroy(): void;
    isSaveButtonDisabled(): boolean;
    private setValue;
    saveConfiguration(): void;
    private updateComaroundTokenWithLatestValues;
    onTestConnection(): void;
    validateUrl(): (control: AbstractControl) => ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<ComaroundKnowledgeAdminComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ComaroundKnowledgeAdminComponent, "rx-admin-comaround-knowledge", never, {}, {}, never, never>;
}
