import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { IApprovalFlowGroup, IApprovalFlowGroupConfigurationResponse, IRecordRegistration, ISelfApprovalConfiguration } from './approval-configuration.types';
import { IRecordDefinition } from '@helix/platform/record/api';
import { IFunctionalRoleDescriptor, RxFunctionalRoleDataPageService } from '@helix/platform/shared/api';
import * as i0 from "@angular/core";
export declare class RxApprovalConfigurationService {
    private httpClient;
    private rxFunctionalRoleDataPageService;
    selfApprovalApi: string;
    registrationApi: string;
    flowConfigurationApi: string;
    functionalRoles$: Observable<IFunctionalRoleDescriptor[]>;
    constructor(httpClient: HttpClient, rxFunctionalRoleDataPageService: RxFunctionalRoleDataPageService);
    getRegisteredRecordDetails(registeredRecordDefinitionName: string): Observable<IRecordRegistration>;
    registerRecord(approvalRegistrationRecord: IRecordRegistration): Observable<any>;
    updateRecord(approvalRegistrationRecord: IRecordRegistration): Observable<any>;
    unRegisterRecord(definitionName: string): Observable<any>;
    createSelfApprovalConfiguration(configuration: ISelfApprovalConfiguration): Observable<any>;
    updateSelfApprovalConfiguration(id: string, configuration: ISelfApprovalConfiguration): Observable<any>;
    deleteSelfApprovalConfiguration(id: string): Observable<any>;
    getFunctionalRoles(): Observable<IFunctionalRoleDescriptor[]>;
    getApprovalFlowConfigurations(registeredRecordDefinition: string): Observable<IApprovalFlowGroupConfigurationResponse>;
    updateApprovalFlowGroup(flowGroupName: string, flowGroupConfiguration: IApprovalFlowGroup, recordDefinitionName: string): Observable<any>;
    saveApprovalFlowGroup(flowGroupConfiguration: IApprovalFlowGroup, recordDefinitionName: string): Observable<any>;
    getApprovalFlowGroup(recordDefinitionName: string, flowGroupName: string): Observable<IApprovalFlowGroup>;
    deleteApprovalFlowGroup(flowGroupName: string, recordDefinitionName: string): Observable<any>;
    getCtmPeopleFormFields(bundleId: string): Observable<IRecordDefinition>;
    isFunctionalRole(approver: string): boolean;
    getFunctionalRoleGuid(approver: string): string;
    isApproverPeople(approver: string): boolean;
    getApproverUser(approver: string): string;
    isFieldIdentifyingApprover(approver: string): boolean;
    getFieldIdentifyingApprover(approver: string): string;
    getLastLabel(approver: string): string;
    isCompany(approver: string): boolean;
    isCompanyOrg(approver: string): boolean;
    isCompanyOrgDept(approver: string): boolean;
    isSupportCompany(approver: string): boolean;
    isSupportCompanyOrg(approver: string): boolean;
    isSupportCompanyOrgGroup(approver: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxApprovalConfigurationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RxApprovalConfigurationService>;
}
