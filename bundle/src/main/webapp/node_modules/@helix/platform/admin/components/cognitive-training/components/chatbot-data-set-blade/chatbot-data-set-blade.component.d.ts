import { Injector, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DockedPanelContext, RxSelectOption } from '@bmc-ux/adapt-angular';
import { RxRecordInstanceService } from '@helix/platform/record/api';
import { IChatbotDefinition, IPlainObject, RxChatbotDefinitionDataPageService } from '@helix/platform/shared/api';
import { IDefinitionPickerComponentOptions } from '@helix/platform/shared/components';
import { Observable } from 'rxjs';
import { RxCognitiveTrainingUtilsService } from '../../cognitive-training-utils.service';
import { RxCognitiveTrainingService } from '../../cognitive-training.service';
import { ICognitiveTrainingDataSet } from '../../cognitive-training.types';
import { TranslateService } from '@ngx-translate/core';
import { RxModalClass } from '@helix/platform/ui-kit';
import * as i0 from "@angular/core";
export declare class ChatbotDataSetBladeComponent extends RxModalClass implements OnInit, OnDestroy {
    private dockedPanelContext;
    private rxChatbotDefinitionDataPageService;
    private rxCognitiveTrainingService;
    private rxCognitiveTrainingUtilsService;
    private rxRecordInstanceService;
    private translateService;
    protected injector: Injector;
    chatbotDataSetForm: NgForm;
    contextData: IPlainObject;
    dataSet: ICognitiveTrainingDataSet;
    localeOptions: RxSelectOption[];
    chatbotDefinitionPickerOptions: IDefinitionPickerComponentOptions;
    csvFileUploadMode: number;
    private chatbotDefinitionName$;
    private chatbotDefinitions$;
    chatbotDefinition$: Observable<IChatbotDefinition>;
    isChatbotTranslationEnabled$: Observable<boolean>;
    chatbotLocaleOptions$: Observable<RxSelectOption[]>;
    constructor(dockedPanelContext: DockedPanelContext, rxChatbotDefinitionDataPageService: RxChatbotDefinitionDataPageService, rxCognitiveTrainingService: RxCognitiveTrainingService, rxCognitiveTrainingUtilsService: RxCognitiveTrainingUtilsService, rxRecordInstanceService: RxRecordInstanceService, translateService: TranslateService, injector: Injector);
    ngOnInit(): void;
    isDirty(): boolean;
    ngOnDestroy(): void;
    onChatbotDefinitionNameChange(chatbotDefinitionName: string): void;
    optionFormatter: (opt: RxSelectOption) => any;
    onSaveClick(): void;
    onCloseClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChatbotDataSetBladeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChatbotDataSetBladeComponent, "rx-chatbot-data-set-blade", never, {}, {}, never, never>;
}
