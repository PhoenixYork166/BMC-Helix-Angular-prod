{"version":3,"file":"helix-platform-view-components.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../libs/platform/view/components/action-button/action-button.types.ts","../../../../libs/platform/view/components/action-button/action-button.service.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.component.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.component.html","../../../../libs/platform/view/components/action-button/action-button-adapter.service.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.module.ts","../../../../libs/platform/view/components/action-button/runtime/action-button.component.ts","../../../../libs/platform/view/components/action-button/runtime/action-button.component.html","../../../../libs/platform/view/components/action-button/runtime/action-button.module.ts","../../../../libs/platform/view/components/button-bar/button-bar.types.ts","../../../../libs/platform/view/components/button-bar/button-bar.service.ts","../../../../libs/platform/view/components/button-bar/runtime/components/button-bar-dropdown-item/button-bar-dropdown-item.component.ts","../../../../libs/platform/view/components/button-bar/runtime/components/button-bar-dropdown-item/button-bar-dropdown-item.component.html","../../../../libs/platform/view/components/button-bar/runtime/button-bar.component.ts","../../../../libs/platform/view/components/button-bar/runtime/button-bar.component.html","../../../../libs/platform/view/components/button-bar/runtime/button-bar.module.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.component.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.component.html","../../../../libs/platform/view/components/button-bar/design/button-bar-design.model.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.module.ts","../../../../libs/platform/view/components/container/runtime/container.component.ts","../../../../libs/platform/view/components/container/runtime/container.component.html","../../../../libs/platform/view/components/container/runtime/container-component-definition-adapter.service.ts","../../../../libs/platform/view/components/container/runtime/container.module.ts","../../../../libs/platform/view/components/container/design/container-canvas-item.component.ts","../../../../libs/platform/view/components/container/design/container-canvas-item.component.html","../../../../libs/platform/view/components/container/design/container-design.component.ts","../../../../libs/platform/view/components/container/design/container-design.component.html","../../../../libs/platform/view/components/container/design/container-design.module.ts","../../../../libs/platform/view/components/container/container.types.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.component.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.component.html","../../../../libs/platform/view/components/record-editor/common/record-editor.types.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.html","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.component.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.component.html","../../../../libs/platform/view/components/record-editor/design/record-editor-design-helpers.service.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.module.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.module.ts","../../../../libs/platform/view/components/record-editor/runtime/association-manager.class.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor-form-control.class.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor-form.class.ts","../../../../libs/platform/view/components/record-editor/common/record-editor-utils.service.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.html","../../../../libs/platform/view/components/record-editor/runtime/record-editor-component-definition-adapter.service.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.module.ts","../../../../libs/platform/view/components/record-editor/common/default-record-editor-input-type.service.ts","../../../../libs/platform/view/components/field-components/association/association.types.ts","../../../../libs/platform/view/components/field-components/association/runtime/record-preview-card/record-preview-card.component.ts","../../../../libs/platform/view/components/field-components/association/runtime/record-preview-card/record-preview-card.component.html","../../../../libs/platform/view/components/field-components/association/runtime/association.component.ts","../../../../libs/platform/view/components/field-components/association/runtime/association.component.html","../../../../libs/platform/view/components/field-components/association/runtime/association-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/association/runtime/association.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-container.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-container.component.html","../../../../libs/platform/view/components/field-components/association/design/association-design.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.component.html","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component.html","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.component.html","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-helper.service.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-adapter.service.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/runtime/base-record-editor-field-properties.constant.ts","../../../../libs/platform/view/components/field-components/field-components.constant.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.model.ts","../../../../libs/platform/view/components/field-components/association/design/association-expression-configurator.class.ts","../../../../libs/platform/view/components/field-components/association/association-registration.module.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.component.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.component.html","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/runtime/base-record-editor-field-component.class.ts","../../../../libs/platform/view/components/field-components/attachment-field/attachment-field.constant.ts","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.ts","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.html","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/design/base-record-editor-field-design.class.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.model.ts","../../../../libs/platform/view/components/field-components/attachment-field/attachment-field-registration.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/boolean-field.types.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.html","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.ts","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.html","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.model.ts","../../../../libs/platform/view/components/field-components/boolean-field/boolean-field-registration.module.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.component.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.component.html","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.module.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-adapter.class.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.component.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.component.html","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.module.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.model.ts","../../../../libs/platform/view/components/field-components/date-field/date-field-registration.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.component.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.component.html","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-adapter.class.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.component.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.component.html","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.model.ts","../../../../libs/platform/view/components/field-components/date-time-field/date-time-field-registration.module.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.component.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.component.html","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.module.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.html","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.component.ts","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.component.html","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.module.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.model.ts","../../../../libs/platform/view/components/field-components/decimal-field/decimal-field-registration.module.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.component.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.component.html","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.module.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.module.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.model.ts","../../../../libs/platform/view/components/field-components/integer-field/integer-field-registration.module.ts","../../../../libs/platform/view/components/field-components/selection-field/selection-field.constant.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.component.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.component.html","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.module.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.types.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.component.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.component.html","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.module.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.model.ts","../../../../libs/platform/view/components/field-components/selection-field/selection-field-registration.module.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.component.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.component.html","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-field.component.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-field.component.html","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-component-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.module.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.component.html","../../../../libs/platform/view/components/field-components/select-group/design/select-group-field.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-field.component.html","../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.html","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.model.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.module.ts","../../../../libs/platform/view/components/field-components/select-group/select-group-registration.module.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.component.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.component.html","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.module.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-expression-configurator.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.types.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.html","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.module.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.model.ts","../../../../libs/platform/view/components/field-components/text-field/text-field-registration.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.component.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.component.html","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.component.ts","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.component.html","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.model.ts","../../../../libs/platform/view/components/field-components/textarea-field/textarea-field-registration.module.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.component.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.component.html","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.module.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-adapter.class.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.html","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.module.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.model.ts","../../../../libs/platform/view/components/field-components/time-field/time-field-registration.module.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.component.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.component.html","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-helper.service.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.html","../../../../libs/platform/view/components/field-components/extension-container/extension-container.constant.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.module.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.component.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.component.html","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.module.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.model.ts","../../../../libs/platform/view/components/field-components/extension-container/extension-container-registration.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.component.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.component.html","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.model.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.html","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/rich-textarea-field-registration.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.component.ts","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.component.html","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.component.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.component.html","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.model.ts","../../../../libs/platform/view/components/field-components/localized-character-field/localized-character-field-registration.module.ts","../../../../libs/platform/view/components/field-components/field-components.module.ts","../../../../libs/platform/view/components/record-grid/runtime/types/grid-card-layout-width.enum.ts","../../../../libs/platform/view/components/record-grid/common/types/record-grid-column-alignment.enum.ts","../../../../libs/platform/view/components/record-grid/record-grid.constant.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-utils.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component.html","../../../../libs/platform/view/components/record-grid/common/types/cell-display-properties.types.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design.constant.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-option-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/common/types/record-grid.types.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-config-utils.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.html","../../../../libs/platform/view/components/record-grid/common/types/record-grid-advanced-filter-value.class.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.component.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.component.html","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/rx-adapt-datetime-moment-adapter.service.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component.ts","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component.html","../../../../libs/platform/view/components/record-grid/runtime/types/query-filters-logic.enum.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-advanced-filtering.service.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-filter-helper.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter-config.service.ts","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.component.ts","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.types.ts","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.module.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.module.ts","../../../../libs/platform/view/components/record-grid/common/record-grid-common.module.ts","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-helper.service.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design.types.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design-utils.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.module.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design-adapter.service.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.module.ts","../../../../libs/platform/view/components/record-grid/runtime/filter-by-card-selection-dialog/filter-by-card-selection-dialog.component.ts","../../../../libs/platform/view/components/record-grid/runtime/filter-by-card-selection-dialog/filter-by-card-selection-dialog.component.html","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-user-preferences.service.ts","../../../../libs/platform/view/components/record-grid/runtime/types/row-selection-mode.enum.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-configurator.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-shared-filter-presets-cache.service.ts","../../../../libs/platform/view/components/page/runtime/page.component.ts","../../../../libs/platform/view/components/page/runtime/page.component.html","../../../../libs/platform/view/components/record-grid/runtime/card-layout-cell-header/card-layout-cell-header.component.ts","../../../../libs/platform/view/components/record-grid/runtime/card-layout-cell-header/card-layout-cell-header.component.html","../../../../libs/platform/view/components/record-grid/runtime/record-grid-card-layout/record-grid-card-layout.directive.ts","../../../../libs/platform/view/components/record-grid/runtime/cell-display-properties/cell-display-properties.directive.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.html","../../../../libs/platform/view/components/record-grid/runtime/record-grid-definition-adapter.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-query-expression-evaluator.service.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.module.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text.component.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text-expression-evaluator.service.ts","../../../../libs/platform/view/components/rich-text/rich-text-definition-adapter.service.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text.module.ts","../../../../libs/platform/view/components/rich-text/design/ckeditor-config.constant.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.html","../../../../libs/platform/view/components/rich-text/design/expression-editor-plugin.service.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.module.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.component.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.component.html","../../../../libs/platform/view/components/service-list/design/service-list-design.module.ts","../../../../libs/platform/view/components/service-list/runtime/service-list.component.ts","../../../../libs/platform/view/components/service-list/runtime/service-list.component.html","../../../../libs/platform/view/components/service-list/runtime/service-list.module.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container.component.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container.component.html","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.component.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.component.html","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel-component-definition-adapter.service.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container-component-definition-adapter.service.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.module.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.component.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.component.html","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.component.ts","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.component.html","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.module.ts","../../../../libs/platform/view/components/page/design/page-design.component.ts","../../../../libs/platform/view/components/page/design/page-design.component.html","../../../../libs/platform/view/components/page/design/page-design.module.ts","../../../../libs/platform/view/components/page/runtime/page-component-definition-adapter.service.ts","../../../../libs/platform/view/components/page/runtime/page.module.ts","../../../../libs/platform/view/components/image/design/image-design.component.ts","../../../../libs/platform/view/components/image/design/image-design.component.html","../../../../libs/platform/view/components/image/design/image-design.module.ts","../../../../libs/platform/view/components/image/image.types.ts","../../../../libs/platform/view/components/image/runtime/image.component.ts","../../../../libs/platform/view/components/image/runtime/image.component.html","../../../../libs/platform/view/components/image/runtime/image.module.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.model.ts","../../../../libs/platform/view/components/action-button/action-button-registration.module.ts","../../../../libs/platform/view/components/button-bar/button-bar-registration.module.ts","../../../../libs/platform/view/components/container/container.constant.ts","../../../../libs/platform/view/components/container/design/container-design.model.ts","../../../../libs/platform/view/components/container/container-registration.module.ts","../../../../libs/platform/view/components/image/design/image-design.model.ts","../../../../libs/platform/view/components/image/image-registration.module.ts","../../../../libs/platform/view/components/page/design/page-design.model.ts","../../../../libs/platform/view/components/page/page-registration.module.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.model.ts","../../../../libs/platform/view/components/record-editor/record-editor-registration.module.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.model.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/record-grid-registration.module.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.model.ts","../../../../libs/platform/view/components/rich-text/rich-text-registration.module.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.model.ts","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.model.ts","../../../../libs/platform/view/components/tab-panel/tab-panel-registration.module.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.model.ts","../../../../libs/platform/view/components/service-list/service-list-registration.module.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.component.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.component.html","../../../../libs/platform/view/components/unknown/design/unknown-design.model.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.module.ts","../../../../libs/platform/view/components/unknown/unknown-registration.module.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.constant.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.component.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.component.html","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping-registration.module.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.constant.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.component.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.component.html","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event-registration.module.ts","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector.component.ts","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector.component.html","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector-registration.module.ts","../../../../libs/platform/view/components/view-preset-selector/view-preset-selector.types.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-data.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector-user-preferences.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/rename-view-preset/rename-view-preset.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/rename-view-preset/rename-view-preset.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector-adapter.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.module.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.module.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.module.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.component.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.component.html","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.ts","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.html","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.model.ts","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.module.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.module.ts","../../../../libs/platform/view/components/view-preset-selector/view-preset-selector-registration.module.ts","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in.component.ts","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in.component.html","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in-registration.module.ts","../../../../libs/platform/view/components/view-components.module.ts","../../../../libs/platform/view/components/helix-platform-view-components.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { IRxDisabledProp, IRxStandardProps } from '@helix/platform/view/api';\n\nexport interface IActionButtonProperties extends IRxStandardProps, IRxDisabledProp {\n  cls?: string;\n  fieldId?: string;\n  icon?: string;\n  iconAlignment?: ActionButtonIconAlignment;\n  iconCls?: string;\n  label?: string;\n  labelKey?: string;\n  recordDefinitionName?: string;\n  recordInstance?: string | any;\n  size?: ActionButtonSize;\n  style?: ActionButtonStyle;\n  // set by association view component for internal action buttons\n  action?: string;\n}\n\nexport enum ActionButtonStyle {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Tertiary = 'tertiary'\n}\n\nexport enum DeprecatedActionButtonStyle {\n  Link = 'link',\n  Clear = 'clear'\n}\n\nexport enum ActionButtonSize {\n  Small = 'small',\n  Default = 'default',\n  Large = 'large'\n}\n\nexport enum ActionButtonIconAlignment {\n  Left = 'left',\n  Right = 'right'\n}\n","import { Injectable } from '@angular/core';\nimport { AdaptButtonComponent } from '@bmc-ux/adapt-angular';\n\nimport { ActionButtonIconAlignment, ActionButtonStyle } from './action-button.types';\n\n@Injectable()\nexport class RxActionButtonService {\n  getButtonType(style: ActionButtonStyle): AdaptButtonComponent['type'] {\n    let result: AdaptButtonComponent['type'];\n\n    switch (style) {\n      case ActionButtonStyle.Secondary:\n        result = 'secondary';\n        break;\n      case ActionButtonStyle.Tertiary:\n        result = 'tertiary';\n        break;\n      default:\n        result = 'primary';\n        break;\n    }\n\n    return result;\n  }\n\n  getIconCssClass(iconClass: string, iconAlignment = ActionButtonIconAlignment.Left): string {\n    return iconClass ? `d-icon-${iconAlignment}-${iconClass}` : '';\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonDesignModel } from './action-button-design.model';\nimport { ActionButtonSize } from '../action-button.types';\n\n@Component({\n  selector: 'rx-action-button-design',\n  templateUrl: './action-button-design.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActionButtonDesignComponent implements OnInit {\n  @Input()\n  model: ActionButtonDesignModel;\n\n  iconCssClass$: Observable<string>;\n  // ButtonColorType must be used instead of any but it's not exported by ADAPT.\n  buttonType$: Observable<any>;\n  size$: Observable<ActionButtonSize>;\n\n  constructor(private rxActionButtonService: RxActionButtonService) {}\n\n  ngOnInit(): void {\n    this.iconCssClass$ = combineLatest([this.model.icon$, this.model.iconAlignment$]).pipe(\n      map(([iconCssName, iconAlignment]) => this.rxActionButtonService.getIconCssClass(iconCssName, iconAlignment))\n    );\n\n    this.buttonType$ = this.model.style$.pipe(map((style) => this.rxActionButtonService.getButtonType(style)));\n    this.size$ = this.model.size$.pipe(map((size) => size || ActionButtonSize.Default));\n  }\n}\n","<button adapt-button [btn-type]=\"buttonType$ | async\" [size]=\"size$ | async\" [ngClass]=\"iconCssClass$ | async\">\n  {{ model.label$ | async }}\n</button>\n","import { Injectable } from '@angular/core';\nimport { includes, get } from 'lodash';\n\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RX_LEGACY_ICONS, IContainerViewComponentDefinition, IViewDefinition } from '@helix/platform/view/api';\nimport { ActionButtonSize, ActionButtonStyle, DeprecatedActionButtonStyle } from './action-button.types';\n\n@Injectable()\nexport class ActionButtonAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  private deprecatedButtonStyles = [DeprecatedActionButtonStyle.Link, DeprecatedActionButtonStyle.Clear];\n\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition) {\n    if (includes(this.deprecatedButtonStyles, componentDefinition.propertiesByName.style)) {\n      componentDefinition.propertiesByName.style = ActionButtonStyle.Tertiary;\n    }\n\n    if (!componentDefinition.propertiesByName.size) {\n      componentDefinition.propertiesByName.size = ActionButtonSize.Small;\n    }\n\n    if (componentDefinition.propertiesByName.icon) {\n      componentDefinition.propertiesByName.icon = get(\n        RX_LEGACY_ICONS,\n        componentDefinition.propertiesByName.icon,\n        componentDefinition.propertiesByName.icon\n      );\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\n\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { IconPickerFormControlModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { ActionListWidgetModule, ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { ActionButtonAdapterService } from '../action-button-adapter.service';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonDesignComponent } from './action-button-design.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptButtonModule,\n    ViewDesignerCanvasModule,\n    ActionListWidgetModule,\n    IconPickerFormControlModule\n  ],\n  declarations: [ActionButtonDesignComponent],\n  entryComponents: [ActionButtonDesignComponent],\n  providers: [RxActionButtonService, ActionButtonAdapterService]\n})\nexport class ActionButtonDesignModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private actionButtonAdapterService: ActionButtonAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.ActionButton,\n      this.actionButtonAdapterService\n    );\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\nimport { BaseViewComponent, IViewComponentSetProperty, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, includes } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonIconAlignment } from '../action-button.types';\n\nimport { IActionButtonConfig, IActionButtonState } from './action-button.types';\n\n@Component({\n  selector: 'rx-action-button',\n  templateUrl: './action-button.component.html',\n  styleUrls: ['./action-button.component.scss']\n})\nexport class ActionButtonComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  api = {\n    click: this.click.bind(this),\n    setProperty: this.setProperty.bind(this)\n  };\n\n  state: IActionButtonState = {};\n\n  isActionInProgress = false;\n  isDisabled = false;\n  buttonType = '';\n\n  @Input()\n  guid: string;\n\n  @Input()\n  config: Observable<IActionButtonConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  @HostBinding('class')\n  get hostClass(): string {\n    const state = this.state;\n    const className = `${RxViewComponentType.ActionButton}_${state.style}`;\n\n    return state.styles ? `${className} ${state.styles}` : className;\n  }\n\n  constructor(\n    private rxLogService: RxLogService,\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxActionButtonService: RxActionButtonService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      Object.assign(this.state, config);\n\n      if (config.labelKey) {\n        this.state.buttonLabel = this.translateService.instant(config.labelKey);\n      } else {\n        this.state.buttonLabel = config.label;\n      }\n\n      this.state.icon = '';\n      this.state.cls = config.cls || '';\n\n      if (config.iconCls || config.icon) {\n        const icon = config.iconCls || config.icon;\n        const iconAlignment = ((config.label || config.labelKey) && config.iconAlignment) || 'left';\n\n        this.state.icon = this.rxActionButtonService.getIconCssClass(icon, iconAlignment as ActionButtonIconAlignment);\n      }\n\n      if (config.iconCls && config.icon) {\n        this.rxLogService.warning('iconCls option is specified, icon will be ignored.');\n      }\n\n      if (!config.cls) {\n        this.buttonType = this.rxActionButtonService.getButtonType(this.state.style);\n      }\n\n      if (config.cls && config.style) {\n        this.rxLogService.warning('cls option is specified, style will be ignored.');\n      }\n\n      this.validateRecordDefinitionName();\n      this.isHidden = this.isHiddenFunc();\n      this.isDisabled = this.isDisabledFunc();\n    });\n  }\n\n  // api\n  click(): Promise<void> {\n    if (!this.isDisabled) {\n      this.isActionInProgress = true;\n      this.isDisabled = true;\n\n      return this\n        .triggerViewActions()\n        .then((res) => {\n          this.isActionInProgress = false;\n          this.isDisabled = this.isDisabledFunc();\n        })\n        .catch((err) => {\n          this.isActionInProgress = false;\n          this.isDisabled = this.isDisabledFunc();\n        });\n    }\n  }\n\n  isDisabledFunc(): boolean {\n    return (\n      Boolean(this.state.disabled) ||\n      this.isActionInProgress ||\n      (this.state.recordInstance &&\n        this.state.fieldId &&\n        this.state.recordInstance.recordDefinitionName === this.state.recordDefinitionName &&\n        find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }) &&\n        find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }).permissionType ===\n          RX_RECORD_DEFINITION.fieldPermissionTypes.view)\n    );\n  }\n\n  isHiddenFunc(): boolean {\n    return (this.isHidden =\n      Boolean(this.state.hidden) ||\n      (this.state.recordInstance &&\n        (this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName ||\n          (this.state.fieldId &&\n            !find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) })))));\n  }\n\n  setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (includes(['hidden', 'disabled'], propertyPath)) {\n      this.state[propertyPath] = value;\n\n      this.notifyPropertyChanged(propertyPath, this.state[propertyPath]);\n    } else {\n      return throwError(`Action Button: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  private validateRecordDefinitionName(): void {\n    if (\n      this.state.recordInstance &&\n      this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName\n    ) {\n      const buttonName = this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.action-button.component-name.label',\n        {\n          label: this.state.label\n        }\n      );\n\n      const errorMessage = this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.action-button.configuration-error.message',\n        {\n          componentName: buttonName\n        }\n      );\n\n      this.rxNotificationService.addErrorMessage(errorMessage);\n    }\n  }\n}\n","<button\n  adapt-button\n  type=\"button\"\n  class=\"mw-100 rx-ellipsis\"\n  *ngIf=\"!isHidden\"\n  [btn-type]=\"buttonType\"\n  [ngClass]=\"[state.icon, state.cls]\"\n  [disabled]=\"isDisabled\"\n  [size]=\"state.size\"\n  (click)=\"api.click($event)\"\n>\n  <span>{{ state.buttonLabel }}</span>\n</button>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptButtonModule, AdaptIconModule } from '@bmc-ux/adapt-angular';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActionButtonAdapterService } from '../action-button-adapter.service';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonComponent } from './action-button.component';\n\n@NgModule({\n  imports: [AdaptButtonModule, CommonModule, TranslateModule, AdaptIconModule],\n  exports: [ActionButtonComponent],\n  declarations: [ActionButtonComponent],\n  entryComponents: [ActionButtonComponent],\n  providers: [RxActionButtonService, ActionButtonAdapterService]\n})\nexport class ActionButtonModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private actionButtonAdapterService: ActionButtonAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.ActionButton,\n      this.actionButtonAdapterService\n    );\n  }\n}\n","export enum RxButtonBarAlignment {\n  Left = 'left',\n  Right = 'right',\n  Center = 'center'\n}\n\nexport const RX_BUTTON_BAR = {\n  alignmentOptions: {\n    left: {\n      id: RxButtonBarAlignment.Left,\n      name: 'Left',\n      cls: 'align-left'\n    },\n    center: {\n      id: RxButtonBarAlignment.Center,\n      name: 'Center',\n      cls: 'align-center'\n    },\n    right: {\n      id: RxButtonBarAlignment.Right,\n      name: 'Right',\n      cls: 'align-right'\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { RxButtonBarAlignment, RX_BUTTON_BAR } from './button-bar.types';\nimport { get } from 'lodash';\n\n@Injectable()\nexport class RxButtonBarService {\n  getAlignClass(alignment: RxButtonBarAlignment): string {\n    return get(RX_BUTTON_BAR.alignmentOptions, [alignment, 'cls'], '');\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ActionButtonComponent } from '../../../../action-button/runtime/action-button.component';\n\n@Component({\n  selector: 'rx-button-bar-dropdown-item-component',\n  templateUrl: './button-bar-dropdown-item.component.html'\n})\nexport class ButtonBarDropdownItemComponent extends ActionButtonComponent {\n  @Input() guid;\n  @Input() config;\n  @Input() runtimeViewModelApi;\n}\n","<button type=\"button\" class=\"dropdown-item\" *ngIf=\"!isHidden\" [disabled]=\"isDisabled\" (click)=\"api.click($event)\">\n  {{ state.label }}\n</button>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { BaseViewComponent, IViewComponent, RuntimeViewCanvasItemComponent } from '@helix/platform/view/runtime';\nimport { get, isEmpty, isUndefined, last, throttle } from 'lodash';\nimport { merge, Observable, Subject, throwError } from 'rxjs';\nimport { IButtonBarChildComponentData, IButtonBarConfig } from './button-bar.types';\nimport { ResizeSensor } from 'css-element-queries';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@Component({\n  selector: 'rx-button-bar',\n  templateUrl: './button-bar.component.html',\n  styleUrls: ['./button-bar.component.scss']\n})\nexport class ButtonBarComponent extends BaseViewComponent implements OnInit, OnDestroy, IViewComponent, AfterViewInit {\n  @ViewChildren('buttonItems', { read: ElementRef })\n  private buttonItemsQueryList: QueryList<ElementRef>;\n\n  @ViewChild('dropdownToggle', { read: ElementRef })\n  private dropdownToggleButton: ElementRef;\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  config: Observable<IButtonBarConfig>;\n  alignClass: string;\n  childLayouts: IButtonBarChildComponentData[] = null;\n  isDropdownVisible = false;\n\n  private resizeSensor: ResizeSensor;\n  private resize$ = new Subject();\n  private onResizeThrottled = throttle(this.onResize.bind(this), 100);\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private runtimeCanvasItemComponent: RuntimeViewCanvasItemComponent,\n    private changeDetector: ChangeDetectorRef,\n    private ngZone: NgZone,\n    private rxButtonBarService: RxButtonBarService,\n    private renderer: Renderer2\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      this.isHidden = Boolean(config.hidden);\n      this.alignClass = this.rxButtonBarService.getAlignClass(config.alignment);\n    });\n\n    this.childLayouts = get(\n      this.runtimeCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n      '[0].children'\n    );\n  }\n\n  ngAfterViewInit(): void {\n    const el = this.renderer.selectRootElement(this.elementRef.nativeElement, true);\n\n    if (!isEmpty(this.childLayouts)) {\n      const buttonConfigs = this.childLayouts.map((layout) => layout.config);\n\n      this.ngZone.runOutsideAngular(() => {\n        this.resizeSensor = new ResizeSensor(el, (size) => {\n          this.ngZone.run(() => this.resize$.next(size));\n        });\n      });\n\n      merge(...buttonConfigs, this.resize$)\n        .pipe(\n          map((size: any) => size.width || el.offsetWidth),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe((width: number) => this.onResizeThrottled(width));\n    }\n\n    this.onResize(el.offsetWidth);\n    this.changeDetector.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    if (this.resizeSensor) {\n      this.resizeSensor.detach();\n    }\n  }\n\n  onResize(containerWidth: number): void {\n    let totalButtonsWidth = 0;\n\n    const toggleButtonOffsetWidth = this.dropdownToggleButton\n      ? this.renderer.selectRootElement(this.dropdownToggleButton.nativeElement, true).offsetWidth\n      : 0;\n\n    this.buttonItemsQueryList.forEach((item: ElementRef, index: number) => {\n      totalButtonsWidth += this.renderer.selectRootElement(item.nativeElement, true).offsetWidth;\n\n      const containerFitsButton = Math.floor(containerWidth) >= Math.ceil(totalButtonsWidth) + toggleButtonOffsetWidth;\n\n      this.childLayouts[index].showInDropdown = !containerFitsButton;\n\n      if (\n        !isUndefined(this.childLayouts[index - 1]) &&\n        this.childLayouts.filter((button) => button.showInDropdown).length < 2\n      ) {\n        this.childLayouts[index - 1].showInDropdown = !containerFitsButton;\n      }\n    });\n\n    this.isDropdownVisible = isEmpty(this.childLayouts) ? false : last(this.childLayouts).showInDropdown;\n  }\n\n  trackByFn(index: number, item: IButtonBarChildComponentData): string {\n    return item.guid;\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Button Bar: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<div class=\"button-container\" [ngClass]=\"alignClass\" *ngIf=\"childLayouts && !isHidden\">\n  <div\n    *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\"\n    [ngClass]=\"{ 'nav-item--hidden': buttonLayout.showInDropdown }\"\n  >\n    <rx-runtime-view-canvas-item #buttonItems [layout]=\"buttonLayout\"></rx-runtime-view-canvas-item>\n  </div>\n\n  <div\n    *ngIf=\"isDropdownVisible\"\n    class=\"dropdown\"\n    adaptDropdown\n    [placement]=\"['bottom-right', 'bottom-left', 'bottom', 'top-right', 'top-left', 'top', 'auto']\"\n  >\n    <button\n      class=\"btn btn-secondary rx-toggle\"\n      [attr.id]=\"'rx-' + guid\"\n      type=\"button\"\n      adaptDropdownToggle\n      #dropdownToggle\n    ></button>\n    <div class=\"dropdown-menu\" [attr.aria-labelledby]=\"'rx-' + guid\" adaptDropdownMenu>\n      <ng-container *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\">\n        <rx-button-bar-dropdown-item-component\n          *ngIf=\"buttonLayout.showInDropdown\"\n          [config]=\"buttonLayout.config\"\n          [runtimeViewModelApi]=\"buttonLayout.runtimeViewModelApi\"\n          [guid]=\"buttonLayout.guid\"\n        ></rx-button-bar-dropdown-item-component>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule } from '@bmc-ux/adapt-angular';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ButtonBarComponent } from './button-bar.component';\nimport { ButtonBarDropdownItemComponent } from './components/button-bar-dropdown-item/button-bar-dropdown-item.component';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@NgModule({\n  declarations: [ButtonBarComponent, ButtonBarDropdownItemComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule, AdaptDropdownModule.forRoot()],\n  exports: [ButtonBarComponent],\n  entryComponents: [ButtonBarComponent],\n  providers: [RxButtonBarService]\n})\nexport class ButtonBarModule {}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ButtonBarDesignModel } from './button-bar-design.model';\nimport { RxButtonBarService } from '../button-bar.service';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-button-bar-design',\n  templateUrl: './button-bar-design.component.html',\n  styleUrls: ['./button-bar-design.component.scss']\n})\nexport class ButtonBarDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: ButtonBarDesignModel;\n\n  alignment = '';\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private rxButtonBarService: RxButtonBarService) {}\n\n  ngOnInit(): void {\n    this.model.componentProperties$.pipe(takeUntil(this.destroyed$)).subscribe((componentProperties) => {\n      this.alignment = this.rxButtonBarService.getAlignClass(componentProperties.alignment);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<rx-canvas-outlet\n  class=\"button-bar-design-container border\"\n  [class.border-transparent]=\"model.hasChildren$ | async\"\n  [ngClass]=\"alignment\"\n  [dropPredicate]=\"model.dropPredicate\"\n  dropListOrientation=\"horizontal\"\n></rx-canvas-outlet>\n","import { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDropPredicateData,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { isEmpty, values } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { RX_BUTTON_BAR, RxButtonBarAlignment } from '../button-bar.types';\nimport { IButtonBarProperties } from './button-bar-design.types';\n\nexport class ButtonBarDesignModel\n  extends ViewDesignerComponentModel<IButtonBarProperties>\n  implements IViewDesignerComponentModel<IButtonBarProperties>\n{\n  hasChildren$: Observable<boolean> = this.sandbox.getChildComponentGuids().pipe(map((guids) => !isEmpty(guids)));\n  componentProperties$ = this.sandbox.componentProperties$;\n\n  static getInitialProperties(initialProperties?: IButtonBarProperties): IButtonBarProperties {\n    return {\n      alignment: RxButtonBarAlignment.Left,\n      name: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n\n    this.componentProperties$.subscribe((props) => {\n      this.validate(props);\n    });\n  }\n\n  dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton;\n  }\n\n  private validate(model: IButtonBarProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(model));\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Button bar.')\n              }\n            },\n            {\n              name: 'alignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Alignment',\n                options: values(RX_BUTTON_BAR.alignmentOptions),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonBarDesignComponent } from './button-bar-design.component';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@NgModule({\n  imports: [CommonModule, ViewDesignerCanvasModule],\n  declarations: [ButtonBarDesignComponent],\n  entryComponents: [ButtonBarDesignComponent],\n  providers: [RxButtonBarService]\n})\nexport class ButtonBarDesignModule {}\n","import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport { BaseViewComponent, IViewComponentSetProperty } from '@helix/platform/view/runtime';\nimport { takeUntil } from 'rxjs/operators';\nimport { IContainerApi, IContainerConfig } from './container.types';\nimport { Observable, throwError } from 'rxjs';\n\n@Component({\n  selector: 'rx-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.scss']\n})\nexport class ContainerComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  state: IContainerConfig = {};\n\n  api: IContainerApi = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: IContainerConfig) => {\n      this.isHidden = Boolean(config.hidden);\n      this.state = { ...config };\n    });\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.state.hidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else {\n      const componentName = this.renderer.selectRootElement(this.elementRef.nativeElement, true).tagName.toLowerCase();\n\n      return throwError(`${componentName}: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContainerComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  protected componentDefinitionType = RxViewComponentType.Container;\n\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  // converting layout of old view definition into new format\n  adaptDefinition(containerComponentDefinition: IContainerViewComponentDefinition) {\n    this.viewDefinitionParserService\n      .getComponents(containerComponentDefinition)\n      .filter((componentPair) => componentPair.componentDefinition.type === this.componentDefinitionType)\n      .map((componentPair) => componentPair.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.layout) {\n          let layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n\n          if (layout && layout.componentDefinitionId) {\n            const columns = layout.columns.map((column) => {\n              const rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';\n              const columnSpan = column.span || 12;\n              const columnClass = rowWrap === 'xs' ? `col-${columnSpan}` : `col-${rowWrap}-${columnSpan}`;\n              const marginBottomClass = rowWrap !== 'xs' ? `rx-mb-${rowWrap}` : '';\n\n              return {\n                cssClass: `${columnClass} ${marginBottomClass}`,\n                children: column.children.map((child) => child.componentDefinitionId)\n              };\n            });\n\n            layout = {\n              outlets: [\n                {\n                  name: 'DEFAULT',\n                  columns: columns\n                }\n              ]\n            };\n\n            componentDefinition.layout = JSON.stringify(layout);\n          } else if (layout && layout.outlets) {\n            layout.outlets.forEach((outlet) => {\n              outlet.columns\n                .filter((column) => !column.cssClass)\n                .forEach((column) => {\n                  const rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';\n                  const columnSpan = column.span || 12;\n                  const columnClass = rowWrap === 'xs' ? `col-${columnSpan}` : `col-${rowWrap}-${columnSpan}`;\n                  const marginBottomClass = rowWrap !== 'xs' ? `rx-mb-${rowWrap}` : '';\n\n                  column.cssClass = `${columnClass} ${marginBottomClass}`;\n                });\n            });\n\n            componentDefinition.layout = JSON.stringify(layout);\n          }\n        }\n      });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ContainerComponentDefinitionAdapterService } from './container-component-definition-adapter.service';\nimport { ContainerComponent } from './container.component';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [ContainerComponent],\n  exports: [ContainerComponent],\n  entryComponents: [ContainerComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule]\n})\nexport class ContainerModule {\n  constructor(\n    private containerComponentDefinitionAdapterService: ContainerComponentDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Container,\n      this.containerComponentDefinitionAdapterService\n    );\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {\n  CanvasItemApi,\n  CanvasItemContainerComponent,\n  CanvasOutletHelperService,\n  ViewDesignerCanvasItemApiToken\n} from '@helix/platform/view/designer';\nimport { IOutputData } from 'angular-split/lib/interface';\nimport { SplitComponent } from 'angular-split';\n\n@Component({\n  selector: 'rx-container-canvas-item',\n  templateUrl: './container-canvas-item.component.html',\n  styleUrls: ['./container-canvas-item.component.scss']\n})\nexport class ContainerCanvasItemComponent extends CanvasItemContainerComponent implements AfterViewInit {\n  @ViewChild(SplitComponent, { static: true })\n  private splitComponent: SplitComponent;\n\n  private readonly maxNumberOfColumns = 12;\n  private readonly defaultGutterStep = 50;\n\n  percentSpanSize = 100 / this.maxNumberOfColumns;\n  gutterStep = this.defaultGutterStep;\n\n  @Output()\n  columnResize: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n  constructor(\n    @Inject(ViewDesignerCanvasItemApiToken) protected canvasItemApi: CanvasItemApi,\n    protected canvasOutletHelperService: CanvasOutletHelperService,\n    protected elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2\n  ) {\n    super(canvasItemApi, canvasOutletHelperService);\n  }\n\n  @HostListener('window:resize')\n  onWindowResize(): void {\n    this.setGutterStep();\n  }\n\n  ngAfterViewInit(): void {\n    const spans = this.outlet.columns.map((column) => column.span);\n    this.setSpanSizes(spans);\n    this.setGutterStep();\n  }\n\n  onDragEnd(event: IOutputData): void {\n    const spans = this.getPercentToSpanSizes(event.sizes as number[]);\n\n    this.columnResize.emit(spans);\n\n    this.setSpanSizes(spans);\n  }\n\n  getPercentToSpanSizes(percentSizes: number[]): number[] {\n    return percentSizes.map((size) => Math.round((size * this.maxNumberOfColumns) / 100));\n  }\n\n  setSpanSizes(spans: number[]): void {\n    this.splitComponent.setVisibleAreaSizes(this.getSpanToPercentSizes(spans));\n  }\n\n  private getSpanToPercentSizes(spans: number[]): number[] {\n    return spans.map((span) => span * this.percentSpanSize);\n  }\n\n  private setGutterStep(): void {\n    const element = this.renderer.selectRootElement(this.elementRef.nativeElement, true);\n\n    this.gutterStep = Math.round(element.clientWidth / this.maxNumberOfColumns) || this.defaultGutterStep;\n  }\n}\n","<as-split\n  unit=\"percent\"\n  [class.selected]=\"layout.isSelected$ | async\"\n  [class.readonly]=\"isReadOnly\"\n  [gutterStep]=\"gutterStep\"\n  gutterSize=\"1\"\n  (dragEnd)=\"onDragEnd($event)\"\n>\n  <as-split-area\n    *ngFor=\"\n      let column of outlet.columns;\n      trackBy: trackByColFn;\n      let colIndex = index;\n      let first = first;\n      let last = last\n    \"\n    minSize=\"8\"\n  >\n    <rx-canvas-item-column\n      [isReadOnly]=\"isReadOnly\"\n      [colIndex]=\"colIndex\"\n      [column]=\"column\"\n      [layout]=\"layout\"\n      (dropListDropped)=\"onDropListDropped($event)\"\n    ></rx-canvas-item-column>\n  </as-split-area>\n</as-split>\n","import { AfterViewInit, Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { CanvasOutletComponent } from '@helix/platform/view/designer';\nimport { ContainerCanvasItemComponent } from './container-canvas-item.component';\nimport { ContainerDesignModel } from './container-design.model';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-container-design',\n  templateUrl: './container-design.component.html',\n  styleUrls: ['./container-design.component.scss']\n})\nexport class ContainerDesignComponent implements OnDestroy, AfterViewInit {\n  @Input()\n  model: ContainerDesignModel;\n\n  @ViewChild(CanvasOutletComponent, { static: true })\n  canvasOutletComponent: CanvasOutletComponent;\n\n  containerCanvasItemComponent = ContainerCanvasItemComponent;\n\n  protected destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  ngAfterViewInit() {\n    this.canvasOutletComponent.containerComponentInstance.columnResize\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((columnSizes) => {\n        this.model.setContainerLayout(columnSizes);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<rx-canvas-outlet\n  class=\"border d-block\"\n  [class.has-children]=\"model.hasChildren$ | async\"\n  [containerComponent]=\"containerCanvasItemComponent\"\n></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxActionButtonService } from '../../action-button/action-button.service';\nimport { ContainerDesignComponent } from './container-design.component';\nimport { ContainerCanvasItemComponent } from './container-canvas-item.component';\nimport { AngularSplitModule } from 'angular-split';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n@NgModule({\n  imports: [CommonModule, ViewDesignerCanvasModule, AngularSplitModule, DragDropModule],\n  declarations: [ContainerDesignComponent, ContainerCanvasItemComponent],\n  entryComponents: [ContainerDesignComponent, ContainerCanvasItemComponent],\n  providers: [RxActionButtonService]\n})\nexport class ContainerDesignModule {}\n","export enum ContainerRowWrap {\n  Xs = 'xs',\n  Sm = 'sm',\n  Md = 'md',\n  Lg = 'lg',\n  Xl = 'xl',\n  Xxl = 'xxl'\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RecordEditorDesignModel } from './record-editor-design.model';\n\n@Component({\n  selector: 'rx-record-editor-design',\n  templateUrl: './record-editor-design.component.html',\n  styleUrls: ['./record-editor-design.component.scss']\n})\nexport class RecordEditorDesignComponent implements OnInit {\n  @Input()\n  model: RecordEditorDesignModel;\n\n  public dropPredicateFn: () => boolean;\n\n  ngOnInit(): void {\n    this.dropPredicateFn = this.model._dropPredicate.bind(this.model);\n  }\n}\n","<adapt-empty-state\n  *ngIf=\"(model.hasChildren$ | async) === false\"\n  type=\"objects\"\n  label=\"Drop fields from the Palette here or select a Record definition and add fields in the Properties panel.\"\n></adapt-empty-state>\n\n<rx-canvas-outlet [dropPredicate]=\"dropPredicateFn\"></rx-canvas-outlet>\n","import { RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport const RECORD_EDITOR = {\n  type: RxViewComponentType.RecordEditor,\n\n  fieldTypes: {\n    [RX_RECORD_DEFINITION.resourceTypes.character]: RxViewComponentType.Character,\n    [RX_RECORD_DEFINITION.resourceTypes.dateTime]: RxViewComponentType.DateTime,\n    [RX_RECORD_DEFINITION.resourceTypes.selection]: RxViewComponentType.Selection,\n    [RX_RECORD_DEFINITION.resourceTypes.timeOnly]: RxViewComponentType.Time,\n    [RX_RECORD_DEFINITION.resourceTypes.dateOnly]: RxViewComponentType.Date,\n    [RX_RECORD_DEFINITION.resourceTypes.boolean]: RxViewComponentType.Boolean,\n    [RX_RECORD_DEFINITION.resourceTypes.attachment]: RxViewComponentType.Attachment,\n    [RX_RECORD_DEFINITION.resourceTypes.integer]: RxViewComponentType.Integer,\n    [RX_RECORD_DEFINITION.resourceTypes.real]: RxViewComponentType.Floating,\n    [RX_RECORD_DEFINITION.resourceTypes.decimal]: RxViewComponentType.Decimal,\n    [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter]: RxViewComponentType.LocalizedCharacter\n  }\n};\n\nexport enum RecordEditorMode {\n  Create = 'CREATE',\n  Edit = 'EDIT',\n  BulkEdit = 'BULK EDIT',\n  Temporary = 'TEMPORARY'\n}\n\nexport enum RecordEditorState {\n  Read = 'READ',\n  Edit = 'EDIT'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { groupBy, isEmpty, reduce, xor } from 'lodash';\nimport { RxStringService } from '@helix/platform/utils';\nimport { RecordFieldOption } from '@helix/platform/record/api';\nimport { IAvailableFieldsGroup, IFieldSelectorConfig } from './field-selector.types';\nimport { IRecordFieldDefinitionItem } from '../fields-inspector-widget.types';\n\ninterface ModelObject {\n  [id: string]: boolean;\n}\n\n@Component({\n  templateUrl: './field-selector.component.html',\n  styleUrls: ['./field-selector.component.scss']\n})\nexport class FieldSelectorComponent implements OnInit {\n  searchQuery: string;\n  selectedFieldIdsModel: ModelObject = {};\n  availableFieldGroups: IAvailableFieldsGroup[] = [];\n  hideSystemFields = false;\n  isApplyButtonDisabled = true;\n\n  private selectedFieldDefinitionIds: string[] = [];\n  private availableFieldDefinitions: IRecordFieldDefinitionItem[] = [];\n\n  constructor(public context: ActiveModalRef, private stringService: RxStringService) {}\n\n  ngOnInit(): void {\n    const data: IFieldSelectorConfig = this.context.getData();\n\n    this.availableFieldDefinitions = data.availableFields;\n    this.selectedFieldDefinitionIds = data.selectedFieldIds;\n    this.hideSystemFields = Boolean(data.hideSystemFields);\n\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions);\n    this.selectedFieldIdsModel = this.idsToModel(this.selectedFieldDefinitionIds);\n  }\n\n  closeModal(): void {\n    this.context.close(this.modelToIds(this.selectedFieldIdsModel));\n  }\n\n  search(searchQuery: string): void {\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions)\n      .map((fieldGroup) => ({\n        ...fieldGroup,\n        fields: fieldGroup.fields.filter((field) => this.stringService.caseInsensitiveSearch(field.name, searchQuery))\n      }))\n      .filter((fieldGroup) => !isEmpty(fieldGroup.fields));\n  }\n\n  select(groupName: string): void {\n    if (groupName === 'all') {\n      const ids = this.availableFieldDefinitions\n        .filter((recordField) => {\n          return recordField.fieldOption !== RecordFieldOption.System || !this.hideSystemFields;\n        })\n        .map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = this.idsToModel(ids);\n    } else {\n      const ids = this.availableFieldGroups\n        .find((group) => group.groupLabel === groupName)\n        .fields.map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = {\n        ...this.selectedFieldIdsModel,\n        ...this.idsToModel(ids)\n      };\n    }\n\n    this.updateApplyButtonDisabledStatus();\n  }\n\n  updateApplyButtonDisabledStatus(): void {\n    this.isApplyButtonDisabled = !xor(this.selectedFieldDefinitionIds, this.modelToIds(this.selectedFieldIdsModel))\n      .length;\n  }\n\n  groupFieldsByFieldOption(availableFields: IRecordFieldDefinitionItem[]): IAvailableFieldsGroup[] {\n    const groups = groupBy(availableFields, 'fieldOption');\n    const groupTypes = [RecordFieldOption.Required, RecordFieldOption.Optional];\n\n    if (!this.hideSystemFields) {\n      groupTypes.push(RecordFieldOption.System);\n    }\n\n    return groupTypes\n      .filter((groupType) => groups[groupType])\n      .map((groupType) => ({\n        groupLabel: `${this.stringService.prettify(groupType)} fields`,\n        selectAllFieldsInGroupButtonLabel: `Select all ${groupType.toLowerCase()} fields`,\n        fields: groups[groupType].map(({ id, name }) => ({ id, name })).sort((a, b) => a.name.localeCompare(b.name))\n      }));\n  }\n\n  trackByLabel(index: number, item: IAvailableFieldsGroup): string {\n    return item.groupLabel;\n  }\n\n  trackById(index: number, item: IRecordFieldDefinitionItem): string {\n    return item.id;\n  }\n\n  private idsToModel(ids: string[], selected = true): ModelObject {\n    return ids.filter(Boolean).reduce((result, id) => {\n      result[id] = selected;\n\n      return result;\n    }, {});\n  }\n\n  private modelToIds(model: ModelObject): string[] {\n    return reduce(\n      model,\n      (result, value, id) => {\n        if (value) {\n          result.push(id);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n}\n","<div class=\"modal-header pr-0\">\n  <h5 class=\"modal-title pl-0 mr-auto\">Quick edit fields</h5>\n\n  <button\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"apply-button\"\n    (click)=\"closeModal()\"\n    [disabled]=\"isApplyButtonDisabled\"\n    class=\"mr-5\"\n  >\n    Apply\n  </button>\n\n  <button\n    class=\"close my-1\"\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"tertiary\"\n    (click)=\"context.dismiss(0)\"\n    rx-id=\"x-button\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"body-controls\">\n    <adapt-button btn-type=\"tertiary\" rx-id=\"select-all-button\" class=\"pl-0\" (click)=\"select('all')\">\n      Select all\n    </adapt-button>\n\n    <adapt-rx-textfield\n      [placeholder]=\"'Search fields'\"\n      [ngModel]=\"searchQuery\"\n      [attr.rx-id]=\"'search-field'\"\n      (ngModelChange)=\"search($event)\"\n      class=\"form-group\"\n    >\n    </adapt-rx-textfield>\n  </div>\n\n  <div class=\"rx-record-definition-fields\">\n    <div\n      class=\"rx-record-definition-field-group\"\n      *ngFor=\"let availableFieldsGroup of availableFieldGroups; trackBy: trackByLabel\"\n    >\n      <div class=\"font-weight-bold\">\n        {{ availableFieldsGroup.groupLabel }}\n      </div>\n\n      <adapt-button btn-type=\"tertiary\" class=\"py-0 pl-0\" (click)=\"select(availableFieldsGroup.groupLabel)\">\n        {{ availableFieldsGroup.selectAllFieldsInGroupButtonLabel }}\n      </adapt-button>\n\n      <div class=\"checkbox\" *ngFor=\"let availableField of availableFieldsGroup.fields; trackBy: trackById\">\n        <label>\n          <input\n            type=\"checkbox\"\n            [(ngModel)]=\"selectedFieldIdsModel[availableField.id]\"\n            (ngModelChange)=\"updateApplyButtonDisabledStatus()\"\n          />\n\n          <span class=\"checkbox__item\">{{ availableField.name }}</span>\n        </label>\n      </div>\n    </div>\n\n    <div *ngIf=\"availableFieldGroups.length === 0\">No Fields Found</div>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Injector,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AdaptModalService } from '@bmc-ux/adapt-angular';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IFormFocusable } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { combineLatest } from 'rxjs';\nimport { concatMap, take } from 'rxjs/operators';\nimport { RecordEditorDesignModel } from '../../record-editor-design.model';\nimport { FieldSelectorComponent } from './field-selector/field-selector.component';\nimport { IFieldSelectorConfig } from './field-selector/field-selector.types';\nimport { IRecordEditorFieldsControlOptions } from './fields-inspector-widget.types';\n\n@Component({\n  selector: 'rx-fields-inspector-widget',\n  templateUrl: './fields-inspector-widget.component.html',\n  styleUrls: ['./fields-inspector-widget.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FieldsInspectorWidgetComponent\n  extends InspectorWidgetBase<IRecordEditorFieldsControlOptions, RecordEditorDesignModel>\n  implements IFormFocusable\n{\n  @HostBinding('class.rx-record-definition-fields')\n  encapsulateClass = true;\n\n  @ViewChild('openModalButton', { read: ElementRef, static: true })\n  openModalButton: ElementRef;\n\n  constructor(injector: Injector, private adaptModalService: AdaptModalService, private renderer: Renderer2) {\n    super(injector);\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();\n  }\n\n  openModal(): void {\n    combineLatest([\n      this.designerItemModel.childFieldIds$,\n      this.designerItemModel.recordFieldDefinitionItems$,\n      this.designerItemModel.isExtensionView$,\n      this.designerItemModel.associationDefinitionName$\n    ])\n      .pipe(\n        take(1),\n        concatMap(([selectedFieldIds, availableFields, isExtensionView, associationDefinitionName]) =>\n          this.adaptModalService.open({\n            content: FieldSelectorComponent,\n            data: {\n              selectedFieldIds,\n              availableFields:\n                isExtensionView && associationDefinitionName\n                  ? availableFields.filter(\n                      (field) => field.resourceType !== RX_RECORD_DEFINITION.resourceTypes.attachment\n                    )\n                  : availableFields,\n              hideSystemFields: this.options.hideSystemFields\n            } as IFieldSelectorConfig,\n            size: 'sm',\n            hideBackdrop: false,\n            customClass: 'rx-record-editor-field-selector-modal'\n          })\n        )\n      )\n      .subscribe((selectedFieldIds) => {\n        this.designerItemModel.updateSelectedFieldComponents(selectedFieldIds);\n      });\n  }\n\n  removeField(guid: string): void {\n    this.designerItemModel.removeComponent([guid]);\n  }\n\n  trackByGuid<T extends { guid: string }>(index: number, item: T): string {\n    return item.guid;\n  }\n}\n","<adapt-button\n  btn-type=\"tertiary\"\n  #openModalButton\n  rx-id=\"open-modal-button\"\n  class=\"px-0 py-0\"\n  (click)=\"openModal()\"\n  [hidden]=\"options.isDisabled\"\n>\n  <span class=\"d-icon-plus_circle\"></span>\n  Quick edit fields\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"(designerItemModel.selectedFieldComponents$ | async).length === 0\" class=\"text-tertiary\"\n    >No fields added.</span\n  >\n</div>\n\n<div class=\"mt-2\">\n  <div\n    class=\"rx-field-item\"\n    *ngFor=\"let field of designerItemModel.selectedFieldComponents$ | async; trackBy: trackByGuid\"\n  >\n    <div>\n      <div class=\"rx-field-name\">{{ field.label }}</div>\n\n      <div class=\"rx-field-type\">\n        <small>{{ field.componentName }}</small>\n      </div>\n    </div>\n\n    <div class=\"rx-action-button\">\n      <span\n        *ngIf=\"!options.isDisabled\"\n        (click)=\"removeField(field.guid)\"\n        class=\"d-icon-cross btn-link\"\n        rx-id=\"delete-button\"\n      >\n      </span>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { EMPTY, from, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { RECORD_EDITOR, RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps\n} from '@helix/platform/view/designer';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  OptionalExpressionInspectorControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { flow, get, inRange, isEmpty, isFinite, isNil, omit, omitBy } from 'lodash';\nimport {\n  IRecordEditorFieldsControlOptions,\n  IRecordFieldDefinitionItem\n} from './components/fields-inspector-widget/fields-inspector-widget.types';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { FieldsInspectorWidgetComponent } from './components/fields-inspector-widget/fields-inspector-widget.component';\nimport { IPlainObject, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDefinition,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RX_ASSOCIATION_DEFINITION, RxAssociationDefinitionDataPageService } from '@helix/platform/association/api';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\n\n@Injectable()\nexport class RxRecordEditorDesignHelpersService {\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  getRecordFieldDefinitionItems(recordDefinition: IRecordDefinition): IRecordFieldDefinitionItem[] {\n    return recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n      id: String(fieldDefinition.id),\n      name: fieldDefinition.name,\n      resourceType: fieldDefinition.resourceType,\n      fieldOption: fieldDefinition.fieldOption,\n      viewComponentType: this.getViewComponentType(fieldDefinition)\n    }));\n  }\n\n  getViewComponentType(fieldDefinition: IFieldDefinition): string {\n    let viewComponentType = RECORD_EDITOR.fieldTypes[fieldDefinition.resourceType];\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character) {\n      viewComponentType =\n        fieldDefinition.namedListDefinition || inRange(fieldDefinition.maxLength, 1, 255)\n          ? RxViewComponentType.Character\n          : RxViewComponentType.Textarea;\n    }\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.real) {\n      viewComponentType = RxViewComponentType.Decimal;\n    }\n\n    return viewComponentType;\n  }\n\n  getComponentProperties(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    const requiredPropertyNames = ['recordDefinitionName', 'mode', 'allowEdit'];\n\n    return flow(\n      // Remove design properties.\n      (props: IRecordEditorDesignProperties) => omit(props, 'showReadOnlyState'),\n      // Remove optional properties with empty values.\n      (props: IRecordEditorProperties) =>\n        omitBy(\n          props,\n          (propertyValue, propertyName) =>\n            !requiredPropertyNames.includes(propertyName) && (isNil(propertyValue) || propertyValue === '')\n        )\n    )(properties) as IRecordEditorProperties;\n  }\n\n  getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService\n        .getRecordDefinition(recordDefinitionName)\n        .pipe(catchError((error) => EMPTY));\n    } else {\n      return of(null);\n    }\n  }\n\n  validate(\n    sandbox: IViewComponentDesignSandbox,\n    properties: IRecordEditorProperties,\n    recordDefinition: IRecordDefinition,\n    childFieldIds: string[],\n    isAssociationRequired = false,\n    isExtensionView = false\n  ): IViewComponentDesignValidationIssue[] {\n    const validationIssues: IViewComponentDesignValidationIssue[] = [];\n\n    if (!properties.recordDefinitionName) {\n      validationIssues.push(sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName'));\n    }\n\n    if (isAssociationRequired && properties.recordDefinitionName && !properties.associationDefinitionName) {\n      validationIssues.push(sandbox.createError('Association to use cannot be blank.', 'associationDefinitionName'));\n    }\n\n    if (!isExtensionView && properties.mode === RecordEditorMode.Edit && !properties.recordInstanceId) {\n      validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordInstanceId'));\n    }\n\n    if (recordDefinition && properties.recordDefinitionName && properties.mode === RecordEditorMode.Create) {\n      // Add warning for Join Record Definition case\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) {\n        validationIssues.push(\n          sandbox.createWarning(\n            `You have configured a record editor to create join record instances.\n                        Please ensure that one or more processes or rules have been defined to perform the creation\n                        of the join record instance.`,\n            undefined,\n            true\n          )\n        );\n      }\n\n      // System fields in 'CREATE' mode cannot be chosen\n      const systemFieldNames = childFieldIds\n        .map((selectedFieldId) =>\n          recordDefinition.fieldDefinitions.find((fieldDefinition) => fieldDefinition.id === Number(selectedFieldId))\n        )\n        .filter(this.rxFieldDefinitionService.isSystemField)\n        .map((fieldDefinition) => fieldDefinition.name);\n\n      if (systemFieldNames.length) {\n        validationIssues.push(\n          sandbox.createError(\n            `System fields (${systemFieldNames.join(', ')}) cannot be present when Record editor is in Create mode.`\n          )\n        );\n      }\n\n      // Required fields without default value must be included when in 'CREATE' mode.\n      // When in extension view, this validation is only needed when the Record Editor\n      // is bound to an associated record, i.e. not the same record as the target Record Editor,\n      // which should already contain all such fields.\n      if (!isExtensionView || properties.associationDefinitionName) {\n        const requiredFieldsWithoutDefaultValues = recordDefinition.fieldDefinitions.filter((fieldDefinition) => {\n          const isLocalizedCharacterField =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter;\n\n          const hasDefaultValue =\n            fieldDefinition.defaultValue ||\n            isFinite(fieldDefinition.defaultValue) ||\n            (isLocalizedCharacterField && !isEmpty(fieldDefinition.defaultValueByLocale));\n\n          return fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required && !hasDefaultValue;\n        });\n\n        const requiredFieldNames = requiredFieldsWithoutDefaultValues\n          .filter((fieldDefinition) => !childFieldIds.includes(String(fieldDefinition.id)))\n          .map((fieldDefinition) => fieldDefinition.name);\n\n        if (requiredFieldNames.length) {\n          validationIssues.push(sandbox.createError(`Required fields are missing: ${requiredFieldNames.join(', ')}.`));\n        }\n      }\n    }\n\n    validationIssues.push(...validateStandardProps(properties));\n\n    return validationIssues;\n  }\n\n  getViewDefinition(viewDefinitionName: string): Observable<IViewDefinition> {\n    if (viewDefinitionName) {\n      return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(catchError(() => of(null)));\n    } else {\n      return of(null);\n    }\n  }\n\n  getInspector(\n    recordDefinitionName: string,\n    mode: RecordEditorMode,\n    showReadOnlyState: boolean,\n    recordFieldDefinitionItems: IRecordFieldDefinitionItem[] = [],\n    isExtensionView = false,\n    associationOptions: ISelectOption[] = [],\n    isAssociationRequired: boolean = false,\n    onBeforeModeChange: () => Promise<boolean>\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Record editor.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.StandardDataRecord,\n                required: true,\n\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue)) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'All view components will be removed from the Record editor. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                }\n              }\n            },\n            {\n              name: 'mode',\n              component: GroupButtonFormControlComponent,\n              options: {\n                label: 'Mode',\n                tooltip: new Tooltip(\n                  '<b>Record editor modes:</b><br><ul><li>Create mode is for creating new records.</li><li>Edit mode is for updating records.</li><li>Temporary mode is for holding data that does not need to be saved.</li></ul>'\n                ),\n                required: true,\n                items: [\n                  {\n                    name: 'Create',\n                    value: RecordEditorMode.Create\n                  },\n                  {\n                    name: 'Edit',\n                    value: RecordEditorMode.Edit\n                  },\n                  {\n                    name: 'Temporary',\n                    value: RecordEditorMode.Temporary\n                  }\n                ],\n                beforeValueChange: onBeforeModeChange\n              }\n            }\n          ]\n        }\n      ]\n    };\n\n    const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n    if (mode === RecordEditorMode.Edit && !isExtensionView) {\n      generalSectionControls.push({\n        name: 'recordInstanceId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Record ID',\n          tooltip: new Tooltip('Enter the record ID of the record that the users need to edit.'),\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      generalSectionControls.push({\n        name: 'showReadOnlyState',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable read state'\n        } as ISwitcherFormControlOptions\n      });\n\n      if (showReadOnlyState) {\n        generalSectionControls.push({\n          name: 'defaultState',\n          component: GroupButtonFormControlComponent,\n          options: {\n            label: 'Default state',\n            items: [\n              {\n                name: 'Read',\n                value: RecordEditorState.Read\n              },\n              {\n                name: 'Edit',\n                value: RecordEditorState.Edit\n              }\n            ]\n          } as IGroupButtonFormControlOptions\n        });\n      }\n\n      generalSectionControls.push({\n        name: 'allowEdit',\n        component: OptionalExpressionInspectorControlComponent,\n        options: {\n          label: 'Allow edit'\n        } as IOptionalExpressionInspectorControlOptions\n      });\n    }\n\n    generalSectionControls.push(getAvailableOnDevicesInspectorConfig(), getStylesFieldInspectorConfig());\n\n    if (isExtensionView) {\n      generalSectionControls.splice(1, 0, {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Display label',\n          tooltip: new Tooltip(\n            `Enter a Display label for the Record editor. When this view is injected into the view to extend,\n              the Display label will be shown above the Record editor's fields. If a Display label is not defined,\n              the name of the source application or library will be shown above the fields.`\n          )\n        }\n      });\n\n      if (recordDefinitionName) {\n        generalSectionControls.splice(3, 0, {\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: associationOptions,\n            emptyOption: !isAssociationRequired,\n            required: isAssociationRequired\n          } as ISelectFormControlOptions\n        });\n      }\n    }\n\n    const formContentsSection = {\n      label: 'Form contents',\n      controls: [\n        {\n          component: FieldsInspectorWidgetComponent,\n          options: {\n            label: 'Selected fields',\n            hideSystemFields: mode === RecordEditorMode.Create\n          } as IRecordEditorFieldsControlOptions\n        }\n      ]\n    };\n\n    if (recordDefinitionName) {\n      inspectorConfig.inspectorSectionConfigs.push(formContentsSection);\n    }\n\n    return inspectorConfig;\n  }\n\n  getAssociationOptions(\n    firstRecordDefinitionName: string,\n    secondRecordDefinitionName: string\n  ): Observable<ISelectOption[]> {\n    if (firstRecordDefinitionName && secondRecordDefinitionName) {\n      return this.getAssociations(firstRecordDefinitionName, secondRecordDefinitionName).pipe(\n        map((res) =>\n          res.data\n            .filter((association) => association.nodeAId === firstRecordDefinitionName)\n            .map((association) => ({\n              id: association.name,\n              name: this.rxDefinitionNameService.getDisplayName(association.name)\n            }))\n        )\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  getAssociations(firstRecordDefinitionName: string, secondRecordDefinitionName: string): Observable<any> {\n    return this.rxAssociationDefinitionDataPageService.get({\n      params: {\n        propertySelection: ['name', 'scope', 'nodeAId'],\n        firstRecordDefinitionName: firstRecordDefinitionName,\n        secondRecordDefinitionName: secondRecordDefinitionName,\n        cardinality: RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,\n        nodeAModality: RX_ASSOCIATION_DEFINITION.modality.required,\n        shouldCascadeDelete: true\n      },\n      headers: { 'default-bundle-scope': '' }\n    });\n  }\n\n  getTargetRecordEditorProperties(viewDefinition: IViewDefinition, targetExtensionContainerGuid: string): IPlainObject {\n    let targetRecordEditor;\n\n    if (viewDefinition && targetExtensionContainerGuid) {\n      targetRecordEditor = this.rxViewDefinitionParserService.findParentComponentDefinition(\n        viewDefinition,\n        { guid: targetExtensionContainerGuid },\n        (definition) => definition.type === RxViewComponentType.RecordEditor\n      );\n    }\n\n    return get(targetRecordEditor, 'propertiesByName', {});\n  }\n\n  confirmSystemFieldRemoval(): Observable<boolean> {\n    return from(\n      this.rxModalService.confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'System fields will be removed. Do you want to continue?'\n      })\n    );\n  }\n\n  getSystemFieldModelGuids(\n    plainFieldModels: IViewComponentDesignData<IBaseRecordEditorFieldProperties>[],\n    recordDefinition: IRecordDefinition\n  ): string[] {\n    if (!isEmpty(plainFieldModels)) {\n      return plainFieldModels.reduce(\n        (systemFieldGuids: string[], model: IViewComponentDesignData<IBaseRecordEditorFieldProperties>) => {\n          const fieldDefinition = recordDefinition.fieldDefinitions.find(\n            (definition) => String(definition.id) === model.data.fieldId\n          );\n\n          if (this.rxFieldDefinitionService.isSystemField(fieldDefinition)) {\n            systemFieldGuids.push(model.guid);\n          }\n\n          return systemFieldGuids;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  isFieldComponent(component: IViewComponentDesignData): boolean {\n    return (\n      ![\n        RxViewComponentType.Action,\n        RxViewComponentType.ActionButton,\n        RxViewComponentType.Association,\n        RxViewComponentType.AssociatedRecordField\n      ].includes(component.type as RxViewComponentType) &&\n      Boolean(\n        this.rxViewComponentRegistryService.get(component.type).properties.find((prop) => prop.name === 'fieldId')\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FieldSelectorComponent } from './field-selector/field-selector.component';\nimport { FieldsInspectorWidgetComponent } from './fields-inspector-widget.component';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [FieldSelectorComponent, FieldsInspectorWidgetComponent],\n  exports: [FieldsInspectorWidgetComponent],\n  entryComponents: [FieldSelectorComponent, FieldsInspectorWidgetComponent],\n  imports: [CommonModule, FormsModule, AdaptButtonModule, AdaptRxTextfieldModule]\n})\nexport class FieldsInspectorWidgetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RecordEditorDesignComponent } from './record-editor-design.component';\nimport { RxRecordEditorDesignHelpersService } from './record-editor-design-helpers.service';\nimport { FieldsInspectorWidgetModule } from './components/fields-inspector-widget/fields-inspector-widget.module';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RxDefinitionPickerModule,\n    FormsModule,\n    FormControlsModule,\n    ViewDesignerCanvasModule,\n    FieldsInspectorWidgetModule,\n    AdaptEmptyStateModule\n  ],\n  declarations: [RecordEditorDesignComponent],\n  entryComponents: [RecordEditorDesignComponent],\n  providers: [RxRecordEditorDesignHelpersService]\n})\nexport class RecordEditorDesignModule {}\n","import { Optional } from '@angular/core';\nimport {\n  IRecordDefinition,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport { assign, clone, filter, find, forEach, get, isEmpty, map as _map, remove, uniq } from 'lodash';\nimport { BehaviorSubject, defer, forkJoin, Observable, of } from 'rxjs';\nimport { map, share, switchMap, tap } from 'rxjs/operators';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IAssociationManagerConfig } from './record-editor.types';\n\nenum CardinalityType {\n  One = 'ONE',\n  Many = 'MANY'\n}\n\nexport class RxAssociationManagerService {\n  extensions: RecordInstance[] = [];\n  existing = [];\n  pending = [];\n  deleted = [];\n\n  private existingSubject$ = new BehaviorSubject([]);\n  existing$ = this.existingSubject$.asObservable();\n\n  private pendingSubject$ = new BehaviorSubject([]);\n  pending$ = this.pendingSubject$.asObservable();\n\n  private extensionsSubject$ = new BehaviorSubject([]);\n  extensions$ = this.extensionsSubject$.asObservable();\n\n  private initialize$: Observable<any>;\n\n  cardinalityTypes = CardinalityType;\n\n  totalExistingCount = 0;\n  associationDefinition = null;\n\n  cardinalityType = null;\n\n  isDataLoading: boolean;\n\n  recordDefinition: IRecordDefinition;\n  remainingAssociatedRecordCount = 0;\n\n  // create a shared observable to eliminate duplicate API calls from multiple association components in dropdown mode\n  private getExistingAssociationInstances$ = defer(() => this.getExistingAssociationInstances()).pipe(share());\n\n  constructor(\n    @Optional() private options: IAssociationManagerConfig,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxAssociationDefinitionCacheService: RxAssociationDefinitionCacheService\n  ) {\n    assign(this.options, {\n      canLoadAssociations: Boolean(this.options.associatedRecordInstanceId),\n      pageSize: 10,\n      startIndex: 0\n    });\n\n    this.extensions = this.options.associationInstances.extensions;\n    this.existing = this.options.associationInstances.existing;\n    this.pending = this.options.associationInstances.pending;\n    this.deleted = this.options.associationInstances.deleted;\n\n    this.options.fieldIds = this.options.fieldIds || [];\n\n    // add id to core fields for tracking changes on associationInstances\n    this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n  }\n\n  initialize(): Observable<any> {\n    this.isDataLoading = true;\n\n    if (!this.initialize$) {\n      this.initialize$ = forkJoin([\n        this.rxAssociationDefinitionCacheService.getAssociationDefinition(this.options.associationDefinitionName),\n        this.rxRecordDefinitionCacheService.getRecordDefinition(this.options.recordDefinitionName)\n      ]).pipe(\n        tap(([associationDefinition, recordDefinition]) => {\n          this.isDataLoading = false;\n\n          this.associationDefinition = associationDefinition;\n          this.recordDefinition = recordDefinition;\n\n          // determine whether a single or multiple instances can be associated based on association's cardinality and record role\n          this.cardinalityType = this.getCardinalityType(\n            this.associationDefinition.cardinality,\n            this.options.associatedRecordNodeSide\n          );\n\n          // set up field ids if they are not be provided\n          if (this.options.allFieldIds) {\n            this.options.fieldIds = _map(this.recordDefinition.fieldDefinitions, 'id');\n\n            this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n          }\n        })\n      );\n    }\n\n    return this.initialize$;\n  }\n\n  loadExistingAssociations(): Observable<any> {\n    if (this.options.canLoadAssociations) {\n      return this.initialize().pipe(\n        switchMap(() => {\n          return this.getExistingAssociationInstances$.pipe(\n            tap((instances) => {\n              forEach(instances.data, (instance) => {\n                this.addToExisting(\n                  this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(instance)\n                );\n              });\n\n              this.options.startIndex += instances.data.length;\n              this.remainingAssociatedRecordCount = instances.totalSize - this.options.startIndex;\n            })\n          );\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  loadExtensions(): Observable<RecordInstance> {\n    return this.initialize().pipe(\n      switchMap(() => {\n        return this.getExtensionRecordInstance().pipe(\n          tap((extensionRecordInstance) => {\n            if (extensionRecordInstance) {\n              this.addExtension(extensionRecordInstance);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  addToExisting(association): void {\n    // Existing association can be loaded twice by parallel requests either with or without filtering by `roleName` attribute.\n    const existingAssociation = this.isInExisting(association.id);\n\n    if (existingAssociation) {\n      if (this.isDefaultNodeRoleUsed(existingAssociation) && !this.isDefaultNodeRoleUsed(this.options.rolesConfig)) {\n        // Remove and add association again instead of config update is needed to correctly observe associations collection change.\n        remove(this.existing, existingAssociation);\n        association.rolesConfig = this.options.rolesConfig;\n        this.existing.push(association);\n\n        this.existingSubject$.next(this.existing);\n      } else {\n        // Existing association already has custom roles of nodes, so newly added association instance will be skipped.\n      }\n    } else {\n      if (this.options.rolesConfig && !association.rolesConfig) {\n        association.rolesConfig = this.options.rolesConfig;\n      }\n\n      this.existing.push(association);\n      this.existingSubject$.next(this.existing);\n    }\n  }\n\n  isDefaultNodeRoleUsed(association): string {\n    return this.rxJsonParserService.tryParseJson(get(association, 'rolesConfig.useDefaultRoles', true));\n  }\n\n  addToPending(associations, rolesConfig): void {\n    if (!isEmpty(associations) && this.associationDefinition) {\n      if (this.cardinalityType === CardinalityType.Many) {\n        const associationsForAppending = filter(associations, (association) => {\n          return (\n            !this.isInExisting(association.id) && !this.isInDeleted(association.id) && !this.isInPending(association.id)\n          );\n        });\n\n        if (rolesConfig) {\n          forEach(associationsForAppending, (association) => {\n            association.rolesConfig = rolesConfig;\n          });\n        }\n\n        Array.prototype.push.apply(this.pending, associationsForAppending);\n\n        this.pendingSubject$.next(this.pending);\n\n        const previouslyDeletedAssociations = remove(this.deleted, (deletedAssociation) => {\n          return find(associations, {\n            id: deletedAssociation.id\n          });\n        });\n\n        forEach(previouslyDeletedAssociations, (deletedAssociation) => {\n          this.addToExisting(deletedAssociation);\n        });\n      } else if (this.cardinalityType === CardinalityType.One) {\n        const association = associations[0];\n\n        switch (true) {\n          case isEmpty(this.existing) && isEmpty(this.deleted):\n            this.pending.length = 0;\n            this.pending.push(association);\n\n            break;\n          case isEmpty(this.existing):\n            const deletedAssociation = this.deleted[0];\n            this.pending.length = 0;\n\n            if (deletedAssociation.id === association.id) {\n              this.addToExisting(this.deleted.splice(0, 1)[0]);\n            } else {\n              this.pending.push(association);\n            }\n\n            break;\n\n          case isEmpty(this.deleted):\n            const existingAssociation = this.existing[0];\n\n            if (existingAssociation.id !== association.id) {\n              this.deleteFromExisting(existingAssociation.id);\n\n              this.pending.length = 0;\n              this.pending.push(association);\n            }\n\n            break;\n        }\n        this.pendingSubject$.next(this.pending);\n      }\n    }\n  }\n\n  addExtension(extensionRecordInstance: RecordInstance): void {\n    this.extensions.push(extensionRecordInstance);\n    this.extensionsSubject$.next(this.extensions);\n  }\n\n  restore(): void {\n    this.extensionsSubject$.next(this.extensions);\n\n    forEach(this.deleted, (deletedAssociation) => {\n      this.addToExisting(deletedAssociation);\n    });\n\n    this.deleted.splice(0, this.deleted.length);\n    this.deleteAllPending();\n  }\n\n  reset(): void {\n    this.existing.splice(0, this.existing.length);\n    this.pending.splice(0, this.pending.length);\n    this.deleted.splice(0, this.deleted.length);\n    this.totalExistingCount = 0;\n    this.options.startIndex = 0;\n  }\n\n  delete(associationId): void {\n    if (this.isInExisting(associationId)) {\n      this.deleteFromExisting(associationId);\n    } else if (this.isInPending(associationId)) {\n      this.deleteFromPending(associationId);\n    }\n  }\n\n  deleteAllExisting(): void {\n    const associationIds = _map(this.existing, 'id');\n\n    forEach(associationIds, (associationId) => {\n      this.deleteFromExisting(associationId);\n    });\n  }\n\n  deleteAllPending(): void {\n    this.pending.splice(0, this.pending.length);\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  mergeFieldIds(fieldIds): void {\n    if (fieldIds) {\n      this.options.fieldIds = uniq(this.options.fieldIds.concat(fieldIds));\n    }\n  }\n\n  extendOptions(options): void {\n    if (options.fieldIds) {\n      this.mergeFieldIds(options.fieldIds);\n    }\n\n    this.options.allFieldIds = options.allFieldIds;\n  }\n\n  private getCardinalityType(cardinality, associatedRecordNodeSide): CardinalityType {\n    let cardinalityType;\n\n    switch (true) {\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value:\n        cardinalityType = CardinalityType.One;\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value:\n        if (associatedRecordNodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n          cardinalityType = CardinalityType.Many;\n        } else {\n          cardinalityType = CardinalityType.One;\n        }\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value:\n        cardinalityType = CardinalityType.Many;\n\n        break;\n    }\n\n    return cardinalityType;\n  }\n\n  private getExtensionRecordInstance(loadFullInstance = true): Observable<RecordInstance> {\n    const fields = loadFullInstance ? RX_RECORD_DEFINITION.coreFieldIds.id : this.options.fieldIds.join(',');\n\n    return this.rxAssociationInstanceDataPageService\n      .post({\n        params: {\n          associationDefinition: this.options.associationDefinitionName,\n          nodeToQuery: this.options.associatedRecordNodeSide,\n          associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n          propertySelection: fields\n        }\n      })\n      .pipe(\n        map((instances) => instances.data[0]),\n        switchMap((dataPageRow) => {\n          if (dataPageRow && loadFullInstance) {\n            return this.rxRecordInstanceService.get(\n              this.options.recordDefinitionName,\n              dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id]\n            );\n          } else if (dataPageRow && !loadFullInstance) {\n            return of(this.rxRecordInstanceService.createInstanceFromDataPageRow(dataPageRow, this.recordDefinition));\n          } else {\n            return of(null);\n          }\n        })\n      );\n  }\n\n  private getExistingAssociationInstances(): Observable<IDataPageResult> {\n    const params = {\n      pageSize: this.options.pageSize,\n      startIndex: this.options.startIndex,\n      associationDefinition: this.options.associationDefinitionName,\n      nodeToQuery: this.options.associatedRecordNodeSide,\n      associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n      propertySelection: this.options.fieldIds.join(','),\n      useDefaultRoleNames: false,\n      nodeARoleName: '',\n      nodeBRoleName: ''\n    };\n\n    if (this.options.rolesConfig.useDefaultRoles) {\n      params.useDefaultRoleNames = this.options.rolesConfig.useDefaultRoles;\n      delete params.nodeARoleName;\n      delete params.nodeBRoleName;\n    } else {\n      delete params.useDefaultRoleNames;\n      params.nodeARoleName = this.options.rolesConfig.nodeARole || '';\n      params.nodeBRoleName = this.options.rolesConfig.nodeBRole || '';\n    }\n\n    return this.rxAssociationInstanceDataPageService.post({ params });\n  }\n\n  private isInExisting(associationId) {\n    return find(this.existing, {\n      id: associationId\n    });\n  }\n\n  private isInPending(associationId) {\n    return find(this.pending, {\n      id: associationId\n    });\n  }\n\n  getFieldIds() {\n    return clone(this.options.fieldIds);\n  }\n\n  private isInDeleted(associationId) {\n    return find(this.deleted, {\n      id: associationId\n    });\n  }\n\n  private deleteFromExisting(associationId): void {\n    const removedAssociation = remove(this.existing, {\n      id: associationId\n    })[0];\n\n    this.deleted.push(removedAssociation);\n\n    this.existingSubject$.next(this.existing);\n  }\n\n  private deleteFromPending(associationId): void {\n    remove(this.pending, {\n      id: associationId\n    });\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  destroy(): void {\n    this.existingSubject$.complete();\n    this.pendingSubject$.complete();\n    this.extensionsSubject$.complete();\n  }\n}\n","import { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nexport class RecordEditorFormControl extends FormControl {\n  private _touchedSubject = new BehaviorSubject(this.touched);\n\n  readonly touched$ = this._touchedSubject.asObservable().pipe(distinctUntilChanged());\n\n  markAsTouched(opts?: { onlySelf?: boolean }): void {\n    super.markAsTouched(opts);\n\n    this._touchedSubject.next(this.touched);\n  }\n\n  markAsUntouched(opts?: { onlySelf?: boolean }): void {\n    super.markAsUntouched(opts);\n\n    this._touchedSubject.next(this.touched);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { forEach, forOwn, includes, reduce } from 'lodash';\nimport { RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\n\nexport const RecordEditorFormDelimiter = '%';\n\nconst BASE_FORM_GROUP_KEY = 'baseFormGroup';\n\n@Injectable()\nexport class RecordEditorForm extends FormGroup {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super({});\n  }\n\n  addFieldControl(\n    fieldId: string,\n    guid: string,\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const formControl = new RecordEditorFormControl('', validator, asyncValidator);\n    const formGroup = this.controls[BASE_FORM_GROUP_KEY] as FormGroup;\n\n    formControl.setValue(initialValue);\n\n    if (!formGroup) {\n      this.addControl(\n        BASE_FORM_GROUP_KEY,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      formGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  addAssociatedFieldControl(\n    fieldId: string,\n    guid: string,\n    associatedRecordPath: string[],\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const associatedFormGroupName = associatedRecordPath.join(RecordEditorFormDelimiter);\n    const associatedFormGroup: FormGroup = this.controls[associatedFormGroupName] as FormGroup;\n    const formControl = new RecordEditorFormControl(initialValue, validator, asyncValidator);\n\n    if (!associatedFormGroup) {\n      this.addControl(\n        associatedFormGroupName,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      associatedFormGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  resetFieldControls(formStateByFieldId?: { [fieldId: string]: any }, associatedRecordPath?: string[]): void {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formStateByFieldId) {\n      formGroup.reset(this.prepareFormGroupState(formStateByFieldId, formGroup));\n    } else {\n      formGroup.reset();\n    }\n  }\n\n  syncFormControlValues(\n    fieldId: string,\n    value: any,\n    associatedFromGroupName?: string,\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    this.getControlsBoundToRecordField(String(fieldId), associatedFromGroupName).forEach((formControl) => {\n      if (options.markAsDirty !== false) {\n        formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        formControl.markAsTouched();\n      }\n\n      if (!this.rxRecordInstanceUtilsService.isFieldValueEqual(formControl.value, value)) {\n        formControl.setValue(value);\n      }\n    });\n  }\n\n  getFieldIds(associatedRecordPath?: string[]): string[] {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      return reduce(\n        formGroup.controls,\n        (result: string[], control: AbstractControl, formControlId: string) => {\n          const fieldId = this.getFieldId(formControlId);\n\n          if (control instanceof FormControl && !includes(result, fieldId)) {\n            result.push(fieldId);\n          }\n\n          return result;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  clearAndReset(): void {\n    forOwn(this.controls, (control, name) => this.removeControl(name));\n    this.reset();\n  }\n\n  markInvalidControlsAsTouched(): void {\n    forEach(this.controls, (formGroup: FormGroup) => {\n      forEach(formGroup.controls, (control) => {\n        if (control.invalid) {\n          control.markAsTouched();\n        }\n      });\n    });\n  }\n\n  getFormControl(fieldId: string, guid: string, associatedRecordPath?: string[]): RecordEditorFormControl {\n    let control: FormControl;\n    let formGroup: FormGroup;\n\n    formGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      control = formGroup.get(this.getControlId(fieldId, guid)) as FormControl;\n    }\n\n    return control as RecordEditorFormControl;\n  }\n\n  private getControlsBoundToRecordField(fieldId: string, associatedFormGroupName?: string): RecordEditorFormControl[] {\n    const formGroup: FormGroup = this.controls[associatedFormGroupName || BASE_FORM_GROUP_KEY] as FormGroup;\n\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        if (control instanceof FormControl && this.getFieldId(formControlId) === fieldId) {\n          result.push(control);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  private getControlId(fieldId: string, guid?: string): string {\n    return `${fieldId}:${guid || this.rxGuidService.generate()}`;\n  }\n\n  private getFieldId(formControlId: string): string {\n    return formControlId.split(':')[0];\n  }\n\n  private prepareFormGroupState(\n    formStateByFieldId: { [fieldId: string]: any },\n    formGroup: FormGroup\n  ): { [formControlId: string]: any } {\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        result[formControlId] = formStateByFieldId[this.getFieldId(formControlId)];\n\n        return result;\n      },\n      {}\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { filter, flattenDeep, get, isEmpty, isObject, transform } from 'lodash';\nimport { IFieldDefinition, IRecordDefinition, IRecordInstance, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxRecordEditorUtilsService {\n  getComponentDefinitionsAsFlatList(componentDefinitions: AnyViewComponentDefinition[]): AnyViewComponentDefinition[] {\n    return flattenDeep(\n      transform(\n        componentDefinitions,\n        (result: AnyViewComponentDefinition[], componentDefinition: AnyViewComponentDefinition) => {\n          // do not include container view components\n          if (componentDefinition.resourceType !== RX_VIEW_DEFINITION.resourceTypes.containerViewComponent) {\n            result.push(componentDefinition);\n\n            // do not look inside container view components that have their own recordDefinitionName property,\n            // e.g. Association View Component\n          } else if (!componentDefinition.propertiesByName.recordDefinitionName) {\n            result.push(\n              ...this.getComponentDefinitionsAsFlatList(\n                (componentDefinition as IContainerViewComponentDefinition).componentDefinitions\n              )\n            );\n          }\n        }\n      )\n    );\n  }\n\n  getSelectionFieldOptionNames(recordDefinition: IRecordDefinition, recordInstance: IRecordInstance): IPlainObject {\n    const selectionFieldOptionNamesById = {};\n\n    filter(recordDefinition.fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.selection }).forEach(\n      (fieldDefinition: IFieldDefinition) => {\n        const selectionFieldLocalizableStrings = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance) {\n          if (\n            isObject(fieldDefinition.optionNamesById) &&\n            selectionFieldLocalizableStrings &&\n            isEmpty(selectionFieldLocalizableStrings)\n          ) {\n            const localizableStringId = fieldDefinition.optionNamesById[fieldInstance.value];\n\n            selectionFieldOptionNamesById[fieldDefinition.id] = selectionFieldLocalizableStrings[localizableStringId];\n          } else {\n            selectionFieldOptionNamesById[fieldDefinition.id] = fieldDefinition.optionNamesById[fieldInstance.value];\n          }\n        } else {\n          // field instance is not available for system selection fields,\n          // e.g. field 16 (Notifier Listening), when the record instance\n          // is retrieved via GET recordinstance/0 API (get new record instance)\n          selectionFieldOptionNamesById[fieldDefinition.id] = '';\n        }\n      }\n    );\n\n    return selectionFieldOptionNamesById;\n  }\n}\n","import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport {\n  IRecordDefinition,\n  IRxRecordInstanceAssociationInstances,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService,\n  RxRecordInstanceService,\n  RxRecordInstanceUpdateService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { RxGlobalEventsService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxStringService } from '@helix/platform/utils';\nimport { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { compact, forEach, get, includes, isEmpty, isEqual, isNil, set, values } from 'lodash';\nimport { asapScheduler, asyncScheduler, defer, EMPTY, from, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  observeOn,\n  pluck,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  takeWhile,\n  tap\n} from 'rxjs/operators';\nimport { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\nimport { RecordEditorForm, RecordEditorFormDelimiter } from './record-editor-form.class';\nimport {\n  IAssociationManagerConfig,\n  IRecordEditorApi,\n  IRecordEditorConfig,\n  IRecordEditorState,\n  IRxAssociationManagerMap\n} from './record-editor.types';\n\n@Component({\n  selector: 'rx-record-editor',\n  templateUrl: './record-editor.component.html',\n  styleUrls: ['record-editor.component.scss'],\n  providers: [RecordEditorForm]\n})\nexport class RecordEditorComponent extends BaseViewComponent implements OnInit, IRecordEditorApi {\n  @Input()\n  config: Observable<IRecordEditorConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  api: IRecordEditorApi = {\n    refresh: this.refresh.bind(this),\n    isDirty: this.isDirty.bind(this),\n    isReady: this.isReady.bind(this),\n    isValid: this.isValid.bind(this),\n    notifyComponentReady: this.notifyComponentReady.bind(this),\n    save: this.save.bind(this),\n    setProperty: this.setProperty.bind(this),\n    setFieldValue: this.setFieldValue.bind(this),\n    getFieldValue: this.getFieldValue.bind(this),\n    getAssociationManager: this.getAssociationManager.bind(this),\n    getFieldControl: this.getFieldControl.bind(this),\n    downloadAttachment: this.downloadAttachment.bind(this),\n    getAttachmentDownloadUrl: this.getAttachmentDownloadUrl.bind(this),\n    getPermissionType: this.getPermissionType.bind(this),\n    getFieldInstanceProp: this.getFieldInstanceProp.bind(this),\n    getRecordEditorMode: this.getRecordEditorMode.bind(this),\n    setFieldInstanceProp: this.setFieldInstanceProp.bind(this),\n    markAsDirty: this.markAsDirty.bind(this)\n  };\n\n  state: IRecordEditorState = {\n    recordInstanceId: '',\n    recordDefinitionName: '',\n    recordInstance: null,\n    recordDefinition: null,\n    isDataLoading: false,\n    isDirty: false,\n    isSaving: false,\n    canSave: false,\n    mode: null,\n    isReadOnlyStateAvailable: false,\n    defaultState: null,\n    currentState: RecordEditorState.Edit,\n    form: null,\n    selectionFieldOptionNamesById: {},\n    allowEdit: null\n  };\n\n  private recordInstanceChangedSubject = new Subject<void>();\n  private notReadyComponentIds = {};\n\n  associationManagers: IRxAssociationManagerMap = {};\n  associationInstances: IRxRecordInstanceAssociationInstances = {};\n\n  recordInstanceChanged$: Observable<void> = this.recordInstanceChangedSubject.asObservable();\n\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordInstanceUpdateService: RxRecordInstanceUpdateService,\n    private translateService: TranslateService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxStringService: RxStringService,\n    private rxLogService: RxLogService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    recordEditorForm: RecordEditorForm,\n    @Inject(RxAssociationManagerService) private rxAssociationManagerServiceFactory: any\n  ) {\n    super();\n\n    this.state.form = recordEditorForm;\n\n    this.state.form.statusChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe(() => {\n      this.notifyPropertyChanged('isValid', this.isValid());\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n    this.notifyPropertyChanged('isDirty', this.state.isDirty);\n    this.notifyPropertyChanged('canSave', this.state.canSave);\n\n    const config$: Observable<IRecordEditorConfig> = this.config.pipe(\n      distinctUntilChanged(isEqual),\n      tap((config) => Object.assign(this.state, config))\n    );\n\n    config$.pipe(take(1)).subscribe((config) => {\n      if (config.mode === RecordEditorMode.Create) {\n        this.notifyPropertyChanged('inReadState', false);\n      } else if (config.mode === RecordEditorMode.Temporary) {\n        this.notifyPropertyChanged('inReadState', false);\n        this.updateCanSaveProperty();\n      } else if (this.state.defaultState) {\n        this.state.isReadOnlyStateAvailable = true;\n      }\n    });\n\n    merge(\n      config$.pipe(takeWhile((config) => config.mode === RecordEditorMode.Edit)),\n      config$.pipe(\n        takeWhile((config) =>\n          includes([RecordEditorMode.Create, RecordEditorMode.BulkEdit, RecordEditorMode.Temporary], config.mode)\n        ),\n        take(1)\n      )\n    )\n      .pipe(\n        map((config) => config.recordInstanceId || null),\n        distinctUntilChanged(),\n        switchMap(() =>\n          this.initializeRecordInstance().pipe(\n            catchError((error) => {\n              if (this.rxRecordInstanceUtilsService.isNoRecordFoundError(error)) {\n                this.runtimeViewModelApi.cancel(true).subscribe();\n              }\n\n              return throwError(error);\n            })\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n\n    config$\n      .pipe(\n        takeWhile((config) => config.mode === RecordEditorMode.Edit),\n        pluck('allowEdit'),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((allowEdit) => {\n        const state = allowEdit ? this.state.defaultState || RecordEditorState.Edit : RecordEditorState.Read;\n\n        this.setRecordEditorState(state);\n      });\n  }\n\n  downloadAttachment(fieldId: number): void {\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId,\n        this.state.recordInstance.fieldInstances[fieldId].value\n      );\n    }\n  }\n\n  getAttachmentDownloadUrl(fieldId: number): string {\n    let attachmentDownloadUrl = '';\n\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      attachmentDownloadUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId\n      );\n    }\n\n    return attachmentDownloadUrl;\n  }\n\n  getAssociationManager(options: IAssociationManagerConfig): RxAssociationManagerService {\n    // Custom roles config:\n    // {\n    //   useDefaultRoles: 'false',\n    //   nodeARole: 'CustomA',\n    //   nodeBRole: 'CustomB'\n    // }\n    // will be converted to 'false_CustomA_CustomB'\n    // Default roles config (node roles are null) will be converted to 'true__'\n    // Empty roles config will be converted to an empty string\n\n    const rolesConfigValues = values(options.rolesConfig).join('_');\n\n    const associationManagerKey = compact([\n      options.associationDefinitionName,\n      rolesConfigValues,\n      options.associatedRecordNodeSide\n    ]).join(':');\n\n    let associationManager = this.associationManagers[associationManagerKey];\n\n    if (!associationManager) {\n      options.associationInstances = this.getAssociationInstances(\n        options.associationDefinitionName,\n        options.associatedRecordNodeSide,\n        rolesConfigValues\n      );\n\n      associationManager = this.rxAssociationManagerServiceFactory(options);\n\n      merge(associationManager.pending$, associationManager.existing$)\n        .pipe(\n          filter(() => associationManager.deleted.length !== 0 || associationManager.pending.length !== 0),\n          take(1)\n        )\n        .subscribe(() => this.markAsDirty());\n\n      associationManager.extensions$\n        .pipe(\n          // Extensions will be an empty array on first emit as initial value and\n          // when no extension containers are used in the record editor.\n          filter((extensions) => !isEmpty(extensions)),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe(() => {\n          this.syncRecordInstanceWithForm(options.associatedRecordPath);\n          this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n        });\n\n      this.associationManagers[associationManagerKey] = associationManager;\n    } else {\n      associationManager.extendOptions(options);\n    }\n\n    return associationManager;\n  }\n\n  markAsDirty(): void {\n    this.state.form.markAsTouched();\n    this.state.form.markAsDirty();\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n\n  refresh(): Observable<never> {\n    if (this.isInEditMode() && this.state.currentState === RecordEditorState.Read) {\n      return this.initializeRecordInstance().pipe(catchError((error) => this.handleNoRecordFoundError(error)));\n    } else {\n      return EMPTY;\n    }\n  }\n\n  isDirty(): boolean {\n    return this.isInTemporaryMode() ? false : this.state.form.dirty;\n  }\n\n  isReady(): boolean {\n    return isEmpty(this.notReadyComponentIds);\n  }\n\n  notifyComponentReady(componentId: string, isReady: boolean): void {\n    if (isReady) {\n      delete this.notReadyComponentIds[componentId];\n    } else {\n      this.notReadyComponentIds[componentId] = true;\n    }\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    const matchFieldInstanceId = propertyPath.match(/^recordInstance\\.fieldInstances\\.(\\d+)\\.value$/);\n\n    const shouldSwitchToReadState =\n      (propertyPath === 'readState' && propertyValue) || (propertyPath === 'editState' && !propertyValue);\n\n    const shouldSwitchToEditState =\n      (propertyPath === 'readState' && !propertyValue) || (propertyPath === 'editState' && propertyValue);\n\n    if (shouldSwitchToReadState) {\n      if (this.state.currentState !== RecordEditorState.Read) {\n        return this.cancel();\n      }\n    } else if (shouldSwitchToEditState) {\n      if (this.state.currentState !== RecordEditorState.Edit) {\n        this.switchToEditState();\n      }\n    } else if (matchFieldInstanceId) {\n      const fieldId = Number(matchFieldInstanceId[1]);\n\n      this.setFieldValue(fieldId, propertyValue);\n    } else {\n      return throwError(`Record editor: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  setFieldValue(\n    fieldId: number,\n    value: any,\n    associatedRecordPath?: string[],\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    if (\n      this.state.recordInstance &&\n      this.state.recordInstance.getRecordInstance(associatedRecordPath) &&\n      this.state.recordInstance.isFieldValueChanged(fieldId, value, associatedRecordPath)\n    ) {\n      this.state.recordInstance.setFieldValue(fieldId, value, associatedRecordPath);\n\n      this.state.form.syncFormControlValues(\n        String(fieldId),\n        this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath),\n        associatedRecordPath && associatedRecordPath.join(RecordEditorFormDelimiter),\n        options\n      );\n\n      this.updateSelectionFieldOptionNames(this.state.recordInstance);\n      this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n      this.updateIsDirtyProperty();\n      this.updateCanSaveProperty();\n    }\n  }\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): void {\n    return this.state.recordInstance && this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath);\n  }\n\n  save(closeViewAfterSave: boolean = false): Observable<never> {\n    if (this.isInTemporaryMode()) {\n      this.rxLogService.debug('Record Editor: skip saving record instance in Temporary mode.');\n      return EMPTY;\n    } else if (!this.isValid()) {\n      this.state.form.markInvalidControlsAsTouched();\n\n      this.rxNotificationService.addErrorMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.validation-error.message')\n      );\n\n      return throwError(null);\n    } else if (this.canSave()) {\n      let savingObservable$: Observable<never>;\n\n      this.state.isSaving = true;\n      this.updateCanSaveProperty();\n\n      if (this.isInCreateMode()) {\n        savingObservable$ = this.rxRecordInstanceService.create(this.state.recordInstance).pipe(\n          tap((recordInstance) => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n\n            if (!this.state.recordInstanceId) {\n              set(\n                this.state.recordInstance,\n                `fieldInstances[${RX_RECORD_DEFINITION.coreFieldIds.id}].value`,\n                recordInstance.id\n              );\n\n              this.state.recordInstance.id = recordInstance.id;\n              this.state.recordInstanceId = recordInstance.id;\n            }\n\n            this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n            this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n            if (!closeViewAfterSave) {\n              this.rxGlobalEventsService.viewActionsCompleted$\n                .pipe(\n                  take(1),\n                  switchMap(() => this.initializeRecordInstance()),\n                  takeUntil(this.destroyed$)\n                )\n                .subscribe();\n            }\n          }),\n          switchMapTo(EMPTY)\n        );\n      } else if (this.isInEditMode()) {\n        savingObservable$ = this.rxRecordInstanceUpdateService.execute(this.state.recordInstance).pipe(\n          tap(() => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n          }),\n          switchMap(() => {\n            return this.initializeRecordInstance().pipe(\n              catchError((error) => this.handleNoRecordFoundError(error)),\n              tap({\n                complete: () => {\n                  if (this.state.isReadOnlyStateAvailable) {\n                    this.setRecordEditorState(RecordEditorState.Read);\n                  }\n                }\n              })\n            );\n          })\n        );\n      }\n\n      return savingObservable$.pipe(\n        tap({\n          complete: () => {\n            // Mark record editor form as pristine due to:\n            // - prevent showing dirty state confirmation dialog when any action after\n            // the save will close current view e.g open view in the same window action.\n            // - we don't have to wait until all extension containers data will be loaded\n            // to reset record editor form while synchronization.\n            this.state.form.markAsPristine();\n          }\n        }),\n        finalize(() => {\n          this.state.isSaving = false;\n          this.updateCanSaveProperty();\n          this.updateIsDirtyProperty();\n        })\n      );\n    } else {\n      this.rxLogService.debug('Record Editor: cannot save unmodified record instance.');\n\n      return throwError(null);\n    }\n  }\n\n  getFieldControl(\n    fieldId: number,\n    guid: string,\n    validator: ValidatorFn | ValidatorFn[] = [],\n    associatedRecordPath?: string[]\n  ): RecordEditorFormControl {\n    const existingControl = this.state.form.getFormControl(String(fieldId), guid, associatedRecordPath);\n\n    if (existingControl) {\n      return existingControl;\n    }\n\n    const initialValue = this.state.recordInstance\n      ? this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath)\n      : null;\n    const recordInstanceValidator = this.getFieldInstanceControlValidator(fieldId, associatedRecordPath);\n\n    validator = Array.isArray(validator) ? validator : [validator];\n    validator.push(recordInstanceValidator);\n\n    let formControl;\n\n    if (associatedRecordPath) {\n      formControl = this.state.form.addAssociatedFieldControl(\n        String(fieldId),\n        guid,\n        associatedRecordPath,\n        initialValue,\n        validator\n      );\n    } else {\n      formControl = this.state.form.addFieldControl(String(fieldId), guid, initialValue, validator);\n    }\n\n    formControl.valueChanges\n      .pipe(\n        distinctUntilChanged(this.rxRecordInstanceUtilsService.isFieldValueEqual),\n        // Use asyncScheduler to allow all observers to be notified about the original (non-normalized) field value change,\n        // before the value gets normalized by `this.setFieldValue` call in the subscription below.\n        // This resolves an issue where the subscriptions were executed with the normalized value first, followed by\n        // non-normalized value.\n        // In the example below, the actual form control value is already normalized but valueChange observer\n        // receives a non-normalized value.\n        // formControl.valueChange.subscribe(nonNormalizedValue => formControl.value !== nonNormalizedValue);\n        observeOn(asyncScheduler),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        // Use formControl.value instead of the emitted value that comes asynchronously\n        // and may be different than the actual value, e.g. when user types quickly\n        this.setFieldValue(fieldId, formControl.value, associatedRecordPath, {\n          markAsDirty: formControl.dirty,\n          markAsTouched: false\n        });\n      });\n\n    return formControl;\n  }\n\n  getPermissionType(fieldId: number, associatedRecordPath?: string[]): string {\n    const fieldInstance = this.state.recordInstance\n      ? this.state.recordInstance.getFieldInstance(fieldId, associatedRecordPath)\n      : null;\n\n    if (fieldInstance) {\n      return get(fieldInstance, 'permissionType') || RX_RECORD_DEFINITION.fieldPermissionTypes.change;\n    } else {\n      return null;\n    }\n  }\n\n  getFieldInstanceProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any {\n    return this.state.recordInstance && this.state.recordInstance.getFieldProp(fieldId, prop, associatedRecordPath);\n  }\n\n  getRecordEditorMode(): RecordEditorMode {\n    return this.state.mode;\n  }\n\n  setFieldInstanceProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void {\n    if (this.state.recordInstance) {\n      this.state.recordInstance.setFieldProp(fieldId, prop, value, associatedRecordPath);\n    }\n  }\n\n  isValid(): boolean {\n    return this.state.form.valid;\n  }\n\n  switchToEditState(): void {\n    this.setRecordEditorState(RecordEditorState.Edit);\n  }\n\n  isEditStateAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable &&\n      this.state.currentState === RecordEditorState.Read &&\n      Boolean(this.state.recordInstanceId) &&\n      Boolean(this.state.allowEdit)\n    );\n  }\n\n  isSaveButtonAvailable(): boolean {\n    return this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit;\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return !this.canSave();\n  }\n\n  isCancelButtonAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit && this.isInEditMode()\n    );\n  }\n\n  private cancel(): Observable<never> {\n    if (this.state.isReadOnlyStateAvailable && this.state.recordInstance) {\n      if (this.isDirty()) {\n        return defer(() => from(this.rxUtilityModalsService.confirmUnsavedChanges())).pipe(\n          switchMap((isConfirmed) => {\n            if (isConfirmed) {\n              this.restoreRecordEditor();\n              this.setRecordEditorState(RecordEditorState.Read);\n\n              return EMPTY;\n            } else {\n              return throwError(null);\n            }\n          })\n        );\n      } else {\n        this.setRecordEditorState(RecordEditorState.Read);\n      }\n    }\n\n    return EMPTY;\n  }\n\n  canSave(): boolean {\n    return this.isInTemporaryMode() ? true : !this.state.isSaving && (this.isInCreateMode() || this.isDirty());\n  }\n\n  isConfigValid(): boolean {\n    return this.isInEditMode() ? this.rxStringService.isNonEmptyString(this.state.recordInstanceId) : true;\n  }\n\n  onSaveClick(): void {\n    this.save()\n      .pipe(\n        take(1),\n        catchError((error) => (error === null ? of(error) : throwError(error)))\n      )\n      .subscribe();\n  }\n\n  onCancelClick(): void {\n    this.cancel().subscribe();\n  }\n\n  private initializeRecordInstance(): Observable<never> {\n    let initialize$ = EMPTY;\n\n    if (this.isConfigValid()) {\n      this.state.isDataLoading = true;\n\n      initialize$ = this.getRecordInstance().pipe(\n        tap((recordInstance) => {\n          this.setRecordInstance(recordInstance);\n          this.setRecordDefinition(recordInstance.recordDefinition);\n          this.updateSelectionFieldOptionNames(recordInstance);\n        }),\n        switchMapTo(EMPTY),\n        catchError((error) => {\n          // delay record instance id update to allow throwing an error.\n          asapScheduler.schedule(() => {\n            this.setRecordInstance(null);\n            this.setRecordDefinition(null);\n          });\n\n          return throwError(error);\n        }),\n        finalize(() => {\n          this.state.isDataLoading = false;\n        })\n      );\n    } else {\n      if (this.state.recordInstanceId !== '' && !isNil(this.state.recordInstanceId)) {\n        this.rxNotificationService.addErrorMessage(\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record-instance-id.message'\n          )\n        );\n      }\n\n      if (this.state.recordInstance) {\n        this.setRecordInstance(null);\n        this.setRecordDefinition(null);\n      }\n    }\n\n    return initialize$;\n  }\n\n  private handleNoRecordFoundError(error) {\n    const isNoRecordFoundError = this.rxRecordInstanceUtilsService.isNoRecordFoundError(error);\n\n    if (isNoRecordFoundError) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-editor.no-access-to-record.message'\n        )\n      );\n\n      this.runtimeViewModelApi.cancel(true).subscribe();\n    }\n\n    return throwError(isNoRecordFoundError ? null : error);\n  }\n\n  private updateIsDirtyProperty(): void {\n    const isDirty = this.isDirty();\n\n    if (this.state.isDirty !== isDirty) {\n      this.state.isDirty = isDirty;\n      this.notifyPropertyChanged('isDirty', isDirty);\n    }\n  }\n\n  private updateCanSaveProperty(): void {\n    const canSave = this.canSave();\n\n    if (this.state.canSave !== canSave) {\n      this.state.canSave = canSave;\n      this.notifyPropertyChanged('canSave', canSave);\n    }\n  }\n\n  private setRecordInstance(recordInstance: RecordInstance): void {\n    forEach(this.associationManagers, (manager) => manager.destroy());\n\n    this.associationInstances = {};\n    this.associationManagers = {};\n\n    if (recordInstance && !recordInstance.associationInstances) {\n      recordInstance.associationInstances = {};\n\n      this.associationInstances = recordInstance.associationInstances;\n    }\n\n    this.state.recordInstance = recordInstance;\n    this.state.recordInstanceId = recordInstance && recordInstance.id;\n\n    recordInstance ? this.syncRecordInstanceWithForm() : this.state.form.clearAndReset();\n\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n    this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n\n    if (recordInstance) {\n      this.recordInstanceChangedSubject.next();\n    }\n  }\n\n  private getFieldInstanceControlValidator(fieldId: number, associatedRecordPath?: string[]): ValidatorFn {\n    return (control: RecordEditorFormControl) =>\n      this.state.recordInstance &&\n      this.state.recordInstance.validateSingleField(fieldId, control.value, associatedRecordPath);\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    if (recordDefinition) {\n      if (this.isInBulkEditMode()) {\n        recordDefinition = this.rxRecordDefinitionService.setFieldDefinitionsToOptional(recordDefinition);\n      }\n\n      recordDefinition.fieldDefinitionsById =\n        this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n    }\n\n    this.state.recordDefinition = recordDefinition;\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private getRecordInstance(): Observable<RecordInstance> {\n    if (this.isInCreateMode() || this.isInTemporaryMode()) {\n      if (this.state.recordInstance) {\n        this.state.recordInstance = this.state.recordInstance.getOriginalRecordInstance();\n\n        return of(this.state.recordInstance);\n      } else {\n        return this.rxRecordInstanceService.getNew(this.state.recordDefinitionName);\n      }\n    } else if (this.isInBulkEditMode()) {\n      return this.rxRecordInstanceService.getEmpty(this.state.recordDefinitionName);\n    } else if (this.isInEditMode()) {\n      return this.rxRecordInstanceService.get(this.state.recordDefinitionName, this.state.recordInstanceId);\n    }\n  }\n\n  private getAssociationInstances(\n    associationDefinitionName: string,\n    nodeSide: string,\n    rolesConfigKey: string\n  ): IAssociationRecords {\n    const nodeSideRolesConfigKey: string = compact([nodeSide, rolesConfigKey]).join(':');\n\n    let associationRecords: IAssociationRecords = get(this.associationInstances, [\n      associationDefinitionName,\n      nodeSideRolesConfigKey\n    ]);\n\n    if (!associationRecords) {\n      associationRecords = {\n        existing: [],\n        pending: [],\n        deleted: [],\n        extensions: []\n      };\n\n      set(this.associationInstances, [associationDefinitionName, nodeSideRolesConfigKey], associationRecords);\n    }\n\n    return associationRecords;\n  }\n\n  private setRecordEditorState(state: RecordEditorState): void {\n    this.state.currentState = state;\n    this.notifyPropertyChanged('inReadState', state === RecordEditorState.Read);\n  }\n\n  private isInCreateMode(): boolean {\n    return this.state.mode === RecordEditorMode.Create;\n  }\n\n  private isInBulkEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.BulkEdit;\n  }\n\n  private isInEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.Edit;\n  }\n\n  private isInTemporaryMode(): boolean {\n    return this.state.mode === RecordEditorMode.Temporary;\n  }\n\n  private isNewAttachment(fieldId: number): boolean {\n    return Boolean(this.state.recordInstance.fieldInstances[fieldId].file);\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (recordInstance && get(this.state.recordDefinition, 'fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        this.state.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.state.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        this.notifyPropertyChanged('selectionFieldOptionNamesById', newSelectionFieldOptionNames);\n      }\n    }\n  }\n\n  private syncRecordInstanceWithForm(associatedRecordPath?: string[]): void {\n    const fieldIds = this.state.form.getFieldIds(associatedRecordPath);\n\n    if (!isEmpty(fieldIds)) {\n      const formStateByFieldId = fieldIds.reduce((result, fieldId) => {\n        result[fieldId] = this.state.recordInstance.getFieldValue(Number(fieldId), associatedRecordPath);\n\n        return result;\n      }, {});\n\n      this.state.form.resetFieldControls(formStateByFieldId, associatedRecordPath);\n    }\n  }\n\n  private restoreRecordEditor(): void {\n    this.state.recordInstance.revertFieldInstances();\n\n    forEach(this.associationManagers, (manager) => manager.restore());\n\n    this.syncRecordInstanceWithForm();\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n}\n","<div class=\"loader-container\" *ngIf=\"state.isDataLoading && !state.recordInstance\">\n  <div class=\"loader-inline mr-1\"></div>\n  <span>{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n</div>\n\n<div *ngIf=\"!state.isDataLoading && (!isConfigValid() || !state.recordInstance)\">\n  {{ 'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record.message' | translate }}\n</div>\n\n<div *ngIf=\"state.recordInstance && isConfigValid()\" class=\"clearfix\">\n  <div class=\"d-flex justify-content-end\">\n    <button\n      *ngIf=\"isEditStateAvailable()\"\n      class=\"py-0 mb-1\"\n      adapt-button\n      size=\"small\"\n      btn-type=\"tertiary\"\n      (click)=\"switchToEditState()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n    </button>\n  </div>\n\n  <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n\n  <button\n    *ngIf=\"isSaveButtonAvailable()\"\n    class=\"mr-1 mt-3\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isCancelButtonAvailable()\"\n    class=\"mt-3\"\n    rx-id=\"cancel-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    size=\"small\"\n    (click)=\"onCancelClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { get, isUndefined } from 'lodash';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RecordEditorMode } from '../common/record-editor.types';\n\n@Injectable()\nexport class RecordEditorComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  constructor(private viewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(recordEditorComponentDefinition: IContainerViewComponentDefinition) {\n    const properties = get(recordEditorComponentDefinition, 'propertiesByName');\n\n    if (properties.mode === RecordEditorMode.Edit && isUndefined(properties.allowEdit)) {\n      properties.allowEdit = '1';\n    }\n\n    this.viewDefinitionParserService\n      .getComponents(recordEditorComponentDefinition)\n      .filter(\n        (componentPair) =>\n          componentPair.componentDefinition.type !== RxViewComponentType.ActionButton &&\n          (componentPair.componentDefinition.propertiesByName.hasOwnProperty('fieldId') ||\n            componentPair.componentDefinition.type === RxViewComponentType.Association)\n      )\n      .map((componentPair) => componentPair.componentDefinition)\n      .forEach((fieldComponentDefinition) => {\n        Object.assign(fieldComponentDefinition.propertiesByName, {\n          api: `\\${view.components.${recordEditorComponentDefinition.guid}.api}`,\n          inReadState: `\\${view.components.${recordEditorComponentDefinition.guid}.inReadState}`,\n          recordDefinition: `\\${view.components.${recordEditorComponentDefinition.guid}.recordDefinition}`,\n          recordInstance: `\\${view.components.${recordEditorComponentDefinition.guid}.recordInstance}`\n        });\n      });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptAlertModule, AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RxModalModule } from '@helix/platform/ui-kit';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RecordEditorComponentDefinitionAdapterService } from './record-editor-component-definition-adapter.service';\nimport { RecordEditorComponent } from './record-editor.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport {\n  RxAssociationDefinitionCacheService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport {\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n// AoT requires an exported function for factories\nexport function AssociationManagerFactory(\n  rxAssociationInstanceDataPageService,\n  rxRecordDefinitionCacheService,\n  rxRecordInstanceUtilsService,\n  rxRecordInstanceService,\n  rxJsonParserService,\n  rxAssociationDefinitionCacheService\n) {\n  const service = function (options) {\n    return new RxAssociationManagerService(\n      options,\n      rxAssociationInstanceDataPageService,\n      rxRecordDefinitionCacheService,\n      rxRecordInstanceUtilsService,\n      rxRecordInstanceService,\n      rxJsonParserService,\n      rxAssociationDefinitionCacheService\n    );\n  };\n\n  return service;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RuntimeViewCanvasModule,\n    ReactiveFormsModule,\n    AdaptButtonModule,\n    RxModalModule,\n    TranslateModule,\n    AdaptAlertModule.forRoot()\n  ],\n  providers: [\n    RecordEditorComponentDefinitionAdapterService,\n    RxRecordEditorUtilsService,\n    {\n      provide: RxAssociationManagerService,\n      useFactory: AssociationManagerFactory,\n      deps: [\n        RxAssociationInstanceDataPageService,\n        RxRecordDefinitionCacheService,\n        RxRecordInstanceUtilsService,\n        RxRecordInstanceService,\n        RxJsonParserService,\n        RxAssociationDefinitionCacheService\n      ]\n    }\n  ],\n  exports: [RecordEditorComponent],\n  declarations: [RecordEditorComponent],\n  entryComponents: [RecordEditorComponent]\n})\nexport class RecordEditorModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private recordEditorComponentDefinitionAdapterService: RecordEditorComponentDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.RecordEditor,\n      this.recordEditorComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { IFieldDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { inRange, isFunction } from 'lodash';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RECORD_EDITOR } from './record-editor.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDefaultRecordEditorInputType {\n  resourceTypeFieldTypeMap = {};\n\n  constructor() {\n    this.initResourceTypeFieldTypeMap();\n  }\n\n  getFieldTypeByFieldDefinition(fieldDefinition: IFieldDefinition): string {\n    if (isFunction(this.resourceTypeFieldTypeMap[fieldDefinition.resourceType])) {\n      return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType](fieldDefinition);\n    } else {\n      return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType];\n    }\n  }\n\n  private initResourceTypeFieldTypeMap(): void {\n    this.resourceTypeFieldTypeMap = {\n      ...RECORD_EDITOR.fieldTypes,\n\n      [RX_RECORD_DEFINITION.resourceTypes.character]: (fieldDefinition) => {\n        return fieldDefinition.namedListDefinition || inRange(fieldDefinition.maxLength, 1, 255)\n          ? RxViewComponentType.Character\n          : RxViewComponentType.Textarea;\n      }\n    };\n  }\n}\n","export const RX_ASSOCIATION = {\n  actions: {\n    associate: 'associate',\n    createAndAssociate: 'createAndAssociate'\n  },\n\n  componentTypes: {\n    associationFilter: 'rx-association-filter',\n    associatedRecordField: 'rx-associated-record-field'\n  }\n};\n\nexport enum RxAssociationEditingMode {\n  Dropdown = 'dropdown',\n  Views = 'views'\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RecordEditorState } from '../../../../record-editor';\nimport { IRecordPreviewCardConfig } from './record-preview-card.types';\n\n@Component({\n  selector: 'rx-record-preview-card',\n  templateUrl: './record-preview-card.component.html',\n  styleUrls: ['./record-preview-card.component.scss']\n})\nexport class RxRecordPreviewCardComponent implements OnInit {\n  @Input() config: IRecordPreviewCardConfig;\n\n  private maxFieldValueLength: number;\n\n  ngOnInit() {\n    this.maxFieldValueLength = this.config.maxFieldValueLength || 200;\n  }\n\n  isEditableState() {\n    return this.config.state === RecordEditorState.Edit;\n  }\n}\n","<div class=\"rx-record-preview-card d-flex align-items-start justify-content-between w-100\">\n  <ul class=\"rx-card-fields d-flex flex-column list-unstyled focusable mb-0\" tabindex=\"0\">\n    <li class=\"d-flex rx-card-field\" *ngFor=\"let field of config.fields\">\n      <span class=\"rx-card-field-label\" *ngIf=\"field.label\">{{ field.label }}</span>\n      <span *ngIf=\"field.label\">: </span>\n      <span class=\"rx-card-field-value px-1\" [ngClass]=\"{ 'font-weight-bold': !isEditableState() }\">{{\n        field.value\n      }}</span>\n    </li>\n  </ul>\n\n  <button\n    *ngIf=\"isEditableState()\"\n    (click)=\"config.onDelete(config.id)\"\n    class=\"btn btn-link d-icon-cross p-0\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"tertiary\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.remove.label' | translate\"\n  ></button>\n</div>\n","import { DatePipe } from '@angular/common';\nimport { AfterViewInit, Component, OnInit, ViewChild, HostBinding } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  castArray,\n  find,\n  forEach,\n  get,\n  head,\n  includes,\n  isNil,\n  isString,\n  isUndefined,\n  map as _map,\n  transform,\n  isEmpty,\n  isEqual,\n  every\n} from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport {\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  skip,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  IRecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionInheritanceDataPageService,\n  RxRecordInstanceDataPageService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { IDataPageParams } from '@helix/platform/shared/api';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';\n\nimport { RecordEditorState, RxAssociationManagerService } from '../../../record-editor';\nimport { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';\nimport { RxAssociationEditingMode } from '../association.types';\nimport { IAssociationRecord, IRolesConfig, IRxAssociationConfig, IRxAssociationFilter } from './association.types';\nimport { IRecordPreviewCardConfig, IRecordPreviewCardField } from './record-preview-card/record-preview-card.types';\n\n@Component({\n  selector: 'rx-association',\n  templateUrl: './association.component.html',\n  styleUrls: ['./association.component.scss']\n})\nexport class RxAssociationComponent extends BaseViewComponent implements AfterViewInit, OnInit, IViewComponent {\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  @HostBinding('class.rx-field-disabled')\n  isDisabled = false;\n\n  api = {\n    associate: (associations) => {\n      this.associationManager.addToPending(associations, this.extractRolesConfig());\n    }\n  };\n\n  areActionsAvailable: boolean;\n\n  config: Observable<IRxAssociationConfig>;\n\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n  optionLoaderFunc = this.getAssociationsOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n\n  existingPreviewConfigurations = [];\n  pendingPreviewConfigurations = [];\n\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n\n  pendingPageSize = 10;\n  currentPendingCount = 10;\n  totalPendingCount = 0;\n\n  associationCandidateRecordInstances = [];\n  fieldDefinition: IFieldDefinition;\n  fieldDefinitions = {};\n\n  associationDefinitionName: string;\n  associatedRecordNodeSide: RxAssociatedRecordNodeSide;\n  associationManager: RxAssociationManagerService;\n  editingMode: RxAssociationEditingMode;\n  fieldId: string = null;\n  fields: IRecordPreviewCardField[] = [];\n  inReadState = false;\n  permissionType: string;\n  label: string = null;\n  recordDefinition: IRecordDefinition = null;\n  recordDefinitionName: string = null;\n  recordInstance: IRecordInstance;\n  recordEditorApi: IRecordEditorApi;\n  state: RecordEditorState;\n  useDefaultRoles: boolean = null;\n  nodeARole: string = null;\n  nodeBRole: string = null;\n  previewRolesConfig: IRolesConfig;\n\n  private associationFilter: IRxAssociationFilter;\n  private associationFilterNodeSide: RxAssociatedRecordNodeSide;\n\n  formControl: FormControl = new FormControl('', null);\n\n  constructor(\n    private datePipe: DatePipe,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxRecordDefinitionInheritanceDataPageService: RxRecordDefinitionInheritanceDataPageService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super();\n    this.isHidden = false;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    const config$ = this.config.pipe(\n      filter((config) => Boolean(config.api && config.recordDefinition)),\n      takeUntil(this.destroyed$)\n    );\n\n    config$.pipe(take(1)).subscribe((config) => {\n      this.onConfigInitialized(config);\n      this.onConfigUpdated(config);\n    });\n\n    config$.pipe(skip(1)).subscribe(this.onConfigUpdated.bind(this));\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.previewRolesConfig = this.extractRolesConfig();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.editingMode === RxAssociationEditingMode.Dropdown) {\n      this.formControl.valueChanges\n        .pipe(distinctUntilChanged(), startWith(this.formControl.value as string), takeUntil(this.destroyed$))\n        .subscribe(() => {\n          this.updateSelectedOptions();\n        });\n    }\n  }\n\n  private onConfigInitialized(config: IRxAssociationConfig): void {\n    this.associationDefinitionName = config.associationDefinitionName;\n    this.associatedRecordNodeSide = config.associatedRecordNodeSide;\n    this.editingMode = config.editingMode || RxAssociationEditingMode.Views;\n    this.fieldId = config.fieldId;\n    this.fields = config.fields;\n    this.recordDefinition = config.recordDefinition;\n    this.recordDefinitionName = config.recordDefinitionName;\n    this.recordEditorApi = config.api;\n    this.state = config.state;\n    this.useDefaultRoles = config.useDefaultRoles;\n    this.nodeARole = config.nodeARole;\n    this.nodeBRole = config.nodeBRole;\n\n    if (this.fieldId) {\n      this.fieldDefinition = config.recordDefinition.fieldDefinitions.find(\n        (definition) => definition.id === Number(this.fieldId)\n      );\n    }\n  }\n\n  private onConfigUpdated(config: IRxAssociationConfig): void {\n    const inReadState: boolean = Boolean(config.inReadState);\n\n    const isDisabled: boolean =\n      Boolean(config.disabled) || this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view;\n\n    let forceUpdatePreviewCardConfigState = false;\n\n    this.isHidden = Boolean(config.hidden);\n    this.areActionsAvailable = !inReadState && this.editingMode === RxAssociationEditingMode.Views;\n\n    if (this.isDisabled !== isDisabled) {\n      this.isDisabled = isDisabled;\n\n      forceUpdatePreviewCardConfigState = true;\n    }\n\n    if (this.inReadState !== inReadState) {\n      this.inReadState = inReadState;\n\n      forceUpdatePreviewCardConfigState = true;\n    }\n\n    if (forceUpdatePreviewCardConfigState && this.existingPreviewConfigurations.length) {\n      this.updatePreviewCardConfigState();\n    }\n\n    this.label = isUndefined(config.label) ? this.fieldDefinition.name ?? '' : config.label;\n\n    if (\n      this.selectWithPaginationComponent &&\n      this.associationFilter &&\n      get(config, 'associationFilter[0]') &&\n      this.associationFilter.recordInstanceId !== config.associationFilter[0].recordInstanceId\n    ) {\n      // Do not delete existing association until Record editor is ready.\n      // This is needed in case when e.g. one association view component\n      // is filtered by the value selected in the other association view component.\n      // If during initialization, the value in the second view component gets loaded\n      // faster than the value in the first one, the value in the second view component\n      // would be cleared after the first component's value is loaded.\n      if (this.recordEditorApi.isReady()) {\n        this.deleteAllExisting();\n      }\n\n      this.deleteAllPending();\n\n      this.selectWithPaginationComponent.resetLoadedOptions();\n\n      this.associationCandidateRecordInstances = [];\n\n      if (!this.associationFilterNodeSide) {\n        this.rxAssociationDefinitionService\n          .get(this.associationFilter.associationDefinitionName)\n          .pipe(\n            switchMap((associationDefinition: IAssociationDefinition) => {\n              if (associationDefinition.nodeAId === this.recordDefinitionName) {\n                this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeA;\n              } else if (associationDefinition.nodeBId === this.recordDefinitionName) {\n                this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeB;\n              } else {\n                return this.rxRecordDefinitionInheritanceDataPageService\n                  .get({ params: { recorddefinition: this.recordDefinitionName } })\n                  .pipe(\n                    tap((recordDefinitionInheritanceDataPage: any) => {\n                      const recordDefinitionAncestors = recordDefinitionInheritanceDataPage.data;\n\n                      if (includes(recordDefinitionAncestors, associationDefinition.nodeAId)) {\n                        this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeA;\n                      } else if (includes(recordDefinitionAncestors, associationDefinition.nodeBId)) {\n                        this.associatedRecordNodeSide = RxAssociatedRecordNodeSide.NodeB;\n                      } else {\n                        throw new Error(\n                          'No matches for association definition node side within inheritance ancestors.'\n                        );\n                      }\n                    })\n                  );\n              }\n\n              return EMPTY;\n            })\n          )\n          .subscribe();\n      }\n    }\n\n    this.associationFilter = head(config.associationFilter);\n\n    if (config.recordInstance && this.recordInstance !== config.recordInstance) {\n      this.recordInstance = config.recordInstance;\n      this.isDisabled = true;\n\n      this.notifyPropertyChanged('isDisabled', this.isDisabled);\n      this.recordEditorApi.notifyComponentReady(this.guid, false);\n\n      this.associationManager = this.getAssociationManager();\n\n      this.associationManager\n        .initialize()\n        .pipe(\n          delay(0),\n          switchMap(() => this.associationManager.loadExistingAssociations()),\n          tap(() => {\n            this.isDisabled =\n              Boolean(config.disabled) || this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view;\n\n            this.notifyPropertyChanged('isDisabled', this.isDisabled);\n\n            this.areActionsAvailable = !this.inReadState && this.editingMode === RxAssociationEditingMode.Views;\n\n            if (this.editingMode === RxAssociationEditingMode.Views) {\n              this.fieldDefinitions = transform(\n                this.fields,\n                (result, field: IRecordPreviewCardField) => {\n                  const fieldDefinition = find(this.associationManager.recordDefinition.fieldDefinitions, {\n                    id: Number(field.fieldId)\n                  });\n\n                  result[fieldDefinition.id] = fieldDefinition;\n                },\n                {}\n              );\n            }\n\n            this.associationManager.existing$.pipe(takeUntil(this.destroyed$)).subscribe((newValue) => {\n              this.onAssociationsChanged(newValue, 'existingPreviewConfigurations');\n              this.updateTotalExistingAssociationsCount();\n            });\n\n            this.associationManager.pending$.pipe(takeUntil(this.destroyed$)).subscribe((newValue) => {\n              this.onAssociationsChanged(newValue, 'pendingPreviewConfigurations');\n              this.totalPendingCount = this.pendingPreviewConfigurations.length;\n            });\n\n            combineLatest([this.associationManager.pending$, this.associationManager.existing$])\n              .pipe(take(1))\n              .subscribe(() => {\n                this.recordEditorApi.notifyComponentReady(this.guid, true);\n              });\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  private getAssociationManager(): RxAssociationManagerService {\n    const fieldsIds = this.fieldId\n      ? [this.fieldId, RX_RECORD_DEFINITION.coreFieldIds.id]\n      : _map(this.fields, 'fieldId');\n\n    return this.recordEditorApi.getAssociationManager({\n      associationDefinitionName: this.associationDefinitionName,\n      associatedRecordNodeSide: this.associatedRecordNodeSide || RX_ASSOCIATION_DEFINITION.roles.second.value,\n      associatedRecordInstanceId: this.recordInstance.id,\n      recordDefinitionName: this.recordDefinitionName,\n      fieldIds: fieldsIds,\n      rolesConfig: this.extractRolesConfig()\n    });\n  }\n\n  private getAssociationsOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    const params: IDataPageParams = {\n      pageSize: pageSize,\n      startIndex: startIndex,\n      recorddefinition: this.recordDefinitionName,\n      propertySelection: this.associationManager.getFieldIds()\n    };\n\n    let instanceDataPageService: RxAssociationInstanceDataPageService | RxRecordInstanceDataPageService;\n\n    if (this.associationFilter) {\n      if (this.associationFilter.recordInstanceId) {\n        params.associationDefinition = this.associationFilter.associationDefinitionName;\n        params.associatedRecordInstanceId = this.associationFilter.recordInstanceId;\n        params.nodeToQuery = this.associationFilterNodeSide;\n\n        instanceDataPageService = this.rxAssociationInstanceDataPageService;\n      }\n    } else {\n      params.sortBy = this.fieldId;\n\n      if (searchQuery) {\n        params.queryExpression = `('${this.fieldId}' LIKE \"%${this.rxRecordInstanceUtilsService.escapeTextWildcards(\n          searchQuery\n        )}%\")`;\n      }\n\n      instanceDataPageService = this.rxRecordInstanceDataPageService;\n    }\n\n    return instanceDataPageService\n      ? instanceDataPageService.post({ params: params }).pipe(\n          map((result: any) => {\n            this.associationCandidateRecordInstances.push(...result.data);\n\n            return {\n              totalSize: result.totalSize,\n              options: result.data.map((recordInstance) => ({\n                displayValue: recordInstance[this.fieldId] || '',\n                value: recordInstance[RX_RECORD_DEFINITION.coreFieldIds.id]\n              }))\n            };\n          })\n        )\n      : of({\n          options: [],\n          totalSize: 0\n        });\n  }\n\n  deleteAllExisting(): void {\n    this.associationManager.deleteAllExisting();\n  }\n\n  deleteAllPending(): void {\n    this.associationManager.deleteAllPending();\n  }\n\n  loadExistingAssociations(): void {\n    this.associationManager\n      .loadExistingAssociations()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.updateTotalExistingAssociationsCount());\n  }\n\n  isReadModeEnabled(): boolean {\n    return this.inReadState;\n  }\n\n  isEditModeEnabled(): boolean {\n    return !this.inReadState;\n  }\n\n  getAssociatedValue(): string {\n    return get(this, 'selectedOptions[0].displayValue');\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar;baz'\n  private viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    return selectedOptions.map((option) => option.value).join(';');\n  }\n\n  // 'foo;bar;baz' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]\n  private modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return modelValue ? castArray(this.selectedOptions) : [];\n  }\n\n  private resetDropdownSelection(): void {\n    this.selectedOptions = [];\n  }\n\n  private updatePreviewCardConfigState(): void {\n    forEach(this.existingPreviewConfigurations, (previewCardConfig: IRecordPreviewCardConfig) => {\n      previewCardConfig.state = this.getStateForPreviewConfiguration();\n    });\n  }\n\n  private updateSelectedOptions(): void {\n    if (this.formControl.value && !isNil(this.formControl.value)) {\n      const pendingAssociation = {\n        id: this.formControl.value,\n        fieldInstances: null\n      };\n\n      const selectedRecordInstance = find(this.associationCandidateRecordInstances, function (association) {\n        return association[RX_RECORD_DEFINITION.coreFieldIds.id] === pendingAssociation.id;\n      });\n\n      pendingAssociation.fieldInstances = transform(\n        selectedRecordInstance,\n        function (result, value, filedId) {\n          result[filedId] = { value: value };\n        },\n        {}\n      );\n\n      this.associationManager.addToPending([pendingAssociation], null);\n    } else {\n      this.deleteAllExisting();\n      this.deleteAllPending();\n    }\n  }\n\n  private buildPreviewConfig(\n    association: IAssociationRecord,\n    fields: IRecordPreviewCardField[],\n    state: string\n  ): IRecordPreviewCardConfig {\n    return {\n      id: association.id,\n      state: state,\n\n      onDelete: (associationId) => {\n        this.associationManager.delete(associationId);\n      },\n\n      fields: _map(fields, (field) => {\n        const fieldDefinition = this.fieldDefinitions[field.fieldId];\n        const fieldInstance = association.fieldInstances[field.fieldId];\n\n        let value;\n\n        if (fieldInstance) {\n          value = fieldInstance.value;\n        }\n\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n          value = fieldDefinition.optionNamesById[value];\n        }\n\n        if (\n          fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType ||\n          (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType && isString(value))\n        ) {\n          value = this.datePipe.transform(value, 'mediumDate');\n        }\n\n        return {\n          label: field.label,\n          value: value || '<unknown>',\n          index: field.index,\n          fieldId: field.fieldId\n        };\n      })\n    };\n  }\n\n  showPendingAssociations(): void {\n    this.currentPendingCount += this.pendingPageSize;\n  }\n\n  getPendingPreviewConfigurations(): IRecordPreviewCardConfig[] {\n    return this.pendingPreviewConfigurations.slice(0, this.currentPendingCount);\n  }\n\n  private extractRolesConfig(): IRolesConfig {\n    return {\n      useDefaultRoles: this.useDefaultRoles,\n      nodeARole: this.nodeARole,\n      nodeBRole: this.nodeBRole\n    };\n  }\n\n  private updateTotalExistingAssociationsCount(): void {\n    this.associationManager.totalExistingCount =\n      (this.associationManager.remainingAssociatedRecordCount || 0) + this.existingPreviewConfigurations.length;\n  }\n\n  private getStateForPreviewConfiguration(): RecordEditorState {\n    return this.areActionsAvailable && !this.isDisabled ? RecordEditorState.Edit : RecordEditorState.Read;\n  }\n\n  private getFirstAssociationRecord(): IAssociationRecord {\n    return this.associationManager.existing[0] || this.associationManager.pending[0] || {};\n  }\n\n  private onAssociationsChanged(associations: IAssociationRecord[], configName: string): void {\n    const firstAssociatedRecord = this.getFirstAssociationRecord();\n\n    this.notifyPropertyChanged('firstAssociatedRecord', { id: firstAssociatedRecord.id || '' });\n\n    if (this.editingMode === RxAssociationEditingMode.Views) {\n      const associationsToPreview = associations.filter(\n        (association) =>\n          every(this.previewRolesConfig, isEmpty) || isEqual(this.previewRolesConfig, association.rolesConfig)\n      );\n\n      this[configName] = this.rebuildPreviewConfigurations(associationsToPreview);\n    } else if (this.editingMode === RxAssociationEditingMode.Dropdown) {\n      if (firstAssociatedRecord.id) {\n        this.selectedOptions = [\n          {\n            displayValue: firstAssociatedRecord.fieldInstances[this.fieldId]?.value,\n            value: firstAssociatedRecord.id\n          }\n        ];\n      } else {\n        this.resetDropdownSelection();\n      }\n\n      this.formControl.setValue(firstAssociatedRecord.id);\n    }\n  }\n\n  private rebuildPreviewConfigurations(associations: IAssociationRecord[]): IRecordPreviewCardConfig[] {\n    const state = this.getStateForPreviewConfiguration();\n\n    return _map(associations, (association) => {\n      return this.buildPreviewConfig(association, this.fields, state);\n    });\n  }\n}\n","<rx-read-only-field\n  *ngIf=\"!isHidden && isReadModeEnabled() && (existingPreviewConfigurations.length === 0 || editingMode === 'dropdown')\"\n  [label]=\"label\"\n  [value]=\"getAssociatedValue()\"\n></rx-read-only-field>\n\n<div *ngIf=\"!isHidden\" [ngSwitch]=\"editingMode\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"label\" [ngClass]=\"{ 'read-state': isReadModeEnabled() }\">\n    <adapt-rx-control-label *ngIf=\"isEditModeEnabled() || existingPreviewConfigurations.length > 0\" [label]=\"label\">\n    </adapt-rx-control-label>\n\n    <div *ngIf=\"areActionsAvailable\">\n      <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n    </div>\n\n    <div *ngIf=\"isReadModeEnabled()\">\n      <div [ngSwitch]=\"associationManager.cardinalityType\">\n        <div *ngSwitchCase=\"associationManager.cardinalityTypes.One\">\n          <div *ngIf=\"existingPreviewConfigurations.length || pendingPreviewConfigurations.length\" class=\"list-group\">\n            <rx-record-preview-card\n              [config]=\"existingPreviewConfigurations[0] || pendingPreviewConfigurations[0]\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n        </div>\n\n        <div *ngSwitchDefault>\n          <div class=\"list-group\">\n            <rx-record-preview-card\n              *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n              [config]=\"previewCardConfig\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n\n          <button\n            *ngIf=\"\n              associationManager.totalExistingCount >\n              existingPreviewConfigurations.length + associationManager.deleted.length\n            \"\n            (click)=\"loadExistingAssociations()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"isEditModeEnabled()\">\n      <div *ngIf=\"existingPreviewConfigurations.length\" class=\"form-group\">\n        <div class=\"d-flex justify-content-end pb-1\">\n          <span class=\"preview-count\">\n            {{\n              associationManager.totalExistingCount > 1\n                ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                  | translate\n                    : {\n                        count: associationManager.totalExistingCount\n                      })\n                : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n            }}\n          </span>\n\n          <button\n            [hidden]=\"!areActionsAvailable || isDisabled\"\n            (click)=\"deleteAllExisting()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            class=\"btn btn-link py-0\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n          </button>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"\n            associationManager.totalExistingCount >\n            existingPreviewConfigurations.length + associationManager.deleted.length\n          \"\n          (click)=\"loadExistingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n\n      <div *ngIf=\"pendingPreviewConfigurations.length\" class=\"form-group mt-3\">\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"m-0\">\n            {{\n              'com.bmc.arsys.rx.client.view-components.record-editor.association.pending-associations.label' | translate\n            }}\n            :\n          </div>\n\n          <div class=\"d-flex pb-1\">\n            <span class=\"preview-count\">\n              {{\n                totalPendingCount > 1\n                  ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                    | translate\n                      : {\n                          count: totalPendingCount\n                        })\n                  : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n              }}\n            </span>\n\n            <button\n              [hidden]=\"!areActionsAvailable || isDisabled\"\n              (click)=\"deleteAllPending()\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              class=\"btn btn-link py-0\"\n              type=\"button\"\n            >\n              {{\n                'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate\n              }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of getPendingPreviewConfigurations()\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"totalPendingCount > currentPendingCount\"\n          (click)=\"showPendingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div *ngIf=\"isEditModeEnabled()\" [attr.aria-label]=\"label\">\n      <rx-select-with-pagination\n        [formControl]=\"formControl\"\n        [readonly]=\"isDisabled\"\n        [label]=\"label\"\n        [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n        [optionLoader]=\"optionLoaderFunc\"\n        [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n      ></rx-select-with-pagination>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { filter, flow, map, sortBy } from 'lodash';\nimport { RX_ASSOCIATION } from '../association.types';\n\n@Injectable()\nexport class RxAssociationDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(private rxViewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(associationComponentDefinition: IContainerViewComponentDefinition, viewDefinition: IViewDefinition) {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      associationComponentDefinition\n    );\n\n    const childButtons = associationComponentDefinition.componentDefinitions.filter(\n      (component) => component.type === RxViewComponentType.ActionButton\n    );\n\n    const childSortedButtons = sortBy(childButtons, (componentDefinition: IViewComponentDefinition) =>\n      componentDefinition.propertiesByName.action === RX_ASSOCIATION.actions.associate ? 0 : 1\n    );\n\n    associationComponentDefinition.propertiesByName.state = targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    associationComponentDefinition.propertiesByName.useDefaultRoles =\n      associationComponentDefinition.propertiesByName.useDefaultRoles === 'true';\n\n    associationComponentDefinition.propertiesByName.fields = flow(\n      (componentDefinitions) =>\n        filter(componentDefinitions, {\n          type: RX_ASSOCIATION.componentTypes.associatedRecordField\n        }),\n      (componentDefinitions) =>\n        map(componentDefinitions, (fieldComponentDefinition) => ({\n          fieldId: fieldComponentDefinition.propertiesByName.fieldId,\n          label: fieldComponentDefinition.propertiesByName.label,\n          index: Number(fieldComponentDefinition.propertiesByName.index)\n        })),\n      (componentDefinitions) => sortBy(componentDefinitions, 'index')\n    )(associationComponentDefinition.componentDefinitions);\n\n    associationComponentDefinition.layout = JSON.stringify({\n      outlets: [\n        {\n          name: 'DEFAULT',\n          columns: [\n            {\n              children: childSortedButtons.map((component: IViewComponentDefinition) => component.guid)\n            }\n          ]\n        }\n      ]\n    });\n\n    associationComponentDefinition.componentDefinitions\n      .filter(\n        (componentDefinition: IViewComponentDefinition) => componentDefinition.type === RxViewComponentType.ActionButton\n      )\n      .forEach((componentDefinition: IViewComponentDefinition) => {\n        componentDefinition.propertiesByName.disabled =\n          associationComponentDefinition.propertiesByName.disabled +\n          ' OR ${view.components.' +\n          associationComponentDefinition.guid +\n          '.isDisabled}';\n      });\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n}\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { RxAssociationDefinitionAdapterService } from './association-definition-adapter.service';\nimport { RxAssociationComponent } from './association.component';\nimport { RxRecordPreviewCardComponent } from './record-preview-card/record-preview-card.component';\n\n@NgModule({\n  imports: [\n    AdaptButtonModule,\n    AdaptRxFormControlModule,\n    CommonModule,\n    FormsModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    RuntimeViewCanvasModule,\n    RxSelectWithPaginationModule,\n    TranslateModule\n  ],\n  declarations: [RxAssociationComponent, RxRecordPreviewCardComponent],\n  entryComponents: [RxAssociationComponent, RxRecordPreviewCardComponent],\n  providers: [DatePipe, RxAssociationDefinitionAdapterService]\n})\nexport class AssociationModule {\n  constructor(\n    private rxAssociationDefinitionAdapterService: RxAssociationDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Association,\n      this.rxAssociationDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IViewDesignerCanvasLayout, IViewDesignerCanvasOutlet } from '@helix/platform/view/designer';\n\n@Component({\n  selector: 'rx-association-design-item-container',\n  templateUrl: './association-design-container.component.html',\n  styleUrls: ['./association-design-container.component.scss']\n})\nexport class RxAssociationDesignContainerComponent {\n  @Input()\n  outlet: IViewDesignerCanvasOutlet;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @Input()\n  layout: IViewDesignerCanvasLayout;\n}\n","<rx-canvas-item\n  *ngFor=\"let layout of outlet.columns[0].children\"\n  [interactive]=\"false\"\n  [layout]=\"layout\"\n  [isReadOnly]=\"isReadOnly\"\n  class=\"mr-1\"\n>\n</rx-canvas-item>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { AssociationDesignModel } from './association-design.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { ReplaySubject } from 'rxjs';\nimport { RxAssociationDesignContainerComponent } from './association-design-container.component';\n\n@Component({\n  selector: 'rx-association-field-design',\n  templateUrl: './association-design.component.html'\n})\nexport class RxAssociationDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: AssociationDesignModel;\n\n  hidePlaceholder = false;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  containerComponent = RxAssociationDesignContainerComponent;\n\n  ngOnInit(): void {\n    this.model.displayedFields$.pipe(takeUntil(this.destroyed$)).subscribe((fields) => {\n      this.hidePlaceholder = fields.length > 0;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<div [ngSwitch]=\"model.editingMode$ | async\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"model.label$ | async\">\n    <label class=\"d-block form-control-label\">{{ model.label$ | async }}</label>\n\n    <div class=\"d-flex flex-wrap\">\n      <rx-canvas-outlet class=\"flex-grow-1\" [containerComponent]=\"containerComponent\"></rx-canvas-outlet>\n\n      <button\n        adapt-button\n        size=\"small\"\n        btn-type=\"tertiary\"\n        class=\"btn btn-link py-0 align-right\"\n        type=\"button\"\n        [hidden]=\"!hidePlaceholder\"\n      >\n        {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-empty-state\n      [hidden]=\"hidePlaceholder\"\n      type=\"objects\"\n      label=\"Add fields in the Properties panel.\"\n    ></adapt-empty-state>\n\n    <div class=\"form-group mt-2\" [hidden]=\"!hidePlaceholder\">\n      <div class=\"list-group\">\n        <div class=\"list-group-item\">\n          <div class=\"rx-record-preview-card w-100\">\n            <button\n              class=\"btn btn-link float-right d-icon-cross p-0\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              type=\"button\"\n            ></button>\n\n            <ul class=\"list-unstyled mb-0\">\n              <li class=\"rx-record-preview-card__field\" *ngFor=\"let field of model.displayedFields$ | async\">\n                <span class=\"rx-record-preview-card__label\" *ngIf=\"field.data.label\">{{ field.data.label }}</span>\n                <span *ngIf=\"field.data.label\">: </span>\n                <span class=\"rx-record-preview-card__value\">{{ field.data.name }}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div [attr.aria-label]=\"model.label$ | async\">\n      <adapt-rx-select [label]=\"model.label$ | async\" [disabled]=\"true\" ngModel></adapt-rx-select>\n    </div>\n  </div>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { ActiveModalRef, DismissReasons, TreeWrap } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { RxGuidService, RxStringService } from '@helix/platform/utils';\nimport { includes, map, pull, sortBy, transform } from 'lodash';\nimport {\n  IAssociatedRecordFieldDialog,\n  IAssociationRecordFieldSelectorEditorDialogConfig,\n  IFieldLabelsMap,\n  IViewAssociationRecordFieldSelectorEditorDialogItem\n} from './association-record-field-selector-editor-dialog.interface';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TreeNode } from 'primeng/api/treenode';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/drag-events';\n\n@Component({\n  selector: 'rx-association-record-field-selector-editor-dialog',\n  templateUrl: './association-record-field-selector-editor-dialog.component.html',\n  styleUrls: ['./association-record-field-selector-editor-dialog.component.scss']\n})\nexport class AssociationRecordFieldSelectorEditorDialogComponent extends RxModalClass implements OnInit {\n  config: IAssociationRecordFieldSelectorEditorDialogConfig;\n  fieldLabelsMap: IFieldLabelsMap;\n  filteredFieldDescriptors: IFieldDefinition[];\n  searchValue: string;\n\n  availableFieldTreeNodes: TreeNode<IFieldDefinition>[] = [];\n  canSave = false;\n  selectedFields: IViewAssociationRecordFieldSelectorEditorDialogItem[] = [];\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n\n  constructor(\n    private rxStringService: RxStringService,\n    private rxGuidService: RxGuidService,\n    public activeModalRef: ActiveModalRef,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    this.config = this.activeModalRef.getData();\n  }\n\n  isDirty(): boolean {\n    return this.canSave;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.fieldLabelsMap = transform(\n      this.config.fields,\n      (result, field) => {\n        result[field.id] = field.name;\n      },\n      {}\n    );\n\n    this.availableFieldTreeNodes = this.config.fields\n      .map((field) => ({\n        data: field,\n        label: field.name\n      }))\n      .sort((field1, field2) => field1.label.localeCompare(field2.label));\n\n    this.selectedFields = map(this.config.selectedFields, (field: IAssociatedRecordFieldDialog) => {\n      const descriptor = this.config.fields.find((fieldItem) => fieldItem.id === Number(field.data.fieldId));\n\n      return {\n        ...field,\n        labelText: field.data.label,\n        indexOrder: Number(field.data.index),\n        descriptor,\n        isOpen: field === this.config.fieldToEdit\n      };\n    });\n\n    this.refreshFieldDescriptorsList();\n  }\n\n  addField(field: IFieldDefinition): void {\n    this.canSave = true;\n\n    this.selectedFields.push({\n      guid: this.rxGuidService.generate(),\n      data: {\n        fieldId: String(field.id),\n        label: field.name,\n        index: String(this.selectedFields.length)\n      },\n      descriptor: field,\n      labelText: field.name,\n      indexOrder: this.selectedFields.length,\n      isOpen: true\n    });\n\n    this.refreshFieldDescriptorsList();\n  }\n\n  onSelectedFieldsListDrop(event: CdkDragDrop<any>): void {\n    this.addField(event.item.data);\n  }\n\n  onSave(): void {\n    const result: IAssociatedRecordFieldDialog[] = this.selectedFields.map((field) => {\n      return {\n        guid: field.guid,\n        type: 'rx-associated-record-field',\n        data: {\n          fieldId: field.data.fieldId,\n          index: String(field.indexOrder),\n          label: field.labelText\n        }\n      };\n    });\n\n    this.activeModalRef.close(result);\n  }\n\n  onRemove(field: IViewAssociationRecordFieldSelectorEditorDialogItem): void {\n    this.canSave = true;\n    pull(this.selectedFields, field);\n    this.refreshFieldDescriptorsList();\n  }\n\n  onMoveUp(field: IViewAssociationRecordFieldSelectorEditorDialogItem, index: number): void {\n    this.canSave = true;\n    const prevField = this.selectedFields[index - 1];\n\n    if (prevField) {\n      prevField.indexOrder++;\n      field.indexOrder--;\n      this.sortFields();\n    }\n  }\n\n  onMoveDown(field: IViewAssociationRecordFieldSelectorEditorDialogItem, index: number): void {\n    this.canSave = true;\n    const nextAction = this.selectedFields[index + 1];\n\n    if (nextAction) {\n      nextAction.indexOrder--;\n      field.indexOrder++;\n      this.sortFields();\n    }\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.selectedFields.forEach((field) => (field.isOpen = expandAll));\n  }\n\n  private sortFields(): void {\n    this.selectedFields = sortBy(\n      this.selectedFields,\n      (field: IViewAssociationRecordFieldSelectorEditorDialogItem) => field.indexOrder\n    );\n  }\n\n  refreshFieldDescriptorsList(): void {\n    const selectedFieldIds = this.selectedFields.map((field) => String(field.data.fieldId));\n\n    this.filteredFieldDescriptors = this.config.fields\n      .filter((fieldDescriptor) => !includes(selectedFieldIds, String(fieldDescriptor.id)))\n      .sort((field1, field2) => field1.name.localeCompare(field2.name));\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!config.isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Available fields</h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block\">\n          <div\n            *ngIf=\"availableFieldTreeNodes.length; else adaptTreeEmptyStateTemplate\"\n            cdkDropList\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selected-fields']\"\n          >\n            <adapt-tree [value]=\"availableFieldTreeNodes\" filter=\"true\" [wrap]=\"treeWrap\">\n              <ng-template let-field adaptTreeNodeTemplate>\n                <div *ngIf=\"field.data\" class=\"rx-tree-draggable-node\" cdkDrag [cdkDragData]=\"field.data\">\n                  <div (dblclick)=\"addField(field.data)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addField(field.data)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ field.data.name }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <ng-template #adaptTreeEmptyStateTemplate>\n            <div class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n              <adapt-empty-state class=\"w-100\" label=\"No fields found\" type=\"search\"></adapt-empty-state>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ config.isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Selected fileds</h4>\n\n        <div *ngIf=\"selectedFields.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selected-fields\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedFieldsListDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let field of selectedFields; let index = index; let first = first; let last = last\"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragDisabled]=\"true\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"field.isOpen\"\n              (open)=\"field.isOpen = true\"\n              (close)=\"field.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"fieldLabelsMap[field.data.fieldId]\" rx-id=\"card-title\">\n                      {{ fieldLabelsMap[field.data.fieldId] }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); onMoveDown(field, index)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); onMoveUp(field, index)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"onRemove(field)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"text-aria-resize\"\n                label=\"Label\"\n                [(ngModel)]=\"field.labelText\"\n                (ngModelChange)=\"canSave = true\"\n              >\n              </adapt-rx-textfield>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!selectedFields.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state class=\"w-100\" label=\"No fields selected\" type=\"config\"></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!canSave\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport {\n  IAssociatedRecordField,\n  IAssociationRecordFieldSelectorFormControlOptions\n} from './association-record-field-selector-form-control.interface';\nimport { noop, sortBy } from 'lodash';\nimport { AssociationRecordFieldSelectorEditorDialogComponent } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component';\nimport { IAssociationRecordFieldSelectorEditorDialogConfig } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.interface';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-association-record-field-selector-form-control',\n  templateUrl: './association-record-field-selector-form-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AssociationRecordFieldSelectorFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class AssociationRecordFieldSelectorFormControlComponent\n  extends ValueAccessor<IAssociatedRecordField[]>\n  implements IFormControlComponent, IFormFocusable\n{\n  @Input()\n  options: IAssociationRecordFieldSelectorFormControlOptions;\n\n  @ViewChild('openModalButton', { read: ElementRef, static: true })\n  openModalButton: ElementRef;\n\n  selectedFields: Array<IAssociatedRecordField & { label: string }> = [];\n\n  constructor(private rxModalService: RxModalService, private renderer: Renderer2) {\n    super();\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();\n  }\n\n  openFieldSelector(fieldToEdit?: IAssociatedRecordField): void {\n    this.rxModalService\n      .openModal({\n        title: this.options.label,\n        data: {\n          fields: this.options.fields,\n          selectedFields: this.value,\n          fieldToEdit: fieldToEdit,\n          isReadOnly: this.isDisabled\n        } as IAssociationRecordFieldSelectorEditorDialogConfig,\n        content: AssociationRecordFieldSelectorEditorDialogComponent\n      })\n      .then((fields) => {\n        this.value = fields;\n      })\n      .catch(noop);\n  }\n\n  onSetValue(): void {\n    this.updateSortedFieldList();\n  }\n\n  onWriteValue(value: IAssociatedRecordField[]): void {\n    this.updateSortedFieldList();\n  }\n\n  removeField(guid: string): void {\n    this.value = this.value.filter((field) => field.guid !== guid);\n  }\n\n  editField(field: IAssociatedRecordField): void {\n    this.openFieldSelector(field);\n  }\n\n  private updateSortedFieldList(): void {\n    this.selectedFields = sortBy(this.value, (field) => Number(field.data.index)).map((field) => ({\n      ...field,\n      label: this.options.fields.find((fieldDefinition) => fieldDefinition.id === Number(field.data.fieldId)).name\n    }));\n  }\n}\n","<button\n  #openModalButton\n  adapt-button\n  type=\"button\"\n  class=\"px-0 py-0\"\n  btn-type=\"tertiary\"\n  (click)=\"openFieldSelector()\"\n  [disabled]=\"isDisabled\"\n>\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  {{ options.label }}\n</button>\n\n<ul class=\"list-unstyled mb-0 mt-2\" *ngIf=\"selectedFields.length > 0\">\n  <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let field of selectedFields\">\n    <strong class=\"mr-auto\">{{ field.label }}</strong>\n\n    <button\n      class=\"d-icon-left-pencil p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"editField(field)\"\n    ></button>\n\n    <button\n      class=\"d-icon-left-cross_adapt p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"removeField(field.guid)\"\n    ></button>\n  </li>\n</ul>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AdaptAccordionModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule,\n  AdaptRxSearchModule,\n  AdaptRxTextfieldModule,\n  AdaptTreeModule\n} from '@bmc-ux/adapt-angular';\nimport { AssociationRecordFieldSelectorEditorDialogComponent } from './association-record-field-selector-editor-dialog.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [AssociationRecordFieldSelectorEditorDialogComponent],\n  exports: [AssociationRecordFieldSelectorEditorDialogComponent],\n  entryComponents: [AssociationRecordFieldSelectorEditorDialogComponent],\n  imports: [\n    CommonModule,\n    AdaptRxSearchModule,\n    AdaptButtonModule,\n    AdaptAccordionModule,\n    FormsModule,\n    AdaptRxTextfieldModule,\n    DragDropModule,\n    AdaptTreeModule,\n    AdaptEmptyStateModule,\n    TranslateModule\n  ]\n})\nexport class AssociationRecordFieldSelectorEditorDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptIconModule } from '@bmc-ux/adapt-angular';\nimport { AssociationRecordFieldSelectorFormControlComponent } from './association-record-field-selector-form-control.component';\nimport { AssociationRecordFieldSelectorEditorDialogModule } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.module';\n\n@NgModule({\n  declarations: [AssociationRecordFieldSelectorFormControlComponent],\n  exports: [AssociationRecordFieldSelectorFormControlComponent],\n  entryComponents: [AssociationRecordFieldSelectorFormControlComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptButtonModule,\n    AdaptIconModule,\n    AssociationRecordFieldSelectorEditorDialogModule\n  ]\n})\nexport class AssociationRecordFieldSelectorFormControlModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionDataPageService\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport {\n  IExpressionConfigurator,\n  IFormControlBuilderConfig,\n  RxDefinitionNameService\n} from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxGuidService } from '@helix/platform/utils';\nimport {\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  validateStandardProps,\n  ViewComponentAddComponentPayload\n} from '@helix/platform/view/designer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_ASSOCIATION, RxAssociationEditingMode } from '../association.types';\nimport { IAssociationChildComponents, IAssociationDesignProperties } from './association-design.types';\nimport {\n  AssociationRecordFieldSelectorFormControlComponent,\n  IAssociatedRecordField\n} from './association-record-field-selector-field';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\n\n@Injectable()\nexport class AssociationDesignHelperService {\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxGuidService: RxGuidService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getDropdownModeInspectorControls(\n    recordDefinitionField: IFieldDefinition[],\n    associationDefinitionFilters: IAssociationDefinition[]\n  ): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'fieldId',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Field to display',\n          options: recordDefinitionField\n            ? recordDefinitionField\n                .filter((associationDefinitionField) =>\n                  [\n                    RX_RECORD_DEFINITION.resourceTypes.character,\n                    RX_RECORD_DEFINITION.resourceTypes.localizedCharacter\n                  ].includes(associationDefinitionField.resourceType)\n                )\n                .map((associationDefinitionField) => ({\n                  id: String(associationDefinitionField.id),\n                  name: associationDefinitionField.name\n                }))\n            : [],\n          emptyOption: true,\n          required: true\n        } as ISelectFormControlOptions\n      },\n      {\n        name: 'filterByAssociation',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Filter by association',\n          options: associationDefinitionFilters\n            ? associationDefinitionFilters.map((associationDefinition) => ({\n                id: associationDefinition.name,\n                name: this.rxDefinitionNameService.getDisplayName(associationDefinition.name)\n              }))\n            : [],\n          emptyOption: true\n        } as ISelectFormControlOptions\n      }\n    ];\n  }\n\n  getDisplayedFieldsControl(recordDefinitionFields: IFieldDefinition[]): IFormControlBuilderConfig {\n    return {\n      name: 'displayedFields',\n      component: AssociationRecordFieldSelectorFormControlComponent,\n      options: {\n        label: 'Show/Hide fields',\n        fields: recordDefinitionFields,\n        required: true\n      }\n    };\n  }\n\n  getRecordIdControl(): IFormControlBuilderConfig {\n    return {\n      name: 'recordId',\n      component: ExpressionInspectorControlComponent,\n      options: {\n        label: 'Record ID',\n        isRequired: true\n      } as IExpressionInspectorControlOptions\n    };\n  }\n\n  getUseDefaultRolesControl(): IFormControlBuilderConfig {\n    return {\n      name: 'useDefaultRoles',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Use default roles'\n      }\n    };\n  }\n\n  getNodeABRoleControls(): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'nodeARole',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'First record role'\n        } as IExpressionInspectorControlOptions\n      },\n      {\n        name: 'nodeBRole',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Second record role'\n        } as IExpressionInspectorControlOptions\n      }\n    ];\n  }\n\n  getViewModeInspectorControls(): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'viewDefinitionNameForSelect',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View for selecting associated records',\n          definitionType: RxDefinitionPickerType.View,\n          required: true\n        }\n      },\n      {\n        name: 'viewDefinitionNameForCreate',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View for creating associated records',\n          definitionType: RxDefinitionPickerType.View\n        }\n      }\n    ];\n  }\n\n  getInitialInspectorControls(expressionConfigurator: IExpressionConfigurator): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Display label'\n        }\n      },\n      getDisabledFieldInspectorConfig(),\n      ...getStandardPropsInspectorConfigs()\n    ];\n  }\n\n  getInitialProperties(): IAssociationDesignProperties {\n    return {\n      associatedRecordNodeSide: '',\n      associationDefinitionName: '',\n      displayedFields: [],\n      editingMode: RxAssociationEditingMode.Views,\n      fieldId: null,\n      filterByAssociation: '',\n      label: null,\n      nodeARole: '',\n      nodeBRole: '',\n      recordDefinition: '',\n      recordDefinitionName: '',\n      recordId: '',\n      recordInstance: '',\n      useDefaultRoles: true,\n      viewDefinitionNameForCreate: '',\n      viewDefinitionNameForSelect: '',\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES\n    };\n  }\n\n  getActionButtonDefinition(\n    componentProperties: IAssociationDesignProperties,\n    action: string,\n    parentGuid: string\n  ): ViewComponentAddComponentPayload {\n    return {\n      type: RxViewComponentType.ActionButton,\n      guid: this.rxGuidService.generate(),\n      propertiesByName: {\n        labelKey:\n          action === RX_ASSOCIATION.actions.associate\n            ? 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.associate.label'\n            : 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.create-new.label',\n        style: 'secondary',\n        action\n      },\n      children: [\n        {\n          guid: this.rxGuidService.generate(),\n          type: RxViewComponentType.Action,\n          propertiesByName: {\n            name: 'rxAvcAssociate',\n            associationViewComponent: `\\${view.components.${parentGuid}.api}`,\n            viewDefinitionName:\n              action === RX_ASSOCIATION.actions.associate\n                ? componentProperties.viewDefinitionNameForSelect\n                : componentProperties.viewDefinitionNameForCreate\n          }\n        }\n      ],\n      insertIndex: action === RX_ASSOCIATION.actions.associate ? 0 : 1\n    };\n  }\n\n  isCardinalityOne(\n    componentProperties: IAssociationDesignProperties,\n    associationDefinitions: IAssociationDefinition[]\n  ): boolean {\n    const associationDefinition: IAssociationDefinition = associationDefinitions.find(\n      (association) => association.name === componentProperties.associationDefinitionName\n    );\n\n    return Boolean(\n      associationDefinition &&\n        (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value ||\n          (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value &&\n            componentProperties.associatedRecordNodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value))\n    );\n  }\n\n  getAvailableAssociations(\n    firstRecordDefinitionName: string,\n    secondRecordDefinitionName: string\n  ): Observable<IAssociationDefinition[]> {\n    const getParametersForAssociation = {\n      headers: { 'default-bundle-scope': '' },\n      params: { firstRecordDefinitionName, secondRecordDefinitionName, requireDependent: true }\n    };\n\n    return this.rxAssociationDefinitionDataPageService\n      .get(getParametersForAssociation)\n      .pipe(map((response) => response.data));\n  }\n\n  getRecordDefinition(recordDefinitionToAssociateName: string): Observable<IRecordDefinition> {\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionToAssociateName);\n  }\n\n  getFieldsInChildComponentsWithNames(\n    components: IAssociatedRecordField[],\n    availableFields: IFieldDefinition[]\n  ): IAssociatedRecordField[] {\n    return components.reduce((acc: IAssociatedRecordField[], definition: IAssociatedRecordField) => {\n      const fieldDescriptor = availableFields.find(\n        (fieldDescriptorItem) => fieldDescriptorItem.id === Number(definition.data.fieldId)\n      );\n      acc.push({\n        ...definition,\n        data: {\n          ...definition.data,\n          name: fieldDescriptor ? fieldDescriptor.name : definition.data.label\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  cleanEditingModeDependentData(componentProperties: IAssociationDesignProperties): void {\n    if (componentProperties.editingMode === RxAssociationEditingMode.Dropdown) {\n      componentProperties.viewDefinitionNameForSelect = null;\n      componentProperties.viewDefinitionNameForCreate = null;\n      componentProperties.displayedFields = [];\n    } else {\n      componentProperties.filterByAssociation = null;\n      componentProperties.recordId = null;\n      componentProperties.fieldId = null;\n    }\n  }\n\n  getNodeSideOptions(associationDefinition: IAssociationDefinition): RxSelectOption[] {\n    return associationDefinition.nodeAId === associationDefinition.nodeBId\n      ? [\n          {\n            id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n            name: associationDefinition.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n          },\n          {\n            id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n            name: associationDefinition.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n          }\n        ]\n      : [];\n  }\n\n  resetRolesData(componentProperties: IAssociationDesignProperties): void {\n    componentProperties.useDefaultRoles = false;\n    componentProperties.nodeARole = null;\n    componentProperties.nodeBRole = null;\n  }\n\n  validate(\n    sandbox: IViewComponentDesignSandbox,\n    properties: IAssociationDesignProperties,\n    associationDefinition: IAssociationDefinition,\n    childComponents: IAssociationChildComponents\n  ): IViewComponentDesignValidationIssue[] {\n    const validationIssues = [];\n\n    if (!properties.recordDefinitionName) {\n      validationIssues.push(\n        sandbox.createError('Record definition to associate cannot be blank.', 'recordDefinitionName')\n      );\n    }\n\n    if (properties.recordDefinitionName && !properties.associationDefinitionName) {\n      validationIssues.push(sandbox.createError('Association to Use cannot be blank.', 'associationDefinitionName'));\n    }\n\n    if (properties.associationDefinitionName) {\n      if (associationDefinition.nodeAId === associationDefinition.nodeBId && !properties.associatedRecordNodeSide) {\n        validationIssues.push(sandbox.createError('Associated Record Node Side cannot be blank.', 'fieldId'));\n      }\n    }\n\n    if (properties.editingMode === RxAssociationEditingMode.Views || !properties.editingMode) {\n      if (properties.recordDefinitionName && childComponents.displayedFields.length === 0) {\n        validationIssues.push(sandbox.createError('Preview Fields cannot be empty.', 'displayedFields'));\n      }\n\n      if (!properties.viewDefinitionNameForSelect) {\n        validationIssues.push(\n          sandbox.createError('View for selecting associated records cannot be blank.', 'viewDefinitionNameForSelect')\n        );\n      }\n    } else if (properties.editingMode === RxAssociationEditingMode.Dropdown) {\n      if (properties.filterByAssociation && !childComponents.recordId) {\n        validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordId'));\n      }\n\n      if (!properties.fieldId) {\n        validationIssues.push(sandbox.createError('Field to display cannot be blank.', 'fieldId'));\n      }\n    }\n\n    validationIssues.push(...validateStandardProps(properties));\n\n    return validationIssues;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  IViewLayoutOutlet,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { IActionButtonProperties } from '../../../action-button/action-button.types';\nimport { RxAssociationEditingMode } from '../association.types';\nimport { IAssociationProperties } from './association-design.types';\n\n@Injectable()\nexport class AssociationDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition<IAssociationProperties>, IViewDefinition>\n{\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition<IAssociationProperties>): void {\n    // If a view from old view designer gets opened we have to add a layout with\n    // action button guids, so they can be rendered inside association view component.\n    if (!componentDefinition.layout) {\n      const actionButtonGuids = componentDefinition.componentDefinitions\n        .filter((definition) => definition.type === RxViewComponentType.ActionButton)\n        .map((definition: IViewComponentDefinition<IActionButtonProperties>) => definition.guid);\n\n      componentDefinition.layout = JSON.stringify({\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [\n              {\n                children: actionButtonGuids\n              }\n            ]\n          }\n        ] as IViewLayoutOutlet[]\n      });\n    }\n\n    const adaptedProperties: Partial<IAssociationProperties> = {\n      editingMode: componentDefinition.propertiesByName.editingMode ?? RxAssociationEditingMode.Views,\n      nodeARole: componentDefinition.propertiesByName.nodeARole ?? null,\n      nodeBRole: componentDefinition.propertiesByName.nodeBRole ?? null,\n      styles: componentDefinition.propertiesByName.styles ?? null,\n      useDefaultRoles: componentDefinition.propertiesByName.useDefaultRoles ?? false\n    };\n\n    Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RxAssociationDesignComponent } from './association-design.component';\nimport { AdaptButtonModule, AdaptEmptyStateModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AssociationDesignHelperService } from './association-design-helper.service';\nimport { AssociationRecordFieldSelectorFormControlModule } from './association-record-field-selector-field/association-record-field-selector-form-control.module';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxAssociationDesignContainerComponent } from './association-design-container.component';\nimport { AssociationDesignAdapterService } from './association-design-adapter.service';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptButtonModule,\n    TranslateModule,\n    AssociationRecordFieldSelectorFormControlModule,\n    AdaptRxSelectModule,\n    FormsModule,\n    AdaptEmptyStateModule,\n    ViewDesignerCanvasModule\n  ],\n  declarations: [RxAssociationDesignComponent, RxAssociationDesignContainerComponent],\n  entryComponents: [RxAssociationDesignComponent],\n  providers: [AssociationDesignHelperService, AssociationDesignAdapterService]\n})\nexport class AssociationDesignModule {\n  constructor(\n    associationDesignAdapterService: AssociationDesignAdapterService,\n    rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.Association,\n      associationDesignAdapterService\n    );\n  }\n}\n","import {\n  IComponentPropertyDescriptor,\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\n\nexport const RX_BASE_FIELD_PROPERTIES: IComponentPropertyDescriptor[] = [\n  'api',\n  'disabled',\n  'recordDefinition',\n  'recordInstance',\n  'hidden',\n  'inReadState',\n  'value'\n].map((propertyName) => {\n  const result: IComponentPropertyDescriptor = {\n    name: propertyName,\n    enableExpressionEvaluation: true\n  };\n\n  if (['hidden', 'disabled'].includes(propertyName)) {\n    result.type = ViewComponentPropertyType.Boolean;\n  }\n\n  return result;\n});\n\nRX_BASE_FIELD_PROPERTIES.push(\n  {\n    name: 'label',\n    localizable: true\n  },\n  {\n    name: 'fieldId'\n  },\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC\n);\n","export const RX_FIELD_COMPONENTS = {\n  stencilGroupName: 'Record editor inputs'\n};\n","import { Injector } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService\n} from '@helix/platform/association/api';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport {\n  ISelectFormControlOptions,\n  IValidationFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  ViewComponentAddComponentPayload,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { defaults, get, isEqual, isNil, isUndefined, map as _map, omit } from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport {\n  concatMap,\n  concatMapTo,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\nimport { RX_ASSOCIATION, RxAssociationEditingMode } from '../association.types';\nimport { AssociationDesignHelperService } from './association-design-helper.service';\nimport {\n  IAssociationChildComponents,\n  IAssociationDesignProperties,\n  IAssociationProperties\n} from './association-design.types';\nimport {\n  IAssociatedRecordField,\n  IAssociationChild,\n  IAssociationFilter\n} from './association-record-field-selector-field';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RecordEditorDesignModel } from '../../../record-editor/design/record-editor-design.model';\n\nexport class AssociationDesignModel extends ViewDesignerComponentModel {\n  private rxAssociationDefinitionCacheService = this.injector.get<RxAssociationDefinitionCacheService>(\n    RxAssociationDefinitionCacheService\n  );\n\n  private rxGuidService = this.injector.get<RxGuidService>(RxGuidService);\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n\n  private associationDesignHelperService =\n    this.injector.get<AssociationDesignHelperService>(AssociationDesignHelperService);\n\n  private updateInspector$: Subject<IViewDesignerInspectorConfig> = new Subject();\n  private recordEditorGuid: string;\n  private recordDefinitionNameFromHostRecordEditor$: Observable<string>;\n  private childComponents$ = this.sandbox.getChildComponentsTree();\n  private associationChildComponentsData$ = this.getChildComponentsData();\n\n  private associationDefinitions: IAssociationDefinition[] = [];\n  private associationDefinitionFilters: IAssociationDefinition[] = [];\n  private recordDefinitionFields: IFieldDefinition[] = [];\n  private associatedRecordNodeSide: IAssociationDefinition[] = [];\n  private previousDropdownFieldDefinition: IFieldDefinition;\n  private isManyToManyAssociation = false;\n\n  readonly otherAssociationRecordEditorComponentGuids$: Observable<string[]>;\n  readonly recordEditorGuid$: Observable<string>;\n  readonly editingMode$ = this.sandbox.getComponentPropertyValue('editingMode');\n  readonly label$ = this.sandbox.getComponentPropertyValue('label');\n\n  readonly displayedFields$: Observable<IAssociatedRecordField[]>;\n\n  static getInitialProperties(initialProperties: IAssociationDesignProperties): IAssociationDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, public sandbox: IViewComponentDesignSandbox<IAssociationDesignProperties>) {\n    super(injector, sandbox);\n\n    // TODO: performance\n    this.updateInspector$\n      .pipe(distinctUntilChanged(isEqual), takeUntil(this.sandbox.destroyed$))\n      .subscribe((inspector) => {\n        this.sandbox.updateInspectorConfig(inspector);\n      });\n\n    const recordDefinitionName$ = sandbox.getComponentPropertyValue('recordDefinitionName');\n\n    const recordDefinitionFields$ = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.updateRecordDefinitionFields(recordDefinitionName) : of([])\n      )\n    );\n\n    this.displayedFields$ = combineLatest([\n      this.sandbox.getChildComponents(\n        (component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n      ),\n      recordDefinitionFields$\n    ]).pipe(\n      map(([components, availableFields]: [IAssociatedRecordField[], IFieldDefinition[]]) =>\n        this.associationDesignHelperService.getFieldsInChildComponentsWithNames(components, availableFields)\n      )\n    );\n\n    this.recordEditorGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.otherAssociationRecordEditorComponentGuids$ = this.recordEditorGuid$.pipe(\n      map((guid) => this.sandbox.getComponentModel<RecordEditorDesignModel>(guid)),\n      switchMap((model) =>\n        model.associationComponentGuids$.pipe(map((guids) => guids.filter((guid) => guid !== this.sandbox.guid)))\n      ),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$ = this.recordEditorGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$\n      .pipe(\n        switchMap((recordDefinitionRecordEditorName) =>\n          recordDefinitionRecordEditorName\n            ? combineLatest([this.sandbox.componentProperties$, this.associationChildComponentsData$]).pipe(\n                switchMap(([componentProperties, associationChildComponentsData]) => {\n                  const updateParameters = recordDefinitionRecordEditorName\n                    ? this.generateInitialUpdateParameters(componentProperties)\n                    : [];\n\n                  const updateParameters$ = updateParameters.length > 0 ? combineLatest(updateParameters) : of(null);\n\n                  return updateParameters$.pipe(\n                    map(() => ({\n                      componentProperties: { ...associationChildComponentsData, ...componentProperties },\n                      recordDefinitionRecordEditorName\n                    }))\n                  );\n                }),\n                take(1)\n              )\n            : of({\n                componentProperties: null,\n                recordDefinitionRecordEditorName: null\n              })\n        ),\n        withLatestFrom(this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([{ componentProperties, recordDefinitionRecordEditorName }, recordEditorGuid]) => {\n        const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n        const properties: IAssociationDesignProperties = {\n          ...initialProperties,\n          ...componentProperties,\n          useDefaultRoles: Boolean(componentProperties?.useDefaultRoles === 'true')\n        };\n\n        this.recordEditorGuid = recordEditorGuid;\n        this.sandbox.updateComponentProperties(properties);\n\n        this.updateInspector$.next(\n          this.getInspectorConfig(properties, recordDefinitionRecordEditorName, recordEditorGuid)\n        );\n      });\n\n    const childComponentGuids$ = this.childComponents$.pipe(\n      map((components) => components.map((component) => component.guid))\n    );\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          recordDefinitionName,\n          label: null,\n          associationDefinitionName: null,\n          associatedRecordNodeSide: null,\n          editingMode: RxAssociationEditingMode.Views,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(\n        skip(1),\n        concatMapTo(this.sandbox.componentProperties$),\n        concatMap((props) =>\n          combineLatest([\n            this.updateAssociationDefinitionsOptions(props.recordDefinitionName),\n            this.updateRecordDefinitionFields(props.recordDefinitionName),\n            this.updateAssociationDefinitionsFilterOptions(props.recordDefinitionName),\n            this.updateAssociationNodeSideOptions(props.associationDefinitionName),\n            this.updatePreviousDropdownFieldDefinition(props.recordDefinitionName, props.fieldId)\n          ]).pipe(take(1), mapTo(props))\n        ),\n        withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n        this.updateInspector$.next(\n          this.getInspectorConfig(componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid)\n        );\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('editingMode')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([editingMode, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          editingMode,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        skip(1),\n        pairwise(),\n        withLatestFrom(this.childComponents$),\n        switchMap(\n          ([[previousProperties, properties], children]: [\n            [IAssociationDesignProperties, IAssociationDesignProperties],\n            IAssociationChild[]\n          ]) => {\n            const updatedProperties = { ...properties };\n            const updatedParametersStreams = [];\n\n            switch (true) {\n              case previousProperties.viewDefinitionNameForSelect !== properties.viewDefinitionNameForSelect:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.associate\n                );\n\n                break;\n\n              case previousProperties.viewDefinitionNameForCreate !== properties.viewDefinitionNameForCreate:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.createAndAssociate\n                );\n\n                break;\n\n              case previousProperties.filterByAssociation !== properties.filterByAssociation:\n              case previousProperties.recordId !== properties.recordId:\n                const filterComponent = children.find(\n                  (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n                ) as IAssociationFilter;\n\n                this.updateAssociationFilterComponent(properties, filterComponent);\n\n                break;\n\n              case !isEqual(previousProperties.displayedFields, properties.displayedFields):\n                this.updateComponentRecordFields(properties.displayedFields, children as IAssociatedRecordField[]);\n\n                break;\n\n              case previousProperties.associationDefinitionName !== properties.associationDefinitionName:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                if (properties.associationDefinitionName) {\n                  updatedParametersStreams.push(\n                    this.rxAssociationDefinitionCacheService\n                      .getAssociationDefinition(properties.associationDefinitionName)\n                      .pipe(\n                        map((associationDefinition) => {\n                          updatedProperties.associatedRecordNodeSide =\n                            associationDefinition.nodeAId === properties.recordDefinitionName\n                              ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n                              : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value;\n\n                          this.setIsManyToManyAssociation(associationDefinition);\n                          this.sandbox.updateComponentProperties(updatedProperties);\n\n                          if (this.isManyToManyAssociation) {\n                            this.associationDesignHelperService.resetRolesData(updatedProperties);\n                          }\n                        })\n                      )\n                  );\n                } else {\n                  this.isManyToManyAssociation = false;\n                }\n\n                updatedParametersStreams.push(\n                  this.updateAssociationNodeSideOptions(properties.associationDefinitionName)\n                );\n\n                break;\n\n              case previousProperties.associatedRecordNodeSide !== properties.associatedRecordNodeSide:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                break;\n\n              case previousProperties.useDefaultRoles !== properties.useDefaultRoles:\n                if (properties.useDefaultRoles === true) {\n                  updatedProperties.nodeARole = null;\n                  updatedProperties.nodeBRole = null;\n                }\n\n                break;\n\n              case previousProperties.nodeARole !== properties.nodeARole ||\n                previousProperties.nodeBRole !== properties.nodeBRole:\n                if (isUndefined(properties.useDefaultRoles)) {\n                  defaults(updatedProperties, {\n                    nodeARole: null,\n                    nodeBRole: null,\n                    useDefaultRoles: false\n                  });\n                } else {\n                  updatedProperties.useDefaultRoles = false;\n                }\n\n                break;\n            }\n\n            const updateParameters$ =\n              updatedParametersStreams.length > 0 ? combineLatest(updatedParametersStreams) : of(null);\n\n            return updateParameters$.pipe(\n              map((parameters) => ({ parameters, componentProperties: updatedProperties })),\n              withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$)\n            );\n          }\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([{ parameters, componentProperties }, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n          const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n          this.recordEditorGuid = recordEditorGuid;\n\n          this.updateInspector$.next(\n            this.getInspectorConfig(\n              { ...initialProperties, ...componentProperties },\n              recordDefinitionNameFromHostRecordEditor,\n              recordEditorGuid\n            )\n          );\n        }\n      );\n\n    this.sandbox\n      .getComponentPropertyValue('fieldId')\n      .pipe(\n        // transform initial value to null if it is undefined\n        map((value) => (isNil(value) ? null : value)),\n        distinctUntilChanged(),\n        pairwise()\n      )\n      .pipe(\n        withLatestFrom(this.sandbox.componentProperties$),\n        // Check if editing mode is dropdown to prevent label reset after change fieldId to null.\n        filter(([fieldIds, props]) => Boolean(props.editingMode === RxAssociationEditingMode.Dropdown)),\n        switchMap(([[prevFieldId, fieldId], props]) =>\n          this.associationDesignHelperService.getRecordDefinition(props.recordDefinitionName).pipe(\n            map((recordDefinition) => {\n              const prevFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(prevFieldId)\n              )?.name;\n\n              const currentFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(fieldId)\n              )?.name;\n\n              // If the label is changed by user it must not be updated after fieldId change.\n              return !props.label || prevFieldDefinitionName === props.label ? currentFieldDefinitionName : props.label;\n            })\n          )\n        ),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.associationChildComponentsData$.pipe(distinctUntilChanged(isEqual))\n    ])\n      .pipe(\n        switchMap(([componentProperties, childComponents]) => {\n          const association$: Observable<IAssociationDefinition> = componentProperties.associationDefinitionName\n            ? this.rxAssociationDefinitionCacheService.getAssociationDefinition(\n                componentProperties.associationDefinitionName\n              )\n            : of({});\n\n          return association$.pipe(\n            map((associationDefinition) => {\n              return this.associationDesignHelperService.validate(\n                this.sandbox,\n                componentProperties,\n                associationDefinition,\n                childComponents\n              );\n            })\n          );\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.label$,\n      this.sandbox\n        .getComponentPropertyValue('associationDefinitionName')\n        .pipe(\n          map((associationDefinitionName) =>\n            associationDefinitionName ? this.rxDefinitionNameService.getDisplayName(associationDefinitionName) : null\n          )\n        )\n    ])\n      .pipe(\n        map(([label, definitionDisplayName]) => {\n          let componentName = this.sandbox.descriptor.name;\n\n          if (definitionDisplayName && label) {\n            componentName += ` (${definitionDisplayName}: ${label})`;\n          } else if (definitionDisplayName || label) {\n            componentName += ` (${definitionDisplayName || label})`;\n          }\n\n          return componentName;\n        }),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  getPropertiesByName(properties: IAssociationDesignProperties): IAssociationProperties {\n    return omit(\n      {\n        ...properties,\n        recordInstance: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordInstance}`\n          : properties.recordInstance,\n        recordDefinition: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordDefinition}`\n          : properties.recordDefinition\n      },\n      [\n        'displayedFields',\n        'filterByAssociation',\n        'recordId',\n        'viewDefinitionNameForSelect',\n        'viewDefinitionNameForCreate'\n      ]\n    ) as IAssociationProperties;\n  }\n\n  private updateAssociationFilterComponent(\n    componentProperties: IAssociationDesignProperties,\n    filterComponent: IAssociationFilter\n  ): void {\n    if (filterComponent) {\n      this.sandbox.removeComponents([filterComponent.guid]);\n    }\n\n    if (componentProperties.filterByAssociation) {\n      const filterNew = {\n        guid: this.rxGuidService.generate(),\n        type: RX_ASSOCIATION.componentTypes.associationFilter,\n        propertiesByName: {\n          associationDefinitionName: componentProperties.filterByAssociation,\n          recordInstanceId: componentProperties.recordId\n        }\n      };\n\n      this.sandbox.addComponent([filterNew]);\n    }\n  }\n\n  private updateChildActionButtonDefinition(\n    properties: IAssociationDesignProperties,\n    children: IAssociatedRecordField[],\n    action: string\n  ): void {\n    const actionButtonComponent = children.find(\n      (component) => component.type === RxViewComponentType.ActionButton && component.data['action'] === action\n    );\n\n    const viewDefinitionNameToUpdate =\n      action === RX_ASSOCIATION.actions.createAndAssociate\n        ? properties.viewDefinitionNameForCreate\n        : properties.viewDefinitionNameForSelect;\n\n    if (actionButtonComponent) {\n      this.sandbox.removeComponents([actionButtonComponent.guid]);\n    }\n\n    if (viewDefinitionNameToUpdate) {\n      const button = this.associationDesignHelperService.getActionButtonDefinition(\n        properties,\n        action,\n        this.sandbox['guid']\n      );\n\n      this.sandbox.addComponent([button]);\n    }\n  }\n\n  private updateComponentRecordFields(\n    displayedFields: IAssociatedRecordField[],\n    children: IAssociatedRecordField[]\n  ): void {\n    const guids = children\n      .filter((component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField)\n      .map((component) => component.guid);\n\n    const recordFields: ViewComponentAddComponentPayload[] = displayedFields.map((field) => ({\n      type: RX_ASSOCIATION.componentTypes.associatedRecordField,\n      guid: this.rxGuidService.generate(),\n      propertiesByName: {\n        fieldId: field.data.fieldId,\n        label: field.data.label || '',\n        index: field.data.index\n      }\n    }));\n\n    if (guids.length > 0) {\n      this.sandbox.removeComponents(guids);\n    }\n\n    this.sandbox.addComponent(recordFields);\n  }\n\n  private getChildComponentsData(): Observable<IAssociationChildComponents> {\n    return this.childComponents$.pipe(\n      map((components: IViewComponentDesignData[]) => {\n        const associationChildComponentsData: IAssociationChildComponents = {};\n\n        const associationFilters = components.filter(\n          (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n        );\n\n        associationChildComponentsData.displayedFields = components.filter(\n          (definition) => definition.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n        ) as IAssociatedRecordField[];\n\n        if (associationFilters.length > 0) {\n          associationChildComponentsData.recordId = associationFilters[0].data?.recordInstanceId;\n          associationChildComponentsData.filterByAssociation = associationFilters[0].data?.associationDefinitionName;\n        }\n\n        const createAndAssociateView = this.getViewDefinitionNameForAssociation(\n          components,\n          RX_ASSOCIATION.actions.createAndAssociate\n        );\n\n        if (createAndAssociateView) {\n          associationChildComponentsData.viewDefinitionNameForCreate = createAndAssociateView;\n        }\n\n        const associateView = this.getViewDefinitionNameForAssociation(components, RX_ASSOCIATION.actions.associate);\n\n        if (associateView) {\n          associationChildComponentsData.viewDefinitionNameForSelect = associateView;\n        }\n\n        return associationChildComponentsData;\n      })\n    );\n  }\n\n  private generateInitialUpdateParameters(\n    componentProperties: IAssociationProperties\n  ): Observable<IFieldDefinition[] | IFieldDefinition | IAssociationDefinition[]>[] {\n    const updateParameters = [];\n\n    if (componentProperties.recordDefinitionName) {\n      updateParameters.push(this.updateRecordDefinitionFields(componentProperties.recordDefinitionName));\n\n      if (componentProperties.fieldId) {\n        updateParameters.push(\n          this.updatePreviousDropdownFieldDefinition(\n            componentProperties.recordDefinitionName,\n            componentProperties.fieldId\n          )\n        );\n      }\n\n      updateParameters.push(this.updateAssociationDefinitionsOptions(componentProperties.recordDefinitionName));\n    }\n\n    if (componentProperties.associationDefinitionName) {\n      updateParameters.push(this.updateAssociationDefinitionsFilterOptions(componentProperties.recordDefinitionName));\n\n      updateParameters.push(\n        this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(componentProperties.associationDefinitionName)\n          .pipe(map((associationDefinition) => this.setIsManyToManyAssociation(associationDefinition)))\n      );\n    }\n\n    if (componentProperties.associatedRecordNodeSide) {\n      updateParameters.push(this.updateAssociationNodeSideOptions(componentProperties.associationDefinitionName));\n    }\n\n    return updateParameters;\n  }\n\n  private updatePreviousDropdownFieldDefinition(\n    recordDefinitionToAssociateName: string,\n    fieldId: string\n  ): Observable<IFieldDefinition> {\n    return this.updateRecordDefinitionFields(recordDefinitionToAssociateName).pipe(\n      map((fields) => {\n        return (this.previousDropdownFieldDefinition = fields.find((field) => field.id === Number(fieldId)));\n      })\n    );\n  }\n\n  private setIsManyToManyAssociation(associationDefinition: IAssociationDefinition): void {\n    if (associationDefinition) {\n      this.isManyToManyAssociation =\n        associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n    }\n  }\n\n  private getViewDefinitionNameForAssociation(components: IViewComponentDesignData[], action: string): string | null {\n    const actionButton = components.find((definition) => definition.data?.action === action);\n\n    return actionButton && actionButton.children ? this.getViewDefinitionNameFromActionButton(actionButton) : null;\n  }\n\n  private getViewDefinitionNameFromActionButton(actionButton: IViewComponentDesignData): string | null {\n    const actionComponent = actionButton.children.find((children) => children.type === RxViewComponentType.Action);\n\n    return get(actionComponent, 'data.viewDefinitionName', null);\n  }\n\n  private updateRecordDefinitionFields(recordDefinitionToAssociateName: string): Observable<IFieldDefinition[]> {\n    return (\n      recordDefinitionToAssociateName\n        ? this.associationDesignHelperService\n            .getRecordDefinition(recordDefinitionToAssociateName)\n            .pipe(map((recordDefinition) => recordDefinition.fieldDefinitions))\n        : of([])\n    ).pipe(tap((fieldDefinitions) => (this.recordDefinitionFields = fieldDefinitions)));\n  }\n\n  private updateAssociationNodeSideOptions(associationDefinitionName: string): Observable<IAssociationDefinition[]> {\n    const associatedRecordNodeSideOptions$ = associationDefinitionName\n      ? this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(associationDefinitionName)\n          .pipe(\n            map((associationDefinition) =>\n              this.associationDesignHelperService.getNodeSideOptions(associationDefinition)\n            )\n          )\n      : of([]);\n\n    return associatedRecordNodeSideOptions$.pipe(\n      tap((associatedRecordNodeSideOptions) => (this.associatedRecordNodeSide = associatedRecordNodeSideOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.recordDefinitionNameFromHostRecordEditor$.pipe(\n      switchMap((associatedRecordName) =>\n        recordDefinitionToAssociateName && associatedRecordName\n          ? this.associationDesignHelperService.getAvailableAssociations(\n              recordDefinitionToAssociateName,\n              associatedRecordName\n            )\n          : of([])\n      ),\n      tap((associationDefinitionOptions) => (this.associationDefinitions = associationDefinitionOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsFilterOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.otherAssociationRecordEditorComponentGuids$.pipe(\n      mergeMap((guids) =>\n        guids.length\n          ? combineLatest(\n              guids.map((guid) =>\n                this.sandbox.getComponentPropertyValue<'recordDefinitionName', IAssociationDesignProperties>(\n                  'recordDefinitionName',\n                  guid\n                )\n              )\n            ).pipe(take(1))\n          : of([])\n      ),\n      switchMap((associatedRecordNames) =>\n        associatedRecordNames.length && recordDefinitionToAssociateName\n          ? merge(\n              ...associatedRecordNames.map((associatedRecordName) =>\n                this.associationDesignHelperService.getAvailableAssociations(\n                  recordDefinitionToAssociateName,\n                  associatedRecordName\n                )\n              )\n            )\n          : of([])\n      ),\n      map((associationDefinitionFilters) => (this.associationDefinitionFilters = associationDefinitionFilters))\n    );\n  }\n\n  private getInspectorConfig(\n    properties: IAssociationDesignProperties,\n    recordDefinitionNameFromHostRecordEditor: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: []\n        }\n      ]\n    };\n\n    if (recordDefinitionNameFromHostRecordEditor) {\n      const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n      generalSectionControls.push({\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        }\n      });\n\n      if (properties.recordDefinitionName) {\n        generalSectionControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: this.associationDefinitions.map((associationDefinition) => ({\n              id: associationDefinition.name,\n              name: this.rxDefinitionNameService.getDisplayName(associationDefinition.name)\n            })),\n            emptyOption: true,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (properties.recordDefinitionName && this.associatedRecordNodeSide.length > 0) {\n        generalSectionControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Associated record node Side',\n            options: this.associatedRecordNodeSide,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (\n        properties.recordDefinitionName &&\n        this.associationDesignHelperService.isCardinalityOne(properties, this.associationDefinitions)\n      ) {\n        generalSectionControls.push({\n          name: 'editingMode',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association editing mode',\n            options: _map(RxAssociationEditingMode, (id, name) => ({ id, name })),\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      // View Mode\n      if (!properties.editingMode || properties.editingMode === RxAssociationEditingMode.Views) {\n        generalSectionControls.push(...this.associationDesignHelperService.getViewModeInspectorControls());\n\n        if (this.isManyToManyAssociation && properties.associationDefinitionName) {\n          generalSectionControls.push(this.associationDesignHelperService.getUseDefaultRolesControl());\n\n          if (!properties.useDefaultRoles) {\n            generalSectionControls.push(...this.associationDesignHelperService.getNodeABRoleControls());\n          }\n        }\n\n        if (properties.recordDefinitionName) {\n          generalSectionControls.push(\n            this.associationDesignHelperService.getDisplayedFieldsControl(this.recordDefinitionFields)\n          );\n        }\n      }\n\n      // Dropdown Mode\n      if (properties.editingMode === RxAssociationEditingMode.Dropdown) {\n        generalSectionControls.push(\n          ...this.associationDesignHelperService.getDropdownModeInspectorControls(\n            this.recordDefinitionFields,\n            this.associationDefinitionFilters\n          )\n        );\n\n        if (properties.filterByAssociation) {\n          generalSectionControls.push(this.associationDesignHelperService.getRecordIdControl());\n        }\n      }\n\n      generalSectionControls.push(\n        ...this.associationDesignHelperService.getInitialInspectorControls(this.expressionConfigurator)\n      );\n    } else {\n      inspectorConfig.inspectorSectionConfigs[0].controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: recordEditorGuid,\n            propertyName: 'recordDefinitionName'\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewComponentDesignCommonDataDictionaryBranch,\n  RxViewComponentExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { concatMap, switchMap, map } from 'rxjs/operators';\nimport { AssociationDesignModel } from './association-design.model';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { IAssociationDesignProperties } from './association-design.types';\n\nexport class AssociationExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: AssociationDesignModel\n  ) {\n    super(injector, componentGuid, componentModel);\n\n    this.configureForProperty({\n      propertyPath: 'recordId',\n      dataDictionary$: componentModel.recordEditorGuid$.pipe(\n        concatMap((recordEditorGuid) =>\n          this.getCommonDataDictionary(this.getRecordEditorBranch(recordEditorGuid), recordEditorGuid)\n        )\n      )\n    });\n  }\n\n  private getRecordEditorBranch(recordEditorGuid: string): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    const associationsBranch$: Observable<IViewComponentDesignCommonDataDictionaryBranch> =\n      this.componentModel.otherAssociationRecordEditorComponentGuids$.pipe(\n        switchMap((guids) =>\n          guids.length\n            ? combineLatest(\n                guids.map((guid) =>\n                  this.componentModel.sandbox\n                    .getComponentPropertyValue<'associationDefinitionName', IAssociationDesignProperties>(\n                      'associationDefinitionName',\n                      guid\n                    )\n                    .pipe(\n                      map(\n                        (associationDefinitionName): IViewComponentDesignCommonDataDictionaryBranch => ({\n                          label: this.rxDefinitionNameService.getDisplayName(associationDefinitionName),\n                          children: [\n                            {\n                              label: 'First associated record',\n                              children: [\n                                {\n                                  label: 'ID',\n                                  expression: `\\${view.components.${guid}.firstAssociatedRecord.id}`\n                                }\n                              ]\n                            }\n                          ]\n                        })\n                      )\n                    )\n                )\n              ).pipe(\n                map((children) => ({\n                  label: 'Associations',\n                  children\n                }))\n              )\n            : of(null)\n        )\n      );\n\n    return this.getComponentCommonDataDictionary(recordEditorGuid).pipe(\n      switchMap((recordEditorBranch) =>\n        associationsBranch$.pipe(\n          map(\n            (associationsBranch): IViewComponentDesignCommonDataDictionaryBranch =>\n              associationsBranch\n                ? {\n                    ...recordEditorBranch,\n                    children: [associationsBranch, ...recordEditorBranch.children]\n                  }\n                : recordEditorBranch\n          )\n        )\n      )\n    );\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { AssociationModule } from './runtime/association.module';\nimport { RxAssociationComponent } from './runtime/association.component';\nimport { RX_ASSOCIATION } from './association.types';\nimport { AssociationDesignModule } from './design/association-design.module';\nimport { RxAssociationDesignComponent } from './design/association-design.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { AssociationDesignModel } from './design/association-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { AssociationExpressionConfigurator } from './design/association-expression-configurator.class';\n\n@NgModule({\n  imports: [AssociationModule, AssociationDesignModule]\n})\nexport class AssociationRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.Association,\n        isContainerComponent: true,\n        designComponentModel: AssociationDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId,\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationDesignComponent),\n        expressionConfigurator: AssociationExpressionConfigurator,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationComponent),\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        name: 'Association',\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'arrow_schema',\n        properties: RX_BASE_FIELD_PROPERTIES.concat({\n          name: 'recordInstance',\n          enableExpressionEvaluation: true\n        }),\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ]\n      },\n      {\n        type: RX_ASSOCIATION.componentTypes.associationFilter,\n        configPropertyName: 'associationFilter',\n        properties: [\n          {\n            name: 'associationDefinitionName'\n          },\n          {\n            name: 'recordInstanceId',\n            enableExpressionEvaluation: true\n          }\n        ],\n        isDataComponent: true\n      },\n      {\n        type: RX_ASSOCIATION.componentTypes.associatedRecordField,\n        configPropertyName: 'associatedRecordField',\n        isDataComponent: true,\n        properties: [\n          {\n            name: 'label',\n            localizable: true\n          }\n        ]\n      }\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { AttachmentFieldDesignModel } from './attachment-field-design.model';\n\n@Component({\n  selector: 'rx-attachment-field-design',\n  templateUrl: './attachment-field-design.component.html',\n  styleUrls: ['./attachment-field-design.component.scss']\n})\nexport class AttachmentFieldDesignComponent {\n  @Input()\n  model: AttachmentFieldDesignModel;\n}\n","<adapt-rx-uploader\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [ngModel]=\"[]\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-uploader>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxUploaderModule } from '@bmc-ux/adapt-angular';\nimport { AttachmentFieldDesignComponent } from './attachment-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxUploaderModule],\n  declarations: [AttachmentFieldDesignComponent],\n  entryComponents: [AttachmentFieldDesignComponent]\n})\nexport class AttachmentFieldDesignModule {}\n","import { HostBinding, Injector, Input, OnInit, Directive } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport {\n  IFieldDefinition,\n  IRecordInstance,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { RX_ADMINISTRATION, RxSystemConfigurationService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, includes, isEqual, isNull, isUndefined, values } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { distinctUntilChanged, filter, pluck, skip, startWith, take, takeUntil } from 'rxjs/operators';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';\nimport { IBaseRecordEditorFieldComponentConfig } from './base-record-editor-field-component.types';\nimport { RecordEditorFormControl } from '../../../record-editor/runtime/record-editor-form-control.class';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class BaseRecordEditorFieldComponent extends BaseViewComponent implements OnInit {\n  @HostBinding('class.rx-field-required')\n  isRequired = false;\n\n  @HostBinding('class.rx-field-disabled')\n  isDisabled = false;\n\n  translateService = this.injector.get(TranslateService);\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  @Input()\n  config: Observable<IBaseRecordEditorFieldComponentConfig>;\n\n  private configReady$: Observable<IBaseRecordEditorFieldComponentConfig>;\n  protected recordInstance$: Observable<IRecordInstance>;\n  private isAlwaysDisabled;\n  private isAlwaysHidden;\n\n  inReadState = false;\n  fieldDefinition: IFieldDefinition;\n\n  fieldId: number;\n  label: string;\n  recordEditorApi: IRecordEditorApi;\n  isLoading = true;\n  validationErrorMessage: string = null;\n  permissionType: string;\n  associatedRecordPath: string[];\n\n  formControl: RecordEditorFormControl;\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.configReady$ = this.config.pipe(\n      filter((config) => Boolean(config.api && config.recordDefinition)),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$ = this.configReady$.pipe(\n      pluck<IBaseRecordEditorFieldComponentConfig, IRecordInstance>('recordInstance'),\n      distinctUntilChanged(),\n      skip(1),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$.subscribe(this.subscribeOnConfigValueChange.bind(this));\n\n    this.configReady$.pipe(take(1)).subscribe((config) => {\n      this.isLoading = false;\n\n      this.onConfigInitialized(config);\n      this.onConfigUpdated(config);\n    });\n\n    this.configReady$\n      .pipe(\n        skip(1),\n        filter((config) => Boolean(config.recordInstance)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(this.onConfigUpdated.bind(this));\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    if (!isEqual(value, this.formControl.value)) {\n      if (options.markAsDirty !== false) {\n        this.formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        this.formControl.markAsTouched();\n      }\n\n      this.formControl.setValue(value);\n    }\n  }\n\n  getFieldValue(): any {\n    return this.formControl?.value;\n  }\n\n  getDisplayValue(): any {\n    return this.getFieldValue();\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    this.fieldId = Number(config.fieldId);\n\n    this.fieldDefinition = find(config.recordDefinition.fieldDefinitions, { id: this.fieldId });\n\n    this.isRequired = this.fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n    this.recordEditorApi = config.api;\n\n    this.formControl = this.recordEditorApi.getFieldControl(\n      this.fieldId,\n      this.guid,\n      this.getFieldValidators(),\n      config.associatedRecordPath\n    );\n\n    this.associatedRecordPath = config.associatedRecordPath;\n    this.permissionType = this.recordEditorApi.getPermissionType(this.fieldId, this.associatedRecordPath);\n\n    this.subscribeOnConfigValueChange();\n\n    this.formControl.valueChanges.pipe(startWith(this.formControl.value), takeUntil(this.destroyed$)).subscribe(() => {\n      this.checkValidation();\n      this.updateValidationMessage();\n    });\n\n    this.isAlwaysDisabled =\n      this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view ||\n      this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService).isSystemField(this.fieldDefinition);\n\n    this.isAlwaysHidden = !this.permissionType;\n\n    const recordEditorMode = config.api.getRecordEditorMode();\n\n    if (Number(config.fieldId) === RX_RECORD_DEFINITION.coreFieldIds.createdBy) {\n      const submitterMode = this.injector\n        .get<RxSystemConfigurationService>(RxSystemConfigurationService)\n        .getConfigurationSync('Submitter-Mode');\n\n      this.isAlwaysDisabled =\n        this.isAlwaysDisabled ||\n        (recordEditorMode === RecordEditorMode.Edit && submitterMode === RX_ADMINISTRATION.submitterModes.locked);\n    }\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    const isDisabled = this.isAlwaysDisabled || Boolean(config.disabled);\n\n    if (this.isDisabled !== isDisabled) {\n      // In order to support accessibility for fields, \"disabled\" control status will be always \"false\" and will not\n      // be synced with \"isDisabled\" component property. Field might not be focusable when control is disabled.\n      this.isDisabled = isDisabled;\n\n      if (!this.isDisabled) {\n        // Update validation status of the control after change \"isDisabled\" status to false.\n        this.formControl.updateValueAndValidity();\n      }\n\n      this.checkValidation();\n    }\n\n    this.isHidden = this.isAlwaysHidden || Boolean(config.hidden);\n\n    this.label = isUndefined(config.label) ? this.fieldDefinition.name : config.label;\n    this.inReadState = Boolean(config.inReadState);\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    return [];\n  }\n\n  getRequiredFieldValidationError(): string {\n    return this.translateService.instant('com.bmc.arsys.rx.client.view-components.validation.required.message');\n  }\n\n  getFieldInstanceProp(\n    prop: string,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): any {\n    return this.recordEditorApi.getFieldInstanceProp(fieldId, prop, associatedRecordPath);\n  }\n\n  setFieldInstanceProp(\n    prop: string,\n    value: any,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): void {\n    this.recordEditorApi.setFieldInstanceProp(fieldId, prop, value, associatedRecordPath);\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (includes(['hidden', 'disabled'], propertyPath)) {\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else {\n      return throwError(`Field property ${propertyPath} is not settable.`);\n    }\n  }\n\n  private subscribeOnConfigValueChange() {\n    const value$ = this.configReady$.pipe(\n      pluck('value'),\n      // Do not update field value if expression gets evaluated to undefined, e.g when:\n      // - expression references a removed view component, or\n      // - view component hasn't loaded the data yet\n      filter((val) => !isUndefined(val)),\n      distinctUntilChanged(),\n      takeUntil(this.recordInstance$),\n      takeUntil(this.destroyed$)\n    );\n\n    value$.pipe(take(1)).subscribe((val) => {\n      // Only update field with non empty value on first expression change.\n      // At this time we don't know if null is a default value or it was evaluated from expression.\n      if (!isNull(val)) {\n        this.setFieldValue(val, { markAsTouched: false, markAsDirty: false });\n      }\n    });\n\n    value$.pipe(skip(1)).subscribe((val) => this.setFieldValue(val));\n  }\n\n  private checkValidation() {\n    if (this.isDisabled && this.formControl.invalid) {\n      // Remove errors to make control valid when \"isDisabled\" status is true.\n      this.formControl.setErrors(null);\n      this.updateValidationMessage();\n    }\n  }\n\n  private updateValidationMessage() {\n    if (this.formControl.errors) {\n      if (this.formControl.errors.required) {\n        this.formControl.errors.required = this.getRequiredFieldValidationError();\n      }\n\n      this.validationErrorMessage = values(this.formControl.errors).join(', ');\n    } else {\n      this.validationErrorMessage = null;\n    }\n  }\n}\n","import { UploaderMode, UploaderSelectionMode } from '@bmc-ux/adapt-angular';\n\nexport const RX_ATTACHMENT_FIELD = {\n  defaultOptions: {\n    filesCount: 1,\n    mode: UploaderMode.Manual,\n    selectionMode: UploaderSelectionMode.File,\n    chunkSize: '100KB',\n    maxFileSize: '2GB' // Default is 20 MB\n  }\n};\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { DownloadConfig, FileObj, UploaderTexts } from '@bmc-ux/adapt-angular';\nimport { RX_ATTACHMENT_FIELD } from '../attachment-field.constant';\nimport { first, has, toString } from 'lodash';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { FormControl } from '@angular/forms';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-attachment-field',\n  styleUrls: ['./attachment-field.scss'],\n  templateUrl: './attachment-field.component.html'\n})\nexport class AttachmentFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  fieldDefinition: IFieldDefinition;\n  attachment: File;\n  attachmentFormControl: FormControl;\n\n  // Uploader options\n  filesCount = RX_ATTACHMENT_FIELD.defaultOptions.filesCount;\n  mode = RX_ATTACHMENT_FIELD.defaultOptions.mode;\n  selectionMode = RX_ATTACHMENT_FIELD.defaultOptions.selectionMode;\n  chunkSize = RX_ATTACHMENT_FIELD.defaultOptions.chunkSize;\n  maxFileSize = RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n  showFiles: FileObj[] = [];\n  texts: UploaderTexts = {};\n\n  readStateConfig: DownloadConfig = {\n    fileName: null,\n    downloadURL: null\n  };\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    this.attachmentFormControl = new FormControl(this.showFiles);\n\n    this.maxFileSize = this.fieldDefinition.maxSize\n      ? toString(this.fieldDefinition.maxSize)\n      : RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n\n    this.formControl.valueChanges\n      .pipe(\n        startWith(this.formControl.value as string),\n        // Update ADAPT component only when formControl value will be a file name string.\n        // When value comes as a File, it means this file is already attached to ADAPT component.\n        filter((value) => !(value instanceof File)),\n        distinctUntilChanged((previous, next) => {\n          return (\n            previous === next &&\n            // After uploading a file, adapt-rx-uploader component has to be updated with the URL to download the file.\n            // This happens when the record editor updates the entire form with values from the saved record instance.\n            // valueChange will emit the same value as before, but adapt-rx-uploader will not have a downloadURL yet.\n            has(this.attachmentFormControl.value, '[0].downloadURL')\n          );\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.attachmentFormControl.reset();\n        this.addAttachedFileToAttachmentList(this.getFieldValue());\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.attachmentFormControl.markAsTouched() : this.attachmentFormControl.markAsUntouched();\n    });\n  }\n\n  addAttachedFileToAttachmentList(fileName?: string): void {\n    if (fileName) {\n      const downloadAttachmentUrl = this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId);\n      let attachment;\n\n      attachment = {\n        data: {\n          name: fileName\n        },\n        isUploading: true\n      };\n\n      if (downloadAttachmentUrl) {\n        attachment.downloadURL = downloadAttachmentUrl;\n      }\n\n      this.showFiles = [attachment];\n    } else {\n      this.showFiles = [];\n    }\n\n    this.attachmentFormControl.setValue(this.showFiles);\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigUpdated(config);\n\n    if (this.inReadState) {\n      this.readStateConfig = {\n        fileName: this.getDisplayValue(),\n        downloadURL: this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId)\n      };\n    }\n  }\n\n  removeAttachment(attachment: any): void {\n    if (attachment) {\n      this.attachment = null;\n    }\n\n    this.addAttachedFileToAttachmentList();\n    this.setFieldValue(this.attachment);\n  }\n\n  addAttachment(attachments: FileObj[]): void {\n    const attachment = first(attachments);\n\n    if (attachment) {\n      this.attachment = attachment.data;\n      this.setFieldValue(this.attachment);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <ng-container *ngIf=\"inReadState; else editStateElementRef\">\n    <div *ngIf=\"getDisplayValue(); else emptyReadonlyField\" [attr.aria-label]=\"label\">\n      <label aria-hidden=\"true\">{{ label }}</label>\n\n      <adapt-downloader class=\"d-block\" *ngIf=\"getDisplayValue()\" [config]=\"readStateConfig\"></adapt-downloader>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-uploader\n    [ngClass]=\"{ 'attachment-disabled': isDisabled }\"\n    [reusable]=\"true\"\n    [label]=\"label\"\n    [readonly]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [allowDeletion]=\"false\"\n    [uploadMode]=\"mode\"\n    [selectionMode]=\"selectionMode\"\n    [filesCount]=\"filesCount\"\n    [maxFileSize]=\"maxFileSize\"\n    [chunkSize]=\"chunkSize\"\n    [texts]=\"texts\"\n    (removedFileFromQueue)=\"removeAttachment($event)\"\n    (deletedFile)=\"removeAttachment($event)\"\n    (afterFilesAdded)=\"addAttachment($event)\"\n    [formControl]=\"attachmentFormControl\"\n    (onBlur)=\"onBlur()\"\n  >\n  </adapt-rx-uploader>\n</ng-template>\n\n<ng-template #emptyReadonlyField>\n  <rx-read-only-field [label]=\"label\" [value]=\"'-'\"></rx-read-only-field>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptDownloadModule, AdaptRxUploaderModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { AttachmentFieldComponent } from './attachment-field.component';\nimport { UploaderService } from '@helix/platform/record/api';\nimport { TranslateModule } from '@ngx-translate/core';\n\nexport function UploaderFactory() {\n  return new UploaderService();\n}\n\n@NgModule({\n  imports: [\n    AdaptRxUploaderModule.forRoot({\n      uploader: {\n        provide: 'UploaderService',\n        useFactory: UploaderFactory,\n        deps: []\n      }\n    }),\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    AdaptDownloadModule\n  ],\n  declarations: [AttachmentFieldComponent],\n  entryComponents: [AttachmentFieldComponent]\n})\nexport class AttachmentFieldModule {}\n","import { Injector } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ITextFormControlOptions,\n  IValidationFormControlOptions,\n  SelectFormControlComponent,\n  TextFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSettablePropertiesDataDictionary,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { find, includes, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  startWith,\n  switchMap,\n  take,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IBaseRecordEditorFieldProperties } from './base-record-editor-field-design.types';\nimport {\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\n\nexport abstract class BaseRecordEditorFieldDesign extends ViewDesignerComponentModel {\n  protected rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  protected rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  protected rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  label$: Observable<string>;\n  recordEditorMode$: Observable<RecordEditorMode>;\n  parentGuid$: Observable<string>;\n  recordDefinitionName$: Observable<string>;\n  availableFieldDefinitions$: Observable<IFieldDefinition[]>;\n  recordDefinition$: Observable<IRecordDefinition>;\n  selectedFieldDefinition$: Observable<IFieldDefinition>;\n  isRequired$: Observable<boolean>;\n  private isSystemField$: Observable<boolean>;\n\n  abstract fieldResourceTypes: string[];\n\n  static getInitialProperties(initialProperties?: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    return {\n      fieldId: null,\n      label: null,\n      value: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    protected sandbox: IViewComponentDesignSandbox<IBaseRecordEditorFieldProperties>\n  ) {\n    super(injector, sandbox);\n  }\n\n  rxInit(): void {\n    this.pipeline();\n  }\n\n  private pipeline(): void {\n    this.parentGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.recordEditorMode$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n      })\n    );\n\n    this.recordDefinitionName$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName: string) => {\n        if (recordDefinitionName) {\n          return this.rxRecordDefinitionCacheService\n            .getRecordDefinition(recordDefinitionName)\n            .pipe(catchError((error) => EMPTY));\n        } else {\n          return of(null);\n        }\n      }),\n      distinctUntilChanged()\n    );\n\n    this.selectedFieldDefinition$ = this.sandbox.getComponentPropertyValue('fieldId').pipe(\n      switchMap((fieldId) =>\n        this.recordDefinition$.pipe(\n          map((recordDefinition) => {\n            if (recordDefinition && fieldId) {\n              return (\n                recordDefinition.fieldDefinitions.find(\n                  (fieldDefinition: IFieldDefinition) => fieldDefinition.id === Number(fieldId)\n                ) || null\n              );\n            } else {\n              return null;\n            }\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n\n    this.isRequired$ = this.selectedFieldDefinition$.pipe(\n      map(\n        (selectedFieldDefinition: IFieldDefinition) =>\n          selectedFieldDefinition && selectedFieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required\n      )\n    );\n\n    this.isSystemField$ = this.selectedFieldDefinition$.pipe(\n      startWith(false),\n      map((selectedFieldDefinition: IFieldDefinition) =>\n        this.rxFieldDefinitionService.isSystemField(selectedFieldDefinition)\n      )\n    );\n\n    // set field label\n    this.selectedFieldDefinition$\n      .pipe(\n        pairwise(),\n        withLatestFrom(this.sandbox.componentProperties$),\n        filter(\n          ([[oldField, newField], componentProperties]: [\n            [IFieldDefinition, IFieldDefinition],\n            IBaseRecordEditorFieldProperties\n          ]) => newField && ((oldField && oldField.name === componentProperties.label) || !componentProperties.label)\n        ),\n        map(\n          ([[oldField, newField]]: [[IFieldDefinition, IFieldDefinition], IBaseRecordEditorFieldProperties]) =>\n            newField.name\n        )\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    this.availableFieldDefinitions$ = combineLatest([this.recordDefinition$, this.recordEditorMode$]).pipe(\n      map(([recordDefinition, recordEditorMode]) => {\n        if (recordDefinition && recordDefinition.fieldDefinitions) {\n          return recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => includes(this.fieldResourceTypes, fieldDefinition.resourceType))\n            .filter((fieldDefinition) => {\n              const isSystemField = this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n\n              return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n            });\n        } else {\n          return [];\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.label$ = this.sandbox.componentProperties$.pipe(\n      map((componentProperties: IBaseRecordEditorFieldProperties) => {\n        return componentProperties && componentProperties.fieldId ? componentProperties.label : '<No field selected>';\n      })\n    );\n\n    this.sandbox.componentProperties$\n      .pipe(\n        mergeMap((componentProperties) => this.validate(componentProperties)),\n        distinctUntilChanged(isEqual)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    this.availableFieldDefinitions$\n      .pipe(switchMap(() => this.getInspectorConfig()))\n      .subscribe((inspectorConfig: IViewDesignerInspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        switchMap(() => this.getBreadcrumb()),\n        distinctUntilChanged()\n      )\n      .subscribe((breadcrumb: string) => {\n        this.sandbox.setBreadcrumbs(breadcrumb);\n      });\n\n    combineLatest([this.sandbox.getComponentPropertyValue('label'), this.selectedFieldDefinition$])\n      .pipe(\n        map(\n          ([label, fieldDefinition]) =>\n            label || (fieldDefinition ? `[${fieldDefinition.name}]` : `[${this.sandbox.descriptor.name}]`)\n        ),\n        distinctUntilChanged()\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, this.getSettableProperties());\n      });\n  }\n\n  getPropertiesByName(properties: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    const result: IBaseRecordEditorFieldProperties = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  validate(componentProperties: IBaseRecordEditorFieldProperties): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationIssues = [];\n\n    if (isEmpty(componentProperties.fieldId)) {\n      validationIssues.push(this.sandbox.createError('Field name cannot be blank.', 'fieldId'));\n    }\n\n    validationIssues.push(...validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  getBreadcrumb(): Observable<string> {\n    return of(null).pipe(\n      withLatestFrom(this.sandbox.componentProperties$),\n      map(([initial, componentProperties]) => componentProperties.label)\n    );\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return of(null).pipe(\n      withLatestFrom(\n        this.availableFieldDefinitions$,\n        this.recordDefinitionName$,\n        this.parentGuid$,\n        this.isSystemField$\n      ),\n      map(([initial, recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField]) => {\n        return this.getBaseInspectorConfig(recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField);\n      })\n    );\n  }\n\n  getSettableProperties(): IViewComponentDesignSettablePropertiesDataDictionary {\n    const disabledPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Disabled',\n            expression: `\\${view.components.${this.sandbox.guid}.disabled}`\n          }\n        ]\n      : [];\n\n    const hiddenPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Hidden',\n            expression: `\\${view.components.${this.sandbox.guid}.hidden}`\n          }\n        ]\n      : [];\n\n    return [...disabledPropDataDictionary, ...hiddenPropDataDictionary];\n  }\n\n  private getBaseInspectorFields(selectedFieldDefinitions: IFieldDefinition[], isSystemField: boolean) {\n    return [].concat(\n      [\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            required: true,\n            options: selectedFieldDefinitions.map((definition) => ({\n              name: definition.name,\n              id: String(definition.id)\n            }))\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'label',\n          component: TextFormControlComponent,\n          options: {\n            label: 'Display label'\n          } as ITextFormControlOptions\n        }\n      ],\n      isSystemField\n        ? []\n        : [\n            {\n              name: 'value',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Value'\n              } as IExpressionInspectorControlOptions\n            },\n            getDisabledFieldInspectorConfig()\n          ],\n      getStandardPropsInspectorConfigs()\n    );\n  }\n\n  private getBaseInspectorConfig(\n    recordFieldsSelectItems: IFieldDefinition[],\n    recordDefinitionName: string,\n    parentGuid: string,\n    isSystemField: boolean\n  ): IViewDesignerInspectorConfig {\n    const displayName = this.rxDefinitionNameService.getDisplayName(recordDefinitionName || '');\n\n    let controls;\n\n    if (recordDefinitionName) {\n      if (recordFieldsSelectItems.length) {\n        controls = this.getBaseInspectorFields(recordFieldsSelectItems, isSystemField);\n      } else {\n        controls = [\n          {\n            component: ValidationFormControlComponent,\n            options: {\n              text: `${displayName} does not have fields that can be bound to this field type.`,\n              componentGuid: parentGuid,\n              propertyName: 'recordDefinitionName'\n            } as IValidationFormControlOptions\n          }\n        ];\n      }\n    } else {\n      controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: parentGuid,\n            propertyName: 'recordDefinitionName' // todo remove that hardcode\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls\n        }\n      ]\n    };\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { IBaseRecordEditorFieldProperties } from '../../base-record-editor-field/design/base-record-editor-field-design.types';\n\nexport class AttachmentFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.attachment];\n\n  static getInitialProperties(initialProperties?: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    const result = BaseRecordEditorFieldDesign.getInitialProperties(initialProperties);\n\n    delete result.value;\n\n    return result;\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super.getInspectorConfig().pipe(\n      map((inspectorConfig: IViewDesignerInspectorConfig) => {\n        inspectorConfig.inspectorSectionConfigs[0].controls =\n          inspectorConfig.inspectorSectionConfigs[0].controls.filter((field) => field.name !== 'value');\n\n        return inspectorConfig;\n      })\n    );\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { AttachmentFieldModule } from './runtime/attachment-field.module';\nimport { AttachmentFieldComponent } from './runtime/attachment-field.component';\nimport { AttachmentFieldDesignModule } from './design/attachment-field-design.module';\nimport { AttachmentFieldDesignComponent } from './design/attachment-field-design.component';\nimport { AttachmentFieldDesignModel } from './design/attachment-field-design.model';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\n\n@NgModule({\n  imports: [AttachmentFieldModule, AttachmentFieldDesignModule]\n})\nexport class AttachmentFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Attachment,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n      name: 'Attachment',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'paperclip',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldDesignComponent),\n      designComponentModel: AttachmentFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { IBaseRecordEditorFieldComponentConfig } from '../base-record-editor-field/runtime';\n\nexport interface IBooleanFieldConfig extends IBaseRecordEditorFieldComponentConfig {\n  editingMode?: BooleanFieldEditingMode;\n}\n\nexport enum BooleanFieldEditingMode {\n  Checkbox = 'checkbox',\n  Switch = 'switch'\n}\n\nexport enum BooleanFieldModelValue {\n  True = 1,\n  False = 0\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { BooleanFieldDesignModel } from './boolean-field-design.model';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { combineLatest, ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'rx-boolean-field-design',\n  templateUrl: './boolean-field-design.component.html'\n})\nexport class BooleanFieldDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: BooleanFieldDesignModel;\n\n  booleanValue: boolean; // need this, because new adapt-switcher don't work without ngModel\n  shouldDisplayAsCheckbox = false;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  ngOnInit(): void {\n    const editingMode$ = this.model.componentProperties$.pipe(\n      map((componentProperties) => componentProperties.editingMode || BooleanFieldEditingMode.Switch)\n    );\n\n    combineLatest([editingMode$, this.model.isRequired$])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([editingMode, isRequired]) => {\n        this.shouldDisplayAsCheckbox = isRequired && editingMode === BooleanFieldEditingMode.Checkbox;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<ng-container *ngIf=\"!shouldDisplayAsCheckbox\">\n  <div>\n    <strong>\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </strong>\n  </div>\n  <adapt-rx-switch [(ngModel)]=\"booleanValue\" [disabled]=\"true\"></adapt-rx-switch>\n</ng-container>\n\n<ng-container *ngIf=\"shouldDisplayAsCheckbox\">\n  <adapt-rx-checkbox\n    [(ngModel)]=\"booleanValue\"\n    [label]=\"model.label$ | async\"\n    [required]=\"model.isRequired$ | async\"\n    [disabled]=\"true\"\n  >\n  </adapt-rx-checkbox>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxCheckboxModule, AdaptRxSwitchModule } from '@bmc-ux/adapt-angular';\nimport { BooleanFieldDesignComponent } from './boolean-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxSwitchModule, AdaptRxCheckboxModule],\n  declarations: [BooleanFieldDesignComponent],\n  exports: [BooleanFieldDesignComponent],\n  entryComponents: [BooleanFieldDesignComponent]\n})\nexport class BooleanFieldDesignModule {}\n","import { AfterViewInit, Component, Injector, ViewChild } from '@angular/core';\nimport { isNil, isNull } from 'lodash';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { RxBooleanPipe } from '@helix/platform/shared/api';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { BooleanFieldEditingMode, BooleanFieldModelValue, IBooleanFieldConfig } from '../boolean-field.types';\nimport { NgModel } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-boolean-field',\n  templateUrl: './boolean-field.component.html'\n})\nexport class BooleanFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, AfterViewInit {\n  editingMode: BooleanFieldEditingMode;\n\n  get booleanValue(): boolean | null {\n    const value = this.getFieldValue();\n\n    return isNull(value) ? null : Boolean(value);\n  }\n\n  set booleanValue(value: boolean | null) {\n    if (isNull(value)) {\n      this.setFieldValue(null);\n    } else {\n      this.setFieldValue(Number(value));\n    }\n  }\n\n  @ViewChild('booleanComponent', { read: NgModel })\n  ngModel: NgModel;\n\n  constructor(injector: Injector, private rxBooleanPipe: RxBooleanPipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (!isNil(displayValue)) {\n      return this.rxBooleanPipe.transform(displayValue);\n    } else {\n      return '-';\n    }\n  }\n\n  onConfigInitialized(config: IBooleanFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.editingMode = config.editingMode;\n  }\n\n  onConfigUpdated(config: IBooleanFieldConfig): void {\n    super.onConfigUpdated(config);\n\n    // Set 0 as a default value for checkbox, e.g. scenario in the create record editor mode\n    if (this.shouldDisplayAsCheckbox && this.getFieldValue() === null) {\n      this.setFieldValue(BooleanFieldModelValue.False, { markAsDirty: false, markAsTouched: false });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl.touched$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((touched) =>\n        touched ? this.ngModel?.control.markAsTouched() : this.ngModel?.control.markAsUntouched()\n      );\n  }\n\n  get shouldDisplayAsCheckbox(): boolean {\n    return this.editingMode === BooleanFieldEditingMode.Checkbox && this.isRequired;\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-boolean\n    #booleanComponent\n    [hidden]=\"isHidden\"\n    [label]=\"label\"\n    [isDisabled]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [shouldDisplayAsCheckbox]=\"shouldDisplayAsCheckbox\"\n    [(ngModel)]=\"booleanValue\"\n    (rxBlur)=\"onBlur()\"\n  >\n  </rx-boolean>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxCheckboxModule, AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { RxBooleanModule } from '@helix/platform/shared/components';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { BooleanFieldComponent } from './boolean-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptRxFormControlModule,\n    ReadOnlyFieldModule,\n    AdaptButtonModule,\n    AdaptRxCheckboxModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RxBooleanModule\n  ],\n  declarations: [BooleanFieldComponent],\n  entryComponents: [BooleanFieldComponent]\n})\nexport class BooleanFieldModule {}\n","import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewComponentDesignSandbox, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { findIndex, map as _map } from 'lodash';\nimport { Injector } from '@angular/core';\nimport { IBooleanFieldProperties } from './boolean-field-design.types';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class BooleanFieldDesignModel extends BaseRecordEditorFieldDesign {\n  componentProperties$: Observable<IBooleanFieldProperties> = this.sandbox.componentProperties$;\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.boolean];\n\n  static getInitialProperties(initialProperties?: IBooleanFieldProperties): IBooleanFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      editingMode: BooleanFieldEditingMode.Switch,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<IBooleanFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super\n      .getInspectorConfig()\n      .pipe(map((inspectorConfig: IViewDesignerInspectorConfig) => this.editInspectorConfig(inspectorConfig)));\n  }\n\n  private editInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): IViewDesignerInspectorConfig {\n    const valueControlIndex = findIndex(\n      inspectorConfig.inspectorSectionConfigs[0].controls,\n      (item) => item.name === 'value'\n    );\n\n    const editingModeControl = {\n      name: 'editingMode',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Editing mode',\n        tooltip: new Tooltip('An optional Boolean field will always be displayed as a Switch.'),\n        required: false,\n        options: _map(BooleanFieldEditingMode, (value, name) => ({\n          id: value,\n          name\n        }))\n      } as ISelectFormControlOptions\n    };\n\n    if (valueControlIndex !== -1) {\n      inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { BooleanFieldModule } from './runtime/boolean-field.module';\nimport { BooleanFieldComponent } from './runtime/boolean-field.component';\nimport { BooleanFieldDesignModule } from './design/boolean-field-design.module';\nimport { BooleanFieldDesignModel } from './design/boolean-field-design.model';\nimport { BooleanFieldDesignComponent } from './design/boolean-field-design.component';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\n\n@NgModule({\n  imports: [BooleanFieldModule, BooleanFieldDesignModule]\n})\nexport class BooleanFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Boolean,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Boolean',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'switcher_check',\n      designComponentModel: BooleanFieldDesignModel,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldDesignComponent),\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { DateFieldDesignModel } from './date-field-design.model';\n\n@Component({\n  selector: 'rx-date-field-design',\n  templateUrl: './date-field-design.component.html'\n})\nexport class DateFieldDesignComponent {\n  @Input()\n  model: DateFieldDesignModel;\n\n  dateValue: Date;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateValue\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { DateFieldDesignComponent } from './date-field-design.component';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [DateFieldDesignComponent],\n  entryComponents: [DateFieldDesignComponent]\n})\nexport class DateFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class DateAdapter extends AdaptRxDatetimeAdapter<string> {\n  private storeDateFormat = 'YYYY-MM-DD'; // AR server only accepts this format for Date.\n\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment([date.year || 0, date.month || 0, date.date || 0]).format(this.storeDateFormat)\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport moment from 'moment-es6';\nimport { DateAdapter } from './date-adapter.class';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\n\n@Component({\n  selector: 'rx-date-field',\n  templateUrl: './date-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: DateAdapter }]\n})\nexport class DateFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (displayValue) {\n      return this.datePipe.transform(displayValue, 'mediumDate');\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors => {\n      const date = control.value ? moment(control.value) : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: RxDatetimePickerMode.Date } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DateFieldComponent } from './date-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    AdaptRxDatetimeModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DateFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [DateFieldComponent]\n})\nexport class DateFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DateFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.dateOnly];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DateFieldComponent } from './runtime/date-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DateFieldDesignComponent } from './design/date-field-design.component';\nimport { DateFieldDesignModel } from './design/date-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DateFieldModule } from './runtime/date-field.module';\nimport { DateFieldDesignModule } from './design/date-field-design.module';\n\n@NgModule({\n  imports: [DateFieldModule, DateFieldDesignModule]\n})\nexport class DateFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Date,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Date',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'calendar',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldDesignComponent),\n      designComponentModel: DateFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { DateTimeFieldDesignModel } from './date-time-field-design.model';\nimport { RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-date-time-field-design',\n  templateUrl: './date-time-field-design.component.html'\n})\nexport class DateTimeFieldDesignComponent {\n  @Input()\n  model: DateTimeFieldDesignModel;\n\n  dateTimeValue: Date;\n  pickerMode = RxDatetimePickerMode.DateTime;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateTimeValue\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n>\n</adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { DateTimeFieldDesignComponent } from './date-time-field-design.component';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [DateTimeFieldDesignComponent],\n  entryComponents: [DateTimeFieldDesignComponent]\n})\nexport class DateTimeFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class DateTimeAdapter extends AdaptRxDatetimeAdapter<string> {\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment([\n            date.year || 0,\n            date.month || 0,\n            date.date || 0,\n            date.hours || 0,\n            date.minutes || 0,\n            date.seconds || 0\n          ]).toISOString()\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { DateTimeAdapter } from './date-time-adapter.class';\n\n@Component({\n  selector: 'rx-date-time-field',\n  templateUrl: './date-time-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: DateTimeAdapter }]\n})\nexport class DateTimeFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  pickerMode = RxDatetimePickerMode.DateTime;\n\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (displayValue) {\n      return this.datePipe.transform(displayValue, 'medium');\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors => {\n      const date = control.value ? moment(control.value) : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: this.pickerMode, hasSeconds: true } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DateTimeFieldComponent } from './date-time-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    AdaptRxDatetimeModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DateTimeFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [DateTimeFieldComponent]\n})\nexport class DateTimeFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DateTimeFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.dateTime];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DateTimeFieldComponent } from './runtime/date-time-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DateTimeFieldDesignComponent } from './design';\nimport { DateTimeFieldDesignModel } from './design/date-time-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DateTimeFieldModule } from './runtime/date-time-field.module';\nimport { DateTimeFieldDesignModule } from './design/date-time-field-design.module';\n\n@NgModule({\n  imports: [DateTimeFieldModule, DateTimeFieldDesignModule]\n})\nexport class DateTimeFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.DateTime,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Date/Time',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'calendar_clock_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldDesignComponent),\n      designComponentModel: DateTimeFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { DecimalFieldDesignModel } from './decimal-field-design.model';\n\n@Component({\n  selector: 'rx-decimal-field-design',\n  templateUrl: './decimal-field-design.component.html'\n})\nexport class DecimalFieldDesignComponent {\n  @Input()\n  model: DecimalFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { DecimalFieldDesignComponent } from './decimal-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [DecimalFieldDesignComponent],\n  entryComponents: [DecimalFieldDesignComponent]\n})\nexport class DecimalFieldDesignModule {}\n","import { DecimalPipe } from '@angular/common';\nimport { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport BigNumber from 'bignumber.js';\nimport { isEqual, isFinite, isNil, isNull } from 'lodash';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\n\n@Component({\n  selector: 'rx-integer-field',\n  templateUrl: './integer-field.component.html'\n})\nexport class IntegerFieldComponent extends BaseRecordEditorFieldComponent implements OnInit, IViewComponent {\n  fieldDefinition: IFieldDefinition;\n  decimalPipe: DecimalPipe;\n  counterFormControl: FormControl;\n\n  private hasFocus = false;\n\n  @ViewChild('counterComponent')\n  counterComponent;\n\n  constructor(injector: Injector) {\n    super(injector);\n\n    this.decimalPipe = injector.get(DecimalPipe);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    // A separate formControl is used to handle the scenario when invalid number typed to the counter component.\n    this.counterFormControl = new FormControl(this.formControl.value, this.formControl.validator);\n\n    this.counterFormControl.valueChanges\n      .pipe(\n        filter((value) => !isEqual(this.formControl.value, value)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((value) => {\n        this.setFieldValue(value);\n      });\n\n    this.formControl.valueChanges\n      .pipe(startWith(this.formControl.value as number), distinctUntilChanged(isEqual), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        // To prevent reset the counter invalid value (e.g '-', 'e') during the typing,\n        // in this case counterFormControl value is NaN and formControl value is null,\n        // counter must be updated only when it doesn't have a focus\n        if (!this.hasFocus) {\n          this.counterFormControl.setValue(this.formControl.value);\n        }\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.counterFormControl.markAsTouched() : this.counterFormControl.markAsUntouched();\n    });\n  }\n\n  onBlur(): void {\n    this.hasFocus = false;\n    this.formControl.markAsTouched();\n  }\n\n  onFocus(): void {\n    this.hasFocus = true;\n  }\n\n  getDisplayValue(): string {\n    const fieldValue = this.getFieldValue();\n\n    return isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue));\n  }\n\n  setFieldValue(value: any): void {\n    if (!isNull(value) && isFinite(value)) {\n      const bigNumberVal = new BigNumber(value);\n\n      if (!bigNumberVal.eq(this.formControl.value)) {\n        this.formControl.markAsDirty();\n        this.formControl.setValue(bigNumberVal);\n      }\n    } else {\n      super.setFieldValue(value);\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    #counterComponent\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    adaptIntegerNumber\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n  ></adapt-rx-counter>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { IntegerFieldComponent } from '../../integer-field/runtime/integer-field.component';\nimport { isNil } from 'lodash';\n\n@Component({\n  selector: 'rx-decimal-field',\n  templateUrl: './decimal-field.component.html'\n})\nexport class DecimalFieldComponent extends IntegerFieldComponent implements OnInit, IViewComponent {\n  getDisplayValue(): string {\n    const fieldValue = this.getFieldValue();\n    const precision = this.fieldDefinition.precision;\n    const digitsInfo = precision === -1 ? null : `1.${precision}-${precision}`;\n\n    return isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue), digitsInfo);\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-counter>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxCounterModule, AdaptRxValidatorsModule } from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldFormBuilderModule } from '@bmc-ux/obsolete';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DecimalFieldComponent } from './decimal-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    AdaptTextFieldFormBuilderModule,\n    AdaptRxCounterModule,\n    AdaptRxValidatorsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DecimalFieldComponent],\n  entryComponents: [DecimalFieldComponent]\n})\nexport class DecimalFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DecimalFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.decimal, RX_RECORD_DEFINITION.resourceTypes.real];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DecimalFieldComponent } from './runtime/decimal-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DecimalFieldDesignComponent } from './design';\nimport { DecimalFieldDesignModel } from './design/decimal-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DecimalFieldModule } from './runtime/decimal-field.module';\nimport { DecimalFieldDesignModule } from './design/decimal-field-design.module';\n\n@NgModule({\n  imports: [DecimalFieldModule, DecimalFieldDesignModule]\n})\nexport class DecimalFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    const decimalFieldComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DecimalFieldComponent);\n\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Decimal,\n      aliases: [RxViewComponentType.Floating],\n      componentFactory: decimalFieldComponentFactory,\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Decimal',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_decimal_number',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DecimalFieldDesignComponent),\n      designComponentModel: DecimalFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IntegerFieldDesignModel } from './integer-field-design.model';\n\n@Component({\n  selector: 'rx-integer-field-design',\n  templateUrl: './integer-field-design.component.html'\n})\nexport class IntegerFieldDesignComponent {\n  @Input()\n  model: IntegerFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { IntegerFieldDesignComponent } from './integer-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [IntegerFieldDesignComponent],\n  entryComponents: [IntegerFieldDesignComponent]\n})\nexport class IntegerFieldDesignModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxCounterModule, AdaptRxValidatorsModule } from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldFormBuilderModule } from '@bmc-ux/obsolete';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { IntegerFieldComponent } from './integer-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    AdaptTextFieldFormBuilderModule,\n    AdaptRxCounterModule,\n    AdaptRxValidatorsModule,\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule\n  ],\n  declarations: [IntegerFieldComponent],\n  entryComponents: [IntegerFieldComponent]\n})\nexport class IntegerFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class IntegerFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.integer];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { IntegerFieldComponent } from './runtime/integer-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { IntegerFieldDesignComponent } from './design';\nimport { IntegerFieldDesignModel } from './design/integer-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { IntegerFieldModule } from './runtime/integer-field.module';\nimport { IntegerFieldDesignModule } from './design/integer-field-design.module';\n\n@NgModule({\n  imports: [IntegerFieldModule, IntegerFieldDesignModule]\n})\nexport class IntegerFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Integer,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Integer',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_integer_number',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldDesignComponent),\n      designComponentModel: IntegerFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","export const RX_SELECTION_FIELD = {\n  emptyOption: {\n    id: null,\n    name: 'None'\n  },\n\n  editingMode: {\n    radioButtons: 'Radio Buttons',\n    dropdown: 'Dropdown'\n  },\n\n  editingModeValue: {\n    radioButtons: 'radio-buttons',\n    dropdown: 'dropdown'\n  }\n};\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SelectionFieldDesignModel } from './selection-field-design.model';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\n\n@Component({\n  selector: 'rx-selection-field-design',\n  templateUrl: './selection-field-design.component.html',\n  styleUrls: ['./selection-field-design.component.scss']\n})\nexport class SelectionFieldDesignComponent implements OnInit {\n  @Input()\n  model: SelectionFieldDesignModel;\n\n  isRadioButtonMode: boolean;\n\n  ngOnInit() {\n    this.model.editingMode$.subscribe((mode) => {\n      this.setMode(mode);\n    });\n  }\n\n  setMode(mode: string): void {\n    this.isRadioButtonMode = mode === RX_SELECTION_FIELD.editingModeValue.radioButtons;\n  }\n}\n","<adapt-rx-select\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [options]=\"[]\"\n  [disabled]=\"true\"\n  *ngIf=\"!isRadioButtonMode\"\n  [required]=\"model.isRequired$ | async\"\n  ngModel\n>\n</adapt-rx-select>\n\n<ng-container *ngIf=\"isRadioButtonMode\">\n  <div class=\"form-group\">\n    <label class=\"form-control-label\">\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </label>\n\n    <adapt-rx-radiobutton-group [(ngModel)]=\"isRadioButtonMode\" [disabled]=\"true\">\n      <adapt-rx-radiobutton *ngIf=\"!(model.isRequired$ | async)\" value=\"None\" label=\"None\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 1\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 2\"></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxRadiobuttonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { SelectionFieldDesignComponent } from './selection-field-design.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxRadiobuttonModule, FormsModule, AdaptRxSelectModule],\n  declarations: [SelectionFieldDesignComponent],\n  entryComponents: [SelectionFieldDesignComponent]\n})\nexport class SelectionFieldDesignModule {}\n","import { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime';\n\nexport interface ISelectionFieldConfig extends IBaseRecordEditorFieldComponentConfig {\n  editingMode?: string;\n}\n\nexport enum SelectionFieldMode {\n  RadioButton = 'radio-buttons',\n  Dropdown = 'dropdown'\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { ISelectionFieldDefinition } from '@helix/platform/record/api';\nimport { compact, get, isNil, map } from 'lodash';\nimport { distinctUntilChanged, startWith, takeUntil } from 'rxjs/operators';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\nimport { ISelectionFieldConfig, SelectionFieldMode } from './selection-field.types';\n\n@Component({\n  selector: 'rx-selection-field',\n  templateUrl: './selection-field.component.html'\n})\nexport class SelectionFieldComponent extends BaseRecordEditorFieldComponent {\n  fieldDefinition: ISelectionFieldDefinition;\n  selectOptions: RxSelectOption[];\n  isRadioButtonMode: boolean;\n  selectFormControl: FormControl;\n\n  getSelectValue(): RxSelectOption[] {\n    return isNil(this.formControl.value)\n      ? []\n      : compact([this.selectOptions.find((option) => option.id === Number(this.formControl.value))]);\n  }\n\n  onConfigInitialized(config: ISelectionFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.isRadioButtonMode = config.editingMode === SelectionFieldMode.RadioButton;\n\n    this.generateControlOptions(this.fieldDefinition);\n\n    this.selectFormControl = new FormControl(this.getSelectValue());\n\n    this.selectFormControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((value: RxSelectOption[]) => {\n      this.setFieldValue(get(value, '[0].id', null));\n    });\n\n    this.formControl.valueChanges\n      .pipe(startWith(this.formControl.value as number), distinctUntilChanged(), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        this.selectFormControl.setValue(this.getSelectValue());\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.selectFormControl.markAsTouched() : this.selectFormControl.markAsUntouched();\n    });\n  }\n\n  generateControlOptions(fieldDefinition: ISelectionFieldDefinition): void {\n    this.selectOptions = map(fieldDefinition.optionLabelsById, (label, optionId) => ({\n      name: label,\n      id: Number(optionId)\n    }));\n\n    if (!this.isRequired && this.isRadioButtonMode) {\n      this.selectOptions.unshift(RX_SELECTION_FIELD.emptyOption);\n    }\n  }\n\n  getDisplayValue(): string {\n    return this.fieldDefinition.optionLabelsById[this.formControl.value];\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  onPopupStatusChange(isOpen: boolean): void {\n    if (!isOpen) {\n      this.formControl.markAsTouched();\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-radiobutton-group\n    *ngIf=\"isRadioButtonMode\"\n    [name]=\"guid\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [label]=\"label\"\n  >\n    <adapt-rx-radiobutton\n      *ngFor=\"let item of selectOptions; last as isLast\"\n      [value]=\"item.id\"\n      [label]=\"item.name\"\n      class=\"mt-0 {{ isLast ? 'mb-1' : '' }}\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n\n  <adapt-rx-select\n    *ngIf=\"!isRadioButtonMode\"\n    [options]=\"selectOptions\"\n    [required]=\"isRequired\"\n    [label]=\"label\"\n    [formControl]=\"selectFormControl\"\n    [readonly]=\"isDisabled\"\n    [optionFormatter]=\"optionFormatter\"\n    [enableFilter]=\"true\"\n    [emptyOption]=\"!isRequired\"\n    (onPopupOpenChange)=\"onPopupStatusChange($event)\"\n  >\n  </adapt-rx-select>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptRxRadiobuttonModule, AdaptRxFormControlModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { SelectionFieldComponent } from './selection-field.component';\nimport { AdaptRxLabelModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [\n    AdaptRxFormControlModule,\n    AdaptRxRadiobuttonModule,\n    CommonModule,\n    ReadOnlyFieldModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    AdaptRxLabelModule,\n    AdaptRxSelectModule\n  ],\n  declarations: [SelectionFieldComponent],\n  entryComponents: [SelectionFieldComponent]\n})\nexport class SelectionFieldModule {}\n","import { Injector } from '@angular/core';\nimport { findIndex } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewComponentDesignSandbox, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\nimport { ISelectionFieldProperties } from './selection-field-design.types';\n\nexport class SelectionFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.selection];\n\n  editingMode$: Observable<string> = this.sandbox.componentProperties$.pipe(\n    map((componentProperties) => componentProperties.editingMode)\n  );\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<ISelectionFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  static getInitialProperties(initialProperties?: ISelectionFieldProperties): ISelectionFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      editingMode: RX_SELECTION_FIELD.editingModeValue.dropdown,\n      ...initialProperties\n    };\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super\n      .getInspectorConfig()\n      .pipe(map((inspectorConfig: IViewDesignerInspectorConfig) => this.editInspectorConfig(inspectorConfig)));\n  }\n\n  private editInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): IViewDesignerInspectorConfig {\n    const valueControlIndex = findIndex(\n      inspectorConfig.inspectorSectionConfigs[0].controls,\n      (item) => item.name === 'value'\n    );\n\n    const editingModeControl = {\n      name: 'editingMode',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Editing mode',\n        required: false,\n        options: [\n          {\n            id: RX_SELECTION_FIELD.editingModeValue.dropdown,\n            name: RX_SELECTION_FIELD.editingMode.dropdown\n          },\n          {\n            id: RX_SELECTION_FIELD.editingModeValue.radioButtons,\n            name: RX_SELECTION_FIELD.editingMode.radioButtons\n          }\n        ]\n      } as ISelectFormControlOptions\n    };\n\n    if (valueControlIndex !== -1) {\n      inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { SelectionFieldComponent } from './runtime/selection-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { SelectionFieldDesignComponent } from './design';\nimport { SelectionFieldDesignModel } from './design/selection-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SelectionFieldModule } from './runtime/selection-field.module';\nimport { SelectionFieldDesignModule } from './design/selection-field-design.module';\n\n@NgModule({\n  imports: [SelectionFieldModule, SelectionFieldDesignModule]\n})\nexport class SelectionFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Selection,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Select',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_dropdown',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldDesignComponent),\n      designComponentModel: SelectionFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\nimport { ISelectGroupConfig } from './select-group.types';\n\n@Component({\n  selector: 'rx-select-group',\n  templateUrl: './select-group.component.html'\n})\nexport class SelectGroupComponent extends BaseViewComponent {\n  @Input()\n  config: Observable<ISelectGroupConfig>;\n\n  private fieldComponents: Map<number, SelectGroupFieldComponent> = new Map();\n\n  registerFieldComponent(fieldIndex: number, component: SelectGroupFieldComponent): void {\n    this.fieldComponents.set(fieldIndex, component);\n  }\n\n  getValueForPreviousField(currentFieldIndex: number): any {\n    const component = this.fieldComponents.get(currentFieldIndex - 1);\n\n    return component ? component.getFieldValue() : null;\n  }\n\n  resetValueForNextFields(currentFieldIndex: number): void {\n    const nextFieldIndex = currentFieldIndex + 1;\n    const component = this.fieldComponents.get(nextFieldIndex);\n\n    if (component) {\n      component.resetFieldValue();\n\n      this.resetValueForNextFields(nextFieldIndex);\n    }\n  }\n}\n","<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n","import { Component, Injector, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, startWith, take, takeUntil } from 'rxjs/operators';\nimport { find, get, isEmpty, isEqual, isNil } from 'lodash';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { INamedListDefinition, RxNamedListDefinitionService, RxNamedListService } from '@helix/platform/named-list/api';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { SelectGroupComponent } from './select-group.component';\n\n@Component({\n  selector: 'rx-select-group-field',\n  templateUrl: './select-group-field.component.html'\n})\nexport class SelectGroupFieldComponent extends BaseRecordEditorFieldComponent {\n  optionLoaderFunc = this.getNamedListOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n  showDefaultTitle: boolean;\n\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  private readOnlyValue: string;\n  private namedListDefinitionName: string;\n  private fieldIdToFilterBy: number;\n  private namedListDefinition: INamedListDefinition;\n  private fieldIndex: number;\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n\n  constructor(\n    injector: Injector,\n    private selectGroupComponent: SelectGroupComponent,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxNamedListService: RxNamedListService\n  ) {\n    super(injector);\n  }\n\n  onConfigInitialized(config): void {\n    super.onConfigInitialized(config);\n\n    this.fieldIndex = Number(config.index);\n    this.namedListDefinitionName = config.namedListDefinitionName;\n\n    this.selectGroupComponent.registerFieldComponent(this.fieldIndex, this);\n\n    const namedListDefinition$ = this.rxNamedListDefinitionService.get(this.namedListDefinitionName).pipe(take(1));\n\n    const valueChanges$ = this.formControl.valueChanges.pipe(\n      distinctUntilChanged(isEqual),\n      startWith(this.formControl.value as string),\n      takeUntil(this.destroyed$)\n    );\n\n    combineLatest([namedListDefinition$, valueChanges$]).subscribe(([namedListDefinition]) => {\n      this.namedListDefinition = namedListDefinition;\n      this.fieldIdToFilterBy = config.optionFilterFieldId || namedListDefinition.valueFieldId;\n\n      this.updateSelectedOption();\n\n      // do not reset value for next fields after record instance id change,\n      // in this case formControl is pristine and untouched\n      if (this.formControl.dirty) {\n        this.selectGroupComponent.resetValueForNextFields(this.fieldIndex);\n      } else {\n        this.resetLoadedOptions();\n      }\n    });\n  }\n\n  resetFieldValue(): void {\n    super.setFieldValue(null);\n    this.resetLoadedOptions();\n  }\n\n  getDisplayValue(): string {\n    return this.readOnlyValue;\n  }\n\n  private getNamedListOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery?: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    return this.rxNamedListService.getOptionPage(\n      this.namedListDefinition,\n      searchQuery,\n      this.getSelectionQueryCriteria(),\n      startIndex,\n      pageSize\n    );\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}] -> 'foo'\n  viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    return get(selectedOptions, '[0].value', '');\n  }\n\n  // 'foo' -> [{displayValue: 'FOO', value: 'foo'}]\n  modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return isNil(modelValue) ? [] : this.selectedOptions;\n  }\n\n  private updateSelectedOption(): void {\n    this.showDefaultTitle = false;\n\n    let namedListOptions$: Observable<IRxSelectWithPaginationOption[]>;\n\n    if (isEmpty(this.formControl.value)) {\n      namedListOptions$ = of([]);\n    } else {\n      // Select with pagination component is not available in the record editor READ mode.\n      const loadedOptions = get(this.selectWithPaginationComponent, 'options', []);\n      const namedListOptionCandidate = find(loadedOptions, { value: this.formControl.value });\n\n      namedListOptions$ = namedListOptionCandidate\n        ? of([namedListOptionCandidate])\n        : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, [this.formControl.value]);\n    }\n\n    namedListOptions$.pipe(take(1)).subscribe((options) => {\n      this.showDefaultTitle = true;\n      this.selectedOptions = options;\n\n      if (isEmpty(options) && this.formControl.value) {\n        // Selected option might be removed from the named list,\n        // in this case we have to show an empty display value.\n        this.selectedOptions = [\n          {\n            displayValue: null,\n            value: this.formControl.value\n          }\n        ];\n      }\n\n      if (this.formControl.dirty) {\n        this.formControl.markAsTouched();\n      }\n\n      this.triggerModelToViewValueUpdate();\n      this.updateReadOnlyValue();\n    });\n  }\n\n  private resetLoadedOptions(): void {\n    if (this.selectWithPaginationComponent) {\n      this.selectWithPaginationComponent.resetLoadedOptions();\n    }\n  }\n\n  private getSelectionQueryCriteria(): string {\n    let queryCriteria = null;\n\n    if (this.fieldIndex > 0) {\n      const previousFieldValue = this.selectGroupComponent.getValueForPreviousField(this.fieldIndex);\n\n      if (previousFieldValue) {\n        queryCriteria = `('${this.fieldIdToFilterBy}' = \"${previousFieldValue}\")`;\n      }\n    }\n\n    return queryCriteria;\n  }\n\n  private updateReadOnlyValue(): void {\n    this.readOnlyValue = get(this.selectedOptions, '[0].displayValue', null);\n  }\n\n  private triggerModelToViewValueUpdate(): void {\n    // trigger writeValue function in the control value accessor\n    this.formControl.setValue(this.formControl.value, { emitEvent: false });\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-select-with-pagination\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n  ></rx-select-with-pagination>\n</ng-template>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition, IViewDefinition, RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { assign, omit, sortBy } from 'lodash';\n\n@Injectable()\nexport class SelectGroupComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  adaptDefinition(componentDefinition) {\n    componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n      assign(childComponentDefinition.propertiesByName, {\n        disabled: componentDefinition.propertiesByName.disabled,\n        hidden: componentDefinition.propertiesByName.hidden,\n        index: Number(childComponentDefinition.propertiesByName.index)\n      });\n\n      delete childComponentDefinition.propertiesByName.labelId;\n    });\n\n    const layout = {\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [\n            {\n              children: sortBy(componentDefinition.componentDefinitions, 'propertiesByName.index').map(\n                (component) => component.guid\n              )\n            }\n          ]\n        }\n      ]\n    };\n\n    componentDefinition.propertiesByName = omit(componentDefinition.propertiesByName, [\n      'disabled',\n      'hidden',\n      'recordInstance',\n      'recordDefinition'\n    ]);\n\n    componentDefinition.layout = JSON.stringify(layout);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { SelectGroupComponentDefinitionAdapterService } from './select-group-component-definition-adapter.service';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\nimport { SelectGroupComponent } from './select-group.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RuntimeViewCanvasModule,\n    ReactiveFormsModule,\n    RxSelectWithPaginationModule,\n    ReadOnlyFieldModule\n  ],\n  declarations: [SelectGroupComponent, SelectGroupFieldComponent],\n  providers: [SelectGroupComponentDefinitionAdapterService],\n  entryComponents: [SelectGroupComponent, SelectGroupFieldComponent]\n})\nexport class SelectGroupModule {\n  constructor(\n    private viewComponentDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private selectGroupComponentDefinitionAdapterService: SelectGroupComponentDefinitionAdapterService\n  ) {\n    viewComponentDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.SelectGroup,\n      this.selectGroupComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { SelectGroupDesignModel } from './select-group-design.model';\n\n@Component({\n  selector: 'rx-select-group-design',\n  templateUrl: './select-group-design.component.html'\n})\nexport class SelectGroupDesignComponent {\n  @Input()\n  model: SelectGroupDesignModel;\n\n  trackByFn(index, item) {\n    return item.data.guid;\n  }\n}\n","<ng-template [ngIf]=\"(model.fieldsDesignData$ | async).length\" [ngIfElse]=\"placeholderTemplate\">\n  <adapt-rx-textfield\n    *ngFor=\"let field of model.fieldsDesignData$ | async; trackBy: trackByFn\"\n    [label]=\"field.data.label || '<No Label>'\"\n    [required]=\"model.isFieldRequired(field) | async\"\n    [disabled]=\"true\"\n    ngModel\n    rx-id=\"select-group-field\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n</ng-template>\n\n<ng-template #placeholderTemplate>\n  <adapt-empty-state type=\"objects\" label=\"Add dependent fields in the Properties panel.\"></adapt-empty-state>\n</ng-template>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { INamedListDefinition, RxNamedListDefinitionCacheService } from '@helix/platform/named-list/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IDefinitionPickerComponentOptions, RxDefinitionPickerType } from '@helix/platform/shared/components';\nimport { head, isEmpty } from 'lodash';\nimport { of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-select-group-field',\n  templateUrl: './select-group-field.component.html'\n})\nexport class SelectGroupFieldComponent implements OnInit {\n  @Input()\n  fieldformGroup: AbstractControl;\n\n  @Input()\n  index: number;\n\n  @Input()\n  targetFieldOptions: RxSelectOption[];\n\n  definitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: 'Named list for options',\n    definitionType: RxDefinitionPickerType.NamedList,\n    required: true\n  };\n\n  filterField: RxSelectOption[] = [];\n  filterFieldIdOptions: RxSelectOption[] = [];\n  sourceRecordDefinitionDisplayName = '';\n  fieldId: RxSelectOption[] = [];\n\n  constructor(\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxNamedListDefinitionCacheService: RxNamedListDefinitionCacheService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService\n  ) {}\n\n  ngOnInit(): void {\n    this.onNamedListDefinitionNameChange(false);\n  }\n\n  onNamedListDefinitionNameChange(emitEvent: boolean = true): void {\n    of(this.fieldformGroup.get('namedListDefinitionName').value)\n      .pipe(\n        switchMap((namedListDefinitionName) => {\n          if (namedListDefinitionName) {\n            return this.rxNamedListDefinitionCacheService\n              .getNamedListDefinition(namedListDefinitionName)\n              .pipe(map((namedListDefinition: INamedListDefinition) => namedListDefinition.recordDefinitionName));\n          } else {\n            return of(null);\n          }\n        }),\n        take(1)\n      )\n      .subscribe((sourceRecordDefinitionName) => {\n        this.fieldformGroup.get('sourceRecordDefinitionName').setValue(sourceRecordDefinitionName, { emitEvent });\n\n        this.filterFieldIdOptions = [];\n\n        this.setFilterId();\n\n        if (this.index > 0) {\n          this.setOptionFilterFieldIdOptions();\n          this.setSourceRecordDefinitionDisplayName();\n        }\n      });\n  }\n\n  setFilterId(): void {\n    const fieldId = this.fieldformGroup.get('fieldId').value;\n\n    this.fieldId = isEmpty(fieldId) ? [] : [this.targetFieldOptions.find((option) => option.id === fieldId)];\n  }\n\n  setSourceRecordDefinitionDisplayName(): void {\n    const recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;\n\n    this.sourceRecordDefinitionDisplayName =\n      recordDefinitionName && this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n  }\n\n  setOptionFilterFieldIdOptions(): void {\n    const recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;\n\n    this.filterField = [];\n\n    if (recordDefinitionName) {\n      this.rxRecordDefinitionCacheService\n        .getRecordDefinition(recordDefinitionName)\n        .pipe(\n          map((recordDefinition: IRecordDefinition) => {\n            return recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n              name: fieldDefinition.name,\n              id: String(fieldDefinition.id)\n            }));\n          })\n        )\n        .subscribe((fieldIdOptions: RxSelectOption[]) => {\n          const filterFieldId = this.fieldformGroup.get('optionFilterFieldId').value;\n\n          this.filterFieldIdOptions = fieldIdOptions;\n\n          this.filterField = isEmpty(filterFieldId)\n            ? []\n            : [this.filterFieldIdOptions.find((option) => option.id === filterFieldId)];\n        });\n    }\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  onSelectFilterField(filterField: RxSelectOption[]): void {\n    this.fieldformGroup.get('optionFilterFieldId').setValue(head(filterField).id);\n  }\n\n  onSelectField(field: RxSelectOption[]): void {\n    this.fieldformGroup.get('fieldId').setValue(head(field).id);\n  }\n}\n","<div>\n  <adapt-rx-textfield\n    label=\"Display label\"\n    required=\"true\"\n    rx-id=\"display-label-field\"\n    [formControl]=\"fieldformGroup.get('label')\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n\n  <rx-definition-picker\n    [options]=\"definitionPickerOptions\"\n    [formControl]=\"fieldformGroup.get('namedListDefinitionName')\"\n    (ngModelChange)=\"onNamedListDefinitionNameChange()\"\n    required=\"true\"\n    rx-id=\"named-list-definition-name-field\"\n    class=\"form-group d-block\"\n  ></rx-definition-picker>\n\n  <adapt-rx-select\n    label=\"Field for storing selected option value\"\n    rx-id=\"selected-option-value-target-field\"\n    [ngModel]=\"fieldId\"\n    (ngModelChange)=\"onSelectField($event)\"\n    [options]=\"targetFieldOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [required]=\"true\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [ngClass]=\"{ 'form-group d-block': index > 0 }\"\n  ></adapt-rx-select>\n\n  <adapt-rx-textfield\n    label=\"Source record definition\"\n    *ngIf=\"index > 0\"\n    class=\"form-group d-block\"\n    [ngModel]=\"sourceRecordDefinitionDisplayName\"\n    disabled\n    rx-id=\"source-record-definition-name-field\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'This is the record definition that provides the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-textfield>\n\n  <adapt-rx-select\n    *ngIf=\"index > 0\"\n    label=\"Field for filtering option values\"\n    rx-id=\"option-values-filter-field\"\n    [ngModel]=\"filterField\"\n    (ngModelChange)=\"onSelectFilterField($event)\"\n    [options]=\"filterFieldIdOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'Select the field in the source record definition that filters the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-select>\n</div>\n","import { Component, Injector, Input, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { IFormWidgetComponent } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { omit } from 'lodash';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectGroupFieldProperties, ISelectGroupFormControlOptions } from './select-group-design.types';\nimport { SelectGroupDesignModel } from './select-group-design.model';\n\ninterface IFieldFormGroup extends ISelectGroupFieldProperties {\n  optionFilterFieldId: string;\n  sourceRecordDefinitionName: string;\n}\n\n@Component({\n  selector: 'rx-field-set-form-control',\n  templateUrl: './field-set-form-control.component.html',\n  styleUrls: ['./field-set-form-control.component.scss']\n})\nexport class FieldSetFormControlComponent\n  extends InspectorWidgetBase<ISelectGroupFormControlOptions, SelectGroupDesignModel>\n  implements OnDestroy, OnInit, IFormWidgetComponent\n{\n  @Input()\n  options: ISelectGroupFormControlOptions;\n\n  @Input()\n  isDisabled: boolean;\n\n  formArray = this.formBuilder.array([]);\n  valueChangeSubscription: Subscription;\n\n  private maxSelectGroupFieldCount = 6;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxGuidService: RxGuidService,\n    private rxModalService: RxModalService,\n    injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.fieldProperties$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((fieldModels) => this.onWriteValue(fieldModels));\n\n    this.setDisabledState(this.isDisabled);\n  }\n\n  onWriteValue(fieldModels: ISelectGroupFieldProperties[]): void {\n    this.valueChangeSubscription?.unsubscribe();\n\n    const formGroups = fieldModels\n      .sort((a, b) => Number(a.index) - Number(b.index))\n      .map((model) =>\n        this.formBuilder.group({\n          ...omit(model, 'index'),\n          sourceRecordDefinitionName: { value: null, disabled: true }\n        })\n      );\n\n    this.formArray = this.formBuilder.array(formGroups);\n\n    this.valueChangeSubscription = this.formArray.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(this.onFormValueChange.bind(this));\n  }\n\n  private onFormValueChange(formValue: IFieldFormGroup[]): void {\n    const value = formValue.map((formGroup, index) => {\n      const inspectorFieldModel: ISelectGroupFieldProperties = {\n        ...omit(formGroup, ['sourceRecordDefinitionName', 'optionFilterFieldId']),\n        index: String(index),\n        fieldId: formGroup.namedListDefinitionName ? formGroup.fieldId : null\n      };\n\n      if (index > 0) {\n        inspectorFieldModel.optionFilterFieldId = formGroup.namedListDefinitionName\n          ? formGroup.optionFilterFieldId\n          : null;\n      }\n\n      return inspectorFieldModel;\n    });\n\n    this.designerItemModel.onFieldPropertiesChange(value);\n  }\n\n  addField(): void {\n    this.formArray.push(this.getFieldFormGroup());\n  }\n\n  removeField(index: number): void {\n    this.rxModalService\n      .confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'Are you sure you want to delete this field?'\n      })\n      .then((response) => {\n        if (response) {\n          this.formArray.removeAt(index);\n        }\n      });\n  }\n\n  isAddFieldButtonDisabled(): boolean {\n    return this.isDisabled || this.formArray.length >= this.maxSelectGroupFieldCount;\n  }\n\n  trackByFn(index: number, control: AbstractControl): string {\n    return control.get('guid').value;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getFieldFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      guid: this.rxGuidService.generate(),\n      label: null,\n      namedListDefinitionName: null,\n      fieldId: null,\n      sourceRecordDefinitionName: null,\n      optionFilterFieldId: null\n    });\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n}\n","<adapt-button\n  btn-type=\"tertiary\"\n  rx-id=\"add-field-button\"\n  class=\"d-icon-plus_circle px-0 py-0\"\n  (click)=\"addField()\"\n  [disabled]=\"isAddFieldButtonDisabled()\"\n>\n  Add dependent field\n</adapt-button>\n\n<div\n  class=\"card mt-2\"\n  *ngFor=\"let formGroupControl of formArray.controls; trackBy: trackByFn; let index = index\"\n  rx-id=\"select-group-field-card\"\n>\n  <div class=\"card-block p-2\">\n    <button\n      (click)=\"removeField(index)\"\n      class=\"close position-relative\"\n      type=\"button\"\n      aria-label=\"Remove\"\n      rx-id=\"remove-field-button\"\n      *ngIf=\"!isDisabled\"\n    ></button>\n\n    <rx-select-group-field\n      [fieldformGroup]=\"formGroupControl\"\n      [index]=\"index\"\n      [targetFieldOptions]=\"options.targetFieldOptions\"\n    ></rx-select-group-field>\n  </div>\n</div>\n","import {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { IValidationFormControlOptions, ValidationFormControlComponent } from '@helix/platform/shared/components';\nimport { Injector } from '@angular/core';\nimport { catchError, distinctUntilChanged, map, shareReplay, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { filter as _filter, find, flow, isEmpty, map as _map, omit, pick, reject, sortBy, uniqBy } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { FieldSetFormControlComponent } from './field-set-form-control.component';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ISelectGroupFieldProperties,\n  ISelectGroupFormControlOptions,\n  ISelectGroupProperties\n} from './select-group-design.types';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\n\nexport class SelectGroupDesignModel extends ViewDesignerComponentModel {\n  rxRecordDefinitionCacheService = this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n  rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  recordEditorGuid$ = this.sandbox\n    .getParentComponentGuid(RxViewComponentType.RecordEditor)\n    .pipe(take(1), shareReplay(1));\n\n  recordEditorMode$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n    })\n  );\n\n  recordDefinitionName$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n        'recordDefinitionName',\n        recordEditorGuid\n      );\n    }),\n    shareReplay(1)\n  );\n\n  fieldDefinitions$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName: string) => {\n      if (recordDefinitionName) {\n        return this.rxRecordDefinitionCacheService\n          .getRecordDefinition(recordDefinitionName)\n          .pipe(catchError((error) => EMPTY));\n      } else {\n        return of(null);\n      }\n    }),\n    distinctUntilChanged(),\n    map<IRecordDefinition, IFieldDefinition[]>((recordDefinition: IRecordDefinition) => {\n      if (recordDefinition && recordDefinition.fieldDefinitions) {\n        return _filter(recordDefinition.fieldDefinitions, {\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        });\n      } else {\n        return [];\n      }\n    }),\n    shareReplay(1)\n  );\n\n  inspectorTargetFieldOptions$ = combineLatest([this.fieldDefinitions$, this.recordEditorMode$]).pipe(\n    map(([fieldDefinitions, recordEditorMode]) => [\n      _filter(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.character }),\n      recordEditorMode\n    ]),\n    map<[IFieldDefinition[], RecordEditorMode], RxSelectOption[]>(([characterFieldDefinitions, recordEditorMode]) =>\n      flow(\n        (fieldDefinitions) =>\n          _filter(fieldDefinitions, (definition) => {\n            const isSystemField = this.rxFieldDefinitionService.isSystemField(definition);\n\n            return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n          }),\n        (fieldDefinitions) =>\n          _map(fieldDefinitions, (definition) => ({\n            name: definition.name,\n            id: String(definition.id)\n          })),\n        (options) => sortBy(options, 'name')\n      )(characterFieldDefinitions)\n    ),\n    shareReplay(1)\n  );\n\n  fieldsDesignData$ = this.sandbox.getChildComponents<ISelectGroupFieldProperties>();\n\n  fieldProperties$: Observable<ISelectGroupFieldProperties[]> = this.fieldsDesignData$.pipe(\n    map((fieldComponentsDesignData) =>\n      _map(fieldComponentsDesignData, (field) => ({\n        ...field.data,\n        guid: field.guid\n      }))\n    )\n  );\n\n  static getInitialProperties(initialProperties?: ISelectGroupProperties): ISelectGroupProperties {\n    return {\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, protected sandbox: IViewComponentDesignSandbox<ISelectGroupProperties>) {\n    super(injector, sandbox);\n\n    // initial inspector configuration and component properties set\n    combineLatest([this.recordDefinitionName$, this.inspectorTargetFieldOptions$, this.recordEditorGuid$])\n      .pipe(take(1))\n      .subscribe(([recordDefinitionName, inspectorTargetFieldOptions, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    this.inspectorTargetFieldOptions$\n      .pipe(withLatestFrom(this.recordDefinitionName$, this.recordEditorGuid$))\n      .subscribe(([inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    combineLatest([this.sandbox.componentProperties$, this.fieldProperties$])\n      .pipe(switchMap(([componentProperties, fieldProperties]) => this.validate(componentProperties, fieldProperties)))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  onFieldPropertiesChange(fieldProperties: ISelectGroupFieldProperties[]): void {\n    const fieldComponentPayloads = this.getFieldComponentPayloads(fieldProperties);\n\n    this.sandbox.setChildren(fieldComponentPayloads);\n  }\n\n  isFieldRequired(field: IViewComponentDesignData<ISelectGroupFieldProperties>): Observable<boolean> {\n    return this.fieldDefinitions$.pipe(\n      map((fieldDefinitions) => {\n        const fieldDefinition = field.data.fieldId && find(fieldDefinitions, { id: Number(field.data.fieldId) });\n\n        return Boolean(fieldDefinition) && fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n      })\n    );\n  }\n\n  getPropertiesByName(properties) {\n    return pick(properties, ['disabled', 'hidden', 'styles', RX_AVAILABLE_ON_DEVICES_PROP_NAME]);\n  }\n\n  private validate(\n    componentProperties: ISelectGroupProperties,\n    fieldProperties: ISelectGroupFieldProperties[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationErrorMessages: string[] = [];\n\n    if (isEmpty(fieldProperties)) {\n      validationErrorMessages.push('Field set cannot be empty.');\n    } else {\n      const fieldsWithLabel = _filter(fieldProperties, (model) => model.label);\n\n      if (fieldsWithLabel.length !== fieldProperties.length) {\n        validationErrorMessages.push('Display label cannot be blank.');\n      }\n\n      if (uniqBy(fieldsWithLabel, 'label').length !== fieldsWithLabel.length) {\n        validationErrorMessages.push('Display labels must be unique.');\n      }\n\n      if (reject(fieldProperties, (model) => model.namedListDefinitionName).length) {\n        validationErrorMessages.push('Named list for options cannot be blank.');\n      }\n\n      if (reject(fieldProperties, (model) => model.fieldId).length) {\n        validationErrorMessages.push('Field for storing selected option value cannot be blank.');\n      }\n    }\n\n    const validationIssues = validationErrorMessages\n      .map((message) => this.sandbox.createError(message))\n      .concat(validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  private getFieldComponentPayloads(fieldProperties: ISelectGroupFieldProperties[]): IViewComponentDesignSetPayload[] {\n    return _map(fieldProperties, (model) => ({\n      type: RxViewComponentType.SelectGroupField,\n      guid: model.guid,\n      data: omit(model, 'guid')\n    }));\n  }\n\n  private getBaseInspectorConfig(\n    targetFieldOptions: RxSelectOption[],\n    recordDefinitionName: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const generalGroup = {\n      label: 'General',\n      controls: []\n    };\n\n    if (recordDefinitionName) {\n      generalGroup.controls = [getDisabledFieldInspectorConfig(), ...getStandardPropsInspectorConfigs()];\n    } else {\n      generalGroup.controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            propertyName: 'recordDefinitionName',\n            componentGuid: recordEditorGuid\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: recordDefinitionName\n        ? [\n            generalGroup,\n            {\n              label: 'Field set',\n              controls: [\n                {\n                  component: FieldSetFormControlComponent,\n                  options: {\n                    targetFieldOptions: targetFieldOptions\n                  } as ISelectGroupFormControlOptions\n                }\n              ]\n            }\n          ]\n        : [generalGroup]\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SelectGroupDesignComponent } from './select-group-design.component';\nimport { FieldSetFormControlComponent } from './field-set-form-control.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport {\n  AdaptButtonModule,\n  AdaptRxSelectModule,\n  AdaptRxTextfieldModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\n\n@NgModule({\n  declarations: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],\n  imports: [\n    FormsModule,\n    CommonModule,\n    AdaptButtonModule,\n    ReactiveFormsModule,\n    RxDefinitionPickerModule,\n    AdaptRxTextfieldModule,\n    AdaptRxSelectModule,\n    AdaptEmptyStateModule\n  ],\n  exports: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],\n  entryComponents: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent]\n})\nexport class SelectGroupDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { SelectGroupComponent } from './runtime/select-group.component';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { SelectGroupFieldComponent } from './runtime/select-group-field.component';\nimport { SelectGroupDesignComponent } from './design/select-group-design.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { SelectGroupDesignModel } from './design/select-group-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SelectGroupModule } from './runtime/select-group.module';\nimport { SelectGroupDesignModule } from './design/select-group-design.module';\n\n@NgModule({\n  imports: [SelectGroupModule, SelectGroupDesignModule]\n})\nexport class SelectGroupRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.SelectGroup,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupComponent),\n        properties: [RX_AVAILABLE_ON_DEVICES_PROP_DESC],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Select group',\n        designComponentFactory: componentFactoryResolver.resolveComponentFactory(SelectGroupDesignComponent),\n        designComponentModel: SelectGroupDesignModel,\n        isContainerComponent: true,\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'field_dropdowns',\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.SelectGroupField,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupFieldComponent),\n        properties: RX_BASE_FIELD_PROPERTIES,\n\n        isDataComponent: true\n      }\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { TextFieldDesignModel } from './text-field-design.model';\n\n@Component({\n  selector: 'rx-character-field-design',\n  templateUrl: 'text-field-design.component.html'\n})\nexport class TextFieldDesignComponent {\n  @Input()\n  model: TextFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { TextFieldDesignComponent } from './text-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [TextFieldDesignComponent],\n  entryComponents: [TextFieldDesignComponent]\n})\nexport class TextFieldDesignModule {}\n","import { Injector } from '@angular/core';\nimport { TextFieldDesignModel } from './text-field-design.model';\nimport {\n  NamedListFilterExpressionConfigurator,\n  RxViewComponentExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { ExpressionOperatorGroup, ExpressionOperatorRowsByGroup } from '@helix/platform/shared/api';\n\nexport class TextFieldExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: TextFieldDesignModel\n  ) {\n    super(injector, componentGuid, componentModel);\n\n    const dataDictionary$ = this.componentModel.selectedFieldDefinition$.pipe(\n      filter((fieldDefinition) => Boolean(fieldDefinition.namedListDefinition)),\n      switchMap((fieldDefinition) => {\n        const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n          fieldDefinition,\n          this.injector\n        );\n\n        return namedListFilterExpressionConfigurator.getDataDictionary();\n      })\n    );\n\n    this.configureForProperty({\n      propertyPath: 'additionalQueryCriteria',\n      dataDictionary$,\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllServer)\n    });\n  }\n}\n","export enum TextFieldMultiSelectionType {\n  Enabled = 'true',\n  Disabled = 'false'\n}\n","import { Component, Injector, ViewChild } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { compact, find, first, get, includes, isEqual, isNil } from 'lodash';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { TextFieldMultiSelectionType } from './text-field.types';\nimport { INamedListDefinition, RxNamedListDefinitionService, RxNamedListService } from '@helix/platform/named-list/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  startWith,\n  take,\n  takeUntil\n} from 'rxjs/operators';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { IRxTextFieldConfig } from './text-field-config.interface';\n\n@Component({\n  selector: 'rx-text-field',\n  templateUrl: './text-field.component.html'\n})\nexport class TextFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  isPasswordField: boolean;\n  isNamedListAttached: boolean;\n  isMultipleSelectionEnabled: boolean;\n  maxLength: number;\n  showDefaultTitle: boolean;\n\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  optionLoaderFunc = this.getNamedListOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n\n  private displayValue: string;\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n  private namedListDefinition: INamedListDefinition;\n  private namedListDefinitionName: string;\n  private namedListFormattedValue: string;\n  private multiSelectDelimiter = ';';\n  private isDropdownOpen = false;\n  private additionalQueryCriteria: string;\n\n  constructor(\n    injector: Injector,\n    private fieldDefinitionService: RxFieldDefinitionService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxNamedListService: RxNamedListService\n  ) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IRxTextFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.isPasswordField =\n      includes(RX_RECORD_DEFINITION.passwordFieldIds, this.fieldId) || this.fieldDefinition.shouldPersistHashed;\n\n    this.namedListDefinitionName = this.fieldDefinition.namedListDefinition;\n    this.isNamedListAttached = Boolean(this.namedListDefinitionName);\n    this.isMultipleSelectionEnabled = config.enableMultiSelection === TextFieldMultiSelectionType.Enabled;\n\n    if (this.fieldDefinition.maxLength && !this.fieldDefinitionService.isSystemField(this.fieldDefinition)) {\n      this.maxLength = this.fieldDefinition.maxLength;\n    }\n\n    if (this.isNamedListAttached) {\n      const namedListDefinition$ = this.rxNamedListDefinitionService\n        .get(this.namedListDefinitionName)\n        .pipe(shareReplay(1), take(1));\n\n      const valueChanges$ = this.formControl.valueChanges.pipe(\n        distinctUntilChanged(isEqual),\n        startWith(this.formControl.value as string),\n        filter(() => !this.isDropdownOpen),\n        takeUntil(this.destroyed$)\n      );\n\n      this.config\n        .pipe(debounceTime(250), pluck('additionalQueryCriteria'), distinctUntilChanged(), takeUntil(this.destroyed$))\n        .subscribe((additionalQueryCriteria: string) => {\n          if (!isNil(this.additionalQueryCriteria)) {\n            this.selectWithPaginationComponent.resetLoadedOptions();\n            this.setFieldValue(null);\n          }\n\n          this.additionalQueryCriteria = additionalQueryCriteria;\n        });\n\n      combineLatest([namedListDefinition$, valueChanges$]).subscribe(([namedListDefinition]) => {\n        this.namedListDefinition = namedListDefinition;\n\n        this.updateSelection();\n      });\n    }\n  }\n\n  getDisplayValue(): string {\n    let displayValue = super.getDisplayValue();\n\n    if (this.isPasswordField) {\n      displayValue = '********';\n    } else if (this.isNamedListAttached) {\n      displayValue = this.namedListFormattedValue;\n    }\n\n    return displayValue;\n  }\n\n  getNamedListOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery?: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    return this.rxNamedListService.getOptionPage(\n      this.namedListDefinition,\n      searchQuery,\n      this.additionalQueryCriteria,\n      startIndex,\n      pageSize\n    );\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar'\n  viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    this.selectedOptions = selectedOptions;\n\n    this.updateNamedListFormattedValue();\n\n    return selectedOptions.map((option) => option.value).join(this.multiSelectDelimiter);\n  }\n\n  // 'foo;bar' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]\n  modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return modelValue ? this.selectedOptions : [];\n  }\n\n  onToggleDropdown(isOpen: boolean): void {\n    this.isDropdownOpen = isOpen;\n  }\n\n  private getOptionValues(modelValue: string): string[] {\n    return modelValue ? compact(modelValue.split(this.multiSelectDelimiter)) : [];\n  }\n\n  // Update selection by form control value.\n  // Usually, this needs to be done when form control value changes programmatically, e.g:\n  // - in initialization text field component phase\n  // - by set property action\n  // - after record editor record instance id change\n  private updateSelection(): void {\n    this.showDefaultTitle = false;\n\n    const selectedOptionValues = this.getOptionValues(this.formControl.value);\n\n    if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n      // If the field instance contains multiple values but the component doesn't have multiple selection enabled\n      // e.g. when field was edited in the data editor, the display value will be blank (null).\n      this.selectedOptions = [\n        {\n          displayValue: null,\n          value: this.formControl.value\n        }\n      ];\n\n      this.triggerModelToViewValueUpdate();\n      this.updateNamedListFormattedValue();\n    } else {\n      // Select with pagination component is not available in the record editor READ mode.\n      const loadedOptions = get(this.selectWithPaginationComponent, 'options', []);\n      // Check if all options for selected values are already loaded.\n      (selectedOptionValues.every((selectedValue) => loadedOptions.find((option) => option.value === selectedValue))\n        ? of(loadedOptions)\n        : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, selectedOptionValues)\n      ).subscribe((options) => {\n        this.showDefaultTitle = true;\n\n        if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n          // If the field instance contains multiple values but the component doesn't have multiple selection\n          // enabled e.g. when field was edited in the data editor, the display value will be blank (null).\n          this.selectedOptions = [\n            {\n              displayValue: null,\n              value: this.formControl.value\n            }\n          ];\n        } else {\n          // If the record instance with a given value is not found e.g. referenced record\n          // was deleted, the display value for such record instance will be blank (null).\n          this.selectedOptions = selectedOptionValues.map(\n            (optionValue) =>\n              find(options, { value: optionValue }) || {\n                displayValue: null,\n                value: optionValue\n              }\n          );\n        }\n\n        if (this.formControl.dirty) {\n          this.formControl.markAsTouched();\n        }\n\n        this.triggerModelToViewValueUpdate();\n        this.updateNamedListFormattedValue();\n      });\n    }\n  }\n\n  private updateNamedListFormattedValue(): void {\n    if (this.isMultipleSelectionEnabled) {\n      const visibleOptionsCount = 50;\n\n      this.namedListFormattedValue =\n        this.selectedOptions\n          .slice(0, visibleOptionsCount)\n          .map((option) => option.displayValue)\n          .filter(Boolean)\n          .join(', ') || null;\n\n      if (this.selectedOptions.length >= visibleOptionsCount) {\n        this.namedListFormattedValue += '...';\n      }\n    } else {\n      this.namedListFormattedValue = this.selectedOptions.length ? first(this.selectedOptions).displayValue : null;\n    }\n  }\n\n  private triggerModelToViewValueUpdate(): void {\n    // trigger writeValue function in the control value accessor\n    this.formControl.setValue(this.formControl.value, { emitEvent: false });\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textfield\n    *ngIf=\"!isNamedListAttached\"\n    [label]=\"label\"\n    [isPassword]=\"isPasswordField\"\n    [formControl]=\"formControl\"\n    [maxlength]=\"maxLength\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [autocomplete]=\"!isPasswordField\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-textfield>\n\n  <rx-select-with-pagination\n    *ngIf=\"isNamedListAttached\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [required]=\"isRequired\"\n    [isMultiSelectionMode]=\"isMultipleSelectionEnabled\"\n    (toggleDropdown)=\"onToggleDropdown($event)\"\n    [template]=\"namedListOptionTemplate\"\n  ></rx-select-with-pagination>\n</ng-template>\n\n<ng-template #namedListOptionTemplate let-option>\n  {{ option.displayValue }}\n  <div *ngIf=\"option.contextualFields\" class=\"text-secondary text-truncate\" [title]=\"option.title\">\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of option.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TextFieldComponent } from './text-field.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    RxSelectWithPaginationModule,\n    AdaptRxTextfieldModule\n  ],\n  declarations: [TextFieldComponent],\n  exports: [TextFieldComponent],\n  entryComponents: [TextFieldComponent]\n})\nexport class TextFieldModule {}\n","import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { IFieldDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISwitcherFormControlOptions,\n  RxDefinitionPickerComponent,\n  RX_DEFINITION_PICKER,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  NamedListFilterExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\nimport { ITextFieldProperties } from './text-field-design.types';\nimport { omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class TextFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(initialProperties?: ITextFieldProperties): ITextFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      enableMultiSelection: null,\n      additionalQueryCriteria: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<ITextFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return this.selectedFieldDefinition$.pipe(\n      switchMap((fieldDefinition) =>\n        super\n          .getInspectorConfig()\n          .pipe(\n            map((inspectorConfig) =>\n              fieldDefinition?.namedListDefinition\n                ? this.getNamedListInspectorConfig(inspectorConfig, fieldDefinition)\n                : inspectorConfig\n            )\n          )\n      )\n    );\n  }\n\n  private getNamedListInspectorConfig(\n    inspectorConfig: IViewDesignerInspectorConfig,\n    fieldDefinition: IFieldDefinition\n  ): IViewDesignerInspectorConfig {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      fieldDefinition,\n      this.injector\n    );\n\n    const enableMultiSelectionControl = {\n      name: 'enableMultiSelection',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Enable multi-selection'\n      } as ISwitcherFormControlOptions\n    };\n\n    const additionalQueryCriteriaControls = [\n      {\n        name: 'namedListDefinitionName',\n        component: RxDefinitionPickerComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.named-list.label'),\n          definitionType: RX_DEFINITION_PICKER.definitionTypes.namedList.type\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'additionalQueryCriteria',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Additional named list filter',\n          tooltip: new Tooltip(\n            'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n          ),\n          dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n          operators: namedListFilterExpressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      }\n    ];\n\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(enableMultiSelectionControl);\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(...additionalQueryCriteriaControls);\n\n    // update the named list name for named list inspector control\n    this.sandbox.updateComponentProperties({ namedListDefinitionName: fieldDefinition.namedListDefinition });\n\n    return inspectorConfig;\n  }\n\n  getPropertiesByName(properties: ITextFieldProperties): ITextFieldProperties {\n    return omit(super.getPropertiesByName(properties) as ITextFieldProperties, 'namedListDefinitionName');\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\n\nimport {\n  RxRecordQueryExpressionEvaluatorService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TextFieldComponent } from './runtime/text-field.component';\nimport { TextFieldDesignComponent, TextFieldExpressionConfigurator } from './design';\nimport { TextFieldDesignModel } from './design/text-field-design.model';\nimport { TextFieldModule } from './runtime/text-field.module';\nimport { TextFieldDesignModule } from './design/text-field-design.module';\n\n@NgModule({\n  imports: [TextFieldModule, TextFieldDesignModule]\n})\nexport class TextFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxRecordQueryExpressionEvaluatorService: RxRecordQueryExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Character,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldComponent),\n      properties: [\n        ...RX_BASE_FIELD_PROPERTIES,\n        {\n          name: 'enableMultiSelection',\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'namedListDefinitionName',\n          designType: ViewComponentPropertyType.String\n        },\n        {\n          name: 'additionalQueryCriteria',\n          designType: ViewComponentPropertyType.String,\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxRecordQueryExpressionEvaluatorService\n        }\n      ],\n      name: 'Text',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldDesignComponent),\n      designComponentModel: TextFieldDesignModel,\n      expressionConfigurator: TextFieldExpressionConfigurator,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { TextareaFieldDesignModel } from './textarea-field-design.model';\n\n@Component({\n  selector: 'rx-textarea-field-design',\n  templateUrl: './textarea-field-design.component.html'\n})\nexport class TextareaFieldDesignComponent {\n  @Input()\n  model: TextareaFieldDesignModel;\n}\n","<adapt-rx-textarea\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n  rows=\"3\"\n></adapt-rx-textarea>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TextareaFieldDesignComponent } from './textarea-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextareaModule, FormsModule],\n  declarations: [TextareaFieldDesignComponent],\n  entryComponents: [TextareaFieldDesignComponent]\n})\nexport class TextareaFieldDesignModule {}\n","import { Component, Injector } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { RxFieldDefinitionService } from '@helix/platform/record/api';\n\n@Component({\n  selector: 'rx-textarea-field',\n  templateUrl: './textarea-field.component.html',\n  styleUrls: ['./textarea-field.component.scss']\n})\nexport class TextareaFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  maxLength: number;\n\n  constructor(injector: Injector, private rxFieldDefinitionService: RxFieldDefinitionService) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    if (this.fieldDefinition.maxLength && !this.rxFieldDefinitionService.isSystemField(this.fieldDefinition)) {\n      this.maxLength = this.fieldDefinition.maxLength;\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textarea\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [maxlength]=\"maxLength\"\n    [rows]=\"3\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [label]=\"label\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  >\n  </adapt-rx-textarea>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TextareaFieldComponent } from './textarea-field.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, ReadOnlyFieldModule, TranslateModule, AdaptRxTextareaModule],\n  declarations: [TextareaFieldComponent],\n  entryComponents: [TextareaFieldComponent]\n})\nexport class TextareaFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class TextareaFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { TextareaFieldComponent } from './runtime/textarea-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TextareaFieldDesignComponent } from './design';\nimport { TextareaFieldDesignModel } from './design/textarea-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TextareaFieldModule } from './runtime/textarea-field.module';\nimport { TextareaFieldDesignModule } from './design/textarea-field-design.module';\n\n@NgModule({\n  imports: [TextareaFieldModule, TextareaFieldDesignModule]\n})\nexport class TextareaFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Textarea,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Textarea',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'area_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldDesignComponent),\n      designComponentModel: TextareaFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { TimeFieldDesignModel } from './time-field-design.model';\nimport { RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-time-field-design',\n  templateUrl: './time-field-design.component.html'\n})\nexport class TimeFieldDesignComponent {\n  @Input()\n  model: TimeFieldDesignModel;\n\n  timeValue: Date;\n  pickerMode = RxDatetimePickerMode.Time;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [(ngModel)]=\"timeValue\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { TimeFieldDesignComponent } from './time-field-design.component';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [TimeFieldDesignComponent],\n  entryComponents: [TimeFieldDesignComponent]\n})\nexport class TimeFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { cloneDeep, isString } from 'lodash';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class TimeAdapter extends AdaptRxDatetimeAdapter<string> {\n  private storeTimeFormat = 'HH:mm:ss';\n\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString, 'LTS');\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment({\n            hour: date.hours || 0,\n            minute: date.minutes || 0,\n            seconds: date.seconds || 0\n          }).format(this.storeTimeFormat)\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport moment from 'moment-es6';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { TimeAdapter } from './time-adapter.class';\nimport { AbstractControl, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\n\n@Component({\n  selector: 'rx-time-field',\n  templateUrl: './time-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: TimeAdapter }]\n})\nexport class TimeFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  pickerMode = RxDatetimePickerMode.Time;\n\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue: string = super.getDisplayValue();\n\n    if (!displayValue) {\n      return '-';\n    } else {\n      const readOnlyTimeValue = moment(displayValue, 'LTS').toDate();\n\n      return this.datePipe.transform(readOnlyTimeValue, 'mediumTime') ?? '-';\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors | null => {\n      const date = control.value ? moment(control.value, 'LTS') : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: this.pickerMode, hasSeconds: true } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TimeFieldComponent } from './time-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, ReadOnlyFieldModule, TranslateModule, ReactiveFormsModule],\n  declarations: [TimeFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [TimeFieldComponent]\n})\nexport class TimeFieldModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class TimeFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.timeOnly];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { TimeFieldComponent } from './runtime/time-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TimeFieldDesignComponent } from './design';\nimport { TimeFieldDesignModel } from './design/time-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TimeFieldModule } from './runtime/time-field.module';\nimport { TimeFieldDesignModule } from './design/time-field-design.module';\n\n@NgModule({\n  imports: [TimeFieldModule, TimeFieldDesignModule]\n})\nexport class TimeFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Time,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Time',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'clock_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldDesignComponent),\n      designComponentModel: TimeFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport {\n  IRecordDefinition,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { takeUntil } from 'rxjs/operators';\nimport { IRxExtensionContainerConfig } from './extension-container.types';\n\n@Component({\n  selector: 'rx-extension-container',\n  templateUrl: './extension-container.component.html'\n})\nexport class RxExtensionContainerComponent extends BaseViewComponent implements OnInit {\n  recordDefinitions: { [name: string]: IRecordDefinition } = {};\n  state: IRxExtensionContainerConfig;\n\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordDefinitionService: RxRecordDefinitionService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: IRxExtensionContainerConfig) => {\n      this.state = config;\n    });\n  }\n\n  loadRecordDefinition(name: string): void {\n    this.rxRecordDefinitionCacheService.getRecordDefinition(name).subscribe((recordDefinition) => {\n      recordDefinition.fieldDefinitionsById =\n        this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n\n      this.recordDefinitions[name] = recordDefinition;\n\n      this.notifyPropertyChanged('recordDefinitions', this.recordDefinitions);\n    });\n  }\n}\n","<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RxExtensionContainerHelperService {\n  // generate unique expression for 'selectionFieldOptionNamesById' property depending on extension Record editor guid\n  getSelectionFieldOptionNamesByIdExpression(guid: string): string {\n    return `${guid}:selectionFieldOptionNamesById`;\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';\nimport { RX_ASSOCIATION_DEFINITION } from '@helix/platform/association/api';\nimport { RecordInstance, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxExtensionContainerComponent } from '../extension-container.component';\nimport { map, shareReplay, startWith, switchMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\nimport { RecordEditorMode, RxAssociationManagerService } from '../../../../record-editor';\nimport { RecordEditorComponent } from '../../../../record-editor/runtime/record-editor.component';\nimport { RxRecordEditorUtilsService } from '../../../../record-editor/common/record-editor-utils.service';\nimport { get, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { IRxExtensionContainerSectionConfig } from '../extension-container.types';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxExtensionContainerHelperService } from '../extension-container-helper.service';\n\n@Component({\n  selector: 'rx-extension-container-section',\n  templateUrl: './extension-container-section.component.html'\n})\nexport class ExtensionContainerSectionComponent extends BaseViewComponent implements IViewComponent, OnInit {\n  config: Observable<IRxExtensionContainerSectionConfig>;\n  isInitialized = false;\n  selectionFieldOptionNamesById: IPlainObject = null;\n\n  constructor(\n    private rxExtensionContainerComponent: RxExtensionContainerComponent,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private recordEditorComponent: RecordEditorComponent\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    // will close once officially fixed : https://github.com/ReactiveX/rxjs/issues/4772\n    combineLatest([this.config, this.recordEditorComponent.recordInstanceChanged$.pipe(startWith(null))])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([config, recordInstanceUpdated]) => {\n        if (config.recordDefinitionName) {\n          this.rxExtensionContainerComponent.loadRecordDefinition(config.recordDefinitionName);\n        }\n\n        if (!config.associationDefinitionName) {\n          return (this.isInitialized = true);\n        }\n\n        if (config.api) {\n          let associatedRecordInstanceId = null;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            associatedRecordInstanceId = this.recordEditorComponent.state.recordInstance.id;\n          }\n\n          const associationManager: RxAssociationManagerService = config.api.getAssociationManager({\n            associationDefinitionName: config.associationDefinitionName,\n            associatedRecordNodeSide: RX_ASSOCIATION_DEFINITION.roles.second.value,\n            associatedRecordInstanceId: associatedRecordInstanceId,\n            recordDefinitionName: config.recordDefinitionName,\n            allFieldIds: true,\n            associatedRecordPath: config.associatedRecordPath\n          });\n\n          let initialize$: Observable<any>;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            initialize$ = associationManager.loadExtensions().pipe(\n              switchMap((recordInstance) => {\n                if (isEmpty(associationManager.extensions)) {\n                  return this.addNewRecordInstanceToExtension(associationManager);\n                } else {\n                  return of(recordInstance);\n                }\n              })\n            );\n          } else if (\n            this.recordEditorComponent.state.mode === RecordEditorMode.Create ||\n            this.recordEditorComponent.state.mode === RecordEditorMode.Temporary\n          ) {\n            initialize$ = forkJoin([\n              associationManager.initialize(),\n              this.addNewRecordInstanceToExtension(associationManager)\n            ]);\n          }\n\n          initialize$\n            .pipe(\n              tap(() => {\n                this.isInitialized = true;\n              }),\n              switchMap(() => {\n                const recordInstance$ = associationManager.extensions$.pipe(\n                  map((arr) => arr[0]),\n                  tap((recordInstance) => this.updateSelectionFieldOptionNames(recordInstance)),\n                  shareReplay(1)\n                );\n\n                return recordInstance$.pipe(\n                  switchMap((inst) => inst.fieldValueChanged$),\n                  withLatestFrom(recordInstance$)\n                );\n              }),\n              takeUntil(this.destroyed$)\n            )\n            .subscribe(([change, recordInstance]) => {\n              this.updateSelectionFieldOptionNames(recordInstance);\n            });\n        }\n      });\n  }\n\n  addNewRecordInstanceToExtension(associationManager): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.getNew(associationManager.options.recordDefinitionName).pipe(\n      tap((recordInstance: any) => {\n        recordInstance.isNewInstance = true;\n\n        associationManager.addExtension(recordInstance);\n      })\n    );\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (get(recordInstance, 'recordDefinition.fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        recordInstance.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        const propName = this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(this.guid);\n\n        this.rxExtensionContainerComponent.notifyPropertyChanged(propName, newSelectionFieldOptionNames);\n      }\n    }\n  }\n}\n","<h5>{{ (config | async)?.label }}</h5>\n<rx-runtime-view-canvas-outlet *ngIf=\"isInitialized\"></rx-runtime-view-canvas-outlet>\n","import { RxViewComponentType } from '@helix/platform/view/api';\n\nexport const RX_EXTENSION_CONTAINER = {\n  type: RxViewComponentType.ExtensionContainer,\n  recordDefinitionsReferencingExpression: 'recordDefinitions',\n  extensionContainerSectionComponent: 'rx-extension-container-section'\n};\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport {\n  IDefinitionAdapter,\n  RxDefinitionNameService,\n  RxGlobalCacheService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxTreeService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType,\n  RxViewDefinitionDataPageService,\n  RxViewDefinitionLocalizationService,\n  RxViewDefinitionParserService,\n  ViewDefinitionType\n} from '@helix/platform/view/api';\nimport { RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { filter, forEach, isString, map as _map, reduce, values } from 'lodash';\nimport moment from 'moment-es6';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RX_EXTENSION_CONTAINER } from '../extension-container.constant';\nimport { RxExtensionContainerHelperService } from './extension-container-helper.service';\nimport { IRxViewDefinitionMap } from './extension-container.types';\n\n@Injectable()\nexport class RxExtensionContainerDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxViewDefinitionDataPageService: RxViewDefinitionDataPageService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxTreeService: RxTreeService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private rxNotificationService: RxNotificationService,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewDefinitionLocalizationService: RxViewDefinitionLocalizationService,\n    private translateService: TranslateService\n  ) {}\n\n  adaptDefinition(\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): Observable<any> {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition\n    );\n\n    extensionContainerComponentDefinition.propertiesByName.mode =\n      targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    return this.getExtensionViewDefinitions(extensionContainerComponentDefinition.guid).pipe(\n      map(this.getViewDefinitionMap.bind(this)),\n      map(this.filterDuplicatedRecordEditorComponentDefinitions.bind(this)),\n      map((viewDefinitionMaps: IRxViewDefinitionMap[]) =>\n        this.filterIncompatibleRecordEditorComponentDefinitions(\n          viewDefinitionMaps,\n          targetRecordEditorComponentDefinition\n        )\n      ),\n      switchMap(this.setRecordEditorLabels.bind(this)),\n      map(this.getExtensionRecordEditorComponentDefinitions.bind(this)),\n      switchMap((extensionRecordEditorComponentDefinitions: IContainerViewComponentDefinition[]) => {\n        const processAndAddChildrenToExtensionContainer = () => {\n          extensionContainerComponentDefinition.componentDefinitions = [];\n          (extensionContainerComponentDefinition.resourceType as any) =\n            RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n\n          forEach(extensionRecordEditorComponentDefinitions, (extensionRecordEditorComponentDefinition) => {\n            // re-assign expression for child Record editor component definitions\n            this.processRecordEditorComponentDefinition(\n              extensionRecordEditorComponentDefinition,\n              targetRecordEditorComponentDefinition,\n              extensionContainerComponentDefinition\n            );\n\n            extensionContainerComponentDefinition.componentDefinitions.push(\n              this.getExtensionContainerSectionViewComponentDefinition(\n                extensionRecordEditorComponentDefinition,\n                targetRecordEditorComponentDefinition\n              )\n            );\n          });\n\n          const children = extensionContainerComponentDefinition.componentDefinitions.map(\n            (component) => component.guid\n          );\n\n          extensionContainerComponentDefinition.layout = JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children\n                  }\n                ]\n              }\n            ]\n          });\n\n          return extensionRecordEditorComponentDefinitions;\n        };\n\n        // run adapters for all Record editors and it's children\n        const adapters$ = extensionRecordEditorComponentDefinitions.map(\n          (recordEditorComponent: IContainerViewComponentDefinition) => {\n            return combineLatest([\n              ...this.rxRuntimeViewUtilsService.runAdaptersForComponents(viewDefinition, recordEditorComponent)\n            ]);\n          }\n        );\n\n        return combineLatest(adapters$).pipe(\n          tap({\n            complete: () => processAndAddChildrenToExtensionContainer()\n          })\n        );\n      })\n    );\n  }\n\n  getExtensionViewDefinitions(extensionContainerGuid: string): Observable<IViewDefinition[]> {\n    return this.rxViewDefinitionDataPageService\n      .get({\n        params: {\n          propertySelection: [\n            'name',\n            'targetExtensionContainerGuid',\n            'targetViewDefinitionName',\n            'componentDefinitions',\n            'localizableStringsByComponentId',\n            'lastUpdateTime'\n          ],\n          viewType: ViewDefinitionType.Regular,\n          targetExtensionContainerGuid: extensionContainerGuid,\n          excludeExtensionViews: false\n        },\n        headers: {\n          'default-bundle-scope': ''\n        }\n      })\n      .pipe(\n        map((response) => {\n          const associationsInExtensionContainer = [];\n\n          forEach(response.data, (viewDefinition: IViewDefinition) => {\n            this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition);\n\n            const associationDefinitionName =\n              viewDefinition.componentDefinitions[0]?.propertiesByName.associationDefinitionName;\n\n            if (isString(associationDefinitionName)) {\n              if (associationsInExtensionContainer.includes(associationDefinitionName)) {\n                this.rxNotificationService.addWarningMessage(\n                  this.translateService.instant(\n                    'com.bmc.arsys.rx.client.view-components.record-editor.extension-container.duplicate-extensions.warning'\n                  )\n                );\n              } else {\n                associationsInExtensionContainer.push(associationDefinitionName);\n              }\n            }\n          });\n\n          return response.data as IViewDefinition[];\n        })\n      );\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n\n  getViewDefinitionMap(viewDefinitions: IViewDefinition[]): IRxViewDefinitionMap[] {\n    return reduce(\n      viewDefinitions,\n      (result, viewDefinition) => {\n        const recordEditorComponentDefinition = viewDefinition.componentDefinitions[0];\n\n        // View may not contain Record editor component definition because of permission restrictions\n        if (recordEditorComponentDefinition) {\n          result.push({\n            viewDefinition,\n            recordEditorComponentDefinition\n          });\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  filterDuplicatedRecordEditorComponentDefinitions(viewDefinitionMaps: IRxViewDefinitionMap[]): IRxViewDefinitionMap[] {\n    return values(\n      reduce(\n        viewDefinitionMaps,\n        (result, viewDefinitionMap) => {\n          // Allow multiple record editors to be displayed in the extension container if they are bound\n          // to the same parent record instance. In this case they have no associationDefinitionName.\n          if (!viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n            result[viewDefinitionMap.recordEditorComponentDefinition.guid] = viewDefinitionMap;\n\n            return result;\n          }\n\n          const key = [\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName\n          ].join('');\n\n          if (!result[key]) {\n            result[key] = viewDefinitionMap;\n          } else if (\n            moment(viewDefinitionMap.viewDefinition.lastUpdateTime) < moment(result[key].viewDefinition.lastUpdateTime)\n          ) {\n            result[key] = viewDefinitionMap;\n          }\n\n          return result;\n        },\n        {}\n      )\n    );\n  }\n\n  filterIncompatibleRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[],\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IRxViewDefinitionMap[] {\n    return filter(viewDefinitionMaps, (viewDefinitionMap) => {\n      const hasSameMode =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.mode ===\n        targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n      const hasSameRecordDefinitionName =\n        targetRecordEditorComponentDefinition.propertiesByName.recordDefinitionName ===\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName;\n\n      const hasAssociation =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName;\n\n      const validExtensionWithoutAssociation = hasSameRecordDefinitionName && !hasAssociation && hasSameMode;\n      const validExtensionWithAssociation = hasAssociation && hasSameMode;\n\n      return validExtensionWithoutAssociation || validExtensionWithAssociation;\n    });\n  }\n\n  setRecordEditorLabels(viewDefinitionMaps: IRxViewDefinitionMap[]): Observable<IRxViewDefinitionMap[]> {\n    return forkJoin<IRxViewDefinitionMap>([\n      ...viewDefinitionMaps.map((viewDefinitionMap) => {\n        let label$;\n\n        if (viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label) {\n          label$ = of(viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label);\n        } else {\n          label$ = this.rxGlobalCacheService.getBundleFriendlyName(\n            this.rxDefinitionNameService.getBundleId(viewDefinitionMap.viewDefinition.name)\n          );\n        }\n\n        return label$.pipe(\n          map((label) => {\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label = label;\n\n            return viewDefinitionMap;\n          })\n        );\n      })\n    ]);\n  }\n\n  getExtensionRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[]\n  ): IContainerViewComponentDefinition[] {\n    return _map(viewDefinitionMaps, 'recordEditorComponentDefinition');\n  }\n\n  processRecordEditorComponentDefinition(\n    extensionRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    this.rxTreeService\n      .flattenTree(extensionRecordEditorComponentDefinition, 'componentDefinitions')\n      .forEach((componentDefinition) => {\n        this.patchFieldComponentExpressions(\n          componentDefinition,\n          extensionRecordEditorComponentDefinition,\n          targetRecordEditorComponentDefinition,\n          extensionContainerComponentDefinition\n        );\n      });\n\n    return extensionRecordEditorComponentDefinition;\n  }\n\n  // re-assign all expressions from extension Record editor to target Record editor\n  // old path: ${view.components.<extension-record-editor-guid>.recordInstance}\n  // new path: ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n  patchFieldComponentExpressions(\n    componentDefinition,\n    extensionRecordEditorComponentDefinition,\n    targetRecordEditorComponentDefinition,\n    targetExtensionContainerComponentDefinition\n  ) {\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n    const recordInstanceReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetRecordEditorComponentDefinition.guid,\n          '.',\n          \"recordInstance.associationInstances['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          \"'].\",\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          '.extensions[0]'\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordInstance'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].recordDefinitionName}\n    const recordDefinitionNameReferencingExpression = [\n      recordInstanceReferencingExpression,\n      '.recordDefinitionName'\n    ].join('');\n\n    // ${view.components.<target-extension-container-guid>.recordDefinitions.<extension-record-definition-name>}\n    const recordDefinitionReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetExtensionContainerComponentDefinition.guid,\n          '.',\n          RX_EXTENSION_CONTAINER.recordDefinitionsReferencingExpression,\n          \"['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n          \"']\"\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordDefinition'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].id}\n    const recordInstanceIdReferencingExpression = [recordInstanceReferencingExpression, '.id'].join('');\n\n    let selectionFieldOptionNamesByIdReferencingExpression;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      // ${view.components.<target-extension-container-guid>.<extension-record-editor-guid>:selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = [\n        targetExtensionContainerComponentDefinition.guid,\n        '.',\n        this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(\n          extensionRecordEditorComponentDefinition.guid\n        )\n      ].join('');\n    } else {\n      // ${view.components.<targetRecordEditorComponentDefinition>.selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = `${targetRecordEditorComponentDefinition.guid}.selectionFieldOptionNamesById`;\n    }\n\n    /*\n     * {\n     *   regExp - determines the part of the old expression\n     *   expression - determines new value which should replace <regExp> match\n     * }\n     * */\n    const expressionMap = [\n      // patch record instance id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstanceId', 'g'),\n        expression: recordInstanceIdReferencingExpression\n      },\n      // patch record instance expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstance', 'g'),\n        expression: recordInstanceReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinitionName', 'g'),\n        expression: recordDefinitionNameReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinition', 'g'),\n        expression: recordDefinitionReferencingExpression\n      },\n      // patch selection field option names by id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.selectionFieldOptionNamesById', 'g'),\n        expression: selectionFieldOptionNamesByIdReferencingExpression\n      },\n      // patch record editor properties like 'canSave', 'inReadState', 'isValid', 'isDirty'\n      // ${view.components.<target-record-editor-guid>.canSave}\n      // ${view.components.<target-record-editor-guid>.inReadState} ...\n      {\n        regExp: new RegExp(`${extensionRecordEditorComponentDefinition.guid}\\\\.(\\\\w+)}`, 'g'),\n        expression: `${targetRecordEditorComponentDefinition.guid}.$1}`\n      }\n    ];\n\n    const propertiesToPatch = ['disabled', 'hidden', 'value', 'html'];\n\n    propertiesToPatch\n      .filter((propertyName) => isString(componentDefinition.propertiesByName[propertyName]))\n      .forEach((propertyName) => {\n        forEach(expressionMap, (expressionConfig) => {\n          componentDefinition.propertiesByName[propertyName] = componentDefinition.propertiesByName[\n            propertyName\n          ].replace(expressionConfig.regExp, expressionConfig.expression);\n        });\n      });\n\n    componentDefinition.propertiesByName.api = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`;\n    componentDefinition.propertiesByName.inReadState = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.inReadState}`;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      componentDefinition.propertiesByName.associatedRecordPath = [\n        extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n        'extensions',\n        0\n      ];\n    }\n\n    if (componentDefinition.propertiesByName.recordInstance) {\n      componentDefinition.propertiesByName.recordInstance = [\n        '${view.components.',\n        recordInstanceReferencingExpression,\n        '}'\n      ].join('');\n    }\n\n    if (componentDefinition.propertiesByName.recordDefinition) {\n      componentDefinition.propertiesByName.recordDefinition = [\n        '${view.components.',\n        recordDefinitionReferencingExpression,\n        '}'\n      ].join('');\n    }\n  }\n\n  getExtensionContainerSectionViewComponentDefinition(\n    recordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return {\n      guid: recordEditorComponentDefinition.guid,\n      type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,\n      layout: recordEditorComponentDefinition.layout,\n      resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n      componentDefinitions: recordEditorComponentDefinition.componentDefinitions,\n      propertiesByName: {\n        label: recordEditorComponentDefinition.propertiesByName.label,\n        styles: recordEditorComponentDefinition.propertiesByName.styles,\n        recordDefinitionName: recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n        associationDefinitionName: recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        [RX_AVAILABLE_ON_DEVICES_PROP_NAME]:\n          recordEditorComponentDefinition.propertiesByName[RX_AVAILABLE_ON_DEVICES_PROP_NAME],\n        api: `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`,\n        associatedRecordPath: [\n          recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          'extensions',\n          0\n        ]\n      }\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxExtensionContainerComponent } from './extension-container.component';\nimport { RX_EXTENSION_CONTAINER } from '../extension-container.constant';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RxExtensionContainerDefinitionAdapterService } from './extension-container-definition-adapter.service';\nimport { RxExtensionContainerHelperService } from './extension-container-helper.service';\nimport { ExtensionContainerSectionComponent } from './extension-container-section/extension-container-section.component';\n\n@NgModule({\n  providers: [RxExtensionContainerDefinitionAdapterService, RxExtensionContainerHelperService],\n  declarations: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],\n  exports: [RxExtensionContainerComponent],\n  entryComponents: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule]\n})\nexport class RxExtensionContainerModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxExtensionContainerDefinitionAdapterService: RxExtensionContainerDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_EXTENSION_CONTAINER.type,\n      this.rxExtensionContainerDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ExtensionContainerDesignModel } from './extension-container-design.model';\n\n@Component({\n  selector: 'rx-extension-container-design',\n  templateUrl: './extension-container-design.component.html'\n})\nexport class ExtensionContainerDesignComponent {\n  @Input()\n  model: ExtensionContainerDesignModel;\n}\n","<adapt-empty-state type=\"objects\" label=\"Contains fields from extensions of the record definition.\"></adapt-empty-state>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExtensionContainerDesignComponent } from './extension-container-design.component';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [ExtensionContainerDesignComponent],\n  entryComponents: [ExtensionContainerDesignComponent]\n})\nexport class ExtensionContainerDesignModule {}\n","import {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { ITextFormControlOptions, TextFormControlComponent } from '@helix/platform/shared/components';\nimport { Injector } from '@angular/core';\nimport { first, map, take, takeUntil } from 'rxjs/operators';\nimport { IExtensionContainerProperties } from './extension-container-design.types';\nimport { combineLatest } from 'rxjs';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { compact, flatten, isEmpty } from 'lodash';\n\nexport class ExtensionContainerDesignModel extends ViewDesignerComponentModel {\n  componentProperties$ = this.sandbox.componentProperties$;\n  parentGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n  initialProperties: IExtensionContainerProperties = {\n    name: '',\n    recordDefinition: '',\n    recordInstance: '',\n    ...RX_STANDARD_PROPS_DEFAULT_VALUES\n  };\n\n  constructor(\n    protected injector: Injector,\n    protected sandbox: IViewComponentDesignSandbox<IExtensionContainerProperties>\n  ) {\n    super(injector, sandbox);\n\n    combineLatest([this.parentGuid$, this.componentProperties$])\n      .pipe(first())\n      .subscribe(([parentGuid, componentProperties]) => {\n        const properties = {\n          ...this.initialProperties,\n          ...componentProperties,\n          recordInstance: `\\${view.components.${parentGuid}.recordInstance}`,\n          recordDefinition: `\\${view.components.${parentGuid}.recordDefinition}`\n        };\n\n        this.sandbox.updateComponentProperties(properties);\n        this.sandbox.updateInspectorConfig(this.getInspectorConfig());\n      });\n\n    combineLatest([\n      this.sandbox.getComponentPropertyValue('name').pipe(\n        map((value) => {\n          if (isEmpty(value)) {\n            return this.sandbox.createError('Name cannot be blank.', 'name');\n          }\n        })\n      ),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues) => this.sandbox.setValidationIssues(validationIssues));\n  }\n\n  private getInspectorConfig(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                required: true,\n                tooltip: new Tooltip('Enter a name to uniquely identify the Extension container')\n              } as ITextFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxExtensionContainerComponent } from './runtime/extension-container.component';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_EXTENSION_CONTAINER } from './extension-container.constant';\nimport { ExtensionContainerSectionComponent } from './runtime/extension-container-section/extension-container-section.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { ExtensionContainerDesignComponent } from './design';\nimport { ExtensionContainerDesignModel } from './design/extension-container-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxExtensionContainerModule } from './runtime/extension-container.module';\nimport { ExtensionContainerDesignModule } from './design/extension-container-design.module';\n\n@NgModule({\n  imports: [RxExtensionContainerModule, ExtensionContainerDesignModule]\n})\nexport class ExtensionContainerRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register(\n      {\n        type: RX_EXTENSION_CONTAINER.type,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxExtensionContainerComponent),\n        properties: RX_STANDARD_PROPS_DESC,\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Extension container',\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'widget',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n          ExtensionContainerDesignComponent\n        ),\n        designComponentModel: ExtensionContainerDesignModel,\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(ExtensionContainerSectionComponent),\n        properties: [\n          {\n            name: 'api',\n            enableExpressionEvaluation: true\n          }\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ]\n      }\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { CKEditor4 } from 'ckeditor4-angular';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\nimport { RichTextareaFieldDesignModel } from './rich-textarea-field-design.model';\n\n@Component({\n  selector: 'rx-rich-textarea-field-design',\n  templateUrl: './rich-textarea-field-design.component.html',\n  styleUrls: ['./rich-textarea-field-design.component.scss']\n})\nexport class RichTextareaFieldDesignComponent {\n  @Input()\n  model: RichTextareaFieldDesignModel;\n\n  ckEditorType = CKEditor4.EditorType.DIVAREA;\n  ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();\n\n  constructor(private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {}\n}\n","<div>\n  <strong>\n    {{ model.label$ | async }}\n    <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n  </strong>\n</div>\n\n<div class=\"mt-1\">\n  <ckeditor [type]=\"ckEditorType\" [config]=\"ckEditorConfig\" [readOnly]=\"true\"></ckeditor>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RichTextareaFieldDesignComponent } from './rich-textarea-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, CKEditorModule],\n  declarations: [RichTextareaFieldDesignComponent],\n  entryComponents: [RichTextareaFieldDesignComponent]\n})\nexport class RichTextareaFieldDesignModule {}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class RichTextareaFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super.getInspectorConfig().pipe(\n      withLatestFrom(this.availableFieldDefinitions$),\n      map(([inspectorConfig, recordFieldsSelectItems]) => {\n        const availableFields = recordFieldsSelectItems\n          .filter((field) => !field.maxLength)\n          .map((field) => ({\n            id: String(field.id),\n            name: field.name\n          }));\n\n        const newInspectorConfig: IViewDesignerInspectorConfig = cloneDeep(inspectorConfig);\n\n        newInspectorConfig.inspectorSectionConfigs[0].controls[0].options.options = [...availableFields];\n\n        return newInspectorConfig;\n      })\n    );\n  }\n}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { CKEditor4 } from 'ckeditor4-angular';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\n\n@Component({\n  selector: 'rx-rich-textarea-field',\n  templateUrl: './rich-textarea-field.component.html',\n  styleUrls: ['./rich-textarea-field.component.scss']\n})\nexport class RichTextareaFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  ckEditorType = CKEditor4.EditorType.DIVAREA;\n  ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();\n\n  constructor(injector: Injector, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super(injector);\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    // When pressing a toolbar button, e.g. Bold, while the field is blank, ckeditor triggers\n    // a `dataChange` event with an empty string as data. If we allow this value to be set,\n    // it will be converted back to null and result in all toolbar buttons being reset,\n    // e.g. the Bold button will be unpressed.\n    // As a workaround, we do not accept empty string if the current field value is null.\n    if (!(this.formControl.value === null && value === '')) {\n      super.setFieldValue(value);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <div class=\"read-only-content-wrapper focusable\" *ngIf=\"inReadState; else editStateElementRef\" tabindex=\"0\">\n    <label>{{ label }}</label>\n\n    <ckeditor\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"true\"\n      [ngModel]=\"getDisplayValue()\"\n    ></ckeditor>\n  </div>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <div [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\">\n    <adapt-rx-control-label [label]=\"label\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <ckeditor\n      (dataChange)=\"setFieldValue($event)\"\n      [data]=\"formControl.value\"\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"isDisabled\"\n      (blur)=\"onBlur()\"\n    ></ckeditor>\n\n    <adapt-rx-feedback\n      #adaptRxFeedbackRef\n      [errors]=\"formControl.errors\"\n      [controlTouched]=\"formControl.touched\"\n    ></adapt-rx-feedback>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RichTextareaFieldComponent } from './rich-textarea-field.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxFormControlModule, TranslateModule, ReactiveFormsModule, CKEditorModule],\n  declarations: [RichTextareaFieldComponent],\n  entryComponents: [RichTextareaFieldComponent]\n})\nexport class RichTextareaFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { RichTextareaFieldDesignComponent } from './design/rich-textarea-field-design.component';\nimport { RichTextareaFieldDesignModule } from './design/rich-textarea-field-design.module';\nimport { RichTextareaFieldDesignModel } from './design/rich-textarea-field-design.model';\nimport { RichTextareaFieldComponent } from './runtime/rich-textarea-field.component';\nimport { RichTextareaFieldModule } from './runtime/rich-textarea-field.module';\n\n@NgModule({\n  imports: [RichTextareaFieldDesignModule, RichTextareaFieldModule]\n})\nexport class RichTextareaFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RichTextarea,\n      properties: RX_BASE_FIELD_PROPERTIES,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldComponent),\n\n      name: 'Rich text area',\n      icon: 'text_colorpicker_adapt',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldDesignComponent),\n      designComponentModel: RichTextareaFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Injector } from '@angular/core';\nimport { IPlainObject, RxLocalizationService } from '@helix/platform/shared/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { cloneDeep, isEqual, noop } from 'lodash';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { LocalizedCharacterFieldValueModalComponent } from '@helix/platform/shared/components';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-localized-character-field',\n  templateUrl: './localized-character-field.component.html',\n  styleUrls: ['./localized-character-field.component.scss']\n})\nexport class LocalizedCharacterFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  private hideCurrentLocale: boolean;\n\n  constructor(\n    injector: Injector,\n    private rxModalService: RxModalService,\n    private rxLocalizationService: RxLocalizationService\n  ) {\n    super(injector);\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigUpdated(config);\n\n    const fieldValue = this.getFieldValue();\n\n    this.hideCurrentLocale = this.getFieldInstanceProp('hideCurrentLocale');\n\n    if (config.value === fieldValue) {\n      const valueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n      valueByLocale[this.rxLocalizationService.currentLocale] = fieldValue;\n      this.setFieldInstanceProp('valueByLocale', valueByLocale);\n    }\n  }\n\n  shouldShowValidationError(): boolean {\n    return this.isRequired && !this.formControl.value && (this.formControl.touched || this.formControl.dirty);\n  }\n\n  selectLocalizedValue(): void {\n    const valueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n    this.rxModalService\n      .openModal({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.localized-character-field.dialog.title'\n        ),\n        data: {\n          fieldDefinition: this.fieldDefinition,\n          valueByLocale: cloneDeep(valueByLocale),\n          hideCurrentLocale: this.hideCurrentLocale\n        },\n        size: 'sm',\n        content: LocalizedCharacterFieldValueModalComponent\n      })\n      .then((data) => {\n        if (data) {\n          this.setLocalizedFieldValue(data.valueByLocale, data.currentLocaleValue);\n        }\n      })\n      .catch(noop);\n  }\n\n  private setLocalizedFieldValue(valueByLocale: IPlainObject, currentLocaleValue: string): void {\n    const currentLocaleCode = this.rxLocalizationService.currentLocale;\n    const defaultLocaleCode = 'en-US';\n    const fieldValue = currentLocaleValue || valueByLocale[currentLocaleCode] || valueByLocale[defaultLocaleCode];\n    const currentValueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n    if (!isEqual(valueByLocale, currentValueByLocale)) {\n      this.setFieldInstanceProp('valueByLocale', valueByLocale);\n      this.formControl.markAsDirty();\n      this.recordEditorApi.markAsDirty();\n    }\n\n    this.setFieldValue(fieldValue);\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <span class=\"d-flex justify-content-between\" [class.has-danger]=\"formControl.errors && formControl.touched\">\n    <adapt-rx-control-label [label]=\"label\" [id]=\"guid\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <button\n      type=\"button\"\n      class=\"localize-button btn btn-link focusable d-icon-left-pencil p-0\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-describedby]=\"guid\"\n      (click)=\"selectLocalizedValue()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.view-components.localized-character-field.button.localize.label' | translate }}\n    </button>\n  </span>\n\n  <adapt-rx-textfield\n    class=\"mb-0\"\n    [readonly]=\"true\"\n    [formControl]=\"formControl\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [attr.aria-describedby]=\"guid\"\n  >\n  </adapt-rx-textfield>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AdaptBusyModule,\n  AdaptButtonModule,\n  AdaptRxFormControlModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule\n} from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule, RxBusyIndicatorModule } from '@helix/platform/ui-kit';\nimport { LocalizedCharacterFieldComponent } from './localized-character-field.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptRxFormControlModule,\n    ReadOnlyFieldModule,\n    AdaptTooltipModule,\n    AdaptButtonModule,\n    TranslateModule,\n    AdaptBusyModule.forRoot(),\n    RxBusyIndicatorModule,\n    AdaptRxTextfieldModule,\n    ReactiveFormsModule\n  ],\n  declarations: [LocalizedCharacterFieldComponent],\n  entryComponents: [LocalizedCharacterFieldComponent]\n})\nexport class RxLocalizedCharacterFieldModule {}\n","import { Component, Input } from '@angular/core';\nimport { LocalizedCharacterFieldDesignModel } from './localized-character-field-design.model';\n\n@Component({\n  selector: 'rx-localized-character-field-design',\n  templateUrl: './localized-character-field-design.component.html'\n})\nexport class LocalizedCharacterFieldDesignComponent {\n  @Input()\n  model: LocalizedCharacterFieldDesignModel;\n}\n","<button type=\"button\" class=\"btn float-end p-0 btn-link d-icon-left-pencil\">Localize</button>\n\n<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n>\n</adapt-rx-textfield>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { LocalizedCharacterFieldDesignComponent } from './localized-character-field-design.component';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [LocalizedCharacterFieldDesignComponent],\n  entryComponents: [LocalizedCharacterFieldDesignComponent],\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule]\n})\nexport class RxLocalizedCharacterFieldDesignModule {}\n","import { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport class LocalizedCharacterFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter];\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { LocalizedCharacterFieldComponent } from './runtime/localized-character-field.component';\nimport { RxLocalizedCharacterFieldModule } from './runtime/localized-character-field.module';\nimport { RxLocalizedCharacterFieldDesignModule } from './design/localized-character-field-design.module';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { LocalizedCharacterFieldDesignComponent } from './design/localized-character-field-design.component';\nimport { LocalizedCharacterFieldDesignModel } from './design/localized-character-field-design.model';\n\n@NgModule({\n  imports: [RxLocalizedCharacterFieldModule, RxLocalizedCharacterFieldDesignModule]\n})\nexport class LocalizedCharacterFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.LocalizedCharacter,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(LocalizedCharacterFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Localized text',\n      icon: 'field_text_mapmarker',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n        LocalizedCharacterFieldDesignComponent\n      ),\n      designComponentModel: LocalizedCharacterFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AssociationRegistrationModule } from './association/association-registration.module';\nimport { AttachmentFieldRegistrationModule } from './attachment-field/attachment-field-registration.module';\nimport { BooleanFieldRegistrationModule } from './boolean-field/boolean-field-registration.module';\nimport { DateFieldRegistrationModule } from './date-field/date-field-registration.module';\nimport { DateTimeFieldRegistrationModule } from './date-time-field/date-time-field-registration.module';\nimport { DecimalFieldRegistrationModule } from './decimal-field/decimal-field-registration.module';\nimport { ExtensionContainerRegistrationModule } from './extension-container/extension-container-registration.module';\nimport { IntegerFieldRegistrationModule } from './integer-field/integer-field-registration.module';\nimport { RichTextareaFieldRegistrationModule } from './rich-textarea-field/rich-textarea-field-registration.module';\nimport { SelectionFieldRegistrationModule } from './selection-field/selection-field-registration.module';\nimport { TextareaFieldRegistrationModule } from './textarea-field/textarea-field-registration.module';\nimport { SelectGroupRegistrationModule } from './select-group/select-group-registration.module';\nimport { TextFieldRegistrationModule } from './text-field/text-field-registration.module';\nimport { TimeFieldRegistrationModule } from './time-field/time-field-registration.module';\nimport { LocalizedCharacterFieldRegistrationModule } from './localized-character-field/localized-character-field-registration.module';\n\n@NgModule({\n  imports: [\n    AssociationRegistrationModule,\n    AttachmentFieldRegistrationModule,\n    BooleanFieldRegistrationModule,\n    DateFieldRegistrationModule,\n    DateTimeFieldRegistrationModule,\n    DecimalFieldRegistrationModule,\n    IntegerFieldRegistrationModule,\n    SelectionFieldRegistrationModule,\n    TextareaFieldRegistrationModule,\n    SelectGroupRegistrationModule,\n    TextFieldRegistrationModule,\n    TimeFieldRegistrationModule,\n    ExtensionContainerRegistrationModule,\n    LocalizedCharacterFieldRegistrationModule,\n    RichTextareaFieldRegistrationModule\n  ],\n  exports: [\n    AssociationRegistrationModule,\n    AttachmentFieldRegistrationModule,\n    BooleanFieldRegistrationModule,\n    DateFieldRegistrationModule,\n    DateTimeFieldRegistrationModule,\n    DecimalFieldRegistrationModule,\n    IntegerFieldRegistrationModule,\n    SelectionFieldRegistrationModule,\n    TextareaFieldRegistrationModule,\n    SelectGroupRegistrationModule,\n    TextFieldRegistrationModule,\n    TimeFieldRegistrationModule,\n    ExtensionContainerRegistrationModule,\n    LocalizedCharacterFieldRegistrationModule,\n    RichTextareaFieldRegistrationModule\n  ]\n})\nexport class FieldComponentsModule {}\n","export enum GridCardLayoutWidth {\n  Xsmall = '450',\n  Small = '650',\n  Medium = '800',\n  Large = '1024',\n  Xlarge = '1200',\n  Xxlarge = '1600'\n}\n","export enum RecordGridColumnAlignment {\n  Default = 'false',\n  Left = 'Left',\n  Right = 'Right',\n  Center = 'Center'\n}\n","import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { GridCardLayoutWidth } from './runtime/types/grid-card-layout-width.enum';\nimport { RecordGridColumnAlignment } from './common/types/record-grid-column-alignment.enum';\nimport { IColumnEditorProperty } from './design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/types/column-editor-property.types';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { RX_EXPRESSION_EVALUATOR } from '@helix/platform/view/api';\n\nconst defaultTypeaheadKeystrokeCount = 1;\n\nconst columnProperties: IColumnEditorProperty[] = [\n  {\n    name: 'visible',\n    defaultValue: true,\n    label: 'Visible'\n  },\n  {\n    name: 'sortable',\n    defaultValue: true,\n    label: 'Sortable',\n    tooltip: new Tooltip('Sorting will be disabled for character fields longer than 4000 characters.')\n  },\n  {\n    name: 'filterable',\n    defaultValue: true,\n    label: 'Filterable'\n  },\n  {\n    name: 'searchable',\n    label: 'Searchable',\n    defaultValue: true\n  },\n  {\n    name: 'width',\n    label: '',\n    defaultValue: null,\n    options: {\n      label: 'Width',\n      defaultUnit: 'px',\n      units: [\n        {\n          name: 'pixels',\n          id: 'px'\n        },\n        {\n          name: 'percent',\n          id: '%'\n        }\n      ],\n      stepperOptionByUnits: {\n        px: {\n          minValue: 1\n        },\n        '%': {\n          minValue: 1,\n          maxValue: 100\n        }\n      }\n    }\n  },\n  {\n    name: 'wrapText',\n    defaultValue: false,\n    label: 'Wrap text'\n  },\n  {\n    name: 'alignment',\n    defaultValue: false,\n    label: 'Alignment',\n    selectionValues: [\n      {\n        name: 'Align left',\n        value: RecordGridColumnAlignment.Left,\n        icon: 'd-icon-align_left_adapt'\n      },\n      {\n        name: 'Center',\n        value: RecordGridColumnAlignment.Center,\n        icon: 'd-icon-align_center_adapt'\n      },\n      {\n        name: 'Align right',\n        value: RecordGridColumnAlignment.Right,\n        icon: 'd-icon-align_right_adapt'\n      }\n    ]\n  },\n  {\n    name: 'typeaheadKeystrokeCount',\n    label: '',\n    defaultValue: defaultTypeaheadKeystrokeCount,\n    options: {\n      label: 'Typeahead keystroke count',\n      options: [\n        {\n          id: 0,\n          name: '0'\n        },\n        {\n          id: 1,\n          name: '1'\n        },\n        {\n          id: 2,\n          name: '2'\n        },\n        {\n          id: 3,\n          name: '3'\n        },\n        {\n          id: 4,\n          name: '4'\n        },\n        {\n          id: 5,\n          name: '5'\n        }\n      ] as RxSelectOption[],\n      emptyOption: false\n    }\n  }\n];\n\nexport const RX_RECORD_GRID = {\n  type: 'rx-record-grid',\n  version: '1.0',\n  defaultColumnMinWidth: 45,\n  defaultRowHeight: 37,\n\n  components: {\n    filter: 'rx-record-grid-filter',\n    column: 'rx-record-grid-column',\n    filterPreset: 'rx-record-grid-filter-preset',\n    viewPreset: 'rx-record-grid-view-preset',\n    columnViewPreset: 'rx-record-grid-column-view-preset'\n  },\n\n  columnAlignment: {\n    left: 'Left',\n    right: 'Right',\n    center: 'Center'\n  },\n\n  selectionTypes: {\n    multiple: 'multiple',\n    single: 'single'\n  },\n\n  userPreferences: {\n    filters: 'filters',\n    columns: 'columns'\n  },\n\n  cardLayoutWidthOptions: [\n    {\n      id: GridCardLayoutWidth.Xsmall,\n      name: 'Extra Small (450px)'\n    },\n    {\n      id: GridCardLayoutWidth.Small,\n      name: 'Small (650px)'\n    },\n    {\n      id: GridCardLayoutWidth.Medium,\n      name: 'Medium (800px)'\n    },\n    {\n      id: GridCardLayoutWidth.Large,\n      name: 'Large (1024px)'\n    },\n    {\n      id: GridCardLayoutWidth.Xlarge,\n      name: 'Extra Large (1200px)'\n    },\n    {\n      id: GridCardLayoutWidth.Xxlarge,\n      name: 'Extra Extra Large (1600px)'\n    }\n  ] as RxSelectOption[],\n\n  actionsColumnProperties: [\n    {\n      name: 'visible',\n      defaultValue: true,\n      label: 'Visible'\n    }\n  ],\n\n  columnProperties,\n\n  sharedFilterPresets: {\n    recordDefinitionName: 'Record Grid Filter Presets',\n\n    fields: {\n      recordGridGuid: 300000001,\n      name: 300000002,\n      filterExpression: 300000003,\n      sortOrder: 300000004,\n      isDefault: 300000005\n    }\n  },\n\n  defaultFilter: '{}',\n  associatedFieldIdPrefixPattern: RX_EXPRESSION_EVALUATOR.associatedFieldIdPrefixPattern,\n\n  defaultPageSize: 50,\n\n  rowActionsOutletName: 'ROW_ACTIONS',\n\n  actionsColumnFieldDefinition: {\n    name: 'Actions',\n    id: '$ACTIONS$'\n  },\n\n  numberOfFiltersOptions: [\n    {\n      id: 0,\n      name: 'None'\n    },\n    {\n      id: 1,\n      name: '1'\n    },\n    {\n      id: 2,\n      name: '2'\n    },\n    {\n      id: 3,\n      name: '3'\n    },\n    {\n      id: 4,\n      name: '4'\n    },\n    {\n      id: 5,\n      name: '5'\n    }\n  ] as RxSelectOption[],\n\n  defaultTypeaheadKeystrokeCount,\n\n  externalPresetFilterOptionId: '$EXTERNAL_PRESET$'\n};\n","import { Injectable } from '@angular/core';\nimport { IRecordGridColumnPublicProperties, IRxRecordGridApi, RecordsSource } from '@helix/platform/view/api';\nimport { constant, forEach, find, get, includes, isFunction, isUndefined, some, sortBy } from 'lodash';\nimport { AsyncSubject, forkJoin, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport {\n  IAssociationDefinition,\n  IAssociationDescriptor,\n  IAssociationNode,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService, RxLogService } from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\n\nimport { IColumnDescriptor } from '../types/column-descriptor.interface';\nimport { IFieldLocator } from '../types/field-locator.interface';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IRecordGridFilterTag, ISharedFilterPresetTagModel } from '../types/record-grid-filter.types';\nimport { TagModel } from '@bmc-ux/adapt-angular';\nimport { RxFieldDefinitionService } from '@helix/platform/record/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridUtilsService {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private stringService: RxStringService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFieldDefinitionService: RxFieldDefinitionService\n  ) {}\n\n  getColumnDescriptors(recordDefinitionName: string, source: RecordsSource): Promise<IColumnDescriptor[]> {\n    return this.rxRecordDefinitionCacheService\n      .getRecordDefinition(recordDefinitionName)\n      .toPromise()\n      .then((recordDefinition: IRecordDefinition) => {\n        if (isFunction((<IRxRecordGridApi>source).getColumns)) {\n          const columns: IColumnDescriptor[] = (<IRxRecordGridApi>source)\n            .getColumns()\n            .map((column: IRecordGridColumnPublicProperties, index) => ({\n              fieldId: column.field,\n              index,\n              title: column.header,\n              fieldDefinition: column.fieldDefinition\n            }));\n\n          return Promise.all(\n            columns\n              .filter((column) => this.isAssociatedRecordFieldId(column.fieldId))\n              .map((column) =>\n                this.getAssociationDescriptor(column.fieldId, recordDefinition)\n                  .toPromise()\n                  .then((associationDescriptor) => {\n                    column.associationDescriptor = associationDescriptor;\n                  })\n              )\n          ).then(constant(columns));\n        } else {\n          return recordDefinition.fieldDefinitions.map<IColumnDescriptor>(\n            (fieldDefinition: IFieldDefinition, index: number) => ({\n              fieldId: <string>fieldDefinition.id,\n              index,\n              title: fieldDefinition.name,\n              fieldDefinition: fieldDefinition\n            })\n          );\n        }\n      });\n  }\n\n  getAssociationDescriptors(recordDefinitionName: string): Observable<IAssociationDescriptor[]> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName),\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)\n    ]).pipe(\n      map(([associations, recordDefinition]) => {\n        const associationDescriptors = [];\n\n        forEach(associations[recordDefinitionName], (associationDefinition) => {\n          const isOneToMany =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value;\n\n          const isManyToManyAssociation =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n\n          if (!isManyToManyAssociation) {\n            if (this.isNeedSide(associationDefinition.nodeBId, recordDefinitionName, recordDefinition)) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeAId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA)\n              });\n            }\n\n            if (\n              this.isNeedSide(associationDefinition.nodeAId, recordDefinitionName, recordDefinition) &&\n              !isOneToMany\n            ) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeBId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB)\n              });\n            }\n          }\n        });\n\n        return sortBy(associationDescriptors, 'label');\n      })\n    );\n  }\n\n  getFieldDefinition(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IFieldDefinition> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    const fieldDefinition$ = new AsyncSubject<IFieldDefinition>();\n    let recordDefinitionPromise: Promise<IRecordDefinition>;\n\n    if (locator.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n      return of(RX_RECORD_GRID.actionsColumnFieldDefinition);\n    } else {\n      if (locator.associationGuid) {\n        recordDefinitionPromise = this.getAssociationDescriptors(primaryRecordDefinition.name)\n          .pipe(\n            map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator)),\n            filter((associationDescriptor) => Boolean(associationDescriptor)),\n            map(\n              (associationDescriptor) =>\n                associationDescriptor.associationDefinition[\n                  RX_ASSOCIATED_RECORD_NODE_SIDES[associationDescriptor.nodeSide].recordDefinitionNameKey\n                ]\n            ),\n            switchMap((recordDefinitionName) => {\n              return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName);\n            })\n          )\n          .toPromise();\n      } else {\n        recordDefinitionPromise = Promise.resolve(primaryRecordDefinition);\n      }\n\n      recordDefinitionPromise.then((recordDefinition) => {\n        let fieldDefinition: IFieldDefinition;\n\n        if (recordDefinition) {\n          fieldDefinition = find(recordDefinition.fieldDefinitions, {\n            id: Number(locator.fieldId) || locator.fieldId\n          });\n        }\n\n        fieldDefinition$.next(fieldDefinition);\n        fieldDefinition$.complete();\n      });\n\n      return fieldDefinition$;\n    }\n  }\n\n  isAssociatedRecordFieldId(fieldId: string): boolean {\n    return !some(this.getFieldLocator(fieldId), isUndefined);\n  }\n\n  getFieldIdForGridColumn(fieldId: string | number, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor\n      ? `recordContext._associations.${associationDescriptor.associationDefinition.guid}.${associationDescriptor.nodeSide}[0].${fieldId}`\n      : String(fieldId);\n  }\n\n  getAssociationDescriptor(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IAssociationDescriptor> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    let associationDescriptor = of(null);\n\n    if (locator.associationGuid) {\n      associationDescriptor = this.getAssociationDescriptors(primaryRecordDefinition.name).pipe(\n        map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator))\n      );\n    }\n\n    return associationDescriptor;\n  }\n\n  getDisplayFieldDescriptor(\n    fieldId: string,\n    primaryRecordDefinition: IRecordDefinition,\n    associatedRecordDefinitionName: string\n  ): Observable<IFieldDefinition> {\n    const fieldLocator = this.getFieldLocator(fieldId);\n\n    const fieldDefinition$ = this.isAssociatedRecordFieldId(fieldId)\n      ? this.rxRecordDefinitionCacheService.getRecordDefinition(associatedRecordDefinitionName).pipe(\n          map((associatedRecordDefinition) => {\n            const isCoreIdField = fieldLocator.fieldId === String(RX_RECORD_DEFINITION.coreFieldIds.id);\n\n            const displayFieldId = String(\n              (isCoreIdField && associatedRecordDefinition.displayFieldIdInAssociation) || fieldLocator.fieldId\n            );\n\n            return find(\n              associatedRecordDefinition.fieldDefinitions,\n              (fieldDefinition) => String(fieldDefinition.id) === displayFieldId\n            );\n          })\n        )\n      : of(find(primaryRecordDefinition.fieldDefinitions, (fieldDefinition) => String(fieldDefinition.id) === fieldId));\n\n    return fieldDefinition$;\n  }\n\n  getColumnLabel(fieldDefinition: IFieldDefinition, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor ? `${associationDescriptor.label} > ${fieldDefinition.name}` : fieldDefinition.name;\n  }\n\n  findAssociationDescriptor(\n    associationDescriptors: IAssociationDescriptor[],\n    locator: IFieldLocator\n  ): IAssociationDescriptor {\n    return find(associationDescriptors, (associationDescriptor: IAssociationDescriptor) => {\n      return (\n        associationDescriptor.associationDefinition.guid === locator.associationGuid &&\n        associationDescriptor.nodeSide === locator.associationNodeSide\n      );\n    });\n  }\n\n  getFieldLocator(gridColumnFieldId: string): IFieldLocator {\n    const match = new RegExp('(?:' + RX_RECORD_GRID.associatedFieldIdPrefixPattern + ')?(.+)').exec(gridColumnFieldId);\n\n    return {\n      associationGuid: match[1],\n      associationNodeSide: match[2],\n      fieldId: match[3]\n    };\n  }\n\n  private isNeedSide(sideName: string, recordDefinitionName: string, recordDefinition: IRecordDefinition): boolean {\n    return includes([recordDefinitionName, get(recordDefinition, 'inheritanceDescriptor.inheritingFrom')], sideName);\n  }\n\n  private getAssociationLabel(associationDefinition: IAssociationDefinition, nodeSide: IAssociationNode): string {\n    let nodeSideName: string;\n    let label = this.rxDefinitionNameService.getDisplayName(associationDefinition.name);\n\n    if (associationDefinition.nodeAId === associationDefinition.nodeBId) {\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA) {\n        nodeSideName = associationDefinition.nodeAName;\n      }\n\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB) {\n        nodeSideName = associationDefinition.nodeBName;\n      }\n\n      nodeSideName = nodeSideName || nodeSide.defaultName;\n\n      label += ' (' + nodeSideName + ')';\n    }\n\n    return label;\n  }\n\n  isSharedFilterPresetTag(tag: IRecordGridFilterTag): tag is TagModel<ISharedFilterPresetTagModel> {\n    return (tag.data as ISharedFilterPresetTagModel).isSharedFilterPreset;\n  }\n\n  getTestIdForGridColumn(fieldId: string): string {\n    if (this.isAssociatedRecordFieldId(fieldId)) {\n      const fieldLocator = this.getFieldLocator(fieldId);\n      return `field-id-${fieldLocator.associationGuid}-${fieldLocator.fieldId}`;\n    } else {\n      return `field-id-${fieldId}`;\n    }\n  }\n\n  isSearchable(fieldDefinition: IFieldDefinition, recordDefinition?: IRecordDefinition): boolean {\n    return (\n      includes(\n        [\n          RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ],\n        fieldDefinition.resourceType\n      ) &&\n      !this.rxFieldDefinitionService.isPassword(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isSecured(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isDataProviderIdField(fieldDefinition, recordDefinition)\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IRecordGridDesignColumnData } from '../../record-grid-column-editor.types';\nimport { RecordGridColumnAlignment } from '../../../../../common/types/record-grid-column-alignment.enum';\nimport { IColumnEditorProperty } from '../types/column-editor-property.types';\n\n@Component({\n  selector: 'rx-column-editor-alignment',\n  templateUrl: './column-editor-alignment.component.html',\n  styleUrls: ['./column-editor-alignment.component.scss']\n})\nexport class ColumnEditorAlignmentComponent {\n  @Input()\n  column: IRecordGridDesignColumnData;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @Input()\n  columnProperty: IColumnEditorProperty;\n\n  trackByForAlignmentOptions(index: number, alignment: RecordGridColumnAlignment): string | number {\n    return alignment || index;\n  }\n}\n","<div class=\"btn-group py-2 btn-group-toggle\" data-toggle=\"buttons\">\n  <label\n    class=\"btn btn-sm rounded btn-secondary {{ selectionValue.icon }}\"\n    *ngFor=\"let selectionValue of columnProperty.selectionValues; trackBy: trackByForAlignmentOptions\"\n    [class.active]=\"column.alignment === selectionValue.value\"\n    [class.disabled]=\"isReadOnly\"\n    [adaptTooltip]=\"selectionValue.name\"\n    [attr.rx-id]=\"selectionValue.name\"\n  >\n    <input\n      size=\"small\"\n      type=\"radio\"\n      name=\"selectionValue.name\"\n      [attr.rx-id]=\"selectionValue.value\"\n      [value]=\"selectionValue.value\"\n      [(ngModel)]=\"column.alignment\"\n      [disabled]=\"isReadOnly\"\n    />\n  </label>\n</div>\n","import { IColumnEditorColumnData } from '../../design/editors/record-grid-column-editor-control/record-grid-column-editor.types';\n\nexport interface ICellDisplayPropertiesEditorConfig {\n  cellDisplayProperties: ICellDisplayProperties[];\n  isReadOnly: boolean;\n  columns: IColumnEditorColumnData[];\n}\n\nexport interface ICellDisplayProperties {\n  fieldValueCondition: string;\n  displayAsBadge: boolean;\n  badgeColor: string;\n  icon: string;\n  iconPosition: RxGridCellIconPosition;\n  textColor: RxGridCellColor;\n  backgroundColor: RxGridCellColor;\n  fontSize: RxGridCellFontSize;\n  bold: boolean;\n  italic: boolean;\n  isOpen?: boolean;\n}\n\nexport enum RxGridCellFontSize {\n  Small = 'small',\n  Large = 'large'\n}\n\nexport enum RxGridCellColor {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Light = 'light',\n  Active = 'active',\n  Info = 'info',\n  Success = 'success',\n  Warning = 'warning',\n  Danger = 'danger'\n}\n\nexport enum RxGridCellIconPosition {\n  Left = 'left',\n  Right = 'right',\n  ReplaceText = 'replaceText'\n}\n\nexport const RxGridCellFontColorCssMap = {\n  [RxGridCellColor.Primary]: 'text-primary',\n  [RxGridCellColor.Secondary]: 'text-secondary',\n  [RxGridCellColor.Light]: 'text-white',\n  [RxGridCellColor.Active]: 'text-active',\n  [RxGridCellColor.Info]: 'text-info',\n  [RxGridCellColor.Success]: 'text-success',\n  [RxGridCellColor.Warning]: 'text-warning',\n  [RxGridCellColor.Danger]: 'text-danger'\n};\n\nexport const RxGridCellBgColorCssMap = {\n  [RxGridCellColor.Primary]: 'bg-primary',\n  [RxGridCellColor.Secondary]: 'bg-secondary',\n  [RxGridCellColor.Active]: 'bg-active',\n  [RxGridCellColor.Info]: 'bg-info',\n  [RxGridCellColor.Success]: 'bg-success',\n  [RxGridCellColor.Warning]: 'bg-warning',\n  [RxGridCellColor.Danger]: 'bg-danger'\n};\n\nexport const RX_CELL_PROPERTIES = {\n  colorsList: [\n    {\n      label: 'Default',\n      value: null\n    },\n    {\n      label: 'Primary',\n      value: RxGridCellColor.Primary\n    },\n    {\n      label: 'Secondary',\n      value: RxGridCellColor.Secondary\n    },\n    {\n      label: 'Light',\n      value: RxGridCellColor.Light\n    },\n    {\n      label: 'Active',\n      value: RxGridCellColor.Active\n    },\n    {\n      label: 'Information',\n      value: RxGridCellColor.Info\n    },\n    {\n      label: 'Success',\n      value: RxGridCellColor.Success\n    },\n    {\n      label: 'Warning',\n      value: RxGridCellColor.Warning\n    },\n    {\n      label: 'Danger',\n      value: RxGridCellColor.Danger\n    }\n  ],\n\n  iconPositions: [\n    {\n      label: 'Left',\n      value: RxGridCellIconPosition.Left\n    },\n    {\n      label: 'Right',\n      value: RxGridCellIconPosition.Right\n    },\n    {\n      label: 'Replace text',\n      value: RxGridCellIconPosition.ReplaceText\n    }\n  ],\n\n  fontSizes: [\n    {\n      label: 'Default',\n      value: null\n    },\n    {\n      label: 'Small',\n      value: RxGridCellFontSize.Small\n    },\n    {\n      label: 'Large',\n      value: RxGridCellFontSize.Large\n    }\n  ]\n};\n","import { IDataDictionary, IExpressionConfigurator, RxExpressionConfigurator } from '@helix/platform/shared/api';\nimport { Observable, of } from 'rxjs';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\n\nexport class RecordGridCellDisplayPropertiesExpressionConfigurator\n  extends RxExpressionConfigurator\n  implements IExpressionConfigurator {\n  commonDataDictionary$: Observable<IDataDictionary>;\n\n  cellDisplayExpressionDataDictionary(columns: IColumnEditorColumnData[]): Observable<IDataDictionary> {\n    if (columns.length) {\n      return of(\n        columns.map((column: IColumnEditorColumnData) => ({\n          label: column.label,\n          icon: 'd-icon-field_text',\n          expression: `\\${view.components.grid.clickableRow.${column.fieldId}}`,\n          resourceType: column.fieldDefinition.resourceType\n        }))\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Component, ElementRef, Injector, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ICellDisplayProperties,\n  ICellDisplayPropertiesEditorConfig,\n  RX_CELL_PROPERTIES,\n  RxGridCellBgColorCssMap,\n  RxGridCellColor,\n  RxGridCellIconPosition\n} from '../../../../../common/types/cell-display-properties.types';\nimport {\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  IIconPickerFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ExpressionOperatorGroup, IPlainObject } from '@helix/platform/shared/api';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { forEach, get, omit } from 'lodash';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RecordGridCellDisplayPropertiesExpressionConfigurator } from './cell-display-properties-expression-configurator.class';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cell-display-properties-editor',\n  templateUrl: './cell-display-properties-editor.component.html',\n  styleUrls: ['./cell-display-properties-editor.component.scss']\n})\nexport class RecordGridCellDisplayPropertiesEditorComponent extends RxModalClass implements OnInit, OnDestroy {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  private expressionConfigurator: RecordGridCellDisplayPropertiesExpressionConfigurator;\n\n  config: ICellDisplayPropertiesEditorConfig = this.activeModalRef.getData();\n  queryExpressionOptions: IExpressionFormControlOptions;\n  propsFormArray: FormArray = this.formBuilder.array([]);\n  iconPositions: RxSelectOption[] = RX_CELL_PROPERTIES.iconPositions;\n  textColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList;\n  fontSizes: RxSelectOption[] = RX_CELL_PROPERTIES.fontSizes;\n  colorsList: IPlainObject = RxGridCellBgColorCssMap;\n\n  backgroundColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => color.value !== RxGridCellColor.Light\n  );\n\n  badgeColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => ![RxGridCellColor.Light, RxGridCellColor.Active, null].includes(color.value)\n  );\n\n  iconPickerOptions: IIconPickerFormControlOptions = {\n    label: 'Icon',\n    appendToBody: true,\n    required: false\n  };\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.expressionConfigurator = new RecordGridCellDisplayPropertiesExpressionConfigurator();\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'cellDisplayProperties',\n      dataDictionary$: this.expressionConfigurator.cellDisplayExpressionDataDictionary(this.config.columns),\n      operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.AllClient)\n    });\n\n    this.queryExpressionOptions = {\n      label: 'Field value condition',\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('cellDisplayProperties'),\n      operators: this.expressionConfigurator.getOperators('cellDisplayProperties'),\n      isRequired: true\n    };\n\n    forEach(this.config.cellDisplayProperties, (props) => this.propsFormArray.push(this.getFormGroup(props)));\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  addCellProperties(): void {\n    this.markAsDirty();\n\n    this.propsFormArray.push(\n      this.getFormGroup({\n        fieldValueCondition: '',\n        displayAsBadge: false,\n        badgeColor: null,\n        icon: null,\n        iconPosition: null,\n        textColor: null,\n        backgroundColor: null,\n        fontSize: null,\n        bold: false,\n        italic: false,\n        isOpen: true\n      })\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeCellProperties(index: number): void {\n    this.propsFormArray.removeAt(index);\n    this.markAsDirty();\n  }\n\n  optionFormatter(selectOption: RxSelectOption): string {\n    return selectOption.label;\n  }\n\n  private getFormGroup(properties: ICellDisplayProperties): FormGroup {\n    const formGroup = this.formBuilder.group({\n      fieldValueCondition: [properties.fieldValueCondition, Validators.required],\n      displayAsBadge: [properties.displayAsBadge],\n      badgeColor: {\n        value: this.getSelectValue(this.badgeColors, 'value', properties.badgeColor),\n        disabled: !properties.displayAsBadge\n      },\n      icon: {\n        value: properties.icon,\n        disabled: properties.displayAsBadge\n      },\n      iconPosition: {\n        value: this.getSelectValue(this.iconPositions, 'value', properties.iconPosition),\n        disabled: !properties.icon\n      },\n      textColor: {\n        value: this.getSelectValue(this.textColors, 'value', properties.textColor),\n        disabled: properties.displayAsBadge\n      },\n      backgroundColor: {\n        value: this.getSelectValue(this.backgroundColors, 'value', properties.backgroundColor),\n        disabled: properties.displayAsBadge\n      },\n      fontSize: {\n        value: this.getSelectValue(this.fontSizes, 'value', properties.fontSize),\n        disabled: properties.displayAsBadge\n      },\n      bold: [properties.bold],\n      italic: [properties.italic],\n      isOpen: [properties.isOpen ?? false]\n    });\n\n    formGroup.controls.displayAsBadge.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((displayAsBadge: boolean) => {\n        if (displayAsBadge && formGroup.controls.badgeColor.disabled) {\n          formGroup.controls.badgeColor.reset({ value: [this.badgeColors[0]], disabled: false });\n        }\n\n        if (!displayAsBadge && formGroup.controls.badgeColor.enabled) {\n          formGroup.controls.badgeColor.reset({ value: [], disabled: true });\n        }\n      });\n\n    formGroup.controls.icon.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((iconName: string) => {\n      if (iconName && formGroup.controls.iconPosition.disabled) {\n        formGroup.controls.iconPosition.reset({ value: [this.iconPositions[0]], disabled: false });\n      }\n\n      if (!iconName && formGroup.controls.iconPosition.enabled) {\n        formGroup.controls.iconPosition.reset({ value: [], disabled: true });\n      }\n    });\n\n    return formGroup;\n  }\n\n  private getSelectValue(optionsList: RxSelectOption[], key: string, value: string): RxSelectOption[] {\n    const item = optionsList.find((option) => option[key] === value);\n\n    return item ? [item] : [];\n  }\n\n  openExpressionEditor(control: AbstractControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'cellDisplayProperties',\n          value: control.value,\n          label: 'Cell display properties'\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.column.label'),\n            icon: 'd-icon-field_text'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        control.setValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  moveCellProperties(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.propsFormArray.controls, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onSelectedCellPropertyDrop(event: CdkDragDrop<any[], any>): void {\n    moveItemInArray(this.propsFormArray.controls, event.previousIndex, event.currentIndex);\n\n    this.markAsDirty();\n  }\n\n  toggleProp(control: AbstractControl): void {\n    control.setValue(!control.value);\n    this.markAsDirty();\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.propsFormArray.controls.forEach((control) => {\n      control.get('isOpen').setValue(expandAll);\n    });\n  }\n\n  resetIconAndTextProps(props: AbstractControl): void {\n    const isDisplayAsBadge: boolean = props.get('displayAsBadge').value;\n\n    props.get('icon').reset({ value: null, disabled: isDisplayAsBadge });\n    props.get('textColor').reset({ value: [this.textColors[0]], disabled: isDisplayAsBadge });\n    props.get('backgroundColor').reset({ value: [this.backgroundColors[0]], disabled: isDisplayAsBadge });\n    props.get('fontSize').reset({ value: [this.fontSizes[0]], disabled: isDisplayAsBadge });\n    props.get('bold').reset({ value: false, disabled: isDisplayAsBadge });\n    props.get('italic').reset({ value: false, disabled: isDisplayAsBadge });\n  }\n\n  onSave(): void {\n    const formValues: ICellDisplayProperties[] = this.propsFormArray.getRawValue().map((value) => ({\n      ...value,\n      icon: get(value, 'icon', null),\n      badgeColor: get(value, 'badgeColor[0].value', null),\n      iconPosition: get(value, 'iconPosition[0].value', null),\n      textColor: get(value, 'textColor[0].value', null),\n      backgroundColor: get(value, 'backgroundColor[0].value', null),\n      fontSize: get(value, 'fontSize[0].value', null)\n    }));\n\n    const cellProps: ICellDisplayProperties[] = formValues.map((value) => ({\n      ...omit(value, 'isOpen')\n    }));\n\n    this.activeModalRef.close(cellProps);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <div>\n          <button\n            *ngIf=\"!config.isReadOnly\"\n            class=\"pl-0 pr-0\"\n            rx-id=\"add-button\"\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            (click)=\"addCellProperties()\"\n          >\n            <span class=\"d-icon-left-plus_circle\"></span>\n\n            {{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.add-cell-display-property.button.label' | translate }}\n          </button>\n\n          <span\n            class=\"d-icon-right-question_circle_o ml-1 mt-1\"\n            adaptPopover=\"Cell display properties will be applied based on the first field value condition evaluating to true.\"\n            placement=\"bottom\"\n            appendToBody=\"true\"\n          ></span>\n        </div>\n\n        <div *ngIf=\"propsFormArray.controls.length\" class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"toggleOpen(true)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"propsFormArray.controls.length\"\n        id=\"selected-cell-property\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedCellPropertyDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let props of propsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last;\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"props\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"props\"\n              [isOpen]=\"props.get('isOpen').value\"\n              (open)=\"props.get('isOpen').setValue(true)\"\n              (close)=\"props.get('isOpen').setValue(false)\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"'Cell display properties ' + (index + 1)\" rx-id=\"card-title\">\n                      Cell display properties {{ index + 1 }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeCellProperties(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <rx-expression-form-control\n                  formControlName=\"fieldValueCondition\"\n                  class=\"form-group d-block col-12\"\n                  rx-id=\"query-expression-field\"\n                  [options]=\"queryExpressionOptions\"\n                  (events)=\"openExpressionEditor(props.get('fieldValueCondition'))\"\n                ></rx-expression-form-control>\n              </div>\n\n              <div class=\"row form-group\">\n                <div class=\"col-3\">\n                  <adapt-rx-control-label\n                    label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.display-as-badge-field.label' | translate }}\"\n                  ></adapt-rx-control-label>\n\n                  <adapt-rx-switch\n                    [disabled]=\"config.isReadOnly\"\n                    formControlName=\"displayAsBadge\"\n                    (ngModelChange)=\"markAsDirty(); resetIconAndTextProps(props)\"\n                  ></adapt-rx-switch>\n                </div>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.badge-color-field.label' | translate }}\"\n                  formControlName=\"badgeColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"badgeColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <rx-icon-picker-form-control\n                  class=\"d-block col-3\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPickerOptions\"\n                  formControlName=\"icon\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-icon-picker-form-control>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.icon-position-field.label' | translate }}\"\n                  formControlName=\"iconPosition\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPositions\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n              </div>\n\n              <div class=\"row\">\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.text-color-field.label' | translate }}\"\n                  formControlName=\"textColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"textColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.background-color-field.label' | translate }}\"\n                  formControlName=\"backgroundColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"backgroundColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.font-size-field.label' | translate }}\"\n                  formControlName=\"fontSize\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"fontSizes\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <div class=\"col-3 pt-4 d-flex align-item-center\">\n                  <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label\n                      class=\"btn btn-secondary d-icon-bold_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('bold').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('bold'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n\n                    <label\n                      class=\"btn btn-secondary ml-2 d-icon-italic_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('italic').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('italic'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!propsFormArray.controls.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.empty-state.message' | translate }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"propsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ config.isReadOnly ? ('com.bmc.arsys.rx.client.common.close.label' | translate) : ('com.bmc.arsys.rx.client.common.cancel.label' | translate) }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <div class=\"d-flex align-items-center\">\n    <div [ngClass]=\"option.value ? 'color-option-box rounded mr-2 ' + colorsList[option.value] : ''\"></div>\n    {{ option.label }}\n  </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { cloneDeep, noop } from 'lodash';\nimport { RecordGridCellDisplayPropertiesEditorComponent } from './cell-display-properties-editor.component';\nimport {\n  ICellDisplayProperties,\n  ICellDisplayPropertiesEditorConfig\n} from '../../../../../common/types/cell-display-properties.types';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-cell-display-properties',\n  templateUrl: './cell-display-properties.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridCellDisplayPropertiesComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridCellDisplayPropertiesComponent extends ValueAccessor<ICellDisplayProperties[]> {\n  @Input()\n  columnName: string;\n\n  @Input()\n  columns: IColumnEditorColumnData[];\n\n  constructor(private rxModalService: RxModalService) {\n    super();\n  }\n\n  openPropertiesEditor(): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit cell display properties for ${this.columnName}`,\n        data: {\n          cellDisplayProperties: this.value ? cloneDeep(this.value) : [],\n          isReadOnly: this.isDisabled,\n          columns: this.columns\n        } as ICellDisplayPropertiesEditorConfig,\n        content: RecordGridCellDisplayPropertiesEditorComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-cell-display-properties'\n      })\n      .then((properties: ICellDisplayProperties[]) => {\n        this.value = properties;\n      })\n      .catch(noop);\n  }\n}\n","<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0\" (click)=\"openPropertiesEditor()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit cell display properties\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"!value?.length\" class=\"text-tertiary\">No cell display properties added.</span>\n  <span *ngIf=\"value?.length > 0\" class=\"text-tertiary\">Cell display properties added.</span>\n</div>\n","export const RX_RECORD_GRID_DESIGN = {\n  keywords: {\n    label: 'Keywords',\n    children: [\n      {\n        label: 'Current user',\n        icon: 'd-icon-dollar',\n        expression: '$USER$'\n      },\n      {\n        label: 'Current date',\n        icon: 'd-icon-dollar',\n        expression: '$DATE$'\n      },\n      {\n        label: 'Current time',\n        icon: 'd-icon-dollar',\n        expression: '$TIME$'\n      },\n      {\n        label: 'Current date and time',\n        icon: 'd-icon-dollar',\n        expression: '$TIMESTAMP$'\n      },\n      {\n        label: 'Current week day',\n        icon: 'd-icon-dollar',\n        expression: '$WEEKDAY$'\n      },\n      {\n        label: 'Current groups',\n        icon: 'd-icon-dollar',\n        expression: '$GROUPS$'\n      },\n      {\n        label: 'Current group IDs',\n        icon: 'd-icon-dollar',\n        expression: '$GROUPIDS$'\n      },\n      {\n        label: 'Current roles',\n        icon: 'd-icon-dollar',\n        expression: '$ROLES$'\n      },\n      {\n        label: 'Current user locale',\n        icon: 'd-icon-dollar',\n        expression: '$LOCALE$'\n      },\n      {\n        label: 'Current server URL',\n        icon: 'd-icon-dollar',\n        expression: '$SERVERURL$'\n      },\n      {\n        label: 'NULL',\n        icon: 'd-icon-dollar',\n        expression: '$NULL$',\n        hidden: true\n      }]\n  }\n};\n","import { Injectable, Injector } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { RxViewDataDictionaryService, RxViewExpressionConfigurator } from '@helix/platform/view/designer';\nimport { map } from 'rxjs/operators';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { RX_RECORD_GRID_DESIGN } from '../../../../../record-grid-design.constant';\n\n@Injectable()\nexport class NamedFilterOptionExpressionConfigurator extends RxViewExpressionConfigurator {\n  readonly commonDataDictionary$ = this.rxViewDataDictionaryService.commonDataDictionary$.pipe(\n    map((dataDictionary) => [\n      {\n        expression: `'${this.activeModalRef.getData().column.fieldId}'`,\n        icon: 'd-icon-file_o_gear',\n        label: this.activeModalRef.getData().column.title\n      },\n      RX_RECORD_GRID_DESIGN.keywords,\n      // removing 'General' and 'Functions' groups from data dictionary.\n      ...dataDictionary.slice(2)\n    ])\n  );\n\n  constructor(\n    protected injector: Injector,\n    private activeModalRef: ActiveModalRef,\n    private rxViewDataDictionaryService: RxViewDataDictionaryService,\n    private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService\n  ) {\n    super(injector);\n  }\n\n  getExpressionEvaluator(): IExpressionEvaluator {\n    return this.rxDefaultExpressionEvaluatorService;\n  }\n}\n","import { AfterViewInit, Component, ElementRef, Injector, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { forEach, includes, map } from 'lodash';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { INamedFilterOptionDesignData, INamedFilterOptionsEditorConfig } from '../named-filter-options.types';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { NamedFilterOptionExpressionConfigurator } from './named-filter-option-expression-configurator.class';\nimport { ExpressionOperatorGroup, ExpressionOperatorRowsByGroup } from '@helix/platform/shared/api';\n\ninterface IAccordionTabs {\n  [id: string]: boolean;\n}\n\n@Component({\n  selector: 'rx-named-filter-options-editor-modal',\n  templateUrl: './named-filter-options-editor-modal.component.html',\n  styleUrls: ['./named-filter-options-editor-modal.component.scss'],\n  providers: [NamedFilterOptionExpressionConfigurator]\n})\nexport class RecordGridNamedFilterOptionsEditorModalComponent extends RxModalClass implements OnInit, AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  config: INamedFilterOptionsEditorConfig = this.activeModalRef.getData();\n  queryExpressionOptions: IExpressionFormControlOptions;\n  namedFilterOptionsFormArray: FormArray = this.formBuilder.array([]);\n\n  accordionTabs: IAccordionTabs = {};\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private rxGuidService: RxGuidService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    private expressionConfigurator: NamedFilterOptionExpressionConfigurator,\n    injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'namedFilterOptions',\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.All)\n    });\n\n    this.queryExpressionOptions = {\n      label: 'Filter',\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('namedFilterOptions'),\n      operators: this.expressionConfigurator.getOperators('namedFilterOptions'),\n      isRequired: true\n    };\n\n    forEach(this.config.namedFilterOptions, (props, index) => {\n      this.accordionTabs[props.guid] = index === this.config.activeIndex;\n\n      this.namedFilterOptionsFormArray.push(this.getFormGroup(props));\n    });\n\n    if (this.config.isReadOnly) {\n      this.namedFilterOptionsFormArray.disable();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.config.activeIndex) {\n      this.accordionTabEls.toArray()[this.config.activeIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  addNamedFilterOption(): void {\n    this.markAsDirty();\n\n    const guid = this.rxGuidService.generate();\n\n    this.accordionTabs[guid] = true;\n\n    let title = 'New filter option';\n    let counter = 0;\n    let titleAlreadyExists = false;\n    const titles = map(this.namedFilterOptionsFormArray.getRawValue(), 'title');\n\n    do {\n      title = counter === 0 ? title : `New filter option ${counter}`;\n      counter++;\n      titleAlreadyExists = includes(titles, title);\n    } while (titleAlreadyExists);\n\n    this.namedFilterOptionsFormArray.push(\n      this.getFormGroup({\n        data: {\n          title,\n          filterExpression: '',\n          index: this.namedFilterOptionsFormArray.length\n        },\n        guid\n      })\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeNamedFilterOption(index: number): void {\n    this.namedFilterOptionsFormArray.removeAt(index);\n    this.markAsDirty();\n  }\n\n  openExpressionEditor(title: AbstractControl, filterExpression: AbstractControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'namedFilterOptions',\n          value: filterExpression.value,\n          label: title.value\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        filterExpression.setValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  moveNamedFilterOption(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.namedFilterOptionsFormArray.controls, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onSelectedNamedFilterOptionDrop(event: CdkDragDrop<any[], any>): void {\n    moveItemInArray(this.namedFilterOptionsFormArray.controls, event.previousIndex, event.currentIndex);\n    this.markAsDirty();\n  }\n\n  onSave(): void {\n    const formValues = this.namedFilterOptionsFormArray.getRawValue();\n\n    const namedFilterOptions: INamedFilterOptionDesignData[] = formValues.map(\n      ({ guid, title, filterExpression }, index) => ({\n        guid,\n        data: {\n          title,\n          filterExpression,\n          index\n        }\n      })\n    );\n\n    this.activeModalRef.close(namedFilterOptions);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    forEach(this.accordionTabs, (val, key) => {\n      this.accordionTabs[key] = expandAll;\n    });\n  }\n\n  private getCheckTitleDuplicateValidator(currentNamedFilterOption: INamedFilterOptionDesignData): ValidatorFn {\n    return (control: AbstractControl) => {\n      const title = control.value;\n\n      if (\n        title &&\n        this.namedFilterOptionsFormArray.controls.some(\n          (namedFilterOption) =>\n            namedFilterOption.value.title === title && namedFilterOption.value.guid !== currentNamedFilterOption.guid\n        )\n      ) {\n        return { duplicateFilterOptionName: { message: 'Filter option with this name already exists.' } };\n      }\n\n      return null;\n    };\n  }\n\n  private getFormGroup(properties: INamedFilterOptionDesignData): FormGroup {\n    return this.formBuilder.group({\n      guid: properties.guid,\n      title: [\n        properties.data.title,\n        [\n          Validators.required,\n          this.getCheckTitleDuplicateValidator(properties).bind(this),\n          (control: AbstractControl) =>\n            control?.value?.includes(';')\n              ? { invalidName: { message: 'A filter option name cannot contain any of the following characters: ;' } }\n              : null\n        ]\n      ],\n      filterExpression: [properties.data.filterExpression, Validators.required]\n    });\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!config.isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addNamedFilterOption()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.named-filter-options.add-named-filter-option.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"namedFilterOptionsFormArray.controls.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"namedFilterOptionsFormArray.controls.length\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedNamedFilterOptionDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let namedFilterOption of namedFilterOptionsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"namedFilterOption\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"namedFilterOption\"\n              [isOpen]=\"accordionTabs[namedFilterOption.get('guid').value]\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"namedFilterOption.get('title').value\" rx-id=\"card-title\">\n                      {{ namedFilterOption.get('title').value }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeNamedFilterOption(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                rx-id=\"filter-option-name-field\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.view-components.named-filter-options.name-field.label' | translate\n                }}\"\n                formControlName=\"title\"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n                rxNoWhitespace\n              ></adapt-rx-textfield>\n\n              <rx-expression-form-control\n                formControlName=\"filterExpression\"\n                rx-id=\"query-expression-field\"\n                [options]=\"queryExpressionOptions\"\n                (events)=\"\n                  openExpressionEditor(namedFilterOption.get('title'), namedFilterOption.get('filterExpression'))\n                \"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-expression-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div\n        *ngIf=\"!namedFilterOptionsFormArray.controls.length\"\n        class=\"d-flex justify-content-center h-100 align-items-center mt-2\"\n      >\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.named-filter-options.empty-state.message' | translate }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"this.namedFilterOptionsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { cloneDeep, noop, without } from 'lodash';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { RecordGridNamedFilterOptionsEditorModalComponent } from './named-filter-options-editor/named-filter-options-editor-modal.component';\nimport { INamedFilterOptionsEditorConfig, INamedFilterOptionDesignData } from './named-filter-options.types';\n\n@Component({\n  selector: 'rx-named-filter-options',\n  templateUrl: './named-filter-options.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridNamedFilterOptionsComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridNamedFilterOptionsComponent extends ValueAccessor<INamedFilterOptionDesignData[]> {\n  @Input()\n  column: IColumnEditorColumnData;\n\n  @Input()\n  tooltip: string;\n\n  constructor(private rxModalService: RxModalService) {\n    super();\n  }\n\n  openNamedFilterOptions(activeIndex?: number): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit named filter options for ${this.column.title}`,\n        data: {\n          namedFilterOptions: this.value ? cloneDeep(this.value) : [],\n          isReadOnly: this.isDisabled,\n          activeIndex,\n          column: this.column\n        } as INamedFilterOptionsEditorConfig,\n        content: RecordGridNamedFilterOptionsEditorModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-named-filter-options'\n      })\n      .then((namedFilterOptions: INamedFilterOptionDesignData[]) => {\n        this.value = namedFilterOptions;\n      })\n      .catch(noop);\n  }\n\n  editNamedFilterOption(activeIndex: number): void {\n    this.openNamedFilterOptions(activeIndex);\n  }\n\n  removeFilterOption(namedFilterOption: INamedFilterOptionDesignData): void {\n    this.value = without(this.value, namedFilterOption);\n  }\n}\n","<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0 pb-1\" (click)=\"openNamedFilterOptions()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit named filter options\n</adapt-button>\n\n<span *ngIf=\"tooltip\" class=\"align-middle\">\n  <span class=\"letter-space\"></span>\n  <adapt-icon [name]=\"'question_circle_o'\" [adaptPopover]=\"tooltip\" appendToBody=\"true\"></adapt-icon>\n</span>\n\n<div rx-id=\"named-filter-options\">\n  <div *ngIf=\"!value?.length\" class=\"text-tertiary\">No named filter options added.</div>\n  <ul class=\"list-unstyled mb-0\" *ngIf=\"value?.length > 0\">\n    <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let option of value; let index = index\">\n      <strong class=\"mr-auto text-break\">{{ option.data.title }}</strong>\n\n      <button\n        class=\"d-icon-left-pencil p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        (click)=\"editNamedFilterOption(index)\"\n        rx-id=\"edit-button\"\n      ></button>\n\n      <button\n        class=\"d-icon-left-cross_adapt p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterOption(option)\"\n        rx-id=\"remove-button\"\n      ></button>\n    </li>\n  </ul>\n</div>\n","import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Injector,\n  NgZone,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  ActiveModalRef,\n  AdaptAccordionTabComponent,\n  AdaptTreeNodeTyped,\n  DismissReasons,\n  TreeWrap\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RX_RECORD_DEFINITION\n} from '@helix/platform/record/api';\nimport { IExpressionConfigurator, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { ActionListControlComponent, NamedListFilterExpressionConfigurator } from '@helix/platform/view/designer';\nimport { every, find, findIndex, forEach, get, isEmpty, isNil, remove } from 'lodash';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport {\n  IColumnEditorAvailableColumn,\n  IColumnEditorColumnData,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData\n} from '../record-grid-column-editor.types';\nimport { IAvailableColumnTreeData } from './types/available-column-tree-data.interface';\nimport { IColumnEditorProperty } from './types/column-editor-property.types';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  templateUrl: './record-grid-column-editor-modal.component.html',\n  styleUrls: ['./record-grid-column-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridColumnEditorModalComponent extends RxModalClass implements AfterViewInit {\n  columns: IColumnEditorColumnData[];\n  recordDefinition: IRecordDefinition;\n  columnProperties = RX_RECORD_GRID.columnProperties;\n  actionsColumnProperties = RX_RECORD_GRID.actionsColumnProperties;\n  filteredColumns: IColumnEditorAvailableColumn[] = [];\n  availableColumnsTree: AdaptTreeNodeTyped<IAvailableColumnTreeData>[] = [];\n  startedLoadingAssociationDescriptors = false;\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n  expressionConfigurator: IExpressionConfigurator;\n  isReadOnly: boolean;\n\n  columnWidthPropertyOptions: IStepperWithUnitsFormControlOptions = this.columnProperties.find(\n    ({ name }) => name === 'width'\n  ).options as IStepperWithUnitsFormControlOptions;\n\n  typeaheadKeystrokeCountOptions: ISelectFormControlOptions = {\n    ...this.columnProperties.find(({ name }) => name === 'typeaheadKeystrokeCount').options,\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-column.keystroke-count.tooltip'\n      )\n    )\n  } as ISelectFormControlOptions;\n\n  @ViewChildren('draggableSelectedColumn', { read: CdkDrag })\n  draggableSelectedColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChild('selectedColumnsDropList', { read: CdkDropList })\n  selectedColumnsDropList: CdkDropList;\n\n  @ViewChildren('draggableAssociatedAvailableColumn', { read: CdkDrag })\n  draggableAssociatedAvailableColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChildren(ActionListControlComponent)\n  actionListControlComponents: QueryList<ActionListControlComponent>;\n\n  @ViewChild('associatedAvailableColumnsDropList', { read: CdkDropList })\n  associatedAvailableColumnsDropList: CdkDropList;\n\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  private readonly activeColumn: IRecordGridDesignColumnData;\n  private readonly activeActionIndex: number;\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private definitionNameService: RxDefinitionNameService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxGuidService: RxGuidService,\n    private ngZone: NgZone,\n    protected injector: Injector,\n    private translateService: TranslateService,\n    private rxExpressionEditorService: RxExpressionEditorService\n  ) {\n    super(activeModalRef, injector);\n    const params = this.activeModalRef.getData().columnParams as IRecordGridColumnEditorModalParams;\n\n    this.activeColumn = params.activeColumn;\n    this.activeActionIndex = params.activeActionIndex;\n    this.recordDefinition = params.recordDefinition;\n    this.isReadOnly = params.isReadOnly;\n\n    this.columns = params.columns\n      .map((column): IColumnEditorColumnData => {\n        const additionalQueryCriteriaExpressionOptions = column.fieldDefinition.namedListDefinition\n          ? this.getAdditionalQueryCriteriaExpressionOptions(column)\n          : null;\n\n        return {\n          ...column,\n          isOpen: column === this.activeColumn,\n          label: this.rxRecordGridUtilsService.getColumnLabel(column.fieldDefinition, column.associationDescriptor),\n          clickable: !isEmpty(column.actions),\n          additionalQueryCriteriaExpressionOptions\n        };\n      })\n      .sort((a, b) => a.index - b.index);\n\n    this.getAvailableColumnsTree();\n  }\n\n  ngAfterViewInit(): void {\n    this.updateSelectedColumnsDropList();\n    this.openActiveAction();\n\n    const openGridColumnIndex = findIndex(this.columns, 'isOpen');\n\n    if (openGridColumnIndex !== -1) {\n      this.accordionTabEls.toArray()[openGridColumnIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  updateSelectedColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableSelectedColumns, this.selectedColumnsDropList);\n  }\n\n  updateAssociatedAvailableColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableAssociatedAvailableColumns, this.associatedAvailableColumnsDropList);\n  }\n\n  updateColumnsDropList(\n    draggableColumnsList: QueryList<CdkDrag<IColumnEditorColumnData>>,\n    dropList: CdkDropList<IColumnEditorColumnData[]>\n  ): void {\n    // Workaround: update due to injection bug with the adapt-accordion and adapt-tree\n    const draggableColumns = draggableColumnsList.toArray();\n    const columns = this.columns;\n\n    draggableColumns.sort((column1, column2) => {\n      return columns.indexOf(column1.data) - columns.indexOf(column2.data);\n    });\n\n    dropList._dropListRef.withItems(\n      draggableColumns.map((drag) => {\n        const dragRef = drag._dragRef as any;\n\n        if (!dragRef._initialContainer) {\n          dragRef._initialContainer = dropList._dropListRef;\n        }\n\n        return drag._dragRef;\n      })\n    );\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onDropInSelectedColumnsContainer(event: CdkDragDrop<IColumnEditorColumnData[]>) {\n    if (event.previousContainer !== event.container && this.isColumnEditorAvailableColumn(event.item.data)) {\n      this.addColumn(event.item.data, event.currentIndex);\n    } else if (event.previousIndex !== event.currentIndex) {\n      this.moveColumn(event.previousIndex, event.currentIndex);\n    }\n  }\n\n  onColumnCheckboxPropertyChange(\n    value: boolean,\n    column: IColumnEditorColumnData,\n    columnProperty: IColumnEditorProperty\n  ) {\n    if (columnProperty.name === 'filterable' && column.fieldDefinition.namedListDefinition) {\n      if (value) {\n        column.typeaheadKeystrokeCount = RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;\n      } else {\n        column.typeaheadKeystrokeCount = null;\n        column.additionalQueryCriteria = null;\n      }\n    }\n\n    this.markAsDirty();\n  }\n\n  onColumnDragStarted(): void {\n    this.updateSelectedColumnsDropList();\n  }\n\n  onAssociatedAvailableColumnsDragStarted(): void {\n    this.onColumnDragStarted();\n    this.updateAssociatedAvailableColumnsDropList();\n  }\n\n  isColumnEditorAvailableColumn(\n    column: IColumnEditorAvailableColumn | IColumnEditorColumnData\n  ): column is IColumnEditorAvailableColumn {\n    return Boolean((column as IColumnEditorAvailableColumn).fieldDefinitionName);\n  }\n\n  moveColumn(fromIndex: number, toIndex: number): void {\n    this.markAsDirty();\n    moveItemInArray(this.columns, fromIndex, toIndex);\n    this.updateColumnIndexes();\n  }\n\n  removeColumn(index: number): void {\n    this.markAsDirty();\n    const column = this.columns[index];\n\n    this.columns.splice(index, 1);\n\n    const associatedAvailableColumnsNode = column.associationDescriptor\n      ? this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label)\n      : this.availableColumnsTree[0];\n\n    // variable can be null when we want remove column, but associations are not loaded yet\n    if (associatedAvailableColumnsNode && associatedAvailableColumnsNode.data.allAvailableColumns) {\n      associatedAvailableColumnsNode.data.allAvailableColumns.push(\n        this.getColumnMetadata(column.fieldDefinition, column.associationDescriptor)\n      );\n\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  private getAssociatedAvailableColumnsNode(\n    associationDescriptorLabel: string\n  ): AdaptTreeNodeTyped<IAvailableColumnTreeData> {\n    return this.availableColumnsTree.find(\n      (associatedAvailableColumn) =>\n        associatedAvailableColumn.data.associationDescriptor &&\n        associatedAvailableColumn.data.associationDescriptor.label === associationDescriptorLabel\n    );\n  }\n\n  getAvailableColumnsTree(): void {\n    const recordNode = {\n      children: null,\n      leaf: false,\n      expanded: true,\n      expandedIcon: 'd-icon-file_text',\n      collapsedIcon: 'd-icon-file_text',\n      label: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      key: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      data: {\n        allAvailableColumns: null\n      }\n    };\n\n    if (!this.startedLoadingAssociationDescriptors) {\n      this.startedLoadingAssociationDescriptors = true;\n\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.recordDefinition.name)\n        .subscribe((associationDescriptors) => {\n          associationDescriptors = associationDescriptors.slice();\n          associationDescriptors.sort((descriptor1, descriptor2) => descriptor1.label.localeCompare(descriptor2.label));\n\n          this.availableColumnsTree = associationDescriptors.map((associationDescriptor) => {\n            return {\n              children: null,\n              leaf: false,\n              expandedIcon: 'd-icon-arrow_schema',\n              collapsedIcon: 'd-icon-arrow_schema',\n              label: associationDescriptor.label,\n              key: associationDescriptor.associationDefinition.name,\n              data: {\n                associationDescriptor,\n                allAvailableColumns: null\n              }\n            };\n          });\n\n          this.availableColumnsTree.unshift(recordNode);\n\n          this.availableColumnsTree.forEach((node) => {\n            this.onNodeExpand({ node });\n          });\n        });\n    }\n  }\n\n  updateAvailableColumnsTree(): void {\n    this.availableColumnsTree.forEach((node) => {\n      const allAvailableColumns = node.data.allAvailableColumns;\n\n      if (allAvailableColumns) {\n        const availableColumns = this.sortAvailableColumns(allAvailableColumns);\n        const definitionName = node.data.associationDescriptor\n          ? node.data.associationDescriptor.associationDefinition.name\n          : this.recordDefinition.name;\n\n        node.children = availableColumns.map((availableColumn): AdaptTreeNodeTyped<IAvailableColumnTreeData> => {\n          return {\n            children: null,\n            leaf: true,\n            label: availableColumn.fieldDefinitionName,\n            key: `${definitionName}-${availableColumn.fieldDefinition.id}`,\n            data: {\n              availableColumn\n            }\n          };\n        });\n      }\n    });\n  }\n\n  onNodeExpand({ node }: { node: AdaptTreeNodeTyped<IAvailableColumnTreeData> }): void {\n    const associationDescriptor = node.data.associationDescriptor;\n\n    if (associationDescriptor && !node.data.allAvailableColumns) {\n      node.data.allAvailableColumns = [];\n\n      this.rxRecordDefinitionCacheService\n        .getRecordDefinition(associationDescriptor.recordDefinitionName)\n        .subscribe((recordDefinition) => {\n          node.data.allAvailableColumns = this.getAvailableColumns(recordDefinition, associationDescriptor);\n          this.updateAvailableColumnsTree();\n        });\n    } else if (!associationDescriptor) {\n      node.data.allAvailableColumns = this.getAvailableColumns(this.recordDefinition);\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  addColumn(availableColumn: IColumnEditorAvailableColumn, insertIndex?: number) {\n    this.markAsDirty();\n\n    if (!find(this.columns, (column) => column.fieldId === availableColumn.fieldId)) {\n      const additionalQueryCriteriaExpressionOptions = availableColumn.fieldDefinition.namedListDefinition\n        ? this.getAdditionalQueryCriteriaExpressionOptions(availableColumn)\n        : null;\n\n      const newColumn = {\n        ...this.getColumnEditorColumnData(availableColumn),\n        additionalQueryCriteriaExpressionOptions\n      };\n\n      if (isNil(insertIndex)) {\n        this.columns.push(newColumn);\n      } else {\n        this.columns.splice(insertIndex, 0, newColumn);\n      }\n\n      this.updateColumnIndexes();\n      this.removeFromAvailableColumns(availableColumn);\n\n      setTimeout(() => {\n        this.accordionTabEls.toArray()[insertIndex ?? this.columns.length - 1].nativeElement.scrollIntoView();\n      });\n    }\n  }\n\n  getColumnEditorColumnData(availableColumn: IColumnEditorAvailableColumn): IColumnEditorColumnData {\n    const column: IColumnEditorColumnData = {\n      guid: this.rxGuidService.generate(),\n      label: availableColumn.label,\n      fieldId: availableColumn.fieldId,\n      associationDescriptor: availableColumn.associationDescriptor,\n      fieldDefinition: availableColumn.fieldDefinition,\n      actions: [],\n      title: availableColumn.fieldDefinitionName,\n      isOpen: true\n    };\n\n    forEach(RX_RECORD_GRID.columnProperties, (columnProperty) => {\n      if (columnProperty.name === 'sortable') {\n        column.sortable = availableColumn.isSortable;\n      } else if (columnProperty.name === 'searchable') {\n        column.searchable = this.rxRecordGridUtilsService.isSearchable(\n          availableColumn.fieldDefinition,\n          this.recordDefinition\n        );\n      } else {\n        column[columnProperty.name] = columnProperty.defaultValue;\n      }\n    });\n\n    return column;\n  }\n\n  removeFromAvailableColumns(column: IColumnEditorAvailableColumn): void {\n    if (column.associationDescriptor) {\n      const associatedAvailableColumnsNode = this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label);\n\n      remove(associatedAvailableColumnsNode.data.allAvailableColumns, column);\n    } else {\n      remove(this.availableColumnsTree[0].data.allAvailableColumns, column);\n    }\n\n    this.updateAvailableColumnsTree();\n  }\n\n  sortAvailableColumns(availableColumns: IColumnEditorAvailableColumn[]): IColumnEditorAvailableColumn[] {\n    this.filteredColumns = availableColumns.sort((column1, column2) =>\n      column1.fieldDefinitionName.localeCompare(column2.fieldDefinitionName)\n    );\n\n    return this.filteredColumns;\n  }\n\n  getAvailableColumns(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn[] {\n    return recordDefinition.fieldDefinitions\n      .map((fieldDefinition) => this.getColumnMetadata(fieldDefinition, associationDescriptor))\n      .filter((availableColumn) => !find(this.columns, (column) => column.fieldId === availableColumn.fieldId));\n  }\n\n  getColumnMetadata(\n    fieldDefinition: IFieldDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn {\n    return {\n      fieldDefinitionName: fieldDefinition.name,\n      label: this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n      fieldId: this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor),\n      isSortable: this.rxFieldDefinitionService.isSortable(fieldDefinition),\n      associationDescriptor,\n      fieldDefinition\n    };\n  }\n\n  saveChanges(): void {\n    const result: IRecordGridColumnEditorModalResult = {\n      columns: this.columns.map((column): IRecordGridDesignColumnData => {\n        const isFilterableColumnWithNamedList = column.filterable && column.fieldDefinition.namedListDefinition;\n\n        return {\n          actions: column.actions,\n          alignment: column.alignment,\n          fieldId: column.fieldId,\n          filterable: column.filterable,\n          filterType: column.filterType,\n          guid: column.guid,\n          index: column.index,\n          sortable: column.sortable,\n          searchable: column.searchable,\n          title: column.title,\n          visible: column.visible,\n          associationDescriptor: column.associationDescriptor,\n          fieldDefinition: column.fieldDefinition,\n          cellDisplayProperties: column.cellDisplayProperties,\n          namedFilterOptions: column.namedFilterOptions,\n          width: column.width,\n          wrapText: column.wrapText,\n          typeaheadKeystrokeCount: isFilterableColumnWithNamedList ? column.typeaheadKeystrokeCount : null,\n          additionalQueryCriteria: isFilterableColumnWithNamedList ? column.additionalQueryCriteria : null\n        };\n      })\n    };\n\n    this.activeModalRef.close(result);\n  }\n\n  trackByForColumns(index: number, column: IColumnEditorColumnData): string {\n    return column.fieldId;\n  }\n\n  trackByForColumnProperties(index: number, columnProperty: IColumnEditorProperty): string {\n    return columnProperty.name;\n  }\n\n  isPropertyEditable(column: IColumnEditorColumnData, propertyName: string) {\n    if (propertyName === 'searchable') {\n      return (\n        !this.isReadOnly && this.rxRecordGridUtilsService.isSearchable(column.fieldDefinition, this.recordDefinition)\n      );\n    } else {\n      return !this.isReadOnly;\n    }\n  }\n\n  private updateColumnIndexes(): void {\n    this.columns.forEach((column, index) => {\n      column.index = index;\n    });\n  }\n\n  private openActiveAction(): void {\n    if (this.activeColumn && this.activeActionIndex >= 0) {\n      this.ngZone.runOutsideAngular(() => {\n        // timeout is required to let control set initial value\n        setTimeout(() => {\n          const listControl = this.actionListControlComponents.find(\n            (control) => control.value === this.activeColumn.actions\n          );\n\n          if (listControl) {\n            listControl.focus({ actionIndex: this.activeActionIndex });\n          }\n        });\n      });\n    }\n  }\n\n  isTreeEmpty(): boolean {\n    return every(this.availableColumnsTree, (node) => node.data.allAvailableColumns.length === 0);\n  }\n\n  openAdditionalQueryCriteriaExpressionEditor(\n    column: IColumnEditorColumnData,\n    control: ExpressionFormControlComponent\n  ): void {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'additionalQueryCriteria',\n          value: column.additionalQueryCriteria,\n          label: 'Additional named list filter'\n        },\n        isReadOnly: this.isReadOnly,\n        expressionConfigurator: namedListFilterExpressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),\n            icon: 'd-icon-mathematical_function'\n          },\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'\n            ),\n            icon: 'd-icon-file_o'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'\n            ),\n            icon: 'd-icon-arrow_right_square_input'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        column.additionalQueryCriteria = expression.value;\n        control.value = expression.value;\n        control.onWriteValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  getAdditionalQueryCriteriaExpressionOptions(column: IRecordGridDesignColumnData): IExpressionFormControlOptions {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    return {\n      label: 'Additional named list filter',\n      tooltip: new Tooltip(\n        'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n      ),\n      dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n      operators: namedListFilterExpressionConfigurator.getOperators()\n    };\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block d-flex flex-column\">\n          <div\n            *ngIf=\"!isTreeEmpty()\"\n            #associatedAvailableColumnsDropList=\"cdkDropList\"\n            cdkDropList\n            [cdkDropListData]=\"filteredColumns\"\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selectedColumnsDropList']\"\n          >\n            <adapt-tree\n              [value]=\"availableColumnsTree\"\n              (onNodeExpand)=\"onNodeExpand($event)\"\n              filter=\"true\"\n              [wrap]=\"treeWrap\"\n            >\n              <ng-template let-node adaptTreeNodeTemplate>\n                <span *ngIf=\"!node.data.availableColumn\" [title]=\"node.label\">\n                  {{ node.label }}\n                </span>\n\n                <div\n                  *ngIf=\"node.data.availableColumn\"\n                  class=\"rx-tree-draggable-node\"\n                  #draggableAssociatedAvailableColumn\n                  cdkDrag\n                  [cdkDragData]=\"node.data.availableColumn\"\n                  (cdkDragStarted)=\"onAssociatedAvailableColumnsDragStarted()\"\n                >\n                  <div (dblclick)=\"addColumn(node.data.availableColumn)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addColumn(node.data.availableColumn)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ node.label }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <div *ngIf=\"isTreeEmpty()\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n            <adapt-empty-state\n              class=\"w-100\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.empty-state.message'\n                  | translate\n              }}\"\n              type=\"search\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div\n        id=\"selectedColumnsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"columns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n        #selectedColumnsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"false\" *ngIf=\"columns.length\">\n          <div\n            *ngFor=\"\n              let column of columns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByForColumns\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"column\"\n            [cdkDragDisabled]=\"isReadOnly\"\n            (cdkDragStarted)=\"onColumnDragStarted()\"\n            #draggableSelectedColumn\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.label\" rx-id=\"card-title\">\n                      {{ column.label }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      *ngIf=\"!isActionsColumn(column.fieldId)\"\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeColumn(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <ng-container *ngIf=\"column.isOpen\">\n                <div\n                  *ngIf=\"\n                    isActionsColumn(column.fieldId);\n                    then actionsColumnEditorTemplate;\n                    else dataColumnEditorTemplate\n                  \"\n                ></div>\n              </ng-container>\n\n              <ng-template #dataColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <div class=\"d-flex flex-wrap\">\n                  <ng-container *ngFor=\"let columnProperty of columnProperties; trackBy: trackByForColumnProperties\">\n                    <div\n                      class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                      *ngIf=\"\n                        ['visible', 'sortable', 'filterable', 'searchable', 'wrapText'].includes(columnProperty.name)\n                      \"\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column[columnProperty.name]\"\n                          (ngModelChange)=\"onColumnCheckboxPropertyChange($event, column, columnProperty)\"\n                          [disabled]=\"!isPropertyEditable(column, columnProperty.name)\"\n                        />\n\n                        <span class=\"checkbox__item\">{{ columnProperty.label }}</span>\n                      </label>\n\n                      <span class=\"ml-1\" *ngIf=\"columnProperty.tooltip\">\n                        <span class=\"letter-space\"></span>\n                        <adapt-icon\n                          [name]=\"'question_circle_o'\"\n                          [adaptPopover]=\"columnProperty.tooltip.content\"\n                          appendToBody=\"true\"\n                        >\n                        </adapt-icon>\n                      </span>\n                    </div>\n                    <rx-column-editor-alignment\n                      *ngIf=\"columnProperty.name === 'alignment'\"\n                      [isReadOnly]=\"isReadOnly\"\n                      [column]=\"column\"\n                      [columnProperty]=\"columnProperty\"\n                      class=\"flex-fill\"\n                      [ngModel]=\"column.alignment\"\n                      (ngModelChange)=\"markAsDirty()\"\n                      ngDefaultControl\n                    ></rx-column-editor-alignment>\n                  </ng-container>\n                </div>\n\n                <div class=\"d-flex flex-row\">\n                  <rx-stepper-with-units-form-control\n                    class=\"d-block col-5 p-0\"\n                    [options]=\"columnWidthPropertyOptions\"\n                    [(ngModel)]=\"column.width\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-stepper-with-units-form-control>\n\n                  <rx-select-form-control\n                    *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                    class=\"d-block col-5 p-0 pb-2 pl-5\"\n                    [options]=\"typeaheadKeystrokeCountOptions\"\n                    [(ngModel)]=\"column.typeaheadKeystrokeCount\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [disabled]=\"isReadOnly\"\n                  ></rx-select-form-control>\n                </div>\n\n                <rx-expression-form-control\n                  #additionalQueryCriteriaExpression\n                  *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                  rx-id=\"additional-query-criteria-expression\"\n                  class=\"d-block p-0 pb-2\"\n                  [options]=\"column.additionalQueryCriteriaExpressionOptions\"\n                  [(ngModel)]=\"column.additionalQueryCriteria\"\n                  (events)=\"openAdditionalQueryCriteriaExpressionEditor(column, additionalQueryCriteriaExpression)\"\n                  [disabled]=\"isReadOnly\"\n                ></rx-expression-form-control>\n\n                <rx-cell-display-properties\n                  class=\"d-block pb-2\"\n                  [columns]=\"columns\"\n                  [columnName]=\"column.title\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.cellDisplayProperties\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-cell-display-properties>\n\n                <rx-named-filter-options\n                  class=\"d-block pb-2\"\n                  [column]=\"column\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.namedFilterOptions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.named-filter-options-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-named-filter-options>\n\n                <rx-action-list-control\n                  class=\"d-block\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.actions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-actions-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-action-list-control>\n              </ng-template>\n\n              <ng-template #actionsColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field d-block form-group\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <rx-stepper-with-units-form-control\n                  class=\"d-block col-5 p-0\"\n                  [options]=\"columnWidthPropertyOptions\"\n                  [(ngModel)]=\"column.width\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-stepper-with-units-form-control>\n\n                <div class=\"d-flex flex-wrap\">\n                  <div\n                    class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                    *ngFor=\"let actionsColumnProperty of actionsColumnProperties; trackBy: trackByForColumnProperties\"\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"column[actionsColumnProperty.name]\"\n                        (ngModelChange)=\"markAsDirty()\"\n                        [disabled]=\"!isPropertyEditable(column, actionsColumnProperty.name)\"\n                      />\n\n                      <span class=\"checkbox__item\">{{ actionsColumnProperty.label }}</span>\n                    </label>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!columns.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.empty-state.message'\n              | translate\n          }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","export interface IRecordGridColumnNamedFilterOptionDesign {\n  filterExpression: string;\n  index: number;\n  title: string;\n}\n\nexport interface IRecordGridColumnNamedFilterOption extends IRecordGridColumnNamedFilterOptionDesign {\n  guid: string;\n}\n\nexport interface IRecordGridNamedFilterOptionsMap {\n  [fieldId: string]: IRecordGridColumnNamedFilterOption[];\n}\n\n// Adapt dropped moment and changed the signature of AdvancedFilterTimeDataType from [moment.Moment, moment.Moment] to [RxDatetimeStruct, RxDatetimeStruct].\n// We need to reinstate the [moment.Moment, moment.Moment] signature since we rely on many moment methods in our code.\nexport type RxAdvancedFilterDateDataType = [moment.Moment, moment.Moment];\n\nexport interface IGridViewPresetProperties {\n  viewPresetGuid: string;\n  filters: string;\n}\n\nexport interface IGridViewColumnProperties {\n  fieldId: string;\n  index: number;\n  visible: boolean;\n  sortable: IRecordGridSortableObject | null;\n  width?: string;\n}\n\nexport interface IRecordGridSortableObject {\n  direction: ColumnSortDirection;\n}\n\nexport enum ColumnSortDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n","import { Injectable } from '@angular/core';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { SortOrder } from '@bmc-ux/adapt-table';\n\nimport { BooleanLike } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { assign, cloneDeep, includes, isBoolean, isObject, isString, map, omit } from 'lodash';\nimport { IRecordGridColumn } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { ColumnSortDirection } from '../../common/types/record-grid.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfigUtilsService {\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  parseConfigString(str: BooleanLike | KeyValueObject | string): boolean | KeyValueObject {\n    if (!str) {\n      return false;\n    }\n\n    if (includes(['1', 'true'], str)) {\n      return true;\n    }\n\n    if (includes(['0', 'false'], str)) {\n      return false;\n    }\n\n    if (isString(str)) {\n      return this.rxJsonParserService.tryParseJson(str, false);\n    }\n\n    if (isObject(str)) {\n      return str;\n    }\n\n    return isBoolean(str) ? str : false;\n  }\n\n  getBooleanValue(str: BooleanLike): boolean {\n    return this.parseConfigString(str) as boolean;\n  }\n\n  getColumnSortOrder(direction: ColumnSortDirection): SortOrder {\n    return direction === ColumnSortDirection.Asc ? SortOrder.Asc : SortOrder.Desc;\n  }\n\n  getColumnSortDirection(sortOrder: SortOrder): ColumnSortDirection {\n    return sortOrder === SortOrder.Asc ? ColumnSortDirection.Asc : ColumnSortDirection.Desc;\n  }\n\n  configDeepClone(configuration: IRecordGridConfig): IRecordGridConfig {\n    const configClone = cloneDeep(omit(configuration, ['columns']));\n    const columns = this.columnsDeepClone(configuration.columns);\n\n    return assign(configClone, { columns });\n  }\n\n  columnsDeepClone(columns: IRecordGridColumn[]): IRecordGridColumn[] {\n    return map(columns, this.columnDeepClone);\n  }\n\n  private columnDeepClone(column: IRecordGridColumn): IRecordGridColumn {\n    const columnClone = cloneDeep(omit(column, ['cellTemplate']));\n\n    return assign(columnClone, { cellTemplate: column.cellTemplate });\n  }\n}\n","import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { get, has, noop } from 'lodash';\nimport { BehaviorSubject, forkJoin } from 'rxjs';\nimport { defaultIfEmpty, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../../../runtime/services/record-grid-config-utils.service';\nimport { RecordGridDesignValidationIssue } from '../../record-grid-design.types';\nimport { RecordGridColumnEditorModalComponent } from './record-grid-column-editor-modal/record-grid-column-editor-modal.component';\nimport {\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './record-grid-column-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-column-editor',\n  templateUrl: './record-grid-column-editor-control.component.html',\n  styleUrls: ['./record-grid-column-editor-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridColumnEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridColumnEditorControlComponent\n  extends ValueAccessor<IRecordGridDesignInspectorColumnConfig[]>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridColumnEditorControlOptions;\n\n  private updateColumnsSubject = new BehaviorSubject<IRecordGridDesignInspectorColumnConfig[]>([]);\n\n  columns$ = this.updateColumnsSubject.pipe(\n    switchMap((inspectorColumns) =>\n      forkJoin(\n        inspectorColumns.map((inspectorColumn) =>\n          forkJoin([\n            this.rxRecordGridUtilsService.getAssociationDescriptor(\n              inspectorColumn.fieldId,\n              this.options.recordDefinition\n            ),\n            this.rxRecordGridUtilsService.getFieldDefinition(inspectorColumn.fieldId, this.options.recordDefinition)\n          ]).pipe(\n            map(([associationDescriptor, fieldDefinition]) => ({\n              associationDescriptor,\n              fieldDefinition,\n              inspectorColumn\n            }))\n          )\n        )\n      ).pipe(\n        defaultIfEmpty([]),\n        map((columnsData) =>\n          columnsData.map((columnData): IRecordGridDesignColumnData => {\n            return {\n              ...columnData.inspectorColumn,\n              fieldDefinition: columnData.fieldDefinition,\n              associationDescriptor: columnData.associationDescriptor,\n              title: columnData.inspectorColumn.title?.trim(),\n              searchable: has(columnData.inspectorColumn, 'searchable')\n                ? this.rxRecordGridConfigUtilsService.getBooleanValue(columnData.inspectorColumn.searchable)\n                : columnData.inspectorColumn.filterable &&\n                  this.rxRecordGridUtilsService.isSearchable(columnData.fieldDefinition, this.options.recordDefinition),\n              fallbackTitle: `[${columnData.fieldDefinition.name}]`\n            };\n          })\n        ),\n        shareReplay(1)\n      )\n    )\n  );\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (changes.options.currentValue as IRecordGridColumnEditorControlOptions).recordDefinition.name !==\n        (changes.options.previousValue as IRecordGridColumnEditorControlOptions).recordDefinition.name\n    ) {\n      this.updateColumnsSubject.next(this.value);\n    }\n  }\n\n  onWriteValue(inspectorColumns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.updateColumnsSubject.next(inspectorColumns);\n  }\n\n  removeColumn(columnData: IRecordGridDesignColumnData): void {\n    this.updateValue(this.value.filter((column) => column.fieldId !== columnData.fieldId));\n  }\n\n  updateValue(columns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.value = columns;\n    this.onWriteValue(columns);\n  }\n\n  openEditor(columnGuid?: string, activeActionIndex?: number): void {\n    this.columns$.pipe(take(1)).subscribe((columns) => {\n      const data: IRecordGridColumnEditorModalParams = {\n        isReadOnly: this.isDisabled,\n        columns,\n        activeColumn: columns.find((item) => item.guid === columnGuid),\n        recordDefinition: this.options.recordDefinition,\n        activeActionIndex\n      };\n\n      this.rxModalService\n        .openModal({\n          title: 'Edit grid columns',\n          content: RecordGridColumnEditorModalComponent,\n          data: {\n            columnParams: data\n          },\n          size: OpenViewActionModalSize.Large as any,\n          testID: 'edit-grid-columns'\n        })\n        .then((result: IRecordGridColumnEditorModalResult) => {\n          if (result && result.columns) {\n            this.updateValue(result.columns);\n          }\n        })\n        .catch(noop);\n    });\n  }\n\n  focus(data: RecordGridDesignValidationIssue['data']): void {\n    this.openEditor(data?.columnGuid, data?.actionIndex);\n  }\n\n  getColumnResourceTypeName(column: IRecordGridDesignColumnData): string {\n    const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[column.fieldDefinition.resourceType];\n\n    return get(RX_RECORD_DEFINITION.dataTypes[resourceType], 'displayName', '');\n  }\n\n  getSortedColumns(columns: IRecordGridDesignColumnData[]): IRecordGridDesignColumnData[] {\n    return columns.sort((column1, column2) => column1.index - column2.index);\n  }\n\n  trackByForColumns(index: number, column: IRecordGridDesignColumnData): string {\n    return column.fieldId;\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  ngOnDestroy(): void {\n    this.updateColumnsSubject.complete();\n  }\n}\n","<adapt-button btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit grid columns\n</adapt-button>\n\n<div *ngIf=\"columns$ | async as columns\">\n  <div rx-id=\"columns\">\n    <span *ngIf=\"columns.length === 0\" class=\"text-tertiary\"> No grid columns added. </span>\n  </div>\n\n  <div class=\"rx-selected-column\" *ngFor=\"let column of getSortedColumns(columns); trackBy: trackByForColumns\">\n    <div class=\"rx-selected-column__header-container\">\n      <span\n        class=\"rx-selected-column__header-title\"\n        rx-id=\"card-title\"\n        [ngClass]=\"{ 'd-icon-left-arrow_schema': column.associationDescriptor }\"\n        [title]=\"column.title\"\n      >\n        {{ column.title || column.fallbackTitle }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        (click)=\"openEditor(column.guid)\"\n        *ngIf=\"!isDisabled\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-column\"\n        (click)=\"removeColumn(column)\"\n        *ngIf=\"!isActionsColumn(column.fieldId) && !isDisabled\"\n      ></button>\n    </div>\n\n    <div class=\"rx-column-type\" rx-id=\"column-type\">\n      {{ getColumnResourceTypeName(column) }}\n      <span *ngIf=\"column.associationDescriptor\">– {{ column.associationDescriptor.label }}</span>\n    </div>\n  </div>\n</div>\n","import { isNil } from 'lodash';\nimport { AdvancedFilterDataTypesConfigsService } from '@bmc-ux/adapt-angular';\n\nexport class RxRecordGridAdvancedFilterValue<T = any> {\n  constructor(value?: T, namedOptions: string[] = []) {\n    this.filterValue = value;\n\n    if (Array.isArray(namedOptions)) {\n      this.namedOptions = namedOptions;\n    }\n  }\n\n  get length(): number {\n    return (\n      (Array.isArray(this.filterValue) ? this.filterValue.length : isNil(this.filterValue) ? 0 : 1) +\n      this.namedOptions.length\n    );\n  }\n\n  namedOptions: string[] = [];\n  filterValue: T;\n  title: string;\n\n  static isEmpty(item: RxRecordGridAdvancedFilterValue | any): boolean {\n    return item instanceof RxRecordGridAdvancedFilterValue && !item.length;\n  }\n\n  static isEmptyWithRange(item: RxRecordGridAdvancedFilterValue | any): boolean {\n    return (\n      item instanceof RxRecordGridAdvancedFilterValue &&\n      !item.namedOptions.length &&\n      AdvancedFilterDataTypesConfigsService.isEmptyOnEmptyValues(item.filterValue)\n    );\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport { reduce } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-named-filter-options-list',\n  templateUrl: './named-filter-options-list.component.html',\n  styleUrls: ['./named-filter-options-list.component.scss']\n})\nexport class RxNamedFilterOptionsListComponent {\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue) {\n    const ids = values?.namedOptions;\n\n    this._filterValue = values;\n    Object.keys(this.namedFilterOptionsModel).forEach((key) => (this.namedFilterOptionsModel[key] = false));\n    ids?.forEach((id) => (this.namedFilterOptionsModel[id] = true));\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue {\n    return this._filterValue;\n  }\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  defaultFilterValue: any = [];\n\n  @Output()\n  readonly namedFilterOptionsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  private _filterValue: RxRecordGridAdvancedFilterValue;\n  namedFilterOptionsModel: { [id: string]: boolean } = {};\n\n  trackByOptionGuid(index: number, option: IRecordGridColumnNamedFilterOption): string {\n    return option['guid'];\n  }\n\n  onNamedFilterOptionChange(): void {\n    const selectedGuids = this.getSelectedNamedOptionsIds();\n    this.namedFilterOptionsChange.emit(selectedGuids);\n\n    const value = new RxRecordGridAdvancedFilterValue(\n      this.filterValue?.filterValue ?? this.defaultFilterValue,\n      selectedGuids\n    );\n\n    this.filterControlsComponent.onFilterOptionModelChange(value);\n  }\n\n  private getSelectedNamedOptionsIds(): string[] {\n    return reduce(\n      this.namedFilterOptionsModel,\n      (result, value, id) => {\n        if (value) {\n          result.push(id);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n}\n","<div class=\"options-wrapper\" *ngIf=\"namedFilterOptions?.length\">\n  <adapt-rx-checkbox\n    class=\"dropdown-item p-0 text-break\"\n    *ngFor=\"let option of namedFilterOptions; trackBy: trackByOptionGuid\"\n    [label]=\"option.title\"\n    [(ngModel)]=\"namedFilterOptionsModel[option.guid]\"\n    (ngModelChange)=\"onNamedFilterOptionChange()\"\n  ></adapt-rx-checkbox>\n</div>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterOption\n} from '@bmc-ux/adapt-angular';\nimport { SelectOption } from '@bmc-ux/obsolete';\nimport { find } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-boolean-filter',\n  templateUrl: './boolean-filter.component.html'\n})\nexport class RxBooleanFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>) {\n    const selectOptions = this.getSelectOptions();\n\n    this._filterValue = values;\n\n    this.selectedValues = values?.filterValue\n      ? values.filterValue.map((value) => find(selectOptions, { id: value }))\n      : [];\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  @Input()\n  isRequired = false;\n\n  selectedValues: SelectOption[];\n  private _filterValue: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>;\n\n  selectOptionFormatter(option: SelectOption): string {\n    return option.name;\n  }\n\n  onValueChange(values: SelectOption[]): void {\n    const filterValue = values.map((value) => value.id);\n\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(filterValue, this.filterValue?.namedOptions)\n    );\n  }\n\n  getSelectOptions(): SelectOption[] {\n    return this.filterOption.data?.selectOptions || [];\n  }\n\n  onValueChangeRequired(model: AdvancedFilterBooleanDataType): void {\n    const oldModelValue = Array.isArray(this.filterValue?.filterValue)\n      ? this.filterValue.filterValue[0]\n      : this.filterValue?.filterValue;\n\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(model === oldModelValue ? null : [model], this.filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  *ngIf=\"!isRequired; else inputsForBooleanTypeTemplate\"\n  class=\"advanced-filter__rx-select advanced-filter__rx-select_simple\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [optionFormatter]=\"selectOptionFormatter\"\n  [options]=\"getSelectOptions()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectedValues\"\n  (ngModelChange)=\"onValueChange($event)\"\n>\n</adapt-rx-select>\n\n<ng-template #inputsForBooleanTypeTemplate>\n  <adapt-rx-radiobutton-group\n    class=\"advanced-filter__radiobutton-group\"\n    [ngModel]=\"filterValue ? filterValue.filterValue[0] : null\"\n    (ngModelChange)=\"onValueChangeRequired($event)\"\n  >\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"false\"\n      [label]=\"filterControlsComponent.texts.configsTexts.falseLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_false'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(false)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"true\"\n      [label]=\"filterControlsComponent.texts.configsTexts.trueLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_true'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(true)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      *ngIf=\"filterControlsComponent.getBooleanTypeOptionParams().hasBlankValue\"\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"filterControlsComponent.getBooleanTypeBlankValue()\"\n      [label]=\"filterControlsComponent.texts.configsTexts.blankLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_blank'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(filterControlsComponent.getBooleanTypeBlankValue())\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n</ng-template>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport {\n  INamedListDefinition,\n  INamedListOption,\n  INamedListOptionPage,\n  RxNamedListDefinitionService,\n  RxNamedListService,\n  NamedListTypeAheadOption\n} from '@helix/platform/named-list/api';\nimport { RxFeatureService } from '@helix/platform/shared/api';\nimport { Observable, of, OperatorFunction } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, finalize, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\n\n@Component({\n  selector: 'rx-string-with-type-ahead-filter',\n  templateUrl: './string-with-type-ahead-filter.component.html',\n  styleUrls: ['./string-with-type-ahead-filter.component.scss']\n})\nexport class RxStringWithTypeAheadFilterComponent implements OnInit {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<INamedListOption[]>) {\n    this._filterValue = values;\n    this.selectedValues = values?.filterValue || [];\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<INamedListOption[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  selectedValues: INamedListOption[] = [];\n  isSearchInProgress = false;\n  typeaheadKeystrokeCount: number;\n  private namedListDefinition$: Observable<INamedListDefinition>;\n  private _filterValue: RxRecordGridAdvancedFilterValue<INamedListOption[]>;\n\n  search: OperatorFunction<string, INamedListOption[]> = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      tap(() => {\n        this.isSearchInProgress = true;\n      }),\n      switchMap((term) => this.getSelectOptions(term)),\n      finalize(() => {\n        this.isSearchInProgress = false;\n      })\n    );\n\n  constructor(\n    private rxNamedListService: RxNamedListService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxFeatureService: RxFeatureService\n  ) {}\n\n  ngOnInit(): void {\n    this.namedListDefinition$ = this.rxNamedListDefinitionService\n      .get(this.filterOption.data.namedListDefinition)\n      .pipe(shareReplay(1));\n\n    this.typeaheadKeystrokeCount =\n      this.filterOption.data.typeaheadKeystrokeCount ?? RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;\n  }\n\n  onValueChange(selectedValues: NamedListTypeAheadOption[]): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(\n        selectedValues.map(\n          (selectedValue: NamedListTypeAheadOption): INamedListOption =>\n            this.rxNamedListService.isNamedListOption(selectedValue)\n              ? (selectedValue as INamedListOption)\n              : ({ displayValue: undefined, value: selectedValue, title: '', contextualFields: [] } as INamedListOption)\n        ),\n        this.filterValue?.namedOptions\n      )\n    );\n  }\n\n  private getSelectOptions(term: string): Observable<INamedListOption[]> {\n    return term.length >= this.typeaheadKeystrokeCount\n      ? this.namedListDefinition$.pipe(\n          switchMap((namedListDefinition: INamedListDefinition) =>\n            this.rxNamedListService\n              .getOptionPageByLabelOrValue(namedListDefinition, term, this.filterOption.data.additionalQueryCriteria)\n              .pipe(map((optionPage: INamedListOptionPage): INamedListOption[] => optionPage.options))\n          )\n        )\n      : of([]);\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div style=\"position: relative\">\n  <adapt-tag-field\n    [search]=\"search\"\n    [ngModel]=\"selectedValues\"\n    (ngModelChange)=\"onValueChange($event)\"\n    [replaceModelOnWrite]=\"true\"\n    [selectItemTemplate]=\"selectItemTemplate\"\n    [tagTemplate]=\"tagTemplate\"\n    [openDropdownOnFocus]=\"typeaheadKeystrokeCount === 0\"\n    [placeholder]=\"'com.bmc.arsys.rx.client.view-components.record-grid.filters.typeahead.placeholder' | translate\"\n  ></adapt-tag-field>\n  <div *ngIf=\"isSearchInProgress\" class=\"position-absolute text-info inline-loader\">\n    <div class=\"d-icon-circle_75_o animated infinite spin-360 transition-out slow\"></div>\n  </div>\n</div>\n\n<ng-template #tagTemplate let-tag=\"tag\">\n  {{ tag.displayValue ?? tag.value }}\n</ng-template>\n\n<ng-template #selectItemTemplate let-result=\"result\">\n  {{ result.displayValue ?? result.value }}\n\n  <div\n    *ngIf=\"result.contextualFields\"\n    class=\"text-secondary selection-item-contextual-fields text-truncate\"\n    [title]=\"result.title\"\n  >\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of result.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdaptMetatagComponent,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterOption,\n  getTagText,\n  isEmptyOrWhitespace,\n  TagType\n} from '@bmc-ux/adapt-angular';\nimport { isEqual } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-string-filter',\n  templateUrl: './string-filter.component.html'\n})\nexport class RxStringFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  onStringTypeFilterOptionModelChange(model: TagType[], tagField: AdaptMetatagComponent) {\n    const newModel = model.filter((tag) => !isEmptyOrWhitespace(getTagText(tag)));\n\n    if (newModel.length < model.length && isEqual(newModel, this.filterValue?.filterValue || [])) {\n      tagField.writeValue(newModel);\n    } else {\n      this.filterControlsComponent.onFilterOptionModelChange(\n        new RxRecordGridAdvancedFilterValue(newModel, this.filterValue?.namedOptions)\n      );\n    }\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-tag-field\n  #stringDataTypeTagField\n  mainCls=\"advanced-filter__string-tag-field\"\n  [ngModel]=\"filterValue?.filterValue || []\"\n  popupClass=\"advanced-filter__typeahead-window\"\n  [testID]=\"filterControlsComponent.testID\"\n  (ngModelChange)=\"onStringTypeFilterOptionModelChange($event, stringDataTypeTagField)\"\n  [delimiterSymbol]=\"null\"\n  [placeholder]=\"filterControlsComponent.texts.stringTypeTagFieldPlaceholder\"\n  [replaceModelOnWrite]=\"true\"\n  [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  [hideLabel]=\"true\"\n>\n</adapt-tag-field>\n","import { Component, Input } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-number-filter',\n  templateUrl: './number-filter.component.html'\n})\nexport class RxNumberFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  getNumberDataTypeModel(value: RxRecordGridAdvancedFilterValue, indexOfCounter: number): number {\n    return value && value.filterValue ? value.filterValue[indexOfCounter] : null;\n  }\n\n  onNumberTypeFilterOptionModelChange(\n    filterValue: RxRecordGridAdvancedFilterValue,\n    controlComponent: AdaptFilterControlsComponent,\n    newValue: [number, number]\n  ): void {\n    controlComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(newValue, filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div class=\"d-flex\" [class.has-danger]=\"filterControlsComponent.hasValidationErrors\">\n  <div class=\"advanced-filter__counter-from-wrap\">\n    <adapt-rx-counter\n      #counterFrom\n      class=\"advanced-filter__counter-from\"\n      [label]=\"filterControlsComponent.texts.counterFromLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 0)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          $event,\n          counterTo ? getNumberDataTypeModel(filterValue, 1) : null\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_from'\"\n    >\n    </adapt-rx-counter>\n  </div>\n  <div class=\"advanced-filter__counter-to-wrap\">\n    <adapt-rx-counter\n      #counterTo\n      class=\"advanced-filter__counter-to\"\n      [label]=\"filterControlsComponent.texts.counterToLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 1)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          counterFrom ? getNumberDataTypeModel(filterValue, 0) : null,\n          $event\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_to'\"\n    >\n    </adapt-rx-counter>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n// Adapt dropped moment and changed the signature of AdvancedFilterTimeDataType from [moment.Moment, moment.Moment] to [RxDatetimeStruct, RxDatetimeStruct].\n// We need to extend the AdaptRxDatetimeAdapter class to implement the missing moment methods that we rely on.\n@Injectable()\nexport class RxAdaptDatetimeMomentAdapter extends AdaptRxDatetimeAdapter<moment.Moment> {\n  /**\n   * Converts moment.Moment => RxDatetimeStruct\n   */\n  fromModel(dateValue: moment.Moment | null): RxDatetimeStruct | null {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateValue);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  /**\n   * Converts RxDatetimeStruct => moment.Moment\n   */\n  toModel(date: RxDatetimeStruct | null): moment.Moment | null {\n    let adaptedValue: moment.Moment = null;\n\n    if (date) {\n      const currentDateTime = moment();\n\n      adaptedValue = date.parseError\n        ? moment.invalid({\n            invalidFormat: true,\n            parsedDateParts: [date.parseError.query],\n            meridiem: date.parseError.use12HoursTime ? '12' : '24'\n          })\n        : moment([\n            date.year ?? currentDateTime.year(),\n            date.month ?? currentDateTime.month(),\n            date.date ?? currentDateTime.date(),\n            date.hours ?? 0,\n            date.minutes ?? 0,\n            date.seconds ?? 0\n          ]);\n    }\n\n    return adaptedValue;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdaptRxDatetimeAdapter,\n  AdvancedFilterOption,\n  RxDatetimePickerMode\n} from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption, RxAdvancedFilterDateDataType } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\nimport { RxAdaptDatetimeMomentAdapter } from './rx-adapt-datetime-moment-adapter.service';\n\n@Component({\n  selector: 'rx-date-time-range-filter',\n  templateUrl: './date-time-range-filter.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: RxAdaptDatetimeMomentAdapter }]\n})\nexport class RxDateTimeRangeFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  @Input()\n  mode: RxDatetimePickerMode;\n\n  rxDatetimePickerMode = RxDatetimePickerMode;\n\n  onTimeTypeFilterOptionModelChange(model: RxAdvancedFilterDateDataType): void {\n    this.onDateTimeTypeFilterOptionModelChange(model);\n  }\n\n  onDateTypeFilterOptionModelChange(model: RxAdvancedFilterDateDataType): void {\n    if (model[0] && model[0].isValid()) {\n      model[0] = model[0].startOf('day');\n    }\n\n    if (model[1] && model[1].isValid()) {\n      model[1] = model[1].startOf('day');\n    }\n\n    this.onDateTimeTypeFilterOptionModelChange(model);\n  }\n\n  onDateTimeTypeFilterOptionModelChange(newValue: RxAdvancedFilterDateDataType): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(newValue, this.filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<ng-container [ngSwitch]=\"mode\">\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Time\" [ngTemplateOutlet]=\"inputsForTimeTypeTemplate\"></ng-container>\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Date\" [ngTemplateOutlet]=\"inputsForDateTypeTemplate\"></ng-container>\n  <ng-container\n    *ngSwitchCase=\"rxDatetimePickerMode.DateTime\"\n    [ngTemplateOutlet]=\"inputsForDatetimeTypeTemplate\"\n  ></ng-container>\n</ng-container>\n\n<ng-template #inputsForTimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDateTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDatetimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdvancedFilterOption,\n  AdvancedFilterSelectionTypeData\n} from '@bmc-ux/adapt-angular';\nimport { SelectOption } from '@bmc-ux/obsolete';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-selection-filter',\n  templateUrl: './selection-filter.component.html'\n})\nexport class RxSelectionFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<string[]>) {\n    this._filterValue = values;\n\n    const options = this.getSelectionTypeOptions();\n\n    this.selectionTypeModel =\n      options.length && values?.filterValue\n        ? values.filterValue.map((id) => options.find((option) => option.id === id))\n        : null;\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<string[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  selectionTypeModel: any[];\n  private _filterValue: RxRecordGridAdvancedFilterValue<string[]>;\n\n  getSelectionTypeOptions(): SelectOption[] {\n    const data = this.filterOption.data as AdvancedFilterSelectionTypeData;\n\n    return data?.selectOptions ?? [];\n  }\n\n  onSelectionTypeFilterOptionModelChange(value: SelectOption[]): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(\n        value.map((val) => val.id),\n        this.filterValue?.namedOptions\n      )\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  class=\"advanced-filter__rx-select\"\n  [class.advanced-filter__rx-select_simple]=\"filterControlsComponent.canShowSimpleInlineSelect()\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [selectAllButton]=\"true\"\n  [deselectAllButton]=\"true\"\n  [enableFilter]=\"!filterControlsComponent.canShowSimpleInlineSelect()\"\n  [optionFormatter]=\"filterControlsComponent.selectOptionFormatter\"\n  [options]=\"filterControlsComponent.getSelectionTypeOptions()\"\n  [texts]=\"filterControlsComponent.getSelectionTypeTexts()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectionTypeModel\"\n  (ngModelChange)=\"onSelectionTypeFilterOptionModelChange($event)\"\n  [disabledOptionResolver]=\"filterControlsComponent.disabledSelectInputResolverBind\"\n>\n</adapt-rx-select>\n","import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { AdvancedFilterOption, FilterOptionTemplateParams, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\n\n@Component({\n  selector: 'rx-advanced-filtering-fields-provider',\n  templateUrl: './advanced-filtering-fields-provider.component.html'\n})\nexport class RxAdvancedFilteringFieldsProviderComponent {\n  @ViewChild('optionalBooleanFilter', { static: true })\n  optionalBooleanFilter: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('requiredBooleanFilter', { static: true })\n  requiredBooleanFilter: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForStringWithTypeAheadTemplate', { static: true })\n  inputsForStringWithTypeAheadTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForStringTypeTemplate', { static: true })\n  inputsForStringTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForNumberTypeTemplate', { static: true })\n  inputsForNumberTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForTimeTypeTemplate', { static: true })\n  inputsForTimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForDateTypeTemplate', { static: true })\n  inputsForDateTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForDatetimeTypeTemplate', { static: true })\n  inputsForDatetimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForSelectionTypeTemplate', { static: true })\n  inputsForSelectionTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  rxDatetimePickerMode = RxDatetimePickerMode;\n\n  @Input()\n  namedFilterOptionsGetter = (filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] => [];\n}\n","<ng-template\n  #optionalBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"false\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #requiredBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"true\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringWithTypeAheadTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-with-type-ahead-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-with-type-ahead-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-filter>\n</ng-template>\n\n<ng-template\n  #inputsForNumberTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-number-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-number-filter>\n</ng-template>\n\n<ng-template\n  #inputsForTimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Time\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDateTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Date\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDatetimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.DateTime\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForSelectionTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-selection-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-selection-filter>\n</ng-template>\n","export enum QueryFiltersLogic {\n  And = 'AND',\n  Or = 'OR'\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport {\n  AdaptTranslateService,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterDataTypesConfigsService,\n  AdvancedFilterExpressionTip,\n  AdvancedFilterOption,\n  AdvancedFilterOptionConfig,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionTypeData,\n  formatAdvancedFilterTagText,\n  isEmptyOrWhitespace,\n  ParsedTagFieldExpressionResult,\n  TagModel\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RecordFieldOption,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport { get, isArray, isEmpty, isFunction, isNil, isString, uniq } from 'lodash';\nimport { IRecordGridFilterConfig } from '../types/record-grid-filter-config.interfaces';\nimport { RxRecordGridUtilsService } from './record-grid-utils.service';\nimport moment from 'moment-es6';\nimport { IRecordGridColumnNamedFilterOption } from '../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridAdvancedFilteringService {\n  translation = this.adaptTranslateService.getCurrentLanguage();\n\n  adaptTexts = {\n    fromLabel: this.translation['adapt.advancedFilter.configsTexts.fromLabel'],\n    toLabel: this.translation['adapt.advancedFilter.configsTexts.toLabel'],\n    trueLabel: this.translation['adapt.advancedFilter.configsTexts.trueLabel'],\n    falseLabel: this.translation['adapt.advancedFilter.configsTexts.falseLabel'],\n    blankLabel: this.translation['adapt.advancedFilter.configsTexts.blankLabel'],\n    validationErrors: {\n      invalidRangeName: this.translation['adapt.advancedFilter.validationErrors.invalidRangeName'],\n      invalidRangeText: this.translation['adapt.advancedFilter.validationErrors.invalidRangeText'],\n      numberTypeTexts: {\n        fromValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.fromValueMustBeNumber'],\n        toValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.toValueMustBeNumber'],\n        invalidBetweenMinAndMax:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidBetweenMinAndMax'],\n        invalidMinValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMinValue'],\n        invalidMaxValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMaxValue']\n      }\n    }\n  };\n\n  defaultConfig = this.advancedFilterDataTypesConfigsService.getConfigs(this.adaptTexts);\n\n  constructor(\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private advancedFilterDataTypesConfigsService: AdvancedFilterDataTypesConfigsService,\n    private adaptTranslateService: AdaptTranslateService\n  ) {}\n\n  addAssociationFieldsToFieldDefinitionsById(\n    fieldDefinitionsById: IFieldDefinitionsById,\n    associationDescriptors: IAssociationDescriptor[],\n    associatedRecordDefinitions: IRecordDefinition[]\n  ): IFieldDefinitionsById {\n    associationDescriptors.forEach((associationDescriptor) => {\n      const associatedRecordDefinition = associatedRecordDefinitions.find(\n        (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n      );\n\n      associatedRecordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n        const field = this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor);\n\n        if (!fieldDefinitionsById[field]) {\n          this.rxRecordDefinitionService.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field);\n        }\n      });\n    });\n\n    fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    return fieldDefinitionsById;\n  }\n\n  getAdvancedFilterOption(\n    fieldId: string,\n    header: string,\n    fieldDefinition: IFieldDefinition,\n    filterConfig: IRecordGridFilterConfig,\n    isHidden?: boolean,\n    customFilterTemplates?: { [key: string]: TemplateRef<any> },\n    prefixLabel?: string,\n    namedFilterOptions?: IRecordGridColumnNamedFilterOption[],\n    typeaheadKeystrokeCount?: number,\n    additionalQueryCriteria?: string\n  ): AdvancedFilterOption {\n    const config: AdvancedFilterOption = {\n      id: fieldId,\n      label: header,\n      dataType: filterConfig.filterOptionDataType,\n      isHidden,\n      data: isFunction(filterConfig.getDataForAdvancedFilter)\n        ? filterConfig.getDataForAdvancedFilter(fieldDefinition, fieldId)\n        : null\n    };\n\n    namedFilterOptions = namedFilterOptions ?? [];\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.boolean) {\n      config.inputsTemplate =\n        fieldDefinition.fieldOption !== RecordFieldOption.Required\n          ? customFilterTemplates.optionalBooleanFilter\n          : customFilterTemplates.requiredBooleanFilter;\n\n      config.customConfig = <\n        AdvancedFilterOptionConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        getExpressionFieldTips: (filterOption: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const namedFilterOptionTips = this.getNamedFilterOptionTips(\n            namedFilterOptions,\n            filterOption,\n            config.customConfig\n          );\n\n          return namedFilterOptionTips.concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        formatValueForTag: (value, option: AdvancedFilterOption): string => {\n          const data = option.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const filterValueLabels = value.filterValue.map(\n            (id) => selectOptions.find((selectOption) => selectOption.id === id).name\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        needRemoveTagValue: (value) => RxRecordGridAdvancedFilterValue.isEmpty(value),\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue, filterOption.data.isRequired),\n        parseTagFieldExpression: (\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          searchTerm: string\n        ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>> | null => {\n          const rawValues = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n          const value = this.getFilterValueFromString(namedFilterOptions, rawValues);\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          value.filterValue =\n            value.filterValue\n              .map((optionLabel: string) => {\n                optionLabel = optionLabel.trim().toLowerCase();\n                const selectOption = selectOptions.find((option) => option.name.toLowerCase() === optionLabel);\n\n                return selectOption?.id ?? null;\n              })\n              .filter((val) => !isNil(val)) || [];\n\n          return value.length ? { value } : null;\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.string) {\n      if (fieldDefinition.namedListDefinition) {\n        config.inputsTemplate = customFilterTemplates.inputsForStringWithTypeAheadTemplate;\n        config.data = { ...config.data, typeaheadKeystrokeCount, additionalQueryCriteria };\n      } else {\n        config.inputsTemplate = customFilterTemplates.inputsForStringTypeTemplate;\n      }\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, filterOption: AdvancedFilterOption): string =>\n          this.buildTagLabel(value.filterValue, this.getNamedOptionTitles(value, namedFilterOptions)),\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return [\n            ...this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n              new RxRecordGridAdvancedFilterValue(),\n              option,\n              config.customConfig,\n              true,\n              formatAdvancedFilterTagText(option, '')\n            )\n          ];\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.selection) {\n      config.inputsTemplate = customFilterTemplates.inputsForSelectionTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, option: AdvancedFilterOption): string => {\n          const filterValueLabels = this.defaultConfig[filterConfig.filterOptionDataType].formatValueForTag(\n            value.filterValue,\n            option\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        getExpressionFieldTips: (filterOption, searchTerm: string) => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = (data && data.selectOptions) || [];\n\n          return this.getNamedFilterOptionTips(namedFilterOptions, filterOption, config.customConfig).concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.datetime) {\n      config.inputsTemplate = customFilterTemplates.inputsForDatetimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.datetime,\n        'll LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.date) {\n      config.inputsTemplate = customFilterTemplates.inputsForDateTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.date,\n        'll'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.time) {\n      config.inputsTemplate = customFilterTemplates.inputsForTimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.time,\n        'LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.number) {\n      config.inputsTemplate = customFilterTemplates.inputsForNumberTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n        },\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig, [null, null]).concat(\n            this.defaultConfig[filterConfig.filterOptionDataType].getExpressionFieldTips(option, searchTerm)\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => {\n          newValue.filterValue = this.defaultConfig[filterConfig.filterOptionDataType].updateFilterValue(\n            newValue.filterValue,\n            oldValue.filterValue,\n            filterOption\n          );\n\n          newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n          return newValue;\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue) => {\n          const formattedValue = value.filterValue.filter((val) => val != null).join(' - ');\n\n          return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          const { value: valuesStr, label } = this.getExpressionRawValues(filterOption, searchTerm);\n\n          if (!valuesStr) {\n            return null;\n          }\n\n          const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n          value.filterValue =\n            this.defaultConfig[filterConfig.filterOptionDataType].parseTagFieldExpression(\n              filterOption,\n              `${label} ${value.filterValue[0]}`\n            )?.value ?? [];\n\n          return value.length ? { value } : null;\n        },\n        validateValue: (\n          value: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n        ) => this.defaultConfig[filterConfig.filterOptionDataType].validateValue(value.filterValue, filterOption)\n      };\n    }\n\n    if (prefixLabel) {\n      const prefixConfig = {\n        getTagText(value: string, option: AdvancedFilterOption, formattedValue: string): string {\n          return `${prefixLabel}: ${formattedValue}`;\n        }\n      };\n\n      config.customConfig = { ...config.customConfig, ...prefixConfig };\n    }\n\n    return config;\n  }\n\n  private parseStringTagFieldExpression(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string,\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[]\n  ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue> {\n    const valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n    if (!valuesStr) {\n      return null;\n    }\n\n    const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n    return value.length ? { value } : null;\n  }\n\n  private updateFilterValue(\n    oldValue: RxRecordGridAdvancedFilterValue,\n    newValue: RxRecordGridAdvancedFilterValue,\n    replaceFilterValue = false\n  ): RxRecordGridAdvancedFilterValue {\n    if (!replaceFilterValue) {\n      newValue.filterValue = uniq(oldValue.filterValue.concat(newValue.filterValue));\n    }\n\n    newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n    return newValue;\n  }\n\n  private buildTagLabel(\n    filterValueLabels: string | string[] | INamedListOption[],\n    namedOptionTitles: string[],\n    filterValueSeparator = ', ',\n    namedOptionsSeparator = '; '\n  ): string {\n    return [\n      isString(filterValueLabels)\n        ? filterValueLabels\n        : isArray(filterValueLabels) && !isEmpty(filterValueLabels)\n        ? this.rxNamedListService.isNamedListOption(filterValueLabels[0])\n          ? filterValueLabels.map((value) => value.displayValue ?? value.value).join(filterValueSeparator)\n          : filterValueLabels.join(filterValueSeparator)\n        : '',\n      ...namedOptionTitles\n    ]\n      .filter(Boolean)\n      .join(namedOptionsSeparator);\n  }\n\n  private getNamedOptionTitles(\n    value: RxRecordGridAdvancedFilterValue,\n    options: IRecordGridColumnNamedFilterOption[]\n  ): string[] {\n    const optionGuids = options.map((option) => option.guid);\n\n    return value.namedOptions\n      .sort((option1, option2) => optionGuids.indexOf(option1) - optionGuids.indexOf(option2))\n      .map((guid) => options.find((option) => option.guid === guid)?.title);\n  }\n\n  private getDatetimeCustomConfig(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    config: AdvancedFilterOption,\n    fieldType: AdvancedFilterOptionDataType,\n    tagValueFormat: string\n  ): AdvancedFilterOptionConfig {\n    return {\n      getExpressionFieldTips: (\n        option: AdvancedFilterOption,\n        searchTerm: string\n      ): TagModel<AdvancedFilterExpressionTip>[] => {\n        return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig).concat(\n          this.defaultConfig[fieldType].getExpressionFieldTips(option, searchTerm)\n        );\n      },\n      needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n        return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n      },\n      formatValueForTag: (value: RxRecordGridAdvancedFilterValue): string => {\n        const formattedValue = value.filterValue\n          .filter((val) => val)\n          .map((date) => moment(date).format(tagValueFormat))\n          .join(' - ');\n\n        return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n      },\n      updateFilterValue: (\n        newValue: RxRecordGridAdvancedFilterValue,\n        oldValue: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption\n      ) => {\n        newValue.filterValue = this.defaultConfig[fieldType].updateFilterValue(\n          newValue.filterValue,\n          oldValue.filterValue,\n          filterOption\n        );\n\n        newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n        return newValue;\n      },\n      parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n        const { value: valuesStr } = this.getExpressionRawValues(filterOption, searchTerm);\n\n        if (!valuesStr) {\n          return null;\n        }\n\n        const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n        const [dateStr] = searchTerm.split('; ');\n\n        value.filterValue = this.defaultConfig[fieldType].parseTagFieldExpression(filterOption, dateStr)?.value ?? [];\n\n        return value.length ? { value } : null;\n      },\n      validateValue: (\n        value: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n      ) => this.defaultConfig[fieldType].validateValue(value.filterValue, filterOption)\n    };\n  }\n\n  private getExpressionRawValues(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string\n  ): { label: string; value: string } {\n    return [\n      `${filterOption.label}:`,\n      `${filterOption.label} ${this.adaptTexts.fromLabel}`,\n      `${filterOption.label} ${this.adaptTexts.toLabel}`\n    ].reduce(\n      (result, mask) => {\n        if (searchTerm.startsWith(mask)) {\n          result.label = mask;\n          result.value = searchTerm.replace(mask, '').trim();\n        }\n\n        return result;\n      },\n      { label: null, value: null }\n    );\n  }\n\n  private getFilterValueFromString(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    valuesStr: string\n  ): RxRecordGridAdvancedFilterValue {\n    const values = (valuesStr ?? '')\n      .trim()\n      .split(';')\n      .filter((str) => !isEmptyOrWhitespace(str))\n      .map((str) => str.trim());\n\n    const value = new RxRecordGridAdvancedFilterValue([]);\n\n    values.forEach((val) => {\n      const namedOptionGuid = namedFilterOptions.find((item) => item.title === val)?.guid;\n\n      if (namedOptionGuid) {\n        value.namedOptions.push(namedOptionGuid);\n      } else {\n        value.filterValue.push(\n          ...val\n            .split(',')\n            .map((str) => str.trim())\n            .filter(Boolean)\n        );\n      }\n    });\n\n    value.namedOptions = uniq(value.namedOptions);\n\n    return value;\n  }\n\n  private getNamedFilterOptionTips(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    option: AdvancedFilterOption,\n    filterOptionConfig: AdvancedFilterOptionConfig,\n    value = []\n  ): TagModel<AdvancedFilterExpressionTip>[] {\n    return (namedFilterOptions ?? []).map((item) =>\n      AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n        new RxRecordGridAdvancedFilterValue(value, [item.guid]),\n        option,\n        filterOptionConfig,\n        false,\n        formatAdvancedFilterTagText(option, item.title)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forEach, includes, isEmpty, isEqual, isString, keys, reduce } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IFilterExpression, IRxRecordGridFilter } from '../types/record-grid-filter.types';\nimport { IRecordGridFilterData, RecordGridFilterOperator } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridFilterHelperService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  // Convert predefined filter data from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // {\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\n  //\n  getRecordGridFilterDataFromPredefinedFilter(\n    filterJson: string,\n    recordGridFilters: IRxRecordGridFilter[]\n  ): IRecordGridFilterData {\n    if (!isEmpty(recordGridFilters) && filterJson) {\n      filterJson = this.normalizeFilterString(filterJson, recordGridFilters);\n    }\n\n    return this.clearFilterData(this.rxJsonParserService.tryParseJson<IRecordGridFilterData>(filterJson));\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  normalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      filterString = filterString.replace(`\"${filterComponent.guid}\"`, JSON.stringify(filterExpression));\n    });\n\n    return filterString;\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  denormalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      if (filterExpression.$DISPLAYVALUE$) {\n        filterString = JSON.stringify(\n          JSON.parse(filterString),\n          this.replacer(this.denormalize(filterComponent.guid, filterExpression))\n        );\n      } else {\n        filterString = filterString.replace(JSON.stringify(filterExpression), `\"${filterComponent.guid}\"`);\n      }\n    });\n\n    return filterString;\n  }\n\n  // e.g.\n  // fn = denormalize(guid, {\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"foo\"});\n  //\n  // var filterExpression = {\n  //   \"and\": [\n  //     {\n  //       \"or\": [\n  //         {\n  //           \"eq\": {\n  //             \"536870913\": \"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\n  //             \"$DISPLAYVALUE$\": \"foo\"\n  //           }\n  //         }\n  //       ]\n  //     }\n  //   ]\n  // };\n  //\n  // JSON.stringify(filterExpression,replacer(fn));\n  // Here the filterExpression's keys are \"add\", “0”, “or”, “0”, “eq”\n  //\n  private replacer(fn: (guid: string, filterExpression: IFilterExpression) => any): any {\n    return (key: any, value: any) => (typeof key === 'string' && fn[key] ? fn[key](value) : value);\n  }\n\n  // This method declares, how object's value of an operator key should denormalize.\n  //\n  // Converts the Enum RecordGridFilterOperator\n  // to\n  // \"\n  // {\n  //   \"eq\": fn(),\n  //   \"gte\": fn(),\n  //   \"lte\": fn(),\n  //   \"like\": fn(),\n  //   \"ne\": fn(),\n  //   \"lt\": fn(),\n  //   \"gt\": fn(),\n  //   \"in\": fn()\n  // }\n  // \"\n  //  Note : fn() defines, how the value should be updated.\n  //\n  // e.g.\n  // Converts predefined filter string from:\n  //  {\"and\":[{\"or\":[{\"eq\":{\"Foo\":\"Bar\",\"$DISPLAYVALUE$\":\"Baz\"}}]}]}\n  // to:\n  //  {“and\":[{\"or\":[{\"eq\":\"aa88747c-8b8e-4dee-abf2-556b84b7d28e\"}]}]}\n  private denormalize(guid: string, filterExpression: IFilterExpression): any {\n    return reduce(\n      RecordGridFilterOperator,\n      (result, operator) => {\n        result[operator] = (value) => (isEqual(value, filterExpression) ? guid : value);\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AdvancedFilterOption, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { RowDataItem } from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxJsonParserService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  IRecordGridFilterColumnValue,\n  IRecordGridFilterData,\n  IRecordGridFilterDataOrOperator,\n  IRecordGridFilterOperator,\n  IRowDataItem,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport {\n  every,\n  filter as _filter,\n  find,\n  findKey,\n  get,\n  has,\n  includes,\n  intersection,\n  isEmpty,\n  isString,\n  keys,\n  map as _map,\n  reduce,\n  some,\n  values\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { defaultIfEmpty, filter, map } from 'rxjs/operators';\nimport { RxRecordGridAdvancedFilteringService } from '../../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport { IAdaptTableColumnConfig, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRxRecordGridFilter } from '../../common/types/record-grid-filter.types';\nimport { IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxRecordGridFilterService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(\n    public rxStringService: RxStringService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {}\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getFilterForAvailableColumns(node: IPlainObject, filterableColumns: IRecordGridColumnWithMetadata[]): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n      const fieldId = Object.keys(node[operator])[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator]\n            .map((nodeChild) => this.getFilterForAvailableColumns(nodeChild, filterableColumns))\n            .filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case !some(filterableColumns, { fieldId }): {\n          result = null;\n\n          break;\n        }\n        case includes(['eq'], operator): {\n          const fieldDefinition = find(filterableColumns, { fieldId }).fieldDefinition;\n\n          // remove selection field filter option that is not available\n          if (\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection &&\n            !has(fieldDefinition.optionNamesById, node[operator][fieldId])\n          ) {\n            result = null;\n          }\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n\n  generateTextFilterQuery(text: string, columns: IAdaptTableColumnConfig[]): string {\n    let filterQuery = null;\n\n    if (text) {\n      const query = columns\n        .filter((column) => !column.hidden && column.searchable)\n        .map((column) => {\n          const fieldId = this.getQueryFilterField(column.field);\n          let queryString = '';\n\n          if (\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.character.shortName ||\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.localizedCharacter.shortName\n          ) {\n            queryString = `${fieldId} LIKE \"%${this.escapeDoubleQuotes(text).replace(/[%_]/g, '\\\\$&')}%\"`;\n          } else {\n            if (!isNaN(text as any)) {\n              queryString = `${fieldId} = \"${this.escapeDoubleQuotes(text)}\"`;\n            }\n          }\n\n          return queryString;\n        })\n        .filter(Boolean)\n        .join(' OR ');\n\n      filterQuery = query ? `(${query})` : '';\n    }\n\n    return filterQuery;\n  }\n\n  addQueries(...queries: string[]): string {\n    return _filter(queries, Boolean).join(' AND ');\n  }\n\n  joinQueryFilters(queries: string[], logic: QueryFiltersLogic): string {\n    const query = queries.join(logic === QueryFiltersLogic.And ? ' AND ' : ' OR ');\n\n    return query ? `(${query})` : '';\n  }\n\n  /**\n   * Convert saved filter preset data from:\n   * {\n   *   and: {\n   *     \"or\": [\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"bar\"\n   *         }\n   *       },\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"foo\"\n   *         }\n   *       }\n   *     ]\n   *   }\n   * }\n   *\n   *\n   * to:\n   * [{\n   *   filterOptionId: '1',\n   *   value: ['bar', 'foo']\n   * }]\n   */\n  getAdvancedFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    return forkJoin(\n      filterData && filterData.and\n        ? filterData.and.map((gridFilterData: IRecordGridFilterData): Observable<SelectedAdvancedFilter> => {\n            const filterLogic = Object.keys(gridFilterData)[0] as RecordGridFilterDataLogic;\n            const filterOperators = gridFilterData[filterLogic] as IRecordGridFilterOperator[];\n            const firstFilterOperator = values(filterOperators[0])[0];\n            const columnField = String(Object.keys(firstFilterOperator)[0]);\n            let fieldDefinition = fieldDefinitionsById[columnField];\n\n            const fieldDefinition$ = fieldDefinition\n              ? of(fieldDefinition)\n              : this.rxRecordGridUtilsService.getFieldDefinition(columnField, primaryRecordDefinition);\n\n            return fieldDefinition$.pipe(\n              filter<IFieldDefinition>(Boolean),\n              map((newFieldDefinition) => {\n                fieldDefinition = newFieldDefinition;\n\n                const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n                if (!fieldDefinitionsById[columnField]) {\n                  this.rxRecordDefinitionService.addFieldDefinitionToMap(\n                    fieldDefinition,\n                    fieldDefinitionsById,\n                    columnField\n                  );\n\n                  fieldDefinitionsById = primaryRecordDefinition.fieldDefinitionsById = {\n                    ...fieldDefinitionsById,\n                    ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n                  };\n\n                  const associationDescriptor = this.rxRecordGridUtilsService.findAssociationDescriptor(\n                    associationDescriptors,\n                    this.rxRecordGridUtilsService.getFieldLocator(columnField)\n                  );\n\n                  filterOptions.push(\n                    this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                      columnField,\n                      this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n                      fieldDefinition,\n                      filterConfig,\n                      true\n                    )\n                  );\n                }\n\n                return filterConfig.getSelectedAdvancedFilterData(\n                  filterLogic,\n                  filterOperators,\n                  fieldDefinition,\n                  columnField\n                );\n              })\n            );\n          })\n        : []\n    ).pipe(\n      defaultIfEmpty([]),\n      map((advancedFiltersData) => advancedFiltersData.filter(Boolean))\n    );\n  }\n\n  getQueryFromRecordGridFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById\n  ): string {\n    const primitiveOperators = [\n      RecordGridFilterOperator.Eq,\n      RecordGridFilterOperator.Like,\n      RecordGridFilterOperator.Ne,\n      RecordGridFilterOperator.Lt,\n      RecordGridFilterOperator.Lte,\n      RecordGridFilterOperator.Gt,\n      RecordGridFilterOperator.Gte,\n      RecordGridFilterOperator.In,\n      'regex'\n    ];\n\n    const isPrimitive = (expression: IRecordGridFilterDataOrOperator): expression is IRecordGridFilterOperator => {\n      return intersection(primitiveOperators.slice(), keys(expression)).length > 0;\n    };\n\n    const evaluatePrimitive = (expression: IRecordGridFilterOperator) => {\n      return reduce(\n        expression,\n        (operatorsResult, condition, operator: RecordGridFilterOperator) => {\n          return (\n            operatorsResult +\n            reduce(\n              condition as IRecordGridFilterColumnValue,\n              (operatorValuesResult, conditionValue, conditionId) => {\n                const fieldDefinition = fieldDefinitionsById[conditionId];\n                let filterOperator = operator;\n                let value = conditionValue;\n\n                const isTextField =\n                  !!fieldDefinition &&\n                  includes(\n                    [\n                      RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n                      RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType\n                    ],\n                    fieldDefinition.resourceType\n                  );\n\n                if (isTextField) {\n                  const { isLikeOperation, filterValue } = this.getStringDataTypeFilterData(\n                    conditionValue,\n                    fieldDefinition\n                  );\n\n                  filterOperator = isLikeOperation ? RecordGridFilterOperator.Like : filterOperator;\n                  value = filterValue;\n                }\n                // following code removes the $DISPLAYVALUE$ from the filter expression\n                // e.g.  {\"and\":[{\"or\":[{\"eq\":{\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"Alex\"}}]}]}\n                if (conditionId === '$DISPLAYVALUE$') {\n                  return operatorValuesResult;\n                }\n\n                return operatorValuesResult + this.getQueryExpression(value, conditionId, filterOperator);\n              },\n              ''\n            )\n          );\n        },\n        ''\n      );\n    };\n\n    let evaluateExpression = (expression: IRecordGridFilterDataOrOperator): string => {\n      if (isPrimitive(expression)) {\n        return evaluatePrimitive(expression);\n      }\n\n      return reduce(\n        expression,\n        (result, childExpression, operator) => {\n          const childExpressionResult = _map(childExpression, evaluateExpression);\n\n          switch (operator) {\n            case RecordGridFilterDataLogic.And:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n            case RecordGridFilterDataLogic.Or:\n              return result + `(${childExpressionResult.join(' OR ')})`;\n            default:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n          }\n        },\n        ''\n      );\n    };\n\n    evaluateExpression = evaluateExpression.bind(this);\n\n    return evaluateExpression(filterData);\n  }\n\n  getSelectedFiltersFromPredefinedFilter(\n    filters: string,\n    recordGridFilters: IRxRecordGridFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      filters,\n      this.deserializeNamedOptions(recordGridFilters)\n    );\n\n    const selectedFilters$ = this.getAdvancedFilterData(\n      recordGridFilterData,\n      fieldDefinitionsById,\n      recordGridFilterConfigs,\n      primaryRecordDefinition,\n      filterOptions,\n      associationDescriptors\n    );\n\n    return selectedFilters$;\n  }\n\n  getRecordGridFilterDataFromAdvancedFilter(\n    filters: SelectedAdvancedFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap\n  ): IRecordGridFilterData {\n    const mappedFilters = filters.map((filterData): IRecordGridFilterDataOrOperator => {\n      let mappedFilter = null;\n      const fieldId = String(filterData.filterOptionId);\n      const fieldDefinition = fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        mappedFilter = filterConfig.getRecordGridFilterData(\n          filterData.value,\n          fieldDefinition,\n          fieldId,\n          namedFilterOptions && namedFilterOptions[fieldId]\n        );\n      }\n\n      return mappedFilter;\n    });\n\n    return mappedFilters.length\n      ? {\n          and: mappedFilters\n        }\n      : {};\n  }\n\n  getQueryFilterField(fieldId: string): string {\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(fieldId)) {\n      return `\\${${fieldId}}`;\n    } else {\n      return `'${fieldId}'`;\n    }\n  }\n\n  buildQueryFilter(fieldId: string, operator: string, value: string | number): string {\n    const needQuotes = isString(value) && !this.filtersKeywords.includes(value);\n    const result = isString(value) ? (needQuotes ? `\"${this.escapeDoubleQuotes(value)}\"` : value) : String(value);\n\n    return `${this.getQueryFilterField(fieldId)} ${operator} ${result}`;\n  }\n\n  filterRows(\n    rows: IRowDataItem[],\n    filters: SelectedAdvancedFilter[],\n    recordDefinition: IRecordDefinition,\n    filterConfigs: IRecordGridFilterConfigs\n  ): IRowDataItem[] {\n    const filterData = this.getRecordGridFilterDataFromAdvancedFilter(\n      filters,\n      recordDefinition.fieldDefinitionsById,\n      filterConfigs\n    );\n\n    return rows.filter((row: IRowDataItem) => {\n      if (row.groupField) {\n        row.items = this.getFilteredItems(row.items, filterData, recordDefinition);\n\n        return row.items.length;\n      } else {\n        return every(filterData.and, (filterExpression) => this.matchRow(row, filterExpression, recordDefinition));\n      }\n    });\n  }\n\n  private getFilteredItems(\n    rowDataItems: RowDataItem[],\n    filterData: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): RowDataItem[] {\n    return reduce(\n      rowDataItems,\n      (filteredItems, itemsRow) => {\n        let { items = [] } = itemsRow;\n\n        if (\n          !itemsRow.items &&\n          every(filterData.and, (filterExpression) => this.matchRow(itemsRow, filterExpression, recordDefinition))\n        ) {\n          filteredItems.push(itemsRow);\n        } else {\n          items = this.getFilteredItems(items, filterData, recordDefinition);\n\n          if (items.length) {\n            filteredItems.push({ ...itemsRow, items });\n          }\n        }\n\n        return filteredItems;\n      },\n      []\n    );\n  }\n\n  private matchRow(\n    row: IRowDataItem | RowDataItem,\n    filterExpression: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(filterExpression);\n\n    switch (operator) {\n      case 'and':\n        return every(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      case 'or':\n        return some(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  private checkCondition(\n    row: IRowDataItem | RowDataItem,\n    childExpression: IRecordGridFilterDataOrOperator,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(childExpression);\n    const fieldId = findKey(childExpression[operator]);\n    const filterValue = childExpression[operator][fieldId];\n    const rowValue = row[fieldId];\n\n    if (\n      recordDefinition.fieldDefinitionsById[fieldId].resourceType ===\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType\n    ) {\n      switch (operator) {\n        case 'eq':\n          return moment(rowValue).isSame(filterValue);\n        case 'lte':\n          return moment(rowValue).isSameOrBefore(filterValue);\n        case 'lt':\n          return moment(rowValue).isBefore(filterValue);\n        case 'gte':\n          return moment(rowValue).isSameOrAfter(filterValue);\n        case 'gt':\n          return moment(rowValue).isAfter(filterValue);\n\n        default:\n          return false;\n      }\n    } else {\n      return operator === 'eq' ? this.rxStringService.caseInsensitiveIsEqual(rowValue, filterValue) : false;\n    }\n  }\n\n  private escapeDoubleQuotes(text: string): string {\n    return text.replace(/\"/g, '\"\"');\n  }\n\n  private getQueryExpression(conditionValue: any, conditionId: string, operator: RecordGridFilterOperator): string {\n    const value = isString(conditionValue) ? '\"' + conditionValue + '\"' : conditionValue;\n\n    conditionId = this.getQueryFilterField(conditionId);\n\n    switch (operator) {\n      case RecordGridFilterOperator.Eq:\n        return conditionId + '=' + value;\n      case RecordGridFilterOperator.Like:\n        return conditionId + ' LIKE ' + value;\n      case RecordGridFilterOperator.Ne:\n        return conditionId + '!=' + value;\n      case RecordGridFilterOperator.Lt:\n        return conditionId + '<' + value;\n      case RecordGridFilterOperator.Lte:\n        return conditionId + '<=' + value;\n      case RecordGridFilterOperator.Gt:\n        return conditionId + '>' + value;\n      case RecordGridFilterOperator.Gte:\n        return conditionId + '>=' + value;\n      case RecordGridFilterOperator.In:\n        return conditionId + ' IN ' + value;\n      default:\n        return conditionId + '=' + value;\n    }\n  }\n\n  getStringDataTypeFilterData(\n    filterValue: string,\n    fieldDefinition: IFieldDefinition\n  ): { isLikeOperation: boolean; filterValue: string } {\n    let isLikeOperation = false;\n\n    if (!get(fieldDefinition.searchDefinition, 'enableFTSSearch')) {\n      if (includes(filterValue, '%')) {\n        const filterValueSplitData = filterValue.split(/\\\\\\\\/);\n\n        isLikeOperation = some(filterValueSplitData, (value) => value.replace(/\\\\%/g, '').match('%'));\n\n        if (!isLikeOperation) {\n          filterValue = _map(filterValueSplitData, (value) => value.replace(/\\\\%/g, '%')).join('\\\\');\n        }\n      } else {\n        filterValue = filterValue.replace('\\\\\\\\', '\\\\');\n      }\n    }\n\n    return { isLikeOperation, filterValue };\n  }\n\n  clearRemovedNamedFilterOptions(\n    selectedFilters: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[],\n    namedFilterOptions: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return selectedFilters.reduce((result, filter) => {\n      const namedFilterOptionsGuids = namedFilterOptions[filter.filterOptionId]?.map((option) => option.guid) ?? [];\n\n      filter.value.namedOptions = filter.value.namedOptions.filter((option) =>\n        namedFilterOptionsGuids.includes(option)\n      );\n\n      if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(filter.value)) {\n        result.push(filter);\n      }\n\n      return result;\n    }, []);\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterNumberDataType,\n  AdvancedFilterNumberTypeParams,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionDataType,\n  AdvancedFilterSelectionTypeData,\n  AdvancedFilterStringDataType,\n  booleanDataTypeBlankValue,\n  NumberOrBigNumber,\n  RxSelectOption,\n  SelectedAdvancedFilter\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  ISelectionFieldDefinition,\n  RecordFieldOption,\n  RX_RECORD_DEFINITION,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { IPlainObject, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RxNumberUtilsService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castArray, chain, compact, find, get, isEmpty, isString, map as _map } from 'lodash';\nimport moment from 'moment-es6';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport {\n  ITagInfo,\n  IRecordGridFilterConfig,\n  IRecordGridFilterConfigs\n} from '../../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterData,\n  IRecordGridFilterOperator,\n  IRecordGridNamedFilterOption,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { IRecordGridColumnNamedFilterOption, RxAdvancedFilterDateDataType } from '../../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, NamedListTypeAheadOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridFilterConfigService {\n  private associatedFieldIdPatternRegExp: RegExp = new RegExp(\n    `'(${RX_RECORD_GRID.associatedFieldIdPrefixPattern}\\\\d+)'`,\n    'g'\n  );\n\n  constructor(\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxNumberUtilsService: RxNumberUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private translateService: TranslateService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getConfigs(): IRecordGridFilterConfigs {\n    const textColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.string,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n        const builtQuery = chain(filterTag.value.filterValue)\n          .filter(Boolean)\n          .map((optionValue: NamedListTypeAheadOption) => {\n            const { isLikeOperation, filterValue } = this.rxRecordGridFilterService.getStringDataTypeFilterData(\n              get(optionValue, 'value', optionValue),\n              fieldDefinition\n            );\n\n            return this.rxRecordGridFilterService.buildQueryFilter(\n              fieldId,\n              isLikeOperation ? 'like' : '=',\n              filterValue.trim()\n            );\n          })\n          .concat(selectedNamedOptionExpressions)\n          .value();\n\n        return this.rxRecordGridFilterService.joinQueryFilters(builtQuery, QueryFiltersLogic.Or);\n      },\n      getRecordGridFilterData: (value, fieldDefinition, fieldId, namedFilterOptions) => {\n        const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n        const filterOperators = value.filterValue.map(\n          (filterValue: NamedListTypeAheadOption): IRecordGridFilterOperator => {\n            const operators = this.getRecordGridFilterOperator(\n              RecordGridFilterOperator.Eq,\n              fieldId,\n              get(filterValue, 'value', filterValue).trim()\n            );\n\n            const displayValue = get(filterValue, 'displayValue');\n\n            if (fieldDefinition.namedListDefinition && displayValue) {\n              operators.eq['$DISPLAYVALUE$'] = displayValue;\n            }\n\n            return operators;\n          }\n        );\n\n        return {\n          or: filterOperators.concat(namedFilterOptionOperators)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        const filterValues: string[] = [];\n        const namedListFilterValues: INamedListOption[] = [];\n        const namedFilterOptionsGuids = [];\n\n        if (filterLogic === RecordGridFilterDataLogic.Or) {\n          filterOperators.forEach((filterOperator: IRecordGridFilterOperator) => {\n            const operator = Object.keys(filterOperator)[0];\n            const value = filterOperator[operator][fieldId];\n\n            if (isString(value)) {\n              if (fieldDefinition.namedListDefinition) {\n                const displayValue = filterOperator[operator]['$DISPLAYVALUE$'];\n\n                namedListFilterValues.push({ displayValue, value, title: '', contextualFields: [] });\n              } else {\n                filterValues.push(value);\n              }\n            } else if (value[RecordGridNamedFilterOptionKey]) {\n              namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n            }\n          });\n        }\n\n        const rxRecordGridAdvancedFilterValue = isEmpty(namedListFilterValues)\n          ? new RxRecordGridAdvancedFilterValue(filterValues, namedFilterOptionsGuids)\n          : new RxRecordGridAdvancedFilterValue(namedListFilterValues, namedFilterOptionsGuids);\n\n        return {\n          filterOptionId: fieldId,\n          value: rxRecordGridAdvancedFilterValue\n        };\n      },\n      getToolbarTagInfo: ({ primaryRecordDefinition, value, tag, fieldId, namedFilterOptions }) => {\n        const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(fieldId);\n        let associationDescriptor: IAssociationDescriptor;\n\n        return this.rxRecordGridUtilsService.getAssociationDescriptor(fieldId, primaryRecordDefinition).pipe(\n          mergeMap((loadedAssociationDescriptor) => {\n            associationDescriptor = loadedAssociationDescriptor;\n\n            return this.rxRecordGridUtilsService.getDisplayFieldDescriptor(\n              fieldId,\n              primaryRecordDefinition,\n              associationDescriptor && associationDescriptor.recordDefinitionName\n            );\n          }),\n          mergeMap((displayFieldDefinition) => {\n            const isRecordDisplayField = fieldLocator.fieldId !== String(displayFieldDefinition.id);\n\n            let displayValuesData$: Observable<{\n              displayValues: RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>;\n              label: string;\n            }>;\n\n            if (isRecordDisplayField) {\n              const filterValues = this.rxNamedListService.getNamesFromTypeAheadOptions(value.filterValue);\n\n              displayValuesData$ = this.rxRecordInstanceUtilsService\n                .getFieldValues(associationDescriptor.recordDefinitionName, filterValues, [\n                  String(RX_RECORD_DEFINITION.coreFieldIds.id),\n                  String(displayFieldDefinition.id)\n                ])\n                .pipe(\n                  map((displayValueRows) => {\n                    const nameWithAssociationLabel = compact([\n                      this.rxDefinitionNameService.getDisplayName(associationDescriptor.associationDefinition.name),\n                      displayFieldDefinition.name\n                    ]).join(' > ');\n\n                    const displayValues = value.filterValue.map((strFilterValue) => {\n                      const row = find(\n                        displayValueRows,\n                        (displayValueRow) => displayValueRow[RX_RECORD_DEFINITION.coreFieldIds.id] === strFilterValue\n                      );\n\n                      return row ? row[displayFieldDefinition.id] : strFilterValue;\n                    });\n\n                    return {\n                      displayValues: new RxRecordGridAdvancedFilterValue(displayValues),\n                      label: nameWithAssociationLabel\n                    };\n                  })\n                );\n            } else {\n              displayValuesData$ = of({ displayValues: value, label: tag.data.filterOption.label });\n            }\n\n            return displayValuesData$.pipe(\n              map(({ displayValues, label }) => {\n                const displayTagValue = displayValues.filterValue\n                  .map((filterValue) => {\n                    const filterValueExpression: string = get(filterValue, 'value', filterValue);\n\n                    const filterDisplayText: string =\n                      get(filterValue, 'displayValue') ?? get(filterValue, 'value', filterValue);\n\n                    const text =\n                      filterValueExpression === '$USER$'\n                        ? this.translateService.instant(\n                            'com.bmc.arsys.rx.client.view-components.record-grid.filters.me.label'\n                          )\n                        : filterDisplayText;\n\n                    const tooltip = filterValue?.displayValue\n                      ? `${filterValue.displayValue} (${filterValue.value})`\n                      : filterValue?.value ?? filterValue;\n\n                    return { tooltip, text } as ITagInfo;\n                  })\n                  .concat(\n                    displayValues.namedOptions.map((namedOption: string) => {\n                      const namedFilterOption =\n                        namedFilterOptions.find((option) => option.guid === namedOption)?.title || namedOption;\n\n                      return { text: namedFilterOption, tooltip: namedFilterOption } as ITagInfo;\n                    })\n                  );\n\n                const displayText = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.text).join(', ');\n                const tooltip = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.tooltip).join(', ');\n\n                return {\n                  text: `${label}: ${displayText}`,\n                  tooltip: `${label}: ${tooltip}`\n                };\n              })\n            );\n          })\n        );\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => fieldDefinition\n    };\n\n    const numericColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterNumberDataType>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.number,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n        const [fromValue, toValue] = filterTag.value.filterValue;\n        const queries: string[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', String(toValue)));\n        }\n\n        const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n        return this.rxRecordGridFilterService.joinQueryFilters(\n          valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n          QueryFiltersLogic.Or\n        );\n      },\n      getRecordGridFilterData: (value, fieldDefinition: IFieldDefinition, fieldId) => {\n        const [fromValue, toValue] = value.filterValue;\n        const queries: IRecordGridFilterOperator[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, String(toValue)));\n        }\n\n        return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): AdvancedFilterNumberTypeParams => {\n        return {\n          minValue: <NumberOrBigNumber>(<unknown>fieldDefinition.minValue),\n          maxValue: <NumberOrBigNumber>(<unknown>fieldDefinition.maxValue)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        /**\n         * Convert from:\n         *\n         *  \"and\": [\n         *    {\n         *      \"gte\": {\n         *        \"536870917\": -5\n         *      }\n         *    },\n         *    {\n         *      \"lte\": {\n         *        \"536870917\": -1 // or \"-1\"\n         *      }\n         *    }\n         *  ]\n         *\n         * to:\n         *\n         * {\n         *   filterOptionId: '536870917',\n         *   value: [-5, -1]\n         * }\n         *\n         */\n        let filterValue: AdvancedFilterNumberDataType = [null, null];\n\n        const processRange = (operators: IRecordGridFilterOperator[]) => {\n          const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n          if (gteOperator) {\n            const fromValue = parseFloat(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n              filterValue[0] = fromValue;\n            }\n          }\n\n          const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n          if (lteOperator) {\n            const toValue = parseFloat(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n              filterValue[1] = toValue;\n            }\n          }\n        };\n\n        if (filterLogic === RecordGridFilterDataLogic.And) {\n          processRange(filterOperators);\n        } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n          const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n          if (andOperator) {\n            processRange(andOperator[RecordGridFilterDataLogic.And]);\n          } else if (filterOperators.length === 1) {\n            let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n            if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n              eqValue = parseFloat(eqValue);\n\n              filterValue = [eqValue, eqValue];\n            }\n          }\n        }\n\n        const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n        return {\n          filterOptionId: fieldId,\n          value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n        };\n      }\n    };\n\n    return {\n      [RX_RECORD_DEFINITION.resourceTypes.character]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.attachment]: textColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.integer]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.decimal]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.real]: numericColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.selection]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterSelectionDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.selection,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            filterTag.value.filterValue\n              .map((filterValue) => this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', filterValue))\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getDataForAdvancedFilter: (fieldDefinition: ISelectionFieldDefinition): AdvancedFilterSelectionTypeData => {\n          const selectOptions: RxSelectOption[] = _map(\n            fieldDefinition.optionLabelsById,\n            (label, optionId): RxSelectOption => ({\n              id: optionId,\n              name: label\n            })\n          );\n\n          if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.optional) {\n            selectOptions.unshift({\n              id: '$NULL$',\n              name: this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n              )\n            });\n          }\n\n          return {\n            selectOptions,\n            selectTexts: null\n          };\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n          return {\n            or: value.filterValue\n              .map((optionId): IRecordGridFilterOperator => {\n                return this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, optionId);\n              })\n              .concat(namedFilterOptionOperators)\n          };\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          const filterValue: string[] = [];\n          const namedFilterOptionsGuids = [];\n\n          if (filterLogic === RecordGridFilterDataLogic.Or) {\n            filterOperators.forEach((filterOperator) => {\n              const operator = Object.keys(filterOperator)[0];\n\n              if (operator === RecordGridFilterOperator.Eq) {\n                const value = filterOperator[operator][fieldId];\n\n                if (isString(value)) {\n                  filterValue.push(value);\n                } else if (value[RecordGridNamedFilterOptionKey]) {\n                  namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n                }\n              }\n            });\n          }\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionsGuids)\n          };\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.timeOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.time,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('HH:mm:ss')));\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('HH:mm:ss')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n          const processRange = (operators: IRecordGridFilterOperator[]) => {\n            const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n            if (gteOperator) {\n              const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId], 'LTS');\n\n              if (fromValue.isValid()) {\n                filterValue[0] = fromValue;\n              }\n            }\n\n            const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n            if (lteOperator) {\n              const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId], 'LTS');\n\n              if (toValue.isValid()) {\n                filterValue[1] = toValue;\n              }\n            }\n          };\n\n          if (filterLogic === RecordGridFilterDataLogic.And) {\n            processRange(filterOperators);\n          } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n            const andOperator = find(\n              filterOperators,\n              (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]\n            );\n\n            if (andOperator) {\n              processRange(andOperator[RecordGridFilterDataLogic.And]);\n            } else if (filterOperators.length === 1) {\n              let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n              if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n                eqValue = moment(eqValue, 'LTS');\n\n                filterValue = [eqValue, eqValue];\n              }\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n          };\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.date,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(\n              this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('YYYY-MM-DD'))\n            );\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('YYYY-MM-DD')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateTime]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.datetime,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.toISOString()));\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.toISOString()));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, fromValue.toISOString())\n            );\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, toValue.toISOString())\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.boolean]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.boolean,\n        getQueryFilter: (\n          filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string,\n          namedFilterOptions\n        ): string => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            castArray(filterTag.value.filterValue)\n              .map((filterValue) =>\n                this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', this.getBooleanFilterValue(filterValue))\n              )\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (\n          value: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ): IRecordGridFilterData => {\n          return {\n            or: castArray(value.filterValue)\n              .map(\n                (filterValue): IRecordGridFilterOperator =>\n                  this.getRecordGridFilterOperator(\n                    RecordGridFilterOperator.Eq,\n                    fieldId,\n                    this.getBooleanFilterValue(filterValue)\n                  )\n              )\n              .concat(this.getNamedFilterOptionsOperators(value, fieldId))\n          };\n        },\n        getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => {\n          return {\n            selectOptions: [\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.true'),\n                id: true\n              },\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.false'),\n                id: false\n              },\n              {\n                name: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n                ),\n                id: 'blank'\n              }\n            ],\n            isRequired: fieldDefinition.fieldOption === RecordFieldOption.Required\n          };\n        },\n        getSelectedAdvancedFilterData: (\n          filterLogic: RecordGridFilterDataLogic,\n          filterOperators: IRecordGridFilterOperator[],\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ) => {\n          let filterValue;\n\n          if (fieldDefinition.fieldOption === RecordFieldOption.Required) {\n            if (filterOperators.length === 1) {\n              const eqOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterOperator.Eq]);\n\n              if (eqOperator) {\n                const savedFilterValue = eqOperator[RecordGridFilterOperator.Eq][fieldId];\n\n                if (savedFilterValue === '$NULL$') {\n                  filterValue = null;\n                } else {\n                  filterValue = [savedFilterValue === 'true'];\n                }\n              }\n            } else {\n              filterValue = null;\n            }\n          } else {\n            filterValue = [];\n\n            if (filterLogic === RecordGridFilterDataLogic.Or) {\n              filterOperators.forEach((filterOperator) => {\n                const operator = Object.keys(filterOperator)[0];\n\n                if (operator === RecordGridFilterOperator.Eq) {\n                  const value = filterOperator[operator][fieldId];\n\n                  if (!value[RecordGridNamedFilterOptionKey]) {\n                    switch (value) {\n                      case 'true':\n                        filterValue.push(true);\n                        break;\n                      case '$NULL$':\n                        filterValue.push(booleanDataTypeBlankValue);\n                        break;\n                      default:\n                        filterValue.push(false);\n                        break;\n                    }\n                  }\n                }\n              });\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return filterValue\n            ? {\n                filterOptionId: fieldId,\n                value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n              }\n            : null;\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstance]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.object]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstanceProcessVariable]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance]: null\n    };\n  }\n\n  private getDateSelectedAdvancedFilterData(\n    fieldId: string,\n    filterLogic: RecordGridFilterDataLogic,\n    filterOperators: IRecordGridFilterOperator[]\n  ): SelectedAdvancedFilter {\n    let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n    const processRange = (operators: IRecordGridFilterOperator[]) => {\n      const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n      if (gteOperator) {\n        const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n        if (fromValue.isValid()) {\n          filterValue[0] = fromValue;\n        }\n      }\n\n      const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n      if (lteOperator) {\n        const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n        if (toValue.isValid()) {\n          filterValue[1] = toValue;\n        }\n      }\n    };\n\n    if (filterLogic === RecordGridFilterDataLogic.And) {\n      processRange(filterOperators);\n    } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n      const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n      if (andOperator) {\n        processRange(andOperator[RecordGridFilterDataLogic.And]);\n      } else if (filterOperators.length === 1) {\n        let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n        if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n          eqValue = moment(eqValue);\n\n          filterValue = [eqValue, eqValue];\n        }\n      }\n    }\n\n    return {\n      filterOptionId: fieldId,\n      value: new RxRecordGridAdvancedFilterValue(filterValue, this.getNamedFilterOptionGuids(filterOperators, fieldId))\n    };\n  }\n\n  private getFilterRangeDataOperator(\n    queries: IRecordGridFilterOperator[],\n    namedFilterOptionOperators: IRecordGridFilterOperator[]\n  ): IRecordGridFilterData {\n    const andOperator = {\n      and: queries\n    };\n\n    if (namedFilterOptionOperators.length) {\n      return {\n        or: queries.length ? namedFilterOptionOperators.concat(andOperator) : namedFilterOptionOperators\n      };\n    } else {\n      return andOperator;\n    }\n  }\n\n  private getNamedFilterOptionGuids(filterOperators: IRecordGridFilterOperator[], fieldId: string): string[] {\n    return filterOperators\n      .filter((filterOperator) => filterOperator[RecordGridFilterOperator.Eq])\n      .map((operator) => {\n        const operatorElementElement = operator[RecordGridFilterOperator.Eq][fieldId];\n\n        return operatorElementElement ? operatorElementElement[RecordGridNamedFilterOptionKey] : null;\n      })\n      .filter((guid) => Boolean(guid));\n  }\n\n  private getSelectedNamedOptionExpressions(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>\n  ): string[] {\n    return namedFilterOptions\n      .filter((option) => filterTag.value.namedOptions.includes(option.guid))\n      .map((option) => option.filterExpression.replace(this.associatedFieldIdPatternRegExp, '${$1}'));\n  }\n\n  private getNamedFilterOptionsOperators(\n    value: RxRecordGridAdvancedFilterValue,\n    fieldId: string\n  ): IRecordGridFilterOperator[] {\n    return value.namedOptions.map((guid) =>\n      this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, {\n        [RecordGridNamedFilterOptionKey]: guid\n      } as IRecordGridNamedFilterOption)\n    );\n  }\n\n  private getRecordGridFilterOperator(operator: string, fieldId: string, value: any): IRecordGridFilterOperator {\n    return { [operator]: { [fieldId]: value } };\n  }\n\n  private getBooleanFilterValue(filterValue: boolean | string): string {\n    return filterValue ? (filterValue === booleanDataTypeBlankValue ? '$NULL$' : 'true') : 'false';\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { RxRecordGridUtilsService } from '../../services/record-grid-utils.service';\nimport { IRecordGridFilterTag } from '../../types/record-grid-filter.types';\nimport { clone, findIndex, get, isNull } from 'lodash';\nimport { IRemoveFilterTagEvent } from './filter-tags.types';\nimport { Placement } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-filter-tags',\n  templateUrl: './filter-tags.component.html',\n  styleUrls: ['./filter-tags.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FilterTagsComponent {\n  @Input()\n  tags: IRecordGridFilterTag[];\n\n  @Input()\n  isDisabled: boolean;\n\n  @Input()\n  tagsLimit: number;\n\n  @Input()\n  restTagsDropdownPlacement: Placement[] = ['bottom', 'bottom-right', 'auto'];\n\n  @Output()\n  removeTag = new EventEmitter<IRemoveFilterTagEvent>();\n\n  constructor(private rxRecordGridUtilsService: RxRecordGridUtilsService) {\n    this.trackByForFilterTags = this.trackByForFilterTags.bind(this);\n  }\n\n  getTranslateParams(): { count: number } {\n    return { count: this.getRestTagsCount() };\n  }\n\n  getRestTagsCount(): number {\n    return this.tagsLimit && this.tags ? this.tags.length - this.tagsLimit : 0;\n  }\n\n  onRemoveFilterTag(tag: IRecordGridFilterTag): void {\n    const filterOption = tag.data.filterOption;\n    const tags = clone(this.tags);\n\n    let index: number;\n\n    if (isNull(filterOption)) {\n      index = findIndex(tags, (toolbarTag) => this.rxRecordGridUtilsService.isSharedFilterPresetTag(toolbarTag));\n    } else {\n      const filterOptionId = tag.data.filterOption.id;\n\n      index = findIndex(tags, (toolbarTag) => get(toolbarTag.data.filterOption, 'id') === filterOptionId);\n    }\n\n    if (index > -1) {\n      tags.splice(index, 1);\n    }\n\n    this.removeTag.emit({ removedTag: tag, newTags: tags });\n  }\n\n  trackByForFilterTags(index: number, tag: IRecordGridFilterTag): number | string {\n    return this.rxRecordGridUtilsService.isSharedFilterPresetTag(tag) ? index : tag.data.filterOption.id || index;\n  }\n}\n","<div>\n  <adapt-tag\n    class=\"mr-1\"\n    [removable]=\"!isDisabled\"\n    [disabled]=\"isDisabled\"\n    *ngFor=\"\n      let tag of tags | slice: 0:(tagsLimit ? tagsLimit : tags?.length);\n      let index = index;\n      trackBy: trackByForFilterTags\n    \"\n    type=\"active\"\n    (remove)=\"onRemoveFilterTag(tag)\"\n  >\n    <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n  </adapt-tag>\n\n  <span adaptDropdown *ngIf=\"getRestTagsCount() > 0\" [appendToBody]=\"true\" [placement]=\"restTagsDropdownPlacement\">\n    <button adaptDropdownToggle type=\"button\" class=\"filter-tags__dropdown-toggle btn btn-link p-0 ml-1\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.filters.show-more-filters.label'\n          | translate: getTranslateParams()\n      }}\n    </button>\n\n    <div adaptDropdownMenu class=\"dropdown-menu filter-tags__dropdown-menu p-2\">\n      <div *ngFor=\"let tag of tags | slice: -getRestTagsCount(); let index = index; trackBy: trackByForFilterTags\">\n        <adapt-tag type=\"active\" [removable]=\"!isDisabled\" (remove)=\"onRemoveFilterTag(tag)\">\n          <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n        </adapt-tag>\n      </div>\n    </div>\n  </span>\n</div>\n","import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent, RxDefinitionNameService, RxGlobalCacheService } from '@helix/platform/shared/api';\nimport {\n  IRecordGridFilterModel,\n  IRecordGridFilterSelectAdvancedFiltering,\n  IRecordGridFilterSelectControlOptions\n} from './record-grid-filter-select-control.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { cloneDeep, every, find, findIndex, isEmpty, isEqual, isFunction, reduce, uniq, values } from 'lodash';\nimport { AdvancedFilterOption, AdvancedFilterTag, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription } from 'rxjs';\nimport {\n  IRecordDefinition,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RxRecordGridFilterConfigService } from '../../../runtime/services/record-grid-filter-config.service';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { RxRecordGridFilterService } from '../../../runtime/services/record-grid-filter.service';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterOperator } from '@helix/platform/view/api';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RxRecordGridAdvancedFilteringService } from '../../../common/services/record-grid-advanced-filtering.service';\nimport { IRemoveFilterTagEvent } from '../../../common/components/filter-tags/filter-tags.types';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../../../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRecordGridColumnNamedFilterOption } from '../../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { ITagInfo } from '../../../common/types/record-grid-filter-config.interfaces';\n\n@Component({\n  selector: 'rx-record-grid-filter-select-control',\n  templateUrl: './record-grid-filter-select-control.component.html',\n  styleUrls: ['./record-grid-filter-select-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridFilterSelectControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridFilterSelectControlComponent\n  extends ValueAccessor<IRecordGridFilterModel>\n  implements IFormControlComponent, OnInit, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridFilterSelectControlOptions;\n  groupFilterValue: string;\n  groupFilterItems: { name: string; value: string }[];\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  advancedFilterData: IRecordGridFilterSelectAdvancedFiltering = {\n    filterOptions: [],\n    selectedFilters: [],\n    filterTexts: {\n      initialDropdownAnchorLabel: 'Filter'\n    },\n    recordGridFilterConfigs: null,\n    fieldDefinitionsById: {},\n    fieldDefinitionsInitialized$: new Subject(),\n    filterValueInitialized$: new Subject(),\n    associationDescriptors: []\n  };\n\n  private subscription = new Subscription();\n  private filtersModel: IRecordGridFilterModel;\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n    this.initEmptyValue();\n\n    this.advancedFilterData.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n\n    this.subscription.add(\n      combineLatest([\n        this.advancedFilterData.filterValueInitialized$,\n        this.advancedFilterData.fieldDefinitionsInitialized$\n      ]).subscribe(() => {\n        this.initSelectedAdvancedFilters(this.value);\n      })\n    );\n  }\n\n  getGroupFilterName(model: string): string {\n    return this.groupFilterItems.find((item) => item.value === model)?.name;\n  }\n\n  onGroupFilterValueModelChange(model: string): void {\n    this.groupFilterValue = model;\n  }\n\n  ngOnInit(): void {\n    this.initFilterOptions();\n  }\n\n  initEmptyValue(): void {\n    this.innerValue = {\n      basicFilters: null,\n      filtersJson: null\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options &&\n      changes.options.previousValue &&\n      (changes.options.currentValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name !==\n        (changes.options.previousValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name\n    ) {\n      this.initEmptyValue();\n      this.advancedFilterData.selectedFilters = [];\n      this.advancedFilterData.filterOptions = [];\n      this.initFilterOptions();\n    }\n  }\n\n  initFilterOptions(): void {\n    this.groupFilterItems = [];\n\n    if (this.options.primaryRecordDefinition) {\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.options.primaryRecordDefinition.name)\n        .pipe(\n          switchMap((associationDescriptors) => {\n            this.advancedFilterData.associationDescriptors = associationDescriptors;\n\n            const recordDefinitionNames = uniq(\n              associationDescriptors.map((associationDescriptor) => associationDescriptor.recordDefinitionName)\n            );\n\n            const recordDefinitions$ = recordDefinitionNames.length\n              ? forkJoin(\n                  recordDefinitionNames.map((name) => this.rxRecordDefinitionCacheService.getRecordDefinition(name))\n                )\n              : of([] as IRecordDefinition[]);\n\n            return recordDefinitions$.pipe(map((recordDefinitions) => ({ recordDefinitions, associationDescriptors })));\n          }),\n          take(1)\n        )\n        .subscribe(({ recordDefinitions, associationDescriptors }) => {\n          const primaryRecordDefinition = cloneDeep(this.options.primaryRecordDefinition);\n\n          [primaryRecordDefinition, ...recordDefinitions].forEach((recordDefinition) => {\n            if (!recordDefinition.fieldDefinitionsById) {\n              recordDefinition.fieldDefinitionsById =\n                this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n            }\n          });\n\n          this.groupFilterValue = primaryRecordDefinition.name;\n\n          this.advancedFilterData.fieldDefinitionsById =\n            this.rxRecordGridAdvancedFilteringService.addAssociationFieldsToFieldDefinitionsById(\n              primaryRecordDefinition.fieldDefinitionsById,\n              associationDescriptors,\n              recordDefinitions\n            );\n\n          associationDescriptors.forEach((associationDescriptor) => {\n            const currentRecordDefinition = find(\n              recordDefinitions,\n              (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n            );\n\n            this.groupFilterItems.push({\n              name: associationDescriptor.label,\n              value: associationDescriptor.label\n            });\n\n            this.advancedFilterData.filterOptions.push(\n              ...this.getFilterOptions(currentRecordDefinition, associationDescriptor, associationDescriptor.label)\n            );\n          });\n\n          this.groupFilterItems = this.groupFilterItems.sort((gropFilter, gropFilterToCompare) =>\n            gropFilter.name.localeCompare(gropFilterToCompare.name)\n          );\n\n          const mainRecordDefinitionName = this.rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name);\n\n          this.advancedFilterData.filterOptions.push(...this.getFilterOptions(primaryRecordDefinition, null, null));\n\n          this.groupFilterItems.unshift({\n            name: mainRecordDefinitionName,\n            value: primaryRecordDefinition.name\n          });\n\n          this.advancedFilterData.fieldDefinitionsInitialized$.next();\n        });\n    }\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    const selectedFilters = this.advancedFilterData.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n  }\n\n  getFilterOptions(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor: IAssociationDescriptor,\n    prefix?: string\n  ): AdvancedFilterOption[] {\n    const fieldDefinitions = recordDefinition.fieldDefinitions;\n\n    return fieldDefinitions\n      .map((fieldDefinition): AdvancedFilterOption => {\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n        const label = this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, null);\n\n        const fieldId = this.rxRecordGridUtilsService.getFieldIdForGridColumn(\n          fieldDefinition.id,\n          associationDescriptor\n        );\n\n        const filterOption = this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n          fieldId,\n          label,\n          fieldDefinition,\n          filterConfig,\n          false,\n          {\n            optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n            requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n            inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n            inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n            inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n            inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n            inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n            inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n            inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n          },\n          prefix ? `${prefix} > ${label}` : null,\n          this.options.namedFilterOptions ? this.options.namedFilterOptions[fieldId] : []\n        );\n\n        const recordDefinitionName = associationDescriptor\n          ? associationDescriptor.label\n          : this.options.primaryRecordDefinition.name;\n\n        filterOption.isHidden = () =>\n          this.groupFilterValue !== recordDefinitionName || this.options.selectedFieldIds?.includes(fieldId) === false;\n\n        return filterOption;\n      })\n      .sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  onAdvancedFiltersChange(selectedFilters: SelectedAdvancedFilter[]): void {\n    this.advancedFilterData.selectedFilters = selectedFilters;\n\n    const oldBasicFilters = this.value.basicFilters || [];\n\n    const basicFilters = reduce(\n      selectedFilters,\n      (recordGridFilters, selectedFilter) => {\n        const fieldId = selectedFilter.filterOptionId;\n        const fieldDefinition = this.advancedFilterData.fieldDefinitionsById[fieldId];\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        const columnRecordGridFilterData = filterConfig.getRecordGridFilterData(\n          selectedFilter.value,\n          fieldDefinition,\n          fieldId\n        );\n\n        (columnRecordGridFilterData.or || columnRecordGridFilterData.and).forEach(\n          (recordGridFilterOperator: IRecordGridFilterOperator) => {\n            const gridFilterValue = values(recordGridFilterOperator)[0][fieldId];\n            const gridFilterDisplayValue = values(recordGridFilterOperator)[0]['$DISPLAYVALUE$'];\n\n            const columnOldBasicFilter = find(\n              oldBasicFilters,\n              (oldBasicFilter) =>\n                oldBasicFilter.fieldId === fieldId &&\n                oldBasicFilter.value === gridFilterValue &&\n                every(recordGridFilters, (gridFilter) => gridFilter.guid !== oldBasicFilter.guid)\n            );\n\n            const recordGridFilter: IRxRecordGridFilter = {\n              fieldId,\n              value: gridFilterValue,\n              $DISPLAYVALUE$: gridFilterDisplayValue,\n              guid: (columnOldBasicFilter && columnOldBasicFilter.guid) || this.rxGuidService.generate()\n            };\n\n            recordGridFilters.push(recordGridFilter);\n          }\n        );\n\n        return recordGridFilters;\n      },\n      [] as IRxRecordGridFilter[]\n    );\n\n    const recordGridFilterData = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      selectedFilters,\n      this.advancedFilterData.fieldDefinitionsById,\n      this.advancedFilterData.recordGridFilterConfigs\n    );\n\n    let filtersJson = isEmpty(recordGridFilterData) ? null : JSON.stringify(recordGridFilterData);\n\n    if (filtersJson) {\n      filtersJson = this.rxRecordGridFilterHelperService.denormalizeFilterString(filtersJson, basicFilters);\n    }\n\n    this.filtersModel = {\n      basicFilters,\n      filtersJson\n    };\n\n    this.value = {\n      basicFilters,\n      filtersJson\n    };\n  }\n\n  onWriteValue(value: IRecordGridFilterModel): void {\n    if (!isEqual(this.filtersModel, value)) {\n      this.advancedFilterData.filterValueInitialized$.next();\n    }\n  }\n\n  initSelectedAdvancedFilters(value: IRecordGridFilterModel) {\n    if (value?.filtersJson && !isEmpty(value.basicFilters)) {\n      this.rxRecordGridFilterService\n        .getSelectedFiltersFromPredefinedFilter(\n          value.filtersJson,\n          value.basicFilters,\n          this.advancedFilterData.fieldDefinitionsById,\n          this.advancedFilterData.recordGridFilterConfigs,\n          this.options.primaryRecordDefinition,\n          this.advancedFilterData.filterOptions,\n          this.advancedFilterData.associationDescriptors\n        )\n        .pipe(\n          map((selectedFilters) =>\n            this.options.namedFilterOptions\n              ? this.rxRecordGridFilterService.clearRemovedNamedFilterOptions(\n                  selectedFilters,\n                  this.options.namedFilterOptions\n                )\n              : selectedFilters\n          )\n        )\n        .subscribe((selectedFilters) => {\n          this.advancedFilterData.selectedFilters = selectedFilters;\n        });\n    }\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.options.namedFilterOptions ? this.options.namedFilterOptions[filterOptionConfig.id] : [];\n  }\n\n  getTags(filtersExpressionsTags: AdvancedFilterTag[]): Observable<AdvancedFilterTag[]> {\n    const tags =\n      filtersExpressionsTags?.filter((filterTag: AdvancedFilterTag) => isEmpty(filterTag.data.validationErrors)) ?? [];\n\n    const tags$ = tags.map((tag: AdvancedFilterTag): Observable<AdvancedFilterTag> => {\n      if (tag.data.filterOption) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = tag.data.filterOption.data;\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition?.resourceType];\n\n        if (isFunction(filterConfig?.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.options.primaryRecordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.options.namedFilterOptions?.[fieldId] ?? []\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return tags$.length ? forkJoin(tags$) : of([]);\n  }\n}\n","<ng-container *ngIf=\"advancedFilterData.filterOptions\">\n  <adapt-advanced-filter\n    #advancedFilter\n    [hidden]=\"isDisabled\"\n    [appendDropdownToBody]=\"true\"\n    [enableSavedFilters]=\"false\"\n    [filterOptions]=\"advancedFilterData.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"advancedFilterData.selectedFilters\"\n    [texts]=\"advancedFilterData.filterTexts\"\n    [applyFiltersByUserAction]=\"true\"\n    [filterOptionsCustomAreaTemplate]=\"filterOptionsCustomAreaTemplate\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    [anchorDisabled]=\"options.anchorDisabled\"\n  ></adapt-advanced-filter>\n\n  <rx-filter-tags\n    [isDisabled]=\"isDisabled\"\n    [tags]=\"getTags(advancedFilter.filtersExpressionsTags) | async\"\n    [tagsLimit]=\"options.tagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n    [restTagsDropdownPlacement]=\"['right', 'bottom', 'bottom-right', 'auto']\"\n  ></rx-filter-tags>\n</ng-container>\n\n<ng-template #filterOptionsCustomAreaTemplate>\n  <div class=\"p-3 pt-4 pb-4\" *ngIf=\"this.groupFilterItems.length > 1\">\n    <adapt-accordion>\n      <adapt-accordion-tab [title]=\"'Show filters for: ' + getGroupFilterName(groupFilterValue)\" [multiline]=\"true\">\n        <adapt-rx-radiobutton-group\n          class=\"advanced-filter__radiobutton-group\"\n          [ngModel]=\"groupFilterValue\"\n          (ngModelChange)=\"onGroupFilterValueModelChange($event)\"\n        >\n          <adapt-rx-radiobutton\n            name=\"booleanTypeGroup\"\n            class=\"advanced-filter__radiobutton\"\n            *ngFor=\"let groupItem of groupFilterItems\"\n            [value]=\"groupItem.value\"\n            [label]=\"groupItem.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n","import { AdvancedFilterOption, AdvancedFilterTexts, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinitionsById, IRecordDefinition } from '@helix/platform/record/api';\nimport { IRecordGridFilterConfigs } from '../../../common/types/record-grid-filter-config.interfaces';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\nimport { Subject } from 'rxjs';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { IRecordGridNamedFilterOptionsMap } from '../../../common/types/record-grid.types';\n\nexport interface IRecordGridFilterSelectControlOptions {\n  primaryRecordDefinition: IRecordDefinition;\n  selectedFieldIds?: string[];\n  tagsLimit?: number;\n  namedFilterOptions?: IRecordGridNamedFilterOptionsMap;\n  anchorDisabled?: boolean;\n}\n\nexport interface IRecordGridFilterModel {\n  filtersJson: string;\n  basicFilters: IRxRecordGridFilter[];\n}\n\nexport interface IRecordGridFilterSelectAdvancedFiltering {\n  filterOptions: AdvancedFilterOption[];\n  associationDescriptors: IAssociationDescriptor[];\n  selectedFilters: SelectedAdvancedFilter[];\n  filterTexts: AdvancedFilterTexts;\n  recordGridFilterConfigs: IRecordGridFilterConfigs;\n  fieldDefinitionsById: IFieldDefinitionsById;\n  fieldDefinitionsInitialized$: Subject<any>;\n  filterValueInitialized$: Subject<any>;\n}\n\nexport enum RecordGridFilterMode {\n  Basic = 'basic',\n  Expression = 'expression'\n}\n\nexport interface IRecordGridFilterDescriptorModel {\n  value: string;\n  fieldId: string;\n  $DISPLAYVALUE$?: string;\n}\n","import { NgModule } from '@angular/core';\nimport { FilterTagsComponent } from './filter-tags.component';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule, AdaptTagModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [CommonModule, AdaptTagModule, AdaptDropdownModule, TranslateModule],\n  declarations: [FilterTagsComponent],\n  exports: [FilterTagsComponent]\n})\nexport class RxFilterTagsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNamedFilterOptionsListComponent } from './named-filter-options-list.component';\nimport { AdaptRxCheckboxModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxNamedFilterOptionsListComponent],\n  exports: [RxNamedFilterOptionsListComponent],\n  imports: [CommonModule, AdaptRxCheckboxModule, FormsModule]\n})\nexport class RxNamedFilterOptionsListModule {}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AdaptDropdownModule,\n  AdaptMetatagModule,\n  AdaptRxRadiobuttonModule,\n  AdaptRxSelectModule,\n  AdaptTagModule\n} from '@bmc-ux/adapt-angular';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxFilterTagsModule } from './components/filter-tags/filter-tags.module';\nimport { RxNamedFilterOptionsListModule } from './components/named-filter-options-list/named-filter-options-list.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptRxRadiobuttonModule,\n    AdaptRxSelectModule,\n    TranslateModule,\n    AdaptTagModule,\n    FormsModule,\n    AdaptDropdownModule.forRoot(),\n    AdaptMetatagModule,\n    RxNamedFilterOptionsListModule,\n    RxFilterTagsModule\n  ],\n  exports: [RxFilterTagsModule, RxNamedFilterOptionsListModule]\n})\nexport class RecordGridCommonModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { FormsModule } from '@angular/forms';\nimport { RxStringFilterComponent } from './string-filter.component';\nimport { AdaptMetatagModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RxStringFilterComponent],\n  exports: [RxStringFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptMetatagModule]\n})\nexport class RxStringFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNumberFilterComponent } from './number-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxCounterModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxNumberFilterComponent],\n  exports: [RxNumberFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxCounterModule]\n})\nexport class RxNumberFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxDateTimeRangeFilterComponent } from './date-time-range-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxDateTimeRangeFilterComponent],\n  exports: [RxDateTimeRangeFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxDatetimeModule]\n})\nexport class RxDateTimeRangeFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxSelectionFilterComponent } from './selection-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxSelectionFilterComponent],\n  exports: [RxSelectionFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxSelectModule]\n})\nexport class RxSelectionFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxBooleanFilterComponent } from './boolean-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxRadiobuttonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxBooleanFilterComponent],\n  exports: [RxBooleanFilterComponent],\n  imports: [CommonModule, RxNamedFilterOptionsListModule, AdaptRxRadiobuttonModule, AdaptRxSelectModule, FormsModule]\n})\nexport class RxBooleanFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxStringWithTypeAheadFilterComponent } from './string-with-type-ahead-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptMetatagModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [RxStringWithTypeAheadFilterComponent],\n  exports: [RxStringWithTypeAheadFilterComponent],\n  imports: [CommonModule, RxNamedFilterOptionsListModule, AdaptMetatagModule, FormsModule, TranslateModule]\n})\nexport class RxStringWithTypeAheadFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxAdvancedFilteringFieldsProviderComponent } from './advanced-filtering-fields-provider.component';\nimport { RxStringFilterModule } from '../string-filter/string-filter.module';\nimport { RxNumberFilterModule } from '../number-filter/number-filter.module';\nimport { RxDateTimeRangeFilterModule } from '../date-time-range-filter/date-time-range-filter.module';\nimport { RxSelectionFilterModule } from '../selection-filter/selection-filter.module';\nimport { RxBooleanFilterModule } from '../boolean-filter/boolean-filter.module';\nimport { RxStringWithTypeAheadFilterModule } from '../string-with-type-ahead-filter/string-with-type-ahead-filter.module';\n\n@NgModule({\n  declarations: [RxAdvancedFilteringFieldsProviderComponent],\n  exports: [RxAdvancedFilteringFieldsProviderComponent],\n  imports: [\n    CommonModule,\n    RxStringFilterModule,\n    RxNumberFilterModule,\n    RxDateTimeRangeFilterModule,\n    RxSelectionFilterModule,\n    RxBooleanFilterModule,\n    RxStringWithTypeAheadFilterModule\n  ]\n})\nexport class RxAdvancedFilteringFieldsProviderModule {}\n","import { NgModule } from '@angular/core';\nimport { RecordGridFilterSelectControlComponent } from './record-grid-filter-select-control.component';\nimport { AdaptAccordionModule, AdaptAdvancedFilteringModule, AdaptRxRadiobuttonModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridCommonModule } from '../../../common/record-grid-common.module';\nimport { FormsModule } from '@angular/forms';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../../../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [RecordGridFilterSelectControlComponent],\n  exports: [RecordGridFilterSelectControlComponent],\n  entryComponents: [RecordGridFilterSelectControlComponent],\n  imports: [\n    CommonModule,\n    AdaptAdvancedFilteringModule,\n    RecordGridCommonModule,\n    AdaptAccordionModule,\n    AdaptRxRadiobuttonModule,\n    FormsModule,\n    RxAdvancedFilteringFieldsProviderModule\n  ]\n})\nexport class RecordGridFilterSelectControlModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IRecordGridColumnNamedFilterOption,\n  IRecordGridNamedFilterOptionsMap\n} from '../../../common/types/record-grid.types';\nimport { IRecordGridDesignInspectorColumnConfig } from '../record-grid-column-editor-control/record-grid-column-editor.types';\nimport { toNumber } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridFilterSelectHelperService {\n  getNamedFilterOptionsFromColumns(\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IRecordGridNamedFilterOptionsMap {\n    return columns.reduce((result: IRecordGridNamedFilterOptionsMap, col) => {\n      if (col.namedFilterOptions?.length) {\n        result[col.fieldId] = col.namedFilterOptions\n          .map(\n            (column) =>\n              ({\n                guid: column.guid,\n                ...column.data,\n                index: toNumber(column.data.index)\n              } as IRecordGridColumnNamedFilterOption)\n          )\n          .sort((a, b) => a.index - b.index);\n      }\n\n      return result;\n    }, {});\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDropData } from '@helix/platform/view/designer';\nimport { isEqual, isObject, sortBy } from 'lodash';\nimport { SortEvent } from 'primeng/api';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { ActionButtonStyle, IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IAdaptTableColumnConfig } from '../runtime/types/record-grid-column.types';\nimport { ColumnSortDirection, IRecordGridSortableObject } from '../common/types/record-grid.types';\nimport { IRecordGridSortEditorModel } from './editors/record-grid-sort-editor-control';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { IRecordGridDesignAdaptTableConfig } from './record-grid-design.types';\n\n@Component({\n  selector: 'rx-record-grid-design',\n  templateUrl: './record-grid-design.component.html',\n  styleUrls: ['./record-grid-design.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridDesignComponent implements OnInit {\n  @Input()\n  model: RecordGridDesignModel;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @Input()\n  isReadOnly: boolean;\n\n  adaptTableConfig$: Observable<IRecordGridDesignAdaptTableConfig>;\n  hasRecordDefinitionName$: Observable<boolean>;\n\n  constructor(\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.adaptTableConfig$ = this.model.columns$.pipe(\n      map((columns) => {\n        const gridColumns = sortBy(columns, (column) => column.index);\n        const initialSortGridColumn = gridColumns.find((gridColumn) => isObject(gridColumn.sortable));\n\n        let sortMeta = {\n          field: null,\n          order: null\n        };\n\n        if (initialSortGridColumn) {\n          const gridSortableObject = initialSortGridColumn.sortable as IRecordGridSortableObject;\n\n          sortMeta = {\n            field: String(initialSortGridColumn.fieldId),\n            order: this.rxRecordGridConfigUtilsService.getColumnSortOrder(gridSortableObject.direction)\n          };\n        }\n\n        return {\n          columns: gridColumns.map(\n            (gridColumn): IAdaptTableColumnConfig => ({\n              field: gridColumn.fieldId,\n              header: gridColumn.title,\n              sortable: Boolean(gridColumn.sortable),\n              hidden: !gridColumn.visible,\n              testId: this.rxRecordGridUtilsService.getTestIdForGridColumn(gridColumn.fieldId)\n            })\n          ),\n          sortMeta,\n          toolbarConfig: {\n            counter: false,\n            quickFilter: true,\n            filter: true,\n            filterTemplate: this.filterTemplate,\n            filterResults: false,\n            visibleColumnsMenu: true,\n            visibleColumnsMenuTemplate: this.visibleColumnsMenuTemplate,\n            quickFilterTriggerable: true\n          }\n        };\n      }),\n      shareReplay(1)\n    );\n\n    this.hasRecordDefinitionName$ = this.model.recordDefinition$.pipe(map(Boolean), shareReplay(1));\n  }\n\n  onSort(event: SortEvent): void {\n    this.adaptTableConfig$.pipe(take(1)).subscribe((adaptTableConfig) => {\n      if (!isEqual(event, adaptTableConfig.sortMeta)) {\n        let initialSortColumn: IRecordGridSortEditorModel;\n\n        const column = this.model.currentGridDesignProperties.columns.find(\n          (gridColumn) => gridColumn.fieldId === event.field\n        );\n\n        if (isObject(column.sortable)) {\n          if (column.sortable.direction === ColumnSortDirection.Desc) {\n            initialSortColumn = null;\n          } else {\n            initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Desc };\n          }\n        } else {\n          initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Asc };\n        }\n\n        this.model.componentPropertiesChangeFromCanvas$.next({\n          ...this.model.currentGridDesignProperties,\n          initialSortColumn\n        });\n      }\n    });\n  }\n\n  onBeforeViewComponentDrop(data: IViewComponentDropData): void {\n    if (\n      data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton &&\n      !data.draggedViewComponentGuid\n    ) {\n      data.initialPropertiesByName = {\n        ...data.initialPropertiesByName,\n        style: ActionButtonStyle.Tertiary\n      } as IActionButtonProperties;\n    }\n  }\n}\n","<div class=\"rx-record-grid-design\" [class.border]=\"!(hasRecordDefinitionName$ | async)\">\n  <adapt-empty-state\n    *ngIf=\"!(hasRecordDefinitionName$ | async); else gridTemplate\"\n    type=\"objects\"\n    label=\"Select a record definition and edit grid columns in the Properties panel.\"\n  ></adapt-empty-state>\n\n  <ng-template #gridTemplate>\n    <rx-canvas-outlet\n      [dropListOrientation]=\"'horizontal'\"\n      class=\"rx-record-grid-design__action-buttons-canvas\"\n      (beforeViewComponentDrop)=\"onBeforeViewComponentDrop($event)\"\n      [dropPredicate]=\"model.actionButtonDropPredicate\"\n    ></rx-canvas-outlet>\n\n    <adapt-table\n      #adaptTable\n      class=\"rx-record-grid-design__table\"\n      [columns]=\"(adaptTableConfig$ | async).columns\"\n      [sortable]=\"!isReadOnly\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'80px'\"\n      [rowExpandMode]=\"\"\n      [sortMode]=\"'single'\"\n      [toolbarConfig]=\"(adaptTableConfig$ | async).toolbarConfig\"\n      [filterable]=\"false\"\n      [sortField]=\"(adaptTableConfig$ | async).sortMeta.field\"\n      [sortOrder]=\"(adaptTableConfig$ | async).sortMeta.order\"\n      [bordered]=\"true\"\n      [totalRecords]=\"0\"\n      (onSort)=\"onSort($event)\"\n      [hasEmptyState]=\"false\"\n      [dontEmitLazyLoadOnInputChange]=\"false\"\n    ></adapt-table>\n  </ng-template>\n</div>\n\n<ng-template #filterTemplate let-context>\n  <span class=\"rx-record-grid-design__toolbar-item btn-link d-icon-refresh grid-toolbar-icon mx-2 p-1\"></span>\n  <div class=\"btn-link px-0 d-icon-left-filter d-icon-right-triangle_down\" *ngIf=\"model.enableFiltering$ | async\">\n    Filter\n  </div>\n</ng-template>\n\n<ng-template #visibleColumnsMenuTemplate></ng-template>\n","import { Component, Input, OnChanges, OnDestroy, Renderer2, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { head, isEmpty, isEqual } from 'lodash';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './record-grid-sort-editor-control.types';\nimport { AdaptRxSelectComponent } from '@bmc-ux/adapt-angular';\nimport { IFormFocusable, IFormControlComponent } from '@helix/platform/shared/api';\nimport { ValueAccessor, ISelectOption } from '@helix/platform/shared/components';\nimport { ColumnSortDirection } from '../../../common/types/record-grid.types';\nimport { BehaviorSubject, forkJoin, of } from 'rxjs';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { defaultIfEmpty, map, switchMap, take } from 'rxjs/operators';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-sort-editor-control',\n  templateUrl: './record-grid-sort-editor-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridSortEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridSortEditorControlComponent\n  extends ValueAccessor<IRecordGridSortEditorModel>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridSortEditorControlOptions;\n\n  @ViewChild('adaptRxSelect', { static: true })\n  adaptRxSelect: AdaptRxSelectComponent;\n\n  ColumnSortDirection = ColumnSortDirection;\n  updateOptionsSubject = new BehaviorSubject<void>(null);\n\n  columnOptions$ = this.updateOptionsSubject.pipe(\n    switchMap(() =>\n      this.options.gridColumns && this.options.recordDefinition\n        ? forkJoin(\n            this.options.gridColumns\n              .filter((gridColumn) => gridColumn.sortable)\n              .map((gridColumn) => {\n                if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n                  return this.rxRecordGridUtilsService\n                    .getFieldDefinition(gridColumn.fieldId, this.options.recordDefinition)\n                    .pipe(map((fieldDefinition) => ({ id: gridColumn.fieldId, name: `[${fieldDefinition.name}]` })));\n                }\n\n                return of({ id: gridColumn.fieldId, name: gridColumn.title });\n              })\n          ).pipe(defaultIfEmpty([]))\n        : of([])\n    )\n  );\n\n  selectedColumnOption: ISelectOption[] = [];\n\n  get selectedSortDirection(): ColumnSortDirection {\n    return this.value ? this.value.direction : null;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (!isEqual(\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).gridColumns,\n        (changes.options.previousValue as IRecordGridSortEditorControlOptions).gridColumns\n      ) ||\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).recordDefinition?.name !==\n          (changes.options.previousValue as IRecordGridSortEditorControlOptions).recordDefinition?.name)\n    ) {\n      this.updateOptionsSubject.next();\n    }\n  }\n\n  onWriteValue(value: IRecordGridSortEditorModel) {\n    this.columnOptions$.pipe(take(1)).subscribe((columnOptions) => {\n      this.selectedColumnOption = value ? [columnOptions.find((option) => option.id === value.fieldId)] : [];\n    });\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.adaptRxSelect.selectButtonRef.nativeElement, true).focus();\n  }\n\n  onSelectModelChange(value: ISelectOption[]): void {\n    this.selectedColumnOption = value;\n\n    this.value = isEmpty(value) ? null : { fieldId: head(value).id, direction: ColumnSortDirection.Asc };\n  }\n\n  setSortDirection(sortDirection: ColumnSortDirection): void {\n    this.value = { ...this.value, direction: sortDirection };\n  }\n\n  optionFormatter(option: ISelectOption): string {\n    return option.name;\n  }\n\n  ngOnDestroy(): void {\n    this.updateOptionsSubject.complete();\n  }\n}\n","<div class=\"form-group\" [ngClass]=\"{ 'is-required': options.required }\">\n  <label class=\"form-control-label\" *ngIf=\"options.label\">{{ options.label }}</label>\n\n  <div class=\"d-flex\">\n    <adapt-rx-select\n      #adaptRxSelect\n      class=\"pr-1 w-100\"\n      *ngIf=\"columnOptions$ | async as columnOptions\"\n      [options]=\"columnOptions\"\n      [required]=\"options.required\"\n      [disabled]=\"isDisabled\"\n      [ngModel]=\"selectedColumnOption\"\n      (ngModelChange)=\"onSelectModelChange($event)\"\n      [optionFormatter]=\"optionFormatter\"\n      [emptyOption]=\"true\"\n    ></adapt-rx-select>\n\n    <div class=\"btn-group\" data-toggle=\"buttons\" *ngIf=\"selectedColumnOption.length\">\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_up\"\n        (click)=\"setSortDirection(ColumnSortDirection.Asc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Asc\"\n      ></button>\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_down\"\n        (click)=\"setSortDirection(ColumnSortDirection.Desc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Desc\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RecordGridSortEditorControlComponent } from './record-grid-sort-editor-control.component';\nimport { AdaptButtonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RecordGridSortEditorControlComponent],\n  exports: [RecordGridSortEditorControlComponent],\n  entryComponents: [RecordGridSortEditorControlComponent],\n  imports: [CommonModule, FormsModule, AdaptButtonModule, AdaptRxSelectModule]\n})\nexport class RecordGridSortEditorControlModule {}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';\nimport { findIndex, isEmpty, map, some } from 'lodash';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { RX_MODAL, RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IRecordGridPredefinedFilterPreset } from '../../../../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IPredefinedFilterPresetEditorPresetData,\n  IRecordGridFilterPresetEditorModalParams,\n  IRecordGridFilterPresetEditorModalResult\n} from '../record-grid-filter-preset-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-filter-preset-editor-modal',\n  templateUrl: './record-grid-filter-preset-editor-modal.component.html',\n  styleUrls: ['./record-grid-filter-preset-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RecordGridFilterPresetEditorModalComponent extends RxModalClass implements AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  @ViewChild('filterPresetsForm', { read: NgForm, static: true })\n  filterPresetsForm: NgForm;\n\n  isReadOnly: boolean;\n  recordDefinition: IRecordDefinition;\n  selectedFieldIds: string[];\n  filterPresets: IPredefinedFilterPresetEditorPresetData[] = [];\n  params: IRecordGridFilterPresetEditorModalParams = this.activeModalRef.getData();\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private rxGuidService: RxGuidService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    const activeFilterPreset = this.params.activeFilterPreset;\n\n    this.recordDefinition = this.params.primaryRecordDefinition;\n    this.selectedFieldIds = this.params.selectedFieldIds;\n    this.isReadOnly = this.params.isReadOnly;\n\n    this.filterPresets = map(\n      this.params.filterPresets,\n      (filterPreset): IPredefinedFilterPresetEditorPresetData =>\n        this.createFilterPresetEditorData(filterPreset, filterPreset === activeFilterPreset)\n    );\n  }\n\n  ngAfterViewInit(): void {\n    const openFilterPresetIndex = findIndex(this.filterPresets, 'isOpen');\n\n    if (openFilterPresetIndex !== -1) {\n      this.accordionTabEls.toArray()[openFilterPresetIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  addFilterPreset(): void {\n    this.markAsDirty();\n\n    this.filterPresets.push(\n      this.createFilterPresetEditorData(\n        {\n          guid: this.rxGuidService.generate(),\n          title: 'New preset' + (this.filterPresets.length === 0 ? '' : ' ' + this.filterPresets.length),\n          filters: '',\n          recordGridFilters: []\n        },\n        true\n      )\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeFilterPreset(index: number): void {\n    this.markAsDirty();\n\n    this.filterPresets.splice(index, 1);\n  }\n\n  createFilterPresetEditorData(\n    filterPreset: IRecordGridPredefinedFilterPreset,\n    isOpen: boolean\n  ): IPredefinedFilterPresetEditorPresetData {\n    return {\n      ...filterPreset,\n      isOpen,\n      filterSelectOptions: {\n        primaryRecordDefinition: this.recordDefinition,\n        tagsLimit: 2,\n        namedFilterOptions: this.params.namedFilterOptions,\n        selectedFieldIds: this.selectedFieldIds\n      },\n      filterSelect: {\n        basicFilters: filterPreset.recordGridFilters,\n        filtersJson: filterPreset.filters\n      }\n    };\n  }\n\n  getCheckPresetTitleDuplicateValidator(\n    currentFilterPreset: IPredefinedFilterPresetEditorPresetData\n  ): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl) => {\n      const title = control.value;\n\n      if (\n        title &&\n        this.filterPresets.some(\n          (filterPreset) => filterPreset.title === title && filterPreset.guid !== currentFilterPreset.guid\n        )\n      ) {\n        return { duplicatePresetName: { message: 'Duplicate Name' } };\n      }\n\n      return null;\n    };\n  }\n\n  trackByForFilterPresets(index: number, filterPreset: IPredefinedFilterPresetEditorPresetData): string {\n    return filterPreset.guid;\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.filterPresets.forEach((action) => (action.isOpen = expandAll));\n  }\n\n  onSaveChangesClick(): void {\n    const result: IRecordGridFilterPresetEditorModalResult = {\n      filterPresets: this.filterPresets.map(\n        (filterPreset): IRecordGridPredefinedFilterPreset => ({\n          filters: filterPreset.filterSelect.filtersJson,\n          recordGridFilters: filterPreset.filterSelect.basicFilters,\n          guid: filterPreset.guid,\n          title: filterPreset.title\n        })\n      )\n    };\n\n    const hasEmptyFilterPreset = some(result.filterPresets, (filterPreset) => isEmpty(filterPreset.recordGridFilters));\n\n    if (hasEmptyFilterPreset) {\n      this.rxModalService\n        .confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message:\n            'The filter preset will not filter records because no filters have been specified. Do you want to continue?'\n        })\n        .then((confirmResult) => {\n          if (confirmResult) {\n            this.activeModalRef.close(result);\n          }\n        });\n    } else {\n      this.activeModalRef.close(result);\n    }\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addFilterPreset()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.add-filter-preset.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"filterPresets.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <form #filterPresetsForm=\"ngForm\">\n            <div\n              *ngFor=\"let filterPreset of filterPresets; let index = index; trackBy: trackByForFilterPresets\"\n              class=\"designer-modal-accordion-content\"\n            >\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"filterPreset.isOpen\"\n                (open)=\"filterPreset.isOpen = true\"\n                (close)=\"filterPreset.isOpen = false\"\n                #accordionTab\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block pl-0\">\n                      <div class=\"rx-ellipsis\" [title]=\"filterPreset.title\" rx-id=\"card-title\">\n                        {{ filterPreset.title }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"$event.stopPropagation(); removeFilterPreset(index)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-rx-textfield\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.name-field.label' | translate\n                  }}\"\n                  [name]=\"'filterPresetTitle-' + filterPreset.guid\"\n                  [required]=\"true\"\n                  [disabled]=\"isReadOnly\"\n                  [rxCustomValidators]=\"getCheckPresetTitleDuplicateValidator(filterPreset)\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  [(ngModel)]=\"filterPreset.title\"\n                  rxNoWhitespace\n                ></adapt-rx-textfield>\n\n                <div *ngIf=\"accordionTab.isOpenOrCloseAnimationProcessing\">\n                  <rx-record-grid-filter-select-control\n                    [name]=\"'filterPresetFilterSelect-' + filterPreset.guid\"\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"filterPreset.filterSelectOptions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [(ngModel)]=\"filterPreset.filterSelect\"\n                  ></rx-record-grid-filter-select-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!filterPresets.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.empty-state.message' | translate\n          }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"filterPresetsForm.form.invalid || !isDirty()\"\n    (click)=\"onSaveChangesClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { cloneDeep, noop } from 'lodash';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent } from '@helix/platform/shared/api';\nimport {\n  IRecordGridFilterPresetEditorControlOptions,\n  IRecordGridFilterPresetEditorModalParams,\n  IRecordGridFilterPresetEditorModalResult\n} from './record-grid-filter-preset-editor.types';\nimport { IRecordGridPredefinedFilterPreset } from '../../../runtime/types/record-grid-predefined-filter-preset.interface';\nimport { RecordGridFilterPresetEditorModalComponent } from './record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { IRecordGridNamedFilterOptionsMap } from '../../../common/types/record-grid.types';\nimport { RxRecordGridFilterSelectHelperService } from '../record-grid-filter-select-control/record-grid-filter-select-helper.service';\n\n@Component({\n  selector: 'rx-record-grid-filter-preset-editor',\n  templateUrl: './record-grid-filter-preset-editor-control.component.html',\n  styleUrls: ['./record-grid-filter-preset-editor-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridFilterPresetEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridFilterPresetEditorControlComponent\n  extends ValueAccessor<IRecordGridPredefinedFilterPreset[]>\n  implements IFormControlComponent\n{\n  @Input()\n  options: IRecordGridFilterPresetEditorControlOptions;\n\n  filterPresets: IRecordGridPredefinedFilterPreset[] = [];\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxRecordGridFilterSelectHelperService: RxRecordGridFilterSelectHelperService\n  ) {\n    super();\n  }\n\n  onWriteValue(filterPresets: IRecordGridPredefinedFilterPreset[]): void {\n    this.filterPresets = filterPresets.slice();\n\n    this.filterPresets.sort((filterPreset1, filterPreset2) => filterPreset1.title.localeCompare(filterPreset2.title));\n  }\n\n  removeFilterPreset(filterPresetToRemove: IRecordGridPredefinedFilterPreset): void {\n    this.updateValue(this.filterPresets.filter((filterPreset) => filterPreset.guid !== filterPresetToRemove.guid));\n  }\n\n  updateValue(filterPresets: IRecordGridPredefinedFilterPreset[]): void {\n    this.value = filterPresets;\n    this.onWriteValue(filterPresets);\n  }\n\n  openEditor(filterPreset?: IRecordGridPredefinedFilterPreset): void {\n    const selectedFieldIds = this.options.columns.map((column) => column.fieldId);\n\n    const selectedFieldDefinitions = this.options.primaryRecordDefinition.fieldDefinitions.filter((fieldDefinition) =>\n      selectedFieldIds.includes(fieldDefinition.id.toString())\n    );\n\n    const namedFilterOptions = this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(\n      this.options.columns\n    );\n\n    const data: IRecordGridFilterPresetEditorModalParams = {\n      filterPresets: this.filterPresets,\n      activeFilterPreset: filterPreset,\n      isReadOnly: this.isDisabled,\n      namedFilterOptions,\n      primaryRecordDefinition: cloneDeep({\n        ...this.options.primaryRecordDefinition,\n        fieldDefinitions: selectedFieldDefinitions\n      }),\n      selectedFieldIds\n    };\n\n    this.rxModalService\n      .openModal({\n        title: 'Edit filter presets',\n        content: RecordGridFilterPresetEditorModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-filter-presets',\n        data\n      })\n      .then((result: IRecordGridFilterPresetEditorModalResult) => {\n        if (result && result.filterPresets) {\n          this.updateValue(result.filterPresets);\n        }\n      })\n      .catch(noop);\n  }\n\n  trackByForFilterPresets(index: number, filterPreset: IRecordGridPredefinedFilterPreset): string {\n    return filterPreset.guid;\n  }\n}\n","<adapt-rx-control-label *ngIf=\"options.label\" [label]=\"options.label\" [tooltip]=\"options?.tooltip\">\n</adapt-rx-control-label>\n\n<adapt-button *ngIf=\"!isDisabled\" btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit filter presets\n</adapt-button>\n\n<div>\n  <div class=\"rx-selected-filter-preset\" *ngFor=\"let filterPreset of filterPresets; trackBy: trackByForFilterPresets\">\n    <div class=\"rx-selected-filter-preset__header-container\">\n      <span class=\"rx-selected-filter-preset__header-title\" rx-id=\"card-title\" [title]=\"filterPreset.title\">\n        {{ filterPreset.title }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"openEditor(filterPreset)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-filter-preset\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterPreset(filterPreset)\"\n      ></button>\n    </div>\n\n    <div rx-id=\"filter-count\" class=\"rx-filter-count\">Filters: {{ filterPreset.recordGridFilters.length }}</div>\n  </div>\n  <span class=\"text-tertiary\" *ngIf=\"filterPresets.length === 0\"> No filter presets added. </span>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  NgZone,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { ActiveModalRef, AdaptAccordionTabComponent, AdaptModalService, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { ActionListControlComponent, getAvailableOnDevicesInspectorConfig } from '@helix/platform/view/designer';\nimport { IRowAction, IRowActionData } from '../record-grid-row-action-editor-widget.types';\nimport { cloneDeep, isEqual, omit } from 'lodash';\nimport {\n  IDefinitionPickerComponentOptions,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  IIconPickerFormControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerType,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { IExpressionConfigurator, IPlainObject, Tooltip } from '@helix/platform/shared/api';\nimport { CdkDrag, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/';\nimport { TranslateService } from '@ngx-translate/core';\nimport { map } from 'rxjs/operators';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { of } from 'rxjs';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { NgForm } from '@angular/forms';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE } from '@helix/platform/view/api';\n\n@Component({\n  selector: 'rx-record-grid-row-action-editor-modal',\n  templateUrl: './record-grid-row-action-editor-modal.component.html',\n  styleUrls: ['./record-grid-row-action-editor-modal.component.scss']\n})\nexport class RecordGridRowActionEditorModalComponent extends RxModalClass implements OnInit, AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  @ViewChild('rowActionsForm', { static: true, read: NgForm })\n  rowActionsForm: NgForm;\n\n  expressionConfigurator: IExpressionConfigurator;\n  isReadOnly: boolean;\n  rowActions: IRowActionData[] = [];\n\n  selectFormControlOptions: ISelectFormControlOptions = {\n    label: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.label'\n    ),\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.tooltip'\n      )\n    ),\n    options: [],\n    emptyOption: true\n  } as ISelectFormControlOptions;\n\n  availableOnDevicesFormControlOptions: ISelectFormControlOptions = getAvailableOnDevicesInspectorConfig().options;\n\n  recordDefinitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.label'\n    ),\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.tooltip'\n      )\n    ),\n    definitionType: RxDefinitionPickerType.StandardDataRecord,\n    required: false\n  };\n\n  iconPickerOptions: IIconPickerFormControlOptions = {\n    label: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.icon.label'),\n    appendToBody: true,\n    required: false\n  };\n\n  @ViewChildren('draggableSelectedRowAction', { read: CdkDrag })\n  draggableSelectedRowAction: QueryList<CdkDrag<IRowActionData>>;\n\n  @ViewChild('selectedRowActionsDropList', { read: CdkDropList })\n  selectedRowActionsDropList: CdkDropList;\n\n  @ViewChildren(ActionListControlComponent)\n  actionListControlComponents: QueryList<ActionListControlComponent>;\n\n  expressionFormControlOptions: IExpressionFormControlOptions;\n\n  private activeActionIndex: number;\n  private rowActionIndex: number;\n\n  constructor(\n    public context: ActiveModalRef,\n    private adaptModalService: AdaptModalService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private translateService: TranslateService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private ngZone: NgZone,\n    private rxGuidService: RxGuidService,\n    protected injector: Injector\n  ) {\n    super(context, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    const params = this.context.getData();\n\n    this.expressionConfigurator = params.expressionConfigurator;\n    this.rowActionIndex = params.rowActionIndex;\n    this.activeActionIndex = params.activeActionIndex;\n    this.isReadOnly = params.isReadOnly;\n\n    this.rowActions = cloneDeep(params.rowActions).map((rowAction, index) => {\n      this.setSecurityFieldDefinitions(rowAction);\n\n      return {\n        ...rowAction,\n        isOpen: index === this.rowActionIndex\n      };\n    });\n  }\n\n  ngAfterViewInit() {\n    this.openActiveAction();\n\n    if (this.rowActionIndex) {\n      this.accordionTabEls.toArray()[this.rowActionIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  cancel(): void {\n    this.context.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  trackByGuid(index: number, rowAction: IRowActionData): string {\n    return rowAction.guid;\n  }\n\n  addRowAction(): void {\n    this.markAsDirty();\n\n    this.rowActions.push({\n      guid: this.rxGuidService.generate(),\n      label: 'New row action' + (this.rowActions.length === 0 ? '' : ' ' + this.rowActions.length),\n      icon: '',\n      recordDefinitionName: null,\n      fieldId: null,\n      recordInstance: null,\n      disabled: null,\n      hidden: null,\n      actions: [],\n      isOpen: true,\n      securityFieldDefinitions$: of(this.getSelectFormControlOptions()),\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE\n    });\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeRowAction(index: number, $event: MouseEvent): void {\n    $event.stopPropagation();\n    this.markAsDirty();\n    this.rowActions.splice(index, 1);\n  }\n\n  openExpressionEditor(event: IPlainObject, rowAction, propertyPath: string): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: propertyPath,\n          value: rowAction[propertyPath],\n          label: this.getRowActionLabel(propertyPath)\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),\n            icon: 'd-icon-mathematical_function'\n          },\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'\n            ),\n            icon: 'd-icon-file_o'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'\n            ),\n            icon: 'd-icon-arrow_right_square_input'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        this.markAsDirty();\n\n        rowAction[propertyPath] = expression.value;\n      });\n  }\n\n  getExpressionFormControlOptions(propertyPath: string): IExpressionFormControlOptions {\n    return {\n      label: this.getRowActionLabel(propertyPath),\n      tooltip:\n        propertyPath === 'recordInstance'\n          ? new Tooltip(\n              this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.tooltip'\n              )\n            )\n          : null,\n      dataDictionary$: this.context.getData().expressionConfigurator.getDataDictionary(propertyPath),\n      operators: this.context.getData().expressionConfigurator.getOperators(propertyPath)\n    };\n  }\n\n  saveActions(): void {\n    const rowActions: IRowAction[] = this.rowActions.map((rowAction) => ({\n      ...omit(rowAction, ['isOpen', 'securityFieldDefinitions$']),\n      action: 'rowAction'\n    }));\n\n    this.context.close(rowActions);\n  }\n\n  moveRowAction(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.rowActions, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onDropInSelectedRowActionsContainer($event: CdkDragDrop<IRowActionData[], any>): void {\n    moveItemInArray(this.rowActions, $event.previousIndex, $event.currentIndex);\n    this.markAsDirty();\n  }\n\n  onRecordDefinitionChange(rowAction: IRowActionData): void {\n    this.markAsDirty();\n\n    rowAction.fieldId = null;\n\n    this.setSecurityFieldDefinitions(rowAction);\n  }\n\n  setSecurityFieldDefinitions(rowAction: IRowActionData): void {\n    rowAction.securityFieldDefinitions$ = rowAction.recordDefinitionName\n      ? this.rxRecordDefinitionCacheService\n          .getRecordDefinition(rowAction.recordDefinitionName)\n          .pipe(map((recordDefinition) => this.getSelectFormControlOptions(recordDefinition)))\n      : of(this.getSelectFormControlOptions());\n  }\n\n  private getRowActionLabel(key: string): string {\n    let rowActionLabel;\n\n    switch (key) {\n      case 'disabled':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.disabled.label';\n        break;\n      case 'hidden':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.hidden.label';\n        break;\n      case 'recordInstance':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.label';\n        break;\n    }\n\n    return this.translateService.instant(rowActionLabel);\n  }\n\n  private getSelectFormControlOptions(recordDefinition: IRecordDefinition = null): ISelectFormControlOptions {\n    return {\n      ...this.selectFormControlOptions,\n      options: recordDefinition\n        ? recordDefinition.fieldDefinitions.map((definition) => ({\n            name: definition.name,\n            id: String(definition.id)\n          }))\n        : []\n    } as ISelectFormControlOptions;\n  }\n\n  private openActiveAction(): void {\n    if (this.activeActionIndex >= 0 && this.rowActionIndex >= 0) {\n      this.ngZone.runOutsideAngular(() => {\n        // timeout is required to let control set initial value\n        setTimeout(() => {\n          const listControl = this.actionListControlComponents.find((control) =>\n            isEqual(control.value, this.rowActions[this.rowActionIndex]?.actions)\n          );\n\n          if (listControl) {\n            listControl.focus({ actionIndex: this.activeActionIndex });\n          }\n        });\n      });\n    }\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.rowActions.forEach((action) => (action.isOpen = expandAll));\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addRowAction()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.add-row-action.button.label' | translate\n          }}\n        </button>\n\n        <div *ngIf=\"rowActions.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selectedRowActionsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"rowActions\"\n        (cdkDropListDropped)=\"onDropInSelectedRowActionsContainer($event)\"\n        #selectedRowActionsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <form #rowActionsForm=\"ngForm\">\n            <div\n              *ngFor=\"\n                let rowAction of rowActions;\n                let index = index;\n                let first = first;\n                let last = last;\n                trackBy: trackByGuid\n              \"\n              class=\"designer-modal-accordion-content\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"rowAction\"\n              [cdkDragDisabled]=\"isReadOnly\"\n              #draggableSelectedRowAction\n            >\n              <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"rowAction.isOpen\"\n                (open)=\"rowAction.isOpen = true\"\n                (close)=\"rowAction.isOpen = false\"\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                      <div class=\"rx-ellipsis\" [title]=\"rowAction.label\" rx-id=\"card-title\">\n                        {{ rowAction.label }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <div class=\"designer-modal-card-title-index-buttons\">\n                        <button\n                          class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"last\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index + 1)\"\n                          rx-id=\"move-down-button\"\n                        ></button>\n\n                        <button\n                          class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"first\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index - 1)\"\n                          rx-id=\"move-up-button\"\n                        ></button>\n                      </div>\n\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"removeRowAction(index, $event)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <adapt-rx-textfield\n                    class=\"form-group d-block col-4\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.label-field.label' | translate\n                    }}\"\n                    [disabled]=\"isReadOnly\"\n                    [required]=\"true\"\n                    [name]=\"'label_' + rowAction.guid\"\n                    rx-id=\"label\"\n                    [(ngModel)]=\"rowAction.label\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    rxNoWhitespace\n                  >\n                  </adapt-rx-textfield>\n\n                  <rx-icon-picker-form-control\n                    [disabled]=\"isReadOnly\"\n                    class=\"form-group d-block col-4 px-2\"\n                    [options]=\"iconPickerOptions\"\n                    [name]=\"'icon_' + rowAction.guid\"\n                    rx-id=\"icon\"\n                    [(ngModel)]=\"rowAction.icon\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-icon-picker-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-definition-picker\n                    [isDisabled]=\"isReadOnly\"\n                    [options]=\"recordDefinitionPickerOptions\"\n                    [(ngModel)]=\"rowAction.recordDefinitionName\"\n                    [name]=\"'recordDefinition_' + rowAction.guid\"\n                    rx-id=\"recordDefinition\"\n                    (ngModelChange)=\"onRecordDefinitionChange(rowAction)\"\n                    class=\"form-group d-block col-4\"\n                  >\n                  </rx-definition-picker>\n\n                  <rx-select-form-control\n                    [options]=\"(rowAction.securityFieldDefinitions$ | async) || selectFormControlOptions\"\n                    [(ngModel)]=\"rowAction.fieldId\"\n                    [name]=\"'fieldId_' + rowAction.guid\"\n                    rx-id=\"fieldId\"\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  >\n                  </rx-select-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('recordInstance')\"\n                    propertyPath=\"recordInstance\"\n                    [ngModel]=\"rowAction.recordInstance\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'recordInstance')\"\n                    [name]=\"'recordInstance_' + rowAction.guid\"\n                    rx-id=\"recordInstance\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('disabled')\"\n                    propertyPath=\"disabled\"\n                    [ngModel]=\"rowAction.disabled\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'disabled')\"\n                    [name]=\"'disabled_' + rowAction.guid\"\n                    rx-id=\"disabled\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('hidden')\"\n                    propertyPath=\"hidden\"\n                    [ngModel]=\"rowAction.hidden\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'hidden')\"\n                    [name]=\"'hidden_' + rowAction.guid\"\n                    rx-id=\"hidden\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-select-form-control\n                    [options]=\"availableOnDevicesFormControlOptions\"\n                    [(ngModel)]=\"rowAction.availableOnDevices\"\n                    [name]=\"'availableOnDevices_' + rowAction.guid\"\n                    rx-id=\"availableOnDevices\"\n                    [disabled]=\"isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    required\n                  >\n                  </rx-select-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-action-list-control\n                    class=\"d-inline-block col-4 mt-2\"\n                    [(ngModel)]=\"rowAction.actions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [name]=\"'action_' + rowAction.guid\"\n                  ></rx-action-list-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!rowActions.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.empty-state.message' | translate\n          }}\"\n          type=\"config\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"rowActionsForm.invalid || !isDirty()\"\n    (click)=\"saveActions()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Injector } from '@angular/core';\nimport { IFormFocusable, IPlainObject } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize, RX_AVAILABLE_ON_DEVICES_PROP_NAME } from '@helix/platform/view/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { noop, omit, pick } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { RecordGridDesignModel } from '../../record-grid-design.model';\nimport { RecordGridRowActionValidationIssue } from '../../record-grid-design.types';\nimport { RecordGridRowActionEditorModalComponent } from './record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component';\nimport { IRowAction } from './record-grid-row-action-editor-widget.types';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'rx-record-grid-row-action-editor-widget',\n  templateUrl: './record-grid-row-action-editor-widget.component.html',\n  styleUrls: ['./record-grid-row-action-editor-widget.component.scss']\n})\nexport class RxRecordGridRowActionEditorWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel>\n  implements IFormFocusable\n{\n  isDisabled: boolean;\n\n  rowActions$: Observable<IRowAction[]> = this.designerItemModel.rowActionButtonComponents$.pipe(\n    map((rowActionButtons) => {\n      return rowActionButtons.map((rowActionButtonComponent) => {\n        const actions = rowActionButtonComponent.children.map((action) => omit(action, 'type', 'children'));\n\n        return {\n          ...pick(rowActionButtonComponent.data, [\n            'recordDefinitionName',\n            'recordInstance',\n            'fieldId',\n            'icon',\n            'disabled',\n            'hidden',\n            'label',\n            RX_AVAILABLE_ON_DEVICES_PROP_NAME\n          ]),\n          guid: rowActionButtonComponent.guid,\n          actions\n        } as IRowAction;\n      });\n    }),\n    shareReplay(1)\n  );\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService\n  ) {\n    super(injector);\n  }\n\n  openEditor(rowActionIndex?: number, activeActionIndex?: number): void {\n    this.rowActions$\n      .pipe(\n        take(1),\n        switchMap((rowActions) =>\n          from(\n            this.rxModalService.openModal({\n              content: RecordGridRowActionEditorModalComponent,\n              title: this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.modal.title'\n              ),\n              size: OpenViewActionModalSize.Large as any,\n              testID: 'edit-row-actions',\n              data: {\n                expressionConfigurator: this.designerItemModel.expressionConfigurator,\n                isReadOnly: this.isDisabled,\n                rowActionIndex,\n                rowActions,\n                activeActionIndex\n              }\n            })\n          )\n        )\n      )\n      .subscribe({\n        next: (newRowActions) => this.designerItemModel.setRowActions(newRowActions),\n        error: noop\n      });\n  }\n\n  trackByForRowActions(index: number, rowAction: IRowAction): string {\n    return rowAction.label;\n  }\n\n  removeRowAction(index: number, rowActions: IRowAction[]): void {\n    this.rxModalService\n      .confirm({\n        title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.row-action-delete.warning',\n          { name: rowActions[index].label }\n        )\n      })\n      .then((response) => {\n        if (response) {\n          rowActions.splice(index, 1);\n          this.designerItemModel.setRowActions(rowActions);\n        }\n      });\n  }\n\n  focus(data: RecordGridRowActionValidationIssue['data']): void {\n    this.openEditor(data.rowActionIndex, data.actionIndex);\n  }\n}\n","<adapt-button btn-type=\"tertiary\" rx-id=\"open-row-action-editor-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit row actions\n</adapt-button>\n\n<div *ngIf=\"rowActions$ | async as rowActions\">\n  <span rx-id=\"no-row-actions\" *ngIf=\"rowActions.length === 0\" class=\"text-tertiary\"> No row actions added. </span>\n  <div\n    rx-id=\"row-actions-list\"\n    class=\"rx-selected-row-action\"\n    *ngFor=\"let rowAction of rowActions; let index = index; trackBy: trackByForRowActions\"\n  >\n    <div class=\"rx-selected-row-action__header-container\">\n      <span rx-id=\"row-action\" class=\"rx-selected-row-action__header-title\" [title]=\"rowAction.label\">\n        {{ rowAction.label }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(index)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-button\"\n        (click)=\"removeRowAction(index, rowActions)\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport {\n  IRecordGridViewPresetColumn,\n  IRecordGridViewPresetColumnsModalOptions,\n  IRecordGridViewPresetColumnsModalResult\n} from './record-grid-view-preset-columns-modal.types';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { cloneDeep, omit } from 'lodash';\nimport { IStepperWithUnitsFormControlOptions } from '@helix/platform/shared/components';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\n\n@Component({\n  selector: 'rx-record-grid-view-preset-columns-modal',\n  templateUrl: './record-grid-view-preset-columns-modal.component.html',\n  styleUrls: ['./record-grid-view-preset-columns-modal.component.scss']\n})\nexport class RecordGridViewPresetColumnsModalComponent extends RxModalClass implements OnInit {\n  params: IRecordGridViewPresetColumnsModalOptions = this.activeModalRef.getData();\n\n  presetColumns: IRecordGridViewPresetColumn[] = this.params.presetColumns.map((column, index) => {\n    const gridColumn = this.params.gridColumns.find((col) => col.fieldId === column.data.fieldId);\n\n    return {\n      ...cloneDeep(column),\n      isOpen: index === 0,\n      title: gridColumn.title,\n      fallbackTitle: gridColumn.fallbackTitle\n    };\n  });\n\n  isReadOnly = this.params.isReadOnly;\n\n  columnWidthPropertyOptions: IStepperWithUnitsFormControlOptions = RX_RECORD_GRID.columnProperties.find(\n    ({ name }) => name === 'width'\n  ).options as IStepperWithUnitsFormControlOptions;\n\n  constructor(private activeModalRef: ActiveModalRef, protected injector: Injector) {\n    super(activeModalRef, injector);\n\n    this.presetColumns.sort((a, b) => a.data.index - b.data.index);\n  }\n\n  expandAllColumns(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presetColumns.forEach((column) => (column.isOpen = true));\n  }\n\n  collapseAllColumns(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presetColumns.forEach((column) => (column.isOpen = false));\n  }\n\n  saveChanges(): void {\n    this.activeModalRef.close({\n      presetColumns: this.presetColumns.map((column) => omit(column, ['isOpen', 'title']))\n    } as IRecordGridViewPresetColumnsModalResult);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  moveColumn(fromIndex: number, toIndex: number): void {\n    this.markAsDirty();\n    moveItemInArray(this.presetColumns, fromIndex, toIndex);\n    this.updateColumnIndexes();\n  }\n\n  onDropInSelectedColumnsContainer(event: CdkDragDrop<IRecordGridViewPresetColumn[]>) {\n    this.moveColumn(event.previousIndex, event.currentIndex);\n  }\n\n  trackByGuid(index: number, column: IRecordGridViewPresetColumn): string {\n    return column.guid;\n  }\n\n  private updateColumnIndexes(): void {\n    this.presetColumns.forEach((column, index) => {\n      column.data.index = index;\n    });\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"expandAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"presetColumns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let column of presetColumns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByGuid\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            [cdkDragDisabled]=\"isReadOnly\"\n            [cdkDragData]=\"column\"\n            cdkDragLockAxis=\"y\"\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.title\">\n                      {{ column.title || column.fallbackTitle }}\n                    </div>\n\n                    <div *ngIf=\"column.data.visible\" class=\"designer-modal-card-sub-title ml-2\" [title]=\"column.title\">\n                      visible\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                label=\"Column header\"\n                [disabled]=\"true\"\n                [(ngModel)]=\"column.title\"\n              ></adapt-rx-textfield>\n\n              <adapt-rx-checkbox\n                label=\"Visible\"\n                [(ngModel)]=\"column.data.visible\"\n                [disabled]=\"isReadOnly\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></adapt-rx-checkbox>\n\n              <rx-stepper-with-units-form-control\n                class=\"d-block col-5 p-0\"\n                [options]=\"columnWidthPropertyOptions\"\n                [(ngModel)]=\"column.data.width\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-stepper-with-units-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { ToolbarConfig } from '@bmc-ux/adapt-table';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { SortMeta } from 'primeng/api';\nimport { IAdaptTableColumnConfig } from '../runtime/types/record-grid-column.types';\nimport { IRecordGridPredefinedFilterPreset } from '../runtime/types/record-grid-predefined-filter-preset.interface';\nimport { IRecordGridDesignInspectorColumnConfig } from './editors/record-grid-column-editor-control';\nimport { IRecordGridFilterModel, RecordGridFilterMode } from './editors/record-grid-filter-select-control';\nimport { IRecordGridSortEditorModel } from './editors/record-grid-sort-editor-control';\nimport { IRxAvailableOnDevicesProp } from '@helix/platform/view/api';\n\nexport interface IRecordGridProperties extends IRxAvailableOnDevicesProp {\n  bordered?: boolean;\n  expandable: boolean;\n  name?: string;\n  recordDefinitionName: string;\n  showDataForAllLocales: boolean;\n  associationDefinitionName: string;\n  associatedRecordNodeSide: string;\n  associatedRecordId: string;\n  associatedRoleName: string;\n  enableRowSelection: string;\n  styles: string;\n  cardLayoutWidth: string;\n  filterExpression: string;\n  enableFiltering: boolean;\n  requiredFilters: number;\n  getDataForHiddenColumns: boolean;\n  enableFilterPresets: boolean;\n  filters: string;\n  defaultFilterPreset: string;\n  striped?: boolean;\n  viewPresetSelector?: string;\n}\n\nexport interface IRecordGridDesignProperties extends IRxAvailableOnDevicesProp {\n  name?: string;\n  mode: RecordGridDesignDefinitionMode;\n  recordDefinitionName: string;\n  associationDefinitionName: string;\n  showDataForAllLocales: boolean;\n  associatedRecordId: string;\n  associatedRoleName: string;\n  bordered?: boolean;\n  enableRowSelection: string;\n  expandable: boolean;\n  initialSortColumn: IRecordGridSortEditorModel;\n  columns: IRecordGridDesignInspectorColumnConfig[];\n  styles: string;\n  cardLayoutWidth: string;\n  enableFiltering: boolean;\n  getDataForHiddenColumns: boolean;\n  requiredFilters: number;\n  enableFilterPresets: boolean;\n  filterMode: RecordGridFilterMode;\n  filters: IRecordGridFilterModel;\n  filterExpression: string;\n  filterPresets: IRecordGridPredefinedFilterPreset[];\n  defaultFilterPreset: string;\n  striped?: boolean;\n  associatedRecordNodeSide?: string;\n  viewPresetSelector?: string;\n}\n\nexport enum RecordGridDesignDefinitionMode {\n  Record = 'record',\n  Association = 'association'\n}\n\nexport interface IRecordGridDesignAdaptTableConfig {\n  columns: IAdaptTableColumnConfig[];\n  sortMeta: SortMeta;\n  toolbarConfig: ToolbarConfig;\n}\n\nexport type RecordGridDesignValidationIssue = IViewComponentDesignValidationIssue<{\n  columnGuid?: string;\n  actionIndex?: number;\n}>;\n\nexport type RecordGridRowActionValidationIssue = IViewComponentDesignValidationIssue<{\n  rowActionIndex: number;\n  actionIndex: number;\n}>;\n","import { Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport { IFieldDefinition, IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  IFormControlBuilderConfig,\n  IPlainObject,\n  RxDefinitionNameService,\n  RxFeatureService,\n  Tooltip\n} from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalSelectFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  ITextFormControlOptions,\n  OptionalSelectFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IViewActionDesignProperties,\n  RecordGridNamedFilterOptionKey,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewActionListItem,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  IViewDesignerInspectorConfig,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport {\n  defaults,\n  filter as _filter,\n  find,\n  forEach,\n  isEmpty,\n  isObject,\n  isUndefined,\n  map as _map,\n  omit,\n  pick,\n  reduce,\n  sortBy\n} from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap, take } from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IRecordGridSortable } from '../runtime/types/record-grid-column.types';\nimport { IRxRecordGridFilter } from '../common/types/record-grid-filter.types';\nimport { IRecordGridPredefinedFilterPreset } from '../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IRecordGridColumnDesignModel,\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridColumnEditorControlComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-control.component';\nimport {\n  IRecordGridFilterPresetDescriptorModel,\n  IRecordGridFilterPresetEditorControlOptions\n} from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor.types';\nimport { RecordGridFilterPresetEditorControlComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component';\nimport {\n  IRecordGridFilterDescriptorModel,\n  IRecordGridFilterSelectControlOptions,\n  RecordGridFilterMode\n} from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RecordGridFilterSelectControlComponent } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.component';\nimport { RxRecordGridRowActionEditorWidgetComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.types';\nimport { RecordGridSortEditorControlComponent } from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { INamedFilterOptionDesignData } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.types';\nimport { RecordGridViewPresetsWidgetComponent } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetsWidgetOptions\n} from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  IGridViewColumnProperties,\n  IGridViewPresetProperties,\n  IRecordGridColumnNamedFilterOptionDesign,\n  IRecordGridSortableObject\n} from '../common/types/record-grid.types';\nimport { IViewPresetProperties } from '../../view-preset-selector/view-preset-selector.types';\n\ntype ColumnsDataDictionaryBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionary;\ntype ColumnDataDictionaryBranchBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionaryBranch;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignUtilsService {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFeatureService: RxFeatureService,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private translateService: TranslateService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  private getColumnActionComponentPayloads(\n    actions: IViewActionListItem[]\n  ): IViewComponentDesignSetPayload<IViewActionDesignProperties>[] {\n    return _map(\n      actions,\n      (action): IViewComponentDesignSetPayload<IViewActionDesignProperties> => ({\n        ...action,\n        type: RxViewComponentType.Action\n      })\n    );\n  }\n\n  private getNamedFilterOptionPayloads(\n    namedFilterOptions: INamedFilterOptionDesignData[]\n  ): IViewComponentDesignSetPayload<IRecordGridColumnNamedFilterOptionDesign>[] {\n    return _map(namedFilterOptions, (namedFilterOption) => ({\n      ...namedFilterOption,\n      type: RX_RECORD_GRID.components.filterPreset\n    }));\n  }\n\n  getGridFilterComponentPayloads(\n    gridFilters: IRxRecordGridFilter[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel>[] {\n    return _map(\n      gridFilters,\n      (gridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n        guid: gridFilter.guid,\n        type: RX_RECORD_GRID.components.filter,\n        data: {\n          fieldId: gridFilter.fieldId,\n          value: gridFilter.value,\n          ...(gridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: gridFilter.$DISPLAYVALUE$ })\n        }\n      })\n    );\n  }\n\n  getColumnComponentPayloads(\n    columns: IRecordGridDesignInspectorColumnConfig[],\n    initialSortColumn: IRecordGridSortEditorModel\n  ): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel>[] {\n    return _map(columns, (inspectorColumn, index): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel> => {\n      let sortable: IRecordGridSortable = 'false';\n\n      if (initialSortColumn?.fieldId === inspectorColumn.fieldId && inspectorColumn.sortable !== false) {\n        sortable = JSON.stringify({\n          direction: initialSortColumn.direction\n        } as IRecordGridSortableObject) as IRecordGridSortable;\n      } else if (isObject(inspectorColumn.sortable) || inspectorColumn.sortable === true) {\n        sortable = 'true';\n      }\n\n      const columnDesignModel: IRecordGridColumnDesignModel = {\n        alignment: inspectorColumn.alignment,\n        fieldId: inspectorColumn.fieldId,\n        filterable: inspectorColumn.filterable,\n        filterType: inspectorColumn.filterType,\n        index: String(inspectorColumn.index),\n        sortable,\n        title: inspectorColumn.title,\n        searchable: inspectorColumn.searchable,\n        visible: inspectorColumn.visible,\n        cellDisplayProperties: inspectorColumn.cellDisplayProperties,\n        width: inspectorColumn.width,\n        wrapText: inspectorColumn.wrapText,\n        typeaheadKeystrokeCount: inspectorColumn.typeaheadKeystrokeCount,\n        additionalQueryCriteria: inspectorColumn.additionalQueryCriteria\n      };\n\n      return {\n        type: RX_RECORD_GRID.components.column,\n        guid: inspectorColumn.guid,\n        insertIndex: index,\n        outletName: RX_VIEW_DEFINITION.defaultOutletName,\n        data: columnDesignModel,\n        children: [\n          ...this.getColumnActionComponentPayloads(inspectorColumn.actions),\n          ...this.getNamedFilterOptionPayloads(inspectorColumn.namedFilterOptions)\n        ]\n      };\n    });\n  }\n\n  getGridFilterPresetComponentPayloads(\n    filterPresets: IRecordGridPredefinedFilterPreset[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel>[] {\n    const namedFilterGuids = columns.reduce(\n      (result, column) => result.concat(...column.namedFilterOptions.map((namedFilter) => namedFilter.guid)),\n      []\n    );\n\n    const selectedFieldIds = columns.map((column) => column.fieldId);\n\n    return _map(\n      filterPresets,\n      (filterPreset): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel> => {\n        const newRecordGridFilters = filterPreset.recordGridFilters\n          .filter((filter) => selectedFieldIds.includes(filter.fieldId))\n          .filter((filter) => {\n            const value = isObject(filter.value) ? filter.value : this.rxJsonParserService.tryParseJson(filter.value);\n\n            return (\n              !value?.[RecordGridNamedFilterOptionKey] ||\n              namedFilterGuids.includes(value[RecordGridNamedFilterOptionKey])\n            );\n          });\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          filterPreset.filters,\n          newRecordGridFilters\n        );\n\n        return {\n          guid: filterPreset.guid,\n          type: RX_RECORD_GRID.components.filterPreset,\n          data: {\n            title: filterPreset.title,\n            filters: newFilterData\n              ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n                  JSON.stringify(newFilterData),\n                  newRecordGridFilters\n                )\n              : null\n          },\n          children: _map(\n            newRecordGridFilters,\n            (recordGridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n              guid: recordGridFilter.guid,\n              type: RX_RECORD_GRID.components.filter,\n              data: {\n                fieldId: recordGridFilter.fieldId,\n                value: recordGridFilter.value,\n                ...(recordGridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: recordGridFilter.$DISPLAYVALUE$ })\n              }\n            })\n          )\n        };\n      }\n    );\n  }\n\n  getFilterPresetDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IRecordGridPredefinedFilterPreset[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset),\n      (\n        filterPresetsDescriptor: IViewComponentDesignData<IRecordGridFilterPresetDescriptorModel>\n      ): IRecordGridPredefinedFilterPreset => ({\n        filters: filterPresetsDescriptor.data.filters,\n        recordGridFilters: _map(\n          _filter(\n            filterPresetsDescriptor.children,\n            (definition) => definition.type === RX_RECORD_GRID.components.filter\n          ),\n          (presetFilter: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n            fieldId: presetFilter.data.fieldId,\n            value: presetFilter.data.value,\n            guid: presetFilter.guid,\n            $DISPLAYVALUE$: presetFilter.data.$DISPLAYVALUE$\n          })\n        ),\n        title: filterPresetsDescriptor.data.title,\n        guid: filterPresetsDescriptor.guid\n      })\n    ).filter((filterPreset) => filterPreset.recordGridFilters?.length > 0);\n  }\n\n  private getActionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): IViewComponentDesignData<IViewActionDesignProperties>[] {\n    return _map(\n      _filter(\n        componentDesignData.children,\n        (definition) => definition.type === RxViewComponentType.Action\n      ) as IViewComponentDesignData<IViewActionDesignProperties>[],\n      (columnAction) => ({\n        ...columnAction,\n        data: { ...columnAction.data }\n      })\n    );\n  }\n\n  private getNamedFilterOptionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): INamedFilterOptionDesignData[] {\n    return componentDesignData.children\n      .filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset)\n      .map((namedFilterOptionData: IViewComponentDesignData<IRecordGridColumnNamedFilterOptionDesign>) => ({\n        ...namedFilterOptionData,\n        data: { ...namedFilterOptionData.data }\n      }));\n  }\n\n  getDefaultColumns(recordDefinition: IRecordDefinition): IRecordGridDesignInspectorColumnConfig[] {\n    let columns: IRecordGridDesignInspectorColumnConfig[] = [];\n\n    if (recordDefinition) {\n      const fieldDefinitions = recordDefinition.fieldDefinitions;\n      const coreFieldIds = RX_RECORD_DEFINITION.coreFieldIds;\n\n      columns = [\n        {\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.displayId).name,\n          fieldId: String(coreFieldIds.displayId),\n          searchable: true\n        }\n      ];\n\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType) {\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.modifiedDate).name,\n          fieldId: String(coreFieldIds.modifiedDate),\n          searchable: false\n        });\n\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.description).name,\n          fieldId: String(coreFieldIds.description),\n          searchable: true\n        });\n      }\n\n      const defaultValues = reduce(\n        RX_RECORD_GRID.columnProperties,\n        (result, columnProperty) => {\n          result[columnProperty.name] = columnProperty.defaultValue;\n\n          return result;\n        },\n        {} as IPlainObject\n      );\n\n      forEach(columns, (column, index) =>\n        defaults(column, defaultValues, {\n          index,\n          guid: this.rxGuidService.generate()\n        } as IRecordGridDesignInspectorColumnConfig)\n      );\n    }\n\n    return columns;\n  }\n\n  getInitialSortColumnModel(columns: IRecordGridDesignInspectorColumnConfig[]): IRecordGridSortEditorModel {\n    const selectedSortColumn = find(columns, (column) => isObject(column.sortable));\n\n    return selectedSortColumn\n      ? {\n          direction: (selectedSortColumn.sortable as IRecordGridSortableObject).direction,\n          fieldId: selectedSortColumn.fieldId\n        }\n      : null;\n  }\n\n  getInspectorColumnsFromDesignData(\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): IRecordGridDesignInspectorColumnConfig[] {\n    return columnsDesignModel.map((columnDescriptor): IRecordGridDesignInspectorColumnConfig => {\n      const column = columnDescriptor.data;\n\n      return {\n        ...pick(column, [\n          'alignment',\n          'fieldId',\n          'filterType',\n          'searchable',\n          'title',\n          'cellDisplayProperties',\n          'width',\n          'typeaheadKeystrokeCount',\n          'additionalQueryCriteria'\n        ]),\n        actions: this.getActionsFromComponent(columnDescriptor),\n        namedFilterOptions: this.getNamedFilterOptionsFromComponent(columnDescriptor),\n        guid: columnDescriptor.guid,\n        filterable:\n          this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable),\n        sortable:\n          (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable as boolean) as any) ||\n          isUndefined(column.sortable),\n        visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n        wrapText: this.rxRecordGridConfigUtilsService.getBooleanValue(column.wrapText),\n        index: Number(column.index)\n      };\n    });\n  }\n\n  getComponentProperties(componentDesignProperties: IRecordGridDesignProperties): IRecordGridProperties {\n    return {\n      bordered: componentDesignProperties.bordered ?? true,\n      expandable: componentDesignProperties.expandable,\n      name: componentDesignProperties.name,\n      recordDefinitionName: componentDesignProperties.recordDefinitionName,\n      showDataForAllLocales: componentDesignProperties.showDataForAllLocales,\n      associationDefinitionName: componentDesignProperties.associationDefinitionName,\n      associatedRecordNodeSide: componentDesignProperties.associatedRecordNodeSide,\n      associatedRecordId: componentDesignProperties.associatedRecordId,\n      associatedRoleName: componentDesignProperties.associatedRoleName,\n      filterExpression: componentDesignProperties.filterExpression,\n      filters: isObject(componentDesignProperties.filters)\n        ? componentDesignProperties.filters.filtersJson\n        : componentDesignProperties.filters,\n      defaultFilterPreset: this.getDefaultFilterPreset(componentDesignProperties),\n      cardLayoutWidth: componentDesignProperties.cardLayoutWidth,\n      enableFiltering: componentDesignProperties.enableFiltering,\n      requiredFilters: componentDesignProperties.requiredFilters ?? 0,\n      getDataForHiddenColumns: componentDesignProperties.getDataForHiddenColumns ?? true,\n      enableFilterPresets: componentDesignProperties.enableFilterPresets,\n      enableRowSelection: componentDesignProperties.enableRowSelection,\n      styles: componentDesignProperties.styles,\n      striped: !!componentDesignProperties.striped,\n      viewPresetSelector: componentDesignProperties.viewPresetSelector,\n      [RX_AVAILABLE_ON_DEVICES_PROP_NAME]: componentDesignProperties[RX_AVAILABLE_ON_DEVICES_PROP_NAME]\n    };\n  }\n\n  private getDefaultFilterPreset(componentDesignProperties: IRecordGridDesignProperties): string {\n    if (componentDesignProperties.defaultFilterPreset && componentDesignProperties.filterPresets) {\n      return componentDesignProperties.filterPresets.some(\n        (filterPreset) => filterPreset.guid === componentDesignProperties.defaultFilterPreset\n      )\n        ? componentDesignProperties.defaultFilterPreset\n        : null;\n    } else if (componentDesignProperties.defaultFilterPreset && !componentDesignProperties.filterPresets) {\n      return componentDesignProperties.defaultFilterPreset;\n    }\n\n    return null;\n  }\n\n  getComponentDesignProperties(\n    componentProperties: IRecordGridProperties,\n    initialComponentProperties: IRecordGridDesignProperties,\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    basicRecordGridFilters: IRxRecordGridFilter[],\n    filterPresets: IRecordGridPredefinedFilterPreset[]\n  ): IRecordGridDesignProperties {\n    const columns = this.getInspectorColumnsFromDesignData(columnsDesignModel);\n\n    componentProperties = {\n      ...initialComponentProperties,\n      ...componentProperties\n    };\n\n    return {\n      ...componentProperties,\n      mode: componentProperties.associationDefinitionName\n        ? RecordGridDesignDefinitionMode.Association\n        : RecordGridDesignDefinitionMode.Record,\n      filters: {\n        basicFilters: basicRecordGridFilters,\n        filtersJson: componentProperties.filters\n      },\n      filterMode: componentProperties.filterExpression ? RecordGridFilterMode.Expression : RecordGridFilterMode.Basic,\n      filterPresets,\n      initialSortColumn: this.getInitialSortColumnModel(columns),\n      columns\n    };\n  }\n\n  getActionButtonDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IActionButtonProperties>[] {\n    return definitions.filter((definition) => definition.type === RxViewComponentType.ActionButton);\n  }\n\n  getGridViewPresetsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IGridViewPresetProperties>[] {\n    return definitions.filter(\n      (definition) => definition.type === RX_RECORD_GRID.components.viewPreset\n    ) as IViewComponentDesignData<IGridViewPresetProperties>[];\n  }\n\n  getBasicRecordGridFiltersFromChildData(definitions: IViewComponentDesignData[]): IRxRecordGridFilter[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filter),\n      (basicFilterDescriptor: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n        fieldId: basicFilterDescriptor.data.fieldId,\n        value: basicFilterDescriptor.data.value,\n        guid: basicFilterDescriptor.guid,\n        $DISPLAYVALUE$: basicFilterDescriptor.data.$DISPLAYVALUE$\n      })\n    );\n  }\n\n  getRowActionButtonPayloads(rowActions: IRowAction[]): IViewComponentDesignSetPayload<IActionButtonProperties>[] {\n    return rowActions.map((rowAction) => ({\n      type: RxViewComponentType.ActionButton,\n      guid: rowAction.guid,\n      data: omit(rowAction, 'actions', 'guid'),\n      outletName: RX_RECORD_GRID.rowActionsOutletName,\n      children: this.getColumnActionComponentPayloads(rowAction.actions)\n    }));\n  }\n\n  getInspector(\n    model: IRecordGridDesignProperties,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const hasRecordDefinition = Boolean(model.recordDefinitionName && recordDefinition);\n\n    const generalControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'name',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Name',\n          tooltip: new Tooltip('Enter a name to uniquely identify the Record grid.')\n        } as ITextFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          required: false,\n          label: 'Mode',\n          items: [\n            {\n              value: RecordGridDesignDefinitionMode.Record,\n              name: 'Record'\n            },\n            {\n              value: RecordGridDesignDefinitionMode.Association,\n              name: 'Association'\n            }\n          ]\n        } as IGroupButtonFormControlOptions\n      },\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? 'Record definition to show'\n              : 'Record definition name',\n          definitionType:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? RxDefinitionPickerType.RegularDataRecord\n              : RxDefinitionPickerType.Record,\n          required: true,\n\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (!isEmpty(model.columns) && Boolean(oldValue)) {\n              return this.rxModalService.confirm({\n                title: 'Warning',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message:\n                  'Initial column sort, initial filters, and added grid columns will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    const presentationControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'cardLayoutWidth',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Card layout width',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.cardLayoutWidthOptions,\n          emptyOption: true,\n          tooltip: new Tooltip('The width of the Record grid view component at which it will switch to card layout.')\n        } as ISelectFormControlOptions\n      },\n      {\n        name: 'initialSortColumn',\n        component: RecordGridSortEditorControlComponent,\n        options: {\n          label: 'Initial column sort',\n          gridColumns: sortBy(model.columns, 'title'),\n          recordDefinition\n        } as IRecordGridSortEditorControlOptions\n      },\n      {\n        name: 'enableRowSelection',\n        component: OptionalSelectFormControlComponent,\n        options: {\n          label: 'Enable row selection',\n          options: [\n            {\n              id: RX_RECORD_GRID.selectionTypes.multiple,\n              name: 'Multiple rows'\n            },\n            {\n              id: RX_RECORD_GRID.selectionTypes.single,\n              name: 'Single row'\n            }\n          ]\n        } as IOptionalSelectFormControlOptions\n      },\n      {\n        name: 'expandable',\n        component: SwitchFormControlComponent,\n        hidden: !this.rxFeatureService.isFeatureEnabled('DRD21-44922'),\n        options: {\n          label: 'Enable grid width expansion',\n          tooltip: new Tooltip(\n            'If enabled, the grid will expand in width to accommodate wider columns. If one or more columns extend beyond the right border of the grid, a horizontal scroll bar will appear.<br>Column width will be converted to pixels if grid width expansion mode is enabled.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'bordered',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show border lines'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'striped',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show striped rows'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'showDataForAllLocales',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show data for all locales',\n          tooltip: new Tooltip(\n            'If enabled, data for all locales will be displayed in the grid at runtime. If disabled, only data for current locale will be displayed.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      getAvailableOnDevicesInspectorConfig(),\n      getStylesFieldInspectorConfig()\n    ];\n\n    if (model.mode === RecordGridDesignDefinitionMode.Association) {\n      if (hasRecordDefinition) {\n        generalControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Association to use',\n            options: _map(\n              recordAssociationDefinitions,\n              (associationDescriptor): ISelectOption => ({\n                id: associationDescriptor.name,\n                name: this.rxDefinitionNameService.getDisplayName(associationDescriptor.name)\n              })\n            ),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      const selectedAssociationDefinition = find(\n        recordAssociationDefinitions,\n        (definition) => definition.name === model.associationDefinitionName\n      );\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.nodeAId === selectedAssociationDefinition.nodeBId\n      ) {\n        generalControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Associated record node side',\n            options: [\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                name: selectedAssociationDefinition.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                name: selectedAssociationDefinition.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ],\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      generalControls.push({\n        name: 'associatedRecordId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Associated record ID',\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value\n      ) {\n        generalControls.push({\n          name: 'associatedRoleName',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Associated role name'\n          } as IExpressionInspectorControlOptions\n        });\n      }\n    }\n\n    if (hasRecordDefinition) {\n      generalControls.push({\n        name: 'columns',\n        component: RecordGridColumnEditorControlComponent,\n        options: {\n          recordDefinition\n        } as IRecordGridColumnEditorControlOptions\n      });\n\n      generalControls.push({\n        name: 'getDataForHiddenColumns',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Get data for hidden columns',\n          tooltip: new Tooltip(\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.record-grid.get-data-for-hidden-columns.tooltip'\n            )\n          )\n        } as ISwitcherFormControlOptions\n      });\n\n      generalControls.push({\n        widgetName: 'rowActions',\n        component: RxRecordGridRowActionEditorWidgetComponent\n      });\n    }\n\n    const filtersControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'enableFiltering',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable filtering'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'requiredFilters',\n        component: SelectFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Required number of filters',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.numberOfFiltersOptions,\n          emptyOption: false,\n          tooltip: new Tooltip(\n            'Data will be displayed in the grid only if a) the number of applied filters is greater than or equal to the required number of filters, or b) a search is performed.'\n          )\n        } as ISelectFormControlOptions\n      }\n    ];\n\n    if (hasRecordDefinition) {\n      filtersControls.push({\n        name: 'filterMode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          label: 'Initial filters',\n          items: [\n            {\n              name: 'Basic',\n              value: RecordGridFilterMode.Basic\n            },\n            {\n              name: 'Expression',\n              value: RecordGridFilterMode.Expression\n            }\n          ],\n          tooltip: new Tooltip(\n            'Select the records that should be displayed on the deployed application UI. Application users can add filters in the deployed application.'\n          ),\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (\n              (newValue === RecordGridFilterMode.Expression && model.filters.filtersJson) ||\n              (newValue === RecordGridFilterMode.Basic && model.filterExpression)\n            ) {\n              return this.rxModalService.confirm({\n                title: 'Change filter type',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: 'Current filter will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IGroupButtonFormControlOptions\n      });\n\n      if (model.filterMode === RecordGridFilterMode.Basic) {\n        filtersControls.push({\n          name: 'filters',\n          component: RecordGridFilterSelectControlComponent,\n          options: {\n            primaryRecordDefinition: recordDefinition\n          } as IRecordGridFilterSelectControlOptions\n        });\n      } else {\n        filtersControls.push({\n          name: 'filterExpression',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Initial filters',\n            isLabelHidden: true\n          } as IExpressionInspectorControlOptions\n        });\n      }\n\n      filtersControls.push({\n        name: 'enableFilterPresets',\n        component: SwitchFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Enable filter presets'\n        } as ISwitcherFormControlOptions\n      });\n\n      filtersControls.push({\n        name: 'filterPresets',\n        component: RecordGridFilterPresetEditorControlComponent,\n        options: {\n          label: 'Filter presets',\n          tooltip: new Tooltip('Predefine sets of record grid filters users can apply.'),\n          primaryRecordDefinition: recordDefinition,\n          columns: model.columns.filter((column) => column.filterable)\n        } as IRecordGridFilterPresetEditorControlOptions\n      });\n    }\n\n    if (!isEmpty(model.filterPresets)) {\n      filtersControls.push({\n        name: 'defaultFilterPreset',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Default filter preset',\n          tooltip: new Tooltip('Select a filter preset to be applied when a user opens this view for the first time.'),\n          options: _map(\n            model.filterPresets,\n            (filterPreset): ISelectOption => ({ id: filterPreset.guid, name: filterPreset.title })\n          ),\n          emptyOption: true\n        } as ISelectFormControlOptions\n      });\n    }\n\n    const inspectorSectionConfigs = [\n      {\n        label: 'General',\n        controls: generalControls\n      },\n      {\n        label: 'Filters',\n        controls: filtersControls\n      },\n      {\n        label: 'Presentation',\n        controls: presentationControls\n      },\n      {\n        label: 'View presets',\n        controls: [\n          {\n            component: RecordGridViewPresetsWidgetComponent,\n            options: {\n              recordDefinition: recordDefinition\n            } as IRecordGridViewPresetsWidgetOptions\n          }\n        ]\n      }\n    ];\n\n    return { inspectorSectionConfigs };\n  }\n\n  getColumnDataDictionaryBranch(\n    recordGridGuid: string,\n    componentDescriptorName: string,\n    componentName$: Observable<string>,\n    columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]>,\n    recordDefinition$: Observable<IRecordDefinition>,\n    associationDefinitionDisplayName$: Observable<string>\n  ): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    const columnDataDictionaryBranch$ = combineLatest([columnComponents$, recordDefinition$]).pipe(\n      switchMap(([columnComponents, recordDefinition]) =>\n        recordDefinition\n          ? this.getColumnsDataDictionaryBuilder(recordGridGuid, columnComponents, recordDefinition).pipe(\n              map(\n                (buildColumnDataDictionary): IViewComponentDesignCommonDataDictionaryBranch => ({\n                  label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                  expression: `\\${view.components.${recordGridGuid}.api}`,\n                  children: [\n                    {\n                      label: 'First selected row',\n                      expression: `\\${view.components.${recordGridGuid}.firstSelectedRow}`,\n                      children: buildColumnDataDictionary('firstSelectedRow')\n                    },\n                    {\n                      label: 'Is user allowed to delete records',\n                      expression: `\\${view.components.${recordGridGuid}.isUserAllowedToDeleteRecords}`\n                    },\n                    {\n                      label: 'Last action row',\n                      expression: `\\${view.components.${recordGridGuid}.clickableRow}`,\n                      children: buildColumnDataDictionary('clickableRow')\n                    },\n                    {\n                      label: 'Selected rows',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRows}`,\n                      children: buildColumnDataDictionary('fieldValuesByFieldId')\n                    },\n                    {\n                      label: 'Selected row count',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRowCount}`\n                    },\n                    {\n                      label: 'Total row count',\n                      expression: `\\${view.components.${recordGridGuid}.totalRowCount}`\n                    },\n                    {\n                      label: 'Query expression',\n                      expression: `\\${view.components.${recordGridGuid}.queryExpression}`\n                    },\n                    {\n                      label: 'Last refresh time',\n                      expression: `\\${view.components.${recordGridGuid}.lastRefreshTime}`\n                    }\n                  ]\n                })\n              ),\n              take(1)\n            )\n          : of(null)\n      )\n    );\n\n    return combineLatest([componentName$, columnDataDictionaryBranch$, associationDefinitionDisplayName$]).pipe(\n      map(([label, dataDictionaryBranch, associationDefinitionDisplayName]) =>\n        dataDictionaryBranch\n          ? ({\n              ...dataDictionaryBranch,\n              label: this.getComponentName(\n                componentDescriptorName,\n                dataDictionaryBranch.label,\n                associationDefinitionDisplayName,\n                label\n              )\n            } as IViewComponentDesignCommonDataDictionaryBranch)\n          : null\n      )\n    );\n  }\n\n  private getColumnsDataDictionaryBuilder(\n    recordGridGuid: string,\n    columnComponents: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    recordDefinition: IRecordDefinition\n  ): Observable<ColumnsDataDictionaryBuilder> {\n    return (\n      columnComponents.length\n        ? forkJoin(\n            columnComponents.map((component) =>\n              this.rxRecordGridUtilsService.getFieldDefinition(component.data.fieldId, recordDefinition).pipe(\n                filter((fieldDefinition) => !!fieldDefinition),\n                map((fieldDefinition) =>\n                  this.getColumnDataDictionaryBranchBuilder(recordGridGuid, component, fieldDefinition)\n                )\n              )\n            ) as Observable<ColumnDataDictionaryBranchBuilder>[]\n          )\n        : of([])\n    ).pipe(\n      map(\n        (builders) => (gridPropertyName: string) =>\n          builders.map((buildColumnDataDictionaryBranch) =>\n            buildColumnDataDictionaryBranch.call(this, gridPropertyName)\n          )\n      )\n    );\n  }\n\n  private getColumnDataDictionaryBranchBuilder(\n    recordGridGuid: string,\n    columnComponent: IViewComponentDesignData<IRecordGridDesignColumnData>,\n    fieldDefinition: IFieldDefinition\n  ): ColumnDataDictionaryBranchBuilder {\n    const selectionList =\n      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n        ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n            label: optionName,\n            expression: `\\${view.components.${recordGridGuid}.recordDefinition.fieldDefinitionsById[${columnComponent.data.fieldId}].optionsById[${optionValue}].id}`\n          }))\n        : undefined;\n\n    return (propertyName: string): IViewComponentDesignCommonDataDictionaryBranch => ({\n      label: columnComponent.data.title?.trim() || `[${fieldDefinition.name}]`,\n      expression: `\\${view.components.${recordGridGuid}.${propertyName}.${columnComponent.data.fieldId}}`,\n      autocompleteOptions: selectionList,\n      children:\n        fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n          ? [\n              {\n                label: `${columnComponent.data.title} (Option name)`,\n                expression: `\\${view.components.${recordGridGuid}.${propertyName}.selectionFieldOptionNamesById.${columnComponent.data.fieldId}}`\n              },\n              {\n                label: 'Options',\n                children: selectionList\n              }\n            ]\n          : null\n    });\n  }\n\n  getComponentName(\n    componentDescriptorName: string,\n    recordDefinitionDisplayName?: string,\n    associationDefinitionDisplayName?: string,\n    name?: string\n  ): string {\n    const additionalLabels = [recordDefinitionDisplayName, associationDefinitionDisplayName, name].filter(Boolean);\n\n    return additionalLabels.length\n      ? `${componentDescriptorName} (${additionalLabels.join(': ')})`\n      : componentDescriptorName;\n  }\n\n  getGridViewPresetPayload(\n    viewPresetGuid: string,\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload {\n    return {\n      type: RX_RECORD_GRID.components.viewPreset,\n      guid: this.rxGuidService.generate(),\n      data: {\n        viewPresetGuid,\n        filters: null\n      },\n      children: columns.map((column) => this.getColumnPresetPayload(column))\n    };\n  }\n\n  getColumnPresetPayload(\n    column: IRecordGridDesignInspectorColumnConfig\n  ): IViewComponentDesignSetPayload<IGridViewColumnProperties> {\n    return {\n      type: RX_RECORD_GRID.components.columnViewPreset,\n      data: {\n        fieldId: column.fieldId,\n        index: column.index,\n        visible: column.visible,\n        sortable: isObject(column.sortable) ? column.sortable : null,\n        width: column.width\n      }\n    };\n  }\n\n  getPresetsList(guid: string): Observable<IPresetItem[]> {\n    return guid\n      ? this.viewDesignerFacade.getChildComponents<IViewPresetProperties>(guid).pipe(\n          map((res) => res.sort((a, b) => a.data.index - b.data.index)),\n          map((res) => res.map((item) => ({ guid: item.guid, name: item.data.label }))),\n          debounceTime(50) // used to let store be `stabilized` when indexes are updating for each preset\n        )\n      : of([]);\n  }\n}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { cloneDeep, isObject, noop, pick, sortBy } from 'lodash';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { RecordGridViewPresetColumnsModalComponent } from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component';\nimport {\n  IRecordGridEditViewPresetsModalData,\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult,\n  IRecordGridEditViewPresetsModalTags\n} from './record-grid-edit-view-presets-modal.types';\nimport { IRecordGridViewPresetColumnData } from '../record-grid-view-presets-widget.types';\nimport {\n  IRecordGridViewPresetColumnsModalOptions,\n  IRecordGridViewPresetColumnsModalResult\n} from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.types';\nimport { IRecordGridSortEditorModel } from '../../record-grid-sort-editor-control';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport { RxRecordGridDesignUtilsService } from '../../../record-grid-design-utils.service';\nimport {\n  IRecordGridNamedFilterOptionsMap,\n  IRecordGridSortableObject\n} from '../../../../common/types/record-grid.types';\nimport { RxRecordGridFilterSelectHelperService } from '../../record-grid-filter-select-control/record-grid-filter-select-helper.service';\nimport { forkJoin, of } from 'rxjs';\nimport { defaultIfEmpty, map, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-edit-view-presets-modal',\n  templateUrl: './record-grid-edit-view-presets-modal.component.html',\n  styleUrls: ['./record-grid-edit-view-presets-modal.component.scss']\n})\nexport class RecordGridEditViewPresetsModalComponent extends RxModalClass implements OnInit {\n  params: IRecordGridEditViewPresetsModalOptions = this.activeModalRef.getData();\n  presets: IRecordGridEditViewPresetsModalData[] = [];\n  isReadOnly = this.params.isReadOnly;\n  private namedFilterOptions: IRecordGridNamedFilterOptionsMap;\n\n  private gridColumns$ =\n    this.params.gridColumns && this.params.recordDefinition\n      ? forkJoin(\n          this.params.gridColumns.map((gridColumn) => {\n            if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n              return this.rxRecordGridUtilsService\n                .getFieldDefinition(gridColumn.fieldId, this.params.recordDefinition)\n                .pipe(map((fieldDefinition) => ({ ...gridColumn, fallbackTitle: `[${fieldDefinition.name}]` })));\n            }\n\n            return of({ ...gridColumn, fallbackTitle: `[${gridColumn.title}]` });\n          })\n        ).pipe(defaultIfEmpty([]))\n      : of([]);\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterSelectHelperService: RxRecordGridFilterSelectHelperService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.gridColumns$.pipe(take(1)).subscribe((gridColumns) => {\n      this.namedFilterOptions =\n        this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(gridColumns);\n\n      this.presets = this.params.presetsList.map(({ guid, name }, index) => {\n        const presetComponent = this.params.viewPresets.find(({ data }) => data.viewPresetGuid === guid);\n        const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n        const viewPresetGuid = presetComponent.data.viewPresetGuid;\n\n        const presetColumns: IRecordGridViewPresetColumnData[] = cloneDeep(\n          presetComponent.children.filter((col) => col.type === RX_RECORD_GRID.components.columnViewPreset)\n        );\n\n        const sortedColumn = presetColumns.find((col) => isObject(col.data.sortable));\n\n        const sortModel: IRecordGridSortEditorModel = sortedColumn\n          ? {\n              fieldId: sortedColumn.data.fieldId,\n              direction: (sortedColumn.data.sortable as IRecordGridSortableObject).direction\n            }\n          : null;\n\n        return {\n          presetName: name,\n          gridColumns,\n          presetColumns,\n          guid: viewPresetGuid,\n          tags: this.getTags(presetColumns, gridColumns),\n          isOpen: this.params.activePreset ? this.params.activePreset === viewPresetGuid : index === 0,\n          sortModel,\n          filters: {\n            basicFilters: this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(\n              presetComponent.children\n            ),\n            filtersJson: presetComponent.data.filters\n          },\n          filterSelectControlOptions: {\n            primaryRecordDefinition: {\n              ...this.params.recordDefinition,\n              fieldDefinitions: this.params.recordDefinition.fieldDefinitions.filter((definition) =>\n                gridColumnsIds.includes(String(definition.id))\n              )\n            },\n            selectedFieldIds: gridColumns.map((column) => column.fieldId),\n            namedFilterOptions: this.namedFilterOptions\n          },\n          sortEditorControlOptions: {\n            label: 'Initial column sort',\n            gridColumns: sortBy(gridColumns, 'title'),\n            recordDefinition: this.params.recordDefinition\n          }\n        };\n      });\n    });\n  }\n\n  saveChanges(): void {\n    this.activeModalRef.close({\n      presets: this.presets\n    } as IRecordGridEditViewPresetsModalResult);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  expandAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = true));\n  }\n\n  collapseAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = false));\n  }\n\n  openPresetColumnsModal(preset: IRecordGridEditViewPresetsModalData): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit grid columns for ${preset.presetName}`,\n        content: RecordGridViewPresetColumnsModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        data: {\n          gridColumns: preset.gridColumns,\n          presetColumns: preset.presetColumns,\n          isReadOnly: this.isReadOnly\n        } as IRecordGridViewPresetColumnsModalOptions,\n        testID: 'edit-grid-columns-for-view-preset'\n      })\n      .then((result: IRecordGridViewPresetColumnsModalResult) => {\n        if (result?.presetColumns) {\n          preset.presetColumns = result.presetColumns;\n          preset.tags = this.getTags(preset.presetColumns, preset.gridColumns);\n          this.markAsDirty();\n        }\n      })\n      .catch(noop);\n  }\n\n  trackByPreset(index: number, item: IRecordGridEditViewPresetsModalData): string {\n    return item.guid;\n  }\n\n  private getTags(\n    presetColumns: IRecordGridViewPresetColumnData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IRecordGridEditViewPresetsModalTags {\n    const allColumnTitles = presetColumns\n      .filter((column) => column.data.visible)\n      .map((column) => {\n        const gridColumn = gridColumns.find((col) => col.fieldId === column.data.fieldId);\n        return gridColumn.title || gridColumn.fallbackTitle;\n      });\n\n    const displayedColumnTitles = allColumnTitles.slice(0, 5);\n\n    return {\n      items: displayedColumnTitles,\n      restCount: allColumnTitles.length - displayedColumnTitles.length\n    };\n  }\n\n  onSortChange(sortModel: IRecordGridSortEditorModel, preset: IRecordGridEditViewPresetsModalData): void {\n    preset.presetColumns.forEach((column) => {\n      column.data.sortable = column.data.fieldId === sortModel?.fieldId ? pick(sortModel, 'direction') : null;\n    });\n\n    this.markAsDirty();\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"expandAll($event)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAll($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let preset of presets; let index = index; trackBy: trackByPreset\"\n            class=\"designer-modal-accordion-content\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"preset.isOpen\"\n              (open)=\"preset.isOpen = true\"\n              (close)=\"preset.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"preset.presetName\" rx-id=\"card-title\">\n                      {{ preset.presetName }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                rx-id=\"open-grid-preset-columns-modal-button\"\n                class=\"p-0 pb-1\"\n                (click)=\"openPresetColumnsModal(preset)\"\n              >\n                <span class=\"d-icon-plus_circle\"></span>\n\n                Edit grid columns\n              </adapt-button>\n\n              <div class=\"mb-3\">\n                <adapt-tag type=\"active\" *ngFor=\"let tag of preset.tags.items\">{{ tag }}</adapt-tag>\n\n                <button\n                  *ngIf=\"preset.tags.restCount\"\n                  class=\"btn-link rx-button-unstyled ml-1\"\n                  type=\"button\"\n                  (click)=\"openPresetColumnsModal(preset)\"\n                >\n                  +{{ preset.tags.restCount }} more\n                </button>\n              </div>\n\n              <rx-record-grid-sort-editor-control\n                class=\"d-block w-50\"\n                [options]=\"preset.sortEditorControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.sortModel\"\n                (ngModelChange)=\"onSortChange($event, preset)\"\n              ></rx-record-grid-sort-editor-control>\n\n              <rx-record-grid-filter-select-control\n                [options]=\"preset.filterSelectControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.filters\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-record-grid-filter-select-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { cloneDeep, isEqual, noop } from 'lodash';\nimport { IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase, ISelectFormControlOptions, ISelectOption } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport { OpenViewActionModalSize, RecordGridNamedFilterOptionKey, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { RecordGridDesignModel } from '../../record-grid-design.model';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridEditViewPresetsModalComponent } from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetColumnData,\n  IRecordGridViewPresetsWidgetOptions\n} from './record-grid-view-presets-widget.types';\nimport {\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult\n} from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.types';\nimport { RxRecordGridDesignUtilsService } from '../../record-grid-design-utils.service';\nimport { IViewPresetSelectorDesignProperties } from '../../../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IRecordGridFilterDescriptorModel } from '../record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetProperties } from '../../../common/types/record-grid.types';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\n\n@Component({\n  selector: 'rx-record-grid-view-presets-widget',\n  templateUrl: './record-grid-view-presets-widget.component.html',\n  styleUrls: ['./record-grid-view-presets-widget.component.scss']\n})\nexport class RecordGridViewPresetsWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel>\n  implements OnInit, OnChanges, OnDestroy, IFormWidgetComponent\n{\n  @Input()\n  options: IRecordGridViewPresetsWidgetOptions;\n\n  currentPresetSelectorGuid: string;\n  currentPresetSelectorGuid$ = new ReplaySubject<string>(1);\n  isDisabled: boolean;\n\n  presetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.viewDesignerFacade.getComponentsByType<IViewPresetSelectorDesignProperties>(\n      RxViewComponentType.ViewPresetSelector\n    );\n\n  presetSelectorOptions$: Observable<ISelectOption[]> = this.presetSelectors$.pipe(\n    map((items) => items.map(({ guid, data }) => ({ id: guid, name: data.name })))\n  );\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.currentPresetSelectorGuid$.pipe(\n    tap((guid) => this.updateViewPresetSelectorProp(guid)),\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n    takeUntil(this.destroyed$)\n  );\n\n  viewPresetSelectorProp$ = this.designerItemModel.sandbox.getComponentPropertyValue('viewPresetSelector');\n\n  gridColumnGuids$ = this.designerItemModel.sandbox.getChildComponentGuids(\n    (component) => component.type === RX_RECORD_GRID.components.column\n  );\n\n  selectOptions: ISelectFormControlOptions = {\n    options: [],\n    emptyOption: true,\n    label: 'View preset selector',\n    beforeValueChange: (oldValue, newValue) => {\n      if (oldValue && oldValue !== newValue) {\n        return this.rxModalService.confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message: 'All record grid view presets will be cleared. Do you want to continue?'\n        });\n      } else {\n        return Promise.resolve(true);\n      }\n    }\n  };\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxJsonParserService: RxJsonParserService\n  ) {\n    super(injector);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options.currentValue.recordDefinition?.name !== changes.options.previousValue.recordDefinition?.name) {\n      this.currentPresetSelectorGuid = null;\n      this.currentPresetSelectorGuid$.next(null);\n    }\n  }\n\n  ngOnInit(): void {\n    this.presetSelectorOptions$.pipe(takeUntil(this.destroyed$)).subscribe((options) => {\n      this.selectOptions.options = options;\n    });\n\n    // select current preset selector item\n    this.viewPresetSelectorProp$\n      .pipe(\n        first(),\n        map((val) => this.designerItemModel.extractViewPresetSelectorGuid(val)),\n        withLatestFrom(this.presetSelectorOptions$),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([guid, presetSelectorOptions]) => {\n        const selectedOption = presetSelectorOptions.find((item) => item.id === guid)?.id;\n\n        if (selectedOption) {\n          this.currentPresetSelectorGuid = selectedOption;\n          this.currentPresetSelectorGuid$.next(this.currentPresetSelectorGuid);\n        }\n      });\n\n    this.gridColumnGuids$\n      .pipe(\n        filter(() => !!this.currentPresetSelectorGuid),\n        switchMap((guids) =>\n          combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.designerItemModel.sandbox.getComponentPropertyValue('sortable', guid),\n                this.designerItemModel.sandbox.getComponentPropertyValue('filterable', guid),\n                this.viewDesignerFacade.getChildComponents(\n                  guid,\n                  (c) => c.type === RX_RECORD_GRID.components.filterPreset\n                )\n              ])\n            )\n          )\n        ),\n        distinctUntilChanged(isEqual),\n        // in case of removing and adding columns at a same time from columns modal\n        // stream updated several times with according to adding/removing columns\n        // we need it to be stabilized to proceed with column presets updating\n        debounceTime(100),\n        switchMap(() => this.designerItemModel.columns$.pipe(first())),\n        withLatestFrom(this.designerItemModel.childComponentsTree$.pipe(map((components) => cloneDeep(components)))),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([gridColumns, allComponents]) => {\n        this.updateColumnPresets(allComponents, gridColumns);\n      });\n  }\n\n  private updateColumnPresets(\n    allComponents: IViewComponentDesignData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const viewPresetsPayload = allComponents\n      .filter((component) => component.type === RX_RECORD_GRID.components.viewPreset)\n      .map((component) => {\n        const presetColumnComponents: IRecordGridViewPresetColumnData[] = component.children.filter(\n          (item) => item.type === RX_RECORD_GRID.components.columnViewPreset\n        );\n\n        const presetFilterComponents = this.getPresetFilterComponentsForColumns(\n          component as IViewComponentDesignData<IGridViewPresetProperties>,\n          gridColumns\n        );\n\n        const updatedPresetColumns = gridColumns\n          .map((gridColumn) => {\n            const existingPresetColumn = presetColumnComponents.find(\n              (presetColumn) => presetColumn.data.fieldId === gridColumn.fieldId\n            );\n\n            if (existingPresetColumn) {\n              if (!gridColumn.sortable) {\n                existingPresetColumn.data.sortable = null;\n              }\n\n              return existingPresetColumn;\n            } else {\n              const columnPresetPayload = this.rxRecordGridDesignUtilsService.getColumnPresetPayload(gridColumn);\n              columnPresetPayload.data.visible = false;\n              columnPresetPayload.data.index = null;\n              columnPresetPayload.data.width = null;\n\n              return columnPresetPayload;\n            }\n          })\n          .map((presetCol, i, array) => {\n            if (presetCol.data.index === null) {\n              presetCol.data.index = Math.max(...array.map((col) => col.data.index)) + 1;\n            }\n\n            return presetCol;\n          });\n\n        (component as IViewComponentDesignSetPayload).children = [...updatedPresetColumns, ...presetFilterComponents];\n\n        return component;\n      });\n\n    this.designerItemModel.sandbox.setChildrenByType(viewPresetsPayload, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getPresetFilterComponentsForColumns(\n    presetComponent: IViewComponentDesignData<IGridViewPresetProperties>,\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload[] {\n    const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n    const presetFilterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[] =\n      presetComponent.children.filter((item) => item.type !== RX_RECORD_GRID.components.columnViewPreset);\n\n    // removing filter presets for removed columns or ones that have removed named filter option reference\n    const filteredPresetFilterComponents = presetFilterComponents.reduce((result, presetFilterComponent) => {\n      // checking if column still can be used for filtering\n      if (gridColumnsIds.includes(presetFilterComponent.data.fieldId)) {\n        const namedFilterOptions =\n          gridColumns.find((col) => col.fieldId === presetFilterComponent.data.fieldId)?.namedFilterOptions ?? [];\n        const namedFilterOptionsGuids = namedFilterOptions.map((option) => option.guid);\n\n        let presetFiltersObj = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData([\n          presetFilterComponent\n        ]);\n\n        presetFiltersObj = this.deserializeNamedOptions(presetFiltersObj);\n        const namedFilterOptionGuid = presetFiltersObj[0].value?.[RecordGridNamedFilterOptionKey];\n\n        // if named filter option selected then check if it's still available\n        if (namedFilterOptionGuid) {\n          if (namedFilterOptionsGuids.includes(namedFilterOptionGuid)) {\n            result.push(presetFilterComponent);\n          }\n        } else {\n          result.push(presetFilterComponent);\n        }\n      }\n\n      return result;\n    }, []);\n\n    if (presetFilterComponents.length) {\n      if (filteredPresetFilterComponents.length < presetFilterComponents.length) {\n        const presetFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filteredPresetFilterComponents);\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          presetComponent.data.filters,\n          presetFilters\n        );\n\n        // updating filters JSON after column remove\n        presetComponent.data.filters = newFilterData\n          ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), presetFilters)\n          : null;\n      }\n\n      return filteredPresetFilterComponents;\n    }\n\n    return presetFilterComponents;\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n\n  openEditor(preset?: IPresetItem) {\n    combineLatest([\n      this.designerItemModel.gridViewPresets$,\n      this.selectedPresetsList$,\n      this.designerItemModel.columns$,\n      this.designerItemModel.recordDefinition$\n    ])\n      .pipe(first(), takeUntil(this.destroyed$))\n      .subscribe(([viewPresets, presetsList, columns, recordDefinition]) => {\n        this.rxModalService\n          .openModal({\n            title: 'Edit view presets',\n            content: RecordGridEditViewPresetsModalComponent,\n            size: OpenViewActionModalSize.Large as any,\n            data: {\n              viewPresets,\n              presetsList,\n              gridColumns: columns,\n              recordDefinition,\n              activePreset: preset?.guid,\n              isReadOnly: this.isDisabled\n            } as IRecordGridEditViewPresetsModalOptions\n          })\n          .then((result: IRecordGridEditViewPresetsModalResult) => {\n            this.onPresetModalClose(result);\n          })\n          .catch(noop);\n      });\n  }\n\n  trackByGuid(index: number, item: IPresetItem): string {\n    return item.name;\n  }\n\n  private onPresetModalClose(result: IRecordGridEditViewPresetsModalResult): void {\n    if (result && result.presets) {\n      this.designerItemModel.childComponentsTree$\n        .pipe(\n          first(),\n          map((components) => cloneDeep(components) as IViewComponentDesignSetPayload[]),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe((components) => {\n          result.presets.forEach((preset) => {\n            const presetComponent = components.find(\n              (c) => c.type === RX_RECORD_GRID.components.viewPreset && c.data.viewPresetGuid === preset.guid\n            );\n\n            if (presetComponent) {\n              const columnPayloads = preset.presetColumns.map((column) =>\n                this.rxRecordGridDesignUtilsService.getColumnPresetPayload(column.data)\n              );\n\n              const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                preset.filters.basicFilters\n              );\n\n              presetComponent.data = {\n                viewPresetGuid: preset.guid,\n                filters: preset.filters.filtersJson\n              };\n\n              presetComponent.children = [...columnPayloads, ...filterPayloads];\n            }\n          });\n\n          this.designerItemModel.sandbox.setChildren(components);\n        });\n    }\n  }\n\n  private updateViewPresetSelectorProp(guid: string): void {\n    this.designerItemModel.sandbox.updateComponentProperties({\n      viewPresetSelector: guid ? `\\${view.components.${guid}.api}` : null\n    });\n  }\n}\n","<rx-select-form-control\n  class=\"d-block mb-3\"\n  rx-id=\"preset-selector\"\n  [options]=\"selectOptions\"\n  [(ngModel)]=\"currentPresetSelectorGuid\"\n  (ngModelChange)=\"currentPresetSelectorGuid$.next($event)\"\n  [disabled]=\"isDisabled\"\n>\n</rx-select-form-control>\n\n<div [hidden]=\"!options.recordDefinition\" *ngIf=\"selectedPresetsList$ | async as presetsList\">\n  <adapt-button\n    *ngIf=\"presetsList.length\"\n    btn-type=\"tertiary\"\n    rx-id=\"edit-view-presets-button\"\n    class=\"p-0 pb-1\"\n    (click)=\"openEditor()\"\n  >\n    <span class=\"d-icon-left-plus_circle\"></span>\n    Edit view presets\n  </adapt-button>\n\n  <span rx-id=\"no-presets\" *ngIf=\"currentPresetSelectorGuid && presetsList.length === 0\" class=\"text-tertiary\">\n    No presets added.\n  </span>\n\n  <div rx-id=\"presets-list\">\n    <div\n      class=\"border mb-1 pr-2 d-flex justify-content-between text-break\"\n      *ngFor=\"let preset of presetsList; let index = index; trackBy: trackByGuid\"\n    >\n      <strong class=\"preset-name\" rx-id=\"preset-name\" [title]=\"preset.name\">\n        {{ preset.name }}\n      </strong>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(preset)\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { StepperWithUnitsFormControlModule } from '@helix/platform/shared/components';\nimport { RecordGridViewPresetColumnsModalComponent } from './record-grid-view-preset-columns-modal.component';\nimport {\n  AdaptAccordionModule,\n  AdaptButtonModule,\n  AdaptRxCheckboxModule,\n  AdaptRxTextfieldModule\n} from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RecordGridViewPresetColumnsModalComponent],\n  exports: [RecordGridViewPresetColumnsModalComponent],\n  imports: [\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptRxCheckboxModule,\n    AdaptRxTextfieldModule,\n    CommonModule,\n    DragDropModule,\n    FormsModule,\n    StepperWithUnitsFormControlModule,\n    TranslateModule\n  ]\n})\nexport class RecordGridViewPresetColumnsModalModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptAccordionModule, AdaptButtonModule, AdaptTagModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridEditViewPresetsModalComponent } from './record-grid-edit-view-presets-modal.component';\nimport { RecordGridViewPresetColumnsModalModule } from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.module';\nimport { RecordGridSortEditorControlModule } from '../../record-grid-sort-editor-control/record-grid-sort-editor-control.module';\nimport { RecordGridFilterSelectControlModule } from '../../record-grid-filter-select-control/record-grid-filter-select-control.module';\n\n@NgModule({\n  declarations: [RecordGridEditViewPresetsModalComponent],\n  exports: [RecordGridEditViewPresetsModalComponent],\n  imports: [\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptTagModule,\n    CommonModule,\n    FormsModule,\n    RecordGridFilterSelectControlModule,\n    RecordGridSortEditorControlModule,\n    RecordGridViewPresetColumnsModalModule,\n    TranslateModule\n  ]\n})\nexport class RecordGridEditViewPresetsModalModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RecordGridViewPresetsWidgetComponent } from './record-grid-view-presets-widget.component';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { RecordGridEditViewPresetsModalModule } from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.module';\nimport { SelectFormControlModule } from '@helix/platform/shared/components';\n\n@NgModule({\n  declarations: [RecordGridViewPresetsWidgetComponent],\n  exports: [RecordGridViewPresetsWidgetComponent],\n  imports: [CommonModule, AdaptButtonModule, FormsModule, RecordGridEditViewPresetsModalModule, SelectFormControlModule]\n})\nexport class RecordGridViewPresetsWidgetModule {}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewDefinitionParserService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport { find, forEach, pull } from 'lodash';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  adaptDefinition(elementDefinition: IContainerViewComponentDefinition): void {\n    const layout: IViewLayout = this.rxJsonParserService.tryParseJson(elementDefinition.layout);\n    const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n    elementDefinition.propertiesByName.enableFilterPresets =\n      elementDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n    if (!rowActionsOutlet) {\n      layout.outlets.push(RxViewLayout.getOutlet(RX_RECORD_GRID.rowActionsOutletName));\n    } else {\n      // move row actions to the end to make sure they are in the same order as in layout outlet\n      forEach(rowActionsOutlet.columns[0]?.children, (rowActionGuid) => {\n        const rowAction = find(elementDefinition.componentDefinitions, { guid: rowActionGuid });\n\n        pull(elementDefinition.componentDefinitions, rowAction).push(rowAction);\n      });\n    }\n\n    elementDefinition.layout = JSON.stringify(layout);\n\n    Object.assign(elementDefinition.propertiesByName, {\n      expandable: elementDefinition.propertiesByName.expandable ?? false,\n      showDataForAllLocales: elementDefinition.propertiesByName.showDataForAllLocales ?? false,\n      requiredFilters:\n        elementDefinition.propertiesByName.requiredFilters ??\n        (elementDefinition.propertiesByName.requireFiltering === 'true' ? 1 : 0)\n    });\n\n    delete elementDefinition.propertiesByName.requireFiltering;\n\n    this.rxViewDefinitionParserService\n      .getComponents(elementDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.type === RX_RECORD_GRID.components.column) {\n          Object.assign(componentDefinition.propertiesByName, {\n            wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n            typeaheadKeystrokeCount: Number(\n              componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            )\n          });\n        }\n      });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxRecordGridDesignAdapterService } from './record-grid-design-adapter.service';\nimport { RecordGridDesignComponent } from './record-grid-design.component';\nimport { RecordGridSortEditorControlModule } from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.module';\nimport { RecordGridColumnEditorControlComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-control.component';\nimport {\n  AdaptAccordionModule,\n  AdaptAdvancedFilteringModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule,\n  AdaptIconModule,\n  AdaptPopoverModule,\n  AdaptRxCheckboxModule,\n  AdaptRxLabelModule,\n  AdaptRxRadiobuttonModule,\n  AdaptRxSearchModule,\n  AdaptRxSelectModule,\n  AdaptRxSwitchModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule,\n  AdaptTreeModule\n} from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldModule } from '@bmc-ux/obsolete';\nimport { RecordGridColumnEditorModalComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component';\nimport {\n  ExpressionEditorModule,\n  ExpressionFormControlModule,\n  GroupButtonFormControlModule,\n  IconPickerFormControlModule,\n  RxDefinitionPickerModule,\n  SelectFormControlModule,\n  StepperWithUnitsFormControlModule\n} from '@helix/platform/shared/components';\nimport { ColumnEditorAlignmentComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component';\nimport { RecordGridFilterPresetEditorControlComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component';\nimport { RecordGridFilterPresetEditorModalComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component';\nimport { RxDirectivesModule } from '@helix/platform/ui-kit';\nimport { RecordGridCommonModule } from '../common/record-grid-common.module';\nimport { ActionListControlModule, ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { AdaptTableModule } from '@bmc-ux/adapt-table';\nimport { RxDefinitionAdapterRegistryService, RxDefinitionModule } from '@helix/platform/shared/api';\nimport { RxRecordGridRowActionEditorWidgetComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component';\nimport { RecordGridRowActionEditorModalComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RecordGridCellDisplayPropertiesComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component';\nimport { RecordGridCellDisplayPropertiesEditorComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component';\nimport { RxNoWhitespaceValidatorModule, RxUniqueValidatorModule } from '@helix/platform/utils';\nimport { RecordGridNamedFilterOptionsComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component';\nimport { RecordGridNamedFilterOptionsEditorModalComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\nimport { RecordGridViewPresetsWidgetModule } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.module';\nimport { RecordGridFilterSelectControlModule } from './editors/record-grid-filter-select-control';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RecordGridSortEditorControlModule,\n    AdaptButtonModule,\n    AdaptTooltipModule,\n    AdaptAccordionModule,\n    AdaptTextFieldModule,\n    AdaptRxSearchModule,\n    AdaptTreeModule,\n    AdaptRxCheckboxModule,\n    AdaptRxRadiobuttonModule,\n    ActionListControlModule,\n    GroupButtonFormControlModule,\n    DragDropModule,\n    ExpressionEditorModule,\n    AdaptAdvancedFilteringModule,\n    AdaptRxTextfieldModule,\n    RxDirectivesModule,\n    AdaptRxLabelModule,\n    RecordGridCommonModule,\n    ViewDesignerCanvasModule,\n    AdaptTableModule,\n    AdaptEmptyStateModule,\n    RxDefinitionModule,\n    AdaptRxSelectModule,\n    RxDefinitionPickerModule,\n    ExpressionFormControlModule,\n    AdaptIconModule,\n    TranslateModule,\n    SelectFormControlModule,\n    RxUniqueValidatorModule,\n    AdaptRxSwitchModule,\n    IconPickerFormControlModule,\n    AdaptPopoverModule,\n    RxAdvancedFilteringFieldsProviderModule,\n    RecordGridViewPresetsWidgetModule,\n    RecordGridFilterSelectControlModule,\n    StepperWithUnitsFormControlModule,\n    RxNoWhitespaceValidatorModule\n  ],\n  declarations: [\n    RecordGridDesignComponent,\n    RecordGridColumnEditorControlComponent,\n    RecordGridColumnEditorModalComponent,\n    ColumnEditorAlignmentComponent,\n    RecordGridFilterPresetEditorControlComponent,\n    RecordGridFilterPresetEditorModalComponent,\n    RxRecordGridRowActionEditorWidgetComponent,\n    RecordGridRowActionEditorModalComponent,\n    RecordGridCellDisplayPropertiesComponent,\n    RecordGridCellDisplayPropertiesEditorComponent,\n    RecordGridNamedFilterOptionsComponent,\n    RecordGridNamedFilterOptionsEditorModalComponent\n  ],\n  entryComponents: [\n    RecordGridDesignComponent,\n    RecordGridColumnEditorControlComponent,\n    RecordGridColumnEditorModalComponent,\n    RecordGridFilterPresetEditorControlComponent,\n    RecordGridFilterPresetEditorModalComponent\n  ]\n})\nexport class RecordGridDesignModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxRecordGridDesignAdapterService: RxRecordGridDesignAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RX_RECORD_GRID.type,\n      this.rxRecordGridDesignAdapterService\n    );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActiveModalRef, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-filter-by-card-selection',\n  templateUrl: './filter-by-card-selection-dialog.component.html'\n})\nexport class RxFilterByCardSelectionDialogComponent {\n  options: RxSelectOption[];\n  field: RxSelectOption;\n\n  alertConfig = {\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.info.message'\n    ),\n    type: 'section',\n    dismissible: false,\n    variant: 'info',\n    icon: true\n  };\n\n  constructor(public context: ActiveModalRef, private translateService: TranslateService) {\n    this.options = this.context.getData().filterableFields;\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  apply(): void {\n    this.context.close(this.field[0].id);\n  }\n}\n","<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<div class=\"modal-body pt-0\">\n  <adapt-rx-select\n    [label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.field.label' | translate\n    \"\n    [options]=\"options\"\n    [(ngModel)]=\"field\"\n    [required]=\"true\"\n    [optionFormatter]=\"optionFormatter\"\n    [popupClass]=\"'rx-filter-by-card-selection-field-dropdown'\"\n  >\n  </adapt-rx-select>\n</div>\n\n<div class=\"modal-footer\">\n  <button adapt-button type=\"button\" btn-type=\"primary\" rx-id=\"apply-button\" [disabled]=\"!field\" (click)=\"apply()\">\n    {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"context.dismiss()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ColumnConfig, ResizeMode } from '@bmc-ux/adapt-table';\nimport { SelectedAdvancedFilter, ValueOrFunc1 } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinitionsById } from '@helix/platform/record/api';\nimport { RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  assign,\n  cloneDeep,\n  endsWith,\n  filter,\n  find,\n  flow,\n  has,\n  isEmpty,\n  isEqual,\n  isNull,\n  isString,\n  map as _map,\n  omit,\n  reduce,\n  remove,\n  some,\n  sortBy\n} from 'lodash';\nimport { SortMeta } from 'primeng/api';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IAdaptTableConfig } from '../types/adapt-table-config.interface';\nimport { IRecordGridColumnUserPreferences, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRecordGridFilterPreset } from '../types/record-grid-filter-preset.interface';\nimport {\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterData } from '@helix/platform/view/api';\nimport { IRecordGridState } from '../types/record-grid-state.interface';\nimport {\n  IRecordGridSharedViewPreset,\n  IRecordGridUserPreferences,\n  IRecordGridViewPreset\n} from '../types/record-grid-user-preferences.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { IGridViewColumnProperties, IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetConfigData } from '../types/record-grid-config.interface';\n\n@Injectable()\nexport class RxRecordGridUserPreferencesService {\n  private initialPreferences: IRecordGridUserPreferences = {\n    columns: [],\n    filterPresets: [],\n    filters: null,\n    visibleCardFieldIds: [],\n    appliedExternalFilterPresetGuid: null,\n    viewPresets: {}\n  };\n\n  private preferences = { ...this.initialPreferences };\n  private selectedViewPresetGuid: string;\n\n  constructor(\n    private recordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  saveUserPreferences(guid: string, adaptTableConfig: IAdaptTableConfig, state: IRecordGridState): void {\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.preferences.visibleCardFieldIds = this.getVisibleCardFieldIds(adaptTableConfig);\n    } else {\n      this.preferences.columns = this.getColumnsPreferences(adaptTableConfig);\n    }\n\n    this.preferences.filterPresets = state.advancedFiltering.savedFilters\n      .filter((savedFilter) => !savedFilter.isCreatedByOtherUsers)\n      .map((savedFilter) =>\n        this.getPreferencesFilterPresets(\n          savedFilter,\n          state.recordDefinition.fieldDefinitionsById,\n          state.advancedFiltering.recordGridFilterConfigs\n        )\n      );\n\n    const currentFilters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      state.advancedFiltering.selectedFilters,\n      state.recordDefinition.fieldDefinitionsById,\n      state.advancedFiltering.recordGridFilterConfigs\n    );\n\n    this.preferences.filters = currentFilters;\n\n    const appliedSharedFilterPreset = state.advancedFiltering.appliedSharedFilterPreset;\n\n    this.preferences.appliedExternalFilterPresetGuid = appliedSharedFilterPreset && appliedSharedFilterPreset.id;\n\n    if (this.selectedViewPresetGuid) {\n      const selectedPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      const newPreset: IRecordGridViewPreset = {\n        viewPresetGuid: this.selectedViewPresetGuid,\n        columns: this.getColumnsPreferences(adaptTableConfig),\n        filters: isEmpty(currentFilters) ? null : currentFilters\n      };\n\n      if (isEqual(selectedPreset.initial, newPreset)) {\n        this.discardViewPresetChanges(this.selectedViewPresetGuid);\n      } else {\n        selectedPreset.edited = newPreset;\n      }\n    }\n\n    this.save(guid, this.preferences);\n  }\n\n  get(guid: string): Observable<IRecordGridUserPreferences> {\n    this.preferences = { ...this.initialPreferences };\n\n    return this.rxUserPreferencesService\n      .getUiComponentPreferences<IRecordGridUserPreferences>(guid)\n      .pipe(map((preferences) => assign(this.preferences, preferences)));\n  }\n\n  getAppliedSharedFilterPresetGuid(): string {\n    return this.preferences.appliedExternalFilterPresetGuid;\n  }\n\n  applyUserPreferencesForColumns(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    gridGuid: string\n  ): void {\n    const isColumnPreferencesUpdated = this.reviseColumnPreferences(this.preferences.columns, adaptTableConfig);\n\n    if (isColumnPreferencesUpdated) {\n      this.save(gridGuid, this.preferences);\n    }\n\n    let columnSortMeta = this.getColumnSortMeta(this.preferences.columns);\n\n    this.sortColumnsConfigs(adaptTableConfig.columns);\n\n    this.setColumnsWidths(adaptTableConfig.columns, this.preferences.columns, adaptTableConfig.columnResizeMode);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.field === sortMeta.field)\n    );\n\n    if (this.preferences.columns.length) {\n      adaptTableConfig.multiSortMeta = columnSortMeta;\n    }\n\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.setCardFieldsVisibility(adaptTableConfig.columns);\n    } else {\n      this.setColumnsVisibility(adaptTableConfig.columns, columnsWithMetadata);\n    }\n  }\n\n  private reviseColumnPreferences(\n    columnPreferences: IRecordGridColumnUserPreferences[],\n    { columns }: IAdaptTableConfig\n  ): boolean {\n    let isColumnPreferencesChanged = false;\n\n    if (columnPreferences.length) {\n      const existingAdaptColumnIds = _map(columns, 'field');\n      const removedReferences = remove(columnPreferences, ({ fieldId }) => !existingAdaptColumnIds.includes(fieldId));\n      let isSortingPreferencesChanged = removedReferences.some(({ sort }) => Boolean(sort));\n\n      const preferencesSize = columnPreferences.length;\n      const sortableColumnPreferences = [];\n\n      columns.forEach((tableColumn, index) => {\n        const columnPreference = find(columnPreferences, { fieldId: tableColumn.field });\n\n        if (columnPreference) {\n          // Nullish width can be saved to preferences for column without width customization or without resizing.\n          // Non-empty value appearing means the width is customized after previous preferences saving.\n          columnPreference.width ??= tableColumn.width;\n\n          if (tableColumn.sortable) {\n            sortableColumnPreferences.push(columnPreference);\n          } else if (columnPreference.sort) {\n            isSortingPreferencesChanged = true;\n          }\n        } else {\n          columnPreferences.splice(index, 0, {\n            fieldId: tableColumn.field,\n            index: index,\n            visible: !tableColumn.hidden,\n            width: tableColumn.width\n          });\n        }\n      });\n\n      if (isSortingPreferencesChanged) {\n        const sortMetaForSortableColumns = this.getColumnSortMeta(sortableColumnPreferences);\n\n        this.updateColumnSortPreferences(columnPreferences, sortMetaForSortableColumns);\n      }\n\n      isColumnPreferencesChanged =\n        !isEmpty(removedReferences) || preferencesSize < columnPreferences.length || isSortingPreferencesChanged;\n    }\n\n    return isColumnPreferencesChanged;\n  }\n\n  applyUserPreferences(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    state: IRecordGridState,\n    sharedFilterPresets?: IRxRecordGridSharedFilterPreset[]\n  ): Observable<any> {\n    if (!state.viewPresetSelector) {\n      this.applyUserPreferencesForColumns(adaptTableConfig, columnsWithMetadata, state.guid);\n    }\n\n    let observable$: Observable<any>;\n\n    if (state?.enableFiltering) {\n      let isFilterPresetDataChanged = false;\n      // Remove filter presets that do not have any filters left.\n      // These filters could have been removed as a result of removing a column,\n      // used by the filter, from the grid.\n      this.preferences.filterPresets.forEach((filterPreset) => {\n        const prevFilterDataLength = filterPreset.filterData?.and?.length;\n\n        filterPreset.filterData = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n          filterPreset.filterData,\n          columnsWithMetadata.filter((column) => column.filterable)\n        );\n\n        if (prevFilterDataLength !== filterPreset.filterData?.and?.length) {\n          isFilterPresetDataChanged = true;\n        }\n      });\n\n      this.preferences.filterPresets = this.preferences.filterPresets.filter(\n        (filterPreset) => !isEmpty(filterPreset.filterData)\n      );\n\n      const prevFilters = cloneDeep(this.preferences.filters?.and);\n\n      this.preferences.filters = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n        this.preferences.filters,\n        columnsWithMetadata.filter((column) => column.filterable)\n      );\n\n      if (\n        isFilterPresetDataChanged ||\n        this.preferences.filters?.and?.length !== prevFilters?.length ||\n        !isEqual(prevFilters, this.preferences.filters?.and)\n      ) {\n        this.save(state.guid, this.preferences);\n      }\n\n      state.advancedFiltering.savedFilters = this.getAdvancedFilterPresets(this.preferences.filterPresets, false);\n\n      state.predefinedFilterPresets = state.predefinedFilterPresets.filter(\n        (filterPreset) => !isNull(filterPreset.filters)\n      );\n\n      const predefinedFilterPresets: IRecordGridFilterPreset[] = state.predefinedFilterPresets\n        .map(\n          (predefinedFilterPreset): IRecordGridFilterPreset => ({\n            title: predefinedFilterPreset.title,\n            guid: predefinedFilterPreset.guid,\n            filterData: this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n              predefinedFilterPreset.filters,\n              this.rxRecordGridFilterService.deserializeNamedOptions(predefinedFilterPreset.recordGridFilters ?? [])\n            )\n          })\n        )\n        .filter((preset) => preset.filterData);\n\n      const builtInPresets = this.getAdvancedFilterPresets(predefinedFilterPresets, true);\n\n      state.advancedFiltering.savedFilters.push(...builtInPresets);\n\n      if (sharedFilterPresets) {\n        if (this.getAppliedSharedFilterPresetGuid()) {\n          const appliedSharedFilterPreset = find(sharedFilterPresets, { id: this.getAppliedSharedFilterPresetGuid() });\n\n          state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = appliedSharedFilterPreset;\n        }\n\n        state.advancedFiltering.savedFilters.push(...sharedFilterPresets);\n      }\n\n      const defaultBuiltInFilterPreset = isString(state.defaultFilterPreset)\n        ? find(builtInPresets, (builtInPreset) => builtInPreset.id === state.defaultFilterPreset)\n        : state.defaultFilterPreset;\n\n      const defaultSharedFilterPreset = find(sharedFilterPresets, (sharedFilterPreset) => sharedFilterPreset.isDefault);\n\n      if (!isEmpty(this.preferences.filters)) {\n        observable$ = this.rxRecordGridFilterService\n          .getAdvancedFilterData(\n            this.preferences.filters,\n            state.recordDefinition.fieldDefinitionsById,\n            state.advancedFiltering.recordGridFilterConfigs,\n            state.recordDefinition,\n            state.advancedFiltering.filterOptions,\n            state.associationDescriptors\n          )\n          .pipe(\n            tap((selectedAdvancedFilters) => {\n              // Remove named filter options that do not have any filters left.\n              // These filters could have been removed as a result of removing named filter option,\n              // used by the filter, from the grid.\n              const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n                selectedAdvancedFilters,\n                state.namedFilterOptions\n              );\n\n              state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                newSelectedAdvancedFilters,\n                adaptTableConfig.columns.filter((column) => column.filterable)\n              );\n\n              this.preferences.filters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n                state.advancedFiltering.selectedFilters,\n                state.recordDefinition.fieldDefinitionsById,\n                state.advancedFiltering.recordGridFilterConfigs\n              );\n\n              if (state.advancedFiltering.appliedSharedFilterPreset) {\n                this.addExternalPresetToSelectedFilters(state);\n              }\n            })\n          );\n      } else if (\n        this.rxObjectUtilsService.isEmptyObject(this.preferences.filters) &&\n        !state.advancedFiltering.appliedSharedFilterPreset\n      ) {\n        if (defaultSharedFilterPreset && !defaultBuiltInFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      } else if (isNull(this.preferences.filters) && !state.advancedFiltering.appliedSharedFilterPreset) {\n        if (defaultBuiltInFilterPreset) {\n          const defaultBuildInPresetFilterData: IRecordGridFilterData = isString(state.defaultFilterPreset)\n            ? (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filterData\n            : (defaultBuiltInFilterPreset as IRecordGridFilterData);\n\n          observable$ = this.rxRecordGridFilterService\n            .getAdvancedFilterData(\n              defaultBuildInPresetFilterData,\n              state.recordDefinition.fieldDefinitionsById,\n              state.advancedFiltering.recordGridFilterConfigs,\n              state.recordDefinition,\n              state.advancedFiltering.filterOptions,\n              state.associationDescriptors\n            )\n            .pipe(\n              tap((selectedAdvancedFilters) => {\n                state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                  selectedAdvancedFilters,\n                  adaptTableConfig.columns\n                );\n\n                if (isString(state.defaultFilterPreset)) {\n                  (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filters =\n                    state.advancedFiltering.selectedFilters;\n                  state.advancedFiltering.activeSavedFilter =\n                    defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter;\n                }\n              })\n            );\n        } else if (defaultSharedFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      }\n\n      if (state.advancedFiltering.appliedSharedFilterPreset) {\n        this.addExternalPresetToSelectedFilters(state);\n      }\n    }\n\n    return observable$ || of(null);\n  }\n\n  applySharedViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string,\n    viewPresetData: IRecordGridSharedViewPreset\n  ) {\n    if (!this.preferences.viewPresets[viewPresetGuid]) {\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...viewPresetData,\n          viewPresetGuid\n        }\n      };\n    } else {\n      // updating initial and keeping user changes\n      this.preferences.viewPresets[viewPresetGuid].initial = {\n        ...viewPresetData,\n        viewPresetGuid\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  applyViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string\n  ): Observable<any> {\n    const systemViewPreset = gridState.viewPresets.find((preset) => preset.viewPresetGuid === viewPresetGuid);\n\n    if (systemViewPreset && !has(this.preferences.viewPresets, [viewPresetGuid, 'edited'])) {\n      // create/update the initial system view preset preferences\n      const newViewPresetPreferences = this.createSystemViewPresetPreferences(\n        systemViewPreset,\n        gridState.columnsWithMetadata\n      );\n\n      this.preferences.viewPresets[viewPresetGuid] = { initial: newViewPresetPreferences };\n    } else if (!this.preferences.viewPresets[viewPresetGuid] && this.selectedViewPresetGuid) {\n      // save existing view preset preferences as new custom view preset preferences\n      const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...cloneDeep(selectedViewPreset.edited || selectedViewPreset.initial),\n          viewPresetGuid\n        }\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    adaptTableConfig: IAdaptTableConfig,\n    gridState: IRecordGridState\n  ) {\n    const viewPresetPreferences = this.preferences.viewPresets[viewPresetGuid];\n    const presetToApply: IRecordGridViewPreset = viewPresetPreferences?.edited || viewPresetPreferences?.initial;\n    let observable$: Observable<any> = of(null);\n\n    if (presetToApply) {\n      this.selectedViewPresetGuid = presetToApply.viewPresetGuid;\n      this.updateColumnsOrder(adaptTableConfig.columns, presetToApply.columns);\n      this.updateColumnsVisibility(adaptTableConfig.columns, presetToApply.columns);\n      this.setColumnsWidths(adaptTableConfig.columns, presetToApply.columns, adaptTableConfig.columnResizeMode);\n      this.updateGridSorting(presetToApply, adaptTableConfig);\n\n      observable$ = this.rxRecordGridFilterService\n        .getAdvancedFilterData(\n          presetToApply.filters,\n          gridState.recordDefinition.fieldDefinitionsById,\n          gridState.advancedFiltering.recordGridFilterConfigs,\n          gridState.recordDefinition,\n          gridState.advancedFiltering.filterOptions,\n          gridState.associationDescriptors\n        )\n        .pipe(\n          tap((selectedAdvancedFilters) => {\n            const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n              selectedAdvancedFilters,\n              gridState.namedFilterOptions\n            );\n\n            gridState.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n              newSelectedAdvancedFilters,\n              adaptTableConfig.columns.filter((column) => column.filterable)\n            );\n          })\n        );\n    }\n\n    return observable$;\n  }\n\n  isCurrentViewPresetEdited(): boolean {\n    return Boolean(this.preferences.viewPresets[this.selectedViewPresetGuid]?.edited);\n  }\n\n  private addExternalPresetToSelectedFilters(state: IRecordGridState): void {\n    const selectedFilter = cloneDeep(state.advancedFiltering.selectedFilters);\n\n    selectedFilter.push({\n      filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n      value: state.advancedFiltering.appliedSharedFilterPreset.id as unknown as RxRecordGridAdvancedFilterValue\n    });\n\n    state.advancedFiltering.selectedFilters = selectedFilter;\n  }\n\n  private createSystemViewPresetPreferences(\n    sharedViewPreset: IGridViewPresetConfigData,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): IRecordGridViewPreset {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      sharedViewPreset.filters,\n      sharedViewPreset.recordGridFilters\n        ? this.rxRecordGridFilterService.deserializeNamedOptions(sharedViewPreset.recordGridFilters)\n        : []\n    );\n\n    const columns = sharedViewPreset.columnViewPresets\n      .sort((a, b) => a.index - b.index)\n      .map((columnViewPreset: IGridViewColumnProperties, index) => {\n        const width = has(columnViewPreset, 'width')\n          ? columnViewPreset.width\n          : find(columnsWithMetadata, { fieldId: columnViewPreset.fieldId })?.width ?? null;\n\n        const result: IRecordGridColumnUserPreferences = {\n          ...omit(columnViewPreset, 'sortable'),\n          index,\n          width\n        };\n\n        if (columnViewPreset.sortable) {\n          result.sort = {\n            priority: 0,\n            direction: columnViewPreset.sortable.direction\n          };\n        }\n\n        return result;\n      });\n\n    return cloneDeep({\n      columns,\n      filters: recordGridFilterData,\n      viewPresetGuid: sharedViewPreset.viewPresetGuid\n    } as IRecordGridViewPreset);\n  }\n\n  deleteViewPreset(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid];\n  }\n\n  isExistingViewPreset(viewPresetGuid: string): boolean {\n    return has(this.preferences.viewPresets, viewPresetGuid);\n  }\n\n  discardViewPresetChanges(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid]?.edited;\n  }\n\n  private updateGridSorting(presetPreferences: IRecordGridViewPreset, adaptTableConfig: IAdaptTableConfig): void {\n    let columnSortMeta = this.getColumnSortMeta(presetPreferences.columns);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.sortable && tableColumn.field === sortMeta.field)\n    );\n\n    adaptTableConfig.multiSortMeta = columnSortMeta;\n  }\n\n  private getAdvancedFilterPresets(\n    filterPresets: IRecordGridFilterPreset[],\n    isCreatedByOtherUsers: boolean\n  ): IRxRecordGridSavedAdvancedFilter[] {\n    return filterPresets\n      .map((filterPreset): IRxRecordGridSavedAdvancedFilter => {\n        const advancedFilterPreset: IRxRecordGridSavedAdvancedFilter = {\n          id: filterPreset.guid,\n          name: filterPreset.title,\n          filters: null,\n          filterData: filterPreset.filterData,\n          isCreatedByOtherUsers\n        };\n\n        if (filterPreset.appliedSharedFilterPresetGuid) {\n          advancedFilterPreset.appliedSharedFilterPresetGuid = filterPreset.appliedSharedFilterPresetGuid;\n\n          advancedFilterPreset.filters = [\n            {\n              filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n              value: filterPreset.appliedSharedFilterPresetGuid\n            }\n          ];\n        }\n\n        return advancedFilterPreset;\n      })\n      .sort((savedFilter1, savedFilter2) => savedFilter1.name.localeCompare(savedFilter2.name));\n  }\n\n  private getColumnsPreferences({ columns, multiSortMeta }: IAdaptTableConfig): IRecordGridColumnUserPreferences[] {\n    const columnPreferences = columns.map(({ field, hidden, width }, index) => {\n      const column: IRecordGridColumnUserPreferences = {\n        fieldId: field,\n        index,\n        visible: !hidden,\n        width\n      };\n\n      return column;\n    });\n\n    this.updateColumnSortPreferences(columnPreferences, multiSortMeta);\n\n    return columnPreferences;\n  }\n\n  private getPreferencesFilterPresets(\n    savedFilter: IRxRecordGridSavedAdvancedFilter,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs\n  ): IRecordGridFilterPreset {\n    const filterPreset: IRecordGridFilterPreset = {\n      guid: savedFilter.id,\n      title: savedFilter.name,\n      filterData: savedFilter.filters\n        ? this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n            savedFilter.filters,\n            fieldDefinitionsById,\n            recordGridFilterConfigs\n          )\n        : savedFilter.filterData\n    };\n\n    if (savedFilter.appliedSharedFilterPresetGuid) {\n      filterPreset.appliedSharedFilterPresetGuid = savedFilter.appliedSharedFilterPresetGuid;\n    }\n\n    return filterPreset;\n  }\n\n  private getVisibleCardFieldIds({ columns, multiSortMeta }: IAdaptTableConfig): (number | string)[] {\n    this.updateColumnSortPreferences(this.preferences.columns, multiSortMeta);\n\n    return columns.filter((column) => !column.hidden).map((column) => parseInt(column.field, 10) || column.field);\n  }\n\n  private updateColumnSortPreferences(columns: IRecordGridColumnUserPreferences[], sortMeta: SortMeta[]): void {\n    if (sortMeta) {\n      columns.forEach((column) => {\n        delete column.sort;\n      });\n\n      sortMeta.forEach(({ field, order }, index) => {\n        const sortedColumn = columns.find((column) => column.fieldId === field);\n\n        if (sortedColumn) {\n          sortedColumn.sort = {\n            priority: index,\n            direction: this.recordGridConfigUtilsService.getColumnSortDirection(order)\n          };\n        }\n      });\n    }\n  }\n\n  private save(guid: string, preferences: IRecordGridUserPreferences): void {\n    if (guid) {\n      const data = {\n        preferences: JSON.stringify(preferences),\n        componentTypeName: RX_RECORD_GRID.type,\n        version: RX_RECORD_GRID.version,\n        componentId: guid\n      };\n\n      this.rxUserPreferencesService.setUiComponentPreferences(data, guid).subscribe();\n    }\n  }\n\n  private sortColumnsConfigs(gridColumns: ColumnConfig[]): void {\n    this.updateColumnsOrder(gridColumns, this.preferences.columns);\n  }\n\n  private updateColumnsOrder(gridColumns: ColumnConfig[], columnsPreferences: { fieldId: string; index: number }[]) {\n    const columnIndexesMap = reduce(\n      gridColumns,\n      (result: { [field: string]: number }, column, columnIndex) => {\n        const columnSavedPreferences = find(\n          columnsPreferences,\n          (columnPreferences) => columnPreferences.fieldId === column.field\n        );\n\n        if (columnSavedPreferences) {\n          result[column.field] = columnSavedPreferences.index;\n        } else {\n          result[column.field] = columnIndex;\n        }\n\n        return result;\n      },\n      {}\n    );\n\n    gridColumns.sort((column1, column2) => columnIndexesMap[column1.field] - columnIndexesMap[column2.field]);\n  }\n\n  private setColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): void {\n    const columnsPreferences = this.preferences.columns;\n\n    if (isEmpty(columnsPreferences)) {\n      gridColumns.forEach((gridColumn) => {\n        const columnWithMetadata = find(columnsWithMetadata, (column) => column.fieldId === gridColumn.field);\n\n        gridColumn.hidden = columnWithMetadata ? !columnWithMetadata.visible : false;\n      });\n    } else {\n      this.updateColumnsVisibility(gridColumns, columnsPreferences);\n    }\n  }\n\n  private updateColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean }[]\n  ): void {\n    gridColumns.forEach((column) => {\n      const preferences = find(columnsPreferences, (columnPreferences) => columnPreferences.fieldId === column.field);\n\n      if (preferences) {\n        column.hidden = !preferences.visible;\n      }\n    });\n  }\n\n  private setColumnsWidths(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean; width?: string }[],\n    columnResizeMode: ResizeMode\n  ): void {\n    if (columnsPreferences.length) {\n      gridColumns.forEach((column) => {\n        const preferences = find(columnsPreferences, { fieldId: column.field });\n\n        // Default measure unit of native html table is px, but outdated user preferences use %.\n        // Only px units are supported in Expand mode.\n        if (preferences) {\n          const isColumnWidthInPixels = endsWith(preferences.width, 'px');\n\n          if (columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels) {\n            column.width = null;\n            column.minWidth = null;\n          } else {\n            column.width = /[0-9]+$/.test(preferences.width) ? `${preferences.width}%` : preferences.width;\n\n            if (isColumnWidthInPixels && parseInt(column.width) < 45) {\n              column.minWidth = column.width as ValueOrFunc1<`${number}px`>;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private setCardFieldsVisibility(gridColumns: ColumnConfig[]): void {\n    const visibleCardFieldIds = this.preferences.visibleCardFieldIds;\n\n    if (isEmpty(visibleCardFieldIds)) {\n      const defaultVisibleColumnsCount = 5;\n      let visibleColumnsCount = 0;\n\n      gridColumns.forEach((column) => {\n        if (visibleColumnsCount >= defaultVisibleColumnsCount) {\n          column.hidden = true;\n\n          return;\n        }\n\n        if (!column.hidden) {\n          visibleColumnsCount++;\n        }\n      });\n    } else {\n      gridColumns.forEach(\n        (column) => (column.hidden = !some(visibleCardFieldIds, (field) => String(field) === column.field))\n      );\n    }\n  }\n\n  private getColumnSortMeta(columnPreferences: IRecordGridColumnUserPreferences[]): SortMeta[] {\n    return flow(\n      (columns: IRecordGridColumnUserPreferences[]) => filter(columns, 'sort'),\n      (columns) => sortBy(columns, 'sort.priority'),\n      (columns) =>\n        _map(columns, (column) => ({\n          field: column.fieldId,\n          order: this.recordGridConfigUtilsService.getColumnSortOrder(column.sort.direction)\n        }))\n    )(columnPreferences);\n  }\n\n  private getFiltersForSelectedColumns(\n    advancedFilters: SelectedAdvancedFilter[],\n    gridColumns: ColumnConfig[]\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters.filter((advancedFilter) => some(gridColumns, { field: advancedFilter.filterOptionId }));\n  }\n\n  private getFilterForAvailableNamedFilterOptions(\n    advancedFilters: SelectedAdvancedFilter[],\n    availableNamedFilters: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters\n      .map((advancedFilter: SelectedAdvancedFilter) => {\n        advancedFilter.value.namedOptions = !isEmpty(availableNamedFilters)\n          ? advancedFilter.value.namedOptions.filter((namedFilterOptionGuid) =>\n              some(availableNamedFilters[Number(advancedFilter.filterOptionId)], { guid: namedFilterOptionGuid })\n            )\n          : [];\n\n        return advancedFilter;\n      })\n      .filter((advancedFilter) => !RxRecordGridAdvancedFilterValue.isEmptyWithRange(advancedFilter.value));\n  }\n\n  saveViewPreset(viewPresetGuid: string): void {\n    const preset = this.preferences.viewPresets[viewPresetGuid];\n\n    if (preset?.edited) {\n      preset.initial = cloneDeep(preset.edited);\n      delete preset.edited;\n    }\n  }\n\n  getSharedViewPresetData(): IRecordGridSharedViewPreset {\n    const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n    const presetData = selectedViewPreset.edited || selectedViewPreset.initial;\n\n    return {\n      columns: presetData.columns,\n      filters: presetData.filters\n    };\n  }\n}\n","export enum RowSelectionMode {\n  Multiple = 'multiple',\n  Single = 'single'\n}\n","import { Injectable } from '@angular/core';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxError, RxGuidService } from '@helix/platform/utils';\nimport {\n  IViewInputParams,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionType,\n  RX_VIEW_ACTION\n} from '@helix/platform/view/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { defaults, every, has, isUndefined, reduce } from 'lodash';\nimport { forkJoin, Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IColumnSortInfo, IRecordGridColumn, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfiguratorService {\n  private allowedOpenViewActionExpressionsForHrefRegex: RegExp;\n\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private translateService: TranslateService\n  ) {}\n\n  getGridConfig(rxConfiguration: IRecordGridConfig): IRecordGridConfig {\n    const config = defaults(this.rxRecordGridConfigUtilsService.configDeepClone(rxConfiguration), {\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableColumnSelection: true,\n      enableFiltering: true,\n      expandable: false,\n      useExternalFiltering: true,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      filterExpression: null,\n      filters: RX_RECORD_GRID.defaultFilter,\n      filterTagsLimit: 3,\n      recordIdField: RX_RECORD_DEFINITION.coreFieldIds.id.toString(),\n      emptyStateLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      emptyStateWithFilterLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n      styles: ''\n    } as IRecordGridConfig);\n\n    if (!config.recordDefinitionName) {\n      if (!rxConfiguration.getRecordDefinition) {\n        throwError(new RxError('getRecordDefinition function must be defined if recordDefinitionName is not set.'));\n      }\n      if (!rxConfiguration.getData) {\n        throwError(new RxError('getData function must be defined if recordDefinitionName is not set.'));\n      }\n    }\n\n    config.enableFiltering = Boolean(config.enableFiltering);\n    config.cardLayoutWidth = parseFloat(config.cardLayoutWidth as string) || null;\n\n    return config;\n  }\n\n  getColumnsWithMetadata(\n    recordGridGuid: string,\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): Observable<IRecordGridColumnWithMetadata[]> {\n    const columnsClone = this.rxRecordGridConfigUtilsService.columnsDeepClone(columns);\n\n    this.allowedOpenViewActionExpressionsForHrefRegex = new RegExp(\n      `^\\\\$\\\\{view\\\\.components\\\\.${recordGridGuid}\\\\.(clickableRow|recordDefinition)\\\\.|^\\\\$\\\\{view\\\\.inputParams\\\\.`\n    );\n\n    const columnsDefinitions$ = columnsClone.map((column) => {\n      return this.rxRecordGridUtilsService.getFieldDefinition(column.fieldId, recordDefinition).pipe(\n        map((fieldDefinition) => {\n          let filterType = fieldDefinition.resourceType\n            ? this.getFieldDefinitionResourceTypeShortName(fieldDefinition.resourceType)\n            : null;\n\n          if (filterType === RX_RECORD_DEFINITION.dataTypes.attachment.shortName) {\n            filterType = RX_RECORD_DEFINITION.dataTypes.character.shortName;\n          }\n\n          const filterable =\n            this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable);\n\n          const searchable = has(column, 'searchable')\n            ? this.rxRecordGridConfigUtilsService.getBooleanValue(column.searchable)\n            : filterable && this.rxRecordGridUtilsService.isSearchable(fieldDefinition, recordDefinition);\n\n          const columnWithMetadata: IRecordGridColumnWithMetadata = {\n            ...column,\n            clickable: this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable),\n            filterable,\n            sortable:\n              (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable) as IColumnSortInfo | boolean) ||\n              isUndefined(column.sortable),\n            visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n            searchable,\n            fieldDefinition,\n            filterType,\n            clickableWithHref: this.isColumnClickableWithHref(column),\n            title: column.title?.trim(),\n            fallbackTitle: `[${fieldDefinition.name}]`\n          };\n\n          return columnWithMetadata;\n        })\n      );\n    });\n\n    return forkJoin(columnsDefinitions$);\n  }\n\n  getSelectionFieldOptionLabelsByFieldId(\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): IPlainObject {\n    return reduce(\n      columns,\n      (result, column) => {\n        const fieldDefinition = recordDefinition.fieldDefinitionsById[column.fieldId];\n\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n          result[column.fieldId] = fieldDefinition.optionLabelsById;\n        }\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private getFieldDefinitionResourceTypeShortName(resourceType) {\n    return resourceType\n      .split('.')\n      .pop()\n      .replace(/fieldDefinition/i, '');\n  }\n\n  private isColumnClickableWithHref(column: IRecordGridColumn): boolean {\n    let clickableWithHref = false;\n\n    if (this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable)) {\n      clickableWithHref = column.actions.every((action) => {\n        return (\n          (action.name === RX_VIEW_ACTION.viewActionNames.launchUrl ||\n            (action.name === RX_VIEW_ACTION.viewActionNames.openView &&\n              action.presentation.launchBehavior === OpenViewActionLaunchBehavior.SameWindow &&\n              action.presentation.type === OpenViewActionType.FullWidth &&\n              this.canViewParamsBeEvaluatedForHref(action.viewParams))) &&\n          this.canExpressionBeEvaluatedForHref(action.$condition$)\n        );\n      });\n    }\n\n    return clickableWithHref;\n  }\n\n  private canViewParamsBeEvaluatedForHref(viewParams: IViewInputParams): boolean {\n    return every(viewParams, (viewParamValue) => this.canExpressionBeEvaluatedForHref(viewParamValue));\n  }\n\n  private canExpressionBeEvaluatedForHref(expression: string): boolean {\n    return every(expression?.match(/\\$\\{[^{]*\\}/g), (expressionToken) =>\n      this.allowedOpenViewActionExpressionsForHrefRegex.test(expressionToken)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport { IDataPageParams } from '@helix/platform/shared/api';\nimport { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { Observable, of } from 'rxjs';\nimport { IRxRecordGridSharedFilterPreset } from '../../common/types/record-grid-filter.types';\n\n@Injectable()\nexport class RxRecordGridSharedFilterPresetsCacheService {\n  private cache: { [guid: string]: IRxRecordGridSharedFilterPreset[] } = {};\n\n  constructor(private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService) {}\n\n  // return preset from \"Record Grid Filter Presets\"\n  getSharedFilterPresets(recordGridGuid: string): Observable<IRxRecordGridSharedFilterPreset[]> {\n    if (!this.cache[recordGridGuid]) {\n      const params = this.getQueryParams(recordGridGuid);\n\n      return this.rxRecordInstanceDataPageService.post({ params }).pipe(\n        map((sharedFilterPresets) => {\n          return (this.cache[recordGridGuid] = _map(\n            sharedFilterPresets.data,\n            (sharedFilterPreset): IRxRecordGridSharedFilterPreset => ({\n              id: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id],\n              name: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.name],\n              filters: [\n                {\n                  filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n                  value: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id]\n                }\n              ],\n              isCreatedByOtherUsers: true,\n              filterExpression: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression],\n              isDefault: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.isDefault]\n            })\n          ));\n        })\n      );\n    }\n\n    return of(this.cache[recordGridGuid]);\n  }\n\n  private getQueryParams(recordGridGuid: string): IDataPageParams {\n    const queryExpression = `('${RX_RECORD_GRID.sharedFilterPresets.fields.recordGridGuid}'=\"${recordGridGuid}\")`;\n\n    const propertySelection = [\n      RX_RECORD_DEFINITION.coreFieldIds.id,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name,\n      RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression,\n      RX_RECORD_GRID.sharedFilterPresets.fields.isDefault\n    ].join(',');\n\n    const sortBy = [\n      RX_RECORD_GRID.sharedFilterPresets.fields.sortOrder,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name\n    ].join(',');\n\n    return {\n      pageSize: -1,\n      startIndex: 0,\n      queryExpression: queryExpression,\n      propertySelection: propertySelection,\n      shouldIncludeTotalSize: false,\n      recorddefinition: RX_RECORD_GRID.sharedFilterPresets.recordDefinitionName,\n      sortBy\n    };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\n\n@Component({\n  selector: 'rx-page',\n  templateUrl: './page.component.html'\n})\nexport class PageComponent extends BaseViewComponent implements OnInit {\n  constructor() {\n    super();\n  }\n}\n","<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n","import { Component, Input, HostBinding, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { AdaptModalService } from '@bmc-ux/adapt-angular';\nimport { ColumnConfig, AdaptTableComponent, SortOrder } from '@bmc-ux/adapt-table';\nimport { SortMeta } from 'primeng/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { ISortButtonClass } from './sort-button-class.interface';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-card-layout-cell-header',\n  templateUrl: './card-layout-cell-header.component.html',\n  styleUrls: ['card-layout-cell-header.component.scss']\n})\nexport class CardLayoutCellHeaderComponent {\n  @Input() title: string;\n  @Input() columns: ColumnConfig[];\n  @Input() adaptTable: AdaptTableComponent;\n  @Input() openDialog: (config: any) => Promise<any>;\n\n  @Output() sort = new EventEmitter<SortMeta[]>();\n\n  @ViewChild('cardLayoutSortModalTemplate') cardLayoutSortModalTemplate: TemplateRef<any>;\n\n  multiSortMeta: SortMeta[];\n\n  constructor(private modalService: AdaptModalService, private translateService: TranslateService) {}\n\n  onSortMenuItemClick(): void {\n    this.multiSortMeta = this.adaptTable.multiSortMeta || [];\n\n    this.openDialog({\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.title'\n      ),\n      content: this.cardLayoutSortModalTemplate\n    }).catch(() => {});\n  }\n\n  getSortableColumns() {\n    return this.columns\n      .filter((column) => this.adaptTable.isSortableColumn(column))\n      .sort((column1, column2) => column1.header.localeCompare(column2.header));\n  }\n\n  onSortAscClick(column: ColumnConfig): void {\n    this.changeSort(column, SortOrder.Asc);\n  }\n\n  onSortDescClick(column: ColumnConfig): void {\n    this.changeSort(column, SortOrder.Desc);\n  }\n\n  changeSort(column: ColumnConfig, order: SortOrder): void {\n    const sortIndex = this.getColumnSortIndex(column);\n    const sort = this.multiSortMeta[sortIndex];\n\n    if (sort) {\n      if (sort.order === order) {\n        this.multiSortMeta.splice(sortIndex, 1);\n      } else {\n        sort.order = order;\n      }\n    } else {\n      this.multiSortMeta.push({\n        field: column.field,\n        order\n      });\n    }\n  }\n\n  getColumnSort(column: ColumnConfig): SortMeta {\n    return this.multiSortMeta[this.getColumnSortIndex(column)];\n  }\n\n  getColumnSortIndex(column: ColumnConfig): number {\n    return this.multiSortMeta.findIndex((sort) => sort.field === column.field);\n  }\n\n  hasColumnSortOrder(column: ColumnConfig, order: SortOrder): boolean {\n    const sort = this.getColumnSort(column);\n\n    return sort ? sort.order === order : false;\n  }\n\n  getSortAscBtnClass(column: ColumnConfig): IPlainObject {\n    return this.getSortBtnClass(column, SortOrder.Asc);\n  }\n\n  getSortDescBtnClass(column: ColumnConfig): IPlainObject {\n    return this.getSortBtnClass(column, SortOrder.Desc);\n  }\n\n  getSortBtnClass(column: ColumnConfig, order: SortOrder): ISortButtonClass {\n    const isActiveSortDesc = this.hasColumnSortOrder(column, order);\n\n    return { 'btn-success': isActiveSortDesc, 'btn-secondary': !isActiveSortDesc };\n  }\n\n  clearAllSorting(): void {\n    this.multiSortMeta = [];\n  }\n\n  applySorting(): void {\n    this.sort.emit(this.multiSortMeta);\n  }\n\n  getCurrentSortingSummary(): string {\n    const ordersTitles = {\n      [SortOrder.Asc]: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.ascending'\n      ),\n      [SortOrder.Desc]: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.descending'\n      )\n    };\n\n    return this.multiSortMeta\n      .map((sortMeta, index): string => {\n        const column = this.columns.find((c) => c.field === sortMeta.field);\n\n        return `${index + 1}. ${column.header} (${ordersTitles[sortMeta.order]})`;\n      })\n      .join('\\n');\n  }\n}\n","{{ title }}\n\n<div class=\"dropdown header-cell-menu-btn\" adaptDropdown [appendToBody]=\"true\" [restoreFocusAfterClose]=\"true\">\n  <button\n    id=\"card-column-menu-dropdown-toggle\"\n    class=\"d-icon-ellipsis adapt-table-sort-menu__kebab py-2 btn btn-link\"\n    type=\"button\"\n    adaptDropdownToggle\n    [showCaret]=\"false\"\n  ></button>\n\n  <div class=\"dropdown-menu\" aria-labelledby=\"card-column-menu-dropdown-toggle\" adaptDropdownMenu tabindex=\"0\">\n    <button class=\"dropdown-item\" type=\"button\" (click)=\"onSortMenuItemClick()\">\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid.card-column-menu.items.sort-by.label' | translate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #cardLayoutSortModalTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-grid-sort-by-dialog\">\n    <div class=\"rx-card-fields\">\n      <div class=\"rx-card-fields__headers\">\n        <div class=\"rx-card-fields__headers-field\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.column.title' | translate\n          }}\n        </div>\n        <div class=\"rx-card-fields__headers-order\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.order.column.title' | translate\n          }}\n        </div>\n      </div>\n      <div class=\"rx-card-field\" *ngFor=\"let column of getSortableColumns()\">\n        <div class=\"rx-card-field__name\">{{ column.header }}</div>\n        <div class=\"rx-card-field__order\">\n          <div class=\"btn-group\">\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortDescBtnClass(column)\" (click)=\"onSortDescClick(column)\">\n              <span class=\"d-icon-arrow_down\"></span>\n            </button>\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortAscBtnClass(column)\" (click)=\"onSortAscClick(column)\">\n              <span class=\"d-icon-arrow_up\"></span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div>\n      <textarea\n        rows=\"4\"\n        disabled\n        class=\"form-control rx-sort-summary\"\n        title=\"summary\"\n        [value]=\"getCurrentSortingSummary()\"\n        [placeholder]=\"\n          'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.summary.empty.title'\n            | translate\n        \"\n      ></textarea>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"clearAllSorting()\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.clear-all.button.label' | translate\n      }}\n    </button>\n    <button class=\"btn btn-primary btn-sm\" (click)=\"applySorting(); close()\">\n      {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n    </button>\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport {\n  AdaptTableComponent,\n  ColumnConfig,\n  ColumnHeaderTemplateParams,\n  DataCellTemplateParams\n} from '@bmc-ux/adapt-table';\nimport { IRowDataItem } from '@helix/platform/view/api';\nimport { ResizeSensor } from 'css-element-queries';\nimport { take } from 'rxjs/operators';\nimport { IChangedCardLayoutEvent } from './changed-card-layout-event.interface';\n\n@Directive({\n  selector: '[rxCardLayout]'\n})\nexport class GridCardLayoutDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  cardLayoutFieldsHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutValuesHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutFieldsDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input()\n  cardLayoutValuesDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input('cardLayoutGetDataCellClass')\n  recordGridGetDataCellClass: () => string;\n\n  @Input('cardLayoutRecordGridElementRef')\n  recordGridElementRef: ElementRef;\n\n  @Input()\n  set cardLayoutWidth(value: number) {\n    this._cardLayoutWidth = value;\n\n    if (this._hasViewInitialized) {\n      const { offsetWidth } = this.renderer.selectRootElement(\n        this.adaptTable.el.nativeElement,\n        true\n      );\n\n      this.changeTableCardLayout(offsetWidth);\n    }\n  }\n\n  get cardLayoutWidth(): number {\n    return this._cardLayoutWidth;\n  }\n\n  @Output()\n  changedCardLayout = new EventEmitter<IChangedCardLayoutEvent>();\n\n  hasCardLayout = false;\n  resizeSensor: ResizeSensor;\n\n  private _cardLayoutWidth: number;\n  private _hasViewInitialized = false;\n\n  constructor(\n    @Host() private adaptTable: AdaptTableComponent,\n    private ngZone: NgZone,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      const recordGrid = this.renderer.selectRootElement(this.recordGridElementRef.nativeElement, true);\n\n      this.changeTableCardLayout(recordGrid.offsetWidth);\n    });\n\n    this.ngZone.runOutsideAngular(() => {\n      this.resizeSensor = new ResizeSensor(\n        this.recordGridElementRef.nativeElement,\n        (size: { width: number; height: number }) => {\n          this.ngZone.run(() => {\n            this.changeTableCardLayout(size.width);\n          });\n        }\n      );\n    });\n\n    this._hasViewInitialized = true;\n  }\n\n  private changeTableCardLayout(gridWidth: number): void {\n    const hasCardLayout = gridWidth <= this.cardLayoutWidth;\n\n    if (this.hasCardLayout === hasCardLayout || !gridWidth) {\n      return;\n    }\n\n    this.hasCardLayout = hasCardLayout;\n    const adaptTable = this.adaptTable;\n\n    this.scrollToFirstVisibleRow();\n\n    if (hasCardLayout) {\n      this.renderer.addClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    } else {\n      this.renderer.removeClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    }\n\n    // fix for updating margin in header. Just primeng flaw\n    adaptTable.tableService.onValueChange(adaptTable.value);\n\n    this.changedCardLayout.emit({\n      cardLayoutColumns: hasCardLayout ? this.getCardLayoutColumns() : null\n    });\n  }\n\n  getCardLayoutColumns(): ColumnConfig[] {\n    return [\n      {\n        field: 'fields',\n        header: 'Fields',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutFieldsHeaderTemplate,\n        width: '35%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutFieldsDataCellTemplate,\n        testId: 'fields-column'\n      },\n      {\n        field: 'fields',\n        header: 'Values',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutValuesHeaderTemplate,\n        width: '65%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutValuesDataCellTemplate,\n        testId: 'values-column'\n      }\n    ];\n  }\n\n  private getDataCellClass(): string {\n    return `${this.recordGridGetDataCellClass()} rx-card-layout-data-cell`;\n  }\n\n  scrollToFirstVisibleRow(): void {\n    const adaptTable = this.adaptTable;\n\n    if (adaptTable.scrollable) {\n      const scrollableBody = this.renderer\n        .selectRootElement(adaptTable.el.nativeElement, true)\n        .querySelector('.ui-table-scrollable-body') as HTMLDivElement;\n\n      const scrollableBodyScrollTop = scrollableBody && scrollableBody.scrollTop;\n\n      if (scrollableBodyScrollTop) {\n        const firstVisibleRow = adaptTable.dataRows.find((dataRow) => {\n          const rowEl = dataRow.element.nativeElement;\n\n          return rowEl.offsetTop + rowEl.offsetHeight >= scrollableBodyScrollTop;\n        });\n\n        if (firstVisibleRow) {\n          let rowEl = firstVisibleRow.element.nativeElement;\n          const scrollRowProportion = (scrollableBodyScrollTop - rowEl.offsetTop) / rowEl.offsetHeight;\n\n          this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            rowEl = firstVisibleRow.element.nativeElement;\n            scrollableBody.scrollTop = rowEl.offsetTop + rowEl.offsetHeight * scrollRowProportion;\n          });\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.resizeSensor.detach();\n  }\n}\n","import { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  ICellDisplayProperties,\n  RxGridCellBgColorCssMap,\n  RxGridCellFontColorCssMap,\n  RxGridCellFontSize,\n  RxGridCellIconPosition\n} from '../../common/types/cell-display-properties.types';\nimport { RxExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { set } from 'lodash';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\n\n@Directive({\n  selector: '[rxCellDisplayProps]'\n})\nexport class CellDisplayPropertiesDirective implements OnInit, OnChanges {\n  @Input()\n  rxCellDisplayProps: ICellDisplayProperties[];\n\n  @Input()\n  rxCellDisplayPropsBadgeElem: HTMLElement;\n\n  @Input()\n  rxCellDisplayPropsDataItem: IPlainObject;\n\n  @HostBinding('class')\n  cssClasses: string;\n\n  private evaluationData: IPlainObject = {};\n\n  constructor(\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.updateCellClasses();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      !changes.rxCellDisplayPropsDataItem.firstChange &&\n      changes.rxCellDisplayPropsDataItem.currentValue !== changes.rxCellDisplayPropsDataItem.previousValue\n    ) {\n      this.updateCellClasses();\n    }\n  }\n\n  private getActiveProps(items: ICellDisplayProperties[]): ICellDisplayProperties {\n    return (\n      items.find((props) =>\n        this.rxExpressionEvaluatorService.tryEvaluate(props.fieldValueCondition, this.evaluationData)\n      ) || null\n    );\n  }\n\n  private getCellCssClasses(props: ICellDisplayProperties): string[] {\n    const result = [];\n\n    if (!props.displayAsBadge) {\n      if (props.bold) {\n        result.push('font-weight-bold');\n      }\n\n      if (props.italic) {\n        result.push('font-italic');\n      }\n\n      if (props.fontSize === RxGridCellFontSize.Small) {\n        result.push('small');\n      } else if (props.fontSize === RxGridCellFontSize.Large) {\n        result.push('large');\n      }\n\n      if (props.textColor) {\n        result.push(RxGridCellFontColorCssMap[props.textColor]);\n      }\n\n      if (props.backgroundColor) {\n        result.push(RxGridCellBgColorCssMap[props.backgroundColor]);\n      }\n\n      if (props.icon) {\n        if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n          result.push(`d-icon-${props.icon}`);\n        } else {\n          result.push(`d-icon-${props.iconPosition}-${props.icon}`);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private getSpanCssClasses(props: ICellDisplayProperties): string[] {\n    if (props.displayAsBadge) {\n      return ['badge', `badge-${props.badgeColor}`];\n    } else if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n      return ['hidden'];\n    } else {\n      return [];\n    }\n  }\n\n  private updateCellClasses(): void {\n    if (this.rxCellDisplayProps?.length) {\n      let cssClasses = '';\n\n      const expandedRxCellDisplayPropsDataItem = {\n        ...this.rxCellDisplayPropsDataItem,\n        ...this.rxObjectUtilsService.expandProperties(this.rxCellDisplayPropsDataItem)\n      };\n\n      set(this.evaluationData, `view.components.grid.clickableRow`, expandedRxCellDisplayPropsDataItem);\n\n      const activeProps = this.getActiveProps(this.rxCellDisplayProps);\n\n      if (activeProps) {\n        const cellClasses = this.getCellCssClasses(activeProps);\n\n        cssClasses = cellClasses.join(' ');\n      }\n\n      if (this.rxCellDisplayPropsBadgeElem) {\n        const spanClasses: string[] = activeProps ? this.getSpanCssClasses(activeProps) : [];\n\n        this.rxCellDisplayPropsBadgeElem.classList.value = '';\n        this.rxCellDisplayPropsBadgeElem.classList.add(...spanClasses);\n      }\n\n      this.cssClasses = cssClasses;\n    }\n  }\n}\n","import { DatePipe, DecimalPipe } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {\n  AdaptAdvancedFilterComponent,\n  AdaptDeviceDetectionService,\n  AdaptModalService,\n  AdaptPopoverDirective,\n  AdvancedFilterOption,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterTag,\n  AdvancedFilterTagsChangedEvent,\n  BeforeActiveSavedFilterChangeEvent,\n  CreateAdvancedFilterEvent,\n  EditSavedFilterClickEvent,\n  getValueOrFunc,\n  KeyValueObject,\n  ModalDeferred,\n  SelectedAdvancedFilter,\n  UpdateSavedFilterEvent,\n  ValueOrFunc1\n} from '@bmc-ux/adapt-angular';\nimport {\n  AdaptLazyLoadEvent,\n  AdaptTableComponent,\n  AdaptTableEventSource,\n  AdaptTableHeaderSelectionMode,\n  AdaptTableToolbarComponent,\n  ColumnConfig,\n  DataCellTemplateParams,\n  DataCellTooltipParams,\n  ExportEvent,\n  ExportType,\n  ResizeMode,\n  RowDataItem,\n  SortOrder,\n  ToolbarItemsByPriority\n} from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor, RxAssociationInstanceDataPageService } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService,\n  RxRecordInstanceDataPageService,\n  RxRecordInstanceService\n} from '@helix/platform/record/api';\nimport {\n  DataPage,\n  IDataPageResult,\n  IPlainObject,\n  RxBooleanPipe,\n  RxCurrentUserService,\n  RxGlobalEventsService,\n  RxLogService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxGuidService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  ApplyGridFilterMode,\n  IRecordGridColumnPublicProperties,\n  IRecordGridFilterData,\n  IRowDataItem,\n  IViewPresetsByViewComponentGuid,\n  IRxRecordGridApi,\n  IViewInputParams,\n  RowDataItemIdFieldName,\n  RX_EXPRESSION_EVALUATOR,\n  RX_LAUNCH_BEHAVIOR,\n  RX_VIEW_ACTION,\n  RX_VIEW_DEFINITION,\n  RxExpressionEvaluatorService,\n  RxViewActionService,\n  RxViewActionUtilsService\n} from '@helix/platform/view/api';\nimport {\n  BaseViewComponent,\n  IChildComponentData,\n  IViewComponentPropertyChanged,\n  RuntimeViewCanvasItemComponent,\n  RuntimeViewModelApi,\n  VIEW_COMPONENT_DEFAULT_EVENT_NAME\n} from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { saveAs } from 'file-saver';\nimport {\n  castArray,\n  chain,\n  cloneDeep,\n  differenceBy,\n  endsWith,\n  find,\n  findIndex,\n  findLast,\n  forEach,\n  get,\n  includes,\n  intersectionBy,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  last,\n  map as _map,\n  max,\n  min,\n  noop,\n  reduce,\n  remove,\n  round,\n  set,\n  some,\n  sortBy,\n  toString as _toString,\n  transform,\n  uniq\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { SortEvent, SortMeta } from 'primeng/api';\nimport { BehaviorSubject, combineLatest, EMPTY, forkJoin, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { ActionButtonComponent } from '../../action-button/runtime/action-button.component';\nimport { IActionButtonConfig } from '../../action-button/runtime/action-button.types';\nimport { PageComponent } from '../../page/runtime/page.component';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRemoveFilterTagEvent } from '../common/components/filter-tags/filter-tags.types';\nimport { RxRecordGridAdvancedFilteringService } from '../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridAdvancedFilterValue } from '../common/types/record-grid-advanced-filter-value.class';\nimport { ITagInfo } from '../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterTag,\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../common/types/record-grid-filter.types';\nimport {\n  IRecordGridColumnNamedFilterOption,\n  IRecordGridNamedFilterOptionsMap\n} from '../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxFilterByCardSelectionDialogComponent } from './filter-by-card-selection-dialog/filter-by-card-selection-dialog.component';\nimport { IChangedCardLayoutEvent } from './record-grid-card-layout/changed-card-layout-event.interface';\nimport { RxRecordGridConfigUtilsService } from './services/record-grid-config-utils.service';\nimport { RxRecordGridConfiguratorService } from './services/record-grid-configurator.service';\nimport { RxRecordGridFilterConfigService } from './services/record-grid-filter-config.service';\nimport { RxRecordGridFilterService } from './services/record-grid-filter.service';\nimport { RxRecordGridSharedFilterPresetsCacheService } from './services/record-grid-shared-filter-presets-cache.service';\nimport { RxRecordGridUserPreferencesService } from './services/record-grid-user-preferences.service';\nimport { IAdaptTableConfig } from './types/adapt-table-config.interface';\nimport { IRecordGridActionButton } from './types/record-grid-action-button.interface';\nimport { IRxRecordGridAction, RxRecordGridActionFunction } from './types/record-grid-action.types';\nimport {\n  IAdaptTableColumnConfig,\n  IColumnSortInfo,\n  IRecordGridColumnWithMetadata\n} from './types/record-grid-column.types';\nimport { IRecordGridConfig } from './types/record-grid-config.interface';\nimport { IRecordGridDataLoadContext } from './types/record-grid-data-load-context.interface';\nimport { IRecordGridDataPageRequestParams } from './types/record-grid-data-page-params.interface';\nimport { IRecordGridState } from './types/record-grid-state.interface';\nimport { RowSelectionMode } from './types/row-selection-mode.enum';\nimport { IRecordGridSharedViewPreset } from './types/record-grid-user-preferences.interface';\n\n@Component({\n  selector: 'rx-record-grid',\n  templateUrl: './record-grid.component.html',\n  styleUrls: ['record-grid.component.scss'],\n  providers: [RxRecordGridUserPreferencesService]\n})\nexport class RecordGridComponent extends BaseViewComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input()\n  config: Observable<IRecordGridConfig>;\n\n  @Output()\n  dataLoaded: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('adaptTable', { static: true })\n  adaptTable: AdaptTableComponent;\n\n  @ViewChild('adaptAdvancedFilter')\n  adaptAdvancedFilter: AdaptAdvancedFilterComponent;\n\n  @ViewChild('cardLayoutRowDetailsTemplate', { static: true })\n  cardLayoutRowDetailsTemplate: TemplateRef<any>;\n\n  @ViewChild('cellTemplate', { static: true })\n  cellTemplate: TemplateRef<DataCellTemplateParams>;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('leftCustomSectionTemplate', { static: true })\n  leftCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rightCustomSectionTemplate', { static: true })\n  rightCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rowActionButtonsTemplate', { static: true })\n  rowActionButtonsTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  @ViewChildren(ActionButtonComponent)\n  private actionButtonComponents: QueryList<ActionButtonComponent>;\n\n  // Check if user clicked on a cell, filter popover,\n  // filter by selection dialog, or filter by selection dropdown.\n  // If not, then clear the selected cell.\n  @HostListener('document:click', ['$event'])\n  private onClickOutside(event: MouseEvent): void {\n    const isClickOutside = !(\n      (event.target as HTMLElement).closest('.ui-table-tbody') ||\n      (event.target as HTMLElement).closest('.popover.table-filtering') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-dialog') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-field-dropdown')\n    );\n\n    if (isClickOutside) {\n      this.clearSelectedCells();\n    }\n  }\n\n  get isTotalRecordCountKnown(): boolean {\n    return !isNull(this.adaptTableConfig.totalRecords);\n  }\n\n  private isExportInProgress = false;\n  cardLayoutOpenedModal: ModalDeferred;\n  columnSearchText: string;\n  lastQueryExpression: string;\n  lastPropertySelection: string[] = [];\n\n  adaptTableConfig: IAdaptTableConfig = {\n    data: [],\n    columns: [],\n    columnResizeMode: ResizeMode.Fit,\n    cardLayoutColumns: null,\n    bordered: true,\n    scrollable: true,\n    striped: false,\n    toolbarConfig: {\n      counter: false,\n      quickFilter: true,\n      leftCustomSection: true,\n      leftCustomSectionTemplate: null,\n      filter: true,\n      filterTemplate: null,\n      filterResults: false,\n      filterResultsTemplate: null,\n      rightCustomSection: false,\n      rightCustomSectionTemplate: null,\n      visibleColumnsMenu: true,\n      visibleColumnsMenuTemplate: null,\n      quickFilterTriggerable: true,\n      export: {\n        exportTypes: [{ type: ExportType.CSV }],\n        showExportForSelected: true\n      }\n    },\n    filterable: false,\n    selectedItems: [],\n    filters: {},\n    rows: 50,\n    first: 0,\n    multiSortMeta: null,\n    rowSelectionMode: null,\n    isLoadingData: false,\n    totalRecords: null,\n    primaryKey: null,\n    isLoadingMoreData: false,\n    texts: null,\n    expandedGroupsKeys: {},\n    virtualScroll: true,\n    virtualRowHeight: RX_RECORD_GRID.defaultRowHeight\n  };\n\n  actionButtons: IChildComponentData[] = null;\n  adaptTableHeaderSelectionMode = AdaptTableHeaderSelectionMode.Chunk;\n\n  api: IRxRecordGridApi = {\n    applyViewPreset: this.applyViewPreset.bind(this),\n    shareViewPreset: this.shareViewPreset.bind(this),\n    refresh: this.refresh.bind(this),\n    setFilter: this.setFilter.bind(this),\n    deleteViewPreset: this.deleteViewPreset.bind(this),\n    discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n    getColumns: this.getColumns.bind(this),\n    getRecordDefinitionName: this.getRecordDefinitionName.bind(this),\n    getSelectedRows: this.getSelectedRows.bind(this),\n    getFirstSelectedRow: this.getFirstSelectedRow.bind(this),\n    getSelectedRowCount: this.getSelectedRowCount.bind(this),\n    setSelectedRows: this.onRowsSelectionChange.bind(this),\n    getVisibleRows: this.getVisibleRows.bind(this),\n    saveViewPreset: this.saveViewPreset.bind(this),\n    applyFilters: this.applyFilters.bind(this)\n  };\n\n  filteredVisibleColumns: IAdaptTableColumnConfig[] = [];\n  getDataCellClassBind = this.getDataCellClass.bind(this);\n\n  gridEvents = {\n    cellClick: (gridRow: IRowDataItem, columnId: string) => {\n      const columnWithActions = this.state.columnsWithMetadata.find((column) => column.fieldId === columnId);\n\n      this.addSelectionFieldOptionNames(gridRow);\n\n      gridRow = this.expandRowProperties(gridRow);\n\n      this.state.lastActionRow = gridRow;\n\n      this.notifyPropertyChanged('clickableRow', gridRow, null);\n\n      this.executeViewActions(columnWithActions.guid, get(columnWithActions, 'actions'), gridRow).catch(noop);\n    },\n\n    cellKeyDown: (event: KeyboardEvent, gridRow: IRowDataItem, columnId: string) => {\n      if (includes(['Space', 'Enter'], event.code)) {\n        this.gridEvents.cellClick(gridRow, columnId);\n        event.preventDefault();\n      }\n    }\n  };\n\n  isFilterBySelectionButtonVisible = false;\n  isUserAllowedToDeleteRecords = false;\n  openSortByDialog = this.openSortByDialogFn.bind(this);\n  rowActionButtons: IChildComponentData[] = null;\n  rowSelectionChanged = new BehaviorSubject<IRowDataItem[]>([]);\n  selectedFilteredRowsCount = 0;\n  shouldDisplayActionButtons = false;\n  showCellTooltip = false;\n  sortedColumnsByTitle: IAdaptTableColumnConfig[] = [];\n\n  state: IRecordGridState = {\n    actionButtons: [],\n    rowActionButtons: [],\n    lastActionRow: null,\n    associatedRecordId: null,\n    associatedRoleName: null,\n    associatedRecordNodeSide: null,\n    associationDefinitionName: null,\n    bordered: true,\n    cardLayoutWidth: null,\n    columns: [],\n    columnsWithMetadata: [],\n    defaultFilterPreset: null,\n    enableFiltering: false,\n    requiredFilters: 0,\n    getDataForHiddenColumns: true,\n    enableFilterPresets: true,\n    enableRowSelection: RowSelectionMode.Multiple,\n    expandable: false,\n    filterExpression: null,\n    filters: null,\n    filterTagsLimit: null,\n    getData: null,\n    recordDefinition: null,\n    associationDescriptors: [],\n    recordDefinitionName: null,\n    recordGridFilters: [],\n    recordIdField: null,\n    showDataForAllLocales: null,\n    striped: false,\n    styles: null,\n    initialFilters: null,\n    expandGroups: false,\n    advancedFiltering: {\n      activeSavedFilter: null,\n      savedFilters: [],\n      filterOptions: [],\n      selectedFilters: [],\n      recordGridFilterConfigs: null,\n      filterTexts: null,\n      hasLoadedSharedFilterPresets: false,\n      isLoading: false,\n      appliedSharedFilterPreset: null,\n      toolbarTags: [],\n      pendingSelectedFilters: [],\n      selectedCardValues: {}\n    },\n    emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),\n    emptyStateWithFilterLabelText: this.translateService.instant(\n      'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n    ),\n    searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n    enableColumnSelection: true,\n    namedFilterOptions: null,\n    predefinedFilterPresets: [],\n    viewPresetSelector: null,\n    virtualScroll: true\n  };\n\n  visibleColumns: IAdaptTableColumnConfig[] = [];\n\n  private clickableWithHrefActionExpressionEvaluationData: IPlainObject;\n  private cursor: string;\n  private initializationCompleted$: Observable<boolean>;\n  private isProgrammaticUse: boolean;\n  private selectionFieldOptionLabelsByFieldId: IPlainObject;\n\n  private cellValueFormatters: { [name: string]: (...args: any[]) => string } = {};\n  private clickableWithHrefColumnActions: { [columnId: string]: IRxRecordGridAction[] } = {};\n  private dataLoadContextSubject: Subject<IRecordGridDataLoadContext> = new Subject();\n  private popovers: AdaptPopoverDirective[] = [];\n  private userPreferencesChanged$: Subject<void> = new Subject<void>();\n\n  private readonly exportSelectedRowText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-row.label'\n  );\n\n  private readonly exportSelectedRowsText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n  );\n\n  constructor(\n    private adaptDeviceDetectionService: AdaptDeviceDetectionService,\n    private adaptModalService: AdaptModalService,\n    private changeDetector: ChangeDetectorRef,\n    private datePipe: DatePipe,\n    private decimalPipe: DecimalPipe,\n    private ngZone: NgZone,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxBooleanPipe: RxBooleanPipe,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxGridConfiguratorService: RxRecordGridConfiguratorService,\n    private rxGuidService: RxGuidService,\n    private rxLogService: RxLogService,\n    private rxNotificationService: RxNotificationService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordGridSharedFilterPresetsCacheService: RxRecordGridSharedFilterPresetsCacheService,\n    private rxRecordGridUserPreferencesService: RxRecordGridUserPreferencesService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxViewActionService: RxViewActionService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private translateService: TranslateService,\n    public elementRef: ElementRef,\n    public rxStringService: RxStringService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    @Optional() private pageComponent: PageComponent,\n    @Optional() private runtimeViewCanvasItemComponent: RuntimeViewCanvasItemComponent\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n\n    this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.isProgrammaticUse = Boolean(this.pageComponent) || !this.runtimeViewCanvasItemComponent;\n\n    if (this.isProgrammaticUse) {\n      this.adaptTableConfig.toolbarConfig.export = null;\n    }\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.initializationCompleted$ = this.config.pipe(\n      take(1),\n      map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n      tap((gridConfig) => {\n        Object.assign(this.state, gridConfig);\n      }),\n      switchMap(() => {\n        if (this.state.guid) {\n          this.guid = this.state.guid;\n        }\n\n        const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n        if (this.guid) {\n          this.userPreferencesChanged$.pipe(debounceTime(1000), takeUntil(this.destroyed$)).subscribe(() => {\n            this.rxRecordGridUserPreferencesService.saveUserPreferences(this.guid, this.adaptTableConfig, this.state);\n            this.checkIfViewPresetEdited();\n          });\n\n          requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n        }\n\n        return forkJoin(requests$);\n      }),\n      switchMap(() => this.initGrid()),\n      shareReplay(1)\n    );\n\n    this.initializationCompleted$.subscribe();\n\n    const configChanged$ = combineLatest([\n      this.initializationCompleted$,\n      this.dataLoaded,\n      this.config.pipe(\n        skip(1),\n        debounceTime(250),\n        map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n        takeUntil(this.destroyed$)\n      )\n    ]).pipe(map(([initializationCompleted, dataLoaded, configChanged]) => configChanged));\n\n    // updates named list column filter options after additional query expression evaluation\n    configChanged$\n      .pipe(\n        map((config) => differenceBy(config.columns, this.state.columns, 'additionalQueryCriteria')),\n        filter((changedColumns) => changedColumns.length > 0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((namedListColumns) => {\n        namedListColumns.forEach((column) => {\n          const namedListColumnFilterOption = this.state.advancedFiltering.filterOptions.find(\n            (filterOption) => filterOption.id === column.fieldId\n          );\n\n          namedListColumnFilterOption.data.additionalQueryCriteria = column.additionalQueryCriteria;\n\n          const existingColumnIndex = this.state.columns.findIndex(\n            (existingColumn) => existingColumn.fieldId === column.fieldId\n          );\n\n          this.state.columns[existingColumnIndex].additionalQueryCriteria = column.additionalQueryCriteria;\n        });\n      });\n\n    const namedFilterOptionCache = new Map<string, IRecordGridColumnNamedFilterOption>();\n\n    // updates namedFilterOptions after expression evaluation and triggers data load if expression value is changed\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        map((config) => this.getNamedFilterOptionsState(config.columns)),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([namedFilterOptionsMap, dataLoadContext]) =>\n            !isEqual(namedFilterOptionsMap, dataLoadContext.namedFilterOptions)\n        ),\n        tap(([namedFilterOptionsMap]) => {\n          this.state.namedFilterOptions = namedFilterOptionsMap;\n        }),\n        map(([namedFilterOptionsMap]) =>\n          Object.values(namedFilterOptionsMap).reduce((res, options) => res.concat(options), [])\n        ),\n        map((namedFilterOptionsList) => {\n          const selectedNamedFilterOptionsGuids = this.state.advancedFiltering.selectedFilters.reduce(\n            (res: string[], filterValue) => res.concat(filterValue.value.namedOptions),\n            []\n          );\n\n          return namedFilterOptionsList.some((option) => {\n            const isOptionCached = Boolean(namedFilterOptionCache.get(option.guid));\n\n            if (!isOptionCached) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            const isFilterValueChanged =\n              option.filterExpression !== namedFilterOptionCache.get(option.guid).filterExpression;\n\n            const shouldLoadData =\n              selectedNamedFilterOptionsGuids.includes(option.guid) && (isFilterValueChanged || !isOptionCached);\n\n            if (isFilterValueChanged) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            return shouldLoadData;\n          });\n        }),\n        filter((v) => v),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([config, dataLoadContext]) =>\n            config.associatedRecordId !== dataLoadContext.associatedRecordId ||\n            config.associatedRoleName !== dataLoadContext.associatedRoleName ||\n            config.filterExpression !== dataLoadContext.filterExpression\n        ),\n        tap(([config]) => {\n          Object.assign(this.state, config);\n        })\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    this.config\n      .pipe(\n        map((cfg) => cfg.viewPresetSelector),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((viewPresetSelector) => {\n        this.state.viewPresetSelector = viewPresetSelector;\n      });\n\n    if (this.isProgrammaticUse) {\n      configChanged$\n        .pipe(\n          map((config) => ({\n            actionButtons: config.actionButtons,\n            rowActionButtons: config.rowActionButtons\n          })),\n          distinctUntilChanged(isEqual)\n        )\n        .subscribe(({ actionButtons, rowActionButtons }) => {\n          this.state.actionButtons = actionButtons;\n          this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n\n          this.state.rowActionButtons = rowActionButtons;\n          this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n        });\n\n      configChanged$\n        .pipe(\n          distinctUntilChanged(isEqual),\n          map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n          tap((gridConfig) => {\n            Object.assign(this.state, gridConfig);\n            this.state.advancedFiltering.selectedFilters = [];\n            this.adaptTableConfig.multiSortMeta = [];\n          }),\n          switchMap(() => {\n            if (this.state.guid) {\n              this.guid = this.state.guid;\n            }\n\n            const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n            if (this.guid) {\n              requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n            }\n\n            return forkJoin(requests$);\n          }),\n          switchMap(() => this.initGrid())\n        )\n        .subscribe();\n    }\n\n    this.adaptTableConfig.virtualScroll = this.state.virtualScroll;\n\n    const toolbarConfig = this.adaptTableConfig.toolbarConfig;\n\n    toolbarConfig.visibleColumnsMenu = this.state.enableColumnSelection;\n    toolbarConfig.visibleColumnsMenuTemplate = this.visibleColumnsMenuTemplate;\n    toolbarConfig.rightCustomSectionTemplate = this.rightCustomSectionTemplate;\n    toolbarConfig.leftCustomSectionTemplate = this.leftCustomSectionTemplate;\n    toolbarConfig.filterTemplate = this.filterTemplate;\n\n    this.notifyPropertyChanged('totalRowCount', 0);\n    this.notifyPropertyChanged('selectedRows', []);\n    this.notifyPropertyChanged('selectedRowCount', 0);\n    this.notifyPropertyChanged('fieldValuesByFieldId', {});\n    this.notifyPropertyChanged('firstSelectedRow', null);\n    this.notifyPropertyChanged('queryExpression', '');\n    this.notifyPropertyChanged('lastRefreshTime', '');\n\n    this.initAdvancedFilterTexts();\n    this.initCustomTexts();\n\n    this.rxGlobalEventsService.viewActionsCompleted$.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      if (!isEmpty(this.pendingFiltersToApply)) {\n        this.onAdvancedFiltersChange(this.pendingFiltersToApply);\n      }\n\n      this.pendingFiltersToApply = null;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // The action buttons are rendered by the record grid component,\n    // hence we have to handle their property changes here.\n    this.actionButtonComponents.changes\n      .pipe(\n        switchMap((buttons) =>\n          merge<IViewComponentPropertyChanged>(\n            // Emit \"api\" change because native action button's property change happens later and we cannot catch it.\n            ...buttons.map((button) =>\n              of({\n                guid: button.guid,\n                propertyName: 'api',\n                newValue: button.api,\n                oldValue: null\n              })\n            ),\n            // Handle other property changes, e.g \"hidden\", or \"disabled\".\n            ...buttons.map((button) => button.propertyChanged.asObservable())\n          )\n        )\n      )\n      .subscribe((event) => this.propertyChanged.emit(event));\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    this.dataLoadContextSubject.complete();\n    this.userPreferencesChanged$.complete();\n  }\n\n  applyFilterBySelection(): void {\n    if (isEmpty(this.state.advancedFiltering.selectedCardValues)) {\n      this.applyPendingSelectedFilters();\n    } else {\n      this.cardLayoutOpenedModal = this.adaptModalService.open({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.filter-by-selection.title'\n        ),\n        content: RxFilterByCardSelectionDialogComponent,\n        data: {\n          filterableFields: this.visibleColumns\n            .filter((column) => {\n              if (column.filterable) {\n                const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n                const isRequiredBooleanFilter =\n                  fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n                  this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n                return !isRequiredBooleanFilter;\n              } else {\n                return false;\n              }\n            })\n            .map((column) => ({\n              id: column.field,\n              name: column.header || column.fallbackTitle\n            }))\n        },\n        customClass: 'rx-filter-by-card-selection-dialog'\n      });\n\n      this.cardLayoutOpenedModal\n        .then((fieldId) => {\n          this.state.advancedFiltering.pendingSelectedFilters = [\n            {\n              filterOptionId: fieldId,\n              value: this.state.advancedFiltering.selectedCardValues[fieldId]\n            }\n          ];\n\n          this.applyPendingSelectedFilters();\n        })\n        .catch(noop);\n    }\n  }\n\n  buildQueryByAdvancedFilters(advancedFilters: SelectedAdvancedFilter[]): string {\n    const queryFilters = advancedFilters.map((filter) => {\n      let queryFilter = null;\n      const fieldId = filter.filterOptionId;\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        queryFilter = filterConfig.getQueryFilter(\n          filter,\n          fieldDefinition,\n          fieldId,\n          this.state.namedFilterOptions[fieldId] ?? []\n        );\n      }\n\n      return queryFilter;\n    });\n\n    return this.rxRecordGridFilterService.addQueries(...queryFilters);\n  }\n\n  downloadAttachment(row: IPlainObject, col: ColumnConfig, fileName: string, event?: KeyboardEvent): void {\n    if (event && !includes(['Space', 'Enter'], event.code)) {\n      return;\n    }\n\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(col.field)) {\n      const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(col.field);\n\n      const associationDescriptor = find(this.state.associationDescriptors, {\n        associationDefinition: { guid: fieldLocator.associationGuid }\n      });\n\n      this.rxAssociationInstanceDataPageService\n        .post({\n          params: {\n            pageSize: 1,\n            startIndex: 0,\n            associationDefinition: associationDescriptor.associationDefinition.name,\n            nodeToQuery: fieldLocator.associationNodeSide,\n            associatedRecordInstanceId: row[RX_RECORD_DEFINITION.coreFieldIds.id],\n            propertySelection: RX_RECORD_DEFINITION.coreFieldIds.id\n          }\n        })\n        .pipe(take(1))\n        .subscribe((dataPageResult: IDataPageResult) => {\n          const recordInstanceId = dataPageResult.data[0][RX_RECORD_DEFINITION.coreFieldIds.id];\n\n          this.rxRecordInstanceService.downloadAttachment(\n            associationDescriptor.recordDefinitionName,\n            Number(fieldLocator.fieldId),\n            recordInstanceId,\n            fileName\n          );\n        });\n    } else {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        Number(col.field),\n        row[RX_RECORD_DEFINITION.coreFieldIds.id],\n        fileName\n      );\n    }\n  }\n\n  executeViewActions(guid: string, actions: IRxRecordGridAction[], lastActionRow?: IRowDataItem): Promise<any> {\n    if (this.isProgrammaticUse) {\n      const sortedActions = sortBy(actions, 'index');\n\n      return sortedActions.reduce((promise, action) => {\n        return isFunction(action.name)\n          ? promise.then((result) => (action.name as RxRecordGridActionFunction)(result, lastActionRow))\n          : isString(action.name)\n          ? promise.then((result) =>\n              (\n                (() => {\n                  this.rxViewActionService.execute(action.name.toString(), action.params).subscribe();\n                }) as RxRecordGridActionFunction\n              )(result, lastActionRow)\n            )\n          : promise;\n      }, Promise.resolve());\n    }\n\n    return this.runtimeViewModelApi.triggerViewActions(guid, VIEW_COMPONENT_DEFAULT_EVENT_NAME);\n  }\n\n  getActionButtonConfig(\n    isHidden: boolean,\n    actionButtonConfig: Observable<IActionButtonConfig | IRecordGridActionButton>\n  ) {\n    return isHidden\n      ? actionButtonConfig.pipe(map((config) => ({ ...config, cls: 'dropdown-item' })))\n      : actionButtonConfig;\n  }\n\n  getCellValue(row: IRowDataItem, col: ColumnConfig): string {\n    const cellValueFormatter = this.cellValueFormatters[col.field];\n\n    return cellValueFormatter(row[col.field]);\n  }\n\n  getDataCellClass(): string {\n    return this.popovers.length ? 'rx-cell-selection-mode' : '';\n  }\n\n  getLoadRecordCountLinkText(): string {\n    return `${this.adaptTableConfig.data.length}+`;\n  }\n\n  getMultipleRowsSelectedText(): string {\n    return this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid.multiple-rows-selected.label',\n      {\n        count: this.adaptTableConfig.selectedItems.length,\n        total: this.isTotalRecordCountKnown ? this.adaptTableConfig.totalRecords : this.getLoadRecordCountLinkText()\n      }\n    );\n  }\n\n  getMultipleRowsSelectedTextFirstPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n\n    return text.substring(0, text.indexOf(this.getLoadRecordCountLinkText()));\n  }\n\n  getMultipleRowsSelectedTextSecondPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n    const totalParameterForTranslate = this.getLoadRecordCountLinkText();\n\n    return text.substring(text.indexOf(totalParameterForTranslate) + totalParameterForTranslate.length);\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.state.namedFilterOptions[filterOptionConfig.id];\n  }\n\n  getSharedFilterPresets(): Observable<IRxRecordGridSharedFilterPreset[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    const onLoadingEnd = () => {\n      this.state.advancedFiltering.isLoading = false;\n      this.state.advancedFiltering.hasLoadedSharedFilterPresets = true;\n    };\n\n    return this.rxRecordGridSharedFilterPresetsCacheService.getSharedFilterPresets(this.guid).pipe(\n      catchError((err) => {\n        onLoadingEnd();\n\n        return throwError(err);\n      }),\n      tap(() => {\n        onLoadingEnd();\n      })\n    );\n  }\n\n  getSortedColumnsByTitle(): ColumnConfig[] {\n    return this.adaptTableConfig.columns\n      .slice()\n      .sort((column1, column2) => column1.header.localeCompare(column2.header));\n  }\n\n  getToolbarTags(filterTags: IRecordGridFilterTag[]): Observable<IRecordGridFilterTag[]> {\n    const toolbarTags$ = (filterTags || []).map((tag): Observable<IRecordGridFilterTag> => {\n      if (tag.data.filterOption && tag.data.filterOption.id !== RX_RECORD_GRID.externalPresetFilterOptionId) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        if (isFunction(filterConfig.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.state.recordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.state.namedFilterOptions[fieldId]\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return toolbarTags$.length ? forkJoin(toolbarTags$) : of([]);\n  }\n\n  getVisibleColumns(): IAdaptTableColumnConfig[] {\n    return this.adaptTable.getVisibleColumns(this.adaptTableConfig.columns);\n  }\n\n  getVisibleRows(): IRowDataItem[] {\n    return this.adaptTableConfig.data;\n  }\n\n  handleHeaderCheckboxToggle(event): void {\n    this.setSelectedFilteredRowsCount();\n  }\n\n  isCellSelected(cellPopover: AdaptPopoverDirective): boolean {\n    return some(this.popovers, (popover) => popover === cellPopover);\n  }\n\n  loadSavedFilterPresetFilters(savedFilter: IRxRecordGridSavedAdvancedFilter): Observable<SelectedAdvancedFilter[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    return this.rxRecordGridFilterService\n      .getAdvancedFilterData(\n        savedFilter.filterData,\n        this.state.recordDefinition.fieldDefinitionsById,\n        this.state.advancedFiltering.recordGridFilterConfigs,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.filterOptions,\n        this.state.associationDescriptors\n      )\n      .pipe(\n        tap((filters) => {\n          // combined fake preset filters with actual filters.\n          savedFilter.filters = (savedFilter.filters || []).concat(filters);\n\n          this.state.advancedFiltering.isLoading = false;\n        })\n      );\n  }\n\n  loadTotalRowCount(): void {\n    this.getTotalRowCount().subscribe((result: IDataPageResult) => {\n      this.adaptTableConfig.totalRecords = result.totalSize;\n    });\n  }\n\n  onActiveSavedAdvancedFilterChange(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): void {\n    this.state.advancedFiltering.activeSavedFilter = savedFilter;\n  }\n\n  onAdvancedFilterExpressionTagsChanged(event: AdvancedFilterTagsChangedEvent): void {\n    const hasAllValidTags = event.filterExpressionTags.every((filterTag) => isEmpty(filterTag.data.validationErrors));\n\n    if (hasAllValidTags) {\n      const oldToolbarTags = this.state.advancedFiltering.toolbarTags;\n\n      this.updateToolbarTags(event.filterExpressionTags);\n\n      // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n      if (oldToolbarTags !== this.state.advancedFiltering.toolbarTags) {\n        this.changeDetector.detectChanges();\n      }\n    }\n  }\n\n  onAdvancedFiltersChange(filters: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.appliedSharedFilterPreset = null;\n\n    const appliedExternalPresetFilter = this.getAppliedExternalPresetFilter(filters);\n\n    if (appliedExternalPresetFilter) {\n      const filterPresetData = this.state.advancedFiltering.savedFilters.find(\n        (savedFilter) => savedFilter.id === appliedExternalPresetFilter.value\n      );\n\n      if (this.isSharedFilterPreset(filterPresetData)) {\n        this.state.advancedFiltering.appliedSharedFilterPreset = filterPresetData;\n      } else {\n        if (filterPresetData.appliedSharedFilterPresetGuid) {\n          const appliedSharedFilterPreset = find(this.state.advancedFiltering.savedFilters, {\n            id: filterPresetData.appliedSharedFilterPresetGuid\n          }) as IRxRecordGridSharedFilterPreset;\n\n          this.state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n        }\n      }\n    }\n\n    this.adaptTableConfig.first = 0;\n    this.state.advancedFiltering.selectedFilters = filters;\n    this.adaptTableConfig.isLoadingMoreData = false;\n\n    this.updateAdaptTableFilters();\n\n    this.userPreferencesChanged$.next();\n\n    this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n\n    if (this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    } else {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n    }\n  }\n\n  onBeforeActiveSavedFilterChange(event: BeforeActiveSavedFilterChangeEvent): void {\n    const savedFilterToSelect = event.savedFilterToSelect as\n      | IRxRecordGridSavedAdvancedFilter\n      | IRxRecordGridSharedFilterPreset;\n\n    if (savedFilterToSelect) {\n      if (!savedFilterToSelect.filters || !this.areNonExternalPresetFiltersApplied(savedFilterToSelect.filters)) {\n        this.loadSavedFilterPresetFilters(savedFilterToSelect).subscribe();\n      }\n    }\n  }\n\n  onCellClick(\n    event: MouseEvent,\n    columns?: IAdaptTableColumnConfig[],\n    rowItem?: IRowDataItem,\n    popover?: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    const isLinkClicked = !!(event.target as HTMLElement).closest('a');\n\n    if (isLinkClicked) {\n      this.clearSelectedCells();\n    } else {\n      if (this.popovers.length) {\n        if (!(event.metaKey || event.ctrlKey)) {\n          this.clearSelectedCells();\n        }\n      }\n\n      if (columns) {\n        this.toggleCellSelection(\n          columns.filter((col) => !col.isRowActionsColumn),\n          rowItem,\n          popover,\n          isCardLayout\n        );\n      }\n    }\n  }\n\n  onFilterBySelection(event: MouseEvent, columns?: IAdaptTableColumnConfig[], rowItem?: IRowDataItem): void {\n    this.onCellClick(event, columns, rowItem, null, true);\n    this.applyFilterBySelection();\n  }\n\n  onCellMouseOver($event: MouseEvent): void {\n    const element = $event.currentTarget as HTMLElement;\n    this.showCellTooltip = element.offsetWidth < element.scrollWidth;\n  }\n\n  onChangedCardLayout(event: IChangedCardLayoutEvent): void {\n    this.adaptTableConfig.cardLayoutColumns = event.cardLayoutColumns;\n    this.clearSelectedCells();\n\n    if (this.cardLayoutOpenedModal) {\n      this.cardLayoutOpenedModal.reject();\n      this.cardLayoutOpenedModal = null;\n    }\n\n    if (this.guid) {\n      this.rxRecordGridUserPreferencesService.applyUserPreferencesForColumns(\n        this.adaptTableConfig,\n        this.state.columnsWithMetadata,\n        this.guid\n      );\n    }\n\n    this.visibleColumns = this.getVisibleColumns();\n    this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n  }\n\n  onColReorder(colReorderEvent: ColumnConfig[]): void {\n    this.visibleColumns = this.getVisibleColumns();\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnResize(): void {\n    const adaptTableRectData = this.adaptTable.el.nativeElement.getBoundingClientRect();\n\n    const tableWidth = adaptTableRectData?.width;\n\n    const availableColumnWidth = this.adaptTable.dataHeaderCells.reduce(\n      (accum, cell) => accum + cell.element.nativeElement.offsetWidth,\n      0\n    );\n\n    const defaultColumnWidth = `${(availableColumnWidth * 100) / (tableWidth * this.getVisibleColumns().length)}%`;\n\n    const visibleColumnWidthMap = reduce(\n      this.adaptTable.dataHeaderCells.toArray(),\n      (result, cell) => {\n        const renderingColumnConfig = cell.data.renderingColumn.columnsConfigs[0];\n        let width = null;\n\n        if (availableColumnWidth) {\n          width =\n            endsWith(renderingColumnConfig.width, 'px') || this.state.expandable\n              ? `${cell.element.nativeElement.offsetWidth}px`\n              : `${round((cell.element.nativeElement.offsetWidth / availableColumnWidth) * 100, 2)}%`;\n        }\n\n        result[renderingColumnConfig.field] = width;\n\n        return result;\n      },\n      {}\n    );\n\n    this.adaptTableConfig.columns.forEach((column: IAdaptTableColumnConfig) => {\n      if (!column.hidden) {\n        column.width = visibleColumnWidthMap[column.field] ?? defaultColumnWidth;\n      }\n    });\n\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnVisibilityChange(isVisible: boolean, column: IAdaptTableColumnConfig): void {\n    if (column.hidden === isVisible) {\n      column.hidden = !isVisible;\n\n      this.userPreferencesChanged$.next();\n\n      this.visibleColumns = this.getVisibleColumns();\n      this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n\n      if (isVisible) {\n        if (!this.lastPropertySelection.includes(column.field)) {\n          this.loadRowData();\n        }\n      } else {\n        // #ADAPT-8052 workaround.\n        this.avoidSystemColumnExpansion();\n      }\n    }\n  }\n\n  onCreateNewFilterPreset(event: CreateAdvancedFilterEvent): void {\n    const newFilter: IRxRecordGridSavedAdvancedFilter = {\n      filters: event.filters,\n      name: event.name,\n      id: this.rxGuidService.generate()\n    };\n\n    const appliedSharedPreset = this.getAppliedExternalPresetFilter(event.filters);\n\n    if (appliedSharedPreset) {\n      newFilter.appliedSharedFilterPresetGuid = appliedSharedPreset.value;\n    }\n\n    this.state.advancedFiltering.savedFilters.push(newFilter);\n    this.state.advancedFiltering.activeSavedFilter = newFilter;\n    this.userPreferencesChanged$.next();\n  }\n\n  onDeleteSavedFilterPreset(filterPresetToDelete: IRxRecordGridSavedAdvancedFilter): void {\n    remove(this.state.advancedFiltering.savedFilters, (filterPreset) => filterPreset.id === filterPresetToDelete.id);\n    this.userPreferencesChanged$.next();\n  }\n\n  onEditSavedFilterClick(event: EditSavedFilterClickEvent): void {\n    let editCustomTagsFn = null;\n\n    if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      editCustomTagsFn = (tags: IRecordGridFilterTag[]) => tags;\n    }\n\n    if (!event.savedFilter.filters || !this.areNonExternalPresetFiltersApplied(event.savedFilter.filters)) {\n      event.preventDefault();\n\n      this.loadSavedFilterPresetFilters(event.savedFilter).subscribe(() => {\n        event.initSavedFilterEditing(editCustomTagsFn && editCustomTagsFn.bind(this));\n      });\n    } else if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      event.preventDefault();\n\n      event.initSavedFilterEditing(editCustomTagsFn.bind(this));\n    }\n  }\n\n  onExport(options: ExportEvent): void {\n    if (this.isExportInProgress) {\n      this.rxNotificationService.addInfoMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-in-progress.message')\n      );\n\n      return;\n    }\n\n    const visibleColumns = this.getVisibleColumns().filter((column) => !column.isRowActionsColumn);\n\n    if (!visibleColumns.length) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.no-data-to-export.message')\n      );\n\n      return;\n    }\n\n    const columnHeaders: string[] = visibleColumns.map((column) => column.header || column.fallbackTitle);\n\n    let rows$: Observable<KeyValueObject[]>;\n\n    if (options.selectionOnly) {\n      rows$ = of(intersectionBy(this.adaptTableConfig.data, this.getSelectedRows(), RowDataItemIdFieldName));\n    } else {\n      const headers = this.getHeaders();\n      const params = this.prepareQueryParamsAndQueryArgs(false);\n\n      params.pageSize = -1;\n      params.propertySelection = visibleColumns.map((column) => column.field);\n\n      delete params.cursor;\n\n      this.isExportInProgress = true;\n\n      rows$ = this.getDataPageService()\n        .post({ params, headers })\n        .pipe(\n          map((dataPage) => dataPage.data),\n          finalize(() => {\n            this.isExportInProgress = false;\n          })\n        );\n    }\n\n    rows$.subscribe((rows) => {\n      const cellValues = this.getCellValues(rows, visibleColumns);\n\n      this.exportDataToCsv(cellValues, columnHeaders);\n    });\n  }\n\n  onLazyLoad(event: AdaptLazyLoadEvent): void {\n    if (this.state.useExternalFiltering) {\n      if (event.loadMore || event.eventSource !== AdaptTableEventSource.LoadMore) {\n        this.adaptTableConfig.multiSortMeta = event.multiSortMeta;\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.isLoadingMoreData = event.loadMore;\n\n        this.loadRowData(event.loadMore);\n      }\n    } else {\n      if (event.eventSource === AdaptTableEventSource.FilterChange) {\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n      }\n    }\n  }\n\n  onRefreshClick(): void {\n    if (!this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    }\n\n    const searchText = this.adaptTable.toolbarComponent.getQuickFilterInputValue();\n\n    // this will trigger onLazyLoad event\n    this.adaptTable.setQuickFilter(searchText);\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    this.state.advancedFiltering.activeSavedFilter = null;\n\n    const selectedFilters = this.state.advancedFiltering.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n\n    this.setToolbarTags(event.newTags);\n  }\n\n  onRowsSelectionChange(rowDataItems: IRowDataItem[] | IRowDataItem): void {\n    const selectedItems = rowDataItems ? castArray(rowDataItems) : [];\n    const oldSelectedItems = this.adaptTableConfig.selectedItems;\n\n    this.shouldDisplayActionButtons = !isEmpty(selectedItems) && !isEmpty(this.actionButtons);\n\n    this.expandSelectedRowsProperties(selectedItems);\n\n    this.adaptTableConfig.selectedItems = selectedItems;\n\n    this.adaptTableConfig.toolbarConfig = {\n      ...this.adaptTableConfig.toolbarConfig,\n      quickFilter: !this.shouldDisplayActionButtons,\n      leftCustomSectionFixed: this.shouldDisplayActionButtons,\n      rightCustomSectionFixed: this.shouldDisplayActionButtons,\n      leftCustomSection: this.shouldDisplayActionButtons,\n      filter: !this.shouldDisplayActionButtons,\n      ...this.state.toolbarConfig\n    };\n\n    this.adaptTableConfig.texts = {\n      ...this.adaptTableConfig.texts,\n      exportSelected: this.getExportSelectedText(selectedItems)\n    };\n\n    this.addSelectionFieldOptionNames(selectedItems[0]);\n\n    this.notifyPropertyChanged('selectedRows', selectedItems, oldSelectedItems);\n    this.notifyPropertyChanged('selectedRowCount', selectedItems.length, oldSelectedItems.length);\n    this.notifyPropertyChanged('firstSelectedRow', selectedItems[0], oldSelectedItems[0]);\n    this.notifyPropertyChanged('fieldValuesByFieldId', this.prepareFieldsValueByFieldIdData(selectedItems), {});\n\n    this.rowSelectionChanged.next(selectedItems);\n  }\n\n  onSearchColumns(): void {\n    this.filteredVisibleColumns = this.sortedColumnsByTitle.filter((column) =>\n      this.rxStringService.caseInsensitiveSearch(column.header, this.columnSearchText)\n    );\n  }\n\n  onSort(sortEvent: SortEvent): void {\n    this.applySorting((sortEvent as any).multisortmeta);\n  }\n\n  onSortCards(multiSortMeta: SortMeta[]): void {\n    this.applySorting(multiSortMeta);\n    this.loadRowData();\n  }\n\n  onRowActionOpen(row: IRowDataItem): void {\n    last(this.popovers)?.close();\n\n    this.addSelectionFieldOptionNames(row);\n\n    const gridRow = this.expandRowProperties(row);\n\n    this.state.lastActionRow = gridRow;\n\n    this.notifyPropertyChanged('clickableRow', gridRow, null);\n  }\n\n  onUpdateSavedFilterPreset(event: UpdateSavedFilterEvent): void {\n    const savedFilter = find(\n      this.state.advancedFiltering.savedFilters,\n      (filterPreset) => filterPreset.id === event.oldSavedFilter.id\n    );\n\n    if (savedFilter) {\n      if (\n        savedFilter.appliedSharedFilterPresetGuid &&\n        !find(\n          event.newSavedFilter.filters,\n          (filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId\n        )\n      ) {\n        delete savedFilter.appliedSharedFilterPresetGuid;\n      }\n\n      Object.assign(savedFilter, event.newSavedFilter);\n\n      this.userPreferencesChanged$.next();\n    }\n  }\n\n  openRowDetails(columns: IAdaptTableColumnConfig[], rowDataItem: IRowDataItem) {\n    last(this.popovers)?.close();\n\n    this.cardLayoutOpenedModal = this.adaptModalService.open({\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.dialog.title'\n      ),\n      content: this.cardLayoutRowDetailsTemplate,\n      data: {\n        columns,\n        rowDataItem\n      }\n    });\n\n    this.cardLayoutOpenedModal.catch(noop);\n  }\n\n  setToolbarTags(toolbarTags: IRecordGridFilterTag[]): void {\n    this.state.advancedFiltering.toolbarTags = toolbarTags;\n    this.updateToolbarItems();\n  }\n\n  trackByColumnField(index: number, column: IAdaptTableColumnConfig): string {\n    return column.field;\n  }\n\n  updateToolbarTags(filterTags: IRecordGridFilterTag[]): void {\n    this.getToolbarTags(filterTags).subscribe((toolbarTags) => {\n      this.setToolbarTags(toolbarTags);\n    });\n  }\n\n  private addAssociationFieldsToRecordDefinition(columnsWithMetadata: IRecordGridColumnWithMetadata[]): void {\n    const fieldDefinitionsById = this.state.recordDefinition.fieldDefinitionsById;\n\n    columnsWithMetadata.forEach((columnWithMetadata) => {\n      if (!fieldDefinitionsById[columnWithMetadata.fieldId]) {\n        this.rxRecordDefinitionService.addFieldDefinitionToMap(\n          columnWithMetadata.fieldDefinition,\n          fieldDefinitionsById,\n          columnWithMetadata.fieldId\n        );\n      }\n    });\n\n    this.state.recordDefinition.fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private areNonExternalPresetFiltersApplied(filters: SelectedAdvancedFilter[]): boolean {\n    return filters.some((filter) => filter.filterOptionId !== RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private getAppliedExternalPresetFilter(filters: SelectedAdvancedFilter[]): SelectedAdvancedFilter {\n    return filters.find((filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private prepareFieldsValueByFieldIdData(selectedData: IRowDataItem[]): { [id: number]: string[] } {\n    const columnIds = _map(this.adaptTableConfig.columns, 'field');\n\n    return reduce(\n      selectedData,\n      (result, row, index) => {\n        columnIds.forEach(function (id) {\n          result[id] = result[id] || [];\n          result[id][index] = row[id];\n        });\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private addSelectionFieldOptionNames(row: IRowDataItem): void {\n    if (row) {\n      row.selectionFieldOptionNamesById = transform(\n        this.selectionFieldOptionLabelsByFieldId,\n        (result, value, fieldId) => {\n          result[fieldId] = value[row[fieldId]];\n        },\n        {}\n      );\n    }\n  }\n\n  pendingFiltersToApply = null;\n\n  private applyFilters(filters: IRecordGridFilterData, mode: ApplyGridFilterMode): void {\n    this.initializationCompleted$\n      .pipe(\n        switchMap(() =>\n          this.rxRecordGridFilterService.getAdvancedFilterData(\n            filters,\n            this.state.recordDefinition.fieldDefinitionsById,\n            this.state.advancedFiltering.recordGridFilterConfigs,\n            this.state.recordDefinition,\n            this.state.advancedFiltering.filterOptions,\n            this.state.associationDescriptors\n          )\n        ),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((filtersToApply: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[]) => {\n        let currentFilters = !isEmpty(this.pendingFiltersToApply)\n          ? this.pendingFiltersToApply\n          : cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n        let resultingFilters;\n\n        switch (mode) {\n          case ApplyGridFilterMode.Begin:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n            } else {\n              this.pendingFiltersToApply = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.Append:\n            // filters that will not be affected\n            const remainingFilters = currentFilters.filter(\n              (currentFilter) =>\n                !filtersToApply.find((filter) => filter.filterOptionId === currentFilter.filterOptionId)\n            );\n\n            resultingFilters = [...remainingFilters, ...filtersToApply];\n            break;\n          case ApplyGridFilterMode.Remove:\n            resultingFilters = currentFilters.reduce(\n              (result, currentFilter: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>) => {\n                const filterToApply = filtersToApply.find(\n                  (filter) => filter.filterOptionId === currentFilter.filterOptionId\n                );\n\n                if (filterToApply) {\n                  if (this.isRangeFilter(currentFilter.filterOptionId)) {\n                    if (isEqual(currentFilter.value.filterValue, filterToApply.value.filterValue)) {\n                      currentFilter.value.filterValue = [null, null];\n                    }\n                  } else {\n                    currentFilter.value.filterValue = currentFilter.value.filterValue.filter(\n                      (val) => !filterToApply.value.filterValue.includes(val)\n                    );\n                  }\n\n                  currentFilter.value.namedOptions = currentFilter.value.namedOptions.filter(\n                    (val) => !filterToApply.value.namedOptions.includes(val)\n                  );\n\n                  if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(currentFilter.value)) {\n                    result.push(currentFilter);\n                  }\n                } else {\n                  result.push(currentFilter);\n                }\n\n                return result;\n              },\n              []\n            );\n\n            break;\n          case ApplyGridFilterMode.Merge:\n            resultingFilters = [...currentFilters, ...filtersToApply].reduce((result, filter) => {\n              const existingFilter = result.find((f) => f.filterOptionId === filter.filterOptionId);\n\n              if (!existingFilter) {\n                result.push(filter);\n              } else {\n                if (this.isRangeFilter(filter.filterOptionId)) {\n                  existingFilter.value.filterValue = [...filter.value.filterValue];\n                } else {\n                  existingFilter.value.filterValue = uniq(\n                    existingFilter.value.filterValue.concat(filter.value.filterValue)\n                  );\n                }\n\n                existingFilter.value.namedOptions = uniq(\n                  existingFilter.value.namedOptions.concat(filter.value.namedOptions)\n                );\n              }\n\n              return result;\n            }, []);\n\n            break;\n          case ApplyGridFilterMode.Overwrite:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = filtersToApply;\n            break;\n          case ApplyGridFilterMode.Clear:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = [];\n\n            if (this.pendingFiltersToApply) {\n              this.state.advancedFiltering.selectedFilters = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.End:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n\n              this.pendingFiltersToApply = null;\n            }\n\n            break;\n        }\n\n        if (this.pendingFiltersToApply) {\n          this.pendingFiltersToApply = resultingFilters || [];\n        } else if (resultingFilters) {\n          this.onAdvancedFiltersChange(resultingFilters);\n        }\n      });\n  }\n\n  private applyPendingSelectedFilters(): void {\n    const existingFilters = cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n    forEach(this.state.advancedFiltering.pendingSelectedFilters, (pendingSelectedFilter) => {\n      const existingFilter = find(existingFilters, { filterOptionId: pendingSelectedFilter.filterOptionId });\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[pendingSelectedFilter.filterOptionId];\n\n      let filterValues = [];\n\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue, 'LTS'));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n          filterValues = [min(pendingSelectedFilter.value), max(pendingSelectedFilter.value)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) =>\n            filterValue === '$NULL$' ? 'blank' : filterValue === 1\n          );\n\n          break;\n        }\n\n        default: {\n          filterValues = uniq(pendingSelectedFilter.value.map((filterValue) => String(filterValue)));\n\n          break;\n        }\n      }\n\n      if (existingFilter) {\n        existingFilter.value.filterValue = filterValues;\n      } else {\n        pendingSelectedFilter.value = new RxRecordGridAdvancedFilterValue(filterValues);\n        existingFilters.push(pendingSelectedFilter);\n      }\n    });\n\n    this.onAdvancedFiltersChange(existingFilters);\n    this.clearSelectedCells();\n  }\n\n  private applySorting(multiSortMeta: SortMeta[]): void {\n    this.adaptTableConfig.multiSortMeta = multiSortMeta;\n    this.userPreferencesChanged$.next();\n\n    if (!this.state.useExternalFiltering) {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.data);\n    }\n  }\n\n  private applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    }\n\n    return EMPTY;\n  }\n\n  private shareViewPreset(viewPresetSelectorGuid: string): Observable<IRecordGridSharedViewPreset> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return of(this.rxRecordGridUserPreferencesService.getSharedViewPresetData());\n    }\n\n    return of(null);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => {\n        const viewPresetData = sharedViewPresets && (sharedViewPresets[this.guid] as IRecordGridSharedViewPreset);\n\n        if (viewPresetData) {\n          return this.rxRecordGridUserPreferencesService.applySharedViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid,\n            viewPresetData\n          );\n        } else {\n          return this.rxRecordGridUserPreferencesService.applyViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid\n          );\n        }\n      }),\n      take(1),\n      tap(() => {\n        this.loadRowData();\n        this.userPreferencesChanged$.next();\n        this.checkIfViewPresetEdited();\n      })\n    );\n  }\n\n  private areUserFiltersApplied(): boolean {\n    return (\n      this.isSearchApplied() ||\n      Boolean(this.state.advancedFiltering.appliedSharedFilterPreset) ||\n      !isEmpty(this.state.advancedFiltering.selectedFilters)\n    );\n  }\n\n  private isSearchApplied(): boolean {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    return Boolean(searchText);\n  }\n\n  private checkIfViewPresetEdited(): void {\n    if (this.state.viewPresetSelector && this.rxRecordGridUserPreferencesService.isCurrentViewPresetEdited()) {\n      this.state.viewPresetSelector.markAppliedViewPresetAsEdited();\n    }\n  }\n\n  private clearSelectedCells(): void {\n    last(this.popovers)?.close();\n\n    this.popovers = [];\n    this.state.advancedFiltering.pendingSelectedFilters = [];\n    this.state.advancedFiltering.selectedCardValues = {};\n  }\n\n  private compareRows(firstRow: IRowDataItem | RowDataItem, secondRow: IRowDataItem | RowDataItem): number {\n    const sortMetas = this.adaptTableConfig.multiSortMeta;\n\n    return reduce(\n      sortMetas,\n      (sortRank, sortMeta) => {\n        let firstValue;\n        let secondValue;\n\n        if (firstRow.groupField && secondRow.groupField) {\n          firstValue = firstRow.groupField === sortMeta.field ? firstRow.groupValue : null;\n          secondValue = secondRow.groupField === sortMeta.field ? secondRow.groupValue : null;\n        } else {\n          firstValue = firstRow[sortMeta.field];\n          secondValue = secondRow[sortMeta.field];\n        }\n\n        // TODO: this is a naive implementation that needs to be improved to\n        // take into account the type of data.\n        // For example, this implementation will sort dates as strings.\n        if (!isNaN(firstValue) && !isNaN(secondValue)) {\n          const firstValueNum = Number(firstValue);\n          const secondValueNum = Number(secondValue);\n\n          sortRank =\n            sortRank || sortMeta.order * (firstValueNum < secondValueNum ? -1 : firstValueNum > secondValueNum ? 1 : 0);\n        } else {\n          // toString will convert null to '' to allow comparison with strings using localeCompare\n          sortRank = sortRank || sortMeta.order * _toString(firstValue).localeCompare(_toString(secondValue));\n        }\n\n        return sortRank;\n      },\n      0\n    );\n  }\n\n  private createCsvExportFile(csvData: string): void {\n    const byteOrderMark = '\\uFEFF';\n\n    // Prepend byte order mark to indicate that csvData may contain unicode characters\n    const file = new Blob([`${byteOrderMark}${csvData}`], { type: 'text/csv;charset=utf-8' });\n\n    this.ngZone.runOutsideAngular(() => {\n      saveAs(file, `${this.getExportFileName()}.csv`);\n    });\n  }\n\n  private deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.deleteViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<void> {\n    if (this.rxRecordGridUserPreferencesService.isExistingViewPreset(viewPresetGuid)) {\n      this.rxRecordGridUserPreferencesService.discardViewPresetChanges(viewPresetGuid);\n\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    } else {\n      return EMPTY;\n    }\n  }\n\n  private enrichRowEntity(gridRowDataItem: IRowDataItem): IRowDataItem {\n    let hrefParams = {};\n\n    if (!isEmpty(this.clickableWithHrefColumnActions)) {\n      this.addSelectionFieldOptionNames(gridRowDataItem);\n\n      const expandedGridRowData: IRowDataItem = this.expandRowProperties(gridRowDataItem);\n\n      set(\n        this.clickableWithHrefActionExpressionEvaluationData,\n        `view.components.${this.guid}.clickableRow`,\n        expandedGridRowData\n      );\n\n      hrefParams = reduce(\n        this.clickableWithHrefColumnActions,\n        (result, gridActions, columnId) => {\n          const gridAction = this.findEnabledGridAction(gridActions);\n\n          if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.openView) {\n            result[`${columnId}$ROUTER_LINK$`] = this.rxViewActionUtilsService.generateViewUrl(\n              gridAction.viewDefinitionName\n            );\n\n            result[`${columnId}$QUERY_PARAMS$`] = this.evaluateViewInputParameters(gridAction.viewParams);\n          } else if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.launchUrl) {\n            result[`${columnId}$LAUNCH_URL$`] = this.rxExpressionEvaluatorService.tryEvaluate(\n              gridAction.url,\n              this.clickableWithHrefActionExpressionEvaluationData\n            );\n\n            result[`${columnId}$TARGET$`] = RX_LAUNCH_BEHAVIOR[gridAction.launchBehavior].target;\n          } else {\n            result[`${columnId}$LAUNCH_URL$`] = null;\n            result[`${columnId}$ROUTER_LINK$`] = null;\n          }\n\n          return result;\n        },\n        {}\n      );\n    }\n\n    return Object.assign(\n      {},\n      gridRowDataItem,\n      {\n        [RowDataItemIdFieldName]: gridRowDataItem[this.adaptTableConfig.primaryKey]\n      },\n      hrefParams\n    );\n  }\n\n  private expandRowProperties(rowDataItem: IRowDataItem): IRowDataItem {\n    return {\n      ...rowDataItem,\n      ...this.rxObjectUtilsService.expandProperties(rowDataItem)\n    };\n  }\n\n  private expandSelectedRowsProperties(rowDataItems: IRowDataItem[]): void {\n    forEach(rowDataItems, (rowDataItem, index) => {\n      rowDataItems[index] = this.expandRowProperties(rowDataItem);\n    });\n  }\n\n  private exportDataToCsv(cellValues: string[][], columnHeaders: string[]): void {\n    const csvSeparator = '\",\"';\n    const newLineSymbol = '\\n';\n\n    const columnHeadersString = `\"${columnHeaders.join(csvSeparator)}\"${newLineSymbol}`;\n\n    const rowsString = cellValues.map((row) => `\"${row.join(csvSeparator)}\"${newLineSymbol}`).join('');\n\n    const csvData = `${columnHeadersString}${rowsString}`;\n\n    this.createCsvExportFile(csvData);\n  }\n\n  private evaluateViewInputParameters(viewInputParams: IViewInputParams): IViewInputParams {\n    const evaluatedViewInputParams: IViewInputParams = {};\n\n    forEach(viewInputParams, (expression: string, parameterName: string) => {\n      const evaluatedExpression = this.rxExpressionEvaluatorService.tryEvaluate(\n        expression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      evaluatedViewInputParams[parameterName] = evaluatedExpression || '';\n    });\n\n    return evaluatedViewInputParams;\n  }\n\n  private filterRows(rows: IRowDataItem[]): IRowDataItem[] {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    let filteredRows = cloneDeep(rows);\n\n    if (searchText) {\n      const visibleColumns = this.getVisibleColumns();\n\n      filteredRows = filteredRows.filter((row: IRowDataItem) =>\n        some(visibleColumns, (column) => {\n          if (row.groupField) {\n            if (this.rxStringService.caseInsensitiveSearch(row.groupValue, searchText)) {\n              return true;\n            } else {\n              row.items = this.getFilteredItems(row.items, visibleColumns, searchText);\n\n              return row.items.length;\n            }\n          } else {\n            return this.rxStringService.caseInsensitiveSearch(this.getCellValue(row, column), searchText);\n          }\n        })\n      );\n    }\n\n    if (!isEmpty(this.state.advancedFiltering.selectedFilters)) {\n      filteredRows = this.rxRecordGridFilterService.filterRows(\n        filteredRows,\n        this.state.advancedFiltering.selectedFilters,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.recordGridFilterConfigs\n      );\n    }\n\n    if (this.adaptTableConfig.multiSortMeta) {\n      if (this.state.expandGroups) {\n        this.sortRows(filteredRows);\n      } else {\n        filteredRows.sort((firstRow, secondRow) => this.compareRows(firstRow, secondRow));\n      }\n    }\n\n    if (this.state.expandGroups) {\n      const getGroupItemsCount = (rowsWithGroups) => {\n        const groups = rowsWithGroups.filter((row) => row.items);\n        let count = rowsWithGroups.length - groups.length;\n\n        groups?.forEach((group) => (count += getGroupItemsCount(group.items)));\n\n        return count;\n      };\n\n      this.adaptTableConfig.totalRecords = getGroupItemsCount(filteredRows);\n    } else {\n      this.adaptTableConfig.totalRecords = filteredRows.length;\n    }\n\n    return filteredRows;\n  }\n\n  private findEnabledGridAction(gridActions: IRxRecordGridAction[]): IRxRecordGridAction {\n    return gridActions.find((gridAction: IRxRecordGridAction) => {\n      const conditionExpression = gridAction['$condition$'];\n\n      const condition = this.rxExpressionEvaluatorService.tryEvaluate(\n        conditionExpression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      return condition !== false;\n    });\n  }\n\n  private getAdvancedFilterOptions(): AdvancedFilterOption[] {\n    return reduce(\n      this.state.recordDefinition.fieldDefinitionsById,\n      (filterOptions, fieldDefinition, field) => {\n        // Due to nested structure need to check if it is a fieldDefinition\n        if (!isUndefined(fieldDefinition.id)) {\n          const gridColumn = this.adaptTableConfig.columns.find((column) => column.field === field);\n          const isHidden = !gridColumn || !gridColumn.filterable;\n          const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n          const additionalQueryCriteria = gridColumn?.additionalQueryCriteria;\n\n          if (filterConfig) {\n            filterOptions.push(\n              this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                field,\n                gridColumn ? gridColumn.header || gridColumn.fallbackTitle : fieldDefinition.name,\n                fieldDefinition,\n                filterConfig,\n                isHidden,\n                {\n                  optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n                  requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n                  inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n                  inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n                  inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n                  inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n                  inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n                  inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n                  inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n                },\n                null,\n                this.state.namedFilterOptions[field],\n                gridColumn?.typeaheadKeystrokeCount ?? null,\n                gridColumn?.filterable ? additionalQueryCriteria : null\n              )\n            );\n          }\n        }\n\n        return filterOptions;\n      },\n      [] as AdvancedFilterOption[]\n    ).sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  private getAssociationDescriptors(): Observable<IAssociationDescriptor[]> {\n    const recordDefinitionName = this.getRecordDefinitionName();\n\n    return recordDefinitionName\n      ? this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName)\n      : of([]);\n  }\n\n  private getBaseDataPageParams(): IRecordGridDataPageRequestParams {\n    const state = this.state;\n\n    const params = {\n      recorddefinition: state.recordDefinitionName\n    } as IRecordGridDataPageRequestParams;\n\n    if (Boolean(state.associationDefinitionName)) {\n      Object.assign(params, {\n        associatedRecordInstanceId: state.associatedRecordId,\n        associationDefinition: state.associationDefinitionName,\n        nodeToQuery: state.associatedRecordNodeSide,\n        recordDefinitionToQuery: state.recordDefinitionName\n      } as IRecordGridDataPageRequestParams);\n    }\n\n    if (state.associatedRoleName) {\n      params.roleName = state.associatedRoleName;\n    }\n\n    return params;\n  }\n\n  private getCellValueFormatter(column: IRecordGridColumnWithMetadata): (...args: any[]) => string {\n    const fieldDefinition = column.fieldDefinition;\n    let cellValueFormatter = (value) => value;\n\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n        cellValueFormatter = (value) => this.rxBooleanPipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.selection.resourceType: {\n        // column.fieldId should be used here because fieldId uniquely identifies the field,\n        // while fieldDefinition.id may be the same for core and associated fields\n        cellValueFormatter = (value: string) => this.selectionFieldOptionLabelsByFieldId[column.fieldId][value];\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value, 'medium');\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n        cellValueFormatter = (value) =>\n          value ? this.datePipe.transform(new Date(`2000-01-01T${value}`), 'mediumTime') : value;\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType: {\n        cellValueFormatter = (value) => {\n          const attachmentName = get(value, 'name');\n\n          return isString(attachmentName) ? attachmentName : value;\n        };\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n        const precision = (fieldDefinition as IFieldDefinition).precision;\n        const digitsInfo = isNil(precision) || precision === -1 ? null : `1.${precision}-${precision}`;\n\n        cellValueFormatter = (value) => this.decimalPipe.transform(value, digitsInfo);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType: {\n        cellValueFormatter = (value) => this.decimalPipe.transform(value);\n\n        break;\n      }\n    }\n\n    return cellValueFormatter;\n  }\n\n  private getCellValues(rows: KeyValueObject[], visibleColumns: IAdaptTableColumnConfig[]): string[][] {\n    return rows.map((row) =>\n      visibleColumns.map((visibleColumnConfig) => this.getCellValue(row as IRowDataItem, visibleColumnConfig))\n    );\n  }\n\n  private getColumns(): IRecordGridColumnPublicProperties[] {\n    return this.adaptTableConfig.columns.map((column: IAdaptTableColumnConfig) => {\n      const columnMetadata: IRecordGridColumnWithMetadata = find(this.state.columnsWithMetadata, {\n        fieldId: column.field\n      });\n\n      return {\n        field: column.field,\n        header: column.header,\n        hidden: getValueOrFunc(column.hidden),\n        fieldDefinition: columnMetadata.fieldDefinition\n      };\n    });\n  }\n\n  private getData(startIndex: number): Observable<IDataPageResult> {\n    return this.getDataBase(startIndex, false).pipe(\n      tap((dataPage: IDataPageResult) => {\n        this.cursor = dataPage.cursor || undefined;\n      })\n    );\n  }\n\n  private getDataBase(startIndex: number, onlyForTotalCount: boolean): Observable<IDataPageResult> {\n    let data$: Observable<IDataPageResult>;\n    const params = this.prepareQueryParamsAndQueryArgs(onlyForTotalCount);\n\n    if (params.queryExpression?.includes(RX_EXPRESSION_EVALUATOR.operands.undefined)) {\n      this.rxLogService.debug(`Query expression contains undefined operands: ${params.queryExpression}`);\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (\n      this.state.enableFiltering &&\n      !this.isSearchApplied() &&\n      this.state.requiredFilters > this.state.advancedFiltering.selectedFilters.length\n    ) {\n      this.rxNotificationService.addWarningMessage(\n        this.getFiltersRequiredMessage(this.state.requiredFilters),\n        this.translateService.instant('com.bmc.arsys.rx.client.common.alert.label')\n      );\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (isNumber(startIndex)) {\n      params.startIndex = startIndex;\n    }\n\n    if (startIndex === 0) {\n      delete params.cursor;\n    }\n\n    this.lastQueryExpression = params.queryExpression ?? '';\n\n    if (!onlyForTotalCount) {\n      this.lastPropertySelection = params.propertySelection;\n    }\n\n    if (this.state.getData) {\n      data$ = this.state.getData({\n        ...params,\n        searchText: get(this.adaptTableConfig.filters, 'global.value', '').toString().trim()\n      });\n    } else if (this.hasAssociationAndEmptyRecordId()) {\n      data$ = this.rxAssociationInstanceDataPageService.getEmptyDataPage();\n    } else {\n      const dataPageService = this.getDataPageService();\n\n      data$ = dataPageService.post({ params, headers: this.getHeaders() });\n    }\n\n    return data$;\n  }\n\n  private getDataCellStyle(column: IRecordGridColumnWithMetadata): IPlainObject {\n    let textAlign = '';\n\n    switch (column.alignment) {\n      case RX_RECORD_GRID.columnAlignment.left:\n        textAlign = 'left';\n        break;\n      case RX_RECORD_GRID.columnAlignment.right:\n        textAlign = 'right';\n        break;\n      case RX_RECORD_GRID.columnAlignment.center:\n        textAlign = 'center';\n        break;\n      default:\n        const rightAlignmentTypes = [\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ];\n\n        if (column.fieldDefinition.resourceType.search(rightAlignmentTypes.join('|')) !== -1) {\n          textAlign = 'right';\n        }\n\n        break;\n    }\n\n    return {\n      'text-align': textAlign\n    };\n  }\n\n  private getDataPageService(): DataPage {\n    return Boolean(this.state.associationDefinitionName)\n      ? this.rxAssociationInstanceDataPageService\n      : this.rxRecordInstanceDataPageService;\n  }\n\n  private getExportFileName(): string {\n    const date = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n\n    return `${date} Grid Data`;\n  }\n\n  private getFilteredItems(\n    items: RowDataItem,\n    visibleColumns: IAdaptTableColumnConfig[],\n    searchText: string\n  ): RowDataItem {\n    return items.filter((item: IRowDataItem) => {\n      let result;\n\n      if (item.groupField) {\n        if (this.rxStringService.caseInsensitiveSearch(item.groupValue, searchText)) {\n          result = true;\n        } else {\n          item.items = this.getFilteredItems(item.items, visibleColumns, searchText);\n\n          result = item.items.length;\n        }\n      } else {\n        result = some(visibleColumns, (visibleColumn) =>\n          this.rxStringService.caseInsensitiveSearch(this.getCellValue(item, visibleColumn), searchText)\n        );\n      }\n\n      return result;\n    });\n  }\n\n  private getFirstSelectedRow(): IRowDataItem {\n    return get(this.adaptTableConfig.selectedItems, '0', null);\n  }\n\n  private getGridColumnDefinitions(columnsWithMetadata: IRecordGridColumnWithMetadata[]): IAdaptTableColumnConfig[] {\n    const columnsConfig: IAdaptTableColumnConfig[] = [];\n\n    columnsWithMetadata\n      .slice()\n      .sort((a, b) => a.index - b.index)\n      .map((column) => {\n        let sortable: boolean;\n        const sortConfig = this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable);\n        const testId = this.rxRecordGridUtilsService.getTestIdForGridColumn(column.fieldId);\n\n        if (isObject(sortConfig)) {\n          sortable = true;\n\n          if (this.adaptTableConfig.multiSortMeta) {\n            this.adaptTableConfig.multiSortMeta.splice(sortConfig.priority, 0, {\n              field: column.fieldId,\n              order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n            });\n          } else {\n            this.adaptTableConfig.multiSortMeta = [\n              {\n                field: column.fieldId,\n                order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n              }\n            ];\n          }\n        } else {\n          sortable = sortConfig;\n        }\n\n        const isColumnWidthInPixels = endsWith(column.width, 'px');\n\n        const columnWidth =\n          this.adaptTableConfig.columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels ? null : column.width;\n\n        const columnMinWidth = (\n          isColumnWidthInPixels && parseInt(columnWidth) < RX_RECORD_GRID.defaultColumnMinWidth ? columnWidth : null\n        ) as ValueOrFunc1<`${number}px`>;\n\n        if (column.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.rowActionButtonsTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: null,\n            headerTooltip: null,\n            headerClass: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            sortable,\n            editable: false,\n            customTemplate: this.rowActionButtonsTemplate,\n            clickable: false,\n            dataCellClass: 'rx-row-action-cell',\n            isRowActionsColumn: true,\n            testId\n          });\n        } else {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.cellTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: (params: DataCellTooltipParams<IRowDataItem>) => {\n              return (this.showCellTooltip && this.getCellValue(params.dataItem, params.column)) || null;\n            },\n            headerTooltip: column.headerTooltip,\n            dataCellClass: this.getDataCellClass.bind(this),\n            dataCellStyle: this.getDataCellStyle(column),\n            headerClass: null,\n            sortable,\n            editable: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            filterName: null,\n            filterParams: null,\n            clickable: column.clickable,\n            filterType: column.filterType,\n            isDownloadableAttachment: this.isDownloadableAttachmentColumn(column),\n            clickableWithHref: column.clickableWithHref,\n            customTemplate: column.cellTemplate,\n            wrapText: column.wrapText,\n            referenced: column.referenced,\n            cellDisplayProperties: column.cellDisplayProperties,\n            typeaheadKeystrokeCount: column.typeaheadKeystrokeCount,\n            additionalQueryCriteria: column.additionalQueryCriteria,\n            testId\n          });\n\n          this.cellValueFormatters[column.fieldId] = this.getCellValueFormatter(column);\n        }\n      });\n\n    return columnsConfig;\n  }\n\n  private getGridData(loadMore?: boolean): Observable<IDataPageResult> {\n    const onRequestEnd = () => {\n      this.adaptTableConfig.isLoadingData = false;\n      this.adaptTableConfig.isLoadingMoreData = false;\n    };\n\n    this.adaptTableConfig.isLoadingData = true;\n\n    return this.getData(loadMore ? this.adaptTableConfig.data.length : 0).pipe(\n      tap((res) => {\n        onRequestEnd();\n\n        const mappedData: IRowDataItem[] = res.data.map(this.enrichRowEntity.bind(this));\n\n        if (this.state.useExternalFiltering) {\n          if (loadMore) {\n            this.adaptTableConfig.data = this.adaptTableConfig.data.concat(mappedData);\n\n            if (mappedData.length === 0 || mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = this.adaptTableConfig.data.length;\n            }\n          } else {\n            this.adaptTableConfig.data = mappedData;\n\n            if (mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = mappedData.length;\n            } else {\n              this.adaptTableConfig.totalRecords = null;\n            }\n          }\n        } else {\n          this.adaptTableConfig.originalRows = mappedData;\n          this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n        }\n\n        if (this.state.expandGroups) {\n          this.adaptTableConfig.expandedGroupsKeys = {};\n\n          const expandGroupsDeep = (rows) => {\n            rows.forEach((row) => {\n              if (row.items) {\n                const expandedGroupKey = this.adaptTableConfig.expandedGroupsKeys[row.groupField];\n\n                if (expandedGroupKey) {\n                  expandedGroupKey[row.groupValue] = true;\n                } else {\n                  this.adaptTableConfig.expandedGroupsKeys[row.groupField] = { [row.groupValue]: true };\n                }\n\n                expandGroupsDeep(row.items);\n              }\n            });\n          };\n\n          expandGroupsDeep(this.adaptTableConfig.data);\n        }\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.notifyPropertyChanged('totalRowCount', this.adaptTableConfig.data.length);\n        this.notifyPropertyChanged('queryExpression', this.lastQueryExpression);\n        this.notifyPropertyChanged('lastRefreshTime', new Date().toISOString());\n\n        if (!loadMore) {\n          this.onRowsSelectionChange([]);\n          this.scrollToTop();\n        }\n\n        this.setSelectedFilteredRowsCount();\n\n        this.dataLoaded.emit();\n\n        this.dataLoadContextSubject.next({\n          associatedRecordId: this.state.associatedRecordId,\n          associatedRoleName: this.state.associatedRoleName,\n          filterExpression: this.state.filterExpression,\n          namedFilterOptions: this.state.namedFilterOptions\n        });\n\n        this.changeDetector.markForCheck();\n      }),\n      catchError((err) => {\n        onRequestEnd();\n\n        return throwError(err);\n      })\n    );\n  }\n\n  private getHeaders(): IPlainObject {\n    return {\n      'Should-Query-All-Locales': this.state.showDataForAllLocales ? 'true' : []\n    };\n  }\n\n  private getNamedFilterOptionsState(\n    columns: { predefinedFilterPresets?: IRecordGridColumnNamedFilterOption[]; fieldId: string }[]\n  ): IRecordGridNamedFilterOptionsMap {\n    return columns.reduce((result, col) => {\n      if (col.predefinedFilterPresets) {\n        result[col.fieldId] = col.predefinedFilterPresets.sort((a, b) => a.index - b.index);\n      }\n\n      return result;\n    }, {});\n  }\n\n  private getProgrammaticActionButtons(\n    recordGridActionButtons: IRecordGridActionButton[]\n  ): IChildComponentData<IRecordGridActionButton>[] {\n    return recordGridActionButtons.map((actionButton): IChildComponentData<IRecordGridActionButton> => {\n      let actionButtonConfig: Observable<IRecordGridActionButton>;\n\n      if (isFunction(actionButton.disabled) || isFunction(actionButton.hidden)) {\n        actionButtonConfig = this.rowSelectionChanged.pipe(\n          map((selectedItems) => {\n            return {\n              ...actionButton,\n              disabled: isFunction(actionButton.disabled)\n                ? actionButton.disabled(selectedItems)\n                : actionButton.disabled,\n              hidden: isFunction(actionButton.hidden) ? actionButton.hidden(selectedItems) : actionButton.hidden\n            };\n          })\n        );\n      } else {\n        actionButtonConfig = of(actionButton);\n      }\n\n      return {\n        guid: actionButton.guid,\n        config: actionButtonConfig,\n        runtimeViewModelApi: {\n          triggerViewActions: (guid, viewActionTriggerEventName) =>\n            this.executeViewActions(actionButton.guid, get(actionButton, 'actions'), this.state.lastActionRow)\n        } as RuntimeViewModelApi,\n        factory: null,\n        outlets: null\n      };\n    });\n  }\n\n  private getRecordDefinition(): Observable<IRecordDefinition> {\n    if (this.state.getRecordDefinition) {\n      return this.state\n        .getRecordDefinition()\n        .pipe(\n          tap((recordDefinition: IRecordDefinition) =>\n            this.rxRecordDefinitionService.applyLocalization(recordDefinition)\n          )\n        );\n    }\n\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(this.state.recordDefinitionName);\n  }\n\n  private getRecordDefinitionName(): string {\n    return this.state.recordDefinitionName;\n  }\n\n  private getSelectedRowCount(): number {\n    return this.adaptTableConfig.selectedItems.length;\n  }\n\n  private getSelectedRows(inSortOrder = false): IRowDataItem[] {\n    if (inSortOrder) {\n      // returns selected rows in order of sorting applied to grid\n      return intersectionBy(this.adaptTableConfig.data, this.adaptTableConfig.selectedItems, RowDataItemIdFieldName);\n    } else {\n      // returns selected rows in order of selection\n      return this.adaptTableConfig.selectedItems;\n    }\n  }\n\n  private getTotalRowCount(): Observable<IDataPageResult> {\n    return this.getDataBase(null, true);\n  }\n\n  private getVirtualRowHeight(): number {\n    if (!this.adaptTableConfig.cardLayoutColumns?.length) {\n      return RX_RECORD_GRID.defaultRowHeight;\n    }\n\n    const singleRowHeight = 32;\n    const padding = 3;\n\n    return singleRowHeight * this.visibleColumns.length + 2 * padding;\n  }\n\n  private hasAssociationAndEmptyRecordId() {\n    return Boolean(this.state.associationDefinitionName) && !this.state.associatedRecordId;\n  }\n\n  private initActionButtons() {\n    if (this.isProgrammaticUse) {\n      this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n    } else {\n      this.actionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private initAdvancedFilterTexts(): void {\n    this.state.advancedFiltering.filterTexts = {\n      initialDropdownAnchorLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.filter-data.label')\n    };\n  }\n\n  private initCustomTexts(): void {\n    this.adaptTableConfig.texts = {\n      searchPlaceholder: this.state.searchFieldPlaceholderText,\n      emptyStateLabelText: this.state.emptyStateLabelText,\n      emptyStateWithFilterLabelText: this.state.emptyStateWithFilterLabelText,\n      exportEntireDocument: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-all-rows.label'\n      ),\n      exportSelected: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n      )\n    };\n  }\n\n  private initGrid(): Observable<any> {\n    this.state.guid = this.guid;\n\n    return forkJoin([\n      this.rxGridConfiguratorService.getColumnsWithMetadata(this.guid, this.state.columns, this.state.recordDefinition),\n      this.guid && this.state.enableFiltering ? this.getSharedFilterPresets() : of(null)\n    ]).pipe(\n      switchMap(([columnsWithMetadata, sharedFilterPresets]) => {\n        this.state.columnsWithMetadata = columnsWithMetadata;\n        this.state.namedFilterOptions = this.getNamedFilterOptionsState(columnsWithMetadata);\n\n        this.isUserAllowedToDeleteRecords = this.state.recordDefinition\n          ? this.state.recordDefinition.allowNonAdminToDeleteRecordInstances !== false ||\n            this.rxCurrentUserService.isAdministrator()\n          : false;\n\n        this.notifyPropertyChanged('isUserAllowedToDeleteRecords', this.isUserAllowedToDeleteRecords);\n\n        this.addAssociationFieldsToRecordDefinition(columnsWithMetadata);\n\n        // this has to be set prior to calling getGridColumnDefinitions\n        this.selectionFieldOptionLabelsByFieldId =\n          this.rxGridConfiguratorService.getSelectionFieldOptionLabelsByFieldId(\n            this.state.columns,\n            this.state.recordDefinition\n          );\n\n        this.adaptTableConfig.columnResizeMode = this.state.expandable ? ResizeMode.Expand : ResizeMode.Fit;\n        this.adaptTableConfig.columns = this.getGridColumnDefinitions(columnsWithMetadata);\n        this.state.advancedFiltering.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n        this.state.advancedFiltering.filterOptions = this.getAdvancedFilterOptions();\n\n        this.state.advancedFiltering.filterOptions.push({\n          id: RX_RECORD_GRID.externalPresetFilterOptionId,\n          label: RX_RECORD_GRID.externalPresetFilterOptionId,\n          dataType: AdvancedFilterOptionDataType.custom,\n          isHidden: true,\n          customConfig: {\n            getTagText: (value) =>\n              this.state.advancedFiltering.savedFilters.find((savedFilter) => savedFilter.id === value)?.name\n          }\n        });\n\n        this.adaptTableConfig.rowSelectionMode = this.state.enableRowSelection;\n        this.adaptTableConfig.primaryKey = this.state.recordIdField;\n        this.adaptTableConfig.bordered = this.state.bordered;\n        this.adaptTableConfig.striped = this.state.striped;\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.state.initialFilters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          this.state.filters,\n          this.state.recordGridFilters\n        );\n\n        this.clickableWithHrefColumnActions = reduce(\n          columnsWithMetadata,\n          (result, column: IRecordGridColumnWithMetadata) => {\n            if (column.clickableWithHref) {\n              result[column.fieldId] = column.actions;\n            }\n\n            return result;\n          },\n          {}\n        );\n\n        if (!isEmpty(this.clickableWithHrefColumnActions)) {\n          this.clickableWithHrefActionExpressionEvaluationData = {\n            view: {\n              components: {\n                [this.guid]: {\n                  recordDefinition: this.state.recordDefinition\n                }\n              },\n\n              inputParams: this.runtimeViewModelApi.getViewInputParameters()\n            }\n          };\n        }\n\n        if (this.guid) {\n          return this.rxRecordGridUserPreferencesService.applyUserPreferences(\n            this.adaptTableConfig,\n            this.state.columnsWithMetadata,\n            this.state,\n            sharedFilterPresets\n          );\n        }\n\n        return of(null);\n      }),\n      tap(() => {\n        this.sortedColumnsByTitle = this.getSortedColumnsByTitle();\n        this.filteredVisibleColumns = this.sortedColumnsByTitle;\n        this.visibleColumns = this.getVisibleColumns();\n        this.isFilterBySelectionButtonVisible = this.state.enableFiltering && some(this.visibleColumns, 'filterable');\n        this.initActionButtons();\n        this.initRowActionButtons();\n\n        if (!this.state.viewPresetSelector) {\n          // #ADAPT-8052 workaround.\n          this.avoidSystemColumnExpansion();\n\n          this.loadRowData();\n        }\n\n        this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n        this.updateAdaptTableFilters();\n      })\n    );\n  }\n\n  // #ADAPT-8052 workaround. System column width changes when removing a column from the grid.\n  // If all columns have custom width in percents, proportionally increase the width of all columns.\n  // If all columns have custom width in pixels, change the largest column width property to auto-expandable (width = null).\n  // If % and px are both used, change the largest column width in % to auto-expandable (width= null).\n  // If Actions column has customized width, avoid width change when possible. Preserving width in pixels is in priority.\n  // Note:\n  // Those column width modifications applied during initial rendering of the grid are not saved to User preferences,\n  // because it is not the user intention but a workaround.\n  private avoidSystemColumnExpansion() {\n    if (this.adaptTableConfig.cardLayoutColumns) {\n      this.avoidSystemCardColumnExpansion();\n\n      return;\n    }\n\n    const columnsWithWidthInPixels: IAdaptTableColumnConfig[] = [];\n    const columnsWithWidthInPercent: IAdaptTableColumnConfig[] = [];\n\n    const visibleActionsColumn: IAdaptTableColumnConfig = find(this.adaptTableConfig.columns, {\n      field: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n      hidden: false\n    });\n\n    let maxWidthInPixels = 0;\n    let maxWidthInPercent = 0;\n    let totalWidthInPercent = 0;\n\n    const isEveryVisibleColumnWithCustomWidth = this.adaptTableConfig.columns.every(\n      (column: IAdaptTableColumnConfig) => {\n        if (!column.hidden) {\n          if (isNil(column.width)) {\n            return false;\n          }\n\n          const columnWidth = parseFloat(column.width);\n\n          if (column.width.endsWith('px')) {\n            columnsWithWidthInPixels.push(column);\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPixels = Math.max(maxWidthInPixels, columnWidth);\n            }\n          } else {\n            columnsWithWidthInPercent.push(column);\n            totalWidthInPercent += columnWidth;\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPercent = Math.max(maxWidthInPercent, columnWidth);\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (isEveryVisibleColumnWithCustomWidth && totalWidthInPercent < 100) {\n      const hasColumnsWithWidthInPercent = Boolean(columnsWithWidthInPercent.length);\n      const hasColumnsWithWidthInPixels = Boolean(columnsWithWidthInPixels.length);\n\n      if (hasColumnsWithWidthInPercent && !hasColumnsWithWidthInPixels) {\n        columnsWithWidthInPercent.forEach((column) => {\n          column.width = `${((parseFloat(column.width) / totalWidthInPercent) * 100).toFixed(4)}%`;\n        });\n      }\n\n      if (!hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPixels.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPixels, (column) => {\n            if (parseInt(column.width) === maxWidthInPixels && column !== visibleActionsColumn) {\n              column.width = null;\n              column.minWidth = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n\n      if (hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPercent.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPercent, (column) => {\n            if (parseFloat(column.width) === maxWidthInPercent && column !== visibleActionsColumn) {\n              column.width = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n    }\n  }\n\n  // This is a workaround for Adapt defect on System column (checkbox)\n  // when the user is using an Ios device and the grid is in card mode.\n  // It seems setting the columns in % does not work correctly, in the case of\n  // card display we have only two columns with 35% and 65%, however\n  // the Adapt grid tries to display the cards around 50% each.\n  // For example for an Iphone 14 Pro on Xcode simulator the grid total size is 359px:\n  // -> 96.31px for the system column (instead of 33px),\n  // -> 130.34px for the second column,\n  // -> 131.34px for the third column,\n  // In order to \"fix\" the issue, the user has to \"tap\" on the separator\n  // between columns 2 and 3, which then seems to \"redraw\" the grid.\n  // Workaround:\n  // Setting the values of both columns in px instead of % solves the problem.\n  // For now, we only apply this workaround on ios platform.\n  private avoidSystemCardColumnExpansion() {\n    if (!this.adaptDeviceDetectionService.iosPlatform()) {\n      return;\n    }\n\n    const adaptSystemColumnWidth = 33;\n\n    const availableColumnWidth =\n      this.adaptTable.dataHeaderCells.reduce((accum, cell) => accum + cell.element.nativeElement.offsetWidth, 0) -\n      adaptSystemColumnWidth;\n\n    this.adaptTableConfig.cardLayoutColumns.forEach((column: IAdaptTableColumnConfig) => {\n      column.width = `${((parseFloat(column.width) * availableColumnWidth) / 100).toFixed(4)}px`;\n    });\n  }\n\n  private initRecordDefinitions(): Observable<IRecordDefinition> {\n    this.setRecordDefinition(null);\n    this.state.associationDescriptors = [];\n\n    const hasAssociatedRecordFieldColumns = some(this.state.columns, (column) =>\n      this.rxRecordGridUtilsService.isAssociatedRecordFieldId(column.fieldId)\n    );\n\n    return forkJoin([\n      this.getRecordDefinition(),\n      hasAssociatedRecordFieldColumns ? this.getAssociationDescriptors() : of([])\n    ]).pipe(\n      tap(([recordDefinition, associationDescriptors]) => {\n        this.setRecordDefinition(recordDefinition);\n        this.state.associationDescriptors = associationDescriptors;\n      }),\n      map(([recordDefinition]) => recordDefinition)\n    );\n  }\n\n  private initRowActionButtons(): void {\n    if (this.isProgrammaticUse) {\n      this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n    } else {\n      this.rowActionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_RECORD_GRID.rowActionsOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private isDownloadableAttachmentColumn(column: IRecordGridColumnWithMetadata): boolean {\n    const recordDefinitionType = get(this.state.recordDefinition, 'resourceType');\n    const fieldDefinitionType = get(column, 'fieldDefinition.resourceType');\n\n    return (\n      !this.isProgrammaticUse &&\n      (recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType ||\n        recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) &&\n      fieldDefinitionType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType\n    );\n  }\n\n  private isRangeFilter(fieldId: string): boolean {\n    const rangeFields = [\n      RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.real.resourceType\n    ];\n\n    const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n    return includes(rangeFields, fieldDefinition.resourceType);\n  }\n\n  private isSharedFilterPreset(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): savedFilter is IRxRecordGridSharedFilterPreset {\n    return Boolean((savedFilter as IRxRecordGridSharedFilterPreset).filterExpression);\n  }\n\n  private loadRowData(loadMore?: boolean): void {\n    this.getGridData(loadMore).subscribe();\n  }\n\n  private openSortByDialogFn(config: any): Promise<any> {\n    this.cardLayoutOpenedModal = this.adaptModalService.open(config);\n\n    return this.cardLayoutOpenedModal;\n  }\n\n  private prepareQueryParamsAndQueryArgs(onlyForTotalCount: boolean): IRecordGridDataPageRequestParams {\n    const primaryKey = this.adaptTableConfig.primaryKey;\n\n    const queryParams: IRecordGridDataPageRequestParams = {\n      ...this.getBaseDataPageParams(),\n      shouldIncludeTotalSize: onlyForTotalCount,\n      pageSize: onlyForTotalCount ? 0 : this.adaptTableConfig.rows,\n      startIndex: onlyForTotalCount ? 0 : this.adaptTableConfig.first\n    };\n\n    if (this.cursor && !onlyForTotalCount) {\n      queryParams.cursor = this.cursor;\n    }\n\n    if (!onlyForTotalCount) {\n      queryParams.propertySelection = chain(\n        this.adaptTableConfig.columns\n          .filter(\n            (col) => !col.isRowActionsColumn && (this.state.getDataForHiddenColumns || !col.hidden || col.referenced)\n          )\n          .map((col) => col.field)\n      )\n        .union([primaryKey])\n        .value();\n    }\n\n    const multiSortMeta = this.adaptTableConfig.multiSortMeta;\n\n    if (!onlyForTotalCount && multiSortMeta && multiSortMeta.length) {\n      queryParams.sortBy = multiSortMeta.map((metaItem) =>\n        metaItem.order === SortOrder.Asc ? `${metaItem.field}` : `-${metaItem.field}`\n      );\n    }\n\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    const textSearchQuery = this.rxRecordGridFilterService.generateTextFilterQuery(\n      searchText,\n      this.adaptTableConfig.columns\n    );\n\n    const appliedSharedFilterPreset = this.state.advancedFiltering.appliedSharedFilterPreset;\n\n    const sharedFilterPresetExpression =\n      appliedSharedFilterPreset && appliedSharedFilterPreset.filterExpression\n        ? `(${appliedSharedFilterPreset.filterExpression})`\n        : null;\n\n    const resultingQuery = this.rxRecordGridFilterService.addQueries(\n      this.rxRecordGridFilterService.getQueryFromRecordGridFilterData(\n        this.state.initialFilters,\n        this.state.recordDefinition.fieldDefinitionsById\n      ),\n      this.buildQueryByAdvancedFilters(this.state.advancedFiltering.selectedFilters),\n      textSearchQuery,\n      this.state.filterExpression,\n      sharedFilterPresetExpression\n    );\n\n    if (resultingQuery) {\n      queryParams.queryExpression = resultingQuery;\n    }\n\n    return queryParams;\n  }\n\n  private refresh(): Observable<never> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => this.getGridData()),\n      switchMapTo(EMPTY)\n    );\n  }\n\n  private saveViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.saveViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private scrollToTop(): void {\n    if (this.adaptTable) {\n      const scrollableBodyElement = this.adaptTable.getScrollableBodyElement();\n\n      if (scrollableBodyElement) {\n        scrollableBodyElement.scrollTop = 0;\n      }\n    }\n  }\n\n  private setFilter(newFilter: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.selectedFilters = newFilter;\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    this.state.recordDefinition = cloneDeep(recordDefinition);\n\n    if (recordDefinition) {\n      this.state.recordDefinition.fieldDefinitionsById = this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(\n        this.state.recordDefinition\n      );\n    }\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private setSelectedFilteredRowsCount(): void {\n    this.selectedFilteredRowsCount = this.adaptTable.hasFilter() ? this.getSelectedRows().length : 0;\n  }\n\n  private sortRows(rows: RowDataItem[]): void {\n    rows.sort((firstRow: RowDataItem, secondRow: RowDataItem) => this.compareRows(firstRow, secondRow));\n\n    forEach(rows, (row) => {\n      if (row.items?.length) {\n        this.sortRows(row.items);\n      }\n    });\n  }\n\n  private toggleCellSelection(\n    columns: IAdaptTableColumnConfig[],\n    rowItem: IRowDataItem,\n    popover: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    if (this.state.enableFiltering) {\n      if (!isCardLayout) {\n        const column = columns[0];\n\n        if (column.filterable) {\n          const existingPendingFilter = find(this.state.advancedFiltering.pendingSelectedFilters, {\n            filterOptionId: column.field\n          });\n\n          const filterValue = !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n          const isRangeFilter = this.isRangeFilter(column.field);\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          const isFilterAvailable = !(\n            (isRangeFilter && existingPendingFilter && existingPendingFilter.value.length === 2) ||\n            (isRequiredBooleanFilter && existingPendingFilter) ||\n            (filterValue === '$NULL$' && (isRangeFilter || isRequiredBooleanFilter))\n          );\n\n          if (existingPendingFilter) {\n            if (this.isCellSelected(popover)) {\n              const elementIndex = findIndex(existingPendingFilter.value, filterValue);\n\n              existingPendingFilter.value.splice(elementIndex, 1);\n              this.trackPopoverAnchor(popover);\n\n              if (!existingPendingFilter.value.length) {\n                remove(this.state.advancedFiltering.pendingSelectedFilters, existingPendingFilter);\n              }\n            } else if (isFilterAvailable) {\n              existingPendingFilter.value.push(filterValue);\n              this.trackPopoverAnchor(popover);\n            }\n          } else if (isFilterAvailable) {\n            const selectedFilter = {\n              filterOptionId: column.field,\n              value: [filterValue]\n            };\n\n            this.state.advancedFiltering.pendingSelectedFilters.push(selectedFilter);\n            this.trackPopoverAnchor(popover);\n          }\n        }\n      } else {\n        const filterableColumns = columns.filter((column) => {\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          return column.filterable && !isRequiredBooleanFilter;\n        });\n\n        const isCellSelected = this.isCellSelected(popover);\n\n        forEach(filterableColumns, (column) => {\n          if (column.filterable) {\n            const filterValue =\n              !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n\n            if (!this.state.advancedFiltering.selectedCardValues[column.field]) {\n              this.state.advancedFiltering.selectedCardValues[column.field] = [filterValue];\n            } else if (isCellSelected) {\n              remove(this.state.advancedFiltering.selectedCardValues[column.field], filterValue);\n            } else {\n              this.state.advancedFiltering.selectedCardValues[column.field].push(filterValue);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  private trackPopoverAnchor(cellPopover: AdaptPopoverDirective): void {\n    if (this.isCellSelected(cellPopover)) {\n      const isCurrentPopoverLast = cellPopover === last(this.popovers);\n\n      remove(this.popovers, cellPopover);\n\n      if (isCurrentPopoverLast) {\n        cellPopover.close();\n\n        last(this.popovers)?.open();\n      }\n    } else {\n      last(this.popovers)?.close();\n\n      this.popovers.push(cellPopover);\n      cellPopover.open();\n    }\n  }\n\n  private updateAdaptTableFilters(): void {\n    const globalFilter = this.adaptTable.filters.global;\n\n    this.adaptTable.filters = this.areUserFiltersApplied() ? { dummyFilter: {} } : {};\n\n    if (globalFilter) {\n      this.adaptTable.filters.global = globalFilter;\n    }\n  }\n\n  private updateToolbarItems(): void {\n    if (this.adaptTable) {\n      const toolbarComponent = this.adaptTable.toolbarComponent as AdaptTableToolbarComponent;\n\n      const filterSection = toolbarComponent.toolbarContentItems.find(\n        (toolbarContentItem) => toolbarContentItem.adaptToolbarItem === ToolbarItemsByPriority.FILTER\n      );\n\n      setTimeout(() => {\n        // don't update toolbar items when filter is hidden\n        if (filterSection && !filterSection.itemContext.hidden) {\n          toolbarComponent.updateToolbarItems();\n        }\n      });\n    }\n  }\n\n  private getExportSelectedText(selectedItems: IRowDataItem[]): string {\n    return selectedItems.length > 1 ? this.exportSelectedRowsText : this.exportSelectedRowText;\n  }\n\n  private getFiltersRequiredMessage(requiredFiltersCount: number): string {\n    return requiredFiltersCount > 1\n      ? this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filters-warning.message',\n          {\n            requiredFiltersCount: requiredFiltersCount\n          }\n        )\n      : this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filter-warning.message'\n        );\n  }\n}\n","<adapt-table\n  #adaptTable\n  rxCardLayout\n  scrollHeight=\"flex\"\n  (changedCardLayout)=\"onChangedCardLayout($event)\"\n  [cardLayoutWidth]=\"state.cardLayoutWidth\"\n  [cardLayoutFieldsHeaderTemplate]=\"cardLayoutFieldsHeaderTemplate\"\n  [cardLayoutFieldsDataCellTemplate]=\"cardLayoutFieldsDataCellTemplate\"\n  [cardLayoutValuesDataCellTemplate]=\"cardLayoutValuesDataCellTemplate\"\n  [cardLayoutValuesHeaderTemplate]=\"cardLayoutValuesHeaderTemplate\"\n  [cardLayoutRecordGridElementRef]=\"elementRef\"\n  [cardLayoutGetDataCellClass]=\"getDataCellClassBind\"\n  [value]=\"adaptTableConfig.data\"\n  [columns]=\"adaptTableConfig.cardLayoutColumns || adaptTableConfig.columns\"\n  [rows]=\"adaptTableConfig.rows\"\n  [first]=\"adaptTableConfig.first\"\n  [scrollable]=\"adaptTableConfig.scrollable\"\n  [sortable]=\"true\"\n  [rowExpandMode]=\"\"\n  [sortMode]=\"'multiple'\"\n  [resizableColumns]=\"true\"\n  [columnResizeMode]=\"adaptTableConfig.columnResizeMode\"\n  [selectionMode]=\"adaptTableConfig.rowSelectionMode\"\n  [selection]=\"adaptTableConfig.selectedItems\"\n  [toolbarConfig]=\"adaptTableConfig.toolbarConfig\"\n  [filterable]=\"adaptTableConfig.filterable\"\n  [filters]=\"adaptTableConfig.filters\"\n  [multiSortMeta]=\"adaptTableConfig.multiSortMeta\"\n  [dataKey]=\"adaptTableConfig.primaryKey\"\n  [bordered]=\"adaptTableConfig.bordered\"\n  [totalRecords]=\"adaptTableConfig.totalRecords\"\n  [totalRecordsInGroup]=\"state.expandGroups ? adaptTableConfig.totalRecords : 0\"\n  [lazy]=\"true\"\n  [lazyLoadOnInit]=\"false\"\n  [loading]=\"adaptTableConfig.isLoadingData\"\n  [enableInfiniteScrolling]=\"true\"\n  [expandedGroupsKeys]=\"adaptTableConfig.expandedGroupsKeys\"\n  [loadingMore]=\"adaptTableConfig.isLoadingMoreData\"\n  [suppressTooltip]=\"false\"\n  [virtualScroll]=\"adaptTableConfig.virtualScroll\"\n  [virtualRowHeight]=\"adaptTableConfig.virtualRowHeight\"\n  (selectionChange)=\"onRowsSelectionChange($event)\"\n  (onSort)=\"onSort($event)\"\n  (onLazyLoad)=\"onLazyLoad($event)\"\n  (onColReorder)=\"onColReorder($event)\"\n  [striped]=\"adaptTableConfig.striped\"\n  [texts]=\"adaptTableConfig.texts\"\n  (onColResize)=\"onColumnResize()\"\n  (export)=\"onExport($event)\"\n  [selectedFilteredRowsCount]=\"selectedFilteredRowsCount\"\n  [headerSelectionMode]=\"adaptTableHeaderSelectionMode\"\n  (onHeaderCheckboxToggle)=\"handleHeaderCheckboxToggle($event)\"\n></adapt-table>\n\n<ng-template #visibleColumnsMenuTemplate>\n  <adapt-rx-search\n    [(ngModel)]=\"columnSearchText\"\n    [placeholder]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.search.placeholder' | translate\n    \"\n    [autofocus]=\"true\"\n    (ngModelChange)=\"onSearchColumns()\"\n  >\n  </adapt-rx-search>\n  <div\n    class=\"dropdown-item visible-columns-item px-3\"\n    *ngFor=\"let column of filteredVisibleColumns; trackBy: trackByColumnField\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <adapt-rx-checkbox\n      class=\"m-0 adapt-table-toolbar__column-visibility-control\"\n      [label]=\"column.header || column.fallbackTitle\"\n      [ngModel]=\"!column.hidden\"\n      (ngModelChange)=\"onColumnVisibilityChange($event, column)\"\n    ></adapt-rx-checkbox>\n  </div>\n  <adapt-empty-state\n    *ngIf=\"!filteredVisibleColumns.length\"\n    [type]=\"'search'\"\n    [label]=\"'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.empty.label' | translate\"\n  >\n  </adapt-empty-state>\n</ng-template>\n\n<ng-template #rightCustomSectionTemplate>\n  <div class=\"px-2\" rx-id=\"selected-row-count\">\n    <ng-container *ngIf=\"isTotalRecordCountKnown\">\n      {{ getMultipleRowsSelectedText() }}\n    </ng-container>\n\n    <ng-container *ngIf=\"!isTotalRecordCountKnown\">\n      <div class=\"d-flex align-items-center\">\n        {{ getMultipleRowsSelectedTextFirstPart() }}\n        <button type=\"button\" class=\"btn btn-link p-0 mx-1\" (click)=\"loadTotalRowCount()\">\n          {{ getLoadRecordCountLinkText() }}\n        </button>\n        {{ getMultipleRowsSelectedTextSecondPart() }}\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #leftCustomSectionTemplate>\n  <div [adaptSubnav] *ngIf=\"shouldDisplayActionButtons\" class=\"pl-1 w-100 align-items-center\">\n    <div [adaptSubnavItem]=\"actionButtonTemplate\" *ngFor=\"let actionButton of actionButtons\">\n      <ng-template #actionButtonTemplate let-hidden>\n        <rx-action-button\n          class=\"m-1\"\n          [guid]=\"actionButton.guid\"\n          [config]=\"getActionButtonConfig(hidden, actionButton.config)\"\n          [runtimeViewModelApi]=\"actionButton.runtimeViewModelApi\"\n        ></rx-action-button>\n      </ng-template>\n    </div>\n\n    <div [adaptSubnavDropdown]>\n      <button type=\"button\" class=\"btn btn-secondary btn-xs d-icon-triangle_down ml-1\"></button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #filterTemplate let-context>\n  <button\n    type=\"button\"\n    class=\"btn btn-link d-icon-refresh grid-toolbar-icon ml-2 p-1\"\n    [ngClass]=\"{ 'd-block': context.hidden }\"\n    rx-id=\"refresh-button\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.refresh.label' | translate\"\n    (click)=\"onRefreshClick()\"\n  ></button>\n\n  <adapt-advanced-filter\n    #adaptAdvancedFilter\n    *ngIf=\"state.enableFiltering\"\n    class=\"ml-2\"\n    [ngClass]=\"{ 'd-inline-block': context.hidden, 'd-block': !context.hidden }\"\n    [appendDropdownToBody]=\"true\"\n    [texts]=\"state.advancedFiltering.filterTexts\"\n    [showAnchorButtonLabel]=\"!context.collapsed\"\n    [filterOptions]=\"state.advancedFiltering.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"state.advancedFiltering.selectedFilters\"\n    [savedFilters]=\"state.advancedFiltering.savedFilters\"\n    [enableSavedFilters]=\"!!guid && state.enableFilterPresets\"\n    (deleteSavedFilter)=\"onDeleteSavedFilterPreset($event)\"\n    (createNewFilter)=\"onCreateNewFilterPreset($event)\"\n    (updateSavedFilter)=\"onUpdateSavedFilterPreset($event)\"\n    [activeSavedFilter]=\"state.advancedFiltering.activeSavedFilter\"\n    (activeSavedFilterChange)=\"onActiveSavedAdvancedFilterChange($event)\"\n    (beforeActiveSavedFilterChange)=\"onBeforeActiveSavedFilterChange($event)\"\n    (editSavedFilterClick)=\"onEditSavedFilterClick($event)\"\n    [isLoading]=\"state.advancedFiltering.isLoading\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    (filterExpressionTagsChanged)=\"onAdvancedFilterExpressionTagsChanged($event)\"\n    [applyFiltersByUserAction]=\"true\"\n  ></adapt-advanced-filter>\n\n  <span\n    *ngIf=\"(context.collapsed || context.hidden) && state.advancedFiltering.toolbarTags.length\"\n    class=\"btn-link ml-1\"\n    >{{\n      'com.bmc.arsys.rx.client.view-components.record-grid.filters.number-of-active-filters.label'\n        | translate: { count: state.advancedFiltering.toolbarTags.length }\n    }}</span\n  >\n\n  <rx-filter-tags\n    class=\"ml-2\"\n    [hidden]=\"context.collapsed || context.hidden\"\n    [tags]=\"state.advancedFiltering.toolbarTags\"\n    [tagsLimit]=\"state.filterTagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n  ></rx-filter-tags>\n</ng-template>\n\n<ng-template #cellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div\n    *ngIf=\"column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    [rxCellDisplayProps]=\"column.cellDisplayProperties\"\n    [rxCellDisplayPropsBadgeElem]=\"badgeElem\"\n    [rxCellDisplayPropsDataItem]=\"dataItem\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span #badgeElem (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n\n  <div\n    *ngIf=\"!column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #defaultCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container\n    *ngIf=\"\n      (!column.clickable ||\n        (column.clickableWithHref &&\n          !dataItem[column.field + '$ROUTER_LINK$'] &&\n          !dataItem[column.field + '$LAUNCH_URL$'])) &&\n      !column.isDownloadableAttachment\n    \"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\"> {{ getCellValue(dataItem, column) }}</span>\n  </ng-container>\n\n  <a\n    tabindex=\"0\"\n    class=\"attachment-link\"\n    *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n    (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n    (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    tabindex=\"0\"\n    class=\"no-href-link\"\n    *ngIf=\"column.clickable && !column.clickableWithHref\"\n    (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n    (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n    [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n    [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n    [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n    [target]=\"dataItem[column.field + '$TARGET$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n</ng-template>\n\n<ng-template #cardLayoutFieldsHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutValuesHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutFieldsDataCellTemplate>\n  <div class=\"rx-card-layout-cell\" (click)=\"onCellClick($event)\">\n    <div\n      class=\"rx-card-layout-cell-item\"\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      [attr.data-testid]=\"column.testId + '-name'\"\n    >\n      {{ column.header || column.fallbackTitle }}:\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutValuesDataCellTemplate let-dataItem=\"dataItem\">\n  <div class=\"rx-card-layout-cell-values rx-card-layout-cell\">\n    <div\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      class=\"rx-card-layout-cell-item\"\n      [attr.data-testid]=\"column.testId + '-value'\"\n    >\n      <div *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: dataItem }\"\n        ></ng-container>\n      </div>\n      <div\n        *ngIf=\"\n          (!column.clickable ||\n            (column.clickableWithHref &&\n              !dataItem[column.field + '$ROUTER_LINK$'] &&\n              !dataItem[column.field + '$LAUNCH_URL$'])) &&\n          !column.isDownloadableAttachment &&\n          !column.isRowActionsColumn\n        \"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </div>\n      <a\n        *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n        tabindex=\"0\"\n        class=\"attachment-link\"\n        (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n        (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        tabindex=\"0\"\n        *ngIf=\"column.clickable && !column.clickableWithHref\"\n        class=\"no-href-link\"\n        (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n        (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n        [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n        [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n        [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n        [target]=\"dataItem[column.field + '$TARGET$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n    </div>\n  </div>\n\n  <button\n    *ngIf=\"isFilterBySelectionButtonVisible\"\n    adapt-button\n    rx-id=\"filter-by-selection-button\"\n    class=\"btn btn-link d-icon-filter_adapt filter-by-selection-icon\"\n    (click)=\"onFilterBySelection($event, visibleColumns, dataItem)\"\n  ></button>\n\n  <button\n    class=\"btn btn-link d-icon-pop_up record-details-icon\"\n    rx-id=\"show-record-details-button\"\n    [attr.aria-label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.button.label' | translate\n    \"\n    (click)=\"openRowDetails(adaptTableConfig.columns, dataItem)\"\n  ></button>\n</ng-template>\n\n<ng-template #cardLayoutRowDetailsTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-details\">\n    <div class=\"row mb-3\" *ngFor=\"let column of getData().columns\">\n      <div class=\"col-sm-4 font-weight-bold rx-text-break\">{{ column.header || column.fallbackTitle }}:</div>\n\n      <div class=\"col-sm-8 rx-text-break\" *ngIf=\"!column.isDownloadableAttachment && !column.isRowActionsColumn\">\n        {{ getCellValue(getData().rowDataItem, column) }}\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isDownloadableAttachment\">\n        <a\n          tabindex=\"0\"\n          class=\"row-details-attachment-link\"\n          (click)=\"downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column))\"\n          (keydown)=\"\n            downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column), $event)\n          \"\n        >\n          {{ getCellValue(getData().rowDataItem, column) }}</a\n        >\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: getData().rowDataItem }\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #filterButton>\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    size=\"small\"\n    class=\"d-icon-filter_adapt p-0\"\n    (click)=\"applyFilterBySelection()\"\n  ></button>\n</ng-template>\n\n<ng-template #rowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div class=\"dropdown dropdown-kabob\" adaptDropdown appendToBody=\"true\" (onOpen)=\"onRowActionOpen(dataItem)\">\n    <button id=\"row-actions-dropdown-button\" class=\"dropdown-kabob-btn\" adaptDropdownToggle></button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"row-actions-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"action-button-list\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n\n      <div class=\"empty-list-label pl-3\">\n        {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.no-actions-available.label' | translate }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutRowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div\n    class=\"dropdown mb-1\"\n    adaptDropdown\n    appendToBody=\"true\"\n    (click)=\"$event.stopPropagation()\"\n    (onOpen)=\"onRowActionOpen(dataItem)\"\n  >\n    <button id=\"card-layout-dropdown-button\" class=\"btn btn-secondary btn-xs\" size=\"xtra-small\" adaptDropdownToggle>\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.dropdown.label' | translate }}\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"card-layout-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"row-actions-dropdown-item\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n    </div>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n","import { Injectable } from '@angular/core';\nimport { chain, filter, without } from 'lodash';\n\nimport { IDefinitionAdapter, IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { ActionButtonSize, ActionButtonStyle } from '../../action-button/action-button.types';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\n\n@Injectable()\nexport class RxRecordGridDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService\n  ) {}\n\n  adaptDefinition(\n    recordGridContainerViewComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): void {\n    const cellDisplayPropertiesList = recordGridContainerViewComponentDefinition.componentDefinitions\n      .filter(({ type }) => type === RX_RECORD_GRID.components.column)\n      .map(({ propertiesByName }) => propertiesByName.cellDisplayProperties)\n      .filter(Boolean);\n\n    this.viewDefinitionParserService\n      .getComponents(recordGridContainerViewComponentDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        switch (componentDefinition.type) {\n          case RX_RECORD_GRID.type: {\n            componentDefinition.propertiesByName.enableFilterPresets =\n              componentDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n            componentDefinition.propertiesByName.requiredFilters =\n              componentDefinition.propertiesByName.requiredFilters ??\n              (componentDefinition.propertiesByName['requireFiltering'] === 'true' ? 1 : 0);\n\n            const layout = this.rxJsonParserService.tryParseJson<IViewLayout>(componentDefinition.layout);\n\n            const actionButtons = filter(componentDefinition.componentDefinitions, {\n              type: RxViewComponentType.ActionButton\n            });\n\n            const rowActionButtons = this.getActionButtonsForOutlet(\n              layout,\n              RX_RECORD_GRID.rowActionsOutletName,\n              actionButtons\n            );\n\n            rowActionButtons.forEach((action) => {\n              action.propertiesByName = { ...action.propertiesByName, cls: 'dropdown-item', styles: 'p-0' };\n            });\n\n            without(actionButtons, ...rowActionButtons).forEach((actionButton) => {\n              if (\n                [ActionButtonStyle.Primary, ActionButtonStyle.Secondary].includes(actionButton.propertiesByName.style)\n              ) {\n                actionButton.propertiesByName.size = ActionButtonSize.Small;\n              }\n            });\n\n            break;\n          }\n          case RX_RECORD_GRID.components.column: {\n            let isReferenced = null;\n\n            if (\n              !this.rxRecordGridConfigUtilsService.getBooleanValue(\n                recordGridContainerViewComponentDefinition.propertiesByName.getDataForHiddenColumns\n              )\n            ) {\n              const recordGridGuid = recordGridContainerViewComponentDefinition.guid;\n              const columnFieldId = componentDefinition.propertiesByName.fieldId;\n\n              const isReferencedInExpression = viewDefinition.viewComponentExpressions.some(\n                (expression) =>\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.firstSelectedRow.${columnFieldId}`) ||\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.clickableRow.${columnFieldId}`)\n              );\n\n              const isReferencedInCellDisplayProperties = cellDisplayPropertiesList.some((cellDisplayProperties) =>\n                cellDisplayProperties.includes(`\\$\\{view.components.grid.clickableRow.${columnFieldId}`)\n              );\n\n              isReferenced = isReferencedInExpression || isReferencedInCellDisplayProperties;\n            }\n\n            const adaptedProperties = {\n              actions: [],\n              clickable: false,\n              guid: componentDefinition.guid,\n              wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n              referenced: isReferenced,\n              typeaheadKeystrokeCount:\n                componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            };\n\n            const actions = filter(componentDefinition.componentDefinitions, {\n              type: 'rx-action'\n            }).map((action) => action.propertiesByName);\n\n            if (actions.length) {\n              adaptedProperties.clickable = true;\n              adaptedProperties.actions = actions;\n            }\n\n            Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n            break;\n          }\n          case RX_RECORD_GRID.components.filterPreset:\n          case RX_RECORD_GRID.components.filter: {\n            Object.assign(componentDefinition.propertiesByName, {\n              guid: componentDefinition.guid\n            });\n            break;\n          }\n        }\n      });\n  }\n\n  private getActionButtonsForOutlet(\n    layout: IViewLayout,\n    outletName: string,\n    actionButtons: AnyViewComponentDefinition<IPlainObject>[]\n  ): AnyViewComponentDefinition<IPlainObject>[] {\n    const actionButtonsGuids: string[] = chain(layout.outlets)\n      .filter({\n        name: outletName\n      })\n      .head()\n      .get('columns[0].children', [])\n      .value();\n\n    return filter(actionButtons, (actionButton) => actionButtonsGuids.includes(actionButton.guid));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxRecordQueryExpressionEvaluatorService } from '@helix/platform/view/api';\n\n// @deprecated\n@Injectable()\nexport class RxRecordGridQueryExpressionEvaluatorService extends RxRecordQueryExpressionEvaluatorService {}\n","import { CommonModule, DatePipe, DecimalPipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AdaptAccordionModule,\n  AdaptAdvancedFilteringModule,\n  AdaptAlertModule,\n  AdaptButtonModule,\n  AdaptDropdownModule,\n  AdaptPopoverModule,\n  AdaptRxCheckboxModule,\n  AdaptRxSelectModule,\n  AdaptSubnavModule,\n  AdaptRxSearchModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { AdaptSelectModule } from '@bmc-ux/obsolete';\nimport { AdaptTableModule } from '@bmc-ux/adapt-table';\nimport { RxBooleanPipe, RxDefinitionAdapterRegistryService, RxDefinitionModule } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActionButtonModule } from '../../action-button/runtime/action-button.module';\nimport { RecordGridCommonModule } from '../common/record-grid-common.module';\nimport { RxRecordGridAdvancedFilteringService } from '../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { CardLayoutCellHeaderComponent } from './card-layout-cell-header/card-layout-cell-header.component';\nimport { RxFilterByCardSelectionDialogComponent } from './filter-by-card-selection-dialog/filter-by-card-selection-dialog.component';\nimport { GridCardLayoutDirective } from './record-grid-card-layout/record-grid-card-layout.directive';\nimport { RxRecordGridDefinitionAdapterService } from './record-grid-definition-adapter.service';\nimport { RecordGridComponent } from './record-grid.component';\nimport { RxRecordGridConfigUtilsService } from './services/record-grid-config-utils.service';\nimport { RxRecordGridConfiguratorService } from './services/record-grid-configurator.service';\nimport { RxRecordGridFilterConfigService } from './services/record-grid-filter-config.service';\nimport { RxRecordGridFilterService } from './services/record-grid-filter.service';\nimport { RxRecordGridQueryExpressionEvaluatorService } from './services/record-grid-query-expression-evaluator.service';\nimport { RxRecordGridSharedFilterPresetsCacheService } from './services/record-grid-shared-filter-presets-cache.service';\nimport { CellDisplayPropertiesDirective } from './cell-display-properties/cell-display-properties.directive';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\n\n@NgModule({\n  imports: [\n    RxDefinitionModule,\n    CommonModule,\n    RuntimeViewCanvasModule,\n    AdaptTableModule.forRoot(),\n    AdaptSelectModule,\n    FormsModule,\n    AdaptRxCheckboxModule,\n    AdaptRxSelectModule,\n    AdaptAlertModule.forRoot(),\n    AdaptPopoverModule.forRoot(),\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptDropdownModule,\n    TranslateModule,\n    ActionButtonModule,\n    AdaptSubnavModule,\n    AdaptAdvancedFilteringModule,\n    RecordGridCommonModule,\n    RouterModule,\n    RxAdvancedFilteringFieldsProviderModule,\n    AdaptRxSearchModule,\n    AdaptEmptyStateModule\n  ],\n  providers: [\n    DatePipe,\n    DecimalPipe,\n    RxBooleanPipe,\n    RxRecordGridConfiguratorService,\n    RxRecordGridConfigUtilsService,\n    RxRecordGridDefinitionAdapterService,\n    RxRecordGridFilterService,\n    RxRecordGridUtilsService,\n    RxRecordGridFilterConfigService,\n    RxRecordGridQueryExpressionEvaluatorService,\n    RxRecordGridSharedFilterPresetsCacheService,\n    RxRecordGridAdvancedFilteringService\n  ],\n  exports: [RecordGridComponent],\n  declarations: [\n    RecordGridComponent,\n    GridCardLayoutDirective,\n    CardLayoutCellHeaderComponent,\n    RxFilterByCardSelectionDialogComponent,\n    CellDisplayPropertiesDirective\n  ],\n  entryComponents: [RecordGridComponent]\n})\nexport class RecordGridModule {\n  constructor(\n    private rxRecordGridDefinitionAdapterService: RxRecordGridDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_RECORD_GRID.type,\n      this.rxRecordGridDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Observable, throwError } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { BaseViewComponent, IViewComponentSetProperty } from '@helix/platform/view/runtime';\nimport { IRichTextConfig } from './rich-text.types';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\n\n@Component({\n  selector: 'rx-rich-text',\n  template: `\n    <div\n      class=\"text-container focusable\"\n      [hidden]=\"isHidden\"\n      tabindex=\"0\"\n      [innerHTML]=\"html\"\n      [attr.aria-hidden]=\"isHidden\"\n    ></div>\n  `,\n  styleUrls: ['./rich-text.component.scss']\n})\nexport class RichTextComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  @Input()\n  config: Observable<IRichTextConfig>;\n\n  html: SafeHtml;\n  filter = new CKEDITOR.filter('');\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private sanitizer: DomSanitizer, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super();\n\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      this.isHidden = Boolean(config.hidden);\n      this.html = this.updateHtml(config.html);\n    });\n  }\n\n  updateHtml(value: string): SafeHtml {\n    if (value) {\n      value = value.replace(/\\n/g, '<br>');\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(value);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n      value = writer.getHtml(true);\n    } else {\n      value = '';\n    }\n\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n\n  setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = value;\n\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Rich text: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { isNil } from 'lodash';\n\n@Injectable()\nexport class RxRichTextExpressionEvaluatorService implements IExpressionEvaluator {\n  constructor(private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService) {}\n\n  evaluate(expression: string, data: object): string {\n    const tempElement = document.createElement('div');\n    tempElement.innerHTML = expression;\n\n    tempElement.querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`).forEach((span) => {\n      const evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(\n        span.getAttribute(RX_RICH_TEXT.expressionAttributeName),\n        data\n      );\n\n      const textNode = document.createTextNode(isNil(evaluatedExpression) ? '' : evaluatedExpression);\n\n      span.parentElement.replaceChild(textNode, span);\n    });\n\n    return tempElement.innerHTML;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\n\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxCkEditorConfiguratorService\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RichTextDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  private filter = new CKEDITOR.filter('');\n\n  constructor(private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  adaptDefinition(definition: IContainerViewComponentDefinition): void {\n    if (definition.propertiesByName.html) {\n      const initialValue = CKEDITOR.dtd.$removeEmpty['span'];\n\n      // Allow empty span tags, used for holding the expressions in rx-expression attributes,\n      // to be parsed by CKEDITOR.htmlParser.fragment.fromHtml\n      // https://stackoverflow.com/questions/18250404/ckeditor-strips-i-tag\n      // @ts-ignore\n      CKEDITOR.dtd.$removeEmpty['span'] = 0;\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(definition.propertiesByName.html);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      // sanitize HTML\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n\n      definition.propertiesByName.html = writer.getHtml(true);\n\n      CKEDITOR.dtd.$removeEmpty['span'] = initialValue;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextComponent } from './rich-text.component';\nimport { RxRichTextExpressionEvaluatorService } from './rich-text-expression-evaluator.service';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RichTextDefinitionAdapterService } from '../rich-text-definition-adapter.service';\n\n@NgModule({\n  declarations: [RichTextComponent],\n  imports: [CommonModule, CKEditorModule],\n  exports: [RichTextComponent],\n  entryComponents: [RichTextComponent],\n  providers: [RxRichTextExpressionEvaluatorService]\n})\nexport class RichTextModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private richTextDefinitionAdapterService: RichTextDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.RichText,\n      this.richTextDefinitionAdapterService\n    );\n  }\n}\n","export const RX_CKEDITOR_CONFIG = {\n  title: false,\n  skin: 'rich-text,skins/rich-text/',\n  toolbar: [\n    [\n      'Bold',\n      'Italic',\n      'Strike',\n      'Underline',\n      '-',\n      'Link',\n      'Unlink',\n      '-',\n      'NumberedList',\n      'BulletedList',\n      'Outdent',\n      'Indent',\n      '-',\n      'JustifyLeft',\n      'JustifyCenter',\n      'JustifyRight',\n      '-',\n      'ExpressionEditor'\n    ],\n    '/',\n    ['Format', 'Styles', 'Font', 'FontSize', 'TextColor']\n  ],\n  stylesSet: [\n    {\n      name: 'Italic Title',\n      element: 'h2',\n      attributes: {\n        class: 'italic-title'\n      }\n    },\n    {\n      name: 'Subtitle',\n      element: 'h3',\n      attributes: {\n        class: 'subtitle'\n      }\n    },\n    {\n      name: 'Special Container',\n      element: 'div',\n      attributes: {\n        class: 'special-containers'\n      }\n    },\n    {\n      name: 'Marker',\n      element: 'span',\n      attributes: {\n        class: 'marker'\n      }\n    },\n    {\n      name: 'Small',\n      element: 'small'\n    },\n    {\n      name: 'Computer Code',\n      element: 'code'\n    },\n    {\n      name: 'Keyboard Phrase',\n      element: 'kbd'\n    },\n    {\n      name: 'Sample Text',\n      element: 'samp'\n    },\n    {\n      name: 'Variable',\n      element: 'var'\n    },\n    {\n      name: 'Deleted Text',\n      element: 'del'\n    },\n    {\n      name: 'Inserted Text',\n      element: 'ins'\n    },\n    {\n      name: 'Cited Work',\n      element: 'cite'\n    },\n    {\n      name: 'Inline Quotation',\n      element: 'q'\n    },\n    {\n      name: 'Compact Table',\n      element: 'table',\n      attributes: {\n        cellpadding: '5',\n        cellspacing: '0',\n        class: 'compact-table'\n      }\n    },\n    {\n      name: 'Borderless Table',\n      element: 'table',\n      attributes: {\n        class: 'borderless-table'\n      }\n    },\n    {\n      name: 'Square Bulleted List',\n      element: 'ul',\n      attributes: {\n        class: 'square-bulleted-list'\n      }\n    }\n  ],\n  format_tags: 'p;h1;h2;h3;pre',\n  extraPlugins: 'expression-editor, colordialog',\n  extraAllowedContent: 'span [rx-expression, contenteditable, title] (rx-expression)'\n};\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  ExpressionParserToken,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  RxExpressionParserService\n} from '@helix/platform/shared/api';\nimport { RxExpressionEditorService } from '@helix/platform/shared/components';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { CKEditor4, CKEditorComponent } from 'ckeditor4-angular';\nimport { escape } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, skip, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { RX_CKEDITOR_CONFIG } from './ckeditor-config.constant';\nimport { RichTextDesignModel } from './rich-text-design.model';\n\n@Component({\n  selector: 'rx-rich-text-design',\n  templateUrl: './rich-text-design.component.html',\n  styleUrls: ['./rich-text-design.component.scss']\n})\nexport class RichTextDesignComponent implements OnInit, OnDestroy {\n  constructor(\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxTreeService: RxTreeService,\n    private rxExpressionParserService: RxExpressionParserService,\n    private renderer2: Renderer2,\n    @Inject(DOCUMENT) private document,\n    private ngZone: NgZone\n  ) {}\n\n  @Input()\n  model: RichTextDesignModel;\n\n  @Input()\n  isReadOnly: boolean;\n\n  type = CKEditor4.EditorType.INLINE;\n  ckConfig: CKEditor4.Config = RX_CKEDITOR_CONFIG;\n  formControl = new FormControl(null);\n\n  @ViewChild(CKEditorComponent, { static: true })\n  ckEditor: CKEditorComponent;\n\n  private flatDataDictionary: IDataDictionary;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  // remove inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\"\n  private removeExpressionLabels = this.setExpressionLabelHtml.bind(this, null);\n\n  // set inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\"\n  private addExpressionLabels = this.setExpressionLabelHtml.bind(this, this.getExpressionWithLabels.bind(this));\n\n  ngOnInit(): void {\n    const dataDictionary$ = this.model.expressionConfigurator.getDataDictionary();\n\n    dataDictionary$\n      .pipe(withLatestFrom(this.model.html$), takeUntil(this.destroyed$))\n      .subscribe(([dataDictionary, html]) => {\n        this.flatDataDictionary = this.rxTreeService.flatten({\n          children: dataDictionary\n        });\n\n        this.formControl.setValue(this.addExpressionLabels(html));\n      });\n\n    this.formControl.valueChanges\n      .pipe(\n        map((value) => this.removeExpressionLabels(value)),\n        distinctUntilChanged(),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((html) => {\n        this.model.updateComponentProperties({ html });\n      });\n\n    // set initial value\n    this.model.html$.pipe(take(1), takeUntil(this.destroyed$)).subscribe((html) => {\n      this.formControl.setValue(this.addExpressionLabels(html));\n    });\n  }\n\n  onEditorReady(event: CKEditor4.EventInfo): void {\n    if (this.isReadOnly) {\n      this.ckConfig.toolbar = [];\n      this.document.getElementById(`${event.editor.id}_top`).style.display = 'none';\n    }\n\n    this.ckEditor.instance.on('openExpressionEditor', (evt: CKEDITOR.eventInfo) => {\n      const initialValue = evt.data && evt.data.getAttribute(RX_RICH_TEXT.expressionAttributeName);\n\n      this.ngZone.runTask(() =>\n        this.rxExpressionEditorService\n          .openEditor({\n            property: {\n              path: 'html',\n              value: initialValue,\n              label: 'Rich Text'\n            },\n            expressionConfigurator: this.model.expressionConfigurator\n          })\n          .pipe(takeUntil(this.destroyed$))\n          .subscribe({\n            next: ({ path, value }) => {\n              if (value) {\n                const labelHtmlString = this.getExpressionWithLabels(value);\n\n                if (initialValue) {\n                  evt.data.setAttribute(RX_RICH_TEXT.expressionAttributeName, value);\n                  evt.data.setHtml(labelHtmlString);\n\n                  // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                  this.ckEditor.instance.fire('saveSnapshot');\n                } else {\n                  this.ckEditor.instance.insertHtml(\n                    `<span contenteditable=\"false\" ${RX_RICH_TEXT.expressionAttributeName}=\"${escape(\n                      value\n                    )}\">${labelHtmlString}</span>`\n                  );\n                }\n              } else {\n                evt.data.remove();\n\n                // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                this.ckEditor.instance.fire('saveSnapshot');\n              }\n\n              this.moveCursorToEnd();\n            },\n            error: () => {\n              this.moveCursorToEnd();\n            }\n          })\n      );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getExpressionWithLabels(expressionValue: string): string {\n    return this.rxExpressionParserService.parse(expressionValue, (token, expression) => {\n      if (token !== ExpressionParserToken.RxStringExpression) {\n        const node = this.flatDataDictionary.find((item) => item.expression === expression);\n        const label = node && node.label ? escape(node.label) : expression;\n\n        return `<span title=\"${label}\">${label}</span>`;\n      }\n\n      return expression;\n    });\n  }\n\n  private moveCursorToEnd(): void {\n    const range = this.ckEditor.instance.createRange();\n\n    range.moveToElementEditEnd(range.root);\n    this.ckEditor.instance.getSelection().selectRanges([range]);\n  }\n\n  private setExpressionLabelHtml(predicate: (expression) => string, htmlString: string): string {\n    const tempElement = this.renderer2.createElement('div');\n\n    tempElement.innerHTML = htmlString;\n\n    tempElement\n      .querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`)\n      .forEach(\n        (el) => (el.innerHTML = predicate ? predicate(el.getAttribute(RX_RICH_TEXT.expressionAttributeName)) : null)\n      );\n\n    return tempElement.innerHTML.replace(/<br>/g, '<br />');\n  }\n}\n","<ckeditor\n  class=\"border\"\n  [class.border-transparent]=\"formControl.value\"\n  [formControl]=\"formControl\"\n  [config]=\"ckConfig\"\n  [type]=\"type\"\n  (ready)=\"onEditorReady($event)\"\n  [readOnly]=\"isReadOnly\"\n></ckeditor>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionEditorPluginService {\n  constructor() {\n    const me = this;\n\n    CKEDITOR.plugins.add('expression-editor', {\n      init(editor) {\n        editor.addCommand('insertExpression', {\n          exec() {\n            editor.fire('openExpressionEditor', null);\n\n            return true;\n          }\n        });\n\n        editor.on(\n          'doubleclick',\n          (evt) => {\n            const element = me.getSelectedExpressionElement(evt.data.element);\n\n            if (element) {\n              editor.fire('openExpressionEditor', element);\n            }\n          },\n          null,\n          null,\n          0\n        );\n\n        editor.ui.addButton('ExpressionEditor', {\n          label: 'Insert Expression',\n          command: 'insertExpression',\n          toolbar: '',\n          icon: CKEDITOR.plugins.getPath('expression-editor') + 'toolbar.png'\n        });\n      }\n    });\n  }\n\n  private getSelectedExpressionElement(element: CKEDITOR.dom.element): CKEDITOR.dom.element | void {\n    if (element.is('span') && element.hasAttribute('rx-expression')) {\n      return element;\n    } else {\n      const parentElement = element.getParent();\n\n      if (parentElement.is('span') && parentElement.hasAttribute('rx-expression')) {\n        return parentElement;\n      }\n    }\n  }\n\n  private clearSelection(editor: CKEDITOR.editor): void {\n    const selection = editor.getSelection();\n\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextDesignComponent } from './rich-text-design.component';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RxExpressionEditorPluginService } from './expression-editor-plugin.service';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RichTextDefinitionAdapterService } from '../rich-text-definition-adapter.service';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [RichTextDesignComponent],\n  entryComponents: [RichTextDesignComponent],\n  imports: [CommonModule, CKEditorModule, ReactiveFormsModule]\n})\nexport class RichTextDesignModule {\n  constructor(\n    private rxExpressionEditorPluginService: RxExpressionEditorPluginService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private richTextDefinitionAdapterService: RichTextDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.RichText,\n      this.richTextDefinitionAdapterService\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'rx-service-list-design',\n  templateUrl: './service-list-design.component.html'\n})\nexport class ServiceListDesignComponent {}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <adapt-rx-select label=\"Service list\" required=\"true\" disabled=\"true\" ngModel> </adapt-rx-select>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ServiceListDesignComponent } from './service-list-design.component';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, RxDefinitionPickerModule, FormControlsModule, AdaptRxSelectModule, FormsModule],\n  declarations: [ServiceListDesignComponent],\n  entryComponents: [ServiceListDesignComponent]\n})\nexport class ServiceListDesignModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { find, flow, forEach, groupBy, map } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, finalize, pluck, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { RxSelectionChangeEvent, RxSelectOption, RxSelectOptionsGroup } from '@bmc-ux/adapt-angular';\nimport { ICatalog, ICatalogItem } from './service-list.interface';\nimport { IServiceListProperties } from '../service-list.types';\n\n@Component({\n  selector: 'rx-service-list',\n  templateUrl: './service-list.component.html'\n})\nexport class ServiceListComponent extends BaseViewComponent implements OnInit {\n  @Input()\n  config: Observable<IServiceListProperties>;\n\n  isDisabled = true;\n  serviceListOptions: RxSelectOptionsGroup[] = [];\n\n  service: RxSelectOption = {\n    id: null,\n    name: null,\n    guid: null\n  };\n\n  constructor(private httpClient: HttpClient) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    const serviceRequestId$ = this.config.pipe(\n      pluck('serviceRequestId'),\n      distinctUntilChanged(),\n      takeUntil(this.destroyed$)\n    );\n\n    this.httpClient\n      .get<ICatalog>('/api/com.bmc.dsm.chatbot/rx/application/chatbot/services')\n      .pipe(\n        withLatestFrom(serviceRequestId$),\n        finalize(() => {\n          this.isDisabled = false;\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([chatbotServices, serviceRequestId]) => {\n        this.serviceListOptions = flow(\n          (catalogs: ICatalogItem[]) => groupBy(catalogs, 'groupName'),\n          (catalogsByGroup) =>\n            map(catalogsByGroup, (catalogs: ICatalogItem[], groupName: string) => ({\n              name: groupName,\n              children: map(catalogs, (catalog: ICatalogItem) => ({\n                id: catalog.id,\n                name: catalog.name,\n                guid: catalog.guid\n              }))\n            }))\n        )(chatbotServices?.catalogDetailsList || []);\n\n        this.selectServiceRequest(serviceRequestId);\n      });\n\n    serviceRequestId$.pipe(takeUntil(this.destroyed$)).subscribe((requestId: string) => {\n      this.selectServiceRequest(requestId);\n    });\n  }\n\n  private selectServiceRequest(serviceRequestId): void {\n    let service;\n\n    forEach(this.serviceListOptions, (item: RxSelectOptionsGroup) => {\n      if (service) {\n        return false;\n      }\n\n      service = find(item.children, {\n        id: serviceRequestId\n      });\n    });\n\n    this.service = service\n      ? [\n          {\n            id: service.id,\n            name: service.name,\n            guid: service.guid\n          }\n        ]\n      : [];\n  }\n\n  public onSelectionChange(event: RxSelectionChangeEvent): void {\n    const service: ICatalogItem = event.options[0];\n\n    this.notifyPropertyChanged('serviceRequestId', service.id);\n    this.notifyPropertyChanged('serviceRequestName', service.name);\n    this.notifyPropertyChanged('serviceRequestGuid', service.guid);\n  }\n\n  public optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n}\n","<adapt-rx-select\n  label=\"Service name\"\n  required=\"true\"\n  [options]=\"serviceListOptions\"\n  [disabled]=\"isDisabled\"\n  (onSelectionChange)=\"onSelectionChange($event)\"\n  [ngModel]=\"service\"\n  [optionFormatter]=\"optionFormatter\"\n  enableFilter=\"true\"\n>\n</adapt-rx-select>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ServiceListComponent } from './service-list.component';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxSelectModule, FormsModule],\n  declarations: [ServiceListComponent],\n  entryComponents: [ServiceListComponent],\n  exports: [ServiceListComponent]\n})\nexport class ServiceListModule {}\n","import { Component } from '@angular/core';\nimport { ContainerComponent } from '../../../container';\nimport { ITabContainerConfig } from './tab-container.types';\n\n@Component({\n  selector: 'rx-tab-container',\n  templateUrl: './tab-container.component.html',\n  styleUrls: ['./tab-container.component.scss']\n})\nexport class RxTabContainerComponent extends ContainerComponent {\n  state: ITabContainerConfig = {\n    enableLazyLoading: false,\n    label: ''\n  };\n}\n","<rx-runtime-view-canvas-outlet *ngIf=\"!state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  BaseViewComponent,\n  IViewComponentSetProperty,\n  RuntimeViewCanvasItemComponent\n} from '@helix/platform/view/runtime';\nimport { distinctUntilChanged, pluck, skip, takeUntil, tap } from 'rxjs/operators';\nimport {\n  ITabPanelApi,\n  ITabPanelChildComponentData,\n  ITabPanelComponentData,\n  ITabPanelConfig,\n  ITabPanelState\n} from './tab-panel.types';\nimport { every, findIndex, get, isNil, isNull } from 'lodash';\nimport { RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { Observable, throwError } from 'rxjs';\n\n@Component({\n  selector: 'rx-tab-panel',\n  templateUrl: './tab-panel.component.html'\n})\nexport class RxTabPanelComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  childLayouts: ITabPanelChildComponentData[] = [];\n\n  state: ITabPanelState = {\n    activeTabIndex: null\n  };\n\n  api: ITabPanelApi = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private runtimeCanvasItemComponent: RuntimeViewCanvasItemComponent) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: ITabPanelConfig) => {\n      this.state = { ...this.state, ...config };\n      this.isHidden = Boolean(this.state.hidden);\n    });\n\n    this.childLayouts = get(\n      this.runtimeCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n      '[0].children'\n    );\n\n    this.childLayouts.forEach((childLayout) => {\n      childLayout.state = {\n        enableLazyLoading: false,\n        label: '',\n        isRendered: false,\n        hidden: 0\n      };\n\n      childLayout.config\n        .pipe(\n          tap((childLayoutConfig) => {\n            childLayout.state = { ...childLayout.state, ...childLayoutConfig };\n          }),\n          pluck('hidden'),\n          distinctUntilChanged(),\n          skip(1),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe(() => {\n          this.ensureActiveTabIsSet();\n        });\n    });\n\n    this.trySetFirstVisibleTab();\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.state.hidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else if (propertyPath === 'activeTabIndex') {\n      this.setActiveTabIndex(parseInt(propertyValue, 10));\n    } else {\n      return throwError(`Tab panel: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  trackByForTabs(index: number, item: ITabPanelChildComponentData): string {\n    return item.guid;\n  }\n\n  canRenderContentForTab(tab: ITabPanelChildComponentData): boolean {\n    return !tab.state.enableLazyLoading || tab.state.isRendered;\n  }\n\n  private getAllTabsData(): ITabPanelComponentData[] {\n    let adaptTabsetIndex = 0;\n\n    return this.childLayouts.map((tab): ITabPanelComponentData => {\n      return {\n        adaptTabsetIndex: this.isHiddenTab(tab) ? null : adaptTabsetIndex++,\n        tab\n      };\n    });\n  }\n\n  isHiddenTab(tab: ITabPanelChildComponentData): boolean {\n    return Boolean(tab.state.hidden);\n  }\n\n  getActiveTabIndexForAdaptTabset() {\n    return isNull(this.state.activeTabIndex) ? 0 : this.getAllTabsData()[this.state.activeTabIndex].adaptTabsetIndex;\n  }\n\n  onActiveTabChanged(adaptTabsetIndex: number): void {\n    const activeTabIndexForAllTabs = findIndex(\n      this.getAllTabsData(),\n      (tab) => tab.adaptTabsetIndex === adaptTabsetIndex\n    );\n\n    this.activateTab(activeTabIndexForAllTabs);\n  }\n\n  private setActiveTabIndex(index: number): void {\n    const tab = this.childLayouts[index];\n\n    if (tab && !this.isHiddenTab(tab)) {\n      this.activateTab(index);\n    }\n  }\n\n  private activateTab(index: number | null): void {\n    this.state.activeTabIndex = index;\n\n    if (!isNil(index)) {\n      this.childLayouts[index].state.isRendered = true;\n    }\n\n    this.notifyPropertyChanged('activeTabIndex', index);\n  }\n\n  private ensureActiveTabIsSet(): void {\n    const allTabs = this.childLayouts;\n    const isAllTabsHidden = every(allTabs, (tab) => this.isHiddenTab(tab));\n\n    if (isAllTabsHidden) {\n      this.activateTab(null);\n    } else if (!isNull(this.state.activeTabIndex) && this.isHiddenTab(allTabs[this.state.activeTabIndex])) {\n      this.trySetFirstVisibleTab();\n    } else if (isNull(this.state.activeTabIndex)) {\n      this.trySetFirstVisibleTab();\n    }\n  }\n\n  private trySetFirstVisibleTab() {\n    const firstVisibleTab = findIndex(this.childLayouts, (tab) => !this.isHiddenTab(tab));\n\n    if (firstVisibleTab !== -1) {\n      this.activateTab(firstVisibleTab);\n    }\n  }\n}\n","<adapt-tabset\n  *ngIf=\"!isHidden\"\n  [fullHeight]=\"true\"\n  (tab-active-changed)=\"onActiveTabChanged($event.index)\"\n  [tab-active]=\"getActiveTabIndexForAdaptTabset()\"\n>\n  <ng-template ngFor let-tab [ngForOf]=\"childLayouts\" [ngForTrackBy]=\"trackByForTabs\" let-index=\"index\">\n    <adapt-tab-panel [adapt-tab-title]=\"tab.state.label\" *ngIf=\"!isHiddenTab(tab)\">\n      <rx-runtime-view-canvas-item *ngIf=\"canRenderContentForTab(tab)\" [layout]=\"tab\"> </rx-runtime-view-canvas-item>\n    </adapt-tab-panel>\n\n    <!-- Hidden tab should have instance for using API  -->\n    <rx-runtime-view-canvas-item *ngIf=\"isHiddenTab(tab) && canRenderContentForTab(tab)\" [layout]=\"tab\">\n    </rx-runtime-view-canvas-item>\n  </ng-template>\n</adapt-tabset>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxTabPanelComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  adaptDefinition(tabPanelViewComponentDefinition: IContainerViewComponentDefinition) {\n    this.viewDefinitionParserService\n      .getComponents(tabPanelViewComponentDefinition)\n      .filter((componentPair) => componentPair.componentDefinition.type === RxViewComponentType.TabPanel)\n      .map((componentPair) => componentPair.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.layout) {\n          let layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n\n          if (layout && layout.componentDefinitionId) {\n            const columns = layout.columns.map((column) => {\n              return {\n                children: column.children.map((child) => child.columns[0].children[0].componentDefinitionId)\n              };\n            });\n\n            layout = {\n              outlets: [\n                {\n                  name: 'DEFAULT',\n                  columns: columns\n                }\n              ]\n            };\n\n            componentDefinition.layout = JSON.stringify(layout);\n          }\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ContainerComponentDefinitionAdapterService } from '../../../container/runtime/container-component-definition-adapter.service';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RxViewComponentType, RxViewDefinitionParserService } from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxTabContainerComponentDefinitionAdapterService extends ContainerComponentDefinitionAdapterService {\n  constructor(viewDefinitionParserService: RxViewDefinitionParserService, rxJsonParserService: RxJsonParserService) {\n    super(viewDefinitionParserService, rxJsonParserService);\n\n    this.componentDefinitionType = RxViewComponentType.TabContainer;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RxTabPanelComponentDefinitionAdapterService } from './tab-panel-component-definition-adapter.service';\nimport { RxTabPanelComponent } from './tab-panel.component';\nimport { RxTabContainerComponent } from './tab-container/tab-container.component';\nimport { AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport { RxTabContainerComponentDefinitionAdapterService } from './tab-container/tab-container-component-definition-adapter.service';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [RxTabPanelComponent, RxTabContainerComponent],\n  exports: [RxTabPanelComponent, RxTabContainerComponent],\n  entryComponents: [RxTabPanelComponent, RxTabContainerComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule, AdaptTabsModule.forRoot()],\n  providers: [RxTabPanelComponentDefinitionAdapterService, RxTabContainerComponentDefinitionAdapterService]\n})\nexport class RxTabPanelModule {\n  constructor(\n    private rxTabPanelComponentDefinitionAdapterService: RxTabPanelComponentDefinitionAdapterService,\n    private rxTabContainerComponentDefinitionAdapterService: RxTabContainerComponentDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.TabPanel,\n      rxTabPanelComponentDefinitionAdapterService\n    );\n\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.TabContainer,\n      rxTabContainerComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { TabEvent } from '@bmc-ux/adapt-angular';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { findIndex, first } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { TabPanelDesignModel } from './tab-panel-design.model';\n\n@Component({\n  selector: 'rx-tab-panel-design',\n  templateUrl: './tab-panel-design.component.html',\n  styleUrls: ['./tab-panel-design.component.scss']\n})\nexport class TabPanelDesignComponent implements OnInit {\n  @Input()\n  model: TabPanelDesignModel;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @ViewChild('adaptTabset', { static: true })\n  adaptTabset;\n\n  components = [];\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private rxUtilityModalsService: RxUtilityModalsService) {}\n\n  ngOnInit(): void {\n    this.model.tabContainerComponents$.pipe(takeUntil(this.destroyed$)).subscribe((components) => {\n      this.components = components;\n\n      this.adaptTabset.checkActiveIndex();\n    });\n\n    this.model.tabContainerComponents$.pipe(take(1)).subscribe((components) => {\n      this.model.selectTab(first(components).guid, true);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  trackByForTabs<T extends { guid: string }>(index: number, item: T): string {\n    return item.guid;\n  }\n\n  onTabClicked(event: TabEvent): void {\n    this.activeTabChanged(event);\n  }\n\n  onTabAdded(e: Event) {\n    e.stopPropagation();\n\n    this.model.addTab();\n\n    setTimeout(() => {\n      this.adaptTabset.setActiveTab(this.components.length - 1, true, new MouseEvent('click'));\n    });\n  }\n\n  activeTabChanged({ index, event }) {\n    event.stopPropagation();\n\n    this.model.tabContainerGuids$.pipe(take(1)).subscribe((guids) => {\n      this.model.selectTab(guids[index]);\n    });\n  }\n\n  onTabDropped(tabs) {\n    for (let i = 0; i < this.components.length; i++) {\n      if (this.components[i].guid !== tabs[i].id) {\n        if (this.components[i].guid === tabs[i + 1].id) {\n          this.model.moveComponent(tabs[i].id, i);\n          break;\n        } else {\n          this.model.moveComponent(this.components[i].guid, findIndex(tabs, { id: this.components[i].guid }));\n          break;\n        }\n      }\n    }\n  }\n\n  removeTab({ index }: TabEvent): void {\n    this.rxUtilityModalsService\n      .confirm('Are you sure you want to delete this view component?')\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          this.model.tabContainerGuids$.pipe(take(1)).subscribe((guids) => {\n            this.model.removeTab(guids[index]);\n          });\n        }\n      });\n  }\n}\n","<adapt-tabset\n  #adaptTabset\n  (tab-index-closed)=\"removeTab($event)\"\n  (tab-active-changed)=\"activeTabChanged($event)\"\n  (tabClicked)=\"onTabClicked($event)\"\n  (tabDropped)=\"onTabDropped($event)\"\n  (add-tab-clicked)=\"onTabAdded($event)\"\n  [allow-tabs-adding]=\"!isReadOnly\"\n  [enableDnD]=\"true\"\n>\n  <adapt-tab-panel\n    *ngFor=\"\n      let component of components;\n      let index = index;\n      trackBy: trackByForTabs\n    \"\n    [adapt-tab-title]=\"component.data.label\"\n    [icon-close]=\"!isReadOnly && components.length && components.length > 1\"\n    [id]=\"component.guid\"\n  >\n  </adapt-tab-panel>\n</adapt-tabset>\n\n<rx-canvas-outlet [dropPredicate]=\"model.dropPredicate\"></rx-canvas-outlet>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ContainerDesignComponent } from '../../../container/design/container-design.component';\nimport { TabPanelDesignComponent } from '../tab-panel-design.component';\nimport { TabContainerDesignModel } from './tab-container-design.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-tab-container-design',\n  templateUrl: './tab-container-design.component.html'\n})\nexport class TabContainerDesignComponent extends ContainerDesignComponent implements OnInit {\n  @Input()\n  model: any;\n\n  constructor(private tabPanelDesignComponent: TabPanelDesignComponent) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.tabPanelDesignComponent.model.selectedTabGuid$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((this.model as TabContainerDesignModel).selectedTabGuid$);\n  }\n}\n","<rx-canvas-outlet [skipParentPredicate]=\"true\" [containerComponent]=\"containerCanvasItemComponent\"></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TabPanelDesignComponent } from './tab-panel-design.component';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { AdaptButtonModule, AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport { TabContainerDesignComponent } from './tab-container-design/tab-container-design.component';\n\n@NgModule({\n  declarations: [TabPanelDesignComponent, TabContainerDesignComponent],\n  entryComponents: [TabPanelDesignComponent, TabContainerDesignComponent],\n  imports: [CommonModule, AdaptButtonModule, AdaptTabsModule, ViewDesignerCanvasModule]\n})\nexport class TabPanelDesignModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { PageDesignModel } from './page-design.model';\n\n@Component({\n  selector: 'rx-page-design',\n  templateUrl: './page-design.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PageDesignComponent {\n  @Input()\n  model: PageDesignModel;\n}\n","<adapt-empty-state type=\"objects\" [label]=\"model.componentName$ | async\"></adapt-empty-state>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageDesignComponent } from './page-design.component';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [PageDesignComponent],\n  entryComponents: [PageDesignComponent]\n})\nexport class PageDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition, IViewDefinition, RX_VIEW_DEFINITION } from '@helix/platform/view/api';\n\n@Injectable()\nexport class PageComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition): void {\n    componentDefinition.layout = JSON.stringify({\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [\n            {\n              children: componentDefinition.componentDefinitions[0].guid\n            }\n          ]\n        }\n      ]\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { PageComponentDefinitionAdapterService } from './page-component-definition-adapter.service';\nimport { PageComponent } from './page.component';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  imports: [CommonModule, RuntimeViewCanvasModule],\n  providers: [PageComponentDefinitionAdapterService],\n  declarations: [PageComponent],\n  exports: [PageComponent],\n  entryComponents: [PageComponent]\n})\nexport class PageModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private pageComponentDefinitionAdapterService: PageComponentDefinitionAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Page,\n      this.pageComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'rx-image-design',\n  templateUrl: './image-design.component.html',\n  styleUrls: ['./image-design.component.scss']\n})\nexport class ImageDesignComponent {}\n","<div class=\"placeholder d-flex justify-content-center align-items-center\">\n  <span class=\"component-icon d-icon-attachment_image_adapt\"></span>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ImageDesignComponent } from './image-design.component';\n\n@NgModule({\n  imports: [CommonModule, RxDefinitionPickerModule, FormControlsModule],\n  declarations: [ImageDesignComponent],\n  entryComponents: [ImageDesignComponent]\n})\nexport class ImageDesignModule {}\n","export enum ImageAlignment {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right'\n}\n\nexport const RX_IMAGE_ALIGNMENT_OPTIONS = [\n  {\n    id: ImageAlignment.Left,\n    name: 'Left'\n  },\n  {\n    id: ImageAlignment.Center,\n    name: 'Center'\n  },\n  {\n    id: ImageAlignment.Right,\n    name: 'Right'\n  }\n];\n\nexport const RX_IMAGE_ALIGNMENT_STYLES = {\n  [ImageAlignment.Left]: 'justify-content-start',\n  [ImageAlignment.Center]: 'justify-content-center',\n  [ImageAlignment.Right]: 'justify-content-end'\n};\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { RxRecordInstanceService, RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEqual } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { distinctUntilChanged, filter, map, shareReplay, takeUntil, tap } from 'rxjs/operators';\nimport { ImageAlignment, RX_IMAGE_ALIGNMENT_STYLES } from '../image.types';\nimport { IImageConfig } from './image.types';\n\n@Component({\n  selector: 'rx-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent extends BaseViewComponent implements OnInit, OnDestroy {\n  @Input()\n  config: Observable<IImageConfig>;\n\n  state = {\n    recordDefinitionName: '',\n    recordInstanceId: '',\n    fieldId: '',\n    maxWidth: '',\n    imageUrl: null,\n    isImageBroken: false,\n    alignmentStyle: '',\n    altText: ''\n  };\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  fileName = '';\n\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxLogService: RxLogService,\n    private httpClient: HttpClient,\n    private domSanitizer: DomSanitizer,\n    private translateService: TranslateService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    const config$ = this.config.pipe(\n      distinctUntilChanged(isEqual),\n      tap((config) => {\n        const newState = {\n          ...config\n        };\n\n        this.isHidden = newState.hidden;\n\n        if (!this.state.alignmentStyle && newState.alignment) {\n          newState.alignmentStyle = this.getAlignmentStyle(newState.alignment);\n        }\n\n        delete newState.alignment;\n\n        this.state = { ...this.state, ...newState };\n      }),\n      shareReplay(1)\n    );\n\n    config$\n      .pipe(\n        map(() => (this.state.recordInstanceId ? this.state.recordInstanceId : null)),\n        filter((recordInstanceId) => Boolean(recordInstanceId)),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((recordInstanceId) => {\n        const imageUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(\n          this.state.recordDefinitionName,\n          Number(this.state.fieldId),\n          recordInstanceId\n        );\n\n        this.httpClient.get(imageUrl, { responseType: 'blob', observe: 'response' }).subscribe({\n          next: (response) => {\n            const fileStream = response.body;\n\n            this.fileName = this.rxRecordInstanceUtilsService.tryParseContentDisposition(\n              response.headers.get('content-disposition')\n            );\n\n            if (fileStream && fileStream.type.split('/')[0] === 'image') {\n              const fileReader = new FileReader();\n\n              fileReader.onloadend = () => {\n                this.state.imageUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(fileReader.result as string);\n                this.state.isImageBroken = false;\n                this.state.altText = this.fileName;\n              };\n\n              fileReader.onerror = this.onImageLoadFailed.bind(this);\n\n              fileReader.readAsDataURL(fileStream);\n            } else {\n              this.rxLogService.warning(`rx-image: attachment is not a valid image.`);\n              this.onImageLoadFailed();\n            }\n          },\n          error: (err: HttpErrorResponse) => {\n            this.state.imageUrl = null;\n            this.state.isImageBroken = false;\n            this.state.altText = '';\n          }\n        });\n      });\n  }\n\n  private onImageLoadFailed(): void {\n    this.state.imageUrl = null;\n    this.state.isImageBroken = true;\n\n    this.state.altText = this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.image.invalid-image.label',\n      { imageName: this.fileName }\n    );\n  }\n\n  private getAlignmentStyle(alignment: ImageAlignment): string {\n    return RX_IMAGE_ALIGNMENT_STYLES[alignment];\n  }\n\n  private setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = value;\n\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Image: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<div *ngIf=\"!isHidden\" class=\"d-flex {{ state.alignmentStyle }} image-container\">\n  <img\n    class=\"image\"\n    *ngIf=\"state.imageUrl\"\n    [src]=\"state.imageUrl\"\n    [attr.alt]=\"state.altText\"\n    [style.max-width]=\"state.maxWidth\"\n  />\n\n  <span\n    *ngIf=\"state.isImageBroken\"\n    role=\"img\"\n    [attr.aria-label]=\"state.altText\"\n    class=\"broken-image d-icon-broken_image\"\n  ></span>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ImageComponent } from './image.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ImageComponent],\n  entryComponents: [ImageComponent],\n  exports: [ImageComponent]\n})\nexport class ImageModule {}\n","import { IFieldDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { IFormControlBuilderConfig, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IconPickerFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\nimport {\n  ActionListWidgetComponent,\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { TranslateService } from '@ngx-translate/core';\nimport { flatten, map as _map } from 'lodash';\nimport { combineLatest, EMPTY, of } from 'rxjs';\nimport { catchError, map, pairwise, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport {\n  ActionButtonIconAlignment,\n  ActionButtonSize,\n  ActionButtonStyle,\n  IActionButtonProperties\n} from '../action-button.types';\nimport { IActionButtonDesignProperties } from './action-button-design.types';\n\nconst ACTIONS_KEY = 'actions';\n\nexport class ActionButtonDesignModel\n  extends ViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n  implements IViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private viewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private translateService = this.injector.get(TranslateService);\n\n  label$ = this.sandbox.getComponentPropertyValue('labelKey').pipe(\n    switchMap((labelKey) =>\n      labelKey ? of(this.translateService.instant(labelKey)) : this.sandbox.getComponentPropertyValue('label')\n    ),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  style$ = this.sandbox.getComponentPropertyValue('style');\n  size$ = this.sandbox.getComponentPropertyValue('size');\n  icon$ = this.sandbox.getComponentPropertyValue('icon');\n  iconAlignment$ = this.sandbox.getComponentPropertyValue('iconAlignment');\n\n  private fieldDefinitions$ = this.sandbox.getComponentPropertyValue('recordDefinitionName').pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName\n        ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n            map((recordDefinition) => recordDefinition.fieldDefinitions),\n            catchError(() => of([]))\n          )\n        : of([])\n    )\n  );\n\n  static getInitialProperties(props: IActionButtonProperties): IActionButtonDesignProperties {\n    return {\n      iconAlignment: ActionButtonIconAlignment.Left,\n      label: 'New button',\n      size: ActionButtonSize.Default,\n      icon: null,\n      style: ActionButtonStyle.Primary,\n      recordDefinitionName: null,\n      fieldId: null,\n      recordInstance: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...props\n    };\n  }\n\n  rxInit(): void {\n    // Set initial inspector config.\n    combineLatest([this.sandbox.componentProperties$, this.fieldDefinitions$])\n      .pipe(\n        map(([componentProperties, fieldDefinitions]) =>\n          this.getInspectorConfig(componentProperties, fieldDefinitions)\n        ),\n        take(1),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((inspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    const actions$ = this.sandbox.getChildComponents<IViewActionDesignProperties>();\n\n    combineLatest([\n      actions$.pipe(switchMap((actions) => this.viewActionValidatorService.validate(actions, ACTIONS_KEY))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues) => {\n        this.setValidationIssues(validationIssues);\n      });\n\n    // update field names when Record Definition Name changed\n    this.fieldDefinitions$\n      .pipe(\n        withLatestFrom(this.componentProperties$),\n        map(([fieldDefinitions, properties]: [IFieldDefinition[], IActionButtonDesignProperties]) =>\n          this.getInspectorConfig(properties, fieldDefinitions)\n        )\n      )\n      .subscribe((inspector) => this.sandbox.updateInspectorConfig(inspector));\n\n    // clear fieldId and recordInstance if recordDefinitionName changed\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(pairwise())\n      .subscribe(([oldName, newName]) => {\n        if (oldName && oldName !== newName) {\n          this.sandbox.updateComponentProperties({\n            fieldId: null,\n            recordInstance: null\n          });\n        }\n      });\n\n    this.label$.subscribe((label) => {\n      this.sandbox.setBreadcrumbs(label);\n    });\n\n    this.sandbox\n      .getComponentPropertyValue('action')\n      .pipe(\n        switchMap((action) => (action ? EMPTY : this.label$)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        // Don't build settable properties if 'action' property is not empty.\n        // In this case button threads as a child of association component only.\n        this.sandbox.setSettablePropertiesDataDictionary(label, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  setValidationIssues(issues: IViewComponentDesignValidationIssue[]): void {\n    this.sandbox.setValidationIssues(issues);\n  }\n\n  private getInspectorConfig(\n    props: IActionButtonDesignProperties,\n    fieldDefinitions: IFieldDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const securitySectionControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition name',\n          tooltip: new Tooltip(\n            'The view component will be hidden if the user has no access to the specified record definition.'\n          ),\n          definitionType: RxDefinitionPickerType.StandardDataRecord\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    if (props.recordDefinitionName) {\n      securitySectionControls.push(\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            tooltip: new Tooltip(\n              'The view component will be hidden if the user has no access to the specified field, or disabled if the user only has View permission ' +\n                'for the specified field. <br><br> Record definition name, Field name, and Record instance must all be ' +\n                'specified in order to control the disabled/hidden state of the view component using field permissions.'\n            ),\n            options: fieldDefinitions.map((definition) => ({ name: definition.name, id: String(definition.id) })),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'recordInstance',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Record instance',\n            tooltip: new Tooltip('Expression pointing to a record instance that provides the field permission details.')\n          } as IExpressionInspectorControlOptions\n        }\n      );\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'label',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Label'\n              }\n            },\n            {\n              name: 'style',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Style',\n                required: true,\n                options: _map(ActionButtonStyle, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'size',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Size',\n                options: _map(ActionButtonSize, (value, name) => ({\n                  id: value,\n                  name\n                })),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'icon',\n              component: IconPickerFormControlComponent,\n              options: {\n                label: 'Icon'\n              }\n            },\n            {\n              name: 'iconAlignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Icon alignment',\n                options: _map(ActionButtonIconAlignment, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            getDisabledFieldInspectorConfig(),\n            ...getStandardPropsInspectorConfigs()\n          ]\n        },\n        {\n          label: 'Actions',\n          controls: [\n            {\n              widgetName: ACTIONS_KEY,\n              component: ActionListWidgetComponent\n            }\n          ]\n        },\n        {\n          label: 'Security',\n          controls: securitySectionControls\n        }\n      ]\n    };\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_DISABLED_PROP_DESC,\n  RX_STANDARD_PROPS_DESC,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ActionButtonDesignModel } from './design/action-button-design.model';\nimport { ActionButtonDesignModule } from './design/action-button-design.module';\nimport { ActionButtonDesignComponent } from './design/action-button-design.component';\nimport { ActionButtonModule } from './runtime/action-button.module';\nimport { ActionButtonComponent } from './runtime/action-button.component';\n\n@NgModule({\n  imports: [ActionButtonDesignModule, ActionButtonModule]\n})\nexport class ActionButtonRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ActionButton,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonComponent),\n      properties: [\n        {\n          name: 'recordDefinitionName'\n        },\n        {\n          name: 'fieldId'\n        },\n        {\n          name: 'recordInstance',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'label',\n          localizable: true\n        },\n        RX_DISABLED_PROP_DESC,\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      name: 'Action button',\n      isContainerComponent: true,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'action_button_cursor',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonDesignComponent),\n      designComponentModel: ActionButtonDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ButtonBarComponent } from './runtime/button-bar.component';\nimport { ButtonBarModule } from './runtime/button-bar.module';\nimport { ButtonBarDesignComponent } from './design/button-bar-design.component';\nimport { ButtonBarDesignModel } from './design/button-bar-design.model';\nimport { ButtonBarDesignModule } from './design/button-bar-design.module';\n\n@NgModule({\n  imports: [ButtonBarModule, ButtonBarDesignModule]\n})\nexport class ButtonBarRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ButtonBar,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarComponent),\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n      properties: RX_STANDARD_PROPS_DESC,\n      name: 'Button bar',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'button_panel_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarDesignComponent),\n      designComponentModel: ButtonBarDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ContainerRowWrap } from './container.types';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\nexport const RX_CONTAINER = {\n  type: RxViewComponentType.Container,\n  maxColumnSpan: 12,\n  rowWrapOptions: {\n    xs: {\n      id: ContainerRowWrap.Xs,\n      name: 'Extra Small (No wrapping)'\n    },\n    sm: {\n      id: ContainerRowWrap.Sm,\n      name: 'Small (576 px)'\n    },\n    md: {\n      id: ContainerRowWrap.Md,\n      name: 'Medium (768 px)'\n    },\n    lg: {\n      id: ContainerRowWrap.Lg,\n      name: 'Large (992 px)'\n    },\n    xl: {\n      id: ContainerRowWrap.Xl,\n      name: 'Extra Large (1200 px)'\n    },\n    xxl: {\n      id: ContainerRowWrap.Xxl,\n      name: 'Extra Extra Large (1600 px)'\n    }\n  }\n};\n","import { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  ITagAutocompleteValue,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getHiddenFieldInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { isEmpty, times, values } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, skip, take, takeUntil } from 'rxjs/operators';\nimport { RX_CONTAINER } from '../container.constant';\nimport { ContainerRowWrap } from '../container.types';\nimport { IContainerProperties } from './container-design.types';\n\nconst cssClassesAutocompleteValues = RX_VIEW_DEFINITION.styles.map(\n  (style): ITagAutocompleteValue => ({ text: style.name, data: { value: style.id } })\n);\n\nexport class ContainerDesignModel\n  extends ViewDesignerComponentModel<IContainerProperties>\n  implements IViewDesignerComponentModel<IContainerProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n  hasChildren$: Observable<boolean> = this.sandbox.getChildComponentGuids().pipe(map((guids) => !isEmpty(guids)));\n\n  static getInitialProperties(initialProperties?: IContainerProperties): IContainerProperties {\n    return {\n      name: null,\n      rowWrap: ContainerRowWrap.Sm,\n      columnCount: '1',\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.componentProperties$.subscribe((componentProperties) => this.validate(componentProperties));\n\n    this.sandbox\n      .getComponentPropertyValue('columnCount')\n      .pipe(skip(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe((columnCount) => {\n        this.sandbox.setLayout(this.getDefaultColumnSpans(Number(columnCount)));\n      });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private validate(model: IContainerProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(model));\n  }\n\n  getPropertiesByName(properties: IContainerProperties): IContainerProperties {\n    const result = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  setContainerLayout(columnSizes: number[]): void {\n    this.sandbox.setLayout(columnSizes);\n  }\n\n  private getDefaultColumnSpans(columnCount: number): number[] {\n    const columnSpans: number[] = [];\n    const span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);\n\n    times(columnCount, () => columnSpans.push(span));\n    columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;\n\n    return columnSpans;\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Container.')\n              }\n            },\n            {\n              name: 'columnCount',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Number of columns',\n                required: true,\n                tooltip: new Tooltip(\n                  'Resize container columns on the canvas by dragging the dashed column separator line.'\n                ),\n                options: times(6, (index: number) => ({ id: (++index).toString(), name: index.toString() }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'rowWrap',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Row wrap',\n                sortAlphabetically: false,\n                options: values(RX_CONTAINER.rowWrapOptions),\n                tooltip: new Tooltip(\n                  `The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.`\n                )\n              } as ISelectFormControlOptions\n            },\n            getHiddenFieldInspectorConfig(),\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig(cssClassesAutocompleteValues)\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ContainerModule } from './runtime/container.module';\nimport { ContainerComponent } from './runtime/container.component';\nimport { ContainerDesignModel } from './design/container-design.model';\nimport { ContainerDesignModule } from './design/container-design.module';\nimport { ContainerDesignComponent } from './design/container-design.component';\n\n@NgModule({\n  imports: [ContainerModule, ContainerDesignModule]\n})\nexport class ContainerRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Container,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerComponent),\n      properties: RX_STANDARD_PROPS_DESC,\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n      name: 'Container',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'layout',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerDesignComponent),\n      designComponentModel: ContainerDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  StepperWithUnitsFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { compact, flatten } from 'lodash';\nimport { map, skip, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { ImageAlignment, RX_IMAGE_ALIGNMENT_OPTIONS } from '../image.types';\nimport { IImageProperties } from './image-design.types';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\n\nexport class ImageDesignModel\n  extends ViewDesignerComponentModel<IImageProperties>\n  implements IViewDesignerComponentModel<IImageProperties>\n{\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n\n  private attachmentFields$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName ? this.getAttachmentFieldsFromRecordDefinition(recordDefinitionName) : of([])\n    )\n  );\n\n  private rxModalService = this.injector.get(RxModalService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  private maxWidthUnits = [\n    {\n      name: 'pixels',\n      id: 'px'\n    },\n    {\n      name: '%',\n      id: '%'\n    }\n  ];\n\n  static getInitialProperties(initialProperties?: IImageProperties): IImageProperties {\n    return {\n      name: null,\n      recordDefinitionName: null,\n      recordInstanceId: null,\n      fieldId: null,\n      maxWidth: null,\n      alignment: ImageAlignment.Left,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties: IImageProperties) => {\n      this.sandbox.updateInspectorConfig(this.getInspector(componentProperties));\n    });\n\n    this.recordDefinitionName$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, properties]) => {\n        const newProperties = {\n          ...properties,\n          recordInstanceId: null,\n          fieldId: null\n        };\n\n        this.sandbox.updateComponentProperties(newProperties);\n        this.sandbox.updateInspectorConfig(this.getInspector(newProperties));\n      });\n\n    this.attachmentFields$\n      .pipe(withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([attachmentFields, properties]) => {\n        this.sandbox.updateInspectorConfig(this.getInspector(properties, attachmentFields));\n      });\n\n    combineLatest([\n      this.validateEmptyProp('recordDefinitionName', 'Record definition name cannot be blank.'),\n      this.validateEmptyProp('recordInstanceId', 'Record instance ID cannot be blank.'),\n      this.validateEmptyProp('fieldId', 'Field ID cannot be blank.'),\n      this.sandbox.getComponentPropertyValue('maxWidth').pipe(map((value) => this.validateMaxWidth(value))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getAttachmentFieldsFromRecordDefinition(recordDefinitionName: string): Observable<RxSelectOption[]> {\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n      map((recordDefinition: IRecordDefinition) =>\n        recordDefinition.fieldDefinitions\n          .filter((definition) => definition.resourceType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType)\n          .map(({ id, name }) => ({\n            id: id.toString(),\n            name\n          }))\n      )\n    );\n  }\n\n  private getInspector(props: IImageProperties, attachmentFields: RxSelectOption[] = []) {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Image view component.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.RegularRecord,\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue) && props.recordInstanceId && props.fieldId) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'Record Instance ID and Field ID will be cleared. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                },\n                required: true\n              } as IDefinitionPickerComponentOptions\n            },\n            {\n              name: 'fieldId',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Field name',\n                options: attachmentFields,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'recordInstanceId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Record ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n            {\n              name: 'alignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Horizontal alignment',\n                options: RX_IMAGE_ALIGNMENT_OPTIONS\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'maxWidth',\n              component: StepperWithUnitsFormControlComponent,\n              options: {\n                label: 'Maximum width',\n                defaultUnit: 'px',\n                units: this.maxWidthUnits,\n                stepperOptionByUnits: {\n                  px: {\n                    minValue: 0\n                  },\n                  '%': {\n                    minValue: 0,\n                    maxValue: 100,\n                    defaultValue: 100\n                  }\n                }\n              } as IStepperWithUnitsFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  private validateEmptyProp<K extends keyof IImageProperties>(\n    propertyName: K,\n    description: string\n  ): Observable<IViewComponentDesignValidationIssue> {\n    return this.sandbox\n      .getComponentPropertyValue(propertyName)\n      .pipe(map((value) => (value ? null : this.sandbox.createError(description, propertyName))));\n  }\n\n  private validateMaxWidth(maxWidth: string): IViewComponentDesignValidationIssue {\n    if (maxWidth) {\n      const matches = maxWidth.match(/^([+-]?\\d+(?:\\.\\d+)?)(.*)/);\n\n      if (matches) {\n        const numberValue = Number(matches[1]);\n        const unitValue = matches[2];\n\n        if (unitValue === '%' && numberValue > 100) {\n          return this.sandbox.createError('Maximum width cannot be greater than 100%.');\n        } else if (numberValue < 0) {\n          return this.sandbox.createError('Maximum width should be a positive number.');\n        }\n      }\n    }\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_STANDARD_PROPS_DESC, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { ImageDesignComponent } from './design/image-design.component';\nimport { ImageDesignModule } from './design/image-design.module';\nimport { ImageDesignModel } from './design/image-design.model';\nimport { ImageComponent } from './runtime/image.component';\nimport { ImageModule } from './runtime/image.module';\n\n@NgModule({\n  imports: [ImageModule, ImageDesignModule]\n})\nexport class ImageRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Image,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageComponent),\n      name: 'Image',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      properties: [\n        {\n          name: 'recordInstanceId',\n          enableExpressionEvaluation: true\n        },\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageDesignComponent),\n      designComponentModel: ImageDesignModel,\n      icon: 'attachment_image_adapt',\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import {\n  IViewDesignerComponentModel,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService\n} from '@helix/platform/view/api';\nimport { ViewDesignerComponentModel } from '@helix/platform/view/designer';\nimport { filter, map } from 'rxjs/operators';\n\nexport class PageDesignModel extends ViewDesignerComponentModel implements IViewDesignerComponentModel {\n  private rxViewComponentRegistryService: RxViewComponentRegistryService = this.injector.get<\n    RxViewComponentRegistryService\n  >(RxViewComponentRegistryService);\n\n  componentName$ = this.sandbox.getChildComponents().pipe(\n    filter((childComponents) => childComponents.length > 0),\n    map((childComponents) => {\n      const pageComponentType = childComponents[0].type;\n      const descriptor = this.rxViewComponentRegistryService.get(pageComponentType);\n\n      return descriptor?.name || RX_VIEW_DEFINITION.unknownPageComponent.name;\n    })\n  );\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { PageModule } from './runtime/page.module';\nimport { PageComponent } from './runtime/page.component';\nimport { PageDesignModule } from './design/page-design.module';\nimport { PageDesignComponent } from './design/page-design.component';\nimport { PageDesignModel } from './design/page-design.model';\n\n@NgModule({\n  imports: [PageModule, PageDesignModule]\n})\nexport class PageRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Page,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(PageComponent),\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Page',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(PageDesignComponent),\n      designComponentModel: PageDesignModel,\n      hidden: true,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import {\n  ViewComponentAddComponentPayload,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDropPredicateData,\n  ViewDesignerComponentModel,\n  IViewDesignerInspectorConfig\n} from '@helix/platform/view/designer';\nimport { IDataDictionaryBranch, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { ISelectOption } from '@helix/platform/shared/components';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { combineLatest, forkJoin, Observable, of, Subject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { flow, isEqual, map as _map, reject, uniq } from 'lodash';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxRecordEditorDesignHelpersService } from './record-editor-design-helpers.service';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { IRecordEditorSelectedFieldComponent } from './components/fields-inspector-widget/fields-inspector-widget.types';\n\nexport class RecordEditorDesignModel\n  extends ViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n  implements IViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n{\n  private rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  private rxViewComponentRegistryService =\n    this.injector.get<RxViewComponentRegistryService>(RxViewComponentRegistryService);\n\n  private rxRecordEditorDesignHelpersService = this.injector.get<RxRecordEditorDesignHelpersService>(\n    RxRecordEditorDesignHelpersService\n  );\n\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  private updateInspector$ = new Subject<IViewDesignerInspectorConfig>();\n\n  private associationOptions$: Observable<ISelectOption[]>;\n  private isAssociationRequired$: Observable<boolean>;\n\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  private mode$ = this.sandbox.getComponentPropertyValue('mode');\n  private showReadOnlyState$ = this.sandbox.getComponentPropertyValue('showReadOnlyState');\n  private targetExtensionContainerGuid$ = this.sandbox.getViewPropertyValue('targetExtensionContainerGuid');\n  private targetViewDefinitionName$ = this.sandbox.getViewPropertyValue('targetViewDefinitionName');\n\n  private recordDefinition$ = this.recordDefinitionName$.pipe(\n    switchMap((name) => this.rxRecordEditorDesignHelpersService.getRecordDefinition(name)),\n    shareReplay(1)\n  );\n\n  private childComponentGuids$ = this.sandbox.getChildComponentGuids().pipe(shareReplay(1));\n\n  private allChildFieldComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => this.rxRecordEditorDesignHelpersService.isFieldComponent(component), true)\n    .pipe(distinctUntilChanged<string[]>(isEqual), shareReplay(1));\n\n  isExtensionView$ = this.targetViewDefinitionName$.pipe(map(Boolean), shareReplay(1));\n\n  childFieldIds$: Observable<string[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid)\n            )\n          ).pipe(map(uniq))\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  selectedFieldComponents$: Observable<IRecordEditorSelectedFieldComponent[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.sandbox.getComponent(guid).pipe(\n                  take(1),\n                  map((component) => this.rxViewComponentRegistryService.get(component.type).name)\n                ),\n                this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid),\n                this.sandbox.getComponentPropertyValue<'label', IBaseRecordEditorFieldProperties>('label', guid)\n              ]).pipe(\n                map(\n                  ([componentName, fieldId, label]): IRecordEditorSelectedFieldComponent => ({\n                    fieldId,\n                    label: label || '<No field selected>',\n                    componentName,\n                    guid\n                  })\n                )\n              )\n            )\n          )\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  associationComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => component.type === RxViewComponentType.Association, true)\n    .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n\n  hasChildren$ = this.childComponentGuids$.pipe(\n    map((guids) => Boolean(guids.length)),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  readonly systemFieldComponentGuids$ = this.recordDefinition$.pipe(\n    mergeMap((recordDefinition) =>\n      recordDefinition\n        ? this.selectedFieldComponents$.pipe(\n            map((components) =>\n              components\n                .filter((component) => {\n                  const fieldDefinition = recordDefinition.fieldDefinitions.find(\n                    (definition) => String(definition.id) === component.fieldId\n                  );\n\n                  return this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n                })\n                .map((component) => component.guid)\n            ),\n            take(1)\n          )\n        : of([])\n    )\n  );\n\n  recordFieldDefinitionItems$ = this.recordDefinition$.pipe(\n    map((recordDefinition) =>\n      recordDefinition ? this.rxRecordEditorDesignHelpersService.getRecordFieldDefinitionItems(recordDefinition) : []\n    ),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProps?: IRecordEditorProperties): IRecordEditorDesignProperties {\n    const result: IRecordEditorProperties = {\n      name: null,\n      label: null,\n      mode: RecordEditorMode.Edit,\n      recordInstanceId: null,\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      defaultState: initialProps.defaultState || null,\n      allowEdit: '1',\n      styles: null,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProps\n    };\n\n    return {\n      ...result,\n      showReadOnlyState: Boolean(result.defaultState),\n      allowEdit: result.mode === RecordEditorMode.Edit ? result.allowEdit : null\n    };\n  }\n\n  rxInit(): void {\n    const targetRecordEditorProperties$ = combineLatest([\n      this.targetViewDefinitionName$.pipe(\n        switchMap((targetViewDefinitionName) =>\n          this.rxRecordEditorDesignHelpersService.getViewDefinition(targetViewDefinitionName)\n        )\n      ),\n      this.targetExtensionContainerGuid$\n    ]).pipe(\n      map(([viewDefinition, targetExtensionContainerGuid]) =>\n        this.rxRecordEditorDesignHelpersService.getTargetRecordEditorProperties(\n          viewDefinition,\n          targetExtensionContainerGuid\n        )\n      )\n    );\n\n    this.associationOptions$ = combineLatest([targetRecordEditorProperties$, this.recordDefinitionName$]).pipe(\n      switchMap(([targetRecordEditorProperties, extensionRecordDefinitionName]) =>\n        this.rxRecordEditorDesignHelpersService.getAssociationOptions(\n          targetRecordEditorProperties.recordDefinitionName,\n          extensionRecordDefinitionName\n        )\n      )\n    );\n\n    this.isAssociationRequired$ = combineLatest([\n      this.isExtensionView$,\n      this.recordDefinitionName$,\n      targetRecordEditorProperties$\n    ]).pipe(\n      map(\n        ([isExtensionView, recordDefinitionName, targetRecordEditorProperties]) =>\n          isExtensionView && recordDefinitionName !== targetRecordEditorProperties.recordDefinitionName\n      )\n    );\n\n    this.updateInspector$.pipe(takeUntil(this.sandbox.destroyed$)).subscribe((inspector) => {\n      this.sandbox.updateInspectorConfig(inspector);\n    });\n\n    // initial set of inspector\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$,\n      targetRecordEditorProperties$\n    ])\n      .pipe(first(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          { recordDefinitionName, mode, showReadOnlyState },\n          isExtensionView,\n          associationOptions,\n          isAssociationRequired,\n          targetRecordEditorProperties\n        ]) => {\n          if (isExtensionView && !recordDefinitionName) {\n            recordDefinitionName = targetRecordEditorProperties.recordDefinitionName;\n            mode = targetRecordEditorProperties.mode;\n\n            this.sandbox.updateComponentProperties({ mode, recordDefinitionName });\n          }\n\n          this.updateInspector$.next(\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              [],\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n          );\n        }\n      );\n\n    this.mode$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([mode, props]) => {\n        this.sandbox.updateComponentProperties(\n          mode === RecordEditorMode.Create || mode === RecordEditorMode.Temporary\n            ? {\n                ...props,\n                recordInstanceId: null,\n                defaultState: null,\n                allowEdit: null,\n                showReadOnlyState: null\n              }\n            : {\n                ...props,\n                defaultState: null,\n                allowEdit: '1',\n                showReadOnlyState: false\n              }\n        );\n      });\n\n    this.showReadOnlyState$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([showReadOnlyState, props]) => {\n        this.sandbox.updateComponentProperties({\n          ...props,\n          defaultState: showReadOnlyState ? RecordEditorState.Read : null\n        });\n      });\n\n    combineLatest([\n      combineLatest([\n        this.sandbox.getComponentPropertyValue('recordDefinitionName'),\n        this.sandbox.getComponentPropertyValue('mode'),\n        this.showReadOnlyState$\n      ]).pipe(skip(1)),\n      this.recordFieldDefinitionItems$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$\n    ])\n      .pipe(\n        map(\n          ([\n            [recordDefinitionName, mode, showReadOnlyState],\n            recordFieldDefinitionItems,\n            isExtensionView,\n            associationOptions,\n            isAssociationRequired\n          ]) =>\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              recordFieldDefinitionItems,\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(this.updateInspector$);\n\n    // clear child components after changing of record definition\n    this.recordDefinitionName$\n      .pipe(pairwise(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([prevName, currentName]) => {\n        if (prevName) {\n          this.sandbox.setChildren([]);\n          this.sandbox.updateComponentProperties({ associationDefinitionName: null });\n        }\n      });\n\n    this.associationOptions$\n      .pipe(\n        skip(1),\n        filter((associationOptions) => associationOptions.length === 1),\n        withLatestFrom(this.isAssociationRequired$),\n        filter(([, isAssociationRequired]) => isAssociationRequired),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([[{ id: associationDefinitionName }]]) =>\n        this.sandbox.updateComponentProperties({ associationDefinitionName })\n      );\n\n    // TODO: performance\n    // validation\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.childFieldIds$,\n      this.isAssociationRequired$,\n      this.isExtensionView$\n    ])\n      .pipe(\n        map(([componentProperties, recordDefinition, childFieldIds, isAssociationRequired, isExtensionView]) => {\n          return this.rxRecordEditorDesignHelpersService.validate(\n            this.sandbox,\n            componentProperties,\n            recordDefinition,\n            childFieldIds,\n            isAssociationRequired,\n            isExtensionView\n          );\n        }),\n        distinctUntilChanged(isEqual),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.sandbox.getComponentPropertyValue('name').pipe(\n        map((name) => name || null),\n        distinctUntilChanged()\n      ),\n      this.recordDefinition$\n    ])\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(([name, recordDefinition]) => {\n        this._setSettableProperties(name, recordDefinition);\n        this._setCommonDataDictionary(name, recordDefinition);\n      });\n  }\n\n  removeComponent(guids: string[]): void {\n    this.sandbox.removeComponents(guids);\n  }\n\n  updateSelectedFieldComponents(fieldIds: string[]): void {\n    this.selectedFieldComponents$\n      .pipe(\n        take(1),\n        mergeMap((components) => {\n          const fieldIdsToAdd = fieldIds.filter(\n            (fieldId) => !components.find((component) => component.fieldId === fieldId)\n          );\n\n          const fieldComponentsToAdd$: Observable<ViewComponentAddComponentPayload[]> = fieldIdsToAdd.length\n            ? this.recordFieldDefinitionItems$.pipe(\n                map((items) =>\n                  fieldIdsToAdd.map((fieldId) => {\n                    const { viewComponentType: type, name: label } = items.find((item) => item.id === fieldId);\n\n                    return {\n                      type,\n                      propertiesByName: {\n                        fieldId,\n                        label\n                      }\n                    };\n                  })\n                ),\n                take(1)\n              )\n            : of([]);\n\n          const fieldIdsSet = new Set(fieldIds);\n\n          const componentGuidsToRemove = components\n            .filter((component) => component.fieldId)\n            .filter((component) => !fieldIdsSet.has(component.fieldId))\n            .map((component) => component.guid);\n\n          return forkJoin([fieldComponentsToAdd$, of(componentGuidsToRemove)]);\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([fieldComponentsToAdd, fieldGuidsToRemove]) => {\n        if (fieldComponentsToAdd.length) {\n          this.sandbox.addComponent(fieldComponentsToAdd);\n        }\n\n        if (fieldGuidsToRemove.length) {\n          this.sandbox.removeComponents(fieldGuidsToRemove);\n        }\n      });\n  }\n\n  getPropertiesByName(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    return this.rxRecordEditorDesignHelpersService.getComponentProperties(properties);\n  }\n\n  _dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  _onBeforeModeChange(prevMode: string, currentMode: string): Promise<boolean> {\n    if (prevMode !== RecordEditorMode.Create && currentMode === RecordEditorMode.Create) {\n      return this.systemFieldComponentGuids$\n        .pipe(\n          mergeMap((systemFieldComponentGuids) =>\n            systemFieldComponentGuids.length\n              ? this.rxRecordEditorDesignHelpersService.confirmSystemFieldRemoval().pipe(\n                  tap((isConfirmed) => {\n                    if (isConfirmed) {\n                      this.sandbox.removeComponents(systemFieldComponentGuids);\n                    }\n                  })\n                )\n              : of(true)\n          ),\n          take(1)\n        )\n        .toPromise();\n    } else {\n      return Promise.resolve(true);\n    }\n  }\n\n  dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  private _setCommonDataDictionary(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setCommonDataDictionary(this._getCommonProps(componentName, recordDefinition));\n  }\n\n  private _setSettableProperties(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n      {\n        label: 'Edit state',\n        expression: this.getExpressionForProperty('editState')\n      },\n      {\n        label: 'Read state',\n        expression: this.getExpressionForProperty('readState')\n      },\n      ...(recordDefinition\n        ? [\n            {\n              label: 'Record instance',\n              children: recordDefinition.fieldDefinitions.map((definition) => ({\n                label: definition.name,\n                expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${definition.id}.value`)\n              }))\n            }\n          ]\n        : [])\n    ]);\n  }\n\n  private _getCommonProps(\n    componentName: string,\n    recordDefinition: IRecordDefinition\n  ): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: componentName,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Can save',\n          expression: this.getExpressionForProperty('canSave')\n        },\n        {\n          label: 'In read state',\n          expression: this.getExpressionForProperty('inReadState')\n        },\n        {\n          label: 'Is dirty',\n          expression: this.getExpressionForProperty('isDirty')\n        },\n        {\n          label: 'Is valid',\n          expression: this.getExpressionForProperty('isValid')\n        },\n        {\n          label: 'Record definition name',\n          expression: this.getExpressionForProperty('recordDefinitionName')\n        },\n        {\n          label: 'Record instance',\n          expression: this.getExpressionForProperty('recordInstance'),\n          children: recordDefinition ? this._getRecordInstanceChildProps(recordDefinition) : []\n        },\n        {\n          label: 'Record instance ID',\n          expression: this.getExpressionForProperty('recordInstanceId')\n        }\n      ]\n    };\n  }\n\n  private _getRecordInstanceChildProps(recordDefinition: IRecordDefinition): IViewComponentDesignCommonDataDictionary {\n    return flow(\n      (fieldDefinitions) => reject(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.attachment }),\n      (fieldDefinitions) =>\n        _map(fieldDefinitions, (fieldDefinition: IFieldDefinition) => {\n          const child: IDataDictionaryBranch = {\n            label: fieldDefinition.name,\n            expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${fieldDefinition.id}.value`)\n          };\n\n          if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection) {\n            const children = (child.autocompleteOptions = _map(\n              fieldDefinition.optionNamesById,\n              (optionName, optionValue) => ({\n                label: optionName,\n                expression: this.getExpressionForProperty(\n                  `recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id`\n                )\n              })\n            ));\n\n            child.children = [\n              {\n                label: `${fieldDefinition.name} (Option name)`,\n                expression: this.getExpressionForProperty(`selectionFieldOptionNamesById.${fieldDefinition.id}`)\n              },\n              {\n                label: 'Options',\n                children\n              }\n            ];\n          }\n\n          return child;\n        })\n    )(recordDefinition.fieldDefinitions);\n  }\n\n  private _getComponentName(name: string, recordDefinition: IRecordDefinition): string {\n    let componentName = this.sandbox.descriptor.name;\n\n    const recordDefinitionName = recordDefinition\n      ? this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n      : null;\n\n    if (recordDefinitionName && name) {\n      componentName += ` (${recordDefinitionName}: ${name})`;\n    } else if (recordDefinitionName) {\n      componentName += ` (${recordDefinitionName})`;\n    } else if (name) {\n      componentName += ` (${name})`;\n    }\n\n    return componentName;\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RecordEditorModule } from './runtime/record-editor.module';\nimport { RecordEditorComponent } from './runtime/record-editor.component';\nimport { RecordEditorDesignModule } from './design/record-editor-design.module';\nimport { RecordEditorDesignComponent } from './design/record-editor-design.component';\nimport { RecordEditorDesignModel } from './design/record-editor-design.model';\n\n@NgModule({\n  imports: [RecordEditorModule, RecordEditorDesignModule]\n})\nexport class RecordEditorRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RecordEditor,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorComponent),\n      properties: [\n        {\n          name: 'recordInstanceId',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'allowEdit',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'label',\n          localizable: true\n        },\n        RX_AVAILABLE_ON_DEVICES_PROP_DESC\n      ],\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Record editor',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'file_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorDesignComponent),\n      designComponentModel: RecordEditorDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { IAssociationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  IViewLayout,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewComponentDropPredicateData,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  cloneDeep,\n  compact,\n  filter as _filter,\n  find,\n  flatten,\n  head,\n  includes,\n  isEmpty,\n  isEqual,\n  pick,\n  pull\n} from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject, zip } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  skip,\n  skipWhile,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { ActionButtonDesignModel } from '../../action-button/design/action-button-design.model';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport {\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridFilterMode } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport { RxRecordGridDesignUtilsService } from './record-grid-design-utils.service';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IViewPresetSelectorDesignProperties } from '../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IGridViewPresetProperties } from '../common/types/record-grid.types';\nimport { IPresetItem } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\n\nexport class RecordGridDesignModel\n  extends ViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n  implements IViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n{\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxViewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxGuidService = this.injector.get(RxGuidService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private preservedRecordDefinition: IRecordDefinition = null;\n  private preservedRecordAssociationDefinitions: IAssociationDefinition[] = [];\n  sandbox: IViewComponentDesignSandbox<IRecordGridDesignProperties>;\n\n  currentGridDesignProperties: IRecordGridDesignProperties = null;\n  actionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  rowActionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  componentPropertiesChangeFromCanvas$ = new Subject<IRecordGridDesignProperties>();\n  recordDefinition$: Observable<IRecordDefinition>;\n  recordAssociationDefinitions$: Observable<IAssociationDefinition[]>;\n  columns$ = this.sandbox.getComponentPropertyValue('columns');\n  enableFiltering$ = this.sandbox.getComponentPropertyValue('enableFiltering');\n  recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n  associatedRecordNodeSide$ = this.sandbox.getComponentPropertyValue('associatedRecordNodeSide');\n  childComponentsTree$ = this.sandbox.getChildComponentsTree();\n\n  viewPresetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.sandbox.getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector);\n\n  gridViewPresets$: Observable<IViewComponentDesignData<IGridViewPresetProperties>[]> = this.childComponentsTree$.pipe(\n    map((components) => this.rxRecordGridDesignUtilsService.getGridViewPresetsFromChildData(components))\n  );\n\n  viewPresetSelectorGuid$ = this.sandbox.getComponentPropertyValue('viewPresetSelector').pipe(\n    map((val) => this.extractViewPresetSelectorGuid(val)),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.viewPresetSelectorGuid$.pipe(\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    distinctUntilChanged(isEqual),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  rowActionButtonGuids$ = this.sandbox.getLayout(this.sandbox.guid).pipe(\n    filter<IViewLayout>(Boolean),\n    map((layout) => {\n      const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n      return head(rowActionsOutlet.columns).children;\n    }),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProperties: IRecordGridDesignProperties): IRecordGridDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    const initialProps: IRecordGridDesignProperties = {\n      bordered: true,\n      expandable: false,\n      name: null,\n      mode: RecordGridDesignDefinitionMode.Record,\n      recordDefinitionName: null,\n      showDataForAllLocales: false,\n      associationDefinitionName: null,\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      styles: null,\n      cardLayoutWidth: null,\n      enableFiltering: true,\n      getDataForHiddenColumns: true,\n      requiredFilters: 0,\n      enableFilterPresets: true,\n      defaultFilterPreset: null,\n      initialSortColumn: null,\n      columns: [],\n      filterMode: RecordGridFilterMode.Basic,\n      filters: { basicFilters: [], filtersJson: null },\n      filterExpression: null,\n      filterPresets: [],\n      striped: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE\n    };\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    this.recordAssociationDefinitions$ = this.recordDefinitionName$.pipe(\n      mergeMap((recordDefinitionName) => this.getRecordAssociationDefinitions(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    const columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]> =\n      this.childComponentsTree$.pipe(\n        map((components) => components.filter((component) => component.type === RX_RECORD_GRID.components.column)),\n        // ignore child action button component updates\n        distinctUntilChanged(isEqual)\n      );\n\n    const basicRecordGridFilters$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    const filterPresets$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    this.actionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => !includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    this.rowActionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    // remove grid view presets in case if bound preset selector is removed\n    this.viewPresetSelectors$\n      .pipe(\n        map((viewPresetSelectors) => viewPresetSelectors.map((selector) => selector.guid).sort()),\n        distinctUntilChanged<string[]>(isEqual),\n        withLatestFrom(this.viewPresetSelectorGuid$),\n        filter(\n          ([viewPresetSelectors, viewPresetSelectorGuid]) =>\n            viewPresetSelectorGuid && !viewPresetSelectors.includes(viewPresetSelectorGuid)\n        ),\n        switchMap(() => this.childComponentsTree$.pipe(take(1))),\n        map((components) => components.filter((comp) => comp.type !== RX_RECORD_GRID.components.viewPreset)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((components) => {\n        this.sandbox.setChildren(components);\n        this.sandbox.updateComponentProperties({ viewPresetSelector: null });\n      });\n\n    this.sandbox.viewModelsInitialized$\n      .pipe(\n        withLatestFrom(this.rowActionButtonComponents$),\n        map(([viewModelsInitialized, rowActionButtons]) => rowActionButtons),\n        filter((rowActionButtons) => !!rowActionButtons.length)\n      )\n      .subscribe((rowActionButtons) => {\n        rowActionButtons.forEach((rowActionButton) => {\n          const model = this.sandbox.getComponentModel<ActionButtonDesignModel>(rowActionButton.guid);\n\n          model.setValidationIssues([]);\n        });\n      });\n\n    merge(this.sandbox.componentProperties$.pipe(skip(1)), this.componentPropertiesChangeFromCanvas$)\n      .pipe(\n        distinctUntilChanged((oldValue, newValue) => isEqual(this.currentGridDesignProperties, newValue)),\n        mergeMap(\n          (\n            componentDesignProperties: IRecordGridDesignProperties\n          ): Observable<[IRecordGridDesignProperties, IRecordGridDesignProperties]> => {\n            const previousComponentDesignProperties = this.currentGridDesignProperties;\n\n            if (\n              previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n            ) {\n              return zip(\n                this.getRecordDefinition(componentDesignProperties.recordDefinitionName),\n                this.getRecordAssociationDefinitions(componentDesignProperties.recordDefinitionName)\n              ).pipe(map(() => [previousComponentDesignProperties, componentDesignProperties]));\n            } else {\n              return of([previousComponentDesignProperties, componentDesignProperties]);\n            }\n          }\n        ),\n        withLatestFrom(this.actionButtonComponents$, this.rowActionButtonComponents$, this.gridViewPresets$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([\n          [previousComponentDesignProperties, componentDesignProperties],\n          actionButtonComponents,\n          rowActionButtonComponents,\n          gridViewPresets\n        ]) => {\n          const recordDefinition = this.preservedRecordDefinition;\n          const recordAssociationDefinitions = this.preservedRecordAssociationDefinitions;\n\n          let propertiesToUpdate: Partial<IRecordGridDesignProperties>;\n\n          if (!componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: false\n            };\n          } else if (!previousComponentDesignProperties.enableFiltering && componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: true\n            };\n          }\n\n          if (\n            previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n          ) {\n            propertiesToUpdate = {\n              filterPresets: [],\n              filters: { basicFilters: [], filtersJson: null },\n              initialSortColumn: null,\n              associationDefinitionName: null,\n              filterExpression: null\n            };\n\n            if (recordDefinition) {\n              const columns = this.rxRecordGridDesignUtilsService.getDefaultColumns(recordDefinition);\n\n              const payloads: IViewComponentDesignSetPayload[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(columns, null);\n\n              payloads.push(...actionButtonComponents);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate.columns = columns;\n            } else {\n              this.sandbox.setChildren(actionButtonComponents);\n\n              propertiesToUpdate.columns = [];\n            }\n          } else {\n            const childrenModels = pick(\n              componentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            const previousChildrenModels = pick(\n              previousComponentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            if (!isEqual(previousChildrenModels, childrenModels)) {\n              const payloads: IViewComponentDesignSetPayload<any>[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(\n                  childrenModels.columns,\n                  childrenModels.initialSortColumn\n                );\n\n              const newInspectorColumns = this.rxRecordGridDesignUtilsService.getInspectorColumnsFromDesignData(\n                payloads as IViewComponentDesignData<IRecordGridDesignColumnData>[]\n              );\n\n              payloads.push(\n                ...this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                  childrenModels.filters.basicFilters || []\n                )\n              );\n\n              const filterPresetComponentPayloads =\n                this.rxRecordGridDesignUtilsService.getGridFilterPresetComponentPayloads(\n                  childrenModels.filterPresets,\n                  newInspectorColumns.filter((column) => column.filterable)\n                );\n\n              payloads.push(...filterPresetComponentPayloads);\n\n              childrenModels.filterPresets =\n                this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(\n                  filterPresetComponentPayloads as IViewComponentDesignData[]\n                );\n\n              payloads.push(...actionButtonComponents, ...rowActionButtonComponents, ...gridViewPresets);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate = {\n                columns: newInspectorColumns,\n                initialSortColumn: this.rxRecordGridDesignUtilsService.getInitialSortColumnModel(newInspectorColumns),\n                filterPresets: childrenModels.filterPresets\n              };\n            }\n          }\n\n          if (previousComponentDesignProperties.filterMode !== componentDesignProperties.filterMode) {\n            if (componentDesignProperties.filterMode === RecordGridFilterMode.Basic) {\n              propertiesToUpdate = {\n                filterExpression: null\n              };\n            } else {\n              propertiesToUpdate = {\n                filters: { basicFilters: [], filtersJson: null }\n              };\n            }\n          }\n\n          if (\n            previousComponentDesignProperties.associationDefinitionName !==\n            componentDesignProperties.associationDefinitionName\n          ) {\n            propertiesToUpdate = {\n              ...(propertiesToUpdate || {}),\n              associatedRecordNodeSide: this.getAssociatedRecordNodeSide(\n                componentDesignProperties,\n                recordAssociationDefinitions\n              )\n            };\n          }\n\n          if (previousComponentDesignProperties.mode !== componentDesignProperties.mode) {\n            propertiesToUpdate = {\n              associationDefinitionName: null,\n              associatedRecordId: null,\n              associatedRoleName: null,\n              associatedRecordNodeSide: null\n            };\n          }\n\n          componentDesignProperties = {\n            ...componentDesignProperties,\n            ...propertiesToUpdate\n          };\n\n          if (previousComponentDesignProperties.enableFiltering && !componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              ...propertiesToUpdate,\n              requiredFilters: 0\n            };\n          }\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            propertiesToUpdate,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(\n        map((recordDefinitionName) =>\n          recordDefinitionName\n            ? null\n            : this.sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName')\n        )\n      ),\n      columnComponents$.pipe(switchMap((columns) => this.validateColumns(columns))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue('mode')\n        .pipe(\n          switchMap((mode) =>\n            mode === RecordGridDesignDefinitionMode.Association\n              ? this.validateAssociationModeProps()\n              : this.actionButtonComponents$.pipe(switchMap((components) => this.validateActionButtons(components)))\n          )\n        ),\n      this.rowActionButtonComponents$.pipe(switchMap((rowActionButtons) => this.validateRowActions(rowActionButtons))),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(compact), map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((issues) => {\n        this.sandbox.setValidationIssues(issues);\n      });\n\n    // set initial properties and inspector config\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.recordAssociationDefinitions$,\n      columnComponents$,\n      basicRecordGridFilters$,\n      filterPresets$\n    ])\n      .pipe(take(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          componentProperties,\n          recordDefinition,\n          recordAssociationDefinitions,\n          columnComponents,\n          basicRecordGridFilters,\n          filterPresets\n        ]) => {\n          const componentDesignProperties = this.rxRecordGridDesignUtilsService.getComponentDesignProperties(\n            componentProperties as unknown as IRecordGridProperties,\n            initialProps,\n            columnComponents,\n            basicRecordGridFilters,\n            filterPresets\n          );\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            componentDesignProperties,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    const name$ = this.sandbox\n      .getComponentPropertyValue('name')\n      .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n    const associationDefinitionDisplayName$ = this.associationDefinitionName$.pipe(\n      map((name) => this.rxDefinitionNameService.getDisplayName(name)),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.rxRecordGridDesignUtilsService\n      .getColumnDataDictionaryBranch(\n        this.sandbox.guid,\n        this.sandbox.descriptor.name,\n        name$,\n        columnComponents$,\n        this.recordDefinition$,\n        associationDefinitionDisplayName$\n      )\n      .pipe(skipWhile(isEmpty), takeUntil(this.sandbox.destroyed$))\n      .subscribe((dataDictionaryBranch) => {\n        this.sandbox.setCommonDataDictionary(dataDictionaryBranch);\n      });\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(map((name) => this.rxDefinitionNameService.getDisplayName(name))),\n      associationDefinitionDisplayName$,\n      name$\n    ])\n      .pipe(\n        map((names) => this.rxRecordGridDesignUtilsService.getComponentName(this.sandbox.descriptor.name, ...names)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((name) => {\n        // Set name to be used in the data dictionary for set property action if record grid will have child action buttons.\n        this.sandbox.setSettablePropertiesDataDictionary(name, []);\n      });\n\n    // updates grid view presets when view preset changes\n    this.selectedPresetsList$\n      .pipe(skip(1), withLatestFrom(this.childComponentsTree$, this.columns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([selectedPresetsList, childComponents, columns]) => {\n        this.updatePresetViewComponents(childComponents, selectedPresetsList, columns);\n      });\n  }\n\n  private updatePresetViewComponents(\n    childComponents: IViewComponentDesignData[],\n    selectedPresetsList: IPresetItem[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const gridViewPresetComponents = childComponents.filter((c) => c.type === RX_RECORD_GRID.components.viewPreset);\n\n    const gridViewPresetPayloads = selectedPresetsList.map(({ guid }) => {\n      const existing = gridViewPresetComponents.find((c) => c.data.viewPresetGuid === guid);\n\n      return existing ?? this.rxRecordGridDesignUtilsService.getGridViewPresetPayload(guid, columns);\n    });\n\n    this.sandbox.setChildrenByType(gridViewPresetPayloads, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  private getAssociatedRecordNodeSide(\n    componentDesignProperties: IRecordGridDesignProperties,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): string {\n    const selectedAssociationDefinition = componentDesignProperties.associationDefinitionName\n      ? recordAssociationDefinitions.find(({ name }) => name === componentDesignProperties.associationDefinitionName)\n      : null;\n\n    return selectedAssociationDefinition\n      ? selectedAssociationDefinition.nodeAId === componentDesignProperties.recordDefinitionName\n        ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n        : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value\n      : null;\n  }\n\n  actionButtonDropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton;\n  }\n\n  getPropertiesByName(properties: IRecordGridDesignProperties): IRecordGridProperties {\n    return this.rxRecordGridDesignUtilsService.getComponentProperties(properties);\n  }\n\n  setRowActions(rowActions: IRowAction[]): void {\n    this.rowActionButtonGuids$\n      .pipe(take(1), withLatestFrom(this.childComponentsTree$))\n      .subscribe(([rowActionButtonGuids, childComponentsTree]) => {\n        const childComponentPayloads: IViewComponentDesignSetPayload<any>[] = childComponentsTree.filter(\n          (childComponent) => !includes(rowActionButtonGuids, childComponent.guid)\n        );\n\n        childComponentPayloads.push(...this.rxRecordGridDesignUtilsService.getRowActionButtonPayloads(rowActions));\n\n        this.sandbox.setChildren(childComponentPayloads);\n\n        this.toggleActionsColumn(rowActions.length > 0);\n      });\n  }\n\n  extractViewPresetSelectorGuid(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n\n  private toggleActionsColumn(showActionsColumn: boolean): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties) => {\n      const columns = cloneDeep(componentProperties.columns);\n\n      const actionsColumn = find(columns, { fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id });\n\n      if (showActionsColumn && !actionsColumn) {\n        columns.push({\n          fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n          guid: this.rxGuidService.generate(),\n          title: RX_RECORD_GRID.actionsColumnFieldDefinition.name,\n          visible: true,\n          index: columns.length,\n          filterable: false,\n          sortable: false,\n          searchable: false\n        });\n      } else if (!showActionsColumn) {\n        pull(columns, actionsColumn);\n\n        columns.forEach((column, index) => {\n          column.index = index;\n        });\n      }\n\n      this.updateComponentPropertiesAndConfig(\n        componentProperties,\n        {\n          columns\n        },\n        this.preservedRecordDefinition,\n        this.preservedRecordAssociationDefinitions\n      );\n    });\n  }\n\n  private updateComponentPropertiesAndConfig(\n    componentDesignProperties: IRecordGridDesignProperties,\n    propertiesToUpdate: Partial<IRecordGridDesignProperties>,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): void {\n    this.currentGridDesignProperties = componentDesignProperties;\n\n    if (propertiesToUpdate) {\n      this.sandbox.updateComponentProperties(propertiesToUpdate);\n    }\n\n    this.sandbox.updateInspectorConfig(\n      this.rxRecordGridDesignUtilsService.getInspector(\n        componentDesignProperties,\n        recordDefinition,\n        recordAssociationDefinitions\n      )\n    );\n  }\n\n  private getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n        catchError((error) => of(null)),\n        tap((recordDefinition) => (this.preservedRecordDefinition = recordDefinition))\n      );\n    } else {\n      this.preservedRecordDefinition = null;\n\n      return of(null);\n    }\n  }\n\n  private getRecordAssociationDefinitions(recordDefinitionName: string): Observable<IAssociationDefinition[]> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n        map((result) => result[recordDefinitionName] || []),\n        catchError((error) => of([])),\n        tap(\n          (recordAssociationDefinitions) => (this.preservedRecordAssociationDefinitions = recordAssociationDefinitions)\n        )\n      );\n    } else {\n      this.preservedRecordAssociationDefinitions = [];\n\n      return of([]);\n    }\n  }\n\n  private validateColumns(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return columns.length\n      ? this.validateColumnActions(columns)\n      : of([this.sandbox.createError('Record grid must have at least one column.', 'columns')]);\n  }\n\n  private validateColumnActions(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest(\n      columns.map((column) => {\n        const actionViewComponents = _filter(column.children, { type: RxViewComponentType.Action });\n\n        return this.rxViewActionValidatorService.validate(actionViewComponents, 'columns').pipe(\n          map((issues) =>\n            issues.map((issue) => ({\n              ...issue,\n              data: {\n                ...issue.data,\n                columnGuid: column.guid\n              }\n            }))\n          )\n        );\n      })\n    ).pipe(map(flatten));\n  }\n\n  private validateRowActions(\n    rowActionButtons: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return rowActionButtons.length\n      ? combineLatest(\n          rowActionButtons.map((rowActionButton, index) =>\n            this.rxViewActionValidatorService.validate(rowActionButton.children, 'rowActions').pipe(\n              map((issues) =>\n                issues.map((issue) => ({\n                  ...issue,\n                  data: {\n                    ...issue.data,\n                    rowActionIndex: index\n                  }\n                }))\n              )\n            )\n          )\n        ).pipe(map(flatten))\n      : of([]);\n  }\n\n  private validateAssociationModeProps(): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest([\n      combineLatest([this.associationDefinitionName$, this.associatedRecordNodeSide$]).pipe(\n        map(([associationDefinitionName, associatedRecordNodeSide]) => {\n          if (associationDefinitionName) {\n            return associatedRecordNodeSide\n              ? null\n              : this.sandbox.createError('Associated record node side cannot be blank.', 'associatedRecordNodeSide');\n          } else {\n            return this.sandbox.createError(\n              'Association definition name cannot be blank.',\n              'associationDefinitionName'\n            );\n          }\n        })\n      ),\n      this.sandbox\n        .getComponentPropertyValue('associatedRecordId')\n        .pipe(\n          map((associatedRecordId) =>\n            associatedRecordId\n              ? null\n              : this.sandbox.createError('Associated record ID cannot be blank.', 'associatedRecordId')\n          )\n        )\n    ]).pipe(map(compact));\n  }\n\n  private validateActionButtons(\n    components: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const deleteActions = flatten(components.map((component) => component.children)).filter(\n      ({ data }: IViewComponentDesignData<IViewActionDesignProperties & { recordDefinitionName: string }>) =>\n        data.name === 'rxDeleteRecordsAction' && data.recordDefinitionName\n    );\n\n    return deleteActions.length\n      ? combineLatest(\n          deleteActions.map(({ data }) =>\n            this.rxRecordDefinitionCacheService\n              .getRecordDefinition(data.recordDefinitionName)\n              .pipe(\n                map(({ resourceType }) =>\n                  resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType\n                    ? this.sandbox.createWarning(\n                        'You have configured a Record grid action to delete Join records. Please ensure that one or more processes or rules have been defined to perform the deletion of the selected Join record instances.'\n                      )\n                    : null\n                )\n              )\n          )\n        ).pipe(map(compact))\n      : of([]);\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewComponentExpressionConfigurator } from '@helix/platform/view/designer';\nimport { ExpressionOperatorGroup, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { forkJoin, of } from 'rxjs';\nimport { concatMap, map, switchMap } from 'rxjs/operators';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { map as _map } from 'lodash';\nimport { RX_RECORD_GRID_DESIGN } from './record-grid-design.constant';\n\nexport class RecordGridExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxRecordGridUtilsService = this.injector.get(RxRecordGridUtilsService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  constructor(injector: Injector, protected componentGuid: string, protected componentModel: RecordGridDesignModel) {\n    super(injector, componentGuid, componentModel);\n\n    const filterExpressionBranch$ = this.getComponentCommonDataDictionary().pipe(\n      switchMap((componentCommonBranch) =>\n        componentCommonBranch\n          ? componentModel.recordDefinition$.pipe(\n              concatMap((recordDefinition) =>\n                this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(\n                  concatMap((associationDescriptors) =>\n                    associationDescriptors.length\n                      ? forkJoin(\n                          associationDescriptors.map((associationDescriptor) =>\n                            this.rxRecordDefinitionCacheService\n                              .getRecordDefinition(associationDescriptor.recordDefinitionName)\n                              .pipe(\n                                map((associationRecordDefinition) => ({\n                                  ...associationDescriptor,\n                                  recordDefinition: associationRecordDefinition\n                                }))\n                              )\n                          )\n                        )\n                      : of([])\n                  ),\n                  map(\n                    (\n                      associationDescriptors: Array<\n                        IAssociationDescriptor & {\n                          recordDefinition: IRecordDefinition;\n                        }\n                      >\n                    ) =>\n                      recordDefinition\n                        ? {\n                            label: 'Filter by',\n                            children: [\n                              {\n                                label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                                icon: 'd-icon-file_o_gear',\n                                children: recordDefinition.fieldDefinitions.map((fieldDefinition) => {\n                                  const selectionList =\n                                    fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                      ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n                                          label: optionName,\n                                          expression: `\\${view.components.${componentGuid}.recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id}`\n                                        }))\n                                      : undefined;\n\n                                  return {\n                                    label: fieldDefinition.name,\n                                    icon: 'd-icon-file_o_gear',\n                                    expression: `'${fieldDefinition.id}'`,\n                                    children:\n                                      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                        ? [\n                                            {\n                                              label: 'Options',\n                                              children: selectionList\n                                            }\n                                          ]\n                                        : null,\n                                    autocompleteOptions: selectionList\n                                  };\n                                })\n                              },\n                              ...(associationDescriptors\n                                ? associationDescriptors.map((descriptor) => ({\n                                    label: this.rxDefinitionNameService.getDisplayName(\n                                      descriptor.associationDefinition.name\n                                    ),\n                                    icon: 'd-icon-file_o_gear',\n                                    children: descriptor.recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n                                      label: fieldDefinition.name,\n                                      icon: 'd-icon-file_o_gear',\n                                      expression: `'\\${recordContext._associations.${descriptor.associationDefinition.guid}.${descriptor.nodeSide}[0].${fieldDefinition.id}}'`\n                                    }))\n                                  }))\n                                : [])\n                            ]\n                          }\n                        : []\n                  )\n                )\n              ),\n              map((filterByBranch) => ({\n                ...componentCommonBranch,\n                children: [filterByBranch, ...componentCommonBranch.children]\n              }))\n            )\n          : of(null)\n      )\n    );\n\n    this.configureForProperty({\n      propertyPath: 'filterExpression',\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.AllServer),\n      dataDictionary$: this.getCommonDataDictionary(filterExpressionBranch$).pipe(\n        map((dataDictionary) => [\n          RX_RECORD_GRID_DESIGN.keywords,\n          ...(dataDictionary.filter(\n            (dataDictionaryBranch) =>\n              dataDictionaryBranch.label !== 'General' && dataDictionaryBranch.label !== 'Functions'\n          ) || [])\n        ])\n      )\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  ViewComponentPropertyType,\n  RxRecordQueryExpressionEvaluatorService\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RecordGridModule } from './runtime/record-grid.module';\nimport { RecordGridComponent } from './runtime/record-grid.component';\nimport { RecordGridDesignModule } from './design/record-grid-design.module';\nimport { RecordGridDesignModel } from './design/record-grid-design.model';\nimport { RecordGridDesignComponent } from './design/record-grid-design.component';\nimport { RxRecordGridQueryExpressionEvaluatorService } from './runtime/services/record-grid-query-expression-evaluator.service';\nimport { RX_RECORD_GRID } from './record-grid.constant';\nimport { RecordGridExpressionConfigurator } from './design/record-grid-expression-configurator.class';\n\n@NgModule({\n  imports: [RecordGridModule, RecordGridDesignModule]\n})\nexport class RecordGridRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxRecordGridQueryExpressionEvaluatorService: RxRecordGridQueryExpressionEvaluatorService,\n    private rxRecordQueryExpressionEvaluatorService: RxRecordQueryExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RX_RECORD_GRID.type,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridComponent),\n        properties: [\n          {\n            name: 'recordDefinitionName',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'enableRowSelection',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'enableFiltering',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'getDataForHiddenColumns',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'requiredFilters',\n            type: ViewComponentPropertyType.Number,\n            designType: ViewComponentPropertyType.Number,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'showDataForAllLocales',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'expandable',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'bordered',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'striped',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'defaultFilterPreset',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterExpression',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService\n          },\n          {\n            name: 'selectedRows',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'firstSelectedRow',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'clickableRow',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'selectedRowCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'totalRowCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'isUserAllowedToDeleteRecords',\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'associationDefinitionName',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'associatedRecordNodeSide',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'associatedRecordId',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'associatedRoleName',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'enableFilterPresets',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'queryExpression',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'lastRefreshTime',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'viewPresetSelector',\n            enableExpressionEvaluation: true\n          },\n          RX_AVAILABLE_ON_DEVICES_PROP_DESC\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          },\n          {\n            name: RX_RECORD_GRID.rowActionsOutletName\n          }\n        ],\n\n        name: 'Record grid',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'table',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridDesignComponent),\n        designComponentModel: RecordGridDesignModel,\n        expressionConfigurator: RecordGridExpressionConfigurator,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RX_RECORD_GRID.components.column,\n        configPropertyName: 'columns',\n        properties: [\n          {\n            name: 'title',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'visible',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'sortable',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterable',\n            type: ViewComponentPropertyType.String,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'clickable',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'index',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'alignment',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'cellDisplayProperties',\n            designType: ViewComponentPropertyType.Array,\n            type: ViewComponentPropertyType.Array\n          },\n          {\n            name: 'wrapText',\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'typeaheadKeystrokeCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'additionalQueryCriteria',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordQueryExpressionEvaluatorService\n          }\n        ],\n\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.filter,\n        configPropertyName: 'recordGridFilters',\n        properties: [\n          {\n            name: 'value',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: '$DISPLAYVALUE$',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'label',\n            localizable: true\n          }\n        ],\n        isDataComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.filterPreset,\n        configPropertyName: 'predefinedFilterPresets',\n        properties: [\n          {\n            name: 'title',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterExpression',\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.viewPreset,\n        configPropertyName: 'viewPresets',\n        properties: [\n          {\n            name: 'viewPresetGuid',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.columnViewPreset,\n        configPropertyName: 'columnViewPresets',\n        properties: [\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'index',\n            designType: ViewComponentPropertyType.Number,\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'visible',\n            designType: ViewComponentPropertyType.Boolean,\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'sortable',\n            designType: ViewComponentPropertyType.Object,\n            type: ViewComponentPropertyType.Object\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      }\n    );\n  }\n}\n","import { Tooltip } from '@helix/platform/shared/api';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { take } from 'rxjs/operators';\nimport { IRichTextProperties } from './rich-text-design.types';\nimport { IViewDesignerComponentModel, RX_STANDARD_PROPS_DEFAULT_VALUES } from '@helix/platform/view/api';\n\nexport class RichTextDesignModel\n  extends ViewDesignerComponentModel<IRichTextProperties>\n  implements IViewDesignerComponentModel<IRichTextProperties>\n{\n  html$ = this.sandbox.getComponentPropertyValue('html');\n\n  static getInitialProperties(initialProperties: IRichTextProperties): IRichTextProperties {\n    return {\n      name: null,\n      html: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.componentProperties$.subscribe((properties) => {\n      const validationIssues = properties.html ? [] : [this.sandbox.createError('Rich text value cannot be blank.')];\n\n      validationIssues.push(...validateStandardProps(properties));\n\n      this.sandbox.setValidationIssues(validationIssues);\n    });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Rich text component')\n              }\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  updateComponentProperties(props: Partial<IRichTextProperties>): void {\n    this.sandbox.updateComponentProperties(props);\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_STANDARD_PROPS_DESC, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RichTextModule } from './runtime/rich-text.module';\nimport { RichTextComponent } from './runtime/rich-text.component';\nimport { RxRichTextExpressionEvaluatorService } from './runtime/rich-text-expression-evaluator.service';\nimport { RichTextDesignModule } from './design/rich-text-design.module';\nimport { RichTextDesignComponent } from './design/rich-text-design.component';\nimport { RichTextDesignModel } from './design/rich-text-design.model';\nimport { RichTextDefinitionAdapterService } from './rich-text-definition-adapter.service';\n\n@NgModule({\n  imports: [RichTextModule, RichTextDesignModule],\n  providers: [RichTextDefinitionAdapterService]\n})\nexport class RichTextRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxRichTextExpressionEvaluatorService: RxRichTextExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RichText,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextComponent),\n      properties: [\n        {\n          name: 'html',\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxRichTextExpressionEvaluatorService,\n          localizable: true\n        },\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      name: 'Rich text',\n      isContainerComponent: true,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextDesignComponent),\n      designComponentModel: RichTextDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { map, shareReplay, take, takeUntil } from 'rxjs/operators';\nimport { isEmpty } from 'lodash';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { ITabPanelProperties } from './tab-panel-design.types';\nimport { ITabContainerProperties } from './tab-container-design/tab-container-design.types';\nimport { combineLatest, ReplaySubject } from 'rxjs';\n\nexport class TabPanelDesignModel\n  extends ViewDesignerComponentModel<ITabPanelProperties>\n  implements IViewDesignerComponentModel<ITabPanelProperties>\n{\n  tabContainerGuids$ = this.sandbox.getChildComponentGuids().pipe(shareReplay(1));\n\n  tabContainerComponents$ = this.sandbox\n    .getChildComponents<ITabContainerProperties>((component) => component.type === RxViewComponentType.TabContainer)\n    .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n  selectedTabGuid$ = new ReplaySubject<string>(null);\n\n  static getInitialProperties(initialProperties?: ITabPanelProperties): ITabPanelProperties {\n    return {\n      name: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.componentProperties$.subscribe((componentProperties) => this.validate(componentProperties));\n\n    this.tabContainerGuids$\n      .pipe(\n        map((guids) => !isEmpty(guids)),\n        take(1)\n      )\n      .subscribe((hasChildComponents) => {\n        if (!hasChildComponents) {\n          this.sandbox.setChildren([\n            {\n              type: RxViewComponentType.TabContainer,\n              data: {\n                label: 'Tab 1'\n              }\n            },\n            {\n              type: RxViewComponentType.TabContainer,\n              data: {\n                label: 'Tab 2'\n              }\n            }\n          ]);\n        }\n      });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        },\n        {\n          label: 'Active Tab Index',\n          expression: this.getExpressionForProperty('activeTabIndex')\n        }\n      ]);\n    });\n  }\n\n  addTab(): void {\n    this.sandbox.addComponent({\n      type: RxViewComponentType.TabContainer,\n\n      propertiesByName: {\n        label: 'New tab'\n      }\n    });\n  }\n\n  removeTab(guid: string): void {\n    this.sandbox.removeComponents([guid]);\n\n    combineLatest([this.selectedTabGuid$, this.tabContainerGuids$])\n      .pipe(take(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([selectedTabGuid, tabContainerGuids]) => {\n        if (guid === selectedTabGuid) {\n          this.selectTab(tabContainerGuids[0]);\n        }\n      });\n  }\n\n  selectTab(guid: string, skipSelectComponent: boolean = false): void {\n    this.selectedTabGuid$.next(guid);\n\n    if (!skipSelectComponent) {\n      setTimeout(() => {\n        this.sandbox.selectComponent(guid);\n      });\n    }\n  }\n\n  dropPredicate(): boolean {\n    return false;\n  }\n\n  moveComponent(guid: string, insertIndex: number): void {\n    this.sandbox.moveComponent(guid, insertIndex, this.sandbox.guid);\n  }\n\n  private validate(properties: ITabPanelProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(properties));\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Tab panel')\n              }\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { Injector } from '@angular/core';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { compact, flatten, times, values } from 'lodash';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map, skip, take, takeUntil } from 'rxjs/operators';\nimport { ITabContainerDesignProperties, ITabContainerProperties } from './tab-container-design.types';\nimport { RX_CONTAINER } from '../../../container/container.constant';\nimport { ContainerRowWrap } from '../../../container/container.types';\nimport { RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_STANDARD_PROPS_DEFAULT_VALUES } from '@helix/platform/view/api';\n\nexport class TabContainerDesignModel extends ViewDesignerComponentModel {\n  componentProperties$: Observable<ITabContainerProperties> = this.sandbox.componentProperties$;\n\n  hiddenOnCanvas$ = new BehaviorSubject<boolean>(false);\n  selectedTabGuid$ = new Subject<string>();\n\n  static getInitialProperties(initialProperties?: ITabContainerProperties): ITabContainerDesignProperties {\n    return {\n      columnCount: '1',\n      enableLazyLoading: false,\n      label: '',\n      rowWrap: ContainerRowWrap.Sm,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, protected sandbox: IViewComponentDesignSandbox<ITabContainerProperties>) {\n    super(injector, sandbox);\n\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    combineLatest([\n      this.sandbox\n        .getComponentPropertyValue('label')\n        .pipe(map((value) => (value ? null : this.sandbox.createError('Label cannot be blank.', 'label')))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.selectedTabGuid$.pipe(takeUntil(this.sandbox.destroyed$)).subscribe((selectedTabGuid) => {\n      this.hiddenOnCanvas$.next(this.sandbox.guid !== selectedTabGuid);\n    });\n\n    this.sandbox\n      .getComponentPropertyValue('columnCount')\n      .pipe(skip(1))\n      .subscribe((columnCount) => {\n        this.sandbox.setLayout(this.getDefaultColumnSpans(Number(columnCount)));\n      });\n\n    this.sandbox.getComponentPropertyValue('label').subscribe((label) => {\n      const componentName = label ? `${this.sandbox.descriptor.name} (${label})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n\n      this.sandbox.setBreadcrumbs(label);\n    });\n  }\n\n  setContainerLayout(columnSizes: number[]): void {\n    this.sandbox.setLayout(columnSizes);\n  }\n\n  private getDefaultColumnSpans(columnCount: number): number[] {\n    const columnSpans: number[] = [];\n    const span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);\n\n    times(columnCount, () => columnSpans.push(span));\n    columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;\n\n    return columnSpans;\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'label',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Label',\n                required: true\n              }\n            },\n            {\n              name: 'enableLazyLoading',\n              component: SwitchFormControlComponent,\n              options: {\n                label: 'Enable lazy loading'\n              }\n            },\n            {\n              name: 'columnCount',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Number of columns',\n                required: true,\n                tooltip: new Tooltip(\n                  'Resize container columns on the canvas by dragging the dashed column separator line.'\n                ),\n                options: times(6, (index: number) => ({ id: (++index).toString(), name: index.toString() }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'rowWrap',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Row wrap',\n                sortAlphabetically: false,\n                options: values(RX_CONTAINER.rowWrapOptions),\n                tooltip: new Tooltip(\n                  `The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.`\n                )\n              } as ISelectFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxTabPanelModule } from './runtime/tab-panel.module';\nimport { RxTabPanelComponent } from './runtime/tab-panel.component';\nimport { RxTabContainerComponent } from './runtime/tab-container/tab-container.component';\nimport { TabPanelDesignModule } from './design/tab-panel-design.module';\nimport { TabPanelDesignComponent } from './design/tab-panel-design.component';\nimport { TabContainerDesignComponent } from './design/tab-container-design/tab-container-design.component';\nimport { TabPanelDesignModel } from './design/tab-panel-design.model';\nimport { TabContainerDesignModel } from './design/tab-container-design/tab-container-design.model';\n\n@NgModule({\n  imports: [RxTabPanelModule, TabPanelDesignModule]\n})\nexport class TabPanelRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.TabPanel,\n        componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabPanelComponent),\n        properties: RX_STANDARD_PROPS_DESC,\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n\n        name: 'Tab panel',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'app_tab',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TabPanelDesignComponent),\n        designComponentModel: TabPanelDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.TabContainer,\n        componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabContainerComponent),\n        properties: [\n          ...RX_STANDARD_PROPS_DESC,\n          {\n            name: 'label',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'enableLazyLoading',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          }\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Tab',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        hidden: true,\n        icon: 'app_tab',\n        designComponentFactory: componentFactoryResolver.resolveComponentFactory(TabContainerDesignComponent),\n        designComponentModel: TabContainerDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      }\n    );\n  }\n}\n","import {\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { IServiceListProperties } from '../service-list.types';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions\n} from '@helix/platform/shared/components';\n\nexport class ServiceListDesignModel extends ViewDesignerComponentModel<IServiceListProperties> {\n  static getInitialProperties(initialProperties?: IServiceListProperties): IServiceListProperties {\n    return {\n      serviceRequestId: null,\n      serviceRequestName: null,\n      serviceRequestGuid: null,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox\n      .getComponentPropertyValue('serviceRequestId')\n      .pipe(\n        map((value) =>\n          value ? [] : [this.sandbox.createError('Selected service request ID cannot be blank.', 'serviceRequestId')]\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n      this.sandbox.setCommonDataDictionary(this.getCommonProps());\n    });\n  }\n\n  private getCommonProps(): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: this.sandbox.descriptor.name,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Service request ID',\n          expression: this.getExpressionForProperty('serviceRequestId')\n        },\n        {\n          label: 'Service request name',\n          expression: this.getExpressionForProperty('serviceRequestName')\n        },\n        {\n          label: 'Service request GUID',\n          expression: this.getExpressionForProperty('serviceRequestGuid')\n        }\n      ]\n    };\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'serviceRequestId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestName',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request name'\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestGuid',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request GUID'\n              } as IExpressionInspectorControlOptions\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n","import {\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\n\nimport { ServiceListDesignComponent } from './design/service-list-design.component';\nimport { ServiceListDesignModule } from './design/service-list-design.module';\nimport { ServiceListDesignModel } from './design/service-list-design.model';\nimport { ServiceListComponent } from './runtime/service-list.component';\nimport { ServiceListModule } from './runtime/service-list.module';\n\n@NgModule({\n  imports: [ServiceListModule, ServiceListDesignModule]\n})\nexport class ServiceListRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ServiceList,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListComponent),\n      name: 'Service list',\n      group: RX_VIEW_DESIGNER.stencilGroups.chatbotComponents.label,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      properties: [\n        {\n          name: 'serviceRequestId',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'serviceRequestName',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'serviceRequestGuid',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        }\n      ],\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListDesignComponent),\n      designComponentModel: ServiceListDesignModel,\n      icon: 'field_dropdown',\n      bundleId: RX_APPLICATION.chatbotBundleId,\n      availableInBundles: [RX_APPLICATION.chatbotBundleId]\n    });\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { UnknownDesignModel } from './unknown-design.model';\n\n@Component({\n  selector: 'rx-unknown',\n  templateUrl: 'unknown-design.component.html',\n  styleUrls: ['./unknown-design.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnknownDesignComponent {\n  @Input()\n  model: UnknownDesignModel;\n}\n","<adapt-empty-state type=\"objects\" [label]=\"model.label\"></adapt-empty-state>\n","import { IPlainObject } from '@helix/platform/shared/api';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewDesignerComponentModel } from '@helix/platform/view/api';\nimport { IViewDesignerInspectorConfig, ViewDesignerComponentModel } from '@helix/platform/view/designer';\nimport { keys } from 'lodash';\nimport { take } from 'rxjs/operators';\n\nexport class UnknownDesignModel extends ViewDesignerComponentModel implements IViewDesignerComponentModel {\n  label = `Unknown component: ${this.sandbox.componentType}`;\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties) => {\n      this.sandbox.updateInspectorConfig(this.getInspector(componentProperties));\n      this.sandbox.setValidationIssues([this.sandbox.createError(this.label)]);\n    });\n  }\n\n  private getInspector(componentProperties: IPlainObject): IViewDesignerInspectorConfig {\n    const controls = keys(componentProperties).map((propertyName) => ({\n      name: propertyName,\n      component: TextFormControlComponent,\n      options: {\n        label: propertyName\n      },\n      isDisabled: true\n    }));\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls\n        }\n      ]\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\nimport { UnknownDesignComponent } from './unknown-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [UnknownDesignComponent]\n})\nexport class UnknownDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { UnknownDesignComponent } from './design/unknown-design.component';\nimport { UnknownDesignModel } from './design/unknown-design.model';\nimport { UnknownDesignModule } from './design/unknown-design.module';\n\n@NgModule({\n  imports: [UnknownDesignModule]\n})\nexport class UnknownRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Unknown,\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Unknown',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(UnknownDesignComponent),\n      designComponentModel: UnknownDesignModel,\n      hidden: true,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","export const RX_CHATBOT_USER_MAPPING = {\n  commands: {\n    createUserMapping: 'com.bmc.arsys.rx.application.chat.command.CreateChatUserMappingCommand'\n  },\n\n  mappingStatus: {\n    check: 'check',\n    failed: 'failed',\n    inProgress: 'inProgress',\n    missingParameters: 'missingParameters',\n    pending: 'pending',\n    success: 'success'\n  },\n\n  messages: {\n    check: 'com.bmc.arsys.rx.settings.check',\n    failed: 'com.bmc.arsys.rx.settings.failed',\n    inProgress: 'com.bmc.arsys.rx.settings.inProgress',\n    missingParameters: 'com.bmc.arsys.rx.settings.missingParameters',\n    pending: 'com.bmc.arsys.rx.settings.pending',\n    success: 'com.bmc.arsys.rx.settings.success'\n  }\n};\n","import { Component, OnInit } from '@angular/core';\nimport { RxCommandFactoryService, RxNotificationService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { IRxChatbotUserMappingParameters } from './chatbot-user-mapping.interface';\nimport { catchError, take } from 'rxjs/operators';\nimport { RX_CHATBOT_USER_MAPPING } from './chatbot-user-mapping.constant';\nimport { TranslateService } from '@ngx-translate/core';\nimport { throwError } from 'rxjs';\n\n@Component({\n  // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCCloudVerification\".\n  // tslint:disable-next-line:component-selector\n  selector: 'com-bmc-arsys-rx-user-mapping',\n  templateUrl: './chatbot-user-mapping.component.html',\n  styleUrls: ['./chatbot-user-mapping.component.scss']\n})\nexport class ChatbotUserMappingComponent extends BaseViewComponent implements OnInit {\n  private encryptedChatUserAndChatId: string = null;\n  private chatbotProvider: string = null;\n\n  isMappingInProgress = false;\n  message = '';\n  mappingStatus = '';\n\n  constructor(\n    private translateService: TranslateService,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxNotificationService: RxNotificationService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.isMappingInProgress = false;\n\n    this.config.pipe(take(1)).subscribe((config: IRxChatbotUserMappingParameters) => {\n      this.encryptedChatUserAndChatId = config.encryptedChatUserAndChatId;\n      this.chatbotProvider = config.chatbotProvider;\n\n      if (!this.encryptedChatUserAndChatId) {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.missingParameters;\n\n        this.rxNotificationService.addErrorMessage(\n          this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages.missingParameters)\n        );\n      } else {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.pending;\n      }\n\n      this.updateMessage();\n    });\n  }\n\n  isMappingButtonVisible(): boolean {\n    return this.mappingStatus === RX_CHATBOT_USER_MAPPING.mappingStatus.pending;\n  }\n\n  mapUser(): void {\n    this.isMappingInProgress = true;\n    this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.inProgress;\n    this.updateMessage();\n\n    const commandPayload: IRxChatbotUserMappingParameters = {\n      encryptedChatUserAndChatId: this.encryptedChatUserAndChatId,\n      chatbotProvider: this.chatbotProvider\n    };\n\n    this.rxCommandFactoryService\n      .forResourceType(RX_CHATBOT_USER_MAPPING.commands.createUserMapping)\n      .execute(commandPayload)\n      .pipe(\n        catchError((error) => {\n          this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.failed;\n          this.updateMessage();\n          this.isMappingInProgress = false;\n\n          return throwError(error);\n        })\n      )\n      .subscribe(() => {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.success;\n        this.updateMessage();\n        this.isMappingInProgress = false;\n      });\n  }\n\n  private updateMessage(): void {\n    this.message = this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages[this.mappingStatus]);\n  }\n}\n","<div class=\"text-center mt-1 container\">\n  <div>\n    <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.settings.title' | translate }}</span>\n  </div>\n  <div class=\"mt-4\">{{ message }}</div>\n  <div>\n    <button\n      rx-id=\"verify-bmc-cloud-account\"\n      class=\"mt-4\"\n      adapt-button\n      btn-type=\"primary\"\n      size=\"large\"\n      type=\"button\"\n      [disabled]=\"isMappingInProgress\"\n      (click)=\"mapUser()\"\n      [hidden]=\"!isMappingButtonVisible()\"\n    >\n      {{ 'com.bmc.arsys.rx.settings.verify-cloud-account' | translate }}\n    </button>\n  </div>\n</div>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChatbotUserMappingComponent } from './chatbot-user-mapping.component';\n\n/**\n * This component is used by Chatbot to map users from a third party channel\n * as Slack, Skype for Enterprise to their Innovation Studio account.\n * Backend sends a link in Slack for example and when the user clicks on it,\n * a page on the rx.settings bundle will be displayed, leveraging this view component:\n * http://localhost:4200/helix/index.html#/com.bmc.arsys.rx.settings/view/com.bmc.arsys.rx.settings:BMCCloudVerification?encryptedChatUserAndChatId=12345&chatbotProvider=slack\n */\n@NgModule({\n  declarations: [ChatbotUserMappingComponent],\n  imports: [AdaptButtonModule, CommonModule, FormsModule, TranslateModule],\n  entryComponents: [ChatbotUserMappingComponent]\n})\nexport class ChatbotUserMappingRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCCloudVerification\".\n      type: 'com-bmc-arsys-rx-user-mapping',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotUserMappingComponent),\n      name: 'Chatbot User Mapping',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true,\n      properties: [\n        {\n          name: 'encryptedChatUserAndChatId',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'chatbotProvider',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","export const RX_IFRAME_LOGIN_EVENT = {\n  eventMessage: 'LOGIN_SUCCESSFUL'\n};\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { RX_IFRAME_LOGIN_EVENT } from './iframe-login-event.constant';\n\n@Component({\n  // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCLoginVerification\".\n  // tslint:disable-next-line:component-selector\n  selector: 'com-bmc-arsys-rx-settings-iframe-login-event',\n  templateUrl: './iframe-login-event.component.html',\n  styleUrls: ['./iframe-login-event.component.scss']\n})\nexport class IframeLoginEventComponent extends BaseViewComponent implements OnInit {\n  ngOnInit() {\n    window.opener?.postMessage(RX_IFRAME_LOGIN_EVENT.eventMessage, '*');\n  }\n}\n","<img\n  src=\"/com.bmc.arsys.rx.settings/resources/images/login-successful.gif\"\n  alt=\"Login successful\"\n  class=\"login-verification\"\n/>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { IframeLoginEventComponent } from './iframe-login-event.component';\n\n/**\n * This component is used by view-loader.js script when the login cannot be achieved\n * in an iFrame (for example with Microsoft IDP).\n * In this case view-loader.js loads a view in a window popup that will require the user\n * to log in. Once the user is logged in, this View Component will send a PostMessage to\n * view-loader.js that will close the popup.\n */\n@NgModule({\n  declarations: [IframeLoginEventComponent],\n  imports: [CommonModule],\n  entryComponents: [IframeLoginEventComponent]\n})\nexport class IframeLoginEventRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCLoginVerification\".\n      type: 'com-bmc-arsys-rx-settings-iframe-login-event',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeLoginEventComponent),\n      name: 'IFrame Login Event',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { RxSmartReportingService } from '@helix/platform/shared/api';\n\n@Component({\n  selector: 'rx-smart-reporting-redirector',\n  templateUrl: './smart-reporting-redirector.component.html'\n})\nexport class SmartReportingRedirectorComponent implements OnInit {\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  constructor(private rxSmartReportingService: RxSmartReportingService) {}\n\n  ngOnInit(): void {\n    this.rxSmartReportingService\n      .openSmartReporting('_self', {\n        query: this.runtimeViewModelApi.getViewInputParameters().param\n      })\n      .subscribe();\n  }\n}\n","<div class=\"p-3\">{{ 'com.bmc.arsys.rx.client.smart-reporting-redirector.message' | translate }}</div>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\r\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\r\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\r\nimport { SmartReportingRedirectorComponent } from './smart-reporting-redirector.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  declarations: [SmartReportingRedirectorComponent],\r\n  imports: [TranslateModule],\r\n  entryComponents: [SmartReportingRedirectorComponent]\r\n})\r\nexport class SmartReportingRedirectorRegistrationModule {\r\n  constructor(\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\r\n  ) {\r\n    rxViewComponentRegistryService.register({\r\n      type: 'rx-smart-reporting-redirector',\r\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(SmartReportingRedirectorComponent),\r\n      name: 'Smart reporting redirector',\r\n      isPageComponent: true,\r\n      hidden: true,\r\n      availableInBundles: [RX_APPLICATION.settingsBundleId]\r\n    });\r\n  }\r\n}\r\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport interface IViewPresetProperties {\n  label: string;\n  index: number;\n}\n\nexport const RX_SHARABLE_VIEW_RESETS_FEATURE_NAME = '23503_SHARABLE_VIEW_PRESET';\n\nexport const RX_VIEW_PRESET = {\n  user: {\n    recordDefinitionName: 'CTM:People',\n    fields: {\n      fullName: 1000000017,\n      lastName: 1000000018,\n      firstName: 1000000019,\n      loginId: RX_RECORD_DEFINITION.coreFieldIds.assignee,\n      recordId: RX_RECORD_DEFINITION.coreFieldIds.id,\n      email: 1000000048\n    }\n  },\n  sharedViewPreset: {\n    recordDefinitionName: 'com.bmc.arsys.rx.settings:SharedViewPreset',\n    fields: {\n      viewPresetName: 58200,\n      viewName: 58201,\n      viewPresetInfo: 58202,\n      viewPresetSelectorGuid: 58203,\n      sharedUsers: 58204,\n      id: RX_RECORD_DEFINITION.coreFieldIds.id,\n      ownerFullName: 58205\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RecordInstance, RxRecordInstanceDataPageService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { HttpClient } from '@angular/common/http';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { IShareViewPresetPayload } from './share-view-preset.types';\nimport { RX_DATA_PAGE } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetDataService {\n  constructor(\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private httpClient: HttpClient,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  searchUsers(query: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.user.recordDefinitionName,\n          propertySelection: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ],\n          pageSize: RX_DATA_PAGE.defaultPageSize,\n          queryExpression: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ]\n            .map((fieldId) => `('${fieldId}' LIKE \"%${query}%\")`)\n            .join(' OR ')\n        }\n      })\n      .pipe(map((result) => result.data));\n  }\n\n  getSharedViewPresets(viewPresetSelectorGuid: string, loginId: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName,\n          queryExpression: [\n            `'${RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetSelectorGuid}' = \"${viewPresetSelectorGuid}\"`\n          ].join(' AND '),\n          propertySelection: [\n            RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.id,\n            RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers\n          ]\n        }\n      })\n      .pipe(\n        map((dataPageResult) =>\n          dataPageResult.data.filter((sharedViewPreset) => {\n            const users = this.rxJsonParserService.tryParseJson(\n              sharedViewPreset[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers],\n              []\n            );\n\n            return users.find((user) => user.loginId === loginId);\n          })\n        )\n      );\n  }\n\n  getSharedViewPreset(guid: string): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.get(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  createSharedViewPreset(payload: IShareViewPresetPayload): Observable<string> {\n    return this.httpClient.post(this.getUrl(), payload, {\n      responseType: 'text'\n    });\n  }\n\n  updateSharedViewPreset(guid: string, payload: IShareViewPresetPayload): Observable<any> {\n    return this.httpClient.put(this.getUrl(guid), payload);\n  }\n\n  deleteSharedViewPreset(guid: string): Observable<any> {\n    return this.rxRecordInstanceService.delete(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  private getUrl(guid?: string): string {\n    return guid\n      ? `/api/rx/application/configuration/viewpreset/${guid}`\n      : `/api/rx/application/configuration/viewpreset`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { RxShareViewPresetDataService } from './share-view-preset-data.service';\nimport { RxJsonParserService, RxStringService } from '@helix/platform/utils';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { RxCurrentUserService } from '@helix/platform/shared/api';\nimport {\n  ISaveSharedViewPresetPayload,\n  ISharedViewPresetItem,\n  IShareViewPresetPayload,\n  IShareViewPresetUserPayload,\n  ITagUserAutocompleteValue\n} from './share-view-preset.types';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetService {\n  constructor(\n    private rxShareViewPresetDataService: RxShareViewPresetDataService,\n    private rxStringService: RxStringService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  getAutocompleteSearch(text$: Observable<string>): Observable<ITagUserAutocompleteValue[]> {\n    return text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      switchMap((searchTerm) => {\n        const trimmedValue = searchTerm.trim();\n\n        if (trimmedValue.length > 0) {\n          return this.rxShareViewPresetDataService.searchUsers(trimmedValue);\n        } else {\n          return of([]);\n        }\n      }),\n      map((users) =>\n        users.map((user) => ({\n          text: user[RX_VIEW_PRESET.user.fields.fullName],\n          data: {\n            loginId: user[RX_VIEW_PRESET.user.fields.loginId],\n            fullName: user[RX_VIEW_PRESET.user.fields.fullName],\n            emailAddress: user[RX_VIEW_PRESET.user.fields.email]\n          }\n        }))\n      )\n    );\n  }\n\n  getSharedViewPresetUsers(guid: string): Observable<IShareViewPresetUserPayload[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPreset(guid)\n      .pipe(\n        map((sharedViewPreset) =>\n          this.rxJsonParserService.tryParseJson(\n            sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers].value,\n            []\n          )\n        )\n      );\n  }\n\n  getSharedViewPresetData(\n    guid: string\n  ): Observable<{ viewPresetName: string; sharedViewPresets: IViewPresetsByViewComponentGuid }> {\n    return this.rxShareViewPresetDataService.getSharedViewPreset(guid).pipe(\n      map((sharedViewPreset) => ({\n        viewPresetName: sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName].value,\n        sharedViewPresets: this.rxJsonParserService.tryParseJson(\n          sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetInfo].value,\n          null\n        )\n      }))\n    );\n  }\n\n  private createUpdateSharedViewPreset(payload: IShareViewPresetPayload, presetGuid?: string): Observable<string> {\n    if (presetGuid) {\n      return this.rxShareViewPresetDataService.updateSharedViewPreset(presetGuid, payload).pipe(map(() => presetGuid));\n    } else {\n      return this.rxShareViewPresetDataService.createSharedViewPreset(payload);\n    }\n  }\n\n  saveSharedViewPreset(data: ISaveSharedViewPresetPayload, presetGuid?: string): Observable<string> {\n    const sharedUsers$ = data.sharedUsers ? of(data.sharedUsers) : this.getSharedViewPresetUsers(presetGuid);\n\n    return combineLatest([data.runtimeViewModelApi.shareViewPreset(data.presetSelectorGuid), sharedUsers$]).pipe(\n      map(([sharedViewPresets, sharedUsers]: [IViewPresetsByViewComponentGuid, IShareViewPresetUserPayload[]]) => ({\n        viewPresetName: data.currentViewPreset.label,\n        viewName: '',\n        viewPresetGuid: data.presetSelectorGuid,\n        submitter: this.rxCurrentUserService.get().fullName,\n        sharedUsers,\n        presetInformation: JSON.stringify(sharedViewPresets)\n      })),\n      switchMap((payload: IShareViewPresetPayload) => this.createUpdateSharedViewPreset(payload, presetGuid))\n    );\n  }\n\n  deleteSharedViewPreset(sharedViewPresetInstanceGuid: string): Observable<any> {\n    return this.rxShareViewPresetDataService.deleteSharedViewPreset(sharedViewPresetInstanceGuid);\n  }\n\n  getSharedViewPresetsForCurrentUser(presetSelectorGuid: string): Observable<ISharedViewPresetItem[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPresets(presetSelectorGuid, this.rxCurrentUserService.getName())\n      .pipe(\n        map((presets) =>\n          presets.map((preset) => ({\n            label: preset[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName],\n            guid: preset[RX_VIEW_PRESET.sharedViewPreset.fields.id],\n            ownerFullName: preset[RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName]\n          }))\n        )\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { find, pick } from 'lodash';\nimport { IUserPreferencesData, RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewPresetSelectorState,\n  IViewPresetSelectorUserPreferences,\n  IViewPresetSelectorUserPreferencesApplyResult\n} from './view-preset-selector.types';\nimport { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';\n\n@Injectable()\nexport class RxViewPresetSelectorUserPreferencesService {\n  private viewPresetSelectorGuid: string;\n\n  constructor(\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxShareViewPresetService: RxShareViewPresetService\n  ) {}\n\n  save(viewPresetSelectorState: IViewPresetSelectorState): Observable<any> {\n    const customViewPresets = viewPresetSelectorState.customViewPresetOptions.map((customViewPresetOption) =>\n      pick(customViewPresetOption, ['guid', 'label', 'userSharedViewPresetGuid'])\n    );\n\n    const sharedViewPresets = viewPresetSelectorState.sharedViewPresetOptions.map((sharedViewPresetOption) =>\n      pick(sharedViewPresetOption, ['guid', 'label'])\n    );\n\n    const data: IUserPreferencesData = {\n      preferences: JSON.stringify({\n        customViewPresets,\n        sharedViewPresets,\n        viewPresetGuid: viewPresetSelectorState.appliedViewPresetOption.guid\n      }),\n      componentTypeName: RxViewComponentType.ViewPresetSelector,\n      version: '1.0',\n      componentId: this.viewPresetSelectorGuid\n    };\n\n    return this.rxUserPreferencesService.setUiComponentPreferences(data, this.viewPresetSelectorGuid);\n  }\n\n  applyUserPreferences(\n    viewPresetSelectorGuid: string,\n    viewPresetSelectorState: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    this.viewPresetSelectorGuid = viewPresetSelectorGuid;\n\n    return this.get(viewPresetSelectorGuid).pipe(\n      map((preferences) => {\n        viewPresetSelectorState.customViewPresetOptions = preferences.customViewPresets;\n\n        if (preferences.sharedViewPresets) {\n          viewPresetSelectorState.sharedViewPresetOptions = preferences.sharedViewPresets.map((preset) => ({\n            ...preset,\n            isShared: true\n          }));\n        }\n\n        viewPresetSelectorState.appliedViewPresetOption =\n          find(viewPresetSelectorState.customViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.systemViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.sharedViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          viewPresetSelectorState.systemViewPresetOptions[0];\n\n        return viewPresetSelectorState;\n      }),\n      switchMap((state) => this.checkSharedViewPresets(state))\n    );\n  }\n\n  private get(guid: string): Observable<IViewPresetSelectorUserPreferences> {\n    return this.rxUserPreferencesService.getUiComponentPreferences<IViewPresetSelectorUserPreferences>(guid).pipe(\n      map(\n        (preferences) =>\n          preferences ?? {\n            customViewPresets: [],\n            sharedViewPresets: [],\n            viewPresetGuid: null\n          }\n      )\n    );\n  }\n\n  private checkSharedViewPresets(\n    state: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    if (state.sharedViewPresetOptions.length) {\n      return this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.viewPresetSelectorGuid).pipe(\n        map((sharedPresets) => {\n          let shouldUpdatePreferences = false;\n          let removedPresetGuid = null;\n\n          // checking if already added shared presets are still available\n          // and updating preset names in case of renaming\n          state.sharedViewPresetOptions = state.sharedViewPresetOptions.reduce((result, presetOption) => {\n            const existingPreset = sharedPresets.find((sharedPreset) => sharedPreset.guid === presetOption.guid);\n\n            if (existingPreset) {\n              if (presetOption.label !== existingPreset.label) {\n                presetOption.label = existingPreset.label;\n                shouldUpdatePreferences = true;\n              }\n\n              result.push(presetOption);\n            } else {\n              shouldUpdatePreferences = true;\n            }\n\n            return result;\n          }, []);\n\n          // checking if current selected preset is still available\n          // and if not - switching to first system preset\n          if (state.appliedViewPresetOption.isShared) {\n            const isOptionStillAvailable = state.sharedViewPresetOptions.find(\n              (option) => option.guid === state.appliedViewPresetOption.guid\n            );\n\n            // if preset it not available anymore or sharing was disabled\n            if (!isOptionStillAvailable || !state.isSharingEnabled) {\n              if (!isOptionStillAvailable) {\n                removedPresetGuid = state.appliedViewPresetOption.guid;\n              }\n\n              state.appliedViewPresetOption = state.systemViewPresetOptions[0];\n            }\n          }\n\n          return { state, shouldUpdatePreferences, removedPresetGuid };\n        })\n      );\n    } else {\n      return of({ state, shouldUpdatePreferences: false, removedPresetGuid: null });\n    }\n  }\n}\n","import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-rename-view-preset',\n  templateUrl: './rename-view-preset.component.html'\n})\nexport class RenameViewPresetComponent extends RxModalClass implements OnInit, OnDestroy {\n  modalData: any;\n  viewPresetNameFormControl: FormControl = new FormControl('');\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private activeModalRef: ActiveModalRef, protected injector: Injector) {\n    super(activeModalRef, injector);\n\n    this.modalData = this.activeModalRef.getData();\n    this.viewPresetNameFormControl.setValue(this.modalData.viewPresetName);\n\n    this.viewPresetNameFormControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      if (this.viewPresetNameFormControl.dirty && value === this.modalData.viewPresetName) {\n        this.viewPresetNameFormControl.reset(this.modalData.viewPresetName);\n      }\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  save(): void {\n    this.activeModalRef.close(this.generateUniqueViewPresetName(this.viewPresetNameFormControl.value));\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  isViewPresetNameUnique(viewPresetName: string): boolean {\n    const trimmedViewPresetName = viewPresetName.trim();\n\n    return !this.modalData.existingViewPresetNames.some(\n      (existingViewPresetName) => existingViewPresetName === trimmedViewPresetName\n    );\n  }\n\n  private generateUniqueViewPresetName(viewPresetName: string): string {\n    const trimmedViewPresetName = viewPresetName.trim();\n\n    let uniqueViewPresetName = trimmedViewPresetName;\n    let suffix = 1;\n\n    while (!this.isViewPresetNameUnique(uniqueViewPresetName)) {\n      uniqueViewPresetName = `${trimmedViewPresetName}-${suffix++}`;\n    }\n\n    return uniqueViewPresetName;\n  }\n}\n","<div class=\"modal-body\">\n  <adapt-rx-textfield\n    [formControl]=\"viewPresetNameFormControl\"\n    [label]=\"modalData.fieldLabel\"\n    name=\"viewPresetName\"\n    rx-id=\"view-preset-name-field\"\n    [maxlength]=\"254\"\n    required=\"true\"\n    rxNoWhitespace\n    [autofocus]=\"true\"\n  >\n  </adapt-rx-textfield>\n\n  <p *ngIf=\"!isViewPresetNameUnique(viewPresetNameFormControl.value)\" class=\"text-info m-0 pt-1\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.view-preset-already-exists.error.message'\n        | translate\n    }}\n  </p>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [disabled]=\"viewPresetNameFormControl.invalid || viewPresetNameFormControl.pristine\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { IRecordGridColumn } from '../../../../record-grid/runtime/types/record-grid-column.types';\nimport { IRecordGridConfig } from '../../../../record-grid/runtime/types/record-grid-config.interface';\nimport { RecordGridComponent } from '../../../../record-grid/runtime/record-grid.component';\nimport { RowSelectionMode } from '../../../../record-grid/runtime/types/row-selection-mode.enum';\nimport { IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IShareViewPresetUserPayload } from '../share-view-preset.types';\n\n@Component({\n  selector: 'rx-share-view-preset-users-grid',\n  templateUrl: './share-view-preset-users-grid.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareViewPresetUsersGridComponent implements OnChanges {\n  @ViewChild(RecordGridComponent, { static: true })\n  recordGrid: RecordGridComponent;\n\n  @Input()\n  users: IShareViewPresetUserPayload[] = [];\n\n  @Output()\n  remove = new EventEmitter<string[]>();\n\n  recordGridConfig$: Observable<IRecordGridConfig> = this.getRecordGridConfig();\n\n  constructor(private translateService: TranslateService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.users.currentValue && !changes.users.firstChange) {\n      this.recordGrid.api.refresh().subscribe();\n    }\n  }\n\n  private getRecordGridConfig(): Observable<IRecordGridConfig> {\n    const gridColumns: IRecordGridColumn[] = [\n      {\n        fieldId: 'fullName',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.name.title'\n        )\n      },\n      {\n        fieldId: 'emailAddress',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.email.title'\n        )\n      }\n    ];\n\n    const gridRecordDefinition: IRecordDefinition = {\n      fieldDefinitions: [\n        {\n          id: 'fullName',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: 'emailAddress',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        }\n      ]\n    };\n\n    return of({\n      columns: gridColumns,\n      enableFiltering: false,\n      enableRowSelection: RowSelectionMode.Multiple,\n      recordIdField: 'loginId',\n      styles: 'flex-fill',\n      toolbarConfig: {\n        filter: false,\n        visibleColumnsMenu: false\n      },\n      useExternalFiltering: false,\n      actionButtons: [\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.remove.label'),\n          style: 'tertiary',\n          iconCls: 'minus_circle_o',\n          disabled: () => this.recordGrid.api.getSelectedRows().length === 0,\n          actions: [\n            {\n              name: () => {\n                const selectedUserLoginIds = this.recordGrid.api.getSelectedRows().map((row) => row.loginId);\n\n                this.remove.emit(selectedUserLoginIds);\n              }\n            }\n          ]\n        }\n      ],\n      getRecordDefinition: () => of(gridRecordDefinition),\n      getData: (): Observable<IDataPageResult> =>\n        of({\n          data: this.users,\n          totalSize: this.users.length\n        })\n    });\n  }\n}\n","<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n","import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport {\n  IShareViewPresetModalData,\n  IShareViewPresetUserPayload,\n  ITagUserAutocompleteValue\n} from './share-view-preset.types';\nimport { RxCurrentUserService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxShareViewPresetService } from './share-view-preset.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-share-view-preset',\n  templateUrl: './share-view-preset.component.html',\n  styleUrls: ['./share-view-preset.component.scss']\n})\nexport class ShareViewPresetComponent extends RxModalClass implements OnInit, OnDestroy {\n  private maxRecipients = 100;\n\n  strings = {\n    users: {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.label'\n      ),\n      placeholder: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.placeholder'\n      )\n    },\n    addButton: this.translateService.instant('com.bmc.arsys.rx.client.common.add.label'),\n    notifyRecipients: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.notify-recipients.label'\n    ),\n    recipients: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.recipients.label'\n    ),\n    savedNotification: {\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.title'\n      ),\n      message: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.message'\n      )\n    },\n    removedNotification: {\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.title'\n      ),\n      message: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.message'\n      )\n    },\n    maxRecipientsWarning: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.max-users-warning.message',\n      {\n        maxUserCount: this.maxRecipients\n      }\n    )\n  };\n\n  form = this.formBuilder.group({\n    users: this.formBuilder.control([]),\n    notifyRecipients: this.formBuilder.control(false)\n  });\n\n  modalData: IShareViewPresetModalData = this.activeModalRef.getData();\n  runtimeViewModelApi: RuntimeViewModelApi = this.modalData.runtimeViewModelApi;\n  selectedUsers: IShareViewPresetUserPayload[] = [];\n\n  get isRecipientsLimitReached(): boolean {\n    return this.form.get('users').value.length + this.selectedUsers.length > this.maxRecipients;\n  }\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private currentUserLoginName = this.rxCurrentUserService.getName();\n  private sharedViewPresetInstanceGuid: string;\n  private isSelectedUsersChanged = false;\n\n  search: (text$: Observable<string>) => Observable<ITagUserAutocompleteValue[]> = (text$: Observable<string>) => {\n    return this.rxShareViewPresetService.getAutocompleteSearch(text$).pipe(\n      map((tags) => {\n        const selectedUsersLoginIDs = this.selectedUsers.map((user) => user.loginId);\n        const tagsInputLoginIDs = this.form.get('users').value.map(({ data }) => data.loginId);\n\n        // exclude current user and users that have already been added\n        return tags.filter(\n          (item) =>\n            item.data.loginId !== this.currentUserLoginName &&\n            !selectedUsersLoginIDs.includes(item.data.loginId) &&\n            !tagsInputLoginIDs.includes(item.data.loginId)\n        );\n      })\n    );\n  };\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    private rxShareViewPresetService: RxShareViewPresetService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxNotificationService: RxNotificationService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.loadExistingSharedViewPresetUsers();\n  }\n\n  private loadExistingSharedViewPresetUsers(): void {\n    if (this.modalData.currentViewPreset.userSharedViewPresetGuid) {\n      this.sharedViewPresetInstanceGuid = this.modalData.currentViewPreset.userSharedViewPresetGuid;\n\n      this.rxShareViewPresetService.getSharedViewPresetUsers(this.sharedViewPresetInstanceGuid).subscribe((users) => {\n        this.selectedUsers = users;\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  save(): void {\n    if (this.selectedUsers.length) {\n      this.saveViewPreset();\n    } else {\n      this.removeViewPreset();\n    }\n  }\n\n  private removeViewPreset(): void {\n    this.rxShareViewPresetService.deleteSharedViewPreset(this.sharedViewPresetInstanceGuid).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.strings.removedNotification.message,\n        this.strings.removedNotification.title\n      );\n\n      this.activeModalRef.close(null);\n    });\n  }\n\n  private saveViewPreset(): void {\n    this.rxShareViewPresetService\n      .saveSharedViewPreset(\n        {\n          runtimeViewModelApi: this.runtimeViewModelApi,\n          currentViewPreset: this.modalData.currentViewPreset,\n          presetSelectorGuid: this.modalData.presetSelectorGuid,\n          sharedUsers: this.selectedUsers\n        },\n        this.sharedViewPresetInstanceGuid\n      )\n      .subscribe((sharedViewPresetInstanceGuid) => {\n        this.rxNotificationService.addSuccessMessage(\n          this.strings.savedNotification.message,\n          this.strings.savedNotification.title\n        );\n\n        this.activeModalRef.close(sharedViewPresetInstanceGuid);\n      });\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onAdd(): void {\n    const usersToAdd = this.form.get('users').value.map((tag: ITagUserAutocompleteValue) => ({\n      ...tag.data\n    }));\n\n    this.selectedUsers = this.selectedUsers.concat(usersToAdd);\n    this.form.get('users').setValue([]);\n    this.isSelectedUsersChanged = true;\n  }\n\n  removeSelectedUsers(selectedUserLoginIds: string[]): void {\n    this.selectedUsers = this.selectedUsers.filter((user) => !selectedUserLoginIds.includes(user.loginId));\n    this.isSelectedUsersChanged = true;\n    this.markAsDirty();\n  }\n\n  // saving is allowed when changing users of existing preset\n  // or creating new preset with at least one user selected\n  isSaveButtonDisabled(): boolean {\n    return !(\n      (this.sharedViewPresetInstanceGuid && this.isSelectedUsersChanged) ||\n      (!this.sharedViewPresetInstanceGuid && this.selectedUsers.length > 0)\n    );\n  }\n}\n","<div class=\"modal-body\">\n  <form [formGroup]=\"form\">\n    <div class=\"row row-no-gutters\">\n      <div class=\"col\">\n        <adapt-tag-field\n          formControlName=\"users\"\n          rx-id=\"users-input\"\n          [label]=\"strings.users.label\"\n          [placeholder]=\"strings.users.placeholder\"\n          [replaceModelOnWrite]=\"true\"\n          [suppressManual]=\"true\"\n          [search]=\"search\"\n          [selectItemTemplate]=\"selectItemTemplate\"\n          (ngModelChange)=\"markAsDirty()\"\n        >\n        </adapt-tag-field>\n        <div class=\"warning mb-3\" *ngIf=\"isRecipientsLimitReached\">\n          <adapt-icon name=\"exclamation_triangle\" class=\"text-warning\"></adapt-icon>\n          {{ strings.maxRecipientsWarning }}\n        </div>\n      </div>\n      <div class=\"col-auto pl-0\">\n        <button\n          class=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"secondary\"\n          rx-id=\"add-button\"\n          [disabled]=\"!form.get('users').value.length || isRecipientsLimitReached\"\n          (click)=\"onAdd()\"\n        >\n          <span>{{ strings.addButton }}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n\n  <adapt-rx-control-label [label]=\"strings.recipients\"></adapt-rx-control-label>\n\n  <rx-share-view-preset-users-grid\n    [users]=\"selectedUsers\"\n    (remove)=\"removeSelectedUsers($event)\"\n  ></rx-share-view-preset-users-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n\n<ng-template #selectItemTemplate let-result=\"result\" let-term=\"term\">\n  <strong>{{ result.text }}</strong>\n  <div>{{ result.data.emailAddress }}</div>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { Observable, of } from 'rxjs';\nimport { IRecordGridConfig } from '../../../record-grid/runtime/types/record-grid-config.interface';\nimport { RecordGridComponent } from '../../../record-grid/runtime/record-grid.component';\nimport { RowSelectionMode } from '../../../record-grid/runtime/types/row-selection-mode.enum';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IAddSharedViewPresetsModalData, ISharedViewPresetDescriptor } from './add-shared-view-presets.types';\nimport { map } from 'rxjs/operators';\nimport { ISharedViewPresetItem } from '../share-view-preset/share-view-preset.types';\nimport { isEmpty } from 'lodash';\n\n@Component({\n  selector: 'rx-add-shared-view-presets',\n  templateUrl: './add-shared-view-presets.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddSharedViewPresetsComponent extends RxModalClass implements OnInit {\n  @ViewChild(RecordGridComponent, { static: true })\n  recordGrid: RecordGridComponent;\n\n  recordGridConfig$: Observable<IRecordGridConfig> = of({\n    columns: [\n      {\n        fieldId: 'label',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.preset-name.title'\n        )\n      },\n      {\n        fieldId: 'ownerFullName',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.shared-by.title'\n        )\n      }\n    ],\n    enableFiltering: false,\n    enableRowSelection: RowSelectionMode.Multiple,\n    recordIdField: 'guid',\n    styles: 'flex-fill',\n    toolbarConfig: {\n      filter: false,\n      visibleColumnsMenu: false\n    },\n    useExternalFiltering: false,\n    getRecordDefinition: () =>\n      of({\n        fieldDefinitions: [\n          {\n            id: 'label',\n            resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n          },\n          {\n            id: 'ownerFullName',\n            resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n          }\n        ]\n      }),\n    getData: (): Observable<IDataPageResult> =>\n      of({\n        data: this.presets,\n        totalSize: this.presets.length\n      })\n  });\n\n  modalData: IAddSharedViewPresetsModalData = this.activeModalRef.getData();\n  private presets: ISharedViewPresetItem[] = this.modalData.newPresets;\n  isAddButtonDisabled$: Observable<boolean>;\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private translateService: TranslateService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.isAddButtonDisabled$ = this.recordGrid.rowSelectionChanged.pipe(map(isEmpty));\n  }\n\n  add(): void {\n    const result: ISharedViewPresetDescriptor[] = this.recordGrid.api.getSelectedRows().map(({ label, guid }) => ({\n      label,\n      guid\n    }));\n\n    this.activeModalRef.close(result);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"modal-body\">\n  <div class=\"mb-4\" style=\"white-space: pre-line\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.description.label'\n        | translate\n    }}\n  </div>\n\n  <rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"add-button\"\n    (click)=\"add()\"\n    [disabled]=\"isAddButtonDisabled$ | async\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, combineLatest, EMPTY, iif, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, finalize, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';\nimport { noop, reject, sortBy } from 'lodash';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RxModalService, RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport {\n  IViewPresetSelectorConfig,\n  IViewPresetSelectorDropdownOption,\n  IViewPresetSelectorState\n} from './view-preset-selector.types';\nimport { RxViewPresetSelectorUserPreferencesService } from './view-preset-selector-user-preferences.service';\nimport { IViewPresetSelectorApi } from './view-preset-selector-api.interface';\nimport { RenameViewPresetComponent } from './rename-view-preset/rename-view-preset.component';\nimport { ShareViewPresetComponent } from './share-view-preset/share-view-preset.component';\nimport { RxFeatureService, RxNotificationService } from '@helix/platform/shared/api';\nimport { ISharedViewPresetItem, IShareViewPresetModalData } from './share-view-preset/share-view-preset.types';\nimport { RX_SHARABLE_VIEW_RESETS_FEATURE_NAME } from '../view-preset-selector.types';\nimport { AddSharedViewPresetsComponent } from './add-shared-view-presets/add-shared-view-presets.component';\nimport {\n  IAddSharedViewPresetsModalData,\n  ISharedViewPresetDescriptor\n} from './add-shared-view-presets/add-shared-view-presets.types';\nimport { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';\nimport { IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'rx-view-preset-selector',\n  templateUrl: './view-preset-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [RxViewPresetSelectorUserPreferencesService],\n  styleUrls: ['./view-preset-selector.component.scss']\n})\nexport class ViewPresetSelectorComponent extends BaseViewComponent implements OnInit, OnDestroy {\n  @Input()\n  config: Observable<IViewPresetSelectorConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  api: IViewPresetSelectorApi = {\n    getGuid: () => this.guid,\n    markAppliedViewPresetAsEdited: this.markAppliedViewPresetAsEdited.bind(this)\n  };\n\n  private isOperationInProgressSubject = new BehaviorSubject<boolean>(false);\n  private isViewPresetEditedSubject = new BehaviorSubject<boolean>(false);\n\n  viewPresetSelectorModel$: Observable<{\n    isOperationInProgress: boolean;\n    isViewPresetEdited: boolean;\n  }> = combineLatest([this.isOperationInProgressSubject, this.isViewPresetEditedSubject]).pipe(\n    map(([isOperationInProgress, isViewPresetEdited]) => ({\n      isOperationInProgress,\n      isViewPresetEdited\n    }))\n  );\n\n  state: IViewPresetSelectorState;\n\n  strings = {\n    deleteLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),\n    discardChangesButtonLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes.button.label'\n    ),\n    editedViewPresetTagLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.edited-view-preset-tag.label'\n    ),\n    renameLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.rename.label'),\n    saveLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n    saveAsLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save-as.label'),\n    shareLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share.button.label'\n    ),\n    systemPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.system.label'\n    ),\n    sharedPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.shared-with-me.label'\n    ),\n    customPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.created-by-me.label'\n    ),\n    sharedTooltip: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.shared-preset.tooltip'\n    ),\n    addSharedViewPresets: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.title'\n    )\n  };\n\n  private userPreferencesChangedSubject = new Subject<void>();\n  isSharingFeatureEnabled = this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME);\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private rxGuidService: RxGuidService,\n    private rxModalService: RxModalService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private rxViewPresetSelectorUserPreferencesService: RxViewPresetSelectorUserPreferencesService,\n    private translateService: TranslateService,\n    private rxFeatureService: RxFeatureService,\n    private rxNotificationService: RxNotificationService,\n    private rxShareViewPresetService: RxShareViewPresetService\n  ) {\n    super();\n\n    this.userPreferencesChangedSubject\n      .pipe(\n        switchMap(() => this.rxViewPresetSelectorUserPreferencesService.save(this.state)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config\n      .pipe(\n        take(1),\n        map((config: IViewPresetSelectorConfig) => ({\n          systemViewPresetOptions: config.viewPresets,\n          customViewPresetOptions: [],\n          sharedViewPresetOptions: [],\n          appliedViewPresetOption: null,\n          isSharingEnabled: config.enableSharing && this.isSharingFeatureEnabled\n        })),\n        switchMap((state: IViewPresetSelectorState) =>\n          this.rxViewPresetSelectorUserPreferencesService.applyUserPreferences(this.guid, state)\n        ),\n        tap(({ state, shouldUpdatePreferences, removedPresetGuid }) => {\n          this.state = state;\n          this.changeDetectorRef.detectChanges();\n          this.isOperationInProgressSubject.next(true);\n\n          if (removedPresetGuid) {\n            this.runtimeViewModelApi.deleteViewPreset(removedPresetGuid).subscribe();\n          }\n\n          if (shouldUpdatePreferences) {\n            this.userPreferencesChangedSubject.next();\n          }\n        }),\n        switchMap(() => this.applyViewPreset(this.state.appliedViewPresetOption)),\n        finalize(() => this.isOperationInProgressSubject.next(false))\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.isOperationInProgressSubject.complete();\n    this.isViewPresetEditedSubject.complete();\n    this.userPreferencesChangedSubject.complete();\n  }\n\n  deleteViewPreset(viewPresetOptionToRemove: IViewPresetSelectorDropdownOption): void {\n    this.rxUtilityModalsService\n      .confirm(\n        this.translateService.instant(\n          viewPresetOptionToRemove.userSharedViewPresetGuid\n            ? 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-shared-view-preset-confirmation.message'\n            : 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-view-preset-confirmation.message'\n        )\n      )\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          const viewPresetGuidToDelete = this.state.appliedViewPresetOption.guid;\n\n          this.state.appliedViewPresetOption = this.state.systemViewPresetOptions[0];\n          this.isViewPresetEditedSubject.next(false);\n\n          this.state.customViewPresetOptions = reject(this.state.customViewPresetOptions, {\n            guid: viewPresetGuidToDelete\n          });\n\n          this.state.sharedViewPresetOptions = reject(this.state.sharedViewPresetOptions, {\n            guid: viewPresetGuidToDelete\n          });\n\n          this.userPreferencesChangedSubject.next();\n          this.isOperationInProgressSubject.next(true);\n\n          this.runtimeViewModelApi\n            .applyViewPreset(this.guid, this.state.appliedViewPresetOption.guid)\n            .pipe(\n              finalize(() => {\n                const deleteSharedViewPreset$ = viewPresetOptionToRemove.userSharedViewPresetGuid\n                  ? this.rxShareViewPresetService.deleteSharedViewPreset(\n                      viewPresetOptionToRemove.userSharedViewPresetGuid\n                    )\n                  : of(null);\n\n                deleteSharedViewPreset$\n                  .pipe(\n                    switchMap(() => this.runtimeViewModelApi.deleteViewPreset(viewPresetGuidToDelete)),\n                    finalize(() => this.isOperationInProgressSubject.next(false))\n                  )\n                  .subscribe();\n              })\n            )\n            .subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  discardViewPresetChanges(): void {\n    this.rxUtilityModalsService\n      .confirm(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes-confirmation.message'\n        )\n      )\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          this.isViewPresetEditedSubject.next(false);\n          this.isOperationInProgressSubject.next(true);\n\n          const appliedViewPresetOption = this.state.appliedViewPresetOption;\n\n          iif(\n            () => appliedViewPresetOption.isShared,\n            this.getSharedViewPresetData(appliedViewPresetOption).pipe(\n              switchMap((sharedViewPresets) =>\n                this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption.guid, sharedViewPresets)\n              )\n            ),\n            this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption.guid)\n          )\n            .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n            .subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  renameViewPreset(): void {\n    this.openRenamingModal(this.strings.renameLabel, true)\n      .then((viewPresetName: string) => {\n        this.state.appliedViewPresetOption.label = viewPresetName;\n        this.state.customViewPresetOptions = sortBy(this.state.customViewPresetOptions, 'label');\n        this.userPreferencesChangedSubject.next();\n        this.changeDetectorRef.detectChanges();\n\n        // if preset is shared with others - updating with new name\n        if (this.state.appliedViewPresetOption.userSharedViewPresetGuid) {\n          this.saveSharedViewPreset().subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  selectPreset(viewPresetOption: IViewPresetSelectorDropdownOption): void {\n    this.state.appliedViewPresetOption = viewPresetOption;\n    this.isViewPresetEditedSubject.next(false);\n    this.userPreferencesChangedSubject.next();\n    this.isOperationInProgressSubject.next(true);\n\n    this.applyViewPreset(viewPresetOption)\n      .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n      .subscribe();\n  }\n\n  saveAsViewPreset(): void {\n    this.openRenamingModal(this.strings.saveAsLabel)\n      .then((viewPresetName: string) => {\n        const viewPreset = {\n          guid: this.rxGuidService.generate(),\n          label: viewPresetName\n        };\n\n        this.state.customViewPresetOptions.push(viewPreset);\n        this.state.customViewPresetOptions = sortBy(this.state.customViewPresetOptions, 'label');\n        this.state.appliedViewPresetOption = viewPreset;\n\n        this.isViewPresetEditedSubject.next(false);\n        this.userPreferencesChangedSubject.next();\n        this.isOperationInProgressSubject.next(true);\n\n        this.runtimeViewModelApi\n          .applyViewPreset(this.guid, this.state.appliedViewPresetOption.guid)\n          .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n          .subscribe();\n      })\n      .catch(noop);\n  }\n\n  saveViewPreset(): void {\n    this.isViewPresetEditedSubject.next(false);\n    this.isOperationInProgressSubject.next(true);\n\n    const saveSharedViewPreset$ = this.state.appliedViewPresetOption.userSharedViewPresetGuid\n      ? this.saveSharedViewPreset()\n      : of(null);\n\n    saveSharedViewPreset$\n      .pipe(\n        switchMap(() => this.runtimeViewModelApi.saveViewPreset(this.state.appliedViewPresetOption.guid)),\n        finalize(() => this.isOperationInProgressSubject.next(false))\n      )\n      .subscribe();\n  }\n\n  shareViewPreset(): void {\n    this.rxModalService\n      .openModal({\n        content: ShareViewPresetComponent,\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.title'\n        ),\n        data: {\n          runtimeViewModelApi: this.runtimeViewModelApi,\n          currentViewPreset: this.state.appliedViewPresetOption,\n          presetSelectorGuid: this.guid\n        } as IShareViewPresetModalData,\n        size: 'sm'\n      })\n      .then((sharedViewPresetGuid) => {\n        this.state.appliedViewPresetOption.userSharedViewPresetGuid = sharedViewPresetGuid;\n        this.userPreferencesChangedSubject.next();\n      })\n      .catch(noop);\n  }\n\n  onAddSharedPresetsClick(): void {\n    this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.guid).subscribe((presets) => {\n      const existingSharedPresetsGuids = this.state.sharedViewPresetOptions.map((option) => option.guid);\n      const newPresets = presets.filter((preset) => !existingSharedPresetsGuids.includes(preset.guid));\n\n      if (newPresets.length) {\n        this.openAddSharedPresetsModal(newPresets);\n      } else {\n        this.rxNotificationService.addInfoMessage(\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.message'\n          ),\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.title'\n          )\n        );\n      }\n    });\n  }\n\n  private openAddSharedPresetsModal(newPresets: ISharedViewPresetItem[]) {\n    this.rxModalService\n      .openModal({\n        content: AddSharedViewPresetsComponent,\n        title: this.strings.addSharedViewPresets,\n        data: {\n          presetSelectorGuid: this.guid,\n          newPresets\n        } as IAddSharedViewPresetsModalData,\n        size: 'sm'\n      })\n      .then((addedPresets: ISharedViewPresetDescriptor[]) => {\n        this.state.sharedViewPresetOptions = this.state.sharedViewPresetOptions.concat(\n          addedPresets.map((preset) => ({ ...preset, isShared: true }))\n        );\n        this.userPreferencesChangedSubject.next();\n\n        if (addedPresets.length) {\n          this.rxNotificationService.addSuccessMessage(\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.message'\n            ),\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.title'\n            )\n          );\n        }\n      })\n      .catch(noop);\n  }\n\n  private markAppliedViewPresetAsEdited(): void {\n    this.isViewPresetEditedSubject.next(true);\n  }\n\n  private openRenamingModal(fieldLabel: string, isEdit?: boolean): Promise<string> {\n    let existingViewPresets = [...this.state.customViewPresetOptions, ...this.state.systemViewPresetOptions];\n\n    if (isEdit) {\n      existingViewPresets = existingViewPresets.filter(\n        (viewPreset) => viewPreset.guid !== this.state.appliedViewPresetOption.guid\n      );\n    }\n\n    return this.rxModalService.openModal({\n      content: RenameViewPresetComponent,\n      data: {\n        fieldLabel,\n        existingViewPresetNames: existingViewPresets.map(({ label }) => label),\n        viewPresetName: this.state.appliedViewPresetOption.label\n      },\n      size: 'sm'\n    });\n  }\n\n  private applyViewPreset(viewPresetOption: IViewPresetSelectorDropdownOption): Observable<never> {\n    if (viewPresetOption.isShared) {\n      return this.getSharedViewPresetData(viewPresetOption).pipe(\n        switchMap((sharedViewPresets) =>\n          this.runtimeViewModelApi.applyViewPreset(this.guid, viewPresetOption.guid, sharedViewPresets)\n        ),\n        catchError((error) => this.handleSharedViewPresetLoadError(error, viewPresetOption))\n      );\n    } else {\n      return this.runtimeViewModelApi.applyViewPreset(this.guid, viewPresetOption.guid);\n    }\n  }\n\n  private saveSharedViewPreset(): Observable<string> {\n    return this.rxShareViewPresetService.saveSharedViewPreset(\n      {\n        runtimeViewModelApi: this.runtimeViewModelApi,\n        currentViewPreset: this.state.appliedViewPresetOption,\n        presetSelectorGuid: this.guid\n      },\n      this.state.appliedViewPresetOption.userSharedViewPresetGuid\n    );\n  }\n\n  private getSharedViewPresetData(\n    viewPresetOption: IViewPresetSelectorDropdownOption\n  ): Observable<IViewPresetsByViewComponentGuid> {\n    return this.rxShareViewPresetService.getSharedViewPresetData(viewPresetOption.guid).pipe(\n      map(({ viewPresetName, sharedViewPresets }) => {\n        viewPresetOption.label = viewPresetName;\n\n        return sharedViewPresets;\n      })\n    );\n  }\n\n  private handleSharedViewPresetLoadError(\n    error: HttpErrorResponse,\n    viewPresetOption: IViewPresetSelectorDropdownOption\n  ): Observable<never> {\n    if (error.status === 404) {\n      this.state.sharedViewPresetOptions = this.state.sharedViewPresetOptions.filter(\n        (option) => option.guid !== viewPresetOption.guid\n      );\n\n      this.runtimeViewModelApi.deleteViewPreset(viewPresetOption.guid).subscribe();\n\n      // if preset was removed - selecting first system preset instead\n      this.selectPreset(this.state.systemViewPresetOptions[0]);\n\n      return EMPTY;\n    } else {\n      return throwError(error);\n    }\n  }\n}\n","<ng-container *ngIf=\"viewPresetSelectorModel$ | async as viewPresetSelectorModel\">\n  <div class=\"btn-group align-items-center\" *ngIf=\"state\">\n    <div adaptDropdown>\n      <button\n        adapt-button\n        adaptDropdownToggle\n        type=\"button\"\n        btn-type=\"tertiary\"\n        class=\"text-default font-weight-bold text-left\"\n        rx-id=\"toggle-button\"\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      >\n        {{ state.appliedViewPresetOption.label }}\n      </button>\n\n      <div class=\"dropdown-menu {{ isSharingFeatureEnabled ? 'preset-selector' : '' }}\" adaptDropdownMenu tabindex=\"0\">\n        <ng-container *ngIf=\"state.customViewPresetOptions.length\">\n          <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.customPresetsTitle }}</div>\n          <button\n            *ngFor=\"let customViewPresetOption of state.customViewPresetOptions\"\n            [class.active]=\"customViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            class=\"dropdown-item\"\n            type=\"button\"\n            (click)=\"selectPreset(customViewPresetOption)\"\n            rx-id=\"custom-view-preset\"\n          >\n            {{ customViewPresetOption.label }}\n\n            <adapt-icon\n              *ngIf=\"customViewPresetOption.userSharedViewPresetGuid && isSharingFeatureEnabled\"\n              name=\"users\"\n              [adaptTooltip]=\"strings.sharedTooltip\"\n              class=\"btn-link float-end ml-2\"\n            ></adapt-icon>\n          </button>\n\n          <div *ngIf=\"!isSharingFeatureEnabled\" class=\"dropdown-divider\"></div>\n        </ng-container>\n\n        <ng-container *ngIf=\"state.isSharingEnabled\">\n          <div class=\"dropdown-heading\">\n            {{ strings.sharedPresetsTitle }}\n\n            <button\n              type=\"button\"\n              class=\"btn btn-link float-end p-0 pl-1 btn-add-shared\"\n              rx-id=\"add-preset-button\"\n              [adaptTooltip]=\"strings.addSharedViewPresets\"\n              (click)=\"onAddSharedPresetsClick()\"\n            >\n              <adapt-icon name=\"plus\"></adapt-icon>\n            </button>\n          </div>\n\n          <button\n            *ngFor=\"let sharedViewPresetOption of state.sharedViewPresetOptions\"\n            class=\"dropdown-item\"\n            [class.active]=\"sharedViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            type=\"button\"\n            (click)=\"selectPreset(sharedViewPresetOption)\"\n            rx-id=\"shared-view-preset\"\n          >\n            {{ sharedViewPresetOption.label }}\n          </button>\n        </ng-container>\n\n        <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.systemPresetsTitle }}</div>\n\n        <button\n          *ngFor=\"let systemViewPresetOption of state.systemViewPresetOptions\"\n          class=\"dropdown-item\"\n          [class.active]=\"systemViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n          type=\"button\"\n          (click)=\"selectPreset(systemViewPresetOption)\"\n          rx-id=\"system-view-preset\"\n        >\n          {{ systemViewPresetOption.label }}\n        </button>\n      </div>\n    </div>\n\n    <span class=\"badge badge-secondary extra-small mx-2\" *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\">\n      {{ strings.editedViewPresetTagLabel }}\n    </span>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      *ngIf=\"\n        !state.appliedViewPresetOption.isSystem &&\n        !state.appliedViewPresetOption.isShared &&\n        viewPresetSelectorModel.isViewPresetEdited\n      \"\n      class=\"d-icon-left-floppy p-2\"\n      rx-id=\"save-button\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveViewPreset()\"\n    >\n      {{ strings.saveLabel }}\n    </adapt-button>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveAsViewPreset()\"\n      class=\"d-icon-left-save_all_o\"\n      rx-id=\"save-as-button\"\n      *ngIf=\"\n        state.appliedViewPresetOption.isSystem ||\n        state.appliedViewPresetOption.isShared ||\n        !viewPresetSelectorModel.isViewPresetEdited\n      \"\n    >\n      {{ strings.saveAsLabel }}\n    </adapt-button>\n\n    <div\n      class=\"dropdown header-cell-menu-btn\"\n      adaptDropdown\n      *ngIf=\"viewPresetSelectorModel.isViewPresetEdited || !state.appliedViewPresetOption.isSystem\"\n    >\n      <button\n        rx-id=\"more-actions-toggle-button\"\n        class=\"d-icon-ellipsis btn btn-link px-0\"\n        type=\"button\"\n        adaptDropdownToggle\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n        [showCaret]=\"false\"\n      ></button>\n\n      <div class=\"dropdown-menu\" adaptDropdownMenu tabindex=\"0\">\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\"\n          class=\"d-icon-left-undo_adapt dropdown-item\"\n          rx-id=\"discard-changes-button\"\n          (click)=\"discardViewPresetChanges()\"\n        >\n          {{ strings.discardChangesButtonLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          (click)=\"saveAsViewPreset()\"\n          class=\"d-icon-left-save_all_o dropdown-item\"\n          rx-id=\"save-as-button\"\n          *ngIf=\"\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            viewPresetSelectorModel.isViewPresetEdited\n          \"\n        >\n          {{ strings.saveAsLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem && !state.appliedViewPresetOption.isShared\"\n          class=\"d-icon-left-field_text dropdown-item\"\n          rx-id=\"rename-selected-view-preset-button\"\n          (click)=\"renameViewPreset()\"\n        >\n          {{ strings.renameLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem\"\n          class=\"d-icon-left-trash_adapt dropdown-item\"\n          rx-id=\"remove-selected-view-preset-button\"\n          (click)=\"deleteViewPreset(state.appliedViewPresetOption)\"\n        >\n          {{ strings.deleteLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"\n            state.isSharingEnabled &&\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            !viewPresetSelectorModel.isViewPresetEdited\n          \"\n          class=\"d-icon-left-share dropdown-item\"\n          rx-id=\"share-view-preset-button\"\n          (click)=\"shareViewPreset()\"\n        >\n          {{ strings.shareLabel }}\n        </adapt-button>\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import { Injectable } from '@angular/core';\n\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition } from '@helix/platform/view/api';\n\n@Injectable()\nexport class ViewPresetSelectorAdapterService implements IDefinitionAdapter<IContainerViewComponentDefinition> {\n  adaptDefinition(viewPresetSelectorComponentDefinition: IContainerViewComponentDefinition): void {\n    viewPresetSelectorComponentDefinition.componentDefinitions\n      .sort((a, b) => a.propertiesByName.index - b.propertiesByName.index)\n      .forEach((componentDefinition) => {\n        Object.assign(componentDefinition.propertiesByName, {\n          guid: componentDefinition.guid,\n          isSystem: true\n        });\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ShareViewPresetComponent } from './share-view-preset.component';\nimport { AdaptButtonModule, AdaptIconModule, AdaptMetatagModule, AdaptRxLabelModule } from '@bmc-ux/adapt-angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RecordGridModule } from '../../../record-grid/runtime/record-grid.module';\nimport { CommonModule } from '@angular/common';\nimport { ShareViewPresetUsersGridComponent } from './share-view-preset-users-grid/share-view-preset-users-grid.component';\n\n@NgModule({\n  imports: [\n    AdaptMetatagModule,\n    AdaptButtonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    RecordGridModule,\n    CommonModule,\n    AdaptIconModule,\n    AdaptRxLabelModule\n  ],\n  declarations: [ShareViewPresetComponent, ShareViewPresetUsersGridComponent]\n})\nexport class ShareViewPresetModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddSharedViewPresetsComponent } from './add-shared-view-presets.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridModule } from '../../../record-grid/runtime/record-grid.module';\n\n@NgModule({\n  declarations: [AddSharedViewPresetsComponent],\n  imports: [CommonModule, TranslateModule, AdaptButtonModule, RecordGridModule]\n})\nexport class AddSharedViewPresetsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  AdaptButtonModule,\n  AdaptDropdownModule,\n  AdaptIconModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule\n} from '@bmc-ux/adapt-angular';\nimport { RxNoWhitespaceValidatorModule, RxUniqueValidatorModule } from '@helix/platform/utils';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { ViewPresetSelectorComponent } from './view-preset-selector.component';\nimport { ViewPresetSelectorAdapterService } from './view-preset-selector-adapter.service';\nimport { RenameViewPresetComponent } from './rename-view-preset/rename-view-preset.component';\nimport { ShareViewPresetModule } from './share-view-preset/share-view-preset.module';\nimport { AddSharedViewPresetsModule } from './add-shared-view-presets/add-shared-view-presets.module';\n\n@NgModule({\n  imports: [\n    AdaptButtonModule,\n    AdaptDropdownModule,\n    AdaptRxTextfieldModule,\n    AdaptTooltipModule,\n    CommonModule,\n    ReactiveFormsModule,\n    RxUniqueValidatorModule,\n    TranslateModule,\n    RxNoWhitespaceValidatorModule,\n    ShareViewPresetModule,\n    AddSharedViewPresetsModule,\n    AdaptIconModule\n  ],\n  exports: [ViewPresetSelectorComponent],\n  declarations: [RenameViewPresetComponent, ViewPresetSelectorComponent],\n  entryComponents: [ViewPresetSelectorComponent],\n  providers: [ViewPresetSelectorAdapterService]\n})\nexport class ViewPresetSelectorModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private viewPresetSelectorAdapterService: ViewPresetSelectorAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.ViewPresetSelector,\n      this.viewPresetSelectorAdapterService\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ViewPresetSelectorDesignModel } from './view-preset-selector-design.model';\n\n@Component({\n  selector: 'rx-view-preset-selector-design',\n  templateUrl: './view-preset-selector-design.component.html',\n  styleUrls: ['./view-preset-selector-design.component.scss']\n})\nexport class ViewPresetSelectorDesignComponent {\n  @Input()\n  model: ViewPresetSelectorDesignModel;\n}\n","<button\n  class=\"dropdown-toggle text-default font-weight-bold text-left\"\n  adapt-button\n  btn-type=\"tertiary\"\n  type=\"button\"\n  readonly\n>\n  {{ model.label$ | async }}\n</button>\n","import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { AdaptRxListBuilderComponent, RxListBuilderItem } from '@bmc-ux/adapt-angular';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { ViewPresetSelectorDesignModel } from '../view-preset-selector-design.model';\nimport { IFormFocusable, IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDesignSetPayload } from '@helix/platform/view/designer';\nimport { IViewPresetProperties } from '../../view-preset-selector.types';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { chain, cloneDeep, trim } from 'lodash';\n\n@Component({\n  selector: 'rx-presets-list-widget',\n  templateUrl: './presets-list-widget.component.html',\n  styleUrls: ['./presets-list-widget.component.scss']\n})\nexport class PresetsListWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, ViewPresetSelectorDesignModel>\n  implements OnInit, IFormWidgetComponent, IFormFocusable\n{\n  private editedPreset: RxListBuilderItem = null;\n\n  presets: RxListBuilderItem[] = [];\n\n  isDisabled: boolean;\n\n  @ViewChild(AdaptRxListBuilderComponent)\n  adaptRxListBuilderComponent: AdaptRxListBuilderComponent;\n\n  private strings = {\n    cannotBeBlank: this.translateService.instant(\n      'com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message',\n      {\n        propertyName: 'View preset name'\n      }\n    ),\n    duplicateValue: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message')\n  };\n\n  itemValidationFn = this.itemValidation.bind(this);\n\n  constructor(protected injector: Injector, private translateService: TranslateService) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.sandbox\n      .getChildComponents()\n      .pipe(first(), takeUntil(this.designerItemModel.sandbox.destroyed$))\n      .subscribe((res) => {\n        res.sort((a, b) => a.data.index - b.data.index);\n\n        this.presets = res.map((component) => ({\n          name: component.data.label,\n          id: component.guid\n        }));\n      });\n  }\n\n  onPresetsListChange(items: RxListBuilderItem[]) {\n    items.forEach((item) => {\n      item.name = trim(item.name);\n    });\n\n    this.presets = cloneDeep(items);\n\n    const payload: IViewComponentDesignSetPayload<IViewPresetProperties>[] = items.map(({ name, id }, index) => ({\n      type: RxViewComponentType.ViewPreset,\n      guid: String(id),\n      data: {\n        label: name,\n        index\n      }\n    }));\n\n    this.designerItemModel.sandbox.setChildren(payload);\n  }\n\n  onListItemAdd(): void {\n    this.presets.push(this.presets.shift());\n  }\n\n  onListItemEdit(preset: RxListBuilderItem): void {\n    this.editedPreset = preset;\n  }\n\n  onListItemUpdate(): void {\n    this.editedPreset = null;\n  }\n\n  focus(): void {\n    this.adaptRxListBuilderComponent.inputEl.nativeElement.focus();\n  }\n\n  private itemValidation(value: string, items: RxListBuilderItem[], isEdit: boolean): string {\n    let errorMessage: string = null;\n\n    const otherItemNames = chain(items)\n      .reject((item) => isEdit && item.id === this.editedPreset.id)\n      .map('name')\n      .value();\n\n    const trimmedValue = trim(value);\n\n    if (trimmedValue.length === 0) {\n      errorMessage = this.strings.cannotBeBlank;\n    } else if (otherItemNames.includes(trimmedValue)) {\n      errorMessage = this.strings.duplicateValue;\n    }\n\n    return errorMessage;\n  }\n}\n","<adapt-rx-list-builder\n  [label]=\"'View preset names'\"\n  [(ngModel)]=\"presets\"\n  (ngModelChange)=\"onPresetsListChange($event)\"\n  [hideListAreaLabel]=\"true\"\n  [texts]=\"options.texts\"\n  [readonly]=\"isDisabled\"\n  (listItemAdd)=\"onListItemAdd()\"\n  (listItemEdit)=\"onListItemEdit($event)\"\n  (listItemUpdate)=\"onListItemUpdate()\"\n  [itemValidation]=\"itemValidationFn\"\n>\n</adapt-rx-list-builder>\n","import {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  ISwitcherFormControlOptions,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { IViewPresetSelectorDesignProperties } from './view-preset-selector-design.types';\nimport { PresetsListWidgetComponent } from './presets-list-widget/presets-list-widget.component';\nimport { RxFeatureService } from '@helix/platform/shared/api';\nimport { RX_SHARABLE_VIEW_RESETS_FEATURE_NAME } from '../view-preset-selector.types';\n\nexport class ViewPresetSelectorDesignModel\n  extends ViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n  implements IViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n{\n  sandbox: IViewComponentDesignSandbox<IViewPresetSelectorDesignProperties>;\n  presetComponentGuids$ = this.sandbox.getChildComponentGuids();\n\n  otherPresetSelectorsNames$: Observable<string[]> = this.sandbox\n    .getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector)\n    .pipe(\n      map((selectors) =>\n        selectors\n          .filter((component) => component.guid !== this.sandbox.guid)\n          .map((component) => component.data.name.trim())\n      )\n    );\n\n  label$: Observable<string> = this.sandbox.getChildComponents().pipe(\n    map((components) => components.sort((a, b) => a.data.index - b.data.index)),\n    map((components) => (components[0] ? components[0].data.label : 'No view presets added')),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  private rxFeatureService = this.injector.get(RxFeatureService);\n\n  static getInitialProperties(\n    initialProperties?: IViewPresetSelectorDesignProperties\n  ): IViewPresetSelectorDesignProperties {\n    return {\n      name: 'View preset selector',\n      styles: null,\n      enableSharing: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.updateInspectorConfig(this.setInspectorConfig());\n\n    combineLatest([this.sandbox.componentProperties$, this.presetComponentGuids$])\n      .pipe(\n        withLatestFrom(this.otherPresetSelectorsNames$),\n        map(([[componentProperties, presetGuids], otherPresetSelectorsNames]) =>\n          this.validate(componentProperties, presetGuids, otherPresetSelectorsNames)\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  private setInspectorConfig(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                required: true\n              }\n            },\n            {\n              component: PresetsListWidgetComponent,\n              widgetName: 'presetsList'\n            },\n            this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME)\n              ? {\n                  name: 'enableSharing',\n                  component: SwitchFormControlComponent,\n                  options: {\n                    label: 'Enable sharing'\n                  } as ISwitcherFormControlOptions\n                }\n              : null,\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig()\n          ].filter(Boolean)\n        }\n      ]\n    };\n  }\n\n  private validate(\n    model: IViewPresetSelectorDesignProperties,\n    presetGuids: string[],\n    otherPresetSelectorsNames: string[]\n  ): IViewComponentDesignValidationIssue[] {\n    let validationIssues = [];\n\n    const trimmedModelName = model.name.trim();\n\n    if (!trimmedModelName) {\n      validationIssues.push(this.sandbox.createError('Name cannot be blank.', 'name'));\n    } else if (otherPresetSelectorsNames.includes(trimmedModelName)) {\n      validationIssues.push(this.sandbox.createError('Name must be unique.', 'name'));\n    }\n\n    if (!presetGuids.length) {\n      validationIssues.push(this.sandbox.createError('At least one view preset must be added.', 'presetsList'));\n    }\n\n    validationIssues = validationIssues.concat(validateStandardProps(model));\n\n    return validationIssues;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PresetsListWidgetComponent } from './presets-list-widget.component';\nimport { AdaptRxListBuilderModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [PresetsListWidgetComponent],\n  exports: [PresetsListWidgetComponent],\n  imports: [CommonModule, AdaptRxListBuilderModule, FormsModule]\n})\nexport class PresetsListWidgetModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ViewPresetSelectorDesignComponent } from './view-preset-selector-design.component';\nimport { PresetsListWidgetModule } from './presets-list-widget/presets-list-widget.module';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, PresetsListWidgetModule, AdaptButtonModule],\n  declarations: [ViewPresetSelectorDesignComponent],\n  entryComponents: [ViewPresetSelectorDesignComponent]\n})\nexport class ViewPresetSelectorDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { ViewPresetSelectorComponent } from './runtime/view-preset-selector.component';\nimport { ViewPresetSelectorModule } from './runtime/view-preset-selector.module';\nimport { ViewPresetSelectorDesignComponent } from './design/view-preset-selector-design.component';\nimport { ViewPresetSelectorDesignModel } from './design/view-preset-selector-design.model';\nimport { ViewPresetSelectorDesignModule } from './design/view-preset-selector-design.module';\n\n@NgModule({\n  imports: [ViewPresetSelectorDesignModule, ViewPresetSelectorModule]\n})\nexport class ViewPresetSelectorRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.ViewPresetSelector,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(ViewPresetSelectorComponent),\n        properties: [\n          {\n            name: 'styles'\n          },\n          {\n            name: 'enableSharing',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean\n          },\n          RX_AVAILABLE_ON_DEVICES_PROP_DESC\n        ],\n        isContainerComponent: true,\n        name: 'View preset selector',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'screens_triangle_down_circle',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n          ViewPresetSelectorDesignComponent\n        ),\n        designComponentModel: ViewPresetSelectorDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.ViewPreset,\n        configPropertyName: 'viewPresets',\n        isDataComponent: true,\n        properties: [\n          {\n            name: 'label',\n            localizable: true\n          },\n          {\n            name: 'index',\n            designType: ViewComponentPropertyType.Number,\n            type: ViewComponentPropertyType.Number\n          }\n        ]\n      }\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { RX_APPLICATION, RxNotificationService } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_GAINSIGHT, RxGainsightConfiguratorService } from '@helix/platform/shared/components';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { map, take, shareReplay, switchMap, filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-gainsight-admin-opt-in',\n  templateUrl: './gainsight-admin-opt-in.component.html',\n  styleUrls: ['./gainsight-admin-opt-in.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GainsightAdminOptInComponent extends BaseViewComponent implements OnInit {\n  deploymentTypeOptions: RxSelectOption[] = RX_GAINSIGHT.deploymentTypes;\n  environmentTypeOptions: string[] = RX_GAINSIGHT.environmentTypes;\n  deploymentType: string[];\n  environmentType: string[];\n\n  vm$ = this.rxGainsightConfiguratorService.getGainsightConfiguration(RX_APPLICATION.innovationStudioBundleId).pipe(\n    take(1),\n    filter((config) => Boolean(config)),\n    map((config) => config.settings),\n    map((settings) => ({\n      deploymentTypeOptions: this.deploymentTypeOptions.filter(\n        (deploymentType) => deploymentType.name === settings.deploymentType\n      ),\n      environmentTypeOptions: [settings.environmentType],\n      useAdaptRadar: settings.useAdaptRadar,\n      loadGainsightFromBmcIt: settings.loadGainsightFromBmcIt,\n      adaptAgreementState: {\n        organizationPerformance: settings.enableGainsight,\n        accountMarketing: false,\n        accountPerformance: false,\n        organizationMarketing: false\n      }\n    })),\n    shareReplay(1)\n  );\n\n  constructor(\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxGainsightConfiguratorService: RxGainsightConfiguratorService\n  ) {\n    super();\n  }\n\n  optionFormatter(deploymentType: RxSelectOption): string {\n    return deploymentType.name;\n  }\n\n  save(): void {\n    this.vm$\n      .pipe(\n        take(1),\n        map((vm) => ({\n          ...vm,\n          deploymentType: vm.deploymentTypeOptions[0].id,\n          environmentType: vm.environmentTypeOptions[0],\n          enableGainsight: vm.adaptAgreementState.organizationPerformance\n        })),\n        switchMap((gainsightSettings) =>\n          this.rxGainsightConfiguratorService.saveGainsightConfiguration(gainsightSettings)\n        )\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.gainsight.gainsight-settings-saved.success.message')\n        );\n      });\n  }\n}\n","<ng-container class=\"p-0\" *ngIf=\"vm$ | async as vm; else emptyStateTemplate\">\n  <div class=\"mt-1 container\">\n    <h1>\n      <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.title' | translate }}</span>\n    </h1>\n\n    <div>\n      <adapt-agreement-card\n        [showOrganizationSettings]=\"true\"\n        [showMarketingSection]=\"false\"\n        [multiProductUsage]=\"false\"\n        [showShadow]=\"false\"\n        rx-id=\"enable-gainsight\"\n        [(state)]=\"vm.adaptAgreementState\"\n      >\n      </adapt-agreement-card>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\" [hidden]=\"true\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"Use ADAPT Radar\"\n        [(ngModel)]=\"vm.useAdaptRadar\"\n        name=\"useAdaptRadar\"\n        rx-id=\"use-adapt-radar\"\n      ></adapt-rx-switch>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.gainsight.gainsight-settings.load-gainsight-script-from-bmc-it.label' | translate\n        }}\"\n        [(ngModel)]=\"vm.loadGainsightFromBmcIt\"\n        name=\"loadGainsightFromBmcIt\"\n        rx-id=\"load-gainsight-from-bmc\"\n      ></adapt-rx-switch>\n    </div>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.deployment-type.label' | translate }}\"\n      [options]=\"deploymentTypeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"vm.deploymentTypeOptions\"\n      name=\"deploymentType\"\n      rx-id=\"deployment-type\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.environment-type.label' | translate }}\"\n      [options]=\"environmentTypeOptions\"\n      [(ngModel)]=\"vm.environmentTypeOptions\"\n      name=\"environmentType\"\n      rx-id=\"environment-type\"\n    >\n    </adapt-rx-select>\n\n    <div class=\"modal-footer mt-4\">\n      <button rx-id=\"save-button\" adapt-button btn-type=\"primary\" type=\"button\" (click)=\"save()\" rx-id=\"save-button\">\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #emptyStateTemplate>\n  <div class=\"d-flex align-items-center justify-content-center h-100\">\n    <adapt-empty-state\n      class=\"w-100\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.feature-is-disabled.label' | translate }}\"\n      type=\"config\"\n    ></adapt-empty-state>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GainsightAdminOptInComponent } from './gainsight-admin-opt-in.component';\nimport {\n  AdaptAgreementModule,\n  AdaptRxSelectModule,\n  AdaptRxSwitchModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [GainsightAdminOptInComponent],\n  imports: [\n    TranslateModule,\n    AdaptAgreementModule,\n    AdaptRxSelectModule,\n    FormsModule,\n    AdaptRxSwitchModule,\n    CommonModule,\n    AdaptButtonModule,\n    AdaptEmptyStateModule\n  ],\n  entryComponents: [GainsightAdminOptInComponent]\n})\nexport class GainsightAdminOptInRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: 'rx-gainsight-admin-opt-in',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(GainsightAdminOptInComponent),\n      name: 'Gainsight Admin Opt In',\n      hidden: true,\n      availableInBundles: [RX_APPLICATION.settingsBundleId]\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ActionButtonRegistrationModule } from './action-button/action-button-registration.module';\nimport { ButtonBarRegistrationModule } from './button-bar/button-bar-registration.module';\nimport { ContainerRegistrationModule } from './container/container-registration.module';\nimport { FieldComponentsModule } from './field-components/field-components.module';\nimport { ImageRegistrationModule } from './image/image-registration.module';\nimport { PageRegistrationModule } from './page/page-registration.module';\nimport { RecordEditorRegistrationModule } from './record-editor/record-editor-registration.module';\nimport { RecordGridRegistrationModule } from './record-grid/record-grid-registration.module';\nimport { RichTextRegistrationModule } from './rich-text/rich-text-registration.module';\nimport { TabPanelRegistrationModule } from './tab-panel/tab-panel-registration.module';\nimport { ServiceListRegistrationModule } from './service-list/service-list-registration.module';\nimport { UnknownRegistrationModule } from './unknown/unknown-registration.module';\nimport { ChatbotUserMappingRegistrationModule } from './rx.settings/chatbot-user-mapping/chatbot-user-mapping-registration.module';\nimport { IframeLoginEventRegistrationModule } from './rx.settings/iframe-login-event/iframe-login-event-registration.module';\nimport { SmartReportingRedirectorRegistrationModule } from './rx.settings/smart-reporting-redirector/smart-reporting-redirector-registration.module';\nimport { ViewPresetSelectorRegistrationModule } from './view-preset-selector/view-preset-selector-registration.module';\nimport { GainsightAdminOptInRegistrationModule } from './rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in-registration.module';\n@NgModule({\n  imports: [\n    ActionButtonRegistrationModule,\n    ButtonBarRegistrationModule,\n    ChatbotUserMappingRegistrationModule,\n    ContainerRegistrationModule,\n    RecordEditorRegistrationModule,\n    FieldComponentsModule,\n    IframeLoginEventRegistrationModule,\n    RecordGridRegistrationModule,\n    RichTextRegistrationModule,\n    TabPanelRegistrationModule,\n    PageRegistrationModule,\n    ImageRegistrationModule,\n    ServiceListRegistrationModule,\n    SmartReportingRedirectorRegistrationModule,\n    UnknownRegistrationModule,\n    ViewPresetSelectorRegistrationModule,\n    GainsightAdminOptInRegistrationModule\n  ]\n})\nexport class ViewComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ActionButtonStyle","DeprecatedActionButtonStyle","ActionButtonSize","ActionButtonIconAlignment","Injectable","combineLatest","map","Component","ChangeDetectionStrategy","Input","includes","get","RX_LEGACY_ICONS","RxViewComponentType","CommonModule","AdaptButtonModule","ViewDesignerCanvasModule","ActionListWidgetModule","IconPickerFormControlModule","NgModule","takeUntil","find","RX_RECORD_DEFINITION","throwError","BaseViewComponent","HostBinding","TranslateModule","AdaptIconModule","Subject","throttle","RX_VIEW_DEFINITION","isEmpty","ResizeSensor","merge","isUndefined","last","ElementRef","ViewChildren","ViewChild","RuntimeViewCanvasModule","AdaptDropdownModule","ReplaySubject","RX_STANDARD_PROPS_DEFAULT_VALUES","take","validateStandardProps","TextFormControlComponent","Tooltip","SelectFormControlComponent","values","getStandardPropsInspectorConfigs","ViewDesignerComponentModel","EventEmitter","CanvasItemContainerComponent","ViewDesignerCanvasItemApiToken","SplitComponent","Inject","Output","HostListener","CanvasOutletComponent","AngularSplitModule","DragDropModule","ContainerRowWrap","_a","RecordEditorMode","RecordEditorState","RecordFieldOption","xor","groupBy","reduce","concatMap","InspectorWidgetBase","ViewEncapsulation","inRange","flow","omit","omitBy","isNil","catchError","EMPTY","of","isFinite","RxDefinitionPickerComponent","RxDefinitionPickerType","RX_MODAL","GroupButtonFormControlComponent","ExpressionInspectorControlComponent","SwitchFormControlComponent","OptionalExpressionInspectorControlComponent","getAvailableOnDevicesInspectorConfig","getStylesFieldInspectorConfig","RX_ASSOCIATION_DEFINITION","from","FormsModule","AdaptRxTextfieldModule","RxDefinitionPickerModule","FormControlsModule","AdaptEmptyStateModule","RxAssociationManagerService","BehaviorSubject","defer","share","assign","forkJoin","tap","_map","switchMap","forEach","remove","filter","uniq","RX_ASSOCIATED_RECORD_NODE_SIDES","clone","Optional","RxAssociationInstanceDataPageService","RxRecordDefinitionCacheService","RxRecordInstanceUtilsService","RxRecordInstanceService","RxJsonParserService","RxAssociationDefinitionCacheService","distinctUntilChanged","FormControl","FormGroup","forOwn","flattenDeep","transform","isObject","isEqual","takeWhile","pluck","compact","set","switchMapTo","finalize","observeOn","asyncScheduler","asapScheduler","ReactiveFormsModule","RxModalModule","AdaptAlertModule","isFunction","RxAssociationEditingMode","skip","startWith","RxAssociatedRecordNodeSide","head","delay","castArray","isString","every","RxSelectWithPaginationComponent","sortBy","AdaptRxFormControlModule","ReadOnlyFieldModule","RxSelectWithPaginationModule","DatePipe","TreeWrap","pull","DismissReasons","RxModalClass","noop","ValueAccessor","NG_VALUE_ACCESSOR","AdaptRxSearchModule","AdaptAccordionModule","AdaptTreeModule","getDisabledFieldInspectorConfig","RX_DISABLED_PROP_DEFAULT_VALUE","AdaptRxSelectModule","ViewComponentPropertyType","RX_AVAILABLE_ON_DEVICES_PROP_DESC","RxGuidService","RxDefinitionNameService","shareReplay","withLatestFrom","concatMapTo","mapTo","pairwise","defaults","RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE","mergeMap","ValidationFormControlComponent","RxViewComponentExpressionConfigurator","RX_APPLICATION","AdaptRxUploaderModule","TranslateService","RxFieldDefinitionService","RxSystemConfigurationService","RX_ADMINISTRATION","isNull","Directive","UploaderMode","UploaderSelectionMode","toString","has","first","UploaderService","AdaptDownloadModule","AdaptRxSwitchModule","AdaptRxCheckboxModule","NgModel","RxBooleanModule","findIndex","AdaptRxDatetimeModule","moment","AdaptRxDatetimeAdapter","RxDatetimePickerMode","DecimalPipe","BigNumber","AdaptTextFieldFormBuilderModule","AdaptRxCounterModule","AdaptRxValidatorsModule","AdaptRxRadiobuttonModule","AdaptRxLabelModule","SelectGroupFieldComponent","_filter","pick","RX_AVAILABLE_ON_DEVICES_PROP_NAME","uniqBy","reject","NamedListFilterExpressionConfigurator","ExpressionOperatorRowsByGroup","ExpressionOperatorGroup","TextFieldMultiSelectionType","debounceTime","RX_DEFINITION_PICKER","ExpressionFormControlComponent","AdaptRxTextareaModule","ViewDefinitionType","validateCssClassNames","validateAvailableOnDevicesProp","flatten","RX_STANDARD_PROPS_DESC","CKEditorModule","cloneDeep","LocalizedCharacterFieldValueModalComponent","AdaptTooltipModule","RxBusyIndicatorModule","AdaptBusyModule","RecordGridColumnAlignment","RX_EXPRESSION_EVALUATOR","constant","AsyncSubject","some","RxExpressionConfigurator","Validators","moveItemInArray","AdaptAccordionTabComponent","OpenViewActionModalSize","RxViewExpressionConfigurator","without","CdkDropList","CdkDrag","ActionListControlComponent","ColumnSortDirection","isBoolean","SortOrder","defaultIfEmpty","AdvancedFilterDataTypesConfigsService","isEmptyOrWhitespace","getTagText","AdvancedFilterOptionDataType","formatAdvancedFilterTagText","isArray","RecordGridFilterOperator","keys","intersection","RecordGridFilterDataLogic","findKey","RecordGridNamedFilterOptionKey","chain","booleanDataTypeBlankValue","Subscription","RecordGridFilterMode","AdaptTagModule","AdaptMetatagModule","AdaptAdvancedFilteringModule","toNumber","NgForm","RecordGridDesignDefinitionMode","OptionalSelectFormControlComponent","StepperWithUnitsFormControlModule","SelectFormControlModule","RxViewLayout","AdaptTextFieldModule","ActionListControlModule","GroupButtonFormControlModule","ExpressionEditorModule","RxDirectivesModule","AdaptTableModule","RxDefinitionModule","ExpressionFormControlModule","RxUniqueValidatorModule","AdaptPopoverModule","RxNoWhitespaceValidatorModule","endsWith","ResizeMode","RowSelectionMode","RxError","RX_VIEW_ACTION","OpenViewActionLaunchBehavior","OpenViewActionType","Host","ExportType","AdaptTableHeaderSelectionMode","differenceBy","VIEW_COMPONENT_DEFAULT_EVENT_NAME","round","intersectionBy","RowDataItemIdFieldName","AdaptTableEventSource","ApplyGridFilterMode","min","max","_toString","saveAs","RX_LAUNCH_BEHAVIOR","getValueOrFunc","isNumber","findLast","ToolbarItemsByPriority","RxRecordQueryExpressionEvaluatorService","AdaptSelectModule","AdaptSubnavModule","RouterModule","RxBooleanPipe","RX_RICH_TEXT","escape","ExpressionParserToken","DOCUMENT","CKEditorComponent","AdaptTabsModule","RxViewActionValidatorService","IconPickerFormControlComponent","ActionListWidgetComponent","RX_DISABLED_PROP_DESC","RX_VIEW_DESIGNER","times","getHiddenFieldInspectorConfig","RxModalService","StepperWithUnitsFormControlComponent","RxViewComponentRegistryService","zip","skipWhile","RX_DATA_PAGE","iif","trim","AdaptRxListBuilderComponent","RxFeatureService","AdaptRxListBuilderModule","RX_GAINSIGHT","AdaptAgreementModule"],"mappings":"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"}