(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@bmc-ux/adapt-angular'), require('@angular/common'), require('@helix/platform/shared/components'), require('@helix/platform/view/api'), require('@helix/platform/view/designer'), require('lodash'), require('@helix/platform/shared/api'), require('@helix/platform/record/api'), require('@helix/platform/view/runtime'), require('@ngx-translate/core'), require('css-element-queries'), require('@helix/platform/utils'), require('angular-split'), require('@angular/cdk/drag-drop'), require('@angular/forms'), require('@helix/platform/association/api'), require('@helix/platform/ui-kit'), require('moment-es6'), require('bignumber.js'), require('@bmc-ux/obsolete'), require('@helix/platform/named-list/api'), require('ckeditor4-angular'), require('@bmc-ux/adapt-table'), require('file-saver'), require('@angular/router'), require('@angular/platform-browser'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@helix/platform/view/components', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@bmc-ux/adapt-angular', '@angular/common', '@helix/platform/shared/components', '@helix/platform/view/api', '@helix/platform/view/designer', 'lodash', '@helix/platform/shared/api', '@helix/platform/record/api', '@helix/platform/view/runtime', '@ngx-translate/core', 'css-element-queries', '@helix/platform/utils', 'angular-split', '@angular/cdk/drag-drop', '@angular/forms', '@helix/platform/association/api', '@helix/platform/ui-kit', 'moment-es6', 'bignumber.js', '@bmc-ux/obsolete', '@helix/platform/named-list/api', 'ckeditor4-angular', '@bmc-ux/adapt-table', 'file-saver', '@angular/router', '@angular/platform-browser', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.helix = global.helix || {}, global.helix.platform = global.helix.platform || {}, global.helix.platform.view = global.helix.platform.view || {}, global.helix.platform.view.components = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.adaptAngular, global.ng.common, global.helix.platform.shared.components, global.helix.platform.view.api, global.helix.platform.view.designer, global.lodash, global.helix.platform.shared.api, global.helix.platform.record.api, global.helix.platform.view.runtime, global.ngxTranslateCore, global.cssElementQueries, global.helix.platform.utils, global.angularSplit, global.ng.cdk.dragDrop, global.ng.forms, global.helix.platform.association.api, global.helix.platform["ui-kit"], global.moment, global.bigNumber, global.obsolete, global.helix.platform["named-list"].api, global.ckeditor4Angular, global.adaptTable, global.fileSaver, global.ng.router, global.ng.platformBrowser, global.ng.common.http));
})(this, (function (exports, i0, rxjs, operators, i1, i3, i2, i1$1, i1$3, lodash, i1$2, i1$4, i1$5, i2$1, cssElementQueries, i2$2, i2$3, i8, i2$4, i2$5, i1$6, moment, BigNumber, obsolete, i2$6, i2$7, i1$7, fileSaver, i28, i1$8, i1$9) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace$5 = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$5);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$2);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$3);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$4);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$5);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i2__namespace$6 = /*#__PURE__*/_interopNamespace(i2$6);
    var i2__namespace$7 = /*#__PURE__*/_interopNamespace(i2$7);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i28__namespace = /*#__PURE__*/_interopNamespace(i28);
    var i1__namespace$8 = /*#__PURE__*/_interopNamespace(i1$8);
    var i1__namespace$9 = /*#__PURE__*/_interopNamespace(i1$9);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.ActionButtonStyle = void 0;
    (function (ActionButtonStyle) {
        ActionButtonStyle["Primary"] = "primary";
        ActionButtonStyle["Secondary"] = "secondary";
        ActionButtonStyle["Tertiary"] = "tertiary";
    })(exports.ActionButtonStyle || (exports.ActionButtonStyle = {}));
    exports.DeprecatedActionButtonStyle = void 0;
    (function (DeprecatedActionButtonStyle) {
        DeprecatedActionButtonStyle["Link"] = "link";
        DeprecatedActionButtonStyle["Clear"] = "clear";
    })(exports.DeprecatedActionButtonStyle || (exports.DeprecatedActionButtonStyle = {}));
    exports.ActionButtonSize = void 0;
    (function (ActionButtonSize) {
        ActionButtonSize["Small"] = "small";
        ActionButtonSize["Default"] = "default";
        ActionButtonSize["Large"] = "large";
    })(exports.ActionButtonSize || (exports.ActionButtonSize = {}));
    exports.ActionButtonIconAlignment = void 0;
    (function (ActionButtonIconAlignment) {
        ActionButtonIconAlignment["Left"] = "left";
        ActionButtonIconAlignment["Right"] = "right";
    })(exports.ActionButtonIconAlignment || (exports.ActionButtonIconAlignment = {}));

    var RxActionButtonService = /** @class */ (function () {
        function RxActionButtonService() {
        }
        RxActionButtonService.prototype.getButtonType = function (style) {
            var result;
            switch (style) {
                case exports.ActionButtonStyle.Secondary:
                    result = 'secondary';
                    break;
                case exports.ActionButtonStyle.Tertiary:
                    result = 'tertiary';
                    break;
                default:
                    result = 'primary';
                    break;
            }
            return result;
        };
        RxActionButtonService.prototype.getIconCssClass = function (iconClass, iconAlignment) {
            if (iconAlignment === void 0) { iconAlignment = exports.ActionButtonIconAlignment.Left; }
            return iconClass ? "d-icon-" + iconAlignment + "-" + iconClass : '';
        };
        return RxActionButtonService;
    }());
    RxActionButtonService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxActionButtonService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxActionButtonService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxActionButtonService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxActionButtonService, decorators: [{
                type: i0.Injectable
            }] });

    var ActionButtonDesignComponent = /** @class */ (function () {
        function ActionButtonDesignComponent(rxActionButtonService) {
            this.rxActionButtonService = rxActionButtonService;
        }
        ActionButtonDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.iconCssClass$ = rxjs.combineLatest([this.model.icon$, this.model.iconAlignment$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), iconCssName = _b[0], iconAlignment = _b[1];
                return _this.rxActionButtonService.getIconCssClass(iconCssName, iconAlignment);
            }));
            this.buttonType$ = this.model.style$.pipe(operators.map(function (style) { return _this.rxActionButtonService.getButtonType(style); }));
            this.size$ = this.model.size$.pipe(operators.map(function (size) { return size || exports.ActionButtonSize.Default; }));
        };
        return ActionButtonDesignComponent;
    }());
    ActionButtonDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignComponent, deps: [{ token: RxActionButtonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionButtonDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ActionButtonDesignComponent, selector: "rx-action-button-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<button adapt-button [btn-type]=\"buttonType$ | async\" [size]=\"size$ | async\" [ngClass]=\"iconCssClass$ | async\">\n  {{ model.label$ | async }}\n</button>\n", components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-action-button-design',
                        templateUrl: './action-button-design.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: RxActionButtonService }]; }, propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var ActionButtonAdapterService = /** @class */ (function () {
        function ActionButtonAdapterService() {
            this.deprecatedButtonStyles = [exports.DeprecatedActionButtonStyle.Link, exports.DeprecatedActionButtonStyle.Clear];
        }
        ActionButtonAdapterService.prototype.adaptDefinition = function (componentDefinition) {
            if (lodash.includes(this.deprecatedButtonStyles, componentDefinition.propertiesByName.style)) {
                componentDefinition.propertiesByName.style = exports.ActionButtonStyle.Tertiary;
            }
            if (!componentDefinition.propertiesByName.size) {
                componentDefinition.propertiesByName.size = exports.ActionButtonSize.Small;
            }
            if (componentDefinition.propertiesByName.icon) {
                componentDefinition.propertiesByName.icon = lodash.get(i1$1.RX_LEGACY_ICONS, componentDefinition.propertiesByName.icon, componentDefinition.propertiesByName.icon);
            }
        };
        return ActionButtonAdapterService;
    }());
    ActionButtonAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonAdapterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ActionButtonAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonAdapterService, decorators: [{
                type: i0.Injectable
            }] });

    var ActionButtonDesignModule = /** @class */ (function () {
        function ActionButtonDesignModule(rxDefinitionAdapterRegistryService, actionButtonAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.actionButtonAdapterService = actionButtonAdapterService;
            this.rxDefinitionAdapterRegistryService.registerDesignAdapter(i1$1.RxViewComponentType.ActionButton, this.actionButtonAdapterService);
        }
        return ActionButtonDesignModule;
    }());
    ActionButtonDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: ActionButtonAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ActionButtonDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignModule, declarations: [ActionButtonDesignComponent], imports: [i3.CommonModule,
            i1.AdaptButtonModule,
            i1$3.ViewDesignerCanvasModule,
            i1$3.ActionListWidgetModule,
            i2.IconPickerFormControlModule] });
    ActionButtonDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignModule, providers: [RxActionButtonService, ActionButtonAdapterService], imports: [[
                i3.CommonModule,
                i1.AdaptButtonModule,
                i1$3.ViewDesignerCanvasModule,
                i1$3.ActionListWidgetModule,
                i2.IconPickerFormControlModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1.AdaptButtonModule,
                            i1$3.ViewDesignerCanvasModule,
                            i1$3.ActionListWidgetModule,
                            i2.IconPickerFormControlModule
                        ],
                        declarations: [ActionButtonDesignComponent],
                        entryComponents: [ActionButtonDesignComponent],
                        providers: [RxActionButtonService, ActionButtonAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: ActionButtonAdapterService }]; } });

    var ActionButtonComponent = /** @class */ (function (_super) {
        __extends(ActionButtonComponent, _super);
        function ActionButtonComponent(rxLogService, translateService, rxNotificationService, rxActionButtonService) {
            var _this = _super.call(this) || this;
            _this.rxLogService = rxLogService;
            _this.translateService = translateService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxActionButtonService = rxActionButtonService;
            _this.api = {
                click: _this.click.bind(_this),
                setProperty: _this.setProperty.bind(_this)
            };
            _this.state = {};
            _this.isActionInProgress = false;
            _this.isDisabled = false;
            _this.buttonType = '';
            return _this;
        }
        Object.defineProperty(ActionButtonComponent.prototype, "hostClass", {
            get: function () {
                var state = this.state;
                var className = i1$1.RxViewComponentType.ActionButton + "_" + state.style;
                return state.styles ? className + " " + state.styles : className;
            },
            enumerable: false,
            configurable: true
        });
        ActionButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', this.api);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                Object.assign(_this.state, config);
                if (config.labelKey) {
                    _this.state.buttonLabel = _this.translateService.instant(config.labelKey);
                }
                else {
                    _this.state.buttonLabel = config.label;
                }
                _this.state.icon = '';
                _this.state.cls = config.cls || '';
                if (config.iconCls || config.icon) {
                    var icon = config.iconCls || config.icon;
                    var iconAlignment = ((config.label || config.labelKey) && config.iconAlignment) || 'left';
                    _this.state.icon = _this.rxActionButtonService.getIconCssClass(icon, iconAlignment);
                }
                if (config.iconCls && config.icon) {
                    _this.rxLogService.warning('iconCls option is specified, icon will be ignored.');
                }
                if (!config.cls) {
                    _this.buttonType = _this.rxActionButtonService.getButtonType(_this.state.style);
                }
                if (config.cls && config.style) {
                    _this.rxLogService.warning('cls option is specified, style will be ignored.');
                }
                _this.validateRecordDefinitionName();
                _this.isHidden = _this.isHiddenFunc();
                _this.isDisabled = _this.isDisabledFunc();
            });
        };
        // api
        ActionButtonComponent.prototype.click = function () {
            var _this = this;
            if (!this.isDisabled) {
                this.isActionInProgress = true;
                this.isDisabled = true;
                return this
                    .triggerViewActions()
                    .then(function (res) {
                    _this.isActionInProgress = false;
                    _this.isDisabled = _this.isDisabledFunc();
                })
                    .catch(function (err) {
                    _this.isActionInProgress = false;
                    _this.isDisabled = _this.isDisabledFunc();
                });
            }
        };
        ActionButtonComponent.prototype.isDisabledFunc = function () {
            return (Boolean(this.state.disabled) ||
                this.isActionInProgress ||
                (this.state.recordInstance &&
                    this.state.fieldId &&
                    this.state.recordInstance.recordDefinitionName === this.state.recordDefinitionName &&
                    lodash.find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }) &&
                    lodash.find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }).permissionType ===
                        i1$4.RX_RECORD_DEFINITION.fieldPermissionTypes.view));
        };
        ActionButtonComponent.prototype.isHiddenFunc = function () {
            return (this.isHidden =
                Boolean(this.state.hidden) ||
                    (this.state.recordInstance &&
                        (this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName ||
                            (this.state.fieldId &&
                                !lodash.find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) })))));
        };
        ActionButtonComponent.prototype.setProperty = function (propertyPath, value) {
            if (lodash.includes(['hidden', 'disabled'], propertyPath)) {
                this.state[propertyPath] = value;
                this.notifyPropertyChanged(propertyPath, this.state[propertyPath]);
            }
            else {
                return rxjs.throwError("Action Button: property " + propertyPath + " is not settable.");
            }
        };
        ActionButtonComponent.prototype.validateRecordDefinitionName = function () {
            if (this.state.recordInstance &&
                this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName) {
                var buttonName = this.translateService.instant('com.bmc.arsys.rx.client.view-components.action-button.component-name.label', {
                    label: this.state.label
                });
                var errorMessage = this.translateService.instant('com.bmc.arsys.rx.client.view-components.action-button.configuration-error.message', {
                    componentName: buttonName
                });
                this.rxNotificationService.addErrorMessage(errorMessage);
            }
        };
        return ActionButtonComponent;
    }(i1$5.BaseViewComponent));
    ActionButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonComponent, deps: [{ token: i1__namespace$1.RxLogService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$1.RxNotificationService }, { token: RxActionButtonService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ActionButtonComponent, selector: "rx-action-button", inputs: { guid: "guid", config: "config", runtimeViewModelApi: "runtimeViewModelApi" }, host: { properties: { "class": "this.hostClass" } }, usesInheritance: true, ngImport: i0__namespace, template: "<button\n  adapt-button\n  type=\"button\"\n  class=\"mw-100 rx-ellipsis\"\n  *ngIf=\"!isHidden\"\n  [btn-type]=\"buttonType\"\n  [ngClass]=\"[state.icon, state.cls]\"\n  [disabled]=\"isDisabled\"\n  [size]=\"state.size\"\n  (click)=\"api.click($event)\"\n>\n  <span>{{ state.buttonLabel }}</span>\n</button>\n", styles: [":host{display:block}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-action-button',
                        templateUrl: './action-button.component.html',
                        styleUrls: ['./action-button.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxLogService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$1.RxNotificationService }, { type: RxActionButtonService }]; }, propDecorators: { guid: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], runtimeViewModelApi: [{
                    type: i0.Input
                }], hostClass: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var ActionButtonModule = /** @class */ (function () {
        function ActionButtonModule(rxDefinitionAdapterRegistryService, actionButtonAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.actionButtonAdapterService = actionButtonAdapterService;
            this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.ActionButton, this.actionButtonAdapterService);
        }
        return ActionButtonModule;
    }());
    ActionButtonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: ActionButtonAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ActionButtonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonModule, declarations: [ActionButtonComponent], imports: [i1.AdaptButtonModule, i3.CommonModule, i2$1.TranslateModule, i1.AdaptIconModule], exports: [ActionButtonComponent] });
    ActionButtonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonModule, providers: [RxActionButtonService, ActionButtonAdapterService], imports: [[i1.AdaptButtonModule, i3.CommonModule, i2$1.TranslateModule, i1.AdaptIconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.AdaptButtonModule, i3.CommonModule, i2$1.TranslateModule, i1.AdaptIconModule],
                        exports: [ActionButtonComponent],
                        declarations: [ActionButtonComponent],
                        entryComponents: [ActionButtonComponent],
                        providers: [RxActionButtonService, ActionButtonAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: ActionButtonAdapterService }]; } });

    var RxButtonBarAlignment;
    (function (RxButtonBarAlignment) {
        RxButtonBarAlignment["Left"] = "left";
        RxButtonBarAlignment["Right"] = "right";
        RxButtonBarAlignment["Center"] = "center";
    })(RxButtonBarAlignment || (RxButtonBarAlignment = {}));
    var RX_BUTTON_BAR = {
        alignmentOptions: {
            left: {
                id: RxButtonBarAlignment.Left,
                name: 'Left',
                cls: 'align-left'
            },
            center: {
                id: RxButtonBarAlignment.Center,
                name: 'Center',
                cls: 'align-center'
            },
            right: {
                id: RxButtonBarAlignment.Right,
                name: 'Right',
                cls: 'align-right'
            }
        }
    };

    var RxButtonBarService = /** @class */ (function () {
        function RxButtonBarService() {
        }
        RxButtonBarService.prototype.getAlignClass = function (alignment) {
            return lodash.get(RX_BUTTON_BAR.alignmentOptions, [alignment, 'cls'], '');
        };
        return RxButtonBarService;
    }());
    RxButtonBarService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxButtonBarService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxButtonBarService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxButtonBarService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxButtonBarService, decorators: [{
                type: i0.Injectable
            }] });

    var ButtonBarDropdownItemComponent = /** @class */ (function (_super) {
        __extends(ButtonBarDropdownItemComponent, _super);
        function ButtonBarDropdownItemComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ButtonBarDropdownItemComponent;
    }(ActionButtonComponent));
    ButtonBarDropdownItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDropdownItemComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ButtonBarDropdownItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ButtonBarDropdownItemComponent, selector: "rx-button-bar-dropdown-item-component", inputs: { guid: "guid", config: "config", runtimeViewModelApi: "runtimeViewModelApi" }, usesInheritance: true, ngImport: i0__namespace, template: "<button type=\"button\" class=\"dropdown-item\" *ngIf=\"!isHidden\" [disabled]=\"isDisabled\" (click)=\"api.click($event)\">\n  {{ state.label }}\n</button>\n", directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDropdownItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-button-bar-dropdown-item-component',
                        templateUrl: './button-bar-dropdown-item.component.html'
                    }]
            }], propDecorators: { guid: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], runtimeViewModelApi: [{
                    type: i0.Input
                }] } });

    var ButtonBarComponent = /** @class */ (function (_super) {
        __extends(ButtonBarComponent, _super);
        function ButtonBarComponent(elementRef, runtimeCanvasItemComponent, changeDetector, ngZone, rxButtonBarService, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.runtimeCanvasItemComponent = runtimeCanvasItemComponent;
            _this.changeDetector = changeDetector;
            _this.ngZone = ngZone;
            _this.rxButtonBarService = rxButtonBarService;
            _this.renderer = renderer;
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            _this.childLayouts = null;
            _this.isDropdownVisible = false;
            _this.resize$ = new rxjs.Subject();
            _this.onResizeThrottled = lodash.throttle(_this.onResize.bind(_this), 100);
            return _this;
        }
        ButtonBarComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                _this.isHidden = Boolean(config.hidden);
                _this.alignClass = _this.rxButtonBarService.getAlignClass(config.alignment);
            });
            this.childLayouts = lodash.get(this.runtimeCanvasItemComponent.getChildren(i1$1.RX_VIEW_DEFINITION.defaultOutletName), '[0].children');
        };
        ButtonBarComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var el = this.renderer.selectRootElement(this.elementRef.nativeElement, true);
            if (!lodash.isEmpty(this.childLayouts)) {
                var buttonConfigs = this.childLayouts.map(function (layout) { return layout.config; });
                this.ngZone.runOutsideAngular(function () {
                    _this.resizeSensor = new cssElementQueries.ResizeSensor(el, function (size) {
                        _this.ngZone.run(function () { return _this.resize$.next(size); });
                    });
                });
                rxjs.merge.apply(void 0, __spreadArray(__spreadArray([], __read(buttonConfigs)), [this.resize$])).pipe(operators.map(function (size) { return size.width || el.offsetWidth; }), operators.takeUntil(this.destroyed$))
                    .subscribe(function (width) { return _this.onResizeThrottled(width); });
            }
            this.onResize(el.offsetWidth);
            this.changeDetector.detectChanges();
        };
        ButtonBarComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            if (this.resizeSensor) {
                this.resizeSensor.detach();
            }
        };
        ButtonBarComponent.prototype.onResize = function (containerWidth) {
            var _this = this;
            var totalButtonsWidth = 0;
            var toggleButtonOffsetWidth = this.dropdownToggleButton
                ? this.renderer.selectRootElement(this.dropdownToggleButton.nativeElement, true).offsetWidth
                : 0;
            this.buttonItemsQueryList.forEach(function (item, index) {
                totalButtonsWidth += _this.renderer.selectRootElement(item.nativeElement, true).offsetWidth;
                var containerFitsButton = Math.floor(containerWidth) >= Math.ceil(totalButtonsWidth) + toggleButtonOffsetWidth;
                _this.childLayouts[index].showInDropdown = !containerFitsButton;
                if (!lodash.isUndefined(_this.childLayouts[index - 1]) &&
                    _this.childLayouts.filter(function (button) { return button.showInDropdown; }).length < 2) {
                    _this.childLayouts[index - 1].showInDropdown = !containerFitsButton;
                }
            });
            this.isDropdownVisible = lodash.isEmpty(this.childLayouts) ? false : lodash.last(this.childLayouts).showInDropdown;
        };
        ButtonBarComponent.prototype.trackByFn = function (index, item) {
            return item.guid;
        };
        ButtonBarComponent.prototype.setProperty = function (propertyPath, propertyValue) {
            if (propertyPath === 'hidden') {
                this.isHidden = propertyValue;
                this.notifyPropertyChanged(propertyPath, this.isHidden);
            }
            else {
                return rxjs.throwError("Button Bar: property " + propertyPath + " is not settable.");
            }
        };
        return ButtonBarComponent;
    }(i1$5.BaseViewComponent));
    ButtonBarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i1__namespace$2.RuntimeViewCanvasItemComponent }, { token: i0__namespace.ChangeDetectorRef }, { token: i0__namespace.NgZone }, { token: RxButtonBarService }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ButtonBarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ButtonBarComponent, selector: "rx-button-bar", viewQueries: [{ propertyName: "dropdownToggleButton", first: true, predicate: ["dropdownToggle"], descendants: true, read: i0.ElementRef }, { propertyName: "buttonItemsQueryList", predicate: ["buttonItems"], descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"button-container\" [ngClass]=\"alignClass\" *ngIf=\"childLayouts && !isHidden\">\n  <div\n    *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\"\n    [ngClass]=\"{ 'nav-item--hidden': buttonLayout.showInDropdown }\"\n  >\n    <rx-runtime-view-canvas-item #buttonItems [layout]=\"buttonLayout\"></rx-runtime-view-canvas-item>\n  </div>\n\n  <div\n    *ngIf=\"isDropdownVisible\"\n    class=\"dropdown\"\n    adaptDropdown\n    [placement]=\"['bottom-right', 'bottom-left', 'bottom', 'top-right', 'top-left', 'top', 'auto']\"\n  >\n    <button\n      class=\"btn btn-secondary rx-toggle\"\n      [attr.id]=\"'rx-' + guid\"\n      type=\"button\"\n      adaptDropdownToggle\n      #dropdownToggle\n    ></button>\n    <div class=\"dropdown-menu\" [attr.aria-labelledby]=\"'rx-' + guid\" adaptDropdownMenu>\n      <ng-container *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\">\n        <rx-button-bar-dropdown-item-component\n          *ngIf=\"buttonLayout.showInDropdown\"\n          [config]=\"buttonLayout.config\"\n          [runtimeViewModelApi]=\"buttonLayout.runtimeViewModelApi\"\n          [guid]=\"buttonLayout.guid\"\n        ></rx-button-bar-dropdown-item-component>\n      </ng-container>\n    </div>\n  </div>\n</div>\n", styles: [":host{display:block}.button-container{display:flex}.button-container.align-center{justify-content:center}.button-container.align-right{justify-content:flex-end}.button-container.align-left{justify-content:flex-start}.button-container rx-runtime-view-canvas-item{display:inline-block}.button-container rx-runtime-view-canvas-item:not(:has(> [hidden])){padding-right:5px}.rx-toggle{padding-left:1px;height:100%}\n"], components: [{ type: i1__namespace$2.RuntimeViewCanvasItemComponent, selector: "rx-runtime-view-canvas-item", inputs: ["layout"] }, { type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: ButtonBarDropdownItemComponent, selector: "rx-button-bar-dropdown-item-component", inputs: ["guid", "config", "runtimeViewModelApi"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-button-bar',
                        templateUrl: './button-bar.component.html',
                        styleUrls: ['./button-bar.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i1__namespace$2.RuntimeViewCanvasItemComponent }, { type: i0__namespace.ChangeDetectorRef }, { type: i0__namespace.NgZone }, { type: RxButtonBarService }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { buttonItemsQueryList: [{
                    type: i0.ViewChildren,
                    args: ['buttonItems', { read: i0.ElementRef }]
                }], dropdownToggleButton: [{
                    type: i0.ViewChild,
                    args: ['dropdownToggle', { read: i0.ElementRef }]
                }] } });

    var ButtonBarModule = /** @class */ (function () {
        function ButtonBarModule() {
        }
        return ButtonBarModule;
    }());
    ButtonBarModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ButtonBarModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarModule, declarations: [ButtonBarComponent, ButtonBarDropdownItemComponent], imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1__namespace.AdaptDropdownModule], exports: [ButtonBarComponent] });
    ButtonBarModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarModule, providers: [RxButtonBarService], imports: [[i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1.AdaptDropdownModule.forRoot()]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ButtonBarComponent, ButtonBarDropdownItemComponent],
                        imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1.AdaptDropdownModule.forRoot()],
                        exports: [ButtonBarComponent],
                        entryComponents: [ButtonBarComponent],
                        providers: [RxButtonBarService]
                    }]
            }] });

    var ButtonBarDesignComponent = /** @class */ (function () {
        function ButtonBarDesignComponent(rxButtonBarService) {
            this.rxButtonBarService = rxButtonBarService;
            this.alignment = '';
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        ButtonBarDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.model.componentProperties$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (componentProperties) {
                _this.alignment = _this.rxButtonBarService.getAlignClass(componentProperties.alignment);
            });
        };
        ButtonBarDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return ButtonBarDesignComponent;
    }());
    ButtonBarDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignComponent, deps: [{ token: RxButtonBarService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ButtonBarDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ButtonBarDesignComponent, selector: "rx-button-bar-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<rx-canvas-outlet\n  class=\"button-bar-design-container border\"\n  [class.border-transparent]=\"model.hasChildren$ | async\"\n  [ngClass]=\"alignment\"\n  [dropPredicate]=\"model.dropPredicate\"\n  dropListOrientation=\"horizontal\"\n></rx-canvas-outlet>\n", styles: [":host::ng-deep .button-bar-design-container{display:block}:host::ng-deep .button-bar-design-container.align-center .cdk-drop-list{justify-content:center}:host::ng-deep .button-bar-design-container.align-right .cdk-drop-list{justify-content:flex-end}:host::ng-deep .button-bar-design-container.align-left .cdk-drop-list{justify-content:flex-start}:host::ng-deep .button-bar-design-container rx-canvas-item-container{min-width:100%}:host::ng-deep .button-bar-design-container rx-canvas-item-container .cdk-drop-list{min-height:50px;display:flex;flex-flow:row wrap}.border-transparent{border-color:transparent!important}\n"], components: [{ type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }], directives: [{ type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-button-bar-design',
                        templateUrl: './button-bar-design.component.html',
                        styleUrls: ['./button-bar-design.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxButtonBarService }]; }, propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var ButtonBarDesignModel = /** @class */ (function (_super) {
        __extends(ButtonBarDesignModel, _super);
        function ButtonBarDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.hasChildren$ = _this.sandbox.getChildComponentGuids().pipe(operators.map(function (guids) { return !lodash.isEmpty(guids); }));
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            return _this;
        }
        ButtonBarDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ alignment: RxButtonBarAlignment.Left, name: null }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        ButtonBarDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
            });
            this.sandbox.getComponentPropertyValue('name').subscribe(function (name) {
                var componentName = name ? _this.sandbox.descriptor.name + " (" + name + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
            this.componentProperties$.subscribe(function (props) {
                _this.validate(props);
            });
        };
        ButtonBarDesignModel.prototype.dropPredicate = function (data) {
            return data.draggedViewComponentDescriptor.type === i1$1.RxViewComponentType.ActionButton;
        };
        ButtonBarDesignModel.prototype.validate = function (model) {
            this.sandbox.setValidationIssues(i1$3.validateStandardProps(model));
        };
        ButtonBarDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Button bar.')
                                }
                            },
                            {
                                name: 'alignment',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Alignment',
                                    options: lodash.values(RX_BUTTON_BAR.alignmentOptions),
                                    sortAlphabetically: false
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        return ButtonBarDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ButtonBarDesignModule = /** @class */ (function () {
        function ButtonBarDesignModule() {
        }
        return ButtonBarDesignModule;
    }());
    ButtonBarDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ButtonBarDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignModule, declarations: [ButtonBarDesignComponent], imports: [i3.CommonModule, i1$3.ViewDesignerCanvasModule] });
    ButtonBarDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignModule, providers: [RxButtonBarService], imports: [[i3.CommonModule, i1$3.ViewDesignerCanvasModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1$3.ViewDesignerCanvasModule],
                        declarations: [ButtonBarDesignComponent],
                        entryComponents: [ButtonBarDesignComponent],
                        providers: [RxButtonBarService]
                    }]
            }] });

    var ContainerComponent = /** @class */ (function (_super) {
        __extends(ContainerComponent, _super);
        function ContainerComponent(elementRef, renderer) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.state = {};
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            return _this;
        }
        ContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                _this.isHidden = Boolean(config.hidden);
                _this.state = Object.assign({}, config);
            });
        };
        ContainerComponent.prototype.setProperty = function (propertyPath, propertyValue) {
            if (propertyPath === 'hidden') {
                this.state.hidden = propertyValue;
                this.notifyPropertyChanged(propertyPath, propertyValue);
            }
            else {
                var componentName = this.renderer.selectRootElement(this.elementRef.nativeElement, true).tagName.toLowerCase();
                return rxjs.throwError(componentName + ": property " + propertyPath + " is not settable.");
            }
        };
        return ContainerComponent;
    }(i1$5.BaseViewComponent));
    ContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ContainerComponent, selector: "rx-container", usesInheritance: true, ngImport: i0__namespace, template: "<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n", styles: [":host{display:block}:host.rx-auto-fill::ng-deep>rx-runtime-view-canvas-outlet>rx-runtime-view-canvas-item-container{display:flex;flex-direction:column;height:100%}\n"], components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-container',
                        templateUrl: './container.component.html',
                        styleUrls: ['./container.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; } });

    var ContainerComponentDefinitionAdapterService = /** @class */ (function () {
        function ContainerComponentDefinitionAdapterService(viewDefinitionParserService, rxJsonParserService) {
            this.viewDefinitionParserService = viewDefinitionParserService;
            this.rxJsonParserService = rxJsonParserService;
            this.componentDefinitionType = i1$1.RxViewComponentType.Container;
        }
        // converting layout of old view definition into new format
        ContainerComponentDefinitionAdapterService.prototype.adaptDefinition = function (containerComponentDefinition) {
            var _this = this;
            this.viewDefinitionParserService
                .getComponents(containerComponentDefinition)
                .filter(function (componentPair) { return componentPair.componentDefinition.type === _this.componentDefinitionType; })
                .map(function (componentPair) { return componentPair.componentDefinition; })
                .forEach(function (componentDefinition) {
                if (componentDefinition.layout) {
                    var layout = _this.rxJsonParserService.tryParseJson(componentDefinition.layout);
                    if (layout && layout.componentDefinitionId) {
                        var columns = layout.columns.map(function (column) {
                            var rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';
                            var columnSpan = column.span || 12;
                            var columnClass = rowWrap === 'xs' ? "col-" + columnSpan : "col-" + rowWrap + "-" + columnSpan;
                            var marginBottomClass = rowWrap !== 'xs' ? "rx-mb-" + rowWrap : '';
                            return {
                                cssClass: columnClass + " " + marginBottomClass,
                                children: column.children.map(function (child) { return child.componentDefinitionId; })
                            };
                        });
                        layout = {
                            outlets: [
                                {
                                    name: 'DEFAULT',
                                    columns: columns
                                }
                            ]
                        };
                        componentDefinition.layout = JSON.stringify(layout);
                    }
                    else if (layout && layout.outlets) {
                        layout.outlets.forEach(function (outlet) {
                            outlet.columns
                                .filter(function (column) { return !column.cssClass; })
                                .forEach(function (column) {
                                var rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';
                                var columnSpan = column.span || 12;
                                var columnClass = rowWrap === 'xs' ? "col-" + columnSpan : "col-" + rowWrap + "-" + columnSpan;
                                var marginBottomClass = rowWrap !== 'xs' ? "rx-mb-" + rowWrap : '';
                                column.cssClass = columnClass + " " + marginBottomClass;
                            });
                        });
                        componentDefinition.layout = JSON.stringify(layout);
                    }
                }
            });
        };
        return ContainerComponentDefinitionAdapterService;
    }());
    ContainerComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerComponentDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ContainerComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerComponentDefinitionAdapterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }, { type: i2__namespace$1.RxJsonParserService }]; } });

    var ContainerModule = /** @class */ (function () {
        function ContainerModule(containerComponentDefinitionAdapterService, rxDefinitionAdapterRegistryService) {
            this.containerComponentDefinitionAdapterService = containerComponentDefinitionAdapterService;
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.Container, this.containerComponentDefinitionAdapterService);
        }
        return ContainerModule;
    }());
    ContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerModule, deps: [{ token: ContainerComponentDefinitionAdapterService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerModule, declarations: [ContainerComponent], imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule], exports: [ContainerComponent] });
    ContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerModule, imports: [[i3.CommonModule, i1$5.RuntimeViewCanvasModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContainerComponent],
                        exports: [ContainerComponent],
                        entryComponents: [ContainerComponent],
                        imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule]
                    }]
            }], ctorParameters: function () { return [{ type: ContainerComponentDefinitionAdapterService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }]; } });

    var ContainerCanvasItemComponent = /** @class */ (function (_super) {
        __extends(ContainerCanvasItemComponent, _super);
        function ContainerCanvasItemComponent(canvasItemApi, canvasOutletHelperService, elementRef, renderer) {
            var _this = _super.call(this, canvasItemApi, canvasOutletHelperService) || this;
            _this.canvasItemApi = canvasItemApi;
            _this.canvasOutletHelperService = canvasOutletHelperService;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.maxNumberOfColumns = 12;
            _this.defaultGutterStep = 50;
            _this.percentSpanSize = 100 / _this.maxNumberOfColumns;
            _this.gutterStep = _this.defaultGutterStep;
            _this.columnResize = new i0.EventEmitter();
            return _this;
        }
        ContainerCanvasItemComponent.prototype.onWindowResize = function () {
            this.setGutterStep();
        };
        ContainerCanvasItemComponent.prototype.ngAfterViewInit = function () {
            var spans = this.outlet.columns.map(function (column) { return column.span; });
            this.setSpanSizes(spans);
            this.setGutterStep();
        };
        ContainerCanvasItemComponent.prototype.onDragEnd = function (event) {
            var spans = this.getPercentToSpanSizes(event.sizes);
            this.columnResize.emit(spans);
            this.setSpanSizes(spans);
        };
        ContainerCanvasItemComponent.prototype.getPercentToSpanSizes = function (percentSizes) {
            var _this = this;
            return percentSizes.map(function (size) { return Math.round((size * _this.maxNumberOfColumns) / 100); });
        };
        ContainerCanvasItemComponent.prototype.setSpanSizes = function (spans) {
            this.splitComponent.setVisibleAreaSizes(this.getSpanToPercentSizes(spans));
        };
        ContainerCanvasItemComponent.prototype.getSpanToPercentSizes = function (spans) {
            var _this = this;
            return spans.map(function (span) { return span * _this.percentSpanSize; });
        };
        ContainerCanvasItemComponent.prototype.setGutterStep = function () {
            var element = this.renderer.selectRootElement(this.elementRef.nativeElement, true);
            this.gutterStep = Math.round(element.clientWidth / this.maxNumberOfColumns) || this.defaultGutterStep;
        };
        return ContainerCanvasItemComponent;
    }(i1$3.CanvasItemContainerComponent));
    ContainerCanvasItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerCanvasItemComponent, deps: [{ token: i1$3.ViewDesignerCanvasItemApiToken }, { token: i1__namespace$3.CanvasOutletHelperService }, { token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ContainerCanvasItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ContainerCanvasItemComponent, selector: "rx-container-canvas-item", outputs: { columnResize: "columnResize" }, host: { listeners: { "window:resize": "onWindowResize()" } }, viewQueries: [{ propertyName: "splitComponent", first: true, predicate: i2$3.SplitComponent, descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<as-split\n  unit=\"percent\"\n  [class.selected]=\"layout.isSelected$ | async\"\n  [class.readonly]=\"isReadOnly\"\n  [gutterStep]=\"gutterStep\"\n  gutterSize=\"1\"\n  (dragEnd)=\"onDragEnd($event)\"\n>\n  <as-split-area\n    *ngFor=\"\n      let column of outlet.columns;\n      trackBy: trackByColFn;\n      let colIndex = index;\n      let first = first;\n      let last = last\n    \"\n    minSize=\"8\"\n  >\n    <rx-canvas-item-column\n      [isReadOnly]=\"isReadOnly\"\n      [colIndex]=\"colIndex\"\n      [column]=\"column\"\n      [layout]=\"layout\"\n      (dropListDropped)=\"onDropListDropped($event)\"\n    ></rx-canvas-item-column>\n  </as-split-area>\n</as-split>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block}as-split:not(.readonly).selected ::ng-deep>.as-split-gutter{visibility:visible}as-split ::ng-deep as-split-area{height:revert!important;min-height:200px}as-split ::ng-deep as-split-area>rx-canvas-item-column{height:100%}as-split ::ng-deep as-split-area>rx-canvas-item-column>.cdk-drop-list{height:100%;min-height:auto}as-split ::ng-deep .as-split-gutter{visibility:hidden;height:revert!important;position:relative;background-color:#d6d7d8!important}as-split ::ng-deep .as-split-gutter .as-split-gutter-icon{border:1px solid #d6d7d8;height:72px!important;width:11px!important;background:white!important;border-radius:2px;position:absolute}as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:hover:before,as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:hover:after{background-color:#d6d7d8}as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:before,as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:after{display:inline-block;content:\"\";position:absolute;top:50%;width:2px;height:64px;background-color:#f0f1f1;border-radius:2px;transform:translateY(-50%);transition:background-color .25s ease}as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:before{left:2px}as-split ::ng-deep .as-split-gutter .as-split-gutter-icon:after{left:5px}\n"], components: [{ type: i2__namespace$2.SplitComponent, selector: "as-split", inputs: ["direction", "unit", "gutterSize", "gutterStep", "restrictMove", "useTransition", "disabled", "dir", "gutterDblClickDuration"], outputs: ["dragStart", "dragEnd", "gutterClick", "gutterDblClick", "transitionEnd"], exportAs: ["asSplit"] }, { type: i1__namespace$3.CanvasItemColumnComponent, selector: "rx-canvas-item-column", inputs: ["isReadOnly", "colIndex", "column", "layout"], outputs: ["dropListDropped"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$2.SplitAreaDirective, selector: "as-split-area, [as-split-area]", inputs: ["order", "size", "minSize", "maxSize", "lockSize", "visible"], exportAs: ["asSplitArea"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerCanvasItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-container-canvas-item',
                        templateUrl: './container-canvas-item.component.html',
                        styleUrls: ['./container-canvas-item.component.scss']
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.CanvasItemApi, decorators: [{
                            type: i0.Inject,
                            args: [i1$3.ViewDesignerCanvasItemApiToken]
                        }] }, { type: i1__namespace$3.CanvasOutletHelperService }, { type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }];
        }, propDecorators: { splitComponent: [{
                    type: i0.ViewChild,
                    args: [i2$3.SplitComponent, { static: true }]
                }], columnResize: [{
                    type: i0.Output
                }], onWindowResize: [{
                    type: i0.HostListener,
                    args: ['window:resize']
                }] } });

    var ContainerDesignComponent = /** @class */ (function () {
        function ContainerDesignComponent() {
            this.containerCanvasItemComponent = ContainerCanvasItemComponent;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        ContainerDesignComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.canvasOutletComponent.containerComponentInstance.columnResize
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (columnSizes) {
                _this.model.setContainerLayout(columnSizes);
            });
        };
        ContainerDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return ContainerDesignComponent;
    }());
    ContainerDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ContainerDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ContainerDesignComponent, selector: "rx-container-design", inputs: { model: "model" }, viewQueries: [{ propertyName: "canvasOutletComponent", first: true, predicate: i1$3.CanvasOutletComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-canvas-outlet\n  class=\"border d-block\"\n  [class.has-children]=\"model.hasChildren$ | async\"\n  [containerComponent]=\"containerCanvasItemComponent\"\n></rx-canvas-outlet>\n", styles: [".has-children ::ng-deep>rx-container-canvas-item>as-split>as-split-area{min-height:auto}\n"], components: [{ type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-container-design',
                        templateUrl: './container-design.component.html',
                        styleUrls: ['./container-design.component.scss']
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }], canvasOutletComponent: [{
                    type: i0.ViewChild,
                    args: [i1$3.CanvasOutletComponent, { static: true }]
                }] } });

    var ContainerDesignModule = /** @class */ (function () {
        function ContainerDesignModule() {
        }
        return ContainerDesignModule;
    }());
    ContainerDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ContainerDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignModule, declarations: [ContainerDesignComponent, ContainerCanvasItemComponent], imports: [i3.CommonModule, i1$3.ViewDesignerCanvasModule, i2$3.AngularSplitModule, i8.DragDropModule] });
    ContainerDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignModule, providers: [RxActionButtonService], imports: [[i3.CommonModule, i1$3.ViewDesignerCanvasModule, i2$3.AngularSplitModule, i8.DragDropModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1$3.ViewDesignerCanvasModule, i2$3.AngularSplitModule, i8.DragDropModule],
                        declarations: [ContainerDesignComponent, ContainerCanvasItemComponent],
                        entryComponents: [ContainerDesignComponent, ContainerCanvasItemComponent],
                        providers: [RxActionButtonService]
                    }]
            }] });

    exports.ContainerRowWrap = void 0;
    (function (ContainerRowWrap) {
        ContainerRowWrap["Xs"] = "xs";
        ContainerRowWrap["Sm"] = "sm";
        ContainerRowWrap["Md"] = "md";
        ContainerRowWrap["Lg"] = "lg";
        ContainerRowWrap["Xl"] = "xl";
        ContainerRowWrap["Xxl"] = "xxl";
    })(exports.ContainerRowWrap || (exports.ContainerRowWrap = {}));

    var RecordEditorDesignComponent = /** @class */ (function () {
        function RecordEditorDesignComponent() {
        }
        RecordEditorDesignComponent.prototype.ngOnInit = function () {
            this.dropPredicateFn = this.model._dropPredicate.bind(this.model);
        };
        return RecordEditorDesignComponent;
    }());
    RecordEditorDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordEditorDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordEditorDesignComponent, selector: "rx-record-editor-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-empty-state\n  *ngIf=\"(model.hasChildren$ | async) === false\"\n  type=\"objects\"\n  label=\"Drop fields from the Palette here or select a Record definition and add fields in the Properties panel.\"\n></adapt-empty-state>\n\n<rx-canvas-outlet [dropPredicate]=\"dropPredicateFn\"></rx-canvas-outlet>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{border:1px solid #d6d7d8;display:block;position:relative;padding:1rem;min-height:200px}adapt-empty-state{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}rx-canvas-outlet ::ng-deep>rx-canvas-item-container>.row>.col>rx-canvas-item-column>.cdk-drop-list{min-height:calc(200px - 1rem * 2)}\n"], components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-editor-design',
                        templateUrl: './record-editor-design.component.html',
                        styleUrls: ['./record-editor-design.component.scss']
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var _a$2;
    var RECORD_EDITOR = {
        type: i1$1.RxViewComponentType.RecordEditor,
        fieldTypes: (_a$2 = {},
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.character] = i1$1.RxViewComponentType.Character,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.dateTime] = i1$1.RxViewComponentType.DateTime,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.selection] = i1$1.RxViewComponentType.Selection,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.timeOnly] = i1$1.RxViewComponentType.Time,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.dateOnly] = i1$1.RxViewComponentType.Date,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.boolean] = i1$1.RxViewComponentType.Boolean,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.attachment] = i1$1.RxViewComponentType.Attachment,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.integer] = i1$1.RxViewComponentType.Integer,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.real] = i1$1.RxViewComponentType.Floating,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.decimal] = i1$1.RxViewComponentType.Decimal,
            _a$2[i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedCharacter] = i1$1.RxViewComponentType.LocalizedCharacter,
            _a$2)
    };
    exports.RecordEditorMode = void 0;
    (function (RecordEditorMode) {
        RecordEditorMode["Create"] = "CREATE";
        RecordEditorMode["Edit"] = "EDIT";
        RecordEditorMode["BulkEdit"] = "BULK EDIT";
        RecordEditorMode["Temporary"] = "TEMPORARY";
    })(exports.RecordEditorMode || (exports.RecordEditorMode = {}));
    exports.RecordEditorState = void 0;
    (function (RecordEditorState) {
        RecordEditorState["Read"] = "READ";
        RecordEditorState["Edit"] = "EDIT";
    })(exports.RecordEditorState || (exports.RecordEditorState = {}));

    var FieldSelectorComponent = /** @class */ (function () {
        function FieldSelectorComponent(context, stringService) {
            this.context = context;
            this.stringService = stringService;
            this.selectedFieldIdsModel = {};
            this.availableFieldGroups = [];
            this.hideSystemFields = false;
            this.isApplyButtonDisabled = true;
            this.selectedFieldDefinitionIds = [];
            this.availableFieldDefinitions = [];
        }
        FieldSelectorComponent.prototype.ngOnInit = function () {
            var data = this.context.getData();
            this.availableFieldDefinitions = data.availableFields;
            this.selectedFieldDefinitionIds = data.selectedFieldIds;
            this.hideSystemFields = Boolean(data.hideSystemFields);
            this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions);
            this.selectedFieldIdsModel = this.idsToModel(this.selectedFieldDefinitionIds);
        };
        FieldSelectorComponent.prototype.closeModal = function () {
            this.context.close(this.modelToIds(this.selectedFieldIdsModel));
        };
        FieldSelectorComponent.prototype.search = function (searchQuery) {
            var _this = this;
            this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions)
                .map(function (fieldGroup) { return (Object.assign(Object.assign({}, fieldGroup), { fields: fieldGroup.fields.filter(function (field) { return _this.stringService.caseInsensitiveSearch(field.name, searchQuery); }) })); })
                .filter(function (fieldGroup) { return !lodash.isEmpty(fieldGroup.fields); });
        };
        FieldSelectorComponent.prototype.select = function (groupName) {
            var _this = this;
            if (groupName === 'all') {
                var ids = this.availableFieldDefinitions
                    .filter(function (recordField) {
                    return recordField.fieldOption !== i1$4.RecordFieldOption.System || !_this.hideSystemFields;
                })
                    .map(function (recordField) { return recordField.id; });
                this.selectedFieldIdsModel = this.idsToModel(ids);
            }
            else {
                var ids = this.availableFieldGroups
                    .find(function (group) { return group.groupLabel === groupName; })
                    .fields.map(function (recordField) { return recordField.id; });
                this.selectedFieldIdsModel = Object.assign(Object.assign({}, this.selectedFieldIdsModel), this.idsToModel(ids));
            }
            this.updateApplyButtonDisabledStatus();
        };
        FieldSelectorComponent.prototype.updateApplyButtonDisabledStatus = function () {
            this.isApplyButtonDisabled = !lodash.xor(this.selectedFieldDefinitionIds, this.modelToIds(this.selectedFieldIdsModel))
                .length;
        };
        FieldSelectorComponent.prototype.groupFieldsByFieldOption = function (availableFields) {
            var _this = this;
            var groups = lodash.groupBy(availableFields, 'fieldOption');
            var groupTypes = [i1$4.RecordFieldOption.Required, i1$4.RecordFieldOption.Optional];
            if (!this.hideSystemFields) {
                groupTypes.push(i1$4.RecordFieldOption.System);
            }
            return groupTypes
                .filter(function (groupType) { return groups[groupType]; })
                .map(function (groupType) { return ({
                groupLabel: _this.stringService.prettify(groupType) + " fields",
                selectAllFieldsInGroupButtonLabel: "Select all " + groupType.toLowerCase() + " fields",
                fields: groups[groupType].map(function (_a) {
                    var id = _a.id, name = _a.name;
                    return ({ id: id, name: name });
                }).sort(function (a, b) { return a.name.localeCompare(b.name); })
            }); });
        };
        FieldSelectorComponent.prototype.trackByLabel = function (index, item) {
            return item.groupLabel;
        };
        FieldSelectorComponent.prototype.trackById = function (index, item) {
            return item.id;
        };
        FieldSelectorComponent.prototype.idsToModel = function (ids, selected) {
            if (selected === void 0) { selected = true; }
            return ids.filter(Boolean).reduce(function (result, id) {
                result[id] = selected;
                return result;
            }, {});
        };
        FieldSelectorComponent.prototype.modelToIds = function (model) {
            return lodash.reduce(model, function (result, value, id) {
                if (value) {
                    result.push(id);
                }
                return result;
            }, []);
        };
        return FieldSelectorComponent;
    }());
    FieldSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectorComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i2__namespace$1.RxStringService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FieldSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldSelectorComponent, selector: "ng-component", ngImport: i0__namespace, template: "<div class=\"modal-header pr-0\">\n  <h5 class=\"modal-title pl-0 mr-auto\">Quick edit fields</h5>\n\n  <button\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"apply-button\"\n    (click)=\"closeModal()\"\n    [disabled]=\"isApplyButtonDisabled\"\n    class=\"mr-5\"\n  >\n    Apply\n  </button>\n\n  <button\n    class=\"close my-1\"\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"tertiary\"\n    (click)=\"context.dismiss(0)\"\n    rx-id=\"x-button\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"body-controls\">\n    <adapt-button btn-type=\"tertiary\" rx-id=\"select-all-button\" class=\"pl-0\" (click)=\"select('all')\">\n      Select all\n    </adapt-button>\n\n    <adapt-rx-textfield\n      [placeholder]=\"'Search fields'\"\n      [ngModel]=\"searchQuery\"\n      [attr.rx-id]=\"'search-field'\"\n      (ngModelChange)=\"search($event)\"\n      class=\"form-group\"\n    >\n    </adapt-rx-textfield>\n  </div>\n\n  <div class=\"rx-record-definition-fields\">\n    <div\n      class=\"rx-record-definition-field-group\"\n      *ngFor=\"let availableFieldsGroup of availableFieldGroups; trackBy: trackByLabel\"\n    >\n      <div class=\"font-weight-bold\">\n        {{ availableFieldsGroup.groupLabel }}\n      </div>\n\n      <adapt-button btn-type=\"tertiary\" class=\"py-0 pl-0\" (click)=\"select(availableFieldsGroup.groupLabel)\">\n        {{ availableFieldsGroup.selectAllFieldsInGroupButtonLabel }}\n      </adapt-button>\n\n      <div class=\"checkbox\" *ngFor=\"let availableField of availableFieldsGroup.fields; trackBy: trackById\">\n        <label>\n          <input\n            type=\"checkbox\"\n            [(ngModel)]=\"selectedFieldIdsModel[availableField.id]\"\n            (ngModelChange)=\"updateApplyButtonDisabledStatus()\"\n          />\n\n          <span class=\"checkbox__item\">{{ availableField.name }}</span>\n        </label>\n      </div>\n    </div>\n\n    <div *ngIf=\"availableFieldGroups.length === 0\">No Fields Found</div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.modal-title{margin:auto 0}span[rx-id=x-button]{cursor:pointer;margin:auto 0}span[rx-id=x-button]:hover{color:#959899}.body-controls{display:flex}.body-controls adapt-rx-textfield{flex:1}.rx-record-definition-fields{padding:10px;border:1px solid #d6d7d8;max-height:300px;overflow:auto}.rx-record-definition-field-group{margin-bottom:20px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './field-selector.component.html',
                        styleUrls: ['./field-selector.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i2__namespace$1.RxStringService }]; } });

    var FieldsInspectorWidgetComponent = /** @class */ (function (_super) {
        __extends(FieldsInspectorWidgetComponent, _super);
        function FieldsInspectorWidgetComponent(injector, adaptModalService, renderer) {
            var _this = _super.call(this, injector) || this;
            _this.adaptModalService = adaptModalService;
            _this.renderer = renderer;
            _this.encapsulateClass = true;
            return _this;
        }
        FieldsInspectorWidgetComponent.prototype.focus = function () {
            this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();
        };
        FieldsInspectorWidgetComponent.prototype.openModal = function () {
            var _this = this;
            rxjs.combineLatest([
                this.designerItemModel.childFieldIds$,
                this.designerItemModel.recordFieldDefinitionItems$,
                this.designerItemModel.isExtensionView$,
                this.designerItemModel.associationDefinitionName$
            ])
                .pipe(operators.take(1), operators.concatMap(function (_a) {
                var _b = __read(_a, 4), selectedFieldIds = _b[0], availableFields = _b[1], isExtensionView = _b[2], associationDefinitionName = _b[3];
                return _this.adaptModalService.open({
                    content: FieldSelectorComponent,
                    data: {
                        selectedFieldIds: selectedFieldIds,
                        availableFields: isExtensionView && associationDefinitionName
                            ? availableFields.filter(function (field) { return field.resourceType !== i1$4.RX_RECORD_DEFINITION.resourceTypes.attachment; })
                            : availableFields,
                        hideSystemFields: _this.options.hideSystemFields
                    },
                    size: 'sm',
                    hideBackdrop: false,
                    customClass: 'rx-record-editor-field-selector-modal'
                });
            }))
                .subscribe(function (selectedFieldIds) {
                _this.designerItemModel.updateSelectedFieldComponents(selectedFieldIds);
            });
        };
        FieldsInspectorWidgetComponent.prototype.removeField = function (guid) {
            this.designerItemModel.removeComponent([guid]);
        };
        FieldsInspectorWidgetComponent.prototype.trackByGuid = function (index, item) {
            return item.guid;
        };
        return FieldsInspectorWidgetComponent;
    }(i2.InspectorWidgetBase));
    FieldsInspectorWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace.AdaptModalService }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FieldsInspectorWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldsInspectorWidgetComponent, selector: "rx-fields-inspector-widget", host: { properties: { "class.rx-record-definition-fields": "this.encapsulateClass" } }, viewQueries: [{ propertyName: "openModalButton", first: true, predicate: ["openModalButton"], descendants: true, read: i0.ElementRef, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-button\n  btn-type=\"tertiary\"\n  #openModalButton\n  rx-id=\"open-modal-button\"\n  class=\"px-0 py-0\"\n  (click)=\"openModal()\"\n  [hidden]=\"options.isDisabled\"\n>\n  <span class=\"d-icon-plus_circle\"></span>\n  Quick edit fields\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"(designerItemModel.selectedFieldComponents$ | async).length === 0\" class=\"text-tertiary\"\n    >No fields added.</span\n  >\n</div>\n\n<div class=\"mt-2\">\n  <div\n    class=\"rx-field-item\"\n    *ngFor=\"let field of designerItemModel.selectedFieldComponents$ | async; trackBy: trackByGuid\"\n  >\n    <div>\n      <div class=\"rx-field-name\">{{ field.label }}</div>\n\n      <div class=\"rx-field-type\">\n        <small>{{ field.componentName }}</small>\n      </div>\n    </div>\n\n    <div class=\"rx-action-button\">\n      <span\n        *ngIf=\"!options.isDisabled\"\n        (click)=\"removeField(field.guid)\"\n        class=\"d-icon-cross btn-link\"\n        rx-id=\"delete-button\"\n      >\n      </span>\n    </div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-record-definition-fields .rx-field-item{margin-bottom:5px;border:1px solid #d6d7d8;border-radius:2px;padding:5px 10px;font-size:12px;display:flex;justify-content:space-between;word-break:break-all}.rx-record-definition-fields .rx-field-name{font-weight:var(--font-weight-bold)}.rx-record-definition-fields .rx-field-type{color:#959899}.rx-record-definition-fields .d-icon-cross{cursor:pointer}.rx-record-definition-fields .d-icon-cross:not(:hover){color:#313538}.rx-record-editor-field-selector-modal .modal{justify-content:flex-end}.rx-record-editor-field-selector-modal .modal-scroll-container{padding:15px;min-height:0}.rx-record-editor-field-selector-modal .modal-dialog{margin:auto 0 0 auto;min-height:0;width:350px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-fields-inspector-widget',
                        templateUrl: './fields-inspector-widget.component.html',
                        styleUrls: ['./fields-inspector-widget.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace.AdaptModalService }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { encapsulateClass: [{
                    type: i0.HostBinding,
                    args: ['class.rx-record-definition-fields']
                }], openModalButton: [{
                    type: i0.ViewChild,
                    args: ['openModalButton', { read: i0.ElementRef, static: true }]
                }] } });

    var RxRecordEditorDesignHelpersService = /** @class */ (function () {
        function RxRecordEditorDesignHelpersService(rxRecordDefinitionCacheService, rxModalService, rxFieldDefinitionService, rxViewDefinitionCacheService, rxAssociationDefinitionDataPageService, rxDefinitionNameService, rxViewComponentRegistryService, rxViewDefinitionParserService) {
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxModalService = rxModalService;
            this.rxFieldDefinitionService = rxFieldDefinitionService;
            this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;
            this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.rxViewDefinitionParserService = rxViewDefinitionParserService;
        }
        RxRecordEditorDesignHelpersService.prototype.getRecordFieldDefinitionItems = function (recordDefinition) {
            var _this = this;
            return recordDefinition.fieldDefinitions.map(function (fieldDefinition) { return ({
                id: String(fieldDefinition.id),
                name: fieldDefinition.name,
                resourceType: fieldDefinition.resourceType,
                fieldOption: fieldDefinition.fieldOption,
                viewComponentType: _this.getViewComponentType(fieldDefinition)
            }); });
        };
        RxRecordEditorDesignHelpersService.prototype.getViewComponentType = function (fieldDefinition) {
            var viewComponentType = RECORD_EDITOR.fieldTypes[fieldDefinition.resourceType];
            if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.character) {
                viewComponentType =
                    fieldDefinition.namedListDefinition || lodash.inRange(fieldDefinition.maxLength, 1, 255)
                        ? i1$1.RxViewComponentType.Character
                        : i1$1.RxViewComponentType.Textarea;
            }
            if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.real) {
                viewComponentType = i1$1.RxViewComponentType.Decimal;
            }
            return viewComponentType;
        };
        RxRecordEditorDesignHelpersService.prototype.getComponentProperties = function (properties) {
            var requiredPropertyNames = ['recordDefinitionName', 'mode', 'allowEdit'];
            return lodash.flow(
            // Remove design properties.
            function (props) { return lodash.omit(props, 'showReadOnlyState'); }, 
            // Remove optional properties with empty values.
            function (props) { return lodash.omitBy(props, function (propertyValue, propertyName) { return !requiredPropertyNames.includes(propertyName) && (lodash.isNil(propertyValue) || propertyValue === ''); }); })(properties);
        };
        RxRecordEditorDesignHelpersService.prototype.getRecordDefinition = function (recordDefinitionName) {
            if (recordDefinitionName) {
                return this.rxRecordDefinitionCacheService
                    .getRecordDefinition(recordDefinitionName)
                    .pipe(operators.catchError(function (error) { return rxjs.EMPTY; }));
            }
            else {
                return rxjs.of(null);
            }
        };
        RxRecordEditorDesignHelpersService.prototype.validate = function (sandbox, properties, recordDefinition, childFieldIds, isAssociationRequired, isExtensionView) {
            if (isAssociationRequired === void 0) { isAssociationRequired = false; }
            if (isExtensionView === void 0) { isExtensionView = false; }
            var validationIssues = [];
            if (!properties.recordDefinitionName) {
                validationIssues.push(sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName'));
            }
            if (isAssociationRequired && properties.recordDefinitionName && !properties.associationDefinitionName) {
                validationIssues.push(sandbox.createError('Association to use cannot be blank.', 'associationDefinitionName'));
            }
            if (!isExtensionView && properties.mode === exports.RecordEditorMode.Edit && !properties.recordInstanceId) {
                validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordInstanceId'));
            }
            if (recordDefinition && properties.recordDefinitionName && properties.mode === exports.RecordEditorMode.Create) {
                // Add warning for Join Record Definition case
                if (recordDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) {
                    validationIssues.push(sandbox.createWarning("You have configured a record editor to create join record instances.\n                        Please ensure that one or more processes or rules have been defined to perform the creation\n                        of the join record instance.", undefined, true));
                }
                // System fields in 'CREATE' mode cannot be chosen
                var systemFieldNames = childFieldIds
                    .map(function (selectedFieldId) { return recordDefinition.fieldDefinitions.find(function (fieldDefinition) { return fieldDefinition.id === Number(selectedFieldId); }); })
                    .filter(this.rxFieldDefinitionService.isSystemField)
                    .map(function (fieldDefinition) { return fieldDefinition.name; });
                if (systemFieldNames.length) {
                    validationIssues.push(sandbox.createError("System fields (" + systemFieldNames.join(', ') + ") cannot be present when Record editor is in Create mode."));
                }
                // Required fields without default value must be included when in 'CREATE' mode.
                // When in extension view, this validation is only needed when the Record Editor
                // is bound to an associated record, i.e. not the same record as the target Record Editor,
                // which should already contain all such fields.
                if (!isExtensionView || properties.associationDefinitionName) {
                    var requiredFieldsWithoutDefaultValues = recordDefinition.fieldDefinitions.filter(function (fieldDefinition) {
                        var isLocalizedCharacterField = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedCharacter;
                        var hasDefaultValue = fieldDefinition.defaultValue ||
                            lodash.isFinite(fieldDefinition.defaultValue) ||
                            (isLocalizedCharacterField && !lodash.isEmpty(fieldDefinition.defaultValueByLocale));
                        return fieldDefinition.fieldOption === i1$4.RX_RECORD_DEFINITION.fieldOptions.required && !hasDefaultValue;
                    });
                    var requiredFieldNames = requiredFieldsWithoutDefaultValues
                        .filter(function (fieldDefinition) { return !childFieldIds.includes(String(fieldDefinition.id)); })
                        .map(function (fieldDefinition) { return fieldDefinition.name; });
                    if (requiredFieldNames.length) {
                        validationIssues.push(sandbox.createError("Required fields are missing: " + requiredFieldNames.join(', ') + "."));
                    }
                }
            }
            validationIssues.push.apply(validationIssues, __spreadArray([], __read(i1$3.validateStandardProps(properties))));
            return validationIssues;
        };
        RxRecordEditorDesignHelpersService.prototype.getViewDefinition = function (viewDefinitionName) {
            if (viewDefinitionName) {
                return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(operators.catchError(function () { return rxjs.of(null); }));
            }
            else {
                return rxjs.of(null);
            }
        };
        RxRecordEditorDesignHelpersService.prototype.getInspector = function (recordDefinitionName, mode, showReadOnlyState, recordFieldDefinitionItems, isExtensionView, associationOptions, isAssociationRequired, onBeforeModeChange) {
            var _this = this;
            if (recordFieldDefinitionItems === void 0) { recordFieldDefinitionItems = []; }
            if (isExtensionView === void 0) { isExtensionView = false; }
            if (associationOptions === void 0) { associationOptions = []; }
            if (isAssociationRequired === void 0) { isAssociationRequired = false; }
            var inspectorConfig = {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: [
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Record editor.')
                                }
                            },
                            {
                                name: 'recordDefinitionName',
                                component: i2.RxDefinitionPickerComponent,
                                options: {
                                    label: 'Record definition name',
                                    definitionType: i2.RxDefinitionPickerType.StandardDataRecord,
                                    required: true,
                                    beforeValueChange: function (oldValue, newValue) {
                                        if (Boolean(oldValue)) {
                                            return _this.rxModalService.confirm({
                                                title: 'Warning',
                                                modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                                                message: 'All view components will be removed from the Record editor. Do you want to continue?'
                                            });
                                        }
                                        else {
                                            return Promise.resolve(true);
                                        }
                                    }
                                }
                            },
                            {
                                name: 'mode',
                                component: i2.GroupButtonFormControlComponent,
                                options: {
                                    label: 'Mode',
                                    tooltip: new i1$2.Tooltip('<b>Record editor modes:</b><br><ul><li>Create mode is for creating new records.</li><li>Edit mode is for updating records.</li><li>Temporary mode is for holding data that does not need to be saved.</li></ul>'),
                                    required: true,
                                    items: [
                                        {
                                            name: 'Create',
                                            value: exports.RecordEditorMode.Create
                                        },
                                        {
                                            name: 'Edit',
                                            value: exports.RecordEditorMode.Edit
                                        },
                                        {
                                            name: 'Temporary',
                                            value: exports.RecordEditorMode.Temporary
                                        }
                                    ],
                                    beforeValueChange: onBeforeModeChange
                                }
                            }
                        ]
                    }
                ]
            };
            var generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;
            if (mode === exports.RecordEditorMode.Edit && !isExtensionView) {
                generalSectionControls.push({
                    name: 'recordInstanceId',
                    component: i2.ExpressionInspectorControlComponent,
                    options: {
                        label: 'Record ID',
                        tooltip: new i1$2.Tooltip('Enter the record ID of the record that the users need to edit.'),
                        isRequired: true
                    }
                });
                generalSectionControls.push({
                    name: 'showReadOnlyState',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Enable read state'
                    }
                });
                if (showReadOnlyState) {
                    generalSectionControls.push({
                        name: 'defaultState',
                        component: i2.GroupButtonFormControlComponent,
                        options: {
                            label: 'Default state',
                            items: [
                                {
                                    name: 'Read',
                                    value: exports.RecordEditorState.Read
                                },
                                {
                                    name: 'Edit',
                                    value: exports.RecordEditorState.Edit
                                }
                            ]
                        }
                    });
                }
                generalSectionControls.push({
                    name: 'allowEdit',
                    component: i2.OptionalExpressionInspectorControlComponent,
                    options: {
                        label: 'Allow edit'
                    }
                });
            }
            generalSectionControls.push(i1$3.getAvailableOnDevicesInspectorConfig(), i1$3.getStylesFieldInspectorConfig());
            if (isExtensionView) {
                generalSectionControls.splice(1, 0, {
                    name: 'label',
                    component: i2.TextFormControlComponent,
                    options: {
                        label: 'Display label',
                        tooltip: new i1$2.Tooltip("Enter a Display label for the Record editor. When this view is injected into the view to extend,\n              the Display label will be shown above the Record editor's fields. If a Display label is not defined,\n              the name of the source application or library will be shown above the fields.")
                    }
                });
                if (recordDefinitionName) {
                    generalSectionControls.splice(3, 0, {
                        name: 'associationDefinitionName',
                        component: i2.SelectFormControlComponent,
                        options: {
                            label: 'Association to use',
                            options: associationOptions,
                            emptyOption: !isAssociationRequired,
                            required: isAssociationRequired
                        }
                    });
                }
            }
            var formContentsSection = {
                label: 'Form contents',
                controls: [
                    {
                        component: FieldsInspectorWidgetComponent,
                        options: {
                            label: 'Selected fields',
                            hideSystemFields: mode === exports.RecordEditorMode.Create
                        }
                    }
                ]
            };
            if (recordDefinitionName) {
                inspectorConfig.inspectorSectionConfigs.push(formContentsSection);
            }
            return inspectorConfig;
        };
        RxRecordEditorDesignHelpersService.prototype.getAssociationOptions = function (firstRecordDefinitionName, secondRecordDefinitionName) {
            var _this = this;
            if (firstRecordDefinitionName && secondRecordDefinitionName) {
                return this.getAssociations(firstRecordDefinitionName, secondRecordDefinitionName).pipe(operators.map(function (res) { return res.data
                    .filter(function (association) { return association.nodeAId === firstRecordDefinitionName; })
                    .map(function (association) { return ({
                    id: association.name,
                    name: _this.rxDefinitionNameService.getDisplayName(association.name)
                }); }); }));
            }
            else {
                return rxjs.of([]);
            }
        };
        RxRecordEditorDesignHelpersService.prototype.getAssociations = function (firstRecordDefinitionName, secondRecordDefinitionName) {
            return this.rxAssociationDefinitionDataPageService.get({
                params: {
                    propertySelection: ['name', 'scope', 'nodeAId'],
                    firstRecordDefinitionName: firstRecordDefinitionName,
                    secondRecordDefinitionName: secondRecordDefinitionName,
                    cardinality: i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,
                    nodeAModality: i2$5.RX_ASSOCIATION_DEFINITION.modality.required,
                    shouldCascadeDelete: true
                },
                headers: { 'default-bundle-scope': '' }
            });
        };
        RxRecordEditorDesignHelpersService.prototype.getTargetRecordEditorProperties = function (viewDefinition, targetExtensionContainerGuid) {
            var targetRecordEditor;
            if (viewDefinition && targetExtensionContainerGuid) {
                targetRecordEditor = this.rxViewDefinitionParserService.findParentComponentDefinition(viewDefinition, { guid: targetExtensionContainerGuid }, function (definition) { return definition.type === i1$1.RxViewComponentType.RecordEditor; });
            }
            return lodash.get(targetRecordEditor, 'propertiesByName', {});
        };
        RxRecordEditorDesignHelpersService.prototype.confirmSystemFieldRemoval = function () {
            return rxjs.from(this.rxModalService.confirm({
                title: 'Warning',
                modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                message: 'System fields will be removed. Do you want to continue?'
            }));
        };
        RxRecordEditorDesignHelpersService.prototype.getSystemFieldModelGuids = function (plainFieldModels, recordDefinition) {
            var _this = this;
            if (!lodash.isEmpty(plainFieldModels)) {
                return plainFieldModels.reduce(function (systemFieldGuids, model) {
                    var fieldDefinition = recordDefinition.fieldDefinitions.find(function (definition) { return String(definition.id) === model.data.fieldId; });
                    if (_this.rxFieldDefinitionService.isSystemField(fieldDefinition)) {
                        systemFieldGuids.push(model.guid);
                    }
                    return systemFieldGuids;
                }, []);
            }
            else {
                return [];
            }
        };
        RxRecordEditorDesignHelpersService.prototype.isFieldComponent = function (component) {
            return (![
                i1$1.RxViewComponentType.Action,
                i1$1.RxViewComponentType.ActionButton,
                i1$1.RxViewComponentType.Association,
                i1$1.RxViewComponentType.AssociatedRecordField
            ].includes(component.type) &&
                Boolean(this.rxViewComponentRegistryService.get(component.type).properties.find(function (prop) { return prop.name === 'fieldId'; })));
        };
        return RxRecordEditorDesignHelpersService;
    }());
    RxRecordEditorDesignHelpersService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorDesignHelpersService, deps: [{ token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i1__namespace$6.RxModalService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: i1__namespace$4.RxViewDefinitionCacheService }, { token: i2__namespace$4.RxAssociationDefinitionDataPageService }, { token: i1__namespace$1.RxDefinitionNameService }, { token: i1__namespace$4.RxViewComponentRegistryService }, { token: i1__namespace$4.RxViewDefinitionParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordEditorDesignHelpersService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorDesignHelpersService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorDesignHelpersService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i1__namespace$6.RxModalService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: i1__namespace$4.RxViewDefinitionCacheService }, { type: i2__namespace$4.RxAssociationDefinitionDataPageService }, { type: i1__namespace$1.RxDefinitionNameService }, { type: i1__namespace$4.RxViewComponentRegistryService }, { type: i1__namespace$4.RxViewDefinitionParserService }]; } });

    var FieldsInspectorWidgetModule = /** @class */ (function () {
        function FieldsInspectorWidgetModule() {
        }
        return FieldsInspectorWidgetModule;
    }());
    FieldsInspectorWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FieldsInspectorWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetModule, declarations: [FieldSelectorComponent, FieldsInspectorWidgetComponent], imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule], exports: [FieldsInspectorWidgetComponent] });
    FieldsInspectorWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetModule, imports: [[i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldsInspectorWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [FieldSelectorComponent, FieldsInspectorWidgetComponent],
                        exports: [FieldsInspectorWidgetComponent],
                        entryComponents: [FieldSelectorComponent, FieldsInspectorWidgetComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxTextfieldModule]
                    }]
            }] });

    var RecordEditorDesignModule = /** @class */ (function () {
        function RecordEditorDesignModule() {
        }
        return RecordEditorDesignModule;
    }());
    RecordEditorDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordEditorDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignModule, declarations: [RecordEditorDesignComponent], imports: [i3.CommonModule,
            i2.RxDefinitionPickerModule,
            i2$4.FormsModule,
            i2.FormControlsModule,
            i1$3.ViewDesignerCanvasModule,
            FieldsInspectorWidgetModule,
            i1.AdaptEmptyStateModule] });
    RecordEditorDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignModule, providers: [RxRecordEditorDesignHelpersService], imports: [[
                i3.CommonModule,
                i2.RxDefinitionPickerModule,
                i2$4.FormsModule,
                i2.FormControlsModule,
                i1$3.ViewDesignerCanvasModule,
                FieldsInspectorWidgetModule,
                i1.AdaptEmptyStateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i2.RxDefinitionPickerModule,
                            i2$4.FormsModule,
                            i2.FormControlsModule,
                            i1$3.ViewDesignerCanvasModule,
                            FieldsInspectorWidgetModule,
                            i1.AdaptEmptyStateModule
                        ],
                        declarations: [RecordEditorDesignComponent],
                        entryComponents: [RecordEditorDesignComponent],
                        providers: [RxRecordEditorDesignHelpersService]
                    }]
            }] });

    var CardinalityType;
    (function (CardinalityType) {
        CardinalityType["One"] = "ONE";
        CardinalityType["Many"] = "MANY";
    })(CardinalityType || (CardinalityType = {}));
    exports.RxAssociationManagerService = /** @class */ (function () {
        function RxAssociationManagerService(options, rxAssociationInstanceDataPageService, rxRecordDefinitionCacheService, rxRecordInstanceUtilsService, rxRecordInstanceService, rxJsonParserService, rxAssociationDefinitionCacheService) {
            var _this = this;
            this.options = options;
            this.rxAssociationInstanceDataPageService = rxAssociationInstanceDataPageService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxAssociationDefinitionCacheService = rxAssociationDefinitionCacheService;
            this.extensions = [];
            this.existing = [];
            this.pending = [];
            this.deleted = [];
            this.existingSubject$ = new rxjs.BehaviorSubject([]);
            this.existing$ = this.existingSubject$.asObservable();
            this.pendingSubject$ = new rxjs.BehaviorSubject([]);
            this.pending$ = this.pendingSubject$.asObservable();
            this.extensionsSubject$ = new rxjs.BehaviorSubject([]);
            this.extensions$ = this.extensionsSubject$.asObservable();
            this.cardinalityTypes = CardinalityType;
            this.totalExistingCount = 0;
            this.associationDefinition = null;
            this.cardinalityType = null;
            this.remainingAssociatedRecordCount = 0;
            // create a shared observable to eliminate duplicate API calls from multiple association components in dropdown mode
            this.getExistingAssociationInstances$ = rxjs.defer(function () { return _this.getExistingAssociationInstances(); }).pipe(operators.share());
            lodash.assign(this.options, {
                canLoadAssociations: Boolean(this.options.associatedRecordInstanceId),
                pageSize: 10,
                startIndex: 0
            });
            this.extensions = this.options.associationInstances.extensions;
            this.existing = this.options.associationInstances.existing;
            this.pending = this.options.associationInstances.pending;
            this.deleted = this.options.associationInstances.deleted;
            this.options.fieldIds = this.options.fieldIds || [];
            // add id to core fields for tracking changes on associationInstances
            this.mergeFieldIds([i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]);
        }
        RxAssociationManagerService.prototype.initialize = function () {
            var _this = this;
            this.isDataLoading = true;
            if (!this.initialize$) {
                this.initialize$ = rxjs.forkJoin([
                    this.rxAssociationDefinitionCacheService.getAssociationDefinition(this.options.associationDefinitionName),
                    this.rxRecordDefinitionCacheService.getRecordDefinition(this.options.recordDefinitionName)
                ]).pipe(operators.tap(function (_a) {
                    var _b = __read(_a, 2), associationDefinition = _b[0], recordDefinition = _b[1];
                    _this.isDataLoading = false;
                    _this.associationDefinition = associationDefinition;
                    _this.recordDefinition = recordDefinition;
                    // determine whether a single or multiple instances can be associated based on association's cardinality and record role
                    _this.cardinalityType = _this.getCardinalityType(_this.associationDefinition.cardinality, _this.options.associatedRecordNodeSide);
                    // set up field ids if they are not be provided
                    if (_this.options.allFieldIds) {
                        _this.options.fieldIds = lodash.map(_this.recordDefinition.fieldDefinitions, 'id');
                        _this.mergeFieldIds([i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]);
                    }
                }));
            }
            return this.initialize$;
        };
        RxAssociationManagerService.prototype.loadExistingAssociations = function () {
            var _this = this;
            if (this.options.canLoadAssociations) {
                return this.initialize().pipe(operators.switchMap(function () {
                    return _this.getExistingAssociationInstances$.pipe(operators.tap(function (instances) {
                        lodash.forEach(instances.data, function (instance) {
                            _this.addToExisting(_this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(instance));
                        });
                        _this.options.startIndex += instances.data.length;
                        _this.remainingAssociatedRecordCount = instances.totalSize - _this.options.startIndex;
                    }));
                }));
            }
            else {
                return rxjs.of([]);
            }
        };
        RxAssociationManagerService.prototype.loadExtensions = function () {
            var _this = this;
            return this.initialize().pipe(operators.switchMap(function () {
                return _this.getExtensionRecordInstance().pipe(operators.tap(function (extensionRecordInstance) {
                    if (extensionRecordInstance) {
                        _this.addExtension(extensionRecordInstance);
                    }
                }));
            }));
        };
        RxAssociationManagerService.prototype.addToExisting = function (association) {
            // Existing association can be loaded twice by parallel requests either with or without filtering by `roleName` attribute.
            var existingAssociation = this.isInExisting(association.id);
            if (existingAssociation) {
                if (this.isDefaultNodeRoleUsed(existingAssociation) && !this.isDefaultNodeRoleUsed(this.options.rolesConfig)) {
                    // Remove and add association again instead of config update is needed to correctly observe associations collection change.
                    lodash.remove(this.existing, existingAssociation);
                    association.rolesConfig = this.options.rolesConfig;
                    this.existing.push(association);
                    this.existingSubject$.next(this.existing);
                }
                else {
                    // Existing association already has custom roles of nodes, so newly added association instance will be skipped.
                }
            }
            else {
                if (this.options.rolesConfig && !association.rolesConfig) {
                    association.rolesConfig = this.options.rolesConfig;
                }
                this.existing.push(association);
                this.existingSubject$.next(this.existing);
            }
        };
        RxAssociationManagerService.prototype.isDefaultNodeRoleUsed = function (association) {
            return this.rxJsonParserService.tryParseJson(lodash.get(association, 'rolesConfig.useDefaultRoles', true));
        };
        RxAssociationManagerService.prototype.addToPending = function (associations, rolesConfig) {
            var _this = this;
            if (!lodash.isEmpty(associations) && this.associationDefinition) {
                if (this.cardinalityType === CardinalityType.Many) {
                    var associationsForAppending = lodash.filter(associations, function (association) {
                        return (!_this.isInExisting(association.id) && !_this.isInDeleted(association.id) && !_this.isInPending(association.id));
                    });
                    if (rolesConfig) {
                        lodash.forEach(associationsForAppending, function (association) {
                            association.rolesConfig = rolesConfig;
                        });
                    }
                    Array.prototype.push.apply(this.pending, associationsForAppending);
                    this.pendingSubject$.next(this.pending);
                    var previouslyDeletedAssociations = lodash.remove(this.deleted, function (deletedAssociation) {
                        return lodash.find(associations, {
                            id: deletedAssociation.id
                        });
                    });
                    lodash.forEach(previouslyDeletedAssociations, function (deletedAssociation) {
                        _this.addToExisting(deletedAssociation);
                    });
                }
                else if (this.cardinalityType === CardinalityType.One) {
                    var association = associations[0];
                    switch (true) {
                        case lodash.isEmpty(this.existing) && lodash.isEmpty(this.deleted):
                            this.pending.length = 0;
                            this.pending.push(association);
                            break;
                        case lodash.isEmpty(this.existing):
                            var deletedAssociation = this.deleted[0];
                            this.pending.length = 0;
                            if (deletedAssociation.id === association.id) {
                                this.addToExisting(this.deleted.splice(0, 1)[0]);
                            }
                            else {
                                this.pending.push(association);
                            }
                            break;
                        case lodash.isEmpty(this.deleted):
                            var existingAssociation = this.existing[0];
                            if (existingAssociation.id !== association.id) {
                                this.deleteFromExisting(existingAssociation.id);
                                this.pending.length = 0;
                                this.pending.push(association);
                            }
                            break;
                    }
                    this.pendingSubject$.next(this.pending);
                }
            }
        };
        RxAssociationManagerService.prototype.addExtension = function (extensionRecordInstance) {
            this.extensions.push(extensionRecordInstance);
            this.extensionsSubject$.next(this.extensions);
        };
        RxAssociationManagerService.prototype.restore = function () {
            var _this = this;
            this.extensionsSubject$.next(this.extensions);
            lodash.forEach(this.deleted, function (deletedAssociation) {
                _this.addToExisting(deletedAssociation);
            });
            this.deleted.splice(0, this.deleted.length);
            this.deleteAllPending();
        };
        RxAssociationManagerService.prototype.reset = function () {
            this.existing.splice(0, this.existing.length);
            this.pending.splice(0, this.pending.length);
            this.deleted.splice(0, this.deleted.length);
            this.totalExistingCount = 0;
            this.options.startIndex = 0;
        };
        RxAssociationManagerService.prototype.delete = function (associationId) {
            if (this.isInExisting(associationId)) {
                this.deleteFromExisting(associationId);
            }
            else if (this.isInPending(associationId)) {
                this.deleteFromPending(associationId);
            }
        };
        RxAssociationManagerService.prototype.deleteAllExisting = function () {
            var _this = this;
            var associationIds = lodash.map(this.existing, 'id');
            lodash.forEach(associationIds, function (associationId) {
                _this.deleteFromExisting(associationId);
            });
        };
        RxAssociationManagerService.prototype.deleteAllPending = function () {
            this.pending.splice(0, this.pending.length);
            this.pendingSubject$.next(this.pending);
        };
        RxAssociationManagerService.prototype.mergeFieldIds = function (fieldIds) {
            if (fieldIds) {
                this.options.fieldIds = lodash.uniq(this.options.fieldIds.concat(fieldIds));
            }
        };
        RxAssociationManagerService.prototype.extendOptions = function (options) {
            if (options.fieldIds) {
                this.mergeFieldIds(options.fieldIds);
            }
            this.options.allFieldIds = options.allFieldIds;
        };
        RxAssociationManagerService.prototype.getCardinalityType = function (cardinality, associatedRecordNodeSide) {
            var cardinalityType;
            switch (true) {
                case cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value:
                    cardinalityType = CardinalityType.One;
                    break;
                case cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value:
                    if (associatedRecordNodeSide === i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {
                        cardinalityType = CardinalityType.Many;
                    }
                    else {
                        cardinalityType = CardinalityType.One;
                    }
                    break;
                case cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value:
                    cardinalityType = CardinalityType.Many;
                    break;
            }
            return cardinalityType;
        };
        RxAssociationManagerService.prototype.getExtensionRecordInstance = function (loadFullInstance) {
            var _this = this;
            if (loadFullInstance === void 0) { loadFullInstance = true; }
            var fields = loadFullInstance ? i1$4.RX_RECORD_DEFINITION.coreFieldIds.id : this.options.fieldIds.join(',');
            return this.rxAssociationInstanceDataPageService
                .post({
                params: {
                    associationDefinition: this.options.associationDefinitionName,
                    nodeToQuery: this.options.associatedRecordNodeSide,
                    associatedRecordInstanceId: this.options.associatedRecordInstanceId,
                    propertySelection: fields
                }
            })
                .pipe(operators.map(function (instances) { return instances.data[0]; }), operators.switchMap(function (dataPageRow) {
                if (dataPageRow && loadFullInstance) {
                    return _this.rxRecordInstanceService.get(_this.options.recordDefinitionName, dataPageRow[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]);
                }
                else if (dataPageRow && !loadFullInstance) {
                    return rxjs.of(_this.rxRecordInstanceService.createInstanceFromDataPageRow(dataPageRow, _this.recordDefinition));
                }
                else {
                    return rxjs.of(null);
                }
            }));
        };
        RxAssociationManagerService.prototype.getExistingAssociationInstances = function () {
            var params = {
                pageSize: this.options.pageSize,
                startIndex: this.options.startIndex,
                associationDefinition: this.options.associationDefinitionName,
                nodeToQuery: this.options.associatedRecordNodeSide,
                associatedRecordInstanceId: this.options.associatedRecordInstanceId,
                propertySelection: this.options.fieldIds.join(','),
                useDefaultRoleNames: false,
                nodeARoleName: '',
                nodeBRoleName: ''
            };
            if (this.options.rolesConfig.useDefaultRoles) {
                params.useDefaultRoleNames = this.options.rolesConfig.useDefaultRoles;
                delete params.nodeARoleName;
                delete params.nodeBRoleName;
            }
            else {
                delete params.useDefaultRoleNames;
                params.nodeARoleName = this.options.rolesConfig.nodeARole || '';
                params.nodeBRoleName = this.options.rolesConfig.nodeBRole || '';
            }
            return this.rxAssociationInstanceDataPageService.post({ params: params });
        };
        RxAssociationManagerService.prototype.isInExisting = function (associationId) {
            return lodash.find(this.existing, {
                id: associationId
            });
        };
        RxAssociationManagerService.prototype.isInPending = function (associationId) {
            return lodash.find(this.pending, {
                id: associationId
            });
        };
        RxAssociationManagerService.prototype.getFieldIds = function () {
            return lodash.clone(this.options.fieldIds);
        };
        RxAssociationManagerService.prototype.isInDeleted = function (associationId) {
            return lodash.find(this.deleted, {
                id: associationId
            });
        };
        RxAssociationManagerService.prototype.deleteFromExisting = function (associationId) {
            var removedAssociation = lodash.remove(this.existing, {
                id: associationId
            })[0];
            this.deleted.push(removedAssociation);
            this.existingSubject$.next(this.existing);
        };
        RxAssociationManagerService.prototype.deleteFromPending = function (associationId) {
            lodash.remove(this.pending, {
                id: associationId
            });
            this.pendingSubject$.next(this.pending);
        };
        RxAssociationManagerService.prototype.destroy = function () {
            this.existingSubject$.complete();
            this.pendingSubject$.complete();
            this.extensionsSubject$.complete();
        };
        return RxAssociationManagerService;
    }());
    exports.RxAssociationManagerService = __decorate([
        __param(0, i0.Optional()),
        __metadata("design:paramtypes", [Object, i2$5.RxAssociationInstanceDataPageService,
            i1$4.RxRecordDefinitionCacheService,
            i1$4.RxRecordInstanceUtilsService,
            i1$4.RxRecordInstanceService,
            i2$2.RxJsonParserService,
            i2$5.RxAssociationDefinitionCacheService])
    ], exports.RxAssociationManagerService);

    var RecordEditorFormControl = /** @class */ (function (_super) {
        __extends(RecordEditorFormControl, _super);
        function RecordEditorFormControl() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this._touchedSubject = new rxjs.BehaviorSubject(_this.touched);
            _this.touched$ = _this._touchedSubject.asObservable().pipe(operators.distinctUntilChanged());
            return _this;
        }
        RecordEditorFormControl.prototype.markAsTouched = function (opts) {
            _super.prototype.markAsTouched.call(this, opts);
            this._touchedSubject.next(this.touched);
        };
        RecordEditorFormControl.prototype.markAsUntouched = function (opts) {
            _super.prototype.markAsUntouched.call(this, opts);
            this._touchedSubject.next(this.touched);
        };
        return RecordEditorFormControl;
    }(i2$4.FormControl));

    var RecordEditorFormDelimiter = '%';
    var BASE_FORM_GROUP_KEY = 'baseFormGroup';
    var RecordEditorForm = /** @class */ (function (_super) {
        __extends(RecordEditorForm, _super);
        function RecordEditorForm(rxGuidService, rxRecordInstanceUtilsService) {
            var _this = _super.call(this, {}) || this;
            _this.rxGuidService = rxGuidService;
            _this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            return _this;
        }
        RecordEditorForm.prototype.addFieldControl = function (fieldId, guid, initialValue, validator, asyncValidator) {
            var _a;
            if (initialValue === void 0) { initialValue = null; }
            var formControl = new RecordEditorFormControl('', validator, asyncValidator);
            var formGroup = this.controls[BASE_FORM_GROUP_KEY];
            formControl.setValue(initialValue);
            if (!formGroup) {
                this.addControl(BASE_FORM_GROUP_KEY, new i2$4.FormGroup((_a = {},
                    _a[this.getControlId(fieldId, guid)] = formControl,
                    _a)));
            }
            else {
                formGroup.addControl(this.getControlId(fieldId, guid), formControl);
            }
            return formControl;
        };
        RecordEditorForm.prototype.addAssociatedFieldControl = function (fieldId, guid, associatedRecordPath, initialValue, validator, asyncValidator) {
            var _a;
            if (initialValue === void 0) { initialValue = null; }
            var associatedFormGroupName = associatedRecordPath.join(RecordEditorFormDelimiter);
            var associatedFormGroup = this.controls[associatedFormGroupName];
            var formControl = new RecordEditorFormControl(initialValue, validator, asyncValidator);
            if (!associatedFormGroup) {
                this.addControl(associatedFormGroupName, new i2$4.FormGroup((_a = {},
                    _a[this.getControlId(fieldId, guid)] = formControl,
                    _a)));
            }
            else {
                associatedFormGroup.addControl(this.getControlId(fieldId, guid), formControl);
            }
            return formControl;
        };
        RecordEditorForm.prototype.resetFieldControls = function (formStateByFieldId, associatedRecordPath) {
            var formGroup = this.controls[associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY];
            if (formStateByFieldId) {
                formGroup.reset(this.prepareFormGroupState(formStateByFieldId, formGroup));
            }
            else {
                formGroup.reset();
            }
        };
        RecordEditorForm.prototype.syncFormControlValues = function (fieldId, value, associatedFromGroupName, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            this.getControlsBoundToRecordField(String(fieldId), associatedFromGroupName).forEach(function (formControl) {
                if (options.markAsDirty !== false) {
                    formControl.markAsDirty();
                }
                if (options.markAsTouched !== false) {
                    formControl.markAsTouched();
                }
                if (!_this.rxRecordInstanceUtilsService.isFieldValueEqual(formControl.value, value)) {
                    formControl.setValue(value);
                }
            });
        };
        RecordEditorForm.prototype.getFieldIds = function (associatedRecordPath) {
            var _this = this;
            var formGroup = this.controls[associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY];
            if (formGroup) {
                return lodash.reduce(formGroup.controls, function (result, control, formControlId) {
                    var fieldId = _this.getFieldId(formControlId);
                    if (control instanceof i2$4.FormControl && !lodash.includes(result, fieldId)) {
                        result.push(fieldId);
                    }
                    return result;
                }, []);
            }
            else {
                return [];
            }
        };
        RecordEditorForm.prototype.clearAndReset = function () {
            var _this = this;
            lodash.forOwn(this.controls, function (control, name) { return _this.removeControl(name); });
            this.reset();
        };
        RecordEditorForm.prototype.markInvalidControlsAsTouched = function () {
            lodash.forEach(this.controls, function (formGroup) {
                lodash.forEach(formGroup.controls, function (control) {
                    if (control.invalid) {
                        control.markAsTouched();
                    }
                });
            });
        };
        RecordEditorForm.prototype.getFormControl = function (fieldId, guid, associatedRecordPath) {
            var control;
            var formGroup;
            formGroup = this.controls[associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY];
            if (formGroup) {
                control = formGroup.get(this.getControlId(fieldId, guid));
            }
            return control;
        };
        RecordEditorForm.prototype.getControlsBoundToRecordField = function (fieldId, associatedFormGroupName) {
            var _this = this;
            var formGroup = this.controls[associatedFormGroupName || BASE_FORM_GROUP_KEY];
            return lodash.reduce(formGroup.controls, function (result, control, formControlId) {
                if (control instanceof i2$4.FormControl && _this.getFieldId(formControlId) === fieldId) {
                    result.push(control);
                }
                return result;
            }, []);
        };
        RecordEditorForm.prototype.getControlId = function (fieldId, guid) {
            return fieldId + ":" + (guid || this.rxGuidService.generate());
        };
        RecordEditorForm.prototype.getFieldId = function (formControlId) {
            return formControlId.split(':')[0];
        };
        RecordEditorForm.prototype.prepareFormGroupState = function (formStateByFieldId, formGroup) {
            var _this = this;
            return lodash.reduce(formGroup.controls, function (result, control, formControlId) {
                result[formControlId] = formStateByFieldId[_this.getFieldId(formControlId)];
                return result;
            }, {});
        };
        return RecordEditorForm;
    }(i2$4.FormGroup));
    RecordEditorForm.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorForm, deps: [{ token: i2__namespace$1.RxGuidService }, { token: i1__namespace$5.RxRecordInstanceUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RecordEditorForm.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorForm });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorForm, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxGuidService }, { type: i1__namespace$5.RxRecordInstanceUtilsService }]; } });

    var RxRecordEditorUtilsService = /** @class */ (function () {
        function RxRecordEditorUtilsService() {
        }
        RxRecordEditorUtilsService.prototype.getComponentDefinitionsAsFlatList = function (componentDefinitions) {
            var _this = this;
            return lodash.flattenDeep(lodash.transform(componentDefinitions, function (result, componentDefinition) {
                // do not include container view components
                if (componentDefinition.resourceType !== i1$1.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent) {
                    result.push(componentDefinition);
                    // do not look inside container view components that have their own recordDefinitionName property,
                    // e.g. Association View Component
                }
                else if (!componentDefinition.propertiesByName.recordDefinitionName) {
                    result.push.apply(result, __spreadArray([], __read(_this.getComponentDefinitionsAsFlatList(componentDefinition.componentDefinitions))));
                }
            }));
        };
        RxRecordEditorUtilsService.prototype.getSelectionFieldOptionNames = function (recordDefinition, recordInstance) {
            var selectionFieldOptionNamesById = {};
            lodash.filter(recordDefinition.fieldDefinitions, { resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.selection }).forEach(function (fieldDefinition) {
                var selectionFieldLocalizableStrings = lodash.get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);
                var fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];
                if (fieldInstance) {
                    if (lodash.isObject(fieldDefinition.optionNamesById) &&
                        selectionFieldLocalizableStrings &&
                        lodash.isEmpty(selectionFieldLocalizableStrings)) {
                        var localizableStringId = fieldDefinition.optionNamesById[fieldInstance.value];
                        selectionFieldOptionNamesById[fieldDefinition.id] = selectionFieldLocalizableStrings[localizableStringId];
                    }
                    else {
                        selectionFieldOptionNamesById[fieldDefinition.id] = fieldDefinition.optionNamesById[fieldInstance.value];
                    }
                }
                else {
                    // field instance is not available for system selection fields,
                    // e.g. field 16 (Notifier Listening), when the record instance
                    // is retrieved via GET recordinstance/0 API (get new record instance)
                    selectionFieldOptionNamesById[fieldDefinition.id] = '';
                }
            });
            return selectionFieldOptionNamesById;
        };
        return RxRecordEditorUtilsService;
    }());
    RxRecordEditorUtilsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorUtilsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordEditorUtilsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorUtilsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordEditorUtilsService, decorators: [{
                type: i0.Injectable
            }] });

    var RecordEditorComponent = /** @class */ (function (_super) {
        __extends(RecordEditorComponent, _super);
        function RecordEditorComponent(rxRecordInstanceService, rxRecordInstanceUpdateService, translateService, rxGlobalEventsService, rxNotificationService, rxRecordDefinitionService, rxRecordEditorUtilsService, rxRecordInstanceUtilsService, rxStringService, rxLogService, rxUtilityModalsService, recordEditorForm, rxAssociationManagerServiceFactory) {
            var _this = _super.call(this) || this;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
            _this.translateService = translateService;
            _this.rxGlobalEventsService = rxGlobalEventsService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.rxRecordEditorUtilsService = rxRecordEditorUtilsService;
            _this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            _this.rxStringService = rxStringService;
            _this.rxLogService = rxLogService;
            _this.rxUtilityModalsService = rxUtilityModalsService;
            _this.rxAssociationManagerServiceFactory = rxAssociationManagerServiceFactory;
            _this.api = {
                refresh: _this.refresh.bind(_this),
                isDirty: _this.isDirty.bind(_this),
                isReady: _this.isReady.bind(_this),
                isValid: _this.isValid.bind(_this),
                notifyComponentReady: _this.notifyComponentReady.bind(_this),
                save: _this.save.bind(_this),
                setProperty: _this.setProperty.bind(_this),
                setFieldValue: _this.setFieldValue.bind(_this),
                getFieldValue: _this.getFieldValue.bind(_this),
                getAssociationManager: _this.getAssociationManager.bind(_this),
                getFieldControl: _this.getFieldControl.bind(_this),
                downloadAttachment: _this.downloadAttachment.bind(_this),
                getAttachmentDownloadUrl: _this.getAttachmentDownloadUrl.bind(_this),
                getPermissionType: _this.getPermissionType.bind(_this),
                getFieldInstanceProp: _this.getFieldInstanceProp.bind(_this),
                getRecordEditorMode: _this.getRecordEditorMode.bind(_this),
                setFieldInstanceProp: _this.setFieldInstanceProp.bind(_this),
                markAsDirty: _this.markAsDirty.bind(_this)
            };
            _this.state = {
                recordInstanceId: '',
                recordDefinitionName: '',
                recordInstance: null,
                recordDefinition: null,
                isDataLoading: false,
                isDirty: false,
                isSaving: false,
                canSave: false,
                mode: null,
                isReadOnlyStateAvailable: false,
                defaultState: null,
                currentState: exports.RecordEditorState.Edit,
                form: null,
                selectionFieldOptionNamesById: {},
                allowEdit: null
            };
            _this.recordInstanceChangedSubject = new rxjs.Subject();
            _this.notReadyComponentIds = {};
            _this.associationManagers = {};
            _this.associationInstances = {};
            _this.recordInstanceChanged$ = _this.recordInstanceChangedSubject.asObservable();
            _this.state.form = recordEditorForm;
            _this.state.form.statusChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(_this.destroyed$)).subscribe(function () {
                _this.notifyPropertyChanged('isValid', _this.isValid());
            });
            return _this;
        }
        RecordEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.notifyPropertyChanged('isDirty', this.state.isDirty);
            this.notifyPropertyChanged('canSave', this.state.canSave);
            var config$ = this.config.pipe(operators.distinctUntilChanged(lodash.isEqual), operators.tap(function (config) { return Object.assign(_this.state, config); }));
            config$.pipe(operators.take(1)).subscribe(function (config) {
                if (config.mode === exports.RecordEditorMode.Create) {
                    _this.notifyPropertyChanged('inReadState', false);
                }
                else if (config.mode === exports.RecordEditorMode.Temporary) {
                    _this.notifyPropertyChanged('inReadState', false);
                    _this.updateCanSaveProperty();
                }
                else if (_this.state.defaultState) {
                    _this.state.isReadOnlyStateAvailable = true;
                }
            });
            rxjs.merge(config$.pipe(operators.takeWhile(function (config) { return config.mode === exports.RecordEditorMode.Edit; })), config$.pipe(operators.takeWhile(function (config) { return lodash.includes([exports.RecordEditorMode.Create, exports.RecordEditorMode.BulkEdit, exports.RecordEditorMode.Temporary], config.mode); }), operators.take(1)))
                .pipe(operators.map(function (config) { return config.recordInstanceId || null; }), operators.distinctUntilChanged(), operators.switchMap(function () { return _this.initializeRecordInstance().pipe(operators.catchError(function (error) {
                if (_this.rxRecordInstanceUtilsService.isNoRecordFoundError(error)) {
                    _this.runtimeViewModelApi.cancel(true).subscribe();
                }
                return rxjs.throwError(error);
            })); }), operators.takeUntil(this.destroyed$))
                .subscribe();
            config$
                .pipe(operators.takeWhile(function (config) { return config.mode === exports.RecordEditorMode.Edit; }), operators.pluck('allowEdit'), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (allowEdit) {
                var state = allowEdit ? _this.state.defaultState || exports.RecordEditorState.Edit : exports.RecordEditorState.Read;
                _this.setRecordEditorState(state);
            });
        };
        RecordEditorComponent.prototype.downloadAttachment = function (fieldId) {
            if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {
                this.rxRecordInstanceService.downloadAttachment(this.state.recordDefinitionName, fieldId, this.state.recordInstanceId, this.state.recordInstance.fieldInstances[fieldId].value);
            }
        };
        RecordEditorComponent.prototype.getAttachmentDownloadUrl = function (fieldId) {
            var attachmentDownloadUrl = '';
            if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {
                attachmentDownloadUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(this.state.recordDefinitionName, fieldId, this.state.recordInstanceId);
            }
            return attachmentDownloadUrl;
        };
        RecordEditorComponent.prototype.getAssociationManager = function (options) {
            var _this = this;
            // Custom roles config:
            // {
            //   useDefaultRoles: 'false',
            //   nodeARole: 'CustomA',
            //   nodeBRole: 'CustomB'
            // }
            // will be converted to 'false_CustomA_CustomB'
            // Default roles config (node roles are null) will be converted to 'true__'
            // Empty roles config will be converted to an empty string
            var rolesConfigValues = lodash.values(options.rolesConfig).join('_');
            var associationManagerKey = lodash.compact([
                options.associationDefinitionName,
                rolesConfigValues,
                options.associatedRecordNodeSide
            ]).join(':');
            var associationManager = this.associationManagers[associationManagerKey];
            if (!associationManager) {
                options.associationInstances = this.getAssociationInstances(options.associationDefinitionName, options.associatedRecordNodeSide, rolesConfigValues);
                associationManager = this.rxAssociationManagerServiceFactory(options);
                rxjs.merge(associationManager.pending$, associationManager.existing$)
                    .pipe(operators.filter(function () { return associationManager.deleted.length !== 0 || associationManager.pending.length !== 0; }), operators.take(1))
                    .subscribe(function () { return _this.markAsDirty(); });
                associationManager.extensions$
                    .pipe(
                // Extensions will be an empty array on first emit as initial value and
                // when no extension containers are used in the record editor.
                operators.filter(function (extensions) { return !lodash.isEmpty(extensions); }), operators.takeUntil(this.destroyed$))
                    .subscribe(function () {
                    _this.syncRecordInstanceWithForm(options.associatedRecordPath);
                    _this.notifyPropertyChanged('recordInstance', _this.state.recordInstance);
                });
                this.associationManagers[associationManagerKey] = associationManager;
            }
            else {
                associationManager.extendOptions(options);
            }
            return associationManager;
        };
        RecordEditorComponent.prototype.markAsDirty = function () {
            this.state.form.markAsTouched();
            this.state.form.markAsDirty();
            this.updateIsDirtyProperty();
            this.updateCanSaveProperty();
        };
        RecordEditorComponent.prototype.refresh = function () {
            var _this = this;
            if (this.isInEditMode() && this.state.currentState === exports.RecordEditorState.Read) {
                return this.initializeRecordInstance().pipe(operators.catchError(function (error) { return _this.handleNoRecordFoundError(error); }));
            }
            else {
                return rxjs.EMPTY;
            }
        };
        RecordEditorComponent.prototype.isDirty = function () {
            return this.isInTemporaryMode() ? false : this.state.form.dirty;
        };
        RecordEditorComponent.prototype.isReady = function () {
            return lodash.isEmpty(this.notReadyComponentIds);
        };
        RecordEditorComponent.prototype.notifyComponentReady = function (componentId, isReady) {
            if (isReady) {
                delete this.notReadyComponentIds[componentId];
            }
            else {
                this.notReadyComponentIds[componentId] = true;
            }
        };
        RecordEditorComponent.prototype.setProperty = function (propertyPath, propertyValue) {
            var matchFieldInstanceId = propertyPath.match(/^recordInstance\.fieldInstances\.(\d+)\.value$/);
            var shouldSwitchToReadState = (propertyPath === 'readState' && propertyValue) || (propertyPath === 'editState' && !propertyValue);
            var shouldSwitchToEditState = (propertyPath === 'readState' && !propertyValue) || (propertyPath === 'editState' && propertyValue);
            if (shouldSwitchToReadState) {
                if (this.state.currentState !== exports.RecordEditorState.Read) {
                    return this.cancel();
                }
            }
            else if (shouldSwitchToEditState) {
                if (this.state.currentState !== exports.RecordEditorState.Edit) {
                    this.switchToEditState();
                }
            }
            else if (matchFieldInstanceId) {
                var fieldId = Number(matchFieldInstanceId[1]);
                this.setFieldValue(fieldId, propertyValue);
            }
            else {
                return rxjs.throwError("Record editor: property " + propertyPath + " is not settable.");
            }
        };
        RecordEditorComponent.prototype.setFieldValue = function (fieldId, value, associatedRecordPath, options) {
            if (options === void 0) { options = {}; }
            if (this.state.recordInstance &&
                this.state.recordInstance.getRecordInstance(associatedRecordPath) &&
                this.state.recordInstance.isFieldValueChanged(fieldId, value, associatedRecordPath)) {
                this.state.recordInstance.setFieldValue(fieldId, value, associatedRecordPath);
                this.state.form.syncFormControlValues(String(fieldId), this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath), associatedRecordPath && associatedRecordPath.join(RecordEditorFormDelimiter), options);
                this.updateSelectionFieldOptionNames(this.state.recordInstance);
                this.notifyPropertyChanged('recordInstance', this.state.recordInstance);
                this.updateIsDirtyProperty();
                this.updateCanSaveProperty();
            }
        };
        RecordEditorComponent.prototype.getFieldValue = function (fieldId, associatedRecordPath) {
            return this.state.recordInstance && this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath);
        };
        RecordEditorComponent.prototype.save = function (closeViewAfterSave) {
            var _this = this;
            if (closeViewAfterSave === void 0) { closeViewAfterSave = false; }
            if (this.isInTemporaryMode()) {
                this.rxLogService.debug('Record Editor: skip saving record instance in Temporary mode.');
                return rxjs.EMPTY;
            }
            else if (!this.isValid()) {
                this.state.form.markInvalidControlsAsTouched();
                this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.validation-error.message'));
                return rxjs.throwError(null);
            }
            else if (this.canSave()) {
                var savingObservable$ = void 0;
                this.state.isSaving = true;
                this.updateCanSaveProperty();
                if (this.isInCreateMode()) {
                    savingObservable$ = this.rxRecordInstanceService.create(this.state.recordInstance).pipe(operators.tap(function (recordInstance) {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                        if (!_this.state.recordInstanceId) {
                            lodash.set(_this.state.recordInstance, "fieldInstances[" + i1$4.RX_RECORD_DEFINITION.coreFieldIds.id + "].value", recordInstance.id);
                            _this.state.recordInstance.id = recordInstance.id;
                            _this.state.recordInstanceId = recordInstance.id;
                        }
                        _this.notifyPropertyChanged('recordInstance', _this.state.recordInstance);
                        _this.notifyPropertyChanged('recordInstanceId', _this.state.recordInstanceId);
                        if (!closeViewAfterSave) {
                            _this.rxGlobalEventsService.viewActionsCompleted$
                                .pipe(operators.take(1), operators.switchMap(function () { return _this.initializeRecordInstance(); }), operators.takeUntil(_this.destroyed$))
                                .subscribe();
                        }
                    }), operators.switchMapTo(rxjs.EMPTY));
                }
                else if (this.isInEditMode()) {
                    savingObservable$ = this.rxRecordInstanceUpdateService.execute(this.state.recordInstance).pipe(operators.tap(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                    }), operators.switchMap(function () {
                        return _this.initializeRecordInstance().pipe(operators.catchError(function (error) { return _this.handleNoRecordFoundError(error); }), operators.tap({
                            complete: function () {
                                if (_this.state.isReadOnlyStateAvailable) {
                                    _this.setRecordEditorState(exports.RecordEditorState.Read);
                                }
                            }
                        }));
                    }));
                }
                return savingObservable$.pipe(operators.tap({
                    complete: function () {
                        // Mark record editor form as pristine due to:
                        // - prevent showing dirty state confirmation dialog when any action after
                        // the save will close current view e.g open view in the same window action.
                        // - we don't have to wait until all extension containers data will be loaded
                        // to reset record editor form while synchronization.
                        _this.state.form.markAsPristine();
                    }
                }), operators.finalize(function () {
                    _this.state.isSaving = false;
                    _this.updateCanSaveProperty();
                    _this.updateIsDirtyProperty();
                }));
            }
            else {
                this.rxLogService.debug('Record Editor: cannot save unmodified record instance.');
                return rxjs.throwError(null);
            }
        };
        RecordEditorComponent.prototype.getFieldControl = function (fieldId, guid, validator, associatedRecordPath) {
            var _this = this;
            if (validator === void 0) { validator = []; }
            var existingControl = this.state.form.getFormControl(String(fieldId), guid, associatedRecordPath);
            if (existingControl) {
                return existingControl;
            }
            var initialValue = this.state.recordInstance
                ? this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath)
                : null;
            var recordInstanceValidator = this.getFieldInstanceControlValidator(fieldId, associatedRecordPath);
            validator = Array.isArray(validator) ? validator : [validator];
            validator.push(recordInstanceValidator);
            var formControl;
            if (associatedRecordPath) {
                formControl = this.state.form.addAssociatedFieldControl(String(fieldId), guid, associatedRecordPath, initialValue, validator);
            }
            else {
                formControl = this.state.form.addFieldControl(String(fieldId), guid, initialValue, validator);
            }
            formControl.valueChanges
                .pipe(operators.distinctUntilChanged(this.rxRecordInstanceUtilsService.isFieldValueEqual), 
            // Use asyncScheduler to allow all observers to be notified about the original (non-normalized) field value change,
            // before the value gets normalized by `this.setFieldValue` call in the subscription below.
            // This resolves an issue where the subscriptions were executed with the normalized value first, followed by
            // non-normalized value.
            // In the example below, the actual form control value is already normalized but valueChange observer
            // receives a non-normalized value.
            // formControl.valueChange.subscribe(nonNormalizedValue => formControl.value !== nonNormalizedValue);
            operators.observeOn(rxjs.asyncScheduler), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                // Use formControl.value instead of the emitted value that comes asynchronously
                // and may be different than the actual value, e.g. when user types quickly
                _this.setFieldValue(fieldId, formControl.value, associatedRecordPath, {
                    markAsDirty: formControl.dirty,
                    markAsTouched: false
                });
            });
            return formControl;
        };
        RecordEditorComponent.prototype.getPermissionType = function (fieldId, associatedRecordPath) {
            var fieldInstance = this.state.recordInstance
                ? this.state.recordInstance.getFieldInstance(fieldId, associatedRecordPath)
                : null;
            if (fieldInstance) {
                return lodash.get(fieldInstance, 'permissionType') || i1$4.RX_RECORD_DEFINITION.fieldPermissionTypes.change;
            }
            else {
                return null;
            }
        };
        RecordEditorComponent.prototype.getFieldInstanceProp = function (fieldId, prop, associatedRecordPath) {
            return this.state.recordInstance && this.state.recordInstance.getFieldProp(fieldId, prop, associatedRecordPath);
        };
        RecordEditorComponent.prototype.getRecordEditorMode = function () {
            return this.state.mode;
        };
        RecordEditorComponent.prototype.setFieldInstanceProp = function (fieldId, prop, value, associatedRecordPath) {
            if (this.state.recordInstance) {
                this.state.recordInstance.setFieldProp(fieldId, prop, value, associatedRecordPath);
            }
        };
        RecordEditorComponent.prototype.isValid = function () {
            return this.state.form.valid;
        };
        RecordEditorComponent.prototype.switchToEditState = function () {
            this.setRecordEditorState(exports.RecordEditorState.Edit);
        };
        RecordEditorComponent.prototype.isEditStateAvailable = function () {
            return (this.state.isReadOnlyStateAvailable &&
                this.state.currentState === exports.RecordEditorState.Read &&
                Boolean(this.state.recordInstanceId) &&
                Boolean(this.state.allowEdit));
        };
        RecordEditorComponent.prototype.isSaveButtonAvailable = function () {
            return this.state.isReadOnlyStateAvailable && this.state.currentState === exports.RecordEditorState.Edit;
        };
        RecordEditorComponent.prototype.isSaveButtonDisabled = function () {
            return !this.canSave();
        };
        RecordEditorComponent.prototype.isCancelButtonAvailable = function () {
            return (this.state.isReadOnlyStateAvailable && this.state.currentState === exports.RecordEditorState.Edit && this.isInEditMode());
        };
        RecordEditorComponent.prototype.cancel = function () {
            var _this = this;
            if (this.state.isReadOnlyStateAvailable && this.state.recordInstance) {
                if (this.isDirty()) {
                    return rxjs.defer(function () { return rxjs.from(_this.rxUtilityModalsService.confirmUnsavedChanges()); }).pipe(operators.switchMap(function (isConfirmed) {
                        if (isConfirmed) {
                            _this.restoreRecordEditor();
                            _this.setRecordEditorState(exports.RecordEditorState.Read);
                            return rxjs.EMPTY;
                        }
                        else {
                            return rxjs.throwError(null);
                        }
                    }));
                }
                else {
                    this.setRecordEditorState(exports.RecordEditorState.Read);
                }
            }
            return rxjs.EMPTY;
        };
        RecordEditorComponent.prototype.canSave = function () {
            return this.isInTemporaryMode() ? true : !this.state.isSaving && (this.isInCreateMode() || this.isDirty());
        };
        RecordEditorComponent.prototype.isConfigValid = function () {
            return this.isInEditMode() ? this.rxStringService.isNonEmptyString(this.state.recordInstanceId) : true;
        };
        RecordEditorComponent.prototype.onSaveClick = function () {
            this.save()
                .pipe(operators.take(1), operators.catchError(function (error) { return (error === null ? rxjs.of(error) : rxjs.throwError(error)); }))
                .subscribe();
        };
        RecordEditorComponent.prototype.onCancelClick = function () {
            this.cancel().subscribe();
        };
        RecordEditorComponent.prototype.initializeRecordInstance = function () {
            var _this = this;
            var initialize$ = rxjs.EMPTY;
            if (this.isConfigValid()) {
                this.state.isDataLoading = true;
                initialize$ = this.getRecordInstance().pipe(operators.tap(function (recordInstance) {
                    _this.setRecordInstance(recordInstance);
                    _this.setRecordDefinition(recordInstance.recordDefinition);
                    _this.updateSelectionFieldOptionNames(recordInstance);
                }), operators.switchMapTo(rxjs.EMPTY), operators.catchError(function (error) {
                    // delay record instance id update to allow throwing an error.
                    rxjs.asapScheduler.schedule(function () {
                        _this.setRecordInstance(null);
                        _this.setRecordDefinition(null);
                    });
                    return rxjs.throwError(error);
                }), operators.finalize(function () {
                    _this.state.isDataLoading = false;
                }));
            }
            else {
                if (this.state.recordInstanceId !== '' && !lodash.isNil(this.state.recordInstanceId)) {
                    this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.invalid-record-instance-id.message'));
                }
                if (this.state.recordInstance) {
                    this.setRecordInstance(null);
                    this.setRecordDefinition(null);
                }
            }
            return initialize$;
        };
        RecordEditorComponent.prototype.handleNoRecordFoundError = function (error) {
            var isNoRecordFoundError = this.rxRecordInstanceUtilsService.isNoRecordFoundError(error);
            if (isNoRecordFoundError) {
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.no-access-to-record.message'));
                this.runtimeViewModelApi.cancel(true).subscribe();
            }
            return rxjs.throwError(isNoRecordFoundError ? null : error);
        };
        RecordEditorComponent.prototype.updateIsDirtyProperty = function () {
            var isDirty = this.isDirty();
            if (this.state.isDirty !== isDirty) {
                this.state.isDirty = isDirty;
                this.notifyPropertyChanged('isDirty', isDirty);
            }
        };
        RecordEditorComponent.prototype.updateCanSaveProperty = function () {
            var canSave = this.canSave();
            if (this.state.canSave !== canSave) {
                this.state.canSave = canSave;
                this.notifyPropertyChanged('canSave', canSave);
            }
        };
        RecordEditorComponent.prototype.setRecordInstance = function (recordInstance) {
            lodash.forEach(this.associationManagers, function (manager) { return manager.destroy(); });
            this.associationInstances = {};
            this.associationManagers = {};
            if (recordInstance && !recordInstance.associationInstances) {
                recordInstance.associationInstances = {};
                this.associationInstances = recordInstance.associationInstances;
            }
            this.state.recordInstance = recordInstance;
            this.state.recordInstanceId = recordInstance && recordInstance.id;
            recordInstance ? this.syncRecordInstanceWithForm() : this.state.form.clearAndReset();
            this.notifyPropertyChanged('recordInstance', this.state.recordInstance);
            this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);
            this.updateIsDirtyProperty();
            this.updateCanSaveProperty();
            if (recordInstance) {
                this.recordInstanceChangedSubject.next();
            }
        };
        RecordEditorComponent.prototype.getFieldInstanceControlValidator = function (fieldId, associatedRecordPath) {
            var _this = this;
            return function (control) { return _this.state.recordInstance &&
                _this.state.recordInstance.validateSingleField(fieldId, control.value, associatedRecordPath); };
        };
        RecordEditorComponent.prototype.setRecordDefinition = function (recordDefinition) {
            if (recordDefinition) {
                if (this.isInBulkEditMode()) {
                    recordDefinition = this.rxRecordDefinitionService.setFieldDefinitionsToOptional(recordDefinition);
                }
                recordDefinition.fieldDefinitionsById =
                    this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);
            }
            this.state.recordDefinition = recordDefinition;
            this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);
        };
        RecordEditorComponent.prototype.getRecordInstance = function () {
            if (this.isInCreateMode() || this.isInTemporaryMode()) {
                if (this.state.recordInstance) {
                    this.state.recordInstance = this.state.recordInstance.getOriginalRecordInstance();
                    return rxjs.of(this.state.recordInstance);
                }
                else {
                    return this.rxRecordInstanceService.getNew(this.state.recordDefinitionName);
                }
            }
            else if (this.isInBulkEditMode()) {
                return this.rxRecordInstanceService.getEmpty(this.state.recordDefinitionName);
            }
            else if (this.isInEditMode()) {
                return this.rxRecordInstanceService.get(this.state.recordDefinitionName, this.state.recordInstanceId);
            }
        };
        RecordEditorComponent.prototype.getAssociationInstances = function (associationDefinitionName, nodeSide, rolesConfigKey) {
            var nodeSideRolesConfigKey = lodash.compact([nodeSide, rolesConfigKey]).join(':');
            var associationRecords = lodash.get(this.associationInstances, [
                associationDefinitionName,
                nodeSideRolesConfigKey
            ]);
            if (!associationRecords) {
                associationRecords = {
                    existing: [],
                    pending: [],
                    deleted: [],
                    extensions: []
                };
                lodash.set(this.associationInstances, [associationDefinitionName, nodeSideRolesConfigKey], associationRecords);
            }
            return associationRecords;
        };
        RecordEditorComponent.prototype.setRecordEditorState = function (state) {
            this.state.currentState = state;
            this.notifyPropertyChanged('inReadState', state === exports.RecordEditorState.Read);
        };
        RecordEditorComponent.prototype.isInCreateMode = function () {
            return this.state.mode === exports.RecordEditorMode.Create;
        };
        RecordEditorComponent.prototype.isInBulkEditMode = function () {
            return this.state.mode === exports.RecordEditorMode.BulkEdit;
        };
        RecordEditorComponent.prototype.isInEditMode = function () {
            return this.state.mode === exports.RecordEditorMode.Edit;
        };
        RecordEditorComponent.prototype.isInTemporaryMode = function () {
            return this.state.mode === exports.RecordEditorMode.Temporary;
        };
        RecordEditorComponent.prototype.isNewAttachment = function (fieldId) {
            return Boolean(this.state.recordInstance.fieldInstances[fieldId].file);
        };
        RecordEditorComponent.prototype.updateSelectionFieldOptionNames = function (recordInstance) {
            if (recordInstance && lodash.get(this.state.recordDefinition, 'fieldDefinitions')) {
                var newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(this.state.recordDefinition, recordInstance);
                if (!lodash.isEqual(this.state.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {
                    this.notifyPropertyChanged('selectionFieldOptionNamesById', newSelectionFieldOptionNames);
                }
            }
        };
        RecordEditorComponent.prototype.syncRecordInstanceWithForm = function (associatedRecordPath) {
            var _this = this;
            var fieldIds = this.state.form.getFieldIds(associatedRecordPath);
            if (!lodash.isEmpty(fieldIds)) {
                var formStateByFieldId = fieldIds.reduce(function (result, fieldId) {
                    result[fieldId] = _this.state.recordInstance.getFieldValue(Number(fieldId), associatedRecordPath);
                    return result;
                }, {});
                this.state.form.resetFieldControls(formStateByFieldId, associatedRecordPath);
            }
        };
        RecordEditorComponent.prototype.restoreRecordEditor = function () {
            this.state.recordInstance.revertFieldInstances();
            lodash.forEach(this.associationManagers, function (manager) { return manager.restore(); });
            this.syncRecordInstanceWithForm();
            this.notifyPropertyChanged('recordInstance', this.state.recordInstance);
            this.updateIsDirtyProperty();
            this.updateCanSaveProperty();
        };
        return RecordEditorComponent;
    }(i1$5.BaseViewComponent));
    RecordEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorComponent, deps: [{ token: i1__namespace$5.RxRecordInstanceService }, { token: i1__namespace$5.RxRecordInstanceUpdateService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$1.RxGlobalEventsService }, { token: i1__namespace$1.RxNotificationService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: RxRecordEditorUtilsService }, { token: i1__namespace$5.RxRecordInstanceUtilsService }, { token: i2__namespace$1.RxStringService }, { token: i1__namespace$1.RxLogService }, { token: i1__namespace$6.RxUtilityModalsService }, { token: RecordEditorForm }, { token: exports.RxAssociationManagerService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordEditorComponent, selector: "rx-record-editor", inputs: { config: "config", runtimeViewModelApi: "runtimeViewModelApi" }, providers: [RecordEditorForm], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"loader-container\" *ngIf=\"state.isDataLoading && !state.recordInstance\">\n  <div class=\"loader-inline mr-1\"></div>\n  <span>{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n</div>\n\n<div *ngIf=\"!state.isDataLoading && (!isConfigValid() || !state.recordInstance)\">\n  {{ 'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record.message' | translate }}\n</div>\n\n<div *ngIf=\"state.recordInstance && isConfigValid()\" class=\"clearfix\">\n  <div class=\"d-flex justify-content-end\">\n    <button\n      *ngIf=\"isEditStateAvailable()\"\n      class=\"py-0 mb-1\"\n      adapt-button\n      size=\"small\"\n      btn-type=\"tertiary\"\n      (click)=\"switchToEditState()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n    </button>\n  </div>\n\n  <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n\n  <button\n    *ngIf=\"isSaveButtonAvailable()\"\n    class=\"mr-1 mt-3\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isCancelButtonAvailable()\"\n    class=\"mt-3\"\n    rx-id=\"cancel-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    size=\"small\"\n    (click)=\"onCancelClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block;border:1px solid #d6d7d8;padding:1rem;position:relative}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-editor',
                        templateUrl: './record-editor.component.html',
                        styleUrls: ['record-editor.component.scss'],
                        providers: [RecordEditorForm]
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$5.RxRecordInstanceService }, { type: i1__namespace$5.RxRecordInstanceUpdateService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$1.RxGlobalEventsService }, { type: i1__namespace$1.RxNotificationService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: RxRecordEditorUtilsService }, { type: i1__namespace$5.RxRecordInstanceUtilsService }, { type: i2__namespace$1.RxStringService }, { type: i1__namespace$1.RxLogService }, { type: i1__namespace$6.RxUtilityModalsService }, { type: RecordEditorForm }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [exports.RxAssociationManagerService]
                        }] }];
        }, propDecorators: { config: [{
                    type: i0.Input
                }], runtimeViewModelApi: [{
                    type: i0.Input
                }] } });

    var RecordEditorComponentDefinitionAdapterService = /** @class */ (function () {
        function RecordEditorComponentDefinitionAdapterService(viewDefinitionParserService) {
            this.viewDefinitionParserService = viewDefinitionParserService;
        }
        RecordEditorComponentDefinitionAdapterService.prototype.adaptDefinition = function (recordEditorComponentDefinition) {
            var properties = lodash.get(recordEditorComponentDefinition, 'propertiesByName');
            if (properties.mode === exports.RecordEditorMode.Edit && lodash.isUndefined(properties.allowEdit)) {
                properties.allowEdit = '1';
            }
            this.viewDefinitionParserService
                .getComponents(recordEditorComponentDefinition)
                .filter(function (componentPair) { return componentPair.componentDefinition.type !== i1$1.RxViewComponentType.ActionButton &&
                (componentPair.componentDefinition.propertiesByName.hasOwnProperty('fieldId') ||
                    componentPair.componentDefinition.type === i1$1.RxViewComponentType.Association); })
                .map(function (componentPair) { return componentPair.componentDefinition; })
                .forEach(function (fieldComponentDefinition) {
                Object.assign(fieldComponentDefinition.propertiesByName, {
                    api: "${view.components." + recordEditorComponentDefinition.guid + ".api}",
                    inReadState: "${view.components." + recordEditorComponentDefinition.guid + ".inReadState}",
                    recordDefinition: "${view.components." + recordEditorComponentDefinition.guid + ".recordDefinition}",
                    recordInstance: "${view.components." + recordEditorComponentDefinition.guid + ".recordInstance}"
                });
            });
        };
        return RecordEditorComponentDefinitionAdapterService;
    }());
    RecordEditorComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorComponentDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RecordEditorComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorComponentDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }]; } });

    // AoT requires an exported function for factories
    function AssociationManagerFactory(rxAssociationInstanceDataPageService, rxRecordDefinitionCacheService, rxRecordInstanceUtilsService, rxRecordInstanceService, rxJsonParserService, rxAssociationDefinitionCacheService) {
        var service = function (options) {
            return new exports.RxAssociationManagerService(options, rxAssociationInstanceDataPageService, rxRecordDefinitionCacheService, rxRecordInstanceUtilsService, rxRecordInstanceService, rxJsonParserService, rxAssociationDefinitionCacheService);
        };
        return service;
    }
    var RecordEditorModule = /** @class */ (function () {
        function RecordEditorModule(rxDefinitionAdapterRegistryService, recordEditorComponentDefinitionAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.recordEditorComponentDefinitionAdapterService = recordEditorComponentDefinitionAdapterService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.RecordEditor, this.recordEditorComponentDefinitionAdapterService);
        }
        return RecordEditorModule;
    }());
    RecordEditorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: RecordEditorComponentDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordEditorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorModule, declarations: [RecordEditorComponent], imports: [i3.CommonModule,
            i1$5.RuntimeViewCanvasModule,
            i2$4.ReactiveFormsModule,
            i1.AdaptButtonModule,
            i1$6.RxModalModule,
            i2$1.TranslateModule, i1__namespace.AdaptAlertModule], exports: [RecordEditorComponent] });
    RecordEditorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorModule, providers: [
            RecordEditorComponentDefinitionAdapterService,
            RxRecordEditorUtilsService,
            {
                provide: exports.RxAssociationManagerService,
                useFactory: AssociationManagerFactory,
                deps: [
                    i2$5.RxAssociationInstanceDataPageService,
                    i1$4.RxRecordDefinitionCacheService,
                    i1$4.RxRecordInstanceUtilsService,
                    i1$4.RxRecordInstanceService,
                    i2$2.RxJsonParserService,
                    i2$5.RxAssociationDefinitionCacheService
                ]
            }
        ], imports: [[
                i3.CommonModule,
                i1$5.RuntimeViewCanvasModule,
                i2$4.ReactiveFormsModule,
                i1.AdaptButtonModule,
                i1$6.RxModalModule,
                i2$1.TranslateModule,
                i1.AdaptAlertModule.forRoot()
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1$5.RuntimeViewCanvasModule,
                            i2$4.ReactiveFormsModule,
                            i1.AdaptButtonModule,
                            i1$6.RxModalModule,
                            i2$1.TranslateModule,
                            i1.AdaptAlertModule.forRoot()
                        ],
                        providers: [
                            RecordEditorComponentDefinitionAdapterService,
                            RxRecordEditorUtilsService,
                            {
                                provide: exports.RxAssociationManagerService,
                                useFactory: AssociationManagerFactory,
                                deps: [
                                    i2$5.RxAssociationInstanceDataPageService,
                                    i1$4.RxRecordDefinitionCacheService,
                                    i1$4.RxRecordInstanceUtilsService,
                                    i1$4.RxRecordInstanceService,
                                    i2$2.RxJsonParserService,
                                    i2$5.RxAssociationDefinitionCacheService
                                ]
                            }
                        ],
                        exports: [RecordEditorComponent],
                        declarations: [RecordEditorComponent],
                        entryComponents: [RecordEditorComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: RecordEditorComponentDefinitionAdapterService }]; } });

    var RxDefaultRecordEditorInputType = /** @class */ (function () {
        function RxDefaultRecordEditorInputType() {
            this.resourceTypeFieldTypeMap = {};
            this.initResourceTypeFieldTypeMap();
        }
        RxDefaultRecordEditorInputType.prototype.getFieldTypeByFieldDefinition = function (fieldDefinition) {
            if (lodash.isFunction(this.resourceTypeFieldTypeMap[fieldDefinition.resourceType])) {
                return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType](fieldDefinition);
            }
            else {
                return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType];
            }
        };
        RxDefaultRecordEditorInputType.prototype.initResourceTypeFieldTypeMap = function () {
            var _a;
            this.resourceTypeFieldTypeMap = Object.assign(Object.assign({}, RECORD_EDITOR.fieldTypes), (_a = {}, _a[i1$4.RX_RECORD_DEFINITION.resourceTypes.character] = function (fieldDefinition) {
                return fieldDefinition.namedListDefinition || lodash.inRange(fieldDefinition.maxLength, 1, 255)
                    ? i1$1.RxViewComponentType.Character
                    : i1$1.RxViewComponentType.Textarea;
            }, _a));
        };
        return RxDefaultRecordEditorInputType;
    }());
    RxDefaultRecordEditorInputType.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDefaultRecordEditorInputType, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxDefaultRecordEditorInputType.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDefaultRecordEditorInputType, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDefaultRecordEditorInputType, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var RX_ASSOCIATION = {
        actions: {
            associate: 'associate',
            createAndAssociate: 'createAndAssociate'
        },
        componentTypes: {
            associationFilter: 'rx-association-filter',
            associatedRecordField: 'rx-associated-record-field'
        }
    };
    exports.RxAssociationEditingMode = void 0;
    (function (RxAssociationEditingMode) {
        RxAssociationEditingMode["Dropdown"] = "dropdown";
        RxAssociationEditingMode["Views"] = "views";
    })(exports.RxAssociationEditingMode || (exports.RxAssociationEditingMode = {}));

    var RxRecordPreviewCardComponent = /** @class */ (function () {
        function RxRecordPreviewCardComponent() {
        }
        RxRecordPreviewCardComponent.prototype.ngOnInit = function () {
            this.maxFieldValueLength = this.config.maxFieldValueLength || 200;
        };
        RxRecordPreviewCardComponent.prototype.isEditableState = function () {
            return this.config.state === exports.RecordEditorState.Edit;
        };
        return RxRecordPreviewCardComponent;
    }());
    RxRecordPreviewCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordPreviewCardComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxRecordPreviewCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxRecordPreviewCardComponent, selector: "rx-record-preview-card", inputs: { config: "config" }, ngImport: i0__namespace, template: "<div class=\"rx-record-preview-card d-flex align-items-start justify-content-between w-100\">\n  <ul class=\"rx-card-fields d-flex flex-column list-unstyled focusable mb-0\" tabindex=\"0\">\n    <li class=\"d-flex rx-card-field\" *ngFor=\"let field of config.fields\">\n      <span class=\"rx-card-field-label\" *ngIf=\"field.label\">{{ field.label }}</span>\n      <span *ngIf=\"field.label\">: </span>\n      <span class=\"rx-card-field-value px-1\" [ngClass]=\"{ 'font-weight-bold': !isEditableState() }\">{{\n        field.value\n      }}</span>\n    </li>\n  </ul>\n\n  <button\n    *ngIf=\"isEditableState()\"\n    (click)=\"config.onDelete(config.id)\"\n    class=\"btn btn-link d-icon-cross p-0\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"tertiary\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.remove.label' | translate\"\n  ></button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex}.rx-record-preview-card{flex:1}.rx-card-field{flex:1;line-height:20px}.rx-card-field:not(:first-child){color:#959899}.rx-card-fields{flex:1;white-space:nowrap;min-width:0}.rx-card-field-label{flex-shrink:0;max-width:30%;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.rx-card-field-value{text-overflow:ellipsis;overflow:hidden}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordPreviewCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-preview-card',
                        templateUrl: './record-preview-card.component.html',
                        styleUrls: ['./record-preview-card.component.scss']
                    }]
            }], propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var RxAssociationComponent = /** @class */ (function (_super) {
        __extends(RxAssociationComponent, _super);
        function RxAssociationComponent(datePipe, rxAssociationDefinitionService, rxAssociationInstanceDataPageService, rxRecordDefinitionInheritanceDataPageService, rxRecordInstanceDataPageService, rxRecordInstanceUtilsService) {
            var _this = _super.call(this) || this;
            _this.datePipe = datePipe;
            _this.rxAssociationDefinitionService = rxAssociationDefinitionService;
            _this.rxAssociationInstanceDataPageService = rxAssociationInstanceDataPageService;
            _this.rxRecordDefinitionInheritanceDataPageService = rxRecordDefinitionInheritanceDataPageService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            _this.isDisabled = false;
            _this.api = {
                associate: function (associations) {
                    _this.associationManager.addToPending(associations, _this.extractRolesConfig());
                }
            };
            _this.modelToViewValueAdapterFunc = _this.modelToViewValueAdapter.bind(_this);
            _this.optionLoaderFunc = _this.getAssociationsOptionPage.bind(_this);
            _this.viewToModelValueAdapterFunc = _this.viewToModelValueAdapter.bind(_this);
            _this.existingPreviewConfigurations = [];
            _this.pendingPreviewConfigurations = [];
            _this.selectedOptions = [];
            _this.pendingPageSize = 10;
            _this.currentPendingCount = 10;
            _this.totalPendingCount = 0;
            _this.associationCandidateRecordInstances = [];
            _this.fieldDefinitions = {};
            _this.fieldId = null;
            _this.fields = [];
            _this.inReadState = false;
            _this.label = null;
            _this.recordDefinition = null;
            _this.recordDefinitionName = null;
            _this.useDefaultRoles = null;
            _this.nodeARole = null;
            _this.nodeBRole = null;
            _this.formControl = new i2$4.FormControl('', null);
            _this.isHidden = false;
            return _this;
        }
        RxAssociationComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            var config$ = this.config.pipe(operators.filter(function (config) { return Boolean(config.api && config.recordDefinition); }), operators.takeUntil(this.destroyed$));
            config$.pipe(operators.take(1)).subscribe(function (config) {
                _this.onConfigInitialized(config);
                _this.onConfigUpdated(config);
            });
            config$.pipe(operators.skip(1)).subscribe(this.onConfigUpdated.bind(this));
            this.notifyPropertyChanged('api', this.api);
            this.previewRolesConfig = this.extractRolesConfig();
        };
        RxAssociationComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.editingMode === exports.RxAssociationEditingMode.Dropdown) {
                this.formControl.valueChanges
                    .pipe(operators.distinctUntilChanged(), operators.startWith(this.formControl.value), operators.takeUntil(this.destroyed$))
                    .subscribe(function () {
                    _this.updateSelectedOptions();
                });
            }
        };
        RxAssociationComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            this.associationDefinitionName = config.associationDefinitionName;
            this.associatedRecordNodeSide = config.associatedRecordNodeSide;
            this.editingMode = config.editingMode || exports.RxAssociationEditingMode.Views;
            this.fieldId = config.fieldId;
            this.fields = config.fields;
            this.recordDefinition = config.recordDefinition;
            this.recordDefinitionName = config.recordDefinitionName;
            this.recordEditorApi = config.api;
            this.state = config.state;
            this.useDefaultRoles = config.useDefaultRoles;
            this.nodeARole = config.nodeARole;
            this.nodeBRole = config.nodeBRole;
            if (this.fieldId) {
                this.fieldDefinition = config.recordDefinition.fieldDefinitions.find(function (definition) { return definition.id === Number(_this.fieldId); });
            }
        };
        RxAssociationComponent.prototype.onConfigUpdated = function (config) {
            var _this = this;
            var _a;
            var inReadState = Boolean(config.inReadState);
            var isDisabled = Boolean(config.disabled) || this.permissionType === i1$4.RX_RECORD_DEFINITION.fieldPermissionTypes.view;
            var forceUpdatePreviewCardConfigState = false;
            this.isHidden = Boolean(config.hidden);
            this.areActionsAvailable = !inReadState && this.editingMode === exports.RxAssociationEditingMode.Views;
            if (this.isDisabled !== isDisabled) {
                this.isDisabled = isDisabled;
                forceUpdatePreviewCardConfigState = true;
            }
            if (this.inReadState !== inReadState) {
                this.inReadState = inReadState;
                forceUpdatePreviewCardConfigState = true;
            }
            if (forceUpdatePreviewCardConfigState && this.existingPreviewConfigurations.length) {
                this.updatePreviewCardConfigState();
            }
            this.label = lodash.isUndefined(config.label) ? (_a = this.fieldDefinition.name) !== null && _a !== void 0 ? _a : '' : config.label;
            if (this.selectWithPaginationComponent &&
                this.associationFilter &&
                lodash.get(config, 'associationFilter[0]') &&
                this.associationFilter.recordInstanceId !== config.associationFilter[0].recordInstanceId) {
                // Do not delete existing association until Record editor is ready.
                // This is needed in case when e.g. one association view component
                // is filtered by the value selected in the other association view component.
                // If during initialization, the value in the second view component gets loaded
                // faster than the value in the first one, the value in the second view component
                // would be cleared after the first component's value is loaded.
                if (this.recordEditorApi.isReady()) {
                    this.deleteAllExisting();
                }
                this.deleteAllPending();
                this.selectWithPaginationComponent.resetLoadedOptions();
                this.associationCandidateRecordInstances = [];
                if (!this.associationFilterNodeSide) {
                    this.rxAssociationDefinitionService
                        .get(this.associationFilter.associationDefinitionName)
                        .pipe(operators.switchMap(function (associationDefinition) {
                        if (associationDefinition.nodeAId === _this.recordDefinitionName) {
                            _this.associationFilterNodeSide = i2$5.RxAssociatedRecordNodeSide.NodeA;
                        }
                        else if (associationDefinition.nodeBId === _this.recordDefinitionName) {
                            _this.associationFilterNodeSide = i2$5.RxAssociatedRecordNodeSide.NodeB;
                        }
                        else {
                            return _this.rxRecordDefinitionInheritanceDataPageService
                                .get({ params: { recorddefinition: _this.recordDefinitionName } })
                                .pipe(operators.tap(function (recordDefinitionInheritanceDataPage) {
                                var recordDefinitionAncestors = recordDefinitionInheritanceDataPage.data;
                                if (lodash.includes(recordDefinitionAncestors, associationDefinition.nodeAId)) {
                                    _this.associationFilterNodeSide = i2$5.RxAssociatedRecordNodeSide.NodeA;
                                }
                                else if (lodash.includes(recordDefinitionAncestors, associationDefinition.nodeBId)) {
                                    _this.associatedRecordNodeSide = i2$5.RxAssociatedRecordNodeSide.NodeB;
                                }
                                else {
                                    throw new Error('No matches for association definition node side within inheritance ancestors.');
                                }
                            }));
                        }
                        return rxjs.EMPTY;
                    }))
                        .subscribe();
                }
            }
            this.associationFilter = lodash.head(config.associationFilter);
            if (config.recordInstance && this.recordInstance !== config.recordInstance) {
                this.recordInstance = config.recordInstance;
                this.isDisabled = true;
                this.notifyPropertyChanged('isDisabled', this.isDisabled);
                this.recordEditorApi.notifyComponentReady(this.guid, false);
                this.associationManager = this.getAssociationManager();
                this.associationManager
                    .initialize()
                    .pipe(operators.delay(0), operators.switchMap(function () { return _this.associationManager.loadExistingAssociations(); }), operators.tap(function () {
                    _this.isDisabled =
                        Boolean(config.disabled) || _this.permissionType === i1$4.RX_RECORD_DEFINITION.fieldPermissionTypes.view;
                    _this.notifyPropertyChanged('isDisabled', _this.isDisabled);
                    _this.areActionsAvailable = !_this.inReadState && _this.editingMode === exports.RxAssociationEditingMode.Views;
                    if (_this.editingMode === exports.RxAssociationEditingMode.Views) {
                        _this.fieldDefinitions = lodash.transform(_this.fields, function (result, field) {
                            var fieldDefinition = lodash.find(_this.associationManager.recordDefinition.fieldDefinitions, {
                                id: Number(field.fieldId)
                            });
                            result[fieldDefinition.id] = fieldDefinition;
                        }, {});
                    }
                    _this.associationManager.existing$.pipe(operators.takeUntil(_this.destroyed$)).subscribe(function (newValue) {
                        _this.onAssociationsChanged(newValue, 'existingPreviewConfigurations');
                        _this.updateTotalExistingAssociationsCount();
                    });
                    _this.associationManager.pending$.pipe(operators.takeUntil(_this.destroyed$)).subscribe(function (newValue) {
                        _this.onAssociationsChanged(newValue, 'pendingPreviewConfigurations');
                        _this.totalPendingCount = _this.pendingPreviewConfigurations.length;
                    });
                    rxjs.combineLatest([_this.associationManager.pending$, _this.associationManager.existing$])
                        .pipe(operators.take(1))
                        .subscribe(function () {
                        _this.recordEditorApi.notifyComponentReady(_this.guid, true);
                    });
                }))
                    .subscribe();
            }
        };
        RxAssociationComponent.prototype.getAssociationManager = function () {
            var fieldsIds = this.fieldId
                ? [this.fieldId, i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]
                : lodash.map(this.fields, 'fieldId');
            return this.recordEditorApi.getAssociationManager({
                associationDefinitionName: this.associationDefinitionName,
                associatedRecordNodeSide: this.associatedRecordNodeSide || i2$5.RX_ASSOCIATION_DEFINITION.roles.second.value,
                associatedRecordInstanceId: this.recordInstance.id,
                recordDefinitionName: this.recordDefinitionName,
                fieldIds: fieldsIds,
                rolesConfig: this.extractRolesConfig()
            });
        };
        RxAssociationComponent.prototype.getAssociationsOptionPage = function (startIndex, pageSize, searchQuery) {
            var _this = this;
            var params = {
                pageSize: pageSize,
                startIndex: startIndex,
                recorddefinition: this.recordDefinitionName,
                propertySelection: this.associationManager.getFieldIds()
            };
            var instanceDataPageService;
            if (this.associationFilter) {
                if (this.associationFilter.recordInstanceId) {
                    params.associationDefinition = this.associationFilter.associationDefinitionName;
                    params.associatedRecordInstanceId = this.associationFilter.recordInstanceId;
                    params.nodeToQuery = this.associationFilterNodeSide;
                    instanceDataPageService = this.rxAssociationInstanceDataPageService;
                }
            }
            else {
                params.sortBy = this.fieldId;
                if (searchQuery) {
                    params.queryExpression = "('" + this.fieldId + "' LIKE \"%" + this.rxRecordInstanceUtilsService.escapeTextWildcards(searchQuery) + "%\")";
                }
                instanceDataPageService = this.rxRecordInstanceDataPageService;
            }
            return instanceDataPageService
                ? instanceDataPageService.post({ params: params }).pipe(operators.map(function (result) {
                    var _b;
                    (_b = _this.associationCandidateRecordInstances).push.apply(_b, __spreadArray([], __read(result.data)));
                    return {
                        totalSize: result.totalSize,
                        options: result.data.map(function (recordInstance) { return ({
                            displayValue: recordInstance[_this.fieldId] || '',
                            value: recordInstance[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]
                        }); })
                    };
                }))
                : rxjs.of({
                    options: [],
                    totalSize: 0
                });
        };
        RxAssociationComponent.prototype.deleteAllExisting = function () {
            this.associationManager.deleteAllExisting();
        };
        RxAssociationComponent.prototype.deleteAllPending = function () {
            this.associationManager.deleteAllPending();
        };
        RxAssociationComponent.prototype.loadExistingAssociations = function () {
            var _this = this;
            this.associationManager
                .loadExistingAssociations()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function () { return _this.updateTotalExistingAssociationsCount(); });
        };
        RxAssociationComponent.prototype.isReadModeEnabled = function () {
            return this.inReadState;
        };
        RxAssociationComponent.prototype.isEditModeEnabled = function () {
            return !this.inReadState;
        };
        RxAssociationComponent.prototype.getAssociatedValue = function () {
            return lodash.get(this, 'selectedOptions[0].displayValue');
        };
        // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar;baz'
        RxAssociationComponent.prototype.viewToModelValueAdapter = function (selectedOptions) {
            return selectedOptions.map(function (option) { return option.value; }).join(';');
        };
        // 'foo;bar;baz' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]
        RxAssociationComponent.prototype.modelToViewValueAdapter = function (modelValue) {
            return modelValue ? lodash.castArray(this.selectedOptions) : [];
        };
        RxAssociationComponent.prototype.resetDropdownSelection = function () {
            this.selectedOptions = [];
        };
        RxAssociationComponent.prototype.updatePreviewCardConfigState = function () {
            var _this = this;
            lodash.forEach(this.existingPreviewConfigurations, function (previewCardConfig) {
                previewCardConfig.state = _this.getStateForPreviewConfiguration();
            });
        };
        RxAssociationComponent.prototype.updateSelectedOptions = function () {
            if (this.formControl.value && !lodash.isNil(this.formControl.value)) {
                var pendingAssociation_1 = {
                    id: this.formControl.value,
                    fieldInstances: null
                };
                var selectedRecordInstance = lodash.find(this.associationCandidateRecordInstances, function (association) {
                    return association[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id] === pendingAssociation_1.id;
                });
                pendingAssociation_1.fieldInstances = lodash.transform(selectedRecordInstance, function (result, value, filedId) {
                    result[filedId] = { value: value };
                }, {});
                this.associationManager.addToPending([pendingAssociation_1], null);
            }
            else {
                this.deleteAllExisting();
                this.deleteAllPending();
            }
        };
        RxAssociationComponent.prototype.buildPreviewConfig = function (association, fields, state) {
            var _this = this;
            return {
                id: association.id,
                state: state,
                onDelete: function (associationId) {
                    _this.associationManager.delete(associationId);
                },
                fields: lodash.map(fields, function (field) {
                    var fieldDefinition = _this.fieldDefinitions[field.fieldId];
                    var fieldInstance = association.fieldInstances[field.fieldId];
                    var value;
                    if (fieldInstance) {
                        value = fieldInstance.value;
                    }
                    if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {
                        value = fieldDefinition.optionNamesById[value];
                    }
                    if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType ||
                        (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType && lodash.isString(value))) {
                        value = _this.datePipe.transform(value, 'mediumDate');
                    }
                    return {
                        label: field.label,
                        value: value || '<unknown>',
                        index: field.index,
                        fieldId: field.fieldId
                    };
                })
            };
        };
        RxAssociationComponent.prototype.showPendingAssociations = function () {
            this.currentPendingCount += this.pendingPageSize;
        };
        RxAssociationComponent.prototype.getPendingPreviewConfigurations = function () {
            return this.pendingPreviewConfigurations.slice(0, this.currentPendingCount);
        };
        RxAssociationComponent.prototype.extractRolesConfig = function () {
            return {
                useDefaultRoles: this.useDefaultRoles,
                nodeARole: this.nodeARole,
                nodeBRole: this.nodeBRole
            };
        };
        RxAssociationComponent.prototype.updateTotalExistingAssociationsCount = function () {
            this.associationManager.totalExistingCount =
                (this.associationManager.remainingAssociatedRecordCount || 0) + this.existingPreviewConfigurations.length;
        };
        RxAssociationComponent.prototype.getStateForPreviewConfiguration = function () {
            return this.areActionsAvailable && !this.isDisabled ? exports.RecordEditorState.Edit : exports.RecordEditorState.Read;
        };
        RxAssociationComponent.prototype.getFirstAssociationRecord = function () {
            return this.associationManager.existing[0] || this.associationManager.pending[0] || {};
        };
        RxAssociationComponent.prototype.onAssociationsChanged = function (associations, configName) {
            var _this = this;
            var _a;
            var firstAssociatedRecord = this.getFirstAssociationRecord();
            this.notifyPropertyChanged('firstAssociatedRecord', { id: firstAssociatedRecord.id || '' });
            if (this.editingMode === exports.RxAssociationEditingMode.Views) {
                var associationsToPreview = associations.filter(function (association) { return lodash.every(_this.previewRolesConfig, lodash.isEmpty) || lodash.isEqual(_this.previewRolesConfig, association.rolesConfig); });
                this[configName] = this.rebuildPreviewConfigurations(associationsToPreview);
            }
            else if (this.editingMode === exports.RxAssociationEditingMode.Dropdown) {
                if (firstAssociatedRecord.id) {
                    this.selectedOptions = [
                        {
                            displayValue: (_a = firstAssociatedRecord.fieldInstances[this.fieldId]) === null || _a === void 0 ? void 0 : _a.value,
                            value: firstAssociatedRecord.id
                        }
                    ];
                }
                else {
                    this.resetDropdownSelection();
                }
                this.formControl.setValue(firstAssociatedRecord.id);
            }
        };
        RxAssociationComponent.prototype.rebuildPreviewConfigurations = function (associations) {
            var _this = this;
            var state = this.getStateForPreviewConfiguration();
            return lodash.map(associations, function (association) {
                return _this.buildPreviewConfig(association, _this.fields, state);
            });
        };
        return RxAssociationComponent;
    }(i1$5.BaseViewComponent));
    RxAssociationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationComponent, deps: [{ token: i3__namespace.DatePipe }, { token: i2__namespace$4.RxAssociationDefinitionService }, { token: i2__namespace$4.RxAssociationInstanceDataPageService }, { token: i1__namespace$5.RxRecordDefinitionInheritanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxAssociationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxAssociationComponent, selector: "rx-association", host: { properties: { "class.rx-field-disabled": "this.isDisabled" } }, viewQueries: [{ propertyName: "selectWithPaginationComponent", first: true, predicate: i2.RxSelectWithPaginationComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-read-only-field\n  *ngIf=\"!isHidden && isReadModeEnabled() && (existingPreviewConfigurations.length === 0 || editingMode === 'dropdown')\"\n  [label]=\"label\"\n  [value]=\"getAssociatedValue()\"\n></rx-read-only-field>\n\n<div *ngIf=\"!isHidden\" [ngSwitch]=\"editingMode\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"label\" [ngClass]=\"{ 'read-state': isReadModeEnabled() }\">\n    <adapt-rx-control-label *ngIf=\"isEditModeEnabled() || existingPreviewConfigurations.length > 0\" [label]=\"label\">\n    </adapt-rx-control-label>\n\n    <div *ngIf=\"areActionsAvailable\">\n      <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n    </div>\n\n    <div *ngIf=\"isReadModeEnabled()\">\n      <div [ngSwitch]=\"associationManager.cardinalityType\">\n        <div *ngSwitchCase=\"associationManager.cardinalityTypes.One\">\n          <div *ngIf=\"existingPreviewConfigurations.length || pendingPreviewConfigurations.length\" class=\"list-group\">\n            <rx-record-preview-card\n              [config]=\"existingPreviewConfigurations[0] || pendingPreviewConfigurations[0]\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n        </div>\n\n        <div *ngSwitchDefault>\n          <div class=\"list-group\">\n            <rx-record-preview-card\n              *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n              [config]=\"previewCardConfig\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n\n          <button\n            *ngIf=\"\n              associationManager.totalExistingCount >\n              existingPreviewConfigurations.length + associationManager.deleted.length\n            \"\n            (click)=\"loadExistingAssociations()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"isEditModeEnabled()\">\n      <div *ngIf=\"existingPreviewConfigurations.length\" class=\"form-group\">\n        <div class=\"d-flex justify-content-end pb-1\">\n          <span class=\"preview-count\">\n            {{\n              associationManager.totalExistingCount > 1\n                ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                  | translate\n                    : {\n                        count: associationManager.totalExistingCount\n                      })\n                : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n            }}\n          </span>\n\n          <button\n            [hidden]=\"!areActionsAvailable || isDisabled\"\n            (click)=\"deleteAllExisting()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            class=\"btn btn-link py-0\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n          </button>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"\n            associationManager.totalExistingCount >\n            existingPreviewConfigurations.length + associationManager.deleted.length\n          \"\n          (click)=\"loadExistingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n\n      <div *ngIf=\"pendingPreviewConfigurations.length\" class=\"form-group mt-3\">\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"m-0\">\n            {{\n              'com.bmc.arsys.rx.client.view-components.record-editor.association.pending-associations.label' | translate\n            }}\n            :\n          </div>\n\n          <div class=\"d-flex pb-1\">\n            <span class=\"preview-count\">\n              {{\n                totalPendingCount > 1\n                  ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                    | translate\n                      : {\n                          count: totalPendingCount\n                        })\n                  : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n              }}\n            </span>\n\n            <button\n              [hidden]=\"!areActionsAvailable || isDisabled\"\n              (click)=\"deleteAllPending()\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              class=\"btn btn-link py-0\"\n              type=\"button\"\n            >\n              {{\n                'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate\n              }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of getPendingPreviewConfigurations()\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"totalPendingCount > currentPendingCount\"\n          (click)=\"showPendingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div *ngIf=\"isEditModeEnabled()\" [attr.aria-label]=\"label\">\n      <rx-select-with-pagination\n        [formControl]=\"formControl\"\n        [readonly]=\"isDisabled\"\n        [label]=\"label\"\n        [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n        [optionLoader]=\"optionLoaderFunc\"\n        [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n      ></rx-select-with-pagination>\n    </div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block}:host::ng-deep rx-runtime-view-canvas-item-container{display:flex}:host::ng-deep .rx-runtime-view-canvas-item-margin{margin-bottom:0}:host::ng-deep rx-runtime-view-canvas-item+rx-runtime-view-canvas-item{margin-left:5px}:host::ng-deep .read-state .form-control-label{font-weight:var(--font-weight-normal)}.rx-group-title{font-size:.8125rem;color:#959899;display:flex;align-items:center}.rx-preview-existing-head{margin-top:-30px}.rx-preview-count{font-size:.8125rem;color:#959899;vertical-align:middle}\n"], components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }, { type: RxRecordPreviewCardComponent, selector: "rx-record-preview-card", inputs: ["config"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i2__namespace$5.RxSelectWithPaginationComponent, selector: "rx-select-with-pagination", inputs: ["label", "required", "isMultiSelectionMode", "optionLoader", "pageSize", "showDefaultTitle", "showUncheckAll", "readonly", "template", "viewToModelValueAdapter", "modelToViewValueAdapter", "optionFormatter"], outputs: ["toggleDropdown", "selectionChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-association',
                        templateUrl: './association.component.html',
                        styleUrls: ['./association.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.DatePipe }, { type: i2__namespace$4.RxAssociationDefinitionService }, { type: i2__namespace$4.RxAssociationInstanceDataPageService }, { type: i1__namespace$5.RxRecordDefinitionInheritanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceUtilsService }]; }, propDecorators: { selectWithPaginationComponent: [{
                    type: i0.ViewChild,
                    args: [i2.RxSelectWithPaginationComponent]
                }], isDisabled: [{
                    type: i0.HostBinding,
                    args: ['class.rx-field-disabled']
                }] } });

    var RxAssociationDefinitionAdapterService = /** @class */ (function () {
        function RxAssociationDefinitionAdapterService(rxViewDefinitionParserService) {
            this.rxViewDefinitionParserService = rxViewDefinitionParserService;
        }
        RxAssociationDefinitionAdapterService.prototype.adaptDefinition = function (associationComponentDefinition, viewDefinition) {
            var targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(viewDefinition, associationComponentDefinition);
            var childButtons = associationComponentDefinition.componentDefinitions.filter(function (component) { return component.type === i1$1.RxViewComponentType.ActionButton; });
            var childSortedButtons = lodash.sortBy(childButtons, function (componentDefinition) { return componentDefinition.propertiesByName.action === RX_ASSOCIATION.actions.associate ? 0 : 1; });
            associationComponentDefinition.propertiesByName.state = targetRecordEditorComponentDefinition.propertiesByName.mode;
            associationComponentDefinition.propertiesByName.useDefaultRoles =
                associationComponentDefinition.propertiesByName.useDefaultRoles === 'true';
            associationComponentDefinition.propertiesByName.fields = lodash.flow(function (componentDefinitions) { return lodash.filter(componentDefinitions, {
                type: RX_ASSOCIATION.componentTypes.associatedRecordField
            }); }, function (componentDefinitions) { return lodash.map(componentDefinitions, function (fieldComponentDefinition) { return ({
                fieldId: fieldComponentDefinition.propertiesByName.fieldId,
                label: fieldComponentDefinition.propertiesByName.label,
                index: Number(fieldComponentDefinition.propertiesByName.index)
            }); }); }, function (componentDefinitions) { return lodash.sortBy(componentDefinitions, 'index'); })(associationComponentDefinition.componentDefinitions);
            associationComponentDefinition.layout = JSON.stringify({
                outlets: [
                    {
                        name: 'DEFAULT',
                        columns: [
                            {
                                children: childSortedButtons.map(function (component) { return component.guid; })
                            }
                        ]
                    }
                ]
            });
            associationComponentDefinition.componentDefinitions
                .filter(function (componentDefinition) { return componentDefinition.type === i1$1.RxViewComponentType.ActionButton; })
                .forEach(function (componentDefinition) {
                componentDefinition.propertiesByName.disabled =
                    associationComponentDefinition.propertiesByName.disabled +
                        ' OR ${view.components.' +
                        associationComponentDefinition.guid +
                        '.isDisabled}';
            });
        };
        RxAssociationDefinitionAdapterService.prototype.getTargetRecordEditorComponentDefinition = function (viewDefinition, extensionContainerComponentDefinition) {
            return this.rxViewDefinitionParserService.findParentComponentDefinition(viewDefinition, extensionContainerComponentDefinition, function (parentComponentDefinition) { return parentComponentDefinition.type === i1$1.RxViewComponentType.RecordEditor; });
        };
        return RxAssociationDefinitionAdapterService;
    }());
    RxAssociationDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxAssociationDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }]; } });

    var AssociationModule = /** @class */ (function () {
        function AssociationModule(rxAssociationDefinitionAdapterService, rxDefinitionAdapterRegistryService) {
            this.rxAssociationDefinitionAdapterService = rxAssociationDefinitionAdapterService;
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.Association, this.rxAssociationDefinitionAdapterService);
        }
        return AssociationModule;
    }());
    AssociationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationModule, deps: [{ token: RxAssociationDefinitionAdapterService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AssociationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationModule, declarations: [RxAssociationComponent, RxRecordPreviewCardComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptRxFormControlModule,
            i3.CommonModule,
            i2$4.FormsModule,
            i1$6.ReadOnlyFieldModule,
            i2$4.ReactiveFormsModule,
            i1$5.RuntimeViewCanvasModule,
            i2.RxSelectWithPaginationModule,
            i2$1.TranslateModule] });
    AssociationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationModule, providers: [i3.DatePipe, RxAssociationDefinitionAdapterService], imports: [[
                i1.AdaptButtonModule,
                i1.AdaptRxFormControlModule,
                i3.CommonModule,
                i2$4.FormsModule,
                i1$6.ReadOnlyFieldModule,
                i2$4.ReactiveFormsModule,
                i1$5.RuntimeViewCanvasModule,
                i2.RxSelectWithPaginationModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptRxFormControlModule,
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$4.ReactiveFormsModule,
                            i1$5.RuntimeViewCanvasModule,
                            i2.RxSelectWithPaginationModule,
                            i2$1.TranslateModule
                        ],
                        declarations: [RxAssociationComponent, RxRecordPreviewCardComponent],
                        entryComponents: [RxAssociationComponent, RxRecordPreviewCardComponent],
                        providers: [i3.DatePipe, RxAssociationDefinitionAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: RxAssociationDefinitionAdapterService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }]; } });

    var RxAssociationDesignContainerComponent = /** @class */ (function () {
        function RxAssociationDesignContainerComponent() {
        }
        return RxAssociationDesignContainerComponent;
    }());
    RxAssociationDesignContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDesignContainerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxAssociationDesignContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxAssociationDesignContainerComponent, selector: "rx-association-design-item-container", inputs: { outlet: "outlet", isReadOnly: "isReadOnly", layout: "layout" }, ngImport: i0__namespace, template: "<rx-canvas-item\n  *ngFor=\"let layout of outlet.columns[0].children\"\n  [interactive]=\"false\"\n  [layout]=\"layout\"\n  [isReadOnly]=\"isReadOnly\"\n  class=\"mr-1\"\n>\n</rx-canvas-item>\n", styles: [":host{display:flex}\n"], components: [{ type: i1__namespace$3.CanvasItemComponent, selector: "rx-canvas-item", inputs: ["layout", "interactive", "isReadOnly"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDesignContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-association-design-item-container',
                        templateUrl: './association-design-container.component.html',
                        styleUrls: ['./association-design-container.component.scss']
                    }]
            }], propDecorators: { outlet: [{
                    type: i0.Input
                }], isReadOnly: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }] } });

    var RxAssociationDesignComponent = /** @class */ (function () {
        function RxAssociationDesignComponent() {
            this.hidePlaceholder = false;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.containerComponent = RxAssociationDesignContainerComponent;
        }
        RxAssociationDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.model.displayedFields$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (fields) {
                _this.hidePlaceholder = fields.length > 0;
            });
        };
        RxAssociationDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return RxAssociationDesignComponent;
    }());
    RxAssociationDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxAssociationDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxAssociationDesignComponent, selector: "rx-association-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<div [ngSwitch]=\"model.editingMode$ | async\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"model.label$ | async\">\n    <label class=\"d-block form-control-label\">{{ model.label$ | async }}</label>\n\n    <div class=\"d-flex flex-wrap\">\n      <rx-canvas-outlet class=\"flex-grow-1\" [containerComponent]=\"containerComponent\"></rx-canvas-outlet>\n\n      <button\n        adapt-button\n        size=\"small\"\n        btn-type=\"tertiary\"\n        class=\"btn btn-link py-0 align-right\"\n        type=\"button\"\n        [hidden]=\"!hidePlaceholder\"\n      >\n        {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-empty-state\n      [hidden]=\"hidePlaceholder\"\n      type=\"objects\"\n      label=\"Add fields in the Properties panel.\"\n    ></adapt-empty-state>\n\n    <div class=\"form-group mt-2\" [hidden]=\"!hidePlaceholder\">\n      <div class=\"list-group\">\n        <div class=\"list-group-item\">\n          <div class=\"rx-record-preview-card w-100\">\n            <button\n              class=\"btn btn-link float-right d-icon-cross p-0\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              type=\"button\"\n            ></button>\n\n            <ul class=\"list-unstyled mb-0\">\n              <li class=\"rx-record-preview-card__field\" *ngFor=\"let field of model.displayedFields$ | async\">\n                <span class=\"rx-record-preview-card__label\" *ngIf=\"field.data.label\">{{ field.data.label }}</span>\n                <span *ngIf=\"field.data.label\">: </span>\n                <span class=\"rx-record-preview-card__value\">{{ field.data.name }}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div [attr.aria-label]=\"model.label$ | async\">\n      <adapt-rx-select [label]=\"model.label$ | async\" [disabled]=\"true\" ngModel></adapt-rx-select>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i3__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe, "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociationDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-association-field-design',
                        templateUrl: './association-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var AssociationRecordFieldSelectorEditorDialogComponent = /** @class */ (function (_super) {
        __extends(AssociationRecordFieldSelectorEditorDialogComponent, _super);
        function AssociationRecordFieldSelectorEditorDialogComponent(rxStringService, rxGuidService, activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.rxStringService = rxStringService;
            _this.rxGuidService = rxGuidService;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.availableFieldTreeNodes = [];
            _this.canSave = false;
            _this.selectedFields = [];
            _this.treeWrap = i1.TreeWrap.WrapAll;
            _this.config = _this.activeModalRef.getData();
            return _this;
        }
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.isDirty = function () {
            return this.canSave;
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.fieldLabelsMap = lodash.transform(this.config.fields, function (result, field) {
                result[field.id] = field.name;
            }, {});
            this.availableFieldTreeNodes = this.config.fields
                .map(function (field) { return ({
                data: field,
                label: field.name
            }); })
                .sort(function (field1, field2) { return field1.label.localeCompare(field2.label); });
            this.selectedFields = lodash.map(this.config.selectedFields, function (field) {
                var descriptor = _this.config.fields.find(function (fieldItem) { return fieldItem.id === Number(field.data.fieldId); });
                return Object.assign(Object.assign({}, field), { labelText: field.data.label, indexOrder: Number(field.data.index), descriptor: descriptor, isOpen: field === _this.config.fieldToEdit });
            });
            this.refreshFieldDescriptorsList();
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.addField = function (field) {
            this.canSave = true;
            this.selectedFields.push({
                guid: this.rxGuidService.generate(),
                data: {
                    fieldId: String(field.id),
                    label: field.name,
                    index: String(this.selectedFields.length)
                },
                descriptor: field,
                labelText: field.name,
                indexOrder: this.selectedFields.length,
                isOpen: true
            });
            this.refreshFieldDescriptorsList();
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.onSelectedFieldsListDrop = function (event) {
            this.addField(event.item.data);
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.onSave = function () {
            var result = this.selectedFields.map(function (field) {
                return {
                    guid: field.guid,
                    type: 'rx-associated-record-field',
                    data: {
                        fieldId: field.data.fieldId,
                        index: String(field.indexOrder),
                        label: field.labelText
                    }
                };
            });
            this.activeModalRef.close(result);
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.onRemove = function (field) {
            this.canSave = true;
            lodash.pull(this.selectedFields, field);
            this.refreshFieldDescriptorsList();
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.onMoveUp = function (field, index) {
            this.canSave = true;
            var prevField = this.selectedFields[index - 1];
            if (prevField) {
                prevField.indexOrder++;
                field.indexOrder--;
                this.sortFields();
            }
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.onMoveDown = function (field, index) {
            this.canSave = true;
            var nextAction = this.selectedFields[index + 1];
            if (nextAction) {
                nextAction.indexOrder--;
                field.indexOrder++;
                this.sortFields();
            }
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.toggleOpen = function (expandAll) {
            this.selectedFields.forEach(function (field) { return (field.isOpen = expandAll); });
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.sortFields = function () {
            this.selectedFields = lodash.sortBy(this.selectedFields, function (field) { return field.indexOrder; });
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.refreshFieldDescriptorsList = function () {
            var selectedFieldIds = this.selectedFields.map(function (field) { return String(field.data.fieldId); });
            this.filteredFieldDescriptors = this.config.fields
                .filter(function (fieldDescriptor) { return !lodash.includes(selectedFieldIds, String(fieldDescriptor.id)); })
                .sort(function (field1, field2) { return field1.name.localeCompare(field2.name); });
        };
        AssociationRecordFieldSelectorEditorDialogComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        return AssociationRecordFieldSelectorEditorDialogComponent;
    }(i1$6.RxModalClass));
    AssociationRecordFieldSelectorEditorDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogComponent, deps: [{ token: i2__namespace$1.RxStringService }, { token: i2__namespace$1.RxGuidService }, { token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AssociationRecordFieldSelectorEditorDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AssociationRecordFieldSelectorEditorDialogComponent, selector: "rx-association-record-field-selector-editor-dialog", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!config.isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Available fields</h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block\">\n          <div\n            *ngIf=\"availableFieldTreeNodes.length; else adaptTreeEmptyStateTemplate\"\n            cdkDropList\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selected-fields']\"\n          >\n            <adapt-tree [value]=\"availableFieldTreeNodes\" filter=\"true\" [wrap]=\"treeWrap\">\n              <ng-template let-field adaptTreeNodeTemplate>\n                <div *ngIf=\"field.data\" class=\"rx-tree-draggable-node\" cdkDrag [cdkDragData]=\"field.data\">\n                  <div (dblclick)=\"addField(field.data)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addField(field.data)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ field.data.name }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <ng-template #adaptTreeEmptyStateTemplate>\n            <div class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n              <adapt-empty-state class=\"w-100\" label=\"No fields found\" type=\"search\"></adapt-empty-state>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ config.isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Selected fileds</h4>\n\n        <div *ngIf=\"selectedFields.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selected-fields\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedFieldsListDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let field of selectedFields; let index = index; let first = first; let last = last\"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragDisabled]=\"true\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"field.isOpen\"\n              (open)=\"field.isOpen = true\"\n              (close)=\"field.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"fieldLabelsMap[field.data.fieldId]\" rx-id=\"card-title\">\n                      {{ fieldLabelsMap[field.data.fieldId] }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); onMoveDown(field, index)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); onMoveUp(field, index)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"onRemove(field)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"text-aria-resize\"\n                label=\"Label\"\n                [(ngModel)]=\"field.labelText\"\n                (ngModelChange)=\"canSave = true\"\n              >\n              </adapt-rx-textfield>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!selectedFields.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state class=\"w-100\" label=\"No fields selected\" type=\"config\"></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!canSave\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i1__namespace.AdaptTreeNodeTemplateDirective, selector: "[adaptTreeNodeTemplate]", inputs: ["adaptTreeNodeTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-association-record-field-selector-editor-dialog',
                        templateUrl: './association-record-field-selector-editor-dialog.component.html',
                        styleUrls: ['./association-record-field-selector-editor-dialog.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxStringService }, { type: i2__namespace$1.RxGuidService }, { type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    var AssociationRecordFieldSelectorFormControlComponent = /** @class */ (function (_super) {
        __extends(AssociationRecordFieldSelectorFormControlComponent, _super);
        function AssociationRecordFieldSelectorFormControlComponent(rxModalService, renderer) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.renderer = renderer;
            _this.selectedFields = [];
            return _this;
        }
        AssociationRecordFieldSelectorFormControlComponent.prototype.focus = function () {
            this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.openFieldSelector = function (fieldToEdit) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: this.options.label,
                data: {
                    fields: this.options.fields,
                    selectedFields: this.value,
                    fieldToEdit: fieldToEdit,
                    isReadOnly: this.isDisabled
                },
                content: AssociationRecordFieldSelectorEditorDialogComponent
            })
                .then(function (fields) {
                _this.value = fields;
            })
                .catch(lodash.noop);
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.onSetValue = function () {
            this.updateSortedFieldList();
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.onWriteValue = function (value) {
            this.updateSortedFieldList();
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.removeField = function (guid) {
            this.value = this.value.filter(function (field) { return field.guid !== guid; });
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.editField = function (field) {
            this.openFieldSelector(field);
        };
        AssociationRecordFieldSelectorFormControlComponent.prototype.updateSortedFieldList = function () {
            var _this = this;
            this.selectedFields = lodash.sortBy(this.value, function (field) { return Number(field.data.index); }).map(function (field) { return (Object.assign(Object.assign({}, field), { label: _this.options.fields.find(function (fieldDefinition) { return fieldDefinition.id === Number(field.data.fieldId); }).name })); });
        };
        return AssociationRecordFieldSelectorFormControlComponent;
    }(i2.ValueAccessor));
    AssociationRecordFieldSelectorFormControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlComponent, deps: [{ token: i1__namespace$6.RxModalService }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AssociationRecordFieldSelectorFormControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AssociationRecordFieldSelectorFormControlComponent, selector: "rx-association-record-field-selector-form-control", inputs: { options: "options" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: AssociationRecordFieldSelectorFormControlComponent,
                multi: true
            }
        ], viewQueries: [{ propertyName: "openModalButton", first: true, predicate: ["openModalButton"], descendants: true, read: i0.ElementRef, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<button\n  #openModalButton\n  adapt-button\n  type=\"button\"\n  class=\"px-0 py-0\"\n  btn-type=\"tertiary\"\n  (click)=\"openFieldSelector()\"\n  [disabled]=\"isDisabled\"\n>\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  {{ options.label }}\n</button>\n\n<ul class=\"list-unstyled mb-0 mt-2\" *ngIf=\"selectedFields.length > 0\">\n  <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let field of selectedFields\">\n    <strong class=\"mr-auto\">{{ field.label }}</strong>\n\n    <button\n      class=\"d-icon-left-pencil p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"editField(field)\"\n    ></button>\n\n    <button\n      class=\"d-icon-left-cross_adapt p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"removeField(field.guid)\"\n    ></button>\n  </li>\n</ul>\n", components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-association-record-field-selector-form-control',
                        templateUrl: './association-record-field-selector-form-control.component.html',
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: AssociationRecordFieldSelectorFormControlComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxModalService }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], openModalButton: [{
                    type: i0.ViewChild,
                    args: ['openModalButton', { read: i0.ElementRef, static: true }]
                }] } });

    var AssociationRecordFieldSelectorEditorDialogModule = /** @class */ (function () {
        function AssociationRecordFieldSelectorEditorDialogModule() {
        }
        return AssociationRecordFieldSelectorEditorDialogModule;
    }());
    AssociationRecordFieldSelectorEditorDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AssociationRecordFieldSelectorEditorDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogModule, declarations: [AssociationRecordFieldSelectorEditorDialogComponent], imports: [i3.CommonModule,
            i1.AdaptRxSearchModule,
            i1.AdaptButtonModule,
            i1.AdaptAccordionModule,
            i2$4.FormsModule,
            i1.AdaptRxTextfieldModule,
            i8.DragDropModule,
            i1.AdaptTreeModule,
            i1.AdaptEmptyStateModule,
            i2$1.TranslateModule], exports: [AssociationRecordFieldSelectorEditorDialogComponent] });
    AssociationRecordFieldSelectorEditorDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogModule, imports: [[
                i3.CommonModule,
                i1.AdaptRxSearchModule,
                i1.AdaptButtonModule,
                i1.AdaptAccordionModule,
                i2$4.FormsModule,
                i1.AdaptRxTextfieldModule,
                i8.DragDropModule,
                i1.AdaptTreeModule,
                i1.AdaptEmptyStateModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorEditorDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AssociationRecordFieldSelectorEditorDialogComponent],
                        exports: [AssociationRecordFieldSelectorEditorDialogComponent],
                        entryComponents: [AssociationRecordFieldSelectorEditorDialogComponent],
                        imports: [
                            i3.CommonModule,
                            i1.AdaptRxSearchModule,
                            i1.AdaptButtonModule,
                            i1.AdaptAccordionModule,
                            i2$4.FormsModule,
                            i1.AdaptRxTextfieldModule,
                            i8.DragDropModule,
                            i1.AdaptTreeModule,
                            i1.AdaptEmptyStateModule,
                            i2$1.TranslateModule
                        ]
                    }]
            }] });

    var AssociationRecordFieldSelectorFormControlModule = /** @class */ (function () {
        function AssociationRecordFieldSelectorFormControlModule() {
        }
        return AssociationRecordFieldSelectorFormControlModule;
    }());
    AssociationRecordFieldSelectorFormControlModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AssociationRecordFieldSelectorFormControlModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlModule, declarations: [AssociationRecordFieldSelectorFormControlComponent], imports: [i3.CommonModule,
            i2$4.FormsModule,
            i1.AdaptButtonModule,
            i1.AdaptIconModule,
            AssociationRecordFieldSelectorEditorDialogModule], exports: [AssociationRecordFieldSelectorFormControlComponent] });
    AssociationRecordFieldSelectorFormControlModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlModule, imports: [[
                i3.CommonModule,
                i2$4.FormsModule,
                i1.AdaptButtonModule,
                i1.AdaptIconModule,
                AssociationRecordFieldSelectorEditorDialogModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRecordFieldSelectorFormControlModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AssociationRecordFieldSelectorFormControlComponent],
                        exports: [AssociationRecordFieldSelectorFormControlComponent],
                        entryComponents: [AssociationRecordFieldSelectorFormControlComponent],
                        imports: [
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i1.AdaptButtonModule,
                            i1.AdaptIconModule,
                            AssociationRecordFieldSelectorEditorDialogModule
                        ]
                    }]
            }] });

    var AssociationDesignHelperService = /** @class */ (function () {
        function AssociationDesignHelperService(rxRecordDefinitionCacheService, rxAssociationDefinitionDataPageService, rxGuidService, rxDefinitionNameService) {
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;
            this.rxGuidService = rxGuidService;
            this.rxDefinitionNameService = rxDefinitionNameService;
        }
        AssociationDesignHelperService.prototype.getDropdownModeInspectorControls = function (recordDefinitionField, associationDefinitionFilters) {
            var _this = this;
            return [
                {
                    name: 'fieldId',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Field to display',
                        options: recordDefinitionField
                            ? recordDefinitionField
                                .filter(function (associationDefinitionField) { return [
                                i1$4.RX_RECORD_DEFINITION.resourceTypes.character,
                                i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedCharacter
                            ].includes(associationDefinitionField.resourceType); })
                                .map(function (associationDefinitionField) { return ({
                                id: String(associationDefinitionField.id),
                                name: associationDefinitionField.name
                            }); })
                            : [],
                        emptyOption: true,
                        required: true
                    }
                },
                {
                    name: 'filterByAssociation',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Filter by association',
                        options: associationDefinitionFilters
                            ? associationDefinitionFilters.map(function (associationDefinition) { return ({
                                id: associationDefinition.name,
                                name: _this.rxDefinitionNameService.getDisplayName(associationDefinition.name)
                            }); })
                            : [],
                        emptyOption: true
                    }
                }
            ];
        };
        AssociationDesignHelperService.prototype.getDisplayedFieldsControl = function (recordDefinitionFields) {
            return {
                name: 'displayedFields',
                component: AssociationRecordFieldSelectorFormControlComponent,
                options: {
                    label: 'Show/Hide fields',
                    fields: recordDefinitionFields,
                    required: true
                }
            };
        };
        AssociationDesignHelperService.prototype.getRecordIdControl = function () {
            return {
                name: 'recordId',
                component: i2.ExpressionInspectorControlComponent,
                options: {
                    label: 'Record ID',
                    isRequired: true
                }
            };
        };
        AssociationDesignHelperService.prototype.getUseDefaultRolesControl = function () {
            return {
                name: 'useDefaultRoles',
                component: i2.SwitchFormControlComponent,
                options: {
                    label: 'Use default roles'
                }
            };
        };
        AssociationDesignHelperService.prototype.getNodeABRoleControls = function () {
            return [
                {
                    name: 'nodeARole',
                    component: i2.ExpressionInspectorControlComponent,
                    options: {
                        label: 'First record role'
                    }
                },
                {
                    name: 'nodeBRole',
                    component: i2.ExpressionInspectorControlComponent,
                    options: {
                        label: 'Second record role'
                    }
                }
            ];
        };
        AssociationDesignHelperService.prototype.getViewModeInspectorControls = function () {
            return [
                {
                    name: 'viewDefinitionNameForSelect',
                    component: i2.RxDefinitionPickerComponent,
                    options: {
                        label: 'View for selecting associated records',
                        definitionType: i2.RxDefinitionPickerType.View,
                        required: true
                    }
                },
                {
                    name: 'viewDefinitionNameForCreate',
                    component: i2.RxDefinitionPickerComponent,
                    options: {
                        label: 'View for creating associated records',
                        definitionType: i2.RxDefinitionPickerType.View
                    }
                }
            ];
        };
        AssociationDesignHelperService.prototype.getInitialInspectorControls = function (expressionConfigurator) {
            return __spreadArray([
                {
                    name: 'label',
                    component: i2.TextFormControlComponent,
                    options: {
                        label: 'Display label'
                    }
                },
                i1$3.getDisabledFieldInspectorConfig()
            ], __read(i1$3.getStandardPropsInspectorConfigs()));
        };
        AssociationDesignHelperService.prototype.getInitialProperties = function () {
            return Object.assign(Object.assign({ associatedRecordNodeSide: '', associationDefinitionName: '', displayedFields: [], editingMode: exports.RxAssociationEditingMode.Views, fieldId: null, filterByAssociation: '', label: null, nodeARole: '', nodeBRole: '', recordDefinition: '', recordDefinitionName: '', recordId: '', recordInstance: '', useDefaultRoles: true, viewDefinitionNameForCreate: '', viewDefinitionNameForSelect: '' }, i1$1.RX_DISABLED_PROP_DEFAULT_VALUE), i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES);
        };
        AssociationDesignHelperService.prototype.getActionButtonDefinition = function (componentProperties, action, parentGuid) {
            return {
                type: i1$1.RxViewComponentType.ActionButton,
                guid: this.rxGuidService.generate(),
                propertiesByName: {
                    labelKey: action === RX_ASSOCIATION.actions.associate
                        ? 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.associate.label'
                        : 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.create-new.label',
                    style: 'secondary',
                    action: action
                },
                children: [
                    {
                        guid: this.rxGuidService.generate(),
                        type: i1$1.RxViewComponentType.Action,
                        propertiesByName: {
                            name: 'rxAvcAssociate',
                            associationViewComponent: "${view.components." + parentGuid + ".api}",
                            viewDefinitionName: action === RX_ASSOCIATION.actions.associate
                                ? componentProperties.viewDefinitionNameForSelect
                                : componentProperties.viewDefinitionNameForCreate
                        }
                    }
                ],
                insertIndex: action === RX_ASSOCIATION.actions.associate ? 0 : 1
            };
        };
        AssociationDesignHelperService.prototype.isCardinalityOne = function (componentProperties, associationDefinitions) {
            var associationDefinition = associationDefinitions.find(function (association) { return association.name === componentProperties.associationDefinitionName; });
            return Boolean(associationDefinition &&
                (associationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value ||
                    (associationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value &&
                        componentProperties.associatedRecordNodeSide === i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value)));
        };
        AssociationDesignHelperService.prototype.getAvailableAssociations = function (firstRecordDefinitionName, secondRecordDefinitionName) {
            var getParametersForAssociation = {
                headers: { 'default-bundle-scope': '' },
                params: { firstRecordDefinitionName: firstRecordDefinitionName, secondRecordDefinitionName: secondRecordDefinitionName, requireDependent: true }
            };
            return this.rxAssociationDefinitionDataPageService
                .get(getParametersForAssociation)
                .pipe(operators.map(function (response) { return response.data; }));
        };
        AssociationDesignHelperService.prototype.getRecordDefinition = function (recordDefinitionToAssociateName) {
            return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionToAssociateName);
        };
        AssociationDesignHelperService.prototype.getFieldsInChildComponentsWithNames = function (components, availableFields) {
            return components.reduce(function (acc, definition) {
                var fieldDescriptor = availableFields.find(function (fieldDescriptorItem) { return fieldDescriptorItem.id === Number(definition.data.fieldId); });
                acc.push(Object.assign(Object.assign({}, definition), { data: Object.assign(Object.assign({}, definition.data), { name: fieldDescriptor ? fieldDescriptor.name : definition.data.label }) }));
                return acc;
            }, []);
        };
        AssociationDesignHelperService.prototype.cleanEditingModeDependentData = function (componentProperties) {
            if (componentProperties.editingMode === exports.RxAssociationEditingMode.Dropdown) {
                componentProperties.viewDefinitionNameForSelect = null;
                componentProperties.viewDefinitionNameForCreate = null;
                componentProperties.displayedFields = [];
            }
            else {
                componentProperties.filterByAssociation = null;
                componentProperties.recordId = null;
                componentProperties.fieldId = null;
            }
        };
        AssociationDesignHelperService.prototype.getNodeSideOptions = function (associationDefinition) {
            return associationDefinition.nodeAId === associationDefinition.nodeBId
                ? [
                    {
                        id: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,
                        name: associationDefinition.nodeAName || i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName
                    },
                    {
                        id: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                        name: associationDefinition.nodeBName || i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName
                    }
                ]
                : [];
        };
        AssociationDesignHelperService.prototype.resetRolesData = function (componentProperties) {
            componentProperties.useDefaultRoles = false;
            componentProperties.nodeARole = null;
            componentProperties.nodeBRole = null;
        };
        AssociationDesignHelperService.prototype.validate = function (sandbox, properties, associationDefinition, childComponents) {
            var validationIssues = [];
            if (!properties.recordDefinitionName) {
                validationIssues.push(sandbox.createError('Record definition to associate cannot be blank.', 'recordDefinitionName'));
            }
            if (properties.recordDefinitionName && !properties.associationDefinitionName) {
                validationIssues.push(sandbox.createError('Association to Use cannot be blank.', 'associationDefinitionName'));
            }
            if (properties.associationDefinitionName) {
                if (associationDefinition.nodeAId === associationDefinition.nodeBId && !properties.associatedRecordNodeSide) {
                    validationIssues.push(sandbox.createError('Associated Record Node Side cannot be blank.', 'fieldId'));
                }
            }
            if (properties.editingMode === exports.RxAssociationEditingMode.Views || !properties.editingMode) {
                if (properties.recordDefinitionName && childComponents.displayedFields.length === 0) {
                    validationIssues.push(sandbox.createError('Preview Fields cannot be empty.', 'displayedFields'));
                }
                if (!properties.viewDefinitionNameForSelect) {
                    validationIssues.push(sandbox.createError('View for selecting associated records cannot be blank.', 'viewDefinitionNameForSelect'));
                }
            }
            else if (properties.editingMode === exports.RxAssociationEditingMode.Dropdown) {
                if (properties.filterByAssociation && !childComponents.recordId) {
                    validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordId'));
                }
                if (!properties.fieldId) {
                    validationIssues.push(sandbox.createError('Field to display cannot be blank.', 'fieldId'));
                }
            }
            validationIssues.push.apply(validationIssues, __spreadArray([], __read(i1$3.validateStandardProps(properties))));
            return validationIssues;
        };
        return AssociationDesignHelperService;
    }());
    AssociationDesignHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignHelperService, deps: [{ token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i2__namespace$4.RxAssociationDefinitionDataPageService }, { token: i2__namespace$1.RxGuidService }, { token: i1__namespace$1.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AssociationDesignHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignHelperService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignHelperService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i2__namespace$4.RxAssociationDefinitionDataPageService }, { type: i2__namespace$1.RxGuidService }, { type: i1__namespace$1.RxDefinitionNameService }]; } });

    var AssociationDesignAdapterService = /** @class */ (function () {
        function AssociationDesignAdapterService() {
        }
        AssociationDesignAdapterService.prototype.adaptDefinition = function (componentDefinition) {
            var _a, _b, _c, _d, _e;
            // If a view from old view designer gets opened we have to add a layout with
            // action button guids, so they can be rendered inside association view component.
            if (!componentDefinition.layout) {
                var actionButtonGuids = componentDefinition.componentDefinitions
                    .filter(function (definition) { return definition.type === i1$1.RxViewComponentType.ActionButton; })
                    .map(function (definition) { return definition.guid; });
                componentDefinition.layout = JSON.stringify({
                    outlets: [
                        {
                            name: i1$1.RX_VIEW_DEFINITION.defaultOutletName,
                            columns: [
                                {
                                    children: actionButtonGuids
                                }
                            ]
                        }
                    ]
                });
            }
            var adaptedProperties = {
                editingMode: (_a = componentDefinition.propertiesByName.editingMode) !== null && _a !== void 0 ? _a : exports.RxAssociationEditingMode.Views,
                nodeARole: (_b = componentDefinition.propertiesByName.nodeARole) !== null && _b !== void 0 ? _b : null,
                nodeBRole: (_c = componentDefinition.propertiesByName.nodeBRole) !== null && _c !== void 0 ? _c : null,
                styles: (_d = componentDefinition.propertiesByName.styles) !== null && _d !== void 0 ? _d : null,
                useDefaultRoles: (_e = componentDefinition.propertiesByName.useDefaultRoles) !== null && _e !== void 0 ? _e : false
            };
            Object.assign(componentDefinition.propertiesByName, adaptedProperties);
        };
        return AssociationDesignAdapterService;
    }());
    AssociationDesignAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignAdapterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AssociationDesignAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignAdapterService, decorators: [{
                type: i0.Injectable
            }] });

    var AssociationDesignModule = /** @class */ (function () {
        function AssociationDesignModule(associationDesignAdapterService, rxDefinitionAdapterRegistryService) {
            rxDefinitionAdapterRegistryService.registerDesignAdapter(i1$1.RxViewComponentType.Association, associationDesignAdapterService);
        }
        return AssociationDesignModule;
    }());
    AssociationDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignModule, deps: [{ token: AssociationDesignAdapterService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AssociationDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignModule, declarations: [RxAssociationDesignComponent, RxAssociationDesignContainerComponent], imports: [i3.CommonModule,
            i1.AdaptButtonModule,
            i2$1.TranslateModule,
            AssociationRecordFieldSelectorFormControlModule,
            i1.AdaptRxSelectModule,
            i2$4.FormsModule,
            i1.AdaptEmptyStateModule,
            i1$3.ViewDesignerCanvasModule] });
    AssociationDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignModule, providers: [AssociationDesignHelperService, AssociationDesignAdapterService], imports: [[
                i3.CommonModule,
                i1.AdaptButtonModule,
                i2$1.TranslateModule,
                AssociationRecordFieldSelectorFormControlModule,
                i1.AdaptRxSelectModule,
                i2$4.FormsModule,
                i1.AdaptEmptyStateModule,
                i1$3.ViewDesignerCanvasModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1.AdaptButtonModule,
                            i2$1.TranslateModule,
                            AssociationRecordFieldSelectorFormControlModule,
                            i1.AdaptRxSelectModule,
                            i2$4.FormsModule,
                            i1.AdaptEmptyStateModule,
                            i1$3.ViewDesignerCanvasModule
                        ],
                        declarations: [RxAssociationDesignComponent, RxAssociationDesignContainerComponent],
                        entryComponents: [RxAssociationDesignComponent],
                        providers: [AssociationDesignHelperService, AssociationDesignAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: AssociationDesignAdapterService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }]; } });

    var RX_BASE_FIELD_PROPERTIES = [
        'api',
        'disabled',
        'recordDefinition',
        'recordInstance',
        'hidden',
        'inReadState',
        'value'
    ].map(function (propertyName) {
        var result = {
            name: propertyName,
            enableExpressionEvaluation: true
        };
        if (['hidden', 'disabled'].includes(propertyName)) {
            result.type = i1$1.ViewComponentPropertyType.Boolean;
        }
        return result;
    });
    RX_BASE_FIELD_PROPERTIES.push({
        name: 'label',
        localizable: true
    }, {
        name: 'fieldId'
    }, i1$1.RX_AVAILABLE_ON_DEVICES_PROP_DESC);

    var RX_FIELD_COMPONENTS = {
        stencilGroupName: 'Record editor inputs'
    };

    var AssociationDesignModel = /** @class */ (function (_super) {
        __extends(AssociationDesignModel, _super);
        function AssociationDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.rxAssociationDefinitionCacheService = _this.injector.get(i2$5.RxAssociationDefinitionCacheService);
            _this.rxGuidService = _this.injector.get(i2$2.RxGuidService);
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.associationDesignHelperService = _this.injector.get(AssociationDesignHelperService);
            _this.updateInspector$ = new rxjs.Subject();
            _this.childComponents$ = _this.sandbox.getChildComponentsTree();
            _this.associationChildComponentsData$ = _this.getChildComponentsData();
            _this.associationDefinitions = [];
            _this.associationDefinitionFilters = [];
            _this.recordDefinitionFields = [];
            _this.associatedRecordNodeSide = [];
            _this.isManyToManyAssociation = false;
            _this.editingMode$ = _this.sandbox.getComponentPropertyValue('editingMode');
            _this.label$ = _this.sandbox.getComponentPropertyValue('label');
            // TODO: performance
            _this.updateInspector$
                .pipe(operators.distinctUntilChanged(lodash.isEqual), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (inspector) {
                _this.sandbox.updateInspectorConfig(inspector);
            });
            var recordDefinitionName$ = sandbox.getComponentPropertyValue('recordDefinitionName');
            var recordDefinitionFields$ = recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) { return recordDefinitionName ? _this.updateRecordDefinitionFields(recordDefinitionName) : rxjs.of([]); }));
            _this.displayedFields$ = rxjs.combineLatest([
                _this.sandbox.getChildComponents(function (component) { return component.type === RX_ASSOCIATION.componentTypes.associatedRecordField; }),
                recordDefinitionFields$
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 2), components = _d[0], availableFields = _d[1];
                return _this.associationDesignHelperService.getFieldsInChildComponentsWithNames(components, availableFields);
            }));
            _this.recordEditorGuid$ = _this.sandbox.getParentComponentGuid(i1$1.RxViewComponentType.RecordEditor).pipe(operators.take(1));
            _this.otherAssociationRecordEditorComponentGuids$ = _this.recordEditorGuid$.pipe(operators.map(function (guid) { return _this.sandbox.getComponentModel(guid); }), operators.switchMap(function (model) { return model.associationComponentGuids$.pipe(operators.map(function (guids) { return guids.filter(function (guid) { return guid !== _this.sandbox.guid; }); })); }), operators.shareReplay(1), operators.takeUntil(_this.sandbox.destroyed$));
            _this.recordDefinitionNameFromHostRecordEditor$ = _this.recordEditorGuid$.pipe(operators.switchMap(function (recordEditorGuid) {
                return _this.sandbox.getComponentPropertyValue('recordDefinitionName', recordEditorGuid);
            }), operators.shareReplay(1));
            _this.recordDefinitionNameFromHostRecordEditor$
                .pipe(operators.switchMap(function (recordDefinitionRecordEditorName) { return recordDefinitionRecordEditorName
                ? rxjs.combineLatest([_this.sandbox.componentProperties$, _this.associationChildComponentsData$]).pipe(operators.switchMap(function (_c) {
                    var _d = __read(_c, 2), componentProperties = _d[0], associationChildComponentsData = _d[1];
                    var updateParameters = recordDefinitionRecordEditorName
                        ? _this.generateInitialUpdateParameters(componentProperties)
                        : [];
                    var updateParameters$ = updateParameters.length > 0 ? rxjs.combineLatest(updateParameters) : rxjs.of(null);
                    return updateParameters$.pipe(operators.map(function () { return ({
                        componentProperties: Object.assign(Object.assign({}, associationChildComponentsData), componentProperties),
                        recordDefinitionRecordEditorName: recordDefinitionRecordEditorName
                    }); }));
                }), operators.take(1))
                : rxjs.of({
                    componentProperties: null,
                    recordDefinitionRecordEditorName: null
                }); }), operators.withLatestFrom(_this.recordEditorGuid$), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), _e = _d[0], componentProperties = _e.componentProperties, recordDefinitionRecordEditorName = _e.recordDefinitionRecordEditorName, recordEditorGuid = _d[1];
                var initialProperties = _this.associationDesignHelperService.getInitialProperties();
                var properties = Object.assign(Object.assign(Object.assign({}, initialProperties), componentProperties), { useDefaultRoles: Boolean((componentProperties === null || componentProperties === void 0 ? void 0 : componentProperties.useDefaultRoles) === 'true') });
                _this.recordEditorGuid = recordEditorGuid;
                _this.sandbox.updateComponentProperties(properties);
                _this.updateInspector$.next(_this.getInspectorConfig(properties, recordDefinitionRecordEditorName, recordEditorGuid));
            });
            var childComponentGuids$ = _this.childComponents$.pipe(operators.map(function (components) { return components.map(function (component) { return component.guid; }); }));
            _this.sandbox
                .getComponentPropertyValue('recordDefinitionName')
                .pipe(operators.skip(1), operators.withLatestFrom(childComponentGuids$), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), recordDefinitionName = _d[0], childComponentGuids = _d[1];
                _this.sandbox.updateComponentProperties({
                    recordDefinitionName: recordDefinitionName,
                    label: null,
                    associationDefinitionName: null,
                    associatedRecordNodeSide: null,
                    editingMode: exports.RxAssociationEditingMode.Views,
                    viewDefinitionNameForSelect: null,
                    viewDefinitionNameForCreate: null,
                    fieldId: null,
                    useDefaultRoles: false,
                    nodeARole: null,
                    nodeBRole: null,
                    displayedFields: [],
                    filterByAssociation: null,
                    recordId: null
                });
                _this.sandbox.removeComponents(childComponentGuids);
            });
            _this.sandbox
                .getComponentPropertyValue('recordDefinitionName')
                .pipe(operators.skip(1), operators.concatMapTo(_this.sandbox.componentProperties$), operators.concatMap(function (props) { return rxjs.combineLatest([
                _this.updateAssociationDefinitionsOptions(props.recordDefinitionName),
                _this.updateRecordDefinitionFields(props.recordDefinitionName),
                _this.updateAssociationDefinitionsFilterOptions(props.recordDefinitionName),
                _this.updateAssociationNodeSideOptions(props.associationDefinitionName),
                _this.updatePreviousDropdownFieldDefinition(props.recordDefinitionName, props.fieldId)
            ]).pipe(operators.take(1), operators.mapTo(props)); }), operators.withLatestFrom(_this.recordDefinitionNameFromHostRecordEditor$, _this.recordEditorGuid$), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 3), componentProps = _d[0], recordDefinitionNameFromHostRecordEditor = _d[1], recordEditorGuid = _d[2];
                _this.updateInspector$.next(_this.getInspectorConfig(componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid));
            });
            _this.sandbox
                .getComponentPropertyValue('editingMode')
                .pipe(operators.skip(1), operators.withLatestFrom(childComponentGuids$), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 2), editingMode = _d[0], childComponentGuids = _d[1];
                _this.sandbox.updateComponentProperties({
                    editingMode: editingMode,
                    viewDefinitionNameForSelect: null,
                    viewDefinitionNameForCreate: null,
                    fieldId: null,
                    useDefaultRoles: false,
                    nodeARole: null,
                    nodeBRole: null,
                    displayedFields: [],
                    filterByAssociation: null,
                    recordId: null
                });
                _this.sandbox.removeComponents(childComponentGuids);
            });
            _this.sandbox.componentProperties$
                .pipe(operators.skip(1), operators.pairwise(), operators.withLatestFrom(_this.childComponents$), operators.switchMap(function (_c) {
                var _d = __read(_c, 2), _e = __read(_d[0], 2), previousProperties = _e[0], properties = _e[1], children = _d[1];
                var updatedProperties = Object.assign({}, properties);
                var updatedParametersStreams = [];
                switch (true) {
                    case previousProperties.viewDefinitionNameForSelect !== properties.viewDefinitionNameForSelect:
                        _this.updateChildActionButtonDefinition(properties, children, RX_ASSOCIATION.actions.associate);
                        break;
                    case previousProperties.viewDefinitionNameForCreate !== properties.viewDefinitionNameForCreate:
                        _this.updateChildActionButtonDefinition(properties, children, RX_ASSOCIATION.actions.createAndAssociate);
                        break;
                    case previousProperties.filterByAssociation !== properties.filterByAssociation:
                    case previousProperties.recordId !== properties.recordId:
                        var filterComponent = children.find(function (component) { return component.type === RX_ASSOCIATION.componentTypes.associationFilter; });
                        _this.updateAssociationFilterComponent(properties, filterComponent);
                        break;
                    case !lodash.isEqual(previousProperties.displayedFields, properties.displayedFields):
                        _this.updateComponentRecordFields(properties.displayedFields, children);
                        break;
                    case previousProperties.associationDefinitionName !== properties.associationDefinitionName:
                        updatedProperties.editingMode = exports.RxAssociationEditingMode.Views;
                        _this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);
                        if (properties.associationDefinitionName) {
                            updatedParametersStreams.push(_this.rxAssociationDefinitionCacheService
                                .getAssociationDefinition(properties.associationDefinitionName)
                                .pipe(operators.map(function (associationDefinition) {
                                updatedProperties.associatedRecordNodeSide =
                                    associationDefinition.nodeAId === properties.recordDefinitionName
                                        ? i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value
                                        : i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value;
                                _this.setIsManyToManyAssociation(associationDefinition);
                                _this.sandbox.updateComponentProperties(updatedProperties);
                                if (_this.isManyToManyAssociation) {
                                    _this.associationDesignHelperService.resetRolesData(updatedProperties);
                                }
                            })));
                        }
                        else {
                            _this.isManyToManyAssociation = false;
                        }
                        updatedParametersStreams.push(_this.updateAssociationNodeSideOptions(properties.associationDefinitionName));
                        break;
                    case previousProperties.associatedRecordNodeSide !== properties.associatedRecordNodeSide:
                        updatedProperties.editingMode = exports.RxAssociationEditingMode.Views;
                        _this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);
                        break;
                    case previousProperties.useDefaultRoles !== properties.useDefaultRoles:
                        if (properties.useDefaultRoles === true) {
                            updatedProperties.nodeARole = null;
                            updatedProperties.nodeBRole = null;
                        }
                        break;
                    case previousProperties.nodeARole !== properties.nodeARole ||
                        previousProperties.nodeBRole !== properties.nodeBRole:
                        if (lodash.isUndefined(properties.useDefaultRoles)) {
                            lodash.defaults(updatedProperties, {
                                nodeARole: null,
                                nodeBRole: null,
                                useDefaultRoles: false
                            });
                        }
                        else {
                            updatedProperties.useDefaultRoles = false;
                        }
                        break;
                }
                var updateParameters$ = updatedParametersStreams.length > 0 ? rxjs.combineLatest(updatedParametersStreams) : rxjs.of(null);
                return updateParameters$.pipe(operators.map(function (parameters) { return ({ parameters: parameters, componentProperties: updatedProperties }); }), operators.withLatestFrom(_this.recordDefinitionNameFromHostRecordEditor$, _this.recordEditorGuid$));
            }), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (_c) {
                var _d = __read(_c, 3), _e = _d[0], parameters = _e.parameters, componentProperties = _e.componentProperties, recordDefinitionNameFromHostRecordEditor = _d[1], recordEditorGuid = _d[2];
                var initialProperties = _this.associationDesignHelperService.getInitialProperties();
                _this.recordEditorGuid = recordEditorGuid;
                _this.updateInspector$.next(_this.getInspectorConfig(Object.assign(Object.assign({}, initialProperties), componentProperties), recordDefinitionNameFromHostRecordEditor, recordEditorGuid));
            });
            _this.sandbox
                .getComponentPropertyValue('fieldId')
                .pipe(
            // transform initial value to null if it is undefined
            operators.map(function (value) { return (lodash.isNil(value) ? null : value); }), operators.distinctUntilChanged(), operators.pairwise())
                .pipe(operators.withLatestFrom(_this.sandbox.componentProperties$), 
            // Check if editing mode is dropdown to prevent label reset after change fieldId to null.
            operators.filter(function (_c) {
                var _d = __read(_c, 2), fieldIds = _d[0], props = _d[1];
                return Boolean(props.editingMode === exports.RxAssociationEditingMode.Dropdown);
            }), operators.switchMap(function (_c) {
                var _d = __read(_c, 2), _e = __read(_d[0], 2), prevFieldId = _e[0], fieldId = _e[1], props = _d[1];
                return _this.associationDesignHelperService.getRecordDefinition(props.recordDefinitionName).pipe(operators.map(function (recordDefinition) {
                    var _a, _b;
                    var prevFieldDefinitionName = (_a = recordDefinition.fieldDefinitions.find(function (field) { return field.id === Number(prevFieldId); })) === null || _a === void 0 ? void 0 : _a.name;
                    var currentFieldDefinitionName = (_b = recordDefinition.fieldDefinitions.find(function (field) { return field.id === Number(fieldId); })) === null || _b === void 0 ? void 0 : _b.name;
                    // If the label is changed by user it must not be updated after fieldId change.
                    return !props.label || prevFieldDefinitionName === props.label ? currentFieldDefinitionName : props.label;
                }));
            }), operators.distinctUntilChanged(), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (label) {
                _this.sandbox.updateComponentProperties({ label: label });
            });
            rxjs.combineLatest([
                _this.sandbox.componentProperties$,
                _this.associationChildComponentsData$.pipe(operators.distinctUntilChanged(lodash.isEqual))
            ])
                .pipe(operators.switchMap(function (_c) {
                var _d = __read(_c, 2), componentProperties = _d[0], childComponents = _d[1];
                var association$ = componentProperties.associationDefinitionName
                    ? _this.rxAssociationDefinitionCacheService.getAssociationDefinition(componentProperties.associationDefinitionName)
                    : rxjs.of({});
                return association$.pipe(operators.map(function (associationDefinition) {
                    return _this.associationDesignHelperService.validate(_this.sandbox, componentProperties, associationDefinition, childComponents);
                }));
            }), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (validationIssues) {
                _this.sandbox.setValidationIssues(validationIssues);
            });
            rxjs.combineLatest([
                _this.label$,
                _this.sandbox
                    .getComponentPropertyValue('associationDefinitionName')
                    .pipe(operators.map(function (associationDefinitionName) { return associationDefinitionName ? _this.rxDefinitionNameService.getDisplayName(associationDefinitionName) : null; }))
            ])
                .pipe(operators.map(function (_c) {
                var _d = __read(_c, 2), label = _d[0], definitionDisplayName = _d[1];
                var componentName = _this.sandbox.descriptor.name;
                if (definitionDisplayName && label) {
                    componentName += " (" + definitionDisplayName + ": " + label + ")";
                }
                else if (definitionDisplayName || label) {
                    componentName += " (" + (definitionDisplayName || label) + ")";
                }
                return componentName;
            }), operators.distinctUntilChanged(), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (componentName) {
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Disabled',
                        expression: _this.getExpressionForProperty('disabled')
                    },
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
            return _this;
        }
        AssociationDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({}, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE), initialProperties);
        };
        AssociationDesignModel.prototype.getPropertiesByName = function (properties) {
            return lodash.omit(Object.assign(Object.assign({}, properties), { recordInstance: this.recordEditorGuid
                    ? "${view.components." + this.recordEditorGuid + ".recordInstance}"
                    : properties.recordInstance, recordDefinition: this.recordEditorGuid
                    ? "${view.components." + this.recordEditorGuid + ".recordDefinition}"
                    : properties.recordDefinition }), [
                'displayedFields',
                'filterByAssociation',
                'recordId',
                'viewDefinitionNameForSelect',
                'viewDefinitionNameForCreate'
            ]);
        };
        AssociationDesignModel.prototype.updateAssociationFilterComponent = function (componentProperties, filterComponent) {
            if (filterComponent) {
                this.sandbox.removeComponents([filterComponent.guid]);
            }
            if (componentProperties.filterByAssociation) {
                var filterNew = {
                    guid: this.rxGuidService.generate(),
                    type: RX_ASSOCIATION.componentTypes.associationFilter,
                    propertiesByName: {
                        associationDefinitionName: componentProperties.filterByAssociation,
                        recordInstanceId: componentProperties.recordId
                    }
                };
                this.sandbox.addComponent([filterNew]);
            }
        };
        AssociationDesignModel.prototype.updateChildActionButtonDefinition = function (properties, children, action) {
            var actionButtonComponent = children.find(function (component) { return component.type === i1$1.RxViewComponentType.ActionButton && component.data['action'] === action; });
            var viewDefinitionNameToUpdate = action === RX_ASSOCIATION.actions.createAndAssociate
                ? properties.viewDefinitionNameForCreate
                : properties.viewDefinitionNameForSelect;
            if (actionButtonComponent) {
                this.sandbox.removeComponents([actionButtonComponent.guid]);
            }
            if (viewDefinitionNameToUpdate) {
                var button = this.associationDesignHelperService.getActionButtonDefinition(properties, action, this.sandbox['guid']);
                this.sandbox.addComponent([button]);
            }
        };
        AssociationDesignModel.prototype.updateComponentRecordFields = function (displayedFields, children) {
            var _this = this;
            var guids = children
                .filter(function (component) { return component.type === RX_ASSOCIATION.componentTypes.associatedRecordField; })
                .map(function (component) { return component.guid; });
            var recordFields = displayedFields.map(function (field) { return ({
                type: RX_ASSOCIATION.componentTypes.associatedRecordField,
                guid: _this.rxGuidService.generate(),
                propertiesByName: {
                    fieldId: field.data.fieldId,
                    label: field.data.label || '',
                    index: field.data.index
                }
            }); });
            if (guids.length > 0) {
                this.sandbox.removeComponents(guids);
            }
            this.sandbox.addComponent(recordFields);
        };
        AssociationDesignModel.prototype.getChildComponentsData = function () {
            var _this = this;
            return this.childComponents$.pipe(operators.map(function (components) {
                var _a, _b;
                var associationChildComponentsData = {};
                var associationFilters = components.filter(function (component) { return component.type === RX_ASSOCIATION.componentTypes.associationFilter; });
                associationChildComponentsData.displayedFields = components.filter(function (definition) { return definition.type === RX_ASSOCIATION.componentTypes.associatedRecordField; });
                if (associationFilters.length > 0) {
                    associationChildComponentsData.recordId = (_a = associationFilters[0].data) === null || _a === void 0 ? void 0 : _a.recordInstanceId;
                    associationChildComponentsData.filterByAssociation = (_b = associationFilters[0].data) === null || _b === void 0 ? void 0 : _b.associationDefinitionName;
                }
                var createAndAssociateView = _this.getViewDefinitionNameForAssociation(components, RX_ASSOCIATION.actions.createAndAssociate);
                if (createAndAssociateView) {
                    associationChildComponentsData.viewDefinitionNameForCreate = createAndAssociateView;
                }
                var associateView = _this.getViewDefinitionNameForAssociation(components, RX_ASSOCIATION.actions.associate);
                if (associateView) {
                    associationChildComponentsData.viewDefinitionNameForSelect = associateView;
                }
                return associationChildComponentsData;
            }));
        };
        AssociationDesignModel.prototype.generateInitialUpdateParameters = function (componentProperties) {
            var _this = this;
            var updateParameters = [];
            if (componentProperties.recordDefinitionName) {
                updateParameters.push(this.updateRecordDefinitionFields(componentProperties.recordDefinitionName));
                if (componentProperties.fieldId) {
                    updateParameters.push(this.updatePreviousDropdownFieldDefinition(componentProperties.recordDefinitionName, componentProperties.fieldId));
                }
                updateParameters.push(this.updateAssociationDefinitionsOptions(componentProperties.recordDefinitionName));
            }
            if (componentProperties.associationDefinitionName) {
                updateParameters.push(this.updateAssociationDefinitionsFilterOptions(componentProperties.recordDefinitionName));
                updateParameters.push(this.rxAssociationDefinitionCacheService
                    .getAssociationDefinition(componentProperties.associationDefinitionName)
                    .pipe(operators.map(function (associationDefinition) { return _this.setIsManyToManyAssociation(associationDefinition); })));
            }
            if (componentProperties.associatedRecordNodeSide) {
                updateParameters.push(this.updateAssociationNodeSideOptions(componentProperties.associationDefinitionName));
            }
            return updateParameters;
        };
        AssociationDesignModel.prototype.updatePreviousDropdownFieldDefinition = function (recordDefinitionToAssociateName, fieldId) {
            var _this = this;
            return this.updateRecordDefinitionFields(recordDefinitionToAssociateName).pipe(operators.map(function (fields) {
                return (_this.previousDropdownFieldDefinition = fields.find(function (field) { return field.id === Number(fieldId); }));
            }));
        };
        AssociationDesignModel.prototype.setIsManyToManyAssociation = function (associationDefinition) {
            if (associationDefinition) {
                this.isManyToManyAssociation =
                    associationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;
            }
        };
        AssociationDesignModel.prototype.getViewDefinitionNameForAssociation = function (components, action) {
            var actionButton = components.find(function (definition) { var _a; return ((_a = definition.data) === null || _a === void 0 ? void 0 : _a.action) === action; });
            return actionButton && actionButton.children ? this.getViewDefinitionNameFromActionButton(actionButton) : null;
        };
        AssociationDesignModel.prototype.getViewDefinitionNameFromActionButton = function (actionButton) {
            var actionComponent = actionButton.children.find(function (children) { return children.type === i1$1.RxViewComponentType.Action; });
            return lodash.get(actionComponent, 'data.viewDefinitionName', null);
        };
        AssociationDesignModel.prototype.updateRecordDefinitionFields = function (recordDefinitionToAssociateName) {
            var _this = this;
            return (recordDefinitionToAssociateName
                ? this.associationDesignHelperService
                    .getRecordDefinition(recordDefinitionToAssociateName)
                    .pipe(operators.map(function (recordDefinition) { return recordDefinition.fieldDefinitions; }))
                : rxjs.of([])).pipe(operators.tap(function (fieldDefinitions) { return (_this.recordDefinitionFields = fieldDefinitions); }));
        };
        AssociationDesignModel.prototype.updateAssociationNodeSideOptions = function (associationDefinitionName) {
            var _this = this;
            var associatedRecordNodeSideOptions$ = associationDefinitionName
                ? this.rxAssociationDefinitionCacheService
                    .getAssociationDefinition(associationDefinitionName)
                    .pipe(operators.map(function (associationDefinition) { return _this.associationDesignHelperService.getNodeSideOptions(associationDefinition); }))
                : rxjs.of([]);
            return associatedRecordNodeSideOptions$.pipe(operators.tap(function (associatedRecordNodeSideOptions) { return (_this.associatedRecordNodeSide = associatedRecordNodeSideOptions); }));
        };
        AssociationDesignModel.prototype.updateAssociationDefinitionsOptions = function (recordDefinitionToAssociateName) {
            var _this = this;
            return this.recordDefinitionNameFromHostRecordEditor$.pipe(operators.switchMap(function (associatedRecordName) { return recordDefinitionToAssociateName && associatedRecordName
                ? _this.associationDesignHelperService.getAvailableAssociations(recordDefinitionToAssociateName, associatedRecordName)
                : rxjs.of([]); }), operators.tap(function (associationDefinitionOptions) { return (_this.associationDefinitions = associationDefinitionOptions); }));
        };
        AssociationDesignModel.prototype.updateAssociationDefinitionsFilterOptions = function (recordDefinitionToAssociateName) {
            var _this = this;
            return this.otherAssociationRecordEditorComponentGuids$.pipe(operators.mergeMap(function (guids) { return guids.length
                ? rxjs.combineLatest(guids.map(function (guid) { return _this.sandbox.getComponentPropertyValue('recordDefinitionName', guid); })).pipe(operators.take(1))
                : rxjs.of([]); }), operators.switchMap(function (associatedRecordNames) { return associatedRecordNames.length && recordDefinitionToAssociateName
                ? rxjs.merge.apply(void 0, __spreadArray([], __read(associatedRecordNames.map(function (associatedRecordName) { return _this.associationDesignHelperService.getAvailableAssociations(recordDefinitionToAssociateName, associatedRecordName); })))) : rxjs.of([]); }), operators.map(function (associationDefinitionFilters) { return (_this.associationDefinitionFilters = associationDefinitionFilters); }));
        };
        AssociationDesignModel.prototype.getInspectorConfig = function (properties, recordDefinitionNameFromHostRecordEditor, recordEditorGuid) {
            var _this = this;
            var inspectorConfig = {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: []
                    }
                ]
            };
            if (recordDefinitionNameFromHostRecordEditor) {
                var generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;
                generalSectionControls.push({
                    name: 'recordDefinitionName',
                    component: i2.RxDefinitionPickerComponent,
                    options: {
                        label: 'Record definition to associate',
                        definitionType: i2.RxDefinitionPickerType.StandardDataRecord,
                        required: true
                    }
                });
                if (properties.recordDefinitionName) {
                    generalSectionControls.push({
                        name: 'associationDefinitionName',
                        component: i2.SelectFormControlComponent,
                        options: {
                            label: 'Association to use',
                            options: this.associationDefinitions.map(function (associationDefinition) { return ({
                                id: associationDefinition.name,
                                name: _this.rxDefinitionNameService.getDisplayName(associationDefinition.name)
                            }); }),
                            emptyOption: true,
                            required: true
                        }
                    });
                }
                if (properties.recordDefinitionName && this.associatedRecordNodeSide.length > 0) {
                    generalSectionControls.push({
                        name: 'associatedRecordNodeSide',
                        component: i2.SelectFormControlComponent,
                        options: {
                            label: 'Associated record node Side',
                            options: this.associatedRecordNodeSide,
                            required: true
                        }
                    });
                }
                if (properties.recordDefinitionName &&
                    this.associationDesignHelperService.isCardinalityOne(properties, this.associationDefinitions)) {
                    generalSectionControls.push({
                        name: 'editingMode',
                        component: i2.SelectFormControlComponent,
                        options: {
                            label: 'Association editing mode',
                            options: lodash.map(exports.RxAssociationEditingMode, function (id, name) { return ({ id: id, name: name }); }),
                            required: true
                        }
                    });
                }
                // View Mode
                if (!properties.editingMode || properties.editingMode === exports.RxAssociationEditingMode.Views) {
                    generalSectionControls.push.apply(generalSectionControls, __spreadArray([], __read(this.associationDesignHelperService.getViewModeInspectorControls())));
                    if (this.isManyToManyAssociation && properties.associationDefinitionName) {
                        generalSectionControls.push(this.associationDesignHelperService.getUseDefaultRolesControl());
                        if (!properties.useDefaultRoles) {
                            generalSectionControls.push.apply(generalSectionControls, __spreadArray([], __read(this.associationDesignHelperService.getNodeABRoleControls())));
                        }
                    }
                    if (properties.recordDefinitionName) {
                        generalSectionControls.push(this.associationDesignHelperService.getDisplayedFieldsControl(this.recordDefinitionFields));
                    }
                }
                // Dropdown Mode
                if (properties.editingMode === exports.RxAssociationEditingMode.Dropdown) {
                    generalSectionControls.push.apply(generalSectionControls, __spreadArray([], __read(this.associationDesignHelperService.getDropdownModeInspectorControls(this.recordDefinitionFields, this.associationDefinitionFilters))));
                    if (properties.filterByAssociation) {
                        generalSectionControls.push(this.associationDesignHelperService.getRecordIdControl());
                    }
                }
                generalSectionControls.push.apply(generalSectionControls, __spreadArray([], __read(this.associationDesignHelperService.getInitialInspectorControls(this.expressionConfigurator))));
            }
            else {
                inspectorConfig.inspectorSectionConfigs[0].controls = [
                    {
                        component: i2.ValidationFormControlComponent,
                        options: {
                            text: 'You must select a Record definition before editing field component.',
                            componentGuid: recordEditorGuid,
                            propertyName: 'recordDefinitionName'
                        }
                    }
                ];
            }
            return inspectorConfig;
        };
        return AssociationDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var AssociationExpressionConfigurator = /** @class */ (function (_super) {
        __extends(AssociationExpressionConfigurator, _super);
        function AssociationExpressionConfigurator(injector, componentGuid, componentModel) {
            var _this = _super.call(this, injector, componentGuid, componentModel) || this;
            _this.injector = injector;
            _this.componentGuid = componentGuid;
            _this.componentModel = componentModel;
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.configureForProperty({
                propertyPath: 'recordId',
                dataDictionary$: componentModel.recordEditorGuid$.pipe(operators.concatMap(function (recordEditorGuid) { return _this.getCommonDataDictionary(_this.getRecordEditorBranch(recordEditorGuid), recordEditorGuid); }))
            });
            return _this;
        }
        AssociationExpressionConfigurator.prototype.getRecordEditorBranch = function (recordEditorGuid) {
            var _this = this;
            var associationsBranch$ = this.componentModel.otherAssociationRecordEditorComponentGuids$.pipe(operators.switchMap(function (guids) { return guids.length
                ? rxjs.combineLatest(guids.map(function (guid) { return _this.componentModel.sandbox
                    .getComponentPropertyValue('associationDefinitionName', guid)
                    .pipe(operators.map(function (associationDefinitionName) { return ({
                    label: _this.rxDefinitionNameService.getDisplayName(associationDefinitionName),
                    children: [
                        {
                            label: 'First associated record',
                            children: [
                                {
                                    label: 'ID',
                                    expression: "${view.components." + guid + ".firstAssociatedRecord.id}"
                                }
                            ]
                        }
                    ]
                }); })); })).pipe(operators.map(function (children) { return ({
                    label: 'Associations',
                    children: children
                }); }))
                : rxjs.of(null); }));
            return this.getComponentCommonDataDictionary(recordEditorGuid).pipe(operators.switchMap(function (recordEditorBranch) { return associationsBranch$.pipe(operators.map(function (associationsBranch) { return associationsBranch
                ? Object.assign(Object.assign({}, recordEditorBranch), { children: __spreadArray([associationsBranch], __read(recordEditorBranch.children)) }) : recordEditorBranch; })); }));
        };
        return AssociationExpressionConfigurator;
    }(i1$3.RxViewComponentExpressionConfigurator));

    var AssociationRegistrationModule = /** @class */ (function () {
        function AssociationRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Association,
                isContainerComponent: true,
                designComponentModel: AssociationDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId,
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationDesignComponent),
                expressionConfigurator: AssociationExpressionConfigurator,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationComponent),
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                name: 'Association',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'arrow_schema',
                properties: RX_BASE_FIELD_PROPERTIES.concat({
                    name: 'recordInstance',
                    enableExpressionEvaluation: true
                }),
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ]
            }, {
                type: RX_ASSOCIATION.componentTypes.associationFilter,
                configPropertyName: 'associationFilter',
                properties: [
                    {
                        name: 'associationDefinitionName'
                    },
                    {
                        name: 'recordInstanceId',
                        enableExpressionEvaluation: true
                    }
                ],
                isDataComponent: true
            }, {
                type: RX_ASSOCIATION.componentTypes.associatedRecordField,
                configPropertyName: 'associatedRecordField',
                isDataComponent: true,
                properties: [
                    {
                        name: 'label',
                        localizable: true
                    }
                ]
            });
        }
        return AssociationRegistrationModule;
    }());
    AssociationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AssociationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRegistrationModule, imports: [AssociationModule, AssociationDesignModule] });
    AssociationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRegistrationModule, imports: [[AssociationModule, AssociationDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AssociationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [AssociationModule, AssociationDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var AttachmentFieldDesignComponent = /** @class */ (function () {
        function AttachmentFieldDesignComponent() {
        }
        return AttachmentFieldDesignComponent;
    }());
    AttachmentFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AttachmentFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AttachmentFieldDesignComponent, selector: "rx-attachment-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-uploader\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [ngModel]=\"[]\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-uploader>\n", styles: ["adapt-rx-uploader ::ng-deep .adapt-rx-uploader__restrict{display:none}\n"], components: [{ type: i1__namespace.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-attachment-field-design',
                        templateUrl: './attachment-field-design.component.html',
                        styleUrls: ['./attachment-field-design.component.scss']
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var AttachmentFieldDesignModule = /** @class */ (function () {
        function AttachmentFieldDesignModule() {
        }
        return AttachmentFieldDesignModule;
    }());
    AttachmentFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AttachmentFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignModule, declarations: [AttachmentFieldDesignComponent], imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxUploaderModule] });
    AttachmentFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignModule, imports: [[i3.CommonModule, i2$4.FormsModule, i1.AdaptRxUploaderModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxUploaderModule],
                        declarations: [AttachmentFieldDesignComponent],
                        entryComponents: [AttachmentFieldDesignComponent]
                    }]
            }] });

    // tslint:disable-next-line:directive-class-suffix
    var BaseRecordEditorFieldComponent = /** @class */ (function (_super) {
        __extends(BaseRecordEditorFieldComponent, _super);
        function BaseRecordEditorFieldComponent(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.isRequired = false;
            _this.isDisabled = false;
            _this.translateService = _this.injector.get(i2$1.TranslateService);
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            _this.inReadState = false;
            _this.isLoading = true;
            _this.validationErrorMessage = null;
            return _this;
        }
        BaseRecordEditorFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.configReady$ = this.config.pipe(operators.filter(function (config) { return Boolean(config.api && config.recordDefinition); }), operators.takeUntil(this.destroyed$));
            this.recordInstance$ = this.configReady$.pipe(operators.pluck('recordInstance'), operators.distinctUntilChanged(), operators.skip(1), operators.takeUntil(this.destroyed$));
            this.recordInstance$.subscribe(this.subscribeOnConfigValueChange.bind(this));
            this.configReady$.pipe(operators.take(1)).subscribe(function (config) {
                _this.isLoading = false;
                _this.onConfigInitialized(config);
                _this.onConfigUpdated(config);
            });
            this.configReady$
                .pipe(operators.skip(1), operators.filter(function (config) { return Boolean(config.recordInstance); }), operators.takeUntil(this.destroyed$))
                .subscribe(this.onConfigUpdated.bind(this));
        };
        BaseRecordEditorFieldComponent.prototype.setFieldValue = function (value, options) {
            if (options === void 0) { options = {}; }
            if (!lodash.isEqual(value, this.formControl.value)) {
                if (options.markAsDirty !== false) {
                    this.formControl.markAsDirty();
                }
                if (options.markAsTouched !== false) {
                    this.formControl.markAsTouched();
                }
                this.formControl.setValue(value);
            }
        };
        BaseRecordEditorFieldComponent.prototype.getFieldValue = function () {
            var _a;
            return (_a = this.formControl) === null || _a === void 0 ? void 0 : _a.value;
        };
        BaseRecordEditorFieldComponent.prototype.getDisplayValue = function () {
            return this.getFieldValue();
        };
        BaseRecordEditorFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            this.fieldId = Number(config.fieldId);
            this.fieldDefinition = lodash.find(config.recordDefinition.fieldDefinitions, { id: this.fieldId });
            this.isRequired = this.fieldDefinition.fieldOption === i1$4.RX_RECORD_DEFINITION.fieldOptions.required;
            this.recordEditorApi = config.api;
            this.formControl = this.recordEditorApi.getFieldControl(this.fieldId, this.guid, this.getFieldValidators(), config.associatedRecordPath);
            this.associatedRecordPath = config.associatedRecordPath;
            this.permissionType = this.recordEditorApi.getPermissionType(this.fieldId, this.associatedRecordPath);
            this.subscribeOnConfigValueChange();
            this.formControl.valueChanges.pipe(operators.startWith(this.formControl.value), operators.takeUntil(this.destroyed$)).subscribe(function () {
                _this.checkValidation();
                _this.updateValidationMessage();
            });
            this.isAlwaysDisabled =
                this.permissionType === i1$4.RX_RECORD_DEFINITION.fieldPermissionTypes.view ||
                    this.injector.get(i1$4.RxFieldDefinitionService).isSystemField(this.fieldDefinition);
            this.isAlwaysHidden = !this.permissionType;
            var recordEditorMode = config.api.getRecordEditorMode();
            if (Number(config.fieldId) === i1$4.RX_RECORD_DEFINITION.coreFieldIds.createdBy) {
                var submitterMode = this.injector
                    .get(i1$2.RxSystemConfigurationService)
                    .getConfigurationSync('Submitter-Mode');
                this.isAlwaysDisabled =
                    this.isAlwaysDisabled ||
                        (recordEditorMode === exports.RecordEditorMode.Edit && submitterMode === i1$2.RX_ADMINISTRATION.submitterModes.locked);
            }
        };
        BaseRecordEditorFieldComponent.prototype.onConfigUpdated = function (config) {
            var isDisabled = this.isAlwaysDisabled || Boolean(config.disabled);
            if (this.isDisabled !== isDisabled) {
                // In order to support accessibility for fields, "disabled" control status will be always "false" and will not
                // be synced with "isDisabled" component property. Field might not be focusable when control is disabled.
                this.isDisabled = isDisabled;
                if (!this.isDisabled) {
                    // Update validation status of the control after change "isDisabled" status to false.
                    this.formControl.updateValueAndValidity();
                }
                this.checkValidation();
            }
            this.isHidden = this.isAlwaysHidden || Boolean(config.hidden);
            this.label = lodash.isUndefined(config.label) ? this.fieldDefinition.name : config.label;
            this.inReadState = Boolean(config.inReadState);
        };
        BaseRecordEditorFieldComponent.prototype.getFieldValidators = function () {
            return [];
        };
        BaseRecordEditorFieldComponent.prototype.getRequiredFieldValidationError = function () {
            return this.translateService.instant('com.bmc.arsys.rx.client.view-components.validation.required.message');
        };
        BaseRecordEditorFieldComponent.prototype.getFieldInstanceProp = function (prop, fieldId, associatedRecordPath) {
            if (fieldId === void 0) { fieldId = this.fieldId; }
            if (associatedRecordPath === void 0) { associatedRecordPath = this.associatedRecordPath; }
            return this.recordEditorApi.getFieldInstanceProp(fieldId, prop, associatedRecordPath);
        };
        BaseRecordEditorFieldComponent.prototype.setFieldInstanceProp = function (prop, value, fieldId, associatedRecordPath) {
            if (fieldId === void 0) { fieldId = this.fieldId; }
            if (associatedRecordPath === void 0) { associatedRecordPath = this.associatedRecordPath; }
            this.recordEditorApi.setFieldInstanceProp(fieldId, prop, value, associatedRecordPath);
        };
        BaseRecordEditorFieldComponent.prototype.setProperty = function (propertyPath, propertyValue) {
            if (lodash.includes(['hidden', 'disabled'], propertyPath)) {
                this.notifyPropertyChanged(propertyPath, propertyValue);
            }
            else {
                return rxjs.throwError("Field property " + propertyPath + " is not settable.");
            }
        };
        BaseRecordEditorFieldComponent.prototype.subscribeOnConfigValueChange = function () {
            var _this = this;
            var value$ = this.configReady$.pipe(operators.pluck('value'), 
            // Do not update field value if expression gets evaluated to undefined, e.g when:
            // - expression references a removed view component, or
            // - view component hasn't loaded the data yet
            operators.filter(function (val) { return !lodash.isUndefined(val); }), operators.distinctUntilChanged(), operators.takeUntil(this.recordInstance$), operators.takeUntil(this.destroyed$));
            value$.pipe(operators.take(1)).subscribe(function (val) {
                // Only update field with non empty value on first expression change.
                // At this time we don't know if null is a default value or it was evaluated from expression.
                if (!lodash.isNull(val)) {
                    _this.setFieldValue(val, { markAsTouched: false, markAsDirty: false });
                }
            });
            value$.pipe(operators.skip(1)).subscribe(function (val) { return _this.setFieldValue(val); });
        };
        BaseRecordEditorFieldComponent.prototype.checkValidation = function () {
            if (this.isDisabled && this.formControl.invalid) {
                // Remove errors to make control valid when "isDisabled" status is true.
                this.formControl.setErrors(null);
                this.updateValidationMessage();
            }
        };
        BaseRecordEditorFieldComponent.prototype.updateValidationMessage = function () {
            if (this.formControl.errors) {
                if (this.formControl.errors.required) {
                    this.formControl.errors.required = this.getRequiredFieldValidationError();
                }
                this.validationErrorMessage = lodash.values(this.formControl.errors).join(', ');
            }
            else {
                this.validationErrorMessage = null;
            }
        };
        return BaseRecordEditorFieldComponent;
    }(i1$5.BaseViewComponent));
    BaseRecordEditorFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BaseRecordEditorFieldComponent, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BaseRecordEditorFieldComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.3", type: BaseRecordEditorFieldComponent, inputs: { config: "config" }, host: { properties: { "class.rx-field-required": "this.isRequired", "class.rx-field-disabled": "this.isDisabled" } }, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BaseRecordEditorFieldComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; }, propDecorators: { isRequired: [{
                    type: i0.HostBinding,
                    args: ['class.rx-field-required']
                }], isDisabled: [{
                    type: i0.HostBinding,
                    args: ['class.rx-field-disabled']
                }], config: [{
                    type: i0.Input
                }] } });

    var RX_ATTACHMENT_FIELD = {
        defaultOptions: {
            filesCount: 1,
            mode: i1.UploaderMode.Manual,
            selectionMode: i1.UploaderSelectionMode.File,
            chunkSize: '100KB',
            maxFileSize: '2GB' // Default is 20 MB
        }
    };

    var AttachmentFieldComponent = /** @class */ (function (_super) {
        __extends(AttachmentFieldComponent, _super);
        function AttachmentFieldComponent(injector) {
            var _this = _super.call(this, injector) || this;
            // Uploader options
            _this.filesCount = RX_ATTACHMENT_FIELD.defaultOptions.filesCount;
            _this.mode = RX_ATTACHMENT_FIELD.defaultOptions.mode;
            _this.selectionMode = RX_ATTACHMENT_FIELD.defaultOptions.selectionMode;
            _this.chunkSize = RX_ATTACHMENT_FIELD.defaultOptions.chunkSize;
            _this.maxFileSize = RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;
            _this.showFiles = [];
            _this.texts = {};
            _this.readStateConfig = {
                fileName: null,
                downloadURL: null
            };
            return _this;
        }
        AttachmentFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            _super.prototype.onConfigInitialized.call(this, config);
            this.attachmentFormControl = new i2$4.FormControl(this.showFiles);
            this.maxFileSize = this.fieldDefinition.maxSize
                ? lodash.toString(this.fieldDefinition.maxSize)
                : RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;
            this.formControl.valueChanges
                .pipe(operators.startWith(this.formControl.value), 
            // Update ADAPT component only when formControl value will be a file name string.
            // When value comes as a File, it means this file is already attached to ADAPT component.
            operators.filter(function (value) { return !(value instanceof File); }), operators.distinctUntilChanged(function (previous, next) {
                return (previous === next &&
                    // After uploading a file, adapt-rx-uploader component has to be updated with the URL to download the file.
                    // This happens when the record editor updates the entire form with values from the saved record instance.
                    // valueChange will emit the same value as before, but adapt-rx-uploader will not have a downloadURL yet.
                    lodash.has(_this.attachmentFormControl.value, '[0].downloadURL'));
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.attachmentFormControl.reset();
                _this.addAttachedFileToAttachmentList(_this.getFieldValue());
            });
            this.formControl.touched$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (touched) {
                touched ? _this.attachmentFormControl.markAsTouched() : _this.attachmentFormControl.markAsUntouched();
            });
        };
        AttachmentFieldComponent.prototype.addAttachedFileToAttachmentList = function (fileName) {
            if (fileName) {
                var downloadAttachmentUrl = this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId);
                var attachment = void 0;
                attachment = {
                    data: {
                        name: fileName
                    },
                    isUploading: true
                };
                if (downloadAttachmentUrl) {
                    attachment.downloadURL = downloadAttachmentUrl;
                }
                this.showFiles = [attachment];
            }
            else {
                this.showFiles = [];
            }
            this.attachmentFormControl.setValue(this.showFiles);
        };
        AttachmentFieldComponent.prototype.onConfigUpdated = function (config) {
            _super.prototype.onConfigUpdated.call(this, config);
            if (this.inReadState) {
                this.readStateConfig = {
                    fileName: this.getDisplayValue(),
                    downloadURL: this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId)
                };
            }
        };
        AttachmentFieldComponent.prototype.removeAttachment = function (attachment) {
            if (attachment) {
                this.attachment = null;
            }
            this.addAttachedFileToAttachmentList();
            this.setFieldValue(this.attachment);
        };
        AttachmentFieldComponent.prototype.addAttachment = function (attachments) {
            var attachment = lodash.first(attachments);
            if (attachment) {
                this.attachment = attachment.data;
                this.setFieldValue(this.attachment);
            }
        };
        AttachmentFieldComponent.prototype.onBlur = function () {
            this.formControl.markAsTouched();
        };
        return AttachmentFieldComponent;
    }(BaseRecordEditorFieldComponent));
    AttachmentFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldComponent, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AttachmentFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AttachmentFieldComponent, selector: "rx-attachment-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <ng-container *ngIf=\"inReadState; else editStateElementRef\">\n    <div *ngIf=\"getDisplayValue(); else emptyReadonlyField\" [attr.aria-label]=\"label\">\n      <label aria-hidden=\"true\">{{ label }}</label>\n\n      <adapt-downloader class=\"d-block\" *ngIf=\"getDisplayValue()\" [config]=\"readStateConfig\"></adapt-downloader>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-uploader\n    [ngClass]=\"{ 'attachment-disabled': isDisabled }\"\n    [reusable]=\"true\"\n    [label]=\"label\"\n    [readonly]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [allowDeletion]=\"false\"\n    [uploadMode]=\"mode\"\n    [selectionMode]=\"selectionMode\"\n    [filesCount]=\"filesCount\"\n    [maxFileSize]=\"maxFileSize\"\n    [chunkSize]=\"chunkSize\"\n    [texts]=\"texts\"\n    (removedFileFromQueue)=\"removeAttachment($event)\"\n    (deletedFile)=\"removeAttachment($event)\"\n    (afterFilesAdded)=\"addAttachment($event)\"\n    [formControl]=\"attachmentFormControl\"\n    (onBlur)=\"onBlur()\"\n  >\n  </adapt-rx-uploader>\n</ng-template>\n\n<ng-template #emptyReadonlyField>\n  <rx-read-only-field [label]=\"label\" [value]=\"'-'\"></rx-read-only-field>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}::ng-deep .d-icon-exclamation_triangle{display:none}::ng-deep .adapt-rx-uploader__restrict{display:none}::ng-deep .upload-status{display:none}::ng-deep .adapt-uploader-item{border-top:0;height:37px!important;border-bottom:0}::ng-deep .adapt-rx-uploader-file-attach-btn__wrp{max-width:100%}::ng-deep .adapt-rx-uploader-attach-btn{overflow:hidden;text-overflow:ellipsis;max-width:100%}::ng-deep .adapt-uploader-file{margin-left:0;padding-bottom:10px;padding-left:0!important;flex:auto;height:100%;border-bottom:1px solid #f0f1f1}::ng-deep .adapt-uploader-status{margin-right:20px;width:15px;border-bottom:1px solid #f0f1f1}::ng-deep .attachment-disabled .adapt-uploader-list-files-zone__header{margin:0;display:none}::ng-deep .attachment-disabled .empty-state{display:none}::ng-deep .attachment-disabled .empty-state__container{margin:0;padding:0}::ng-deep .attachment-disabled .empty-state__label{margin-top:0;text-align:left}\n"], components: [{ type: i1__namespace.AdaptDownloaderComponent, selector: "adapt-downloader", inputs: ["config", "icons", "width"], outputs: ["downloadLinkPressed"] }, { type: i1__namespace.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-attachment-field',
                        styleUrls: ['./attachment-field.scss'],
                        templateUrl: './attachment-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    function UploaderFactory() {
        return new i1$4.UploaderService();
    }
    var AttachmentFieldModule = /** @class */ (function () {
        function AttachmentFieldModule() {
        }
        return AttachmentFieldModule;
    }());
    AttachmentFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AttachmentFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldModule, declarations: [AttachmentFieldComponent], imports: [i1__namespace.AdaptRxUploaderModule, i3.CommonModule,
            i1$6.ReadOnlyFieldModule,
            i2$4.ReactiveFormsModule,
            i2$1.TranslateModule,
            i1.AdaptDownloadModule] });
    AttachmentFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldModule, imports: [[
                i1.AdaptRxUploaderModule.forRoot({
                    uploader: {
                        provide: 'UploaderService',
                        useFactory: UploaderFactory,
                        deps: []
                    }
                }),
                i3.CommonModule,
                i1$6.ReadOnlyFieldModule,
                i2$4.ReactiveFormsModule,
                i2$1.TranslateModule,
                i1.AdaptDownloadModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptRxUploaderModule.forRoot({
                                uploader: {
                                    provide: 'UploaderService',
                                    useFactory: UploaderFactory,
                                    deps: []
                                }
                            }),
                            i3.CommonModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$4.ReactiveFormsModule,
                            i2$1.TranslateModule,
                            i1.AdaptDownloadModule
                        ],
                        declarations: [AttachmentFieldComponent],
                        entryComponents: [AttachmentFieldComponent]
                    }]
            }] });

    var BaseRecordEditorFieldDesign = /** @class */ (function (_super) {
        __extends(BaseRecordEditorFieldDesign, _super);
        function BaseRecordEditorFieldDesign(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.rxFieldDefinitionService = _this.injector.get(i1$4.RxFieldDefinitionService);
            return _this;
        }
        BaseRecordEditorFieldDesign.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign(Object.assign({ fieldId: null, label: null, value: null }, i1$1.RX_DISABLED_PROP_DEFAULT_VALUE), i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        BaseRecordEditorFieldDesign.prototype.rxInit = function () {
            this.pipeline();
        };
        BaseRecordEditorFieldDesign.prototype.pipeline = function () {
            var _this = this;
            this.parentGuid$ = this.sandbox.getParentComponentGuid(i1$1.RxViewComponentType.RecordEditor).pipe(operators.take(1));
            this.recordEditorMode$ = this.parentGuid$.pipe(operators.switchMap(function (recordEditorGuid) {
                return _this.sandbox.getComponentPropertyValue('mode', recordEditorGuid);
            }));
            this.recordDefinitionName$ = this.parentGuid$.pipe(operators.switchMap(function (recordEditorGuid) {
                return _this.sandbox.getComponentPropertyValue('recordDefinitionName', recordEditorGuid);
            }), operators.shareReplay(1));
            this.recordDefinition$ = this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) {
                if (recordDefinitionName) {
                    return _this.rxRecordDefinitionCacheService
                        .getRecordDefinition(recordDefinitionName)
                        .pipe(operators.catchError(function (error) { return rxjs.EMPTY; }));
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.distinctUntilChanged());
            this.selectedFieldDefinition$ = this.sandbox.getComponentPropertyValue('fieldId').pipe(operators.switchMap(function (fieldId) { return _this.recordDefinition$.pipe(operators.map(function (recordDefinition) {
                if (recordDefinition && fieldId) {
                    return (recordDefinition.fieldDefinitions.find(function (fieldDefinition) { return fieldDefinition.id === Number(fieldId); }) || null);
                }
                else {
                    return null;
                }
            })); }), operators.shareReplay(1));
            this.isRequired$ = this.selectedFieldDefinition$.pipe(operators.map(function (selectedFieldDefinition) { return selectedFieldDefinition && selectedFieldDefinition.fieldOption === i1$4.RX_RECORD_DEFINITION.fieldOptions.required; }));
            this.isSystemField$ = this.selectedFieldDefinition$.pipe(operators.startWith(false), operators.map(function (selectedFieldDefinition) { return _this.rxFieldDefinitionService.isSystemField(selectedFieldDefinition); }));
            // set field label
            this.selectedFieldDefinition$
                .pipe(operators.pairwise(), operators.withLatestFrom(this.sandbox.componentProperties$), operators.filter(function (_a) {
                var _b = __read(_a, 2), _c = __read(_b[0], 2), oldField = _c[0], newField = _c[1], componentProperties = _b[1];
                return newField && ((oldField && oldField.name === componentProperties.label) || !componentProperties.label);
            }), operators.map(function (_a) {
                var _b = __read(_a, 1), _c = __read(_b[0], 2), oldField = _c[0], newField = _c[1];
                return newField.name;
            }))
                .subscribe(function (label) {
                _this.sandbox.updateComponentProperties({ label: label });
            });
            this.availableFieldDefinitions$ = rxjs.combineLatest([this.recordDefinition$, this.recordEditorMode$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinition = _b[0], recordEditorMode = _b[1];
                if (recordDefinition && recordDefinition.fieldDefinitions) {
                    return recordDefinition.fieldDefinitions
                        .filter(function (fieldDefinition) { return lodash.includes(_this.fieldResourceTypes, fieldDefinition.resourceType); })
                        .filter(function (fieldDefinition) {
                        var isSystemField = _this.rxFieldDefinitionService.isSystemField(fieldDefinition);
                        return !isSystemField || (isSystemField && recordEditorMode === exports.RecordEditorMode.Edit);
                    });
                }
                else {
                    return [];
                }
            }), operators.shareReplay(1));
            this.label$ = this.sandbox.componentProperties$.pipe(operators.map(function (componentProperties) {
                return componentProperties && componentProperties.fieldId ? componentProperties.label : '<No field selected>';
            }));
            this.sandbox.componentProperties$
                .pipe(operators.mergeMap(function (componentProperties) { return _this.validate(componentProperties); }), operators.distinctUntilChanged(lodash.isEqual))
                .subscribe(function (validationIssues) {
                _this.sandbox.setValidationIssues(validationIssues);
            });
            this.availableFieldDefinitions$
                .pipe(operators.switchMap(function () { return _this.getInspectorConfig(); }))
                .subscribe(function (inspectorConfig) {
                _this.sandbox.updateInspectorConfig(inspectorConfig);
            });
            this.sandbox.componentProperties$
                .pipe(operators.switchMap(function () { return _this.getBreadcrumb(); }), operators.distinctUntilChanged())
                .subscribe(function (breadcrumb) {
                _this.sandbox.setBreadcrumbs(breadcrumb);
            });
            rxjs.combineLatest([this.sandbox.getComponentPropertyValue('label'), this.selectedFieldDefinition$])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), label = _b[0], fieldDefinition = _b[1];
                return label || (fieldDefinition ? "[" + fieldDefinition.name + "]" : "[" + _this.sandbox.descriptor.name + "]");
            }), operators.distinctUntilChanged())
                .subscribe(function (componentName) {
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, _this.getSettableProperties());
            });
        };
        BaseRecordEditorFieldDesign.prototype.getPropertiesByName = function (properties) {
            var result = Object.assign({}, properties);
            if (!result.styles) {
                delete result.styles;
            }
            return result;
        };
        BaseRecordEditorFieldDesign.prototype.validate = function (componentProperties) {
            var validationIssues = [];
            if (lodash.isEmpty(componentProperties.fieldId)) {
                validationIssues.push(this.sandbox.createError('Field name cannot be blank.', 'fieldId'));
            }
            validationIssues.push.apply(validationIssues, __spreadArray([], __read(i1$3.validateStandardProps(componentProperties))));
            return rxjs.of(validationIssues);
        };
        BaseRecordEditorFieldDesign.prototype.getBreadcrumb = function () {
            return rxjs.of(null).pipe(operators.withLatestFrom(this.sandbox.componentProperties$), operators.map(function (_a) {
                var _b = __read(_a, 2), initial = _b[0], componentProperties = _b[1];
                return componentProperties.label;
            }));
        };
        BaseRecordEditorFieldDesign.prototype.getInspectorConfig = function () {
            var _this = this;
            return rxjs.of(null).pipe(operators.withLatestFrom(this.availableFieldDefinitions$, this.recordDefinitionName$, this.parentGuid$, this.isSystemField$), operators.map(function (_a) {
                var _b = __read(_a, 5), initial = _b[0], recordFieldsSelectItems = _b[1], recordDefinitionName = _b[2], parentGuid = _b[3], isSystemField = _b[4];
                return _this.getBaseInspectorConfig(recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField);
            }));
        };
        BaseRecordEditorFieldDesign.prototype.getSettableProperties = function () {
            var disabledPropDataDictionary = lodash.find(this.sandbox.descriptor.properties, { name: 'disabled' })
                ? [
                    {
                        label: 'Disabled',
                        expression: "${view.components." + this.sandbox.guid + ".disabled}"
                    }
                ]
                : [];
            var hiddenPropDataDictionary = lodash.find(this.sandbox.descriptor.properties, { name: 'disabled' })
                ? [
                    {
                        label: 'Hidden',
                        expression: "${view.components." + this.sandbox.guid + ".hidden}"
                    }
                ]
                : [];
            return __spreadArray(__spreadArray([], __read(disabledPropDataDictionary)), __read(hiddenPropDataDictionary));
        };
        BaseRecordEditorFieldDesign.prototype.getBaseInspectorFields = function (selectedFieldDefinitions, isSystemField) {
            return [].concat([
                {
                    name: 'fieldId',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Field name',
                        required: true,
                        options: selectedFieldDefinitions.map(function (definition) { return ({
                            name: definition.name,
                            id: String(definition.id)
                        }); })
                    }
                },
                {
                    name: 'label',
                    component: i2.TextFormControlComponent,
                    options: {
                        label: 'Display label'
                    }
                }
            ], isSystemField
                ? []
                : [
                    {
                        name: 'value',
                        component: i2.ExpressionInspectorControlComponent,
                        options: {
                            label: 'Value'
                        }
                    },
                    i1$3.getDisabledFieldInspectorConfig()
                ], i1$3.getStandardPropsInspectorConfigs());
        };
        BaseRecordEditorFieldDesign.prototype.getBaseInspectorConfig = function (recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField) {
            var displayName = this.rxDefinitionNameService.getDisplayName(recordDefinitionName || '');
            var controls;
            if (recordDefinitionName) {
                if (recordFieldsSelectItems.length) {
                    controls = this.getBaseInspectorFields(recordFieldsSelectItems, isSystemField);
                }
                else {
                    controls = [
                        {
                            component: i2.ValidationFormControlComponent,
                            options: {
                                text: displayName + " does not have fields that can be bound to this field type.",
                                componentGuid: parentGuid,
                                propertyName: 'recordDefinitionName'
                            }
                        }
                    ];
                }
            }
            else {
                controls = [
                    {
                        component: i2.ValidationFormControlComponent,
                        options: {
                            text: 'You must select a Record definition before editing field component.',
                            componentGuid: parentGuid,
                            propertyName: 'recordDefinitionName' // todo remove that hardcode
                        }
                    }
                ];
            }
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: controls
                    }
                ]
            };
        };
        return BaseRecordEditorFieldDesign;
    }(i1$3.ViewDesignerComponentModel));

    var AttachmentFieldDesignModel = /** @class */ (function (_super) {
        __extends(AttachmentFieldDesignModel, _super);
        function AttachmentFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.attachment];
            return _this;
        }
        AttachmentFieldDesignModel.getInitialProperties = function (initialProperties) {
            var result = BaseRecordEditorFieldDesign.getInitialProperties(initialProperties);
            delete result.value;
            return result;
        };
        AttachmentFieldDesignModel.prototype.getInspectorConfig = function () {
            return _super.prototype.getInspectorConfig.call(this).pipe(operators.map(function (inspectorConfig) {
                inspectorConfig.inspectorSectionConfigs[0].controls =
                    inspectorConfig.inspectorSectionConfigs[0].controls.filter(function (field) { return field.name !== 'value'; });
                return inspectorConfig;
            }));
        };
        return AttachmentFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var AttachmentFieldRegistrationModule = /** @class */ (function () {
        function AttachmentFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Attachment,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Attachment',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'paperclip',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldDesignComponent),
                designComponentModel: AttachmentFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return AttachmentFieldRegistrationModule;
    }());
    AttachmentFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AttachmentFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldRegistrationModule, imports: [AttachmentFieldModule, AttachmentFieldDesignModule] });
    AttachmentFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldRegistrationModule, imports: [[AttachmentFieldModule, AttachmentFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AttachmentFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [AttachmentFieldModule, AttachmentFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var BooleanFieldEditingMode;
    (function (BooleanFieldEditingMode) {
        BooleanFieldEditingMode["Checkbox"] = "checkbox";
        BooleanFieldEditingMode["Switch"] = "switch";
    })(BooleanFieldEditingMode || (BooleanFieldEditingMode = {}));
    var BooleanFieldModelValue;
    (function (BooleanFieldModelValue) {
        BooleanFieldModelValue[BooleanFieldModelValue["True"] = 1] = "True";
        BooleanFieldModelValue[BooleanFieldModelValue["False"] = 0] = "False";
    })(BooleanFieldModelValue || (BooleanFieldModelValue = {}));

    var BooleanFieldDesignComponent = /** @class */ (function () {
        function BooleanFieldDesignComponent() {
            this.shouldDisplayAsCheckbox = false;
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        BooleanFieldDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            var editingMode$ = this.model.componentProperties$.pipe(operators.map(function (componentProperties) { return componentProperties.editingMode || BooleanFieldEditingMode.Switch; }));
            rxjs.combineLatest([editingMode$, this.model.isRequired$])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), editingMode = _b[0], isRequired = _b[1];
                _this.shouldDisplayAsCheckbox = isRequired && editingMode === BooleanFieldEditingMode.Checkbox;
            });
        };
        BooleanFieldDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return BooleanFieldDesignComponent;
    }());
    BooleanFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    BooleanFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BooleanFieldDesignComponent, selector: "rx-boolean-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!shouldDisplayAsCheckbox\">\n  <div>\n    <strong>\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </strong>\n  </div>\n  <adapt-rx-switch [(ngModel)]=\"booleanValue\" [disabled]=\"true\"></adapt-rx-switch>\n</ng-container>\n\n<ng-container *ngIf=\"shouldDisplayAsCheckbox\">\n  <adapt-rx-checkbox\n    [(ngModel)]=\"booleanValue\"\n    [label]=\"model.label$ | async\"\n    [required]=\"model.isRequired$ | async\"\n    [disabled]=\"true\"\n  >\n  </adapt-rx-checkbox>\n</ng-container>\n", components: [{ type: i1__namespace.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-boolean-field-design',
                        templateUrl: './boolean-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var BooleanFieldDesignModule = /** @class */ (function () {
        function BooleanFieldDesignModule() {
        }
        return BooleanFieldDesignModule;
    }());
    BooleanFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BooleanFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignModule, declarations: [BooleanFieldDesignComponent], imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxSwitchModule, i1.AdaptRxCheckboxModule], exports: [BooleanFieldDesignComponent] });
    BooleanFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignModule, imports: [[i3.CommonModule, i2$4.FormsModule, i1.AdaptRxSwitchModule, i1.AdaptRxCheckboxModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxSwitchModule, i1.AdaptRxCheckboxModule],
                        declarations: [BooleanFieldDesignComponent],
                        exports: [BooleanFieldDesignComponent],
                        entryComponents: [BooleanFieldDesignComponent]
                    }]
            }] });

    var BooleanFieldComponent = /** @class */ (function (_super) {
        __extends(BooleanFieldComponent, _super);
        function BooleanFieldComponent(injector, rxBooleanPipe) {
            var _this = _super.call(this, injector) || this;
            _this.rxBooleanPipe = rxBooleanPipe;
            return _this;
        }
        Object.defineProperty(BooleanFieldComponent.prototype, "booleanValue", {
            get: function () {
                var value = this.getFieldValue();
                return lodash.isNull(value) ? null : Boolean(value);
            },
            set: function (value) {
                if (lodash.isNull(value)) {
                    this.setFieldValue(null);
                }
                else {
                    this.setFieldValue(Number(value));
                }
            },
            enumerable: false,
            configurable: true
        });
        BooleanFieldComponent.prototype.getDisplayValue = function () {
            var displayValue = _super.prototype.getDisplayValue.call(this);
            if (!lodash.isNil(displayValue)) {
                return this.rxBooleanPipe.transform(displayValue);
            }
            else {
                return '-';
            }
        };
        BooleanFieldComponent.prototype.onConfigInitialized = function (config) {
            _super.prototype.onConfigInitialized.call(this, config);
            this.editingMode = config.editingMode;
        };
        BooleanFieldComponent.prototype.onConfigUpdated = function (config) {
            _super.prototype.onConfigUpdated.call(this, config);
            // Set 0 as a default value for checkbox, e.g. scenario in the create record editor mode
            if (this.shouldDisplayAsCheckbox && this.getFieldValue() === null) {
                this.setFieldValue(BooleanFieldModelValue.False, { markAsDirty: false, markAsTouched: false });
            }
        };
        BooleanFieldComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.formControl.touched$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (touched) { var _a, _b; return touched ? (_a = _this.ngModel) === null || _a === void 0 ? void 0 : _a.control.markAsTouched() : (_b = _this.ngModel) === null || _b === void 0 ? void 0 : _b.control.markAsUntouched(); });
        };
        Object.defineProperty(BooleanFieldComponent.prototype, "shouldDisplayAsCheckbox", {
            get: function () {
                return this.editingMode === BooleanFieldEditingMode.Checkbox && this.isRequired;
            },
            enumerable: false,
            configurable: true
        });
        BooleanFieldComponent.prototype.onBlur = function () {
            this.formControl.markAsTouched();
        };
        return BooleanFieldComponent;
    }(BaseRecordEditorFieldComponent));
    BooleanFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$1.RxBooleanPipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BooleanFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BooleanFieldComponent, selector: "rx-boolean-field", viewQueries: [{ propertyName: "ngModel", first: true, predicate: ["booleanComponent"], descendants: true, read: i2$4.NgModel }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-boolean\n    #booleanComponent\n    [hidden]=\"isHidden\"\n    [label]=\"label\"\n    [isDisabled]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [shouldDisplayAsCheckbox]=\"shouldDisplayAsCheckbox\"\n    [(ngModel)]=\"booleanValue\"\n    (rxBlur)=\"onBlur()\"\n  >\n  </rx-boolean>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i2__namespace$5.RxBooleanComponent, selector: "rx-boolean", inputs: ["shouldDisplayAsCheckbox", "required", "isDisabled", "label", "tooltip"], outputs: ["rxBlur"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-boolean-field',
                        templateUrl: './boolean-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$1.RxBooleanPipe }]; }, propDecorators: { ngModel: [{
                    type: i0.ViewChild,
                    args: ['booleanComponent', { read: i2$4.NgModel }]
                }] } });

    var BooleanFieldModule = /** @class */ (function () {
        function BooleanFieldModule() {
        }
        return BooleanFieldModule;
    }());
    BooleanFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BooleanFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldModule, declarations: [BooleanFieldComponent], imports: [i3.CommonModule,
            i1.AdaptRxFormControlModule,
            i1$6.ReadOnlyFieldModule,
            i1.AdaptButtonModule,
            i1.AdaptRxCheckboxModule,
            i2$1.TranslateModule,
            i2$4.ReactiveFormsModule,
            i2$4.FormsModule,
            i2.RxBooleanModule] });
    BooleanFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldModule, imports: [[
                i3.CommonModule,
                i1.AdaptRxFormControlModule,
                i1$6.ReadOnlyFieldModule,
                i1.AdaptButtonModule,
                i1.AdaptRxCheckboxModule,
                i2$1.TranslateModule,
                i2$4.ReactiveFormsModule,
                i2$4.FormsModule,
                i2.RxBooleanModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1.AdaptRxFormControlModule,
                            i1$6.ReadOnlyFieldModule,
                            i1.AdaptButtonModule,
                            i1.AdaptRxCheckboxModule,
                            i2$1.TranslateModule,
                            i2$4.ReactiveFormsModule,
                            i2$4.FormsModule,
                            i2.RxBooleanModule
                        ],
                        declarations: [BooleanFieldComponent],
                        entryComponents: [BooleanFieldComponent]
                    }]
            }] });

    var BooleanFieldDesignModel = /** @class */ (function (_super) {
        __extends(BooleanFieldDesignModel, _super);
        function BooleanFieldDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.boolean];
            return _this;
        }
        BooleanFieldDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign(Object.assign({}, BaseRecordEditorFieldDesign.getInitialProperties()), { editingMode: BooleanFieldEditingMode.Switch }), initialProperties);
        };
        BooleanFieldDesignModel.prototype.getInspectorConfig = function () {
            var _this = this;
            return _super.prototype.getInspectorConfig.call(this)
                .pipe(operators.map(function (inspectorConfig) { return _this.editInspectorConfig(inspectorConfig); }));
        };
        BooleanFieldDesignModel.prototype.editInspectorConfig = function (inspectorConfig) {
            var valueControlIndex = lodash.findIndex(inspectorConfig.inspectorSectionConfigs[0].controls, function (item) { return item.name === 'value'; });
            var editingModeControl = {
                name: 'editingMode',
                component: i2.SelectFormControlComponent,
                options: {
                    label: 'Editing mode',
                    tooltip: new i1$2.Tooltip('An optional Boolean field will always be displayed as a Switch.'),
                    required: false,
                    options: lodash.map(BooleanFieldEditingMode, function (value, name) { return ({
                        id: value,
                        name: name
                    }); })
                }
            };
            if (valueControlIndex !== -1) {
                inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);
            }
            return inspectorConfig;
        };
        return BooleanFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var BooleanFieldRegistrationModule = /** @class */ (function () {
        function BooleanFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Boolean,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Boolean',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'switcher_check',
                designComponentModel: BooleanFieldDesignModel,
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldDesignComponent),
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return BooleanFieldRegistrationModule;
    }());
    BooleanFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BooleanFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldRegistrationModule, imports: [BooleanFieldModule, BooleanFieldDesignModule] });
    BooleanFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldRegistrationModule, imports: [[BooleanFieldModule, BooleanFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BooleanFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [BooleanFieldModule, BooleanFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var DateFieldDesignComponent = /** @class */ (function () {
        function DateFieldDesignComponent() {
        }
        return DateFieldDesignComponent;
    }());
    DateFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DateFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DateFieldDesignComponent, selector: "rx-date-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateValue\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n", components: [{ type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-date-field-design',
                        templateUrl: './date-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var DateFieldDesignModule = /** @class */ (function () {
        function DateFieldDesignModule() {
        }
        return DateFieldDesignModule;
    }());
    DateFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignModule, declarations: [DateFieldDesignComponent], imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule] });
    DateFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignModule, imports: [[i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule],
                        declarations: [DateFieldDesignComponent],
                        entryComponents: [DateFieldDesignComponent]
                    }]
            }] });

    var DateAdapter = /** @class */ (function (_super) {
        __extends(DateAdapter, _super);
        function DateAdapter() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.storeDateFormat = 'YYYY-MM-DD'; // AR server only accepts this format for Date.
            return _this;
        }
        DateAdapter.prototype.fromModel = function (dateString) {
            var adaptedValue = null;
            var date = moment__default["default"](dateString);
            if (date && date.isValid()) {
                adaptedValue = {
                    year: date.year(),
                    month: date.month(),
                    date: date.date(),
                    hours: date.hours(),
                    minutes: date.minutes(),
                    seconds: date.seconds()
                };
            }
            return adaptedValue;
        };
        DateAdapter.prototype.toModel = function (date) {
            return date
                ? date.parseError
                    ? moment__default["default"].invalid().toString()
                    : moment__default["default"]([date.year || 0, date.month || 0, date.date || 0]).format(this.storeDateFormat)
                : null;
        };
        return DateAdapter;
    }(i1.AdaptRxDatetimeAdapter));
    DateAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateAdapter, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DateAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateAdapter, decorators: [{
                type: i0.Injectable
            }] });

    var DateFieldComponent = /** @class */ (function (_super) {
        __extends(DateFieldComponent, _super);
        function DateFieldComponent(injector, datePipe) {
            var _this = _super.call(this, injector) || this;
            _this.datePipe = datePipe;
            return _this;
        }
        DateFieldComponent.prototype.getDisplayValue = function () {
            var displayValue = _super.prototype.getDisplayValue.call(this);
            if (displayValue) {
                return this.datePipe.transform(displayValue, 'mediumDate');
            }
        };
        DateFieldComponent.prototype.getFieldValidators = function () {
            var validatorFn = function (control) {
                var date = control.value ? moment__default["default"](control.value) : null;
                return control.value && date && !date.isValid()
                    ? { rxDatetimeFormat: { mode: i1.RxDatetimePickerMode.Date } }
                    : null;
            };
            return [validatorFn];
        };
        return DateFieldComponent;
    }(BaseRecordEditorFieldComponent));
    DateFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i3__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DateFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DateFieldComponent, selector: "rx-date-field", providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: DateAdapter }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-date-field',
                        templateUrl: './date-field.component.html',
                        providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: DateAdapter }]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i3__namespace.DatePipe }]; } });

    var DateFieldModule = /** @class */ (function () {
        function DateFieldModule() {
        }
        return DateFieldModule;
    }());
    DateFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldModule, declarations: [DateFieldComponent], imports: [i1.AdaptRxDatetimeModule,
            i3.CommonModule,
            i2$4.FormsModule,
            i2$4.ReactiveFormsModule,
            i1$6.ReadOnlyFieldModule,
            i2$1.TranslateModule] });
    DateFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldModule, providers: [i3.DatePipe], imports: [[
                i1.AdaptRxDatetimeModule,
                i3.CommonModule,
                i2$4.FormsModule,
                i2$4.ReactiveFormsModule,
                i1$6.ReadOnlyFieldModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptRxDatetimeModule,
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i2$4.ReactiveFormsModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$1.TranslateModule
                        ],
                        declarations: [DateFieldComponent],
                        providers: [i3.DatePipe],
                        entryComponents: [DateFieldComponent]
                    }]
            }] });

    var DateFieldDesignModel = /** @class */ (function (_super) {
        __extends(DateFieldDesignModel, _super);
        function DateFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.dateOnly];
            return _this;
        }
        return DateFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var DateFieldRegistrationModule = /** @class */ (function () {
        function DateFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Date,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Date',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'calendar',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldDesignComponent),
                designComponentModel: DateFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return DateFieldRegistrationModule;
    }());
    DateFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldRegistrationModule, imports: [DateFieldModule, DateFieldDesignModule] });
    DateFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldRegistrationModule, imports: [[DateFieldModule, DateFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [DateFieldModule, DateFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var DateTimeFieldDesignComponent = /** @class */ (function () {
        function DateTimeFieldDesignComponent() {
            this.pickerMode = i1.RxDatetimePickerMode.DateTime;
        }
        return DateTimeFieldDesignComponent;
    }());
    DateTimeFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DateTimeFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DateTimeFieldDesignComponent, selector: "rx-date-time-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateTimeValue\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n>\n</adapt-rx-datetime>\n", components: [{ type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-date-time-field-design',
                        templateUrl: './date-time-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var DateTimeFieldDesignModule = /** @class */ (function () {
        function DateTimeFieldDesignModule() {
        }
        return DateTimeFieldDesignModule;
    }());
    DateTimeFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateTimeFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignModule, declarations: [DateTimeFieldDesignComponent], imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule] });
    DateTimeFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignModule, imports: [[i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule],
                        declarations: [DateTimeFieldDesignComponent],
                        entryComponents: [DateTimeFieldDesignComponent]
                    }]
            }] });

    var DateTimeAdapter = /** @class */ (function (_super) {
        __extends(DateTimeAdapter, _super);
        function DateTimeAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DateTimeAdapter.prototype.fromModel = function (dateString) {
            var adaptedValue = null;
            var date = moment__default["default"](dateString);
            if (date && date.isValid()) {
                adaptedValue = {
                    year: date.year(),
                    month: date.month(),
                    date: date.date(),
                    hours: date.hours(),
                    minutes: date.minutes(),
                    seconds: date.seconds()
                };
            }
            return adaptedValue;
        };
        DateTimeAdapter.prototype.toModel = function (date) {
            return date
                ? date.parseError
                    ? moment__default["default"].invalid().toString()
                    : moment__default["default"]([
                        date.year || 0,
                        date.month || 0,
                        date.date || 0,
                        date.hours || 0,
                        date.minutes || 0,
                        date.seconds || 0
                    ]).toISOString()
                : null;
        };
        return DateTimeAdapter;
    }(i1.AdaptRxDatetimeAdapter));
    DateTimeAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeAdapter, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DateTimeAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeAdapter, decorators: [{
                type: i0.Injectable
            }] });

    var DateTimeFieldComponent = /** @class */ (function (_super) {
        __extends(DateTimeFieldComponent, _super);
        function DateTimeFieldComponent(injector, datePipe) {
            var _this = _super.call(this, injector) || this;
            _this.datePipe = datePipe;
            _this.pickerMode = i1.RxDatetimePickerMode.DateTime;
            return _this;
        }
        DateTimeFieldComponent.prototype.getDisplayValue = function () {
            var displayValue = _super.prototype.getDisplayValue.call(this);
            if (displayValue) {
                return this.datePipe.transform(displayValue, 'medium');
            }
        };
        DateTimeFieldComponent.prototype.getFieldValidators = function () {
            var _this = this;
            var validatorFn = function (control) {
                var date = control.value ? moment__default["default"](control.value) : null;
                return control.value && date && !date.isValid()
                    ? { rxDatetimeFormat: { mode: _this.pickerMode, hasSeconds: true } }
                    : null;
            };
            return [validatorFn];
        };
        return DateTimeFieldComponent;
    }(BaseRecordEditorFieldComponent));
    DateTimeFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i3__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DateTimeFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DateTimeFieldComponent, selector: "rx-date-time-field", providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: DateTimeAdapter }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-date-time-field',
                        templateUrl: './date-time-field.component.html',
                        providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: DateTimeAdapter }]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i3__namespace.DatePipe }]; } });

    var DateTimeFieldModule = /** @class */ (function () {
        function DateTimeFieldModule() {
        }
        return DateTimeFieldModule;
    }());
    DateTimeFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateTimeFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldModule, declarations: [DateTimeFieldComponent], imports: [i1.AdaptRxDatetimeModule,
            i3.CommonModule,
            i2$4.FormsModule,
            i2$4.ReactiveFormsModule,
            i1$6.ReadOnlyFieldModule,
            i2$1.TranslateModule] });
    DateTimeFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldModule, providers: [i3.DatePipe], imports: [[
                i1.AdaptRxDatetimeModule,
                i3.CommonModule,
                i2$4.FormsModule,
                i2$4.ReactiveFormsModule,
                i1$6.ReadOnlyFieldModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptRxDatetimeModule,
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i2$4.ReactiveFormsModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$1.TranslateModule
                        ],
                        declarations: [DateTimeFieldComponent],
                        providers: [i3.DatePipe],
                        entryComponents: [DateTimeFieldComponent]
                    }]
            }] });

    var DateTimeFieldDesignModel = /** @class */ (function (_super) {
        __extends(DateTimeFieldDesignModel, _super);
        function DateTimeFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.dateTime];
            return _this;
        }
        return DateTimeFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var DateTimeFieldRegistrationModule = /** @class */ (function () {
        function DateTimeFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.DateTime,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Date/Time',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'calendar_clock_o',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldDesignComponent),
                designComponentModel: DateTimeFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return DateTimeFieldRegistrationModule;
    }());
    DateTimeFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DateTimeFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldRegistrationModule, imports: [DateTimeFieldModule, DateTimeFieldDesignModule] });
    DateTimeFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldRegistrationModule, imports: [[DateTimeFieldModule, DateTimeFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DateTimeFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [DateTimeFieldModule, DateTimeFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var DecimalFieldDesignComponent = /** @class */ (function () {
        function DecimalFieldDesignComponent() {
        }
        return DecimalFieldDesignComponent;
    }());
    DecimalFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DecimalFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DecimalFieldDesignComponent, selector: "rx-decimal-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-decimal-field-design',
                        templateUrl: './decimal-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var DecimalFieldDesignModule = /** @class */ (function () {
        function DecimalFieldDesignModule() {
        }
        return DecimalFieldDesignModule;
    }());
    DecimalFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DecimalFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignModule, declarations: [DecimalFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule] });
    DecimalFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule],
                        declarations: [DecimalFieldDesignComponent],
                        entryComponents: [DecimalFieldDesignComponent]
                    }]
            }] });

    var IntegerFieldComponent = /** @class */ (function (_super) {
        __extends(IntegerFieldComponent, _super);
        function IntegerFieldComponent(injector) {
            var _this = _super.call(this, injector) || this;
            _this.hasFocus = false;
            _this.decimalPipe = injector.get(i3.DecimalPipe);
            return _this;
        }
        IntegerFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            _super.prototype.onConfigInitialized.call(this, config);
            // A separate formControl is used to handle the scenario when invalid number typed to the counter component.
            this.counterFormControl = new i2$4.FormControl(this.formControl.value, this.formControl.validator);
            this.counterFormControl.valueChanges
                .pipe(operators.filter(function (value) { return !lodash.isEqual(_this.formControl.value, value); }), operators.takeUntil(this.destroyed$))
                .subscribe(function (value) {
                _this.setFieldValue(value);
            });
            this.formControl.valueChanges
                .pipe(operators.startWith(this.formControl.value), operators.distinctUntilChanged(lodash.isEqual), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                // To prevent reset the counter invalid value (e.g '-', 'e') during the typing,
                // in this case counterFormControl value is NaN and formControl value is null,
                // counter must be updated only when it doesn't have a focus
                if (!_this.hasFocus) {
                    _this.counterFormControl.setValue(_this.formControl.value);
                }
            });
            this.formControl.touched$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (touched) {
                touched ? _this.counterFormControl.markAsTouched() : _this.counterFormControl.markAsUntouched();
            });
        };
        IntegerFieldComponent.prototype.onBlur = function () {
            this.hasFocus = false;
            this.formControl.markAsTouched();
        };
        IntegerFieldComponent.prototype.onFocus = function () {
            this.hasFocus = true;
        };
        IntegerFieldComponent.prototype.getDisplayValue = function () {
            var fieldValue = this.getFieldValue();
            return lodash.isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue));
        };
        IntegerFieldComponent.prototype.setFieldValue = function (value) {
            if (!lodash.isNull(value) && lodash.isFinite(value)) {
                var bigNumberVal = new BigNumber__default["default"](value);
                if (!bigNumberVal.eq(this.formControl.value)) {
                    this.formControl.markAsDirty();
                    this.formControl.setValue(bigNumberVal);
                }
            }
            else {
                _super.prototype.setFieldValue.call(this, value);
            }
        };
        return IntegerFieldComponent;
    }(BaseRecordEditorFieldComponent));
    IntegerFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldComponent, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IntegerFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IntegerFieldComponent, selector: "rx-integer-field", viewQueries: [{ propertyName: "counterComponent", first: true, predicate: ["counterComponent"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    #counterComponent\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    adaptIntegerNumber\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n  ></adapt-rx-counter>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-integer-field',
                        templateUrl: './integer-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; }, propDecorators: { counterComponent: [{
                    type: i0.ViewChild,
                    args: ['counterComponent']
                }] } });

    var DecimalFieldComponent = /** @class */ (function (_super) {
        __extends(DecimalFieldComponent, _super);
        function DecimalFieldComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DecimalFieldComponent.prototype.getDisplayValue = function () {
            var fieldValue = this.getFieldValue();
            var precision = this.fieldDefinition.precision;
            var digitsInfo = precision === -1 ? null : "1." + precision + "-" + precision;
            return lodash.isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue), digitsInfo);
        };
        return DecimalFieldComponent;
    }(IntegerFieldComponent));
    DecimalFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DecimalFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DecimalFieldComponent, selector: "rx-decimal-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-counter>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-decimal-field',
                        templateUrl: './decimal-field.component.html'
                    }]
            }] });

    var DecimalFieldModule = /** @class */ (function () {
        function DecimalFieldModule() {
        }
        return DecimalFieldModule;
    }());
    DecimalFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DecimalFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldModule, declarations: [DecimalFieldComponent], imports: [obsolete.AdaptTextFieldFormBuilderModule,
            i1.AdaptRxCounterModule,
            i1.AdaptRxValidatorsModule,
            i3.CommonModule,
            i2$4.ReactiveFormsModule,
            i1$6.ReadOnlyFieldModule,
            i2$1.TranslateModule] });
    DecimalFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldModule, imports: [[
                obsolete.AdaptTextFieldFormBuilderModule,
                i1.AdaptRxCounterModule,
                i1.AdaptRxValidatorsModule,
                i3.CommonModule,
                i2$4.ReactiveFormsModule,
                i1$6.ReadOnlyFieldModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            obsolete.AdaptTextFieldFormBuilderModule,
                            i1.AdaptRxCounterModule,
                            i1.AdaptRxValidatorsModule,
                            i3.CommonModule,
                            i2$4.ReactiveFormsModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$1.TranslateModule
                        ],
                        declarations: [DecimalFieldComponent],
                        entryComponents: [DecimalFieldComponent]
                    }]
            }] });

    var DecimalFieldDesignModel = /** @class */ (function (_super) {
        __extends(DecimalFieldDesignModel, _super);
        function DecimalFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.decimal, i1$4.RX_RECORD_DEFINITION.resourceTypes.real];
            return _this;
        }
        return DecimalFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var DecimalFieldRegistrationModule = /** @class */ (function () {
        function DecimalFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            var decimalFieldComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DecimalFieldComponent);
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Decimal,
                aliases: [i1$1.RxViewComponentType.Floating],
                componentFactory: decimalFieldComponentFactory,
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Decimal',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'field_decimal_number',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DecimalFieldDesignComponent),
                designComponentModel: DecimalFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return DecimalFieldRegistrationModule;
    }());
    DecimalFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DecimalFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldRegistrationModule, imports: [DecimalFieldModule, DecimalFieldDesignModule] });
    DecimalFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldRegistrationModule, imports: [[DecimalFieldModule, DecimalFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DecimalFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [DecimalFieldModule, DecimalFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var IntegerFieldDesignComponent = /** @class */ (function () {
        function IntegerFieldDesignComponent() {
        }
        return IntegerFieldDesignComponent;
    }());
    IntegerFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    IntegerFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IntegerFieldDesignComponent, selector: "rx-integer-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-integer-field-design',
                        templateUrl: './integer-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var IntegerFieldDesignModule = /** @class */ (function () {
        function IntegerFieldDesignModule() {
        }
        return IntegerFieldDesignModule;
    }());
    IntegerFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IntegerFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignModule, declarations: [IntegerFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule] });
    IntegerFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule],
                        declarations: [IntegerFieldDesignComponent],
                        entryComponents: [IntegerFieldDesignComponent]
                    }]
            }] });

    var IntegerFieldModule = /** @class */ (function () {
        function IntegerFieldModule() {
        }
        return IntegerFieldModule;
    }());
    IntegerFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IntegerFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldModule, declarations: [IntegerFieldComponent], imports: [obsolete.AdaptTextFieldFormBuilderModule,
            i1.AdaptRxCounterModule,
            i1.AdaptRxValidatorsModule,
            i3.CommonModule,
            i1$6.ReadOnlyFieldModule,
            i2$4.ReactiveFormsModule,
            i2$1.TranslateModule] });
    IntegerFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldModule, imports: [[
                obsolete.AdaptTextFieldFormBuilderModule,
                i1.AdaptRxCounterModule,
                i1.AdaptRxValidatorsModule,
                i3.CommonModule,
                i1$6.ReadOnlyFieldModule,
                i2$4.ReactiveFormsModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            obsolete.AdaptTextFieldFormBuilderModule,
                            i1.AdaptRxCounterModule,
                            i1.AdaptRxValidatorsModule,
                            i3.CommonModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$4.ReactiveFormsModule,
                            i2$1.TranslateModule
                        ],
                        declarations: [IntegerFieldComponent],
                        entryComponents: [IntegerFieldComponent]
                    }]
            }] });

    var IntegerFieldDesignModel = /** @class */ (function (_super) {
        __extends(IntegerFieldDesignModel, _super);
        function IntegerFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.integer];
            return _this;
        }
        return IntegerFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var IntegerFieldRegistrationModule = /** @class */ (function () {
        function IntegerFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Integer,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Integer',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'field_integer_number',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldDesignComponent),
                designComponentModel: IntegerFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return IntegerFieldRegistrationModule;
    }());
    IntegerFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IntegerFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldRegistrationModule, imports: [IntegerFieldModule, IntegerFieldDesignModule] });
    IntegerFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldRegistrationModule, imports: [[IntegerFieldModule, IntegerFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IntegerFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [IntegerFieldModule, IntegerFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RX_SELECTION_FIELD = {
        emptyOption: {
            id: null,
            name: 'None'
        },
        editingMode: {
            radioButtons: 'Radio Buttons',
            dropdown: 'Dropdown'
        },
        editingModeValue: {
            radioButtons: 'radio-buttons',
            dropdown: 'dropdown'
        }
    };

    var SelectionFieldDesignComponent = /** @class */ (function () {
        function SelectionFieldDesignComponent() {
        }
        SelectionFieldDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.model.editingMode$.subscribe(function (mode) {
                _this.setMode(mode);
            });
        };
        SelectionFieldDesignComponent.prototype.setMode = function (mode) {
            this.isRadioButtonMode = mode === RX_SELECTION_FIELD.editingModeValue.radioButtons;
        };
        return SelectionFieldDesignComponent;
    }());
    SelectionFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectionFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectionFieldDesignComponent, selector: "rx-selection-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-select\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [options]=\"[]\"\n  [disabled]=\"true\"\n  *ngIf=\"!isRadioButtonMode\"\n  [required]=\"model.isRequired$ | async\"\n  ngModel\n>\n</adapt-rx-select>\n\n<ng-container *ngIf=\"isRadioButtonMode\">\n  <div class=\"form-group\">\n    <label class=\"form-control-label\">\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </label>\n\n    <adapt-rx-radiobutton-group [(ngModel)]=\"isRadioButtonMode\" [disabled]=\"true\">\n      <adapt-rx-radiobutton *ngIf=\"!(model.isRequired$ | async)\" value=\"None\" label=\"None\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 1\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 2\"></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n  </div>\n</ng-container>\n", styles: ["::ng-deep adapt-select{width:100%}\n"], components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-selection-field-design',
                        templateUrl: './selection-field-design.component.html',
                        styleUrls: ['./selection-field-design.component.scss']
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var SelectionFieldDesignModule = /** @class */ (function () {
        function SelectionFieldDesignModule() {
        }
        return SelectionFieldDesignModule;
    }());
    SelectionFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectionFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignModule, declarations: [SelectionFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxRadiobuttonModule, i2$4.FormsModule, i1.AdaptRxSelectModule] });
    SelectionFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxRadiobuttonModule, i2$4.FormsModule, i1.AdaptRxSelectModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxRadiobuttonModule, i2$4.FormsModule, i1.AdaptRxSelectModule],
                        declarations: [SelectionFieldDesignComponent],
                        entryComponents: [SelectionFieldDesignComponent]
                    }]
            }] });

    var SelectionFieldMode;
    (function (SelectionFieldMode) {
        SelectionFieldMode["RadioButton"] = "radio-buttons";
        SelectionFieldMode["Dropdown"] = "dropdown";
    })(SelectionFieldMode || (SelectionFieldMode = {}));

    var SelectionFieldComponent = /** @class */ (function (_super) {
        __extends(SelectionFieldComponent, _super);
        function SelectionFieldComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectionFieldComponent.prototype.getSelectValue = function () {
            var _this = this;
            return lodash.isNil(this.formControl.value)
                ? []
                : lodash.compact([this.selectOptions.find(function (option) { return option.id === Number(_this.formControl.value); })]);
        };
        SelectionFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            _super.prototype.onConfigInitialized.call(this, config);
            this.isRadioButtonMode = config.editingMode === SelectionFieldMode.RadioButton;
            this.generateControlOptions(this.fieldDefinition);
            this.selectFormControl = new i2$4.FormControl(this.getSelectValue());
            this.selectFormControl.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                _this.setFieldValue(lodash.get(value, '[0].id', null));
            });
            this.formControl.valueChanges
                .pipe(operators.startWith(this.formControl.value), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.selectFormControl.setValue(_this.getSelectValue());
            });
            this.formControl.touched$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (touched) {
                touched ? _this.selectFormControl.markAsTouched() : _this.selectFormControl.markAsUntouched();
            });
        };
        SelectionFieldComponent.prototype.generateControlOptions = function (fieldDefinition) {
            this.selectOptions = lodash.map(fieldDefinition.optionLabelsById, function (label, optionId) { return ({
                name: label,
                id: Number(optionId)
            }); });
            if (!this.isRequired && this.isRadioButtonMode) {
                this.selectOptions.unshift(RX_SELECTION_FIELD.emptyOption);
            }
        };
        SelectionFieldComponent.prototype.getDisplayValue = function () {
            return this.fieldDefinition.optionLabelsById[this.formControl.value];
        };
        SelectionFieldComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        SelectionFieldComponent.prototype.onPopupStatusChange = function (isOpen) {
            if (!isOpen) {
                this.formControl.markAsTouched();
            }
        };
        return SelectionFieldComponent;
    }(BaseRecordEditorFieldComponent));
    SelectionFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectionFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectionFieldComponent, selector: "rx-selection-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-radiobutton-group\n    *ngIf=\"isRadioButtonMode\"\n    [name]=\"guid\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [label]=\"label\"\n  >\n    <adapt-rx-radiobutton\n      *ngFor=\"let item of selectOptions; last as isLast\"\n      [value]=\"item.id\"\n      [label]=\"item.name\"\n      class=\"mt-0 {{ isLast ? 'mb-1' : '' }}\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n\n  <adapt-rx-select\n    *ngIf=\"!isRadioButtonMode\"\n    [options]=\"selectOptions\"\n    [required]=\"isRequired\"\n    [label]=\"label\"\n    [formControl]=\"selectFormControl\"\n    [readonly]=\"isDisabled\"\n    [optionFormatter]=\"optionFormatter\"\n    [enableFilter]=\"true\"\n    [emptyOption]=\"!isRequired\"\n    (onPopupOpenChange)=\"onPopupStatusChange($event)\"\n  >\n  </adapt-rx-select>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-selection-field',
                        templateUrl: './selection-field.component.html'
                    }]
            }] });

    var SelectionFieldModule = /** @class */ (function () {
        function SelectionFieldModule() {
        }
        return SelectionFieldModule;
    }());
    SelectionFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectionFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldModule, declarations: [SelectionFieldComponent], imports: [i1.AdaptRxFormControlModule,
            i1.AdaptRxRadiobuttonModule,
            i3.CommonModule,
            i1$6.ReadOnlyFieldModule,
            i2$4.FormsModule,
            i2$4.ReactiveFormsModule,
            i2$1.TranslateModule,
            i1.AdaptRxLabelModule,
            i1.AdaptRxSelectModule] });
    SelectionFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldModule, imports: [[
                i1.AdaptRxFormControlModule,
                i1.AdaptRxRadiobuttonModule,
                i3.CommonModule,
                i1$6.ReadOnlyFieldModule,
                i2$4.FormsModule,
                i2$4.ReactiveFormsModule,
                i2$1.TranslateModule,
                i1.AdaptRxLabelModule,
                i1.AdaptRxSelectModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptRxFormControlModule,
                            i1.AdaptRxRadiobuttonModule,
                            i3.CommonModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$4.FormsModule,
                            i2$4.ReactiveFormsModule,
                            i2$1.TranslateModule,
                            i1.AdaptRxLabelModule,
                            i1.AdaptRxSelectModule
                        ],
                        declarations: [SelectionFieldComponent],
                        entryComponents: [SelectionFieldComponent]
                    }]
            }] });

    var SelectionFieldDesignModel = /** @class */ (function (_super) {
        __extends(SelectionFieldDesignModel, _super);
        function SelectionFieldDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.selection];
            _this.editingMode$ = _this.sandbox.componentProperties$.pipe(operators.map(function (componentProperties) { return componentProperties.editingMode; }));
            return _this;
        }
        SelectionFieldDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign(Object.assign({}, BaseRecordEditorFieldDesign.getInitialProperties()), { editingMode: RX_SELECTION_FIELD.editingModeValue.dropdown }), initialProperties);
        };
        SelectionFieldDesignModel.prototype.getInspectorConfig = function () {
            var _this = this;
            return _super.prototype.getInspectorConfig.call(this)
                .pipe(operators.map(function (inspectorConfig) { return _this.editInspectorConfig(inspectorConfig); }));
        };
        SelectionFieldDesignModel.prototype.editInspectorConfig = function (inspectorConfig) {
            var valueControlIndex = lodash.findIndex(inspectorConfig.inspectorSectionConfigs[0].controls, function (item) { return item.name === 'value'; });
            var editingModeControl = {
                name: 'editingMode',
                component: i2.SelectFormControlComponent,
                options: {
                    label: 'Editing mode',
                    required: false,
                    options: [
                        {
                            id: RX_SELECTION_FIELD.editingModeValue.dropdown,
                            name: RX_SELECTION_FIELD.editingMode.dropdown
                        },
                        {
                            id: RX_SELECTION_FIELD.editingModeValue.radioButtons,
                            name: RX_SELECTION_FIELD.editingMode.radioButtons
                        }
                    ]
                }
            };
            if (valueControlIndex !== -1) {
                inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);
            }
            return inspectorConfig;
        };
        return SelectionFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var SelectionFieldRegistrationModule = /** @class */ (function () {
        function SelectionFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Selection,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Select',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'field_dropdown',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldDesignComponent),
                designComponentModel: SelectionFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return SelectionFieldRegistrationModule;
    }());
    SelectionFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectionFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldRegistrationModule, imports: [SelectionFieldModule, SelectionFieldDesignModule] });
    SelectionFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldRegistrationModule, imports: [[SelectionFieldModule, SelectionFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectionFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [SelectionFieldModule, SelectionFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var SelectGroupComponent = /** @class */ (function (_super) {
        __extends(SelectGroupComponent, _super);
        function SelectGroupComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldComponents = new Map();
            return _this;
        }
        SelectGroupComponent.prototype.registerFieldComponent = function (fieldIndex, component) {
            this.fieldComponents.set(fieldIndex, component);
        };
        SelectGroupComponent.prototype.getValueForPreviousField = function (currentFieldIndex) {
            var component = this.fieldComponents.get(currentFieldIndex - 1);
            return component ? component.getFieldValue() : null;
        };
        SelectGroupComponent.prototype.resetValueForNextFields = function (currentFieldIndex) {
            var nextFieldIndex = currentFieldIndex + 1;
            var component = this.fieldComponents.get(nextFieldIndex);
            if (component) {
                component.resetFieldValue();
                this.resetValueForNextFields(nextFieldIndex);
            }
        };
        return SelectGroupComponent;
    }(i1$5.BaseViewComponent));
    SelectGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectGroupComponent, selector: "rx-select-group", inputs: { config: "config" }, usesInheritance: true, ngImport: i0__namespace, template: "<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n", components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-select-group',
                        templateUrl: './select-group.component.html'
                    }]
            }], propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var SelectGroupFieldComponent$1 = /** @class */ (function (_super) {
        __extends(SelectGroupFieldComponent, _super);
        function SelectGroupFieldComponent(injector, selectGroupComponent, rxNamedListDefinitionService, rxNamedListService) {
            var _this = _super.call(this, injector) || this;
            _this.selectGroupComponent = selectGroupComponent;
            _this.rxNamedListDefinitionService = rxNamedListDefinitionService;
            _this.rxNamedListService = rxNamedListService;
            _this.optionLoaderFunc = _this.getNamedListOptionPage.bind(_this);
            _this.viewToModelValueAdapterFunc = _this.viewToModelValueAdapter.bind(_this);
            _this.modelToViewValueAdapterFunc = _this.modelToViewValueAdapter.bind(_this);
            _this.selectedOptions = [];
            return _this;
        }
        SelectGroupFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            _super.prototype.onConfigInitialized.call(this, config);
            this.fieldIndex = Number(config.index);
            this.namedListDefinitionName = config.namedListDefinitionName;
            this.selectGroupComponent.registerFieldComponent(this.fieldIndex, this);
            var namedListDefinition$ = this.rxNamedListDefinitionService.get(this.namedListDefinitionName).pipe(operators.take(1));
            var valueChanges$ = this.formControl.valueChanges.pipe(operators.distinctUntilChanged(lodash.isEqual), operators.startWith(this.formControl.value), operators.takeUntil(this.destroyed$));
            rxjs.combineLatest([namedListDefinition$, valueChanges$]).subscribe(function (_a) {
                var _b = __read(_a, 1), namedListDefinition = _b[0];
                _this.namedListDefinition = namedListDefinition;
                _this.fieldIdToFilterBy = config.optionFilterFieldId || namedListDefinition.valueFieldId;
                _this.updateSelectedOption();
                // do not reset value for next fields after record instance id change,
                // in this case formControl is pristine and untouched
                if (_this.formControl.dirty) {
                    _this.selectGroupComponent.resetValueForNextFields(_this.fieldIndex);
                }
                else {
                    _this.resetLoadedOptions();
                }
            });
        };
        SelectGroupFieldComponent.prototype.resetFieldValue = function () {
            _super.prototype.setFieldValue.call(this, null);
            this.resetLoadedOptions();
        };
        SelectGroupFieldComponent.prototype.getDisplayValue = function () {
            return this.readOnlyValue;
        };
        SelectGroupFieldComponent.prototype.getNamedListOptionPage = function (startIndex, pageSize, searchQuery) {
            return this.rxNamedListService.getOptionPage(this.namedListDefinition, searchQuery, this.getSelectionQueryCriteria(), startIndex, pageSize);
        };
        // [{displayValue: 'FOO', value: 'foo'}] -> 'foo'
        SelectGroupFieldComponent.prototype.viewToModelValueAdapter = function (selectedOptions) {
            return lodash.get(selectedOptions, '[0].value', '');
        };
        // 'foo' -> [{displayValue: 'FOO', value: 'foo'}]
        SelectGroupFieldComponent.prototype.modelToViewValueAdapter = function (modelValue) {
            return lodash.isNil(modelValue) ? [] : this.selectedOptions;
        };
        SelectGroupFieldComponent.prototype.updateSelectedOption = function () {
            var _this = this;
            this.showDefaultTitle = false;
            var namedListOptions$;
            if (lodash.isEmpty(this.formControl.value)) {
                namedListOptions$ = rxjs.of([]);
            }
            else {
                // Select with pagination component is not available in the record editor READ mode.
                var loadedOptions = lodash.get(this.selectWithPaginationComponent, 'options', []);
                var namedListOptionCandidate = lodash.find(loadedOptions, { value: this.formControl.value });
                namedListOptions$ = namedListOptionCandidate
                    ? rxjs.of([namedListOptionCandidate])
                    : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, [this.formControl.value]);
            }
            namedListOptions$.pipe(operators.take(1)).subscribe(function (options) {
                _this.showDefaultTitle = true;
                _this.selectedOptions = options;
                if (lodash.isEmpty(options) && _this.formControl.value) {
                    // Selected option might be removed from the named list,
                    // in this case we have to show an empty display value.
                    _this.selectedOptions = [
                        {
                            displayValue: null,
                            value: _this.formControl.value
                        }
                    ];
                }
                if (_this.formControl.dirty) {
                    _this.formControl.markAsTouched();
                }
                _this.triggerModelToViewValueUpdate();
                _this.updateReadOnlyValue();
            });
        };
        SelectGroupFieldComponent.prototype.resetLoadedOptions = function () {
            if (this.selectWithPaginationComponent) {
                this.selectWithPaginationComponent.resetLoadedOptions();
            }
        };
        SelectGroupFieldComponent.prototype.getSelectionQueryCriteria = function () {
            var queryCriteria = null;
            if (this.fieldIndex > 0) {
                var previousFieldValue = this.selectGroupComponent.getValueForPreviousField(this.fieldIndex);
                if (previousFieldValue) {
                    queryCriteria = "('" + this.fieldIdToFilterBy + "' = \"" + previousFieldValue + "\")";
                }
            }
            return queryCriteria;
        };
        SelectGroupFieldComponent.prototype.updateReadOnlyValue = function () {
            this.readOnlyValue = lodash.get(this.selectedOptions, '[0].displayValue', null);
        };
        SelectGroupFieldComponent.prototype.triggerModelToViewValueUpdate = function () {
            // trigger writeValue function in the control value accessor
            this.formControl.setValue(this.formControl.value, { emitEvent: false });
        };
        return SelectGroupFieldComponent;
    }(BaseRecordEditorFieldComponent));
    SelectGroupFieldComponent$1.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupFieldComponent$1, deps: [{ token: i0__namespace.Injector }, { token: SelectGroupComponent }, { token: i2__namespace$6.RxNamedListDefinitionService }, { token: i2__namespace$6.RxNamedListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectGroupFieldComponent$1.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectGroupFieldComponent$1, selector: "rx-select-group-field", viewQueries: [{ propertyName: "selectWithPaginationComponent", first: true, predicate: i2.RxSelectWithPaginationComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-select-with-pagination\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n  ></rx-select-with-pagination>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i2__namespace$5.RxSelectWithPaginationComponent, selector: "rx-select-with-pagination", inputs: ["label", "required", "isMultiSelectionMode", "optionLoader", "pageSize", "showDefaultTitle", "showUncheckAll", "readonly", "template", "viewToModelValueAdapter", "modelToViewValueAdapter", "optionFormatter"], outputs: ["toggleDropdown", "selectionChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupFieldComponent$1, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-select-group-field',
                        templateUrl: './select-group-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: SelectGroupComponent }, { type: i2__namespace$6.RxNamedListDefinitionService }, { type: i2__namespace$6.RxNamedListService }]; }, propDecorators: { selectWithPaginationComponent: [{
                    type: i0.ViewChild,
                    args: [i2.RxSelectWithPaginationComponent]
                }] } });

    var SelectGroupComponentDefinitionAdapterService = /** @class */ (function () {
        function SelectGroupComponentDefinitionAdapterService() {
        }
        SelectGroupComponentDefinitionAdapterService.prototype.adaptDefinition = function (componentDefinition) {
            componentDefinition.componentDefinitions.forEach(function (childComponentDefinition) {
                lodash.assign(childComponentDefinition.propertiesByName, {
                    disabled: componentDefinition.propertiesByName.disabled,
                    hidden: componentDefinition.propertiesByName.hidden,
                    index: Number(childComponentDefinition.propertiesByName.index)
                });
                delete childComponentDefinition.propertiesByName.labelId;
            });
            var layout = {
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName,
                        columns: [
                            {
                                children: lodash.sortBy(componentDefinition.componentDefinitions, 'propertiesByName.index').map(function (component) { return component.guid; })
                            }
                        ]
                    }
                ]
            };
            componentDefinition.propertiesByName = lodash.omit(componentDefinition.propertiesByName, [
                'disabled',
                'hidden',
                'recordInstance',
                'recordDefinition'
            ]);
            componentDefinition.layout = JSON.stringify(layout);
        };
        return SelectGroupComponentDefinitionAdapterService;
    }());
    SelectGroupComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupComponentDefinitionAdapterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SelectGroupComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupComponentDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }] });

    var SelectGroupModule = /** @class */ (function () {
        function SelectGroupModule(viewComponentDefinitionAdapterRegistryService, selectGroupComponentDefinitionAdapterService) {
            this.viewComponentDefinitionAdapterRegistryService = viewComponentDefinitionAdapterRegistryService;
            this.selectGroupComponentDefinitionAdapterService = selectGroupComponentDefinitionAdapterService;
            viewComponentDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.SelectGroup, this.selectGroupComponentDefinitionAdapterService);
        }
        return SelectGroupModule;
    }());
    SelectGroupModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: SelectGroupComponentDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectGroupModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupModule, declarations: [SelectGroupComponent, SelectGroupFieldComponent$1], imports: [i3.CommonModule,
            i1$5.RuntimeViewCanvasModule,
            i2$4.ReactiveFormsModule,
            i2.RxSelectWithPaginationModule,
            i1$6.ReadOnlyFieldModule] });
    SelectGroupModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupModule, providers: [SelectGroupComponentDefinitionAdapterService], imports: [[
                i3.CommonModule,
                i1$5.RuntimeViewCanvasModule,
                i2$4.ReactiveFormsModule,
                i2.RxSelectWithPaginationModule,
                i1$6.ReadOnlyFieldModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1$5.RuntimeViewCanvasModule,
                            i2$4.ReactiveFormsModule,
                            i2.RxSelectWithPaginationModule,
                            i1$6.ReadOnlyFieldModule
                        ],
                        declarations: [SelectGroupComponent, SelectGroupFieldComponent$1],
                        providers: [SelectGroupComponentDefinitionAdapterService],
                        entryComponents: [SelectGroupComponent, SelectGroupFieldComponent$1]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: SelectGroupComponentDefinitionAdapterService }]; } });

    var SelectGroupDesignComponent = /** @class */ (function () {
        function SelectGroupDesignComponent() {
        }
        SelectGroupDesignComponent.prototype.trackByFn = function (index, item) {
            return item.data.guid;
        };
        return SelectGroupDesignComponent;
    }());
    SelectGroupDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectGroupDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectGroupDesignComponent, selector: "rx-select-group-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<ng-template [ngIf]=\"(model.fieldsDesignData$ | async).length\" [ngIfElse]=\"placeholderTemplate\">\n  <adapt-rx-textfield\n    *ngFor=\"let field of model.fieldsDesignData$ | async; trackBy: trackByFn\"\n    [label]=\"field.data.label || '<No Label>'\"\n    [required]=\"model.isFieldRequired(field) | async\"\n    [disabled]=\"true\"\n    ngModel\n    rx-id=\"select-group-field\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n</ng-template>\n\n<ng-template #placeholderTemplate>\n  <adapt-empty-state type=\"objects\" label=\"Add dependent fields in the Properties panel.\"></adapt-empty-state>\n</ng-template>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-select-group-design',
                        templateUrl: './select-group-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var SelectGroupFieldComponent = /** @class */ (function () {
        function SelectGroupFieldComponent(rxDefinitionNameService, rxNamedListDefinitionCacheService, rxRecordDefinitionCacheService) {
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxNamedListDefinitionCacheService = rxNamedListDefinitionCacheService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.definitionPickerOptions = {
                label: 'Named list for options',
                definitionType: i2.RxDefinitionPickerType.NamedList,
                required: true
            };
            this.filterField = [];
            this.filterFieldIdOptions = [];
            this.sourceRecordDefinitionDisplayName = '';
            this.fieldId = [];
        }
        SelectGroupFieldComponent.prototype.ngOnInit = function () {
            this.onNamedListDefinitionNameChange(false);
        };
        SelectGroupFieldComponent.prototype.onNamedListDefinitionNameChange = function (emitEvent) {
            var _this = this;
            if (emitEvent === void 0) { emitEvent = true; }
            rxjs.of(this.fieldformGroup.get('namedListDefinitionName').value)
                .pipe(operators.switchMap(function (namedListDefinitionName) {
                if (namedListDefinitionName) {
                    return _this.rxNamedListDefinitionCacheService
                        .getNamedListDefinition(namedListDefinitionName)
                        .pipe(operators.map(function (namedListDefinition) { return namedListDefinition.recordDefinitionName; }));
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.take(1))
                .subscribe(function (sourceRecordDefinitionName) {
                _this.fieldformGroup.get('sourceRecordDefinitionName').setValue(sourceRecordDefinitionName, { emitEvent: emitEvent });
                _this.filterFieldIdOptions = [];
                _this.setFilterId();
                if (_this.index > 0) {
                    _this.setOptionFilterFieldIdOptions();
                    _this.setSourceRecordDefinitionDisplayName();
                }
            });
        };
        SelectGroupFieldComponent.prototype.setFilterId = function () {
            var fieldId = this.fieldformGroup.get('fieldId').value;
            this.fieldId = lodash.isEmpty(fieldId) ? [] : [this.targetFieldOptions.find(function (option) { return option.id === fieldId; })];
        };
        SelectGroupFieldComponent.prototype.setSourceRecordDefinitionDisplayName = function () {
            var recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;
            this.sourceRecordDefinitionDisplayName =
                recordDefinitionName && this.rxDefinitionNameService.getDisplayName(recordDefinitionName);
        };
        SelectGroupFieldComponent.prototype.setOptionFilterFieldIdOptions = function () {
            var _this = this;
            var recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;
            this.filterField = [];
            if (recordDefinitionName) {
                this.rxRecordDefinitionCacheService
                    .getRecordDefinition(recordDefinitionName)
                    .pipe(operators.map(function (recordDefinition) {
                    return recordDefinition.fieldDefinitions.map(function (fieldDefinition) { return ({
                        name: fieldDefinition.name,
                        id: String(fieldDefinition.id)
                    }); });
                }))
                    .subscribe(function (fieldIdOptions) {
                    var filterFieldId = _this.fieldformGroup.get('optionFilterFieldId').value;
                    _this.filterFieldIdOptions = fieldIdOptions;
                    _this.filterField = lodash.isEmpty(filterFieldId)
                        ? []
                        : [_this.filterFieldIdOptions.find(function (option) { return option.id === filterFieldId; })];
                });
            }
        };
        SelectGroupFieldComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        SelectGroupFieldComponent.prototype.onSelectFilterField = function (filterField) {
            this.fieldformGroup.get('optionFilterFieldId').setValue(lodash.head(filterField).id);
        };
        SelectGroupFieldComponent.prototype.onSelectField = function (field) {
            this.fieldformGroup.get('fieldId').setValue(lodash.head(field).id);
        };
        return SelectGroupFieldComponent;
    }());
    SelectGroupFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupFieldComponent, deps: [{ token: i1__namespace$1.RxDefinitionNameService }, { token: i2__namespace$6.RxNamedListDefinitionCacheService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SelectGroupFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelectGroupFieldComponent, selector: "rx-select-group-field", inputs: { fieldformGroup: "fieldformGroup", index: "index", targetFieldOptions: "targetFieldOptions" }, ngImport: i0__namespace, template: "<div>\n  <adapt-rx-textfield\n    label=\"Display label\"\n    required=\"true\"\n    rx-id=\"display-label-field\"\n    [formControl]=\"fieldformGroup.get('label')\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n\n  <rx-definition-picker\n    [options]=\"definitionPickerOptions\"\n    [formControl]=\"fieldformGroup.get('namedListDefinitionName')\"\n    (ngModelChange)=\"onNamedListDefinitionNameChange()\"\n    required=\"true\"\n    rx-id=\"named-list-definition-name-field\"\n    class=\"form-group d-block\"\n  ></rx-definition-picker>\n\n  <adapt-rx-select\n    label=\"Field for storing selected option value\"\n    rx-id=\"selected-option-value-target-field\"\n    [ngModel]=\"fieldId\"\n    (ngModelChange)=\"onSelectField($event)\"\n    [options]=\"targetFieldOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [required]=\"true\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [ngClass]=\"{ 'form-group d-block': index > 0 }\"\n  ></adapt-rx-select>\n\n  <adapt-rx-textfield\n    label=\"Source record definition\"\n    *ngIf=\"index > 0\"\n    class=\"form-group d-block\"\n    [ngModel]=\"sourceRecordDefinitionDisplayName\"\n    disabled\n    rx-id=\"source-record-definition-name-field\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'This is the record definition that provides the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-textfield>\n\n  <adapt-rx-select\n    *ngIf=\"index > 0\"\n    label=\"Field for filtering option values\"\n    rx-id=\"option-values-filter-field\"\n    [ngModel]=\"filterField\"\n    (ngModelChange)=\"onSelectFilterField($event)\"\n    [options]=\"filterFieldIdOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'Select the field in the source record definition that filters the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-select>\n</div>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$5.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-select-group-field',
                        templateUrl: './select-group-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionNameService }, { type: i2__namespace$6.RxNamedListDefinitionCacheService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }]; }, propDecorators: { fieldformGroup: [{
                    type: i0.Input
                }], index: [{
                    type: i0.Input
                }], targetFieldOptions: [{
                    type: i0.Input
                }] } });

    var FieldSetFormControlComponent = /** @class */ (function (_super) {
        __extends(FieldSetFormControlComponent, _super);
        function FieldSetFormControlComponent(formBuilder, rxGuidService, rxModalService, injector) {
            var _this = _super.call(this, injector) || this;
            _this.formBuilder = formBuilder;
            _this.rxGuidService = rxGuidService;
            _this.rxModalService = rxModalService;
            _this.formArray = _this.formBuilder.array([]);
            _this.maxSelectGroupFieldCount = 6;
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            return _this;
        }
        FieldSetFormControlComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.designerItemModel.fieldProperties$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (fieldModels) { return _this.onWriteValue(fieldModels); });
            this.setDisabledState(this.isDisabled);
        };
        FieldSetFormControlComponent.prototype.onWriteValue = function (fieldModels) {
            var _this = this;
            var _a;
            (_a = this.valueChangeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            var formGroups = fieldModels
                .sort(function (a, b) { return Number(a.index) - Number(b.index); })
                .map(function (model) { return _this.formBuilder.group(Object.assign(Object.assign({}, lodash.omit(model, 'index')), { sourceRecordDefinitionName: { value: null, disabled: true } })); });
            this.formArray = this.formBuilder.array(formGroups);
            this.valueChangeSubscription = this.formArray.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(this.onFormValueChange.bind(this));
        };
        FieldSetFormControlComponent.prototype.onFormValueChange = function (formValue) {
            var value = formValue.map(function (formGroup, index) {
                var inspectorFieldModel = Object.assign(Object.assign({}, lodash.omit(formGroup, ['sourceRecordDefinitionName', 'optionFilterFieldId'])), { index: String(index), fieldId: formGroup.namedListDefinitionName ? formGroup.fieldId : null });
                if (index > 0) {
                    inspectorFieldModel.optionFilterFieldId = formGroup.namedListDefinitionName
                        ? formGroup.optionFilterFieldId
                        : null;
                }
                return inspectorFieldModel;
            });
            this.designerItemModel.onFieldPropertiesChange(value);
        };
        FieldSetFormControlComponent.prototype.addField = function () {
            this.formArray.push(this.getFieldFormGroup());
        };
        FieldSetFormControlComponent.prototype.removeField = function (index) {
            var _this = this;
            this.rxModalService
                .confirm({
                title: 'Warning',
                modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                message: 'Are you sure you want to delete this field?'
            })
                .then(function (response) {
                if (response) {
                    _this.formArray.removeAt(index);
                }
            });
        };
        FieldSetFormControlComponent.prototype.isAddFieldButtonDisabled = function () {
            return this.isDisabled || this.formArray.length >= this.maxSelectGroupFieldCount;
        };
        FieldSetFormControlComponent.prototype.trackByFn = function (index, control) {
            return control.get('guid').value;
        };
        FieldSetFormControlComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        FieldSetFormControlComponent.prototype.getFieldFormGroup = function () {
            return this.formBuilder.group({
                guid: this.rxGuidService.generate(),
                label: null,
                namedListDefinitionName: null,
                fieldId: null,
                sourceRecordDefinitionName: null,
                optionFilterFieldId: null
            });
        };
        FieldSetFormControlComponent.prototype.setDisabledState = function (isDisabled) {
            isDisabled ? this.formArray.disable() : this.formArray.enable();
        };
        return FieldSetFormControlComponent;
    }(i2.InspectorWidgetBase));
    FieldSetFormControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSetFormControlComponent, deps: [{ token: i2__namespace$3.FormBuilder }, { token: i2__namespace$1.RxGuidService }, { token: i1__namespace$6.RxModalService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FieldSetFormControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FieldSetFormControlComponent, selector: "rx-field-set-form-control", inputs: { options: "options", isDisabled: "isDisabled" }, usesInheritance: true, ngImport: i0__namespace, template: "<adapt-button\n  btn-type=\"tertiary\"\n  rx-id=\"add-field-button\"\n  class=\"d-icon-plus_circle px-0 py-0\"\n  (click)=\"addField()\"\n  [disabled]=\"isAddFieldButtonDisabled()\"\n>\n  Add dependent field\n</adapt-button>\n\n<div\n  class=\"card mt-2\"\n  *ngFor=\"let formGroupControl of formArray.controls; trackBy: trackByFn; let index = index\"\n  rx-id=\"select-group-field-card\"\n>\n  <div class=\"card-block p-2\">\n    <button\n      (click)=\"removeField(index)\"\n      class=\"close position-relative\"\n      type=\"button\"\n      aria-label=\"Remove\"\n      rx-id=\"remove-field-button\"\n      *ngIf=\"!isDisabled\"\n    ></button>\n\n    <rx-select-group-field\n      [fieldformGroup]=\"formGroupControl\"\n      [index]=\"index\"\n      [targetFieldOptions]=\"options.targetFieldOptions\"\n    ></rx-select-group-field>\n  </div>\n</div>\n", styles: [".close{z-index:1}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: SelectGroupFieldComponent, selector: "rx-select-group-field", inputs: ["fieldformGroup", "index", "targetFieldOptions"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldSetFormControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-field-set-form-control',
                        templateUrl: './field-set-form-control.component.html',
                        styleUrls: ['./field-set-form-control.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$3.FormBuilder }, { type: i2__namespace$1.RxGuidService }, { type: i1__namespace$6.RxModalService }, { type: i0__namespace.Injector }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], isDisabled: [{
                    type: i0.Input
                }] } });

    var SelectGroupDesignModel = /** @class */ (function (_super) {
        __extends(SelectGroupDesignModel, _super);
        function SelectGroupDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            _this.rxFieldDefinitionService = _this.injector.get(i1$4.RxFieldDefinitionService);
            _this.recordEditorGuid$ = _this.sandbox
                .getParentComponentGuid(i1$1.RxViewComponentType.RecordEditor)
                .pipe(operators.take(1), operators.shareReplay(1));
            _this.recordEditorMode$ = _this.recordEditorGuid$.pipe(operators.switchMap(function (recordEditorGuid) {
                return _this.sandbox.getComponentPropertyValue('mode', recordEditorGuid);
            }));
            _this.recordDefinitionName$ = _this.recordEditorGuid$.pipe(operators.switchMap(function (recordEditorGuid) {
                return _this.sandbox.getComponentPropertyValue('recordDefinitionName', recordEditorGuid);
            }), operators.shareReplay(1));
            _this.fieldDefinitions$ = _this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) {
                if (recordDefinitionName) {
                    return _this.rxRecordDefinitionCacheService
                        .getRecordDefinition(recordDefinitionName)
                        .pipe(operators.catchError(function (error) { return rxjs.EMPTY; }));
                }
                else {
                    return rxjs.of(null);
                }
            }), operators.distinctUntilChanged(), operators.map(function (recordDefinition) {
                if (recordDefinition && recordDefinition.fieldDefinitions) {
                    return lodash.filter(recordDefinition.fieldDefinitions, {
                        resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character
                    });
                }
                else {
                    return [];
                }
            }), operators.shareReplay(1));
            _this.inspectorTargetFieldOptions$ = rxjs.combineLatest([_this.fieldDefinitions$, _this.recordEditorMode$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), fieldDefinitions = _b[0], recordEditorMode = _b[1];
                return [
                    lodash.filter(fieldDefinitions, { resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character }),
                    recordEditorMode
                ];
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), characterFieldDefinitions = _b[0], recordEditorMode = _b[1];
                return lodash.flow(function (fieldDefinitions) { return lodash.filter(fieldDefinitions, function (definition) {
                    var isSystemField = _this.rxFieldDefinitionService.isSystemField(definition);
                    return !isSystemField || (isSystemField && recordEditorMode === exports.RecordEditorMode.Edit);
                }); }, function (fieldDefinitions) { return lodash.map(fieldDefinitions, function (definition) { return ({
                    name: definition.name,
                    id: String(definition.id)
                }); }); }, function (options) { return lodash.sortBy(options, 'name'); })(characterFieldDefinitions);
            }), operators.shareReplay(1));
            _this.fieldsDesignData$ = _this.sandbox.getChildComponents();
            _this.fieldProperties$ = _this.fieldsDesignData$.pipe(operators.map(function (fieldComponentsDesignData) { return lodash.map(fieldComponentsDesignData, function (field) { return (Object.assign(Object.assign({}, field.data), { guid: field.guid })); }); }));
            // initial inspector configuration and component properties set
            rxjs.combineLatest([_this.recordDefinitionName$, _this.inspectorTargetFieldOptions$, _this.recordEditorGuid$])
                .pipe(operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 3), recordDefinitionName = _b[0], inspectorTargetFieldOptions = _b[1], recordEditorGuid = _b[2];
                _this.sandbox.updateInspectorConfig(_this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid));
            });
            _this.inspectorTargetFieldOptions$
                .pipe(operators.withLatestFrom(_this.recordDefinitionName$, _this.recordEditorGuid$))
                .subscribe(function (_a) {
                var _b = __read(_a, 3), inspectorTargetFieldOptions = _b[0], recordDefinitionName = _b[1], recordEditorGuid = _b[2];
                _this.sandbox.updateInspectorConfig(_this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid));
            });
            rxjs.combineLatest([_this.sandbox.componentProperties$, _this.fieldProperties$])
                .pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), componentProperties = _b[0], fieldProperties = _b[1];
                return _this.validate(componentProperties, fieldProperties);
            }))
                .subscribe(function (validationIssues) {
                _this.sandbox.setValidationIssues(validationIssues);
            });
            return _this;
        }
        SelectGroupDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign(Object.assign({}, i1$1.RX_DISABLED_PROP_DEFAULT_VALUE), i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        SelectGroupDesignModel.prototype.onFieldPropertiesChange = function (fieldProperties) {
            var fieldComponentPayloads = this.getFieldComponentPayloads(fieldProperties);
            this.sandbox.setChildren(fieldComponentPayloads);
        };
        SelectGroupDesignModel.prototype.isFieldRequired = function (field) {
            return this.fieldDefinitions$.pipe(operators.map(function (fieldDefinitions) {
                var fieldDefinition = field.data.fieldId && lodash.find(fieldDefinitions, { id: Number(field.data.fieldId) });
                return Boolean(fieldDefinition) && fieldDefinition.fieldOption === i1$4.RX_RECORD_DEFINITION.fieldOptions.required;
            }));
        };
        SelectGroupDesignModel.prototype.getPropertiesByName = function (properties) {
            return lodash.pick(properties, ['disabled', 'hidden', 'styles', i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME]);
        };
        SelectGroupDesignModel.prototype.validate = function (componentProperties, fieldProperties) {
            var _this = this;
            var validationErrorMessages = [];
            if (lodash.isEmpty(fieldProperties)) {
                validationErrorMessages.push('Field set cannot be empty.');
            }
            else {
                var fieldsWithLabel = lodash.filter(fieldProperties, function (model) { return model.label; });
                if (fieldsWithLabel.length !== fieldProperties.length) {
                    validationErrorMessages.push('Display label cannot be blank.');
                }
                if (lodash.uniqBy(fieldsWithLabel, 'label').length !== fieldsWithLabel.length) {
                    validationErrorMessages.push('Display labels must be unique.');
                }
                if (lodash.reject(fieldProperties, function (model) { return model.namedListDefinitionName; }).length) {
                    validationErrorMessages.push('Named list for options cannot be blank.');
                }
                if (lodash.reject(fieldProperties, function (model) { return model.fieldId; }).length) {
                    validationErrorMessages.push('Field for storing selected option value cannot be blank.');
                }
            }
            var validationIssues = validationErrorMessages
                .map(function (message) { return _this.sandbox.createError(message); })
                .concat(i1$3.validateStandardProps(componentProperties));
            return rxjs.of(validationIssues);
        };
        SelectGroupDesignModel.prototype.getFieldComponentPayloads = function (fieldProperties) {
            return lodash.map(fieldProperties, function (model) { return ({
                type: i1$1.RxViewComponentType.SelectGroupField,
                guid: model.guid,
                data: lodash.omit(model, 'guid')
            }); });
        };
        SelectGroupDesignModel.prototype.getBaseInspectorConfig = function (targetFieldOptions, recordDefinitionName, recordEditorGuid) {
            var generalGroup = {
                label: 'General',
                controls: []
            };
            if (recordDefinitionName) {
                generalGroup.controls = __spreadArray([i1$3.getDisabledFieldInspectorConfig()], __read(i1$3.getStandardPropsInspectorConfigs()));
            }
            else {
                generalGroup.controls = [
                    {
                        component: i2.ValidationFormControlComponent,
                        options: {
                            text: 'You must select a Record definition before editing field component.',
                            propertyName: 'recordDefinitionName',
                            componentGuid: recordEditorGuid
                        }
                    }
                ];
            }
            return {
                inspectorSectionConfigs: recordDefinitionName
                    ? [
                        generalGroup,
                        {
                            label: 'Field set',
                            controls: [
                                {
                                    component: FieldSetFormControlComponent,
                                    options: {
                                        targetFieldOptions: targetFieldOptions
                                    }
                                }
                            ]
                        }
                    ]
                    : [generalGroup]
            };
        };
        return SelectGroupDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var SelectGroupDesignModule = /** @class */ (function () {
        function SelectGroupDesignModule() {
        }
        return SelectGroupDesignModule;
    }());
    SelectGroupDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectGroupDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignModule, declarations: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent], imports: [i2$4.FormsModule,
            i3.CommonModule,
            i1.AdaptButtonModule,
            i2$4.ReactiveFormsModule,
            i2.RxDefinitionPickerModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptRxSelectModule,
            i1.AdaptEmptyStateModule], exports: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent] });
    SelectGroupDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignModule, imports: [[
                i2$4.FormsModule,
                i3.CommonModule,
                i1.AdaptButtonModule,
                i2$4.ReactiveFormsModule,
                i2.RxDefinitionPickerModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptRxSelectModule,
                i1.AdaptEmptyStateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],
                        imports: [
                            i2$4.FormsModule,
                            i3.CommonModule,
                            i1.AdaptButtonModule,
                            i2$4.ReactiveFormsModule,
                            i2.RxDefinitionPickerModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptEmptyStateModule
                        ],
                        exports: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],
                        entryComponents: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent]
                    }]
            }] });

    var SelectGroupRegistrationModule = /** @class */ (function () {
        function SelectGroupRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.SelectGroup,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupComponent),
                properties: [i1$1.RX_AVAILABLE_ON_DEVICES_PROP_DESC],
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Select group',
                designComponentFactory: componentFactoryResolver.resolveComponentFactory(SelectGroupDesignComponent),
                designComponentModel: SelectGroupDesignModel,
                isContainerComponent: true,
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'field_dropdowns',
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            }, {
                type: i1$1.RxViewComponentType.SelectGroupField,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupFieldComponent$1),
                properties: RX_BASE_FIELD_PROPERTIES,
                isDataComponent: true
            });
        }
        return SelectGroupRegistrationModule;
    }());
    SelectGroupRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SelectGroupRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupRegistrationModule, imports: [SelectGroupModule, SelectGroupDesignModule] });
    SelectGroupRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupRegistrationModule, imports: [[SelectGroupModule, SelectGroupDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelectGroupRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [SelectGroupModule, SelectGroupDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var TextFieldDesignComponent = /** @class */ (function () {
        function TextFieldDesignComponent() {
        }
        return TextFieldDesignComponent;
    }());
    TextFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TextFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TextFieldDesignComponent, selector: "rx-character-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-character-field-design',
                        templateUrl: 'text-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TextFieldDesignModule = /** @class */ (function () {
        function TextFieldDesignModule() {
        }
        return TextFieldDesignModule;
    }());
    TextFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignModule, declarations: [TextFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule] });
    TextFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule],
                        declarations: [TextFieldDesignComponent],
                        entryComponents: [TextFieldDesignComponent]
                    }]
            }] });

    var TextFieldExpressionConfigurator = /** @class */ (function (_super) {
        __extends(TextFieldExpressionConfigurator, _super);
        function TextFieldExpressionConfigurator(injector, componentGuid, componentModel) {
            var _this = _super.call(this, injector, componentGuid, componentModel) || this;
            _this.injector = injector;
            _this.componentGuid = componentGuid;
            _this.componentModel = componentModel;
            var dataDictionary$ = _this.componentModel.selectedFieldDefinition$.pipe(operators.filter(function (fieldDefinition) { return Boolean(fieldDefinition.namedListDefinition); }), operators.switchMap(function (fieldDefinition) {
                var namedListFilterExpressionConfigurator = new i1$3.NamedListFilterExpressionConfigurator(fieldDefinition, _this.injector);
                return namedListFilterExpressionConfigurator.getDataDictionary();
            }));
            _this.configureForProperty({
                propertyPath: 'additionalQueryCriteria',
                dataDictionary$: dataDictionary$,
                operators: i1$2.ExpressionOperatorRowsByGroup.get(i1$2.ExpressionOperatorGroup.AllServer)
            });
            return _this;
        }
        return TextFieldExpressionConfigurator;
    }(i1$3.RxViewComponentExpressionConfigurator));

    exports.TextFieldMultiSelectionType = void 0;
    (function (TextFieldMultiSelectionType) {
        TextFieldMultiSelectionType["Enabled"] = "true";
        TextFieldMultiSelectionType["Disabled"] = "false";
    })(exports.TextFieldMultiSelectionType || (exports.TextFieldMultiSelectionType = {}));

    var TextFieldComponent = /** @class */ (function (_super) {
        __extends(TextFieldComponent, _super);
        function TextFieldComponent(injector, fieldDefinitionService, rxNamedListDefinitionService, rxNamedListService) {
            var _this = _super.call(this, injector) || this;
            _this.fieldDefinitionService = fieldDefinitionService;
            _this.rxNamedListDefinitionService = rxNamedListDefinitionService;
            _this.rxNamedListService = rxNamedListService;
            _this.optionLoaderFunc = _this.getNamedListOptionPage.bind(_this);
            _this.viewToModelValueAdapterFunc = _this.viewToModelValueAdapter.bind(_this);
            _this.modelToViewValueAdapterFunc = _this.modelToViewValueAdapter.bind(_this);
            _this.selectedOptions = [];
            _this.multiSelectDelimiter = ';';
            _this.isDropdownOpen = false;
            return _this;
        }
        TextFieldComponent.prototype.onConfigInitialized = function (config) {
            var _this = this;
            _super.prototype.onConfigInitialized.call(this, config);
            this.isPasswordField =
                lodash.includes(i1$4.RX_RECORD_DEFINITION.passwordFieldIds, this.fieldId) || this.fieldDefinition.shouldPersistHashed;
            this.namedListDefinitionName = this.fieldDefinition.namedListDefinition;
            this.isNamedListAttached = Boolean(this.namedListDefinitionName);
            this.isMultipleSelectionEnabled = config.enableMultiSelection === exports.TextFieldMultiSelectionType.Enabled;
            if (this.fieldDefinition.maxLength && !this.fieldDefinitionService.isSystemField(this.fieldDefinition)) {
                this.maxLength = this.fieldDefinition.maxLength;
            }
            if (this.isNamedListAttached) {
                var namedListDefinition$ = this.rxNamedListDefinitionService
                    .get(this.namedListDefinitionName)
                    .pipe(operators.shareReplay(1), operators.take(1));
                var valueChanges$ = this.formControl.valueChanges.pipe(operators.distinctUntilChanged(lodash.isEqual), operators.startWith(this.formControl.value), operators.filter(function () { return !_this.isDropdownOpen; }), operators.takeUntil(this.destroyed$));
                this.config
                    .pipe(operators.debounceTime(250), operators.pluck('additionalQueryCriteria'), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                    .subscribe(function (additionalQueryCriteria) {
                    if (!lodash.isNil(_this.additionalQueryCriteria)) {
                        _this.selectWithPaginationComponent.resetLoadedOptions();
                        _this.setFieldValue(null);
                    }
                    _this.additionalQueryCriteria = additionalQueryCriteria;
                });
                rxjs.combineLatest([namedListDefinition$, valueChanges$]).subscribe(function (_a) {
                    var _b = __read(_a, 1), namedListDefinition = _b[0];
                    _this.namedListDefinition = namedListDefinition;
                    _this.updateSelection();
                });
            }
        };
        TextFieldComponent.prototype.getDisplayValue = function () {
            var displayValue = _super.prototype.getDisplayValue.call(this);
            if (this.isPasswordField) {
                displayValue = '********';
            }
            else if (this.isNamedListAttached) {
                displayValue = this.namedListFormattedValue;
            }
            return displayValue;
        };
        TextFieldComponent.prototype.getNamedListOptionPage = function (startIndex, pageSize, searchQuery) {
            return this.rxNamedListService.getOptionPage(this.namedListDefinition, searchQuery, this.additionalQueryCriteria, startIndex, pageSize);
        };
        // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar'
        TextFieldComponent.prototype.viewToModelValueAdapter = function (selectedOptions) {
            this.selectedOptions = selectedOptions;
            this.updateNamedListFormattedValue();
            return selectedOptions.map(function (option) { return option.value; }).join(this.multiSelectDelimiter);
        };
        // 'foo;bar' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]
        TextFieldComponent.prototype.modelToViewValueAdapter = function (modelValue) {
            return modelValue ? this.selectedOptions : [];
        };
        TextFieldComponent.prototype.onToggleDropdown = function (isOpen) {
            this.isDropdownOpen = isOpen;
        };
        TextFieldComponent.prototype.getOptionValues = function (modelValue) {
            return modelValue ? lodash.compact(modelValue.split(this.multiSelectDelimiter)) : [];
        };
        // Update selection by form control value.
        // Usually, this needs to be done when form control value changes programmatically, e.g:
        // - in initialization text field component phase
        // - by set property action
        // - after record editor record instance id change
        TextFieldComponent.prototype.updateSelection = function () {
            var _this = this;
            this.showDefaultTitle = false;
            var selectedOptionValues = this.getOptionValues(this.formControl.value);
            if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {
                // If the field instance contains multiple values but the component doesn't have multiple selection enabled
                // e.g. when field was edited in the data editor, the display value will be blank (null).
                this.selectedOptions = [
                    {
                        displayValue: null,
                        value: this.formControl.value
                    }
                ];
                this.triggerModelToViewValueUpdate();
                this.updateNamedListFormattedValue();
            }
            else {
                // Select with pagination component is not available in the record editor READ mode.
                var loadedOptions_1 = lodash.get(this.selectWithPaginationComponent, 'options', []);
                // Check if all options for selected values are already loaded.
                (selectedOptionValues.every(function (selectedValue) { return loadedOptions_1.find(function (option) { return option.value === selectedValue; }); })
                    ? rxjs.of(loadedOptions_1)
                    : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, selectedOptionValues)).subscribe(function (options) {
                    _this.showDefaultTitle = true;
                    if (!_this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {
                        // If the field instance contains multiple values but the component doesn't have multiple selection
                        // enabled e.g. when field was edited in the data editor, the display value will be blank (null).
                        _this.selectedOptions = [
                            {
                                displayValue: null,
                                value: _this.formControl.value
                            }
                        ];
                    }
                    else {
                        // If the record instance with a given value is not found e.g. referenced record
                        // was deleted, the display value for such record instance will be blank (null).
                        _this.selectedOptions = selectedOptionValues.map(function (optionValue) { return lodash.find(options, { value: optionValue }) || {
                            displayValue: null,
                            value: optionValue
                        }; });
                    }
                    if (_this.formControl.dirty) {
                        _this.formControl.markAsTouched();
                    }
                    _this.triggerModelToViewValueUpdate();
                    _this.updateNamedListFormattedValue();
                });
            }
        };
        TextFieldComponent.prototype.updateNamedListFormattedValue = function () {
            if (this.isMultipleSelectionEnabled) {
                var visibleOptionsCount = 50;
                this.namedListFormattedValue =
                    this.selectedOptions
                        .slice(0, visibleOptionsCount)
                        .map(function (option) { return option.displayValue; })
                        .filter(Boolean)
                        .join(', ') || null;
                if (this.selectedOptions.length >= visibleOptionsCount) {
                    this.namedListFormattedValue += '...';
                }
            }
            else {
                this.namedListFormattedValue = this.selectedOptions.length ? lodash.first(this.selectedOptions).displayValue : null;
            }
        };
        TextFieldComponent.prototype.triggerModelToViewValueUpdate = function () {
            // trigger writeValue function in the control value accessor
            this.formControl.setValue(this.formControl.value, { emitEvent: false });
        };
        return TextFieldComponent;
    }(BaseRecordEditorFieldComponent));
    TextFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: i2__namespace$6.RxNamedListDefinitionService }, { token: i2__namespace$6.RxNamedListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TextFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TextFieldComponent, selector: "rx-text-field", viewQueries: [{ propertyName: "selectWithPaginationComponent", first: true, predicate: i2.RxSelectWithPaginationComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textfield\n    *ngIf=\"!isNamedListAttached\"\n    [label]=\"label\"\n    [isPassword]=\"isPasswordField\"\n    [formControl]=\"formControl\"\n    [maxlength]=\"maxLength\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [autocomplete]=\"!isPasswordField\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-textfield>\n\n  <rx-select-with-pagination\n    *ngIf=\"isNamedListAttached\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [required]=\"isRequired\"\n    [isMultiSelectionMode]=\"isMultipleSelectionEnabled\"\n    (toggleDropdown)=\"onToggleDropdown($event)\"\n    [template]=\"namedListOptionTemplate\"\n  ></rx-select-with-pagination>\n</ng-template>\n\n<ng-template #namedListOptionTemplate let-option>\n  {{ option.displayValue }}\n  <div *ngIf=\"option.contextualFields\" class=\"text-secondary text-truncate\" [title]=\"option.title\">\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of option.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$5.RxSelectWithPaginationComponent, selector: "rx-select-with-pagination", inputs: ["label", "required", "isMultiSelectionMode", "optionLoader", "pageSize", "showDefaultTitle", "showUncheckAll", "readonly", "template", "viewToModelValueAdapter", "modelToViewValueAdapter", "optionFormatter"], outputs: ["toggleDropdown", "selectionChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-text-field',
                        templateUrl: './text-field.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: i2__namespace$6.RxNamedListDefinitionService }, { type: i2__namespace$6.RxNamedListService }]; }, propDecorators: { selectWithPaginationComponent: [{
                    type: i0.ViewChild,
                    args: [i2.RxSelectWithPaginationComponent]
                }] } });

    var TextFieldModule = /** @class */ (function () {
        function TextFieldModule() {
        }
        return TextFieldModule;
    }());
    TextFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldModule, declarations: [TextFieldComponent], imports: [i3.CommonModule,
            i1$6.ReadOnlyFieldModule,
            i2$4.ReactiveFormsModule,
            i2$1.TranslateModule,
            i2.RxSelectWithPaginationModule,
            i1.AdaptRxTextfieldModule], exports: [TextFieldComponent] });
    TextFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldModule, imports: [[
                i3.CommonModule,
                i1$6.ReadOnlyFieldModule,
                i2$4.ReactiveFormsModule,
                i2$1.TranslateModule,
                i2.RxSelectWithPaginationModule,
                i1.AdaptRxTextfieldModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1$6.ReadOnlyFieldModule,
                            i2$4.ReactiveFormsModule,
                            i2$1.TranslateModule,
                            i2.RxSelectWithPaginationModule,
                            i1.AdaptRxTextfieldModule
                        ],
                        declarations: [TextFieldComponent],
                        exports: [TextFieldComponent],
                        entryComponents: [TextFieldComponent]
                    }]
            }] });

    var TextFieldDesignModel = /** @class */ (function (_super) {
        __extends(TextFieldDesignModel, _super);
        function TextFieldDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.character];
            _this.translateService = _this.injector.get(i2$1.TranslateService);
            return _this;
        }
        TextFieldDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign(Object.assign({}, BaseRecordEditorFieldDesign.getInitialProperties()), { enableMultiSelection: null, additionalQueryCriteria: null }), initialProperties);
        };
        TextFieldDesignModel.prototype.getInspectorConfig = function () {
            var _this = this;
            return this.selectedFieldDefinition$.pipe(operators.switchMap(function (fieldDefinition) { return _super.prototype.getInspectorConfig.call(_this)
                .pipe(operators.map(function (inspectorConfig) { return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.namedListDefinition)
                ? _this.getNamedListInspectorConfig(inspectorConfig, fieldDefinition)
                : inspectorConfig; })); }));
        };
        TextFieldDesignModel.prototype.getNamedListInspectorConfig = function (inspectorConfig, fieldDefinition) {
            var _a;
            var namedListFilterExpressionConfigurator = new i1$3.NamedListFilterExpressionConfigurator(fieldDefinition, this.injector);
            var enableMultiSelectionControl = {
                name: 'enableMultiSelection',
                component: i2.SwitchFormControlComponent,
                options: {
                    label: 'Enable multi-selection'
                }
            };
            var additionalQueryCriteriaControls = [
                {
                    name: 'namedListDefinitionName',
                    component: i2.RxDefinitionPickerComponent,
                    isDisabled: true,
                    options: {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.named-list.label'),
                        definitionType: i2.RX_DEFINITION_PICKER.definitionTypes.namedList.type
                    }
                },
                {
                    name: 'additionalQueryCriteria',
                    component: i2.ExpressionFormControlComponent,
                    options: {
                        label: 'Additional named list filter',
                        tooltip: new i1$2.Tooltip('Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'),
                        dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),
                        operators: namedListFilterExpressionConfigurator.getOperators()
                    }
                }
            ];
            inspectorConfig.inspectorSectionConfigs[0].controls.push(enableMultiSelectionControl);
            (_a = inspectorConfig.inspectorSectionConfigs[0].controls).push.apply(_a, __spreadArray([], __read(additionalQueryCriteriaControls)));
            // update the named list name for named list inspector control
            this.sandbox.updateComponentProperties({ namedListDefinitionName: fieldDefinition.namedListDefinition });
            return inspectorConfig;
        };
        TextFieldDesignModel.prototype.getPropertiesByName = function (properties) {
            return lodash.omit(_super.prototype.getPropertiesByName.call(this, properties), 'namedListDefinitionName');
        };
        return TextFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var TextFieldRegistrationModule = /** @class */ (function () {
        function TextFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver, rxRecordQueryExpressionEvaluatorService) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxRecordQueryExpressionEvaluatorService = rxRecordQueryExpressionEvaluatorService;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Character,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldComponent),
                properties: __spreadArray(__spreadArray([], __read(RX_BASE_FIELD_PROPERTIES)), [
                    {
                        name: 'enableMultiSelection',
                        designType: i1$1.ViewComponentPropertyType.Boolean
                    },
                    {
                        name: 'namedListDefinitionName',
                        designType: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'additionalQueryCriteria',
                        designType: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true,
                        evaluatorService: this.rxRecordQueryExpressionEvaluatorService
                    }
                ]),
                name: 'Text',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'field_text',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldDesignComponent),
                designComponentModel: TextFieldDesignModel,
                expressionConfigurator: TextFieldExpressionConfigurator,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return TextFieldRegistrationModule;
    }());
    TextFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxRecordQueryExpressionEvaluatorService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldRegistrationModule, imports: [TextFieldModule, TextFieldDesignModule] });
    TextFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldRegistrationModule, imports: [[TextFieldModule, TextFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [TextFieldModule, TextFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxRecordQueryExpressionEvaluatorService }]; } });

    var TextareaFieldDesignComponent = /** @class */ (function () {
        function TextareaFieldDesignComponent() {
        }
        return TextareaFieldDesignComponent;
    }());
    TextareaFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TextareaFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TextareaFieldDesignComponent, selector: "rx-textarea-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-textarea\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n  rows=\"3\"\n></adapt-rx-textarea>\n", components: [{ type: i1__namespace.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-textarea-field-design',
                        templateUrl: './textarea-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TextareaFieldDesignModule = /** @class */ (function () {
        function TextareaFieldDesignModule() {
        }
        return TextareaFieldDesignModule;
    }());
    TextareaFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextareaFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignModule, declarations: [TextareaFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxTextareaModule, i2$4.FormsModule] });
    TextareaFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxTextareaModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxTextareaModule, i2$4.FormsModule],
                        declarations: [TextareaFieldDesignComponent],
                        entryComponents: [TextareaFieldDesignComponent]
                    }]
            }] });

    var TextareaFieldComponent = /** @class */ (function (_super) {
        __extends(TextareaFieldComponent, _super);
        function TextareaFieldComponent(injector, rxFieldDefinitionService) {
            var _this = _super.call(this, injector) || this;
            _this.rxFieldDefinitionService = rxFieldDefinitionService;
            return _this;
        }
        TextareaFieldComponent.prototype.onConfigInitialized = function (config) {
            _super.prototype.onConfigInitialized.call(this, config);
            if (this.fieldDefinition.maxLength && !this.rxFieldDefinitionService.isSystemField(this.fieldDefinition)) {
                this.maxLength = this.fieldDefinition.maxLength;
            }
        };
        return TextareaFieldComponent;
    }(BaseRecordEditorFieldComponent));
    TextareaFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$5.RxFieldDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TextareaFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TextareaFieldComponent, selector: "rx-textarea-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textarea\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [maxlength]=\"maxLength\"\n    [rows]=\"3\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [label]=\"label\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  >\n  </adapt-rx-textarea>\n</ng-template>\n", styles: [":host ::ng-deep textarea{resize:none}:host ::ng-deep rx-read-only-field .read-only-content{max-height:6em;overflow-y:auto;word-break:break-all;white-space:pre-wrap}\n"], components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-textarea-field',
                        templateUrl: './textarea-field.component.html',
                        styleUrls: ['./textarea-field.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$5.RxFieldDefinitionService }]; } });

    var TextareaFieldModule = /** @class */ (function () {
        function TextareaFieldModule() {
        }
        return TextareaFieldModule;
    }());
    TextareaFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextareaFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldModule, declarations: [TextareaFieldComponent], imports: [i3.CommonModule, i2$4.ReactiveFormsModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i1.AdaptRxTextareaModule] });
    TextareaFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldModule, imports: [[i3.CommonModule, i2$4.ReactiveFormsModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i1.AdaptRxTextareaModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2$4.ReactiveFormsModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i1.AdaptRxTextareaModule],
                        declarations: [TextareaFieldComponent],
                        entryComponents: [TextareaFieldComponent]
                    }]
            }] });

    var TextareaFieldDesignModel = /** @class */ (function (_super) {
        __extends(TextareaFieldDesignModel, _super);
        function TextareaFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.character];
            return _this;
        }
        return TextareaFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var TextareaFieldRegistrationModule = /** @class */ (function () {
        function TextareaFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Textarea,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Textarea',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'area_text',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldDesignComponent),
                designComponentModel: TextareaFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return TextareaFieldRegistrationModule;
    }());
    TextareaFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextareaFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldRegistrationModule, imports: [TextareaFieldModule, TextareaFieldDesignModule] });
    TextareaFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldRegistrationModule, imports: [[TextareaFieldModule, TextareaFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TextareaFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [TextareaFieldModule, TextareaFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var TimeFieldDesignComponent = /** @class */ (function () {
        function TimeFieldDesignComponent() {
            this.pickerMode = i1.RxDatetimePickerMode.Time;
        }
        return TimeFieldDesignComponent;
    }());
    TimeFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TimeFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TimeFieldDesignComponent, selector: "rx-time-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [(ngModel)]=\"timeValue\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n", components: [{ type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-time-field-design',
                        templateUrl: './time-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TimeFieldDesignModule = /** @class */ (function () {
        function TimeFieldDesignModule() {
        }
        return TimeFieldDesignModule;
    }());
    TimeFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TimeFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignModule, declarations: [TimeFieldDesignComponent], imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule] });
    TimeFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignModule, imports: [[i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i2$4.FormsModule],
                        declarations: [TimeFieldDesignComponent],
                        entryComponents: [TimeFieldDesignComponent]
                    }]
            }] });

    var TimeAdapter = /** @class */ (function (_super) {
        __extends(TimeAdapter, _super);
        function TimeAdapter() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.storeTimeFormat = 'HH:mm:ss';
            return _this;
        }
        TimeAdapter.prototype.fromModel = function (dateString) {
            var adaptedValue = null;
            var date = moment__default["default"](dateString, 'LTS');
            if (date && date.isValid()) {
                adaptedValue = {
                    year: date.year(),
                    month: date.month(),
                    date: date.date(),
                    hours: date.hours(),
                    minutes: date.minutes(),
                    seconds: date.seconds()
                };
            }
            return adaptedValue;
        };
        TimeAdapter.prototype.toModel = function (date) {
            return date
                ? date.parseError
                    ? moment__default["default"].invalid().toString()
                    : moment__default["default"]({
                        hour: date.hours || 0,
                        minute: date.minutes || 0,
                        seconds: date.seconds || 0
                    }).format(this.storeTimeFormat)
                : null;
        };
        return TimeAdapter;
    }(i1.AdaptRxDatetimeAdapter));
    TimeAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeAdapter, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TimeAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeAdapter, decorators: [{
                type: i0.Injectable
            }] });

    var TimeFieldComponent = /** @class */ (function (_super) {
        __extends(TimeFieldComponent, _super);
        function TimeFieldComponent(injector, datePipe) {
            var _this = _super.call(this, injector) || this;
            _this.datePipe = datePipe;
            _this.pickerMode = i1.RxDatetimePickerMode.Time;
            return _this;
        }
        TimeFieldComponent.prototype.getDisplayValue = function () {
            var _a;
            var displayValue = _super.prototype.getDisplayValue.call(this);
            if (!displayValue) {
                return '-';
            }
            else {
                var readOnlyTimeValue = moment__default["default"](displayValue, 'LTS').toDate();
                return (_a = this.datePipe.transform(readOnlyTimeValue, 'mediumTime')) !== null && _a !== void 0 ? _a : '-';
            }
        };
        TimeFieldComponent.prototype.getFieldValidators = function () {
            var _this = this;
            var validatorFn = function (control) {
                var date = control.value ? moment__default["default"](control.value, 'LTS') : null;
                return control.value && date && !date.isValid()
                    ? { rxDatetimeFormat: { mode: _this.pickerMode, hasSeconds: true } }
                    : null;
            };
            return [validatorFn];
        };
        return TimeFieldComponent;
    }(BaseRecordEditorFieldComponent));
    TimeFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i3__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TimeFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TimeFieldComponent, selector: "rx-time-field", providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: TimeAdapter }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n", components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxDatetimeComponent, selector: "adapt-rx-datetime", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-time-field',
                        templateUrl: './time-field.component.html',
                        providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: TimeAdapter }]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i3__namespace.DatePipe }]; } });

    var TimeFieldModule = /** @class */ (function () {
        function TimeFieldModule() {
        }
        return TimeFieldModule;
    }());
    TimeFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TimeFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldModule, declarations: [TimeFieldComponent], imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule] });
    TimeFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldModule, providers: [i3.DatePipe], imports: [[i1.AdaptRxDatetimeModule, i3.CommonModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.AdaptRxDatetimeModule, i3.CommonModule, i1$6.ReadOnlyFieldModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule],
                        declarations: [TimeFieldComponent],
                        providers: [i3.DatePipe],
                        entryComponents: [TimeFieldComponent]
                    }]
            }] });

    var TimeFieldDesignModel = /** @class */ (function (_super) {
        __extends(TimeFieldDesignModel, _super);
        function TimeFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.timeOnly];
            return _this;
        }
        return TimeFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var TimeFieldRegistrationModule = /** @class */ (function () {
        function TimeFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Time,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Time',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'clock_o',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldDesignComponent),
                designComponentModel: TimeFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return TimeFieldRegistrationModule;
    }());
    TimeFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TimeFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldRegistrationModule, imports: [TimeFieldModule, TimeFieldDesignModule] });
    TimeFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldRegistrationModule, imports: [[TimeFieldModule, TimeFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TimeFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [TimeFieldModule, TimeFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RxExtensionContainerComponent = /** @class */ (function (_super) {
        __extends(RxExtensionContainerComponent, _super);
        function RxExtensionContainerComponent(rxRecordDefinitionCacheService, rxRecordDefinitionService) {
            var _this = _super.call(this) || this;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.recordDefinitions = {};
            return _this;
        }
        RxExtensionContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                _this.state = config;
            });
        };
        RxExtensionContainerComponent.prototype.loadRecordDefinition = function (name) {
            var _this = this;
            this.rxRecordDefinitionCacheService.getRecordDefinition(name).subscribe(function (recordDefinition) {
                recordDefinition.fieldDefinitionsById =
                    _this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);
                _this.recordDefinitions[name] = recordDefinition;
                _this.notifyPropertyChanged('recordDefinitions', _this.recordDefinitions);
            });
        };
        return RxExtensionContainerComponent;
    }(i1$5.BaseViewComponent));
    RxExtensionContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerComponent, deps: [{ token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i1__namespace$5.RxRecordDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxExtensionContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxExtensionContainerComponent, selector: "rx-extension-container", usesInheritance: true, ngImport: i0__namespace, template: "<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n", components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-extension-container',
                        templateUrl: './extension-container.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i1__namespace$5.RxRecordDefinitionService }]; } });

    var RxExtensionContainerHelperService = /** @class */ (function () {
        function RxExtensionContainerHelperService() {
        }
        // generate unique expression for 'selectionFieldOptionNamesById' property depending on extension Record editor guid
        RxExtensionContainerHelperService.prototype.getSelectionFieldOptionNamesByIdExpression = function (guid) {
            return guid + ":selectionFieldOptionNamesById";
        };
        return RxExtensionContainerHelperService;
    }());
    RxExtensionContainerHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerHelperService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxExtensionContainerHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerHelperService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerHelperService, decorators: [{
                type: i0.Injectable
            }] });

    var ExtensionContainerSectionComponent = /** @class */ (function (_super) {
        __extends(ExtensionContainerSectionComponent, _super);
        function ExtensionContainerSectionComponent(rxExtensionContainerComponent, rxRecordInstanceService, rxRecordEditorUtilsService, rxExtensionContainerHelperService, recordEditorComponent) {
            var _this = _super.call(this) || this;
            _this.rxExtensionContainerComponent = rxExtensionContainerComponent;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxRecordEditorUtilsService = rxRecordEditorUtilsService;
            _this.rxExtensionContainerHelperService = rxExtensionContainerHelperService;
            _this.recordEditorComponent = recordEditorComponent;
            _this.isInitialized = false;
            _this.selectionFieldOptionNamesById = null;
            return _this;
        }
        ExtensionContainerSectionComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            // will close once officially fixed : https://github.com/ReactiveX/rxjs/issues/4772
            rxjs.combineLatest([this.config, this.recordEditorComponent.recordInstanceChanged$.pipe(operators.startWith(null))])
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), config = _b[0], recordInstanceUpdated = _b[1];
                if (config.recordDefinitionName) {
                    _this.rxExtensionContainerComponent.loadRecordDefinition(config.recordDefinitionName);
                }
                if (!config.associationDefinitionName) {
                    return (_this.isInitialized = true);
                }
                if (config.api) {
                    var associatedRecordInstanceId = null;
                    if (_this.recordEditorComponent.state.mode === exports.RecordEditorMode.Edit) {
                        associatedRecordInstanceId = _this.recordEditorComponent.state.recordInstance.id;
                    }
                    var associationManager_1 = config.api.getAssociationManager({
                        associationDefinitionName: config.associationDefinitionName,
                        associatedRecordNodeSide: i2$5.RX_ASSOCIATION_DEFINITION.roles.second.value,
                        associatedRecordInstanceId: associatedRecordInstanceId,
                        recordDefinitionName: config.recordDefinitionName,
                        allFieldIds: true,
                        associatedRecordPath: config.associatedRecordPath
                    });
                    var initialize$ = void 0;
                    if (_this.recordEditorComponent.state.mode === exports.RecordEditorMode.Edit) {
                        initialize$ = associationManager_1.loadExtensions().pipe(operators.switchMap(function (recordInstance) {
                            if (lodash.isEmpty(associationManager_1.extensions)) {
                                return _this.addNewRecordInstanceToExtension(associationManager_1);
                            }
                            else {
                                return rxjs.of(recordInstance);
                            }
                        }));
                    }
                    else if (_this.recordEditorComponent.state.mode === exports.RecordEditorMode.Create ||
                        _this.recordEditorComponent.state.mode === exports.RecordEditorMode.Temporary) {
                        initialize$ = rxjs.forkJoin([
                            associationManager_1.initialize(),
                            _this.addNewRecordInstanceToExtension(associationManager_1)
                        ]);
                    }
                    initialize$
                        .pipe(operators.tap(function () {
                        _this.isInitialized = true;
                    }), operators.switchMap(function () {
                        var recordInstance$ = associationManager_1.extensions$.pipe(operators.map(function (arr) { return arr[0]; }), operators.tap(function (recordInstance) { return _this.updateSelectionFieldOptionNames(recordInstance); }), operators.shareReplay(1));
                        return recordInstance$.pipe(operators.switchMap(function (inst) { return inst.fieldValueChanged$; }), operators.withLatestFrom(recordInstance$));
                    }), operators.takeUntil(_this.destroyed$))
                        .subscribe(function (_a) {
                        var _b = __read(_a, 2), change = _b[0], recordInstance = _b[1];
                        _this.updateSelectionFieldOptionNames(recordInstance);
                    });
                }
            });
        };
        ExtensionContainerSectionComponent.prototype.addNewRecordInstanceToExtension = function (associationManager) {
            return this.rxRecordInstanceService.getNew(associationManager.options.recordDefinitionName).pipe(operators.tap(function (recordInstance) {
                recordInstance.isNewInstance = true;
                associationManager.addExtension(recordInstance);
            }));
        };
        ExtensionContainerSectionComponent.prototype.updateSelectionFieldOptionNames = function (recordInstance) {
            if (lodash.get(recordInstance, 'recordDefinition.fieldDefinitions')) {
                var newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(recordInstance.recordDefinition, recordInstance);
                if (!lodash.isEqual(this.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {
                    var propName = this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(this.guid);
                    this.rxExtensionContainerComponent.notifyPropertyChanged(propName, newSelectionFieldOptionNames);
                }
            }
        };
        return ExtensionContainerSectionComponent;
    }(i1$5.BaseViewComponent));
    ExtensionContainerSectionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerSectionComponent, deps: [{ token: RxExtensionContainerComponent }, { token: i1__namespace$5.RxRecordInstanceService }, { token: RxRecordEditorUtilsService }, { token: RxExtensionContainerHelperService }, { token: RecordEditorComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ExtensionContainerSectionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ExtensionContainerSectionComponent, selector: "rx-extension-container-section", usesInheritance: true, ngImport: i0__namespace, template: "<h5>{{ (config | async)?.label }}</h5>\n<rx-runtime-view-canvas-outlet *ngIf=\"isInitialized\"></rx-runtime-view-canvas-outlet>\n", components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerSectionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-extension-container-section',
                        templateUrl: './extension-container-section.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxExtensionContainerComponent }, { type: i1__namespace$5.RxRecordInstanceService }, { type: RxRecordEditorUtilsService }, { type: RxExtensionContainerHelperService }, { type: RecordEditorComponent }]; } });

    var RX_EXTENSION_CONTAINER = {
        type: i1$1.RxViewComponentType.ExtensionContainer,
        recordDefinitionsReferencingExpression: 'recordDefinitions',
        extensionContainerSectionComponent: 'rx-extension-container-section'
    };

    var RxExtensionContainerDefinitionAdapterService = /** @class */ (function () {
        function RxExtensionContainerDefinitionAdapterService(rxViewDefinitionParserService, rxViewDefinitionDataPageService, rxGlobalCacheService, rxDefinitionNameService, rxTreeService, rxExtensionContainerHelperService, rxNotificationService, rxRuntimeViewUtilsService, rxViewDefinitionLocalizationService, translateService) {
            this.rxViewDefinitionParserService = rxViewDefinitionParserService;
            this.rxViewDefinitionDataPageService = rxViewDefinitionDataPageService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxTreeService = rxTreeService;
            this.rxExtensionContainerHelperService = rxExtensionContainerHelperService;
            this.rxNotificationService = rxNotificationService;
            this.rxRuntimeViewUtilsService = rxRuntimeViewUtilsService;
            this.rxViewDefinitionLocalizationService = rxViewDefinitionLocalizationService;
            this.translateService = translateService;
        }
        RxExtensionContainerDefinitionAdapterService.prototype.adaptDefinition = function (extensionContainerComponentDefinition, viewDefinition) {
            var _this = this;
            var targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(viewDefinition, extensionContainerComponentDefinition);
            extensionContainerComponentDefinition.propertiesByName.mode =
                targetRecordEditorComponentDefinition.propertiesByName.mode;
            return this.getExtensionViewDefinitions(extensionContainerComponentDefinition.guid).pipe(operators.map(this.getViewDefinitionMap.bind(this)), operators.map(this.filterDuplicatedRecordEditorComponentDefinitions.bind(this)), operators.map(function (viewDefinitionMaps) { return _this.filterIncompatibleRecordEditorComponentDefinitions(viewDefinitionMaps, targetRecordEditorComponentDefinition); }), operators.switchMap(this.setRecordEditorLabels.bind(this)), operators.map(this.getExtensionRecordEditorComponentDefinitions.bind(this)), operators.switchMap(function (extensionRecordEditorComponentDefinitions) {
                var processAndAddChildrenToExtensionContainer = function () {
                    extensionContainerComponentDefinition.componentDefinitions = [];
                    extensionContainerComponentDefinition.resourceType =
                        i1$1.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;
                    lodash.forEach(extensionRecordEditorComponentDefinitions, function (extensionRecordEditorComponentDefinition) {
                        // re-assign expression for child Record editor component definitions
                        _this.processRecordEditorComponentDefinition(extensionRecordEditorComponentDefinition, targetRecordEditorComponentDefinition, extensionContainerComponentDefinition);
                        extensionContainerComponentDefinition.componentDefinitions.push(_this.getExtensionContainerSectionViewComponentDefinition(extensionRecordEditorComponentDefinition, targetRecordEditorComponentDefinition));
                    });
                    var children = extensionContainerComponentDefinition.componentDefinitions.map(function (component) { return component.guid; });
                    extensionContainerComponentDefinition.layout = JSON.stringify({
                        outlets: [
                            {
                                name: i1$1.RX_VIEW_DEFINITION.defaultOutletName,
                                columns: [
                                    {
                                        children: children
                                    }
                                ]
                            }
                        ]
                    });
                    return extensionRecordEditorComponentDefinitions;
                };
                // run adapters for all Record editors and it's children
                var adapters$ = extensionRecordEditorComponentDefinitions.map(function (recordEditorComponent) {
                    return rxjs.combineLatest(__spreadArray([], __read(_this.rxRuntimeViewUtilsService.runAdaptersForComponents(viewDefinition, recordEditorComponent))));
                });
                return rxjs.combineLatest(adapters$).pipe(operators.tap({
                    complete: function () { return processAndAddChildrenToExtensionContainer(); }
                }));
            }));
        };
        RxExtensionContainerDefinitionAdapterService.prototype.getExtensionViewDefinitions = function (extensionContainerGuid) {
            var _this = this;
            return this.rxViewDefinitionDataPageService
                .get({
                params: {
                    propertySelection: [
                        'name',
                        'targetExtensionContainerGuid',
                        'targetViewDefinitionName',
                        'componentDefinitions',
                        'localizableStringsByComponentId',
                        'lastUpdateTime'
                    ],
                    viewType: i1$1.ViewDefinitionType.Regular,
                    targetExtensionContainerGuid: extensionContainerGuid,
                    excludeExtensionViews: false
                },
                headers: {
                    'default-bundle-scope': ''
                }
            })
                .pipe(operators.map(function (response) {
                var associationsInExtensionContainer = [];
                lodash.forEach(response.data, function (viewDefinition) {
                    var _a;
                    _this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition);
                    var associationDefinitionName = (_a = viewDefinition.componentDefinitions[0]) === null || _a === void 0 ? void 0 : _a.propertiesByName.associationDefinitionName;
                    if (lodash.isString(associationDefinitionName)) {
                        if (associationsInExtensionContainer.includes(associationDefinitionName)) {
                            _this.rxNotificationService.addWarningMessage(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.extension-container.duplicate-extensions.warning'));
                        }
                        else {
                            associationsInExtensionContainer.push(associationDefinitionName);
                        }
                    }
                });
                return response.data;
            }));
        };
        RxExtensionContainerDefinitionAdapterService.prototype.getTargetRecordEditorComponentDefinition = function (viewDefinition, extensionContainerComponentDefinition) {
            return this.rxViewDefinitionParserService.findParentComponentDefinition(viewDefinition, extensionContainerComponentDefinition, function (parentComponentDefinition) { return parentComponentDefinition.type === i1$1.RxViewComponentType.RecordEditor; });
        };
        RxExtensionContainerDefinitionAdapterService.prototype.getViewDefinitionMap = function (viewDefinitions) {
            return lodash.reduce(viewDefinitions, function (result, viewDefinition) {
                var recordEditorComponentDefinition = viewDefinition.componentDefinitions[0];
                // View may not contain Record editor component definition because of permission restrictions
                if (recordEditorComponentDefinition) {
                    result.push({
                        viewDefinition: viewDefinition,
                        recordEditorComponentDefinition: recordEditorComponentDefinition
                    });
                }
                return result;
            }, []);
        };
        RxExtensionContainerDefinitionAdapterService.prototype.filterDuplicatedRecordEditorComponentDefinitions = function (viewDefinitionMaps) {
            return lodash.values(lodash.reduce(viewDefinitionMaps, function (result, viewDefinitionMap) {
                // Allow multiple record editors to be displayed in the extension container if they are bound
                // to the same parent record instance. In this case they have no associationDefinitionName.
                if (!viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName) {
                    result[viewDefinitionMap.recordEditorComponentDefinition.guid] = viewDefinitionMap;
                    return result;
                }
                var key = [
                    viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName,
                    viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName
                ].join('');
                if (!result[key]) {
                    result[key] = viewDefinitionMap;
                }
                else if (moment__default["default"](viewDefinitionMap.viewDefinition.lastUpdateTime) < moment__default["default"](result[key].viewDefinition.lastUpdateTime)) {
                    result[key] = viewDefinitionMap;
                }
                return result;
            }, {}));
        };
        RxExtensionContainerDefinitionAdapterService.prototype.filterIncompatibleRecordEditorComponentDefinitions = function (viewDefinitionMaps, targetRecordEditorComponentDefinition) {
            return lodash.filter(viewDefinitionMaps, function (viewDefinitionMap) {
                var hasSameMode = viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.mode ===
                    targetRecordEditorComponentDefinition.propertiesByName.mode;
                var hasSameRecordDefinitionName = targetRecordEditorComponentDefinition.propertiesByName.recordDefinitionName ===
                    viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName;
                var hasAssociation = viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName;
                var validExtensionWithoutAssociation = hasSameRecordDefinitionName && !hasAssociation && hasSameMode;
                var validExtensionWithAssociation = hasAssociation && hasSameMode;
                return validExtensionWithoutAssociation || validExtensionWithAssociation;
            });
        };
        RxExtensionContainerDefinitionAdapterService.prototype.setRecordEditorLabels = function (viewDefinitionMaps) {
            var _this = this;
            return rxjs.forkJoin(__spreadArray([], __read(viewDefinitionMaps.map(function (viewDefinitionMap) {
                var label$;
                if (viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label) {
                    label$ = rxjs.of(viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label);
                }
                else {
                    label$ = _this.rxGlobalCacheService.getBundleFriendlyName(_this.rxDefinitionNameService.getBundleId(viewDefinitionMap.viewDefinition.name));
                }
                return label$.pipe(operators.map(function (label) {
                    viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label = label;
                    return viewDefinitionMap;
                }));
            }))));
        };
        RxExtensionContainerDefinitionAdapterService.prototype.getExtensionRecordEditorComponentDefinitions = function (viewDefinitionMaps) {
            return lodash.map(viewDefinitionMaps, 'recordEditorComponentDefinition');
        };
        RxExtensionContainerDefinitionAdapterService.prototype.processRecordEditorComponentDefinition = function (extensionRecordEditorComponentDefinition, targetRecordEditorComponentDefinition, extensionContainerComponentDefinition) {
            var _this = this;
            this.rxTreeService
                .flattenTree(extensionRecordEditorComponentDefinition, 'componentDefinitions')
                .forEach(function (componentDefinition) {
                _this.patchFieldComponentExpressions(componentDefinition, extensionRecordEditorComponentDefinition, targetRecordEditorComponentDefinition, extensionContainerComponentDefinition);
            });
            return extensionRecordEditorComponentDefinition;
        };
        // re-assign all expressions from extension Record editor to target Record editor
        // old path: ${view.components.<extension-record-editor-guid>.recordInstance}
        // new path: ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}
        RxExtensionContainerDefinitionAdapterService.prototype.patchFieldComponentExpressions = function (componentDefinition, extensionRecordEditorComponentDefinition, targetRecordEditorComponentDefinition, targetExtensionContainerComponentDefinition) {
            // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}
            var recordInstanceReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName
                .associationDefinitionName
                ? [
                    targetRecordEditorComponentDefinition.guid,
                    '.',
                    "recordInstance.associationInstances['",
                    extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,
                    "'].",
                    i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                    '.extensions[0]'
                ].join('')
                : [targetRecordEditorComponentDefinition.guid, '.recordInstance'].join('');
            // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].recordDefinitionName}
            var recordDefinitionNameReferencingExpression = [
                recordInstanceReferencingExpression,
                '.recordDefinitionName'
            ].join('');
            // ${view.components.<target-extension-container-guid>.recordDefinitions.<extension-record-definition-name>}
            var recordDefinitionReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName
                .associationDefinitionName
                ? [
                    targetExtensionContainerComponentDefinition.guid,
                    '.',
                    RX_EXTENSION_CONTAINER.recordDefinitionsReferencingExpression,
                    "['",
                    extensionRecordEditorComponentDefinition.propertiesByName.recordDefinitionName,
                    "']"
                ].join('')
                : [targetRecordEditorComponentDefinition.guid, '.recordDefinition'].join('');
            // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].id}
            var recordInstanceIdReferencingExpression = [recordInstanceReferencingExpression, '.id'].join('');
            var selectionFieldOptionNamesByIdReferencingExpression;
            if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {
                // ${view.components.<target-extension-container-guid>.<extension-record-editor-guid>:selectionFieldOptionNamesById}
                selectionFieldOptionNamesByIdReferencingExpression = [
                    targetExtensionContainerComponentDefinition.guid,
                    '.',
                    this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(extensionRecordEditorComponentDefinition.guid)
                ].join('');
            }
            else {
                // ${view.components.<targetRecordEditorComponentDefinition>.selectionFieldOptionNamesById}
                selectionFieldOptionNamesByIdReferencingExpression = targetRecordEditorComponentDefinition.guid + ".selectionFieldOptionNamesById";
            }
            /*
             * {
             *   regExp - determines the part of the old expression
             *   expression - determines new value which should replace <regExp> match
             * }
             * */
            var expressionMap = [
                // patch record instance id expression
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstanceId', 'g'),
                    expression: recordInstanceIdReferencingExpression
                },
                // patch record instance expression
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstance', 'g'),
                    expression: recordInstanceReferencingExpression
                },
                // patch record definition name expression
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinitionName', 'g'),
                    expression: recordDefinitionNameReferencingExpression
                },
                // patch record definition name expression
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinition', 'g'),
                    expression: recordDefinitionReferencingExpression
                },
                // patch selection field option names by id expression
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.selectionFieldOptionNamesById', 'g'),
                    expression: selectionFieldOptionNamesByIdReferencingExpression
                },
                // patch record editor properties like 'canSave', 'inReadState', 'isValid', 'isDirty'
                // ${view.components.<target-record-editor-guid>.canSave}
                // ${view.components.<target-record-editor-guid>.inReadState} ...
                {
                    regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + "\\.(\\w+)}", 'g'),
                    expression: targetRecordEditorComponentDefinition.guid + ".$1}"
                }
            ];
            var propertiesToPatch = ['disabled', 'hidden', 'value', 'html'];
            propertiesToPatch
                .filter(function (propertyName) { return lodash.isString(componentDefinition.propertiesByName[propertyName]); })
                .forEach(function (propertyName) {
                lodash.forEach(expressionMap, function (expressionConfig) {
                    componentDefinition.propertiesByName[propertyName] = componentDefinition.propertiesByName[propertyName].replace(expressionConfig.regExp, expressionConfig.expression);
                });
            });
            componentDefinition.propertiesByName.api = "${view.components." + targetRecordEditorComponentDefinition.guid + ".api}";
            componentDefinition.propertiesByName.inReadState = "${view.components." + targetRecordEditorComponentDefinition.guid + ".inReadState}";
            if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {
                componentDefinition.propertiesByName.associatedRecordPath = [
                    extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,
                    i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                    'extensions',
                    0
                ];
            }
            if (componentDefinition.propertiesByName.recordInstance) {
                componentDefinition.propertiesByName.recordInstance = [
                    '${view.components.',
                    recordInstanceReferencingExpression,
                    '}'
                ].join('');
            }
            if (componentDefinition.propertiesByName.recordDefinition) {
                componentDefinition.propertiesByName.recordDefinition = [
                    '${view.components.',
                    recordDefinitionReferencingExpression,
                    '}'
                ].join('');
            }
        };
        RxExtensionContainerDefinitionAdapterService.prototype.getExtensionContainerSectionViewComponentDefinition = function (recordEditorComponentDefinition, targetRecordEditorComponentDefinition) {
            var _b;
            return {
                guid: recordEditorComponentDefinition.guid,
                type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,
                layout: recordEditorComponentDefinition.layout,
                resourceType: i1$1.RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,
                componentDefinitions: recordEditorComponentDefinition.componentDefinitions,
                propertiesByName: (_b = {
                        label: recordEditorComponentDefinition.propertiesByName.label,
                        styles: recordEditorComponentDefinition.propertiesByName.styles,
                        recordDefinitionName: recordEditorComponentDefinition.propertiesByName.recordDefinitionName,
                        associationDefinitionName: recordEditorComponentDefinition.propertiesByName.associationDefinitionName
                    },
                    _b[i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME] = recordEditorComponentDefinition.propertiesByName[i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME],
                    _b.api = "${view.components." + targetRecordEditorComponentDefinition.guid + ".api}",
                    _b.associatedRecordPath = [
                        recordEditorComponentDefinition.propertiesByName.associationDefinitionName,
                        i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                        'extensions',
                        0
                    ],
                    _b)
            };
        };
        return RxExtensionContainerDefinitionAdapterService;
    }());
    RxExtensionContainerDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }, { token: i1__namespace$4.RxViewDefinitionDataPageService }, { token: i1__namespace$1.RxGlobalCacheService }, { token: i1__namespace$1.RxDefinitionNameService }, { token: i2__namespace$1.RxTreeService }, { token: RxExtensionContainerHelperService }, { token: i1__namespace$1.RxNotificationService }, { token: i1__namespace$2.RxRuntimeViewUtilsService }, { token: i1__namespace$4.RxViewDefinitionLocalizationService }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxExtensionContainerDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }, { type: i1__namespace$4.RxViewDefinitionDataPageService }, { type: i1__namespace$1.RxGlobalCacheService }, { type: i1__namespace$1.RxDefinitionNameService }, { type: i2__namespace$1.RxTreeService }, { type: RxExtensionContainerHelperService }, { type: i1__namespace$1.RxNotificationService }, { type: i1__namespace$2.RxRuntimeViewUtilsService }, { type: i1__namespace$4.RxViewDefinitionLocalizationService }, { type: i2__namespace.TranslateService }]; } });

    var RxExtensionContainerModule = /** @class */ (function () {
        function RxExtensionContainerModule(rxDefinitionAdapterRegistryService, rxExtensionContainerDefinitionAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.rxExtensionContainerDefinitionAdapterService = rxExtensionContainerDefinitionAdapterService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(RX_EXTENSION_CONTAINER.type, this.rxExtensionContainerDefinitionAdapterService);
        }
        return RxExtensionContainerModule;
    }());
    RxExtensionContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: RxExtensionContainerDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxExtensionContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerModule, declarations: [RxExtensionContainerComponent, ExtensionContainerSectionComponent], imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule], exports: [RxExtensionContainerComponent] });
    RxExtensionContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerModule, providers: [RxExtensionContainerDefinitionAdapterService, RxExtensionContainerHelperService], imports: [[i3.CommonModule, i1$5.RuntimeViewCanvasModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExtensionContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        providers: [RxExtensionContainerDefinitionAdapterService, RxExtensionContainerHelperService],
                        declarations: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],
                        exports: [RxExtensionContainerComponent],
                        entryComponents: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],
                        imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: RxExtensionContainerDefinitionAdapterService }]; } });

    var ExtensionContainerDesignComponent = /** @class */ (function () {
        function ExtensionContainerDesignComponent() {
        }
        return ExtensionContainerDesignComponent;
    }());
    ExtensionContainerDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ExtensionContainerDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ExtensionContainerDesignComponent, selector: "rx-extension-container-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-empty-state type=\"objects\" label=\"Contains fields from extensions of the record definition.\"></adapt-empty-state>\n", components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-extension-container-design',
                        templateUrl: './extension-container-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var ExtensionContainerDesignModule = /** @class */ (function () {
        function ExtensionContainerDesignModule() {
        }
        return ExtensionContainerDesignModule;
    }());
    ExtensionContainerDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ExtensionContainerDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignModule, declarations: [ExtensionContainerDesignComponent], imports: [i3.CommonModule, i1.AdaptEmptyStateModule] });
    ExtensionContainerDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignModule, imports: [[i3.CommonModule, i1.AdaptEmptyStateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptEmptyStateModule],
                        declarations: [ExtensionContainerDesignComponent],
                        entryComponents: [ExtensionContainerDesignComponent]
                    }]
            }] });

    var ExtensionContainerDesignModel = /** @class */ (function (_super) {
        __extends(ExtensionContainerDesignModel, _super);
        function ExtensionContainerDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            _this.parentGuid$ = _this.sandbox.getParentComponentGuid(i1$1.RxViewComponentType.RecordEditor).pipe(operators.take(1));
            _this.initialProperties = Object.assign({ name: '', recordDefinition: '', recordInstance: '' }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES);
            rxjs.combineLatest([_this.parentGuid$, _this.componentProperties$])
                .pipe(operators.first())
                .subscribe(function (_a) {
                var _b = __read(_a, 2), parentGuid = _b[0], componentProperties = _b[1];
                var properties = Object.assign(Object.assign(Object.assign({}, _this.initialProperties), componentProperties), { recordInstance: "${view.components." + parentGuid + ".recordInstance}", recordDefinition: "${view.components." + parentGuid + ".recordDefinition}" });
                _this.sandbox.updateComponentProperties(properties);
                _this.sandbox.updateInspectorConfig(_this.getInspectorConfig());
            });
            rxjs.combineLatest([
                _this.sandbox.getComponentPropertyValue('name').pipe(operators.map(function (value) {
                    if (lodash.isEmpty(value)) {
                        return _this.sandbox.createError('Name cannot be blank.', 'name');
                    }
                })),
                _this.sandbox.getComponentPropertyValue('styles').pipe(operators.map(i1$3.validateCssClassNames)),
                _this.sandbox
                    .getComponentPropertyValue(i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME)
                    .pipe(operators.map(i1$3.validateAvailableOnDevicesProp))
            ])
                .pipe(operators.map(lodash.flatten), operators.map(lodash.compact), operators.takeUntil(_this.sandbox.destroyed$))
                .subscribe(function (validationIssues) { return _this.sandbox.setValidationIssues(validationIssues); });
            return _this;
        }
        ExtensionContainerDesignModel.prototype.getInspectorConfig = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    required: true,
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Extension container')
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        return ExtensionContainerDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ExtensionContainerRegistrationModule = /** @class */ (function () {
        function ExtensionContainerRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService.register({
                type: RX_EXTENSION_CONTAINER.type,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxExtensionContainerComponent),
                properties: i1$1.RX_STANDARD_PROPS_DESC,
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Extension container',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                icon: 'widget',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ExtensionContainerDesignComponent),
                designComponentModel: ExtensionContainerDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            }, {
                type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ExtensionContainerSectionComponent),
                properties: [
                    {
                        name: 'api',
                        enableExpressionEvaluation: true
                    }
                ],
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ]
            });
        }
        return ExtensionContainerRegistrationModule;
    }());
    ExtensionContainerRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ExtensionContainerRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerRegistrationModule, imports: [RxExtensionContainerModule, ExtensionContainerDesignModule] });
    ExtensionContainerRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerRegistrationModule, imports: [[RxExtensionContainerModule, ExtensionContainerDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ExtensionContainerRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RxExtensionContainerModule, ExtensionContainerDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RichTextareaFieldDesignComponent = /** @class */ (function () {
        function RichTextareaFieldDesignComponent(rxCkEditorConfiguratorService) {
            this.rxCkEditorConfiguratorService = rxCkEditorConfiguratorService;
            this.ckEditorType = "divarea" /* DIVAREA */;
            this.ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();
        }
        return RichTextareaFieldDesignComponent;
    }());
    RichTextareaFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignComponent, deps: [{ token: i1__namespace$4.RxCkEditorConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RichTextareaFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RichTextareaFieldDesignComponent, selector: "rx-rich-textarea-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<div>\n  <strong>\n    {{ model.label$ | async }}\n    <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n  </strong>\n</div>\n\n<div class=\"mt-1\">\n  <ckeditor [type]=\"ckEditorType\" [config]=\"ckEditorConfig\" [readOnly]=\"true\"></ckeditor>\n</div>\n", styles: ["ckeditor ::ng-deep .cke_inner{box-shadow:none}\n"], components: [{ type: i2__namespace$7.CKEditorComponent, selector: "ckeditor", inputs: ["tagName", "type", "editorUrl", "data", "readOnly", "config"], outputs: ["ready", "dataReady", "change", "dataChange", "dragStart", "dragEnd", "drop", "fileUploadResponse", "fileUploadRequest", "focus", "paste", "afterPaste", "blur"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rich-textarea-field-design',
                        templateUrl: './rich-textarea-field-design.component.html',
                        styleUrls: ['./rich-textarea-field-design.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxCkEditorConfiguratorService }]; }, propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var RichTextareaFieldDesignModule = /** @class */ (function () {
        function RichTextareaFieldDesignModule() {
        }
        return RichTextareaFieldDesignModule;
    }());
    RichTextareaFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextareaFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignModule, declarations: [RichTextareaFieldDesignComponent], imports: [i3.CommonModule, i2$7.CKEditorModule] });
    RichTextareaFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignModule, imports: [[i3.CommonModule, i2$7.CKEditorModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2$7.CKEditorModule],
                        declarations: [RichTextareaFieldDesignComponent],
                        entryComponents: [RichTextareaFieldDesignComponent]
                    }]
            }] });

    var RichTextareaFieldDesignModel = /** @class */ (function (_super) {
        __extends(RichTextareaFieldDesignModel, _super);
        function RichTextareaFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.character];
            return _this;
        }
        RichTextareaFieldDesignModel.prototype.getInspectorConfig = function () {
            return _super.prototype.getInspectorConfig.call(this).pipe(operators.withLatestFrom(this.availableFieldDefinitions$), operators.map(function (_a) {
                var _b = __read(_a, 2), inspectorConfig = _b[0], recordFieldsSelectItems = _b[1];
                var availableFields = recordFieldsSelectItems
                    .filter(function (field) { return !field.maxLength; })
                    .map(function (field) { return ({
                    id: String(field.id),
                    name: field.name
                }); });
                var newInspectorConfig = lodash.cloneDeep(inspectorConfig);
                newInspectorConfig.inspectorSectionConfigs[0].controls[0].options.options = __spreadArray([], __read(availableFields));
                return newInspectorConfig;
            }));
        };
        return RichTextareaFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var RichTextareaFieldComponent = /** @class */ (function (_super) {
        __extends(RichTextareaFieldComponent, _super);
        function RichTextareaFieldComponent(injector, rxCkEditorConfiguratorService) {
            var _this = _super.call(this, injector) || this;
            _this.rxCkEditorConfiguratorService = rxCkEditorConfiguratorService;
            _this.ckEditorType = "divarea" /* DIVAREA */;
            _this.ckEditorConfig = _this.rxCkEditorConfiguratorService.getCKEditorConfig();
            return _this;
        }
        RichTextareaFieldComponent.prototype.setFieldValue = function (value, options) {
            if (options === void 0) { options = {}; }
            // When pressing a toolbar button, e.g. Bold, while the field is blank, ckeditor triggers
            // a `dataChange` event with an empty string as data. If we allow this value to be set,
            // it will be converted back to null and result in all toolbar buttons being reset,
            // e.g. the Bold button will be unpressed.
            // As a workaround, we do not accept empty string if the current field value is null.
            if (!(this.formControl.value === null && value === '')) {
                _super.prototype.setFieldValue.call(this, value);
            }
        };
        RichTextareaFieldComponent.prototype.onBlur = function () {
            this.formControl.markAsTouched();
        };
        return RichTextareaFieldComponent;
    }(BaseRecordEditorFieldComponent));
    RichTextareaFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$4.RxCkEditorConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RichTextareaFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RichTextareaFieldComponent, selector: "rx-rich-textarea-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <div class=\"read-only-content-wrapper focusable\" *ngIf=\"inReadState; else editStateElementRef\" tabindex=\"0\">\n    <label>{{ label }}</label>\n\n    <ckeditor\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"true\"\n      [ngModel]=\"getDisplayValue()\"\n    ></ckeditor>\n  </div>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <div [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\">\n    <adapt-rx-control-label [label]=\"label\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <ckeditor\n      (dataChange)=\"setFieldValue($event)\"\n      [data]=\"formControl.value\"\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"isDisabled\"\n      (blur)=\"onBlur()\"\n    ></ckeditor>\n\n    <adapt-rx-feedback\n      #adaptRxFeedbackRef\n      [errors]=\"formControl.errors\"\n      [controlTouched]=\"formControl.touched\"\n    ></adapt-rx-feedback>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}ckeditor ::ng-deep .cke_inner{box-shadow:none}.read-only-content-wrapper ckeditor ::ng-deep .cke{border:none}.read-only-content-wrapper ckeditor ::ng-deep .cke_top{display:none}.read-only-content-wrapper ckeditor ::ng-deep .cke_editable{padding:0}.has-danger ::ng-deep .cke{border-color:#f83200}\n"], components: [{ type: i2__namespace$7.CKEditorComponent, selector: "ckeditor", inputs: ["tagName", "type", "editorUrl", "data", "readOnly", "config"], outputs: ["ready", "dataReady", "change", "dataChange", "dragStart", "dragEnd", "drop", "fileUploadResponse", "fileUploadRequest", "focus", "paste", "afterPaste", "blur"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptRxFeedbackComponent, selector: "adapt-rx-feedback", inputs: ["ariaErrorMessage", "errors", "controlTouched", "successMessage", "warningMessage", "alertFeedbackStyle", "alertFeedbackTruncation"], outputs: ["messageAppeared"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rich-textarea-field',
                        templateUrl: './rich-textarea-field.component.html',
                        styleUrls: ['./rich-textarea-field.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$4.RxCkEditorConfiguratorService }]; } });

    var RichTextareaFieldModule = /** @class */ (function () {
        function RichTextareaFieldModule() {
        }
        return RichTextareaFieldModule;
    }());
    RichTextareaFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextareaFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldModule, declarations: [RichTextareaFieldComponent], imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxFormControlModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule, i2$7.CKEditorModule] });
    RichTextareaFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldModule, imports: [[i3.CommonModule, i2$4.FormsModule, i1.AdaptRxFormControlModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule, i2$7.CKEditorModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptRxFormControlModule, i2$1.TranslateModule, i2$4.ReactiveFormsModule, i2$7.CKEditorModule],
                        declarations: [RichTextareaFieldComponent],
                        entryComponents: [RichTextareaFieldComponent]
                    }]
            }] });

    var RichTextareaFieldRegistrationModule = /** @class */ (function () {
        function RichTextareaFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.RichTextarea,
                properties: RX_BASE_FIELD_PROPERTIES,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldComponent),
                name: 'Rich text area',
                icon: 'text_colorpicker_adapt',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldDesignComponent),
                designComponentModel: RichTextareaFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return RichTextareaFieldRegistrationModule;
    }());
    RichTextareaFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextareaFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldRegistrationModule, imports: [RichTextareaFieldDesignModule, RichTextareaFieldModule] });
    RichTextareaFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldRegistrationModule, imports: [[RichTextareaFieldDesignModule, RichTextareaFieldModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextareaFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RichTextareaFieldDesignModule, RichTextareaFieldModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var LocalizedCharacterFieldComponent = /** @class */ (function (_super) {
        __extends(LocalizedCharacterFieldComponent, _super);
        function LocalizedCharacterFieldComponent(injector, rxModalService, rxLocalizationService) {
            var _this = _super.call(this, injector) || this;
            _this.rxModalService = rxModalService;
            _this.rxLocalizationService = rxLocalizationService;
            return _this;
        }
        LocalizedCharacterFieldComponent.prototype.onConfigUpdated = function (config) {
            _super.prototype.onConfigUpdated.call(this, config);
            var fieldValue = this.getFieldValue();
            this.hideCurrentLocale = this.getFieldInstanceProp('hideCurrentLocale');
            if (config.value === fieldValue) {
                var valueByLocale = this.getFieldInstanceProp('valueByLocale');
                valueByLocale[this.rxLocalizationService.currentLocale] = fieldValue;
                this.setFieldInstanceProp('valueByLocale', valueByLocale);
            }
        };
        LocalizedCharacterFieldComponent.prototype.shouldShowValidationError = function () {
            return this.isRequired && !this.formControl.value && (this.formControl.touched || this.formControl.dirty);
        };
        LocalizedCharacterFieldComponent.prototype.selectLocalizedValue = function () {
            var _this = this;
            var valueByLocale = this.getFieldInstanceProp('valueByLocale');
            this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.localized-character-field.dialog.title'),
                data: {
                    fieldDefinition: this.fieldDefinition,
                    valueByLocale: lodash.cloneDeep(valueByLocale),
                    hideCurrentLocale: this.hideCurrentLocale
                },
                size: 'sm',
                content: i2.LocalizedCharacterFieldValueModalComponent
            })
                .then(function (data) {
                if (data) {
                    _this.setLocalizedFieldValue(data.valueByLocale, data.currentLocaleValue);
                }
            })
                .catch(lodash.noop);
        };
        LocalizedCharacterFieldComponent.prototype.setLocalizedFieldValue = function (valueByLocale, currentLocaleValue) {
            var currentLocaleCode = this.rxLocalizationService.currentLocale;
            var defaultLocaleCode = 'en-US';
            var fieldValue = currentLocaleValue || valueByLocale[currentLocaleCode] || valueByLocale[defaultLocaleCode];
            var currentValueByLocale = this.getFieldInstanceProp('valueByLocale');
            if (!lodash.isEqual(valueByLocale, currentValueByLocale)) {
                this.setFieldInstanceProp('valueByLocale', valueByLocale);
                this.formControl.markAsDirty();
                this.recordEditorApi.markAsDirty();
            }
            this.setFieldValue(fieldValue);
        };
        return LocalizedCharacterFieldComponent;
    }(BaseRecordEditorFieldComponent));
    LocalizedCharacterFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$6.RxModalService }, { token: i1__namespace$1.RxLocalizationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    LocalizedCharacterFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: LocalizedCharacterFieldComponent, selector: "rx-localized-character-field", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <span class=\"d-flex justify-content-between\" [class.has-danger]=\"formControl.errors && formControl.touched\">\n    <adapt-rx-control-label [label]=\"label\" [id]=\"guid\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <button\n      type=\"button\"\n      class=\"localize-button btn btn-link focusable d-icon-left-pencil p-0\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-describedby]=\"guid\"\n      (click)=\"selectLocalizedValue()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.view-components.localized-character-field.button.localize.label' | translate }}\n    </button>\n  </span>\n\n  <adapt-rx-textfield\n    class=\"mb-0\"\n    [readonly]=\"true\"\n    [formControl]=\"formControl\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [attr.aria-describedby]=\"guid\"\n  >\n  </adapt-rx-textfield>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.localize-button:hover{text-decoration:underline}:host ::ng-deep .form-control-feedback{color:#f83200}:host ::ng-deep .has-danger .form-control{border-color:#f83200!important}\n"], components: [{ type: i1__namespace$6.ReadOnlyFieldComponent, selector: "rx-read-only-field", inputs: ["label", "value"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-localized-character-field',
                        templateUrl: './localized-character-field.component.html',
                        styleUrls: ['./localized-character-field.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$6.RxModalService }, { type: i1__namespace$1.RxLocalizationService }]; } });

    var RxLocalizedCharacterFieldModule = /** @class */ (function () {
        function RxLocalizedCharacterFieldModule() {
        }
        return RxLocalizedCharacterFieldModule;
    }());
    RxLocalizedCharacterFieldModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxLocalizedCharacterFieldModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldModule, declarations: [LocalizedCharacterFieldComponent], imports: [i3.CommonModule,
            i2$4.FormsModule,
            i1.AdaptRxFormControlModule,
            i1$6.ReadOnlyFieldModule,
            i1.AdaptTooltipModule,
            i1.AdaptButtonModule,
            i2$1.TranslateModule, i1__namespace.AdaptBusyModule, i1$6.RxBusyIndicatorModule,
            i1.AdaptRxTextfieldModule,
            i2$4.ReactiveFormsModule] });
    RxLocalizedCharacterFieldModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldModule, imports: [[
                i3.CommonModule,
                i2$4.FormsModule,
                i1.AdaptRxFormControlModule,
                i1$6.ReadOnlyFieldModule,
                i1.AdaptTooltipModule,
                i1.AdaptButtonModule,
                i2$1.TranslateModule,
                i1.AdaptBusyModule.forRoot(),
                i1$6.RxBusyIndicatorModule,
                i1.AdaptRxTextfieldModule,
                i2$4.ReactiveFormsModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i1.AdaptRxFormControlModule,
                            i1$6.ReadOnlyFieldModule,
                            i1.AdaptTooltipModule,
                            i1.AdaptButtonModule,
                            i2$1.TranslateModule,
                            i1.AdaptBusyModule.forRoot(),
                            i1$6.RxBusyIndicatorModule,
                            i1.AdaptRxTextfieldModule,
                            i2$4.ReactiveFormsModule
                        ],
                        declarations: [LocalizedCharacterFieldComponent],
                        entryComponents: [LocalizedCharacterFieldComponent]
                    }]
            }] });

    var LocalizedCharacterFieldDesignComponent = /** @class */ (function () {
        function LocalizedCharacterFieldDesignComponent() {
        }
        return LocalizedCharacterFieldDesignComponent;
    }());
    LocalizedCharacterFieldDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    LocalizedCharacterFieldDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: LocalizedCharacterFieldDesignComponent, selector: "rx-localized-character-field-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<button type=\"button\" class=\"btn float-end p-0 btn-link d-icon-left-pencil\">Localize</button>\n\n<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n>\n</adapt-rx-textfield>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-localized-character-field-design',
                        templateUrl: './localized-character-field-design.component.html'
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var RxLocalizedCharacterFieldDesignModule = /** @class */ (function () {
        function RxLocalizedCharacterFieldDesignModule() {
        }
        return RxLocalizedCharacterFieldDesignModule;
    }());
    RxLocalizedCharacterFieldDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxLocalizedCharacterFieldDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldDesignModule, declarations: [LocalizedCharacterFieldDesignComponent], imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule] });
    RxLocalizedCharacterFieldDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldDesignModule, imports: [[i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxLocalizedCharacterFieldDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [LocalizedCharacterFieldDesignComponent],
                        entryComponents: [LocalizedCharacterFieldDesignComponent],
                        imports: [i3.CommonModule, i1.AdaptRxTextfieldModule, i2$4.FormsModule]
                    }]
            }] });

    var LocalizedCharacterFieldDesignModel = /** @class */ (function (_super) {
        __extends(LocalizedCharacterFieldDesignModel, _super);
        function LocalizedCharacterFieldDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.fieldResourceTypes = [i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedCharacter];
            return _this;
        }
        return LocalizedCharacterFieldDesignModel;
    }(BaseRecordEditorFieldDesign));

    var LocalizedCharacterFieldRegistrationModule = /** @class */ (function () {
        function LocalizedCharacterFieldRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.LocalizedCharacter,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(LocalizedCharacterFieldComponent),
                properties: RX_BASE_FIELD_PROPERTIES,
                name: 'Localized text',
                icon: 'field_text_mapmarker',
                group: RX_FIELD_COMPONENTS.stencilGroupName,
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(LocalizedCharacterFieldDesignComponent),
                designComponentModel: LocalizedCharacterFieldDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return LocalizedCharacterFieldRegistrationModule;
    }());
    LocalizedCharacterFieldRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LocalizedCharacterFieldRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldRegistrationModule, imports: [RxLocalizedCharacterFieldModule, RxLocalizedCharacterFieldDesignModule] });
    LocalizedCharacterFieldRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldRegistrationModule, imports: [[RxLocalizedCharacterFieldModule, RxLocalizedCharacterFieldDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: LocalizedCharacterFieldRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RxLocalizedCharacterFieldModule, RxLocalizedCharacterFieldDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var FieldComponentsModule = /** @class */ (function () {
        function FieldComponentsModule() {
        }
        return FieldComponentsModule;
    }());
    FieldComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FieldComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldComponentsModule, imports: [AssociationRegistrationModule,
            AttachmentFieldRegistrationModule,
            BooleanFieldRegistrationModule,
            DateFieldRegistrationModule,
            DateTimeFieldRegistrationModule,
            DecimalFieldRegistrationModule,
            IntegerFieldRegistrationModule,
            SelectionFieldRegistrationModule,
            TextareaFieldRegistrationModule,
            SelectGroupRegistrationModule,
            TextFieldRegistrationModule,
            TimeFieldRegistrationModule,
            ExtensionContainerRegistrationModule,
            LocalizedCharacterFieldRegistrationModule,
            RichTextareaFieldRegistrationModule], exports: [AssociationRegistrationModule,
            AttachmentFieldRegistrationModule,
            BooleanFieldRegistrationModule,
            DateFieldRegistrationModule,
            DateTimeFieldRegistrationModule,
            DecimalFieldRegistrationModule,
            IntegerFieldRegistrationModule,
            SelectionFieldRegistrationModule,
            TextareaFieldRegistrationModule,
            SelectGroupRegistrationModule,
            TextFieldRegistrationModule,
            TimeFieldRegistrationModule,
            ExtensionContainerRegistrationModule,
            LocalizedCharacterFieldRegistrationModule,
            RichTextareaFieldRegistrationModule] });
    FieldComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldComponentsModule, imports: [[
                AssociationRegistrationModule,
                AttachmentFieldRegistrationModule,
                BooleanFieldRegistrationModule,
                DateFieldRegistrationModule,
                DateTimeFieldRegistrationModule,
                DecimalFieldRegistrationModule,
                IntegerFieldRegistrationModule,
                SelectionFieldRegistrationModule,
                TextareaFieldRegistrationModule,
                SelectGroupRegistrationModule,
                TextFieldRegistrationModule,
                TimeFieldRegistrationModule,
                ExtensionContainerRegistrationModule,
                LocalizedCharacterFieldRegistrationModule,
                RichTextareaFieldRegistrationModule
            ], AssociationRegistrationModule,
            AttachmentFieldRegistrationModule,
            BooleanFieldRegistrationModule,
            DateFieldRegistrationModule,
            DateTimeFieldRegistrationModule,
            DecimalFieldRegistrationModule,
            IntegerFieldRegistrationModule,
            SelectionFieldRegistrationModule,
            TextareaFieldRegistrationModule,
            SelectGroupRegistrationModule,
            TextFieldRegistrationModule,
            TimeFieldRegistrationModule,
            ExtensionContainerRegistrationModule,
            LocalizedCharacterFieldRegistrationModule,
            RichTextareaFieldRegistrationModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FieldComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            AssociationRegistrationModule,
                            AttachmentFieldRegistrationModule,
                            BooleanFieldRegistrationModule,
                            DateFieldRegistrationModule,
                            DateTimeFieldRegistrationModule,
                            DecimalFieldRegistrationModule,
                            IntegerFieldRegistrationModule,
                            SelectionFieldRegistrationModule,
                            TextareaFieldRegistrationModule,
                            SelectGroupRegistrationModule,
                            TextFieldRegistrationModule,
                            TimeFieldRegistrationModule,
                            ExtensionContainerRegistrationModule,
                            LocalizedCharacterFieldRegistrationModule,
                            RichTextareaFieldRegistrationModule
                        ],
                        exports: [
                            AssociationRegistrationModule,
                            AttachmentFieldRegistrationModule,
                            BooleanFieldRegistrationModule,
                            DateFieldRegistrationModule,
                            DateTimeFieldRegistrationModule,
                            DecimalFieldRegistrationModule,
                            IntegerFieldRegistrationModule,
                            SelectionFieldRegistrationModule,
                            TextareaFieldRegistrationModule,
                            SelectGroupRegistrationModule,
                            TextFieldRegistrationModule,
                            TimeFieldRegistrationModule,
                            ExtensionContainerRegistrationModule,
                            LocalizedCharacterFieldRegistrationModule,
                            RichTextareaFieldRegistrationModule
                        ]
                    }]
            }] });

    var GridCardLayoutWidth;
    (function (GridCardLayoutWidth) {
        GridCardLayoutWidth["Xsmall"] = "450";
        GridCardLayoutWidth["Small"] = "650";
        GridCardLayoutWidth["Medium"] = "800";
        GridCardLayoutWidth["Large"] = "1024";
        GridCardLayoutWidth["Xlarge"] = "1200";
        GridCardLayoutWidth["Xxlarge"] = "1600";
    })(GridCardLayoutWidth || (GridCardLayoutWidth = {}));

    exports.RecordGridColumnAlignment = void 0;
    (function (RecordGridColumnAlignment) {
        RecordGridColumnAlignment["Default"] = "false";
        RecordGridColumnAlignment["Left"] = "Left";
        RecordGridColumnAlignment["Right"] = "Right";
        RecordGridColumnAlignment["Center"] = "Center";
    })(exports.RecordGridColumnAlignment || (exports.RecordGridColumnAlignment = {}));

    var defaultTypeaheadKeystrokeCount = 1;
    var columnProperties = [
        {
            name: 'visible',
            defaultValue: true,
            label: 'Visible'
        },
        {
            name: 'sortable',
            defaultValue: true,
            label: 'Sortable',
            tooltip: new i1$2.Tooltip('Sorting will be disabled for character fields longer than 4000 characters.')
        },
        {
            name: 'filterable',
            defaultValue: true,
            label: 'Filterable'
        },
        {
            name: 'searchable',
            label: 'Searchable',
            defaultValue: true
        },
        {
            name: 'width',
            label: '',
            defaultValue: null,
            options: {
                label: 'Width',
                defaultUnit: 'px',
                units: [
                    {
                        name: 'pixels',
                        id: 'px'
                    },
                    {
                        name: 'percent',
                        id: '%'
                    }
                ],
                stepperOptionByUnits: {
                    px: {
                        minValue: 1
                    },
                    '%': {
                        minValue: 1,
                        maxValue: 100
                    }
                }
            }
        },
        {
            name: 'wrapText',
            defaultValue: false,
            label: 'Wrap text'
        },
        {
            name: 'alignment',
            defaultValue: false,
            label: 'Alignment',
            selectionValues: [
                {
                    name: 'Align left',
                    value: exports.RecordGridColumnAlignment.Left,
                    icon: 'd-icon-align_left_adapt'
                },
                {
                    name: 'Center',
                    value: exports.RecordGridColumnAlignment.Center,
                    icon: 'd-icon-align_center_adapt'
                },
                {
                    name: 'Align right',
                    value: exports.RecordGridColumnAlignment.Right,
                    icon: 'd-icon-align_right_adapt'
                }
            ]
        },
        {
            name: 'typeaheadKeystrokeCount',
            label: '',
            defaultValue: defaultTypeaheadKeystrokeCount,
            options: {
                label: 'Typeahead keystroke count',
                options: [
                    {
                        id: 0,
                        name: '0'
                    },
                    {
                        id: 1,
                        name: '1'
                    },
                    {
                        id: 2,
                        name: '2'
                    },
                    {
                        id: 3,
                        name: '3'
                    },
                    {
                        id: 4,
                        name: '4'
                    },
                    {
                        id: 5,
                        name: '5'
                    }
                ],
                emptyOption: false
            }
        }
    ];
    var RX_RECORD_GRID = {
        type: 'rx-record-grid',
        version: '1.0',
        defaultColumnMinWidth: 45,
        defaultRowHeight: 37,
        components: {
            filter: 'rx-record-grid-filter',
            column: 'rx-record-grid-column',
            filterPreset: 'rx-record-grid-filter-preset',
            viewPreset: 'rx-record-grid-view-preset',
            columnViewPreset: 'rx-record-grid-column-view-preset'
        },
        columnAlignment: {
            left: 'Left',
            right: 'Right',
            center: 'Center'
        },
        selectionTypes: {
            multiple: 'multiple',
            single: 'single'
        },
        userPreferences: {
            filters: 'filters',
            columns: 'columns'
        },
        cardLayoutWidthOptions: [
            {
                id: GridCardLayoutWidth.Xsmall,
                name: 'Extra Small (450px)'
            },
            {
                id: GridCardLayoutWidth.Small,
                name: 'Small (650px)'
            },
            {
                id: GridCardLayoutWidth.Medium,
                name: 'Medium (800px)'
            },
            {
                id: GridCardLayoutWidth.Large,
                name: 'Large (1024px)'
            },
            {
                id: GridCardLayoutWidth.Xlarge,
                name: 'Extra Large (1200px)'
            },
            {
                id: GridCardLayoutWidth.Xxlarge,
                name: 'Extra Extra Large (1600px)'
            }
        ],
        actionsColumnProperties: [
            {
                name: 'visible',
                defaultValue: true,
                label: 'Visible'
            }
        ],
        columnProperties: columnProperties,
        sharedFilterPresets: {
            recordDefinitionName: 'Record Grid Filter Presets',
            fields: {
                recordGridGuid: 300000001,
                name: 300000002,
                filterExpression: 300000003,
                sortOrder: 300000004,
                isDefault: 300000005
            }
        },
        defaultFilter: '{}',
        associatedFieldIdPrefixPattern: i1$1.RX_EXPRESSION_EVALUATOR.associatedFieldIdPrefixPattern,
        defaultPageSize: 50,
        rowActionsOutletName: 'ROW_ACTIONS',
        actionsColumnFieldDefinition: {
            name: 'Actions',
            id: '$ACTIONS$'
        },
        numberOfFiltersOptions: [
            {
                id: 0,
                name: 'None'
            },
            {
                id: 1,
                name: '1'
            },
            {
                id: 2,
                name: '2'
            },
            {
                id: 3,
                name: '3'
            },
            {
                id: 4,
                name: '4'
            },
            {
                id: 5,
                name: '5'
            }
        ],
        defaultTypeaheadKeystrokeCount: defaultTypeaheadKeystrokeCount,
        externalPresetFilterOptionId: '$EXTERNAL_PRESET$'
    };

    var RxRecordGridUtilsService = /** @class */ (function () {
        function RxRecordGridUtilsService(rxLogService, rxRecordDefinitionCacheService, stringService, rxDefinitionNameService, rxFieldDefinitionService) {
            this.rxLogService = rxLogService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.stringService = stringService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxFieldDefinitionService = rxFieldDefinitionService;
        }
        RxRecordGridUtilsService.prototype.getColumnDescriptors = function (recordDefinitionName, source) {
            var _this = this;
            return this.rxRecordDefinitionCacheService
                .getRecordDefinition(recordDefinitionName)
                .toPromise()
                .then(function (recordDefinition) {
                if (lodash.isFunction(source.getColumns)) {
                    var columns = source
                        .getColumns()
                        .map(function (column, index) { return ({
                        fieldId: column.field,
                        index: index,
                        title: column.header,
                        fieldDefinition: column.fieldDefinition
                    }); });
                    return Promise.all(columns
                        .filter(function (column) { return _this.isAssociatedRecordFieldId(column.fieldId); })
                        .map(function (column) { return _this.getAssociationDescriptor(column.fieldId, recordDefinition)
                        .toPromise()
                        .then(function (associationDescriptor) {
                        column.associationDescriptor = associationDescriptor;
                    }); })).then(lodash.constant(columns));
                }
                else {
                    return recordDefinition.fieldDefinitions.map(function (fieldDefinition, index) { return ({
                        fieldId: fieldDefinition.id,
                        index: index,
                        title: fieldDefinition.name,
                        fieldDefinition: fieldDefinition
                    }); });
                }
            });
        };
        RxRecordGridUtilsService.prototype.getAssociationDescriptors = function (recordDefinitionName) {
            var _this = this;
            return rxjs.forkJoin([
                this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName),
                this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), associations = _b[0], recordDefinition = _b[1];
                var associationDescriptors = [];
                lodash.forEach(associations[recordDefinitionName], function (associationDefinition) {
                    var isOneToMany = associationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value;
                    var isManyToManyAssociation = associationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;
                    if (!isManyToManyAssociation) {
                        if (_this.isNeedSide(associationDefinition.nodeBId, recordDefinitionName, recordDefinition)) {
                            associationDescriptors.push({
                                associationDefinition: associationDefinition,
                                recordDefinitionName: associationDefinition.nodeAId,
                                nodeSide: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,
                                label: _this.getAssociationLabel(associationDefinition, i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA)
                            });
                        }
                        if (_this.isNeedSide(associationDefinition.nodeAId, recordDefinitionName, recordDefinition) &&
                            !isOneToMany) {
                            associationDescriptors.push({
                                associationDefinition: associationDefinition,
                                recordDefinitionName: associationDefinition.nodeBId,
                                nodeSide: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                                label: _this.getAssociationLabel(associationDefinition, i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB)
                            });
                        }
                    }
                });
                return lodash.sortBy(associationDescriptors, 'label');
            }));
        };
        RxRecordGridUtilsService.prototype.getFieldDefinition = function (gridColumnFieldId, primaryRecordDefinition) {
            var _this = this;
            var locator = this.getFieldLocator(gridColumnFieldId);
            var fieldDefinition$ = new rxjs.AsyncSubject();
            var recordDefinitionPromise;
            if (locator.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {
                return rxjs.of(RX_RECORD_GRID.actionsColumnFieldDefinition);
            }
            else {
                if (locator.associationGuid) {
                    recordDefinitionPromise = this.getAssociationDescriptors(primaryRecordDefinition.name)
                        .pipe(operators.map(function (associationDescriptors) { return _this.findAssociationDescriptor(associationDescriptors, locator); }), operators.filter(function (associationDescriptor) { return Boolean(associationDescriptor); }), operators.map(function (associationDescriptor) { return associationDescriptor.associationDefinition[i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES[associationDescriptor.nodeSide].recordDefinitionNameKey]; }), operators.switchMap(function (recordDefinitionName) {
                        return _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName);
                    }))
                        .toPromise();
                }
                else {
                    recordDefinitionPromise = Promise.resolve(primaryRecordDefinition);
                }
                recordDefinitionPromise.then(function (recordDefinition) {
                    var fieldDefinition;
                    if (recordDefinition) {
                        fieldDefinition = lodash.find(recordDefinition.fieldDefinitions, {
                            id: Number(locator.fieldId) || locator.fieldId
                        });
                    }
                    fieldDefinition$.next(fieldDefinition);
                    fieldDefinition$.complete();
                });
                return fieldDefinition$;
            }
        };
        RxRecordGridUtilsService.prototype.isAssociatedRecordFieldId = function (fieldId) {
            return !lodash.some(this.getFieldLocator(fieldId), lodash.isUndefined);
        };
        RxRecordGridUtilsService.prototype.getFieldIdForGridColumn = function (fieldId, associationDescriptor) {
            return associationDescriptor
                ? "recordContext._associations." + associationDescriptor.associationDefinition.guid + "." + associationDescriptor.nodeSide + "[0]." + fieldId
                : String(fieldId);
        };
        RxRecordGridUtilsService.prototype.getAssociationDescriptor = function (gridColumnFieldId, primaryRecordDefinition) {
            var _this = this;
            var locator = this.getFieldLocator(gridColumnFieldId);
            var associationDescriptor = rxjs.of(null);
            if (locator.associationGuid) {
                associationDescriptor = this.getAssociationDescriptors(primaryRecordDefinition.name).pipe(operators.map(function (associationDescriptors) { return _this.findAssociationDescriptor(associationDescriptors, locator); }));
            }
            return associationDescriptor;
        };
        RxRecordGridUtilsService.prototype.getDisplayFieldDescriptor = function (fieldId, primaryRecordDefinition, associatedRecordDefinitionName) {
            var fieldLocator = this.getFieldLocator(fieldId);
            var fieldDefinition$ = this.isAssociatedRecordFieldId(fieldId)
                ? this.rxRecordDefinitionCacheService.getRecordDefinition(associatedRecordDefinitionName).pipe(operators.map(function (associatedRecordDefinition) {
                    var isCoreIdField = fieldLocator.fieldId === String(i1$4.RX_RECORD_DEFINITION.coreFieldIds.id);
                    var displayFieldId = String((isCoreIdField && associatedRecordDefinition.displayFieldIdInAssociation) || fieldLocator.fieldId);
                    return lodash.find(associatedRecordDefinition.fieldDefinitions, function (fieldDefinition) { return String(fieldDefinition.id) === displayFieldId; });
                }))
                : rxjs.of(lodash.find(primaryRecordDefinition.fieldDefinitions, function (fieldDefinition) { return String(fieldDefinition.id) === fieldId; }));
            return fieldDefinition$;
        };
        RxRecordGridUtilsService.prototype.getColumnLabel = function (fieldDefinition, associationDescriptor) {
            return associationDescriptor ? associationDescriptor.label + " > " + fieldDefinition.name : fieldDefinition.name;
        };
        RxRecordGridUtilsService.prototype.findAssociationDescriptor = function (associationDescriptors, locator) {
            return lodash.find(associationDescriptors, function (associationDescriptor) {
                return (associationDescriptor.associationDefinition.guid === locator.associationGuid &&
                    associationDescriptor.nodeSide === locator.associationNodeSide);
            });
        };
        RxRecordGridUtilsService.prototype.getFieldLocator = function (gridColumnFieldId) {
            var match = new RegExp('(?:' + RX_RECORD_GRID.associatedFieldIdPrefixPattern + ')?(.+)').exec(gridColumnFieldId);
            return {
                associationGuid: match[1],
                associationNodeSide: match[2],
                fieldId: match[3]
            };
        };
        RxRecordGridUtilsService.prototype.isNeedSide = function (sideName, recordDefinitionName, recordDefinition) {
            return lodash.includes([recordDefinitionName, lodash.get(recordDefinition, 'inheritanceDescriptor.inheritingFrom')], sideName);
        };
        RxRecordGridUtilsService.prototype.getAssociationLabel = function (associationDefinition, nodeSide) {
            var nodeSideName;
            var label = this.rxDefinitionNameService.getDisplayName(associationDefinition.name);
            if (associationDefinition.nodeAId === associationDefinition.nodeBId) {
                if (nodeSide === i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA) {
                    nodeSideName = associationDefinition.nodeAName;
                }
                if (nodeSide === i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB) {
                    nodeSideName = associationDefinition.nodeBName;
                }
                nodeSideName = nodeSideName || nodeSide.defaultName;
                label += ' (' + nodeSideName + ')';
            }
            return label;
        };
        RxRecordGridUtilsService.prototype.isSharedFilterPresetTag = function (tag) {
            return tag.data.isSharedFilterPreset;
        };
        RxRecordGridUtilsService.prototype.getTestIdForGridColumn = function (fieldId) {
            if (this.isAssociatedRecordFieldId(fieldId)) {
                var fieldLocator = this.getFieldLocator(fieldId);
                return "field-id-" + fieldLocator.associationGuid + "-" + fieldLocator.fieldId;
            }
            else {
                return "field-id-" + fieldId;
            }
        };
        RxRecordGridUtilsService.prototype.isSearchable = function (fieldDefinition, recordDefinition) {
            return (lodash.includes([
                i1$4.RX_RECORD_DEFINITION.dataTypes.character.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.integer.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.real.resourceType
            ], fieldDefinition.resourceType) &&
                !this.rxFieldDefinitionService.isPassword(fieldDefinition) &&
                !this.rxFieldDefinitionService.isSecured(fieldDefinition) &&
                !this.rxFieldDefinitionService.isDataProviderIdField(fieldDefinition, recordDefinition));
        };
        return RxRecordGridUtilsService;
    }());
    RxRecordGridUtilsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUtilsService, deps: [{ token: i1__namespace$1.RxLogService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i2__namespace$1.RxStringService }, { token: i1__namespace$1.RxDefinitionNameService }, { token: i1__namespace$5.RxFieldDefinitionService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridUtilsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUtilsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUtilsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxLogService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i2__namespace$1.RxStringService }, { type: i1__namespace$1.RxDefinitionNameService }, { type: i1__namespace$5.RxFieldDefinitionService }]; } });

    var ColumnEditorAlignmentComponent = /** @class */ (function () {
        function ColumnEditorAlignmentComponent() {
        }
        ColumnEditorAlignmentComponent.prototype.trackByForAlignmentOptions = function (index, alignment) {
            return alignment || index;
        };
        return ColumnEditorAlignmentComponent;
    }());
    ColumnEditorAlignmentComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ColumnEditorAlignmentComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ColumnEditorAlignmentComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ColumnEditorAlignmentComponent, selector: "rx-column-editor-alignment", inputs: { column: "column", isReadOnly: "isReadOnly", columnProperty: "columnProperty" }, ngImport: i0__namespace, template: "<div class=\"btn-group py-2 btn-group-toggle\" data-toggle=\"buttons\">\n  <label\n    class=\"btn btn-sm rounded btn-secondary {{ selectionValue.icon }}\"\n    *ngFor=\"let selectionValue of columnProperty.selectionValues; trackBy: trackByForAlignmentOptions\"\n    [class.active]=\"column.alignment === selectionValue.value\"\n    [class.disabled]=\"isReadOnly\"\n    [adaptTooltip]=\"selectionValue.name\"\n    [attr.rx-id]=\"selectionValue.name\"\n  >\n    <input\n      size=\"small\"\n      type=\"radio\"\n      name=\"selectionValue.name\"\n      [attr.rx-id]=\"selectionValue.value\"\n      [value]=\"selectionValue.value\"\n      [(ngModel)]=\"column.alignment\"\n      [disabled]=\"isReadOnly\"\n    />\n  </label>\n</div>\n", styles: [".alignment-field{min-width:140px}\n"], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.AdaptTooltipDirective, selector: "[adaptTooltip]", inputs: ["popupDelay", "placement", "width", "minWidth", "useWidthFitting", "adaptRadarDisableEventSending", "adaptTooltip", "manual"], outputs: ["shown", "hidden"], exportAs: ["tooltip"] }, { type: i2__namespace$3.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i2__namespace$3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ColumnEditorAlignmentComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-column-editor-alignment',
                        templateUrl: './column-editor-alignment.component.html',
                        styleUrls: ['./column-editor-alignment.component.scss']
                    }]
            }], propDecorators: { column: [{
                    type: i0.Input
                }], isReadOnly: [{
                    type: i0.Input
                }], columnProperty: [{
                    type: i0.Input
                }] } });

    var _a$1, _b;
    var RxGridCellFontSize;
    (function (RxGridCellFontSize) {
        RxGridCellFontSize["Small"] = "small";
        RxGridCellFontSize["Large"] = "large";
    })(RxGridCellFontSize || (RxGridCellFontSize = {}));
    var RxGridCellColor;
    (function (RxGridCellColor) {
        RxGridCellColor["Primary"] = "primary";
        RxGridCellColor["Secondary"] = "secondary";
        RxGridCellColor["Light"] = "light";
        RxGridCellColor["Active"] = "active";
        RxGridCellColor["Info"] = "info";
        RxGridCellColor["Success"] = "success";
        RxGridCellColor["Warning"] = "warning";
        RxGridCellColor["Danger"] = "danger";
    })(RxGridCellColor || (RxGridCellColor = {}));
    var RxGridCellIconPosition;
    (function (RxGridCellIconPosition) {
        RxGridCellIconPosition["Left"] = "left";
        RxGridCellIconPosition["Right"] = "right";
        RxGridCellIconPosition["ReplaceText"] = "replaceText";
    })(RxGridCellIconPosition || (RxGridCellIconPosition = {}));
    var RxGridCellFontColorCssMap = (_a$1 = {},
        _a$1[RxGridCellColor.Primary] = 'text-primary',
        _a$1[RxGridCellColor.Secondary] = 'text-secondary',
        _a$1[RxGridCellColor.Light] = 'text-white',
        _a$1[RxGridCellColor.Active] = 'text-active',
        _a$1[RxGridCellColor.Info] = 'text-info',
        _a$1[RxGridCellColor.Success] = 'text-success',
        _a$1[RxGridCellColor.Warning] = 'text-warning',
        _a$1[RxGridCellColor.Danger] = 'text-danger',
        _a$1);
    var RxGridCellBgColorCssMap = (_b = {},
        _b[RxGridCellColor.Primary] = 'bg-primary',
        _b[RxGridCellColor.Secondary] = 'bg-secondary',
        _b[RxGridCellColor.Active] = 'bg-active',
        _b[RxGridCellColor.Info] = 'bg-info',
        _b[RxGridCellColor.Success] = 'bg-success',
        _b[RxGridCellColor.Warning] = 'bg-warning',
        _b[RxGridCellColor.Danger] = 'bg-danger',
        _b);
    var RX_CELL_PROPERTIES = {
        colorsList: [
            {
                label: 'Default',
                value: null
            },
            {
                label: 'Primary',
                value: RxGridCellColor.Primary
            },
            {
                label: 'Secondary',
                value: RxGridCellColor.Secondary
            },
            {
                label: 'Light',
                value: RxGridCellColor.Light
            },
            {
                label: 'Active',
                value: RxGridCellColor.Active
            },
            {
                label: 'Information',
                value: RxGridCellColor.Info
            },
            {
                label: 'Success',
                value: RxGridCellColor.Success
            },
            {
                label: 'Warning',
                value: RxGridCellColor.Warning
            },
            {
                label: 'Danger',
                value: RxGridCellColor.Danger
            }
        ],
        iconPositions: [
            {
                label: 'Left',
                value: RxGridCellIconPosition.Left
            },
            {
                label: 'Right',
                value: RxGridCellIconPosition.Right
            },
            {
                label: 'Replace text',
                value: RxGridCellIconPosition.ReplaceText
            }
        ],
        fontSizes: [
            {
                label: 'Default',
                value: null
            },
            {
                label: 'Small',
                value: RxGridCellFontSize.Small
            },
            {
                label: 'Large',
                value: RxGridCellFontSize.Large
            }
        ]
    };

    var RecordGridCellDisplayPropertiesExpressionConfigurator = /** @class */ (function (_super) {
        __extends(RecordGridCellDisplayPropertiesExpressionConfigurator, _super);
        function RecordGridCellDisplayPropertiesExpressionConfigurator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RecordGridCellDisplayPropertiesExpressionConfigurator.prototype.cellDisplayExpressionDataDictionary = function (columns) {
            if (columns.length) {
                return rxjs.of(columns.map(function (column) { return ({
                    label: column.label,
                    icon: 'd-icon-field_text',
                    expression: "${view.components.grid.clickableRow." + column.fieldId + "}",
                    resourceType: column.fieldDefinition.resourceType
                }); }));
            }
            else {
                return rxjs.of([]);
            }
        };
        return RecordGridCellDisplayPropertiesExpressionConfigurator;
    }(i1$2.RxExpressionConfigurator));

    var RecordGridCellDisplayPropertiesEditorComponent = /** @class */ (function (_super) {
        __extends(RecordGridCellDisplayPropertiesEditorComponent, _super);
        function RecordGridCellDisplayPropertiesEditorComponent(activeModalRef, rxExpressionEditorService, formBuilder, translateService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.formBuilder = formBuilder;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.config = _this.activeModalRef.getData();
            _this.propsFormArray = _this.formBuilder.array([]);
            _this.iconPositions = RX_CELL_PROPERTIES.iconPositions;
            _this.textColors = RX_CELL_PROPERTIES.colorsList;
            _this.fontSizes = RX_CELL_PROPERTIES.fontSizes;
            _this.colorsList = RxGridCellBgColorCssMap;
            _this.backgroundColors = RX_CELL_PROPERTIES.colorsList.filter(function (color) { return color.value !== RxGridCellColor.Light; });
            _this.badgeColors = RX_CELL_PROPERTIES.colorsList.filter(function (color) { return ![RxGridCellColor.Light, RxGridCellColor.Active, null].includes(color.value); });
            _this.iconPickerOptions = {
                label: 'Icon',
                appendToBody: true,
                required: false
            };
            return _this;
        }
        RecordGridCellDisplayPropertiesEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.expressionConfigurator = new RecordGridCellDisplayPropertiesExpressionConfigurator();
            this.expressionConfigurator.configureForProperty({
                propertyPath: 'cellDisplayProperties',
                dataDictionary$: this.expressionConfigurator.cellDisplayExpressionDataDictionary(this.config.columns),
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i1$2.ExpressionOperatorGroup.AllClient)
            });
            this.queryExpressionOptions = {
                label: 'Field value condition',
                dataDictionary$: this.expressionConfigurator.getDataDictionary('cellDisplayProperties'),
                operators: this.expressionConfigurator.getOperators('cellDisplayProperties'),
                isRequired: true
            };
            lodash.forEach(this.config.cellDisplayProperties, function (props) { return _this.propsFormArray.push(_this.getFormGroup(props)); });
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.addCellProperties = function () {
            var _this = this;
            this.markAsDirty();
            this.propsFormArray.push(this.getFormGroup({
                fieldValueCondition: '',
                displayAsBadge: false,
                badgeColor: null,
                icon: null,
                iconPosition: null,
                textColor: null,
                backgroundColor: null,
                fontSize: null,
                bold: false,
                italic: false,
                isOpen: true
            }));
            setTimeout(function () {
                _this.accordionTabEls.last.nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            });
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.removeCellProperties = function (index) {
            this.propsFormArray.removeAt(index);
            this.markAsDirty();
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.optionFormatter = function (selectOption) {
            return selectOption.label;
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.getFormGroup = function (properties) {
            var _this = this;
            var _a;
            var formGroup = this.formBuilder.group({
                fieldValueCondition: [properties.fieldValueCondition, i2$4.Validators.required],
                displayAsBadge: [properties.displayAsBadge],
                badgeColor: {
                    value: this.getSelectValue(this.badgeColors, 'value', properties.badgeColor),
                    disabled: !properties.displayAsBadge
                },
                icon: {
                    value: properties.icon,
                    disabled: properties.displayAsBadge
                },
                iconPosition: {
                    value: this.getSelectValue(this.iconPositions, 'value', properties.iconPosition),
                    disabled: !properties.icon
                },
                textColor: {
                    value: this.getSelectValue(this.textColors, 'value', properties.textColor),
                    disabled: properties.displayAsBadge
                },
                backgroundColor: {
                    value: this.getSelectValue(this.backgroundColors, 'value', properties.backgroundColor),
                    disabled: properties.displayAsBadge
                },
                fontSize: {
                    value: this.getSelectValue(this.fontSizes, 'value', properties.fontSize),
                    disabled: properties.displayAsBadge
                },
                bold: [properties.bold],
                italic: [properties.italic],
                isOpen: [(_a = properties.isOpen) !== null && _a !== void 0 ? _a : false]
            });
            formGroup.controls.displayAsBadge.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (displayAsBadge) {
                if (displayAsBadge && formGroup.controls.badgeColor.disabled) {
                    formGroup.controls.badgeColor.reset({ value: [_this.badgeColors[0]], disabled: false });
                }
                if (!displayAsBadge && formGroup.controls.badgeColor.enabled) {
                    formGroup.controls.badgeColor.reset({ value: [], disabled: true });
                }
            });
            formGroup.controls.icon.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (iconName) {
                if (iconName && formGroup.controls.iconPosition.disabled) {
                    formGroup.controls.iconPosition.reset({ value: [_this.iconPositions[0]], disabled: false });
                }
                if (!iconName && formGroup.controls.iconPosition.enabled) {
                    formGroup.controls.iconPosition.reset({ value: [], disabled: true });
                }
            });
            return formGroup;
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.getSelectValue = function (optionsList, key, value) {
            var item = optionsList.find(function (option) { return option[key] === value; });
            return item ? [item] : [];
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.openExpressionEditor = function (control) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'cellDisplayProperties',
                    value: control.value,
                    label: 'Cell display properties'
                },
                isReadOnly: false,
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.column.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            })
                .subscribe(function (expression) {
                control.setValue(expression.value);
                _this.markAsDirty();
            });
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.moveCellProperties = function (fromIndex, toIndex) {
            i8.moveItemInArray(this.propsFormArray.controls, fromIndex, toIndex);
            this.markAsDirty();
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.onSelectedCellPropertyDrop = function (event) {
            i8.moveItemInArray(this.propsFormArray.controls, event.previousIndex, event.currentIndex);
            this.markAsDirty();
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.toggleProp = function (control) {
            control.setValue(!control.value);
            this.markAsDirty();
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.toggleOpen = function (expandAll) {
            this.propsFormArray.controls.forEach(function (control) {
                control.get('isOpen').setValue(expandAll);
            });
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.resetIconAndTextProps = function (props) {
            var isDisplayAsBadge = props.get('displayAsBadge').value;
            props.get('icon').reset({ value: null, disabled: isDisplayAsBadge });
            props.get('textColor').reset({ value: [this.textColors[0]], disabled: isDisplayAsBadge });
            props.get('backgroundColor').reset({ value: [this.backgroundColors[0]], disabled: isDisplayAsBadge });
            props.get('fontSize').reset({ value: [this.fontSizes[0]], disabled: isDisplayAsBadge });
            props.get('bold').reset({ value: false, disabled: isDisplayAsBadge });
            props.get('italic').reset({ value: false, disabled: isDisplayAsBadge });
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.onSave = function () {
            var formValues = this.propsFormArray.getRawValue().map(function (value) { return (Object.assign(Object.assign({}, value), { icon: lodash.get(value, 'icon', null), badgeColor: lodash.get(value, 'badgeColor[0].value', null), iconPosition: lodash.get(value, 'iconPosition[0].value', null), textColor: lodash.get(value, 'textColor[0].value', null), backgroundColor: lodash.get(value, 'backgroundColor[0].value', null), fontSize: lodash.get(value, 'fontSize[0].value', null) })); });
            var cellProps = formValues.map(function (value) { return (Object.assign({}, lodash.omit(value, 'isOpen'))); });
            this.activeModalRef.close(cellProps);
        };
        RecordGridCellDisplayPropertiesEditorComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        return RecordGridCellDisplayPropertiesEditorComponent;
    }(i1$6.RxModalClass));
    RecordGridCellDisplayPropertiesEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCellDisplayPropertiesEditorComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i2__namespace$5.RxExpressionEditorService }, { token: i2__namespace$3.FormBuilder }, { token: i2__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridCellDisplayPropertiesEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridCellDisplayPropertiesEditorComponent, selector: "rx-cell-display-properties-editor", viewQueries: [{ propertyName: "accordionTabEls", predicate: i1.AdaptAccordionTabComponent, descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <div>\n          <button\n            *ngIf=\"!config.isReadOnly\"\n            class=\"pl-0 pr-0\"\n            rx-id=\"add-button\"\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            (click)=\"addCellProperties()\"\n          >\n            <span class=\"d-icon-left-plus_circle\"></span>\n\n            {{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.add-cell-display-property.button.label' | translate }}\n          </button>\n\n          <span\n            class=\"d-icon-right-question_circle_o ml-1 mt-1\"\n            adaptPopover=\"Cell display properties will be applied based on the first field value condition evaluating to true.\"\n            placement=\"bottom\"\n            appendToBody=\"true\"\n          ></span>\n        </div>\n\n        <div *ngIf=\"propsFormArray.controls.length\" class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"toggleOpen(true)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"propsFormArray.controls.length\"\n        id=\"selected-cell-property\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedCellPropertyDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let props of propsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last;\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"props\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"props\"\n              [isOpen]=\"props.get('isOpen').value\"\n              (open)=\"props.get('isOpen').setValue(true)\"\n              (close)=\"props.get('isOpen').setValue(false)\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"'Cell display properties ' + (index + 1)\" rx-id=\"card-title\">\n                      Cell display properties {{ index + 1 }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeCellProperties(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <rx-expression-form-control\n                  formControlName=\"fieldValueCondition\"\n                  class=\"form-group d-block col-12\"\n                  rx-id=\"query-expression-field\"\n                  [options]=\"queryExpressionOptions\"\n                  (events)=\"openExpressionEditor(props.get('fieldValueCondition'))\"\n                ></rx-expression-form-control>\n              </div>\n\n              <div class=\"row form-group\">\n                <div class=\"col-3\">\n                  <adapt-rx-control-label\n                    label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.display-as-badge-field.label' | translate }}\"\n                  ></adapt-rx-control-label>\n\n                  <adapt-rx-switch\n                    [disabled]=\"config.isReadOnly\"\n                    formControlName=\"displayAsBadge\"\n                    (ngModelChange)=\"markAsDirty(); resetIconAndTextProps(props)\"\n                  ></adapt-rx-switch>\n                </div>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.badge-color-field.label' | translate }}\"\n                  formControlName=\"badgeColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"badgeColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <rx-icon-picker-form-control\n                  class=\"d-block col-3\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPickerOptions\"\n                  formControlName=\"icon\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-icon-picker-form-control>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.icon-position-field.label' | translate }}\"\n                  formControlName=\"iconPosition\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPositions\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n              </div>\n\n              <div class=\"row\">\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.text-color-field.label' | translate }}\"\n                  formControlName=\"textColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"textColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.background-color-field.label' | translate }}\"\n                  formControlName=\"backgroundColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"backgroundColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.font-size-field.label' | translate }}\"\n                  formControlName=\"fontSize\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"fontSizes\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <div class=\"col-3 pt-4 d-flex align-item-center\">\n                  <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label\n                      class=\"btn btn-secondary d-icon-bold_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('bold').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('bold'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n\n                    <label\n                      class=\"btn btn-secondary ml-2 d-icon-italic_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('italic').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('italic'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!propsFormArray.controls.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.empty-state.message' | translate }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"propsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ config.isReadOnly ? ('com.bmc.arsys.rx.client.common.close.label' | translate) : ('com.bmc.arsys.rx.client.common.cancel.label' | translate) }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <div class=\"d-flex align-items-center\">\n    <div [ngClass]=\"option.value ? 'color-option-box rounded mr-2 ' + colorsList[option.value] : ''\"></div>\n    {{ option.label }}\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}.color-option-box{display:inline-block;width:20px;height:20px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i2__namespace$5.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i2__namespace$5.IconPickerFormControlComponent, selector: "rx-icon-picker-form-control", inputs: ["options"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i8__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i2__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCellDisplayPropertiesEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cell-display-properties-editor',
                        templateUrl: './cell-display-properties-editor.component.html',
                        styleUrls: ['./cell-display-properties-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i2__namespace$5.RxExpressionEditorService }, { type: i2__namespace$3.FormBuilder }, { type: i2__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { accordionTabEls: [{
                    type: i0.ViewChildren,
                    args: [i1.AdaptAccordionTabComponent, { read: i0.ElementRef }]
                }] } });

    var RecordGridCellDisplayPropertiesComponent = /** @class */ (function (_super) {
        __extends(RecordGridCellDisplayPropertiesComponent, _super);
        function RecordGridCellDisplayPropertiesComponent(rxModalService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            return _this;
        }
        RecordGridCellDisplayPropertiesComponent.prototype.openPropertiesEditor = function () {
            var _this = this;
            this.rxModalService
                .openModal({
                title: "Edit cell display properties for " + this.columnName,
                data: {
                    cellDisplayProperties: this.value ? lodash.cloneDeep(this.value) : [],
                    isReadOnly: this.isDisabled,
                    columns: this.columns
                },
                content: RecordGridCellDisplayPropertiesEditorComponent,
                size: i1$1.OpenViewActionModalSize.Large,
                testID: 'edit-cell-display-properties'
            })
                .then(function (properties) {
                _this.value = properties;
            })
                .catch(lodash.noop);
        };
        return RecordGridCellDisplayPropertiesComponent;
    }(i2.ValueAccessor));
    RecordGridCellDisplayPropertiesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCellDisplayPropertiesComponent, deps: [{ token: i1__namespace$6.RxModalService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridCellDisplayPropertiesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridCellDisplayPropertiesComponent, selector: "rx-cell-display-properties", inputs: { columnName: "columnName", columns: "columns" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridCellDisplayPropertiesComponent,
                multi: true
            }
        ], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0\" (click)=\"openPropertiesEditor()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit cell display properties\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"!value?.length\" class=\"text-tertiary\">No cell display properties added.</span>\n  <span *ngIf=\"value?.length > 0\" class=\"text-tertiary\">Cell display properties added.</span>\n</div>\n", components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCellDisplayPropertiesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cell-display-properties',
                        templateUrl: './cell-display-properties.component.html',
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridCellDisplayPropertiesComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxModalService }]; }, propDecorators: { columnName: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }] } });

    var RX_RECORD_GRID_DESIGN = {
        keywords: {
            label: 'Keywords',
            children: [
                {
                    label: 'Current user',
                    icon: 'd-icon-dollar',
                    expression: '$USER$'
                },
                {
                    label: 'Current date',
                    icon: 'd-icon-dollar',
                    expression: '$DATE$'
                },
                {
                    label: 'Current time',
                    icon: 'd-icon-dollar',
                    expression: '$TIME$'
                },
                {
                    label: 'Current date and time',
                    icon: 'd-icon-dollar',
                    expression: '$TIMESTAMP$'
                },
                {
                    label: 'Current week day',
                    icon: 'd-icon-dollar',
                    expression: '$WEEKDAY$'
                },
                {
                    label: 'Current groups',
                    icon: 'd-icon-dollar',
                    expression: '$GROUPS$'
                },
                {
                    label: 'Current group IDs',
                    icon: 'd-icon-dollar',
                    expression: '$GROUPIDS$'
                },
                {
                    label: 'Current roles',
                    icon: 'd-icon-dollar',
                    expression: '$ROLES$'
                },
                {
                    label: 'Current user locale',
                    icon: 'd-icon-dollar',
                    expression: '$LOCALE$'
                },
                {
                    label: 'Current server URL',
                    icon: 'd-icon-dollar',
                    expression: '$SERVERURL$'
                },
                {
                    label: 'NULL',
                    icon: 'd-icon-dollar',
                    expression: '$NULL$',
                    hidden: true
                }
            ]
        }
    };

    var NamedFilterOptionExpressionConfigurator = /** @class */ (function (_super) {
        __extends(NamedFilterOptionExpressionConfigurator, _super);
        function NamedFilterOptionExpressionConfigurator(injector, activeModalRef, rxViewDataDictionaryService, rxDefaultExpressionEvaluatorService) {
            var _this = _super.call(this, injector) || this;
            _this.injector = injector;
            _this.activeModalRef = activeModalRef;
            _this.rxViewDataDictionaryService = rxViewDataDictionaryService;
            _this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;
            _this.commonDataDictionary$ = _this.rxViewDataDictionaryService.commonDataDictionary$.pipe(operators.map(function (dataDictionary) { return __spreadArray([
                {
                    expression: "'" + _this.activeModalRef.getData().column.fieldId + "'",
                    icon: 'd-icon-file_o_gear',
                    label: _this.activeModalRef.getData().column.title
                },
                RX_RECORD_GRID_DESIGN.keywords
            ], __read(dataDictionary.slice(2))); }));
            return _this;
        }
        NamedFilterOptionExpressionConfigurator.prototype.getExpressionEvaluator = function () {
            return this.rxDefaultExpressionEvaluatorService;
        };
        return NamedFilterOptionExpressionConfigurator;
    }(i1$3.RxViewExpressionConfigurator));
    NamedFilterOptionExpressionConfigurator.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedFilterOptionExpressionConfigurator, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace.ActiveModalRef }, { token: i1__namespace$3.RxViewDataDictionaryService }, { token: i1__namespace$4.RxDefaultExpressionEvaluatorService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NamedFilterOptionExpressionConfigurator.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedFilterOptionExpressionConfigurator });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: NamedFilterOptionExpressionConfigurator, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace.ActiveModalRef }, { type: i1__namespace$3.RxViewDataDictionaryService }, { type: i1__namespace$4.RxDefaultExpressionEvaluatorService }]; } });

    var RecordGridNamedFilterOptionsEditorModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridNamedFilterOptionsEditorModalComponent, _super);
        function RecordGridNamedFilterOptionsEditorModalComponent(activeModalRef, rxGuidService, rxExpressionEditorService, formBuilder, translateService, expressionConfigurator, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxGuidService = rxGuidService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.formBuilder = formBuilder;
            _this.translateService = translateService;
            _this.expressionConfigurator = expressionConfigurator;
            _this.config = _this.activeModalRef.getData();
            _this.namedFilterOptionsFormArray = _this.formBuilder.array([]);
            _this.accordionTabs = {};
            return _this;
        }
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.expressionConfigurator.configureForProperty({
                propertyPath: 'namedFilterOptions',
                operators: i1$2.ExpressionOperatorRowsByGroup.get(i1$2.ExpressionOperatorGroup.All)
            });
            this.queryExpressionOptions = {
                label: 'Filter',
                dataDictionary$: this.expressionConfigurator.getDataDictionary('namedFilterOptions'),
                operators: this.expressionConfigurator.getOperators('namedFilterOptions'),
                isRequired: true
            };
            lodash.forEach(this.config.namedFilterOptions, function (props, index) {
                _this.accordionTabs[props.guid] = index === _this.config.activeIndex;
                _this.namedFilterOptionsFormArray.push(_this.getFormGroup(props));
            });
            if (this.config.isReadOnly) {
                this.namedFilterOptionsFormArray.disable();
            }
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.ngAfterViewInit = function () {
            if (this.config.activeIndex) {
                this.accordionTabEls.toArray()[this.config.activeIndex].nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            }
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.addNamedFilterOption = function () {
            var _this = this;
            this.markAsDirty();
            var guid = this.rxGuidService.generate();
            this.accordionTabs[guid] = true;
            var title = 'New filter option';
            var counter = 0;
            var titleAlreadyExists = false;
            var titles = lodash.map(this.namedFilterOptionsFormArray.getRawValue(), 'title');
            do {
                title = counter === 0 ? title : "New filter option " + counter;
                counter++;
                titleAlreadyExists = lodash.includes(titles, title);
            } while (titleAlreadyExists);
            this.namedFilterOptionsFormArray.push(this.getFormGroup({
                data: {
                    title: title,
                    filterExpression: '',
                    index: this.namedFilterOptionsFormArray.length
                },
                guid: guid
            }));
            setTimeout(function () {
                _this.accordionTabEls.last.nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            });
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.removeNamedFilterOption = function (index) {
            this.namedFilterOptionsFormArray.removeAt(index);
            this.markAsDirty();
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.openExpressionEditor = function (title, filterExpression) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'namedFilterOptions',
                    value: filterExpression.value,
                    label: title.value
                },
                isReadOnly: false,
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'),
                        icon: 'd-icon-file_o_gear'
                    }
                ]
            })
                .subscribe(function (expression) {
                filterExpression.setValue(expression.value);
                _this.markAsDirty();
            });
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.moveNamedFilterOption = function (fromIndex, toIndex) {
            i8.moveItemInArray(this.namedFilterOptionsFormArray.controls, fromIndex, toIndex);
            this.markAsDirty();
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.onSelectedNamedFilterOptionDrop = function (event) {
            i8.moveItemInArray(this.namedFilterOptionsFormArray.controls, event.previousIndex, event.currentIndex);
            this.markAsDirty();
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.onSave = function () {
            var formValues = this.namedFilterOptionsFormArray.getRawValue();
            var namedFilterOptions = formValues.map(function (_b, index) {
                var guid = _b.guid, title = _b.title, filterExpression = _b.filterExpression;
                return ({
                    guid: guid,
                    data: {
                        title: title,
                        filterExpression: filterExpression,
                        index: index
                    }
                });
            });
            this.activeModalRef.close(namedFilterOptions);
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.toggleOpen = function (expandAll) {
            var _this = this;
            lodash.forEach(this.accordionTabs, function (val, key) {
                _this.accordionTabs[key] = expandAll;
            });
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.getCheckTitleDuplicateValidator = function (currentNamedFilterOption) {
            var _this = this;
            return function (control) {
                var title = control.value;
                if (title &&
                    _this.namedFilterOptionsFormArray.controls.some(function (namedFilterOption) { return namedFilterOption.value.title === title && namedFilterOption.value.guid !== currentNamedFilterOption.guid; })) {
                    return { duplicateFilterOptionName: { message: 'Filter option with this name already exists.' } };
                }
                return null;
            };
        };
        RecordGridNamedFilterOptionsEditorModalComponent.prototype.getFormGroup = function (properties) {
            return this.formBuilder.group({
                guid: properties.guid,
                title: [
                    properties.data.title,
                    [
                        i2$4.Validators.required,
                        this.getCheckTitleDuplicateValidator(properties).bind(this),
                        function (control) {
                            var _a;
                            return ((_a = control === null || control === void 0 ? void 0 : control.value) === null || _a === void 0 ? void 0 : _a.includes(';'))
                                ? { invalidName: { message: 'A filter option name cannot contain any of the following characters: ;' } }
                                : null;
                        }
                    ]
                ],
                filterExpression: [properties.data.filterExpression, i2$4.Validators.required]
            });
        };
        return RecordGridNamedFilterOptionsEditorModalComponent;
    }(i1$6.RxModalClass));
    RecordGridNamedFilterOptionsEditorModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridNamedFilterOptionsEditorModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i2__namespace$1.RxGuidService }, { token: i2__namespace$5.RxExpressionEditorService }, { token: i2__namespace$3.FormBuilder }, { token: i2__namespace.TranslateService }, { token: NamedFilterOptionExpressionConfigurator }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridNamedFilterOptionsEditorModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridNamedFilterOptionsEditorModalComponent, selector: "rx-named-filter-options-editor-modal", providers: [NamedFilterOptionExpressionConfigurator], viewQueries: [{ propertyName: "accordionTabEls", predicate: i1.AdaptAccordionTabComponent, descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!config.isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addNamedFilterOption()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.named-filter-options.add-named-filter-option.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"namedFilterOptionsFormArray.controls.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"namedFilterOptionsFormArray.controls.length\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedNamedFilterOptionDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let namedFilterOption of namedFilterOptionsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"namedFilterOption\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"namedFilterOption\"\n              [isOpen]=\"accordionTabs[namedFilterOption.get('guid').value]\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"namedFilterOption.get('title').value\" rx-id=\"card-title\">\n                      {{ namedFilterOption.get('title').value }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeNamedFilterOption(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                rx-id=\"filter-option-name-field\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.view-components.named-filter-options.name-field.label' | translate\n                }}\"\n                formControlName=\"title\"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n                rxNoWhitespace\n              ></adapt-rx-textfield>\n\n              <rx-expression-form-control\n                formControlName=\"filterExpression\"\n                rx-id=\"query-expression-field\"\n                [options]=\"queryExpressionOptions\"\n                (events)=\"\n                  openExpressionEditor(namedFilterOption.get('title'), namedFilterOption.get('filterExpression'))\n                \"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-expression-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div\n        *ngIf=\"!namedFilterOptionsFormArray.controls.length\"\n        class=\"d-flex justify-content-center h-100 align-items-center mt-2\"\n      >\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.named-filter-options.empty-state.message' | translate }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"this.namedFilterOptionsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$5.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i8__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i2__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$1.RxNoWhitespaceValidator, selector: "[rxNoWhitespace]", inputs: ["rxNoWhitespace"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridNamedFilterOptionsEditorModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-named-filter-options-editor-modal',
                        templateUrl: './named-filter-options-editor-modal.component.html',
                        styleUrls: ['./named-filter-options-editor-modal.component.scss'],
                        providers: [NamedFilterOptionExpressionConfigurator]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i2__namespace$1.RxGuidService }, { type: i2__namespace$5.RxExpressionEditorService }, { type: i2__namespace$3.FormBuilder }, { type: i2__namespace.TranslateService }, { type: NamedFilterOptionExpressionConfigurator }, { type: i0__namespace.Injector }]; }, propDecorators: { accordionTabEls: [{
                    type: i0.ViewChildren,
                    args: [i1.AdaptAccordionTabComponent, { read: i0.ElementRef }]
                }] } });

    var RecordGridNamedFilterOptionsComponent = /** @class */ (function (_super) {
        __extends(RecordGridNamedFilterOptionsComponent, _super);
        function RecordGridNamedFilterOptionsComponent(rxModalService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            return _this;
        }
        RecordGridNamedFilterOptionsComponent.prototype.openNamedFilterOptions = function (activeIndex) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: "Edit named filter options for " + this.column.title,
                data: {
                    namedFilterOptions: this.value ? lodash.cloneDeep(this.value) : [],
                    isReadOnly: this.isDisabled,
                    activeIndex: activeIndex,
                    column: this.column
                },
                content: RecordGridNamedFilterOptionsEditorModalComponent,
                size: i1$1.OpenViewActionModalSize.Large,
                testID: 'edit-named-filter-options'
            })
                .then(function (namedFilterOptions) {
                _this.value = namedFilterOptions;
            })
                .catch(lodash.noop);
        };
        RecordGridNamedFilterOptionsComponent.prototype.editNamedFilterOption = function (activeIndex) {
            this.openNamedFilterOptions(activeIndex);
        };
        RecordGridNamedFilterOptionsComponent.prototype.removeFilterOption = function (namedFilterOption) {
            this.value = lodash.without(this.value, namedFilterOption);
        };
        return RecordGridNamedFilterOptionsComponent;
    }(i2.ValueAccessor));
    RecordGridNamedFilterOptionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridNamedFilterOptionsComponent, deps: [{ token: i1__namespace$6.RxModalService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridNamedFilterOptionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridNamedFilterOptionsComponent, selector: "rx-named-filter-options", inputs: { column: "column", tooltip: "tooltip" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridNamedFilterOptionsComponent,
                multi: true
            }
        ], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0 pb-1\" (click)=\"openNamedFilterOptions()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit named filter options\n</adapt-button>\n\n<span *ngIf=\"tooltip\" class=\"align-middle\">\n  <span class=\"letter-space\"></span>\n  <adapt-icon [name]=\"'question_circle_o'\" [adaptPopover]=\"tooltip\" appendToBody=\"true\"></adapt-icon>\n</span>\n\n<div rx-id=\"named-filter-options\">\n  <div *ngIf=\"!value?.length\" class=\"text-tertiary\">No named filter options added.</div>\n  <ul class=\"list-unstyled mb-0\" *ngIf=\"value?.length > 0\">\n    <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let option of value; let index = index\">\n      <strong class=\"mr-auto text-break\">{{ option.data.title }}</strong>\n\n      <button\n        class=\"d-icon-left-pencil p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        (click)=\"editNamedFilterOption(index)\"\n        rx-id=\"edit-button\"\n      ></button>\n\n      <button\n        class=\"d-icon-left-cross_adapt p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterOption(option)\"\n        rx-id=\"remove-button\"\n      ></button>\n    </li>\n  </ul>\n</div>\n", components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridNamedFilterOptionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-named-filter-options',
                        templateUrl: './named-filter-options.component.html',
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridNamedFilterOptionsComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxModalService }]; }, propDecorators: { column: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }] } });

    var RecordGridColumnEditorModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridColumnEditorModalComponent, _super);
        function RecordGridColumnEditorModalComponent(activeModalRef, rxModalService, definitionNameService, rxRecordGridUtilsService, rxFieldDefinitionService, rxRecordDefinitionCacheService, rxGuidService, ngZone, injector, translateService, rxExpressionEditorService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxModalService = rxModalService;
            _this.definitionNameService = definitionNameService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxFieldDefinitionService = rxFieldDefinitionService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxGuidService = rxGuidService;
            _this.ngZone = ngZone;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.columnProperties = RX_RECORD_GRID.columnProperties;
            _this.actionsColumnProperties = RX_RECORD_GRID.actionsColumnProperties;
            _this.filteredColumns = [];
            _this.availableColumnsTree = [];
            _this.startedLoadingAssociationDescriptors = false;
            _this.treeWrap = i1.TreeWrap.WrapAll;
            _this.columnWidthPropertyOptions = _this.columnProperties.find(function (_a) {
                var name = _a.name;
                return name === 'width';
            }).options;
            _this.typeaheadKeystrokeCountOptions = Object.assign(Object.assign({}, _this.columnProperties.find(function (_a) {
                var name = _a.name;
                return name === 'typeaheadKeystrokeCount';
            }).options), { tooltip: new i1$2.Tooltip(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-column.keystroke-count.tooltip')) });
            var params = _this.activeModalRef.getData().columnParams;
            _this.activeColumn = params.activeColumn;
            _this.activeActionIndex = params.activeActionIndex;
            _this.recordDefinition = params.recordDefinition;
            _this.isReadOnly = params.isReadOnly;
            _this.columns = params.columns
                .map(function (column) {
                var additionalQueryCriteriaExpressionOptions = column.fieldDefinition.namedListDefinition
                    ? _this.getAdditionalQueryCriteriaExpressionOptions(column)
                    : null;
                return Object.assign(Object.assign({}, column), { isOpen: column === _this.activeColumn, label: _this.rxRecordGridUtilsService.getColumnLabel(column.fieldDefinition, column.associationDescriptor), clickable: !lodash.isEmpty(column.actions), additionalQueryCriteriaExpressionOptions: additionalQueryCriteriaExpressionOptions });
            })
                .sort(function (a, b) { return a.index - b.index; });
            _this.getAvailableColumnsTree();
            return _this;
        }
        RecordGridColumnEditorModalComponent.prototype.ngAfterViewInit = function () {
            this.updateSelectedColumnsDropList();
            this.openActiveAction();
            var openGridColumnIndex = lodash.findIndex(this.columns, 'isOpen');
            if (openGridColumnIndex !== -1) {
                this.accordionTabEls.toArray()[openGridColumnIndex].nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            }
        };
        RecordGridColumnEditorModalComponent.prototype.isActionsColumn = function (fieldId) {
            return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;
        };
        RecordGridColumnEditorModalComponent.prototype.updateSelectedColumnsDropList = function () {
            this.updateColumnsDropList(this.draggableSelectedColumns, this.selectedColumnsDropList);
        };
        RecordGridColumnEditorModalComponent.prototype.updateAssociatedAvailableColumnsDropList = function () {
            this.updateColumnsDropList(this.draggableAssociatedAvailableColumns, this.associatedAvailableColumnsDropList);
        };
        RecordGridColumnEditorModalComponent.prototype.updateColumnsDropList = function (draggableColumnsList, dropList) {
            // Workaround: update due to injection bug with the adapt-accordion and adapt-tree
            var draggableColumns = draggableColumnsList.toArray();
            var columns = this.columns;
            draggableColumns.sort(function (column1, column2) {
                return columns.indexOf(column1.data) - columns.indexOf(column2.data);
            });
            dropList._dropListRef.withItems(draggableColumns.map(function (drag) {
                var dragRef = drag._dragRef;
                if (!dragRef._initialContainer) {
                    dragRef._initialContainer = dropList._dropListRef;
                }
                return drag._dragRef;
            }));
        };
        RecordGridColumnEditorModalComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RecordGridColumnEditorModalComponent.prototype.onDropInSelectedColumnsContainer = function (event) {
            if (event.previousContainer !== event.container && this.isColumnEditorAvailableColumn(event.item.data)) {
                this.addColumn(event.item.data, event.currentIndex);
            }
            else if (event.previousIndex !== event.currentIndex) {
                this.moveColumn(event.previousIndex, event.currentIndex);
            }
        };
        RecordGridColumnEditorModalComponent.prototype.onColumnCheckboxPropertyChange = function (value, column, columnProperty) {
            if (columnProperty.name === 'filterable' && column.fieldDefinition.namedListDefinition) {
                if (value) {
                    column.typeaheadKeystrokeCount = RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;
                }
                else {
                    column.typeaheadKeystrokeCount = null;
                    column.additionalQueryCriteria = null;
                }
            }
            this.markAsDirty();
        };
        RecordGridColumnEditorModalComponent.prototype.onColumnDragStarted = function () {
            this.updateSelectedColumnsDropList();
        };
        RecordGridColumnEditorModalComponent.prototype.onAssociatedAvailableColumnsDragStarted = function () {
            this.onColumnDragStarted();
            this.updateAssociatedAvailableColumnsDropList();
        };
        RecordGridColumnEditorModalComponent.prototype.isColumnEditorAvailableColumn = function (column) {
            return Boolean(column.fieldDefinitionName);
        };
        RecordGridColumnEditorModalComponent.prototype.moveColumn = function (fromIndex, toIndex) {
            this.markAsDirty();
            i8.moveItemInArray(this.columns, fromIndex, toIndex);
            this.updateColumnIndexes();
        };
        RecordGridColumnEditorModalComponent.prototype.removeColumn = function (index) {
            this.markAsDirty();
            var column = this.columns[index];
            this.columns.splice(index, 1);
            var associatedAvailableColumnsNode = column.associationDescriptor
                ? this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label)
                : this.availableColumnsTree[0];
            // variable can be null when we want remove column, but associations are not loaded yet
            if (associatedAvailableColumnsNode && associatedAvailableColumnsNode.data.allAvailableColumns) {
                associatedAvailableColumnsNode.data.allAvailableColumns.push(this.getColumnMetadata(column.fieldDefinition, column.associationDescriptor));
                this.updateAvailableColumnsTree();
            }
        };
        RecordGridColumnEditorModalComponent.prototype.getAssociatedAvailableColumnsNode = function (associationDescriptorLabel) {
            return this.availableColumnsTree.find(function (associatedAvailableColumn) { return associatedAvailableColumn.data.associationDescriptor &&
                associatedAvailableColumn.data.associationDescriptor.label === associationDescriptorLabel; });
        };
        RecordGridColumnEditorModalComponent.prototype.getAvailableColumnsTree = function () {
            var _this = this;
            var recordNode = {
                children: null,
                leaf: false,
                expanded: true,
                expandedIcon: 'd-icon-file_text',
                collapsedIcon: 'd-icon-file_text',
                label: this.definitionNameService.getDisplayName(this.recordDefinition.name),
                key: this.definitionNameService.getDisplayName(this.recordDefinition.name),
                data: {
                    allAvailableColumns: null
                }
            };
            if (!this.startedLoadingAssociationDescriptors) {
                this.startedLoadingAssociationDescriptors = true;
                this.rxRecordGridUtilsService
                    .getAssociationDescriptors(this.recordDefinition.name)
                    .subscribe(function (associationDescriptors) {
                    associationDescriptors = associationDescriptors.slice();
                    associationDescriptors.sort(function (descriptor1, descriptor2) { return descriptor1.label.localeCompare(descriptor2.label); });
                    _this.availableColumnsTree = associationDescriptors.map(function (associationDescriptor) {
                        return {
                            children: null,
                            leaf: false,
                            expandedIcon: 'd-icon-arrow_schema',
                            collapsedIcon: 'd-icon-arrow_schema',
                            label: associationDescriptor.label,
                            key: associationDescriptor.associationDefinition.name,
                            data: {
                                associationDescriptor: associationDescriptor,
                                allAvailableColumns: null
                            }
                        };
                    });
                    _this.availableColumnsTree.unshift(recordNode);
                    _this.availableColumnsTree.forEach(function (node) {
                        _this.onNodeExpand({ node: node });
                    });
                });
            }
        };
        RecordGridColumnEditorModalComponent.prototype.updateAvailableColumnsTree = function () {
            var _this = this;
            this.availableColumnsTree.forEach(function (node) {
                var allAvailableColumns = node.data.allAvailableColumns;
                if (allAvailableColumns) {
                    var availableColumns = _this.sortAvailableColumns(allAvailableColumns);
                    var definitionName_1 = node.data.associationDescriptor
                        ? node.data.associationDescriptor.associationDefinition.name
                        : _this.recordDefinition.name;
                    node.children = availableColumns.map(function (availableColumn) {
                        return {
                            children: null,
                            leaf: true,
                            label: availableColumn.fieldDefinitionName,
                            key: definitionName_1 + "-" + availableColumn.fieldDefinition.id,
                            data: {
                                availableColumn: availableColumn
                            }
                        };
                    });
                }
            });
        };
        RecordGridColumnEditorModalComponent.prototype.onNodeExpand = function (_a) {
            var _this = this;
            var node = _a.node;
            var associationDescriptor = node.data.associationDescriptor;
            if (associationDescriptor && !node.data.allAvailableColumns) {
                node.data.allAvailableColumns = [];
                this.rxRecordDefinitionCacheService
                    .getRecordDefinition(associationDescriptor.recordDefinitionName)
                    .subscribe(function (recordDefinition) {
                    node.data.allAvailableColumns = _this.getAvailableColumns(recordDefinition, associationDescriptor);
                    _this.updateAvailableColumnsTree();
                });
            }
            else if (!associationDescriptor) {
                node.data.allAvailableColumns = this.getAvailableColumns(this.recordDefinition);
                this.updateAvailableColumnsTree();
            }
        };
        RecordGridColumnEditorModalComponent.prototype.addColumn = function (availableColumn, insertIndex) {
            var _this = this;
            this.markAsDirty();
            if (!lodash.find(this.columns, function (column) { return column.fieldId === availableColumn.fieldId; })) {
                var additionalQueryCriteriaExpressionOptions = availableColumn.fieldDefinition.namedListDefinition
                    ? this.getAdditionalQueryCriteriaExpressionOptions(availableColumn)
                    : null;
                var newColumn = Object.assign(Object.assign({}, this.getColumnEditorColumnData(availableColumn)), { additionalQueryCriteriaExpressionOptions: additionalQueryCriteriaExpressionOptions });
                if (lodash.isNil(insertIndex)) {
                    this.columns.push(newColumn);
                }
                else {
                    this.columns.splice(insertIndex, 0, newColumn);
                }
                this.updateColumnIndexes();
                this.removeFromAvailableColumns(availableColumn);
                setTimeout(function () {
                    _this.accordionTabEls.toArray()[insertIndex !== null && insertIndex !== void 0 ? insertIndex : _this.columns.length - 1].nativeElement.scrollIntoView();
                });
            }
        };
        RecordGridColumnEditorModalComponent.prototype.getColumnEditorColumnData = function (availableColumn) {
            var _this = this;
            var column = {
                guid: this.rxGuidService.generate(),
                label: availableColumn.label,
                fieldId: availableColumn.fieldId,
                associationDescriptor: availableColumn.associationDescriptor,
                fieldDefinition: availableColumn.fieldDefinition,
                actions: [],
                title: availableColumn.fieldDefinitionName,
                isOpen: true
            };
            lodash.forEach(RX_RECORD_GRID.columnProperties, function (columnProperty) {
                if (columnProperty.name === 'sortable') {
                    column.sortable = availableColumn.isSortable;
                }
                else if (columnProperty.name === 'searchable') {
                    column.searchable = _this.rxRecordGridUtilsService.isSearchable(availableColumn.fieldDefinition, _this.recordDefinition);
                }
                else {
                    column[columnProperty.name] = columnProperty.defaultValue;
                }
            });
            return column;
        };
        RecordGridColumnEditorModalComponent.prototype.removeFromAvailableColumns = function (column) {
            if (column.associationDescriptor) {
                var associatedAvailableColumnsNode = this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label);
                lodash.remove(associatedAvailableColumnsNode.data.allAvailableColumns, column);
            }
            else {
                lodash.remove(this.availableColumnsTree[0].data.allAvailableColumns, column);
            }
            this.updateAvailableColumnsTree();
        };
        RecordGridColumnEditorModalComponent.prototype.sortAvailableColumns = function (availableColumns) {
            this.filteredColumns = availableColumns.sort(function (column1, column2) { return column1.fieldDefinitionName.localeCompare(column2.fieldDefinitionName); });
            return this.filteredColumns;
        };
        RecordGridColumnEditorModalComponent.prototype.getAvailableColumns = function (recordDefinition, associationDescriptor) {
            var _this = this;
            return recordDefinition.fieldDefinitions
                .map(function (fieldDefinition) { return _this.getColumnMetadata(fieldDefinition, associationDescriptor); })
                .filter(function (availableColumn) { return !lodash.find(_this.columns, function (column) { return column.fieldId === availableColumn.fieldId; }); });
        };
        RecordGridColumnEditorModalComponent.prototype.getColumnMetadata = function (fieldDefinition, associationDescriptor) {
            return {
                fieldDefinitionName: fieldDefinition.name,
                label: this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),
                fieldId: this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor),
                isSortable: this.rxFieldDefinitionService.isSortable(fieldDefinition),
                associationDescriptor: associationDescriptor,
                fieldDefinition: fieldDefinition
            };
        };
        RecordGridColumnEditorModalComponent.prototype.saveChanges = function () {
            var result = {
                columns: this.columns.map(function (column) {
                    var isFilterableColumnWithNamedList = column.filterable && column.fieldDefinition.namedListDefinition;
                    return {
                        actions: column.actions,
                        alignment: column.alignment,
                        fieldId: column.fieldId,
                        filterable: column.filterable,
                        filterType: column.filterType,
                        guid: column.guid,
                        index: column.index,
                        sortable: column.sortable,
                        searchable: column.searchable,
                        title: column.title,
                        visible: column.visible,
                        associationDescriptor: column.associationDescriptor,
                        fieldDefinition: column.fieldDefinition,
                        cellDisplayProperties: column.cellDisplayProperties,
                        namedFilterOptions: column.namedFilterOptions,
                        width: column.width,
                        wrapText: column.wrapText,
                        typeaheadKeystrokeCount: isFilterableColumnWithNamedList ? column.typeaheadKeystrokeCount : null,
                        additionalQueryCriteria: isFilterableColumnWithNamedList ? column.additionalQueryCriteria : null
                    };
                })
            };
            this.activeModalRef.close(result);
        };
        RecordGridColumnEditorModalComponent.prototype.trackByForColumns = function (index, column) {
            return column.fieldId;
        };
        RecordGridColumnEditorModalComponent.prototype.trackByForColumnProperties = function (index, columnProperty) {
            return columnProperty.name;
        };
        RecordGridColumnEditorModalComponent.prototype.isPropertyEditable = function (column, propertyName) {
            if (propertyName === 'searchable') {
                return (!this.isReadOnly && this.rxRecordGridUtilsService.isSearchable(column.fieldDefinition, this.recordDefinition));
            }
            else {
                return !this.isReadOnly;
            }
        };
        RecordGridColumnEditorModalComponent.prototype.updateColumnIndexes = function () {
            this.columns.forEach(function (column, index) {
                column.index = index;
            });
        };
        RecordGridColumnEditorModalComponent.prototype.openActiveAction = function () {
            var _this = this;
            if (this.activeColumn && this.activeActionIndex >= 0) {
                this.ngZone.runOutsideAngular(function () {
                    // timeout is required to let control set initial value
                    setTimeout(function () {
                        var listControl = _this.actionListControlComponents.find(function (control) { return control.value === _this.activeColumn.actions; });
                        if (listControl) {
                            listControl.focus({ actionIndex: _this.activeActionIndex });
                        }
                    });
                });
            }
        };
        RecordGridColumnEditorModalComponent.prototype.isTreeEmpty = function () {
            return lodash.every(this.availableColumnsTree, function (node) { return node.data.allAvailableColumns.length === 0; });
        };
        RecordGridColumnEditorModalComponent.prototype.openAdditionalQueryCriteriaExpressionEditor = function (column, control) {
            var _this = this;
            var namedListFilterExpressionConfigurator = new i1$3.NamedListFilterExpressionConfigurator(column.fieldDefinition, this.injector);
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'additionalQueryCriteria',
                    value: column.additionalQueryCriteria,
                    label: 'Additional named list filter'
                },
                isReadOnly: this.isReadOnly,
                expressionConfigurator: namedListFilterExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),
                        icon: 'd-icon-mathematical_function'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'),
                        icon: 'd-icon-file_o'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'),
                        icon: 'd-icon-file_o_gear'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'),
                        icon: 'd-icon-arrow_right_square_input'
                    }
                ]
            })
                .subscribe(function (expression) {
                column.additionalQueryCriteria = expression.value;
                control.value = expression.value;
                control.onWriteValue(expression.value);
                _this.markAsDirty();
            });
        };
        RecordGridColumnEditorModalComponent.prototype.getAdditionalQueryCriteriaExpressionOptions = function (column) {
            var namedListFilterExpressionConfigurator = new i1$3.NamedListFilterExpressionConfigurator(column.fieldDefinition, this.injector);
            return {
                label: 'Additional named list filter',
                tooltip: new i1$2.Tooltip('Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'),
                dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),
                operators: namedListFilterExpressionConfigurator.getOperators()
            };
        };
        return RecordGridColumnEditorModalComponent;
    }(i1$6.RxModalClass));
    RecordGridColumnEditorModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridColumnEditorModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i1__namespace$6.RxModalService }, { token: i1__namespace$1.RxDefinitionNameService }, { token: RxRecordGridUtilsService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i2__namespace$1.RxGuidService }, { token: i0__namespace.NgZone }, { token: i0__namespace.Injector }, { token: i2__namespace.TranslateService }, { token: i2__namespace$5.RxExpressionEditorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridColumnEditorModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridColumnEditorModalComponent, selector: "ng-component", viewQueries: [{ propertyName: "selectedColumnsDropList", first: true, predicate: ["selectedColumnsDropList"], descendants: true, read: i8.CdkDropList }, { propertyName: "associatedAvailableColumnsDropList", first: true, predicate: ["associatedAvailableColumnsDropList"], descendants: true, read: i8.CdkDropList }, { propertyName: "draggableSelectedColumns", predicate: ["draggableSelectedColumn"], descendants: true, read: i8.CdkDrag }, { propertyName: "draggableAssociatedAvailableColumns", predicate: ["draggableAssociatedAvailableColumn"], descendants: true, read: i8.CdkDrag }, { propertyName: "actionListControlComponents", predicate: i1$3.ActionListControlComponent, descendants: true }, { propertyName: "accordionTabEls", predicate: i1.AdaptAccordionTabComponent, descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block d-flex flex-column\">\n          <div\n            *ngIf=\"!isTreeEmpty()\"\n            #associatedAvailableColumnsDropList=\"cdkDropList\"\n            cdkDropList\n            [cdkDropListData]=\"filteredColumns\"\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selectedColumnsDropList']\"\n          >\n            <adapt-tree\n              [value]=\"availableColumnsTree\"\n              (onNodeExpand)=\"onNodeExpand($event)\"\n              filter=\"true\"\n              [wrap]=\"treeWrap\"\n            >\n              <ng-template let-node adaptTreeNodeTemplate>\n                <span *ngIf=\"!node.data.availableColumn\" [title]=\"node.label\">\n                  {{ node.label }}\n                </span>\n\n                <div\n                  *ngIf=\"node.data.availableColumn\"\n                  class=\"rx-tree-draggable-node\"\n                  #draggableAssociatedAvailableColumn\n                  cdkDrag\n                  [cdkDragData]=\"node.data.availableColumn\"\n                  (cdkDragStarted)=\"onAssociatedAvailableColumnsDragStarted()\"\n                >\n                  <div (dblclick)=\"addColumn(node.data.availableColumn)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addColumn(node.data.availableColumn)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ node.label }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <div *ngIf=\"isTreeEmpty()\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n            <adapt-empty-state\n              class=\"w-100\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.empty-state.message'\n                  | translate\n              }}\"\n              type=\"search\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div\n        id=\"selectedColumnsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"columns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n        #selectedColumnsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"false\" *ngIf=\"columns.length\">\n          <div\n            *ngFor=\"\n              let column of columns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByForColumns\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"column\"\n            [cdkDragDisabled]=\"isReadOnly\"\n            (cdkDragStarted)=\"onColumnDragStarted()\"\n            #draggableSelectedColumn\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.label\" rx-id=\"card-title\">\n                      {{ column.label }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      *ngIf=\"!isActionsColumn(column.fieldId)\"\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeColumn(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <ng-container *ngIf=\"column.isOpen\">\n                <div\n                  *ngIf=\"\n                    isActionsColumn(column.fieldId);\n                    then actionsColumnEditorTemplate;\n                    else dataColumnEditorTemplate\n                  \"\n                ></div>\n              </ng-container>\n\n              <ng-template #dataColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <div class=\"d-flex flex-wrap\">\n                  <ng-container *ngFor=\"let columnProperty of columnProperties; trackBy: trackByForColumnProperties\">\n                    <div\n                      class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                      *ngIf=\"\n                        ['visible', 'sortable', 'filterable', 'searchable', 'wrapText'].includes(columnProperty.name)\n                      \"\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column[columnProperty.name]\"\n                          (ngModelChange)=\"onColumnCheckboxPropertyChange($event, column, columnProperty)\"\n                          [disabled]=\"!isPropertyEditable(column, columnProperty.name)\"\n                        />\n\n                        <span class=\"checkbox__item\">{{ columnProperty.label }}</span>\n                      </label>\n\n                      <span class=\"ml-1\" *ngIf=\"columnProperty.tooltip\">\n                        <span class=\"letter-space\"></span>\n                        <adapt-icon\n                          [name]=\"'question_circle_o'\"\n                          [adaptPopover]=\"columnProperty.tooltip.content\"\n                          appendToBody=\"true\"\n                        >\n                        </adapt-icon>\n                      </span>\n                    </div>\n                    <rx-column-editor-alignment\n                      *ngIf=\"columnProperty.name === 'alignment'\"\n                      [isReadOnly]=\"isReadOnly\"\n                      [column]=\"column\"\n                      [columnProperty]=\"columnProperty\"\n                      class=\"flex-fill\"\n                      [ngModel]=\"column.alignment\"\n                      (ngModelChange)=\"markAsDirty()\"\n                      ngDefaultControl\n                    ></rx-column-editor-alignment>\n                  </ng-container>\n                </div>\n\n                <div class=\"d-flex flex-row\">\n                  <rx-stepper-with-units-form-control\n                    class=\"d-block col-5 p-0\"\n                    [options]=\"columnWidthPropertyOptions\"\n                    [(ngModel)]=\"column.width\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-stepper-with-units-form-control>\n\n                  <rx-select-form-control\n                    *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                    class=\"d-block col-5 p-0 pb-2 pl-5\"\n                    [options]=\"typeaheadKeystrokeCountOptions\"\n                    [(ngModel)]=\"column.typeaheadKeystrokeCount\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [disabled]=\"isReadOnly\"\n                  ></rx-select-form-control>\n                </div>\n\n                <rx-expression-form-control\n                  #additionalQueryCriteriaExpression\n                  *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                  rx-id=\"additional-query-criteria-expression\"\n                  class=\"d-block p-0 pb-2\"\n                  [options]=\"column.additionalQueryCriteriaExpressionOptions\"\n                  [(ngModel)]=\"column.additionalQueryCriteria\"\n                  (events)=\"openAdditionalQueryCriteriaExpressionEditor(column, additionalQueryCriteriaExpression)\"\n                  [disabled]=\"isReadOnly\"\n                ></rx-expression-form-control>\n\n                <rx-cell-display-properties\n                  class=\"d-block pb-2\"\n                  [columns]=\"columns\"\n                  [columnName]=\"column.title\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.cellDisplayProperties\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-cell-display-properties>\n\n                <rx-named-filter-options\n                  class=\"d-block pb-2\"\n                  [column]=\"column\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.namedFilterOptions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.named-filter-options-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-named-filter-options>\n\n                <rx-action-list-control\n                  class=\"d-block\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.actions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-actions-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-action-list-control>\n              </ng-template>\n\n              <ng-template #actionsColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field d-block form-group\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <rx-stepper-with-units-form-control\n                  class=\"d-block col-5 p-0\"\n                  [options]=\"columnWidthPropertyOptions\"\n                  [(ngModel)]=\"column.width\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-stepper-with-units-form-control>\n\n                <div class=\"d-flex flex-wrap\">\n                  <div\n                    class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                    *ngFor=\"let actionsColumnProperty of actionsColumnProperties; trackBy: trackByForColumnProperties\"\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"column[actionsColumnProperty.name]\"\n                        (ngModelChange)=\"markAsDirty()\"\n                        [disabled]=\"!isPropertyEditable(column, actionsColumnProperty.name)\"\n                      />\n\n                      <span class=\"checkbox__item\">{{ actionsColumnProperty.label }}</span>\n                    </label>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!columns.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.empty-state.message'\n              | translate\n          }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}.rx-record-grid-column-editor__checkbox-field{flex-basis:20%;min-width:140px}.rx-record-grid-column-editor__checkbox-field+.rx-record-grid-column-editor__checkbox-field{margin-top:calc(.5rem + 1px)!important}\n"], components: [{ type: i1__namespace.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: ColumnEditorAlignmentComponent, selector: "rx-column-editor-alignment", inputs: ["column", "isReadOnly", "columnProperty"] }, { type: i2__namespace$5.StepperWithUnitsFormControlComponent, selector: "rx-stepper-with-units-form-control", inputs: ["options"] }, { type: i2__namespace$5.SelectFormControlComponent, selector: "rx-select-form-control", inputs: ["options", "appendToBody", "formControl"] }, { type: i2__namespace$5.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: RecordGridCellDisplayPropertiesComponent, selector: "rx-cell-display-properties", inputs: ["columnName", "columns"] }, { type: RecordGridNamedFilterOptionsComponent, selector: "rx-named-filter-options", inputs: ["column", "tooltip"] }, { type: i1__namespace$3.ActionListControlComponent, selector: "rx-action-list-control", inputs: ["options", "tooltip"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i1__namespace.AdaptTreeNodeTemplateDirective, selector: "[adaptTreeNodeTemplate]", inputs: ["adaptTreeNodeTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i2__namespace$3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], pipes: { "translate": i2__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridColumnEditorModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: './record-grid-column-editor-modal.component.html',
                        styleUrls: ['./record-grid-column-editor-modal.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i1__namespace$6.RxModalService }, { type: i1__namespace$1.RxDefinitionNameService }, { type: RxRecordGridUtilsService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i2__namespace$1.RxGuidService }, { type: i0__namespace.NgZone }, { type: i0__namespace.Injector }, { type: i2__namespace.TranslateService }, { type: i2__namespace$5.RxExpressionEditorService }]; }, propDecorators: { draggableSelectedColumns: [{
                    type: i0.ViewChildren,
                    args: ['draggableSelectedColumn', { read: i8.CdkDrag }]
                }], selectedColumnsDropList: [{
                    type: i0.ViewChild,
                    args: ['selectedColumnsDropList', { read: i8.CdkDropList }]
                }], draggableAssociatedAvailableColumns: [{
                    type: i0.ViewChildren,
                    args: ['draggableAssociatedAvailableColumn', { read: i8.CdkDrag }]
                }], actionListControlComponents: [{
                    type: i0.ViewChildren,
                    args: [i1$3.ActionListControlComponent]
                }], associatedAvailableColumnsDropList: [{
                    type: i0.ViewChild,
                    args: ['associatedAvailableColumnsDropList', { read: i8.CdkDropList }]
                }], accordionTabEls: [{
                    type: i0.ViewChildren,
                    args: [i1.AdaptAccordionTabComponent, { read: i0.ElementRef }]
                }] } });

    exports.ColumnSortDirection = void 0;
    (function (ColumnSortDirection) {
        ColumnSortDirection["Asc"] = "asc";
        ColumnSortDirection["Desc"] = "desc";
    })(exports.ColumnSortDirection || (exports.ColumnSortDirection = {}));

    var RxRecordGridConfigUtilsService = /** @class */ (function () {
        function RxRecordGridConfigUtilsService(rxJsonParserService) {
            this.rxJsonParserService = rxJsonParserService;
        }
        RxRecordGridConfigUtilsService.prototype.parseConfigString = function (str) {
            if (!str) {
                return false;
            }
            if (lodash.includes(['1', 'true'], str)) {
                return true;
            }
            if (lodash.includes(['0', 'false'], str)) {
                return false;
            }
            if (lodash.isString(str)) {
                return this.rxJsonParserService.tryParseJson(str, false);
            }
            if (lodash.isObject(str)) {
                return str;
            }
            return lodash.isBoolean(str) ? str : false;
        };
        RxRecordGridConfigUtilsService.prototype.getBooleanValue = function (str) {
            return this.parseConfigString(str);
        };
        RxRecordGridConfigUtilsService.prototype.getColumnSortOrder = function (direction) {
            return direction === exports.ColumnSortDirection.Asc ? i1$7.SortOrder.Asc : i1$7.SortOrder.Desc;
        };
        RxRecordGridConfigUtilsService.prototype.getColumnSortDirection = function (sortOrder) {
            return sortOrder === i1$7.SortOrder.Asc ? exports.ColumnSortDirection.Asc : exports.ColumnSortDirection.Desc;
        };
        RxRecordGridConfigUtilsService.prototype.configDeepClone = function (configuration) {
            var configClone = lodash.cloneDeep(lodash.omit(configuration, ['columns']));
            var columns = this.columnsDeepClone(configuration.columns);
            return lodash.assign(configClone, { columns: columns });
        };
        RxRecordGridConfigUtilsService.prototype.columnsDeepClone = function (columns) {
            return lodash.map(columns, this.columnDeepClone);
        };
        RxRecordGridConfigUtilsService.prototype.columnDeepClone = function (column) {
            var columnClone = lodash.cloneDeep(lodash.omit(column, ['cellTemplate']));
            return lodash.assign(columnClone, { cellTemplate: column.cellTemplate });
        };
        return RxRecordGridConfigUtilsService;
    }());
    RxRecordGridConfigUtilsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfigUtilsService, deps: [{ token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridConfigUtilsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfigUtilsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfigUtilsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxJsonParserService }]; } });

    var RecordGridColumnEditorControlComponent = /** @class */ (function (_super) {
        __extends(RecordGridColumnEditorControlComponent, _super);
        function RecordGridColumnEditorControlComponent(rxModalService, rxFieldDefinitionService, rxRecordGridConfigUtilsService, rxRecordGridUtilsService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.rxFieldDefinitionService = rxFieldDefinitionService;
            _this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.updateColumnsSubject = new rxjs.BehaviorSubject([]);
            _this.columns$ = _this.updateColumnsSubject.pipe(operators.switchMap(function (inspectorColumns) { return rxjs.forkJoin(inspectorColumns.map(function (inspectorColumn) { return rxjs.forkJoin([
                _this.rxRecordGridUtilsService.getAssociationDescriptor(inspectorColumn.fieldId, _this.options.recordDefinition),
                _this.rxRecordGridUtilsService.getFieldDefinition(inspectorColumn.fieldId, _this.options.recordDefinition)
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), associationDescriptor = _c[0], fieldDefinition = _c[1];
                return ({
                    associationDescriptor: associationDescriptor,
                    fieldDefinition: fieldDefinition,
                    inspectorColumn: inspectorColumn
                });
            })); })).pipe(operators.defaultIfEmpty([]), operators.map(function (columnsData) { return columnsData.map(function (columnData) {
                var _a;
                return Object.assign(Object.assign({}, columnData.inspectorColumn), { fieldDefinition: columnData.fieldDefinition, associationDescriptor: columnData.associationDescriptor, title: (_a = columnData.inspectorColumn.title) === null || _a === void 0 ? void 0 : _a.trim(), searchable: lodash.has(columnData.inspectorColumn, 'searchable')
                        ? _this.rxRecordGridConfigUtilsService.getBooleanValue(columnData.inspectorColumn.searchable)
                        : columnData.inspectorColumn.filterable &&
                            _this.rxRecordGridUtilsService.isSearchable(columnData.fieldDefinition, _this.options.recordDefinition), fallbackTitle: "[" + columnData.fieldDefinition.name + "]" });
            }); }), operators.shareReplay(1)); }));
            return _this;
        }
        RecordGridColumnEditorControlComponent.prototype.ngOnChanges = function (changes) {
            var _a;
            if (((_a = changes.options) === null || _a === void 0 ? void 0 : _a.previousValue) &&
                changes.options.currentValue.recordDefinition.name !==
                    changes.options.previousValue.recordDefinition.name) {
                this.updateColumnsSubject.next(this.value);
            }
        };
        RecordGridColumnEditorControlComponent.prototype.onWriteValue = function (inspectorColumns) {
            this.updateColumnsSubject.next(inspectorColumns);
        };
        RecordGridColumnEditorControlComponent.prototype.removeColumn = function (columnData) {
            this.updateValue(this.value.filter(function (column) { return column.fieldId !== columnData.fieldId; }));
        };
        RecordGridColumnEditorControlComponent.prototype.updateValue = function (columns) {
            this.value = columns;
            this.onWriteValue(columns);
        };
        RecordGridColumnEditorControlComponent.prototype.openEditor = function (columnGuid, activeActionIndex) {
            var _this = this;
            this.columns$.pipe(operators.take(1)).subscribe(function (columns) {
                var data = {
                    isReadOnly: _this.isDisabled,
                    columns: columns,
                    activeColumn: columns.find(function (item) { return item.guid === columnGuid; }),
                    recordDefinition: _this.options.recordDefinition,
                    activeActionIndex: activeActionIndex
                };
                _this.rxModalService
                    .openModal({
                    title: 'Edit grid columns',
                    content: RecordGridColumnEditorModalComponent,
                    data: {
                        columnParams: data
                    },
                    size: i1$1.OpenViewActionModalSize.Large,
                    testID: 'edit-grid-columns'
                })
                    .then(function (result) {
                    if (result && result.columns) {
                        _this.updateValue(result.columns);
                    }
                })
                    .catch(lodash.noop);
            });
        };
        RecordGridColumnEditorControlComponent.prototype.focus = function (data) {
            this.openEditor(data === null || data === void 0 ? void 0 : data.columnGuid, data === null || data === void 0 ? void 0 : data.actionIndex);
        };
        RecordGridColumnEditorControlComponent.prototype.getColumnResourceTypeName = function (column) {
            var resourceType = i1$4.RX_RECORD_DEFINITION.resourceTypesByFullName[column.fieldDefinition.resourceType];
            return lodash.get(i1$4.RX_RECORD_DEFINITION.dataTypes[resourceType], 'displayName', '');
        };
        RecordGridColumnEditorControlComponent.prototype.getSortedColumns = function (columns) {
            return columns.sort(function (column1, column2) { return column1.index - column2.index; });
        };
        RecordGridColumnEditorControlComponent.prototype.trackByForColumns = function (index, column) {
            return column.fieldId;
        };
        RecordGridColumnEditorControlComponent.prototype.isActionsColumn = function (fieldId) {
            return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;
        };
        RecordGridColumnEditorControlComponent.prototype.ngOnDestroy = function () {
            this.updateColumnsSubject.complete();
        };
        return RecordGridColumnEditorControlComponent;
    }(i2.ValueAccessor));
    RecordGridColumnEditorControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridColumnEditorControlComponent, deps: [{ token: i1__namespace$6.RxModalService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: RxRecordGridConfigUtilsService }, { token: RxRecordGridUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridColumnEditorControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridColumnEditorControlComponent, selector: "rx-record-grid-column-editor", inputs: { options: "options" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridColumnEditorControlComponent,
                multi: true
            }
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<adapt-button btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit grid columns\n</adapt-button>\n\n<div *ngIf=\"columns$ | async as columns\">\n  <div rx-id=\"columns\">\n    <span *ngIf=\"columns.length === 0\" class=\"text-tertiary\"> No grid columns added. </span>\n  </div>\n\n  <div class=\"rx-selected-column\" *ngFor=\"let column of getSortedColumns(columns); trackBy: trackByForColumns\">\n    <div class=\"rx-selected-column__header-container\">\n      <span\n        class=\"rx-selected-column__header-title\"\n        rx-id=\"card-title\"\n        [ngClass]=\"{ 'd-icon-left-arrow_schema': column.associationDescriptor }\"\n        [title]=\"column.title\"\n      >\n        {{ column.title || column.fallbackTitle }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        (click)=\"openEditor(column.guid)\"\n        *ngIf=\"!isDisabled\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-column\"\n        (click)=\"removeColumn(column)\"\n        *ngIf=\"!isActionsColumn(column.fieldId) && !isDisabled\"\n      ></button>\n    </div>\n\n    <div class=\"rx-column-type\" rx-id=\"column-type\">\n      {{ getColumnResourceTypeName(column) }}\n      <span *ngIf=\"column.associationDescriptor\">\u2013 {{ column.associationDescriptor.label }}</span>\n    </div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-selected-column{margin-bottom:5px;border:1px solid #d6d7d8;border-radius:2px;padding:5px 10px;word-break:break-all;font-weight:var(--font-weight-bold)}.rx-selected-column__header-container{display:flex;margin-bottom:5px}.rx-selected-column__header-title{flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;font-size:14px}.rx-column-type{color:#959899;font-size:10px;overflow:hidden;text-overflow:ellipsis}.d-icon-cross,.d-icon-left-pencil{cursor:pointer}.d-icon-cross:not(:hover),.d-icon-left-pencil:not(:hover){color:#313538}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridColumnEditorControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-column-editor',
                        templateUrl: './record-grid-column-editor-control.component.html',
                        styleUrls: ['./record-grid-column-editor-control.component.scss'],
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridColumnEditorControlComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxModalService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: RxRecordGridConfigUtilsService }, { type: RxRecordGridUtilsService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var RxRecordGridAdvancedFilterValue = /** @class */ (function () {
        function RxRecordGridAdvancedFilterValue(value, namedOptions) {
            if (namedOptions === void 0) { namedOptions = []; }
            this.namedOptions = [];
            this.filterValue = value;
            if (Array.isArray(namedOptions)) {
                this.namedOptions = namedOptions;
            }
        }
        Object.defineProperty(RxRecordGridAdvancedFilterValue.prototype, "length", {
            get: function () {
                return ((Array.isArray(this.filterValue) ? this.filterValue.length : lodash.isNil(this.filterValue) ? 0 : 1) +
                    this.namedOptions.length);
            },
            enumerable: false,
            configurable: true
        });
        RxRecordGridAdvancedFilterValue.isEmpty = function (item) {
            return item instanceof RxRecordGridAdvancedFilterValue && !item.length;
        };
        RxRecordGridAdvancedFilterValue.isEmptyWithRange = function (item) {
            return (item instanceof RxRecordGridAdvancedFilterValue &&
                !item.namedOptions.length &&
                i1.AdvancedFilterDataTypesConfigsService.isEmptyOnEmptyValues(item.filterValue));
        };
        return RxRecordGridAdvancedFilterValue;
    }());

    var RxNamedFilterOptionsListComponent = /** @class */ (function () {
        function RxNamedFilterOptionsListComponent() {
            this.defaultFilterValue = [];
            this.namedFilterOptionsChange = new i0.EventEmitter();
            this.namedFilterOptionsModel = {};
        }
        Object.defineProperty(RxNamedFilterOptionsListComponent.prototype, "filterValue", {
            get: function () {
                return this._filterValue;
            },
            set: function (values) {
                var _this = this;
                var ids = values === null || values === void 0 ? void 0 : values.namedOptions;
                this._filterValue = values;
                Object.keys(this.namedFilterOptionsModel).forEach(function (key) { return (_this.namedFilterOptionsModel[key] = false); });
                ids === null || ids === void 0 ? void 0 : ids.forEach(function (id) { return (_this.namedFilterOptionsModel[id] = true); });
            },
            enumerable: false,
            configurable: true
        });
        RxNamedFilterOptionsListComponent.prototype.trackByOptionGuid = function (index, option) {
            return option['guid'];
        };
        RxNamedFilterOptionsListComponent.prototype.onNamedFilterOptionChange = function () {
            var _a, _b;
            var selectedGuids = this.getSelectedNamedOptionsIds();
            this.namedFilterOptionsChange.emit(selectedGuids);
            var value = new RxRecordGridAdvancedFilterValue((_b = (_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.filterValue) !== null && _b !== void 0 ? _b : this.defaultFilterValue, selectedGuids);
            this.filterControlsComponent.onFilterOptionModelChange(value);
        };
        RxNamedFilterOptionsListComponent.prototype.getSelectedNamedOptionsIds = function () {
            return lodash.reduce(this.namedFilterOptionsModel, function (result, value, id) {
                if (value) {
                    result.push(id);
                }
                return result;
            }, []);
        };
        return RxNamedFilterOptionsListComponent;
    }());
    RxNamedFilterOptionsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxNamedFilterOptionsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: { namedFilterOptions: "namedFilterOptions", filterOption: "filterOption", filterValue: "filterValue", filterControlsComponent: "filterControlsComponent", defaultFilterValue: "defaultFilterValue" }, outputs: { namedFilterOptionsChange: "namedFilterOptionsChange" }, ngImport: i0__namespace, template: "<div class=\"options-wrapper\" *ngIf=\"namedFilterOptions?.length\">\n  <adapt-rx-checkbox\n    class=\"dropdown-item p-0 text-break\"\n    *ngFor=\"let option of namedFilterOptions; trackBy: trackByOptionGuid\"\n    [label]=\"option.title\"\n    [(ngModel)]=\"namedFilterOptionsModel[option.guid]\"\n    (ngModelChange)=\"onNamedFilterOptionChange()\"\n  ></adapt-rx-checkbox>\n</div>\n", styles: [".options-wrapper{margin-top:-1.5rem;margin-bottom:-2px}adapt-rx-checkbox:not(:last-child){margin-bottom:14px}.dropdown-item{white-space:normal}\n"], components: [{ type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-named-filter-options-list',
                        templateUrl: './named-filter-options-list.component.html',
                        styleUrls: ['./named-filter-options-list.component.scss']
                    }]
            }], propDecorators: { namedFilterOptions: [{
                    type: i0.Input
                }], filterOption: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], defaultFilterValue: [{
                    type: i0.Input
                }], namedFilterOptionsChange: [{
                    type: i0.Output
                }] } });

    var RxBooleanFilterComponent = /** @class */ (function () {
        function RxBooleanFilterComponent() {
            this.namedFilterOptions = [];
            this.isRequired = false;
        }
        Object.defineProperty(RxBooleanFilterComponent.prototype, "filterValue", {
            get: function () {
                return this._filterValue;
            },
            set: function (values) {
                var selectOptions = this.getSelectOptions();
                this._filterValue = values;
                this.selectedValues = (values === null || values === void 0 ? void 0 : values.filterValue)
                    ? values.filterValue.map(function (value) { return lodash.find(selectOptions, { id: value }); })
                    : [];
            },
            enumerable: false,
            configurable: true
        });
        RxBooleanFilterComponent.prototype.selectOptionFormatter = function (option) {
            return option.name;
        };
        RxBooleanFilterComponent.prototype.onValueChange = function (values) {
            var _a;
            var filterValue = values.map(function (value) { return value.id; });
            this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(filterValue, (_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.namedOptions));
        };
        RxBooleanFilterComponent.prototype.getSelectOptions = function () {
            var _a;
            return ((_a = this.filterOption.data) === null || _a === void 0 ? void 0 : _a.selectOptions) || [];
        };
        RxBooleanFilterComponent.prototype.onValueChangeRequired = function (model) {
            var _a, _b, _c;
            var oldModelValue = Array.isArray((_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.filterValue)
                ? this.filterValue.filterValue[0]
                : (_b = this.filterValue) === null || _b === void 0 ? void 0 : _b.filterValue;
            this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(model === oldModelValue ? null : [model], (_c = this.filterValue) === null || _c === void 0 ? void 0 : _c.namedOptions));
        };
        return RxBooleanFilterComponent;
    }());
    RxBooleanFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxBooleanFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxBooleanFilterComponent, selector: "rx-boolean-filter", inputs: { filterOption: "filterOption", filterValue: "filterValue", filterControlsComponent: "filterControlsComponent", namedFilterOptions: "namedFilterOptions", isRequired: "isRequired" }, ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  *ngIf=\"!isRequired; else inputsForBooleanTypeTemplate\"\n  class=\"advanced-filter__rx-select advanced-filter__rx-select_simple\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [optionFormatter]=\"selectOptionFormatter\"\n  [options]=\"getSelectOptions()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectedValues\"\n  (ngModelChange)=\"onValueChange($event)\"\n>\n</adapt-rx-select>\n\n<ng-template #inputsForBooleanTypeTemplate>\n  <adapt-rx-radiobutton-group\n    class=\"advanced-filter__radiobutton-group\"\n    [ngModel]=\"filterValue ? filterValue.filterValue[0] : null\"\n    (ngModelChange)=\"onValueChangeRequired($event)\"\n  >\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"false\"\n      [label]=\"filterControlsComponent.texts.configsTexts.falseLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_false'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(false)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"true\"\n      [label]=\"filterControlsComponent.texts.configsTexts.trueLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_true'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(true)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      *ngIf=\"filterControlsComponent.getBooleanTypeOptionParams().hasBlankValue\"\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"filterControlsComponent.getBooleanTypeBlankValue()\"\n      [label]=\"filterControlsComponent.texts.configsTexts.blankLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_blank'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(filterControlsComponent.getBooleanTypeBlankValue())\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n</ng-template>\n", components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-boolean-filter',
                        templateUrl: './boolean-filter.component.html'
                    }]
            }], propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }], isRequired: [{
                    type: i0.Input
                }] } });

    var RxStringWithTypeAheadFilterComponent = /** @class */ (function () {
        function RxStringWithTypeAheadFilterComponent(rxNamedListService, rxNamedListDefinitionService, rxFeatureService) {
            var _this = this;
            this.rxNamedListService = rxNamedListService;
            this.rxNamedListDefinitionService = rxNamedListDefinitionService;
            this.rxFeatureService = rxFeatureService;
            this.namedFilterOptions = [];
            this.selectedValues = [];
            this.isSearchInProgress = false;
            this.search = function (text$) { return text$.pipe(operators.debounceTime(250), operators.distinctUntilChanged(), operators.tap(function () {
                _this.isSearchInProgress = true;
            }), operators.switchMap(function (term) { return _this.getSelectOptions(term); }), operators.finalize(function () {
                _this.isSearchInProgress = false;
            })); };
        }
        Object.defineProperty(RxStringWithTypeAheadFilterComponent.prototype, "filterValue", {
            get: function () {
                return this._filterValue;
            },
            set: function (values) {
                this._filterValue = values;
                this.selectedValues = (values === null || values === void 0 ? void 0 : values.filterValue) || [];
            },
            enumerable: false,
            configurable: true
        });
        RxStringWithTypeAheadFilterComponent.prototype.ngOnInit = function () {
            var _a;
            this.namedListDefinition$ = this.rxNamedListDefinitionService
                .get(this.filterOption.data.namedListDefinition)
                .pipe(operators.shareReplay(1));
            this.typeaheadKeystrokeCount =
                (_a = this.filterOption.data.typeaheadKeystrokeCount) !== null && _a !== void 0 ? _a : RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;
        };
        RxStringWithTypeAheadFilterComponent.prototype.onValueChange = function (selectedValues) {
            var _this = this;
            var _a;
            this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(selectedValues.map(function (selectedValue) { return _this.rxNamedListService.isNamedListOption(selectedValue)
                ? selectedValue
                : { displayValue: undefined, value: selectedValue, title: '', contextualFields: [] }; }), (_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.namedOptions));
        };
        RxStringWithTypeAheadFilterComponent.prototype.getSelectOptions = function (term) {
            var _this = this;
            return term.length >= this.typeaheadKeystrokeCount
                ? this.namedListDefinition$.pipe(operators.switchMap(function (namedListDefinition) { return _this.rxNamedListService
                    .getOptionPageByLabelOrValue(namedListDefinition, term, _this.filterOption.data.additionalQueryCriteria)
                    .pipe(operators.map(function (optionPage) { return optionPage.options; })); }))
                : rxjs.of([]);
        };
        return RxStringWithTypeAheadFilterComponent;
    }());
    RxStringWithTypeAheadFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterComponent, deps: [{ token: i2__namespace$6.RxNamedListService }, { token: i2__namespace$6.RxNamedListDefinitionService }, { token: i1__namespace$1.RxFeatureService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxStringWithTypeAheadFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxStringWithTypeAheadFilterComponent, selector: "rx-string-with-type-ahead-filter", inputs: { filterOption: "filterOption", filterControlsComponent: "filterControlsComponent", filterValue: "filterValue", namedFilterOptions: "namedFilterOptions" }, ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div style=\"position: relative\">\n  <adapt-tag-field\n    [search]=\"search\"\n    [ngModel]=\"selectedValues\"\n    (ngModelChange)=\"onValueChange($event)\"\n    [replaceModelOnWrite]=\"true\"\n    [selectItemTemplate]=\"selectItemTemplate\"\n    [tagTemplate]=\"tagTemplate\"\n    [openDropdownOnFocus]=\"typeaheadKeystrokeCount === 0\"\n    [placeholder]=\"'com.bmc.arsys.rx.client.view-components.record-grid.filters.typeahead.placeholder' | translate\"\n  ></adapt-tag-field>\n  <div *ngIf=\"isSearchInProgress\" class=\"position-absolute text-info inline-loader\">\n    <div class=\"d-icon-circle_75_o animated infinite spin-360 transition-out slow\"></div>\n  </div>\n</div>\n\n<ng-template #tagTemplate let-tag=\"tag\">\n  {{ tag.displayValue ?? tag.value }}\n</ng-template>\n\n<ng-template #selectItemTemplate let-result=\"result\">\n  {{ result.displayValue ?? result.value }}\n\n  <div\n    *ngIf=\"result.contextualFields\"\n    class=\"text-secondary selection-item-contextual-fields text-truncate\"\n    [title]=\"result.title\"\n  >\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of result.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n", styles: [".inline-loader{z-index:10;right:15px;top:8px}.selection-item-contextual-fields{max-width:300px}\n"], components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptMetatagComponent, selector: "adapt-metatag, adapt-tag-field", inputs: ["prefix", "suffix", "maxTagLength", "truncateConfig", "id", "testID", "name", "ariaLabel", "search", "maxHeight", "suppressManual", "label", "placeholder", "mainErrorText", "warningStateText", "width", "errorCheck", "warningCheck", "selectItemTemplate", "tagTemplate", "replaceModelOnWrite", "delimiterSymbol", "popupClass", "disabledInput", "openDropdownOnFocus", "selectItemFormatter", "fullWidthEdit", "tagStyleFormatter"], outputs: ["focus", "blur", "removeTag", "addTag", "initTagEditing"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-string-with-type-ahead-filter',
                        templateUrl: './string-with-type-ahead-filter.component.html',
                        styleUrls: ['./string-with-type-ahead-filter.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$6.RxNamedListService }, { type: i2__namespace$6.RxNamedListDefinitionService }, { type: i1__namespace$1.RxFeatureService }]; }, propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }] } });

    var RxStringFilterComponent = /** @class */ (function () {
        function RxStringFilterComponent() {
            this.namedFilterOptions = [];
        }
        RxStringFilterComponent.prototype.onStringTypeFilterOptionModelChange = function (model, tagField) {
            var _a, _b;
            var newModel = model.filter(function (tag) { return !i1.isEmptyOrWhitespace(i1.getTagText(tag)); });
            if (newModel.length < model.length && lodash.isEqual(newModel, ((_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.filterValue) || [])) {
                tagField.writeValue(newModel);
            }
            else {
                this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(newModel, (_b = this.filterValue) === null || _b === void 0 ? void 0 : _b.namedOptions));
            }
        };
        return RxStringFilterComponent;
    }());
    RxStringFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxStringFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxStringFilterComponent, selector: "rx-string-filter", inputs: { filterOption: "filterOption", filterValue: "filterValue", filterControlsComponent: "filterControlsComponent", namedFilterOptions: "namedFilterOptions" }, ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-tag-field\n  #stringDataTypeTagField\n  mainCls=\"advanced-filter__string-tag-field\"\n  [ngModel]=\"filterValue?.filterValue || []\"\n  popupClass=\"advanced-filter__typeahead-window\"\n  [testID]=\"filterControlsComponent.testID\"\n  (ngModelChange)=\"onStringTypeFilterOptionModelChange($event, stringDataTypeTagField)\"\n  [delimiterSymbol]=\"null\"\n  [placeholder]=\"filterControlsComponent.texts.stringTypeTagFieldPlaceholder\"\n  [replaceModelOnWrite]=\"true\"\n  [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  [hideLabel]=\"true\"\n>\n</adapt-tag-field>\n", components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptMetatagComponent, selector: "adapt-metatag, adapt-tag-field", inputs: ["prefix", "suffix", "maxTagLength", "truncateConfig", "id", "testID", "name", "ariaLabel", "search", "maxHeight", "suppressManual", "label", "placeholder", "mainErrorText", "warningStateText", "width", "errorCheck", "warningCheck", "selectItemTemplate", "tagTemplate", "replaceModelOnWrite", "delimiterSymbol", "popupClass", "disabledInput", "openDropdownOnFocus", "selectItemFormatter", "fullWidthEdit", "tagStyleFormatter"], outputs: ["focus", "blur", "removeTag", "addTag", "initTagEditing"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-string-filter',
                        templateUrl: './string-filter.component.html'
                    }]
            }], propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }] } });

    var RxNumberFilterComponent = /** @class */ (function () {
        function RxNumberFilterComponent() {
        }
        RxNumberFilterComponent.prototype.getNumberDataTypeModel = function (value, indexOfCounter) {
            return value && value.filterValue ? value.filterValue[indexOfCounter] : null;
        };
        RxNumberFilterComponent.prototype.onNumberTypeFilterOptionModelChange = function (filterValue, controlComponent, newValue) {
            controlComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(newValue, filterValue === null || filterValue === void 0 ? void 0 : filterValue.namedOptions));
        };
        return RxNumberFilterComponent;
    }());
    RxNumberFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxNumberFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxNumberFilterComponent, selector: "rx-number-filter", inputs: { filterOption: "filterOption", filterControlsComponent: "filterControlsComponent", filterValue: "filterValue", namedFilterOptions: "namedFilterOptions" }, ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div class=\"d-flex\" [class.has-danger]=\"filterControlsComponent.hasValidationErrors\">\n  <div class=\"advanced-filter__counter-from-wrap\">\n    <adapt-rx-counter\n      #counterFrom\n      class=\"advanced-filter__counter-from\"\n      [label]=\"filterControlsComponent.texts.counterFromLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 0)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          $event,\n          counterTo ? getNumberDataTypeModel(filterValue, 1) : null\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_from'\"\n    >\n    </adapt-rx-counter>\n  </div>\n  <div class=\"advanced-filter__counter-to-wrap\">\n    <adapt-rx-counter\n      #counterTo\n      class=\"advanced-filter__counter-to\"\n      [label]=\"filterControlsComponent.texts.counterToLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 1)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          counterFrom ? getNumberDataTypeModel(filterValue, 0) : null,\n          $event\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_to'\"\n    >\n    </adapt-rx-counter>\n  </div>\n</div>\n", components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-number-filter',
                        templateUrl: './number-filter.component.html'
                    }]
            }], propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }] } });

    // Adapt dropped moment and changed the signature of AdvancedFilterTimeDataType from [moment.Moment, moment.Moment] to [RxDatetimeStruct, RxDatetimeStruct].
    // We need to extend the AdaptRxDatetimeAdapter class to implement the missing moment methods that we rely on.
    var RxAdaptDatetimeMomentAdapter = /** @class */ (function (_super) {
        __extends(RxAdaptDatetimeMomentAdapter, _super);
        function RxAdaptDatetimeMomentAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Converts moment.Moment => RxDatetimeStruct
         */
        RxAdaptDatetimeMomentAdapter.prototype.fromModel = function (dateValue) {
            var adaptedValue = null;
            var date = moment__default["default"](dateValue);
            if (date && date.isValid()) {
                adaptedValue = {
                    year: date.year(),
                    month: date.month(),
                    date: date.date(),
                    hours: date.hours(),
                    minutes: date.minutes(),
                    seconds: date.seconds()
                };
            }
            return adaptedValue;
        };
        /**
         * Converts RxDatetimeStruct => moment.Moment
         */
        RxAdaptDatetimeMomentAdapter.prototype.toModel = function (date) {
            var _a, _b, _c, _d, _e, _f;
            var adaptedValue = null;
            if (date) {
                var currentDateTime = moment__default["default"]();
                adaptedValue = date.parseError
                    ? moment__default["default"].invalid({
                        invalidFormat: true,
                        parsedDateParts: [date.parseError.query],
                        meridiem: date.parseError.use12HoursTime ? '12' : '24'
                    })
                    : moment__default["default"]([
                        (_a = date.year) !== null && _a !== void 0 ? _a : currentDateTime.year(),
                        (_b = date.month) !== null && _b !== void 0 ? _b : currentDateTime.month(),
                        (_c = date.date) !== null && _c !== void 0 ? _c : currentDateTime.date(),
                        (_d = date.hours) !== null && _d !== void 0 ? _d : 0,
                        (_e = date.minutes) !== null && _e !== void 0 ? _e : 0,
                        (_f = date.seconds) !== null && _f !== void 0 ? _f : 0
                    ]);
            }
            return adaptedValue;
        };
        return RxAdaptDatetimeMomentAdapter;
    }(i1.AdaptRxDatetimeAdapter));
    RxAdaptDatetimeMomentAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdaptDatetimeMomentAdapter, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxAdaptDatetimeMomentAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdaptDatetimeMomentAdapter });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdaptDatetimeMomentAdapter, decorators: [{
                type: i0.Injectable
            }] });

    var RxDateTimeRangeFilterComponent = /** @class */ (function () {
        function RxDateTimeRangeFilterComponent() {
            this.rxDatetimePickerMode = i1.RxDatetimePickerMode;
        }
        RxDateTimeRangeFilterComponent.prototype.onTimeTypeFilterOptionModelChange = function (model) {
            this.onDateTimeTypeFilterOptionModelChange(model);
        };
        RxDateTimeRangeFilterComponent.prototype.onDateTypeFilterOptionModelChange = function (model) {
            if (model[0] && model[0].isValid()) {
                model[0] = model[0].startOf('day');
            }
            if (model[1] && model[1].isValid()) {
                model[1] = model[1].startOf('day');
            }
            this.onDateTimeTypeFilterOptionModelChange(model);
        };
        RxDateTimeRangeFilterComponent.prototype.onDateTimeTypeFilterOptionModelChange = function (newValue) {
            var _a;
            this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(newValue, (_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.namedOptions));
        };
        return RxDateTimeRangeFilterComponent;
    }());
    RxDateTimeRangeFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxDateTimeRangeFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxDateTimeRangeFilterComponent, selector: "rx-date-time-range-filter", inputs: { filterOption: "filterOption", filterControlsComponent: "filterControlsComponent", filterValue: "filterValue", namedFilterOptions: "namedFilterOptions", mode: "mode" }, providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: RxAdaptDatetimeMomentAdapter }], ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<ng-container [ngSwitch]=\"mode\">\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Time\" [ngTemplateOutlet]=\"inputsForTimeTypeTemplate\"></ng-container>\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Date\" [ngTemplateOutlet]=\"inputsForDateTypeTemplate\"></ng-container>\n  <ng-container\n    *ngSwitchCase=\"rxDatetimePickerMode.DateTime\"\n    [ngTemplateOutlet]=\"inputsForDatetimeTypeTemplate\"\n  ></ng-container>\n</ng-container>\n\n<ng-template #inputsForTimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDateTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDatetimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n", components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptRxDatetimeRangeComponent, selector: "adapt-rx-datetime-range", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-date-time-range-filter',
                        templateUrl: './date-time-range-filter.component.html',
                        providers: [{ provide: i1.AdaptRxDatetimeAdapter, useClass: RxAdaptDatetimeMomentAdapter }]
                    }]
            }], propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }], mode: [{
                    type: i0.Input
                }] } });

    var RxSelectionFilterComponent = /** @class */ (function () {
        function RxSelectionFilterComponent() {
        }
        Object.defineProperty(RxSelectionFilterComponent.prototype, "filterValue", {
            get: function () {
                return this._filterValue;
            },
            set: function (values) {
                this._filterValue = values;
                var options = this.getSelectionTypeOptions();
                this.selectionTypeModel =
                    options.length && (values === null || values === void 0 ? void 0 : values.filterValue)
                        ? values.filterValue.map(function (id) { return options.find(function (option) { return option.id === id; }); })
                        : null;
            },
            enumerable: false,
            configurable: true
        });
        RxSelectionFilterComponent.prototype.getSelectionTypeOptions = function () {
            var _a;
            var data = this.filterOption.data;
            return (_a = data === null || data === void 0 ? void 0 : data.selectOptions) !== null && _a !== void 0 ? _a : [];
        };
        RxSelectionFilterComponent.prototype.onSelectionTypeFilterOptionModelChange = function (value) {
            var _a;
            this.filterControlsComponent.onFilterOptionModelChange(new RxRecordGridAdvancedFilterValue(value.map(function (val) { return val.id; }), (_a = this.filterValue) === null || _a === void 0 ? void 0 : _a.namedOptions));
        };
        return RxSelectionFilterComponent;
    }());
    RxSelectionFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxSelectionFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxSelectionFilterComponent, selector: "rx-selection-filter", inputs: { filterOption: "filterOption", filterControlsComponent: "filterControlsComponent", filterValue: "filterValue", namedFilterOptions: "namedFilterOptions" }, ngImport: i0__namespace, template: "<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  class=\"advanced-filter__rx-select\"\n  [class.advanced-filter__rx-select_simple]=\"filterControlsComponent.canShowSimpleInlineSelect()\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [selectAllButton]=\"true\"\n  [deselectAllButton]=\"true\"\n  [enableFilter]=\"!filterControlsComponent.canShowSimpleInlineSelect()\"\n  [optionFormatter]=\"filterControlsComponent.selectOptionFormatter\"\n  [options]=\"filterControlsComponent.getSelectionTypeOptions()\"\n  [texts]=\"filterControlsComponent.getSelectionTypeTexts()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectionTypeModel\"\n  (ngModelChange)=\"onSelectionTypeFilterOptionModelChange($event)\"\n  [disabledOptionResolver]=\"filterControlsComponent.disabledSelectInputResolverBind\"\n>\n</adapt-rx-select>\n", components: [{ type: RxNamedFilterOptionsListComponent, selector: "rx-named-filter-options-list", inputs: ["namedFilterOptions", "filterOption", "filterValue", "filterControlsComponent", "defaultFilterValue"], outputs: ["namedFilterOptionsChange"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-selection-filter',
                        templateUrl: './selection-filter.component.html'
                    }]
            }], propDecorators: { filterOption: [{
                    type: i0.Input
                }], filterControlsComponent: [{
                    type: i0.Input
                }], filterValue: [{
                    type: i0.Input
                }], namedFilterOptions: [{
                    type: i0.Input
                }] } });

    var RxAdvancedFilteringFieldsProviderComponent = /** @class */ (function () {
        function RxAdvancedFilteringFieldsProviderComponent() {
            this.rxDatetimePickerMode = i1.RxDatetimePickerMode;
            this.namedFilterOptionsGetter = function (filterOptionConfig) { return []; };
        }
        return RxAdvancedFilteringFieldsProviderComponent;
    }());
    RxAdvancedFilteringFieldsProviderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxAdvancedFilteringFieldsProviderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxAdvancedFilteringFieldsProviderComponent, selector: "rx-advanced-filtering-fields-provider", inputs: { namedFilterOptionsGetter: "namedFilterOptionsGetter" }, viewQueries: [{ propertyName: "optionalBooleanFilter", first: true, predicate: ["optionalBooleanFilter"], descendants: true, static: true }, { propertyName: "requiredBooleanFilter", first: true, predicate: ["requiredBooleanFilter"], descendants: true, static: true }, { propertyName: "inputsForStringWithTypeAheadTemplate", first: true, predicate: ["inputsForStringWithTypeAheadTemplate"], descendants: true, static: true }, { propertyName: "inputsForStringTypeTemplate", first: true, predicate: ["inputsForStringTypeTemplate"], descendants: true, static: true }, { propertyName: "inputsForNumberTypeTemplate", first: true, predicate: ["inputsForNumberTypeTemplate"], descendants: true, static: true }, { propertyName: "inputsForTimeTypeTemplate", first: true, predicate: ["inputsForTimeTypeTemplate"], descendants: true, static: true }, { propertyName: "inputsForDateTypeTemplate", first: true, predicate: ["inputsForDateTypeTemplate"], descendants: true, static: true }, { propertyName: "inputsForDatetimeTypeTemplate", first: true, predicate: ["inputsForDatetimeTypeTemplate"], descendants: true, static: true }, { propertyName: "inputsForSelectionTypeTemplate", first: true, predicate: ["inputsForSelectionTypeTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ng-template\n  #optionalBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"false\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #requiredBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"true\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringWithTypeAheadTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-with-type-ahead-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-with-type-ahead-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-filter>\n</ng-template>\n\n<ng-template\n  #inputsForNumberTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-number-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-number-filter>\n</ng-template>\n\n<ng-template\n  #inputsForTimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Time\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDateTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Date\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDatetimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.DateTime\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForSelectionTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-selection-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-selection-filter>\n</ng-template>\n", components: [{ type: RxBooleanFilterComponent, selector: "rx-boolean-filter", inputs: ["filterOption", "filterValue", "filterControlsComponent", "namedFilterOptions", "isRequired"] }, { type: RxStringWithTypeAheadFilterComponent, selector: "rx-string-with-type-ahead-filter", inputs: ["filterOption", "filterControlsComponent", "filterValue", "namedFilterOptions"] }, { type: RxStringFilterComponent, selector: "rx-string-filter", inputs: ["filterOption", "filterValue", "filterControlsComponent", "namedFilterOptions"] }, { type: RxNumberFilterComponent, selector: "rx-number-filter", inputs: ["filterOption", "filterControlsComponent", "filterValue", "namedFilterOptions"] }, { type: RxDateTimeRangeFilterComponent, selector: "rx-date-time-range-filter", inputs: ["filterOption", "filterControlsComponent", "filterValue", "namedFilterOptions", "mode"] }, { type: RxSelectionFilterComponent, selector: "rx-selection-filter", inputs: ["filterOption", "filterControlsComponent", "filterValue", "namedFilterOptions"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-advanced-filtering-fields-provider',
                        templateUrl: './advanced-filtering-fields-provider.component.html'
                    }]
            }], propDecorators: { optionalBooleanFilter: [{
                    type: i0.ViewChild,
                    args: ['optionalBooleanFilter', { static: true }]
                }], requiredBooleanFilter: [{
                    type: i0.ViewChild,
                    args: ['requiredBooleanFilter', { static: true }]
                }], inputsForStringWithTypeAheadTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForStringWithTypeAheadTemplate', { static: true }]
                }], inputsForStringTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForStringTypeTemplate', { static: true }]
                }], inputsForNumberTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForNumberTypeTemplate', { static: true }]
                }], inputsForTimeTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForTimeTypeTemplate', { static: true }]
                }], inputsForDateTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForDateTypeTemplate', { static: true }]
                }], inputsForDatetimeTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForDatetimeTypeTemplate', { static: true }]
                }], inputsForSelectionTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['inputsForSelectionTypeTemplate', { static: true }]
                }], namedFilterOptionsGetter: [{
                    type: i0.Input
                }] } });

    var QueryFiltersLogic;
    (function (QueryFiltersLogic) {
        QueryFiltersLogic["And"] = "AND";
        QueryFiltersLogic["Or"] = "OR";
    })(QueryFiltersLogic || (QueryFiltersLogic = {}));

    var RxRecordGridAdvancedFilteringService = /** @class */ (function () {
        function RxRecordGridAdvancedFilteringService(rxRecordDefinitionService, rxObjectUtilsService, rxRecordGridUtilsService, rxNamedListService, advancedFilterDataTypesConfigsService, adaptTranslateService) {
            this.rxRecordDefinitionService = rxRecordDefinitionService;
            this.rxObjectUtilsService = rxObjectUtilsService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxNamedListService = rxNamedListService;
            this.advancedFilterDataTypesConfigsService = advancedFilterDataTypesConfigsService;
            this.adaptTranslateService = adaptTranslateService;
            this.translation = this.adaptTranslateService.getCurrentLanguage();
            this.adaptTexts = {
                fromLabel: this.translation['adapt.advancedFilter.configsTexts.fromLabel'],
                toLabel: this.translation['adapt.advancedFilter.configsTexts.toLabel'],
                trueLabel: this.translation['adapt.advancedFilter.configsTexts.trueLabel'],
                falseLabel: this.translation['adapt.advancedFilter.configsTexts.falseLabel'],
                blankLabel: this.translation['adapt.advancedFilter.configsTexts.blankLabel'],
                validationErrors: {
                    invalidRangeName: this.translation['adapt.advancedFilter.validationErrors.invalidRangeName'],
                    invalidRangeText: this.translation['adapt.advancedFilter.validationErrors.invalidRangeText'],
                    numberTypeTexts: {
                        fromValueMustBeNumber: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.fromValueMustBeNumber'],
                        toValueMustBeNumber: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.toValueMustBeNumber'],
                        invalidBetweenMinAndMax: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidBetweenMinAndMax'],
                        invalidMinValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMinValue'],
                        invalidMaxValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMaxValue']
                    }
                }
            };
            this.defaultConfig = this.advancedFilterDataTypesConfigsService.getConfigs(this.adaptTexts);
        }
        RxRecordGridAdvancedFilteringService.prototype.addAssociationFieldsToFieldDefinitionsById = function (fieldDefinitionsById, associationDescriptors, associatedRecordDefinitions) {
            var _this = this;
            associationDescriptors.forEach(function (associationDescriptor) {
                var associatedRecordDefinition = associatedRecordDefinitions.find(function (recordDefinition) { return recordDefinition.name === associationDescriptor.recordDefinitionName; });
                associatedRecordDefinition.fieldDefinitions.forEach(function (fieldDefinition) {
                    var field = _this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor);
                    if (!fieldDefinitionsById[field]) {
                        _this.rxRecordDefinitionService.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field);
                    }
                });
            });
            fieldDefinitionsById = Object.assign(Object.assign({}, fieldDefinitionsById), this.rxObjectUtilsService.expandProperties(fieldDefinitionsById));
            return fieldDefinitionsById;
        };
        RxRecordGridAdvancedFilteringService.prototype.getAdvancedFilterOption = function (fieldId, header, fieldDefinition, filterConfig, isHidden, customFilterTemplates, prefixLabel, namedFilterOptions, typeaheadKeystrokeCount, additionalQueryCriteria) {
            var _this = this;
            var config = {
                id: fieldId,
                label: header,
                dataType: filterConfig.filterOptionDataType,
                isHidden: isHidden,
                data: lodash.isFunction(filterConfig.getDataForAdvancedFilter)
                    ? filterConfig.getDataForAdvancedFilter(fieldDefinition, fieldId)
                    : null
            };
            namedFilterOptions = namedFilterOptions !== null && namedFilterOptions !== void 0 ? namedFilterOptions : [];
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.boolean) {
                config.inputsTemplate =
                    fieldDefinition.fieldOption !== i1$4.RecordFieldOption.Required
                        ? customFilterTemplates.optionalBooleanFilter
                        : customFilterTemplates.requiredBooleanFilter;
                config.customConfig = {
                    getExpressionFieldTips: function (filterOption) {
                        var data = filterOption.data;
                        var selectOptions = (data === null || data === void 0 ? void 0 : data.selectOptions) || [];
                        var namedFilterOptionTips = _this.getNamedFilterOptionTips(namedFilterOptions, filterOption, config.customConfig);
                        return namedFilterOptionTips.concat(selectOptions.map(function (selectOption) {
                            return i1.AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(new RxRecordGridAdvancedFilterValue([selectOption.id]), filterOption, config.customConfig, false, i1.formatAdvancedFilterTagText(filterOption, selectOption.name));
                        }));
                    },
                    formatValueForTag: function (value, option) {
                        var data = option.data;
                        var selectOptions = (data === null || data === void 0 ? void 0 : data.selectOptions) || [];
                        var filterValueLabels = value.filterValue.map(function (id) { return selectOptions.find(function (selectOption) { return selectOption.id === id; }).name; });
                        return _this.buildTagLabel(filterValueLabels, _this.getNamedOptionTitles(value, namedFilterOptions));
                    },
                    needRemoveTagValue: function (value) { return RxRecordGridAdvancedFilterValue.isEmpty(value); },
                    updateFilterValue: function (newValue, oldValue, filterOption) { return _this.updateFilterValue(oldValue, newValue, filterOption.data.isRequired); },
                    parseTagFieldExpression: function (filterOption, searchTerm) {
                        var rawValues = i1.AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);
                        var value = _this.getFilterValueFromString(namedFilterOptions, rawValues);
                        var data = filterOption.data;
                        var selectOptions = (data === null || data === void 0 ? void 0 : data.selectOptions) || [];
                        value.filterValue =
                            value.filterValue
                                .map(function (optionLabel) {
                                var _a;
                                optionLabel = optionLabel.trim().toLowerCase();
                                var selectOption = selectOptions.find(function (option) { return option.name.toLowerCase() === optionLabel; });
                                return (_a = selectOption === null || selectOption === void 0 ? void 0 : selectOption.id) !== null && _a !== void 0 ? _a : null;
                            })
                                .filter(function (val) { return !lodash.isNil(val); }) || [];
                        return value.length ? { value: value } : null;
                    }
                };
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.string) {
                if (fieldDefinition.namedListDefinition) {
                    config.inputsTemplate = customFilterTemplates.inputsForStringWithTypeAheadTemplate;
                    config.data = Object.assign(Object.assign({}, config.data), { typeaheadKeystrokeCount: typeaheadKeystrokeCount, additionalQueryCriteria: additionalQueryCriteria });
                }
                else {
                    config.inputsTemplate = customFilterTemplates.inputsForStringTypeTemplate;
                }
                config.customConfig = {
                    needRemoveTagValue: function (value) {
                        return RxRecordGridAdvancedFilterValue.isEmpty(value);
                    },
                    formatValueForTag: function (value, filterOption) { return _this.buildTagLabel(value.filterValue, _this.getNamedOptionTitles(value, namedFilterOptions)); },
                    getExpressionFieldTips: function (option, searchTerm) {
                        return __spreadArray(__spreadArray([], __read(_this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig))), [
                            i1.AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(new RxRecordGridAdvancedFilterValue(), option, config.customConfig, true, i1.formatAdvancedFilterTagText(option, ''))
                        ]);
                    },
                    updateFilterValue: function (newValue, oldValue, filterOption) { return _this.updateFilterValue(oldValue, newValue); },
                    parseTagFieldExpression: function (filterOption, searchTerm) {
                        return _this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);
                    }
                };
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.selection) {
                config.inputsTemplate = customFilterTemplates.inputsForSelectionTypeTemplate;
                config.customConfig = {
                    needRemoveTagValue: function (value) {
                        return RxRecordGridAdvancedFilterValue.isEmpty(value);
                    },
                    formatValueForTag: function (value, option) {
                        var filterValueLabels = _this.defaultConfig[filterConfig.filterOptionDataType].formatValueForTag(value.filterValue, option);
                        return _this.buildTagLabel(filterValueLabels, _this.getNamedOptionTitles(value, namedFilterOptions));
                    },
                    getExpressionFieldTips: function (filterOption, searchTerm) {
                        var data = filterOption.data;
                        var selectOptions = (data && data.selectOptions) || [];
                        return _this.getNamedFilterOptionTips(namedFilterOptions, filterOption, config.customConfig).concat(selectOptions.map(function (selectOption) {
                            return i1.AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(new RxRecordGridAdvancedFilterValue([selectOption.id]), filterOption, config.customConfig, false, i1.formatAdvancedFilterTagText(filterOption, selectOption.name));
                        }));
                    },
                    updateFilterValue: function (newValue, oldValue, filterOption) { return _this.updateFilterValue(oldValue, newValue); },
                    parseTagFieldExpression: function (filterOption, searchTerm) {
                        return _this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);
                    }
                };
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.datetime) {
                config.inputsTemplate = customFilterTemplates.inputsForDatetimeTypeTemplate;
                config.customConfig = this.getDatetimeCustomConfig(namedFilterOptions, config, i1.AdvancedFilterOptionDataType.datetime, 'll LTS');
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.date) {
                config.inputsTemplate = customFilterTemplates.inputsForDateTypeTemplate;
                config.customConfig = this.getDatetimeCustomConfig(namedFilterOptions, config, i1.AdvancedFilterOptionDataType.date, 'll');
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.time) {
                config.inputsTemplate = customFilterTemplates.inputsForTimeTypeTemplate;
                config.customConfig = this.getDatetimeCustomConfig(namedFilterOptions, config, i1.AdvancedFilterOptionDataType.time, 'LTS');
            }
            if (filterConfig.filterOptionDataType === i1.AdvancedFilterOptionDataType.number) {
                config.inputsTemplate = customFilterTemplates.inputsForNumberTypeTemplate;
                config.customConfig = {
                    needRemoveTagValue: function (value) {
                        return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);
                    },
                    getExpressionFieldTips: function (option, searchTerm) {
                        return _this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig, [null, null]).concat(_this.defaultConfig[filterConfig.filterOptionDataType].getExpressionFieldTips(option, searchTerm));
                    },
                    updateFilterValue: function (newValue, oldValue, filterOption) {
                        newValue.filterValue = _this.defaultConfig[filterConfig.filterOptionDataType].updateFilterValue(newValue.filterValue, oldValue.filterValue, filterOption);
                        newValue.namedOptions = lodash.uniq(oldValue.namedOptions.concat(newValue.namedOptions));
                        return newValue;
                    },
                    formatValueForTag: function (value) {
                        var formattedValue = value.filterValue.filter(function (val) { return val != null; }).join(' - ');
                        return _this.buildTagLabel(formattedValue, _this.getNamedOptionTitles(value, namedFilterOptions));
                    },
                    parseTagFieldExpression: function (filterOption, searchTerm) {
                        var _a, _b;
                        var _c = _this.getExpressionRawValues(filterOption, searchTerm), valuesStr = _c.value, label = _c.label;
                        if (!valuesStr) {
                            return null;
                        }
                        var value = _this.getFilterValueFromString(namedFilterOptions, valuesStr);
                        value.filterValue =
                            (_b = (_a = _this.defaultConfig[filterConfig.filterOptionDataType].parseTagFieldExpression(filterOption, label + " " + value.filterValue[0])) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : [];
                        return value.length ? { value: value } : null;
                    },
                    validateValue: function (value, filterOption) { return _this.defaultConfig[filterConfig.filterOptionDataType].validateValue(value.filterValue, filterOption); }
                };
            }
            if (prefixLabel) {
                var prefixConfig = {
                    getTagText: function (value, option, formattedValue) {
                        return prefixLabel + ": " + formattedValue;
                    }
                };
                config.customConfig = Object.assign(Object.assign({}, config.customConfig), prefixConfig);
            }
            return config;
        };
        RxRecordGridAdvancedFilteringService.prototype.parseStringTagFieldExpression = function (filterOption, searchTerm, namedFilterOptions) {
            var valuesStr = i1.AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);
            if (!valuesStr) {
                return null;
            }
            var value = this.getFilterValueFromString(namedFilterOptions, valuesStr);
            return value.length ? { value: value } : null;
        };
        RxRecordGridAdvancedFilteringService.prototype.updateFilterValue = function (oldValue, newValue, replaceFilterValue) {
            if (replaceFilterValue === void 0) { replaceFilterValue = false; }
            if (!replaceFilterValue) {
                newValue.filterValue = lodash.uniq(oldValue.filterValue.concat(newValue.filterValue));
            }
            newValue.namedOptions = lodash.uniq(oldValue.namedOptions.concat(newValue.namedOptions));
            return newValue;
        };
        RxRecordGridAdvancedFilteringService.prototype.buildTagLabel = function (filterValueLabels, namedOptionTitles, filterValueSeparator, namedOptionsSeparator) {
            if (filterValueSeparator === void 0) { filterValueSeparator = ', '; }
            if (namedOptionsSeparator === void 0) { namedOptionsSeparator = '; '; }
            return __spreadArray([
                lodash.isString(filterValueLabels)
                    ? filterValueLabels
                    : lodash.isArray(filterValueLabels) && !lodash.isEmpty(filterValueLabels)
                        ? this.rxNamedListService.isNamedListOption(filterValueLabels[0])
                            ? filterValueLabels.map(function (value) { var _a; return (_a = value.displayValue) !== null && _a !== void 0 ? _a : value.value; }).join(filterValueSeparator)
                            : filterValueLabels.join(filterValueSeparator)
                        : ''
            ], __read(namedOptionTitles)).filter(Boolean)
                .join(namedOptionsSeparator);
        };
        RxRecordGridAdvancedFilteringService.prototype.getNamedOptionTitles = function (value, options) {
            var optionGuids = options.map(function (option) { return option.guid; });
            return value.namedOptions
                .sort(function (option1, option2) { return optionGuids.indexOf(option1) - optionGuids.indexOf(option2); })
                .map(function (guid) { var _a; return (_a = options.find(function (option) { return option.guid === guid; })) === null || _a === void 0 ? void 0 : _a.title; });
        };
        RxRecordGridAdvancedFilteringService.prototype.getDatetimeCustomConfig = function (namedFilterOptions, config, fieldType, tagValueFormat) {
            var _this = this;
            return {
                getExpressionFieldTips: function (option, searchTerm) {
                    return _this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig).concat(_this.defaultConfig[fieldType].getExpressionFieldTips(option, searchTerm));
                },
                needRemoveTagValue: function (value) {
                    return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);
                },
                formatValueForTag: function (value) {
                    var formattedValue = value.filterValue
                        .filter(function (val) { return val; })
                        .map(function (date) { return moment__default["default"](date).format(tagValueFormat); })
                        .join(' - ');
                    return _this.buildTagLabel(formattedValue, _this.getNamedOptionTitles(value, namedFilterOptions));
                },
                updateFilterValue: function (newValue, oldValue, filterOption) {
                    newValue.filterValue = _this.defaultConfig[fieldType].updateFilterValue(newValue.filterValue, oldValue.filterValue, filterOption);
                    newValue.namedOptions = lodash.uniq(oldValue.namedOptions.concat(newValue.namedOptions));
                    return newValue;
                },
                parseTagFieldExpression: function (filterOption, searchTerm) {
                    var _a, _b;
                    var valuesStr = _this.getExpressionRawValues(filterOption, searchTerm).value;
                    if (!valuesStr) {
                        return null;
                    }
                    var value = _this.getFilterValueFromString(namedFilterOptions, valuesStr);
                    var _c = __read(searchTerm.split('; '), 1), dateStr = _c[0];
                    value.filterValue = (_b = (_a = _this.defaultConfig[fieldType].parseTagFieldExpression(filterOption, dateStr)) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : [];
                    return value.length ? { value: value } : null;
                },
                validateValue: function (value, filterOption) { return _this.defaultConfig[fieldType].validateValue(value.filterValue, filterOption); }
            };
        };
        RxRecordGridAdvancedFilteringService.prototype.getExpressionRawValues = function (filterOption, searchTerm) {
            return [
                filterOption.label + ":",
                filterOption.label + " " + this.adaptTexts.fromLabel,
                filterOption.label + " " + this.adaptTexts.toLabel
            ].reduce(function (result, mask) {
                if (searchTerm.startsWith(mask)) {
                    result.label = mask;
                    result.value = searchTerm.replace(mask, '').trim();
                }
                return result;
            }, { label: null, value: null });
        };
        RxRecordGridAdvancedFilteringService.prototype.getFilterValueFromString = function (namedFilterOptions, valuesStr) {
            var values = (valuesStr !== null && valuesStr !== void 0 ? valuesStr : '')
                .trim()
                .split(';')
                .filter(function (str) { return !i1.isEmptyOrWhitespace(str); })
                .map(function (str) { return str.trim(); });
            var value = new RxRecordGridAdvancedFilterValue([]);
            values.forEach(function (val) {
                var _c;
                var _a;
                var namedOptionGuid = (_a = namedFilterOptions.find(function (item) { return item.title === val; })) === null || _a === void 0 ? void 0 : _a.guid;
                if (namedOptionGuid) {
                    value.namedOptions.push(namedOptionGuid);
                }
                else {
                    (_c = value.filterValue).push.apply(_c, __spreadArray([], __read(val
                        .split(',')
                        .map(function (str) { return str.trim(); })
                        .filter(Boolean))));
                }
            });
            value.namedOptions = lodash.uniq(value.namedOptions);
            return value;
        };
        RxRecordGridAdvancedFilteringService.prototype.getNamedFilterOptionTips = function (namedFilterOptions, option, filterOptionConfig, value) {
            if (value === void 0) { value = []; }
            return (namedFilterOptions !== null && namedFilterOptions !== void 0 ? namedFilterOptions : []).map(function (item) { return i1.AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(new RxRecordGridAdvancedFilterValue(value, [item.guid]), option, filterOptionConfig, false, i1.formatAdvancedFilterTagText(option, item.title)); });
        };
        return RxRecordGridAdvancedFilteringService;
    }());
    RxRecordGridAdvancedFilteringService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridAdvancedFilteringService, deps: [{ token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace$1.RxObjectUtilsService }, { token: RxRecordGridUtilsService }, { token: i2__namespace$6.RxNamedListService }, { token: i1__namespace.AdvancedFilterDataTypesConfigsService }, { token: i1__namespace.AdaptTranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridAdvancedFilteringService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridAdvancedFilteringService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridAdvancedFilteringService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace$1.RxObjectUtilsService }, { type: RxRecordGridUtilsService }, { type: i2__namespace$6.RxNamedListService }, { type: i1__namespace.AdvancedFilterDataTypesConfigsService }, { type: i1__namespace.AdaptTranslateService }]; } });

    var RxRecordGridFilterHelperService = /** @class */ (function () {
        function RxRecordGridFilterHelperService(rxJsonParserService) {
            this.rxJsonParserService = rxJsonParserService;
            this.filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];
        }
        // Convert predefined filter data from:
        // "{
        //   and: [
        //     "or": [
        //       {
        //         "eq": "36dfbd6f-7a19-4b4a-81bf-431fe41f6862"
        //       }
        //     ]
        //   ]
        // }"
        //
        //
        // to:
        // {
        //   and: [
        //     "or": [
        //       {
        //         "eq": {
        //           "1": "bar"
        //         }
        //       }
        //     ]
        //   ]
        // }
        //
        RxRecordGridFilterHelperService.prototype.getRecordGridFilterDataFromPredefinedFilter = function (filterJson, recordGridFilters) {
            if (!lodash.isEmpty(recordGridFilters) && filterJson) {
                filterJson = this.normalizeFilterString(filterJson, recordGridFilters);
            }
            return this.clearFilterData(this.rxJsonParserService.tryParseJson(filterJson));
        };
        // Convert predefined filter string from:
        // "{
        //   and: [
        //     "or": [
        //       {
        //         "eq": "36dfbd6f-7a19-4b4a-81bf-431fe41f6862"
        //       }
        //     ]
        //   ]
        // }"
        //
        // to:
        // "{
        //   and: [
        //     "or": [
        //       {
        //         "eq": {
        //           "1": "bar"
        //         }
        //       }
        //     ]
        //   ]
        // }"
        //
        RxRecordGridFilterHelperService.prototype.normalizeFilterString = function (filterString, filterComponents) {
            lodash.forEach(filterComponents, function (filterComponent) {
                var _a;
                var filterExpression = Object.assign((_a = {}, _a[filterComponent.fieldId] = filterComponent.value, _a), (filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ }));
                filterString = filterString.replace("\"" + filterComponent.guid + "\"", JSON.stringify(filterExpression));
            });
            return filterString;
        };
        // Convert predefined filter string from:
        // "{
        //   and: [
        //     "or": [
        //       {
        //         "eq": {
        //           "1": "bar"
        //         }
        //       }
        //     ]
        //   ]
        // }"
        //
        //
        // to:
        // "{
        //   and: [
        //     "or": [
        //       {
        //         "eq": "36dfbd6f-7a19-4b4a-81bf-431fe41f6862"
        //       }
        //     ]
        //   ]
        // }"
        //
        RxRecordGridFilterHelperService.prototype.denormalizeFilterString = function (filterString, filterComponents) {
            var _this = this;
            lodash.forEach(filterComponents, function (filterComponent) {
                var _a;
                var filterExpression = Object.assign((_a = {}, _a[filterComponent.fieldId] = filterComponent.value, _a), (filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ }));
                if (filterExpression.$DISPLAYVALUE$) {
                    filterString = JSON.stringify(JSON.parse(filterString), _this.replacer(_this.denormalize(filterComponent.guid, filterExpression)));
                }
                else {
                    filterString = filterString.replace(JSON.stringify(filterExpression), "\"" + filterComponent.guid + "\"");
                }
            });
            return filterString;
        };
        // e.g.
        // fn = denormalize(guid, {"536870913":"AGGADG1AAXPMRARKA0FGRKA0FG6I01","$DISPLAYVALUE$":"foo"});
        //
        // var filterExpression = {
        //   "and": [
        //     {
        //       "or": [
        //         {
        //           "eq": {
        //             "536870913": "AGGADG1AAXPMRARKA0FGRKA0FG6I01",
        //             "$DISPLAYVALUE$": "foo"
        //           }
        //         }
        //       ]
        //     }
        //   ]
        // };
        //
        // JSON.stringify(filterExpression,replacer(fn));
        // Here the filterExpression's keys are "add", “0”, “or”, “0”, “eq”
        //
        RxRecordGridFilterHelperService.prototype.replacer = function (fn) {
            return function (key, value) { return (typeof key === 'string' && fn[key] ? fn[key](value) : value); };
        };
        // This method declares, how object's value of an operator key should denormalize.
        //
        // Converts the Enum RecordGridFilterOperator
        // to
        // "
        // {
        //   "eq": fn(),
        //   "gte": fn(),
        //   "lte": fn(),
        //   "like": fn(),
        //   "ne": fn(),
        //   "lt": fn(),
        //   "gt": fn(),
        //   "in": fn()
        // }
        // "
        //  Note : fn() defines, how the value should be updated.
        //
        // e.g.
        // Converts predefined filter string from:
        //  {"and":[{"or":[{"eq":{"Foo":"Bar","$DISPLAYVALUE$":"Baz"}}]}]}
        // to:
        //  {“and":[{"or":[{"eq":"aa88747c-8b8e-4dee-abf2-556b84b7d28e"}]}]}
        RxRecordGridFilterHelperService.prototype.denormalize = function (guid, filterExpression) {
            return lodash.reduce(i1$1.RecordGridFilterOperator, function (result, operator) {
                result[operator] = function (value) { return (lodash.isEqual(value, filterExpression) ? guid : value); };
                return result;
            }, {});
        };
        RxRecordGridFilterHelperService.prototype.clearFilterData = function (node) {
            var nodeKeys = lodash.keys(node);
            var result = node;
            if (!lodash.isEmpty(nodeKeys)) {
                var operator = nodeKeys[0];
                switch (true) {
                    case lodash.includes(['or', 'and'], operator): {
                        var children = node[operator].map(this.clearFilterData.bind(this)).filter(function (child) { return Boolean(child); });
                        if (!lodash.isEmpty(children)) {
                            node[operator] = children;
                        }
                        else {
                            result = null;
                        }
                        break;
                    }
                    case lodash.isString(node[operator]): {
                        result = null;
                        break;
                    }
                }
            }
            return result;
        };
        RxRecordGridFilterHelperService.prototype.replaceKeywords = function (query) {
            var singleQuoteRegexTemplate = '([^|^"])"(' + this.filtersKeywords.join('|').replace(/\$/g, '\\$') + ')"(?!")';
            var tripleQuoteRegexTemplate = '([^|^"])"""(' + this.filtersKeywords.join('|').replace(/\$/g, '\\$') + ')"""(?!")';
            var singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');
            var tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');
            return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1"$2"');
        };
        return RxRecordGridFilterHelperService;
    }());
    RxRecordGridFilterHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterHelperService, deps: [{ token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridFilterHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterHelperService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterHelperService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxJsonParserService }]; } });

    var RxRecordGridFilterService = /** @class */ (function () {
        function RxRecordGridFilterService(rxStringService, rxRecordGridUtilsService, rxJsonParserService, rxRecordGridAdvancedFilteringService, rxRecordDefinitionService, rxObjectUtilsService, rxRecordGridFilterHelperService) {
            this.rxStringService = rxStringService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxRecordGridAdvancedFilteringService = rxRecordGridAdvancedFilteringService;
            this.rxRecordDefinitionService = rxRecordDefinitionService;
            this.rxObjectUtilsService = rxObjectUtilsService;
            this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            this.filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];
        }
        RxRecordGridFilterService.prototype.clearFilterData = function (node) {
            var nodeKeys = lodash.keys(node);
            var result = node;
            if (!lodash.isEmpty(nodeKeys)) {
                var operator = nodeKeys[0];
                switch (true) {
                    case lodash.includes(['or', 'and'], operator): {
                        var children = node[operator].map(this.clearFilterData.bind(this)).filter(function (child) { return Boolean(child); });
                        if (!lodash.isEmpty(children)) {
                            node[operator] = children;
                        }
                        else {
                            result = null;
                        }
                        break;
                    }
                    case lodash.isString(node[operator]): {
                        result = null;
                        break;
                    }
                }
            }
            return result;
        };
        RxRecordGridFilterService.prototype.getFilterForAvailableColumns = function (node, filterableColumns) {
            var _this = this;
            var nodeKeys = lodash.keys(node);
            var result = node;
            if (!lodash.isEmpty(nodeKeys)) {
                var operator = nodeKeys[0];
                var fieldId = Object.keys(node[operator])[0];
                switch (true) {
                    case lodash.includes(['or', 'and'], operator): {
                        var children = node[operator]
                            .map(function (nodeChild) { return _this.getFilterForAvailableColumns(nodeChild, filterableColumns); })
                            .filter(function (child) { return Boolean(child); });
                        if (!lodash.isEmpty(children)) {
                            node[operator] = children;
                        }
                        else {
                            result = null;
                        }
                        break;
                    }
                    case !lodash.some(filterableColumns, { fieldId: fieldId }): {
                        result = null;
                        break;
                    }
                    case lodash.includes(['eq'], operator): {
                        var fieldDefinition = lodash.find(filterableColumns, { fieldId: fieldId }).fieldDefinition;
                        // remove selection field filter option that is not available
                        if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection &&
                            !lodash.has(fieldDefinition.optionNamesById, node[operator][fieldId])) {
                            result = null;
                        }
                        break;
                    }
                }
            }
            return result;
        };
        RxRecordGridFilterService.prototype.replaceKeywords = function (query) {
            var singleQuoteRegexTemplate = '([^|^"])"(' + this.filtersKeywords.join('|').replace(/\$/g, '\\$') + ')"(?!")';
            var tripleQuoteRegexTemplate = '([^|^"])"""(' + this.filtersKeywords.join('|').replace(/\$/g, '\\$') + ')"""(?!")';
            var singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');
            var tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');
            return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1"$2"');
        };
        RxRecordGridFilterService.prototype.generateTextFilterQuery = function (text, columns) {
            var _this = this;
            var filterQuery = null;
            if (text) {
                var query = columns
                    .filter(function (column) { return !column.hidden && column.searchable; })
                    .map(function (column) {
                    var fieldId = _this.getQueryFilterField(column.field);
                    var queryString = '';
                    if (column.filterType === i1$4.RX_RECORD_DEFINITION.dataTypes.character.shortName ||
                        column.filterType === i1$4.RX_RECORD_DEFINITION.dataTypes.localizedCharacter.shortName) {
                        queryString = fieldId + " LIKE \"%" + _this.escapeDoubleQuotes(text).replace(/[%_]/g, '\\$&') + "%\"";
                    }
                    else {
                        if (!isNaN(text)) {
                            queryString = fieldId + " = \"" + _this.escapeDoubleQuotes(text) + "\"";
                        }
                    }
                    return queryString;
                })
                    .filter(Boolean)
                    .join(' OR ');
                filterQuery = query ? "(" + query + ")" : '';
            }
            return filterQuery;
        };
        RxRecordGridFilterService.prototype.addQueries = function () {
            var queries = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                queries[_i] = arguments[_i];
            }
            return lodash.filter(queries, Boolean).join(' AND ');
        };
        RxRecordGridFilterService.prototype.joinQueryFilters = function (queries, logic) {
            var query = queries.join(logic === QueryFiltersLogic.And ? ' AND ' : ' OR ');
            return query ? "(" + query + ")" : '';
        };
        /**
         * Convert saved filter preset data from:
         * {
         *   and: {
         *     "or": [
         *       {
         *         "eq": {
         *           "1": "bar"
         *         }
         *       },
         *       {
         *         "eq": {
         *           "1": "foo"
         *         }
         *       }
         *     ]
         *   }
         * }
         *
         *
         * to:
         * [{
         *   filterOptionId: '1',
         *   value: ['bar', 'foo']
         * }]
         */
        RxRecordGridFilterService.prototype.getAdvancedFilterData = function (filterData, fieldDefinitionsById, recordGridFilterConfigs, primaryRecordDefinition, filterOptions, associationDescriptors) {
            var _this = this;
            return rxjs.forkJoin(filterData && filterData.and
                ? filterData.and.map(function (gridFilterData) {
                    var filterLogic = Object.keys(gridFilterData)[0];
                    var filterOperators = gridFilterData[filterLogic];
                    var firstFilterOperator = lodash.values(filterOperators[0])[0];
                    var columnField = String(Object.keys(firstFilterOperator)[0]);
                    var fieldDefinition = fieldDefinitionsById[columnField];
                    var fieldDefinition$ = fieldDefinition
                        ? rxjs.of(fieldDefinition)
                        : _this.rxRecordGridUtilsService.getFieldDefinition(columnField, primaryRecordDefinition);
                    return fieldDefinition$.pipe(operators.filter(Boolean), operators.map(function (newFieldDefinition) {
                        fieldDefinition = newFieldDefinition;
                        var filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];
                        if (!fieldDefinitionsById[columnField]) {
                            _this.rxRecordDefinitionService.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, columnField);
                            fieldDefinitionsById = primaryRecordDefinition.fieldDefinitionsById = Object.assign(Object.assign({}, fieldDefinitionsById), _this.rxObjectUtilsService.expandProperties(fieldDefinitionsById));
                            var associationDescriptor = _this.rxRecordGridUtilsService.findAssociationDescriptor(associationDescriptors, _this.rxRecordGridUtilsService.getFieldLocator(columnField));
                            filterOptions.push(_this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(columnField, _this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor), fieldDefinition, filterConfig, true));
                        }
                        return filterConfig.getSelectedAdvancedFilterData(filterLogic, filterOperators, fieldDefinition, columnField);
                    }));
                })
                : []).pipe(operators.defaultIfEmpty([]), operators.map(function (advancedFiltersData) { return advancedFiltersData.filter(Boolean); }));
        };
        RxRecordGridFilterService.prototype.getQueryFromRecordGridFilterData = function (filterData, fieldDefinitionsById) {
            var _this = this;
            var primitiveOperators = [
                i1$1.RecordGridFilterOperator.Eq,
                i1$1.RecordGridFilterOperator.Like,
                i1$1.RecordGridFilterOperator.Ne,
                i1$1.RecordGridFilterOperator.Lt,
                i1$1.RecordGridFilterOperator.Lte,
                i1$1.RecordGridFilterOperator.Gt,
                i1$1.RecordGridFilterOperator.Gte,
                i1$1.RecordGridFilterOperator.In,
                'regex'
            ];
            var isPrimitive = function (expression) {
                return lodash.intersection(primitiveOperators.slice(), lodash.keys(expression)).length > 0;
            };
            var evaluatePrimitive = function (expression) {
                return lodash.reduce(expression, function (operatorsResult, condition, operator) {
                    return (operatorsResult +
                        lodash.reduce(condition, function (operatorValuesResult, conditionValue, conditionId) {
                            var fieldDefinition = fieldDefinitionsById[conditionId];
                            var filterOperator = operator;
                            var value = conditionValue;
                            var isTextField = !!fieldDefinition &&
                                lodash.includes([
                                    i1$4.RX_RECORD_DEFINITION.dataTypes.character.resourceType,
                                    i1$4.RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType
                                ], fieldDefinition.resourceType);
                            if (isTextField) {
                                var _c = _this.getStringDataTypeFilterData(conditionValue, fieldDefinition), isLikeOperation = _c.isLikeOperation, filterValue = _c.filterValue;
                                filterOperator = isLikeOperation ? i1$1.RecordGridFilterOperator.Like : filterOperator;
                                value = filterValue;
                            }
                            // following code removes the $DISPLAYVALUE$ from the filter expression
                            // e.g.  {"and":[{"or":[{"eq":{"536870913":"AGGADG1AAXPMRARKA0FGRKA0FG6I01","$DISPLAYVALUE$":"Alex"}}]}]}
                            if (conditionId === '$DISPLAYVALUE$') {
                                return operatorValuesResult;
                            }
                            return operatorValuesResult + _this.getQueryExpression(value, conditionId, filterOperator);
                        }, ''));
                }, '');
            };
            var evaluateExpression = function (expression) {
                if (isPrimitive(expression)) {
                    return evaluatePrimitive(expression);
                }
                return lodash.reduce(expression, function (result, childExpression, operator) {
                    var childExpressionResult = lodash.map(childExpression, evaluateExpression);
                    switch (operator) {
                        case i1$1.RecordGridFilterDataLogic.And:
                            return result + ("(" + childExpressionResult.join(' AND ') + ")");
                        case i1$1.RecordGridFilterDataLogic.Or:
                            return result + ("(" + childExpressionResult.join(' OR ') + ")");
                        default:
                            return result + ("(" + childExpressionResult.join(' AND ') + ")");
                    }
                }, '');
            };
            evaluateExpression = evaluateExpression.bind(this);
            return evaluateExpression(filterData);
        };
        RxRecordGridFilterService.prototype.getSelectedFiltersFromPredefinedFilter = function (filters, recordGridFilters, fieldDefinitionsById, recordGridFilterConfigs, primaryRecordDefinition, filterOptions, associationDescriptors) {
            var recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(filters, this.deserializeNamedOptions(recordGridFilters));
            var selectedFilters$ = this.getAdvancedFilterData(recordGridFilterData, fieldDefinitionsById, recordGridFilterConfigs, primaryRecordDefinition, filterOptions, associationDescriptors);
            return selectedFilters$;
        };
        RxRecordGridFilterService.prototype.getRecordGridFilterDataFromAdvancedFilter = function (filters, fieldDefinitionsById, recordGridFilterConfigs, namedFilterOptions) {
            var mappedFilters = filters.map(function (filterData) {
                var mappedFilter = null;
                var fieldId = String(filterData.filterOptionId);
                var fieldDefinition = fieldDefinitionsById[fieldId];
                if (fieldDefinition) {
                    var filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];
                    mappedFilter = filterConfig.getRecordGridFilterData(filterData.value, fieldDefinition, fieldId, namedFilterOptions && namedFilterOptions[fieldId]);
                }
                return mappedFilter;
            });
            return mappedFilters.length
                ? {
                    and: mappedFilters
                }
                : {};
        };
        RxRecordGridFilterService.prototype.getQueryFilterField = function (fieldId) {
            if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(fieldId)) {
                return "${" + fieldId + "}";
            }
            else {
                return "'" + fieldId + "'";
            }
        };
        RxRecordGridFilterService.prototype.buildQueryFilter = function (fieldId, operator, value) {
            var needQuotes = lodash.isString(value) && !this.filtersKeywords.includes(value);
            var result = lodash.isString(value) ? (needQuotes ? "\"" + this.escapeDoubleQuotes(value) + "\"" : value) : String(value);
            return this.getQueryFilterField(fieldId) + " " + operator + " " + result;
        };
        RxRecordGridFilterService.prototype.filterRows = function (rows, filters, recordDefinition, filterConfigs) {
            var _this = this;
            var filterData = this.getRecordGridFilterDataFromAdvancedFilter(filters, recordDefinition.fieldDefinitionsById, filterConfigs);
            return rows.filter(function (row) {
                if (row.groupField) {
                    row.items = _this.getFilteredItems(row.items, filterData, recordDefinition);
                    return row.items.length;
                }
                else {
                    return lodash.every(filterData.and, function (filterExpression) { return _this.matchRow(row, filterExpression, recordDefinition); });
                }
            });
        };
        RxRecordGridFilterService.prototype.getFilteredItems = function (rowDataItems, filterData, recordDefinition) {
            var _this = this;
            return lodash.reduce(rowDataItems, function (filteredItems, itemsRow) {
                var _c = itemsRow.items, items = _c === void 0 ? [] : _c;
                if (!itemsRow.items &&
                    lodash.every(filterData.and, function (filterExpression) { return _this.matchRow(itemsRow, filterExpression, recordDefinition); })) {
                    filteredItems.push(itemsRow);
                }
                else {
                    items = _this.getFilteredItems(items, filterData, recordDefinition);
                    if (items.length) {
                        filteredItems.push(Object.assign(Object.assign({}, itemsRow), { items: items }));
                    }
                }
                return filteredItems;
            }, []);
        };
        RxRecordGridFilterService.prototype.matchRow = function (row, filterExpression, recordDefinition) {
            var _this = this;
            var operator = lodash.findKey(filterExpression);
            switch (operator) {
                case 'and':
                    return lodash.every(filterExpression[operator], function (childExpression) { return _this.checkCondition(row, childExpression, recordDefinition); });
                case 'or':
                    return lodash.some(filterExpression[operator], function (childExpression) { return _this.checkCondition(row, childExpression, recordDefinition); });
                default:
                    return false;
            }
        };
        RxRecordGridFilterService.prototype.checkCondition = function (row, childExpression, recordDefinition) {
            var operator = lodash.findKey(childExpression);
            var fieldId = lodash.findKey(childExpression[operator]);
            var filterValue = childExpression[operator][fieldId];
            var rowValue = row[fieldId];
            if (recordDefinition.fieldDefinitionsById[fieldId].resourceType ===
                i1$4.RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType) {
                switch (operator) {
                    case 'eq':
                        return moment__default["default"](rowValue).isSame(filterValue);
                    case 'lte':
                        return moment__default["default"](rowValue).isSameOrBefore(filterValue);
                    case 'lt':
                        return moment__default["default"](rowValue).isBefore(filterValue);
                    case 'gte':
                        return moment__default["default"](rowValue).isSameOrAfter(filterValue);
                    case 'gt':
                        return moment__default["default"](rowValue).isAfter(filterValue);
                    default:
                        return false;
                }
            }
            else {
                return operator === 'eq' ? this.rxStringService.caseInsensitiveIsEqual(rowValue, filterValue) : false;
            }
        };
        RxRecordGridFilterService.prototype.escapeDoubleQuotes = function (text) {
            return text.replace(/"/g, '""');
        };
        RxRecordGridFilterService.prototype.getQueryExpression = function (conditionValue, conditionId, operator) {
            var value = lodash.isString(conditionValue) ? '"' + conditionValue + '"' : conditionValue;
            conditionId = this.getQueryFilterField(conditionId);
            switch (operator) {
                case i1$1.RecordGridFilterOperator.Eq:
                    return conditionId + '=' + value;
                case i1$1.RecordGridFilterOperator.Like:
                    return conditionId + ' LIKE ' + value;
                case i1$1.RecordGridFilterOperator.Ne:
                    return conditionId + '!=' + value;
                case i1$1.RecordGridFilterOperator.Lt:
                    return conditionId + '<' + value;
                case i1$1.RecordGridFilterOperator.Lte:
                    return conditionId + '<=' + value;
                case i1$1.RecordGridFilterOperator.Gt:
                    return conditionId + '>' + value;
                case i1$1.RecordGridFilterOperator.Gte:
                    return conditionId + '>=' + value;
                case i1$1.RecordGridFilterOperator.In:
                    return conditionId + ' IN ' + value;
                default:
                    return conditionId + '=' + value;
            }
        };
        RxRecordGridFilterService.prototype.getStringDataTypeFilterData = function (filterValue, fieldDefinition) {
            var isLikeOperation = false;
            if (!lodash.get(fieldDefinition.searchDefinition, 'enableFTSSearch')) {
                if (lodash.includes(filterValue, '%')) {
                    var filterValueSplitData = filterValue.split(/\\\\/);
                    isLikeOperation = lodash.some(filterValueSplitData, function (value) { return value.replace(/\\%/g, '').match('%'); });
                    if (!isLikeOperation) {
                        filterValue = lodash.map(filterValueSplitData, function (value) { return value.replace(/\\%/g, '%'); }).join('\\');
                    }
                }
                else {
                    filterValue = filterValue.replace('\\\\', '\\');
                }
            }
            return { isLikeOperation: isLikeOperation, filterValue: filterValue };
        };
        RxRecordGridFilterService.prototype.clearRemovedNamedFilterOptions = function (selectedFilters, namedFilterOptions) {
            return selectedFilters.reduce(function (result, filter) {
                var _a, _b;
                var namedFilterOptionsGuids = (_b = (_a = namedFilterOptions[filter.filterOptionId]) === null || _a === void 0 ? void 0 : _a.map(function (option) { return option.guid; })) !== null && _b !== void 0 ? _b : [];
                filter.value.namedOptions = filter.value.namedOptions.filter(function (option) { return namedFilterOptionsGuids.includes(option); });
                if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(filter.value)) {
                    result.push(filter);
                }
                return result;
            }, []);
        };
        RxRecordGridFilterService.prototype.deserializeNamedOptions = function (recordGridFilters) {
            var _this = this;
            return recordGridFilters.map(function (filter) {
                var value = _this.rxJsonParserService.tryParseJson(filter.value);
                if (value && value[i1$1.RecordGridNamedFilterOptionKey]) {
                    return Object.assign(Object.assign({}, filter), { value: value });
                }
                return filter;
            });
        };
        return RxRecordGridFilterService;
    }());
    RxRecordGridFilterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterService, deps: [{ token: i2__namespace$1.RxStringService }, { token: RxRecordGridUtilsService }, { token: i2__namespace$1.RxJsonParserService }, { token: RxRecordGridAdvancedFilteringService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace$1.RxObjectUtilsService }, { token: RxRecordGridFilterHelperService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridFilterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxStringService }, { type: RxRecordGridUtilsService }, { type: i2__namespace$1.RxJsonParserService }, { type: RxRecordGridAdvancedFilteringService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace$1.RxObjectUtilsService }, { type: RxRecordGridFilterHelperService }]; } });

    var RxRecordGridFilterConfigService = /** @class */ (function () {
        function RxRecordGridFilterConfigService(rxRecordGridFilterService, rxNumberUtilsService, rxNamedListService, translateService, rxRecordInstanceUtilsService, rxRecordGridUtilsService, rxDefinitionNameService) {
            this.rxRecordGridFilterService = rxRecordGridFilterService;
            this.rxNumberUtilsService = rxNumberUtilsService;
            this.rxNamedListService = rxNamedListService;
            this.translateService = translateService;
            this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.associatedFieldIdPatternRegExp = new RegExp("'(" + RX_RECORD_GRID.associatedFieldIdPrefixPattern + "\\d+)'", 'g');
        }
        RxRecordGridFilterConfigService.prototype.getConfigs = function () {
            var _c;
            var _this = this;
            var textColumnFilterConfig = {
                filterOptionDataType: i1.AdvancedFilterOptionDataType.string,
                getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                    var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                    var builtQuery = lodash.chain(filterTag.value.filterValue)
                        .filter(Boolean)
                        .map(function (optionValue) {
                        var _c = _this.rxRecordGridFilterService.getStringDataTypeFilterData(lodash.get(optionValue, 'value', optionValue), fieldDefinition), isLikeOperation = _c.isLikeOperation, filterValue = _c.filterValue;
                        return _this.rxRecordGridFilterService.buildQueryFilter(fieldId, isLikeOperation ? 'like' : '=', filterValue.trim());
                    })
                        .concat(selectedNamedOptionExpressions)
                        .value();
                    return _this.rxRecordGridFilterService.joinQueryFilters(builtQuery, QueryFiltersLogic.Or);
                },
                getRecordGridFilterData: function (value, fieldDefinition, fieldId, namedFilterOptions) {
                    var namedFilterOptionOperators = _this.getNamedFilterOptionsOperators(value, fieldId);
                    var filterOperators = value.filterValue.map(function (filterValue) {
                        var operators = _this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Eq, fieldId, lodash.get(filterValue, 'value', filterValue).trim());
                        var displayValue = lodash.get(filterValue, 'displayValue');
                        if (fieldDefinition.namedListDefinition && displayValue) {
                            operators.eq['$DISPLAYVALUE$'] = displayValue;
                        }
                        return operators;
                    });
                    return {
                        or: filterOperators.concat(namedFilterOptionOperators)
                    };
                },
                getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                    var filterValues = [];
                    var namedListFilterValues = [];
                    var namedFilterOptionsGuids = [];
                    if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                        filterOperators.forEach(function (filterOperator) {
                            var operator = Object.keys(filterOperator)[0];
                            var value = filterOperator[operator][fieldId];
                            if (lodash.isString(value)) {
                                if (fieldDefinition.namedListDefinition) {
                                    var displayValue = filterOperator[operator]['$DISPLAYVALUE$'];
                                    namedListFilterValues.push({ displayValue: displayValue, value: value, title: '', contextualFields: [] });
                                }
                                else {
                                    filterValues.push(value);
                                }
                            }
                            else if (value[i1$1.RecordGridNamedFilterOptionKey]) {
                                namedFilterOptionsGuids.push(value[i1$1.RecordGridNamedFilterOptionKey]);
                            }
                        });
                    }
                    var rxRecordGridAdvancedFilterValue = lodash.isEmpty(namedListFilterValues)
                        ? new RxRecordGridAdvancedFilterValue(filterValues, namedFilterOptionsGuids)
                        : new RxRecordGridAdvancedFilterValue(namedListFilterValues, namedFilterOptionsGuids);
                    return {
                        filterOptionId: fieldId,
                        value: rxRecordGridAdvancedFilterValue
                    };
                },
                getToolbarTagInfo: function (_c) {
                    var primaryRecordDefinition = _c.primaryRecordDefinition, value = _c.value, tag = _c.tag, fieldId = _c.fieldId, namedFilterOptions = _c.namedFilterOptions;
                    var fieldLocator = _this.rxRecordGridUtilsService.getFieldLocator(fieldId);
                    var associationDescriptor;
                    return _this.rxRecordGridUtilsService.getAssociationDescriptor(fieldId, primaryRecordDefinition).pipe(operators.mergeMap(function (loadedAssociationDescriptor) {
                        associationDescriptor = loadedAssociationDescriptor;
                        return _this.rxRecordGridUtilsService.getDisplayFieldDescriptor(fieldId, primaryRecordDefinition, associationDescriptor && associationDescriptor.recordDefinitionName);
                    }), operators.mergeMap(function (displayFieldDefinition) {
                        var isRecordDisplayField = fieldLocator.fieldId !== String(displayFieldDefinition.id);
                        var displayValuesData$;
                        if (isRecordDisplayField) {
                            var filterValues = _this.rxNamedListService.getNamesFromTypeAheadOptions(value.filterValue);
                            displayValuesData$ = _this.rxRecordInstanceUtilsService
                                .getFieldValues(associationDescriptor.recordDefinitionName, filterValues, [
                                String(i1$4.RX_RECORD_DEFINITION.coreFieldIds.id),
                                String(displayFieldDefinition.id)
                            ])
                                .pipe(operators.map(function (displayValueRows) {
                                var nameWithAssociationLabel = lodash.compact([
                                    _this.rxDefinitionNameService.getDisplayName(associationDescriptor.associationDefinition.name),
                                    displayFieldDefinition.name
                                ]).join(' > ');
                                var displayValues = value.filterValue.map(function (strFilterValue) {
                                    var row = lodash.find(displayValueRows, function (displayValueRow) { return displayValueRow[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id] === strFilterValue; });
                                    return row ? row[displayFieldDefinition.id] : strFilterValue;
                                });
                                return {
                                    displayValues: new RxRecordGridAdvancedFilterValue(displayValues),
                                    label: nameWithAssociationLabel
                                };
                            }));
                        }
                        else {
                            displayValuesData$ = rxjs.of({ displayValues: value, label: tag.data.filterOption.label });
                        }
                        return displayValuesData$.pipe(operators.map(function (_c) {
                            var displayValues = _c.displayValues, label = _c.label;
                            var displayTagValue = displayValues.filterValue
                                .map(function (filterValue) {
                                var _a, _b;
                                var filterValueExpression = lodash.get(filterValue, 'value', filterValue);
                                var filterDisplayText = (_a = lodash.get(filterValue, 'displayValue')) !== null && _a !== void 0 ? _a : lodash.get(filterValue, 'value', filterValue);
                                var text = filterValueExpression === '$USER$'
                                    ? _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.filters.me.label')
                                    : filterDisplayText;
                                var tooltip = (filterValue === null || filterValue === void 0 ? void 0 : filterValue.displayValue)
                                    ? filterValue.displayValue + " (" + filterValue.value + ")"
                                    : (_b = filterValue === null || filterValue === void 0 ? void 0 : filterValue.value) !== null && _b !== void 0 ? _b : filterValue;
                                return { tooltip: tooltip, text: text };
                            })
                                .concat(displayValues.namedOptions.map(function (namedOption) {
                                var _a;
                                var namedFilterOption = ((_a = namedFilterOptions.find(function (option) { return option.guid === namedOption; })) === null || _a === void 0 ? void 0 : _a.title) || namedOption;
                                return { text: namedFilterOption, tooltip: namedFilterOption };
                            }));
                            var displayText = displayTagValue.map(function (tagInfo) { return tagInfo.text; }).join(', ');
                            var tooltip = displayTagValue.map(function (tagInfo) { return tagInfo.tooltip; }).join(', ');
                            return {
                                text: label + ": " + displayText,
                                tooltip: label + ": " + tooltip
                            };
                        }));
                    }));
                },
                getDataForAdvancedFilter: function (fieldDefinition) { return fieldDefinition; }
            };
            var numericColumnFilterConfig = {
                filterOptionDataType: i1.AdvancedFilterOptionDataType.number,
                getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                    var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                    var _c = __read(filterTag.value.filterValue, 2), fromValue = _c[0], toValue = _c[1];
                    var queries = [];
                    if (_this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {
                        queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', String(fromValue)));
                    }
                    if (_this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {
                        queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', String(toValue)));
                    }
                    var valueQuery = _this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);
                    return _this.rxRecordGridFilterService.joinQueryFilters(valueQuery ? __spreadArray([valueQuery], __read(selectedNamedOptionExpressions)) : selectedNamedOptionExpressions, QueryFiltersLogic.Or);
                },
                getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                    var _c = __read(value.filterValue, 2), fromValue = _c[0], toValue = _c[1];
                    var queries = [];
                    if (_this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {
                        queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Gte, fieldId, String(fromValue)));
                    }
                    if (_this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {
                        queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Lte, fieldId, String(toValue)));
                    }
                    return _this.getFilterRangeDataOperator(queries, _this.getNamedFilterOptionsOperators(value, fieldId));
                },
                getDataForAdvancedFilter: function (fieldDefinition) {
                    return {
                        minValue: fieldDefinition.minValue,
                        maxValue: fieldDefinition.maxValue
                    };
                },
                getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                    /**
                     * Convert from:
                     *
                     *  "and": [
                     *    {
                     *      "gte": {
                     *        "536870917": -5
                     *      }
                     *    },
                     *    {
                     *      "lte": {
                     *        "536870917": -1 // or "-1"
                     *      }
                     *    }
                     *  ]
                     *
                     * to:
                     *
                     * {
                     *   filterOptionId: '536870917',
                     *   value: [-5, -1]
                     * }
                     *
                     */
                    var filterValue = [null, null];
                    var processRange = function (operators) {
                        var gteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Gte]; });
                        if (gteOperator) {
                            var fromValue = parseFloat(gteOperator[i1$1.RecordGridFilterOperator.Gte][fieldId]);
                            if (_this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {
                                filterValue[0] = fromValue;
                            }
                        }
                        var lteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Lte]; });
                        if (lteOperator) {
                            var toValue = parseFloat(lteOperator[i1$1.RecordGridFilterOperator.Lte][fieldId]);
                            if (_this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {
                                filterValue[1] = toValue;
                            }
                        }
                    };
                    if (filterLogic === i1$1.RecordGridFilterDataLogic.And) {
                        processRange(filterOperators);
                    }
                    else if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                        var andOperator = lodash.find(filterOperators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterDataLogic.And]; });
                        if (andOperator) {
                            processRange(andOperator[i1$1.RecordGridFilterDataLogic.And]);
                        }
                        else if (filterOperators.length === 1) {
                            var eqValue = filterOperators[0][i1$1.RecordGridFilterOperator.Eq][fieldId];
                            if (eqValue !== '$NULL$' && !eqValue[i1$1.RecordGridNamedFilterOptionKey]) {
                                eqValue = parseFloat(eqValue);
                                filterValue = [eqValue, eqValue];
                            }
                        }
                    }
                    var namedFilterOptionGuids = _this.getNamedFilterOptionGuids(filterOperators, fieldId);
                    return {
                        filterOptionId: fieldId,
                        value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)
                    };
                }
            };
            return _c = {},
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.character] = textColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedCharacter] = textColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.attachment] = textColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.integer] = numericColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.decimal] = numericColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.real] = numericColumnFilterConfig,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.selection] = {
                    filterOptionDataType: i1.AdvancedFilterOptionDataType.selection,
                    getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                        var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                        return _this.rxRecordGridFilterService.joinQueryFilters(filterTag.value.filterValue
                            .map(function (filterValue) { return _this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', filterValue); })
                            .concat(selectedNamedOptionExpressions), QueryFiltersLogic.Or);
                    },
                    getDataForAdvancedFilter: function (fieldDefinition) {
                        var selectOptions = lodash.map(fieldDefinition.optionLabelsById, function (label, optionId) { return ({
                            id: optionId,
                            name: label
                        }); });
                        if (fieldDefinition.fieldOption === i1$4.RX_RECORD_DEFINITION.fieldOptions.optional) {
                            selectOptions.unshift({
                                id: '$NULL$',
                                name: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label')
                            });
                        }
                        return {
                            selectOptions: selectOptions,
                            selectTexts: null
                        };
                    },
                    getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                        var namedFilterOptionOperators = _this.getNamedFilterOptionsOperators(value, fieldId);
                        return {
                            or: value.filterValue
                                .map(function (optionId) {
                                return _this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Eq, fieldId, optionId);
                            })
                                .concat(namedFilterOptionOperators)
                        };
                    },
                    getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                        var filterValue = [];
                        var namedFilterOptionsGuids = [];
                        if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                            filterOperators.forEach(function (filterOperator) {
                                var operator = Object.keys(filterOperator)[0];
                                if (operator === i1$1.RecordGridFilterOperator.Eq) {
                                    var value = filterOperator[operator][fieldId];
                                    if (lodash.isString(value)) {
                                        filterValue.push(value);
                                    }
                                    else if (value[i1$1.RecordGridNamedFilterOptionKey]) {
                                        namedFilterOptionsGuids.push(value[i1$1.RecordGridNamedFilterOptionKey]);
                                    }
                                }
                            });
                        }
                        return {
                            filterOptionId: fieldId,
                            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionsGuids)
                        };
                    }
                },
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.timeOnly] = {
                    filterOptionDataType: i1.AdvancedFilterOptionDataType.time,
                    getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                        var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                        var _c = __read(filterTag.value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue && fromValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('HH:mm:ss')));
                        }
                        if (toValue && toValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('HH:mm:ss')));
                        }
                        var valueQuery = _this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);
                        return _this.rxRecordGridFilterService.joinQueryFilters(valueQuery ? __spreadArray([valueQuery], __read(selectedNamedOptionExpressions)) : selectedNamedOptionExpressions, QueryFiltersLogic.Or);
                    },
                    getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                        var _c = __read(value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Gte, fieldId, fromValue && fromValue.isValid() ? fromValue.format('HH:mm:ss') : ''));
                        }
                        if (toValue) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Lte, fieldId, toValue && toValue.isValid() ? toValue.format('HH:mm:ss') : ''));
                        }
                        return _this.getFilterRangeDataOperator(queries, _this.getNamedFilterOptionsOperators(value, fieldId));
                    },
                    getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                        var filterValue = [null, null];
                        var processRange = function (operators) {
                            var gteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Gte]; });
                            if (gteOperator) {
                                var fromValue = moment__default["default"](gteOperator[i1$1.RecordGridFilterOperator.Gte][fieldId], 'LTS');
                                if (fromValue.isValid()) {
                                    filterValue[0] = fromValue;
                                }
                            }
                            var lteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Lte]; });
                            if (lteOperator) {
                                var toValue = moment__default["default"](lteOperator[i1$1.RecordGridFilterOperator.Lte][fieldId], 'LTS');
                                if (toValue.isValid()) {
                                    filterValue[1] = toValue;
                                }
                            }
                        };
                        if (filterLogic === i1$1.RecordGridFilterDataLogic.And) {
                            processRange(filterOperators);
                        }
                        else if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                            var andOperator = lodash.find(filterOperators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterDataLogic.And]; });
                            if (andOperator) {
                                processRange(andOperator[i1$1.RecordGridFilterDataLogic.And]);
                            }
                            else if (filterOperators.length === 1) {
                                var eqValue = filterOperators[0][i1$1.RecordGridFilterOperator.Eq][fieldId];
                                if (eqValue !== '$NULL$' && !eqValue[i1$1.RecordGridNamedFilterOptionKey]) {
                                    eqValue = moment__default["default"](eqValue, 'LTS');
                                    filterValue = [eqValue, eqValue];
                                }
                            }
                        }
                        var namedFilterOptionGuids = _this.getNamedFilterOptionGuids(filterOperators, fieldId);
                        return {
                            filterOptionId: fieldId,
                            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)
                        };
                    }
                },
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.dateOnly] = {
                    filterOptionDataType: i1.AdvancedFilterOptionDataType.date,
                    getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                        var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                        var _c = __read(filterTag.value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue && fromValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('YYYY-MM-DD')));
                        }
                        if (toValue && toValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('YYYY-MM-DD')));
                        }
                        var valueQuery = _this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);
                        return _this.rxRecordGridFilterService.joinQueryFilters(valueQuery ? __spreadArray([valueQuery], __read(selectedNamedOptionExpressions)) : selectedNamedOptionExpressions, QueryFiltersLogic.Or);
                    },
                    getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                        var _c = __read(value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Gte, fieldId, fromValue && fromValue.isValid() ? fromValue.format('YYYY-MM-DD') : ''));
                        }
                        if (toValue) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Lte, fieldId, toValue && toValue.isValid() ? toValue.format('YYYY-MM-DD') : ''));
                        }
                        return _this.getFilterRangeDataOperator(queries, _this.getNamedFilterOptionsOperators(value, fieldId));
                    },
                    getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                        return _this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);
                    }
                },
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.dateTime] = {
                    filterOptionDataType: i1.AdvancedFilterOptionDataType.datetime,
                    getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                        var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                        var _c = __read(filterTag.value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue === null || fromValue === void 0 ? void 0 : fromValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.toISOString()));
                        }
                        if (toValue === null || toValue === void 0 ? void 0 : toValue.isValid()) {
                            queries.push(_this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.toISOString()));
                        }
                        var valueQuery = _this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);
                        return _this.rxRecordGridFilterService.joinQueryFilters(valueQuery ? __spreadArray([valueQuery], __read(selectedNamedOptionExpressions)) : selectedNamedOptionExpressions, QueryFiltersLogic.Or);
                    },
                    getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                        var _c = __read(value.filterValue.map(function (value) { return moment__default["default"](value); }), 2), fromValue = _c[0], toValue = _c[1];
                        var queries = [];
                        if (fromValue === null || fromValue === void 0 ? void 0 : fromValue.isValid()) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Gte, fieldId, fromValue.toISOString()));
                        }
                        if (toValue === null || toValue === void 0 ? void 0 : toValue.isValid()) {
                            queries.push(_this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Lte, fieldId, toValue.toISOString()));
                        }
                        return _this.getFilterRangeDataOperator(queries, _this.getNamedFilterOptionsOperators(value, fieldId));
                    },
                    getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                        return _this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);
                    }
                },
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.boolean] = {
                    filterOptionDataType: i1.AdvancedFilterOptionDataType.boolean,
                    getQueryFilter: function (filterTag, fieldDefinition, fieldId, namedFilterOptions) {
                        var selectedNamedOptionExpressions = _this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);
                        return _this.rxRecordGridFilterService.joinQueryFilters(lodash.castArray(filterTag.value.filterValue)
                            .map(function (filterValue) { return _this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', _this.getBooleanFilterValue(filterValue)); })
                            .concat(selectedNamedOptionExpressions), QueryFiltersLogic.Or);
                    },
                    getRecordGridFilterData: function (value, fieldDefinition, fieldId) {
                        return {
                            or: lodash.castArray(value.filterValue)
                                .map(function (filterValue) { return _this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Eq, fieldId, _this.getBooleanFilterValue(filterValue)); })
                                .concat(_this.getNamedFilterOptionsOperators(value, fieldId))
                        };
                    },
                    getDataForAdvancedFilter: function (fieldDefinition) {
                        return {
                            selectOptions: [
                                {
                                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.true'),
                                    id: true
                                },
                                {
                                    name: _this.translateService.instant('com.bmc.arsys.rx.client.common.false'),
                                    id: false
                                },
                                {
                                    name: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'),
                                    id: 'blank'
                                }
                            ],
                            isRequired: fieldDefinition.fieldOption === i1$4.RecordFieldOption.Required
                        };
                    },
                    getSelectedAdvancedFilterData: function (filterLogic, filterOperators, fieldDefinition, fieldId) {
                        var filterValue;
                        if (fieldDefinition.fieldOption === i1$4.RecordFieldOption.Required) {
                            if (filterOperators.length === 1) {
                                var eqOperator = lodash.find(filterOperators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Eq]; });
                                if (eqOperator) {
                                    var savedFilterValue = eqOperator[i1$1.RecordGridFilterOperator.Eq][fieldId];
                                    if (savedFilterValue === '$NULL$') {
                                        filterValue = null;
                                    }
                                    else {
                                        filterValue = [savedFilterValue === 'true'];
                                    }
                                }
                            }
                            else {
                                filterValue = null;
                            }
                        }
                        else {
                            filterValue = [];
                            if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                                filterOperators.forEach(function (filterOperator) {
                                    var operator = Object.keys(filterOperator)[0];
                                    if (operator === i1$1.RecordGridFilterOperator.Eq) {
                                        var value = filterOperator[operator][fieldId];
                                        if (!value[i1$1.RecordGridNamedFilterOptionKey]) {
                                            switch (value) {
                                                case 'true':
                                                    filterValue.push(true);
                                                    break;
                                                case '$NULL$':
                                                    filterValue.push(i1.booleanDataTypeBlankValue);
                                                    break;
                                                default:
                                                    filterValue.push(false);
                                                    break;
                                            }
                                        }
                                    }
                                });
                            }
                        }
                        var namedFilterOptionGuids = _this.getNamedFilterOptionGuids(filterOperators, fieldId);
                        return filterValue
                            ? {
                                filterOptionId: fieldId,
                                value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)
                            }
                            : null;
                    }
                },
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.recordInstance] = null,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.object] = null,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.recordInstanceProcessVariable] = null,
                _c[i1$4.RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance] = null,
                _c;
        };
        RxRecordGridFilterConfigService.prototype.getDateSelectedAdvancedFilterData = function (fieldId, filterLogic, filterOperators) {
            var filterValue = [null, null];
            var processRange = function (operators) {
                var gteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Gte]; });
                if (gteOperator) {
                    var fromValue = moment__default["default"](gteOperator[i1$1.RecordGridFilterOperator.Gte][fieldId]);
                    if (fromValue.isValid()) {
                        filterValue[0] = fromValue;
                    }
                }
                var lteOperator = lodash.find(operators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Lte]; });
                if (lteOperator) {
                    var toValue = moment__default["default"](lteOperator[i1$1.RecordGridFilterOperator.Lte][fieldId]);
                    if (toValue.isValid()) {
                        filterValue[1] = toValue;
                    }
                }
            };
            if (filterLogic === i1$1.RecordGridFilterDataLogic.And) {
                processRange(filterOperators);
            }
            else if (filterLogic === i1$1.RecordGridFilterDataLogic.Or) {
                var andOperator = lodash.find(filterOperators, function (filterOperator) { return filterOperator[i1$1.RecordGridFilterDataLogic.And]; });
                if (andOperator) {
                    processRange(andOperator[i1$1.RecordGridFilterDataLogic.And]);
                }
                else if (filterOperators.length === 1) {
                    var eqValue = filterOperators[0][i1$1.RecordGridFilterOperator.Eq][fieldId];
                    if (eqValue !== '$NULL$' && !eqValue[i1$1.RecordGridNamedFilterOptionKey]) {
                        eqValue = moment__default["default"](eqValue);
                        filterValue = [eqValue, eqValue];
                    }
                }
            }
            return {
                filterOptionId: fieldId,
                value: new RxRecordGridAdvancedFilterValue(filterValue, this.getNamedFilterOptionGuids(filterOperators, fieldId))
            };
        };
        RxRecordGridFilterConfigService.prototype.getFilterRangeDataOperator = function (queries, namedFilterOptionOperators) {
            var andOperator = {
                and: queries
            };
            if (namedFilterOptionOperators.length) {
                return {
                    or: queries.length ? namedFilterOptionOperators.concat(andOperator) : namedFilterOptionOperators
                };
            }
            else {
                return andOperator;
            }
        };
        RxRecordGridFilterConfigService.prototype.getNamedFilterOptionGuids = function (filterOperators, fieldId) {
            return filterOperators
                .filter(function (filterOperator) { return filterOperator[i1$1.RecordGridFilterOperator.Eq]; })
                .map(function (operator) {
                var operatorElementElement = operator[i1$1.RecordGridFilterOperator.Eq][fieldId];
                return operatorElementElement ? operatorElementElement[i1$1.RecordGridNamedFilterOptionKey] : null;
            })
                .filter(function (guid) { return Boolean(guid); });
        };
        RxRecordGridFilterConfigService.prototype.getSelectedNamedOptionExpressions = function (namedFilterOptions, filterTag) {
            var _this = this;
            return namedFilterOptions
                .filter(function (option) { return filterTag.value.namedOptions.includes(option.guid); })
                .map(function (option) { return option.filterExpression.replace(_this.associatedFieldIdPatternRegExp, '${$1}'); });
        };
        RxRecordGridFilterConfigService.prototype.getNamedFilterOptionsOperators = function (value, fieldId) {
            var _this = this;
            return value.namedOptions.map(function (guid) {
                var _c;
                return _this.getRecordGridFilterOperator(i1$1.RecordGridFilterOperator.Eq, fieldId, (_c = {},
                    _c[i1$1.RecordGridNamedFilterOptionKey] = guid,
                    _c));
            });
        };
        RxRecordGridFilterConfigService.prototype.getRecordGridFilterOperator = function (operator, fieldId, value) {
            var _c, _d;
            return _c = {}, _c[operator] = (_d = {}, _d[fieldId] = value, _d), _c;
        };
        RxRecordGridFilterConfigService.prototype.getBooleanFilterValue = function (filterValue) {
            return filterValue ? (filterValue === i1.booleanDataTypeBlankValue ? '$NULL$' : 'true') : 'false';
        };
        return RxRecordGridFilterConfigService;
    }());
    RxRecordGridFilterConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterConfigService, deps: [{ token: RxRecordGridFilterService }, { token: i2__namespace$1.RxNumberUtilsService }, { token: i2__namespace$6.RxNamedListService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$5.RxRecordInstanceUtilsService }, { token: RxRecordGridUtilsService }, { token: i1__namespace$1.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridFilterConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: RxRecordGridFilterService }, { type: i2__namespace$1.RxNumberUtilsService }, { type: i2__namespace$6.RxNamedListService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$5.RxRecordInstanceUtilsService }, { type: RxRecordGridUtilsService }, { type: i1__namespace$1.RxDefinitionNameService }]; } });

    var FilterTagsComponent = /** @class */ (function () {
        function FilterTagsComponent(rxRecordGridUtilsService) {
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.restTagsDropdownPlacement = ['bottom', 'bottom-right', 'auto'];
            this.removeTag = new i0.EventEmitter();
            this.trackByForFilterTags = this.trackByForFilterTags.bind(this);
        }
        FilterTagsComponent.prototype.getTranslateParams = function () {
            return { count: this.getRestTagsCount() };
        };
        FilterTagsComponent.prototype.getRestTagsCount = function () {
            return this.tagsLimit && this.tags ? this.tags.length - this.tagsLimit : 0;
        };
        FilterTagsComponent.prototype.onRemoveFilterTag = function (tag) {
            var _this = this;
            var filterOption = tag.data.filterOption;
            var tags = lodash.clone(this.tags);
            var index;
            if (lodash.isNull(filterOption)) {
                index = lodash.findIndex(tags, function (toolbarTag) { return _this.rxRecordGridUtilsService.isSharedFilterPresetTag(toolbarTag); });
            }
            else {
                var filterOptionId_1 = tag.data.filterOption.id;
                index = lodash.findIndex(tags, function (toolbarTag) { return lodash.get(toolbarTag.data.filterOption, 'id') === filterOptionId_1; });
            }
            if (index > -1) {
                tags.splice(index, 1);
            }
            this.removeTag.emit({ removedTag: tag, newTags: tags });
        };
        FilterTagsComponent.prototype.trackByForFilterTags = function (index, tag) {
            return this.rxRecordGridUtilsService.isSharedFilterPresetTag(tag) ? index : tag.data.filterOption.id || index;
        };
        return FilterTagsComponent;
    }());
    FilterTagsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FilterTagsComponent, deps: [{ token: RxRecordGridUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FilterTagsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FilterTagsComponent, selector: "rx-filter-tags", inputs: { tags: "tags", isDisabled: "isDisabled", tagsLimit: "tagsLimit", restTagsDropdownPlacement: "restTagsDropdownPlacement" }, outputs: { removeTag: "removeTag" }, ngImport: i0__namespace, template: "<div>\n  <adapt-tag\n    class=\"mr-1\"\n    [removable]=\"!isDisabled\"\n    [disabled]=\"isDisabled\"\n    *ngFor=\"\n      let tag of tags | slice: 0:(tagsLimit ? tagsLimit : tags?.length);\n      let index = index;\n      trackBy: trackByForFilterTags\n    \"\n    type=\"active\"\n    (remove)=\"onRemoveFilterTag(tag)\"\n  >\n    <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n  </adapt-tag>\n\n  <span adaptDropdown *ngIf=\"getRestTagsCount() > 0\" [appendToBody]=\"true\" [placement]=\"restTagsDropdownPlacement\">\n    <button adaptDropdownToggle type=\"button\" class=\"filter-tags__dropdown-toggle btn btn-link p-0 ml-1\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.filters.show-more-filters.label'\n          | translate: getTranslateParams()\n      }}\n    </button>\n\n    <div adaptDropdownMenu class=\"dropdown-menu filter-tags__dropdown-menu p-2\">\n      <div *ngFor=\"let tag of tags | slice: -getRestTagsCount(); let index = index; trackBy: trackByForFilterTags\">\n        <adapt-tag type=\"active\" [removable]=\"!isDisabled\" (remove)=\"onRemoveFilterTag(tag)\">\n          <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n        </adapt-tag>\n      </div>\n    </div>\n  </span>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.filter-tags__dropdown-toggle:after{border:0!important}.filter-tags__tag-text{display:table-cell;max-width:190px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.filter-tags__dropdown-menu .filter-tags__tag-text{max-width:350px}\n"], components: [{ type: i1__namespace.AdaptTagComponent, selector: "adapt-tag", inputs: ["type", "removable", "disabled"], outputs: ["remove"] }, { type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }], pipes: { "slice": i3__namespace.SlicePipe, "translate": i2__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FilterTagsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-filter-tags',
                        templateUrl: './filter-tags.component.html',
                        styleUrls: ['./filter-tags.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: RxRecordGridUtilsService }]; }, propDecorators: { tags: [{
                    type: i0.Input
                }], isDisabled: [{
                    type: i0.Input
                }], tagsLimit: [{
                    type: i0.Input
                }], restTagsDropdownPlacement: [{
                    type: i0.Input
                }], removeTag: [{
                    type: i0.Output
                }] } });

    var RecordGridFilterSelectControlComponent = /** @class */ (function (_super) {
        __extends(RecordGridFilterSelectControlComponent, _super);
        function RecordGridFilterSelectControlComponent(injector, rxModalService, rxRecordGridUtilsService, rxRecordGridFilterConfigService, rxRecordDefinitionCacheService, rxRecordGridFilterService, rxRecordGridFilterHelperService, rxRecordDefinitionService, rxGuidService, rxRecordGridAdvancedFilteringService, rxGlobalCacheService, rxDefinitionNameService) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.rxModalService = rxModalService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxRecordGridFilterConfigService = rxRecordGridFilterConfigService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordGridFilterService = rxRecordGridFilterService;
            _this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.rxGuidService = rxGuidService;
            _this.rxRecordGridAdvancedFilteringService = rxRecordGridAdvancedFilteringService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.advancedFilterData = {
                filterOptions: [],
                selectedFilters: [],
                filterTexts: {
                    initialDropdownAnchorLabel: 'Filter'
                },
                recordGridFilterConfigs: null,
                fieldDefinitionsById: {},
                fieldDefinitionsInitialized$: new rxjs.Subject(),
                filterValueInitialized$: new rxjs.Subject(),
                associationDescriptors: []
            };
            _this.subscription = new rxjs.Subscription();
            _this.getNamedFilterOptions = _this.getNamedFilterOptions.bind(_this);
            _this.initEmptyValue();
            _this.advancedFilterData.recordGridFilterConfigs = _this.rxRecordGridFilterConfigService.getConfigs();
            _this.subscription.add(rxjs.combineLatest([
                _this.advancedFilterData.filterValueInitialized$,
                _this.advancedFilterData.fieldDefinitionsInitialized$
            ]).subscribe(function () {
                _this.initSelectedAdvancedFilters(_this.value);
            }));
            return _this;
        }
        RecordGridFilterSelectControlComponent.prototype.getGroupFilterName = function (model) {
            var _a;
            return (_a = this.groupFilterItems.find(function (item) { return item.value === model; })) === null || _a === void 0 ? void 0 : _a.name;
        };
        RecordGridFilterSelectControlComponent.prototype.onGroupFilterValueModelChange = function (model) {
            this.groupFilterValue = model;
        };
        RecordGridFilterSelectControlComponent.prototype.ngOnInit = function () {
            this.initFilterOptions();
        };
        RecordGridFilterSelectControlComponent.prototype.initEmptyValue = function () {
            this.innerValue = {
                basicFilters: null,
                filtersJson: null
            };
        };
        RecordGridFilterSelectControlComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (changes.options &&
                changes.options.previousValue &&
                ((_a = changes.options.currentValue.primaryRecordDefinition) === null || _a === void 0 ? void 0 : _a.name) !==
                    ((_b = changes.options.previousValue.primaryRecordDefinition) === null || _b === void 0 ? void 0 : _b.name)) {
                this.initEmptyValue();
                this.advancedFilterData.selectedFilters = [];
                this.advancedFilterData.filterOptions = [];
                this.initFilterOptions();
            }
        };
        RecordGridFilterSelectControlComponent.prototype.initFilterOptions = function () {
            var _this = this;
            this.groupFilterItems = [];
            if (this.options.primaryRecordDefinition) {
                this.rxRecordGridUtilsService
                    .getAssociationDescriptors(this.options.primaryRecordDefinition.name)
                    .pipe(operators.switchMap(function (associationDescriptors) {
                    _this.advancedFilterData.associationDescriptors = associationDescriptors;
                    var recordDefinitionNames = lodash.uniq(associationDescriptors.map(function (associationDescriptor) { return associationDescriptor.recordDefinitionName; }));
                    var recordDefinitions$ = recordDefinitionNames.length
                        ? rxjs.forkJoin(recordDefinitionNames.map(function (name) { return _this.rxRecordDefinitionCacheService.getRecordDefinition(name); }))
                        : rxjs.of([]);
                    return recordDefinitions$.pipe(operators.map(function (recordDefinitions) { return ({ recordDefinitions: recordDefinitions, associationDescriptors: associationDescriptors }); }));
                }), operators.take(1))
                    .subscribe(function (_c) {
                    var _d;
                    var recordDefinitions = _c.recordDefinitions, associationDescriptors = _c.associationDescriptors;
                    var primaryRecordDefinition = lodash.cloneDeep(_this.options.primaryRecordDefinition);
                    __spreadArray([primaryRecordDefinition], __read(recordDefinitions)).forEach(function (recordDefinition) {
                        if (!recordDefinition.fieldDefinitionsById) {
                            recordDefinition.fieldDefinitionsById =
                                _this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);
                        }
                    });
                    _this.groupFilterValue = primaryRecordDefinition.name;
                    _this.advancedFilterData.fieldDefinitionsById =
                        _this.rxRecordGridAdvancedFilteringService.addAssociationFieldsToFieldDefinitionsById(primaryRecordDefinition.fieldDefinitionsById, associationDescriptors, recordDefinitions);
                    associationDescriptors.forEach(function (associationDescriptor) {
                        var _c;
                        var currentRecordDefinition = lodash.find(recordDefinitions, function (recordDefinition) { return recordDefinition.name === associationDescriptor.recordDefinitionName; });
                        _this.groupFilterItems.push({
                            name: associationDescriptor.label,
                            value: associationDescriptor.label
                        });
                        (_c = _this.advancedFilterData.filterOptions).push.apply(_c, __spreadArray([], __read(_this.getFilterOptions(currentRecordDefinition, associationDescriptor, associationDescriptor.label))));
                    });
                    _this.groupFilterItems = _this.groupFilterItems.sort(function (gropFilter, gropFilterToCompare) { return gropFilter.name.localeCompare(gropFilterToCompare.name); });
                    var mainRecordDefinitionName = _this.rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name);
                    (_d = _this.advancedFilterData.filterOptions).push.apply(_d, __spreadArray([], __read(_this.getFilterOptions(primaryRecordDefinition, null, null))));
                    _this.groupFilterItems.unshift({
                        name: mainRecordDefinitionName,
                        value: primaryRecordDefinition.name
                    });
                    _this.advancedFilterData.fieldDefinitionsInitialized$.next();
                });
            }
        };
        RecordGridFilterSelectControlComponent.prototype.onRemoveFilterTag = function (event) {
            var selectedFilters = this.advancedFilterData.selectedFilters.slice();
            var filterOptionId = event.removedTag.data.filterOption.id;
            var index = lodash.findIndex(selectedFilters, function (selectedFilter) { return selectedFilter.filterOptionId === filterOptionId; });
            selectedFilters.splice(index, 1);
            this.onAdvancedFiltersChange(selectedFilters);
        };
        RecordGridFilterSelectControlComponent.prototype.getFilterOptions = function (recordDefinition, associationDescriptor, prefix) {
            var _this = this;
            var fieldDefinitions = recordDefinition.fieldDefinitions;
            return fieldDefinitions
                .map(function (fieldDefinition) {
                var filterConfig = _this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];
                var label = _this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, null);
                var fieldId = _this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor);
                var filterOption = _this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(fieldId, label, fieldDefinition, filterConfig, false, {
                    optionalBooleanFilter: _this.fieldsProvider.optionalBooleanFilter,
                    requiredBooleanFilter: _this.fieldsProvider.requiredBooleanFilter,
                    inputsForStringWithTypeAheadTemplate: _this.fieldsProvider.inputsForStringWithTypeAheadTemplate,
                    inputsForStringTypeTemplate: _this.fieldsProvider.inputsForStringTypeTemplate,
                    inputsForNumberTypeTemplate: _this.fieldsProvider.inputsForNumberTypeTemplate,
                    inputsForTimeTypeTemplate: _this.fieldsProvider.inputsForTimeTypeTemplate,
                    inputsForDateTypeTemplate: _this.fieldsProvider.inputsForDateTypeTemplate,
                    inputsForDatetimeTypeTemplate: _this.fieldsProvider.inputsForDatetimeTypeTemplate,
                    inputsForSelectionTypeTemplate: _this.fieldsProvider.inputsForSelectionTypeTemplate
                }, prefix ? prefix + " > " + label : null, _this.options.namedFilterOptions ? _this.options.namedFilterOptions[fieldId] : []);
                var recordDefinitionName = associationDescriptor
                    ? associationDescriptor.label
                    : _this.options.primaryRecordDefinition.name;
                filterOption.isHidden = function () { var _a; return _this.groupFilterValue !== recordDefinitionName || ((_a = _this.options.selectedFieldIds) === null || _a === void 0 ? void 0 : _a.includes(fieldId)) === false; };
                return filterOption;
            })
                .sort(function (filterOption1, filterOption2) { return filterOption1.label.localeCompare(filterOption2.label); });
        };
        RecordGridFilterSelectControlComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        RecordGridFilterSelectControlComponent.prototype.onAdvancedFiltersChange = function (selectedFilters) {
            var _this = this;
            this.advancedFilterData.selectedFilters = selectedFilters;
            var oldBasicFilters = this.value.basicFilters || [];
            var basicFilters = lodash.reduce(selectedFilters, function (recordGridFilters, selectedFilter) {
                var fieldId = selectedFilter.filterOptionId;
                var fieldDefinition = _this.advancedFilterData.fieldDefinitionsById[fieldId];
                var filterConfig = _this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];
                var columnRecordGridFilterData = filterConfig.getRecordGridFilterData(selectedFilter.value, fieldDefinition, fieldId);
                (columnRecordGridFilterData.or || columnRecordGridFilterData.and).forEach(function (recordGridFilterOperator) {
                    var gridFilterValue = lodash.values(recordGridFilterOperator)[0][fieldId];
                    var gridFilterDisplayValue = lodash.values(recordGridFilterOperator)[0]['$DISPLAYVALUE$'];
                    var columnOldBasicFilter = lodash.find(oldBasicFilters, function (oldBasicFilter) { return oldBasicFilter.fieldId === fieldId &&
                        oldBasicFilter.value === gridFilterValue &&
                        lodash.every(recordGridFilters, function (gridFilter) { return gridFilter.guid !== oldBasicFilter.guid; }); });
                    var recordGridFilter = {
                        fieldId: fieldId,
                        value: gridFilterValue,
                        $DISPLAYVALUE$: gridFilterDisplayValue,
                        guid: (columnOldBasicFilter && columnOldBasicFilter.guid) || _this.rxGuidService.generate()
                    };
                    recordGridFilters.push(recordGridFilter);
                });
                return recordGridFilters;
            }, []);
            var recordGridFilterData = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(selectedFilters, this.advancedFilterData.fieldDefinitionsById, this.advancedFilterData.recordGridFilterConfigs);
            var filtersJson = lodash.isEmpty(recordGridFilterData) ? null : JSON.stringify(recordGridFilterData);
            if (filtersJson) {
                filtersJson = this.rxRecordGridFilterHelperService.denormalizeFilterString(filtersJson, basicFilters);
            }
            this.filtersModel = {
                basicFilters: basicFilters,
                filtersJson: filtersJson
            };
            this.value = {
                basicFilters: basicFilters,
                filtersJson: filtersJson
            };
        };
        RecordGridFilterSelectControlComponent.prototype.onWriteValue = function (value) {
            if (!lodash.isEqual(this.filtersModel, value)) {
                this.advancedFilterData.filterValueInitialized$.next();
            }
        };
        RecordGridFilterSelectControlComponent.prototype.initSelectedAdvancedFilters = function (value) {
            var _this = this;
            if ((value === null || value === void 0 ? void 0 : value.filtersJson) && !lodash.isEmpty(value.basicFilters)) {
                this.rxRecordGridFilterService
                    .getSelectedFiltersFromPredefinedFilter(value.filtersJson, value.basicFilters, this.advancedFilterData.fieldDefinitionsById, this.advancedFilterData.recordGridFilterConfigs, this.options.primaryRecordDefinition, this.advancedFilterData.filterOptions, this.advancedFilterData.associationDescriptors)
                    .pipe(operators.map(function (selectedFilters) { return _this.options.namedFilterOptions
                    ? _this.rxRecordGridFilterService.clearRemovedNamedFilterOptions(selectedFilters, _this.options.namedFilterOptions)
                    : selectedFilters; }))
                    .subscribe(function (selectedFilters) {
                    _this.advancedFilterData.selectedFilters = selectedFilters;
                });
            }
        };
        RecordGridFilterSelectControlComponent.prototype.getNamedFilterOptions = function (filterOptionConfig) {
            return this.options.namedFilterOptions ? this.options.namedFilterOptions[filterOptionConfig.id] : [];
        };
        RecordGridFilterSelectControlComponent.prototype.getTags = function (filtersExpressionsTags) {
            var _this = this;
            var _a;
            var tags = (_a = filtersExpressionsTags === null || filtersExpressionsTags === void 0 ? void 0 : filtersExpressionsTags.filter(function (filterTag) { return lodash.isEmpty(filterTag.data.validationErrors); })) !== null && _a !== void 0 ? _a : [];
            var tags$ = tags.map(function (tag) {
                var _a, _b;
                if (tag.data.filterOption) {
                    var fieldId = tag.data.filterOption.id;
                    var fieldDefinition = tag.data.filterOption.data;
                    var filterConfig = _this.advancedFilterData.recordGridFilterConfigs[fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.resourceType];
                    if (lodash.isFunction(filterConfig === null || filterConfig === void 0 ? void 0 : filterConfig.getToolbarTagInfo)) {
                        return filterConfig
                            .getToolbarTagInfo({
                            primaryRecordDefinition: _this.options.primaryRecordDefinition,
                            fieldDefinition: fieldDefinition,
                            value: tag.data.value,
                            tag: tag,
                            fieldId: fieldId,
                            namedFilterOptions: (_b = (_a = _this.options.namedFilterOptions) === null || _a === void 0 ? void 0 : _a[fieldId]) !== null && _b !== void 0 ? _b : []
                        })
                            .pipe(operators.tap(function (tagInfo) { return (tag.data.value.title = tagInfo.tooltip); }), operators.map(function (tagInfo) { return (Object.assign(Object.assign({}, tag), { text: tagInfo.text })); }));
                    }
                }
                return rxjs.of(Object.assign({}, tag));
            });
            return tags$.length ? rxjs.forkJoin(tags$) : rxjs.of([]);
        };
        return RecordGridFilterSelectControlComponent;
    }(i2.ValueAccessor));
    RecordGridFilterSelectControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$6.RxModalService }, { token: RxRecordGridUtilsService }, { token: RxRecordGridFilterConfigService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: RxRecordGridFilterService }, { token: RxRecordGridFilterHelperService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: i2__namespace$1.RxGuidService }, { token: RxRecordGridAdvancedFilteringService }, { token: i1__namespace$1.RxGlobalCacheService }, { token: i1__namespace$1.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridFilterSelectControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridFilterSelectControlComponent, selector: "rx-record-grid-filter-select-control", inputs: { options: "options" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridFilterSelectControlComponent,
                multi: true
            }
        ], viewQueries: [{ propertyName: "fieldsProvider", first: true, predicate: RxAdvancedFilteringFieldsProviderComponent, descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"advancedFilterData.filterOptions\">\n  <adapt-advanced-filter\n    #advancedFilter\n    [hidden]=\"isDisabled\"\n    [appendDropdownToBody]=\"true\"\n    [enableSavedFilters]=\"false\"\n    [filterOptions]=\"advancedFilterData.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"advancedFilterData.selectedFilters\"\n    [texts]=\"advancedFilterData.filterTexts\"\n    [applyFiltersByUserAction]=\"true\"\n    [filterOptionsCustomAreaTemplate]=\"filterOptionsCustomAreaTemplate\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    [anchorDisabled]=\"options.anchorDisabled\"\n  ></adapt-advanced-filter>\n\n  <rx-filter-tags\n    [isDisabled]=\"isDisabled\"\n    [tags]=\"getTags(advancedFilter.filtersExpressionsTags) | async\"\n    [tagsLimit]=\"options.tagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n    [restTagsDropdownPlacement]=\"['right', 'bottom', 'bottom-right', 'auto']\"\n  ></rx-filter-tags>\n</ng-container>\n\n<ng-template #filterOptionsCustomAreaTemplate>\n  <div class=\"p-3 pt-4 pb-4\" *ngIf=\"this.groupFilterItems.length > 1\">\n    <adapt-accordion>\n      <adapt-accordion-tab [title]=\"'Show filters for: ' + getGroupFilterName(groupFilterValue)\" [multiline]=\"true\">\n        <adapt-rx-radiobutton-group\n          class=\"advanced-filter__radiobutton-group\"\n          [ngModel]=\"groupFilterValue\"\n          (ngModelChange)=\"onGroupFilterValueModelChange($event)\"\n        >\n          <adapt-rx-radiobutton\n            name=\"booleanTypeGroup\"\n            class=\"advanced-filter__radiobutton\"\n            *ngFor=\"let groupItem of groupFilterItems\"\n            [value]=\"groupItem.value\"\n            [label]=\"groupItem.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n", styles: [":host ::ng-deep .filter-tags__tag-text{max-width:185px!important}\n"], components: [{ type: i1__namespace.AdaptAdvancedFilterComponent, selector: "adapt-advanced-filter", inputs: ["filterOptions", "savedFilters", "enableDefaultSavedFilter", "defaultSavedFilterId", "busyConfig", "activeSavedFilter", "disableExpressionEditing", "showAnchorButtonLabel", "getCustomExpressionTagFieldModel", "enableSavedFilters", "applyFiltersByUserAction", "canCloseDropdownResolver", "showTabToolbar", "disabledTabResolver", "disabledInputResolver", "showSelectedFiltersCount", "selectedFiltersIndicationStyle", "filterOptionsCustomAreaTemplate", "showTags", "anchorDisabled", "fullWidthEdit", "translateFilterEditingTitleXPixels", "selectedFilters", "isLoading"], outputs: ["selectedFiltersChange", "filterSelectionChange", "deleteSavedFilter", "createNewFilter", "updateSavedFilter", "beforeActiveSavedFilterChange", "activeSavedFilterChange", "removeTag", "filtersCleared", "saveNewFilterClick", "filtersSelectionCanceled", "editSavedFilterClick", "markDefaultSavedFilterClick", "editingSavedFilterCanceled", "filterExpressionTagsChanged"] }, { type: FilterTagsComponent, selector: "rx-filter-tags", inputs: ["tags", "isDisabled", "tagsLimit", "restTagsDropdownPlacement"], outputs: ["removeTag"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: RxAdvancedFilteringFieldsProviderComponent, selector: "rx-advanced-filtering-fields-provider", inputs: ["namedFilterOptionsGetter"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-filter-select-control',
                        templateUrl: './record-grid-filter-select-control.component.html',
                        styleUrls: ['./record-grid-filter-select-control.component.scss'],
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridFilterSelectControlComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$6.RxModalService }, { type: RxRecordGridUtilsService }, { type: RxRecordGridFilterConfigService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: RxRecordGridFilterService }, { type: RxRecordGridFilterHelperService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: i2__namespace$1.RxGuidService }, { type: RxRecordGridAdvancedFilteringService }, { type: i1__namespace$1.RxGlobalCacheService }, { type: i1__namespace$1.RxDefinitionNameService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], fieldsProvider: [{
                    type: i0.ViewChild,
                    args: [RxAdvancedFilteringFieldsProviderComponent, { static: true }]
                }] } });

    exports.RecordGridFilterMode = void 0;
    (function (RecordGridFilterMode) {
        RecordGridFilterMode["Basic"] = "basic";
        RecordGridFilterMode["Expression"] = "expression";
    })(exports.RecordGridFilterMode || (exports.RecordGridFilterMode = {}));

    var RxFilterTagsModule = /** @class */ (function () {
        function RxFilterTagsModule() {
        }
        return RxFilterTagsModule;
    }());
    RxFilterTagsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterTagsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxFilterTagsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterTagsModule, declarations: [FilterTagsComponent], imports: [i3.CommonModule, i1.AdaptTagModule, i1.AdaptDropdownModule, i2$1.TranslateModule], exports: [FilterTagsComponent] });
    RxFilterTagsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterTagsModule, imports: [[i3.CommonModule, i1.AdaptTagModule, i1.AdaptDropdownModule, i2$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterTagsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptTagModule, i1.AdaptDropdownModule, i2$1.TranslateModule],
                        declarations: [FilterTagsComponent],
                        exports: [FilterTagsComponent]
                    }]
            }] });

    var RxNamedFilterOptionsListModule = /** @class */ (function () {
        function RxNamedFilterOptionsListModule() {
        }
        return RxNamedFilterOptionsListModule;
    }());
    RxNamedFilterOptionsListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxNamedFilterOptionsListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListModule, declarations: [RxNamedFilterOptionsListComponent], imports: [i3.CommonModule, i1.AdaptRxCheckboxModule, i2$4.FormsModule], exports: [RxNamedFilterOptionsListComponent] });
    RxNamedFilterOptionsListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListModule, imports: [[i3.CommonModule, i1.AdaptRxCheckboxModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNamedFilterOptionsListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxNamedFilterOptionsListComponent],
                        exports: [RxNamedFilterOptionsListComponent],
                        imports: [i3.CommonModule, i1.AdaptRxCheckboxModule, i2$4.FormsModule]
                    }]
            }] });

    var RecordGridCommonModule = /** @class */ (function () {
        function RecordGridCommonModule() {
        }
        return RecordGridCommonModule;
    }());
    RecordGridCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCommonModule, imports: [i3.CommonModule,
            i1.AdaptRxRadiobuttonModule,
            i1.AdaptRxSelectModule,
            i2$1.TranslateModule,
            i1.AdaptTagModule,
            i2$4.FormsModule, i1__namespace.AdaptDropdownModule, i1.AdaptMetatagModule,
            RxNamedFilterOptionsListModule,
            RxFilterTagsModule], exports: [RxFilterTagsModule, RxNamedFilterOptionsListModule] });
    RecordGridCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCommonModule, imports: [[
                i3.CommonModule,
                i1.AdaptRxRadiobuttonModule,
                i1.AdaptRxSelectModule,
                i2$1.TranslateModule,
                i1.AdaptTagModule,
                i2$4.FormsModule,
                i1.AdaptDropdownModule.forRoot(),
                i1.AdaptMetatagModule,
                RxNamedFilterOptionsListModule,
                RxFilterTagsModule
            ], RxFilterTagsModule, RxNamedFilterOptionsListModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridCommonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i1.AdaptRxRadiobuttonModule,
                            i1.AdaptRxSelectModule,
                            i2$1.TranslateModule,
                            i1.AdaptTagModule,
                            i2$4.FormsModule,
                            i1.AdaptDropdownModule.forRoot(),
                            i1.AdaptMetatagModule,
                            RxNamedFilterOptionsListModule,
                            RxFilterTagsModule
                        ],
                        exports: [RxFilterTagsModule, RxNamedFilterOptionsListModule]
                    }]
            }] });

    var RxStringFilterModule = /** @class */ (function () {
        function RxStringFilterModule() {
        }
        return RxStringFilterModule;
    }());
    RxStringFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxStringFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterModule, declarations: [RxStringFilterComponent], imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule], exports: [RxStringFilterComponent] });
    RxStringFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterModule, imports: [[i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxStringFilterComponent],
                        exports: [RxStringFilterComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule]
                    }]
            }] });

    var RxNumberFilterModule = /** @class */ (function () {
        function RxNumberFilterModule() {
        }
        return RxNumberFilterModule;
    }());
    RxNumberFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxNumberFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterModule, declarations: [RxNumberFilterComponent], imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxCounterModule], exports: [RxNumberFilterComponent] });
    RxNumberFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterModule, imports: [[i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxCounterModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxNumberFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxNumberFilterComponent],
                        exports: [RxNumberFilterComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxCounterModule]
                    }]
            }] });

    var RxDateTimeRangeFilterModule = /** @class */ (function () {
        function RxDateTimeRangeFilterModule() {
        }
        return RxDateTimeRangeFilterModule;
    }());
    RxDateTimeRangeFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxDateTimeRangeFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterModule, declarations: [RxDateTimeRangeFilterComponent], imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxDatetimeModule], exports: [RxDateTimeRangeFilterComponent] });
    RxDateTimeRangeFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterModule, imports: [[i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxDatetimeModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDateTimeRangeFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxDateTimeRangeFilterComponent],
                        exports: [RxDateTimeRangeFilterComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxDatetimeModule]
                    }]
            }] });

    var RxSelectionFilterModule = /** @class */ (function () {
        function RxSelectionFilterModule() {
        }
        return RxSelectionFilterModule;
    }());
    RxSelectionFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxSelectionFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterModule, declarations: [RxSelectionFilterComponent], imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxSelectModule], exports: [RxSelectionFilterComponent] });
    RxSelectionFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterModule, imports: [[i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxSelectModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSelectionFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxSelectionFilterComponent],
                        exports: [RxSelectionFilterComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, RxNamedFilterOptionsListModule, i1.AdaptRxSelectModule]
                    }]
            }] });

    var RxBooleanFilterModule = /** @class */ (function () {
        function RxBooleanFilterModule() {
        }
        return RxBooleanFilterModule;
    }());
    RxBooleanFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxBooleanFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterModule, declarations: [RxBooleanFilterComponent], imports: [i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptRxRadiobuttonModule, i1.AdaptRxSelectModule, i2$4.FormsModule], exports: [RxBooleanFilterComponent] });
    RxBooleanFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterModule, imports: [[i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptRxRadiobuttonModule, i1.AdaptRxSelectModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxBooleanFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxBooleanFilterComponent],
                        exports: [RxBooleanFilterComponent],
                        imports: [i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptRxRadiobuttonModule, i1.AdaptRxSelectModule, i2$4.FormsModule]
                    }]
            }] });

    var RxStringWithTypeAheadFilterModule = /** @class */ (function () {
        function RxStringWithTypeAheadFilterModule() {
        }
        return RxStringWithTypeAheadFilterModule;
    }());
    RxStringWithTypeAheadFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxStringWithTypeAheadFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterModule, declarations: [RxStringWithTypeAheadFilterComponent], imports: [i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule, i2$4.FormsModule, i2$1.TranslateModule], exports: [RxStringWithTypeAheadFilterComponent] });
    RxStringWithTypeAheadFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterModule, imports: [[i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule, i2$4.FormsModule, i2$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxStringWithTypeAheadFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxStringWithTypeAheadFilterComponent],
                        exports: [RxStringWithTypeAheadFilterComponent],
                        imports: [i3.CommonModule, RxNamedFilterOptionsListModule, i1.AdaptMetatagModule, i2$4.FormsModule, i2$1.TranslateModule]
                    }]
            }] });

    var RxAdvancedFilteringFieldsProviderModule = /** @class */ (function () {
        function RxAdvancedFilteringFieldsProviderModule() {
        }
        return RxAdvancedFilteringFieldsProviderModule;
    }());
    RxAdvancedFilteringFieldsProviderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxAdvancedFilteringFieldsProviderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderModule, declarations: [RxAdvancedFilteringFieldsProviderComponent], imports: [i3.CommonModule,
            RxStringFilterModule,
            RxNumberFilterModule,
            RxDateTimeRangeFilterModule,
            RxSelectionFilterModule,
            RxBooleanFilterModule,
            RxStringWithTypeAheadFilterModule], exports: [RxAdvancedFilteringFieldsProviderComponent] });
    RxAdvancedFilteringFieldsProviderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderModule, imports: [[
                i3.CommonModule,
                RxStringFilterModule,
                RxNumberFilterModule,
                RxDateTimeRangeFilterModule,
                RxSelectionFilterModule,
                RxBooleanFilterModule,
                RxStringWithTypeAheadFilterModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdvancedFilteringFieldsProviderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxAdvancedFilteringFieldsProviderComponent],
                        exports: [RxAdvancedFilteringFieldsProviderComponent],
                        imports: [
                            i3.CommonModule,
                            RxStringFilterModule,
                            RxNumberFilterModule,
                            RxDateTimeRangeFilterModule,
                            RxSelectionFilterModule,
                            RxBooleanFilterModule,
                            RxStringWithTypeAheadFilterModule
                        ]
                    }]
            }] });

    var RecordGridFilterSelectControlModule = /** @class */ (function () {
        function RecordGridFilterSelectControlModule() {
        }
        return RecordGridFilterSelectControlModule;
    }());
    RecordGridFilterSelectControlModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridFilterSelectControlModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlModule, declarations: [RecordGridFilterSelectControlComponent], imports: [i3.CommonModule,
            i1.AdaptAdvancedFilteringModule,
            RecordGridCommonModule,
            i1.AdaptAccordionModule,
            i1.AdaptRxRadiobuttonModule,
            i2$4.FormsModule,
            RxAdvancedFilteringFieldsProviderModule], exports: [RecordGridFilterSelectControlComponent] });
    RecordGridFilterSelectControlModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlModule, imports: [[
                i3.CommonModule,
                i1.AdaptAdvancedFilteringModule,
                RecordGridCommonModule,
                i1.AdaptAccordionModule,
                i1.AdaptRxRadiobuttonModule,
                i2$4.FormsModule,
                RxAdvancedFilteringFieldsProviderModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterSelectControlModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RecordGridFilterSelectControlComponent],
                        exports: [RecordGridFilterSelectControlComponent],
                        entryComponents: [RecordGridFilterSelectControlComponent],
                        imports: [
                            i3.CommonModule,
                            i1.AdaptAdvancedFilteringModule,
                            RecordGridCommonModule,
                            i1.AdaptAccordionModule,
                            i1.AdaptRxRadiobuttonModule,
                            i2$4.FormsModule,
                            RxAdvancedFilteringFieldsProviderModule
                        ]
                    }]
            }] });

    var RxRecordGridFilterSelectHelperService = /** @class */ (function () {
        function RxRecordGridFilterSelectHelperService() {
        }
        RxRecordGridFilterSelectHelperService.prototype.getNamedFilterOptionsFromColumns = function (columns) {
            return columns.reduce(function (result, col) {
                var _a;
                if ((_a = col.namedFilterOptions) === null || _a === void 0 ? void 0 : _a.length) {
                    result[col.fieldId] = col.namedFilterOptions
                        .map(function (column) { return (Object.assign(Object.assign({ guid: column.guid }, column.data), { index: lodash.toNumber(column.data.index) })); })
                        .sort(function (a, b) { return a.index - b.index; });
                }
                return result;
            }, {});
        };
        return RxRecordGridFilterSelectHelperService;
    }());
    RxRecordGridFilterSelectHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterSelectHelperService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridFilterSelectHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterSelectHelperService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridFilterSelectHelperService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    var RecordGridDesignComponent = /** @class */ (function () {
        function RecordGridDesignComponent(rxRecordGridConfigUtilsService, rxRecordGridUtilsService) {
            this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
        }
        RecordGridDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.adaptTableConfig$ = this.model.columns$.pipe(operators.map(function (columns) {
                var gridColumns = lodash.sortBy(columns, function (column) { return column.index; });
                var initialSortGridColumn = gridColumns.find(function (gridColumn) { return lodash.isObject(gridColumn.sortable); });
                var sortMeta = {
                    field: null,
                    order: null
                };
                if (initialSortGridColumn) {
                    var gridSortableObject = initialSortGridColumn.sortable;
                    sortMeta = {
                        field: String(initialSortGridColumn.fieldId),
                        order: _this.rxRecordGridConfigUtilsService.getColumnSortOrder(gridSortableObject.direction)
                    };
                }
                return {
                    columns: gridColumns.map(function (gridColumn) { return ({
                        field: gridColumn.fieldId,
                        header: gridColumn.title,
                        sortable: Boolean(gridColumn.sortable),
                        hidden: !gridColumn.visible,
                        testId: _this.rxRecordGridUtilsService.getTestIdForGridColumn(gridColumn.fieldId)
                    }); }),
                    sortMeta: sortMeta,
                    toolbarConfig: {
                        counter: false,
                        quickFilter: true,
                        filter: true,
                        filterTemplate: _this.filterTemplate,
                        filterResults: false,
                        visibleColumnsMenu: true,
                        visibleColumnsMenuTemplate: _this.visibleColumnsMenuTemplate,
                        quickFilterTriggerable: true
                    }
                };
            }), operators.shareReplay(1));
            this.hasRecordDefinitionName$ = this.model.recordDefinition$.pipe(operators.map(Boolean), operators.shareReplay(1));
        };
        RecordGridDesignComponent.prototype.onSort = function (event) {
            var _this = this;
            this.adaptTableConfig$.pipe(operators.take(1)).subscribe(function (adaptTableConfig) {
                if (!lodash.isEqual(event, adaptTableConfig.sortMeta)) {
                    var initialSortColumn = void 0;
                    var column = _this.model.currentGridDesignProperties.columns.find(function (gridColumn) { return gridColumn.fieldId === event.field; });
                    if (lodash.isObject(column.sortable)) {
                        if (column.sortable.direction === exports.ColumnSortDirection.Desc) {
                            initialSortColumn = null;
                        }
                        else {
                            initialSortColumn = { fieldId: column.fieldId, direction: exports.ColumnSortDirection.Desc };
                        }
                    }
                    else {
                        initialSortColumn = { fieldId: column.fieldId, direction: exports.ColumnSortDirection.Asc };
                    }
                    _this.model.componentPropertiesChangeFromCanvas$.next(Object.assign(Object.assign({}, _this.model.currentGridDesignProperties), { initialSortColumn: initialSortColumn }));
                }
            });
        };
        RecordGridDesignComponent.prototype.onBeforeViewComponentDrop = function (data) {
            if (data.draggedViewComponentDescriptor.type === i1$1.RxViewComponentType.ActionButton &&
                !data.draggedViewComponentGuid) {
                data.initialPropertiesByName = Object.assign(Object.assign({}, data.initialPropertiesByName), { style: exports.ActionButtonStyle.Tertiary });
            }
        };
        return RecordGridDesignComponent;
    }());
    RecordGridDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignComponent, deps: [{ token: RxRecordGridConfigUtilsService }, { token: RxRecordGridUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridDesignComponent, selector: "rx-record-grid-design", inputs: { model: "model", isReadOnly: "isReadOnly" }, viewQueries: [{ propertyName: "filterTemplate", first: true, predicate: ["filterTemplate"], descendants: true, static: true }, { propertyName: "visibleColumnsMenuTemplate", first: true, predicate: ["visibleColumnsMenuTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"rx-record-grid-design\" [class.border]=\"!(hasRecordDefinitionName$ | async)\">\n  <adapt-empty-state\n    *ngIf=\"!(hasRecordDefinitionName$ | async); else gridTemplate\"\n    type=\"objects\"\n    label=\"Select a record definition and edit grid columns in the Properties panel.\"\n  ></adapt-empty-state>\n\n  <ng-template #gridTemplate>\n    <rx-canvas-outlet\n      [dropListOrientation]=\"'horizontal'\"\n      class=\"rx-record-grid-design__action-buttons-canvas\"\n      (beforeViewComponentDrop)=\"onBeforeViewComponentDrop($event)\"\n      [dropPredicate]=\"model.actionButtonDropPredicate\"\n    ></rx-canvas-outlet>\n\n    <adapt-table\n      #adaptTable\n      class=\"rx-record-grid-design__table\"\n      [columns]=\"(adaptTableConfig$ | async).columns\"\n      [sortable]=\"!isReadOnly\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'80px'\"\n      [rowExpandMode]=\"\"\n      [sortMode]=\"'single'\"\n      [toolbarConfig]=\"(adaptTableConfig$ | async).toolbarConfig\"\n      [filterable]=\"false\"\n      [sortField]=\"(adaptTableConfig$ | async).sortMeta.field\"\n      [sortOrder]=\"(adaptTableConfig$ | async).sortMeta.order\"\n      [bordered]=\"true\"\n      [totalRecords]=\"0\"\n      (onSort)=\"onSort($event)\"\n      [hasEmptyState]=\"false\"\n      [dontEmitLazyLoadOnInputChange]=\"false\"\n    ></adapt-table>\n  </ng-template>\n</div>\n\n<ng-template #filterTemplate let-context>\n  <span class=\"rx-record-grid-design__toolbar-item btn-link d-icon-refresh grid-toolbar-icon mx-2 p-1\"></span>\n  <div class=\"btn-link px-0 d-icon-left-filter d-icon-right-triangle_down\" *ngIf=\"model.enableFiltering$ | async\">\n    Filter\n  </div>\n</ng-template>\n\n<ng-template #visibleColumnsMenuTemplate></ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-record-grid-design__action-buttons-canvas ::ng-deep rx-canvas-item-container{min-width:100%}.rx-record-grid-design__action-buttons-canvas ::ng-deep .cdk-drop-list{background-color:#f0f1f1;border:1px solid #d6d7d8;border-bottom:0;min-height:48px;display:flex;flex-flow:row wrap}.rx-record-grid-design__action-buttons-canvas ::ng-deep .cdk-drop-list:empty:after{content:\"Drop Action buttons here\";display:block;text-align:center;width:100%;line-height:48px;color:#959899;font-size:.875rem}.rx-record-grid-design__toolbar-item{font-size:.9375rem}.rx-record-grid-design__table ::ng-deep .adapt-table-toolbar{pointer-events:none}\n"], components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }, { type: i1__namespace$7.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-design',
                        templateUrl: './record-grid-design.component.html',
                        styleUrls: ['./record-grid-design.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: RxRecordGridConfigUtilsService }, { type: RxRecordGridUtilsService }]; }, propDecorators: { model: [{
                    type: i0.Input
                }], filterTemplate: [{
                    type: i0.ViewChild,
                    args: ['filterTemplate', { static: true }]
                }], visibleColumnsMenuTemplate: [{
                    type: i0.ViewChild,
                    args: ['visibleColumnsMenuTemplate', { static: true }]
                }], isReadOnly: [{
                    type: i0.Input
                }] } });

    var RecordGridSortEditorControlComponent = /** @class */ (function (_super) {
        __extends(RecordGridSortEditorControlComponent, _super);
        function RecordGridSortEditorControlComponent(renderer, rxRecordGridUtilsService, rxStringService) {
            var _this = _super.call(this) || this;
            _this.renderer = renderer;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxStringService = rxStringService;
            _this.ColumnSortDirection = exports.ColumnSortDirection;
            _this.updateOptionsSubject = new rxjs.BehaviorSubject(null);
            _this.columnOptions$ = _this.updateOptionsSubject.pipe(operators.switchMap(function () { return _this.options.gridColumns && _this.options.recordDefinition
                ? rxjs.forkJoin(_this.options.gridColumns
                    .filter(function (gridColumn) { return gridColumn.sortable; })
                    .map(function (gridColumn) {
                    if (_this.rxStringService.isEmptySafe(gridColumn.title)) {
                        return _this.rxRecordGridUtilsService
                            .getFieldDefinition(gridColumn.fieldId, _this.options.recordDefinition)
                            .pipe(operators.map(function (fieldDefinition) { return ({ id: gridColumn.fieldId, name: "[" + fieldDefinition.name + "]" }); }));
                    }
                    return rxjs.of({ id: gridColumn.fieldId, name: gridColumn.title });
                })).pipe(operators.defaultIfEmpty([]))
                : rxjs.of([]); }));
            _this.selectedColumnOption = [];
            return _this;
        }
        Object.defineProperty(RecordGridSortEditorControlComponent.prototype, "selectedSortDirection", {
            get: function () {
                return this.value ? this.value.direction : null;
            },
            enumerable: false,
            configurable: true
        });
        RecordGridSortEditorControlComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b, _c;
            if (((_a = changes.options) === null || _a === void 0 ? void 0 : _a.previousValue) &&
                (!lodash.isEqual(changes.options.currentValue.gridColumns, changes.options.previousValue.gridColumns) ||
                    ((_b = changes.options.currentValue.recordDefinition) === null || _b === void 0 ? void 0 : _b.name) !==
                        ((_c = changes.options.previousValue.recordDefinition) === null || _c === void 0 ? void 0 : _c.name))) {
                this.updateOptionsSubject.next();
            }
        };
        RecordGridSortEditorControlComponent.prototype.onWriteValue = function (value) {
            var _this = this;
            this.columnOptions$.pipe(operators.take(1)).subscribe(function (columnOptions) {
                _this.selectedColumnOption = value ? [columnOptions.find(function (option) { return option.id === value.fieldId; })] : [];
            });
        };
        RecordGridSortEditorControlComponent.prototype.focus = function () {
            this.renderer.selectRootElement(this.adaptRxSelect.selectButtonRef.nativeElement, true).focus();
        };
        RecordGridSortEditorControlComponent.prototype.onSelectModelChange = function (value) {
            this.selectedColumnOption = value;
            this.value = lodash.isEmpty(value) ? null : { fieldId: lodash.head(value).id, direction: exports.ColumnSortDirection.Asc };
        };
        RecordGridSortEditorControlComponent.prototype.setSortDirection = function (sortDirection) {
            this.value = Object.assign(Object.assign({}, this.value), { direction: sortDirection });
        };
        RecordGridSortEditorControlComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        RecordGridSortEditorControlComponent.prototype.ngOnDestroy = function () {
            this.updateOptionsSubject.complete();
        };
        return RecordGridSortEditorControlComponent;
    }(i2.ValueAccessor));
    RecordGridSortEditorControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: RxRecordGridUtilsService }, { token: i2__namespace$1.RxStringService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridSortEditorControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridSortEditorControlComponent, selector: "rx-record-grid-sort-editor-control", inputs: { options: "options" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridSortEditorControlComponent,
                multi: true
            }
        ], viewQueries: [{ propertyName: "adaptRxSelect", first: true, predicate: ["adaptRxSelect"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"form-group\" [ngClass]=\"{ 'is-required': options.required }\">\n  <label class=\"form-control-label\" *ngIf=\"options.label\">{{ options.label }}</label>\n\n  <div class=\"d-flex\">\n    <adapt-rx-select\n      #adaptRxSelect\n      class=\"pr-1 w-100\"\n      *ngIf=\"columnOptions$ | async as columnOptions\"\n      [options]=\"columnOptions\"\n      [required]=\"options.required\"\n      [disabled]=\"isDisabled\"\n      [ngModel]=\"selectedColumnOption\"\n      (ngModelChange)=\"onSelectModelChange($event)\"\n      [optionFormatter]=\"optionFormatter\"\n      [emptyOption]=\"true\"\n    ></adapt-rx-select>\n\n    <div class=\"btn-group\" data-toggle=\"buttons\" *ngIf=\"selectedColumnOption.length\">\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_up\"\n        (click)=\"setSortDirection(ColumnSortDirection.Asc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Asc\"\n      ></button>\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_down\"\n        (click)=\"setSortDirection(ColumnSortDirection.Desc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Desc\"\n      ></button>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-sort-editor-control',
                        templateUrl: './record-grid-sort-editor-control.component.html',
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridSortEditorControlComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: RxRecordGridUtilsService }, { type: i2__namespace$1.RxStringService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], adaptRxSelect: [{
                    type: i0.ViewChild,
                    args: ['adaptRxSelect', { static: true }]
                }] } });

    var RecordGridSortEditorControlModule = /** @class */ (function () {
        function RecordGridSortEditorControlModule() {
        }
        return RecordGridSortEditorControlModule;
    }());
    RecordGridSortEditorControlModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridSortEditorControlModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlModule, declarations: [RecordGridSortEditorControlComponent], imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxSelectModule], exports: [RecordGridSortEditorControlComponent] });
    RecordGridSortEditorControlModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlModule, imports: [[i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxSelectModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridSortEditorControlModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RecordGridSortEditorControlComponent],
                        exports: [RecordGridSortEditorControlComponent],
                        entryComponents: [RecordGridSortEditorControlComponent],
                        imports: [i3.CommonModule, i2$4.FormsModule, i1.AdaptButtonModule, i1.AdaptRxSelectModule]
                    }]
            }] });

    var RecordGridFilterPresetEditorModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridFilterPresetEditorModalComponent, _super);
        function RecordGridFilterPresetEditorModalComponent(activeModalRef, rxModalService, rxGuidService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxModalService = rxModalService;
            _this.rxGuidService = rxGuidService;
            _this.injector = injector;
            _this.filterPresets = [];
            _this.params = _this.activeModalRef.getData();
            var activeFilterPreset = _this.params.activeFilterPreset;
            _this.recordDefinition = _this.params.primaryRecordDefinition;
            _this.selectedFieldIds = _this.params.selectedFieldIds;
            _this.isReadOnly = _this.params.isReadOnly;
            _this.filterPresets = lodash.map(_this.params.filterPresets, function (filterPreset) { return _this.createFilterPresetEditorData(filterPreset, filterPreset === activeFilterPreset); });
            return _this;
        }
        RecordGridFilterPresetEditorModalComponent.prototype.ngAfterViewInit = function () {
            var openFilterPresetIndex = lodash.findIndex(this.filterPresets, 'isOpen');
            if (openFilterPresetIndex !== -1) {
                this.accordionTabEls.toArray()[openFilterPresetIndex].nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            }
        };
        RecordGridFilterPresetEditorModalComponent.prototype.addFilterPreset = function () {
            var _this = this;
            this.markAsDirty();
            this.filterPresets.push(this.createFilterPresetEditorData({
                guid: this.rxGuidService.generate(),
                title: 'New preset' + (this.filterPresets.length === 0 ? '' : ' ' + this.filterPresets.length),
                filters: '',
                recordGridFilters: []
            }, true));
            setTimeout(function () {
                _this.accordionTabEls.last.nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            });
        };
        RecordGridFilterPresetEditorModalComponent.prototype.removeFilterPreset = function (index) {
            this.markAsDirty();
            this.filterPresets.splice(index, 1);
        };
        RecordGridFilterPresetEditorModalComponent.prototype.createFilterPresetEditorData = function (filterPreset, isOpen) {
            return Object.assign(Object.assign({}, filterPreset), { isOpen: isOpen, filterSelectOptions: {
                    primaryRecordDefinition: this.recordDefinition,
                    tagsLimit: 2,
                    namedFilterOptions: this.params.namedFilterOptions,
                    selectedFieldIds: this.selectedFieldIds
                }, filterSelect: {
                    basicFilters: filterPreset.recordGridFilters,
                    filtersJson: filterPreset.filters
                } });
        };
        RecordGridFilterPresetEditorModalComponent.prototype.getCheckPresetTitleDuplicateValidator = function (currentFilterPreset) {
            var _this = this;
            return function (control) {
                var title = control.value;
                if (title &&
                    _this.filterPresets.some(function (filterPreset) { return filterPreset.title === title && filterPreset.guid !== currentFilterPreset.guid; })) {
                    return { duplicatePresetName: { message: 'Duplicate Name' } };
                }
                return null;
            };
        };
        RecordGridFilterPresetEditorModalComponent.prototype.trackByForFilterPresets = function (index, filterPreset) {
            return filterPreset.guid;
        };
        RecordGridFilterPresetEditorModalComponent.prototype.toggleOpen = function (expandAll) {
            this.filterPresets.forEach(function (action) { return (action.isOpen = expandAll); });
        };
        RecordGridFilterPresetEditorModalComponent.prototype.onSaveChangesClick = function () {
            var _this = this;
            var result = {
                filterPresets: this.filterPresets.map(function (filterPreset) { return ({
                    filters: filterPreset.filterSelect.filtersJson,
                    recordGridFilters: filterPreset.filterSelect.basicFilters,
                    guid: filterPreset.guid,
                    title: filterPreset.title
                }); })
            };
            var hasEmptyFilterPreset = lodash.some(result.filterPresets, function (filterPreset) { return lodash.isEmpty(filterPreset.recordGridFilters); });
            if (hasEmptyFilterPreset) {
                this.rxModalService
                    .confirm({
                    title: 'Warning',
                    modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                    message: 'The filter preset will not filter records because no filters have been specified. Do you want to continue?'
                })
                    .then(function (confirmResult) {
                    if (confirmResult) {
                        _this.activeModalRef.close(result);
                    }
                });
            }
            else {
                this.activeModalRef.close(result);
            }
        };
        RecordGridFilterPresetEditorModalComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        return RecordGridFilterPresetEditorModalComponent;
    }(i1$6.RxModalClass));
    RecordGridFilterPresetEditorModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterPresetEditorModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i1__namespace$6.RxModalService }, { token: i2__namespace$1.RxGuidService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridFilterPresetEditorModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridFilterPresetEditorModalComponent, selector: "rx-record-grid-filter-preset-editor-modal", viewQueries: [{ propertyName: "filterPresetsForm", first: true, predicate: ["filterPresetsForm"], descendants: true, read: i2$4.NgForm, static: true }, { propertyName: "accordionTabEls", predicate: i1.AdaptAccordionTabComponent, descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addFilterPreset()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.add-filter-preset.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"filterPresets.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <form #filterPresetsForm=\"ngForm\">\n            <div\n              *ngFor=\"let filterPreset of filterPresets; let index = index; trackBy: trackByForFilterPresets\"\n              class=\"designer-modal-accordion-content\"\n            >\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"filterPreset.isOpen\"\n                (open)=\"filterPreset.isOpen = true\"\n                (close)=\"filterPreset.isOpen = false\"\n                #accordionTab\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block pl-0\">\n                      <div class=\"rx-ellipsis\" [title]=\"filterPreset.title\" rx-id=\"card-title\">\n                        {{ filterPreset.title }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"$event.stopPropagation(); removeFilterPreset(index)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-rx-textfield\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.name-field.label' | translate\n                  }}\"\n                  [name]=\"'filterPresetTitle-' + filterPreset.guid\"\n                  [required]=\"true\"\n                  [disabled]=\"isReadOnly\"\n                  [rxCustomValidators]=\"getCheckPresetTitleDuplicateValidator(filterPreset)\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  [(ngModel)]=\"filterPreset.title\"\n                  rxNoWhitespace\n                ></adapt-rx-textfield>\n\n                <div *ngIf=\"accordionTab.isOpenOrCloseAnimationProcessing\">\n                  <rx-record-grid-filter-select-control\n                    [name]=\"'filterPresetFilterSelect-' + filterPreset.guid\"\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"filterPreset.filterSelectOptions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [(ngModel)]=\"filterPreset.filterSelect\"\n                  ></rx-record-grid-filter-select-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!filterPresets.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.empty-state.message' | translate\n          }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"filterPresetsForm.form.invalid || !isDirty()\"\n    (click)=\"onSaveChangesClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: RecordGridFilterSelectControlComponent, selector: "rx-record-grid-filter-select-control", inputs: ["options"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace$1.RxNoWhitespaceValidator, selector: "[rxNoWhitespace]", inputs: ["rxNoWhitespace"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$6.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i2__namespace.TranslatePipe }, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterPresetEditorModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-filter-preset-editor-modal',
                        templateUrl: './record-grid-filter-preset-editor-modal.component.html',
                        styleUrls: ['./record-grid-filter-preset-editor-modal.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i1__namespace$6.RxModalService }, { type: i2__namespace$1.RxGuidService }, { type: i0__namespace.Injector }]; }, propDecorators: { accordionTabEls: [{
                    type: i0.ViewChildren,
                    args: [i1.AdaptAccordionTabComponent, { read: i0.ElementRef }]
                }], filterPresetsForm: [{
                    type: i0.ViewChild,
                    args: ['filterPresetsForm', { read: i2$4.NgForm, static: true }]
                }] } });

    var RecordGridFilterPresetEditorControlComponent = /** @class */ (function (_super) {
        __extends(RecordGridFilterPresetEditorControlComponent, _super);
        function RecordGridFilterPresetEditorControlComponent(rxModalService, rxRecordGridFilterSelectHelperService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.rxRecordGridFilterSelectHelperService = rxRecordGridFilterSelectHelperService;
            _this.filterPresets = [];
            return _this;
        }
        RecordGridFilterPresetEditorControlComponent.prototype.onWriteValue = function (filterPresets) {
            this.filterPresets = filterPresets.slice();
            this.filterPresets.sort(function (filterPreset1, filterPreset2) { return filterPreset1.title.localeCompare(filterPreset2.title); });
        };
        RecordGridFilterPresetEditorControlComponent.prototype.removeFilterPreset = function (filterPresetToRemove) {
            this.updateValue(this.filterPresets.filter(function (filterPreset) { return filterPreset.guid !== filterPresetToRemove.guid; }));
        };
        RecordGridFilterPresetEditorControlComponent.prototype.updateValue = function (filterPresets) {
            this.value = filterPresets;
            this.onWriteValue(filterPresets);
        };
        RecordGridFilterPresetEditorControlComponent.prototype.openEditor = function (filterPreset) {
            var _this = this;
            var selectedFieldIds = this.options.columns.map(function (column) { return column.fieldId; });
            var selectedFieldDefinitions = this.options.primaryRecordDefinition.fieldDefinitions.filter(function (fieldDefinition) { return selectedFieldIds.includes(fieldDefinition.id.toString()); });
            var namedFilterOptions = this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(this.options.columns);
            var data = {
                filterPresets: this.filterPresets,
                activeFilterPreset: filterPreset,
                isReadOnly: this.isDisabled,
                namedFilterOptions: namedFilterOptions,
                primaryRecordDefinition: lodash.cloneDeep(Object.assign(Object.assign({}, this.options.primaryRecordDefinition), { fieldDefinitions: selectedFieldDefinitions })),
                selectedFieldIds: selectedFieldIds
            };
            this.rxModalService
                .openModal({
                title: 'Edit filter presets',
                content: RecordGridFilterPresetEditorModalComponent,
                size: i1$1.OpenViewActionModalSize.Large,
                testID: 'edit-filter-presets',
                data: data
            })
                .then(function (result) {
                if (result && result.filterPresets) {
                    _this.updateValue(result.filterPresets);
                }
            })
                .catch(lodash.noop);
        };
        RecordGridFilterPresetEditorControlComponent.prototype.trackByForFilterPresets = function (index, filterPreset) {
            return filterPreset.guid;
        };
        return RecordGridFilterPresetEditorControlComponent;
    }(i2.ValueAccessor));
    RecordGridFilterPresetEditorControlComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterPresetEditorControlComponent, deps: [{ token: i1__namespace$6.RxModalService }, { token: RxRecordGridFilterSelectHelperService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridFilterPresetEditorControlComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridFilterPresetEditorControlComponent, selector: "rx-record-grid-filter-preset-editor", inputs: { options: "options" }, providers: [
            {
                provide: i2$4.NG_VALUE_ACCESSOR,
                useExisting: RecordGridFilterPresetEditorControlComponent,
                multi: true
            }
        ], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-rx-control-label *ngIf=\"options.label\" [label]=\"options.label\" [tooltip]=\"options?.tooltip\">\n</adapt-rx-control-label>\n\n<adapt-button *ngIf=\"!isDisabled\" btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit filter presets\n</adapt-button>\n\n<div>\n  <div class=\"rx-selected-filter-preset\" *ngFor=\"let filterPreset of filterPresets; trackBy: trackByForFilterPresets\">\n    <div class=\"rx-selected-filter-preset__header-container\">\n      <span class=\"rx-selected-filter-preset__header-title\" rx-id=\"card-title\" [title]=\"filterPreset.title\">\n        {{ filterPreset.title }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"openEditor(filterPreset)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-filter-preset\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterPreset(filterPreset)\"\n      ></button>\n    </div>\n\n    <div rx-id=\"filter-count\" class=\"rx-filter-count\">Filters: {{ filterPreset.recordGridFilters.length }}</div>\n  </div>\n  <span class=\"text-tertiary\" *ngIf=\"filterPresets.length === 0\"> No filter presets added. </span>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-selected-filter-preset{margin-bottom:5px;border:1px solid #d6d7d8;border-radius:2px;padding:5px 10px;word-break:break-all;font-weight:var(--font-weight-bold)}.rx-selected-filter-preset__header-container{display:flex;margin-bottom:5px}.rx-selected-filter-preset__header-title{flex:1 1 auto;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:.875rem}.rx-filter-count{font-size:.625rem;color:#959899}.d-icon-cross,.d-icon-left-pencil{cursor:pointer}.d-icon-cross:not(:hover),.d-icon-left-pencil:not(:hover){color:#313538}\n"], components: [{ type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridFilterPresetEditorControlComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-filter-preset-editor',
                        templateUrl: './record-grid-filter-preset-editor-control.component.html',
                        styleUrls: ['./record-grid-filter-preset-editor-control.component.scss'],
                        providers: [
                            {
                                provide: i2$4.NG_VALUE_ACCESSOR,
                                useExisting: RecordGridFilterPresetEditorControlComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxModalService }, { type: RxRecordGridFilterSelectHelperService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var RecordGridRowActionEditorModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridRowActionEditorModalComponent, _super);
        function RecordGridRowActionEditorModalComponent(context, adaptModalService, rxExpressionEditorService, translateService, rxRecordDefinitionCacheService, ngZone, rxGuidService, injector) {
            var _this = _super.call(this, context, injector) || this;
            _this.context = context;
            _this.adaptModalService = adaptModalService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.translateService = translateService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.ngZone = ngZone;
            _this.rxGuidService = rxGuidService;
            _this.injector = injector;
            _this.rowActions = [];
            _this.selectFormControlOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.label'),
                tooltip: new i1$2.Tooltip(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.tooltip')),
                options: [],
                emptyOption: true
            };
            _this.availableOnDevicesFormControlOptions = i1$3.getAvailableOnDevicesInspectorConfig().options;
            _this.recordDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.label'),
                tooltip: new i1$2.Tooltip(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.tooltip')),
                definitionType: i2.RxDefinitionPickerType.StandardDataRecord,
                required: false
            };
            _this.iconPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.icon.label'),
                appendToBody: true,
                required: false
            };
            return _this;
        }
        RecordGridRowActionEditorModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            var params = this.context.getData();
            this.expressionConfigurator = params.expressionConfigurator;
            this.rowActionIndex = params.rowActionIndex;
            this.activeActionIndex = params.activeActionIndex;
            this.isReadOnly = params.isReadOnly;
            this.rowActions = lodash.cloneDeep(params.rowActions).map(function (rowAction, index) {
                _this.setSecurityFieldDefinitions(rowAction);
                return Object.assign(Object.assign({}, rowAction), { isOpen: index === _this.rowActionIndex });
            });
        };
        RecordGridRowActionEditorModalComponent.prototype.ngAfterViewInit = function () {
            this.openActiveAction();
            if (this.rowActionIndex) {
                this.accordionTabEls.toArray()[this.rowActionIndex].nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            }
        };
        RecordGridRowActionEditorModalComponent.prototype.cancel = function () {
            this.context.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RecordGridRowActionEditorModalComponent.prototype.trackByGuid = function (index, rowAction) {
            return rowAction.guid;
        };
        RecordGridRowActionEditorModalComponent.prototype.addRowAction = function () {
            var _this = this;
            this.markAsDirty();
            this.rowActions.push(Object.assign({ guid: this.rxGuidService.generate(), label: 'New row action' + (this.rowActions.length === 0 ? '' : ' ' + this.rowActions.length), icon: '', recordDefinitionName: null, fieldId: null, recordInstance: null, disabled: null, hidden: null, actions: [], isOpen: true, securityFieldDefinitions$: rxjs.of(this.getSelectFormControlOptions()) }, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE));
            setTimeout(function () {
                _this.accordionTabEls.last.nativeElement.scrollIntoView({
                    block: 'nearest'
                });
            });
        };
        RecordGridRowActionEditorModalComponent.prototype.removeRowAction = function (index, $event) {
            $event.stopPropagation();
            this.markAsDirty();
            this.rowActions.splice(index, 1);
        };
        RecordGridRowActionEditorModalComponent.prototype.openExpressionEditor = function (event, rowAction, propertyPath) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: propertyPath,
                    value: rowAction[propertyPath],
                    label: this.getRowActionLabel(propertyPath)
                },
                isReadOnly: false,
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),
                        icon: 'd-icon-mathematical_function'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'),
                        icon: 'd-icon-file_o'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'),
                        icon: 'd-icon-file_o_gear'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'),
                        icon: 'd-icon-arrow_right_square_input'
                    }
                ]
            })
                .subscribe(function (expression) {
                _this.markAsDirty();
                rowAction[propertyPath] = expression.value;
            });
        };
        RecordGridRowActionEditorModalComponent.prototype.getExpressionFormControlOptions = function (propertyPath) {
            return {
                label: this.getRowActionLabel(propertyPath),
                tooltip: propertyPath === 'recordInstance'
                    ? new i1$2.Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.tooltip'))
                    : null,
                dataDictionary$: this.context.getData().expressionConfigurator.getDataDictionary(propertyPath),
                operators: this.context.getData().expressionConfigurator.getOperators(propertyPath)
            };
        };
        RecordGridRowActionEditorModalComponent.prototype.saveActions = function () {
            var rowActions = this.rowActions.map(function (rowAction) { return (Object.assign(Object.assign({}, lodash.omit(rowAction, ['isOpen', 'securityFieldDefinitions$'])), { action: 'rowAction' })); });
            this.context.close(rowActions);
        };
        RecordGridRowActionEditorModalComponent.prototype.moveRowAction = function (fromIndex, toIndex) {
            i8.moveItemInArray(this.rowActions, fromIndex, toIndex);
            this.markAsDirty();
        };
        RecordGridRowActionEditorModalComponent.prototype.onDropInSelectedRowActionsContainer = function ($event) {
            i8.moveItemInArray(this.rowActions, $event.previousIndex, $event.currentIndex);
            this.markAsDirty();
        };
        RecordGridRowActionEditorModalComponent.prototype.onRecordDefinitionChange = function (rowAction) {
            this.markAsDirty();
            rowAction.fieldId = null;
            this.setSecurityFieldDefinitions(rowAction);
        };
        RecordGridRowActionEditorModalComponent.prototype.setSecurityFieldDefinitions = function (rowAction) {
            var _this = this;
            rowAction.securityFieldDefinitions$ = rowAction.recordDefinitionName
                ? this.rxRecordDefinitionCacheService
                    .getRecordDefinition(rowAction.recordDefinitionName)
                    .pipe(operators.map(function (recordDefinition) { return _this.getSelectFormControlOptions(recordDefinition); }))
                : rxjs.of(this.getSelectFormControlOptions());
        };
        RecordGridRowActionEditorModalComponent.prototype.getRowActionLabel = function (key) {
            var rowActionLabel;
            switch (key) {
                case 'disabled':
                    rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.disabled.label';
                    break;
                case 'hidden':
                    rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.hidden.label';
                    break;
                case 'recordInstance':
                    rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.label';
                    break;
            }
            return this.translateService.instant(rowActionLabel);
        };
        RecordGridRowActionEditorModalComponent.prototype.getSelectFormControlOptions = function (recordDefinition) {
            if (recordDefinition === void 0) { recordDefinition = null; }
            return Object.assign(Object.assign({}, this.selectFormControlOptions), { options: recordDefinition
                    ? recordDefinition.fieldDefinitions.map(function (definition) { return ({
                        name: definition.name,
                        id: String(definition.id)
                    }); })
                    : [] });
        };
        RecordGridRowActionEditorModalComponent.prototype.openActiveAction = function () {
            var _this = this;
            if (this.activeActionIndex >= 0 && this.rowActionIndex >= 0) {
                this.ngZone.runOutsideAngular(function () {
                    // timeout is required to let control set initial value
                    setTimeout(function () {
                        var listControl = _this.actionListControlComponents.find(function (control) { var _a; return lodash.isEqual(control.value, (_a = _this.rowActions[_this.rowActionIndex]) === null || _a === void 0 ? void 0 : _a.actions); });
                        if (listControl) {
                            listControl.focus({ actionIndex: _this.activeActionIndex });
                        }
                    });
                });
            }
        };
        RecordGridRowActionEditorModalComponent.prototype.toggleOpen = function (expandAll) {
            this.rowActions.forEach(function (action) { return (action.isOpen = expandAll); });
        };
        return RecordGridRowActionEditorModalComponent;
    }(i1$6.RxModalClass));
    RecordGridRowActionEditorModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRowActionEditorModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i1__namespace.AdaptModalService }, { token: i2__namespace$5.RxExpressionEditorService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i0__namespace.NgZone }, { token: i2__namespace$1.RxGuidService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridRowActionEditorModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridRowActionEditorModalComponent, selector: "rx-record-grid-row-action-editor-modal", viewQueries: [{ propertyName: "rowActionsForm", first: true, predicate: ["rowActionsForm"], descendants: true, read: i2$4.NgForm, static: true }, { propertyName: "selectedRowActionsDropList", first: true, predicate: ["selectedRowActionsDropList"], descendants: true, read: i8.CdkDropList }, { propertyName: "accordionTabEls", predicate: i1.AdaptAccordionTabComponent, descendants: true, read: i0.ElementRef }, { propertyName: "draggableSelectedRowAction", predicate: ["draggableSelectedRowAction"], descendants: true, read: i8.CdkDrag }, { propertyName: "actionListControlComponents", predicate: i1$3.ActionListControlComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addRowAction()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.add-row-action.button.label' | translate\n          }}\n        </button>\n\n        <div *ngIf=\"rowActions.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selectedRowActionsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"rowActions\"\n        (cdkDropListDropped)=\"onDropInSelectedRowActionsContainer($event)\"\n        #selectedRowActionsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <form #rowActionsForm=\"ngForm\">\n            <div\n              *ngFor=\"\n                let rowAction of rowActions;\n                let index = index;\n                let first = first;\n                let last = last;\n                trackBy: trackByGuid\n              \"\n              class=\"designer-modal-accordion-content\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"rowAction\"\n              [cdkDragDisabled]=\"isReadOnly\"\n              #draggableSelectedRowAction\n            >\n              <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"rowAction.isOpen\"\n                (open)=\"rowAction.isOpen = true\"\n                (close)=\"rowAction.isOpen = false\"\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                      <div class=\"rx-ellipsis\" [title]=\"rowAction.label\" rx-id=\"card-title\">\n                        {{ rowAction.label }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <div class=\"designer-modal-card-title-index-buttons\">\n                        <button\n                          class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"last\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index + 1)\"\n                          rx-id=\"move-down-button\"\n                        ></button>\n\n                        <button\n                          class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"first\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index - 1)\"\n                          rx-id=\"move-up-button\"\n                        ></button>\n                      </div>\n\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"removeRowAction(index, $event)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <adapt-rx-textfield\n                    class=\"form-group d-block col-4\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.label-field.label' | translate\n                    }}\"\n                    [disabled]=\"isReadOnly\"\n                    [required]=\"true\"\n                    [name]=\"'label_' + rowAction.guid\"\n                    rx-id=\"label\"\n                    [(ngModel)]=\"rowAction.label\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    rxNoWhitespace\n                  >\n                  </adapt-rx-textfield>\n\n                  <rx-icon-picker-form-control\n                    [disabled]=\"isReadOnly\"\n                    class=\"form-group d-block col-4 px-2\"\n                    [options]=\"iconPickerOptions\"\n                    [name]=\"'icon_' + rowAction.guid\"\n                    rx-id=\"icon\"\n                    [(ngModel)]=\"rowAction.icon\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-icon-picker-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-definition-picker\n                    [isDisabled]=\"isReadOnly\"\n                    [options]=\"recordDefinitionPickerOptions\"\n                    [(ngModel)]=\"rowAction.recordDefinitionName\"\n                    [name]=\"'recordDefinition_' + rowAction.guid\"\n                    rx-id=\"recordDefinition\"\n                    (ngModelChange)=\"onRecordDefinitionChange(rowAction)\"\n                    class=\"form-group d-block col-4\"\n                  >\n                  </rx-definition-picker>\n\n                  <rx-select-form-control\n                    [options]=\"(rowAction.securityFieldDefinitions$ | async) || selectFormControlOptions\"\n                    [(ngModel)]=\"rowAction.fieldId\"\n                    [name]=\"'fieldId_' + rowAction.guid\"\n                    rx-id=\"fieldId\"\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  >\n                  </rx-select-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('recordInstance')\"\n                    propertyPath=\"recordInstance\"\n                    [ngModel]=\"rowAction.recordInstance\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'recordInstance')\"\n                    [name]=\"'recordInstance_' + rowAction.guid\"\n                    rx-id=\"recordInstance\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('disabled')\"\n                    propertyPath=\"disabled\"\n                    [ngModel]=\"rowAction.disabled\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'disabled')\"\n                    [name]=\"'disabled_' + rowAction.guid\"\n                    rx-id=\"disabled\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('hidden')\"\n                    propertyPath=\"hidden\"\n                    [ngModel]=\"rowAction.hidden\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'hidden')\"\n                    [name]=\"'hidden_' + rowAction.guid\"\n                    rx-id=\"hidden\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-select-form-control\n                    [options]=\"availableOnDevicesFormControlOptions\"\n                    [(ngModel)]=\"rowAction.availableOnDevices\"\n                    [name]=\"'availableOnDevices_' + rowAction.guid\"\n                    rx-id=\"availableOnDevices\"\n                    [disabled]=\"isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    required\n                  >\n                  </rx-select-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-action-list-control\n                    class=\"d-inline-block col-4 mt-2\"\n                    [(ngModel)]=\"rowAction.actions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [name]=\"'action_' + rowAction.guid\"\n                  ></rx-action-list-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!rowActions.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.empty-state.message' | translate\n          }}\"\n          type=\"config\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"rowActionsForm.invalid || !isDirty()\"\n    (click)=\"saveActions()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i2__namespace$5.IconPickerFormControlComponent, selector: "rx-icon-picker-form-control", inputs: ["options"] }, { type: i2__namespace$5.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i2__namespace$5.SelectFormControlComponent, selector: "rx-select-form-control", inputs: ["options", "appendToBody", "formControl"] }, { type: i2__namespace$5.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace$3.ActionListControlComponent, selector: "rx-action-list-control", inputs: ["options", "tooltip"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i2__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i8__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i2__namespace$1.RxNoWhitespaceValidator, selector: "[rxNoWhitespace]", inputs: ["rxNoWhitespace"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i2__namespace.TranslatePipe, "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRowActionEditorModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-row-action-editor-modal',
                        templateUrl: './record-grid-row-action-editor-modal.component.html',
                        styleUrls: ['./record-grid-row-action-editor-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i1__namespace.AdaptModalService }, { type: i2__namespace$5.RxExpressionEditorService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i0__namespace.NgZone }, { type: i2__namespace$1.RxGuidService }, { type: i0__namespace.Injector }]; }, propDecorators: { accordionTabEls: [{
                    type: i0.ViewChildren,
                    args: [i1.AdaptAccordionTabComponent, { read: i0.ElementRef }]
                }], rowActionsForm: [{
                    type: i0.ViewChild,
                    args: ['rowActionsForm', { static: true, read: i2$4.NgForm }]
                }], draggableSelectedRowAction: [{
                    type: i0.ViewChildren,
                    args: ['draggableSelectedRowAction', { read: i8.CdkDrag }]
                }], selectedRowActionsDropList: [{
                    type: i0.ViewChild,
                    args: ['selectedRowActionsDropList', { read: i8.CdkDropList }]
                }], actionListControlComponents: [{
                    type: i0.ViewChildren,
                    args: [i1$3.ActionListControlComponent]
                }] } });

    var RxRecordGridRowActionEditorWidgetComponent = /** @class */ (function (_super) {
        __extends(RxRecordGridRowActionEditorWidgetComponent, _super);
        function RxRecordGridRowActionEditorWidgetComponent(injector, rxModalService, translateService) {
            var _this = _super.call(this, injector) || this;
            _this.injector = injector;
            _this.rxModalService = rxModalService;
            _this.translateService = translateService;
            _this.rowActions$ = _this.designerItemModel.rowActionButtonComponents$.pipe(operators.map(function (rowActionButtons) {
                return rowActionButtons.map(function (rowActionButtonComponent) {
                    var actions = rowActionButtonComponent.children.map(function (action) { return lodash.omit(action, 'type', 'children'); });
                    return Object.assign(Object.assign({}, lodash.pick(rowActionButtonComponent.data, [
                        'recordDefinitionName',
                        'recordInstance',
                        'fieldId',
                        'icon',
                        'disabled',
                        'hidden',
                        'label',
                        i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME
                    ])), { guid: rowActionButtonComponent.guid, actions: actions });
                });
            }), operators.shareReplay(1));
            return _this;
        }
        RxRecordGridRowActionEditorWidgetComponent.prototype.openEditor = function (rowActionIndex, activeActionIndex) {
            var _this = this;
            this.rowActions$
                .pipe(operators.take(1), operators.switchMap(function (rowActions) { return rxjs.from(_this.rxModalService.openModal({
                content: RecordGridRowActionEditorModalComponent,
                title: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.modal.title'),
                size: i1$1.OpenViewActionModalSize.Large,
                testID: 'edit-row-actions',
                data: {
                    expressionConfigurator: _this.designerItemModel.expressionConfigurator,
                    isReadOnly: _this.isDisabled,
                    rowActionIndex: rowActionIndex,
                    rowActions: rowActions,
                    activeActionIndex: activeActionIndex
                }
            })); }))
                .subscribe({
                next: function (newRowActions) { return _this.designerItemModel.setRowActions(newRowActions); },
                error: lodash.noop
            });
        };
        RxRecordGridRowActionEditorWidgetComponent.prototype.trackByForRowActions = function (index, rowAction) {
            return rowAction.label;
        };
        RxRecordGridRowActionEditorWidgetComponent.prototype.removeRowAction = function (index, rowActions) {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.row-action-delete.warning', { name: rowActions[index].label })
            })
                .then(function (response) {
                if (response) {
                    rowActions.splice(index, 1);
                    _this.designerItemModel.setRowActions(rowActions);
                }
            });
        };
        RxRecordGridRowActionEditorWidgetComponent.prototype.focus = function (data) {
            this.openEditor(data.rowActionIndex, data.actionIndex);
        };
        return RxRecordGridRowActionEditorWidgetComponent;
    }(i2.InspectorWidgetBase));
    RxRecordGridRowActionEditorWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridRowActionEditorWidgetComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$6.RxModalService }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxRecordGridRowActionEditorWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxRecordGridRowActionEditorWidgetComponent, selector: "rx-record-grid-row-action-editor-widget", usesInheritance: true, ngImport: i0__namespace, template: "<adapt-button btn-type=\"tertiary\" rx-id=\"open-row-action-editor-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit row actions\n</adapt-button>\n\n<div *ngIf=\"rowActions$ | async as rowActions\">\n  <span rx-id=\"no-row-actions\" *ngIf=\"rowActions.length === 0\" class=\"text-tertiary\"> No row actions added. </span>\n  <div\n    rx-id=\"row-actions-list\"\n    class=\"rx-selected-row-action\"\n    *ngFor=\"let rowAction of rowActions; let index = index; trackBy: trackByForRowActions\"\n  >\n    <div class=\"rx-selected-row-action__header-container\">\n      <span rx-id=\"row-action\" class=\"rx-selected-row-action__header-title\" [title]=\"rowAction.label\">\n        {{ rowAction.label }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(index)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-button\"\n        (click)=\"removeRowAction(index, rowActions)\"\n      ></button>\n    </div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-selected-row-action{margin-bottom:5px;border:1px solid #d6d7d8;border-radius:2px;padding:5px 10px;word-break:break-all;font-weight:var(--font-weight-bold)}.rx-selected-row-action__header-container{display:flex}.rx-selected-row-action__header-title{flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;font-size:14px}.d-icon-cross,.d-icon-left-pencil{cursor:pointer}.d-icon-cross:not(:hover),.d-icon-left-pencil:not(:hover){color:#313538}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridRowActionEditorWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-row-action-editor-widget',
                        templateUrl: './record-grid-row-action-editor-widget.component.html',
                        styleUrls: ['./record-grid-row-action-editor-widget.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$6.RxModalService }, { type: i2__namespace.TranslateService }]; } });

    var RecordGridViewPresetColumnsModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridViewPresetColumnsModalComponent, _super);
        function RecordGridViewPresetColumnsModalComponent(activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.params = _this.activeModalRef.getData();
            _this.presetColumns = _this.params.presetColumns.map(function (column, index) {
                var gridColumn = _this.params.gridColumns.find(function (col) { return col.fieldId === column.data.fieldId; });
                return Object.assign(Object.assign({}, lodash.cloneDeep(column)), { isOpen: index === 0, title: gridColumn.title, fallbackTitle: gridColumn.fallbackTitle });
            });
            _this.isReadOnly = _this.params.isReadOnly;
            _this.columnWidthPropertyOptions = RX_RECORD_GRID.columnProperties.find(function (_a) {
                var name = _a.name;
                return name === 'width';
            }).options;
            _this.presetColumns.sort(function (a, b) { return a.data.index - b.data.index; });
            return _this;
        }
        RecordGridViewPresetColumnsModalComponent.prototype.expandAllColumns = function (event) {
            event.stopPropagation();
            this.presetColumns.forEach(function (column) { return (column.isOpen = true); });
        };
        RecordGridViewPresetColumnsModalComponent.prototype.collapseAllColumns = function (event) {
            event.stopPropagation();
            this.presetColumns.forEach(function (column) { return (column.isOpen = false); });
        };
        RecordGridViewPresetColumnsModalComponent.prototype.saveChanges = function () {
            this.activeModalRef.close({
                presetColumns: this.presetColumns.map(function (column) { return lodash.omit(column, ['isOpen', 'title']); })
            });
        };
        RecordGridViewPresetColumnsModalComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RecordGridViewPresetColumnsModalComponent.prototype.moveColumn = function (fromIndex, toIndex) {
            this.markAsDirty();
            i8.moveItemInArray(this.presetColumns, fromIndex, toIndex);
            this.updateColumnIndexes();
        };
        RecordGridViewPresetColumnsModalComponent.prototype.onDropInSelectedColumnsContainer = function (event) {
            this.moveColumn(event.previousIndex, event.currentIndex);
        };
        RecordGridViewPresetColumnsModalComponent.prototype.trackByGuid = function (index, column) {
            return column.guid;
        };
        RecordGridViewPresetColumnsModalComponent.prototype.updateColumnIndexes = function () {
            this.presetColumns.forEach(function (column, index) {
                column.data.index = index;
            });
        };
        return RecordGridViewPresetColumnsModalComponent;
    }(i1$6.RxModalClass));
    RecordGridViewPresetColumnsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridViewPresetColumnsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridViewPresetColumnsModalComponent, selector: "rx-record-grid-view-preset-columns-modal", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"expandAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"presetColumns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let column of presetColumns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByGuid\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            [cdkDragDisabled]=\"isReadOnly\"\n            [cdkDragData]=\"column\"\n            cdkDragLockAxis=\"y\"\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.title\">\n                      {{ column.title || column.fallbackTitle }}\n                    </div>\n\n                    <div *ngIf=\"column.data.visible\" class=\"designer-modal-card-sub-title ml-2\" [title]=\"column.title\">\n                      visible\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                label=\"Column header\"\n                [disabled]=\"true\"\n                [(ngModel)]=\"column.title\"\n              ></adapt-rx-textfield>\n\n              <adapt-rx-checkbox\n                label=\"Visible\"\n                [(ngModel)]=\"column.data.visible\"\n                [disabled]=\"isReadOnly\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></adapt-rx-checkbox>\n\n              <rx-stepper-with-units-form-control\n                class=\"d-block col-5 p-0\"\n                [options]=\"columnWidthPropertyOptions\"\n                [(ngModel)]=\"column.data.width\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-stepper-with-units-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i2__namespace$5.StepperWithUnitsFormControlComponent, selector: "rx-stepper-with-units-form-control", inputs: ["options"] }], directives: [{ type: i8__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-view-preset-columns-modal',
                        templateUrl: './record-grid-view-preset-columns-modal.component.html',
                        styleUrls: ['./record-grid-view-preset-columns-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    exports.RecordGridDesignDefinitionMode = void 0;
    (function (RecordGridDesignDefinitionMode) {
        RecordGridDesignDefinitionMode["Record"] = "record";
        RecordGridDesignDefinitionMode["Association"] = "association";
    })(exports.RecordGridDesignDefinitionMode || (exports.RecordGridDesignDefinitionMode = {}));

    var RxRecordGridDesignUtilsService = /** @class */ (function () {
        function RxRecordGridDesignUtilsService(rxGuidService, rxRecordGridConfigUtilsService, rxDefinitionNameService, rxFeatureService, rxModalService, rxRecordGridUtilsService, rxRecordGridFilterHelperService, translateService, viewDesignerFacade, rxJsonParserService) {
            this.rxGuidService = rxGuidService;
            this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxFeatureService = rxFeatureService;
            this.rxModalService = rxModalService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            this.translateService = translateService;
            this.viewDesignerFacade = viewDesignerFacade;
            this.rxJsonParserService = rxJsonParserService;
        }
        RxRecordGridDesignUtilsService.prototype.getColumnActionComponentPayloads = function (actions) {
            return lodash.map(actions, function (action) { return (Object.assign(Object.assign({}, action), { type: i1$1.RxViewComponentType.Action })); });
        };
        RxRecordGridDesignUtilsService.prototype.getNamedFilterOptionPayloads = function (namedFilterOptions) {
            return lodash.map(namedFilterOptions, function (namedFilterOption) { return (Object.assign(Object.assign({}, namedFilterOption), { type: RX_RECORD_GRID.components.filterPreset })); });
        };
        RxRecordGridDesignUtilsService.prototype.getGridFilterComponentPayloads = function (gridFilters) {
            return lodash.map(gridFilters, function (gridFilter) { return ({
                guid: gridFilter.guid,
                type: RX_RECORD_GRID.components.filter,
                data: Object.assign({ fieldId: gridFilter.fieldId, value: gridFilter.value }, (gridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: gridFilter.$DISPLAYVALUE$ }))
            }); });
        };
        RxRecordGridDesignUtilsService.prototype.getColumnComponentPayloads = function (columns, initialSortColumn) {
            var _this = this;
            return lodash.map(columns, function (inspectorColumn, index) {
                var sortable = 'false';
                if ((initialSortColumn === null || initialSortColumn === void 0 ? void 0 : initialSortColumn.fieldId) === inspectorColumn.fieldId && inspectorColumn.sortable !== false) {
                    sortable = JSON.stringify({
                        direction: initialSortColumn.direction
                    });
                }
                else if (lodash.isObject(inspectorColumn.sortable) || inspectorColumn.sortable === true) {
                    sortable = 'true';
                }
                var columnDesignModel = {
                    alignment: inspectorColumn.alignment,
                    fieldId: inspectorColumn.fieldId,
                    filterable: inspectorColumn.filterable,
                    filterType: inspectorColumn.filterType,
                    index: String(inspectorColumn.index),
                    sortable: sortable,
                    title: inspectorColumn.title,
                    searchable: inspectorColumn.searchable,
                    visible: inspectorColumn.visible,
                    cellDisplayProperties: inspectorColumn.cellDisplayProperties,
                    width: inspectorColumn.width,
                    wrapText: inspectorColumn.wrapText,
                    typeaheadKeystrokeCount: inspectorColumn.typeaheadKeystrokeCount,
                    additionalQueryCriteria: inspectorColumn.additionalQueryCriteria
                };
                return {
                    type: RX_RECORD_GRID.components.column,
                    guid: inspectorColumn.guid,
                    insertIndex: index,
                    outletName: i1$1.RX_VIEW_DEFINITION.defaultOutletName,
                    data: columnDesignModel,
                    children: __spreadArray(__spreadArray([], __read(_this.getColumnActionComponentPayloads(inspectorColumn.actions))), __read(_this.getNamedFilterOptionPayloads(inspectorColumn.namedFilterOptions)))
                };
            });
        };
        RxRecordGridDesignUtilsService.prototype.getGridFilterPresetComponentPayloads = function (filterPresets, columns) {
            var _this = this;
            var namedFilterGuids = columns.reduce(function (result, column) { return result.concat.apply(result, __spreadArray([], __read(column.namedFilterOptions.map(function (namedFilter) { return namedFilter.guid; })))); }, []);
            var selectedFieldIds = columns.map(function (column) { return column.fieldId; });
            return lodash.map(filterPresets, function (filterPreset) {
                var newRecordGridFilters = filterPreset.recordGridFilters
                    .filter(function (filter) { return selectedFieldIds.includes(filter.fieldId); })
                    .filter(function (filter) {
                    var value = lodash.isObject(filter.value) ? filter.value : _this.rxJsonParserService.tryParseJson(filter.value);
                    return (!(value === null || value === void 0 ? void 0 : value[i1$1.RecordGridNamedFilterOptionKey]) ||
                        namedFilterGuids.includes(value[i1$1.RecordGridNamedFilterOptionKey]));
                });
                var newFilterData = _this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(filterPreset.filters, newRecordGridFilters);
                return {
                    guid: filterPreset.guid,
                    type: RX_RECORD_GRID.components.filterPreset,
                    data: {
                        title: filterPreset.title,
                        filters: newFilterData
                            ? _this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), newRecordGridFilters)
                            : null
                    },
                    children: lodash.map(newRecordGridFilters, function (recordGridFilter) { return ({
                        guid: recordGridFilter.guid,
                        type: RX_RECORD_GRID.components.filter,
                        data: Object.assign({ fieldId: recordGridFilter.fieldId, value: recordGridFilter.value }, (recordGridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: recordGridFilter.$DISPLAYVALUE$ }))
                    }); })
                };
            });
        };
        RxRecordGridDesignUtilsService.prototype.getFilterPresetDescriptorsFromChildData = function (definitions) {
            return lodash.map(definitions.filter(function (definition) { return definition.type === RX_RECORD_GRID.components.filterPreset; }), function (filterPresetsDescriptor) { return ({
                filters: filterPresetsDescriptor.data.filters,
                recordGridFilters: lodash.map(lodash.filter(filterPresetsDescriptor.children, function (definition) { return definition.type === RX_RECORD_GRID.components.filter; }), function (presetFilter) { return ({
                    fieldId: presetFilter.data.fieldId,
                    value: presetFilter.data.value,
                    guid: presetFilter.guid,
                    $DISPLAYVALUE$: presetFilter.data.$DISPLAYVALUE$
                }); }),
                title: filterPresetsDescriptor.data.title,
                guid: filterPresetsDescriptor.guid
            }); }).filter(function (filterPreset) { var _a; return ((_a = filterPreset.recordGridFilters) === null || _a === void 0 ? void 0 : _a.length) > 0; });
        };
        RxRecordGridDesignUtilsService.prototype.getActionsFromComponent = function (componentDesignData) {
            return lodash.map(lodash.filter(componentDesignData.children, function (definition) { return definition.type === i1$1.RxViewComponentType.Action; }), function (columnAction) { return (Object.assign(Object.assign({}, columnAction), { data: Object.assign({}, columnAction.data) })); });
        };
        RxRecordGridDesignUtilsService.prototype.getNamedFilterOptionsFromComponent = function (componentDesignData) {
            return componentDesignData.children
                .filter(function (definition) { return definition.type === RX_RECORD_GRID.components.filterPreset; })
                .map(function (namedFilterOptionData) { return (Object.assign(Object.assign({}, namedFilterOptionData), { data: Object.assign({}, namedFilterOptionData.data) })); });
        };
        RxRecordGridDesignUtilsService.prototype.getDefaultColumns = function (recordDefinition) {
            var _this = this;
            var columns = [];
            if (recordDefinition) {
                var fieldDefinitions = recordDefinition.fieldDefinitions;
                var coreFieldIds_1 = i1$4.RX_RECORD_DEFINITION.coreFieldIds;
                columns = [
                    {
                        title: lodash.find(fieldDefinitions, function (fieldDefinition) { return fieldDefinition.id === coreFieldIds_1.displayId; }).name,
                        fieldId: String(coreFieldIds_1.displayId),
                        searchable: true
                    }
                ];
                if (recordDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType) {
                    columns.push({
                        title: lodash.find(fieldDefinitions, function (fieldDefinition) { return fieldDefinition.id === coreFieldIds_1.modifiedDate; }).name,
                        fieldId: String(coreFieldIds_1.modifiedDate),
                        searchable: false
                    });
                    columns.push({
                        title: lodash.find(fieldDefinitions, function (fieldDefinition) { return fieldDefinition.id === coreFieldIds_1.description; }).name,
                        fieldId: String(coreFieldIds_1.description),
                        searchable: true
                    });
                }
                var defaultValues_1 = lodash.reduce(RX_RECORD_GRID.columnProperties, function (result, columnProperty) {
                    result[columnProperty.name] = columnProperty.defaultValue;
                    return result;
                }, {});
                lodash.forEach(columns, function (column, index) { return lodash.defaults(column, defaultValues_1, {
                    index: index,
                    guid: _this.rxGuidService.generate()
                }); });
            }
            return columns;
        };
        RxRecordGridDesignUtilsService.prototype.getInitialSortColumnModel = function (columns) {
            var selectedSortColumn = lodash.find(columns, function (column) { return lodash.isObject(column.sortable); });
            return selectedSortColumn
                ? {
                    direction: selectedSortColumn.sortable.direction,
                    fieldId: selectedSortColumn.fieldId
                }
                : null;
        };
        RxRecordGridDesignUtilsService.prototype.getInspectorColumnsFromDesignData = function (columnsDesignModel) {
            var _this = this;
            return columnsDesignModel.map(function (columnDescriptor) {
                var column = columnDescriptor.data;
                return Object.assign(Object.assign({}, lodash.pick(column, [
                    'alignment',
                    'fieldId',
                    'filterType',
                    'searchable',
                    'title',
                    'cellDisplayProperties',
                    'width',
                    'typeaheadKeystrokeCount',
                    'additionalQueryCriteria'
                ])), { actions: _this.getActionsFromComponent(columnDescriptor), namedFilterOptions: _this.getNamedFilterOptionsFromComponent(columnDescriptor), guid: columnDescriptor.guid, filterable: _this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || lodash.isUndefined(column.filterable), sortable: _this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable) ||
                        lodash.isUndefined(column.sortable), visible: _this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || lodash.isUndefined(column.visible), wrapText: _this.rxRecordGridConfigUtilsService.getBooleanValue(column.wrapText), index: Number(column.index) });
            });
        };
        RxRecordGridDesignUtilsService.prototype.getComponentProperties = function (componentDesignProperties) {
            var _d;
            var _a, _b, _c;
            return _d = {
                    bordered: (_a = componentDesignProperties.bordered) !== null && _a !== void 0 ? _a : true,
                    expandable: componentDesignProperties.expandable,
                    name: componentDesignProperties.name,
                    recordDefinitionName: componentDesignProperties.recordDefinitionName,
                    showDataForAllLocales: componentDesignProperties.showDataForAllLocales,
                    associationDefinitionName: componentDesignProperties.associationDefinitionName,
                    associatedRecordNodeSide: componentDesignProperties.associatedRecordNodeSide,
                    associatedRecordId: componentDesignProperties.associatedRecordId,
                    associatedRoleName: componentDesignProperties.associatedRoleName,
                    filterExpression: componentDesignProperties.filterExpression,
                    filters: lodash.isObject(componentDesignProperties.filters)
                        ? componentDesignProperties.filters.filtersJson
                        : componentDesignProperties.filters,
                    defaultFilterPreset: this.getDefaultFilterPreset(componentDesignProperties),
                    cardLayoutWidth: componentDesignProperties.cardLayoutWidth,
                    enableFiltering: componentDesignProperties.enableFiltering,
                    requiredFilters: (_b = componentDesignProperties.requiredFilters) !== null && _b !== void 0 ? _b : 0,
                    getDataForHiddenColumns: (_c = componentDesignProperties.getDataForHiddenColumns) !== null && _c !== void 0 ? _c : true,
                    enableFilterPresets: componentDesignProperties.enableFilterPresets,
                    enableRowSelection: componentDesignProperties.enableRowSelection,
                    styles: componentDesignProperties.styles,
                    striped: !!componentDesignProperties.striped,
                    viewPresetSelector: componentDesignProperties.viewPresetSelector
                },
                _d[i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME] = componentDesignProperties[i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME],
                _d;
        };
        RxRecordGridDesignUtilsService.prototype.getDefaultFilterPreset = function (componentDesignProperties) {
            if (componentDesignProperties.defaultFilterPreset && componentDesignProperties.filterPresets) {
                return componentDesignProperties.filterPresets.some(function (filterPreset) { return filterPreset.guid === componentDesignProperties.defaultFilterPreset; })
                    ? componentDesignProperties.defaultFilterPreset
                    : null;
            }
            else if (componentDesignProperties.defaultFilterPreset && !componentDesignProperties.filterPresets) {
                return componentDesignProperties.defaultFilterPreset;
            }
            return null;
        };
        RxRecordGridDesignUtilsService.prototype.getComponentDesignProperties = function (componentProperties, initialComponentProperties, columnsDesignModel, basicRecordGridFilters, filterPresets) {
            var columns = this.getInspectorColumnsFromDesignData(columnsDesignModel);
            componentProperties = Object.assign(Object.assign({}, initialComponentProperties), componentProperties);
            return Object.assign(Object.assign({}, componentProperties), { mode: componentProperties.associationDefinitionName
                    ? exports.RecordGridDesignDefinitionMode.Association
                    : exports.RecordGridDesignDefinitionMode.Record, filters: {
                    basicFilters: basicRecordGridFilters,
                    filtersJson: componentProperties.filters
                }, filterMode: componentProperties.filterExpression ? exports.RecordGridFilterMode.Expression : exports.RecordGridFilterMode.Basic, filterPresets: filterPresets, initialSortColumn: this.getInitialSortColumnModel(columns), columns: columns });
        };
        RxRecordGridDesignUtilsService.prototype.getActionButtonDescriptorsFromChildData = function (definitions) {
            return definitions.filter(function (definition) { return definition.type === i1$1.RxViewComponentType.ActionButton; });
        };
        RxRecordGridDesignUtilsService.prototype.getGridViewPresetsFromChildData = function (definitions) {
            return definitions.filter(function (definition) { return definition.type === RX_RECORD_GRID.components.viewPreset; });
        };
        RxRecordGridDesignUtilsService.prototype.getBasicRecordGridFiltersFromChildData = function (definitions) {
            return lodash.map(definitions.filter(function (definition) { return definition.type === RX_RECORD_GRID.components.filter; }), function (basicFilterDescriptor) { return ({
                fieldId: basicFilterDescriptor.data.fieldId,
                value: basicFilterDescriptor.data.value,
                guid: basicFilterDescriptor.guid,
                $DISPLAYVALUE$: basicFilterDescriptor.data.$DISPLAYVALUE$
            }); });
        };
        RxRecordGridDesignUtilsService.prototype.getRowActionButtonPayloads = function (rowActions) {
            var _this = this;
            return rowActions.map(function (rowAction) { return ({
                type: i1$1.RxViewComponentType.ActionButton,
                guid: rowAction.guid,
                data: lodash.omit(rowAction, 'actions', 'guid'),
                outletName: RX_RECORD_GRID.rowActionsOutletName,
                children: _this.getColumnActionComponentPayloads(rowAction.actions)
            }); });
        };
        RxRecordGridDesignUtilsService.prototype.getInspector = function (model, recordDefinition, recordAssociationDefinitions) {
            var _this = this;
            var hasRecordDefinition = Boolean(model.recordDefinitionName && recordDefinition);
            var generalControls = [
                {
                    name: 'name',
                    component: i2.TextFormControlComponent,
                    options: {
                        label: 'Name',
                        tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Record grid.')
                    }
                },
                {
                    name: 'mode',
                    component: i2.GroupButtonFormControlComponent,
                    options: {
                        required: false,
                        label: 'Mode',
                        items: [
                            {
                                value: exports.RecordGridDesignDefinitionMode.Record,
                                name: 'Record'
                            },
                            {
                                value: exports.RecordGridDesignDefinitionMode.Association,
                                name: 'Association'
                            }
                        ]
                    }
                },
                {
                    name: 'recordDefinitionName',
                    component: i2.RxDefinitionPickerComponent,
                    options: {
                        label: model.mode === exports.RecordGridDesignDefinitionMode.Association
                            ? 'Record definition to show'
                            : 'Record definition name',
                        definitionType: model.mode === exports.RecordGridDesignDefinitionMode.Association
                            ? i2.RxDefinitionPickerType.RegularDataRecord
                            : i2.RxDefinitionPickerType.Record,
                        required: true,
                        beforeValueChange: function (oldValue, newValue) {
                            if (!lodash.isEmpty(model.columns) && Boolean(oldValue)) {
                                return _this.rxModalService.confirm({
                                    title: 'Warning',
                                    modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                                    message: 'Initial column sort, initial filters, and added grid columns will be cleared. Do you want to continue?'
                                });
                            }
                            else {
                                return Promise.resolve(true);
                            }
                        }
                    }
                }
            ];
            var presentationControls = [
                {
                    name: 'cardLayoutWidth',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Card layout width',
                        sortAlphabetically: false,
                        options: RX_RECORD_GRID.cardLayoutWidthOptions,
                        emptyOption: true,
                        tooltip: new i1$2.Tooltip('The width of the Record grid view component at which it will switch to card layout.')
                    }
                },
                {
                    name: 'initialSortColumn',
                    component: RecordGridSortEditorControlComponent,
                    options: {
                        label: 'Initial column sort',
                        gridColumns: lodash.sortBy(model.columns, 'title'),
                        recordDefinition: recordDefinition
                    }
                },
                {
                    name: 'enableRowSelection',
                    component: i2.OptionalSelectFormControlComponent,
                    options: {
                        label: 'Enable row selection',
                        options: [
                            {
                                id: RX_RECORD_GRID.selectionTypes.multiple,
                                name: 'Multiple rows'
                            },
                            {
                                id: RX_RECORD_GRID.selectionTypes.single,
                                name: 'Single row'
                            }
                        ]
                    }
                },
                {
                    name: 'expandable',
                    component: i2.SwitchFormControlComponent,
                    hidden: !this.rxFeatureService.isFeatureEnabled('DRD21-44922'),
                    options: {
                        label: 'Enable grid width expansion',
                        tooltip: new i1$2.Tooltip('If enabled, the grid will expand in width to accommodate wider columns. If one or more columns extend beyond the right border of the grid, a horizontal scroll bar will appear.<br>Column width will be converted to pixels if grid width expansion mode is enabled.')
                    }
                },
                {
                    name: 'bordered',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Show border lines'
                    }
                },
                {
                    name: 'striped',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Show striped rows'
                    }
                },
                {
                    name: 'showDataForAllLocales',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Show data for all locales',
                        tooltip: new i1$2.Tooltip('If enabled, data for all locales will be displayed in the grid at runtime. If disabled, only data for current locale will be displayed.')
                    }
                },
                i1$3.getAvailableOnDevicesInspectorConfig(),
                i1$3.getStylesFieldInspectorConfig()
            ];
            if (model.mode === exports.RecordGridDesignDefinitionMode.Association) {
                if (hasRecordDefinition) {
                    generalControls.push({
                        name: 'associationDefinitionName',
                        component: i2.SelectFormControlComponent,
                        options: {
                            required: true,
                            label: 'Association to use',
                            options: lodash.map(recordAssociationDefinitions, function (associationDescriptor) { return ({
                                id: associationDescriptor.name,
                                name: _this.rxDefinitionNameService.getDisplayName(associationDescriptor.name)
                            }); }),
                            emptyOption: true
                        }
                    });
                }
                var selectedAssociationDefinition = lodash.find(recordAssociationDefinitions, function (definition) { return definition.name === model.associationDefinitionName; });
                if (selectedAssociationDefinition &&
                    selectedAssociationDefinition.nodeAId === selectedAssociationDefinition.nodeBId) {
                    generalControls.push({
                        name: 'associatedRecordNodeSide',
                        component: i2.SelectFormControlComponent,
                        options: {
                            required: true,
                            label: 'Associated record node side',
                            options: [
                                {
                                    id: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,
                                    name: selectedAssociationDefinition.nodeAName || i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName
                                },
                                {
                                    id: i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,
                                    name: selectedAssociationDefinition.nodeBName || i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName
                                }
                            ],
                            emptyOption: true
                        }
                    });
                }
                generalControls.push({
                    name: 'associatedRecordId',
                    component: i2.ExpressionInspectorControlComponent,
                    options: {
                        label: 'Associated record ID',
                        isRequired: true
                    }
                });
                if (selectedAssociationDefinition &&
                    selectedAssociationDefinition.cardinality === i2$5.RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value) {
                    generalControls.push({
                        name: 'associatedRoleName',
                        component: i2.ExpressionInspectorControlComponent,
                        options: {
                            label: 'Associated role name'
                        }
                    });
                }
            }
            if (hasRecordDefinition) {
                generalControls.push({
                    name: 'columns',
                    component: RecordGridColumnEditorControlComponent,
                    options: {
                        recordDefinition: recordDefinition
                    }
                });
                generalControls.push({
                    name: 'getDataForHiddenColumns',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Get data for hidden columns',
                        tooltip: new i1$2.Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.get-data-for-hidden-columns.tooltip'))
                    }
                });
                generalControls.push({
                    widgetName: 'rowActions',
                    component: RxRecordGridRowActionEditorWidgetComponent
                });
            }
            var filtersControls = [
                {
                    name: 'enableFiltering',
                    component: i2.SwitchFormControlComponent,
                    options: {
                        label: 'Enable filtering'
                    }
                },
                {
                    name: 'requiredFilters',
                    component: i2.SelectFormControlComponent,
                    isDisabled: !model.enableFiltering,
                    options: {
                        label: 'Required number of filters',
                        sortAlphabetically: false,
                        options: RX_RECORD_GRID.numberOfFiltersOptions,
                        emptyOption: false,
                        tooltip: new i1$2.Tooltip('Data will be displayed in the grid only if a) the number of applied filters is greater than or equal to the required number of filters, or b) a search is performed.')
                    }
                }
            ];
            if (hasRecordDefinition) {
                filtersControls.push({
                    name: 'filterMode',
                    component: i2.GroupButtonFormControlComponent,
                    options: {
                        label: 'Initial filters',
                        items: [
                            {
                                name: 'Basic',
                                value: exports.RecordGridFilterMode.Basic
                            },
                            {
                                name: 'Expression',
                                value: exports.RecordGridFilterMode.Expression
                            }
                        ],
                        tooltip: new i1$2.Tooltip('Select the records that should be displayed on the deployed application UI. Application users can add filters in the deployed application.'),
                        beforeValueChange: function (oldValue, newValue) {
                            if ((newValue === exports.RecordGridFilterMode.Expression && model.filters.filtersJson) ||
                                (newValue === exports.RecordGridFilterMode.Basic && model.filterExpression)) {
                                return _this.rxModalService.confirm({
                                    title: 'Change filter type',
                                    modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                                    message: 'Current filter will be cleared. Do you want to continue?'
                                });
                            }
                            else {
                                return Promise.resolve(true);
                            }
                        }
                    }
                });
                if (model.filterMode === exports.RecordGridFilterMode.Basic) {
                    filtersControls.push({
                        name: 'filters',
                        component: RecordGridFilterSelectControlComponent,
                        options: {
                            primaryRecordDefinition: recordDefinition
                        }
                    });
                }
                else {
                    filtersControls.push({
                        name: 'filterExpression',
                        component: i2.ExpressionInspectorControlComponent,
                        options: {
                            label: 'Initial filters',
                            isLabelHidden: true
                        }
                    });
                }
                filtersControls.push({
                    name: 'enableFilterPresets',
                    component: i2.SwitchFormControlComponent,
                    isDisabled: !model.enableFiltering,
                    options: {
                        label: 'Enable filter presets'
                    }
                });
                filtersControls.push({
                    name: 'filterPresets',
                    component: RecordGridFilterPresetEditorControlComponent,
                    options: {
                        label: 'Filter presets',
                        tooltip: new i1$2.Tooltip('Predefine sets of record grid filters users can apply.'),
                        primaryRecordDefinition: recordDefinition,
                        columns: model.columns.filter(function (column) { return column.filterable; })
                    }
                });
            }
            if (!lodash.isEmpty(model.filterPresets)) {
                filtersControls.push({
                    name: 'defaultFilterPreset',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Default filter preset',
                        tooltip: new i1$2.Tooltip('Select a filter preset to be applied when a user opens this view for the first time.'),
                        options: lodash.map(model.filterPresets, function (filterPreset) { return ({ id: filterPreset.guid, name: filterPreset.title }); }),
                        emptyOption: true
                    }
                });
            }
            var inspectorSectionConfigs = [
                {
                    label: 'General',
                    controls: generalControls
                },
                {
                    label: 'Filters',
                    controls: filtersControls
                },
                {
                    label: 'Presentation',
                    controls: presentationControls
                },
                {
                    label: 'View presets',
                    controls: [
                        {
                            component: RecordGridViewPresetsWidgetComponent,
                            options: {
                                recordDefinition: recordDefinition
                            }
                        }
                    ]
                }
            ];
            return { inspectorSectionConfigs: inspectorSectionConfigs };
        };
        RxRecordGridDesignUtilsService.prototype.getColumnDataDictionaryBranch = function (recordGridGuid, componentDescriptorName, componentName$, columnComponents$, recordDefinition$, associationDefinitionDisplayName$) {
            var _this = this;
            var columnDataDictionaryBranch$ = rxjs.combineLatest([columnComponents$, recordDefinition$]).pipe(operators.switchMap(function (_d) {
                var _e = __read(_d, 2), columnComponents = _e[0], recordDefinition = _e[1];
                return recordDefinition
                    ? _this.getColumnsDataDictionaryBuilder(recordGridGuid, columnComponents, recordDefinition).pipe(operators.map(function (buildColumnDataDictionary) { return ({
                        label: _this.rxDefinitionNameService.getDisplayName(recordDefinition.name),
                        expression: "${view.components." + recordGridGuid + ".api}",
                        children: [
                            {
                                label: 'First selected row',
                                expression: "${view.components." + recordGridGuid + ".firstSelectedRow}",
                                children: buildColumnDataDictionary('firstSelectedRow')
                            },
                            {
                                label: 'Is user allowed to delete records',
                                expression: "${view.components." + recordGridGuid + ".isUserAllowedToDeleteRecords}"
                            },
                            {
                                label: 'Last action row',
                                expression: "${view.components." + recordGridGuid + ".clickableRow}",
                                children: buildColumnDataDictionary('clickableRow')
                            },
                            {
                                label: 'Selected rows',
                                expression: "${view.components." + recordGridGuid + ".selectedRows}",
                                children: buildColumnDataDictionary('fieldValuesByFieldId')
                            },
                            {
                                label: 'Selected row count',
                                expression: "${view.components." + recordGridGuid + ".selectedRowCount}"
                            },
                            {
                                label: 'Total row count',
                                expression: "${view.components." + recordGridGuid + ".totalRowCount}"
                            },
                            {
                                label: 'Query expression',
                                expression: "${view.components." + recordGridGuid + ".queryExpression}"
                            },
                            {
                                label: 'Last refresh time',
                                expression: "${view.components." + recordGridGuid + ".lastRefreshTime}"
                            }
                        ]
                    }); }), operators.take(1))
                    : rxjs.of(null);
            }));
            return rxjs.combineLatest([componentName$, columnDataDictionaryBranch$, associationDefinitionDisplayName$]).pipe(operators.map(function (_d) {
                var _e = __read(_d, 3), label = _e[0], dataDictionaryBranch = _e[1], associationDefinitionDisplayName = _e[2];
                return dataDictionaryBranch
                    ? Object.assign(Object.assign({}, dataDictionaryBranch), { label: _this.getComponentName(componentDescriptorName, dataDictionaryBranch.label, associationDefinitionDisplayName, label) })
                    : null;
            }));
        };
        RxRecordGridDesignUtilsService.prototype.getColumnsDataDictionaryBuilder = function (recordGridGuid, columnComponents, recordDefinition) {
            var _this = this;
            return (columnComponents.length
                ? rxjs.forkJoin(columnComponents.map(function (component) { return _this.rxRecordGridUtilsService.getFieldDefinition(component.data.fieldId, recordDefinition).pipe(operators.filter(function (fieldDefinition) { return !!fieldDefinition; }), operators.map(function (fieldDefinition) { return _this.getColumnDataDictionaryBranchBuilder(recordGridGuid, component, fieldDefinition); })); }))
                : rxjs.of([])).pipe(operators.map(function (builders) { return function (gridPropertyName) { return builders.map(function (buildColumnDataDictionaryBranch) { return buildColumnDataDictionaryBranch.call(_this, gridPropertyName); }); }; }));
        };
        RxRecordGridDesignUtilsService.prototype.getColumnDataDictionaryBranchBuilder = function (recordGridGuid, columnComponent, fieldDefinition) {
            var selectionList = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection
                ? lodash.map(fieldDefinition.optionNamesById, function (optionName, optionValue) { return ({
                    label: optionName,
                    expression: "${view.components." + recordGridGuid + ".recordDefinition.fieldDefinitionsById[" + columnComponent.data.fieldId + "].optionsById[" + optionValue + "].id}"
                }); })
                : undefined;
            return function (propertyName) {
                var _a;
                return ({
                    label: ((_a = columnComponent.data.title) === null || _a === void 0 ? void 0 : _a.trim()) || "[" + fieldDefinition.name + "]",
                    expression: "${view.components." + recordGridGuid + "." + propertyName + "." + columnComponent.data.fieldId + "}",
                    autocompleteOptions: selectionList,
                    children: fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection
                        ? [
                            {
                                label: columnComponent.data.title + " (Option name)",
                                expression: "${view.components." + recordGridGuid + "." + propertyName + ".selectionFieldOptionNamesById." + columnComponent.data.fieldId + "}"
                            },
                            {
                                label: 'Options',
                                children: selectionList
                            }
                        ]
                        : null
                });
            };
        };
        RxRecordGridDesignUtilsService.prototype.getComponentName = function (componentDescriptorName, recordDefinitionDisplayName, associationDefinitionDisplayName, name) {
            var additionalLabels = [recordDefinitionDisplayName, associationDefinitionDisplayName, name].filter(Boolean);
            return additionalLabels.length
                ? componentDescriptorName + " (" + additionalLabels.join(': ') + ")"
                : componentDescriptorName;
        };
        RxRecordGridDesignUtilsService.prototype.getGridViewPresetPayload = function (viewPresetGuid, columns) {
            var _this = this;
            return {
                type: RX_RECORD_GRID.components.viewPreset,
                guid: this.rxGuidService.generate(),
                data: {
                    viewPresetGuid: viewPresetGuid,
                    filters: null
                },
                children: columns.map(function (column) { return _this.getColumnPresetPayload(column); })
            };
        };
        RxRecordGridDesignUtilsService.prototype.getColumnPresetPayload = function (column) {
            return {
                type: RX_RECORD_GRID.components.columnViewPreset,
                data: {
                    fieldId: column.fieldId,
                    index: column.index,
                    visible: column.visible,
                    sortable: lodash.isObject(column.sortable) ? column.sortable : null,
                    width: column.width
                }
            };
        };
        RxRecordGridDesignUtilsService.prototype.getPresetsList = function (guid) {
            return guid
                ? this.viewDesignerFacade.getChildComponents(guid).pipe(operators.map(function (res) { return res.sort(function (a, b) { return a.data.index - b.data.index; }); }), operators.map(function (res) { return res.map(function (item) { return ({ guid: item.guid, name: item.data.label }); }); }), operators.debounceTime(50) // used to let store be `stabilized` when indexes are updating for each preset
                )
                : rxjs.of([]);
        };
        return RxRecordGridDesignUtilsService;
    }());
    RxRecordGridDesignUtilsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignUtilsService, deps: [{ token: i2__namespace$1.RxGuidService }, { token: RxRecordGridConfigUtilsService }, { token: i1__namespace$1.RxDefinitionNameService }, { token: i1__namespace$1.RxFeatureService }, { token: i1__namespace$6.RxModalService }, { token: RxRecordGridUtilsService }, { token: RxRecordGridFilterHelperService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$3.ViewDesignerFacade }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridDesignUtilsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignUtilsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignUtilsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxGuidService }, { type: RxRecordGridConfigUtilsService }, { type: i1__namespace$1.RxDefinitionNameService }, { type: i1__namespace$1.RxFeatureService }, { type: i1__namespace$6.RxModalService }, { type: RxRecordGridUtilsService }, { type: RxRecordGridFilterHelperService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$3.ViewDesignerFacade }, { type: i2__namespace$1.RxJsonParserService }]; } });

    var RecordGridEditViewPresetsModalComponent = /** @class */ (function (_super) {
        __extends(RecordGridEditViewPresetsModalComponent, _super);
        function RecordGridEditViewPresetsModalComponent(activeModalRef, injector, rxModalService, rxRecordGridDesignUtilsService, rxRecordGridFilterSelectHelperService, rxRecordGridUtilsService, rxStringService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.rxModalService = rxModalService;
            _this.rxRecordGridDesignUtilsService = rxRecordGridDesignUtilsService;
            _this.rxRecordGridFilterSelectHelperService = rxRecordGridFilterSelectHelperService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxStringService = rxStringService;
            _this.params = _this.activeModalRef.getData();
            _this.presets = [];
            _this.isReadOnly = _this.params.isReadOnly;
            _this.gridColumns$ = _this.params.gridColumns && _this.params.recordDefinition
                ? rxjs.forkJoin(_this.params.gridColumns.map(function (gridColumn) {
                    if (_this.rxStringService.isEmptySafe(gridColumn.title)) {
                        return _this.rxRecordGridUtilsService
                            .getFieldDefinition(gridColumn.fieldId, _this.params.recordDefinition)
                            .pipe(operators.map(function (fieldDefinition) { return (Object.assign(Object.assign({}, gridColumn), { fallbackTitle: "[" + fieldDefinition.name + "]" })); }));
                    }
                    return rxjs.of(Object.assign(Object.assign({}, gridColumn), { fallbackTitle: "[" + gridColumn.title + "]" }));
                })).pipe(operators.defaultIfEmpty([]))
                : rxjs.of([]);
            return _this;
        }
        RecordGridEditViewPresetsModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.gridColumns$.pipe(operators.take(1)).subscribe(function (gridColumns) {
                _this.namedFilterOptions =
                    _this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(gridColumns);
                _this.presets = _this.params.presetsList.map(function (_a, index) {
                    var guid = _a.guid, name = _a.name;
                    var presetComponent = _this.params.viewPresets.find(function (_a) {
                        var data = _a.data;
                        return data.viewPresetGuid === guid;
                    });
                    var gridColumnsIds = gridColumns.filter(function (col) { return col.filterable; }).map(function (col) { return col.fieldId; });
                    var viewPresetGuid = presetComponent.data.viewPresetGuid;
                    var presetColumns = lodash.cloneDeep(presetComponent.children.filter(function (col) { return col.type === RX_RECORD_GRID.components.columnViewPreset; }));
                    var sortedColumn = presetColumns.find(function (col) { return lodash.isObject(col.data.sortable); });
                    var sortModel = sortedColumn
                        ? {
                            fieldId: sortedColumn.data.fieldId,
                            direction: sortedColumn.data.sortable.direction
                        }
                        : null;
                    return {
                        presetName: name,
                        gridColumns: gridColumns,
                        presetColumns: presetColumns,
                        guid: viewPresetGuid,
                        tags: _this.getTags(presetColumns, gridColumns),
                        isOpen: _this.params.activePreset ? _this.params.activePreset === viewPresetGuid : index === 0,
                        sortModel: sortModel,
                        filters: {
                            basicFilters: _this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(presetComponent.children),
                            filtersJson: presetComponent.data.filters
                        },
                        filterSelectControlOptions: {
                            primaryRecordDefinition: Object.assign(Object.assign({}, _this.params.recordDefinition), { fieldDefinitions: _this.params.recordDefinition.fieldDefinitions.filter(function (definition) { return gridColumnsIds.includes(String(definition.id)); }) }),
                            selectedFieldIds: gridColumns.map(function (column) { return column.fieldId; }),
                            namedFilterOptions: _this.namedFilterOptions
                        },
                        sortEditorControlOptions: {
                            label: 'Initial column sort',
                            gridColumns: lodash.sortBy(gridColumns, 'title'),
                            recordDefinition: _this.params.recordDefinition
                        }
                    };
                });
            });
        };
        RecordGridEditViewPresetsModalComponent.prototype.saveChanges = function () {
            this.activeModalRef.close({
                presets: this.presets
            });
        };
        RecordGridEditViewPresetsModalComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RecordGridEditViewPresetsModalComponent.prototype.expandAll = function (event) {
            event.stopPropagation();
            this.presets.forEach(function (preset) { return (preset.isOpen = true); });
        };
        RecordGridEditViewPresetsModalComponent.prototype.collapseAll = function (event) {
            event.stopPropagation();
            this.presets.forEach(function (preset) { return (preset.isOpen = false); });
        };
        RecordGridEditViewPresetsModalComponent.prototype.openPresetColumnsModal = function (preset) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: "Edit grid columns for " + preset.presetName,
                content: RecordGridViewPresetColumnsModalComponent,
                size: i1$1.OpenViewActionModalSize.Large,
                data: {
                    gridColumns: preset.gridColumns,
                    presetColumns: preset.presetColumns,
                    isReadOnly: this.isReadOnly
                },
                testID: 'edit-grid-columns-for-view-preset'
            })
                .then(function (result) {
                if (result === null || result === void 0 ? void 0 : result.presetColumns) {
                    preset.presetColumns = result.presetColumns;
                    preset.tags = _this.getTags(preset.presetColumns, preset.gridColumns);
                    _this.markAsDirty();
                }
            })
                .catch(lodash.noop);
        };
        RecordGridEditViewPresetsModalComponent.prototype.trackByPreset = function (index, item) {
            return item.guid;
        };
        RecordGridEditViewPresetsModalComponent.prototype.getTags = function (presetColumns, gridColumns) {
            var allColumnTitles = presetColumns
                .filter(function (column) { return column.data.visible; })
                .map(function (column) {
                var gridColumn = gridColumns.find(function (col) { return col.fieldId === column.data.fieldId; });
                return gridColumn.title || gridColumn.fallbackTitle;
            });
            var displayedColumnTitles = allColumnTitles.slice(0, 5);
            return {
                items: displayedColumnTitles,
                restCount: allColumnTitles.length - displayedColumnTitles.length
            };
        };
        RecordGridEditViewPresetsModalComponent.prototype.onSortChange = function (sortModel, preset) {
            preset.presetColumns.forEach(function (column) {
                column.data.sortable = column.data.fieldId === (sortModel === null || sortModel === void 0 ? void 0 : sortModel.fieldId) ? lodash.pick(sortModel, 'direction') : null;
            });
            this.markAsDirty();
        };
        return RecordGridEditViewPresetsModalComponent;
    }(i1$6.RxModalClass));
    RecordGridEditViewPresetsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }, { token: i1__namespace$6.RxModalService }, { token: RxRecordGridDesignUtilsService }, { token: RxRecordGridFilterSelectHelperService }, { token: RxRecordGridUtilsService }, { token: i2__namespace$1.RxStringService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridEditViewPresetsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridEditViewPresetsModalComponent, selector: "rx-record-grid-edit-view-presets-modal", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"expandAll($event)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAll($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let preset of presets; let index = index; trackBy: trackByPreset\"\n            class=\"designer-modal-accordion-content\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"preset.isOpen\"\n              (open)=\"preset.isOpen = true\"\n              (close)=\"preset.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"preset.presetName\" rx-id=\"card-title\">\n                      {{ preset.presetName }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                rx-id=\"open-grid-preset-columns-modal-button\"\n                class=\"p-0 pb-1\"\n                (click)=\"openPresetColumnsModal(preset)\"\n              >\n                <span class=\"d-icon-plus_circle\"></span>\n\n                Edit grid columns\n              </adapt-button>\n\n              <div class=\"mb-3\">\n                <adapt-tag type=\"active\" *ngFor=\"let tag of preset.tags.items\">{{ tag }}</adapt-tag>\n\n                <button\n                  *ngIf=\"preset.tags.restCount\"\n                  class=\"btn-link rx-button-unstyled ml-1\"\n                  type=\"button\"\n                  (click)=\"openPresetColumnsModal(preset)\"\n                >\n                  +{{ preset.tags.restCount }} more\n                </button>\n              </div>\n\n              <rx-record-grid-sort-editor-control\n                class=\"d-block w-50\"\n                [options]=\"preset.sortEditorControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.sortModel\"\n                (ngModelChange)=\"onSortChange($event, preset)\"\n              ></rx-record-grid-sort-editor-control>\n\n              <rx-record-grid-filter-select-control\n                [options]=\"preset.filterSelectControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.filters\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-record-grid-filter-select-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace.AdaptTagComponent, selector: "adapt-tag", inputs: ["type", "removable", "disabled"], outputs: ["remove"] }, { type: RecordGridSortEditorControlComponent, selector: "rx-record-grid-sort-editor-control", inputs: ["options"] }, { type: RecordGridFilterSelectControlComponent, selector: "rx-record-grid-filter-select-control", inputs: ["options"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-edit-view-presets-modal',
                        templateUrl: './record-grid-edit-view-presets-modal.component.html',
                        styleUrls: ['./record-grid-edit-view-presets-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }, { type: i1__namespace$6.RxModalService }, { type: RxRecordGridDesignUtilsService }, { type: RxRecordGridFilterSelectHelperService }, { type: RxRecordGridUtilsService }, { type: i2__namespace$1.RxStringService }]; } });

    var RecordGridViewPresetsWidgetComponent = /** @class */ (function (_super) {
        __extends(RecordGridViewPresetsWidgetComponent, _super);
        function RecordGridViewPresetsWidgetComponent(injector, rxModalService, viewDesignerFacade, rxGuidService, rxRecordGridDesignUtilsService, rxRecordGridFilterHelperService, rxJsonParserService) {
            var _this = _super.call(this, injector) || this;
            _this.injector = injector;
            _this.rxModalService = rxModalService;
            _this.viewDesignerFacade = viewDesignerFacade;
            _this.rxGuidService = rxGuidService;
            _this.rxRecordGridDesignUtilsService = rxRecordGridDesignUtilsService;
            _this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            _this.rxJsonParserService = rxJsonParserService;
            _this.currentPresetSelectorGuid$ = new rxjs.ReplaySubject(1);
            _this.presetSelectors$ = _this.viewDesignerFacade.getComponentsByType(i1$1.RxViewComponentType.ViewPresetSelector);
            _this.presetSelectorOptions$ = _this.presetSelectors$.pipe(operators.map(function (items) { return items.map(function (_d) {
                var guid = _d.guid, data = _d.data;
                return ({ id: guid, name: data.name });
            }); }));
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.selectedPresetsList$ = _this.currentPresetSelectorGuid$.pipe(operators.tap(function (guid) { return _this.updateViewPresetSelectorProp(guid); }), operators.switchMap(function (guid) { return _this.rxRecordGridDesignUtilsService.getPresetsList(guid); }), operators.shareReplay({ refCount: true, bufferSize: 1 }), operators.takeUntil(_this.destroyed$));
            _this.viewPresetSelectorProp$ = _this.designerItemModel.sandbox.getComponentPropertyValue('viewPresetSelector');
            _this.gridColumnGuids$ = _this.designerItemModel.sandbox.getChildComponentGuids(function (component) { return component.type === RX_RECORD_GRID.components.column; });
            _this.selectOptions = {
                options: [],
                emptyOption: true,
                label: 'View preset selector',
                beforeValueChange: function (oldValue, newValue) {
                    if (oldValue && oldValue !== newValue) {
                        return _this.rxModalService.confirm({
                            title: 'Warning',
                            modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                            message: 'All record grid view presets will be cleared. Do you want to continue?'
                        });
                    }
                    else {
                        return Promise.resolve(true);
                    }
                }
            };
            return _this;
        }
        RecordGridViewPresetsWidgetComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b;
            if (((_a = changes.options.currentValue.recordDefinition) === null || _a === void 0 ? void 0 : _a.name) !== ((_b = changes.options.previousValue.recordDefinition) === null || _b === void 0 ? void 0 : _b.name)) {
                this.currentPresetSelectorGuid = null;
                this.currentPresetSelectorGuid$.next(null);
            }
        };
        RecordGridViewPresetsWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.presetSelectorOptions$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (options) {
                _this.selectOptions.options = options;
            });
            // select current preset selector item
            this.viewPresetSelectorProp$
                .pipe(operators.first(), operators.map(function (val) { return _this.designerItemModel.extractViewPresetSelectorGuid(val); }), operators.withLatestFrom(this.presetSelectorOptions$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_d) {
                var _e = __read(_d, 2), guid = _e[0], presetSelectorOptions = _e[1];
                var _a;
                var selectedOption = (_a = presetSelectorOptions.find(function (item) { return item.id === guid; })) === null || _a === void 0 ? void 0 : _a.id;
                if (selectedOption) {
                    _this.currentPresetSelectorGuid = selectedOption;
                    _this.currentPresetSelectorGuid$.next(_this.currentPresetSelectorGuid);
                }
            });
            this.gridColumnGuids$
                .pipe(operators.filter(function () { return !!_this.currentPresetSelectorGuid; }), operators.switchMap(function (guids) { return rxjs.combineLatest(guids.map(function (guid) { return rxjs.combineLatest([
                _this.designerItemModel.sandbox.getComponentPropertyValue('sortable', guid),
                _this.designerItemModel.sandbox.getComponentPropertyValue('filterable', guid),
                _this.viewDesignerFacade.getChildComponents(guid, function (c) { return c.type === RX_RECORD_GRID.components.filterPreset; })
            ]); })); }), operators.distinctUntilChanged(lodash.isEqual), 
            // in case of removing and adding columns at a same time from columns modal
            // stream updated several times with according to adding/removing columns
            // we need it to be stabilized to proceed with column presets updating
            operators.debounceTime(100), operators.switchMap(function () { return _this.designerItemModel.columns$.pipe(operators.first()); }), operators.withLatestFrom(this.designerItemModel.childComponentsTree$.pipe(operators.map(function (components) { return lodash.cloneDeep(components); }))), operators.skip(1), operators.takeUntil(this.destroyed$))
                .subscribe(function (_d) {
                var _e = __read(_d, 2), gridColumns = _e[0], allComponents = _e[1];
                _this.updateColumnPresets(allComponents, gridColumns);
            });
        };
        RecordGridViewPresetsWidgetComponent.prototype.updateColumnPresets = function (allComponents, gridColumns) {
            var _this = this;
            var viewPresetsPayload = allComponents
                .filter(function (component) { return component.type === RX_RECORD_GRID.components.viewPreset; })
                .map(function (component) {
                var presetColumnComponents = component.children.filter(function (item) { return item.type === RX_RECORD_GRID.components.columnViewPreset; });
                var presetFilterComponents = _this.getPresetFilterComponentsForColumns(component, gridColumns);
                var updatedPresetColumns = gridColumns
                    .map(function (gridColumn) {
                    var existingPresetColumn = presetColumnComponents.find(function (presetColumn) { return presetColumn.data.fieldId === gridColumn.fieldId; });
                    if (existingPresetColumn) {
                        if (!gridColumn.sortable) {
                            existingPresetColumn.data.sortable = null;
                        }
                        return existingPresetColumn;
                    }
                    else {
                        var columnPresetPayload = _this.rxRecordGridDesignUtilsService.getColumnPresetPayload(gridColumn);
                        columnPresetPayload.data.visible = false;
                        columnPresetPayload.data.index = null;
                        columnPresetPayload.data.width = null;
                        return columnPresetPayload;
                    }
                })
                    .map(function (presetCol, i, array) {
                    if (presetCol.data.index === null) {
                        presetCol.data.index = Math.max.apply(Math, __spreadArray([], __read(array.map(function (col) { return col.data.index; })))) + 1;
                    }
                    return presetCol;
                });
                component.children = __spreadArray(__spreadArray([], __read(updatedPresetColumns)), __read(presetFilterComponents));
                return component;
            });
            this.designerItemModel.sandbox.setChildrenByType(viewPresetsPayload, [RX_RECORD_GRID.components.viewPreset]);
        };
        RecordGridViewPresetsWidgetComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RecordGridViewPresetsWidgetComponent.prototype.getPresetFilterComponentsForColumns = function (presetComponent, gridColumns) {
            var _this = this;
            var gridColumnsIds = gridColumns.filter(function (col) { return col.filterable; }).map(function (col) { return col.fieldId; });
            var presetFilterComponents = presetComponent.children.filter(function (item) { return item.type !== RX_RECORD_GRID.components.columnViewPreset; });
            // removing filter presets for removed columns or ones that have removed named filter option reference
            var filteredPresetFilterComponents = presetFilterComponents.reduce(function (result, presetFilterComponent) {
                var _a, _b, _c;
                // checking if column still can be used for filtering
                if (gridColumnsIds.includes(presetFilterComponent.data.fieldId)) {
                    var namedFilterOptions = (_b = (_a = gridColumns.find(function (col) { return col.fieldId === presetFilterComponent.data.fieldId; })) === null || _a === void 0 ? void 0 : _a.namedFilterOptions) !== null && _b !== void 0 ? _b : [];
                    var namedFilterOptionsGuids = namedFilterOptions.map(function (option) { return option.guid; });
                    var presetFiltersObj = _this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData([
                        presetFilterComponent
                    ]);
                    presetFiltersObj = _this.deserializeNamedOptions(presetFiltersObj);
                    var namedFilterOptionGuid = (_c = presetFiltersObj[0].value) === null || _c === void 0 ? void 0 : _c[i1$1.RecordGridNamedFilterOptionKey];
                    // if named filter option selected then check if it's still available
                    if (namedFilterOptionGuid) {
                        if (namedFilterOptionsGuids.includes(namedFilterOptionGuid)) {
                            result.push(presetFilterComponent);
                        }
                    }
                    else {
                        result.push(presetFilterComponent);
                    }
                }
                return result;
            }, []);
            if (presetFilterComponents.length) {
                if (filteredPresetFilterComponents.length < presetFilterComponents.length) {
                    var presetFilters = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filteredPresetFilterComponents);
                    var newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(presetComponent.data.filters, presetFilters);
                    // updating filters JSON after column remove
                    presetComponent.data.filters = newFilterData
                        ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), presetFilters)
                        : null;
                }
                return filteredPresetFilterComponents;
            }
            return presetFilterComponents;
        };
        RecordGridViewPresetsWidgetComponent.prototype.deserializeNamedOptions = function (recordGridFilters) {
            var _this = this;
            return recordGridFilters.map(function (filter) {
                var value = _this.rxJsonParserService.tryParseJson(filter.value);
                if (value && value[i1$1.RecordGridNamedFilterOptionKey]) {
                    return Object.assign(Object.assign({}, filter), { value: value });
                }
                return filter;
            });
        };
        RecordGridViewPresetsWidgetComponent.prototype.openEditor = function (preset) {
            var _this = this;
            rxjs.combineLatest([
                this.designerItemModel.gridViewPresets$,
                this.selectedPresetsList$,
                this.designerItemModel.columns$,
                this.designerItemModel.recordDefinition$
            ])
                .pipe(operators.first(), operators.takeUntil(this.destroyed$))
                .subscribe(function (_d) {
                var _e = __read(_d, 4), viewPresets = _e[0], presetsList = _e[1], columns = _e[2], recordDefinition = _e[3];
                _this.rxModalService
                    .openModal({
                    title: 'Edit view presets',
                    content: RecordGridEditViewPresetsModalComponent,
                    size: i1$1.OpenViewActionModalSize.Large,
                    data: {
                        viewPresets: viewPresets,
                        presetsList: presetsList,
                        gridColumns: columns,
                        recordDefinition: recordDefinition,
                        activePreset: preset === null || preset === void 0 ? void 0 : preset.guid,
                        isReadOnly: _this.isDisabled
                    }
                })
                    .then(function (result) {
                    _this.onPresetModalClose(result);
                })
                    .catch(lodash.noop);
            });
        };
        RecordGridViewPresetsWidgetComponent.prototype.trackByGuid = function (index, item) {
            return item.name;
        };
        RecordGridViewPresetsWidgetComponent.prototype.onPresetModalClose = function (result) {
            var _this = this;
            if (result && result.presets) {
                this.designerItemModel.childComponentsTree$
                    .pipe(operators.first(), operators.map(function (components) { return lodash.cloneDeep(components); }), operators.takeUntil(this.destroyed$))
                    .subscribe(function (components) {
                    result.presets.forEach(function (preset) {
                        var presetComponent = components.find(function (c) { return c.type === RX_RECORD_GRID.components.viewPreset && c.data.viewPresetGuid === preset.guid; });
                        if (presetComponent) {
                            var columnPayloads = preset.presetColumns.map(function (column) { return _this.rxRecordGridDesignUtilsService.getColumnPresetPayload(column.data); });
                            var filterPayloads = _this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(preset.filters.basicFilters);
                            presetComponent.data = {
                                viewPresetGuid: preset.guid,
                                filters: preset.filters.filtersJson
                            };
                            presetComponent.children = __spreadArray(__spreadArray([], __read(columnPayloads)), __read(filterPayloads));
                        }
                    });
                    _this.designerItemModel.sandbox.setChildren(components);
                });
            }
        };
        RecordGridViewPresetsWidgetComponent.prototype.updateViewPresetSelectorProp = function (guid) {
            this.designerItemModel.sandbox.updateComponentProperties({
                viewPresetSelector: guid ? "${view.components." + guid + ".api}" : null
            });
        };
        return RecordGridViewPresetsWidgetComponent;
    }(i2.InspectorWidgetBase));
    RecordGridViewPresetsWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$6.RxModalService }, { token: i1__namespace$3.ViewDesignerFacade }, { token: i2__namespace$1.RxGuidService }, { token: RxRecordGridDesignUtilsService }, { token: RxRecordGridFilterHelperService }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridViewPresetsWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridViewPresetsWidgetComponent, selector: "rx-record-grid-view-presets-widget", inputs: { options: "options" }, usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<rx-select-form-control\n  class=\"d-block mb-3\"\n  rx-id=\"preset-selector\"\n  [options]=\"selectOptions\"\n  [(ngModel)]=\"currentPresetSelectorGuid\"\n  (ngModelChange)=\"currentPresetSelectorGuid$.next($event)\"\n  [disabled]=\"isDisabled\"\n>\n</rx-select-form-control>\n\n<div [hidden]=\"!options.recordDefinition\" *ngIf=\"selectedPresetsList$ | async as presetsList\">\n  <adapt-button\n    *ngIf=\"presetsList.length\"\n    btn-type=\"tertiary\"\n    rx-id=\"edit-view-presets-button\"\n    class=\"p-0 pb-1\"\n    (click)=\"openEditor()\"\n  >\n    <span class=\"d-icon-left-plus_circle\"></span>\n    Edit view presets\n  </adapt-button>\n\n  <span rx-id=\"no-presets\" *ngIf=\"currentPresetSelectorGuid && presetsList.length === 0\" class=\"text-tertiary\">\n    No presets added.\n  </span>\n\n  <div rx-id=\"presets-list\">\n    <div\n      class=\"border mb-1 pr-2 d-flex justify-content-between text-break\"\n      *ngFor=\"let preset of presetsList; let index = index; trackBy: trackByGuid\"\n    >\n      <strong class=\"preset-name\" rx-id=\"preset-name\" [title]=\"preset.name\">\n        {{ preset.name }}\n      </strong>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(preset)\"\n      ></button>\n    </div>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.preset-name{padding:5px 10px;font-size:14px}.d-icon-pencil{cursor:pointer}.d-icon-pencil:not(:hover){color:#313538}\n"], components: [{ type: i2__namespace$5.SelectFormControlComponent, selector: "rx-select-form-control", inputs: ["options", "appendToBody", "formControl"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid-view-presets-widget',
                        templateUrl: './record-grid-view-presets-widget.component.html',
                        styleUrls: ['./record-grid-view-presets-widget.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$6.RxModalService }, { type: i1__namespace$3.ViewDesignerFacade }, { type: i2__namespace$1.RxGuidService }, { type: RxRecordGridDesignUtilsService }, { type: RxRecordGridFilterHelperService }, { type: i2__namespace$1.RxJsonParserService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var RecordGridViewPresetColumnsModalModule = /** @class */ (function () {
        function RecordGridViewPresetColumnsModalModule() {
        }
        return RecordGridViewPresetColumnsModalModule;
    }());
    RecordGridViewPresetColumnsModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridViewPresetColumnsModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalModule, declarations: [RecordGridViewPresetColumnsModalComponent], imports: [i1.AdaptAccordionModule,
            i1.AdaptButtonModule,
            i1.AdaptRxCheckboxModule,
            i1.AdaptRxTextfieldModule,
            i3.CommonModule,
            i8.DragDropModule,
            i2$4.FormsModule,
            i2.StepperWithUnitsFormControlModule,
            i2$1.TranslateModule], exports: [RecordGridViewPresetColumnsModalComponent] });
    RecordGridViewPresetColumnsModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalModule, imports: [[
                i1.AdaptAccordionModule,
                i1.AdaptButtonModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxTextfieldModule,
                i3.CommonModule,
                i8.DragDropModule,
                i2$4.FormsModule,
                i2.StepperWithUnitsFormControlModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetColumnsModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RecordGridViewPresetColumnsModalComponent],
                        exports: [RecordGridViewPresetColumnsModalComponent],
                        imports: [
                            i1.AdaptAccordionModule,
                            i1.AdaptButtonModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxTextfieldModule,
                            i3.CommonModule,
                            i8.DragDropModule,
                            i2$4.FormsModule,
                            i2.StepperWithUnitsFormControlModule,
                            i2$1.TranslateModule
                        ]
                    }]
            }] });

    var RecordGridEditViewPresetsModalModule = /** @class */ (function () {
        function RecordGridEditViewPresetsModalModule() {
        }
        return RecordGridEditViewPresetsModalModule;
    }());
    RecordGridEditViewPresetsModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridEditViewPresetsModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalModule, declarations: [RecordGridEditViewPresetsModalComponent], imports: [i1.AdaptAccordionModule,
            i1.AdaptButtonModule,
            i1.AdaptTagModule,
            i3.CommonModule,
            i2$4.FormsModule,
            RecordGridFilterSelectControlModule,
            RecordGridSortEditorControlModule,
            RecordGridViewPresetColumnsModalModule,
            i2$1.TranslateModule], exports: [RecordGridEditViewPresetsModalComponent] });
    RecordGridEditViewPresetsModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalModule, imports: [[
                i1.AdaptAccordionModule,
                i1.AdaptButtonModule,
                i1.AdaptTagModule,
                i3.CommonModule,
                i2$4.FormsModule,
                RecordGridFilterSelectControlModule,
                RecordGridSortEditorControlModule,
                RecordGridViewPresetColumnsModalModule,
                i2$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridEditViewPresetsModalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RecordGridEditViewPresetsModalComponent],
                        exports: [RecordGridEditViewPresetsModalComponent],
                        imports: [
                            i1.AdaptAccordionModule,
                            i1.AdaptButtonModule,
                            i1.AdaptTagModule,
                            i3.CommonModule,
                            i2$4.FormsModule,
                            RecordGridFilterSelectControlModule,
                            RecordGridSortEditorControlModule,
                            RecordGridViewPresetColumnsModalModule,
                            i2$1.TranslateModule
                        ]
                    }]
            }] });

    var RecordGridViewPresetsWidgetModule = /** @class */ (function () {
        function RecordGridViewPresetsWidgetModule() {
        }
        return RecordGridViewPresetsWidgetModule;
    }());
    RecordGridViewPresetsWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridViewPresetsWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetModule, declarations: [RecordGridViewPresetsWidgetComponent], imports: [i3.CommonModule, i1.AdaptButtonModule, i2$4.FormsModule, RecordGridEditViewPresetsModalModule, i2.SelectFormControlModule], exports: [RecordGridViewPresetsWidgetComponent] });
    RecordGridViewPresetsWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetModule, imports: [[i3.CommonModule, i1.AdaptButtonModule, i2$4.FormsModule, RecordGridEditViewPresetsModalModule, i2.SelectFormControlModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridViewPresetsWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RecordGridViewPresetsWidgetComponent],
                        exports: [RecordGridViewPresetsWidgetComponent],
                        imports: [i3.CommonModule, i1.AdaptButtonModule, i2$4.FormsModule, RecordGridEditViewPresetsModalModule, i2.SelectFormControlModule]
                    }]
            }] });

    var RxRecordGridDesignAdapterService = /** @class */ (function () {
        function RxRecordGridDesignAdapterService(rxJsonParserService, rxViewDefinitionParserService) {
            this.rxJsonParserService = rxJsonParserService;
            this.rxViewDefinitionParserService = rxViewDefinitionParserService;
        }
        RxRecordGridDesignAdapterService.prototype.adaptDefinition = function (elementDefinition) {
            var _a, _b, _c, _d, _e;
            var layout = this.rxJsonParserService.tryParseJson(elementDefinition.layout);
            var rowActionsOutlet = lodash.find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });
            elementDefinition.propertiesByName.enableFilterPresets =
                (_a = elementDefinition.propertiesByName.enableFilterPresets) !== null && _a !== void 0 ? _a : 'true';
            if (!rowActionsOutlet) {
                layout.outlets.push(i1$1.RxViewLayout.getOutlet(RX_RECORD_GRID.rowActionsOutletName));
            }
            else {
                // move row actions to the end to make sure they are in the same order as in layout outlet
                lodash.forEach((_b = rowActionsOutlet.columns[0]) === null || _b === void 0 ? void 0 : _b.children, function (rowActionGuid) {
                    var rowAction = lodash.find(elementDefinition.componentDefinitions, { guid: rowActionGuid });
                    lodash.pull(elementDefinition.componentDefinitions, rowAction).push(rowAction);
                });
            }
            elementDefinition.layout = JSON.stringify(layout);
            Object.assign(elementDefinition.propertiesByName, {
                expandable: (_c = elementDefinition.propertiesByName.expandable) !== null && _c !== void 0 ? _c : false,
                showDataForAllLocales: (_d = elementDefinition.propertiesByName.showDataForAllLocales) !== null && _d !== void 0 ? _d : false,
                requiredFilters: (_e = elementDefinition.propertiesByName.requiredFilters) !== null && _e !== void 0 ? _e : (elementDefinition.propertiesByName.requireFiltering === 'true' ? 1 : 0)
            });
            delete elementDefinition.propertiesByName.requireFiltering;
            this.rxViewDefinitionParserService
                .getComponents(elementDefinition)
                .map(function (componentDefinition) { return componentDefinition.componentDefinition; })
                .forEach(function (componentDefinition) {
                var _a, _b;
                if (componentDefinition.type === RX_RECORD_GRID.components.column) {
                    Object.assign(componentDefinition.propertiesByName, {
                        wrapText: (_a = componentDefinition.propertiesByName.wrapText) !== null && _a !== void 0 ? _a : false,
                        typeaheadKeystrokeCount: Number((_b = componentDefinition.propertiesByName.typeaheadKeystrokeCount) !== null && _b !== void 0 ? _b : RX_RECORD_GRID.defaultTypeaheadKeystrokeCount)
                    });
                }
            });
        };
        return RxRecordGridDesignAdapterService;
    }());
    RxRecordGridDesignAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignAdapterService, deps: [{ token: i2__namespace$1.RxJsonParserService }, { token: i1__namespace$4.RxViewDefinitionParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridDesignAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignAdapterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDesignAdapterService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxJsonParserService }, { type: i1__namespace$4.RxViewDefinitionParserService }]; } });

    var RecordGridDesignModule = /** @class */ (function () {
        function RecordGridDesignModule(rxDefinitionAdapterRegistryService, rxRecordGridDesignAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.rxRecordGridDesignAdapterService = rxRecordGridDesignAdapterService;
            this.rxDefinitionAdapterRegistryService.registerDesignAdapter(RX_RECORD_GRID.type, this.rxRecordGridDesignAdapterService);
        }
        return RecordGridDesignModule;
    }());
    RecordGridDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: RxRecordGridDesignAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignModule, declarations: [RecordGridDesignComponent,
            RecordGridColumnEditorControlComponent,
            RecordGridColumnEditorModalComponent,
            ColumnEditorAlignmentComponent,
            RecordGridFilterPresetEditorControlComponent,
            RecordGridFilterPresetEditorModalComponent,
            RxRecordGridRowActionEditorWidgetComponent,
            RecordGridRowActionEditorModalComponent,
            RecordGridCellDisplayPropertiesComponent,
            RecordGridCellDisplayPropertiesEditorComponent,
            RecordGridNamedFilterOptionsComponent,
            RecordGridNamedFilterOptionsEditorModalComponent], imports: [i3.CommonModule,
            i2$4.FormsModule,
            i2$4.ReactiveFormsModule,
            RecordGridSortEditorControlModule,
            i1.AdaptButtonModule,
            i1.AdaptTooltipModule,
            i1.AdaptAccordionModule,
            obsolete.AdaptTextFieldModule,
            i1.AdaptRxSearchModule,
            i1.AdaptTreeModule,
            i1.AdaptRxCheckboxModule,
            i1.AdaptRxRadiobuttonModule,
            i1$3.ActionListControlModule,
            i2.GroupButtonFormControlModule,
            i8.DragDropModule,
            i2.ExpressionEditorModule,
            i1.AdaptAdvancedFilteringModule,
            i1.AdaptRxTextfieldModule,
            i1$6.RxDirectivesModule,
            i1.AdaptRxLabelModule,
            RecordGridCommonModule,
            i1$3.ViewDesignerCanvasModule,
            i1$7.AdaptTableModule,
            i1.AdaptEmptyStateModule,
            i1$2.RxDefinitionModule,
            i1.AdaptRxSelectModule,
            i2.RxDefinitionPickerModule,
            i2.ExpressionFormControlModule,
            i1.AdaptIconModule,
            i2$1.TranslateModule,
            i2.SelectFormControlModule,
            i2$2.RxUniqueValidatorModule,
            i1.AdaptRxSwitchModule,
            i2.IconPickerFormControlModule,
            i1.AdaptPopoverModule,
            RxAdvancedFilteringFieldsProviderModule,
            RecordGridViewPresetsWidgetModule,
            RecordGridFilterSelectControlModule,
            i2.StepperWithUnitsFormControlModule,
            i2$2.RxNoWhitespaceValidatorModule] });
    RecordGridDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignModule, imports: [[
                i3.CommonModule,
                i2$4.FormsModule,
                i2$4.ReactiveFormsModule,
                RecordGridSortEditorControlModule,
                i1.AdaptButtonModule,
                i1.AdaptTooltipModule,
                i1.AdaptAccordionModule,
                obsolete.AdaptTextFieldModule,
                i1.AdaptRxSearchModule,
                i1.AdaptTreeModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxRadiobuttonModule,
                i1$3.ActionListControlModule,
                i2.GroupButtonFormControlModule,
                i8.DragDropModule,
                i2.ExpressionEditorModule,
                i1.AdaptAdvancedFilteringModule,
                i1.AdaptRxTextfieldModule,
                i1$6.RxDirectivesModule,
                i1.AdaptRxLabelModule,
                RecordGridCommonModule,
                i1$3.ViewDesignerCanvasModule,
                i1$7.AdaptTableModule,
                i1.AdaptEmptyStateModule,
                i1$2.RxDefinitionModule,
                i1.AdaptRxSelectModule,
                i2.RxDefinitionPickerModule,
                i2.ExpressionFormControlModule,
                i1.AdaptIconModule,
                i2$1.TranslateModule,
                i2.SelectFormControlModule,
                i2$2.RxUniqueValidatorModule,
                i1.AdaptRxSwitchModule,
                i2.IconPickerFormControlModule,
                i1.AdaptPopoverModule,
                RxAdvancedFilteringFieldsProviderModule,
                RecordGridViewPresetsWidgetModule,
                RecordGridFilterSelectControlModule,
                i2.StepperWithUnitsFormControlModule,
                i2$2.RxNoWhitespaceValidatorModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.CommonModule,
                            i2$4.FormsModule,
                            i2$4.ReactiveFormsModule,
                            RecordGridSortEditorControlModule,
                            i1.AdaptButtonModule,
                            i1.AdaptTooltipModule,
                            i1.AdaptAccordionModule,
                            obsolete.AdaptTextFieldModule,
                            i1.AdaptRxSearchModule,
                            i1.AdaptTreeModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxRadiobuttonModule,
                            i1$3.ActionListControlModule,
                            i2.GroupButtonFormControlModule,
                            i8.DragDropModule,
                            i2.ExpressionEditorModule,
                            i1.AdaptAdvancedFilteringModule,
                            i1.AdaptRxTextfieldModule,
                            i1$6.RxDirectivesModule,
                            i1.AdaptRxLabelModule,
                            RecordGridCommonModule,
                            i1$3.ViewDesignerCanvasModule,
                            i1$7.AdaptTableModule,
                            i1.AdaptEmptyStateModule,
                            i1$2.RxDefinitionModule,
                            i1.AdaptRxSelectModule,
                            i2.RxDefinitionPickerModule,
                            i2.ExpressionFormControlModule,
                            i1.AdaptIconModule,
                            i2$1.TranslateModule,
                            i2.SelectFormControlModule,
                            i2$2.RxUniqueValidatorModule,
                            i1.AdaptRxSwitchModule,
                            i2.IconPickerFormControlModule,
                            i1.AdaptPopoverModule,
                            RxAdvancedFilteringFieldsProviderModule,
                            RecordGridViewPresetsWidgetModule,
                            RecordGridFilterSelectControlModule,
                            i2.StepperWithUnitsFormControlModule,
                            i2$2.RxNoWhitespaceValidatorModule
                        ],
                        declarations: [
                            RecordGridDesignComponent,
                            RecordGridColumnEditorControlComponent,
                            RecordGridColumnEditorModalComponent,
                            ColumnEditorAlignmentComponent,
                            RecordGridFilterPresetEditorControlComponent,
                            RecordGridFilterPresetEditorModalComponent,
                            RxRecordGridRowActionEditorWidgetComponent,
                            RecordGridRowActionEditorModalComponent,
                            RecordGridCellDisplayPropertiesComponent,
                            RecordGridCellDisplayPropertiesEditorComponent,
                            RecordGridNamedFilterOptionsComponent,
                            RecordGridNamedFilterOptionsEditorModalComponent
                        ],
                        entryComponents: [
                            RecordGridDesignComponent,
                            RecordGridColumnEditorControlComponent,
                            RecordGridColumnEditorModalComponent,
                            RecordGridFilterPresetEditorControlComponent,
                            RecordGridFilterPresetEditorModalComponent
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: RxRecordGridDesignAdapterService }]; } });

    var RxFilterByCardSelectionDialogComponent = /** @class */ (function () {
        function RxFilterByCardSelectionDialogComponent(context, translateService) {
            this.context = context;
            this.translateService = translateService;
            this.alertConfig = {
                content: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.info.message'),
                type: 'section',
                dismissible: false,
                variant: 'info',
                icon: true
            };
            this.options = this.context.getData().filterableFields;
        }
        RxFilterByCardSelectionDialogComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        RxFilterByCardSelectionDialogComponent.prototype.apply = function () {
            this.context.close(this.field[0].id);
        };
        return RxFilterByCardSelectionDialogComponent;
    }());
    RxFilterByCardSelectionDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterByCardSelectionDialogComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxFilterByCardSelectionDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxFilterByCardSelectionDialogComponent, selector: "rx-filter-by-card-selection", ngImport: i0__namespace, template: "<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<div class=\"modal-body pt-0\">\n  <adapt-rx-select\n    [label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.field.label' | translate\n    \"\n    [options]=\"options\"\n    [(ngModel)]=\"field\"\n    [required]=\"true\"\n    [optionFormatter]=\"optionFormatter\"\n    [popupClass]=\"'rx-filter-by-card-selection-field-dropdown'\"\n  >\n  </adapt-rx-select>\n</div>\n\n<div class=\"modal-footer\">\n  <button adapt-button type=\"button\" btn-type=\"primary\" rx-id=\"apply-button\" [disabled]=\"!field\" (click)=\"apply()\">\n    {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"context.dismiss()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFilterByCardSelectionDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-filter-by-card-selection',
                        templateUrl: './filter-by-card-selection-dialog.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i2__namespace.TranslateService }]; } });

    var RxRecordGridUserPreferencesService = /** @class */ (function () {
        function RxRecordGridUserPreferencesService(recordGridConfigUtilsService, rxUserPreferencesService, rxRecordGridFilterService, rxRecordGridFilterHelperService, rxObjectUtilsService) {
            this.recordGridConfigUtilsService = recordGridConfigUtilsService;
            this.rxUserPreferencesService = rxUserPreferencesService;
            this.rxRecordGridFilterService = rxRecordGridFilterService;
            this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            this.rxObjectUtilsService = rxObjectUtilsService;
            this.initialPreferences = {
                columns: [],
                filterPresets: [],
                filters: null,
                visibleCardFieldIds: [],
                appliedExternalFilterPresetGuid: null,
                viewPresets: {}
            };
            this.preferences = Object.assign({}, this.initialPreferences);
        }
        RxRecordGridUserPreferencesService.prototype.saveUserPreferences = function (guid, adaptTableConfig, state) {
            var _this = this;
            if (adaptTableConfig.cardLayoutColumns) {
                this.preferences.visibleCardFieldIds = this.getVisibleCardFieldIds(adaptTableConfig);
            }
            else {
                this.preferences.columns = this.getColumnsPreferences(adaptTableConfig);
            }
            this.preferences.filterPresets = state.advancedFiltering.savedFilters
                .filter(function (savedFilter) { return !savedFilter.isCreatedByOtherUsers; })
                .map(function (savedFilter) { return _this.getPreferencesFilterPresets(savedFilter, state.recordDefinition.fieldDefinitionsById, state.advancedFiltering.recordGridFilterConfigs); });
            var currentFilters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(state.advancedFiltering.selectedFilters, state.recordDefinition.fieldDefinitionsById, state.advancedFiltering.recordGridFilterConfigs);
            this.preferences.filters = currentFilters;
            var appliedSharedFilterPreset = state.advancedFiltering.appliedSharedFilterPreset;
            this.preferences.appliedExternalFilterPresetGuid = appliedSharedFilterPreset && appliedSharedFilterPreset.id;
            if (this.selectedViewPresetGuid) {
                var selectedPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];
                var newPreset = {
                    viewPresetGuid: this.selectedViewPresetGuid,
                    columns: this.getColumnsPreferences(adaptTableConfig),
                    filters: lodash.isEmpty(currentFilters) ? null : currentFilters
                };
                if (lodash.isEqual(selectedPreset.initial, newPreset)) {
                    this.discardViewPresetChanges(this.selectedViewPresetGuid);
                }
                else {
                    selectedPreset.edited = newPreset;
                }
            }
            this.save(guid, this.preferences);
        };
        RxRecordGridUserPreferencesService.prototype.get = function (guid) {
            var _this = this;
            this.preferences = Object.assign({}, this.initialPreferences);
            return this.rxUserPreferencesService
                .getUiComponentPreferences(guid)
                .pipe(operators.map(function (preferences) { return lodash.assign(_this.preferences, preferences); }));
        };
        RxRecordGridUserPreferencesService.prototype.getAppliedSharedFilterPresetGuid = function () {
            return this.preferences.appliedExternalFilterPresetGuid;
        };
        RxRecordGridUserPreferencesService.prototype.applyUserPreferencesForColumns = function (adaptTableConfig, columnsWithMetadata, gridGuid) {
            var isColumnPreferencesUpdated = this.reviseColumnPreferences(this.preferences.columns, adaptTableConfig);
            if (isColumnPreferencesUpdated) {
                this.save(gridGuid, this.preferences);
            }
            var columnSortMeta = this.getColumnSortMeta(this.preferences.columns);
            this.sortColumnsConfigs(adaptTableConfig.columns);
            this.setColumnsWidths(adaptTableConfig.columns, this.preferences.columns, adaptTableConfig.columnResizeMode);
            columnSortMeta = lodash.filter(columnSortMeta, function (sortMeta) { return lodash.some(adaptTableConfig.columns, function (tableColumn) { return tableColumn.field === sortMeta.field; }); });
            if (this.preferences.columns.length) {
                adaptTableConfig.multiSortMeta = columnSortMeta;
            }
            if (adaptTableConfig.cardLayoutColumns) {
                this.setCardFieldsVisibility(adaptTableConfig.columns);
            }
            else {
                this.setColumnsVisibility(adaptTableConfig.columns, columnsWithMetadata);
            }
        };
        RxRecordGridUserPreferencesService.prototype.reviseColumnPreferences = function (columnPreferences, _e) {
            var columns = _e.columns;
            var isColumnPreferencesChanged = false;
            if (columnPreferences.length) {
                var existingAdaptColumnIds_1 = lodash.map(columns, 'field');
                var removedReferences = lodash.remove(columnPreferences, function (_e) {
                    var fieldId = _e.fieldId;
                    return !existingAdaptColumnIds_1.includes(fieldId);
                });
                var isSortingPreferencesChanged_1 = removedReferences.some(function (_e) {
                    var sort = _e.sort;
                    return Boolean(sort);
                });
                var preferencesSize = columnPreferences.length;
                var sortableColumnPreferences_1 = [];
                columns.forEach(function (tableColumn, index) {
                    var _a;
                    var columnPreference = lodash.find(columnPreferences, { fieldId: tableColumn.field });
                    if (columnPreference) {
                        // Nullish width can be saved to preferences for column without width customization or without resizing.
                        // Non-empty value appearing means the width is customized after previous preferences saving.
                        (_a = columnPreference.width) !== null && _a !== void 0 ? _a : (columnPreference.width = tableColumn.width);
                        if (tableColumn.sortable) {
                            sortableColumnPreferences_1.push(columnPreference);
                        }
                        else if (columnPreference.sort) {
                            isSortingPreferencesChanged_1 = true;
                        }
                    }
                    else {
                        columnPreferences.splice(index, 0, {
                            fieldId: tableColumn.field,
                            index: index,
                            visible: !tableColumn.hidden,
                            width: tableColumn.width
                        });
                    }
                });
                if (isSortingPreferencesChanged_1) {
                    var sortMetaForSortableColumns = this.getColumnSortMeta(sortableColumnPreferences_1);
                    this.updateColumnSortPreferences(columnPreferences, sortMetaForSortableColumns);
                }
                isColumnPreferencesChanged =
                    !lodash.isEmpty(removedReferences) || preferencesSize < columnPreferences.length || isSortingPreferencesChanged_1;
            }
            return isColumnPreferencesChanged;
        };
        RxRecordGridUserPreferencesService.prototype.applyUserPreferences = function (adaptTableConfig, columnsWithMetadata, state, sharedFilterPresets) {
            var _e, _f;
            var _this = this;
            var _a, _b, _c, _d;
            if (!state.viewPresetSelector) {
                this.applyUserPreferencesForColumns(adaptTableConfig, columnsWithMetadata, state.guid);
            }
            var observable$;
            if (state === null || state === void 0 ? void 0 : state.enableFiltering) {
                var isFilterPresetDataChanged_1 = false;
                // Remove filter presets that do not have any filters left.
                // These filters could have been removed as a result of removing a column,
                // used by the filter, from the grid.
                this.preferences.filterPresets.forEach(function (filterPreset) {
                    var _a, _b, _c, _d;
                    var prevFilterDataLength = (_b = (_a = filterPreset.filterData) === null || _a === void 0 ? void 0 : _a.and) === null || _b === void 0 ? void 0 : _b.length;
                    filterPreset.filterData = _this.rxRecordGridFilterService.getFilterForAvailableColumns(filterPreset.filterData, columnsWithMetadata.filter(function (column) { return column.filterable; }));
                    if (prevFilterDataLength !== ((_d = (_c = filterPreset.filterData) === null || _c === void 0 ? void 0 : _c.and) === null || _d === void 0 ? void 0 : _d.length)) {
                        isFilterPresetDataChanged_1 = true;
                    }
                });
                this.preferences.filterPresets = this.preferences.filterPresets.filter(function (filterPreset) { return !lodash.isEmpty(filterPreset.filterData); });
                var prevFilters = lodash.cloneDeep((_a = this.preferences.filters) === null || _a === void 0 ? void 0 : _a.and);
                this.preferences.filters = this.rxRecordGridFilterService.getFilterForAvailableColumns(this.preferences.filters, columnsWithMetadata.filter(function (column) { return column.filterable; }));
                if (isFilterPresetDataChanged_1 ||
                    ((_c = (_b = this.preferences.filters) === null || _b === void 0 ? void 0 : _b.and) === null || _c === void 0 ? void 0 : _c.length) !== (prevFilters === null || prevFilters === void 0 ? void 0 : prevFilters.length) ||
                    !lodash.isEqual(prevFilters, (_d = this.preferences.filters) === null || _d === void 0 ? void 0 : _d.and)) {
                    this.save(state.guid, this.preferences);
                }
                state.advancedFiltering.savedFilters = this.getAdvancedFilterPresets(this.preferences.filterPresets, false);
                state.predefinedFilterPresets = state.predefinedFilterPresets.filter(function (filterPreset) { return !lodash.isNull(filterPreset.filters); });
                var predefinedFilterPresets = state.predefinedFilterPresets
                    .map(function (predefinedFilterPreset) {
                    var _a;
                    return ({
                        title: predefinedFilterPreset.title,
                        guid: predefinedFilterPreset.guid,
                        filterData: _this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(predefinedFilterPreset.filters, _this.rxRecordGridFilterService.deserializeNamedOptions((_a = predefinedFilterPreset.recordGridFilters) !== null && _a !== void 0 ? _a : []))
                    });
                })
                    .filter(function (preset) { return preset.filterData; });
                var builtInPresets = this.getAdvancedFilterPresets(predefinedFilterPresets, true);
                (_e = state.advancedFiltering.savedFilters).push.apply(_e, __spreadArray([], __read(builtInPresets)));
                if (sharedFilterPresets) {
                    if (this.getAppliedSharedFilterPresetGuid()) {
                        var appliedSharedFilterPreset = lodash.find(sharedFilterPresets, { id: this.getAppliedSharedFilterPresetGuid() });
                        state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;
                        state.advancedFiltering.activeSavedFilter = appliedSharedFilterPreset;
                    }
                    (_f = state.advancedFiltering.savedFilters).push.apply(_f, __spreadArray([], __read(sharedFilterPresets)));
                }
                var defaultBuiltInFilterPreset_1 = lodash.isString(state.defaultFilterPreset)
                    ? lodash.find(builtInPresets, function (builtInPreset) { return builtInPreset.id === state.defaultFilterPreset; })
                    : state.defaultFilterPreset;
                var defaultSharedFilterPreset = lodash.find(sharedFilterPresets, function (sharedFilterPreset) { return sharedFilterPreset.isDefault; });
                if (!lodash.isEmpty(this.preferences.filters)) {
                    observable$ = this.rxRecordGridFilterService
                        .getAdvancedFilterData(this.preferences.filters, state.recordDefinition.fieldDefinitionsById, state.advancedFiltering.recordGridFilterConfigs, state.recordDefinition, state.advancedFiltering.filterOptions, state.associationDescriptors)
                        .pipe(operators.tap(function (selectedAdvancedFilters) {
                        // Remove named filter options that do not have any filters left.
                        // These filters could have been removed as a result of removing named filter option,
                        // used by the filter, from the grid.
                        var newSelectedAdvancedFilters = _this.getFilterForAvailableNamedFilterOptions(selectedAdvancedFilters, state.namedFilterOptions);
                        state.advancedFiltering.selectedFilters = _this.getFiltersForSelectedColumns(newSelectedAdvancedFilters, adaptTableConfig.columns.filter(function (column) { return column.filterable; }));
                        _this.preferences.filters = _this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(state.advancedFiltering.selectedFilters, state.recordDefinition.fieldDefinitionsById, state.advancedFiltering.recordGridFilterConfigs);
                        if (state.advancedFiltering.appliedSharedFilterPreset) {
                            _this.addExternalPresetToSelectedFilters(state);
                        }
                    }));
                }
                else if (this.rxObjectUtilsService.isEmptyObject(this.preferences.filters) &&
                    !state.advancedFiltering.appliedSharedFilterPreset) {
                    if (defaultSharedFilterPreset && !defaultBuiltInFilterPreset_1) {
                        state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;
                        state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;
                    }
                }
                else if (lodash.isNull(this.preferences.filters) && !state.advancedFiltering.appliedSharedFilterPreset) {
                    if (defaultBuiltInFilterPreset_1) {
                        var defaultBuildInPresetFilterData = lodash.isString(state.defaultFilterPreset)
                            ? defaultBuiltInFilterPreset_1.filterData
                            : defaultBuiltInFilterPreset_1;
                        observable$ = this.rxRecordGridFilterService
                            .getAdvancedFilterData(defaultBuildInPresetFilterData, state.recordDefinition.fieldDefinitionsById, state.advancedFiltering.recordGridFilterConfigs, state.recordDefinition, state.advancedFiltering.filterOptions, state.associationDescriptors)
                            .pipe(operators.tap(function (selectedAdvancedFilters) {
                            state.advancedFiltering.selectedFilters = _this.getFiltersForSelectedColumns(selectedAdvancedFilters, adaptTableConfig.columns);
                            if (lodash.isString(state.defaultFilterPreset)) {
                                defaultBuiltInFilterPreset_1.filters =
                                    state.advancedFiltering.selectedFilters;
                                state.advancedFiltering.activeSavedFilter =
                                    defaultBuiltInFilterPreset_1;
                            }
                        }));
                    }
                    else if (defaultSharedFilterPreset) {
                        state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;
                        state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;
                    }
                }
                if (state.advancedFiltering.appliedSharedFilterPreset) {
                    this.addExternalPresetToSelectedFilters(state);
                }
            }
            return observable$ || rxjs.of(null);
        };
        RxRecordGridUserPreferencesService.prototype.applySharedViewPreset = function (gridState, adaptTableConfig, viewPresetGuid, viewPresetData) {
            if (!this.preferences.viewPresets[viewPresetGuid]) {
                this.preferences.viewPresets[viewPresetGuid] = {
                    initial: Object.assign(Object.assign({}, viewPresetData), { viewPresetGuid: viewPresetGuid })
                };
            }
            else {
                // updating initial and keeping user changes
                this.preferences.viewPresets[viewPresetGuid].initial = Object.assign(Object.assign({}, viewPresetData), { viewPresetGuid: viewPresetGuid });
            }
            return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);
        };
        RxRecordGridUserPreferencesService.prototype.applyViewPreset = function (gridState, adaptTableConfig, viewPresetGuid) {
            var systemViewPreset = gridState.viewPresets.find(function (preset) { return preset.viewPresetGuid === viewPresetGuid; });
            if (systemViewPreset && !lodash.has(this.preferences.viewPresets, [viewPresetGuid, 'edited'])) {
                // create/update the initial system view preset preferences
                var newViewPresetPreferences = this.createSystemViewPresetPreferences(systemViewPreset, gridState.columnsWithMetadata);
                this.preferences.viewPresets[viewPresetGuid] = { initial: newViewPresetPreferences };
            }
            else if (!this.preferences.viewPresets[viewPresetGuid] && this.selectedViewPresetGuid) {
                // save existing view preset preferences as new custom view preset preferences
                var selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];
                this.preferences.viewPresets[viewPresetGuid] = {
                    initial: Object.assign(Object.assign({}, lodash.cloneDeep(selectedViewPreset.edited || selectedViewPreset.initial)), { viewPresetGuid: viewPresetGuid })
                };
            }
            return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);
        };
        RxRecordGridUserPreferencesService.prototype.applyViewPresetInner = function (viewPresetGuid, adaptTableConfig, gridState) {
            var _this = this;
            var viewPresetPreferences = this.preferences.viewPresets[viewPresetGuid];
            var presetToApply = (viewPresetPreferences === null || viewPresetPreferences === void 0 ? void 0 : viewPresetPreferences.edited) || (viewPresetPreferences === null || viewPresetPreferences === void 0 ? void 0 : viewPresetPreferences.initial);
            var observable$ = rxjs.of(null);
            if (presetToApply) {
                this.selectedViewPresetGuid = presetToApply.viewPresetGuid;
                this.updateColumnsOrder(adaptTableConfig.columns, presetToApply.columns);
                this.updateColumnsVisibility(adaptTableConfig.columns, presetToApply.columns);
                this.setColumnsWidths(adaptTableConfig.columns, presetToApply.columns, adaptTableConfig.columnResizeMode);
                this.updateGridSorting(presetToApply, adaptTableConfig);
                observable$ = this.rxRecordGridFilterService
                    .getAdvancedFilterData(presetToApply.filters, gridState.recordDefinition.fieldDefinitionsById, gridState.advancedFiltering.recordGridFilterConfigs, gridState.recordDefinition, gridState.advancedFiltering.filterOptions, gridState.associationDescriptors)
                    .pipe(operators.tap(function (selectedAdvancedFilters) {
                    var newSelectedAdvancedFilters = _this.getFilterForAvailableNamedFilterOptions(selectedAdvancedFilters, gridState.namedFilterOptions);
                    gridState.advancedFiltering.selectedFilters = _this.getFiltersForSelectedColumns(newSelectedAdvancedFilters, adaptTableConfig.columns.filter(function (column) { return column.filterable; }));
                }));
            }
            return observable$;
        };
        RxRecordGridUserPreferencesService.prototype.isCurrentViewPresetEdited = function () {
            var _a;
            return Boolean((_a = this.preferences.viewPresets[this.selectedViewPresetGuid]) === null || _a === void 0 ? void 0 : _a.edited);
        };
        RxRecordGridUserPreferencesService.prototype.addExternalPresetToSelectedFilters = function (state) {
            var selectedFilter = lodash.cloneDeep(state.advancedFiltering.selectedFilters);
            selectedFilter.push({
                filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,
                value: state.advancedFiltering.appliedSharedFilterPreset.id
            });
            state.advancedFiltering.selectedFilters = selectedFilter;
        };
        RxRecordGridUserPreferencesService.prototype.createSystemViewPresetPreferences = function (sharedViewPreset, columnsWithMetadata) {
            var recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(sharedViewPreset.filters, sharedViewPreset.recordGridFilters
                ? this.rxRecordGridFilterService.deserializeNamedOptions(sharedViewPreset.recordGridFilters)
                : []);
            var columns = sharedViewPreset.columnViewPresets
                .sort(function (a, b) { return a.index - b.index; })
                .map(function (columnViewPreset, index) {
                var _a, _b;
                var width = lodash.has(columnViewPreset, 'width')
                    ? columnViewPreset.width
                    : (_b = (_a = lodash.find(columnsWithMetadata, { fieldId: columnViewPreset.fieldId })) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : null;
                var result = Object.assign(Object.assign({}, lodash.omit(columnViewPreset, 'sortable')), { index: index,
                    width: width });
                if (columnViewPreset.sortable) {
                    result.sort = {
                        priority: 0,
                        direction: columnViewPreset.sortable.direction
                    };
                }
                return result;
            });
            return lodash.cloneDeep({
                columns: columns,
                filters: recordGridFilterData,
                viewPresetGuid: sharedViewPreset.viewPresetGuid
            });
        };
        RxRecordGridUserPreferencesService.prototype.deleteViewPreset = function (viewPresetGuid) {
            delete this.preferences.viewPresets[viewPresetGuid];
        };
        RxRecordGridUserPreferencesService.prototype.isExistingViewPreset = function (viewPresetGuid) {
            return lodash.has(this.preferences.viewPresets, viewPresetGuid);
        };
        RxRecordGridUserPreferencesService.prototype.discardViewPresetChanges = function (viewPresetGuid) {
            var _a;
            (_a = this.preferences.viewPresets[viewPresetGuid]) === null || _a === void 0 ? true : delete _a.edited;
        };
        RxRecordGridUserPreferencesService.prototype.updateGridSorting = function (presetPreferences, adaptTableConfig) {
            var columnSortMeta = this.getColumnSortMeta(presetPreferences.columns);
            columnSortMeta = lodash.filter(columnSortMeta, function (sortMeta) { return lodash.some(adaptTableConfig.columns, function (tableColumn) { return tableColumn.sortable && tableColumn.field === sortMeta.field; }); });
            adaptTableConfig.multiSortMeta = columnSortMeta;
        };
        RxRecordGridUserPreferencesService.prototype.getAdvancedFilterPresets = function (filterPresets, isCreatedByOtherUsers) {
            return filterPresets
                .map(function (filterPreset) {
                var advancedFilterPreset = {
                    id: filterPreset.guid,
                    name: filterPreset.title,
                    filters: null,
                    filterData: filterPreset.filterData,
                    isCreatedByOtherUsers: isCreatedByOtherUsers
                };
                if (filterPreset.appliedSharedFilterPresetGuid) {
                    advancedFilterPreset.appliedSharedFilterPresetGuid = filterPreset.appliedSharedFilterPresetGuid;
                    advancedFilterPreset.filters = [
                        {
                            filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,
                            value: filterPreset.appliedSharedFilterPresetGuid
                        }
                    ];
                }
                return advancedFilterPreset;
            })
                .sort(function (savedFilter1, savedFilter2) { return savedFilter1.name.localeCompare(savedFilter2.name); });
        };
        RxRecordGridUserPreferencesService.prototype.getColumnsPreferences = function (_e) {
            var columns = _e.columns, multiSortMeta = _e.multiSortMeta;
            var columnPreferences = columns.map(function (_e, index) {
                var field = _e.field, hidden = _e.hidden, width = _e.width;
                var column = {
                    fieldId: field,
                    index: index,
                    visible: !hidden,
                    width: width
                };
                return column;
            });
            this.updateColumnSortPreferences(columnPreferences, multiSortMeta);
            return columnPreferences;
        };
        RxRecordGridUserPreferencesService.prototype.getPreferencesFilterPresets = function (savedFilter, fieldDefinitionsById, recordGridFilterConfigs) {
            var filterPreset = {
                guid: savedFilter.id,
                title: savedFilter.name,
                filterData: savedFilter.filters
                    ? this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(savedFilter.filters, fieldDefinitionsById, recordGridFilterConfigs)
                    : savedFilter.filterData
            };
            if (savedFilter.appliedSharedFilterPresetGuid) {
                filterPreset.appliedSharedFilterPresetGuid = savedFilter.appliedSharedFilterPresetGuid;
            }
            return filterPreset;
        };
        RxRecordGridUserPreferencesService.prototype.getVisibleCardFieldIds = function (_e) {
            var columns = _e.columns, multiSortMeta = _e.multiSortMeta;
            this.updateColumnSortPreferences(this.preferences.columns, multiSortMeta);
            return columns.filter(function (column) { return !column.hidden; }).map(function (column) { return parseInt(column.field, 10) || column.field; });
        };
        RxRecordGridUserPreferencesService.prototype.updateColumnSortPreferences = function (columns, sortMeta) {
            var _this = this;
            if (sortMeta) {
                columns.forEach(function (column) {
                    delete column.sort;
                });
                sortMeta.forEach(function (_e, index) {
                    var field = _e.field, order = _e.order;
                    var sortedColumn = columns.find(function (column) { return column.fieldId === field; });
                    if (sortedColumn) {
                        sortedColumn.sort = {
                            priority: index,
                            direction: _this.recordGridConfigUtilsService.getColumnSortDirection(order)
                        };
                    }
                });
            }
        };
        RxRecordGridUserPreferencesService.prototype.save = function (guid, preferences) {
            if (guid) {
                var data = {
                    preferences: JSON.stringify(preferences),
                    componentTypeName: RX_RECORD_GRID.type,
                    version: RX_RECORD_GRID.version,
                    componentId: guid
                };
                this.rxUserPreferencesService.setUiComponentPreferences(data, guid).subscribe();
            }
        };
        RxRecordGridUserPreferencesService.prototype.sortColumnsConfigs = function (gridColumns) {
            this.updateColumnsOrder(gridColumns, this.preferences.columns);
        };
        RxRecordGridUserPreferencesService.prototype.updateColumnsOrder = function (gridColumns, columnsPreferences) {
            var columnIndexesMap = lodash.reduce(gridColumns, function (result, column, columnIndex) {
                var columnSavedPreferences = lodash.find(columnsPreferences, function (columnPreferences) { return columnPreferences.fieldId === column.field; });
                if (columnSavedPreferences) {
                    result[column.field] = columnSavedPreferences.index;
                }
                else {
                    result[column.field] = columnIndex;
                }
                return result;
            }, {});
            gridColumns.sort(function (column1, column2) { return columnIndexesMap[column1.field] - columnIndexesMap[column2.field]; });
        };
        RxRecordGridUserPreferencesService.prototype.setColumnsVisibility = function (gridColumns, columnsWithMetadata) {
            var columnsPreferences = this.preferences.columns;
            if (lodash.isEmpty(columnsPreferences)) {
                gridColumns.forEach(function (gridColumn) {
                    var columnWithMetadata = lodash.find(columnsWithMetadata, function (column) { return column.fieldId === gridColumn.field; });
                    gridColumn.hidden = columnWithMetadata ? !columnWithMetadata.visible : false;
                });
            }
            else {
                this.updateColumnsVisibility(gridColumns, columnsPreferences);
            }
        };
        RxRecordGridUserPreferencesService.prototype.updateColumnsVisibility = function (gridColumns, columnsPreferences) {
            gridColumns.forEach(function (column) {
                var preferences = lodash.find(columnsPreferences, function (columnPreferences) { return columnPreferences.fieldId === column.field; });
                if (preferences) {
                    column.hidden = !preferences.visible;
                }
            });
        };
        RxRecordGridUserPreferencesService.prototype.setColumnsWidths = function (gridColumns, columnsPreferences, columnResizeMode) {
            if (columnsPreferences.length) {
                gridColumns.forEach(function (column) {
                    var preferences = lodash.find(columnsPreferences, { fieldId: column.field });
                    // Default measure unit of native html table is px, but outdated user preferences use %.
                    // Only px units are supported in Expand mode.
                    if (preferences) {
                        var isColumnWidthInPixels = lodash.endsWith(preferences.width, 'px');
                        if (columnResizeMode === i1$7.ResizeMode.Expand && !isColumnWidthInPixels) {
                            column.width = null;
                            column.minWidth = null;
                        }
                        else {
                            column.width = /[0-9]+$/.test(preferences.width) ? preferences.width + "%" : preferences.width;
                            if (isColumnWidthInPixels && parseInt(column.width) < 45) {
                                column.minWidth = column.width;
                            }
                        }
                    }
                });
            }
        };
        RxRecordGridUserPreferencesService.prototype.setCardFieldsVisibility = function (gridColumns) {
            var visibleCardFieldIds = this.preferences.visibleCardFieldIds;
            if (lodash.isEmpty(visibleCardFieldIds)) {
                var defaultVisibleColumnsCount_1 = 5;
                var visibleColumnsCount_1 = 0;
                gridColumns.forEach(function (column) {
                    if (visibleColumnsCount_1 >= defaultVisibleColumnsCount_1) {
                        column.hidden = true;
                        return;
                    }
                    if (!column.hidden) {
                        visibleColumnsCount_1++;
                    }
                });
            }
            else {
                gridColumns.forEach(function (column) { return (column.hidden = !lodash.some(visibleCardFieldIds, function (field) { return String(field) === column.field; })); });
            }
        };
        RxRecordGridUserPreferencesService.prototype.getColumnSortMeta = function (columnPreferences) {
            var _this = this;
            return lodash.flow(function (columns) { return lodash.filter(columns, 'sort'); }, function (columns) { return lodash.sortBy(columns, 'sort.priority'); }, function (columns) { return lodash.map(columns, function (column) { return ({
                field: column.fieldId,
                order: _this.recordGridConfigUtilsService.getColumnSortOrder(column.sort.direction)
            }); }); })(columnPreferences);
        };
        RxRecordGridUserPreferencesService.prototype.getFiltersForSelectedColumns = function (advancedFilters, gridColumns) {
            return advancedFilters.filter(function (advancedFilter) { return lodash.some(gridColumns, { field: advancedFilter.filterOptionId }); });
        };
        RxRecordGridUserPreferencesService.prototype.getFilterForAvailableNamedFilterOptions = function (advancedFilters, availableNamedFilters) {
            return advancedFilters
                .map(function (advancedFilter) {
                advancedFilter.value.namedOptions = !lodash.isEmpty(availableNamedFilters)
                    ? advancedFilter.value.namedOptions.filter(function (namedFilterOptionGuid) { return lodash.some(availableNamedFilters[Number(advancedFilter.filterOptionId)], { guid: namedFilterOptionGuid }); })
                    : [];
                return advancedFilter;
            })
                .filter(function (advancedFilter) { return !RxRecordGridAdvancedFilterValue.isEmptyWithRange(advancedFilter.value); });
        };
        RxRecordGridUserPreferencesService.prototype.saveViewPreset = function (viewPresetGuid) {
            var preset = this.preferences.viewPresets[viewPresetGuid];
            if (preset === null || preset === void 0 ? void 0 : preset.edited) {
                preset.initial = lodash.cloneDeep(preset.edited);
                delete preset.edited;
            }
        };
        RxRecordGridUserPreferencesService.prototype.getSharedViewPresetData = function () {
            var selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];
            var presetData = selectedViewPreset.edited || selectedViewPreset.initial;
            return {
                columns: presetData.columns,
                filters: presetData.filters
            };
        };
        return RxRecordGridUserPreferencesService;
    }());
    RxRecordGridUserPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUserPreferencesService, deps: [{ token: RxRecordGridConfigUtilsService }, { token: i1__namespace$1.RxUserPreferencesService }, { token: RxRecordGridFilterService }, { token: RxRecordGridFilterHelperService }, { token: i2__namespace$1.RxObjectUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridUserPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUserPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridUserPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: RxRecordGridConfigUtilsService }, { type: i1__namespace$1.RxUserPreferencesService }, { type: RxRecordGridFilterService }, { type: RxRecordGridFilterHelperService }, { type: i2__namespace$1.RxObjectUtilsService }]; } });

    exports.RowSelectionMode = void 0;
    (function (RowSelectionMode) {
        RowSelectionMode["Multiple"] = "multiple";
        RowSelectionMode["Single"] = "single";
    })(exports.RowSelectionMode || (exports.RowSelectionMode = {}));

    var RxRecordGridConfiguratorService = /** @class */ (function () {
        function RxRecordGridConfiguratorService(rxGuidService, rxFieldDefinitionService, rxRecordGridConfigUtilsService, rxRecordGridUtilsService, translateService) {
            this.rxGuidService = rxGuidService;
            this.rxFieldDefinitionService = rxFieldDefinitionService;
            this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.translateService = translateService;
        }
        RxRecordGridConfiguratorService.prototype.getGridConfig = function (rxConfiguration) {
            var config = lodash.defaults(this.rxRecordGridConfigUtilsService.configDeepClone(rxConfiguration), {
                associatedRecordId: null,
                associatedRoleName: null,
                enableColumnSelection: true,
                enableFiltering: true,
                expandable: false,
                useExternalFiltering: true,
                enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,
                filterExpression: null,
                filters: RX_RECORD_GRID.defaultFilter,
                filterTagsLimit: 3,
                recordIdField: i1$4.RX_RECORD_DEFINITION.coreFieldIds.id.toString(),
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),
                emptyStateWithFilterLabelText: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),
                searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),
                styles: ''
            });
            if (!config.recordDefinitionName) {
                if (!rxConfiguration.getRecordDefinition) {
                    rxjs.throwError(new i2$2.RxError('getRecordDefinition function must be defined if recordDefinitionName is not set.'));
                }
                if (!rxConfiguration.getData) {
                    rxjs.throwError(new i2$2.RxError('getData function must be defined if recordDefinitionName is not set.'));
                }
            }
            config.enableFiltering = Boolean(config.enableFiltering);
            config.cardLayoutWidth = parseFloat(config.cardLayoutWidth) || null;
            return config;
        };
        RxRecordGridConfiguratorService.prototype.getColumnsWithMetadata = function (recordGridGuid, columns, recordDefinition) {
            var _this = this;
            var columnsClone = this.rxRecordGridConfigUtilsService.columnsDeepClone(columns);
            this.allowedOpenViewActionExpressionsForHrefRegex = new RegExp("^\\$\\{view\\.components\\." + recordGridGuid + "\\.(clickableRow|recordDefinition)\\.|^\\$\\{view\\.inputParams\\.");
            var columnsDefinitions$ = columnsClone.map(function (column) {
                return _this.rxRecordGridUtilsService.getFieldDefinition(column.fieldId, recordDefinition).pipe(operators.map(function (fieldDefinition) {
                    var _a;
                    var filterType = fieldDefinition.resourceType
                        ? _this.getFieldDefinitionResourceTypeShortName(fieldDefinition.resourceType)
                        : null;
                    if (filterType === i1$4.RX_RECORD_DEFINITION.dataTypes.attachment.shortName) {
                        filterType = i1$4.RX_RECORD_DEFINITION.dataTypes.character.shortName;
                    }
                    var filterable = _this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || lodash.isUndefined(column.filterable);
                    var searchable = lodash.has(column, 'searchable')
                        ? _this.rxRecordGridConfigUtilsService.getBooleanValue(column.searchable)
                        : filterable && _this.rxRecordGridUtilsService.isSearchable(fieldDefinition, recordDefinition);
                    var columnWithMetadata = Object.assign(Object.assign({}, column), { clickable: _this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable), filterable: filterable, sortable: _this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable) ||
                            lodash.isUndefined(column.sortable), visible: _this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || lodash.isUndefined(column.visible), searchable: searchable,
                        fieldDefinition: fieldDefinition,
                        filterType: filterType, clickableWithHref: _this.isColumnClickableWithHref(column), title: (_a = column.title) === null || _a === void 0 ? void 0 : _a.trim(), fallbackTitle: "[" + fieldDefinition.name + "]" });
                    return columnWithMetadata;
                }));
            });
            return rxjs.forkJoin(columnsDefinitions$);
        };
        RxRecordGridConfiguratorService.prototype.getSelectionFieldOptionLabelsByFieldId = function (columns, recordDefinition) {
            return lodash.reduce(columns, function (result, column) {
                var fieldDefinition = recordDefinition.fieldDefinitionsById[column.fieldId];
                if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {
                    result[column.fieldId] = fieldDefinition.optionLabelsById;
                }
                return result;
            }, {});
        };
        RxRecordGridConfiguratorService.prototype.getFieldDefinitionResourceTypeShortName = function (resourceType) {
            return resourceType
                .split('.')
                .pop()
                .replace(/fieldDefinition/i, '');
        };
        RxRecordGridConfiguratorService.prototype.isColumnClickableWithHref = function (column) {
            var _this = this;
            var clickableWithHref = false;
            if (this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable)) {
                clickableWithHref = column.actions.every(function (action) {
                    return ((action.name === i1$1.RX_VIEW_ACTION.viewActionNames.launchUrl ||
                        (action.name === i1$1.RX_VIEW_ACTION.viewActionNames.openView &&
                            action.presentation.launchBehavior === i1$1.OpenViewActionLaunchBehavior.SameWindow &&
                            action.presentation.type === i1$1.OpenViewActionType.FullWidth &&
                            _this.canViewParamsBeEvaluatedForHref(action.viewParams))) &&
                        _this.canExpressionBeEvaluatedForHref(action.$condition$));
                });
            }
            return clickableWithHref;
        };
        RxRecordGridConfiguratorService.prototype.canViewParamsBeEvaluatedForHref = function (viewParams) {
            var _this = this;
            return lodash.every(viewParams, function (viewParamValue) { return _this.canExpressionBeEvaluatedForHref(viewParamValue); });
        };
        RxRecordGridConfiguratorService.prototype.canExpressionBeEvaluatedForHref = function (expression) {
            var _this = this;
            return lodash.every(expression === null || expression === void 0 ? void 0 : expression.match(/\$\{[^{]*\}/g), function (expressionToken) { return _this.allowedOpenViewActionExpressionsForHrefRegex.test(expressionToken); });
        };
        return RxRecordGridConfiguratorService;
    }());
    RxRecordGridConfiguratorService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfiguratorService, deps: [{ token: i2__namespace$1.RxGuidService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: RxRecordGridConfigUtilsService }, { token: RxRecordGridUtilsService }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridConfiguratorService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfiguratorService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridConfiguratorService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace$1.RxGuidService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: RxRecordGridConfigUtilsService }, { type: RxRecordGridUtilsService }, { type: i2__namespace.TranslateService }]; } });

    var RxRecordGridSharedFilterPresetsCacheService = /** @class */ (function () {
        function RxRecordGridSharedFilterPresetsCacheService(rxRecordInstanceDataPageService) {
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.cache = {};
        }
        // return preset from "Record Grid Filter Presets"
        RxRecordGridSharedFilterPresetsCacheService.prototype.getSharedFilterPresets = function (recordGridGuid) {
            var _this = this;
            if (!this.cache[recordGridGuid]) {
                var params = this.getQueryParams(recordGridGuid);
                return this.rxRecordInstanceDataPageService.post({ params: params }).pipe(operators.map(function (sharedFilterPresets) {
                    return (_this.cache[recordGridGuid] = lodash.map(sharedFilterPresets.data, function (sharedFilterPreset) { return ({
                        id: sharedFilterPreset[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id],
                        name: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.name],
                        filters: [
                            {
                                filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,
                                value: sharedFilterPreset[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id]
                            }
                        ],
                        isCreatedByOtherUsers: true,
                        filterExpression: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression],
                        isDefault: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.isDefault]
                    }); }));
                }));
            }
            return rxjs.of(this.cache[recordGridGuid]);
        };
        RxRecordGridSharedFilterPresetsCacheService.prototype.getQueryParams = function (recordGridGuid) {
            var queryExpression = "('" + RX_RECORD_GRID.sharedFilterPresets.fields.recordGridGuid + "'=\"" + recordGridGuid + "\")";
            var propertySelection = [
                i1$4.RX_RECORD_DEFINITION.coreFieldIds.id,
                RX_RECORD_GRID.sharedFilterPresets.fields.name,
                RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression,
                RX_RECORD_GRID.sharedFilterPresets.fields.isDefault
            ].join(',');
            var sortBy = [
                RX_RECORD_GRID.sharedFilterPresets.fields.sortOrder,
                RX_RECORD_GRID.sharedFilterPresets.fields.name
            ].join(',');
            return {
                pageSize: -1,
                startIndex: 0,
                queryExpression: queryExpression,
                propertySelection: propertySelection,
                shouldIncludeTotalSize: false,
                recorddefinition: RX_RECORD_GRID.sharedFilterPresets.recordDefinitionName,
                sortBy: sortBy
            };
        };
        return RxRecordGridSharedFilterPresetsCacheService;
    }());
    RxRecordGridSharedFilterPresetsCacheService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridSharedFilterPresetsCacheService, deps: [{ token: i1__namespace$5.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridSharedFilterPresetsCacheService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridSharedFilterPresetsCacheService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridSharedFilterPresetsCacheService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordInstanceDataPageService }]; } });

    var PageComponent = /** @class */ (function (_super) {
        __extends(PageComponent, _super);
        function PageComponent() {
            return _super.call(this) || this;
        }
        return PageComponent;
    }(i1$5.BaseViewComponent));
    PageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PageComponent, selector: "rx-page", usesInheritance: true, ngImport: i0__namespace, template: "<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n", components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-page',
                        templateUrl: './page.component.html'
                    }]
            }], ctorParameters: function () { return []; } });

    var CardLayoutCellHeaderComponent = /** @class */ (function () {
        function CardLayoutCellHeaderComponent(modalService, translateService) {
            this.modalService = modalService;
            this.translateService = translateService;
            this.sort = new i0.EventEmitter();
        }
        CardLayoutCellHeaderComponent.prototype.onSortMenuItemClick = function () {
            this.multiSortMeta = this.adaptTable.multiSortMeta || [];
            this.openDialog({
                title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.title'),
                content: this.cardLayoutSortModalTemplate
            }).catch(function () { });
        };
        CardLayoutCellHeaderComponent.prototype.getSortableColumns = function () {
            var _this = this;
            return this.columns
                .filter(function (column) { return _this.adaptTable.isSortableColumn(column); })
                .sort(function (column1, column2) { return column1.header.localeCompare(column2.header); });
        };
        CardLayoutCellHeaderComponent.prototype.onSortAscClick = function (column) {
            this.changeSort(column, i1$7.SortOrder.Asc);
        };
        CardLayoutCellHeaderComponent.prototype.onSortDescClick = function (column) {
            this.changeSort(column, i1$7.SortOrder.Desc);
        };
        CardLayoutCellHeaderComponent.prototype.changeSort = function (column, order) {
            var sortIndex = this.getColumnSortIndex(column);
            var sort = this.multiSortMeta[sortIndex];
            if (sort) {
                if (sort.order === order) {
                    this.multiSortMeta.splice(sortIndex, 1);
                }
                else {
                    sort.order = order;
                }
            }
            else {
                this.multiSortMeta.push({
                    field: column.field,
                    order: order
                });
            }
        };
        CardLayoutCellHeaderComponent.prototype.getColumnSort = function (column) {
            return this.multiSortMeta[this.getColumnSortIndex(column)];
        };
        CardLayoutCellHeaderComponent.prototype.getColumnSortIndex = function (column) {
            return this.multiSortMeta.findIndex(function (sort) { return sort.field === column.field; });
        };
        CardLayoutCellHeaderComponent.prototype.hasColumnSortOrder = function (column, order) {
            var sort = this.getColumnSort(column);
            return sort ? sort.order === order : false;
        };
        CardLayoutCellHeaderComponent.prototype.getSortAscBtnClass = function (column) {
            return this.getSortBtnClass(column, i1$7.SortOrder.Asc);
        };
        CardLayoutCellHeaderComponent.prototype.getSortDescBtnClass = function (column) {
            return this.getSortBtnClass(column, i1$7.SortOrder.Desc);
        };
        CardLayoutCellHeaderComponent.prototype.getSortBtnClass = function (column, order) {
            var isActiveSortDesc = this.hasColumnSortOrder(column, order);
            return { 'btn-success': isActiveSortDesc, 'btn-secondary': !isActiveSortDesc };
        };
        CardLayoutCellHeaderComponent.prototype.clearAllSorting = function () {
            this.multiSortMeta = [];
        };
        CardLayoutCellHeaderComponent.prototype.applySorting = function () {
            this.sort.emit(this.multiSortMeta);
        };
        CardLayoutCellHeaderComponent.prototype.getCurrentSortingSummary = function () {
            var _a;
            var _this = this;
            var ordersTitles = (_a = {},
                _a[i1$7.SortOrder.Asc] = this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.ascending'),
                _a[i1$7.SortOrder.Desc] = this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.descending'),
                _a);
            return this.multiSortMeta
                .map(function (sortMeta, index) {
                var column = _this.columns.find(function (c) { return c.field === sortMeta.field; });
                return index + 1 + ". " + column.header + " (" + ordersTitles[sortMeta.order] + ")";
            })
                .join('\n');
        };
        return CardLayoutCellHeaderComponent;
    }());
    CardLayoutCellHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CardLayoutCellHeaderComponent, deps: [{ token: i1__namespace.AdaptModalService }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CardLayoutCellHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CardLayoutCellHeaderComponent, selector: "rx-card-layout-cell-header", inputs: { title: "title", columns: "columns", adaptTable: "adaptTable", openDialog: "openDialog" }, outputs: { sort: "sort" }, viewQueries: [{ propertyName: "cardLayoutSortModalTemplate", first: true, predicate: ["cardLayoutSortModalTemplate"], descendants: true }], ngImport: i0__namespace, template: "{{ title }}\n\n<div class=\"dropdown header-cell-menu-btn\" adaptDropdown [appendToBody]=\"true\" [restoreFocusAfterClose]=\"true\">\n  <button\n    id=\"card-column-menu-dropdown-toggle\"\n    class=\"d-icon-ellipsis adapt-table-sort-menu__kebab py-2 btn btn-link\"\n    type=\"button\"\n    adaptDropdownToggle\n    [showCaret]=\"false\"\n  ></button>\n\n  <div class=\"dropdown-menu\" aria-labelledby=\"card-column-menu-dropdown-toggle\" adaptDropdownMenu tabindex=\"0\">\n    <button class=\"dropdown-item\" type=\"button\" (click)=\"onSortMenuItemClick()\">\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid.card-column-menu.items.sort-by.label' | translate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #cardLayoutSortModalTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-grid-sort-by-dialog\">\n    <div class=\"rx-card-fields\">\n      <div class=\"rx-card-fields__headers\">\n        <div class=\"rx-card-fields__headers-field\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.column.title' | translate\n          }}\n        </div>\n        <div class=\"rx-card-fields__headers-order\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.order.column.title' | translate\n          }}\n        </div>\n      </div>\n      <div class=\"rx-card-field\" *ngFor=\"let column of getSortableColumns()\">\n        <div class=\"rx-card-field__name\">{{ column.header }}</div>\n        <div class=\"rx-card-field__order\">\n          <div class=\"btn-group\">\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortDescBtnClass(column)\" (click)=\"onSortDescClick(column)\">\n              <span class=\"d-icon-arrow_down\"></span>\n            </button>\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortAscBtnClass(column)\" (click)=\"onSortAscClick(column)\">\n              <span class=\"d-icon-arrow_up\"></span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div>\n      <textarea\n        rows=\"4\"\n        disabled\n        class=\"form-control rx-sort-summary\"\n        title=\"summary\"\n        [value]=\"getCurrentSortingSummary()\"\n        [placeholder]=\"\n          'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.summary.empty.title'\n            | translate\n        \"\n      ></textarea>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"clearAllSorting()\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.clear-all.button.label' | translate\n      }}\n    </button>\n    <button class=\"btn btn-primary btn-sm\" (click)=\"applySorting(); close()\">\n      {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n    </button>\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.header-cell-menu-btn{position:absolute;right:0;top:0}.rx-record-grid-sort-by-dialog .rx-card-fields{border:1px solid #d6d7d8;display:flex;flex-direction:column;height:370px;overflow-y:auto}.rx-record-grid-sort-by-dialog .rx-card-fields__headers{font-weight:var(--font-weight-bold);display:flex;height:35px;align-items:center;border-bottom:1px solid #d6d7d8;color:#666;flex-shrink:0}.rx-record-grid-sort-by-dialog .rx-card-field{display:flex;border-bottom:1px solid #d6d7d8;align-items:center;height:35px;flex-shrink:0}.rx-record-grid-sort-by-dialog .rx-card-field:last-child{border-bottom:none}.rx-record-grid-sort-by-dialog .rx-card-field__name{flex:3;padding-left:10px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rx-record-grid-sort-by-dialog .rx-card-field__order{flex:1;padding-left:5px}.rx-record-grid-sort-by-dialog .rx-card-fields__headers-field{flex:3;padding-left:10px}.rx-record-grid-sort-by-dialog .rx-card-fields__headers-order{flex:1;padding-left:5px}.rx-record-grid-sort-by-dialog .rx-sort-summary{margin-top:15px;resize:none}\n"], components: [{ type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }], directives: [{ type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CardLayoutCellHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-card-layout-cell-header',
                        templateUrl: './card-layout-cell-header.component.html',
                        styleUrls: ['card-layout-cell-header.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AdaptModalService }, { type: i2__namespace.TranslateService }]; }, propDecorators: { title: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], adaptTable: [{
                    type: i0.Input
                }], openDialog: [{
                    type: i0.Input
                }], sort: [{
                    type: i0.Output
                }], cardLayoutSortModalTemplate: [{
                    type: i0.ViewChild,
                    args: ['cardLayoutSortModalTemplate']
                }] } });

    var GridCardLayoutDirective = /** @class */ (function () {
        function GridCardLayoutDirective(adaptTable, ngZone, renderer) {
            this.adaptTable = adaptTable;
            this.ngZone = ngZone;
            this.renderer = renderer;
            this.changedCardLayout = new i0.EventEmitter();
            this.hasCardLayout = false;
            this._hasViewInitialized = false;
        }
        Object.defineProperty(GridCardLayoutDirective.prototype, "cardLayoutWidth", {
            get: function () {
                return this._cardLayoutWidth;
            },
            set: function (value) {
                this._cardLayoutWidth = value;
                if (this._hasViewInitialized) {
                    var offsetWidth = this.renderer.selectRootElement(this.adaptTable.el.nativeElement, true).offsetWidth;
                    this.changeTableCardLayout(offsetWidth);
                }
            },
            enumerable: false,
            configurable: true
        });
        GridCardLayoutDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                var recordGrid = _this.renderer.selectRootElement(_this.recordGridElementRef.nativeElement, true);
                _this.changeTableCardLayout(recordGrid.offsetWidth);
            });
            this.ngZone.runOutsideAngular(function () {
                _this.resizeSensor = new cssElementQueries.ResizeSensor(_this.recordGridElementRef.nativeElement, function (size) {
                    _this.ngZone.run(function () {
                        _this.changeTableCardLayout(size.width);
                    });
                });
            });
            this._hasViewInitialized = true;
        };
        GridCardLayoutDirective.prototype.changeTableCardLayout = function (gridWidth) {
            var hasCardLayout = gridWidth <= this.cardLayoutWidth;
            if (this.hasCardLayout === hasCardLayout || !gridWidth) {
                return;
            }
            this.hasCardLayout = hasCardLayout;
            var adaptTable = this.adaptTable;
            this.scrollToFirstVisibleRow();
            if (hasCardLayout) {
                this.renderer.addClass(adaptTable.el.nativeElement, 'rx-table-card-layout');
            }
            else {
                this.renderer.removeClass(adaptTable.el.nativeElement, 'rx-table-card-layout');
            }
            // fix for updating margin in header. Just primeng flaw
            adaptTable.tableService.onValueChange(adaptTable.value);
            this.changedCardLayout.emit({
                cardLayoutColumns: hasCardLayout ? this.getCardLayoutColumns() : null
            });
        };
        GridCardLayoutDirective.prototype.getCardLayoutColumns = function () {
            return [
                {
                    field: 'fields',
                    header: 'Fields',
                    filterable: false,
                    sortable: false,
                    headerTitleTemplate: this.cardLayoutFieldsHeaderTemplate,
                    width: '35%',
                    dataCellClass: this.getDataCellClass.bind(this),
                    cellTemplate: this.cardLayoutFieldsDataCellTemplate,
                    testId: 'fields-column'
                },
                {
                    field: 'fields',
                    header: 'Values',
                    filterable: false,
                    sortable: false,
                    headerTitleTemplate: this.cardLayoutValuesHeaderTemplate,
                    width: '65%',
                    dataCellClass: this.getDataCellClass.bind(this),
                    cellTemplate: this.cardLayoutValuesDataCellTemplate,
                    testId: 'values-column'
                }
            ];
        };
        GridCardLayoutDirective.prototype.getDataCellClass = function () {
            return this.recordGridGetDataCellClass() + " rx-card-layout-data-cell";
        };
        GridCardLayoutDirective.prototype.scrollToFirstVisibleRow = function () {
            var adaptTable = this.adaptTable;
            if (adaptTable.scrollable) {
                var scrollableBody_1 = this.renderer
                    .selectRootElement(adaptTable.el.nativeElement, true)
                    .querySelector('.ui-table-scrollable-body');
                var scrollableBodyScrollTop_1 = scrollableBody_1 && scrollableBody_1.scrollTop;
                if (scrollableBodyScrollTop_1) {
                    var firstVisibleRow_1 = adaptTable.dataRows.find(function (dataRow) {
                        var rowEl = dataRow.element.nativeElement;
                        return rowEl.offsetTop + rowEl.offsetHeight >= scrollableBodyScrollTop_1;
                    });
                    if (firstVisibleRow_1) {
                        var rowEl_1 = firstVisibleRow_1.element.nativeElement;
                        var scrollRowProportion_1 = (scrollableBodyScrollTop_1 - rowEl_1.offsetTop) / rowEl_1.offsetHeight;
                        this.ngZone.onStable.pipe(operators.take(1)).subscribe(function () {
                            rowEl_1 = firstVisibleRow_1.element.nativeElement;
                            scrollableBody_1.scrollTop = rowEl_1.offsetTop + rowEl_1.offsetHeight * scrollRowProportion_1;
                        });
                    }
                }
            }
        };
        GridCardLayoutDirective.prototype.ngOnDestroy = function () {
            this.resizeSensor.detach();
        };
        return GridCardLayoutDirective;
    }());
    GridCardLayoutDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GridCardLayoutDirective, deps: [{ token: i1__namespace$7.AdaptTableComponent, host: true }, { token: i0__namespace.NgZone }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    GridCardLayoutDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.3", type: GridCardLayoutDirective, selector: "[rxCardLayout]", inputs: { cardLayoutFieldsHeaderTemplate: "cardLayoutFieldsHeaderTemplate", cardLayoutValuesHeaderTemplate: "cardLayoutValuesHeaderTemplate", cardLayoutFieldsDataCellTemplate: "cardLayoutFieldsDataCellTemplate", cardLayoutValuesDataCellTemplate: "cardLayoutValuesDataCellTemplate", recordGridGetDataCellClass: ["cardLayoutGetDataCellClass", "recordGridGetDataCellClass"], recordGridElementRef: ["cardLayoutRecordGridElementRef", "recordGridElementRef"], cardLayoutWidth: "cardLayoutWidth" }, outputs: { changedCardLayout: "changedCardLayout" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GridCardLayoutDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[rxCardLayout]'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$7.AdaptTableComponent, decorators: [{
                            type: i0.Host
                        }] }, { type: i0__namespace.NgZone }, { type: i0__namespace.Renderer2 }];
        }, propDecorators: { cardLayoutFieldsHeaderTemplate: [{
                    type: i0.Input
                }], cardLayoutValuesHeaderTemplate: [{
                    type: i0.Input
                }], cardLayoutFieldsDataCellTemplate: [{
                    type: i0.Input
                }], cardLayoutValuesDataCellTemplate: [{
                    type: i0.Input
                }], recordGridGetDataCellClass: [{
                    type: i0.Input,
                    args: ['cardLayoutGetDataCellClass']
                }], recordGridElementRef: [{
                    type: i0.Input,
                    args: ['cardLayoutRecordGridElementRef']
                }], cardLayoutWidth: [{
                    type: i0.Input
                }], changedCardLayout: [{
                    type: i0.Output
                }] } });

    var CellDisplayPropertiesDirective = /** @class */ (function () {
        function CellDisplayPropertiesDirective(rxExpressionEvaluatorService, rxObjectUtilsService) {
            this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;
            this.rxObjectUtilsService = rxObjectUtilsService;
            this.evaluationData = {};
        }
        CellDisplayPropertiesDirective.prototype.ngOnInit = function () {
            this.updateCellClasses();
        };
        CellDisplayPropertiesDirective.prototype.ngOnChanges = function (changes) {
            if (!changes.rxCellDisplayPropsDataItem.firstChange &&
                changes.rxCellDisplayPropsDataItem.currentValue !== changes.rxCellDisplayPropsDataItem.previousValue) {
                this.updateCellClasses();
            }
        };
        CellDisplayPropertiesDirective.prototype.getActiveProps = function (items) {
            var _this = this;
            return (items.find(function (props) { return _this.rxExpressionEvaluatorService.tryEvaluate(props.fieldValueCondition, _this.evaluationData); }) || null);
        };
        CellDisplayPropertiesDirective.prototype.getCellCssClasses = function (props) {
            var result = [];
            if (!props.displayAsBadge) {
                if (props.bold) {
                    result.push('font-weight-bold');
                }
                if (props.italic) {
                    result.push('font-italic');
                }
                if (props.fontSize === RxGridCellFontSize.Small) {
                    result.push('small');
                }
                else if (props.fontSize === RxGridCellFontSize.Large) {
                    result.push('large');
                }
                if (props.textColor) {
                    result.push(RxGridCellFontColorCssMap[props.textColor]);
                }
                if (props.backgroundColor) {
                    result.push(RxGridCellBgColorCssMap[props.backgroundColor]);
                }
                if (props.icon) {
                    if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {
                        result.push("d-icon-" + props.icon);
                    }
                    else {
                        result.push("d-icon-" + props.iconPosition + "-" + props.icon);
                    }
                }
            }
            return result;
        };
        CellDisplayPropertiesDirective.prototype.getSpanCssClasses = function (props) {
            if (props.displayAsBadge) {
                return ['badge', "badge-" + props.badgeColor];
            }
            else if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {
                return ['hidden'];
            }
            else {
                return [];
            }
        };
        CellDisplayPropertiesDirective.prototype.updateCellClasses = function () {
            var _b;
            var _a;
            if ((_a = this.rxCellDisplayProps) === null || _a === void 0 ? void 0 : _a.length) {
                var cssClasses = '';
                var expandedRxCellDisplayPropsDataItem = Object.assign(Object.assign({}, this.rxCellDisplayPropsDataItem), this.rxObjectUtilsService.expandProperties(this.rxCellDisplayPropsDataItem));
                lodash.set(this.evaluationData, "view.components.grid.clickableRow", expandedRxCellDisplayPropsDataItem);
                var activeProps = this.getActiveProps(this.rxCellDisplayProps);
                if (activeProps) {
                    var cellClasses = this.getCellCssClasses(activeProps);
                    cssClasses = cellClasses.join(' ');
                }
                if (this.rxCellDisplayPropsBadgeElem) {
                    var spanClasses = activeProps ? this.getSpanCssClasses(activeProps) : [];
                    this.rxCellDisplayPropsBadgeElem.classList.value = '';
                    (_b = this.rxCellDisplayPropsBadgeElem.classList).add.apply(_b, __spreadArray([], __read(spanClasses)));
                }
                this.cssClasses = cssClasses;
            }
        };
        return CellDisplayPropertiesDirective;
    }());
    CellDisplayPropertiesDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CellDisplayPropertiesDirective, deps: [{ token: i1__namespace$4.RxExpressionEvaluatorService }, { token: i2__namespace$1.RxObjectUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CellDisplayPropertiesDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.3", type: CellDisplayPropertiesDirective, selector: "[rxCellDisplayProps]", inputs: { rxCellDisplayProps: "rxCellDisplayProps", rxCellDisplayPropsBadgeElem: "rxCellDisplayPropsBadgeElem", rxCellDisplayPropsDataItem: "rxCellDisplayPropsDataItem" }, host: { properties: { "class": "this.cssClasses" } }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CellDisplayPropertiesDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[rxCellDisplayProps]'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxExpressionEvaluatorService }, { type: i2__namespace$1.RxObjectUtilsService }]; }, propDecorators: { rxCellDisplayProps: [{
                    type: i0.Input
                }], rxCellDisplayPropsBadgeElem: [{
                    type: i0.Input
                }], rxCellDisplayPropsDataItem: [{
                    type: i0.Input
                }], cssClasses: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var RecordGridComponent = /** @class */ (function (_super) {
        __extends(RecordGridComponent, _super);
        function RecordGridComponent(adaptDeviceDetectionService, adaptModalService, changeDetector, datePipe, decimalPipe, ngZone, rxAssociationInstanceDataPageService, rxBooleanPipe, rxCurrentUserService, rxExpressionEvaluatorService, rxFieldDefinitionService, rxGridConfiguratorService, rxGuidService, rxLogService, rxNotificationService, rxObjectUtilsService, rxRecordDefinitionCacheService, rxRecordDefinitionService, rxRecordGridAdvancedFilteringService, rxRecordGridConfigUtilsService, rxRecordGridFilterConfigService, rxRecordGridFilterService, rxRecordGridFilterHelperService, rxRecordGridSharedFilterPresetsCacheService, rxRecordGridUserPreferencesService, rxRecordGridUtilsService, rxRecordInstanceDataPageService, rxRecordInstanceService, rxViewActionService, rxViewActionUtilsService, translateService, elementRef, rxStringService, rxGlobalEventsService, pageComponent, runtimeViewCanvasItemComponent) {
            var _this = _super.call(this) || this;
            _this.adaptDeviceDetectionService = adaptDeviceDetectionService;
            _this.adaptModalService = adaptModalService;
            _this.changeDetector = changeDetector;
            _this.datePipe = datePipe;
            _this.decimalPipe = decimalPipe;
            _this.ngZone = ngZone;
            _this.rxAssociationInstanceDataPageService = rxAssociationInstanceDataPageService;
            _this.rxBooleanPipe = rxBooleanPipe;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;
            _this.rxFieldDefinitionService = rxFieldDefinitionService;
            _this.rxGridConfiguratorService = rxGridConfiguratorService;
            _this.rxGuidService = rxGuidService;
            _this.rxLogService = rxLogService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxObjectUtilsService = rxObjectUtilsService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordDefinitionService = rxRecordDefinitionService;
            _this.rxRecordGridAdvancedFilteringService = rxRecordGridAdvancedFilteringService;
            _this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
            _this.rxRecordGridFilterConfigService = rxRecordGridFilterConfigService;
            _this.rxRecordGridFilterService = rxRecordGridFilterService;
            _this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;
            _this.rxRecordGridSharedFilterPresetsCacheService = rxRecordGridSharedFilterPresetsCacheService;
            _this.rxRecordGridUserPreferencesService = rxRecordGridUserPreferencesService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxViewActionService = rxViewActionService;
            _this.rxViewActionUtilsService = rxViewActionUtilsService;
            _this.translateService = translateService;
            _this.elementRef = elementRef;
            _this.rxStringService = rxStringService;
            _this.rxGlobalEventsService = rxGlobalEventsService;
            _this.pageComponent = pageComponent;
            _this.runtimeViewCanvasItemComponent = runtimeViewCanvasItemComponent;
            _this.dataLoaded = new i0.EventEmitter();
            _this.isExportInProgress = false;
            _this.lastPropertySelection = [];
            _this.adaptTableConfig = {
                data: [],
                columns: [],
                columnResizeMode: i1$7.ResizeMode.Fit,
                cardLayoutColumns: null,
                bordered: true,
                scrollable: true,
                striped: false,
                toolbarConfig: {
                    counter: false,
                    quickFilter: true,
                    leftCustomSection: true,
                    leftCustomSectionTemplate: null,
                    filter: true,
                    filterTemplate: null,
                    filterResults: false,
                    filterResultsTemplate: null,
                    rightCustomSection: false,
                    rightCustomSectionTemplate: null,
                    visibleColumnsMenu: true,
                    visibleColumnsMenuTemplate: null,
                    quickFilterTriggerable: true,
                    export: {
                        exportTypes: [{ type: i1$7.ExportType.CSV }],
                        showExportForSelected: true
                    }
                },
                filterable: false,
                selectedItems: [],
                filters: {},
                rows: 50,
                first: 0,
                multiSortMeta: null,
                rowSelectionMode: null,
                isLoadingData: false,
                totalRecords: null,
                primaryKey: null,
                isLoadingMoreData: false,
                texts: null,
                expandedGroupsKeys: {},
                virtualScroll: true,
                virtualRowHeight: RX_RECORD_GRID.defaultRowHeight
            };
            _this.actionButtons = null;
            _this.adaptTableHeaderSelectionMode = i1$7.AdaptTableHeaderSelectionMode.Chunk;
            _this.api = {
                applyViewPreset: _this.applyViewPreset.bind(_this),
                shareViewPreset: _this.shareViewPreset.bind(_this),
                refresh: _this.refresh.bind(_this),
                setFilter: _this.setFilter.bind(_this),
                deleteViewPreset: _this.deleteViewPreset.bind(_this),
                discardViewPresetChanges: _this.discardViewPresetChanges.bind(_this),
                getColumns: _this.getColumns.bind(_this),
                getRecordDefinitionName: _this.getRecordDefinitionName.bind(_this),
                getSelectedRows: _this.getSelectedRows.bind(_this),
                getFirstSelectedRow: _this.getFirstSelectedRow.bind(_this),
                getSelectedRowCount: _this.getSelectedRowCount.bind(_this),
                setSelectedRows: _this.onRowsSelectionChange.bind(_this),
                getVisibleRows: _this.getVisibleRows.bind(_this),
                saveViewPreset: _this.saveViewPreset.bind(_this),
                applyFilters: _this.applyFilters.bind(_this)
            };
            _this.filteredVisibleColumns = [];
            _this.getDataCellClassBind = _this.getDataCellClass.bind(_this);
            _this.gridEvents = {
                cellClick: function (gridRow, columnId) {
                    var columnWithActions = _this.state.columnsWithMetadata.find(function (column) { return column.fieldId === columnId; });
                    _this.addSelectionFieldOptionNames(gridRow);
                    gridRow = _this.expandRowProperties(gridRow);
                    _this.state.lastActionRow = gridRow;
                    _this.notifyPropertyChanged('clickableRow', gridRow, null);
                    _this.executeViewActions(columnWithActions.guid, lodash.get(columnWithActions, 'actions'), gridRow).catch(lodash.noop);
                },
                cellKeyDown: function (event, gridRow, columnId) {
                    if (lodash.includes(['Space', 'Enter'], event.code)) {
                        _this.gridEvents.cellClick(gridRow, columnId);
                        event.preventDefault();
                    }
                }
            };
            _this.isFilterBySelectionButtonVisible = false;
            _this.isUserAllowedToDeleteRecords = false;
            _this.openSortByDialog = _this.openSortByDialogFn.bind(_this);
            _this.rowActionButtons = null;
            _this.rowSelectionChanged = new rxjs.BehaviorSubject([]);
            _this.selectedFilteredRowsCount = 0;
            _this.shouldDisplayActionButtons = false;
            _this.showCellTooltip = false;
            _this.sortedColumnsByTitle = [];
            _this.state = {
                actionButtons: [],
                rowActionButtons: [],
                lastActionRow: null,
                associatedRecordId: null,
                associatedRoleName: null,
                associatedRecordNodeSide: null,
                associationDefinitionName: null,
                bordered: true,
                cardLayoutWidth: null,
                columns: [],
                columnsWithMetadata: [],
                defaultFilterPreset: null,
                enableFiltering: false,
                requiredFilters: 0,
                getDataForHiddenColumns: true,
                enableFilterPresets: true,
                enableRowSelection: exports.RowSelectionMode.Multiple,
                expandable: false,
                filterExpression: null,
                filters: null,
                filterTagsLimit: null,
                getData: null,
                recordDefinition: null,
                associationDescriptors: [],
                recordDefinitionName: null,
                recordGridFilters: [],
                recordIdField: null,
                showDataForAllLocales: null,
                striped: false,
                styles: null,
                initialFilters: null,
                expandGroups: false,
                advancedFiltering: {
                    activeSavedFilter: null,
                    savedFilters: [],
                    filterOptions: [],
                    selectedFilters: [],
                    recordGridFilterConfigs: null,
                    filterTexts: null,
                    hasLoadedSharedFilterPresets: false,
                    isLoading: false,
                    appliedSharedFilterPreset: null,
                    toolbarTags: [],
                    pendingSelectedFilters: [],
                    selectedCardValues: {}
                },
                emptyStateLabelText: _this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),
                emptyStateWithFilterLabelText: _this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),
                searchFieldPlaceholderText: _this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),
                enableColumnSelection: true,
                namedFilterOptions: null,
                predefinedFilterPresets: [],
                viewPresetSelector: null,
                virtualScroll: true
            };
            _this.visibleColumns = [];
            _this.cellValueFormatters = {};
            _this.clickableWithHrefColumnActions = {};
            _this.dataLoadContextSubject = new rxjs.Subject();
            _this.popovers = [];
            _this.userPreferencesChanged$ = new rxjs.Subject();
            _this.exportSelectedRowText = _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-selected-row.label');
            _this.exportSelectedRowsText = _this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label');
            _this.pendingFiltersToApply = null;
            _this.getNamedFilterOptions = _this.getNamedFilterOptions.bind(_this);
            _this.rxRecordDefinitionCacheService.registerConsumer(_this.destroyed$);
            return _this;
        }
        // Check if user clicked on a cell, filter popover,
        // filter by selection dialog, or filter by selection dropdown.
        // If not, then clear the selected cell.
        RecordGridComponent.prototype.onClickOutside = function (event) {
            var isClickOutside = !(event.target.closest('.ui-table-tbody') ||
                event.target.closest('.popover.table-filtering') ||
                event.target.closest('.rx-filter-by-card-selection-dialog') ||
                event.target.closest('.rx-filter-by-card-selection-field-dropdown'));
            if (isClickOutside) {
                this.clearSelectedCells();
            }
        };
        Object.defineProperty(RecordGridComponent.prototype, "isTotalRecordCountKnown", {
            get: function () {
                return !lodash.isNull(this.adaptTableConfig.totalRecords);
            },
            enumerable: false,
            configurable: true
        });
        RecordGridComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.isProgrammaticUse = Boolean(this.pageComponent) || !this.runtimeViewCanvasItemComponent;
            if (this.isProgrammaticUse) {
                this.adaptTableConfig.toolbarConfig.export = null;
            }
            this.notifyPropertyChanged('api', this.api);
            this.initializationCompleted$ = this.config.pipe(operators.take(1), operators.map(function (rxGridConfiguration) { return _this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration); }), operators.tap(function (gridConfig) {
                Object.assign(_this.state, gridConfig);
            }), operators.switchMap(function () {
                if (_this.state.guid) {
                    _this.guid = _this.state.guid;
                }
                var requests$ = [_this.initRecordDefinitions()];
                if (_this.guid) {
                    _this.userPreferencesChanged$.pipe(operators.debounceTime(1000), operators.takeUntil(_this.destroyed$)).subscribe(function () {
                        _this.rxRecordGridUserPreferencesService.saveUserPreferences(_this.guid, _this.adaptTableConfig, _this.state);
                        _this.checkIfViewPresetEdited();
                    });
                    requests$.push(_this.rxRecordGridUserPreferencesService.get(_this.guid));
                }
                return rxjs.forkJoin(requests$);
            }), operators.switchMap(function () { return _this.initGrid(); }), operators.shareReplay(1));
            this.initializationCompleted$.subscribe();
            var configChanged$ = rxjs.combineLatest([
                this.initializationCompleted$,
                this.dataLoaded,
                this.config.pipe(operators.skip(1), operators.debounceTime(250), operators.map(function (rxGridConfiguration) { return _this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration); }), operators.takeUntil(this.destroyed$))
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 3), initializationCompleted = _d[0], dataLoaded = _d[1], configChanged = _d[2];
                return configChanged;
            }));
            // updates named list column filter options after additional query expression evaluation
            configChanged$
                .pipe(operators.map(function (config) { return lodash.differenceBy(config.columns, _this.state.columns, 'additionalQueryCriteria'); }), operators.filter(function (changedColumns) { return changedColumns.length > 0; }), operators.takeUntil(this.destroyed$))
                .subscribe(function (namedListColumns) {
                namedListColumns.forEach(function (column) {
                    var namedListColumnFilterOption = _this.state.advancedFiltering.filterOptions.find(function (filterOption) { return filterOption.id === column.fieldId; });
                    namedListColumnFilterOption.data.additionalQueryCriteria = column.additionalQueryCriteria;
                    var existingColumnIndex = _this.state.columns.findIndex(function (existingColumn) { return existingColumn.fieldId === column.fieldId; });
                    _this.state.columns[existingColumnIndex].additionalQueryCriteria = column.additionalQueryCriteria;
                });
            });
            var namedFilterOptionCache = new Map();
            // updates namedFilterOptions after expression evaluation and triggers data load if expression value is changed
            configChanged$
                .pipe(
            // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission
            operators.debounceTime(10), operators.map(function (config) { return _this.getNamedFilterOptionsState(config.columns); }), operators.withLatestFrom(this.dataLoadContextSubject), operators.filter(function (_c) {
                var _d = __read(_c, 2), namedFilterOptionsMap = _d[0], dataLoadContext = _d[1];
                return !lodash.isEqual(namedFilterOptionsMap, dataLoadContext.namedFilterOptions);
            }), operators.tap(function (_c) {
                var _d = __read(_c, 1), namedFilterOptionsMap = _d[0];
                _this.state.namedFilterOptions = namedFilterOptionsMap;
            }), operators.map(function (_c) {
                var _d = __read(_c, 1), namedFilterOptionsMap = _d[0];
                return Object.values(namedFilterOptionsMap).reduce(function (res, options) { return res.concat(options); }, []);
            }), operators.map(function (namedFilterOptionsList) {
                var selectedNamedFilterOptionsGuids = _this.state.advancedFiltering.selectedFilters.reduce(function (res, filterValue) { return res.concat(filterValue.value.namedOptions); }, []);
                return namedFilterOptionsList.some(function (option) {
                    var isOptionCached = Boolean(namedFilterOptionCache.get(option.guid));
                    if (!isOptionCached) {
                        namedFilterOptionCache.set(option.guid, option);
                    }
                    var isFilterValueChanged = option.filterExpression !== namedFilterOptionCache.get(option.guid).filterExpression;
                    var shouldLoadData = selectedNamedFilterOptionsGuids.includes(option.guid) && (isFilterValueChanged || !isOptionCached);
                    if (isFilterValueChanged) {
                        namedFilterOptionCache.set(option.guid, option);
                    }
                    return shouldLoadData;
                });
            }), operators.filter(function (v) { return v; }), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.loadRowData();
            });
            configChanged$
                .pipe(
            // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission
            operators.debounceTime(10), operators.withLatestFrom(this.dataLoadContextSubject), operators.filter(function (_c) {
                var _d = __read(_c, 2), config = _d[0], dataLoadContext = _d[1];
                return config.associatedRecordId !== dataLoadContext.associatedRecordId ||
                    config.associatedRoleName !== dataLoadContext.associatedRoleName ||
                    config.filterExpression !== dataLoadContext.filterExpression;
            }), operators.tap(function (_c) {
                var _d = __read(_c, 1), config = _d[0];
                Object.assign(_this.state, config);
            }))
                .subscribe(function () {
                _this.loadRowData();
            });
            this.config
                .pipe(operators.map(function (cfg) { return cfg.viewPresetSelector; }), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (viewPresetSelector) {
                _this.state.viewPresetSelector = viewPresetSelector;
            });
            if (this.isProgrammaticUse) {
                configChanged$
                    .pipe(operators.map(function (config) { return ({
                    actionButtons: config.actionButtons,
                    rowActionButtons: config.rowActionButtons
                }); }), operators.distinctUntilChanged(lodash.isEqual))
                    .subscribe(function (_c) {
                    var actionButtons = _c.actionButtons, rowActionButtons = _c.rowActionButtons;
                    _this.state.actionButtons = actionButtons;
                    _this.actionButtons = _this.getProgrammaticActionButtons(_this.state.actionButtons);
                    _this.state.rowActionButtons = rowActionButtons;
                    _this.rowActionButtons = _this.getProgrammaticActionButtons(_this.state.rowActionButtons);
                });
                configChanged$
                    .pipe(operators.distinctUntilChanged(lodash.isEqual), operators.map(function (rxGridConfiguration) { return _this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration); }), operators.tap(function (gridConfig) {
                    Object.assign(_this.state, gridConfig);
                    _this.state.advancedFiltering.selectedFilters = [];
                    _this.adaptTableConfig.multiSortMeta = [];
                }), operators.switchMap(function () {
                    if (_this.state.guid) {
                        _this.guid = _this.state.guid;
                    }
                    var requests$ = [_this.initRecordDefinitions()];
                    if (_this.guid) {
                        requests$.push(_this.rxRecordGridUserPreferencesService.get(_this.guid));
                    }
                    return rxjs.forkJoin(requests$);
                }), operators.switchMap(function () { return _this.initGrid(); }))
                    .subscribe();
            }
            this.adaptTableConfig.virtualScroll = this.state.virtualScroll;
            var toolbarConfig = this.adaptTableConfig.toolbarConfig;
            toolbarConfig.visibleColumnsMenu = this.state.enableColumnSelection;
            toolbarConfig.visibleColumnsMenuTemplate = this.visibleColumnsMenuTemplate;
            toolbarConfig.rightCustomSectionTemplate = this.rightCustomSectionTemplate;
            toolbarConfig.leftCustomSectionTemplate = this.leftCustomSectionTemplate;
            toolbarConfig.filterTemplate = this.filterTemplate;
            this.notifyPropertyChanged('totalRowCount', 0);
            this.notifyPropertyChanged('selectedRows', []);
            this.notifyPropertyChanged('selectedRowCount', 0);
            this.notifyPropertyChanged('fieldValuesByFieldId', {});
            this.notifyPropertyChanged('firstSelectedRow', null);
            this.notifyPropertyChanged('queryExpression', '');
            this.notifyPropertyChanged('lastRefreshTime', '');
            this.initAdvancedFilterTexts();
            this.initCustomTexts();
            this.rxGlobalEventsService.viewActionsCompleted$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function () {
                if (!lodash.isEmpty(_this.pendingFiltersToApply)) {
                    _this.onAdvancedFiltersChange(_this.pendingFiltersToApply);
                }
                _this.pendingFiltersToApply = null;
            });
        };
        RecordGridComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            // The action buttons are rendered by the record grid component,
            // hence we have to handle their property changes here.
            this.actionButtonComponents.changes
                .pipe(operators.switchMap(function (buttons) { return rxjs.merge.apply(void 0, __spreadArray(__spreadArray([], __read(buttons.map(function (button) { return rxjs.of({
                guid: button.guid,
                propertyName: 'api',
                newValue: button.api,
                oldValue: null
            }); }))), __read(buttons.map(function (button) { return button.propertyChanged.asObservable(); })))); }))
                .subscribe(function (event) { return _this.propertyChanged.emit(event); });
        };
        RecordGridComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.dataLoadContextSubject.complete();
            this.userPreferencesChanged$.complete();
        };
        RecordGridComponent.prototype.applyFilterBySelection = function () {
            var _this = this;
            if (lodash.isEmpty(this.state.advancedFiltering.selectedCardValues)) {
                this.applyPendingSelectedFilters();
            }
            else {
                this.cardLayoutOpenedModal = this.adaptModalService.open({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.filter-by-selection.title'),
                    content: RxFilterByCardSelectionDialogComponent,
                    data: {
                        filterableFields: this.visibleColumns
                            .filter(function (column) {
                            if (column.filterable) {
                                var fieldDefinition = _this.state.recordDefinition.fieldDefinitionsById[column.field];
                                var isRequiredBooleanFilter = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&
                                    _this.rxFieldDefinitionService.isRequiredField(fieldDefinition);
                                return !isRequiredBooleanFilter;
                            }
                            else {
                                return false;
                            }
                        })
                            .map(function (column) { return ({
                            id: column.field,
                            name: column.header || column.fallbackTitle
                        }); })
                    },
                    customClass: 'rx-filter-by-card-selection-dialog'
                });
                this.cardLayoutOpenedModal
                    .then(function (fieldId) {
                    _this.state.advancedFiltering.pendingSelectedFilters = [
                        {
                            filterOptionId: fieldId,
                            value: _this.state.advancedFiltering.selectedCardValues[fieldId]
                        }
                    ];
                    _this.applyPendingSelectedFilters();
                })
                    .catch(lodash.noop);
            }
        };
        RecordGridComponent.prototype.buildQueryByAdvancedFilters = function (advancedFilters) {
            var _c;
            var _this = this;
            var queryFilters = advancedFilters.map(function (filter) {
                var _a;
                var queryFilter = null;
                var fieldId = filter.filterOptionId;
                var fieldDefinition = _this.state.recordDefinition.fieldDefinitionsById[fieldId];
                if (fieldDefinition) {
                    var filterConfig = _this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];
                    queryFilter = filterConfig.getQueryFilter(filter, fieldDefinition, fieldId, (_a = _this.state.namedFilterOptions[fieldId]) !== null && _a !== void 0 ? _a : []);
                }
                return queryFilter;
            });
            return (_c = this.rxRecordGridFilterService).addQueries.apply(_c, __spreadArray([], __read(queryFilters)));
        };
        RecordGridComponent.prototype.downloadAttachment = function (row, col, fileName, event) {
            var _this = this;
            if (event && !lodash.includes(['Space', 'Enter'], event.code)) {
                return;
            }
            if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(col.field)) {
                var fieldLocator_1 = this.rxRecordGridUtilsService.getFieldLocator(col.field);
                var associationDescriptor_1 = lodash.find(this.state.associationDescriptors, {
                    associationDefinition: { guid: fieldLocator_1.associationGuid }
                });
                this.rxAssociationInstanceDataPageService
                    .post({
                    params: {
                        pageSize: 1,
                        startIndex: 0,
                        associationDefinition: associationDescriptor_1.associationDefinition.name,
                        nodeToQuery: fieldLocator_1.associationNodeSide,
                        associatedRecordInstanceId: row[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id],
                        propertySelection: i1$4.RX_RECORD_DEFINITION.coreFieldIds.id
                    }
                })
                    .pipe(operators.take(1))
                    .subscribe(function (dataPageResult) {
                    var recordInstanceId = dataPageResult.data[0][i1$4.RX_RECORD_DEFINITION.coreFieldIds.id];
                    _this.rxRecordInstanceService.downloadAttachment(associationDescriptor_1.recordDefinitionName, Number(fieldLocator_1.fieldId), recordInstanceId, fileName);
                });
            }
            else {
                this.rxRecordInstanceService.downloadAttachment(this.state.recordDefinitionName, Number(col.field), row[i1$4.RX_RECORD_DEFINITION.coreFieldIds.id], fileName);
            }
        };
        RecordGridComponent.prototype.executeViewActions = function (guid, actions, lastActionRow) {
            var _this = this;
            if (this.isProgrammaticUse) {
                var sortedActions = lodash.sortBy(actions, 'index');
                return sortedActions.reduce(function (promise, action) {
                    return lodash.isFunction(action.name)
                        ? promise.then(function (result) { return action.name(result, lastActionRow); })
                        : lodash.isString(action.name)
                            ? promise.then(function (result) { return (function () {
                                _this.rxViewActionService.execute(action.name.toString(), action.params).subscribe();
                            })(result, lastActionRow); })
                            : promise;
                }, Promise.resolve());
            }
            return this.runtimeViewModelApi.triggerViewActions(guid, i1$5.VIEW_COMPONENT_DEFAULT_EVENT_NAME);
        };
        RecordGridComponent.prototype.getActionButtonConfig = function (isHidden, actionButtonConfig) {
            return isHidden
                ? actionButtonConfig.pipe(operators.map(function (config) { return (Object.assign(Object.assign({}, config), { cls: 'dropdown-item' })); }))
                : actionButtonConfig;
        };
        RecordGridComponent.prototype.getCellValue = function (row, col) {
            var cellValueFormatter = this.cellValueFormatters[col.field];
            return cellValueFormatter(row[col.field]);
        };
        RecordGridComponent.prototype.getDataCellClass = function () {
            return this.popovers.length ? 'rx-cell-selection-mode' : '';
        };
        RecordGridComponent.prototype.getLoadRecordCountLinkText = function () {
            return this.adaptTableConfig.data.length + "+";
        };
        RecordGridComponent.prototype.getMultipleRowsSelectedText = function () {
            return this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.multiple-rows-selected.label', {
                count: this.adaptTableConfig.selectedItems.length,
                total: this.isTotalRecordCountKnown ? this.adaptTableConfig.totalRecords : this.getLoadRecordCountLinkText()
            });
        };
        RecordGridComponent.prototype.getMultipleRowsSelectedTextFirstPart = function () {
            var text = this.getMultipleRowsSelectedText();
            return text.substring(0, text.indexOf(this.getLoadRecordCountLinkText()));
        };
        RecordGridComponent.prototype.getMultipleRowsSelectedTextSecondPart = function () {
            var text = this.getMultipleRowsSelectedText();
            var totalParameterForTranslate = this.getLoadRecordCountLinkText();
            return text.substring(text.indexOf(totalParameterForTranslate) + totalParameterForTranslate.length);
        };
        RecordGridComponent.prototype.getNamedFilterOptions = function (filterOptionConfig) {
            return this.state.namedFilterOptions[filterOptionConfig.id];
        };
        RecordGridComponent.prototype.getSharedFilterPresets = function () {
            var _this = this;
            this.state.advancedFiltering.isLoading = true;
            var onLoadingEnd = function () {
                _this.state.advancedFiltering.isLoading = false;
                _this.state.advancedFiltering.hasLoadedSharedFilterPresets = true;
            };
            return this.rxRecordGridSharedFilterPresetsCacheService.getSharedFilterPresets(this.guid).pipe(operators.catchError(function (err) {
                onLoadingEnd();
                return rxjs.throwError(err);
            }), operators.tap(function () {
                onLoadingEnd();
            }));
        };
        RecordGridComponent.prototype.getSortedColumnsByTitle = function () {
            return this.adaptTableConfig.columns
                .slice()
                .sort(function (column1, column2) { return column1.header.localeCompare(column2.header); });
        };
        RecordGridComponent.prototype.getToolbarTags = function (filterTags) {
            var _this = this;
            var toolbarTags$ = (filterTags || []).map(function (tag) {
                if (tag.data.filterOption && tag.data.filterOption.id !== RX_RECORD_GRID.externalPresetFilterOptionId) {
                    var fieldId = tag.data.filterOption.id;
                    var fieldDefinition = _this.state.recordDefinition.fieldDefinitionsById[fieldId];
                    var filterConfig = _this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];
                    if (lodash.isFunction(filterConfig.getToolbarTagInfo)) {
                        return filterConfig
                            .getToolbarTagInfo({
                            primaryRecordDefinition: _this.state.recordDefinition,
                            fieldDefinition: fieldDefinition,
                            value: tag.data.value,
                            tag: tag,
                            fieldId: fieldId,
                            namedFilterOptions: _this.state.namedFilterOptions[fieldId]
                        })
                            .pipe(operators.tap(function (tagInfo) { return (tag.data.value.title = tagInfo.tooltip); }), operators.map(function (tagInfo) { return (Object.assign(Object.assign({}, tag), { text: tagInfo.text })); }));
                    }
                }
                return rxjs.of(Object.assign({}, tag));
            });
            return toolbarTags$.length ? rxjs.forkJoin(toolbarTags$) : rxjs.of([]);
        };
        RecordGridComponent.prototype.getVisibleColumns = function () {
            return this.adaptTable.getVisibleColumns(this.adaptTableConfig.columns);
        };
        RecordGridComponent.prototype.getVisibleRows = function () {
            return this.adaptTableConfig.data;
        };
        RecordGridComponent.prototype.handleHeaderCheckboxToggle = function (event) {
            this.setSelectedFilteredRowsCount();
        };
        RecordGridComponent.prototype.isCellSelected = function (cellPopover) {
            return lodash.some(this.popovers, function (popover) { return popover === cellPopover; });
        };
        RecordGridComponent.prototype.loadSavedFilterPresetFilters = function (savedFilter) {
            var _this = this;
            this.state.advancedFiltering.isLoading = true;
            return this.rxRecordGridFilterService
                .getAdvancedFilterData(savedFilter.filterData, this.state.recordDefinition.fieldDefinitionsById, this.state.advancedFiltering.recordGridFilterConfigs, this.state.recordDefinition, this.state.advancedFiltering.filterOptions, this.state.associationDescriptors)
                .pipe(operators.tap(function (filters) {
                // combined fake preset filters with actual filters.
                savedFilter.filters = (savedFilter.filters || []).concat(filters);
                _this.state.advancedFiltering.isLoading = false;
            }));
        };
        RecordGridComponent.prototype.loadTotalRowCount = function () {
            var _this = this;
            this.getTotalRowCount().subscribe(function (result) {
                _this.adaptTableConfig.totalRecords = result.totalSize;
            });
        };
        RecordGridComponent.prototype.onActiveSavedAdvancedFilterChange = function (savedFilter) {
            this.state.advancedFiltering.activeSavedFilter = savedFilter;
        };
        RecordGridComponent.prototype.onAdvancedFilterExpressionTagsChanged = function (event) {
            var hasAllValidTags = event.filterExpressionTags.every(function (filterTag) { return lodash.isEmpty(filterTag.data.validationErrors); });
            if (hasAllValidTags) {
                var oldToolbarTags = this.state.advancedFiltering.toolbarTags;
                this.updateToolbarTags(event.filterExpressionTags);
                // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError
                if (oldToolbarTags !== this.state.advancedFiltering.toolbarTags) {
                    this.changeDetector.detectChanges();
                }
            }
        };
        RecordGridComponent.prototype.onAdvancedFiltersChange = function (filters) {
            this.state.advancedFiltering.appliedSharedFilterPreset = null;
            var appliedExternalPresetFilter = this.getAppliedExternalPresetFilter(filters);
            if (appliedExternalPresetFilter) {
                var filterPresetData = this.state.advancedFiltering.savedFilters.find(function (savedFilter) { return savedFilter.id === appliedExternalPresetFilter.value; });
                if (this.isSharedFilterPreset(filterPresetData)) {
                    this.state.advancedFiltering.appliedSharedFilterPreset = filterPresetData;
                }
                else {
                    if (filterPresetData.appliedSharedFilterPresetGuid) {
                        var appliedSharedFilterPreset = lodash.find(this.state.advancedFiltering.savedFilters, {
                            id: filterPresetData.appliedSharedFilterPresetGuid
                        });
                        this.state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;
                    }
                }
            }
            this.adaptTableConfig.first = 0;
            this.state.advancedFiltering.selectedFilters = filters;
            this.adaptTableConfig.isLoadingMoreData = false;
            this.updateAdaptTableFilters();
            this.userPreferencesChanged$.next();
            this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);
            if (this.state.useExternalFiltering) {
                this.loadRowData(false);
            }
            else {
                this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);
            }
        };
        RecordGridComponent.prototype.onBeforeActiveSavedFilterChange = function (event) {
            var savedFilterToSelect = event.savedFilterToSelect;
            if (savedFilterToSelect) {
                if (!savedFilterToSelect.filters || !this.areNonExternalPresetFiltersApplied(savedFilterToSelect.filters)) {
                    this.loadSavedFilterPresetFilters(savedFilterToSelect).subscribe();
                }
            }
        };
        RecordGridComponent.prototype.onCellClick = function (event, columns, rowItem, popover, isCardLayout) {
            var isLinkClicked = !!event.target.closest('a');
            if (isLinkClicked) {
                this.clearSelectedCells();
            }
            else {
                if (this.popovers.length) {
                    if (!(event.metaKey || event.ctrlKey)) {
                        this.clearSelectedCells();
                    }
                }
                if (columns) {
                    this.toggleCellSelection(columns.filter(function (col) { return !col.isRowActionsColumn; }), rowItem, popover, isCardLayout);
                }
            }
        };
        RecordGridComponent.prototype.onFilterBySelection = function (event, columns, rowItem) {
            this.onCellClick(event, columns, rowItem, null, true);
            this.applyFilterBySelection();
        };
        RecordGridComponent.prototype.onCellMouseOver = function ($event) {
            var element = $event.currentTarget;
            this.showCellTooltip = element.offsetWidth < element.scrollWidth;
        };
        RecordGridComponent.prototype.onChangedCardLayout = function (event) {
            this.adaptTableConfig.cardLayoutColumns = event.cardLayoutColumns;
            this.clearSelectedCells();
            if (this.cardLayoutOpenedModal) {
                this.cardLayoutOpenedModal.reject();
                this.cardLayoutOpenedModal = null;
            }
            if (this.guid) {
                this.rxRecordGridUserPreferencesService.applyUserPreferencesForColumns(this.adaptTableConfig, this.state.columnsWithMetadata, this.guid);
            }
            this.visibleColumns = this.getVisibleColumns();
            this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();
        };
        RecordGridComponent.prototype.onColReorder = function (colReorderEvent) {
            this.visibleColumns = this.getVisibleColumns();
            this.userPreferencesChanged$.next();
        };
        RecordGridComponent.prototype.onColumnResize = function () {
            var _this = this;
            var adaptTableRectData = this.adaptTable.el.nativeElement.getBoundingClientRect();
            var tableWidth = adaptTableRectData === null || adaptTableRectData === void 0 ? void 0 : adaptTableRectData.width;
            var availableColumnWidth = this.adaptTable.dataHeaderCells.reduce(function (accum, cell) { return accum + cell.element.nativeElement.offsetWidth; }, 0);
            var defaultColumnWidth = (availableColumnWidth * 100) / (tableWidth * this.getVisibleColumns().length) + "%";
            var visibleColumnWidthMap = lodash.reduce(this.adaptTable.dataHeaderCells.toArray(), function (result, cell) {
                var renderingColumnConfig = cell.data.renderingColumn.columnsConfigs[0];
                var width = null;
                if (availableColumnWidth) {
                    width =
                        lodash.endsWith(renderingColumnConfig.width, 'px') || _this.state.expandable
                            ? cell.element.nativeElement.offsetWidth + "px"
                            : lodash.round((cell.element.nativeElement.offsetWidth / availableColumnWidth) * 100, 2) + "%";
                }
                result[renderingColumnConfig.field] = width;
                return result;
            }, {});
            this.adaptTableConfig.columns.forEach(function (column) {
                var _a;
                if (!column.hidden) {
                    column.width = (_a = visibleColumnWidthMap[column.field]) !== null && _a !== void 0 ? _a : defaultColumnWidth;
                }
            });
            this.userPreferencesChanged$.next();
        };
        RecordGridComponent.prototype.onColumnVisibilityChange = function (isVisible, column) {
            if (column.hidden === isVisible) {
                column.hidden = !isVisible;
                this.userPreferencesChanged$.next();
                this.visibleColumns = this.getVisibleColumns();
                this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();
                if (isVisible) {
                    if (!this.lastPropertySelection.includes(column.field)) {
                        this.loadRowData();
                    }
                }
                else {
                    // #ADAPT-8052 workaround.
                    this.avoidSystemColumnExpansion();
                }
            }
        };
        RecordGridComponent.prototype.onCreateNewFilterPreset = function (event) {
            var newFilter = {
                filters: event.filters,
                name: event.name,
                id: this.rxGuidService.generate()
            };
            var appliedSharedPreset = this.getAppliedExternalPresetFilter(event.filters);
            if (appliedSharedPreset) {
                newFilter.appliedSharedFilterPresetGuid = appliedSharedPreset.value;
            }
            this.state.advancedFiltering.savedFilters.push(newFilter);
            this.state.advancedFiltering.activeSavedFilter = newFilter;
            this.userPreferencesChanged$.next();
        };
        RecordGridComponent.prototype.onDeleteSavedFilterPreset = function (filterPresetToDelete) {
            lodash.remove(this.state.advancedFiltering.savedFilters, function (filterPreset) { return filterPreset.id === filterPresetToDelete.id; });
            this.userPreferencesChanged$.next();
        };
        RecordGridComponent.prototype.onEditSavedFilterClick = function (event) {
            var _this = this;
            var editCustomTagsFn = null;
            if (event.savedFilter.appliedSharedFilterPresetGuid) {
                editCustomTagsFn = function (tags) { return tags; };
            }
            if (!event.savedFilter.filters || !this.areNonExternalPresetFiltersApplied(event.savedFilter.filters)) {
                event.preventDefault();
                this.loadSavedFilterPresetFilters(event.savedFilter).subscribe(function () {
                    event.initSavedFilterEditing(editCustomTagsFn && editCustomTagsFn.bind(_this));
                });
            }
            else if (event.savedFilter.appliedSharedFilterPresetGuid) {
                event.preventDefault();
                event.initSavedFilterEditing(editCustomTagsFn.bind(this));
            }
        };
        RecordGridComponent.prototype.onExport = function (options) {
            var _this = this;
            if (this.isExportInProgress) {
                this.rxNotificationService.addInfoMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-in-progress.message'));
                return;
            }
            var visibleColumns = this.getVisibleColumns().filter(function (column) { return !column.isRowActionsColumn; });
            if (!visibleColumns.length) {
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.no-data-to-export.message'));
                return;
            }
            var columnHeaders = visibleColumns.map(function (column) { return column.header || column.fallbackTitle; });
            var rows$;
            if (options.selectionOnly) {
                rows$ = rxjs.of(lodash.intersectionBy(this.adaptTableConfig.data, this.getSelectedRows(), i1$1.RowDataItemIdFieldName));
            }
            else {
                var headers = this.getHeaders();
                var params = this.prepareQueryParamsAndQueryArgs(false);
                params.pageSize = -1;
                params.propertySelection = visibleColumns.map(function (column) { return column.field; });
                delete params.cursor;
                this.isExportInProgress = true;
                rows$ = this.getDataPageService()
                    .post({ params: params, headers: headers })
                    .pipe(operators.map(function (dataPage) { return dataPage.data; }), operators.finalize(function () {
                    _this.isExportInProgress = false;
                }));
            }
            rows$.subscribe(function (rows) {
                var cellValues = _this.getCellValues(rows, visibleColumns);
                _this.exportDataToCsv(cellValues, columnHeaders);
            });
        };
        RecordGridComponent.prototype.onLazyLoad = function (event) {
            if (this.state.useExternalFiltering) {
                if (event.loadMore || event.eventSource !== i1$7.AdaptTableEventSource.LoadMore) {
                    this.adaptTableConfig.multiSortMeta = event.multiSortMeta;
                    this.adaptTableConfig.filters = event.filters;
                    this.adaptTableConfig.isLoadingMoreData = event.loadMore;
                    this.loadRowData(event.loadMore);
                }
            }
            else {
                if (event.eventSource === i1$7.AdaptTableEventSource.FilterChange) {
                    this.adaptTableConfig.filters = event.filters;
                    this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);
                }
            }
        };
        RecordGridComponent.prototype.onRefreshClick = function () {
            if (!this.state.useExternalFiltering) {
                this.loadRowData(false);
            }
            var searchText = this.adaptTable.toolbarComponent.getQuickFilterInputValue();
            // this will trigger onLazyLoad event
            this.adaptTable.setQuickFilter(searchText);
        };
        RecordGridComponent.prototype.onRemoveFilterTag = function (event) {
            this.state.advancedFiltering.activeSavedFilter = null;
            var selectedFilters = this.state.advancedFiltering.selectedFilters.slice();
            var filterOptionId = event.removedTag.data.filterOption.id;
            var index = lodash.findIndex(selectedFilters, function (selectedFilter) { return selectedFilter.filterOptionId === filterOptionId; });
            selectedFilters.splice(index, 1);
            this.onAdvancedFiltersChange(selectedFilters);
            this.setToolbarTags(event.newTags);
        };
        RecordGridComponent.prototype.onRowsSelectionChange = function (rowDataItems) {
            var selectedItems = rowDataItems ? lodash.castArray(rowDataItems) : [];
            var oldSelectedItems = this.adaptTableConfig.selectedItems;
            this.shouldDisplayActionButtons = !lodash.isEmpty(selectedItems) && !lodash.isEmpty(this.actionButtons);
            this.expandSelectedRowsProperties(selectedItems);
            this.adaptTableConfig.selectedItems = selectedItems;
            this.adaptTableConfig.toolbarConfig = Object.assign(Object.assign(Object.assign({}, this.adaptTableConfig.toolbarConfig), { quickFilter: !this.shouldDisplayActionButtons, leftCustomSectionFixed: this.shouldDisplayActionButtons, rightCustomSectionFixed: this.shouldDisplayActionButtons, leftCustomSection: this.shouldDisplayActionButtons, filter: !this.shouldDisplayActionButtons }), this.state.toolbarConfig);
            this.adaptTableConfig.texts = Object.assign(Object.assign({}, this.adaptTableConfig.texts), { exportSelected: this.getExportSelectedText(selectedItems) });
            this.addSelectionFieldOptionNames(selectedItems[0]);
            this.notifyPropertyChanged('selectedRows', selectedItems, oldSelectedItems);
            this.notifyPropertyChanged('selectedRowCount', selectedItems.length, oldSelectedItems.length);
            this.notifyPropertyChanged('firstSelectedRow', selectedItems[0], oldSelectedItems[0]);
            this.notifyPropertyChanged('fieldValuesByFieldId', this.prepareFieldsValueByFieldIdData(selectedItems), {});
            this.rowSelectionChanged.next(selectedItems);
        };
        RecordGridComponent.prototype.onSearchColumns = function () {
            var _this = this;
            this.filteredVisibleColumns = this.sortedColumnsByTitle.filter(function (column) { return _this.rxStringService.caseInsensitiveSearch(column.header, _this.columnSearchText); });
        };
        RecordGridComponent.prototype.onSort = function (sortEvent) {
            this.applySorting(sortEvent.multisortmeta);
        };
        RecordGridComponent.prototype.onSortCards = function (multiSortMeta) {
            this.applySorting(multiSortMeta);
            this.loadRowData();
        };
        RecordGridComponent.prototype.onRowActionOpen = function (row) {
            var _a;
            (_a = lodash.last(this.popovers)) === null || _a === void 0 ? void 0 : _a.close();
            this.addSelectionFieldOptionNames(row);
            var gridRow = this.expandRowProperties(row);
            this.state.lastActionRow = gridRow;
            this.notifyPropertyChanged('clickableRow', gridRow, null);
        };
        RecordGridComponent.prototype.onUpdateSavedFilterPreset = function (event) {
            var savedFilter = lodash.find(this.state.advancedFiltering.savedFilters, function (filterPreset) { return filterPreset.id === event.oldSavedFilter.id; });
            if (savedFilter) {
                if (savedFilter.appliedSharedFilterPresetGuid &&
                    !lodash.find(event.newSavedFilter.filters, function (filter) { return filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId; })) {
                    delete savedFilter.appliedSharedFilterPresetGuid;
                }
                Object.assign(savedFilter, event.newSavedFilter);
                this.userPreferencesChanged$.next();
            }
        };
        RecordGridComponent.prototype.openRowDetails = function (columns, rowDataItem) {
            var _a;
            (_a = lodash.last(this.popovers)) === null || _a === void 0 ? void 0 : _a.close();
            this.cardLayoutOpenedModal = this.adaptModalService.open({
                title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.dialog.title'),
                content: this.cardLayoutRowDetailsTemplate,
                data: {
                    columns: columns,
                    rowDataItem: rowDataItem
                }
            });
            this.cardLayoutOpenedModal.catch(lodash.noop);
        };
        RecordGridComponent.prototype.setToolbarTags = function (toolbarTags) {
            this.state.advancedFiltering.toolbarTags = toolbarTags;
            this.updateToolbarItems();
        };
        RecordGridComponent.prototype.trackByColumnField = function (index, column) {
            return column.field;
        };
        RecordGridComponent.prototype.updateToolbarTags = function (filterTags) {
            var _this = this;
            this.getToolbarTags(filterTags).subscribe(function (toolbarTags) {
                _this.setToolbarTags(toolbarTags);
            });
        };
        RecordGridComponent.prototype.addAssociationFieldsToRecordDefinition = function (columnsWithMetadata) {
            var _this = this;
            var fieldDefinitionsById = this.state.recordDefinition.fieldDefinitionsById;
            columnsWithMetadata.forEach(function (columnWithMetadata) {
                if (!fieldDefinitionsById[columnWithMetadata.fieldId]) {
                    _this.rxRecordDefinitionService.addFieldDefinitionToMap(columnWithMetadata.fieldDefinition, fieldDefinitionsById, columnWithMetadata.fieldId);
                }
            });
            this.state.recordDefinition.fieldDefinitionsById = Object.assign(Object.assign({}, fieldDefinitionsById), this.rxObjectUtilsService.expandProperties(fieldDefinitionsById));
            this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);
        };
        RecordGridComponent.prototype.areNonExternalPresetFiltersApplied = function (filters) {
            return filters.some(function (filter) { return filter.filterOptionId !== RX_RECORD_GRID.externalPresetFilterOptionId; });
        };
        RecordGridComponent.prototype.getAppliedExternalPresetFilter = function (filters) {
            return filters.find(function (filter) { return filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId; });
        };
        RecordGridComponent.prototype.prepareFieldsValueByFieldIdData = function (selectedData) {
            var columnIds = lodash.map(this.adaptTableConfig.columns, 'field');
            return lodash.reduce(selectedData, function (result, row, index) {
                columnIds.forEach(function (id) {
                    result[id] = result[id] || [];
                    result[id][index] = row[id];
                });
                return result;
            }, {});
        };
        RecordGridComponent.prototype.addSelectionFieldOptionNames = function (row) {
            if (row) {
                row.selectionFieldOptionNamesById = lodash.transform(this.selectionFieldOptionLabelsByFieldId, function (result, value, fieldId) {
                    result[fieldId] = value[row[fieldId]];
                }, {});
            }
        };
        RecordGridComponent.prototype.applyFilters = function (filters, mode) {
            var _this = this;
            this.initializationCompleted$
                .pipe(operators.switchMap(function () { return _this.rxRecordGridFilterService.getAdvancedFilterData(filters, _this.state.recordDefinition.fieldDefinitionsById, _this.state.advancedFiltering.recordGridFilterConfigs, _this.state.recordDefinition, _this.state.advancedFiltering.filterOptions, _this.state.associationDescriptors); }), operators.take(1), operators.takeUntil(this.destroyed$))
                .subscribe(function (filtersToApply) {
                var currentFilters = !lodash.isEmpty(_this.pendingFiltersToApply)
                    ? _this.pendingFiltersToApply
                    : lodash.cloneDeep(_this.state.advancedFiltering.selectedFilters);
                var resultingFilters;
                switch (mode) {
                    case i1$1.ApplyGridFilterMode.Begin:
                        if (_this.pendingFiltersToApply) {
                            resultingFilters = _this.pendingFiltersToApply;
                        }
                        else {
                            _this.pendingFiltersToApply = [];
                        }
                        break;
                    case i1$1.ApplyGridFilterMode.Append:
                        // filters that will not be affected
                        var remainingFilters = currentFilters.filter(function (currentFilter) { return !filtersToApply.find(function (filter) { return filter.filterOptionId === currentFilter.filterOptionId; }); });
                        resultingFilters = __spreadArray(__spreadArray([], __read(remainingFilters)), __read(filtersToApply));
                        break;
                    case i1$1.ApplyGridFilterMode.Remove:
                        resultingFilters = currentFilters.reduce(function (result, currentFilter) {
                            var filterToApply = filtersToApply.find(function (filter) { return filter.filterOptionId === currentFilter.filterOptionId; });
                            if (filterToApply) {
                                if (_this.isRangeFilter(currentFilter.filterOptionId)) {
                                    if (lodash.isEqual(currentFilter.value.filterValue, filterToApply.value.filterValue)) {
                                        currentFilter.value.filterValue = [null, null];
                                    }
                                }
                                else {
                                    currentFilter.value.filterValue = currentFilter.value.filterValue.filter(function (val) { return !filterToApply.value.filterValue.includes(val); });
                                }
                                currentFilter.value.namedOptions = currentFilter.value.namedOptions.filter(function (val) { return !filterToApply.value.namedOptions.includes(val); });
                                if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(currentFilter.value)) {
                                    result.push(currentFilter);
                                }
                            }
                            else {
                                result.push(currentFilter);
                            }
                            return result;
                        }, []);
                        break;
                    case i1$1.ApplyGridFilterMode.Merge:
                        resultingFilters = __spreadArray(__spreadArray([], __read(currentFilters)), __read(filtersToApply)).reduce(function (result, filter) {
                            var existingFilter = result.find(function (f) { return f.filterOptionId === filter.filterOptionId; });
                            if (!existingFilter) {
                                result.push(filter);
                            }
                            else {
                                if (_this.isRangeFilter(filter.filterOptionId)) {
                                    existingFilter.value.filterValue = __spreadArray([], __read(filter.value.filterValue));
                                }
                                else {
                                    existingFilter.value.filterValue = lodash.uniq(existingFilter.value.filterValue.concat(filter.value.filterValue));
                                }
                                existingFilter.value.namedOptions = lodash.uniq(existingFilter.value.namedOptions.concat(filter.value.namedOptions));
                            }
                            return result;
                        }, []);
                        break;
                    case i1$1.ApplyGridFilterMode.Overwrite:
                        _this.state.advancedFiltering.appliedSharedFilterPreset = null;
                        _this.state.advancedFiltering.activeSavedFilter = null;
                        resultingFilters = filtersToApply;
                        break;
                    case i1$1.ApplyGridFilterMode.Clear:
                        _this.state.advancedFiltering.appliedSharedFilterPreset = null;
                        _this.state.advancedFiltering.activeSavedFilter = null;
                        resultingFilters = [];
                        if (_this.pendingFiltersToApply) {
                            _this.state.advancedFiltering.selectedFilters = [];
                        }
                        break;
                    case i1$1.ApplyGridFilterMode.End:
                        if (_this.pendingFiltersToApply) {
                            resultingFilters = _this.pendingFiltersToApply;
                            _this.pendingFiltersToApply = null;
                        }
                        break;
                }
                if (_this.pendingFiltersToApply) {
                    _this.pendingFiltersToApply = resultingFilters || [];
                }
                else if (resultingFilters) {
                    _this.onAdvancedFiltersChange(resultingFilters);
                }
            });
        };
        RecordGridComponent.prototype.applyPendingSelectedFilters = function () {
            var _this = this;
            var existingFilters = lodash.cloneDeep(this.state.advancedFiltering.selectedFilters);
            lodash.forEach(this.state.advancedFiltering.pendingSelectedFilters, function (pendingSelectedFilter) {
                var existingFilter = lodash.find(existingFilters, { filterOptionId: pendingSelectedFilter.filterOptionId });
                var fieldDefinition = _this.state.recordDefinition.fieldDefinitionsById[pendingSelectedFilter.filterOptionId];
                var filterValues = [];
                switch (fieldDefinition.resourceType) {
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType:
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {
                        filterValues = pendingSelectedFilter.value.map(function (filterValue) { return moment__default["default"](filterValue); });
                        filterValues = [moment__default["default"].min(filterValues), moment__default["default"].max(filterValues)];
                        break;
                    }
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {
                        filterValues = pendingSelectedFilter.value.map(function (filterValue) { return moment__default["default"](filterValue, 'LTS'); });
                        filterValues = [moment__default["default"].min(filterValues), moment__default["default"].max(filterValues)];
                        break;
                    }
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.integer.resourceType:
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.real.resourceType: {
                        filterValues = [lodash.min(pendingSelectedFilter.value), lodash.max(pendingSelectedFilter.value)];
                        break;
                    }
                    case i1$4.RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {
                        filterValues = pendingSelectedFilter.value.map(function (filterValue) { return filterValue === '$NULL$' ? 'blank' : filterValue === 1; });
                        break;
                    }
                    default: {
                        filterValues = lodash.uniq(pendingSelectedFilter.value.map(function (filterValue) { return String(filterValue); }));
                        break;
                    }
                }
                if (existingFilter) {
                    existingFilter.value.filterValue = filterValues;
                }
                else {
                    pendingSelectedFilter.value = new RxRecordGridAdvancedFilterValue(filterValues);
                    existingFilters.push(pendingSelectedFilter);
                }
            });
            this.onAdvancedFiltersChange(existingFilters);
            this.clearSelectedCells();
        };
        RecordGridComponent.prototype.applySorting = function (multiSortMeta) {
            this.adaptTableConfig.multiSortMeta = multiSortMeta;
            this.userPreferencesChanged$.next();
            if (!this.state.useExternalFiltering) {
                this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.data);
            }
        };
        RecordGridComponent.prototype.applyViewPreset = function (viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets) {
            var _a;
            if (viewPresetSelectorGuid === ((_a = this.state.viewPresetSelector) === null || _a === void 0 ? void 0 : _a.getGuid())) {
                return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);
            }
            return rxjs.EMPTY;
        };
        RecordGridComponent.prototype.shareViewPreset = function (viewPresetSelectorGuid) {
            var _a;
            if (viewPresetSelectorGuid === ((_a = this.state.viewPresetSelector) === null || _a === void 0 ? void 0 : _a.getGuid())) {
                return rxjs.of(this.rxRecordGridUserPreferencesService.getSharedViewPresetData());
            }
            return rxjs.of(null);
        };
        RecordGridComponent.prototype.applyViewPresetInner = function (viewPresetGuid, sharedViewPresets) {
            var _this = this;
            return this.initializationCompleted$.pipe(operators.switchMap(function () {
                var viewPresetData = sharedViewPresets && sharedViewPresets[_this.guid];
                if (viewPresetData) {
                    return _this.rxRecordGridUserPreferencesService.applySharedViewPreset(_this.state, _this.adaptTableConfig, viewPresetGuid, viewPresetData);
                }
                else {
                    return _this.rxRecordGridUserPreferencesService.applyViewPreset(_this.state, _this.adaptTableConfig, viewPresetGuid);
                }
            }), operators.take(1), operators.tap(function () {
                _this.loadRowData();
                _this.userPreferencesChanged$.next();
                _this.checkIfViewPresetEdited();
            }));
        };
        RecordGridComponent.prototype.areUserFiltersApplied = function () {
            return (this.isSearchApplied() ||
                Boolean(this.state.advancedFiltering.appliedSharedFilterPreset) ||
                !lodash.isEmpty(this.state.advancedFiltering.selectedFilters));
        };
        RecordGridComponent.prototype.isSearchApplied = function () {
            var searchText = lodash.get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();
            return Boolean(searchText);
        };
        RecordGridComponent.prototype.checkIfViewPresetEdited = function () {
            if (this.state.viewPresetSelector && this.rxRecordGridUserPreferencesService.isCurrentViewPresetEdited()) {
                this.state.viewPresetSelector.markAppliedViewPresetAsEdited();
            }
        };
        RecordGridComponent.prototype.clearSelectedCells = function () {
            var _a;
            (_a = lodash.last(this.popovers)) === null || _a === void 0 ? void 0 : _a.close();
            this.popovers = [];
            this.state.advancedFiltering.pendingSelectedFilters = [];
            this.state.advancedFiltering.selectedCardValues = {};
        };
        RecordGridComponent.prototype.compareRows = function (firstRow, secondRow) {
            var sortMetas = this.adaptTableConfig.multiSortMeta;
            return lodash.reduce(sortMetas, function (sortRank, sortMeta) {
                var firstValue;
                var secondValue;
                if (firstRow.groupField && secondRow.groupField) {
                    firstValue = firstRow.groupField === sortMeta.field ? firstRow.groupValue : null;
                    secondValue = secondRow.groupField === sortMeta.field ? secondRow.groupValue : null;
                }
                else {
                    firstValue = firstRow[sortMeta.field];
                    secondValue = secondRow[sortMeta.field];
                }
                // TODO: this is a naive implementation that needs to be improved to
                // take into account the type of data.
                // For example, this implementation will sort dates as strings.
                if (!isNaN(firstValue) && !isNaN(secondValue)) {
                    var firstValueNum = Number(firstValue);
                    var secondValueNum = Number(secondValue);
                    sortRank =
                        sortRank || sortMeta.order * (firstValueNum < secondValueNum ? -1 : firstValueNum > secondValueNum ? 1 : 0);
                }
                else {
                    // toString will convert null to '' to allow comparison with strings using localeCompare
                    sortRank = sortRank || sortMeta.order * lodash.toString(firstValue).localeCompare(lodash.toString(secondValue));
                }
                return sortRank;
            }, 0);
        };
        RecordGridComponent.prototype.createCsvExportFile = function (csvData) {
            var _this = this;
            var byteOrderMark = '\uFEFF';
            // Prepend byte order mark to indicate that csvData may contain unicode characters
            var file = new Blob(["" + byteOrderMark + csvData], { type: 'text/csv;charset=utf-8' });
            this.ngZone.runOutsideAngular(function () {
                fileSaver.saveAs(file, _this.getExportFileName() + ".csv");
            });
        };
        RecordGridComponent.prototype.deleteViewPreset = function (viewPresetGuid) {
            this.rxRecordGridUserPreferencesService.deleteViewPreset(viewPresetGuid);
            this.userPreferencesChanged$.next();
            return rxjs.EMPTY;
        };
        RecordGridComponent.prototype.discardViewPresetChanges = function (viewPresetGuid, sharedViewPresets) {
            if (this.rxRecordGridUserPreferencesService.isExistingViewPreset(viewPresetGuid)) {
                this.rxRecordGridUserPreferencesService.discardViewPresetChanges(viewPresetGuid);
                return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);
            }
            else {
                return rxjs.EMPTY;
            }
        };
        RecordGridComponent.prototype.enrichRowEntity = function (gridRowDataItem) {
            var _c;
            var _this = this;
            var hrefParams = {};
            if (!lodash.isEmpty(this.clickableWithHrefColumnActions)) {
                this.addSelectionFieldOptionNames(gridRowDataItem);
                var expandedGridRowData = this.expandRowProperties(gridRowDataItem);
                lodash.set(this.clickableWithHrefActionExpressionEvaluationData, "view.components." + this.guid + ".clickableRow", expandedGridRowData);
                hrefParams = lodash.reduce(this.clickableWithHrefColumnActions, function (result, gridActions, columnId) {
                    var gridAction = _this.findEnabledGridAction(gridActions);
                    if ((gridAction === null || gridAction === void 0 ? void 0 : gridAction.name) === i1$1.RX_VIEW_ACTION.viewActionNames.openView) {
                        result[columnId + "$ROUTER_LINK$"] = _this.rxViewActionUtilsService.generateViewUrl(gridAction.viewDefinitionName);
                        result[columnId + "$QUERY_PARAMS$"] = _this.evaluateViewInputParameters(gridAction.viewParams);
                    }
                    else if ((gridAction === null || gridAction === void 0 ? void 0 : gridAction.name) === i1$1.RX_VIEW_ACTION.viewActionNames.launchUrl) {
                        result[columnId + "$LAUNCH_URL$"] = _this.rxExpressionEvaluatorService.tryEvaluate(gridAction.url, _this.clickableWithHrefActionExpressionEvaluationData);
                        result[columnId + "$TARGET$"] = i1$1.RX_LAUNCH_BEHAVIOR[gridAction.launchBehavior].target;
                    }
                    else {
                        result[columnId + "$LAUNCH_URL$"] = null;
                        result[columnId + "$ROUTER_LINK$"] = null;
                    }
                    return result;
                }, {});
            }
            return Object.assign({}, gridRowDataItem, (_c = {},
                _c[i1$1.RowDataItemIdFieldName] = gridRowDataItem[this.adaptTableConfig.primaryKey],
                _c), hrefParams);
        };
        RecordGridComponent.prototype.expandRowProperties = function (rowDataItem) {
            return Object.assign(Object.assign({}, rowDataItem), this.rxObjectUtilsService.expandProperties(rowDataItem));
        };
        RecordGridComponent.prototype.expandSelectedRowsProperties = function (rowDataItems) {
            var _this = this;
            lodash.forEach(rowDataItems, function (rowDataItem, index) {
                rowDataItems[index] = _this.expandRowProperties(rowDataItem);
            });
        };
        RecordGridComponent.prototype.exportDataToCsv = function (cellValues, columnHeaders) {
            var csvSeparator = '","';
            var newLineSymbol = '\n';
            var columnHeadersString = "\"" + columnHeaders.join(csvSeparator) + "\"" + newLineSymbol;
            var rowsString = cellValues.map(function (row) { return "\"" + row.join(csvSeparator) + "\"" + newLineSymbol; }).join('');
            var csvData = "" + columnHeadersString + rowsString;
            this.createCsvExportFile(csvData);
        };
        RecordGridComponent.prototype.evaluateViewInputParameters = function (viewInputParams) {
            var _this = this;
            var evaluatedViewInputParams = {};
            lodash.forEach(viewInputParams, function (expression, parameterName) {
                var evaluatedExpression = _this.rxExpressionEvaluatorService.tryEvaluate(expression, _this.clickableWithHrefActionExpressionEvaluationData);
                evaluatedViewInputParams[parameterName] = evaluatedExpression || '';
            });
            return evaluatedViewInputParams;
        };
        RecordGridComponent.prototype.filterRows = function (rows) {
            var _this = this;
            var searchText = lodash.get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();
            var filteredRows = lodash.cloneDeep(rows);
            if (searchText) {
                var visibleColumns_1 = this.getVisibleColumns();
                filteredRows = filteredRows.filter(function (row) { return lodash.some(visibleColumns_1, function (column) {
                    if (row.groupField) {
                        if (_this.rxStringService.caseInsensitiveSearch(row.groupValue, searchText)) {
                            return true;
                        }
                        else {
                            row.items = _this.getFilteredItems(row.items, visibleColumns_1, searchText);
                            return row.items.length;
                        }
                    }
                    else {
                        return _this.rxStringService.caseInsensitiveSearch(_this.getCellValue(row, column), searchText);
                    }
                }); });
            }
            if (!lodash.isEmpty(this.state.advancedFiltering.selectedFilters)) {
                filteredRows = this.rxRecordGridFilterService.filterRows(filteredRows, this.state.advancedFiltering.selectedFilters, this.state.recordDefinition, this.state.advancedFiltering.recordGridFilterConfigs);
            }
            if (this.adaptTableConfig.multiSortMeta) {
                if (this.state.expandGroups) {
                    this.sortRows(filteredRows);
                }
                else {
                    filteredRows.sort(function (firstRow, secondRow) { return _this.compareRows(firstRow, secondRow); });
                }
            }
            if (this.state.expandGroups) {
                var getGroupItemsCount_1 = function (rowsWithGroups) {
                    var groups = rowsWithGroups.filter(function (row) { return row.items; });
                    var count = rowsWithGroups.length - groups.length;
                    groups === null || groups === void 0 ? void 0 : groups.forEach(function (group) { return (count += getGroupItemsCount_1(group.items)); });
                    return count;
                };
                this.adaptTableConfig.totalRecords = getGroupItemsCount_1(filteredRows);
            }
            else {
                this.adaptTableConfig.totalRecords = filteredRows.length;
            }
            return filteredRows;
        };
        RecordGridComponent.prototype.findEnabledGridAction = function (gridActions) {
            var _this = this;
            return gridActions.find(function (gridAction) {
                var conditionExpression = gridAction['$condition$'];
                var condition = _this.rxExpressionEvaluatorService.tryEvaluate(conditionExpression, _this.clickableWithHrefActionExpressionEvaluationData);
                return condition !== false;
            });
        };
        RecordGridComponent.prototype.getAdvancedFilterOptions = function () {
            var _this = this;
            return lodash.reduce(this.state.recordDefinition.fieldDefinitionsById, function (filterOptions, fieldDefinition, field) {
                var _a;
                // Due to nested structure need to check if it is a fieldDefinition
                if (!lodash.isUndefined(fieldDefinition.id)) {
                    var gridColumn = _this.adaptTableConfig.columns.find(function (column) { return column.field === field; });
                    var isHidden = !gridColumn || !gridColumn.filterable;
                    var filterConfig = _this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];
                    var additionalQueryCriteria = gridColumn === null || gridColumn === void 0 ? void 0 : gridColumn.additionalQueryCriteria;
                    if (filterConfig) {
                        filterOptions.push(_this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(field, gridColumn ? gridColumn.header || gridColumn.fallbackTitle : fieldDefinition.name, fieldDefinition, filterConfig, isHidden, {
                            optionalBooleanFilter: _this.fieldsProvider.optionalBooleanFilter,
                            requiredBooleanFilter: _this.fieldsProvider.requiredBooleanFilter,
                            inputsForStringWithTypeAheadTemplate: _this.fieldsProvider.inputsForStringWithTypeAheadTemplate,
                            inputsForStringTypeTemplate: _this.fieldsProvider.inputsForStringTypeTemplate,
                            inputsForNumberTypeTemplate: _this.fieldsProvider.inputsForNumberTypeTemplate,
                            inputsForTimeTypeTemplate: _this.fieldsProvider.inputsForTimeTypeTemplate,
                            inputsForDateTypeTemplate: _this.fieldsProvider.inputsForDateTypeTemplate,
                            inputsForDatetimeTypeTemplate: _this.fieldsProvider.inputsForDatetimeTypeTemplate,
                            inputsForSelectionTypeTemplate: _this.fieldsProvider.inputsForSelectionTypeTemplate
                        }, null, _this.state.namedFilterOptions[field], (_a = gridColumn === null || gridColumn === void 0 ? void 0 : gridColumn.typeaheadKeystrokeCount) !== null && _a !== void 0 ? _a : null, (gridColumn === null || gridColumn === void 0 ? void 0 : gridColumn.filterable) ? additionalQueryCriteria : null));
                    }
                }
                return filterOptions;
            }, []).sort(function (filterOption1, filterOption2) { return filterOption1.label.localeCompare(filterOption2.label); });
        };
        RecordGridComponent.prototype.getAssociationDescriptors = function () {
            var recordDefinitionName = this.getRecordDefinitionName();
            return recordDefinitionName
                ? this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName)
                : rxjs.of([]);
        };
        RecordGridComponent.prototype.getBaseDataPageParams = function () {
            var state = this.state;
            var params = {
                recorddefinition: state.recordDefinitionName
            };
            if (Boolean(state.associationDefinitionName)) {
                Object.assign(params, {
                    associatedRecordInstanceId: state.associatedRecordId,
                    associationDefinition: state.associationDefinitionName,
                    nodeToQuery: state.associatedRecordNodeSide,
                    recordDefinitionToQuery: state.recordDefinitionName
                });
            }
            if (state.associatedRoleName) {
                params.roleName = state.associatedRoleName;
            }
            return params;
        };
        RecordGridComponent.prototype.getCellValueFormatter = function (column) {
            var _this = this;
            var fieldDefinition = column.fieldDefinition;
            var cellValueFormatter = function (value) { return value; };
            switch (fieldDefinition.resourceType) {
                case i1$4.RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {
                    cellValueFormatter = function (value) { return _this.rxBooleanPipe.transform(value); };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.selection.resourceType: {
                    // column.fieldId should be used here because fieldId uniquely identifies the field,
                    // while fieldDefinition.id may be the same for core and associated fields
                    cellValueFormatter = function (value) { return _this.selectionFieldOptionLabelsByFieldId[column.fieldId][value]; };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {
                    cellValueFormatter = function (value) { return _this.datePipe.transform(value, 'medium'); };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType: {
                    cellValueFormatter = function (value) { return _this.datePipe.transform(value); };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {
                    cellValueFormatter = function (value) { return value ? _this.datePipe.transform(new Date("2000-01-01T" + value), 'mediumTime') : value; };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType: {
                    cellValueFormatter = function (value) {
                        var attachmentName = lodash.get(value, 'name');
                        return lodash.isString(attachmentName) ? attachmentName : value;
                    };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:
                case i1$4.RX_RECORD_DEFINITION.dataTypes.real.resourceType: {
                    var precision = fieldDefinition.precision;
                    var digitsInfo_1 = lodash.isNil(precision) || precision === -1 ? null : "1." + precision + "-" + precision;
                    cellValueFormatter = function (value) { return _this.decimalPipe.transform(value, digitsInfo_1); };
                    break;
                }
                case i1$4.RX_RECORD_DEFINITION.dataTypes.integer.resourceType: {
                    cellValueFormatter = function (value) { return _this.decimalPipe.transform(value); };
                    break;
                }
            }
            return cellValueFormatter;
        };
        RecordGridComponent.prototype.getCellValues = function (rows, visibleColumns) {
            var _this = this;
            return rows.map(function (row) { return visibleColumns.map(function (visibleColumnConfig) { return _this.getCellValue(row, visibleColumnConfig); }); });
        };
        RecordGridComponent.prototype.getColumns = function () {
            var _this = this;
            return this.adaptTableConfig.columns.map(function (column) {
                var columnMetadata = lodash.find(_this.state.columnsWithMetadata, {
                    fieldId: column.field
                });
                return {
                    field: column.field,
                    header: column.header,
                    hidden: i1.getValueOrFunc(column.hidden),
                    fieldDefinition: columnMetadata.fieldDefinition
                };
            });
        };
        RecordGridComponent.prototype.getData = function (startIndex) {
            var _this = this;
            return this.getDataBase(startIndex, false).pipe(operators.tap(function (dataPage) {
                _this.cursor = dataPage.cursor || undefined;
            }));
        };
        RecordGridComponent.prototype.getDataBase = function (startIndex, onlyForTotalCount) {
            var _a, _b;
            var data$;
            var params = this.prepareQueryParamsAndQueryArgs(onlyForTotalCount);
            if ((_a = params.queryExpression) === null || _a === void 0 ? void 0 : _a.includes(i1$1.RX_EXPRESSION_EVALUATOR.operands.undefined)) {
                this.rxLogService.debug("Query expression contains undefined operands: " + params.queryExpression);
                return this.rxRecordInstanceDataPageService.getEmptyDataPage();
            }
            if (this.state.enableFiltering &&
                !this.isSearchApplied() &&
                this.state.requiredFilters > this.state.advancedFiltering.selectedFilters.length) {
                this.rxNotificationService.addWarningMessage(this.getFiltersRequiredMessage(this.state.requiredFilters), this.translateService.instant('com.bmc.arsys.rx.client.common.alert.label'));
                return this.rxRecordInstanceDataPageService.getEmptyDataPage();
            }
            if (lodash.isNumber(startIndex)) {
                params.startIndex = startIndex;
            }
            if (startIndex === 0) {
                delete params.cursor;
            }
            this.lastQueryExpression = (_b = params.queryExpression) !== null && _b !== void 0 ? _b : '';
            if (!onlyForTotalCount) {
                this.lastPropertySelection = params.propertySelection;
            }
            if (this.state.getData) {
                data$ = this.state.getData(Object.assign(Object.assign({}, params), { searchText: lodash.get(this.adaptTableConfig.filters, 'global.value', '').toString().trim() }));
            }
            else if (this.hasAssociationAndEmptyRecordId()) {
                data$ = this.rxAssociationInstanceDataPageService.getEmptyDataPage();
            }
            else {
                var dataPageService = this.getDataPageService();
                data$ = dataPageService.post({ params: params, headers: this.getHeaders() });
            }
            return data$;
        };
        RecordGridComponent.prototype.getDataCellStyle = function (column) {
            var textAlign = '';
            switch (column.alignment) {
                case RX_RECORD_GRID.columnAlignment.left:
                    textAlign = 'left';
                    break;
                case RX_RECORD_GRID.columnAlignment.right:
                    textAlign = 'right';
                    break;
                case RX_RECORD_GRID.columnAlignment.center:
                    textAlign = 'center';
                    break;
                default:
                    var rightAlignmentTypes = [
                        i1$4.RX_RECORD_DEFINITION.dataTypes.integer.resourceType,
                        i1$4.RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,
                        i1$4.RX_RECORD_DEFINITION.dataTypes.real.resourceType
                    ];
                    if (column.fieldDefinition.resourceType.search(rightAlignmentTypes.join('|')) !== -1) {
                        textAlign = 'right';
                    }
                    break;
            }
            return {
                'text-align': textAlign
            };
        };
        RecordGridComponent.prototype.getDataPageService = function () {
            return Boolean(this.state.associationDefinitionName)
                ? this.rxAssociationInstanceDataPageService
                : this.rxRecordInstanceDataPageService;
        };
        RecordGridComponent.prototype.getExportFileName = function () {
            var date = this.datePipe.transform(new Date(), 'yyyy-MM-dd');
            return date + " Grid Data";
        };
        RecordGridComponent.prototype.getFilteredItems = function (items, visibleColumns, searchText) {
            var _this = this;
            return items.filter(function (item) {
                var result;
                if (item.groupField) {
                    if (_this.rxStringService.caseInsensitiveSearch(item.groupValue, searchText)) {
                        result = true;
                    }
                    else {
                        item.items = _this.getFilteredItems(item.items, visibleColumns, searchText);
                        result = item.items.length;
                    }
                }
                else {
                    result = lodash.some(visibleColumns, function (visibleColumn) { return _this.rxStringService.caseInsensitiveSearch(_this.getCellValue(item, visibleColumn), searchText); });
                }
                return result;
            });
        };
        RecordGridComponent.prototype.getFirstSelectedRow = function () {
            return lodash.get(this.adaptTableConfig.selectedItems, '0', null);
        };
        RecordGridComponent.prototype.getGridColumnDefinitions = function (columnsWithMetadata) {
            var _this = this;
            var columnsConfig = [];
            columnsWithMetadata
                .slice()
                .sort(function (a, b) { return a.index - b.index; })
                .map(function (column) {
                var sortable;
                var sortConfig = _this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable);
                var testId = _this.rxRecordGridUtilsService.getTestIdForGridColumn(column.fieldId);
                if (lodash.isObject(sortConfig)) {
                    sortable = true;
                    if (_this.adaptTableConfig.multiSortMeta) {
                        _this.adaptTableConfig.multiSortMeta.splice(sortConfig.priority, 0, {
                            field: column.fieldId,
                            order: _this.rxRecordGridConfigUtilsService.getColumnSortOrder(sortConfig.direction)
                        });
                    }
                    else {
                        _this.adaptTableConfig.multiSortMeta = [
                            {
                                field: column.fieldId,
                                order: _this.rxRecordGridConfigUtilsService.getColumnSortOrder(sortConfig.direction)
                            }
                        ];
                    }
                }
                else {
                    sortable = sortConfig;
                }
                var isColumnWidthInPixels = lodash.endsWith(column.width, 'px');
                var columnWidth = _this.adaptTableConfig.columnResizeMode === i1$7.ResizeMode.Expand && !isColumnWidthInPixels ? null : column.width;
                var columnMinWidth = (isColumnWidthInPixels && parseInt(columnWidth) < RX_RECORD_GRID.defaultColumnMinWidth ? columnWidth : null);
                if (column.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {
                    columnsConfig.push({
                        field: column.fieldId,
                        header: column.title,
                        fallbackTitle: column.fallbackTitle,
                        width: columnWidth,
                        minWidth: columnMinWidth,
                        hidden: !column.visible,
                        cellTemplate: _this.rowActionButtonsTemplate,
                        editTemplate: null,
                        filterTemplate: null,
                        headerTitleTemplate: null,
                        cellTooltip: null,
                        headerTooltip: null,
                        headerClass: null,
                        filterable: column.filterable,
                        searchable: column.searchable,
                        sortable: sortable,
                        editable: false,
                        customTemplate: _this.rowActionButtonsTemplate,
                        clickable: false,
                        dataCellClass: 'rx-row-action-cell',
                        isRowActionsColumn: true,
                        testId: testId
                    });
                }
                else {
                    columnsConfig.push({
                        field: column.fieldId,
                        header: column.title,
                        fallbackTitle: column.fallbackTitle,
                        width: columnWidth,
                        minWidth: columnMinWidth,
                        hidden: !column.visible,
                        cellTemplate: _this.cellTemplate,
                        editTemplate: null,
                        filterTemplate: null,
                        headerTitleTemplate: null,
                        cellTooltip: function (params) {
                            return (_this.showCellTooltip && _this.getCellValue(params.dataItem, params.column)) || null;
                        },
                        headerTooltip: column.headerTooltip,
                        dataCellClass: _this.getDataCellClass.bind(_this),
                        dataCellStyle: _this.getDataCellStyle(column),
                        headerClass: null,
                        sortable: sortable,
                        editable: null,
                        filterable: column.filterable,
                        searchable: column.searchable,
                        filterName: null,
                        filterParams: null,
                        clickable: column.clickable,
                        filterType: column.filterType,
                        isDownloadableAttachment: _this.isDownloadableAttachmentColumn(column),
                        clickableWithHref: column.clickableWithHref,
                        customTemplate: column.cellTemplate,
                        wrapText: column.wrapText,
                        referenced: column.referenced,
                        cellDisplayProperties: column.cellDisplayProperties,
                        typeaheadKeystrokeCount: column.typeaheadKeystrokeCount,
                        additionalQueryCriteria: column.additionalQueryCriteria,
                        testId: testId
                    });
                    _this.cellValueFormatters[column.fieldId] = _this.getCellValueFormatter(column);
                }
            });
            return columnsConfig;
        };
        RecordGridComponent.prototype.getGridData = function (loadMore) {
            var _this = this;
            var onRequestEnd = function () {
                _this.adaptTableConfig.isLoadingData = false;
                _this.adaptTableConfig.isLoadingMoreData = false;
            };
            this.adaptTableConfig.isLoadingData = true;
            return this.getData(loadMore ? this.adaptTableConfig.data.length : 0).pipe(operators.tap(function (res) {
                onRequestEnd();
                var mappedData = res.data.map(_this.enrichRowEntity.bind(_this));
                if (_this.state.useExternalFiltering) {
                    if (loadMore) {
                        _this.adaptTableConfig.data = _this.adaptTableConfig.data.concat(mappedData);
                        if (mappedData.length === 0 || mappedData.length < _this.adaptTableConfig.rows) {
                            _this.adaptTableConfig.totalRecords = _this.adaptTableConfig.data.length;
                        }
                    }
                    else {
                        _this.adaptTableConfig.data = mappedData;
                        if (mappedData.length < _this.adaptTableConfig.rows) {
                            _this.adaptTableConfig.totalRecords = mappedData.length;
                        }
                        else {
                            _this.adaptTableConfig.totalRecords = null;
                        }
                    }
                }
                else {
                    _this.adaptTableConfig.originalRows = mappedData;
                    _this.adaptTableConfig.data = _this.filterRows(_this.adaptTableConfig.originalRows);
                }
                if (_this.state.expandGroups) {
                    _this.adaptTableConfig.expandedGroupsKeys = {};
                    var expandGroupsDeep_1 = function (rows) {
                        rows.forEach(function (row) {
                            var _c;
                            if (row.items) {
                                var expandedGroupKey = _this.adaptTableConfig.expandedGroupsKeys[row.groupField];
                                if (expandedGroupKey) {
                                    expandedGroupKey[row.groupValue] = true;
                                }
                                else {
                                    _this.adaptTableConfig.expandedGroupsKeys[row.groupField] = (_c = {}, _c[row.groupValue] = true, _c);
                                }
                                expandGroupsDeep_1(row.items);
                            }
                        });
                    };
                    expandGroupsDeep_1(_this.adaptTableConfig.data);
                }
                _this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(_this.state.enableRowSelection && _this.adaptTableConfig.data.length);
                _this.notifyPropertyChanged('totalRowCount', _this.adaptTableConfig.data.length);
                _this.notifyPropertyChanged('queryExpression', _this.lastQueryExpression);
                _this.notifyPropertyChanged('lastRefreshTime', new Date().toISOString());
                if (!loadMore) {
                    _this.onRowsSelectionChange([]);
                    _this.scrollToTop();
                }
                _this.setSelectedFilteredRowsCount();
                _this.dataLoaded.emit();
                _this.dataLoadContextSubject.next({
                    associatedRecordId: _this.state.associatedRecordId,
                    associatedRoleName: _this.state.associatedRoleName,
                    filterExpression: _this.state.filterExpression,
                    namedFilterOptions: _this.state.namedFilterOptions
                });
                _this.changeDetector.markForCheck();
            }), operators.catchError(function (err) {
                onRequestEnd();
                return rxjs.throwError(err);
            }));
        };
        RecordGridComponent.prototype.getHeaders = function () {
            return {
                'Should-Query-All-Locales': this.state.showDataForAllLocales ? 'true' : []
            };
        };
        RecordGridComponent.prototype.getNamedFilterOptionsState = function (columns) {
            return columns.reduce(function (result, col) {
                if (col.predefinedFilterPresets) {
                    result[col.fieldId] = col.predefinedFilterPresets.sort(function (a, b) { return a.index - b.index; });
                }
                return result;
            }, {});
        };
        RecordGridComponent.prototype.getProgrammaticActionButtons = function (recordGridActionButtons) {
            var _this = this;
            return recordGridActionButtons.map(function (actionButton) {
                var actionButtonConfig;
                if (lodash.isFunction(actionButton.disabled) || lodash.isFunction(actionButton.hidden)) {
                    actionButtonConfig = _this.rowSelectionChanged.pipe(operators.map(function (selectedItems) {
                        return Object.assign(Object.assign({}, actionButton), { disabled: lodash.isFunction(actionButton.disabled)
                                ? actionButton.disabled(selectedItems)
                                : actionButton.disabled, hidden: lodash.isFunction(actionButton.hidden) ? actionButton.hidden(selectedItems) : actionButton.hidden });
                    }));
                }
                else {
                    actionButtonConfig = rxjs.of(actionButton);
                }
                return {
                    guid: actionButton.guid,
                    config: actionButtonConfig,
                    runtimeViewModelApi: {
                        triggerViewActions: function (guid, viewActionTriggerEventName) { return _this.executeViewActions(actionButton.guid, lodash.get(actionButton, 'actions'), _this.state.lastActionRow); }
                    },
                    factory: null,
                    outlets: null
                };
            });
        };
        RecordGridComponent.prototype.getRecordDefinition = function () {
            var _this = this;
            if (this.state.getRecordDefinition) {
                return this.state
                    .getRecordDefinition()
                    .pipe(operators.tap(function (recordDefinition) { return _this.rxRecordDefinitionService.applyLocalization(recordDefinition); }));
            }
            return this.rxRecordDefinitionCacheService.getRecordDefinition(this.state.recordDefinitionName);
        };
        RecordGridComponent.prototype.getRecordDefinitionName = function () {
            return this.state.recordDefinitionName;
        };
        RecordGridComponent.prototype.getSelectedRowCount = function () {
            return this.adaptTableConfig.selectedItems.length;
        };
        RecordGridComponent.prototype.getSelectedRows = function (inSortOrder) {
            if (inSortOrder === void 0) { inSortOrder = false; }
            if (inSortOrder) {
                // returns selected rows in order of sorting applied to grid
                return lodash.intersectionBy(this.adaptTableConfig.data, this.adaptTableConfig.selectedItems, i1$1.RowDataItemIdFieldName);
            }
            else {
                // returns selected rows in order of selection
                return this.adaptTableConfig.selectedItems;
            }
        };
        RecordGridComponent.prototype.getTotalRowCount = function () {
            return this.getDataBase(null, true);
        };
        RecordGridComponent.prototype.getVirtualRowHeight = function () {
            var _a;
            if (!((_a = this.adaptTableConfig.cardLayoutColumns) === null || _a === void 0 ? void 0 : _a.length)) {
                return RX_RECORD_GRID.defaultRowHeight;
            }
            var singleRowHeight = 32;
            var padding = 3;
            return singleRowHeight * this.visibleColumns.length + 2 * padding;
        };
        RecordGridComponent.prototype.hasAssociationAndEmptyRecordId = function () {
            return Boolean(this.state.associationDefinitionName) && !this.state.associatedRecordId;
        };
        RecordGridComponent.prototype.initActionButtons = function () {
            if (this.isProgrammaticUse) {
                this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);
            }
            else {
                this.actionButtons = lodash.get(this.runtimeViewCanvasItemComponent.getChildren(i1$1.RX_VIEW_DEFINITION.defaultOutletName), '[0].children');
            }
        };
        RecordGridComponent.prototype.initAdvancedFilterTexts = function () {
            this.state.advancedFiltering.filterTexts = {
                initialDropdownAnchorLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.filter-data.label')
            };
        };
        RecordGridComponent.prototype.initCustomTexts = function () {
            this.adaptTableConfig.texts = {
                searchPlaceholder: this.state.searchFieldPlaceholderText,
                emptyStateLabelText: this.state.emptyStateLabelText,
                emptyStateWithFilterLabelText: this.state.emptyStateWithFilterLabelText,
                exportEntireDocument: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-all-rows.label'),
                exportSelected: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label')
            };
        };
        RecordGridComponent.prototype.initGrid = function () {
            var _this = this;
            this.state.guid = this.guid;
            return rxjs.forkJoin([
                this.rxGridConfiguratorService.getColumnsWithMetadata(this.guid, this.state.columns, this.state.recordDefinition),
                this.guid && this.state.enableFiltering ? this.getSharedFilterPresets() : rxjs.of(null)
            ]).pipe(operators.switchMap(function (_c) {
                var _d;
                var _e = __read(_c, 2), columnsWithMetadata = _e[0], sharedFilterPresets = _e[1];
                _this.state.columnsWithMetadata = columnsWithMetadata;
                _this.state.namedFilterOptions = _this.getNamedFilterOptionsState(columnsWithMetadata);
                _this.isUserAllowedToDeleteRecords = _this.state.recordDefinition
                    ? _this.state.recordDefinition.allowNonAdminToDeleteRecordInstances !== false ||
                        _this.rxCurrentUserService.isAdministrator()
                    : false;
                _this.notifyPropertyChanged('isUserAllowedToDeleteRecords', _this.isUserAllowedToDeleteRecords);
                _this.addAssociationFieldsToRecordDefinition(columnsWithMetadata);
                // this has to be set prior to calling getGridColumnDefinitions
                _this.selectionFieldOptionLabelsByFieldId =
                    _this.rxGridConfiguratorService.getSelectionFieldOptionLabelsByFieldId(_this.state.columns, _this.state.recordDefinition);
                _this.adaptTableConfig.columnResizeMode = _this.state.expandable ? i1$7.ResizeMode.Expand : i1$7.ResizeMode.Fit;
                _this.adaptTableConfig.columns = _this.getGridColumnDefinitions(columnsWithMetadata);
                _this.state.advancedFiltering.recordGridFilterConfigs = _this.rxRecordGridFilterConfigService.getConfigs();
                _this.state.advancedFiltering.filterOptions = _this.getAdvancedFilterOptions();
                _this.state.advancedFiltering.filterOptions.push({
                    id: RX_RECORD_GRID.externalPresetFilterOptionId,
                    label: RX_RECORD_GRID.externalPresetFilterOptionId,
                    dataType: i1.AdvancedFilterOptionDataType.custom,
                    isHidden: true,
                    customConfig: {
                        getTagText: function (value) { var _a; return (_a = _this.state.advancedFiltering.savedFilters.find(function (savedFilter) { return savedFilter.id === value; })) === null || _a === void 0 ? void 0 : _a.name; }
                    }
                });
                _this.adaptTableConfig.rowSelectionMode = _this.state.enableRowSelection;
                _this.adaptTableConfig.primaryKey = _this.state.recordIdField;
                _this.adaptTableConfig.bordered = _this.state.bordered;
                _this.adaptTableConfig.striped = _this.state.striped;
                _this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(_this.state.enableRowSelection && _this.adaptTableConfig.data.length);
                _this.state.initialFilters = _this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(_this.state.filters, _this.state.recordGridFilters);
                _this.clickableWithHrefColumnActions = lodash.reduce(columnsWithMetadata, function (result, column) {
                    if (column.clickableWithHref) {
                        result[column.fieldId] = column.actions;
                    }
                    return result;
                }, {});
                if (!lodash.isEmpty(_this.clickableWithHrefColumnActions)) {
                    _this.clickableWithHrefActionExpressionEvaluationData = {
                        view: {
                            components: (_d = {},
                                _d[_this.guid] = {
                                    recordDefinition: _this.state.recordDefinition
                                },
                                _d),
                            inputParams: _this.runtimeViewModelApi.getViewInputParameters()
                        }
                    };
                }
                if (_this.guid) {
                    return _this.rxRecordGridUserPreferencesService.applyUserPreferences(_this.adaptTableConfig, _this.state.columnsWithMetadata, _this.state, sharedFilterPresets);
                }
                return rxjs.of(null);
            }), operators.tap(function () {
                _this.sortedColumnsByTitle = _this.getSortedColumnsByTitle();
                _this.filteredVisibleColumns = _this.sortedColumnsByTitle;
                _this.visibleColumns = _this.getVisibleColumns();
                _this.isFilterBySelectionButtonVisible = _this.state.enableFiltering && lodash.some(_this.visibleColumns, 'filterable');
                _this.initActionButtons();
                _this.initRowActionButtons();
                if (!_this.state.viewPresetSelector) {
                    // #ADAPT-8052 workaround.
                    _this.avoidSystemColumnExpansion();
                    _this.loadRowData();
                }
                _this.updateToolbarTags(_this.state.advancedFiltering.toolbarTags);
                _this.updateAdaptTableFilters();
            }));
        };
        // #ADAPT-8052 workaround. System column width changes when removing a column from the grid.
        // If all columns have custom width in percents, proportionally increase the width of all columns.
        // If all columns have custom width in pixels, change the largest column width property to auto-expandable (width = null).
        // If % and px are both used, change the largest column width in % to auto-expandable (width= null).
        // If Actions column has customized width, avoid width change when possible. Preserving width in pixels is in priority.
        // Note:
        // Those column width modifications applied during initial rendering of the grid are not saved to User preferences,
        // because it is not the user intention but a workaround.
        RecordGridComponent.prototype.avoidSystemColumnExpansion = function () {
            if (this.adaptTableConfig.cardLayoutColumns) {
                this.avoidSystemCardColumnExpansion();
                return;
            }
            var columnsWithWidthInPixels = [];
            var columnsWithWidthInPercent = [];
            var visibleActionsColumn = lodash.find(this.adaptTableConfig.columns, {
                field: RX_RECORD_GRID.actionsColumnFieldDefinition.id,
                hidden: false
            });
            var maxWidthInPixels = 0;
            var maxWidthInPercent = 0;
            var totalWidthInPercent = 0;
            var isEveryVisibleColumnWithCustomWidth = this.adaptTableConfig.columns.every(function (column) {
                if (!column.hidden) {
                    if (lodash.isNil(column.width)) {
                        return false;
                    }
                    var columnWidth = parseFloat(column.width);
                    if (column.width.endsWith('px')) {
                        columnsWithWidthInPixels.push(column);
                        if (column !== visibleActionsColumn) {
                            maxWidthInPixels = Math.max(maxWidthInPixels, columnWidth);
                        }
                    }
                    else {
                        columnsWithWidthInPercent.push(column);
                        totalWidthInPercent += columnWidth;
                        if (column !== visibleActionsColumn) {
                            maxWidthInPercent = Math.max(maxWidthInPercent, columnWidth);
                        }
                    }
                }
                return true;
            });
            if (isEveryVisibleColumnWithCustomWidth && totalWidthInPercent < 100) {
                var hasColumnsWithWidthInPercent = Boolean(columnsWithWidthInPercent.length);
                var hasColumnsWithWidthInPixels = Boolean(columnsWithWidthInPixels.length);
                if (hasColumnsWithWidthInPercent && !hasColumnsWithWidthInPixels) {
                    columnsWithWidthInPercent.forEach(function (column) {
                        column.width = ((parseFloat(column.width) / totalWidthInPercent) * 100).toFixed(4) + "%";
                    });
                }
                if (!hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {
                    if (columnsWithWidthInPixels.length === 1 && visibleActionsColumn) {
                        visibleActionsColumn.width = null;
                        visibleActionsColumn.minWidth = null;
                    }
                    else {
                        lodash.findLast(columnsWithWidthInPixels, function (column) {
                            if (parseInt(column.width) === maxWidthInPixels && column !== visibleActionsColumn) {
                                column.width = null;
                                column.minWidth = null;
                                return true;
                            }
                            else {
                                return false;
                            }
                        });
                    }
                }
                if (hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {
                    if (columnsWithWidthInPercent.length === 1 && visibleActionsColumn) {
                        visibleActionsColumn.width = null;
                        visibleActionsColumn.minWidth = null;
                    }
                    else {
                        lodash.findLast(columnsWithWidthInPercent, function (column) {
                            if (parseFloat(column.width) === maxWidthInPercent && column !== visibleActionsColumn) {
                                column.width = null;
                                return true;
                            }
                            else {
                                return false;
                            }
                        });
                    }
                }
            }
        };
        // This is a workaround for Adapt defect on System column (checkbox)
        // when the user is using an Ios device and the grid is in card mode.
        // It seems setting the columns in % does not work correctly, in the case of
        // card display we have only two columns with 35% and 65%, however
        // the Adapt grid tries to display the cards around 50% each.
        // For example for an Iphone 14 Pro on Xcode simulator the grid total size is 359px:
        // -> 96.31px for the system column (instead of 33px),
        // -> 130.34px for the second column,
        // -> 131.34px for the third column,
        // In order to "fix" the issue, the user has to "tap" on the separator
        // between columns 2 and 3, which then seems to "redraw" the grid.
        // Workaround:
        // Setting the values of both columns in px instead of % solves the problem.
        // For now, we only apply this workaround on ios platform.
        RecordGridComponent.prototype.avoidSystemCardColumnExpansion = function () {
            if (!this.adaptDeviceDetectionService.iosPlatform()) {
                return;
            }
            var adaptSystemColumnWidth = 33;
            var availableColumnWidth = this.adaptTable.dataHeaderCells.reduce(function (accum, cell) { return accum + cell.element.nativeElement.offsetWidth; }, 0) -
                adaptSystemColumnWidth;
            this.adaptTableConfig.cardLayoutColumns.forEach(function (column) {
                column.width = ((parseFloat(column.width) * availableColumnWidth) / 100).toFixed(4) + "px";
            });
        };
        RecordGridComponent.prototype.initRecordDefinitions = function () {
            var _this = this;
            this.setRecordDefinition(null);
            this.state.associationDescriptors = [];
            var hasAssociatedRecordFieldColumns = lodash.some(this.state.columns, function (column) { return _this.rxRecordGridUtilsService.isAssociatedRecordFieldId(column.fieldId); });
            return rxjs.forkJoin([
                this.getRecordDefinition(),
                hasAssociatedRecordFieldColumns ? this.getAssociationDescriptors() : rxjs.of([])
            ]).pipe(operators.tap(function (_c) {
                var _d = __read(_c, 2), recordDefinition = _d[0], associationDescriptors = _d[1];
                _this.setRecordDefinition(recordDefinition);
                _this.state.associationDescriptors = associationDescriptors;
            }), operators.map(function (_c) {
                var _d = __read(_c, 1), recordDefinition = _d[0];
                return recordDefinition;
            }));
        };
        RecordGridComponent.prototype.initRowActionButtons = function () {
            if (this.isProgrammaticUse) {
                this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);
            }
            else {
                this.rowActionButtons = lodash.get(this.runtimeViewCanvasItemComponent.getChildren(RX_RECORD_GRID.rowActionsOutletName), '[0].children');
            }
        };
        RecordGridComponent.prototype.isDownloadableAttachmentColumn = function (column) {
            var recordDefinitionType = lodash.get(this.state.recordDefinition, 'resourceType');
            var fieldDefinitionType = lodash.get(column, 'fieldDefinition.resourceType');
            return (!this.isProgrammaticUse &&
                (recordDefinitionType === i1$4.RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType ||
                    recordDefinitionType === i1$4.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) &&
                fieldDefinitionType === i1$4.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType);
        };
        RecordGridComponent.prototype.isRangeFilter = function (fieldId) {
            var rangeFields = [
                i1$4.RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.integer.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,
                i1$4.RX_RECORD_DEFINITION.dataTypes.real.resourceType
            ];
            var fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];
            return lodash.includes(rangeFields, fieldDefinition.resourceType);
        };
        RecordGridComponent.prototype.isSharedFilterPreset = function (savedFilter) {
            return Boolean(savedFilter.filterExpression);
        };
        RecordGridComponent.prototype.loadRowData = function (loadMore) {
            this.getGridData(loadMore).subscribe();
        };
        RecordGridComponent.prototype.openSortByDialogFn = function (config) {
            this.cardLayoutOpenedModal = this.adaptModalService.open(config);
            return this.cardLayoutOpenedModal;
        };
        RecordGridComponent.prototype.prepareQueryParamsAndQueryArgs = function (onlyForTotalCount) {
            var _this = this;
            var primaryKey = this.adaptTableConfig.primaryKey;
            var queryParams = Object.assign(Object.assign({}, this.getBaseDataPageParams()), { shouldIncludeTotalSize: onlyForTotalCount, pageSize: onlyForTotalCount ? 0 : this.adaptTableConfig.rows, startIndex: onlyForTotalCount ? 0 : this.adaptTableConfig.first });
            if (this.cursor && !onlyForTotalCount) {
                queryParams.cursor = this.cursor;
            }
            if (!onlyForTotalCount) {
                queryParams.propertySelection = lodash.chain(this.adaptTableConfig.columns
                    .filter(function (col) { return !col.isRowActionsColumn && (_this.state.getDataForHiddenColumns || !col.hidden || col.referenced); })
                    .map(function (col) { return col.field; }))
                    .union([primaryKey])
                    .value();
            }
            var multiSortMeta = this.adaptTableConfig.multiSortMeta;
            if (!onlyForTotalCount && multiSortMeta && multiSortMeta.length) {
                queryParams.sortBy = multiSortMeta.map(function (metaItem) { return metaItem.order === i1$7.SortOrder.Asc ? "" + metaItem.field : "-" + metaItem.field; });
            }
            var searchText = lodash.get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();
            var textSearchQuery = this.rxRecordGridFilterService.generateTextFilterQuery(searchText, this.adaptTableConfig.columns);
            var appliedSharedFilterPreset = this.state.advancedFiltering.appliedSharedFilterPreset;
            var sharedFilterPresetExpression = appliedSharedFilterPreset && appliedSharedFilterPreset.filterExpression
                ? "(" + appliedSharedFilterPreset.filterExpression + ")"
                : null;
            var resultingQuery = this.rxRecordGridFilterService.addQueries(this.rxRecordGridFilterService.getQueryFromRecordGridFilterData(this.state.initialFilters, this.state.recordDefinition.fieldDefinitionsById), this.buildQueryByAdvancedFilters(this.state.advancedFiltering.selectedFilters), textSearchQuery, this.state.filterExpression, sharedFilterPresetExpression);
            if (resultingQuery) {
                queryParams.queryExpression = resultingQuery;
            }
            return queryParams;
        };
        RecordGridComponent.prototype.refresh = function () {
            var _this = this;
            return this.initializationCompleted$.pipe(operators.switchMap(function () { return _this.getGridData(); }), operators.switchMapTo(rxjs.EMPTY));
        };
        RecordGridComponent.prototype.saveViewPreset = function (viewPresetGuid) {
            this.rxRecordGridUserPreferencesService.saveViewPreset(viewPresetGuid);
            this.userPreferencesChanged$.next();
            return rxjs.EMPTY;
        };
        RecordGridComponent.prototype.scrollToTop = function () {
            if (this.adaptTable) {
                var scrollableBodyElement = this.adaptTable.getScrollableBodyElement();
                if (scrollableBodyElement) {
                    scrollableBodyElement.scrollTop = 0;
                }
            }
        };
        RecordGridComponent.prototype.setFilter = function (newFilter) {
            this.state.advancedFiltering.selectedFilters = newFilter;
        };
        RecordGridComponent.prototype.setRecordDefinition = function (recordDefinition) {
            this.state.recordDefinition = lodash.cloneDeep(recordDefinition);
            if (recordDefinition) {
                this.state.recordDefinition.fieldDefinitionsById = this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(this.state.recordDefinition);
            }
            this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);
        };
        RecordGridComponent.prototype.setSelectedFilteredRowsCount = function () {
            this.selectedFilteredRowsCount = this.adaptTable.hasFilter() ? this.getSelectedRows().length : 0;
        };
        RecordGridComponent.prototype.sortRows = function (rows) {
            var _this = this;
            rows.sort(function (firstRow, secondRow) { return _this.compareRows(firstRow, secondRow); });
            lodash.forEach(rows, function (row) {
                var _a;
                if ((_a = row.items) === null || _a === void 0 ? void 0 : _a.length) {
                    _this.sortRows(row.items);
                }
            });
        };
        RecordGridComponent.prototype.toggleCellSelection = function (columns, rowItem, popover, isCardLayout) {
            var _this = this;
            if (this.state.enableFiltering) {
                if (!isCardLayout) {
                    var column = columns[0];
                    if (column.filterable) {
                        var existingPendingFilter = lodash.find(this.state.advancedFiltering.pendingSelectedFilters, {
                            filterOptionId: column.field
                        });
                        var filterValue = !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];
                        var fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];
                        var isRangeFilter = this.isRangeFilter(column.field);
                        var isRequiredBooleanFilter = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&
                            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);
                        var isFilterAvailable = !((isRangeFilter && existingPendingFilter && existingPendingFilter.value.length === 2) ||
                            (isRequiredBooleanFilter && existingPendingFilter) ||
                            (filterValue === '$NULL$' && (isRangeFilter || isRequiredBooleanFilter)));
                        if (existingPendingFilter) {
                            if (this.isCellSelected(popover)) {
                                var elementIndex = lodash.findIndex(existingPendingFilter.value, filterValue);
                                existingPendingFilter.value.splice(elementIndex, 1);
                                this.trackPopoverAnchor(popover);
                                if (!existingPendingFilter.value.length) {
                                    lodash.remove(this.state.advancedFiltering.pendingSelectedFilters, existingPendingFilter);
                                }
                            }
                            else if (isFilterAvailable) {
                                existingPendingFilter.value.push(filterValue);
                                this.trackPopoverAnchor(popover);
                            }
                        }
                        else if (isFilterAvailable) {
                            var selectedFilter = {
                                filterOptionId: column.field,
                                value: [filterValue]
                            };
                            this.state.advancedFiltering.pendingSelectedFilters.push(selectedFilter);
                            this.trackPopoverAnchor(popover);
                        }
                    }
                }
                else {
                    var filterableColumns = columns.filter(function (column) {
                        var fieldDefinition = _this.state.recordDefinition.fieldDefinitionsById[column.field];
                        var isRequiredBooleanFilter = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&
                            _this.rxFieldDefinitionService.isRequiredField(fieldDefinition);
                        return column.filterable && !isRequiredBooleanFilter;
                    });
                    var isCellSelected_1 = this.isCellSelected(popover);
                    lodash.forEach(filterableColumns, function (column) {
                        if (column.filterable) {
                            var filterValue = !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];
                            if (!_this.state.advancedFiltering.selectedCardValues[column.field]) {
                                _this.state.advancedFiltering.selectedCardValues[column.field] = [filterValue];
                            }
                            else if (isCellSelected_1) {
                                lodash.remove(_this.state.advancedFiltering.selectedCardValues[column.field], filterValue);
                            }
                            else {
                                _this.state.advancedFiltering.selectedCardValues[column.field].push(filterValue);
                            }
                        }
                    });
                }
            }
        };
        RecordGridComponent.prototype.trackPopoverAnchor = function (cellPopover) {
            var _a, _b;
            if (this.isCellSelected(cellPopover)) {
                var isCurrentPopoverLast = cellPopover === lodash.last(this.popovers);
                lodash.remove(this.popovers, cellPopover);
                if (isCurrentPopoverLast) {
                    cellPopover.close();
                    (_a = lodash.last(this.popovers)) === null || _a === void 0 ? void 0 : _a.open();
                }
            }
            else {
                (_b = lodash.last(this.popovers)) === null || _b === void 0 ? void 0 : _b.close();
                this.popovers.push(cellPopover);
                cellPopover.open();
            }
        };
        RecordGridComponent.prototype.updateAdaptTableFilters = function () {
            var globalFilter = this.adaptTable.filters.global;
            this.adaptTable.filters = this.areUserFiltersApplied() ? { dummyFilter: {} } : {};
            if (globalFilter) {
                this.adaptTable.filters.global = globalFilter;
            }
        };
        RecordGridComponent.prototype.updateToolbarItems = function () {
            if (this.adaptTable) {
                var toolbarComponent_1 = this.adaptTable.toolbarComponent;
                var filterSection_1 = toolbarComponent_1.toolbarContentItems.find(function (toolbarContentItem) { return toolbarContentItem.adaptToolbarItem === i1$7.ToolbarItemsByPriority.FILTER; });
                setTimeout(function () {
                    // don't update toolbar items when filter is hidden
                    if (filterSection_1 && !filterSection_1.itemContext.hidden) {
                        toolbarComponent_1.updateToolbarItems();
                    }
                });
            }
        };
        RecordGridComponent.prototype.getExportSelectedText = function (selectedItems) {
            return selectedItems.length > 1 ? this.exportSelectedRowsText : this.exportSelectedRowText;
        };
        RecordGridComponent.prototype.getFiltersRequiredMessage = function (requiredFiltersCount) {
            return requiredFiltersCount > 1
                ? this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filters-warning.message', {
                    requiredFiltersCount: requiredFiltersCount
                })
                : this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filter-warning.message');
        };
        return RecordGridComponent;
    }(i1$5.BaseViewComponent));
    RecordGridComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridComponent, deps: [{ token: i1__namespace.AdaptDeviceDetectionService }, { token: i1__namespace.AdaptModalService }, { token: i0__namespace.ChangeDetectorRef }, { token: i3__namespace.DatePipe }, { token: i3__namespace.DecimalPipe }, { token: i0__namespace.NgZone }, { token: i2__namespace$4.RxAssociationInstanceDataPageService }, { token: i1__namespace$1.RxBooleanPipe }, { token: i1__namespace$1.RxCurrentUserService }, { token: i1__namespace$4.RxExpressionEvaluatorService }, { token: i1__namespace$5.RxFieldDefinitionService }, { token: RxRecordGridConfiguratorService }, { token: i2__namespace$1.RxGuidService }, { token: i1__namespace$1.RxLogService }, { token: i1__namespace$1.RxNotificationService }, { token: i2__namespace$1.RxObjectUtilsService }, { token: i1__namespace$5.RxRecordDefinitionCacheService }, { token: i1__namespace$5.RxRecordDefinitionService }, { token: RxRecordGridAdvancedFilteringService }, { token: RxRecordGridConfigUtilsService }, { token: RxRecordGridFilterConfigService }, { token: RxRecordGridFilterService }, { token: RxRecordGridFilterHelperService }, { token: RxRecordGridSharedFilterPresetsCacheService }, { token: RxRecordGridUserPreferencesService }, { token: RxRecordGridUtilsService }, { token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceService }, { token: i1__namespace$4.RxViewActionService }, { token: i1__namespace$4.RxViewActionUtilsService }, { token: i2__namespace.TranslateService }, { token: i0__namespace.ElementRef }, { token: i2__namespace$1.RxStringService }, { token: i1__namespace$1.RxGlobalEventsService }, { token: PageComponent, optional: true }, { token: i1__namespace$2.RuntimeViewCanvasItemComponent, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordGridComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordGridComponent, selector: "rx-record-grid", inputs: { config: "config" }, outputs: { dataLoaded: "dataLoaded" }, host: { listeners: { "document:click": "onClickOutside($event)" } }, providers: [RxRecordGridUserPreferencesService], viewQueries: [{ propertyName: "adaptTable", first: true, predicate: ["adaptTable"], descendants: true, static: true }, { propertyName: "adaptAdvancedFilter", first: true, predicate: ["adaptAdvancedFilter"], descendants: true }, { propertyName: "cardLayoutRowDetailsTemplate", first: true, predicate: ["cardLayoutRowDetailsTemplate"], descendants: true, static: true }, { propertyName: "cellTemplate", first: true, predicate: ["cellTemplate"], descendants: true, static: true }, { propertyName: "filterTemplate", first: true, predicate: ["filterTemplate"], descendants: true, static: true }, { propertyName: "leftCustomSectionTemplate", first: true, predicate: ["leftCustomSectionTemplate"], descendants: true, static: true }, { propertyName: "rightCustomSectionTemplate", first: true, predicate: ["rightCustomSectionTemplate"], descendants: true, static: true }, { propertyName: "rowActionButtonsTemplate", first: true, predicate: ["rowActionButtonsTemplate"], descendants: true, static: true }, { propertyName: "visibleColumnsMenuTemplate", first: true, predicate: ["visibleColumnsMenuTemplate"], descendants: true, static: true }, { propertyName: "fieldsProvider", first: true, predicate: RxAdvancedFilteringFieldsProviderComponent, descendants: true, static: true }, { propertyName: "actionButtonComponents", predicate: ActionButtonComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-table\n  #adaptTable\n  rxCardLayout\n  scrollHeight=\"flex\"\n  (changedCardLayout)=\"onChangedCardLayout($event)\"\n  [cardLayoutWidth]=\"state.cardLayoutWidth\"\n  [cardLayoutFieldsHeaderTemplate]=\"cardLayoutFieldsHeaderTemplate\"\n  [cardLayoutFieldsDataCellTemplate]=\"cardLayoutFieldsDataCellTemplate\"\n  [cardLayoutValuesDataCellTemplate]=\"cardLayoutValuesDataCellTemplate\"\n  [cardLayoutValuesHeaderTemplate]=\"cardLayoutValuesHeaderTemplate\"\n  [cardLayoutRecordGridElementRef]=\"elementRef\"\n  [cardLayoutGetDataCellClass]=\"getDataCellClassBind\"\n  [value]=\"adaptTableConfig.data\"\n  [columns]=\"adaptTableConfig.cardLayoutColumns || adaptTableConfig.columns\"\n  [rows]=\"adaptTableConfig.rows\"\n  [first]=\"adaptTableConfig.first\"\n  [scrollable]=\"adaptTableConfig.scrollable\"\n  [sortable]=\"true\"\n  [rowExpandMode]=\"\"\n  [sortMode]=\"'multiple'\"\n  [resizableColumns]=\"true\"\n  [columnResizeMode]=\"adaptTableConfig.columnResizeMode\"\n  [selectionMode]=\"adaptTableConfig.rowSelectionMode\"\n  [selection]=\"adaptTableConfig.selectedItems\"\n  [toolbarConfig]=\"adaptTableConfig.toolbarConfig\"\n  [filterable]=\"adaptTableConfig.filterable\"\n  [filters]=\"adaptTableConfig.filters\"\n  [multiSortMeta]=\"adaptTableConfig.multiSortMeta\"\n  [dataKey]=\"adaptTableConfig.primaryKey\"\n  [bordered]=\"adaptTableConfig.bordered\"\n  [totalRecords]=\"adaptTableConfig.totalRecords\"\n  [totalRecordsInGroup]=\"state.expandGroups ? adaptTableConfig.totalRecords : 0\"\n  [lazy]=\"true\"\n  [lazyLoadOnInit]=\"false\"\n  [loading]=\"adaptTableConfig.isLoadingData\"\n  [enableInfiniteScrolling]=\"true\"\n  [expandedGroupsKeys]=\"adaptTableConfig.expandedGroupsKeys\"\n  [loadingMore]=\"adaptTableConfig.isLoadingMoreData\"\n  [suppressTooltip]=\"false\"\n  [virtualScroll]=\"adaptTableConfig.virtualScroll\"\n  [virtualRowHeight]=\"adaptTableConfig.virtualRowHeight\"\n  (selectionChange)=\"onRowsSelectionChange($event)\"\n  (onSort)=\"onSort($event)\"\n  (onLazyLoad)=\"onLazyLoad($event)\"\n  (onColReorder)=\"onColReorder($event)\"\n  [striped]=\"adaptTableConfig.striped\"\n  [texts]=\"adaptTableConfig.texts\"\n  (onColResize)=\"onColumnResize()\"\n  (export)=\"onExport($event)\"\n  [selectedFilteredRowsCount]=\"selectedFilteredRowsCount\"\n  [headerSelectionMode]=\"adaptTableHeaderSelectionMode\"\n  (onHeaderCheckboxToggle)=\"handleHeaderCheckboxToggle($event)\"\n></adapt-table>\n\n<ng-template #visibleColumnsMenuTemplate>\n  <adapt-rx-search\n    [(ngModel)]=\"columnSearchText\"\n    [placeholder]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.search.placeholder' | translate\n    \"\n    [autofocus]=\"true\"\n    (ngModelChange)=\"onSearchColumns()\"\n  >\n  </adapt-rx-search>\n  <div\n    class=\"dropdown-item visible-columns-item px-3\"\n    *ngFor=\"let column of filteredVisibleColumns; trackBy: trackByColumnField\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <adapt-rx-checkbox\n      class=\"m-0 adapt-table-toolbar__column-visibility-control\"\n      [label]=\"column.header || column.fallbackTitle\"\n      [ngModel]=\"!column.hidden\"\n      (ngModelChange)=\"onColumnVisibilityChange($event, column)\"\n    ></adapt-rx-checkbox>\n  </div>\n  <adapt-empty-state\n    *ngIf=\"!filteredVisibleColumns.length\"\n    [type]=\"'search'\"\n    [label]=\"'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.empty.label' | translate\"\n  >\n  </adapt-empty-state>\n</ng-template>\n\n<ng-template #rightCustomSectionTemplate>\n  <div class=\"px-2\" rx-id=\"selected-row-count\">\n    <ng-container *ngIf=\"isTotalRecordCountKnown\">\n      {{ getMultipleRowsSelectedText() }}\n    </ng-container>\n\n    <ng-container *ngIf=\"!isTotalRecordCountKnown\">\n      <div class=\"d-flex align-items-center\">\n        {{ getMultipleRowsSelectedTextFirstPart() }}\n        <button type=\"button\" class=\"btn btn-link p-0 mx-1\" (click)=\"loadTotalRowCount()\">\n          {{ getLoadRecordCountLinkText() }}\n        </button>\n        {{ getMultipleRowsSelectedTextSecondPart() }}\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #leftCustomSectionTemplate>\n  <div [adaptSubnav] *ngIf=\"shouldDisplayActionButtons\" class=\"pl-1 w-100 align-items-center\">\n    <div [adaptSubnavItem]=\"actionButtonTemplate\" *ngFor=\"let actionButton of actionButtons\">\n      <ng-template #actionButtonTemplate let-hidden>\n        <rx-action-button\n          class=\"m-1\"\n          [guid]=\"actionButton.guid\"\n          [config]=\"getActionButtonConfig(hidden, actionButton.config)\"\n          [runtimeViewModelApi]=\"actionButton.runtimeViewModelApi\"\n        ></rx-action-button>\n      </ng-template>\n    </div>\n\n    <div [adaptSubnavDropdown]>\n      <button type=\"button\" class=\"btn btn-secondary btn-xs d-icon-triangle_down ml-1\"></button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #filterTemplate let-context>\n  <button\n    type=\"button\"\n    class=\"btn btn-link d-icon-refresh grid-toolbar-icon ml-2 p-1\"\n    [ngClass]=\"{ 'd-block': context.hidden }\"\n    rx-id=\"refresh-button\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.refresh.label' | translate\"\n    (click)=\"onRefreshClick()\"\n  ></button>\n\n  <adapt-advanced-filter\n    #adaptAdvancedFilter\n    *ngIf=\"state.enableFiltering\"\n    class=\"ml-2\"\n    [ngClass]=\"{ 'd-inline-block': context.hidden, 'd-block': !context.hidden }\"\n    [appendDropdownToBody]=\"true\"\n    [texts]=\"state.advancedFiltering.filterTexts\"\n    [showAnchorButtonLabel]=\"!context.collapsed\"\n    [filterOptions]=\"state.advancedFiltering.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"state.advancedFiltering.selectedFilters\"\n    [savedFilters]=\"state.advancedFiltering.savedFilters\"\n    [enableSavedFilters]=\"!!guid && state.enableFilterPresets\"\n    (deleteSavedFilter)=\"onDeleteSavedFilterPreset($event)\"\n    (createNewFilter)=\"onCreateNewFilterPreset($event)\"\n    (updateSavedFilter)=\"onUpdateSavedFilterPreset($event)\"\n    [activeSavedFilter]=\"state.advancedFiltering.activeSavedFilter\"\n    (activeSavedFilterChange)=\"onActiveSavedAdvancedFilterChange($event)\"\n    (beforeActiveSavedFilterChange)=\"onBeforeActiveSavedFilterChange($event)\"\n    (editSavedFilterClick)=\"onEditSavedFilterClick($event)\"\n    [isLoading]=\"state.advancedFiltering.isLoading\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    (filterExpressionTagsChanged)=\"onAdvancedFilterExpressionTagsChanged($event)\"\n    [applyFiltersByUserAction]=\"true\"\n  ></adapt-advanced-filter>\n\n  <span\n    *ngIf=\"(context.collapsed || context.hidden) && state.advancedFiltering.toolbarTags.length\"\n    class=\"btn-link ml-1\"\n    >{{\n      'com.bmc.arsys.rx.client.view-components.record-grid.filters.number-of-active-filters.label'\n        | translate: { count: state.advancedFiltering.toolbarTags.length }\n    }}</span\n  >\n\n  <rx-filter-tags\n    class=\"ml-2\"\n    [hidden]=\"context.collapsed || context.hidden\"\n    [tags]=\"state.advancedFiltering.toolbarTags\"\n    [tagsLimit]=\"state.filterTagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n  ></rx-filter-tags>\n</ng-template>\n\n<ng-template #cellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div\n    *ngIf=\"column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    [rxCellDisplayProps]=\"column.cellDisplayProperties\"\n    [rxCellDisplayPropsBadgeElem]=\"badgeElem\"\n    [rxCellDisplayPropsDataItem]=\"dataItem\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span #badgeElem (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n\n  <div\n    *ngIf=\"!column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #defaultCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container\n    *ngIf=\"\n      (!column.clickable ||\n        (column.clickableWithHref &&\n          !dataItem[column.field + '$ROUTER_LINK$'] &&\n          !dataItem[column.field + '$LAUNCH_URL$'])) &&\n      !column.isDownloadableAttachment\n    \"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\"> {{ getCellValue(dataItem, column) }}</span>\n  </ng-container>\n\n  <a\n    tabindex=\"0\"\n    class=\"attachment-link\"\n    *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n    (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n    (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    tabindex=\"0\"\n    class=\"no-href-link\"\n    *ngIf=\"column.clickable && !column.clickableWithHref\"\n    (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n    (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n    [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n    [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n    [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n    [target]=\"dataItem[column.field + '$TARGET$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n</ng-template>\n\n<ng-template #cardLayoutFieldsHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutValuesHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutFieldsDataCellTemplate>\n  <div class=\"rx-card-layout-cell\" (click)=\"onCellClick($event)\">\n    <div\n      class=\"rx-card-layout-cell-item\"\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      [attr.data-testid]=\"column.testId + '-name'\"\n    >\n      {{ column.header || column.fallbackTitle }}:\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutValuesDataCellTemplate let-dataItem=\"dataItem\">\n  <div class=\"rx-card-layout-cell-values rx-card-layout-cell\">\n    <div\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      class=\"rx-card-layout-cell-item\"\n      [attr.data-testid]=\"column.testId + '-value'\"\n    >\n      <div *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: dataItem }\"\n        ></ng-container>\n      </div>\n      <div\n        *ngIf=\"\n          (!column.clickable ||\n            (column.clickableWithHref &&\n              !dataItem[column.field + '$ROUTER_LINK$'] &&\n              !dataItem[column.field + '$LAUNCH_URL$'])) &&\n          !column.isDownloadableAttachment &&\n          !column.isRowActionsColumn\n        \"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </div>\n      <a\n        *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n        tabindex=\"0\"\n        class=\"attachment-link\"\n        (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n        (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        tabindex=\"0\"\n        *ngIf=\"column.clickable && !column.clickableWithHref\"\n        class=\"no-href-link\"\n        (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n        (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n        [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n        [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n        [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n        [target]=\"dataItem[column.field + '$TARGET$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n    </div>\n  </div>\n\n  <button\n    *ngIf=\"isFilterBySelectionButtonVisible\"\n    adapt-button\n    rx-id=\"filter-by-selection-button\"\n    class=\"btn btn-link d-icon-filter_adapt filter-by-selection-icon\"\n    (click)=\"onFilterBySelection($event, visibleColumns, dataItem)\"\n  ></button>\n\n  <button\n    class=\"btn btn-link d-icon-pop_up record-details-icon\"\n    rx-id=\"show-record-details-button\"\n    [attr.aria-label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.button.label' | translate\n    \"\n    (click)=\"openRowDetails(adaptTableConfig.columns, dataItem)\"\n  ></button>\n</ng-template>\n\n<ng-template #cardLayoutRowDetailsTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-details\">\n    <div class=\"row mb-3\" *ngFor=\"let column of getData().columns\">\n      <div class=\"col-sm-4 font-weight-bold rx-text-break\">{{ column.header || column.fallbackTitle }}:</div>\n\n      <div class=\"col-sm-8 rx-text-break\" *ngIf=\"!column.isDownloadableAttachment && !column.isRowActionsColumn\">\n        {{ getCellValue(getData().rowDataItem, column) }}\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isDownloadableAttachment\">\n        <a\n          tabindex=\"0\"\n          class=\"row-details-attachment-link\"\n          (click)=\"downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column))\"\n          (keydown)=\"\n            downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column), $event)\n          \"\n        >\n          {{ getCellValue(getData().rowDataItem, column) }}</a\n        >\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: getData().rowDataItem }\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #filterButton>\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    size=\"small\"\n    class=\"d-icon-filter_adapt p-0\"\n    (click)=\"applyFilterBySelection()\"\n  ></button>\n</ng-template>\n\n<ng-template #rowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div class=\"dropdown dropdown-kabob\" adaptDropdown appendToBody=\"true\" (onOpen)=\"onRowActionOpen(dataItem)\">\n    <button id=\"row-actions-dropdown-button\" class=\"dropdown-kabob-btn\" adaptDropdownToggle></button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"row-actions-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"action-button-list\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n\n      <div class=\"empty-list-label pl-3\">\n        {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.no-actions-available.label' | translate }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutRowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div\n    class=\"dropdown mb-1\"\n    adaptDropdown\n    appendToBody=\"true\"\n    (click)=\"$event.stopPropagation()\"\n    (onOpen)=\"onRowActionOpen(dataItem)\"\n  >\n    <button id=\"card-layout-dropdown-button\" class=\"btn btn-secondary btn-xs\" size=\"xtra-small\" adaptDropdownToggle>\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.dropdown.label' | translate }}\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"card-layout-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"row-actions-dropdown-item\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n    </div>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block;height:420px}:host ::ng-deep .rx-table-card-layout .adapt-selection-cell{vertical-align:middle!important}:host ::ng-deep .rx-table-card-layout .c-header-name{width:100%}:host ::ng-deep .rx-card-layout-data-cell{position:relative}:host ::ng-deep .rx-card-layout-cell-item{padding:0;line-height:32px;min-height:32px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}:host ::ng-deep .rx-card-layout-cell-values>div:first-child .rx-card-layout-cell-item{padding-right:20px}:host ::ng-deep .rx-card-layout-cell-icon,:host ::ng-deep .filter-by-selection-icon,:host ::ng-deep .record-details-icon{top:2px;padding:2px;position:absolute}:host ::ng-deep .record-details-icon{right:7px}:host ::ng-deep .filter-by-selection-icon{right:25px}:host ::ng-deep adapt-table td.at-data-cell{padding:0;-moz-user-select:text}:host ::ng-deep adapt-table td.rx-cell-selection-mode:focus{outline:none!important}:host ::ng-deep adapt-table adapt-table-toolbar rx-action-button{margin:5px}:host ::ng-deep adapt-table adapt-table-toolbar rx-action-button .btn-link{padding-right:0;padding-left:0}:host ::ng-deep adapt-table .at-wrap-cell-text .at-data-cell{word-break:break-word}:host ::ng-deep .rx-row-action-cell .dropdown{margin-top:3px}.rx-custom-cell{min-height:36px;padding:.5rem 13px}.rx-custom-cell .rx-cell-wrap{white-space:normal;text-overflow:clip;word-break:break-word}.rx-selected-custom-cell{outline:1px solid #00a79d!important;border-color:transparent!important;outline-offset:-1px}.rx-card-layout-cell{padding:3px 10px}:host ::ng-deep .dropdown-menu rx-action-button button.btn{width:100%;text-align:left;background:none;border:0;font-size:.8125rem}:host ::ng-deep .dropdown-menu rx-action-button button.btn:before{width:18px}:host ::ng-deep .dropdown-menu rx-action-button button.btn>span{margin-left:18px}:host ::ng-deep .dropdown-menu rx-action-button button.btn[class^=d-icon-left]>span{margin-left:0!important}.grid-toolbar-icon{font-size:16px}.no-href-link{cursor:pointer;text-decoration:none}.attachment-link,.row-details-attachment-link{cursor:pointer}::ng-deep .table-filtering.popover.popover-mobile{height:auto;display:block;top:auto!important;bottom:0;width:100vw}::ng-deep .table-filtering.popover.popover-mobile .a-popover-wrap{margin:0}::ng-deep .table-filtering.popover.popover-mobile .close{display:none}::ng-deep .visible-columns-dropdown{padding-top:0;width:14rem}.action-button-list:not(:empty)~.empty-list-label{display:none}.empty-list-label{color:#959899}.visible-columns-item{white-space:normal;word-break:break-word}\n"], components: [{ type: i1__namespace$7.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i1__namespace.AdaptRxSearchComponent, selector: "adapt-rx-search", inputs: ["mode", "autocomplete", "placeholder", "size", "searchButton", "searchButtonText", "clearButtonText", "debounceTime", "ariaControlsPopupId", "ariaActiveDescendant", "initialAlign"], outputs: ["editModeChange"] }, { type: i1__namespace.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace.AdaptSubnavComponent, selector: "adapt-subnav, [adaptSubnav]", inputs: ["adaptSubnav", "gutter", "defaultCssClass"], outputs: ["visibilityChanged"] }, { type: i1__namespace.AdaptSubnavItemComponent, selector: "adapt-subnav-item, [adaptSubnavItem]", inputs: ["adaptSubnavItem", "defaultCssClass", "preventHiding", "priority"] }, { type: ActionButtonComponent, selector: "rx-action-button", inputs: ["guid", "config", "runtimeViewModelApi"] }, { type: i1__namespace.AdaptSubnavDropdownComponent, selector: "adapt-subnav-dropdown, [adaptSubnavDropdown]", inputs: ["adaptSubnavDropdown", "defaultCssClass", "autoClose"] }, { type: i1__namespace.AdaptAdvancedFilterComponent, selector: "adapt-advanced-filter", inputs: ["filterOptions", "savedFilters", "enableDefaultSavedFilter", "defaultSavedFilterId", "busyConfig", "activeSavedFilter", "disableExpressionEditing", "showAnchorButtonLabel", "getCustomExpressionTagFieldModel", "enableSavedFilters", "applyFiltersByUserAction", "canCloseDropdownResolver", "showTabToolbar", "disabledTabResolver", "disabledInputResolver", "showSelectedFiltersCount", "selectedFiltersIndicationStyle", "filterOptionsCustomAreaTemplate", "showTags", "anchorDisabled", "fullWidthEdit", "translateFilterEditingTitleXPixels", "selectedFilters", "isLoading"], outputs: ["selectedFiltersChange", "filterSelectionChange", "deleteSavedFilter", "createNewFilter", "updateSavedFilter", "beforeActiveSavedFilterChange", "activeSavedFilterChange", "removeTag", "filtersCleared", "saveNewFilterClick", "filtersSelectionCanceled", "editSavedFilterClick", "markDefaultSavedFilterClick", "editingSavedFilterCanceled", "filterExpressionTagsChanged"] }, { type: FilterTagsComponent, selector: "rx-filter-tags", inputs: ["tags", "isDisabled", "tagsLimit", "restTagsDropdownPlacement"], outputs: ["removeTag"] }, { type: CardLayoutCellHeaderComponent, selector: "rx-card-layout-cell-header", inputs: ["title", "columns", "adaptTable", "openDialog"], outputs: ["sort"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: RxAdvancedFilteringFieldsProviderComponent, selector: "rx-advanced-filtering-fields-provider", inputs: ["namedFilterOptionsGetter"] }], directives: [{ type: GridCardLayoutDirective, selector: "[rxCardLayout]", inputs: ["cardLayoutFieldsHeaderTemplate", "cardLayoutValuesHeaderTemplate", "cardLayoutFieldsDataCellTemplate", "cardLayoutValuesDataCellTemplate", "cardLayoutGetDataCellClass", "cardLayoutRecordGridElementRef", "cardLayoutWidth"], outputs: ["changedCardLayout"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: CellDisplayPropertiesDirective, selector: "[rxCellDisplayProps]", inputs: ["rxCellDisplayProps", "rxCellDisplayPropsBadgeElem", "rxCellDisplayPropsDataItem"] }, { type: i1__namespace.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i3__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i28__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-grid',
                        templateUrl: './record-grid.component.html',
                        styleUrls: ['record-grid.component.scss'],
                        providers: [RxRecordGridUserPreferencesService]
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.AdaptDeviceDetectionService }, { type: i1__namespace.AdaptModalService }, { type: i0__namespace.ChangeDetectorRef }, { type: i3__namespace.DatePipe }, { type: i3__namespace.DecimalPipe }, { type: i0__namespace.NgZone }, { type: i2__namespace$4.RxAssociationInstanceDataPageService }, { type: i1__namespace$1.RxBooleanPipe }, { type: i1__namespace$1.RxCurrentUserService }, { type: i1__namespace$4.RxExpressionEvaluatorService }, { type: i1__namespace$5.RxFieldDefinitionService }, { type: RxRecordGridConfiguratorService }, { type: i2__namespace$1.RxGuidService }, { type: i1__namespace$1.RxLogService }, { type: i1__namespace$1.RxNotificationService }, { type: i2__namespace$1.RxObjectUtilsService }, { type: i1__namespace$5.RxRecordDefinitionCacheService }, { type: i1__namespace$5.RxRecordDefinitionService }, { type: RxRecordGridAdvancedFilteringService }, { type: RxRecordGridConfigUtilsService }, { type: RxRecordGridFilterConfigService }, { type: RxRecordGridFilterService }, { type: RxRecordGridFilterHelperService }, { type: RxRecordGridSharedFilterPresetsCacheService }, { type: RxRecordGridUserPreferencesService }, { type: RxRecordGridUtilsService }, { type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceService }, { type: i1__namespace$4.RxViewActionService }, { type: i1__namespace$4.RxViewActionUtilsService }, { type: i2__namespace.TranslateService }, { type: i0__namespace.ElementRef }, { type: i2__namespace$1.RxStringService }, { type: i1__namespace$1.RxGlobalEventsService }, { type: PageComponent, decorators: [{
                            type: i0.Optional
                        }] }, { type: i1__namespace$2.RuntimeViewCanvasItemComponent, decorators: [{
                            type: i0.Optional
                        }] }];
        }, propDecorators: { config: [{
                    type: i0.Input
                }], dataLoaded: [{
                    type: i0.Output
                }], adaptTable: [{
                    type: i0.ViewChild,
                    args: ['adaptTable', { static: true }]
                }], adaptAdvancedFilter: [{
                    type: i0.ViewChild,
                    args: ['adaptAdvancedFilter']
                }], cardLayoutRowDetailsTemplate: [{
                    type: i0.ViewChild,
                    args: ['cardLayoutRowDetailsTemplate', { static: true }]
                }], cellTemplate: [{
                    type: i0.ViewChild,
                    args: ['cellTemplate', { static: true }]
                }], filterTemplate: [{
                    type: i0.ViewChild,
                    args: ['filterTemplate', { static: true }]
                }], leftCustomSectionTemplate: [{
                    type: i0.ViewChild,
                    args: ['leftCustomSectionTemplate', { static: true }]
                }], rightCustomSectionTemplate: [{
                    type: i0.ViewChild,
                    args: ['rightCustomSectionTemplate', { static: true }]
                }], rowActionButtonsTemplate: [{
                    type: i0.ViewChild,
                    args: ['rowActionButtonsTemplate', { static: true }]
                }], visibleColumnsMenuTemplate: [{
                    type: i0.ViewChild,
                    args: ['visibleColumnsMenuTemplate', { static: true }]
                }], fieldsProvider: [{
                    type: i0.ViewChild,
                    args: [RxAdvancedFilteringFieldsProviderComponent, { static: true }]
                }], actionButtonComponents: [{
                    type: i0.ViewChildren,
                    args: [ActionButtonComponent]
                }], onClickOutside: [{
                    type: i0.HostListener,
                    args: ['document:click', ['$event']]
                }] } });

    var RxRecordGridDefinitionAdapterService = /** @class */ (function () {
        function RxRecordGridDefinitionAdapterService(viewDefinitionParserService, rxJsonParserService, rxRecordGridConfigUtilsService) {
            this.viewDefinitionParserService = viewDefinitionParserService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxRecordGridConfigUtilsService = rxRecordGridConfigUtilsService;
        }
        RxRecordGridDefinitionAdapterService.prototype.adaptDefinition = function (recordGridContainerViewComponentDefinition, viewDefinition) {
            var _this = this;
            var cellDisplayPropertiesList = recordGridContainerViewComponentDefinition.componentDefinitions
                .filter(function (_e) {
                var type = _e.type;
                return type === RX_RECORD_GRID.components.column;
            })
                .map(function (_e) {
                var propertiesByName = _e.propertiesByName;
                return propertiesByName.cellDisplayProperties;
            })
                .filter(Boolean);
            this.viewDefinitionParserService
                .getComponents(recordGridContainerViewComponentDefinition)
                .map(function (componentDefinition) { return componentDefinition.componentDefinition; })
                .forEach(function (componentDefinition) {
                var _a, _b, _c, _d;
                switch (componentDefinition.type) {
                    case RX_RECORD_GRID.type: {
                        componentDefinition.propertiesByName.enableFilterPresets =
                            (_a = componentDefinition.propertiesByName.enableFilterPresets) !== null && _a !== void 0 ? _a : 'true';
                        componentDefinition.propertiesByName.requiredFilters =
                            (_b = componentDefinition.propertiesByName.requiredFilters) !== null && _b !== void 0 ? _b : (componentDefinition.propertiesByName['requireFiltering'] === 'true' ? 1 : 0);
                        var layout = _this.rxJsonParserService.tryParseJson(componentDefinition.layout);
                        var actionButtons = lodash.filter(componentDefinition.componentDefinitions, {
                            type: i1$1.RxViewComponentType.ActionButton
                        });
                        var rowActionButtons = _this.getActionButtonsForOutlet(layout, RX_RECORD_GRID.rowActionsOutletName, actionButtons);
                        rowActionButtons.forEach(function (action) {
                            action.propertiesByName = Object.assign(Object.assign({}, action.propertiesByName), { cls: 'dropdown-item', styles: 'p-0' });
                        });
                        lodash.without.apply(void 0, __spreadArray([actionButtons], __read(rowActionButtons))).forEach(function (actionButton) {
                            if ([exports.ActionButtonStyle.Primary, exports.ActionButtonStyle.Secondary].includes(actionButton.propertiesByName.style)) {
                                actionButton.propertiesByName.size = exports.ActionButtonSize.Small;
                            }
                        });
                        break;
                    }
                    case RX_RECORD_GRID.components.column: {
                        var isReferenced = null;
                        if (!_this.rxRecordGridConfigUtilsService.getBooleanValue(recordGridContainerViewComponentDefinition.propertiesByName.getDataForHiddenColumns)) {
                            var recordGridGuid_1 = recordGridContainerViewComponentDefinition.guid;
                            var columnFieldId_1 = componentDefinition.propertiesByName.fieldId;
                            var isReferencedInExpression = viewDefinition.viewComponentExpressions.some(function (expression) { return expression.includes("${view.components." + recordGridGuid_1 + ".firstSelectedRow." + columnFieldId_1) ||
                                expression.includes("${view.components." + recordGridGuid_1 + ".clickableRow." + columnFieldId_1); });
                            var isReferencedInCellDisplayProperties = cellDisplayPropertiesList.some(function (cellDisplayProperties) { return cellDisplayProperties.includes("${view.components.grid.clickableRow." + columnFieldId_1); });
                            isReferenced = isReferencedInExpression || isReferencedInCellDisplayProperties;
                        }
                        var adaptedProperties = {
                            actions: [],
                            clickable: false,
                            guid: componentDefinition.guid,
                            wrapText: (_c = componentDefinition.propertiesByName.wrapText) !== null && _c !== void 0 ? _c : false,
                            referenced: isReferenced,
                            typeaheadKeystrokeCount: (_d = componentDefinition.propertiesByName.typeaheadKeystrokeCount) !== null && _d !== void 0 ? _d : RX_RECORD_GRID.defaultTypeaheadKeystrokeCount
                        };
                        var actions = lodash.filter(componentDefinition.componentDefinitions, {
                            type: 'rx-action'
                        }).map(function (action) { return action.propertiesByName; });
                        if (actions.length) {
                            adaptedProperties.clickable = true;
                            adaptedProperties.actions = actions;
                        }
                        Object.assign(componentDefinition.propertiesByName, adaptedProperties);
                        break;
                    }
                    case RX_RECORD_GRID.components.filterPreset:
                    case RX_RECORD_GRID.components.filter: {
                        Object.assign(componentDefinition.propertiesByName, {
                            guid: componentDefinition.guid
                        });
                        break;
                    }
                }
            });
        };
        RxRecordGridDefinitionAdapterService.prototype.getActionButtonsForOutlet = function (layout, outletName, actionButtons) {
            var actionButtonsGuids = lodash.chain(layout.outlets)
                .filter({
                name: outletName
            })
                .head()
                .get('columns[0].children', [])
                .value();
            return lodash.filter(actionButtons, function (actionButton) { return actionButtonsGuids.includes(actionButton.guid); });
        };
        return RxRecordGridDefinitionAdapterService;
    }());
    RxRecordGridDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }, { token: i2__namespace$1.RxJsonParserService }, { token: RxRecordGridConfigUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }, { type: i2__namespace$1.RxJsonParserService }, { type: RxRecordGridConfigUtilsService }]; } });

    // @deprecated
    var RxRecordGridQueryExpressionEvaluatorService = /** @class */ (function (_super) {
        __extends(RxRecordGridQueryExpressionEvaluatorService, _super);
        function RxRecordGridQueryExpressionEvaluatorService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RxRecordGridQueryExpressionEvaluatorService;
    }(i1$1.RxRecordQueryExpressionEvaluatorService));
    RxRecordGridQueryExpressionEvaluatorService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridQueryExpressionEvaluatorService, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordGridQueryExpressionEvaluatorService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridQueryExpressionEvaluatorService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordGridQueryExpressionEvaluatorService, decorators: [{
                type: i0.Injectable
            }] });

    var RecordGridModule = /** @class */ (function () {
        function RecordGridModule(rxRecordGridDefinitionAdapterService, rxDefinitionAdapterRegistryService) {
            this.rxRecordGridDefinitionAdapterService = rxRecordGridDefinitionAdapterService;
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(RX_RECORD_GRID.type, this.rxRecordGridDefinitionAdapterService);
        }
        return RecordGridModule;
    }());
    RecordGridModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridModule, deps: [{ token: RxRecordGridDefinitionAdapterService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridModule, declarations: [RecordGridComponent,
            GridCardLayoutDirective,
            CardLayoutCellHeaderComponent,
            RxFilterByCardSelectionDialogComponent,
            CellDisplayPropertiesDirective], imports: [i1$2.RxDefinitionModule,
            i3.CommonModule,
            i1$5.RuntimeViewCanvasModule, i1__namespace$7.AdaptTableModule, obsolete.AdaptSelectModule,
            i2$4.FormsModule,
            i1.AdaptRxCheckboxModule,
            i1.AdaptRxSelectModule, i1__namespace.AdaptAlertModule, i1__namespace.AdaptPopoverModule, i1.AdaptAccordionModule,
            i1.AdaptButtonModule,
            i1.AdaptDropdownModule,
            i2$1.TranslateModule,
            ActionButtonModule,
            i1.AdaptSubnavModule,
            i1.AdaptAdvancedFilteringModule,
            RecordGridCommonModule,
            i28.RouterModule,
            RxAdvancedFilteringFieldsProviderModule,
            i1.AdaptRxSearchModule,
            i1.AdaptEmptyStateModule], exports: [RecordGridComponent] });
    RecordGridModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridModule, providers: [
            i3.DatePipe,
            i3.DecimalPipe,
            i1$2.RxBooleanPipe,
            RxRecordGridConfiguratorService,
            RxRecordGridConfigUtilsService,
            RxRecordGridDefinitionAdapterService,
            RxRecordGridFilterService,
            RxRecordGridUtilsService,
            RxRecordGridFilterConfigService,
            RxRecordGridQueryExpressionEvaluatorService,
            RxRecordGridSharedFilterPresetsCacheService,
            RxRecordGridAdvancedFilteringService
        ], imports: [[
                i1$2.RxDefinitionModule,
                i3.CommonModule,
                i1$5.RuntimeViewCanvasModule,
                i1$7.AdaptTableModule.forRoot(),
                obsolete.AdaptSelectModule,
                i2$4.FormsModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptRxSelectModule,
                i1.AdaptAlertModule.forRoot(),
                i1.AdaptPopoverModule.forRoot(),
                i1.AdaptAccordionModule,
                i1.AdaptButtonModule,
                i1.AdaptDropdownModule,
                i2$1.TranslateModule,
                ActionButtonModule,
                i1.AdaptSubnavModule,
                i1.AdaptAdvancedFilteringModule,
                RecordGridCommonModule,
                i28.RouterModule,
                RxAdvancedFilteringFieldsProviderModule,
                i1.AdaptRxSearchModule,
                i1.AdaptEmptyStateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$2.RxDefinitionModule,
                            i3.CommonModule,
                            i1$5.RuntimeViewCanvasModule,
                            i1$7.AdaptTableModule.forRoot(),
                            obsolete.AdaptSelectModule,
                            i2$4.FormsModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptRxSelectModule,
                            i1.AdaptAlertModule.forRoot(),
                            i1.AdaptPopoverModule.forRoot(),
                            i1.AdaptAccordionModule,
                            i1.AdaptButtonModule,
                            i1.AdaptDropdownModule,
                            i2$1.TranslateModule,
                            ActionButtonModule,
                            i1.AdaptSubnavModule,
                            i1.AdaptAdvancedFilteringModule,
                            RecordGridCommonModule,
                            i28.RouterModule,
                            RxAdvancedFilteringFieldsProviderModule,
                            i1.AdaptRxSearchModule,
                            i1.AdaptEmptyStateModule
                        ],
                        providers: [
                            i3.DatePipe,
                            i3.DecimalPipe,
                            i1$2.RxBooleanPipe,
                            RxRecordGridConfiguratorService,
                            RxRecordGridConfigUtilsService,
                            RxRecordGridDefinitionAdapterService,
                            RxRecordGridFilterService,
                            RxRecordGridUtilsService,
                            RxRecordGridFilterConfigService,
                            RxRecordGridQueryExpressionEvaluatorService,
                            RxRecordGridSharedFilterPresetsCacheService,
                            RxRecordGridAdvancedFilteringService
                        ],
                        exports: [RecordGridComponent],
                        declarations: [
                            RecordGridComponent,
                            GridCardLayoutDirective,
                            CardLayoutCellHeaderComponent,
                            RxFilterByCardSelectionDialogComponent,
                            CellDisplayPropertiesDirective
                        ],
                        entryComponents: [RecordGridComponent]
                    }]
            }], ctorParameters: function () { return [{ type: RxRecordGridDefinitionAdapterService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }]; } });

    var RichTextComponent = /** @class */ (function (_super) {
        __extends(RichTextComponent, _super);
        function RichTextComponent(sanitizer, rxCkEditorConfiguratorService) {
            var _this = _super.call(this) || this;
            _this.sanitizer = sanitizer;
            _this.rxCkEditorConfiguratorService = rxCkEditorConfiguratorService;
            _this.filter = new CKEDITOR.filter('');
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            _this.filter.allow(_this.rxCkEditorConfiguratorService.getContentRules());
            return _this;
        }
        RichTextComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                _this.isHidden = Boolean(config.hidden);
                _this.html = _this.updateHtml(config.html);
            });
        };
        RichTextComponent.prototype.updateHtml = function (value) {
            if (value) {
                value = value.replace(/\n/g, '<br>');
                var fragment = CKEDITOR.htmlParser.fragment.fromHtml(value);
                var writer = new CKEDITOR.htmlParser.basicWriter();
                this.filter.applyTo(fragment);
                fragment.writeHtml(writer);
                value = writer.getHtml(true);
            }
            else {
                value = '';
            }
            return this.sanitizer.bypassSecurityTrustHtml(value);
        };
        RichTextComponent.prototype.setProperty = function (propertyPath, value) {
            if (propertyPath === 'hidden') {
                this.isHidden = value;
                this.notifyPropertyChanged(propertyPath, this.isHidden);
            }
            else {
                return rxjs.throwError("Rich text: property " + propertyPath + " is not settable.");
            }
        };
        return RichTextComponent;
    }(i1$5.BaseViewComponent));
    RichTextComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextComponent, deps: [{ token: i1__namespace$8.DomSanitizer }, { token: i1__namespace$4.RxCkEditorConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RichTextComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RichTextComponent, selector: "rx-rich-text", inputs: { config: "config" }, usesInheritance: true, ngImport: i0__namespace, template: "\n    <div\n      class=\"text-container focusable\"\n      [hidden]=\"isHidden\"\n      tabindex=\"0\"\n      [innerHTML]=\"html\"\n      [attr.aria-hidden]=\"isHidden\"\n    ></div>\n  ", isInline: true, styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.text-container{white-space:pre-wrap;white-space:-moz-pre-wrap;white-space:-pre-wrap;white-space:-o-pre-wrap;word-wrap:break-word}\n"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rich-text',
                        template: "\n    <div\n      class=\"text-container focusable\"\n      [hidden]=\"isHidden\"\n      tabindex=\"0\"\n      [innerHTML]=\"html\"\n      [attr.aria-hidden]=\"isHidden\"\n    ></div>\n  ",
                        styleUrls: ['./rich-text.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$8.DomSanitizer }, { type: i1__namespace$4.RxCkEditorConfiguratorService }]; }, propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var RxRichTextExpressionEvaluatorService = /** @class */ (function () {
        function RxRichTextExpressionEvaluatorService(rxDefaultExpressionEvaluatorService) {
            this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;
        }
        RxRichTextExpressionEvaluatorService.prototype.evaluate = function (expression, data) {
            var _this = this;
            var tempElement = document.createElement('div');
            tempElement.innerHTML = expression;
            tempElement.querySelectorAll("span[" + i1$1.RX_RICH_TEXT.expressionAttributeName + "]").forEach(function (span) {
                var evaluatedExpression = _this.rxDefaultExpressionEvaluatorService.evaluate(span.getAttribute(i1$1.RX_RICH_TEXT.expressionAttributeName), data);
                var textNode = document.createTextNode(lodash.isNil(evaluatedExpression) ? '' : evaluatedExpression);
                span.parentElement.replaceChild(textNode, span);
            });
            return tempElement.innerHTML;
        };
        return RxRichTextExpressionEvaluatorService;
    }());
    RxRichTextExpressionEvaluatorService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRichTextExpressionEvaluatorService, deps: [{ token: i1__namespace$4.RxDefaultExpressionEvaluatorService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRichTextExpressionEvaluatorService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRichTextExpressionEvaluatorService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRichTextExpressionEvaluatorService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxDefaultExpressionEvaluatorService }]; } });

    var RichTextDefinitionAdapterService = /** @class */ (function () {
        function RichTextDefinitionAdapterService(rxCkEditorConfiguratorService) {
            this.rxCkEditorConfiguratorService = rxCkEditorConfiguratorService;
            this.filter = new CKEDITOR.filter('');
            this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());
        }
        RichTextDefinitionAdapterService.prototype.adaptDefinition = function (definition) {
            if (definition.propertiesByName.html) {
                var initialValue = CKEDITOR.dtd.$removeEmpty['span'];
                // Allow empty span tags, used for holding the expressions in rx-expression attributes,
                // to be parsed by CKEDITOR.htmlParser.fragment.fromHtml
                // https://stackoverflow.com/questions/18250404/ckeditor-strips-i-tag
                // @ts-ignore
                CKEDITOR.dtd.$removeEmpty['span'] = 0;
                var fragment = CKEDITOR.htmlParser.fragment.fromHtml(definition.propertiesByName.html);
                var writer = new CKEDITOR.htmlParser.basicWriter();
                // sanitize HTML
                this.filter.applyTo(fragment);
                fragment.writeHtml(writer);
                definition.propertiesByName.html = writer.getHtml(true);
                CKEDITOR.dtd.$removeEmpty['span'] = initialValue;
            }
        };
        return RichTextDefinitionAdapterService;
    }());
    RichTextDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxCkEditorConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RichTextDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxCkEditorConfiguratorService }]; } });

    var RichTextModule = /** @class */ (function () {
        function RichTextModule(rxDefinitionAdapterRegistryService, richTextDefinitionAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.richTextDefinitionAdapterService = richTextDefinitionAdapterService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.RichText, this.richTextDefinitionAdapterService);
        }
        return RichTextModule;
    }());
    RichTextModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: RichTextDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextModule, declarations: [RichTextComponent], imports: [i3.CommonModule, i2$7.CKEditorModule], exports: [RichTextComponent] });
    RichTextModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextModule, providers: [RxRichTextExpressionEvaluatorService], imports: [[i3.CommonModule, i2$7.CKEditorModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RichTextComponent],
                        imports: [i3.CommonModule, i2$7.CKEditorModule],
                        exports: [RichTextComponent],
                        entryComponents: [RichTextComponent],
                        providers: [RxRichTextExpressionEvaluatorService]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: RichTextDefinitionAdapterService }]; } });

    var RX_CKEDITOR_CONFIG = {
        title: false,
        skin: 'rich-text,skins/rich-text/',
        toolbar: [
            [
                'Bold',
                'Italic',
                'Strike',
                'Underline',
                '-',
                'Link',
                'Unlink',
                '-',
                'NumberedList',
                'BulletedList',
                'Outdent',
                'Indent',
                '-',
                'JustifyLeft',
                'JustifyCenter',
                'JustifyRight',
                '-',
                'ExpressionEditor'
            ],
            '/',
            ['Format', 'Styles', 'Font', 'FontSize', 'TextColor']
        ],
        stylesSet: [
            {
                name: 'Italic Title',
                element: 'h2',
                attributes: {
                    class: 'italic-title'
                }
            },
            {
                name: 'Subtitle',
                element: 'h3',
                attributes: {
                    class: 'subtitle'
                }
            },
            {
                name: 'Special Container',
                element: 'div',
                attributes: {
                    class: 'special-containers'
                }
            },
            {
                name: 'Marker',
                element: 'span',
                attributes: {
                    class: 'marker'
                }
            },
            {
                name: 'Small',
                element: 'small'
            },
            {
                name: 'Computer Code',
                element: 'code'
            },
            {
                name: 'Keyboard Phrase',
                element: 'kbd'
            },
            {
                name: 'Sample Text',
                element: 'samp'
            },
            {
                name: 'Variable',
                element: 'var'
            },
            {
                name: 'Deleted Text',
                element: 'del'
            },
            {
                name: 'Inserted Text',
                element: 'ins'
            },
            {
                name: 'Cited Work',
                element: 'cite'
            },
            {
                name: 'Inline Quotation',
                element: 'q'
            },
            {
                name: 'Compact Table',
                element: 'table',
                attributes: {
                    cellpadding: '5',
                    cellspacing: '0',
                    class: 'compact-table'
                }
            },
            {
                name: 'Borderless Table',
                element: 'table',
                attributes: {
                    class: 'borderless-table'
                }
            },
            {
                name: 'Square Bulleted List',
                element: 'ul',
                attributes: {
                    class: 'square-bulleted-list'
                }
            }
        ],
        format_tags: 'p;h1;h2;h3;pre',
        extraPlugins: 'expression-editor, colordialog',
        extraAllowedContent: 'span [rx-expression, contenteditable, title] (rx-expression)'
    };

    var RichTextDesignComponent = /** @class */ (function () {
        function RichTextDesignComponent(rxExpressionEditorService, rxTreeService, rxExpressionParserService, renderer2, document, ngZone) {
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxTreeService = rxTreeService;
            this.rxExpressionParserService = rxExpressionParserService;
            this.renderer2 = renderer2;
            this.document = document;
            this.ngZone = ngZone;
            this.type = "inline" /* INLINE */;
            this.ckConfig = RX_CKEDITOR_CONFIG;
            this.formControl = new i2$4.FormControl(null);
            this.destroyed$ = new rxjs.ReplaySubject(1);
            // remove inner span with expression title and content value, e.g.:
            // "<p>text<span contenteditable="false" rx-expression="${foo}"><span title="Foo">Foo</span></span></p>" ->
            // "<p>text<span contenteditable="false" rx-expression="${foo}"></span></p>"
            this.removeExpressionLabels = this.setExpressionLabelHtml.bind(this, null);
            // set inner span with expression title and content value, e.g.:
            // "<p>text<span contenteditable="false" rx-expression="${foo}"></span></p>" ->
            // "<p>text<span contenteditable="false" rx-expression="${foo}"><span title="Foo">Foo</span></span></p>"
            this.addExpressionLabels = this.setExpressionLabelHtml.bind(this, this.getExpressionWithLabels.bind(this));
        }
        RichTextDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            var dataDictionary$ = this.model.expressionConfigurator.getDataDictionary();
            dataDictionary$
                .pipe(operators.withLatestFrom(this.model.html$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), dataDictionary = _b[0], html = _b[1];
                _this.flatDataDictionary = _this.rxTreeService.flatten({
                    children: dataDictionary
                });
                _this.formControl.setValue(_this.addExpressionLabels(html));
            });
            this.formControl.valueChanges
                .pipe(operators.map(function (value) { return _this.removeExpressionLabels(value); }), operators.distinctUntilChanged(), operators.skip(1), operators.takeUntil(this.destroyed$))
                .subscribe(function (html) {
                _this.model.updateComponentProperties({ html: html });
            });
            // set initial value
            this.model.html$.pipe(operators.take(1), operators.takeUntil(this.destroyed$)).subscribe(function (html) {
                _this.formControl.setValue(_this.addExpressionLabels(html));
            });
        };
        RichTextDesignComponent.prototype.onEditorReady = function (event) {
            var _this = this;
            if (this.isReadOnly) {
                this.ckConfig.toolbar = [];
                this.document.getElementById(event.editor.id + "_top").style.display = 'none';
            }
            this.ckEditor.instance.on('openExpressionEditor', function (evt) {
                var initialValue = evt.data && evt.data.getAttribute(i1$1.RX_RICH_TEXT.expressionAttributeName);
                _this.ngZone.runTask(function () { return _this.rxExpressionEditorService
                    .openEditor({
                    property: {
                        path: 'html',
                        value: initialValue,
                        label: 'Rich Text'
                    },
                    expressionConfigurator: _this.model.expressionConfigurator
                })
                    .pipe(operators.takeUntil(_this.destroyed$))
                    .subscribe({
                    next: function (_a) {
                        var path = _a.path, value = _a.value;
                        if (value) {
                            var labelHtmlString = _this.getExpressionWithLabels(value);
                            if (initialValue) {
                                evt.data.setAttribute(i1$1.RX_RICH_TEXT.expressionAttributeName, value);
                                evt.data.setHtml(labelHtmlString);
                                // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154
                                _this.ckEditor.instance.fire('saveSnapshot');
                            }
                            else {
                                _this.ckEditor.instance.insertHtml("<span contenteditable=\"false\" " + i1$1.RX_RICH_TEXT.expressionAttributeName + "=\"" + lodash.escape(value) + "\">" + labelHtmlString + "</span>");
                            }
                        }
                        else {
                            evt.data.remove();
                            // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154
                            _this.ckEditor.instance.fire('saveSnapshot');
                        }
                        _this.moveCursorToEnd();
                    },
                    error: function () {
                        _this.moveCursorToEnd();
                    }
                }); });
            });
        };
        RichTextDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RichTextDesignComponent.prototype.getExpressionWithLabels = function (expressionValue) {
            var _this = this;
            return this.rxExpressionParserService.parse(expressionValue, function (token, expression) {
                if (token !== i1$2.ExpressionParserToken.RxStringExpression) {
                    var node = _this.flatDataDictionary.find(function (item) { return item.expression === expression; });
                    var label = node && node.label ? lodash.escape(node.label) : expression;
                    return "<span title=\"" + label + "\">" + label + "</span>";
                }
                return expression;
            });
        };
        RichTextDesignComponent.prototype.moveCursorToEnd = function () {
            var range = this.ckEditor.instance.createRange();
            range.moveToElementEditEnd(range.root);
            this.ckEditor.instance.getSelection().selectRanges([range]);
        };
        RichTextDesignComponent.prototype.setExpressionLabelHtml = function (predicate, htmlString) {
            var tempElement = this.renderer2.createElement('div');
            tempElement.innerHTML = htmlString;
            tempElement
                .querySelectorAll("span[" + i1$1.RX_RICH_TEXT.expressionAttributeName + "]")
                .forEach(function (el) { return (el.innerHTML = predicate ? predicate(el.getAttribute(i1$1.RX_RICH_TEXT.expressionAttributeName)) : null); });
            return tempElement.innerHTML.replace(/<br>/g, '<br />');
        };
        return RichTextDesignComponent;
    }());
    RichTextDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignComponent, deps: [{ token: i2__namespace$5.RxExpressionEditorService }, { token: i2__namespace$1.RxTreeService }, { token: i1__namespace$1.RxExpressionParserService }, { token: i0__namespace.Renderer2 }, { token: i3.DOCUMENT }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RichTextDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RichTextDesignComponent, selector: "rx-rich-text-design", inputs: { model: "model", isReadOnly: "isReadOnly" }, viewQueries: [{ propertyName: "ckEditor", first: true, predicate: i2$7.CKEditorComponent, descendants: true, static: true }], ngImport: i0__namespace, template: "<ckeditor\n  class=\"border\"\n  [class.border-transparent]=\"formControl.value\"\n  [formControl]=\"formControl\"\n  [config]=\"ckConfig\"\n  [type]=\"type\"\n  (ready)=\"onEditorReady($event)\"\n  [readOnly]=\"isReadOnly\"\n></ckeditor>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block}ckeditor{min-height:42px;display:block;border:1px solid #d6d7d8}ckeditor.border-transparent{border-color:transparent!important}ckeditor ::ng-deep [rx-expression]{padding:2px 5px;display:inline-block;color:#7c7f81;background-color:#f0f1f1;border-radius:2px;-webkit-user-select:all;user-select:all}ckeditor ::ng-deep [rx-expression] span{padding:2px 5px;background-color:#d6d7d8;border-radius:2px}ckeditor ::ng-deep .cke_editable{padding:5px;outline:none}\n"], components: [{ type: i2__namespace$7.CKEditorComponent, selector: "ckeditor", inputs: ["tagName", "type", "editorUrl", "data", "readOnly", "config"], outputs: ["ready", "dataReady", "change", "dataChange", "dragStart", "dragEnd", "drop", "fileUploadResponse", "fileUploadRequest", "focus", "paste", "afterPaste", "blur"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rich-text-design',
                        templateUrl: './rich-text-design.component.html',
                        styleUrls: ['./rich-text-design.component.scss']
                    }]
            }], ctorParameters: function () {
            return [{ type: i2__namespace$5.RxExpressionEditorService }, { type: i2__namespace$1.RxTreeService }, { type: i1__namespace$1.RxExpressionParserService }, { type: i0__namespace.Renderer2 }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i3.DOCUMENT]
                        }] }, { type: i0__namespace.NgZone }];
        }, propDecorators: { model: [{
                    type: i0.Input
                }], isReadOnly: [{
                    type: i0.Input
                }], ckEditor: [{
                    type: i0.ViewChild,
                    args: [i2$7.CKEditorComponent, { static: true }]
                }] } });

    var RxExpressionEditorPluginService = /** @class */ (function () {
        function RxExpressionEditorPluginService() {
            var me = this;
            CKEDITOR.plugins.add('expression-editor', {
                init: function (editor) {
                    editor.addCommand('insertExpression', {
                        exec: function () {
                            editor.fire('openExpressionEditor', null);
                            return true;
                        }
                    });
                    editor.on('doubleclick', function (evt) {
                        var element = me.getSelectedExpressionElement(evt.data.element);
                        if (element) {
                            editor.fire('openExpressionEditor', element);
                        }
                    }, null, null, 0);
                    editor.ui.addButton('ExpressionEditor', {
                        label: 'Insert Expression',
                        command: 'insertExpression',
                        toolbar: '',
                        icon: CKEDITOR.plugins.getPath('expression-editor') + 'toolbar.png'
                    });
                }
            });
        }
        RxExpressionEditorPluginService.prototype.getSelectedExpressionElement = function (element) {
            if (element.is('span') && element.hasAttribute('rx-expression')) {
                return element;
            }
            else {
                var parentElement = element.getParent();
                if (parentElement.is('span') && parentElement.hasAttribute('rx-expression')) {
                    return parentElement;
                }
            }
        };
        RxExpressionEditorPluginService.prototype.clearSelection = function (editor) {
            var selection = editor.getSelection();
            if (selection) {
                selection.removeAllRanges();
            }
        };
        return RxExpressionEditorPluginService;
    }());
    RxExpressionEditorPluginService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExpressionEditorPluginService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxExpressionEditorPluginService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExpressionEditorPluginService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxExpressionEditorPluginService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var RichTextDesignModule = /** @class */ (function () {
        function RichTextDesignModule(rxExpressionEditorPluginService, rxDefinitionAdapterRegistryService, richTextDefinitionAdapterService) {
            this.rxExpressionEditorPluginService = rxExpressionEditorPluginService;
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.richTextDefinitionAdapterService = richTextDefinitionAdapterService;
            rxDefinitionAdapterRegistryService.registerDesignAdapter(i1$1.RxViewComponentType.RichText, this.richTextDefinitionAdapterService);
        }
        return RichTextDesignModule;
    }());
    RichTextDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignModule, deps: [{ token: RxExpressionEditorPluginService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: RichTextDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignModule, declarations: [RichTextDesignComponent], imports: [i3.CommonModule, i2$7.CKEditorModule, i2$4.ReactiveFormsModule] });
    RichTextDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignModule, imports: [[i3.CommonModule, i2$7.CKEditorModule, i2$4.ReactiveFormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RichTextDesignComponent],
                        entryComponents: [RichTextDesignComponent],
                        imports: [i3.CommonModule, i2$7.CKEditorModule, i2$4.ReactiveFormsModule]
                    }]
            }], ctorParameters: function () { return [{ type: RxExpressionEditorPluginService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: RichTextDefinitionAdapterService }]; } });

    var ServiceListDesignComponent = /** @class */ (function () {
        function ServiceListDesignComponent() {
        }
        return ServiceListDesignComponent;
    }());
    ServiceListDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ServiceListDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServiceListDesignComponent, selector: "rx-service-list-design", ngImport: i0__namespace, template: "<div class=\"row\">\n  <div class=\"col-md-12\">\n    <adapt-rx-select label=\"Service list\" required=\"true\" disabled=\"true\" ngModel> </adapt-rx-select>\n  </div>\n</div>\n", components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-service-list-design',
                        templateUrl: './service-list-design.component.html'
                    }]
            }] });

    var ServiceListDesignModule = /** @class */ (function () {
        function ServiceListDesignModule() {
        }
        return ServiceListDesignModule;
    }());
    ServiceListDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServiceListDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignModule, declarations: [ServiceListDesignComponent], imports: [i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule, i1.AdaptRxSelectModule, i2$4.FormsModule] });
    ServiceListDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignModule, imports: [[i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule, i1.AdaptRxSelectModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule, i1.AdaptRxSelectModule, i2$4.FormsModule],
                        declarations: [ServiceListDesignComponent],
                        entryComponents: [ServiceListDesignComponent]
                    }]
            }] });

    var ServiceListComponent = /** @class */ (function (_super) {
        __extends(ServiceListComponent, _super);
        function ServiceListComponent(httpClient) {
            var _this = _super.call(this) || this;
            _this.httpClient = httpClient;
            _this.isDisabled = true;
            _this.serviceListOptions = [];
            _this.service = {
                id: null,
                name: null,
                guid: null
            };
            return _this;
        }
        ServiceListComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            var serviceRequestId$ = this.config.pipe(operators.pluck('serviceRequestId'), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$));
            this.httpClient
                .get('/api/com.bmc.dsm.chatbot/rx/application/chatbot/services')
                .pipe(operators.withLatestFrom(serviceRequestId$), operators.finalize(function () {
                _this.isDisabled = false;
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), chatbotServices = _b[0], serviceRequestId = _b[1];
                _this.serviceListOptions = lodash.flow(function (catalogs) { return lodash.groupBy(catalogs, 'groupName'); }, function (catalogsByGroup) { return lodash.map(catalogsByGroup, function (catalogs, groupName) { return ({
                    name: groupName,
                    children: lodash.map(catalogs, function (catalog) { return ({
                        id: catalog.id,
                        name: catalog.name,
                        guid: catalog.guid
                    }); })
                }); }); })((chatbotServices === null || chatbotServices === void 0 ? void 0 : chatbotServices.catalogDetailsList) || []);
                _this.selectServiceRequest(serviceRequestId);
            });
            serviceRequestId$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (requestId) {
                _this.selectServiceRequest(requestId);
            });
        };
        ServiceListComponent.prototype.selectServiceRequest = function (serviceRequestId) {
            var service;
            lodash.forEach(this.serviceListOptions, function (item) {
                if (service) {
                    return false;
                }
                service = lodash.find(item.children, {
                    id: serviceRequestId
                });
            });
            this.service = service
                ? [
                    {
                        id: service.id,
                        name: service.name,
                        guid: service.guid
                    }
                ]
                : [];
        };
        ServiceListComponent.prototype.onSelectionChange = function (event) {
            var service = event.options[0];
            this.notifyPropertyChanged('serviceRequestId', service.id);
            this.notifyPropertyChanged('serviceRequestName', service.name);
            this.notifyPropertyChanged('serviceRequestGuid', service.guid);
        };
        ServiceListComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        return ServiceListComponent;
    }(i1$5.BaseViewComponent));
    ServiceListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListComponent, deps: [{ token: i1__namespace$9.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ServiceListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServiceListComponent, selector: "rx-service-list", inputs: { config: "config" }, usesInheritance: true, ngImport: i0__namespace, template: "<adapt-rx-select\n  label=\"Service name\"\n  required=\"true\"\n  [options]=\"serviceListOptions\"\n  [disabled]=\"isDisabled\"\n  (onSelectionChange)=\"onSelectionChange($event)\"\n  [ngModel]=\"service\"\n  [optionFormatter]=\"optionFormatter\"\n  enableFilter=\"true\"\n>\n</adapt-rx-select>\n", components: [{ type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-service-list',
                        templateUrl: './service-list.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$9.HttpClient }]; }, propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var ServiceListModule = /** @class */ (function () {
        function ServiceListModule() {
        }
        return ServiceListModule;
    }());
    ServiceListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServiceListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListModule, declarations: [ServiceListComponent], imports: [i3.CommonModule, i1.AdaptRxSelectModule, i2$4.FormsModule], exports: [ServiceListComponent] });
    ServiceListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListModule, imports: [[i3.CommonModule, i1.AdaptRxSelectModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptRxSelectModule, i2$4.FormsModule],
                        declarations: [ServiceListComponent],
                        entryComponents: [ServiceListComponent],
                        exports: [ServiceListComponent]
                    }]
            }] });

    var RxTabContainerComponent = /** @class */ (function (_super) {
        __extends(RxTabContainerComponent, _super);
        function RxTabContainerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.state = {
                enableLazyLoading: false,
                label: ''
            };
            return _this;
        }
        return RxTabContainerComponent;
    }(ContainerComponent));
    RxTabContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabContainerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    RxTabContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxTabContainerComponent, selector: "rx-tab-container", usesInheritance: true, ngImport: i0__namespace, template: "<rx-runtime-view-canvas-outlet *ngIf=\"!state.hidden\"></rx-runtime-view-canvas-outlet>\n", styles: [":host{display:block}\n"], components: [{ type: i1__namespace$2.RuntimeViewCanvasOutletComponent, selector: "rx-runtime-view-canvas-outlet", inputs: ["name"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tab-container',
                        templateUrl: './tab-container.component.html',
                        styleUrls: ['./tab-container.component.scss']
                    }]
            }] });

    var RxTabPanelComponent = /** @class */ (function (_super) {
        __extends(RxTabPanelComponent, _super);
        function RxTabPanelComponent(runtimeCanvasItemComponent) {
            var _this = _super.call(this) || this;
            _this.runtimeCanvasItemComponent = runtimeCanvasItemComponent;
            _this.childLayouts = [];
            _this.state = {
                activeTabIndex: null
            };
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            return _this;
        }
        RxTabPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.config.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (config) {
                _this.state = Object.assign(Object.assign({}, _this.state), config);
                _this.isHidden = Boolean(_this.state.hidden);
            });
            this.childLayouts = lodash.get(this.runtimeCanvasItemComponent.getChildren(i1$1.RX_VIEW_DEFINITION.defaultOutletName), '[0].children');
            this.childLayouts.forEach(function (childLayout) {
                childLayout.state = {
                    enableLazyLoading: false,
                    label: '',
                    isRendered: false,
                    hidden: 0
                };
                childLayout.config
                    .pipe(operators.tap(function (childLayoutConfig) {
                    childLayout.state = Object.assign(Object.assign({}, childLayout.state), childLayoutConfig);
                }), operators.pluck('hidden'), operators.distinctUntilChanged(), operators.skip(1), operators.takeUntil(_this.destroyed$))
                    .subscribe(function () {
                    _this.ensureActiveTabIsSet();
                });
            });
            this.trySetFirstVisibleTab();
        };
        RxTabPanelComponent.prototype.setProperty = function (propertyPath, propertyValue) {
            if (propertyPath === 'hidden') {
                this.state.hidden = propertyValue;
                this.notifyPropertyChanged(propertyPath, propertyValue);
            }
            else if (propertyPath === 'activeTabIndex') {
                this.setActiveTabIndex(parseInt(propertyValue, 10));
            }
            else {
                return rxjs.throwError("Tab panel: property " + propertyPath + " is not settable.");
            }
        };
        RxTabPanelComponent.prototype.trackByForTabs = function (index, item) {
            return item.guid;
        };
        RxTabPanelComponent.prototype.canRenderContentForTab = function (tab) {
            return !tab.state.enableLazyLoading || tab.state.isRendered;
        };
        RxTabPanelComponent.prototype.getAllTabsData = function () {
            var _this = this;
            var adaptTabsetIndex = 0;
            return this.childLayouts.map(function (tab) {
                return {
                    adaptTabsetIndex: _this.isHiddenTab(tab) ? null : adaptTabsetIndex++,
                    tab: tab
                };
            });
        };
        RxTabPanelComponent.prototype.isHiddenTab = function (tab) {
            return Boolean(tab.state.hidden);
        };
        RxTabPanelComponent.prototype.getActiveTabIndexForAdaptTabset = function () {
            return lodash.isNull(this.state.activeTabIndex) ? 0 : this.getAllTabsData()[this.state.activeTabIndex].adaptTabsetIndex;
        };
        RxTabPanelComponent.prototype.onActiveTabChanged = function (adaptTabsetIndex) {
            var activeTabIndexForAllTabs = lodash.findIndex(this.getAllTabsData(), function (tab) { return tab.adaptTabsetIndex === adaptTabsetIndex; });
            this.activateTab(activeTabIndexForAllTabs);
        };
        RxTabPanelComponent.prototype.setActiveTabIndex = function (index) {
            var tab = this.childLayouts[index];
            if (tab && !this.isHiddenTab(tab)) {
                this.activateTab(index);
            }
        };
        RxTabPanelComponent.prototype.activateTab = function (index) {
            this.state.activeTabIndex = index;
            if (!lodash.isNil(index)) {
                this.childLayouts[index].state.isRendered = true;
            }
            this.notifyPropertyChanged('activeTabIndex', index);
        };
        RxTabPanelComponent.prototype.ensureActiveTabIsSet = function () {
            var _this = this;
            var allTabs = this.childLayouts;
            var isAllTabsHidden = lodash.every(allTabs, function (tab) { return _this.isHiddenTab(tab); });
            if (isAllTabsHidden) {
                this.activateTab(null);
            }
            else if (!lodash.isNull(this.state.activeTabIndex) && this.isHiddenTab(allTabs[this.state.activeTabIndex])) {
                this.trySetFirstVisibleTab();
            }
            else if (lodash.isNull(this.state.activeTabIndex)) {
                this.trySetFirstVisibleTab();
            }
        };
        RxTabPanelComponent.prototype.trySetFirstVisibleTab = function () {
            var _this = this;
            var firstVisibleTab = lodash.findIndex(this.childLayouts, function (tab) { return !_this.isHiddenTab(tab); });
            if (firstVisibleTab !== -1) {
                this.activateTab(firstVisibleTab);
            }
        };
        return RxTabPanelComponent;
    }(i1$5.BaseViewComponent));
    RxTabPanelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelComponent, deps: [{ token: i1__namespace$2.RuntimeViewCanvasItemComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxTabPanelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxTabPanelComponent, selector: "rx-tab-panel", usesInheritance: true, ngImport: i0__namespace, template: "<adapt-tabset\n  *ngIf=\"!isHidden\"\n  [fullHeight]=\"true\"\n  (tab-active-changed)=\"onActiveTabChanged($event.index)\"\n  [tab-active]=\"getActiveTabIndexForAdaptTabset()\"\n>\n  <ng-template ngFor let-tab [ngForOf]=\"childLayouts\" [ngForTrackBy]=\"trackByForTabs\" let-index=\"index\">\n    <adapt-tab-panel [adapt-tab-title]=\"tab.state.label\" *ngIf=\"!isHiddenTab(tab)\">\n      <rx-runtime-view-canvas-item *ngIf=\"canRenderContentForTab(tab)\" [layout]=\"tab\"> </rx-runtime-view-canvas-item>\n    </adapt-tab-panel>\n\n    <!-- Hidden tab should have instance for using API  -->\n    <rx-runtime-view-canvas-item *ngIf=\"isHiddenTab(tab) && canRenderContentForTab(tab)\" [layout]=\"tab\">\n    </rx-runtime-view-canvas-item>\n  </ng-template>\n</adapt-tabset>\n", components: [{ type: i1__namespace.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: i1__namespace$2.RuntimeViewCanvasItemComponent, selector: "rx-runtime-view-canvas-item", inputs: ["layout"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tab-panel',
                        templateUrl: './tab-panel.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.RuntimeViewCanvasItemComponent }]; } });

    var RxTabPanelComponentDefinitionAdapterService = /** @class */ (function () {
        function RxTabPanelComponentDefinitionAdapterService(viewDefinitionParserService, rxJsonParserService) {
            this.viewDefinitionParserService = viewDefinitionParserService;
            this.rxJsonParserService = rxJsonParserService;
        }
        RxTabPanelComponentDefinitionAdapterService.prototype.adaptDefinition = function (tabPanelViewComponentDefinition) {
            var _this = this;
            this.viewDefinitionParserService
                .getComponents(tabPanelViewComponentDefinition)
                .filter(function (componentPair) { return componentPair.componentDefinition.type === i1$1.RxViewComponentType.TabPanel; })
                .map(function (componentPair) { return componentPair.componentDefinition; })
                .forEach(function (componentDefinition) {
                if (componentDefinition.layout) {
                    var layout = _this.rxJsonParserService.tryParseJson(componentDefinition.layout);
                    if (layout && layout.componentDefinitionId) {
                        var columns = layout.columns.map(function (column) {
                            return {
                                children: column.children.map(function (child) { return child.columns[0].children[0].componentDefinitionId; })
                            };
                        });
                        layout = {
                            outlets: [
                                {
                                    name: 'DEFAULT',
                                    columns: columns
                                }
                            ]
                        };
                        componentDefinition.layout = JSON.stringify(layout);
                    }
                }
            });
        };
        return RxTabPanelComponentDefinitionAdapterService;
    }());
    RxTabPanelComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelComponentDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxTabPanelComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelComponentDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }, { type: i2__namespace$1.RxJsonParserService }]; } });

    var RxTabContainerComponentDefinitionAdapterService = /** @class */ (function (_super) {
        __extends(RxTabContainerComponentDefinitionAdapterService, _super);
        function RxTabContainerComponentDefinitionAdapterService(viewDefinitionParserService, rxJsonParserService) {
            var _this = _super.call(this, viewDefinitionParserService, rxJsonParserService) || this;
            _this.componentDefinitionType = i1$1.RxViewComponentType.TabContainer;
            return _this;
        }
        return RxTabContainerComponentDefinitionAdapterService;
    }(ContainerComponentDefinitionAdapterService));
    RxTabContainerComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabContainerComponentDefinitionAdapterService, deps: [{ token: i1__namespace$4.RxViewDefinitionParserService }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxTabContainerComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabContainerComponentDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabContainerComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewDefinitionParserService }, { type: i2__namespace$1.RxJsonParserService }]; } });

    var RxTabPanelModule = /** @class */ (function () {
        function RxTabPanelModule(rxTabPanelComponentDefinitionAdapterService, rxTabContainerComponentDefinitionAdapterService, rxDefinitionAdapterRegistryService) {
            this.rxTabPanelComponentDefinitionAdapterService = rxTabPanelComponentDefinitionAdapterService;
            this.rxTabContainerComponentDefinitionAdapterService = rxTabContainerComponentDefinitionAdapterService;
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.TabPanel, rxTabPanelComponentDefinitionAdapterService);
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.TabContainer, rxTabContainerComponentDefinitionAdapterService);
        }
        return RxTabPanelModule;
    }());
    RxTabPanelModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelModule, deps: [{ token: RxTabPanelComponentDefinitionAdapterService }, { token: RxTabContainerComponentDefinitionAdapterService }, { token: i1__namespace$1.RxDefinitionAdapterRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxTabPanelModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelModule, declarations: [RxTabPanelComponent, RxTabContainerComponent], imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1__namespace.AdaptTabsModule], exports: [RxTabPanelComponent, RxTabContainerComponent] });
    RxTabPanelModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelModule, providers: [RxTabPanelComponentDefinitionAdapterService, RxTabContainerComponentDefinitionAdapterService], imports: [[i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1.AdaptTabsModule.forRoot()]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTabPanelModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxTabPanelComponent, RxTabContainerComponent],
                        exports: [RxTabPanelComponent, RxTabContainerComponent],
                        entryComponents: [RxTabPanelComponent, RxTabContainerComponent],
                        imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule, i1.AdaptTabsModule.forRoot()],
                        providers: [RxTabPanelComponentDefinitionAdapterService, RxTabContainerComponentDefinitionAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: RxTabPanelComponentDefinitionAdapterService }, { type: RxTabContainerComponentDefinitionAdapterService }, { type: i1__namespace$1.RxDefinitionAdapterRegistryService }]; } });

    var TabPanelDesignComponent = /** @class */ (function () {
        function TabPanelDesignComponent(rxUtilityModalsService) {
            this.rxUtilityModalsService = rxUtilityModalsService;
            this.components = [];
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        TabPanelDesignComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.model.tabContainerComponents$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (components) {
                _this.components = components;
                _this.adaptTabset.checkActiveIndex();
            });
            this.model.tabContainerComponents$.pipe(operators.take(1)).subscribe(function (components) {
                _this.model.selectTab(lodash.first(components).guid, true);
            });
        };
        TabPanelDesignComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        TabPanelDesignComponent.prototype.trackByForTabs = function (index, item) {
            return item.guid;
        };
        TabPanelDesignComponent.prototype.onTabClicked = function (event) {
            this.activeTabChanged(event);
        };
        TabPanelDesignComponent.prototype.onTabAdded = function (e) {
            var _this = this;
            e.stopPropagation();
            this.model.addTab();
            setTimeout(function () {
                _this.adaptTabset.setActiveTab(_this.components.length - 1, true, new MouseEvent('click'));
            });
        };
        TabPanelDesignComponent.prototype.activeTabChanged = function (_a) {
            var _this = this;
            var index = _a.index, event = _a.event;
            event.stopPropagation();
            this.model.tabContainerGuids$.pipe(operators.take(1)).subscribe(function (guids) {
                _this.model.selectTab(guids[index]);
            });
        };
        TabPanelDesignComponent.prototype.onTabDropped = function (tabs) {
            for (var i = 0; i < this.components.length; i++) {
                if (this.components[i].guid !== tabs[i].id) {
                    if (this.components[i].guid === tabs[i + 1].id) {
                        this.model.moveComponent(tabs[i].id, i);
                        break;
                    }
                    else {
                        this.model.moveComponent(this.components[i].guid, lodash.findIndex(tabs, { id: this.components[i].guid }));
                        break;
                    }
                }
            }
        };
        TabPanelDesignComponent.prototype.removeTab = function (_a) {
            var _this = this;
            var index = _a.index;
            this.rxUtilityModalsService
                .confirm('Are you sure you want to delete this view component?')
                .then(function (isConfirmed) {
                if (isConfirmed) {
                    _this.model.tabContainerGuids$.pipe(operators.take(1)).subscribe(function (guids) {
                        _this.model.removeTab(guids[index]);
                    });
                }
            });
        };
        return TabPanelDesignComponent;
    }());
    TabPanelDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignComponent, deps: [{ token: i1__namespace$6.RxUtilityModalsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TabPanelDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TabPanelDesignComponent, selector: "rx-tab-panel-design", inputs: { model: "model", isReadOnly: "isReadOnly" }, viewQueries: [{ propertyName: "adaptTabset", first: true, predicate: ["adaptTabset"], descendants: true, static: true }], ngImport: i0__namespace, template: "<adapt-tabset\n  #adaptTabset\n  (tab-index-closed)=\"removeTab($event)\"\n  (tab-active-changed)=\"activeTabChanged($event)\"\n  (tabClicked)=\"onTabClicked($event)\"\n  (tabDropped)=\"onTabDropped($event)\"\n  (add-tab-clicked)=\"onTabAdded($event)\"\n  [allow-tabs-adding]=\"!isReadOnly\"\n  [enableDnD]=\"true\"\n>\n  <adapt-tab-panel\n    *ngFor=\"\n      let component of components;\n      let index = index;\n      trackBy: trackByForTabs\n    \"\n    [adapt-tab-title]=\"component.data.label\"\n    [icon-close]=\"!isReadOnly && components.length && components.length > 1\"\n    [id]=\"component.guid\"\n  >\n  </adapt-tab-panel>\n</adapt-tabset>\n\n<rx-canvas-outlet [dropPredicate]=\"model.dropPredicate\"></rx-canvas-outlet>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block;border:1px solid #d6d7d8}:host::ng-deep .adapt-tabset>.tab-container>.tab-content{display:none}:host::ng-deep>rx-canvas-outlet>rx-canvas-item-container>div>div>rx-canvas-item-column>.cdk-drop-list>.cdk-drag>.canvas-item{border-width:0;padding:0}:host::ng-deep>rx-canvas-outlet>rx-canvas-item-container>div>div>rx-canvas-item-column>.cdk-drop-list>.cdk-drag>.canvas-item>.canvas-item-header{display:none}\n"], components: [{ type: i1__namespace.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }], directives: [{ type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tab-panel-design',
                        templateUrl: './tab-panel-design.component.html',
                        styleUrls: ['./tab-panel-design.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RxUtilityModalsService }]; }, propDecorators: { model: [{
                    type: i0.Input
                }], isReadOnly: [{
                    type: i0.Input
                }], adaptTabset: [{
                    type: i0.ViewChild,
                    args: ['adaptTabset', { static: true }]
                }] } });

    var TabContainerDesignComponent = /** @class */ (function (_super) {
        __extends(TabContainerDesignComponent, _super);
        function TabContainerDesignComponent(tabPanelDesignComponent) {
            var _this = _super.call(this) || this;
            _this.tabPanelDesignComponent = tabPanelDesignComponent;
            return _this;
        }
        TabContainerDesignComponent.prototype.ngOnInit = function () {
            this.tabPanelDesignComponent.model.selectedTabGuid$
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(this.model.selectedTabGuid$);
        };
        return TabContainerDesignComponent;
    }(ContainerDesignComponent));
    TabContainerDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabContainerDesignComponent, deps: [{ token: TabPanelDesignComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TabContainerDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TabContainerDesignComponent, selector: "rx-tab-container-design", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<rx-canvas-outlet [skipParentPredicate]=\"true\" [containerComponent]=\"containerCanvasItemComponent\"></rx-canvas-outlet>\n", components: [{ type: i1__namespace$3.CanvasOutletComponent, selector: "rx-canvas-outlet", inputs: ["name", "skipParentPredicate", "containerComponent", "dropListOrientation", "dropPredicate"], outputs: ["beforeViewComponentDrop"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabContainerDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tab-container-design',
                        templateUrl: './tab-container-design.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: TabPanelDesignComponent }]; }, propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TabPanelDesignModule = /** @class */ (function () {
        function TabPanelDesignModule() {
        }
        return TabPanelDesignModule;
    }());
    TabPanelDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TabPanelDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignModule, declarations: [TabPanelDesignComponent, TabContainerDesignComponent], imports: [i3.CommonModule, i1.AdaptButtonModule, i1.AdaptTabsModule, i1$3.ViewDesignerCanvasModule] });
    TabPanelDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignModule, imports: [[i3.CommonModule, i1.AdaptButtonModule, i1.AdaptTabsModule, i1$3.ViewDesignerCanvasModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TabPanelDesignComponent, TabContainerDesignComponent],
                        entryComponents: [TabPanelDesignComponent, TabContainerDesignComponent],
                        imports: [i3.CommonModule, i1.AdaptButtonModule, i1.AdaptTabsModule, i1$3.ViewDesignerCanvasModule]
                    }]
            }] });

    var PageDesignComponent = /** @class */ (function () {
        function PageDesignComponent() {
        }
        return PageDesignComponent;
    }());
    PageDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PageDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PageDesignComponent, selector: "rx-page-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-empty-state type=\"objects\" [label]=\"model.componentName$ | async\"></adapt-empty-state>\n", components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], pipes: { "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-page-design',
                        templateUrl: './page-design.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var PageDesignModule = /** @class */ (function () {
        function PageDesignModule() {
        }
        return PageDesignModule;
    }());
    PageDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PageDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignModule, declarations: [PageDesignComponent], imports: [i3.CommonModule, i1.AdaptEmptyStateModule] });
    PageDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignModule, imports: [[i3.CommonModule, i1.AdaptEmptyStateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptEmptyStateModule],
                        declarations: [PageDesignComponent],
                        entryComponents: [PageDesignComponent]
                    }]
            }] });

    var PageComponentDefinitionAdapterService = /** @class */ (function () {
        function PageComponentDefinitionAdapterService() {
        }
        PageComponentDefinitionAdapterService.prototype.adaptDefinition = function (componentDefinition) {
            componentDefinition.layout = JSON.stringify({
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName,
                        columns: [
                            {
                                children: componentDefinition.componentDefinitions[0].guid
                            }
                        ]
                    }
                ]
            });
        };
        return PageComponentDefinitionAdapterService;
    }());
    PageComponentDefinitionAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageComponentDefinitionAdapterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PageComponentDefinitionAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageComponentDefinitionAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageComponentDefinitionAdapterService, decorators: [{
                type: i0.Injectable
            }] });

    var PageModule = /** @class */ (function () {
        function PageModule(rxDefinitionAdapterRegistryService, pageComponentDefinitionAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.pageComponentDefinitionAdapterService = pageComponentDefinitionAdapterService;
            this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.Page, this.pageComponentDefinitionAdapterService);
        }
        return PageModule;
    }());
    PageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: PageComponentDefinitionAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageModule, declarations: [PageComponent], imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule], exports: [PageComponent] });
    PageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageModule, providers: [PageComponentDefinitionAdapterService], imports: [[i3.CommonModule, i1$5.RuntimeViewCanvasModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1$5.RuntimeViewCanvasModule],
                        providers: [PageComponentDefinitionAdapterService],
                        declarations: [PageComponent],
                        exports: [PageComponent],
                        entryComponents: [PageComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: PageComponentDefinitionAdapterService }]; } });

    var ImageDesignComponent = /** @class */ (function () {
        function ImageDesignComponent() {
        }
        return ImageDesignComponent;
    }());
    ImageDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ImageDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ImageDesignComponent, selector: "rx-image-design", ngImport: i0__namespace, template: "<div class=\"placeholder d-flex justify-content-center align-items-center\">\n  <span class=\"component-icon d-icon-attachment_image_adapt\"></span>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:block;border:1px solid #d6d7d8}.placeholder{height:132px;color:#959899}.component-icon{height:100px;width:100px;font-size:100px;position:relative}.component-icon:before{position:absolute;top:0;bottom:0;right:0;left:0}\n"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-image-design',
                        templateUrl: './image-design.component.html',
                        styleUrls: ['./image-design.component.scss']
                    }]
            }] });

    var ImageDesignModule = /** @class */ (function () {
        function ImageDesignModule() {
        }
        return ImageDesignModule;
    }());
    ImageDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ImageDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignModule, declarations: [ImageDesignComponent], imports: [i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule] });
    ImageDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignModule, imports: [[i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i2.RxDefinitionPickerModule, i2.FormControlsModule],
                        declarations: [ImageDesignComponent],
                        entryComponents: [ImageDesignComponent]
                    }]
            }] });

    var _a;
    var ImageAlignment;
    (function (ImageAlignment) {
        ImageAlignment["Left"] = "left";
        ImageAlignment["Center"] = "center";
        ImageAlignment["Right"] = "right";
    })(ImageAlignment || (ImageAlignment = {}));
    var RX_IMAGE_ALIGNMENT_OPTIONS = [
        {
            id: ImageAlignment.Left,
            name: 'Left'
        },
        {
            id: ImageAlignment.Center,
            name: 'Center'
        },
        {
            id: ImageAlignment.Right,
            name: 'Right'
        }
    ];
    var RX_IMAGE_ALIGNMENT_STYLES = (_a = {},
        _a[ImageAlignment.Left] = 'justify-content-start',
        _a[ImageAlignment.Center] = 'justify-content-center',
        _a[ImageAlignment.Right] = 'justify-content-end',
        _a);

    var ImageComponent = /** @class */ (function (_super) {
        __extends(ImageComponent, _super);
        function ImageComponent(rxRecordInstanceService, rxLogService, httpClient, domSanitizer, translateService, rxRecordInstanceUtilsService) {
            var _this = _super.call(this) || this;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxLogService = rxLogService;
            _this.httpClient = httpClient;
            _this.domSanitizer = domSanitizer;
            _this.translateService = translateService;
            _this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            _this.state = {
                recordDefinitionName: '',
                recordInstanceId: '',
                fieldId: '',
                maxWidth: '',
                imageUrl: null,
                isImageBroken: false,
                alignmentStyle: '',
                altText: ''
            };
            _this.api = {
                setProperty: _this.setProperty.bind(_this)
            };
            _this.fileName = '';
            return _this;
        }
        ImageComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            var config$ = this.config.pipe(operators.distinctUntilChanged(lodash.isEqual), operators.tap(function (config) {
                var newState = Object.assign({}, config);
                _this.isHidden = newState.hidden;
                if (!_this.state.alignmentStyle && newState.alignment) {
                    newState.alignmentStyle = _this.getAlignmentStyle(newState.alignment);
                }
                delete newState.alignment;
                _this.state = Object.assign(Object.assign({}, _this.state), newState);
            }), operators.shareReplay(1));
            config$
                .pipe(operators.map(function () { return (_this.state.recordInstanceId ? _this.state.recordInstanceId : null); }), operators.filter(function (recordInstanceId) { return Boolean(recordInstanceId); }), operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (recordInstanceId) {
                var imageUrl = _this.rxRecordInstanceService.getAttachmentDownloadUrl(_this.state.recordDefinitionName, Number(_this.state.fieldId), recordInstanceId);
                _this.httpClient.get(imageUrl, { responseType: 'blob', observe: 'response' }).subscribe({
                    next: function (response) {
                        var fileStream = response.body;
                        _this.fileName = _this.rxRecordInstanceUtilsService.tryParseContentDisposition(response.headers.get('content-disposition'));
                        if (fileStream && fileStream.type.split('/')[0] === 'image') {
                            var fileReader_1 = new FileReader();
                            fileReader_1.onloadend = function () {
                                _this.state.imageUrl = _this.domSanitizer.bypassSecurityTrustResourceUrl(fileReader_1.result);
                                _this.state.isImageBroken = false;
                                _this.state.altText = _this.fileName;
                            };
                            fileReader_1.onerror = _this.onImageLoadFailed.bind(_this);
                            fileReader_1.readAsDataURL(fileStream);
                        }
                        else {
                            _this.rxLogService.warning("rx-image: attachment is not a valid image.");
                            _this.onImageLoadFailed();
                        }
                    },
                    error: function (err) {
                        _this.state.imageUrl = null;
                        _this.state.isImageBroken = false;
                        _this.state.altText = '';
                    }
                });
            });
        };
        ImageComponent.prototype.onImageLoadFailed = function () {
            this.state.imageUrl = null;
            this.state.isImageBroken = true;
            this.state.altText = this.translateService.instant('com.bmc.arsys.rx.client.view-components.image.invalid-image.label', { imageName: this.fileName });
        };
        ImageComponent.prototype.getAlignmentStyle = function (alignment) {
            return RX_IMAGE_ALIGNMENT_STYLES[alignment];
        };
        ImageComponent.prototype.setProperty = function (propertyPath, value) {
            if (propertyPath === 'hidden') {
                this.isHidden = value;
                this.notifyPropertyChanged(propertyPath, this.isHidden);
            }
            else {
                return rxjs.throwError("Image: property " + propertyPath + " is not settable.");
            }
        };
        return ImageComponent;
    }(i1$5.BaseViewComponent));
    ImageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageComponent, deps: [{ token: i1__namespace$5.RxRecordInstanceService }, { token: i1__namespace$1.RxLogService }, { token: i1__namespace$9.HttpClient }, { token: i1__namespace$8.DomSanitizer }, { token: i2__namespace.TranslateService }, { token: i1__namespace$5.RxRecordInstanceUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ImageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ImageComponent, selector: "rx-image", inputs: { config: "config" }, usesInheritance: true, ngImport: i0__namespace, template: "<div *ngIf=\"!isHidden\" class=\"d-flex {{ state.alignmentStyle }} image-container\">\n  <img\n    class=\"image\"\n    *ngIf=\"state.imageUrl\"\n    [src]=\"state.imageUrl\"\n    [attr.alt]=\"state.altText\"\n    [style.max-width]=\"state.maxWidth\"\n  />\n\n  <span\n    *ngIf=\"state.isImageBroken\"\n    role=\"img\"\n    [attr.aria-label]=\"state.altText\"\n    class=\"broken-image d-icon-broken_image\"\n  ></span>\n</div>\n", styles: [".broken-image{font-size:64px}.image{align-self:flex-start}.image-container{width:100%;overflow:hidden}\n"], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-image',
                        templateUrl: './image.component.html',
                        styleUrls: ['./image.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordInstanceService }, { type: i1__namespace$1.RxLogService }, { type: i1__namespace$9.HttpClient }, { type: i1__namespace$8.DomSanitizer }, { type: i2__namespace.TranslateService }, { type: i1__namespace$5.RxRecordInstanceUtilsService }]; }, propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var ImageModule = /** @class */ (function () {
        function ImageModule() {
        }
        return ImageModule;
    }());
    ImageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ImageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageModule, declarations: [ImageComponent], imports: [i3.CommonModule], exports: [ImageComponent] });
    ImageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageModule, imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule],
                        declarations: [ImageComponent],
                        entryComponents: [ImageComponent],
                        exports: [ImageComponent]
                    }]
            }] });

    var ACTIONS_KEY = 'actions';
    var ActionButtonDesignModel = /** @class */ (function (_super) {
        __extends(ActionButtonDesignModel, _super);
        function ActionButtonDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            _this.viewActionValidatorService = _this.injector.get(i1$3.RxViewActionValidatorService);
            _this.translateService = _this.injector.get(i2$1.TranslateService);
            _this.label$ = _this.sandbox.getComponentPropertyValue('labelKey').pipe(operators.switchMap(function (labelKey) { return labelKey ? rxjs.of(_this.translateService.instant(labelKey)) : _this.sandbox.getComponentPropertyValue('label'); }), operators.takeUntil(_this.sandbox.destroyed$));
            _this.style$ = _this.sandbox.getComponentPropertyValue('style');
            _this.size$ = _this.sandbox.getComponentPropertyValue('size');
            _this.icon$ = _this.sandbox.getComponentPropertyValue('icon');
            _this.iconAlignment$ = _this.sandbox.getComponentPropertyValue('iconAlignment');
            _this.fieldDefinitions$ = _this.sandbox.getComponentPropertyValue('recordDefinitionName').pipe(operators.switchMap(function (recordDefinitionName) { return recordDefinitionName
                ? _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(operators.map(function (recordDefinition) { return recordDefinition.fieldDefinitions; }), operators.catchError(function () { return rxjs.of([]); }))
                : rxjs.of([]); }));
            return _this;
        }
        ActionButtonDesignModel.getInitialProperties = function (props) {
            return Object.assign(Object.assign(Object.assign({ iconAlignment: exports.ActionButtonIconAlignment.Left, label: 'New button', size: exports.ActionButtonSize.Default, icon: null, style: exports.ActionButtonStyle.Primary, recordDefinitionName: null, fieldId: null, recordInstance: null }, i1$1.RX_DISABLED_PROP_DEFAULT_VALUE), i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), props);
        };
        ActionButtonDesignModel.prototype.rxInit = function () {
            var _this = this;
            // Set initial inspector config.
            rxjs.combineLatest([this.sandbox.componentProperties$, this.fieldDefinitions$])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), componentProperties = _b[0], fieldDefinitions = _b[1];
                return _this.getInspectorConfig(componentProperties, fieldDefinitions);
            }), operators.take(1), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (inspectorConfig) {
                _this.sandbox.updateInspectorConfig(inspectorConfig);
            });
            var actions$ = this.sandbox.getChildComponents();
            rxjs.combineLatest([
                actions$.pipe(operators.switchMap(function (actions) { return _this.viewActionValidatorService.validate(actions, ACTIONS_KEY); })),
                this.sandbox.getComponentPropertyValue('styles').pipe(operators.map(i1$3.validateCssClassNames)),
                this.sandbox
                    .getComponentPropertyValue(i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME)
                    .pipe(operators.map(i1$3.validateAvailableOnDevicesProp))
            ])
                .pipe(operators.map(lodash.flatten), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (validationIssues) {
                _this.setValidationIssues(validationIssues);
            });
            // update field names when Record Definition Name changed
            this.fieldDefinitions$
                .pipe(operators.withLatestFrom(this.componentProperties$), operators.map(function (_a) {
                var _b = __read(_a, 2), fieldDefinitions = _b[0], properties = _b[1];
                return _this.getInspectorConfig(properties, fieldDefinitions);
            }))
                .subscribe(function (inspector) { return _this.sandbox.updateInspectorConfig(inspector); });
            // clear fieldId and recordInstance if recordDefinitionName changed
            this.sandbox
                .getComponentPropertyValue('recordDefinitionName')
                .pipe(operators.pairwise())
                .subscribe(function (_a) {
                var _b = __read(_a, 2), oldName = _b[0], newName = _b[1];
                if (oldName && oldName !== newName) {
                    _this.sandbox.updateComponentProperties({
                        fieldId: null,
                        recordInstance: null
                    });
                }
            });
            this.label$.subscribe(function (label) {
                _this.sandbox.setBreadcrumbs(label);
            });
            this.sandbox
                .getComponentPropertyValue('action')
                .pipe(operators.switchMap(function (action) { return (action ? rxjs.EMPTY : _this.label$); }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (label) {
                // Don't build settable properties if 'action' property is not empty.
                // In this case button threads as a child of association component only.
                _this.sandbox.setSettablePropertiesDataDictionary(label, [
                    {
                        label: 'Disabled',
                        expression: _this.getExpressionForProperty('disabled')
                    },
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
        };
        ActionButtonDesignModel.prototype.setValidationIssues = function (issues) {
            this.sandbox.setValidationIssues(issues);
        };
        ActionButtonDesignModel.prototype.getInspectorConfig = function (props, fieldDefinitions) {
            var securitySectionControls = [
                {
                    name: 'recordDefinitionName',
                    component: i2.RxDefinitionPickerComponent,
                    options: {
                        label: 'Record definition name',
                        tooltip: new i1$2.Tooltip('The view component will be hidden if the user has no access to the specified record definition.'),
                        definitionType: i2.RxDefinitionPickerType.StandardDataRecord
                    }
                }
            ];
            if (props.recordDefinitionName) {
                securitySectionControls.push({
                    name: 'fieldId',
                    component: i2.SelectFormControlComponent,
                    options: {
                        label: 'Field name',
                        tooltip: new i1$2.Tooltip('The view component will be hidden if the user has no access to the specified field, or disabled if the user only has View permission ' +
                            'for the specified field. <br><br> Record definition name, Field name, and Record instance must all be ' +
                            'specified in order to control the disabled/hidden state of the view component using field permissions.'),
                        options: fieldDefinitions.map(function (definition) { return ({ name: definition.name, id: String(definition.id) }); }),
                        emptyOption: true
                    }
                }, {
                    name: 'recordInstance',
                    component: i2.ExpressionInspectorControlComponent,
                    options: {
                        label: 'Record instance',
                        tooltip: new i1$2.Tooltip('Expression pointing to a record instance that provides the field permission details.')
                    }
                });
            }
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'label',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Label'
                                }
                            },
                            {
                                name: 'style',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Style',
                                    required: true,
                                    options: lodash.map(exports.ActionButtonStyle, function (value, name) { return ({
                                        id: value,
                                        name: name
                                    }); })
                                }
                            },
                            {
                                name: 'size',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Size',
                                    options: lodash.map(exports.ActionButtonSize, function (value, name) { return ({
                                        id: value,
                                        name: name
                                    }); }),
                                    sortAlphabetically: false
                                }
                            },
                            {
                                name: 'icon',
                                component: i2.IconPickerFormControlComponent,
                                options: {
                                    label: 'Icon'
                                }
                            },
                            {
                                name: 'iconAlignment',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Icon alignment',
                                    options: lodash.map(exports.ActionButtonIconAlignment, function (value, name) { return ({
                                        id: value,
                                        name: name
                                    }); })
                                }
                            },
                            i1$3.getDisabledFieldInspectorConfig()
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    },
                    {
                        label: 'Actions',
                        controls: [
                            {
                                widgetName: ACTIONS_KEY,
                                component: i1$3.ActionListWidgetComponent
                            }
                        ]
                    },
                    {
                        label: 'Security',
                        controls: securitySectionControls
                    }
                ]
            };
        };
        return ActionButtonDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ActionButtonRegistrationModule = /** @class */ (function () {
        function ActionButtonRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.ActionButton,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonComponent),
                properties: __spreadArray([
                    {
                        name: 'recordDefinitionName'
                    },
                    {
                        name: 'fieldId'
                    },
                    {
                        name: 'recordInstance',
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'label',
                        localizable: true
                    },
                    i1$1.RX_DISABLED_PROP_DESC
                ], __read(i1$1.RX_STANDARD_PROPS_DESC)),
                name: 'Action button',
                isContainerComponent: true,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'action_button_cursor',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonDesignComponent),
                designComponentModel: ActionButtonDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return ActionButtonRegistrationModule;
    }());
    ActionButtonRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ActionButtonRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonRegistrationModule, imports: [ActionButtonDesignModule, ActionButtonModule] });
    ActionButtonRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonRegistrationModule, imports: [[ActionButtonDesignModule, ActionButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ActionButtonRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ActionButtonDesignModule, ActionButtonModule]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var ButtonBarRegistrationModule = /** @class */ (function () {
        function ButtonBarRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.ButtonBar,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarComponent),
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                properties: i1$1.RX_STANDARD_PROPS_DESC,
                name: 'Button bar',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'button_panel_o',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarDesignComponent),
                designComponentModel: ButtonBarDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return ButtonBarRegistrationModule;
    }());
    ButtonBarRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ButtonBarRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarRegistrationModule, imports: [ButtonBarModule, ButtonBarDesignModule] });
    ButtonBarRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarRegistrationModule, imports: [[ButtonBarModule, ButtonBarDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ButtonBarRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ButtonBarModule, ButtonBarDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RX_CONTAINER = {
        type: i1$1.RxViewComponentType.Container,
        maxColumnSpan: 12,
        rowWrapOptions: {
            xs: {
                id: exports.ContainerRowWrap.Xs,
                name: 'Extra Small (No wrapping)'
            },
            sm: {
                id: exports.ContainerRowWrap.Sm,
                name: 'Small (576 px)'
            },
            md: {
                id: exports.ContainerRowWrap.Md,
                name: 'Medium (768 px)'
            },
            lg: {
                id: exports.ContainerRowWrap.Lg,
                name: 'Large (992 px)'
            },
            xl: {
                id: exports.ContainerRowWrap.Xl,
                name: 'Extra Large (1200 px)'
            },
            xxl: {
                id: exports.ContainerRowWrap.Xxl,
                name: 'Extra Extra Large (1600 px)'
            }
        }
    };

    var cssClassesAutocompleteValues = i1$1.RX_VIEW_DEFINITION.styles.map(function (style) { return ({ text: style.name, data: { value: style.id } }); });
    var ContainerDesignModel = /** @class */ (function (_super) {
        __extends(ContainerDesignModel, _super);
        function ContainerDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            _this.hasChildren$ = _this.sandbox.getChildComponentGuids().pipe(operators.map(function (guids) { return !lodash.isEmpty(guids); }));
            return _this;
        }
        ContainerDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ name: null, rowWrap: exports.ContainerRowWrap.Sm, columnCount: '1' }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        ContainerDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
            });
            this.componentProperties$.subscribe(function (componentProperties) { return _this.validate(componentProperties); });
            this.sandbox
                .getComponentPropertyValue('columnCount')
                .pipe(operators.skip(1), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (columnCount) {
                _this.sandbox.setLayout(_this.getDefaultColumnSpans(Number(columnCount)));
            });
            this.sandbox.getComponentPropertyValue('name').subscribe(function (name) {
                var componentName = name ? _this.sandbox.descriptor.name + " (" + name + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
        };
        ContainerDesignModel.prototype.validate = function (model) {
            this.sandbox.setValidationIssues(i1$3.validateStandardProps(model));
        };
        ContainerDesignModel.prototype.getPropertiesByName = function (properties) {
            var result = Object.assign({}, properties);
            if (!result.styles) {
                delete result.styles;
            }
            return result;
        };
        ContainerDesignModel.prototype.setContainerLayout = function (columnSizes) {
            this.sandbox.setLayout(columnSizes);
        };
        ContainerDesignModel.prototype.getDefaultColumnSpans = function (columnCount) {
            var columnSpans = [];
            var span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);
            lodash.times(columnCount, function () { return columnSpans.push(span); });
            columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;
            return columnSpans;
        };
        ContainerDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: [
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Container.')
                                }
                            },
                            {
                                name: 'columnCount',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Number of columns',
                                    required: true,
                                    tooltip: new i1$2.Tooltip('Resize container columns on the canvas by dragging the dashed column separator line.'),
                                    options: lodash.times(6, function (index) { return ({ id: (++index).toString(), name: index.toString() }); })
                                }
                            },
                            {
                                name: 'rowWrap',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Row wrap',
                                    sortAlphabetically: false,
                                    options: lodash.values(RX_CONTAINER.rowWrapOptions),
                                    tooltip: new i1$2.Tooltip("The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.")
                                }
                            },
                            i1$3.getHiddenFieldInspectorConfig(),
                            i1$3.getAvailableOnDevicesInspectorConfig(),
                            i1$3.getStylesFieldInspectorConfig(cssClassesAutocompleteValues)
                        ]
                    }
                ]
            };
        };
        return ContainerDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ContainerRegistrationModule = /** @class */ (function () {
        function ContainerRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Container,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerComponent),
                properties: i1$1.RX_STANDARD_PROPS_DESC,
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Container',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'layout',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerDesignComponent),
                designComponentModel: ContainerDesignModel,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return ContainerRegistrationModule;
    }());
    ContainerRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ContainerRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerRegistrationModule, imports: [ContainerModule, ContainerDesignModule] });
    ContainerRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerRegistrationModule, imports: [[ContainerModule, ContainerDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ContainerRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ContainerModule, ContainerDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var ImageDesignModel = /** @class */ (function (_super) {
        __extends(ImageDesignModel, _super);
        function ImageDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.recordDefinitionName$ = _this.sandbox.getComponentPropertyValue('recordDefinitionName');
            _this.attachmentFields$ = _this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) { return recordDefinitionName ? _this.getAttachmentFieldsFromRecordDefinition(recordDefinitionName) : rxjs.of([]); }));
            _this.rxModalService = _this.injector.get(i1$6.RxModalService);
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            _this.maxWidthUnits = [
                {
                    name: 'pixels',
                    id: 'px'
                },
                {
                    name: '%',
                    id: '%'
                }
            ];
            return _this;
        }
        ImageDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ name: null, recordDefinitionName: null, recordInstanceId: null, fieldId: null, maxWidth: null, alignment: ImageAlignment.Left }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        ImageDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function (componentProperties) {
                _this.sandbox.updateInspectorConfig(_this.getInspector(componentProperties));
            });
            this.recordDefinitionName$
                .pipe(operators.skip(1), operators.withLatestFrom(this.sandbox.componentProperties$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], properties = _b[1];
                var newProperties = Object.assign(Object.assign({}, properties), { recordInstanceId: null, fieldId: null });
                _this.sandbox.updateComponentProperties(newProperties);
                _this.sandbox.updateInspectorConfig(_this.getInspector(newProperties));
            });
            this.attachmentFields$
                .pipe(operators.withLatestFrom(this.sandbox.componentProperties$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), attachmentFields = _b[0], properties = _b[1];
                _this.sandbox.updateInspectorConfig(_this.getInspector(properties, attachmentFields));
            });
            rxjs.combineLatest([
                this.validateEmptyProp('recordDefinitionName', 'Record definition name cannot be blank.'),
                this.validateEmptyProp('recordInstanceId', 'Record instance ID cannot be blank.'),
                this.validateEmptyProp('fieldId', 'Field ID cannot be blank.'),
                this.sandbox.getComponentPropertyValue('maxWidth').pipe(operators.map(function (value) { return _this.validateMaxWidth(value); })),
                this.sandbox.getComponentPropertyValue('styles').pipe(operators.map(i1$3.validateCssClassNames)),
                this.sandbox
                    .getComponentPropertyValue(i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME)
                    .pipe(operators.map(i1$3.validateAvailableOnDevicesProp))
            ])
                .pipe(operators.map(lodash.flatten), operators.map(lodash.compact), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (validationIssues) { return _this.sandbox.setValidationIssues(validationIssues); });
            this.sandbox.getComponentPropertyValue('name').subscribe(function (name) {
                var componentName = name ? _this.sandbox.descriptor.name + " (" + name + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
        };
        ImageDesignModel.prototype.getAttachmentFieldsFromRecordDefinition = function (recordDefinitionName) {
            return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(operators.map(function (recordDefinition) { return recordDefinition.fieldDefinitions
                .filter(function (definition) { return definition.resourceType === i1$4.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType; })
                .map(function (_a) {
                var id = _a.id, name = _a.name;
                return ({
                    id: id.toString(),
                    name: name
                });
            }); }));
        };
        ImageDesignModel.prototype.getInspector = function (props, attachmentFields) {
            var _this = this;
            if (attachmentFields === void 0) { attachmentFields = []; }
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Image view component.')
                                }
                            },
                            {
                                name: 'recordDefinitionName',
                                component: i2.RxDefinitionPickerComponent,
                                options: {
                                    label: 'Record definition name',
                                    definitionType: i2.RxDefinitionPickerType.RegularRecord,
                                    beforeValueChange: function (oldValue, newValue) {
                                        if (Boolean(oldValue) && props.recordInstanceId && props.fieldId) {
                                            return _this.rxModalService.confirm({
                                                title: 'Warning',
                                                modalStyle: i1$6.RX_MODAL.modalStyles.warning,
                                                message: 'Record Instance ID and Field ID will be cleared. Do you want to continue?'
                                            });
                                        }
                                        else {
                                            return Promise.resolve(true);
                                        }
                                    },
                                    required: true
                                }
                            },
                            {
                                name: 'fieldId',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Field name',
                                    options: attachmentFields,
                                    required: true
                                }
                            },
                            {
                                name: 'recordInstanceId',
                                component: i2.ExpressionInspectorControlComponent,
                                options: {
                                    label: 'Record ID',
                                    isRequired: true
                                }
                            },
                            {
                                name: 'alignment',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Horizontal alignment',
                                    options: RX_IMAGE_ALIGNMENT_OPTIONS
                                }
                            },
                            {
                                name: 'maxWidth',
                                component: i2.StepperWithUnitsFormControlComponent,
                                options: {
                                    label: 'Maximum width',
                                    defaultUnit: 'px',
                                    units: this.maxWidthUnits,
                                    stepperOptionByUnits: {
                                        px: {
                                            minValue: 0
                                        },
                                        '%': {
                                            minValue: 0,
                                            maxValue: 100,
                                            defaultValue: 100
                                        }
                                    }
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        ImageDesignModel.prototype.validateEmptyProp = function (propertyName, description) {
            var _this = this;
            return this.sandbox
                .getComponentPropertyValue(propertyName)
                .pipe(operators.map(function (value) { return (value ? null : _this.sandbox.createError(description, propertyName)); }));
        };
        ImageDesignModel.prototype.validateMaxWidth = function (maxWidth) {
            if (maxWidth) {
                var matches = maxWidth.match(/^([+-]?\d+(?:\.\d+)?)(.*)/);
                if (matches) {
                    var numberValue = Number(matches[1]);
                    var unitValue = matches[2];
                    if (unitValue === '%' && numberValue > 100) {
                        return this.sandbox.createError('Maximum width cannot be greater than 100%.');
                    }
                    else if (numberValue < 0) {
                        return this.sandbox.createError('Maximum width should be a positive number.');
                    }
                }
            }
        };
        return ImageDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ImageRegistrationModule = /** @class */ (function () {
        function ImageRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Image,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageComponent),
                name: 'Image',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                properties: __spreadArray([
                    {
                        name: 'recordInstanceId',
                        enableExpressionEvaluation: true
                    }
                ], __read(i1$1.RX_STANDARD_PROPS_DESC)),
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageDesignComponent),
                designComponentModel: ImageDesignModel,
                icon: 'attachment_image_adapt',
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return ImageRegistrationModule;
    }());
    ImageRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ImageRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageRegistrationModule, imports: [ImageModule, ImageDesignModule] });
    ImageRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageRegistrationModule, imports: [[ImageModule, ImageDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ImageRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ImageModule, ImageDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var PageDesignModel = /** @class */ (function (_super) {
        __extends(PageDesignModel, _super);
        function PageDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.rxViewComponentRegistryService = _this.injector.get(i1$1.RxViewComponentRegistryService);
            _this.componentName$ = _this.sandbox.getChildComponents().pipe(operators.filter(function (childComponents) { return childComponents.length > 0; }), operators.map(function (childComponents) {
                var pageComponentType = childComponents[0].type;
                var descriptor = _this.rxViewComponentRegistryService.get(pageComponentType);
                return (descriptor === null || descriptor === void 0 ? void 0 : descriptor.name) || i1$1.RX_VIEW_DEFINITION.unknownPageComponent.name;
            }));
            return _this;
        }
        return PageDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var PageRegistrationModule = /** @class */ (function () {
        function PageRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Page,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(PageComponent),
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Page',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(PageDesignComponent),
                designComponentModel: PageDesignModel,
                hidden: true,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return PageRegistrationModule;
    }());
    PageRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PageRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageRegistrationModule, imports: [PageModule, PageDesignModule] });
    PageRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageRegistrationModule, imports: [[PageModule, PageDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PageRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [PageModule, PageDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RecordEditorDesignModel = /** @class */ (function (_super) {
        __extends(RecordEditorDesignModel, _super);
        function RecordEditorDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.rxFieldDefinitionService = _this.injector.get(i1$4.RxFieldDefinitionService);
            _this.rxViewComponentRegistryService = _this.injector.get(i1$1.RxViewComponentRegistryService);
            _this.rxRecordEditorDesignHelpersService = _this.injector.get(RxRecordEditorDesignHelpersService);
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.updateInspector$ = new rxjs.Subject();
            _this.recordDefinitionName$ = _this.sandbox.getComponentPropertyValue('recordDefinitionName');
            _this.mode$ = _this.sandbox.getComponentPropertyValue('mode');
            _this.showReadOnlyState$ = _this.sandbox.getComponentPropertyValue('showReadOnlyState');
            _this.targetExtensionContainerGuid$ = _this.sandbox.getViewPropertyValue('targetExtensionContainerGuid');
            _this.targetViewDefinitionName$ = _this.sandbox.getViewPropertyValue('targetViewDefinitionName');
            _this.recordDefinition$ = _this.recordDefinitionName$.pipe(operators.switchMap(function (name) { return _this.rxRecordEditorDesignHelpersService.getRecordDefinition(name); }), operators.shareReplay(1));
            _this.childComponentGuids$ = _this.sandbox.getChildComponentGuids().pipe(operators.shareReplay(1));
            _this.allChildFieldComponentGuids$ = _this.sandbox
                .getChildComponentGuids(function (component) { return _this.rxRecordEditorDesignHelpersService.isFieldComponent(component); }, true)
                .pipe(operators.distinctUntilChanged(lodash.isEqual), operators.shareReplay(1));
            _this.isExtensionView$ = _this.targetViewDefinitionName$.pipe(operators.map(Boolean), operators.shareReplay(1));
            _this.childFieldIds$ = _this.allChildFieldComponentGuids$.pipe(operators.switchMap(function (guids) { return guids.length
                ? rxjs.combineLatest(guids.map(function (guid) { return _this.sandbox.getComponentPropertyValue('fieldId', guid); })).pipe(operators.map(lodash.uniq))
                : rxjs.of([]); }), operators.shareReplay(1));
            _this.selectedFieldComponents$ = _this.allChildFieldComponentGuids$.pipe(operators.switchMap(function (guids) { return guids.length
                ? rxjs.combineLatest(guids.map(function (guid) { return rxjs.combineLatest([
                    _this.sandbox.getComponent(guid).pipe(operators.take(1), operators.map(function (component) { return _this.rxViewComponentRegistryService.get(component.type).name; })),
                    _this.sandbox.getComponentPropertyValue('fieldId', guid),
                    _this.sandbox.getComponentPropertyValue('label', guid)
                ]).pipe(operators.map(function (_b) {
                    var _c = __read(_b, 3), componentName = _c[0], fieldId = _c[1], label = _c[2];
                    return ({
                        fieldId: fieldId,
                        label: label || '<No field selected>',
                        componentName: componentName,
                        guid: guid
                    });
                })); }))
                : rxjs.of([]); }), operators.shareReplay(1));
            _this.associationComponentGuids$ = _this.sandbox
                .getChildComponentGuids(function (component) { return component.type === i1$1.RxViewComponentType.Association; }, true)
                .pipe(operators.shareReplay(1), operators.takeUntil(_this.sandbox.destroyed$));
            _this.associationDefinitionName$ = _this.sandbox.getComponentPropertyValue('associationDefinitionName');
            _this.hasChildren$ = _this.childComponentGuids$.pipe(operators.map(function (guids) { return Boolean(guids.length); }), operators.distinctUntilChanged(), operators.shareReplay(1));
            _this.systemFieldComponentGuids$ = _this.recordDefinition$.pipe(operators.mergeMap(function (recordDefinition) { return recordDefinition
                ? _this.selectedFieldComponents$.pipe(operators.map(function (components) { return components
                    .filter(function (component) {
                    var fieldDefinition = recordDefinition.fieldDefinitions.find(function (definition) { return String(definition.id) === component.fieldId; });
                    return _this.rxFieldDefinitionService.isSystemField(fieldDefinition);
                })
                    .map(function (component) { return component.guid; }); }), operators.take(1))
                : rxjs.of([]); }));
            _this.recordFieldDefinitionItems$ = _this.recordDefinition$.pipe(operators.map(function (recordDefinition) { return recordDefinition ? _this.rxRecordEditorDesignHelpersService.getRecordFieldDefinitionItems(recordDefinition) : []; }), operators.shareReplay(1));
            return _this;
        }
        RecordEditorDesignModel.getInitialProperties = function (initialProps) {
            var result = Object.assign(Object.assign({ name: null, label: null, mode: exports.RecordEditorMode.Edit, recordInstanceId: null, recordDefinitionName: null, associationDefinitionName: null, defaultState: initialProps.defaultState || null, allowEdit: '1', styles: null }, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE), initialProps);
            return Object.assign(Object.assign({}, result), { showReadOnlyState: Boolean(result.defaultState), allowEdit: result.mode === exports.RecordEditorMode.Edit ? result.allowEdit : null });
        };
        RecordEditorDesignModel.prototype.rxInit = function () {
            var _this = this;
            var targetRecordEditorProperties$ = rxjs.combineLatest([
                this.targetViewDefinitionName$.pipe(operators.switchMap(function (targetViewDefinitionName) { return _this.rxRecordEditorDesignHelpersService.getViewDefinition(targetViewDefinitionName); })),
                this.targetExtensionContainerGuid$
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), viewDefinition = _c[0], targetExtensionContainerGuid = _c[1];
                return _this.rxRecordEditorDesignHelpersService.getTargetRecordEditorProperties(viewDefinition, targetExtensionContainerGuid);
            }));
            this.associationOptions$ = rxjs.combineLatest([targetRecordEditorProperties$, this.recordDefinitionName$]).pipe(operators.switchMap(function (_b) {
                var _c = __read(_b, 2), targetRecordEditorProperties = _c[0], extensionRecordDefinitionName = _c[1];
                return _this.rxRecordEditorDesignHelpersService.getAssociationOptions(targetRecordEditorProperties.recordDefinitionName, extensionRecordDefinitionName);
            }));
            this.isAssociationRequired$ = rxjs.combineLatest([
                this.isExtensionView$,
                this.recordDefinitionName$,
                targetRecordEditorProperties$
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 3), isExtensionView = _c[0], recordDefinitionName = _c[1], targetRecordEditorProperties = _c[2];
                return isExtensionView && recordDefinitionName !== targetRecordEditorProperties.recordDefinitionName;
            }));
            this.updateInspector$.pipe(operators.takeUntil(this.sandbox.destroyed$)).subscribe(function (inspector) {
                _this.sandbox.updateInspectorConfig(inspector);
            });
            // initial set of inspector
            rxjs.combineLatest([
                this.sandbox.componentProperties$,
                this.isExtensionView$,
                this.associationOptions$,
                this.isAssociationRequired$,
                targetRecordEditorProperties$
            ])
                .pipe(operators.first(), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 5), _d = _c[0], recordDefinitionName = _d.recordDefinitionName, mode = _d.mode, showReadOnlyState = _d.showReadOnlyState, isExtensionView = _c[1], associationOptions = _c[2], isAssociationRequired = _c[3], targetRecordEditorProperties = _c[4];
                if (isExtensionView && !recordDefinitionName) {
                    recordDefinitionName = targetRecordEditorProperties.recordDefinitionName;
                    mode = targetRecordEditorProperties.mode;
                    _this.sandbox.updateComponentProperties({ mode: mode, recordDefinitionName: recordDefinitionName });
                }
                _this.updateInspector$.next(_this.rxRecordEditorDesignHelpersService.getInspector(recordDefinitionName, mode, showReadOnlyState, [], isExtensionView, associationOptions, isAssociationRequired, _this._onBeforeModeChange.bind(_this)));
            });
            this.mode$
                .pipe(operators.skip(1), operators.withLatestFrom(this.sandbox.componentProperties$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), mode = _c[0], props = _c[1];
                _this.sandbox.updateComponentProperties(mode === exports.RecordEditorMode.Create || mode === exports.RecordEditorMode.Temporary
                    ? Object.assign(Object.assign({}, props), { recordInstanceId: null, defaultState: null, allowEdit: null, showReadOnlyState: null }) : Object.assign(Object.assign({}, props), { defaultState: null, allowEdit: '1', showReadOnlyState: false }));
            });
            this.showReadOnlyState$
                .pipe(operators.skip(1), operators.withLatestFrom(this.sandbox.componentProperties$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), showReadOnlyState = _c[0], props = _c[1];
                _this.sandbox.updateComponentProperties(Object.assign(Object.assign({}, props), { defaultState: showReadOnlyState ? exports.RecordEditorState.Read : null }));
            });
            rxjs.combineLatest([
                rxjs.combineLatest([
                    this.sandbox.getComponentPropertyValue('recordDefinitionName'),
                    this.sandbox.getComponentPropertyValue('mode'),
                    this.showReadOnlyState$
                ]).pipe(operators.skip(1)),
                this.recordFieldDefinitionItems$,
                this.isExtensionView$,
                this.associationOptions$,
                this.isAssociationRequired$
            ])
                .pipe(operators.map(function (_b) {
                var _c = __read(_b, 5), _d = __read(_c[0], 3), recordDefinitionName = _d[0], mode = _d[1], showReadOnlyState = _d[2], recordFieldDefinitionItems = _c[1], isExtensionView = _c[2], associationOptions = _c[3], isAssociationRequired = _c[4];
                return _this.rxRecordEditorDesignHelpersService.getInspector(recordDefinitionName, mode, showReadOnlyState, recordFieldDefinitionItems, isExtensionView, associationOptions, isAssociationRequired, _this._onBeforeModeChange.bind(_this));
            }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(this.updateInspector$);
            // clear child components after changing of record definition
            this.recordDefinitionName$
                .pipe(operators.pairwise(), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), prevName = _c[0], currentName = _c[1];
                if (prevName) {
                    _this.sandbox.setChildren([]);
                    _this.sandbox.updateComponentProperties({ associationDefinitionName: null });
                }
            });
            this.associationOptions$
                .pipe(operators.skip(1), operators.filter(function (associationOptions) { return associationOptions.length === 1; }), operators.withLatestFrom(this.isAssociationRequired$), operators.filter(function (_b) {
                var _c = __read(_b, 2), isAssociationRequired = _c[1];
                return isAssociationRequired;
            }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 1), _d = __read(_c[0], 1), associationDefinitionName = _d[0].id;
                return _this.sandbox.updateComponentProperties({ associationDefinitionName: associationDefinitionName });
            });
            // TODO: performance
            // validation
            rxjs.combineLatest([
                this.sandbox.componentProperties$,
                this.recordDefinition$,
                this.childFieldIds$,
                this.isAssociationRequired$,
                this.isExtensionView$
            ])
                .pipe(operators.map(function (_b) {
                var _c = __read(_b, 5), componentProperties = _c[0], recordDefinition = _c[1], childFieldIds = _c[2], isAssociationRequired = _c[3], isExtensionView = _c[4];
                return _this.rxRecordEditorDesignHelpersService.validate(_this.sandbox, componentProperties, recordDefinition, childFieldIds, isAssociationRequired, isExtensionView);
            }), operators.distinctUntilChanged(lodash.isEqual), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (validationIssues) {
                _this.sandbox.setValidationIssues(validationIssues);
            });
            rxjs.combineLatest([
                this.sandbox.getComponentPropertyValue('name').pipe(operators.map(function (name) { return name || null; }), operators.distinctUntilChanged()),
                this.recordDefinition$
            ])
                .pipe(operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), name = _c[0], recordDefinition = _c[1];
                _this._setSettableProperties(name, recordDefinition);
                _this._setCommonDataDictionary(name, recordDefinition);
            });
        };
        RecordEditorDesignModel.prototype.removeComponent = function (guids) {
            this.sandbox.removeComponents(guids);
        };
        RecordEditorDesignModel.prototype.updateSelectedFieldComponents = function (fieldIds) {
            var _this = this;
            this.selectedFieldComponents$
                .pipe(operators.take(1), operators.mergeMap(function (components) {
                var fieldIdsToAdd = fieldIds.filter(function (fieldId) { return !components.find(function (component) { return component.fieldId === fieldId; }); });
                var fieldComponentsToAdd$ = fieldIdsToAdd.length
                    ? _this.recordFieldDefinitionItems$.pipe(operators.map(function (items) { return fieldIdsToAdd.map(function (fieldId) {
                        var _b = items.find(function (item) { return item.id === fieldId; }), type = _b.viewComponentType, label = _b.name;
                        return {
                            type: type,
                            propertiesByName: {
                                fieldId: fieldId,
                                label: label
                            }
                        };
                    }); }), operators.take(1))
                    : rxjs.of([]);
                var fieldIdsSet = new Set(fieldIds);
                var componentGuidsToRemove = components
                    .filter(function (component) { return component.fieldId; })
                    .filter(function (component) { return !fieldIdsSet.has(component.fieldId); })
                    .map(function (component) { return component.guid; });
                return rxjs.forkJoin([fieldComponentsToAdd$, rxjs.of(componentGuidsToRemove)]);
            }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), fieldComponentsToAdd = _c[0], fieldGuidsToRemove = _c[1];
                if (fieldComponentsToAdd.length) {
                    _this.sandbox.addComponent(fieldComponentsToAdd);
                }
                if (fieldGuidsToRemove.length) {
                    _this.sandbox.removeComponents(fieldGuidsToRemove);
                }
            });
        };
        RecordEditorDesignModel.prototype.getPropertiesByName = function (properties) {
            return this.rxRecordEditorDesignHelpersService.getComponentProperties(properties);
        };
        RecordEditorDesignModel.prototype._dropPredicate = function (data) {
            var _a;
            return (_a = data.draggedViewComponentDescriptor.options) === null || _a === void 0 ? void 0 : _a.canBeEmbeddedInRecordEditor;
        };
        RecordEditorDesignModel.prototype._onBeforeModeChange = function (prevMode, currentMode) {
            var _this = this;
            if (prevMode !== exports.RecordEditorMode.Create && currentMode === exports.RecordEditorMode.Create) {
                return this.systemFieldComponentGuids$
                    .pipe(operators.mergeMap(function (systemFieldComponentGuids) { return systemFieldComponentGuids.length
                    ? _this.rxRecordEditorDesignHelpersService.confirmSystemFieldRemoval().pipe(operators.tap(function (isConfirmed) {
                        if (isConfirmed) {
                            _this.sandbox.removeComponents(systemFieldComponentGuids);
                        }
                    }))
                    : rxjs.of(true); }), operators.take(1))
                    .toPromise();
            }
            else {
                return Promise.resolve(true);
            }
        };
        RecordEditorDesignModel.prototype.dropPredicate = function (data) {
            var _a;
            return (_a = data.draggedViewComponentDescriptor.options) === null || _a === void 0 ? void 0 : _a.canBeEmbeddedInRecordEditor;
        };
        RecordEditorDesignModel.prototype._setCommonDataDictionary = function (name, recordDefinition) {
            var componentName = this._getComponentName(name, recordDefinition);
            this.sandbox.setCommonDataDictionary(this._getCommonProps(componentName, recordDefinition));
        };
        RecordEditorDesignModel.prototype._setSettableProperties = function (name, recordDefinition) {
            var _this = this;
            var componentName = this._getComponentName(name, recordDefinition);
            this.sandbox.setSettablePropertiesDataDictionary(componentName, __spreadArray([
                {
                    label: 'Edit state',
                    expression: this.getExpressionForProperty('editState')
                },
                {
                    label: 'Read state',
                    expression: this.getExpressionForProperty('readState')
                }
            ], __read((recordDefinition
                ? [
                    {
                        label: 'Record instance',
                        children: recordDefinition.fieldDefinitions.map(function (definition) { return ({
                            label: definition.name,
                            expression: _this.getExpressionForProperty("recordInstance.fieldInstances." + definition.id + ".value")
                        }); })
                    }
                ]
                : []))));
        };
        RecordEditorDesignModel.prototype._getCommonProps = function (componentName, recordDefinition) {
            return {
                label: componentName,
                expression: this.getExpressionForProperty('api'),
                children: [
                    {
                        label: 'Can save',
                        expression: this.getExpressionForProperty('canSave')
                    },
                    {
                        label: 'In read state',
                        expression: this.getExpressionForProperty('inReadState')
                    },
                    {
                        label: 'Is dirty',
                        expression: this.getExpressionForProperty('isDirty')
                    },
                    {
                        label: 'Is valid',
                        expression: this.getExpressionForProperty('isValid')
                    },
                    {
                        label: 'Record definition name',
                        expression: this.getExpressionForProperty('recordDefinitionName')
                    },
                    {
                        label: 'Record instance',
                        expression: this.getExpressionForProperty('recordInstance'),
                        children: recordDefinition ? this._getRecordInstanceChildProps(recordDefinition) : []
                    },
                    {
                        label: 'Record instance ID',
                        expression: this.getExpressionForProperty('recordInstanceId')
                    }
                ]
            };
        };
        RecordEditorDesignModel.prototype._getRecordInstanceChildProps = function (recordDefinition) {
            var _this = this;
            return lodash.flow(function (fieldDefinitions) { return lodash.reject(fieldDefinitions, { resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.attachment }); }, function (fieldDefinitions) { return lodash.map(fieldDefinitions, function (fieldDefinition) {
                var child = {
                    label: fieldDefinition.name,
                    expression: _this.getExpressionForProperty("recordInstance.fieldInstances." + fieldDefinition.id + ".value")
                };
                if (fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection) {
                    var children = (child.autocompleteOptions = lodash.map(fieldDefinition.optionNamesById, function (optionName, optionValue) { return ({
                        label: optionName,
                        expression: _this.getExpressionForProperty("recordDefinition.fieldDefinitionsById[" + fieldDefinition.id + "].optionsById[" + optionValue + "].id")
                    }); }));
                    child.children = [
                        {
                            label: fieldDefinition.name + " (Option name)",
                            expression: _this.getExpressionForProperty("selectionFieldOptionNamesById." + fieldDefinition.id)
                        },
                        {
                            label: 'Options',
                            children: children
                        }
                    ];
                }
                return child;
            }); })(recordDefinition.fieldDefinitions);
        };
        RecordEditorDesignModel.prototype._getComponentName = function (name, recordDefinition) {
            var componentName = this.sandbox.descriptor.name;
            var recordDefinitionName = recordDefinition
                ? this.rxDefinitionNameService.getDisplayName(recordDefinition.name)
                : null;
            if (recordDefinitionName && name) {
                componentName += " (" + recordDefinitionName + ": " + name + ")";
            }
            else if (recordDefinitionName) {
                componentName += " (" + recordDefinitionName + ")";
            }
            else if (name) {
                componentName += " (" + name + ")";
            }
            return componentName;
        };
        return RecordEditorDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var RecordEditorRegistrationModule = /** @class */ (function () {
        function RecordEditorRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.RecordEditor,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorComponent),
                properties: [
                    {
                        name: 'recordInstanceId',
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'allowEdit',
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'label',
                        localizable: true
                    },
                    i1$1.RX_AVAILABLE_ON_DEVICES_PROP_DESC
                ],
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Record editor',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'file_text',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorDesignComponent),
                designComponentModel: RecordEditorDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return RecordEditorRegistrationModule;
    }());
    RecordEditorRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordEditorRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorRegistrationModule, imports: [RecordEditorModule, RecordEditorDesignModule] });
    RecordEditorRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorRegistrationModule, imports: [[RecordEditorModule, RecordEditorDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordEditorRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RecordEditorModule, RecordEditorDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var RecordGridDesignModel = /** @class */ (function (_super) {
        __extends(RecordGridDesignModel, _super);
        function RecordGridDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            _this.rxViewActionValidatorService = _this.injector.get(i1$3.RxViewActionValidatorService);
            _this.rxRecordGridDesignUtilsService = _this.injector.get(RxRecordGridDesignUtilsService);
            _this.rxGuidService = _this.injector.get(i2$2.RxGuidService);
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.preservedRecordDefinition = null;
            _this.preservedRecordAssociationDefinitions = [];
            _this.currentGridDesignProperties = null;
            _this.componentPropertiesChangeFromCanvas$ = new rxjs.Subject();
            _this.columns$ = _this.sandbox.getComponentPropertyValue('columns');
            _this.enableFiltering$ = _this.sandbox.getComponentPropertyValue('enableFiltering');
            _this.recordDefinitionName$ = _this.sandbox.getComponentPropertyValue('recordDefinitionName');
            _this.associationDefinitionName$ = _this.sandbox.getComponentPropertyValue('associationDefinitionName');
            _this.associatedRecordNodeSide$ = _this.sandbox.getComponentPropertyValue('associatedRecordNodeSide');
            _this.childComponentsTree$ = _this.sandbox.getChildComponentsTree();
            _this.viewPresetSelectors$ = _this.sandbox.getComponentsByType(i1$1.RxViewComponentType.ViewPresetSelector);
            _this.gridViewPresets$ = _this.childComponentsTree$.pipe(operators.map(function (components) { return _this.rxRecordGridDesignUtilsService.getGridViewPresetsFromChildData(components); }));
            _this.viewPresetSelectorGuid$ = _this.sandbox.getComponentPropertyValue('viewPresetSelector').pipe(operators.map(function (val) { return _this.extractViewPresetSelectorGuid(val); }), operators.shareReplay({ refCount: true, bufferSize: 1 }));
            _this.selectedPresetsList$ = _this.viewPresetSelectorGuid$.pipe(operators.switchMap(function (guid) { return _this.rxRecordGridDesignUtilsService.getPresetsList(guid); }), operators.distinctUntilChanged(lodash.isEqual), operators.takeUntil(_this.sandbox.destroyed$));
            _this.rowActionButtonGuids$ = _this.sandbox.getLayout(_this.sandbox.guid).pipe(operators.filter(Boolean), operators.map(function (layout) {
                var rowActionsOutlet = lodash.find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });
                return lodash.head(rowActionsOutlet.columns).children;
            }), operators.shareReplay(1));
            return _this;
        }
        RecordGridDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({}, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE), initialProperties);
        };
        RecordGridDesignModel.prototype.rxInit = function () {
            var _this = this;
            var initialProps = Object.assign({ bordered: true, expandable: false, name: null, mode: exports.RecordGridDesignDefinitionMode.Record, recordDefinitionName: null, showDataForAllLocales: false, associationDefinitionName: null, associatedRecordId: null, associatedRoleName: null, enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple, styles: null, cardLayoutWidth: null, enableFiltering: true, getDataForHiddenColumns: true, requiredFilters: 0, enableFilterPresets: true, defaultFilterPreset: null, initialSortColumn: null, columns: [], filterMode: exports.RecordGridFilterMode.Basic, filters: { basicFilters: [], filtersJson: null }, filterExpression: null, filterPresets: [], striped: false }, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE);
            this.recordDefinition$ = this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) { return _this.getRecordDefinition(recordDefinitionName); }), operators.shareReplay(1));
            this.recordAssociationDefinitions$ = this.recordDefinitionName$.pipe(operators.mergeMap(function (recordDefinitionName) { return _this.getRecordAssociationDefinitions(recordDefinitionName); }), operators.shareReplay(1));
            var columnComponents$ = this.childComponentsTree$.pipe(operators.map(function (components) { return components.filter(function (component) { return component.type === RX_RECORD_GRID.components.column; }); }), 
            // ignore child action button component updates
            operators.distinctUntilChanged(lodash.isEqual));
            var basicRecordGridFilters$ = this.childComponentsTree$.pipe(operators.map(function (components) { return _this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(components); }), operators.distinctUntilChanged(lodash.isEqual));
            var filterPresets$ = this.childComponentsTree$.pipe(operators.map(function (components) { return _this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(components); }), operators.distinctUntilChanged(lodash.isEqual));
            this.actionButtonComponents$ = this.childComponentsTree$.pipe(operators.withLatestFrom(this.rowActionButtonGuids$), operators.map(function (_b) {
                var _c = __read(_b, 2), definitions = _c[0], rowActionButtonGuids = _c[1];
                return _this.rxRecordGridDesignUtilsService
                    .getActionButtonDescriptorsFromChildData(definitions)
                    .filter(function (definition) { return !lodash.includes(rowActionButtonGuids, definition.guid); });
            }));
            this.rowActionButtonComponents$ = this.childComponentsTree$.pipe(operators.withLatestFrom(this.rowActionButtonGuids$), operators.map(function (_b) {
                var _c = __read(_b, 2), definitions = _c[0], rowActionButtonGuids = _c[1];
                return _this.rxRecordGridDesignUtilsService
                    .getActionButtonDescriptorsFromChildData(definitions)
                    .filter(function (definition) { return lodash.includes(rowActionButtonGuids, definition.guid); });
            }));
            // remove grid view presets in case if bound preset selector is removed
            this.viewPresetSelectors$
                .pipe(operators.map(function (viewPresetSelectors) { return viewPresetSelectors.map(function (selector) { return selector.guid; }).sort(); }), operators.distinctUntilChanged(lodash.isEqual), operators.withLatestFrom(this.viewPresetSelectorGuid$), operators.filter(function (_b) {
                var _c = __read(_b, 2), viewPresetSelectors = _c[0], viewPresetSelectorGuid = _c[1];
                return viewPresetSelectorGuid && !viewPresetSelectors.includes(viewPresetSelectorGuid);
            }), operators.switchMap(function () { return _this.childComponentsTree$.pipe(operators.take(1)); }), operators.map(function (components) { return components.filter(function (comp) { return comp.type !== RX_RECORD_GRID.components.viewPreset; }); }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (components) {
                _this.sandbox.setChildren(components);
                _this.sandbox.updateComponentProperties({ viewPresetSelector: null });
            });
            this.sandbox.viewModelsInitialized$
                .pipe(operators.withLatestFrom(this.rowActionButtonComponents$), operators.map(function (_b) {
                var _c = __read(_b, 2), viewModelsInitialized = _c[0], rowActionButtons = _c[1];
                return rowActionButtons;
            }), operators.filter(function (rowActionButtons) { return !!rowActionButtons.length; }))
                .subscribe(function (rowActionButtons) {
                rowActionButtons.forEach(function (rowActionButton) {
                    var model = _this.sandbox.getComponentModel(rowActionButton.guid);
                    model.setValidationIssues([]);
                });
            });
            rxjs.merge(this.sandbox.componentProperties$.pipe(operators.skip(1)), this.componentPropertiesChangeFromCanvas$)
                .pipe(operators.distinctUntilChanged(function (oldValue, newValue) { return lodash.isEqual(_this.currentGridDesignProperties, newValue); }), operators.mergeMap(function (componentDesignProperties) {
                var previousComponentDesignProperties = _this.currentGridDesignProperties;
                if (previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName) {
                    return rxjs.zip(_this.getRecordDefinition(componentDesignProperties.recordDefinitionName), _this.getRecordAssociationDefinitions(componentDesignProperties.recordDefinitionName)).pipe(operators.map(function () { return [previousComponentDesignProperties, componentDesignProperties]; }));
                }
                else {
                    return rxjs.of([previousComponentDesignProperties, componentDesignProperties]);
                }
            }), operators.withLatestFrom(this.actionButtonComponents$, this.rowActionButtonComponents$, this.gridViewPresets$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 4), _d = __read(_c[0], 2), previousComponentDesignProperties = _d[0], componentDesignProperties = _d[1], actionButtonComponents = _c[1], rowActionButtonComponents = _c[2], gridViewPresets = _c[3];
                var recordDefinition = _this.preservedRecordDefinition;
                var recordAssociationDefinitions = _this.preservedRecordAssociationDefinitions;
                var propertiesToUpdate;
                if (!componentDesignProperties.enableFiltering) {
                    propertiesToUpdate = {
                        enableFilterPresets: false
                    };
                }
                else if (!previousComponentDesignProperties.enableFiltering && componentDesignProperties.enableFiltering) {
                    propertiesToUpdate = {
                        enableFilterPresets: true
                    };
                }
                if (previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName) {
                    propertiesToUpdate = {
                        filterPresets: [],
                        filters: { basicFilters: [], filtersJson: null },
                        initialSortColumn: null,
                        associationDefinitionName: null,
                        filterExpression: null
                    };
                    if (recordDefinition) {
                        var columns = _this.rxRecordGridDesignUtilsService.getDefaultColumns(recordDefinition);
                        var payloads = _this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(columns, null);
                        payloads.push.apply(payloads, __spreadArray([], __read(actionButtonComponents)));
                        _this.sandbox.setChildren(payloads);
                        propertiesToUpdate.columns = columns;
                    }
                    else {
                        _this.sandbox.setChildren(actionButtonComponents);
                        propertiesToUpdate.columns = [];
                    }
                }
                else {
                    var childrenModels = lodash.pick(componentDesignProperties, 'columns', 'initialSortColumn', 'filters', 'filterPresets');
                    var previousChildrenModels = lodash.pick(previousComponentDesignProperties, 'columns', 'initialSortColumn', 'filters', 'filterPresets');
                    if (!lodash.isEqual(previousChildrenModels, childrenModels)) {
                        var payloads = _this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(childrenModels.columns, childrenModels.initialSortColumn);
                        var newInspectorColumns = _this.rxRecordGridDesignUtilsService.getInspectorColumnsFromDesignData(payloads);
                        payloads.push.apply(payloads, __spreadArray([], __read(_this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(childrenModels.filters.basicFilters || []))));
                        var filterPresetComponentPayloads = _this.rxRecordGridDesignUtilsService.getGridFilterPresetComponentPayloads(childrenModels.filterPresets, newInspectorColumns.filter(function (column) { return column.filterable; }));
                        payloads.push.apply(payloads, __spreadArray([], __read(filterPresetComponentPayloads)));
                        childrenModels.filterPresets =
                            _this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(filterPresetComponentPayloads);
                        payloads.push.apply(payloads, __spreadArray(__spreadArray(__spreadArray([], __read(actionButtonComponents)), __read(rowActionButtonComponents)), __read(gridViewPresets)));
                        _this.sandbox.setChildren(payloads);
                        propertiesToUpdate = {
                            columns: newInspectorColumns,
                            initialSortColumn: _this.rxRecordGridDesignUtilsService.getInitialSortColumnModel(newInspectorColumns),
                            filterPresets: childrenModels.filterPresets
                        };
                    }
                }
                if (previousComponentDesignProperties.filterMode !== componentDesignProperties.filterMode) {
                    if (componentDesignProperties.filterMode === exports.RecordGridFilterMode.Basic) {
                        propertiesToUpdate = {
                            filterExpression: null
                        };
                    }
                    else {
                        propertiesToUpdate = {
                            filters: { basicFilters: [], filtersJson: null }
                        };
                    }
                }
                if (previousComponentDesignProperties.associationDefinitionName !==
                    componentDesignProperties.associationDefinitionName) {
                    propertiesToUpdate = Object.assign(Object.assign({}, (propertiesToUpdate || {})), { associatedRecordNodeSide: _this.getAssociatedRecordNodeSide(componentDesignProperties, recordAssociationDefinitions) });
                }
                if (previousComponentDesignProperties.mode !== componentDesignProperties.mode) {
                    propertiesToUpdate = {
                        associationDefinitionName: null,
                        associatedRecordId: null,
                        associatedRoleName: null,
                        associatedRecordNodeSide: null
                    };
                }
                componentDesignProperties = Object.assign(Object.assign({}, componentDesignProperties), propertiesToUpdate);
                if (previousComponentDesignProperties.enableFiltering && !componentDesignProperties.enableFiltering) {
                    propertiesToUpdate = Object.assign(Object.assign({}, propertiesToUpdate), { requiredFilters: 0 });
                }
                _this.updateComponentPropertiesAndConfig(componentDesignProperties, propertiesToUpdate, recordDefinition, recordAssociationDefinitions);
            });
            rxjs.combineLatest([
                this.recordDefinitionName$.pipe(operators.map(function (recordDefinitionName) { return recordDefinitionName
                    ? null
                    : _this.sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName'); })),
                columnComponents$.pipe(operators.switchMap(function (columns) { return _this.validateColumns(columns); })),
                this.sandbox.getComponentPropertyValue('styles').pipe(operators.map(i1$3.validateCssClassNames)),
                this.sandbox
                    .getComponentPropertyValue('mode')
                    .pipe(operators.switchMap(function (mode) { return mode === exports.RecordGridDesignDefinitionMode.Association
                    ? _this.validateAssociationModeProps()
                    : _this.actionButtonComponents$.pipe(operators.switchMap(function (components) { return _this.validateActionButtons(components); })); })),
                this.rowActionButtonComponents$.pipe(operators.switchMap(function (rowActionButtons) { return _this.validateRowActions(rowActionButtons); })),
                this.sandbox
                    .getComponentPropertyValue(i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME)
                    .pipe(operators.map(i1$3.validateAvailableOnDevicesProp))
            ])
                .pipe(operators.map(lodash.compact), operators.map(lodash.flatten), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (issues) {
                _this.sandbox.setValidationIssues(issues);
            });
            // set initial properties and inspector config
            rxjs.combineLatest([
                this.sandbox.componentProperties$,
                this.recordDefinition$,
                this.recordAssociationDefinitions$,
                columnComponents$,
                basicRecordGridFilters$,
                filterPresets$
            ])
                .pipe(operators.take(1), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 6), componentProperties = _c[0], recordDefinition = _c[1], recordAssociationDefinitions = _c[2], columnComponents = _c[3], basicRecordGridFilters = _c[4], filterPresets = _c[5];
                var componentDesignProperties = _this.rxRecordGridDesignUtilsService.getComponentDesignProperties(componentProperties, initialProps, columnComponents, basicRecordGridFilters, filterPresets);
                _this.updateComponentPropertiesAndConfig(componentDesignProperties, componentDesignProperties, recordDefinition, recordAssociationDefinitions);
            });
            var name$ = this.sandbox
                .getComponentPropertyValue('name')
                .pipe(operators.shareReplay(1), operators.takeUntil(this.sandbox.destroyed$));
            var associationDefinitionDisplayName$ = this.associationDefinitionName$.pipe(operators.map(function (name) { return _this.rxDefinitionNameService.getDisplayName(name); }), operators.shareReplay(1), operators.takeUntil(this.sandbox.destroyed$));
            this.rxRecordGridDesignUtilsService
                .getColumnDataDictionaryBranch(this.sandbox.guid, this.sandbox.descriptor.name, name$, columnComponents$, this.recordDefinition$, associationDefinitionDisplayName$)
                .pipe(operators.skipWhile(lodash.isEmpty), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (dataDictionaryBranch) {
                _this.sandbox.setCommonDataDictionary(dataDictionaryBranch);
            });
            rxjs.combineLatest([
                this.recordDefinitionName$.pipe(operators.map(function (name) { return _this.rxDefinitionNameService.getDisplayName(name); })),
                associationDefinitionDisplayName$,
                name$
            ])
                .pipe(operators.map(function (names) {
                var _b;
                return (_b = _this.rxRecordGridDesignUtilsService).getComponentName.apply(_b, __spreadArray([_this.sandbox.descriptor.name], __read(names)));
            }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (name) {
                // Set name to be used in the data dictionary for set property action if record grid will have child action buttons.
                _this.sandbox.setSettablePropertiesDataDictionary(name, []);
            });
            // updates grid view presets when view preset changes
            this.selectedPresetsList$
                .pipe(operators.skip(1), operators.withLatestFrom(this.childComponentsTree$, this.columns$), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 3), selectedPresetsList = _c[0], childComponents = _c[1], columns = _c[2];
                _this.updatePresetViewComponents(childComponents, selectedPresetsList, columns);
            });
        };
        RecordGridDesignModel.prototype.updatePresetViewComponents = function (childComponents, selectedPresetsList, columns) {
            var _this = this;
            var gridViewPresetComponents = childComponents.filter(function (c) { return c.type === RX_RECORD_GRID.components.viewPreset; });
            var gridViewPresetPayloads = selectedPresetsList.map(function (_b) {
                var guid = _b.guid;
                var existing = gridViewPresetComponents.find(function (c) { return c.data.viewPresetGuid === guid; });
                return existing !== null && existing !== void 0 ? existing : _this.rxRecordGridDesignUtilsService.getGridViewPresetPayload(guid, columns);
            });
            this.sandbox.setChildrenByType(gridViewPresetPayloads, [RX_RECORD_GRID.components.viewPreset]);
        };
        RecordGridDesignModel.prototype.getAssociatedRecordNodeSide = function (componentDesignProperties, recordAssociationDefinitions) {
            var selectedAssociationDefinition = componentDesignProperties.associationDefinitionName
                ? recordAssociationDefinitions.find(function (_b) {
                    var name = _b.name;
                    return name === componentDesignProperties.associationDefinitionName;
                })
                : null;
            return selectedAssociationDefinition
                ? selectedAssociationDefinition.nodeAId === componentDesignProperties.recordDefinitionName
                    ? i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value
                    : i2$5.RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value
                : null;
        };
        RecordGridDesignModel.prototype.actionButtonDropPredicate = function (data) {
            return data.draggedViewComponentDescriptor.type === i1$1.RxViewComponentType.ActionButton;
        };
        RecordGridDesignModel.prototype.getPropertiesByName = function (properties) {
            return this.rxRecordGridDesignUtilsService.getComponentProperties(properties);
        };
        RecordGridDesignModel.prototype.setRowActions = function (rowActions) {
            var _this = this;
            this.rowActionButtonGuids$
                .pipe(operators.take(1), operators.withLatestFrom(this.childComponentsTree$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), rowActionButtonGuids = _c[0], childComponentsTree = _c[1];
                var childComponentPayloads = childComponentsTree.filter(function (childComponent) { return !lodash.includes(rowActionButtonGuids, childComponent.guid); });
                childComponentPayloads.push.apply(childComponentPayloads, __spreadArray([], __read(_this.rxRecordGridDesignUtilsService.getRowActionButtonPayloads(rowActions))));
                _this.sandbox.setChildren(childComponentPayloads);
                _this.toggleActionsColumn(rowActions.length > 0);
            });
        };
        RecordGridDesignModel.prototype.extractViewPresetSelectorGuid = function (val) {
            var _a;
            var matches = val === null || val === void 0 ? void 0 : val.match(/^\${view\.components\.([0-9a-z-]+)\.api}$/);
            return (_a = (matches && matches[1])) !== null && _a !== void 0 ? _a : null;
        };
        RecordGridDesignModel.prototype.toggleActionsColumn = function (showActionsColumn) {
            var _this = this;
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function (componentProperties) {
                var columns = lodash.cloneDeep(componentProperties.columns);
                var actionsColumn = lodash.find(columns, { fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id });
                if (showActionsColumn && !actionsColumn) {
                    columns.push({
                        fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id,
                        guid: _this.rxGuidService.generate(),
                        title: RX_RECORD_GRID.actionsColumnFieldDefinition.name,
                        visible: true,
                        index: columns.length,
                        filterable: false,
                        sortable: false,
                        searchable: false
                    });
                }
                else if (!showActionsColumn) {
                    lodash.pull(columns, actionsColumn);
                    columns.forEach(function (column, index) {
                        column.index = index;
                    });
                }
                _this.updateComponentPropertiesAndConfig(componentProperties, {
                    columns: columns
                }, _this.preservedRecordDefinition, _this.preservedRecordAssociationDefinitions);
            });
        };
        RecordGridDesignModel.prototype.updateComponentPropertiesAndConfig = function (componentDesignProperties, propertiesToUpdate, recordDefinition, recordAssociationDefinitions) {
            this.currentGridDesignProperties = componentDesignProperties;
            if (propertiesToUpdate) {
                this.sandbox.updateComponentProperties(propertiesToUpdate);
            }
            this.sandbox.updateInspectorConfig(this.rxRecordGridDesignUtilsService.getInspector(componentDesignProperties, recordDefinition, recordAssociationDefinitions));
        };
        RecordGridDesignModel.prototype.getRecordDefinition = function (recordDefinitionName) {
            var _this = this;
            if (recordDefinitionName) {
                return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(operators.catchError(function (error) { return rxjs.of(null); }), operators.tap(function (recordDefinition) { return (_this.preservedRecordDefinition = recordDefinition); }));
            }
            else {
                this.preservedRecordDefinition = null;
                return rxjs.of(null);
            }
        };
        RecordGridDesignModel.prototype.getRecordAssociationDefinitions = function (recordDefinitionName) {
            var _this = this;
            if (recordDefinitionName) {
                return this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(operators.map(function (result) { return result[recordDefinitionName] || []; }), operators.catchError(function (error) { return rxjs.of([]); }), operators.tap(function (recordAssociationDefinitions) { return (_this.preservedRecordAssociationDefinitions = recordAssociationDefinitions); }));
            }
            else {
                this.preservedRecordAssociationDefinitions = [];
                return rxjs.of([]);
            }
        };
        RecordGridDesignModel.prototype.validateColumns = function (columns) {
            return columns.length
                ? this.validateColumnActions(columns)
                : rxjs.of([this.sandbox.createError('Record grid must have at least one column.', 'columns')]);
        };
        RecordGridDesignModel.prototype.validateColumnActions = function (columns) {
            var _this = this;
            return rxjs.combineLatest(columns.map(function (column) {
                var actionViewComponents = lodash.filter(column.children, { type: i1$1.RxViewComponentType.Action });
                return _this.rxViewActionValidatorService.validate(actionViewComponents, 'columns').pipe(operators.map(function (issues) { return issues.map(function (issue) { return (Object.assign(Object.assign({}, issue), { data: Object.assign(Object.assign({}, issue.data), { columnGuid: column.guid }) })); }); }));
            })).pipe(operators.map(lodash.flatten));
        };
        RecordGridDesignModel.prototype.validateRowActions = function (rowActionButtons) {
            var _this = this;
            return rowActionButtons.length
                ? rxjs.combineLatest(rowActionButtons.map(function (rowActionButton, index) { return _this.rxViewActionValidatorService.validate(rowActionButton.children, 'rowActions').pipe(operators.map(function (issues) { return issues.map(function (issue) { return (Object.assign(Object.assign({}, issue), { data: Object.assign(Object.assign({}, issue.data), { rowActionIndex: index }) })); }); })); })).pipe(operators.map(lodash.flatten))
                : rxjs.of([]);
        };
        RecordGridDesignModel.prototype.validateAssociationModeProps = function () {
            var _this = this;
            return rxjs.combineLatest([
                rxjs.combineLatest([this.associationDefinitionName$, this.associatedRecordNodeSide$]).pipe(operators.map(function (_b) {
                    var _c = __read(_b, 2), associationDefinitionName = _c[0], associatedRecordNodeSide = _c[1];
                    if (associationDefinitionName) {
                        return associatedRecordNodeSide
                            ? null
                            : _this.sandbox.createError('Associated record node side cannot be blank.', 'associatedRecordNodeSide');
                    }
                    else {
                        return _this.sandbox.createError('Association definition name cannot be blank.', 'associationDefinitionName');
                    }
                })),
                this.sandbox
                    .getComponentPropertyValue('associatedRecordId')
                    .pipe(operators.map(function (associatedRecordId) { return associatedRecordId
                    ? null
                    : _this.sandbox.createError('Associated record ID cannot be blank.', 'associatedRecordId'); }))
            ]).pipe(operators.map(lodash.compact));
        };
        RecordGridDesignModel.prototype.validateActionButtons = function (components) {
            var _this = this;
            var deleteActions = lodash.flatten(components.map(function (component) { return component.children; })).filter(function (_b) {
                var data = _b.data;
                return data.name === 'rxDeleteRecordsAction' && data.recordDefinitionName;
            });
            return deleteActions.length
                ? rxjs.combineLatest(deleteActions.map(function (_b) {
                    var data = _b.data;
                    return _this.rxRecordDefinitionCacheService
                        .getRecordDefinition(data.recordDefinitionName)
                        .pipe(operators.map(function (_b) {
                        var resourceType = _b.resourceType;
                        return resourceType === i1$4.RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType
                            ? _this.sandbox.createWarning('You have configured a Record grid action to delete Join records. Please ensure that one or more processes or rules have been defined to perform the deletion of the selected Join record instances.')
                            : null;
                    }));
                })).pipe(operators.map(lodash.compact))
                : rxjs.of([]);
        };
        return RecordGridDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var RecordGridExpressionConfigurator = /** @class */ (function (_super) {
        __extends(RecordGridExpressionConfigurator, _super);
        function RecordGridExpressionConfigurator(injector, componentGuid, componentModel) {
            var _this = _super.call(this, injector, componentGuid, componentModel) || this;
            _this.componentGuid = componentGuid;
            _this.componentModel = componentModel;
            _this.rxDefinitionNameService = _this.injector.get(i1$2.RxDefinitionNameService);
            _this.rxRecordGridUtilsService = _this.injector.get(RxRecordGridUtilsService);
            _this.rxRecordDefinitionCacheService = _this.injector.get(i1$4.RxRecordDefinitionCacheService);
            var filterExpressionBranch$ = _this.getComponentCommonDataDictionary().pipe(operators.switchMap(function (componentCommonBranch) { return componentCommonBranch
                ? componentModel.recordDefinition$.pipe(operators.concatMap(function (recordDefinition) { return _this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(operators.concatMap(function (associationDescriptors) { return associationDescriptors.length
                    ? rxjs.forkJoin(associationDescriptors.map(function (associationDescriptor) { return _this.rxRecordDefinitionCacheService
                        .getRecordDefinition(associationDescriptor.recordDefinitionName)
                        .pipe(operators.map(function (associationRecordDefinition) { return (Object.assign(Object.assign({}, associationDescriptor), { recordDefinition: associationRecordDefinition })); })); }))
                    : rxjs.of([]); }), operators.map(function (associationDescriptors) { return recordDefinition
                    ? {
                        label: 'Filter by',
                        children: __spreadArray([
                            {
                                label: _this.rxDefinitionNameService.getDisplayName(recordDefinition.name),
                                icon: 'd-icon-file_o_gear',
                                children: recordDefinition.fieldDefinitions.map(function (fieldDefinition) {
                                    var selectionList = fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection
                                        ? lodash.map(fieldDefinition.optionNamesById, function (optionName, optionValue) { return ({
                                            label: optionName,
                                            expression: "${view.components." + componentGuid + ".recordDefinition.fieldDefinitionsById[" + fieldDefinition.id + "].optionsById[" + optionValue + "].id}"
                                        }); })
                                        : undefined;
                                    return {
                                        label: fieldDefinition.name,
                                        icon: 'd-icon-file_o_gear',
                                        expression: "'" + fieldDefinition.id + "'",
                                        children: fieldDefinition.resourceType === i1$4.RX_RECORD_DEFINITION.resourceTypes.selection
                                            ? [
                                                {
                                                    label: 'Options',
                                                    children: selectionList
                                                }
                                            ]
                                            : null,
                                        autocompleteOptions: selectionList
                                    };
                                })
                            }
                        ], __read((associationDescriptors
                            ? associationDescriptors.map(function (descriptor) { return ({
                                label: _this.rxDefinitionNameService.getDisplayName(descriptor.associationDefinition.name),
                                icon: 'd-icon-file_o_gear',
                                children: descriptor.recordDefinition.fieldDefinitions.map(function (fieldDefinition) { return ({
                                    label: fieldDefinition.name,
                                    icon: 'd-icon-file_o_gear',
                                    expression: "'${recordContext._associations." + descriptor.associationDefinition.guid + "." + descriptor.nodeSide + "[0]." + fieldDefinition.id + "}'"
                                }); })
                            }); })
                            : [])))
                    }
                    : []; })); }), operators.map(function (filterByBranch) { return (Object.assign(Object.assign({}, componentCommonBranch), { children: __spreadArray([filterByBranch], __read(componentCommonBranch.children)) })); }))
                : rxjs.of(null); }));
            _this.configureForProperty({
                propertyPath: 'filterExpression',
                operators: _this.getOperatorRowsByGroup(i1$2.ExpressionOperatorGroup.AllServer),
                dataDictionary$: _this.getCommonDataDictionary(filterExpressionBranch$).pipe(operators.map(function (dataDictionary) { return __spreadArray([
                    RX_RECORD_GRID_DESIGN.keywords
                ], __read((dataDictionary.filter(function (dataDictionaryBranch) { return dataDictionaryBranch.label !== 'General' && dataDictionaryBranch.label !== 'Functions'; }) || []))); }))
            });
            return _this;
        }
        return RecordGridExpressionConfigurator;
    }(i1$3.RxViewComponentExpressionConfigurator));

    var RecordGridRegistrationModule = /** @class */ (function () {
        function RecordGridRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService, rxRecordGridQueryExpressionEvaluatorService, rxRecordQueryExpressionEvaluatorService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.rxRecordGridQueryExpressionEvaluatorService = rxRecordGridQueryExpressionEvaluatorService;
            this.rxRecordQueryExpressionEvaluatorService = rxRecordQueryExpressionEvaluatorService;
            rxViewComponentRegistryService.register({
                type: RX_RECORD_GRID.type,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridComponent),
                properties: [
                    {
                        name: 'recordDefinitionName',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'enableRowSelection',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'enableFiltering',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'getDataForHiddenColumns',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'requiredFilters',
                        type: i1$1.ViewComponentPropertyType.Number,
                        designType: i1$1.ViewComponentPropertyType.Number,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'showDataForAllLocales',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'expandable',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean
                    },
                    {
                        name: 'bordered',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'striped',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'defaultFilterPreset',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'filters',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'filterExpression',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true,
                        evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService
                    },
                    {
                        name: 'selectedRows',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'firstSelectedRow',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'clickableRow',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'selectedRowCount',
                        type: i1$1.ViewComponentPropertyType.Number
                    },
                    {
                        name: 'totalRowCount',
                        type: i1$1.ViewComponentPropertyType.Number
                    },
                    {
                        name: 'isUserAllowedToDeleteRecords',
                        type: i1$1.ViewComponentPropertyType.Boolean
                    },
                    {
                        name: 'associationDefinitionName',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'associatedRecordNodeSide',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'associatedRecordId',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'associatedRoleName',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'enableFilterPresets',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'queryExpression',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'lastRefreshTime',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'viewPresetSelector',
                        enableExpressionEvaluation: true
                    },
                    i1$1.RX_AVAILABLE_ON_DEVICES_PROP_DESC
                ],
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    },
                    {
                        name: RX_RECORD_GRID.rowActionsOutletName
                    }
                ],
                name: 'Record grid',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'table',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridDesignComponent),
                designComponentModel: RecordGridDesignModel,
                expressionConfigurator: RecordGridExpressionConfigurator,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            }, {
                type: RX_RECORD_GRID.components.column,
                configPropertyName: 'columns',
                properties: [
                    {
                        name: 'title',
                        type: i1$1.ViewComponentPropertyType.String,
                        localizable: true
                    },
                    {
                        name: 'fieldId',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'visible',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'sortable',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'filterable',
                        type: i1$1.ViewComponentPropertyType.String,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'clickable',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'index',
                        type: i1$1.ViewComponentPropertyType.Number
                    },
                    {
                        name: 'alignment',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'cellDisplayProperties',
                        designType: i1$1.ViewComponentPropertyType.Array,
                        type: i1$1.ViewComponentPropertyType.Array
                    },
                    {
                        name: 'wrapText',
                        type: i1$1.ViewComponentPropertyType.Boolean
                    },
                    {
                        name: 'typeaheadKeystrokeCount',
                        type: i1$1.ViewComponentPropertyType.Number
                    },
                    {
                        name: 'additionalQueryCriteria',
                        type: i1$1.ViewComponentPropertyType.String,
                        enableExpressionEvaluation: true,
                        evaluatorService: this.rxRecordQueryExpressionEvaluatorService
                    }
                ],
                isDataComponent: true,
                isContainerComponent: true
            }, {
                type: RX_RECORD_GRID.components.filter,
                configPropertyName: 'recordGridFilters',
                properties: [
                    {
                        name: 'value',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'fieldId',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: '$DISPLAYVALUE$',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'label',
                        localizable: true
                    }
                ],
                isDataComponent: true
            }, {
                type: RX_RECORD_GRID.components.filterPreset,
                configPropertyName: 'predefinedFilterPresets',
                properties: [
                    {
                        name: 'title',
                        type: i1$1.ViewComponentPropertyType.String,
                        localizable: true
                    },
                    {
                        name: 'filters',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'filterExpression',
                        enableExpressionEvaluation: true,
                        evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService
                    }
                ],
                isDataComponent: true,
                isContainerComponent: true
            }, {
                type: RX_RECORD_GRID.components.viewPreset,
                configPropertyName: 'viewPresets',
                properties: [
                    {
                        name: 'viewPresetGuid',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'filters',
                        type: i1$1.ViewComponentPropertyType.String
                    }
                ],
                isDataComponent: true,
                isContainerComponent: true
            }, {
                type: RX_RECORD_GRID.components.columnViewPreset,
                configPropertyName: 'columnViewPresets',
                properties: [
                    {
                        name: 'fieldId',
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'index',
                        designType: i1$1.ViewComponentPropertyType.Number,
                        type: i1$1.ViewComponentPropertyType.Number
                    },
                    {
                        name: 'visible',
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        type: i1$1.ViewComponentPropertyType.Boolean
                    },
                    {
                        name: 'sortable',
                        designType: i1$1.ViewComponentPropertyType.Object,
                        type: i1$1.ViewComponentPropertyType.Object
                    }
                ],
                isDataComponent: true,
                isContainerComponent: true
            });
        }
        return RecordGridRegistrationModule;
    }());
    RecordGridRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }, { token: RxRecordGridQueryExpressionEvaluatorService }, { token: i1__namespace$4.RxRecordQueryExpressionEvaluatorService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RecordGridRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRegistrationModule, imports: [RecordGridModule, RecordGridDesignModule] });
    RecordGridRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRegistrationModule, imports: [[RecordGridModule, RecordGridDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordGridRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RecordGridModule, RecordGridDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }, { type: RxRecordGridQueryExpressionEvaluatorService }, { type: i1__namespace$4.RxRecordQueryExpressionEvaluatorService }]; } });

    var RichTextDesignModel = /** @class */ (function (_super) {
        __extends(RichTextDesignModel, _super);
        function RichTextDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.html$ = _this.sandbox.getComponentPropertyValue('html');
            return _this;
        }
        RichTextDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ name: null, html: null }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        RichTextDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
            });
            this.sandbox.componentProperties$.subscribe(function (properties) {
                var validationIssues = properties.html ? [] : [_this.sandbox.createError('Rich text value cannot be blank.')];
                validationIssues.push.apply(validationIssues, __spreadArray([], __read(i1$3.validateStandardProps(properties))));
                _this.sandbox.setValidationIssues(validationIssues);
            });
            this.sandbox.getComponentPropertyValue('name').subscribe(function (name) {
                var componentName = name ? _this.sandbox.descriptor.name + " (" + name + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
            });
        };
        RichTextDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Rich text component')
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        RichTextDesignModel.prototype.updateComponentProperties = function (props) {
            this.sandbox.updateComponentProperties(props);
        };
        return RichTextDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var RichTextRegistrationModule = /** @class */ (function () {
        function RichTextRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver, rxRichTextExpressionEvaluatorService) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxRichTextExpressionEvaluatorService = rxRichTextExpressionEvaluatorService;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.RichText,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextComponent),
                properties: __spreadArray([
                    {
                        name: 'html',
                        enableExpressionEvaluation: true,
                        evaluatorService: this.rxRichTextExpressionEvaluatorService,
                        localizable: true
                    }
                ], __read(i1$1.RX_STANDARD_PROPS_DESC)),
                name: 'Rich text',
                isContainerComponent: true,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'text',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextDesignComponent),
                designComponentModel: RichTextDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return RichTextRegistrationModule;
    }());
    RichTextRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }, { token: RxRichTextExpressionEvaluatorService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RichTextRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextRegistrationModule, imports: [RichTextModule, RichTextDesignModule] });
    RichTextRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextRegistrationModule, providers: [RichTextDefinitionAdapterService], imports: [[RichTextModule, RichTextDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RichTextRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RichTextModule, RichTextDesignModule],
                        providers: [RichTextDefinitionAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }, { type: RxRichTextExpressionEvaluatorService }]; } });

    var TabPanelDesignModel = /** @class */ (function (_super) {
        __extends(TabPanelDesignModel, _super);
        function TabPanelDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.tabContainerGuids$ = _this.sandbox.getChildComponentGuids().pipe(operators.shareReplay(1));
            _this.tabContainerComponents$ = _this.sandbox
                .getChildComponents(function (component) { return component.type === i1$1.RxViewComponentType.TabContainer; })
                .pipe(operators.shareReplay(1), operators.takeUntil(_this.sandbox.destroyed$));
            _this.selectedTabGuid$ = new rxjs.ReplaySubject(null);
            return _this;
        }
        TabPanelDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ name: null }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        TabPanelDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
            });
            this.sandbox.componentProperties$.subscribe(function (componentProperties) { return _this.validate(componentProperties); });
            this.tabContainerGuids$
                .pipe(operators.map(function (guids) { return !lodash.isEmpty(guids); }), operators.take(1))
                .subscribe(function (hasChildComponents) {
                if (!hasChildComponents) {
                    _this.sandbox.setChildren([
                        {
                            type: i1$1.RxViewComponentType.TabContainer,
                            data: {
                                label: 'Tab 1'
                            }
                        },
                        {
                            type: i1$1.RxViewComponentType.TabContainer,
                            data: {
                                label: 'Tab 2'
                            }
                        }
                    ]);
                }
            });
            this.sandbox.getComponentPropertyValue('name').subscribe(function (name) {
                var componentName = name ? _this.sandbox.descriptor.name + " (" + name + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    },
                    {
                        label: 'Active Tab Index',
                        expression: _this.getExpressionForProperty('activeTabIndex')
                    }
                ]);
            });
        };
        TabPanelDesignModel.prototype.addTab = function () {
            this.sandbox.addComponent({
                type: i1$1.RxViewComponentType.TabContainer,
                propertiesByName: {
                    label: 'New tab'
                }
            });
        };
        TabPanelDesignModel.prototype.removeTab = function (guid) {
            var _this = this;
            this.sandbox.removeComponents([guid]);
            rxjs.combineLatest([this.selectedTabGuid$, this.tabContainerGuids$])
                .pipe(operators.take(1), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), selectedTabGuid = _b[0], tabContainerGuids = _b[1];
                if (guid === selectedTabGuid) {
                    _this.selectTab(tabContainerGuids[0]);
                }
            });
        };
        TabPanelDesignModel.prototype.selectTab = function (guid, skipSelectComponent) {
            var _this = this;
            if (skipSelectComponent === void 0) { skipSelectComponent = false; }
            this.selectedTabGuid$.next(guid);
            if (!skipSelectComponent) {
                setTimeout(function () {
                    _this.sandbox.selectComponent(guid);
                });
            }
        };
        TabPanelDesignModel.prototype.dropPredicate = function () {
            return false;
        };
        TabPanelDesignModel.prototype.moveComponent = function (guid, insertIndex) {
            this.sandbox.moveComponent(guid, insertIndex, this.sandbox.guid);
        };
        TabPanelDesignModel.prototype.validate = function (properties) {
            this.sandbox.setValidationIssues(i1$3.validateStandardProps(properties));
        };
        TabPanelDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    tooltip: new i1$2.Tooltip('Enter a name to uniquely identify the Tab panel')
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        return TabPanelDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var TabContainerDesignModel = /** @class */ (function (_super) {
        __extends(TabContainerDesignModel, _super);
        function TabContainerDesignModel(injector, sandbox) {
            var _this = _super.call(this, injector, sandbox) || this;
            _this.injector = injector;
            _this.sandbox = sandbox;
            _this.componentProperties$ = _this.sandbox.componentProperties$;
            _this.hiddenOnCanvas$ = new rxjs.BehaviorSubject(false);
            _this.selectedTabGuid$ = new rxjs.Subject();
            _this.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
            });
            rxjs.combineLatest([
                _this.sandbox
                    .getComponentPropertyValue('label')
                    .pipe(operators.map(function (value) { return (value ? null : _this.sandbox.createError('Label cannot be blank.', 'label')); })),
                _this.sandbox.getComponentPropertyValue('styles').pipe(operators.map(i1$3.validateCssClassNames)),
                _this.sandbox
                    .getComponentPropertyValue(i1$1.RX_AVAILABLE_ON_DEVICES_PROP_NAME)
                    .pipe(operators.map(i1$3.validateAvailableOnDevicesProp))
            ])
                .pipe(operators.map(lodash.flatten), operators.map(lodash.compact))
                .subscribe(function (validationIssues) { return _this.sandbox.setValidationIssues(validationIssues); });
            _this.selectedTabGuid$.pipe(operators.takeUntil(_this.sandbox.destroyed$)).subscribe(function (selectedTabGuid) {
                _this.hiddenOnCanvas$.next(_this.sandbox.guid !== selectedTabGuid);
            });
            _this.sandbox
                .getComponentPropertyValue('columnCount')
                .pipe(operators.skip(1))
                .subscribe(function (columnCount) {
                _this.sandbox.setLayout(_this.getDefaultColumnSpans(Number(columnCount)));
            });
            _this.sandbox.getComponentPropertyValue('label').subscribe(function (label) {
                var componentName = label ? _this.sandbox.descriptor.name + " (" + label + ")" : _this.sandbox.descriptor.name;
                _this.sandbox.setSettablePropertiesDataDictionary(componentName, [
                    {
                        label: 'Hidden',
                        expression: _this.getExpressionForProperty('hidden')
                    }
                ]);
                _this.sandbox.setBreadcrumbs(label);
            });
            return _this;
        }
        TabContainerDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ columnCount: '1', enableLazyLoading: false, label: '', rowWrap: exports.ContainerRowWrap.Sm }, i1$1.RX_STANDARD_PROPS_DEFAULT_VALUES), initialProperties);
        };
        TabContainerDesignModel.prototype.setContainerLayout = function (columnSizes) {
            this.sandbox.setLayout(columnSizes);
        };
        TabContainerDesignModel.prototype.getDefaultColumnSpans = function (columnCount) {
            var columnSpans = [];
            var span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);
            lodash.times(columnCount, function () { return columnSpans.push(span); });
            columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;
            return columnSpans;
        };
        TabContainerDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: __spreadArray([
                            {
                                name: 'label',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Label',
                                    required: true
                                }
                            },
                            {
                                name: 'enableLazyLoading',
                                component: i2.SwitchFormControlComponent,
                                options: {
                                    label: 'Enable lazy loading'
                                }
                            },
                            {
                                name: 'columnCount',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Number of columns',
                                    required: true,
                                    tooltip: new i1$2.Tooltip('Resize container columns on the canvas by dragging the dashed column separator line.'),
                                    options: lodash.times(6, function (index) { return ({ id: (++index).toString(), name: index.toString() }); })
                                }
                            },
                            {
                                name: 'rowWrap',
                                component: i2.SelectFormControlComponent,
                                options: {
                                    label: 'Row wrap',
                                    sortAlphabetically: false,
                                    options: lodash.values(RX_CONTAINER.rowWrapOptions),
                                    tooltip: new i1$2.Tooltip("The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.")
                                }
                            }
                        ], __read(i1$3.getStandardPropsInspectorConfigs()))
                    }
                ]
            };
        };
        return TabContainerDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var TabPanelRegistrationModule = /** @class */ (function () {
        function TabPanelRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.TabPanel,
                componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabPanelComponent),
                properties: i1$1.RX_STANDARD_PROPS_DESC,
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                name: 'Tab panel',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'app_tab',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TabPanelDesignComponent),
                designComponentModel: TabPanelDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            }, {
                type: i1$1.RxViewComponentType.TabContainer,
                componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabContainerComponent),
                properties: __spreadArray(__spreadArray([], __read(i1$1.RX_STANDARD_PROPS_DESC)), [
                    {
                        name: 'label',
                        type: i1$1.ViewComponentPropertyType.String,
                        localizable: true
                    },
                    {
                        name: 'enableLazyLoading',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean,
                        enableExpressionEvaluation: true
                    }
                ]),
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Tab',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                hidden: true,
                icon: 'app_tab',
                designComponentFactory: componentFactoryResolver.resolveComponentFactory(TabContainerDesignComponent),
                designComponentModel: TabContainerDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return TabPanelRegistrationModule;
    }());
    TabPanelRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TabPanelRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelRegistrationModule, imports: [RxTabPanelModule, TabPanelDesignModule] });
    TabPanelRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelRegistrationModule, imports: [[RxTabPanelModule, TabPanelDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TabPanelRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [RxTabPanelModule, TabPanelDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var ServiceListDesignModel = /** @class */ (function (_super) {
        __extends(ServiceListDesignModel, _super);
        function ServiceListDesignModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ServiceListDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign({ serviceRequestId: null, serviceRequestName: null, serviceRequestGuid: null }, initialProperties);
        };
        ServiceListDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox
                .getComponentPropertyValue('serviceRequestId')
                .pipe(operators.map(function (value) { return value ? [] : [_this.sandbox.createError('Selected service request ID cannot be blank.', 'serviceRequestId')]; }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (validationIssues) { return _this.sandbox.setValidationIssues(validationIssues); });
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function () {
                _this.sandbox.updateInspectorConfig(_this.getInspector());
                _this.sandbox.setCommonDataDictionary(_this.getCommonProps());
            });
        };
        ServiceListDesignModel.prototype.getCommonProps = function () {
            return {
                label: this.sandbox.descriptor.name,
                expression: this.getExpressionForProperty('api'),
                children: [
                    {
                        label: 'Service request ID',
                        expression: this.getExpressionForProperty('serviceRequestId')
                    },
                    {
                        label: 'Service request name',
                        expression: this.getExpressionForProperty('serviceRequestName')
                    },
                    {
                        label: 'Service request GUID',
                        expression: this.getExpressionForProperty('serviceRequestGuid')
                    }
                ]
            };
        };
        ServiceListDesignModel.prototype.getInspector = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: [
                            {
                                name: 'serviceRequestId',
                                component: i2.ExpressionInspectorControlComponent,
                                options: {
                                    label: 'Service request ID',
                                    isRequired: true
                                }
                            },
                            {
                                name: 'serviceRequestName',
                                component: i2.ExpressionInspectorControlComponent,
                                options: {
                                    label: 'Service request name'
                                }
                            },
                            {
                                name: 'serviceRequestGuid',
                                component: i2.ExpressionInspectorControlComponent,
                                options: {
                                    label: 'Service request GUID'
                                }
                            }
                        ]
                    }
                ]
            };
        };
        return ServiceListDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var ServiceListRegistrationModule = /** @class */ (function () {
        function ServiceListRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.ServiceList,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListComponent),
                name: 'Service list',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.chatbotComponents.label,
                options: {
                    canBeEmbeddedInRecordEditor: true
                },
                canBeInsertedInto: function (componentTypes) {
                    return componentTypes.includes(i1$1.RxViewComponentType.RecordEditor);
                },
                properties: [
                    {
                        name: 'serviceRequestId',
                        enableExpressionEvaluation: true,
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'serviceRequestName',
                        enableExpressionEvaluation: true,
                        type: i1$1.ViewComponentPropertyType.String
                    },
                    {
                        name: 'serviceRequestGuid',
                        enableExpressionEvaluation: true,
                        type: i1$1.ViewComponentPropertyType.String
                    }
                ],
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListDesignComponent),
                designComponentModel: ServiceListDesignModel,
                icon: 'field_dropdown',
                bundleId: i1$2.RX_APPLICATION.chatbotBundleId,
                availableInBundles: [i1$2.RX_APPLICATION.chatbotBundleId]
            });
        }
        return ServiceListRegistrationModule;
    }());
    ServiceListRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServiceListRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListRegistrationModule, imports: [ServiceListModule, ServiceListDesignModule] });
    ServiceListRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListRegistrationModule, imports: [[ServiceListModule, ServiceListDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServiceListRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ServiceListModule, ServiceListDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var UnknownDesignComponent = /** @class */ (function () {
        function UnknownDesignComponent() {
        }
        return UnknownDesignComponent;
    }());
    UnknownDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    UnknownDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: UnknownDesignComponent, selector: "rx-unknown", inputs: { model: "model" }, ngImport: i0__namespace, template: "<adapt-empty-state type=\"objects\" [label]=\"model.label\"></adapt-empty-state>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{border:1px solid #d6d7d8;display:block;position:relative;padding:1rem;height:200px}\n"], components: [{ type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-unknown',
                        templateUrl: 'unknown-design.component.html',
                        styleUrls: ['./unknown-design.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var UnknownDesignModel = /** @class */ (function (_super) {
        __extends(UnknownDesignModel, _super);
        function UnknownDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.label = "Unknown component: " + _this.sandbox.componentType;
            return _this;
        }
        UnknownDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox.componentProperties$.pipe(operators.take(1)).subscribe(function (componentProperties) {
                _this.sandbox.updateInspectorConfig(_this.getInspector(componentProperties));
                _this.sandbox.setValidationIssues([_this.sandbox.createError(_this.label)]);
            });
        };
        UnknownDesignModel.prototype.getInspector = function (componentProperties) {
            var controls = lodash.keys(componentProperties).map(function (propertyName) { return ({
                name: propertyName,
                component: i2.TextFormControlComponent,
                options: {
                    label: propertyName
                },
                isDisabled: true
            }); });
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: controls
                    }
                ]
            };
        };
        return UnknownDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var UnknownDesignModule = /** @class */ (function () {
        function UnknownDesignModule() {
        }
        return UnknownDesignModule;
    }());
    UnknownDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnknownDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignModule, declarations: [UnknownDesignComponent], imports: [i3.CommonModule, i1.AdaptEmptyStateModule] });
    UnknownDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignModule, imports: [[i3.CommonModule, i1.AdaptEmptyStateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.AdaptEmptyStateModule],
                        declarations: [UnknownDesignComponent]
                    }]
            }] });

    var UnknownRegistrationModule = /** @class */ (function () {
        function UnknownRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.Unknown,
                outlets: [
                    {
                        name: i1$1.RX_VIEW_DEFINITION.defaultOutletName
                    }
                ],
                name: 'Unknown',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(UnknownDesignComponent),
                designComponentModel: UnknownDesignModel,
                hidden: true,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            });
        }
        return UnknownRegistrationModule;
    }());
    UnknownRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UnknownRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownRegistrationModule, imports: [UnknownDesignModule] });
    UnknownRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownRegistrationModule, imports: [[UnknownDesignModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UnknownRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [UnknownDesignModule]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_CHATBOT_USER_MAPPING = {
        commands: {
            createUserMapping: 'com.bmc.arsys.rx.application.chat.command.CreateChatUserMappingCommand'
        },
        mappingStatus: {
            check: 'check',
            failed: 'failed',
            inProgress: 'inProgress',
            missingParameters: 'missingParameters',
            pending: 'pending',
            success: 'success'
        },
        messages: {
            check: 'com.bmc.arsys.rx.settings.check',
            failed: 'com.bmc.arsys.rx.settings.failed',
            inProgress: 'com.bmc.arsys.rx.settings.inProgress',
            missingParameters: 'com.bmc.arsys.rx.settings.missingParameters',
            pending: 'com.bmc.arsys.rx.settings.pending',
            success: 'com.bmc.arsys.rx.settings.success'
        }
    };

    var ChatbotUserMappingComponent = /** @class */ (function (_super) {
        __extends(ChatbotUserMappingComponent, _super);
        function ChatbotUserMappingComponent(translateService, rxCommandFactoryService, rxNotificationService) {
            var _this = _super.call(this) || this;
            _this.translateService = translateService;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxNotificationService = rxNotificationService;
            _this.encryptedChatUserAndChatId = null;
            _this.chatbotProvider = null;
            _this.isMappingInProgress = false;
            _this.message = '';
            _this.mappingStatus = '';
            return _this;
        }
        ChatbotUserMappingComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isMappingInProgress = false;
            this.config.pipe(operators.take(1)).subscribe(function (config) {
                _this.encryptedChatUserAndChatId = config.encryptedChatUserAndChatId;
                _this.chatbotProvider = config.chatbotProvider;
                if (!_this.encryptedChatUserAndChatId) {
                    _this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.missingParameters;
                    _this.rxNotificationService.addErrorMessage(_this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages.missingParameters));
                }
                else {
                    _this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.pending;
                }
                _this.updateMessage();
            });
        };
        ChatbotUserMappingComponent.prototype.isMappingButtonVisible = function () {
            return this.mappingStatus === RX_CHATBOT_USER_MAPPING.mappingStatus.pending;
        };
        ChatbotUserMappingComponent.prototype.mapUser = function () {
            var _this = this;
            this.isMappingInProgress = true;
            this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.inProgress;
            this.updateMessage();
            var commandPayload = {
                encryptedChatUserAndChatId: this.encryptedChatUserAndChatId,
                chatbotProvider: this.chatbotProvider
            };
            this.rxCommandFactoryService
                .forResourceType(RX_CHATBOT_USER_MAPPING.commands.createUserMapping)
                .execute(commandPayload)
                .pipe(operators.catchError(function (error) {
                _this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.failed;
                _this.updateMessage();
                _this.isMappingInProgress = false;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.success;
                _this.updateMessage();
                _this.isMappingInProgress = false;
            });
        };
        ChatbotUserMappingComponent.prototype.updateMessage = function () {
            this.message = this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages[this.mappingStatus]);
        };
        return ChatbotUserMappingComponent;
    }(i1$5.BaseViewComponent));
    ChatbotUserMappingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingComponent, deps: [{ token: i2__namespace.TranslateService }, { token: i1__namespace$1.RxCommandFactoryService }, { token: i1__namespace$1.RxNotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ChatbotUserMappingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotUserMappingComponent, selector: "com-bmc-arsys-rx-user-mapping", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"text-center mt-1 container\">\n  <div>\n    <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.settings.title' | translate }}</span>\n  </div>\n  <div class=\"mt-4\">{{ message }}</div>\n  <div>\n    <button\n      rx-id=\"verify-bmc-cloud-account\"\n      class=\"mt-4\"\n      adapt-button\n      btn-type=\"primary\"\n      size=\"large\"\n      type=\"button\"\n      [disabled]=\"isMappingInProgress\"\n      (click)=\"mapUser()\"\n      [hidden]=\"!isMappingButtonVisible()\"\n    >\n      {{ 'com.bmc.arsys.rx.settings.verify-cloud-account' | translate }}\n    </button>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.container{width:400px;margin:auto}.text-logo{font-size:var(--h1-font-size)}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // This is for retro compatibility to reuse the same view "com.bmc.arsys.rx.settings:BMCCloudVerification".
                        // tslint:disable-next-line:component-selector
                        selector: 'com-bmc-arsys-rx-user-mapping',
                        templateUrl: './chatbot-user-mapping.component.html',
                        styleUrls: ['./chatbot-user-mapping.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.TranslateService }, { type: i1__namespace$1.RxCommandFactoryService }, { type: i1__namespace$1.RxNotificationService }]; } });

    /**
     * This component is used by Chatbot to map users from a third party channel
     * as Slack, Skype for Enterprise to their Innovation Studio account.
     * Backend sends a link in Slack for example and when the user clicks on it,
     * a page on the rx.settings bundle will be displayed, leveraging this view component:
     * http://localhost:4200/helix/index.html#/com.bmc.arsys.rx.settings/view/com.bmc.arsys.rx.settings:BMCCloudVerification?encryptedChatUserAndChatId=12345&chatbotProvider=slack
     */
    var ChatbotUserMappingRegistrationModule = /** @class */ (function () {
        function ChatbotUserMappingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                // This is for retro compatibility to reuse the same view "com.bmc.arsys.rx.settings:BMCCloudVerification".
                type: 'com-bmc-arsys-rx-user-mapping',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotUserMappingComponent),
                name: 'Chatbot User Mapping',
                availableInBundles: [i1$2.RX_APPLICATION.settingsBundleId],
                hidden: true,
                properties: [
                    {
                        name: 'encryptedChatUserAndChatId',
                        enableExpressionEvaluation: true
                    },
                    {
                        name: 'chatbotProvider',
                        enableExpressionEvaluation: true
                    }
                ]
            });
        }
        return ChatbotUserMappingRegistrationModule;
    }());
    ChatbotUserMappingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ChatbotUserMappingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingRegistrationModule, declarations: [ChatbotUserMappingComponent], imports: [i1.AdaptButtonModule, i3.CommonModule, i2$4.FormsModule, i2$1.TranslateModule] });
    ChatbotUserMappingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingRegistrationModule, imports: [[i1.AdaptButtonModule, i3.CommonModule, i2$4.FormsModule, i2$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotUserMappingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ChatbotUserMappingComponent],
                        imports: [i1.AdaptButtonModule, i3.CommonModule, i2$4.FormsModule, i2$1.TranslateModule],
                        entryComponents: [ChatbotUserMappingComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_IFRAME_LOGIN_EVENT = {
        eventMessage: 'LOGIN_SUCCESSFUL'
    };

    var IframeLoginEventComponent = /** @class */ (function (_super) {
        __extends(IframeLoginEventComponent, _super);
        function IframeLoginEventComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IframeLoginEventComponent.prototype.ngOnInit = function () {
            var _a;
            (_a = window.opener) === null || _a === void 0 ? void 0 : _a.postMessage(RX_IFRAME_LOGIN_EVENT.eventMessage, '*');
        };
        return IframeLoginEventComponent;
    }(i1$5.BaseViewComponent));
    IframeLoginEventComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    IframeLoginEventComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IframeLoginEventComponent, selector: "com-bmc-arsys-rx-settings-iframe-login-event", usesInheritance: true, ngImport: i0__namespace, template: "<img\n  src=\"/com.bmc.arsys.rx.settings/resources/images/login-successful.gif\"\n  alt=\"Login successful\"\n  class=\"login-verification\"\n/>\n", styles: [".login-verification{top:50%;left:50%;position:fixed;transform:translate(-50%,-50%);width:670px}\n"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // This is for retro compatibility to reuse the same view "com.bmc.arsys.rx.settings:BMCLoginVerification".
                        // tslint:disable-next-line:component-selector
                        selector: 'com-bmc-arsys-rx-settings-iframe-login-event',
                        templateUrl: './iframe-login-event.component.html',
                        styleUrls: ['./iframe-login-event.component.scss']
                    }]
            }] });

    /**
     * This component is used by view-loader.js script when the login cannot be achieved
     * in an iFrame (for example with Microsoft IDP).
     * In this case view-loader.js loads a view in a window popup that will require the user
     * to log in. Once the user is logged in, this View Component will send a PostMessage to
     * view-loader.js that will close the popup.
     */
    var IframeLoginEventRegistrationModule = /** @class */ (function () {
        function IframeLoginEventRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                // This is for retro compatibility to reuse the same view "com.bmc.arsys.rx.settings:BMCLoginVerification".
                type: 'com-bmc-arsys-rx-settings-iframe-login-event',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeLoginEventComponent),
                name: 'IFrame Login Event',
                availableInBundles: [i1$2.RX_APPLICATION.settingsBundleId],
                hidden: true
            });
        }
        return IframeLoginEventRegistrationModule;
    }());
    IframeLoginEventRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IframeLoginEventRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventRegistrationModule, declarations: [IframeLoginEventComponent], imports: [i3.CommonModule] });
    IframeLoginEventRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventRegistrationModule, imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeLoginEventRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [IframeLoginEventComponent],
                        imports: [i3.CommonModule],
                        entryComponents: [IframeLoginEventComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var SmartReportingRedirectorComponent = /** @class */ (function () {
        function SmartReportingRedirectorComponent(rxSmartReportingService) {
            this.rxSmartReportingService = rxSmartReportingService;
        }
        SmartReportingRedirectorComponent.prototype.ngOnInit = function () {
            this.rxSmartReportingService
                .openSmartReporting('_self', {
                query: this.runtimeViewModelApi.getViewInputParameters().param
            })
                .subscribe();
        };
        return SmartReportingRedirectorComponent;
    }());
    SmartReportingRedirectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorComponent, deps: [{ token: i1__namespace$1.RxSmartReportingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SmartReportingRedirectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SmartReportingRedirectorComponent, selector: "rx-smart-reporting-redirector", inputs: { runtimeViewModelApi: "runtimeViewModelApi" }, ngImport: i0__namespace, template: "<div class=\"p-3\">{{ 'com.bmc.arsys.rx.client.smart-reporting-redirector.message' | translate }}</div>\n", pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-smart-reporting-redirector',
                        templateUrl: './smart-reporting-redirector.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxSmartReportingService }]; }, propDecorators: { runtimeViewModelApi: [{
                    type: i0.Input
                }] } });

    var SmartReportingRedirectorRegistrationModule = /** @class */ (function () {
        function SmartReportingRedirectorRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-smart-reporting-redirector',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SmartReportingRedirectorComponent),
                name: 'Smart reporting redirector',
                isPageComponent: true,
                hidden: true,
                availableInBundles: [i1$2.RX_APPLICATION.settingsBundleId]
            });
        }
        return SmartReportingRedirectorRegistrationModule;
    }());
    SmartReportingRedirectorRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SmartReportingRedirectorRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorRegistrationModule, declarations: [SmartReportingRedirectorComponent], imports: [i2$1.TranslateModule] });
    SmartReportingRedirectorRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorRegistrationModule, imports: [[i2$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SmartReportingRedirectorRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [SmartReportingRedirectorComponent],
                        imports: [i2$1.TranslateModule],
                        entryComponents: [SmartReportingRedirectorComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_SHARABLE_VIEW_RESETS_FEATURE_NAME = '23503_SHARABLE_VIEW_PRESET';
    var RX_VIEW_PRESET = {
        user: {
            recordDefinitionName: 'CTM:People',
            fields: {
                fullName: 1000000017,
                lastName: 1000000018,
                firstName: 1000000019,
                loginId: i1$4.RX_RECORD_DEFINITION.coreFieldIds.assignee,
                recordId: i1$4.RX_RECORD_DEFINITION.coreFieldIds.id,
                email: 1000000048
            }
        },
        sharedViewPreset: {
            recordDefinitionName: 'com.bmc.arsys.rx.settings:SharedViewPreset',
            fields: {
                viewPresetName: 58200,
                viewName: 58201,
                viewPresetInfo: 58202,
                viewPresetSelectorGuid: 58203,
                sharedUsers: 58204,
                id: i1$4.RX_RECORD_DEFINITION.coreFieldIds.id,
                ownerFullName: 58205
            }
        }
    };

    var RxShareViewPresetDataService = /** @class */ (function () {
        function RxShareViewPresetDataService(rxRecordInstanceDataPageService, rxRecordInstanceService, httpClient, rxJsonParserService) {
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.httpClient = httpClient;
            this.rxJsonParserService = rxJsonParserService;
        }
        RxShareViewPresetDataService.prototype.searchUsers = function (query) {
            return this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: RX_VIEW_PRESET.user.recordDefinitionName,
                    propertySelection: [
                        RX_VIEW_PRESET.user.fields.fullName,
                        RX_VIEW_PRESET.user.fields.email,
                        RX_VIEW_PRESET.user.fields.loginId
                    ],
                    pageSize: i1$2.RX_DATA_PAGE.defaultPageSize,
                    queryExpression: [
                        RX_VIEW_PRESET.user.fields.fullName,
                        RX_VIEW_PRESET.user.fields.email,
                        RX_VIEW_PRESET.user.fields.loginId
                    ]
                        .map(function (fieldId) { return "('" + fieldId + "' LIKE \"%" + query + "%\")"; })
                        .join(' OR ')
                }
            })
                .pipe(operators.map(function (result) { return result.data; }));
        };
        RxShareViewPresetDataService.prototype.getSharedViewPresets = function (viewPresetSelectorGuid, loginId) {
            var _this = this;
            return this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName,
                    queryExpression: [
                        "'" + RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetSelectorGuid + "' = \"" + viewPresetSelectorGuid + "\""
                    ].join(' AND '),
                    propertySelection: [
                        RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName,
                        RX_VIEW_PRESET.sharedViewPreset.fields.id,
                        RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName,
                        RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers
                    ]
                }
            })
                .pipe(operators.map(function (dataPageResult) { return dataPageResult.data.filter(function (sharedViewPreset) {
                var users = _this.rxJsonParserService.tryParseJson(sharedViewPreset[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers], []);
                return users.find(function (user) { return user.loginId === loginId; });
            }); }));
        };
        RxShareViewPresetDataService.prototype.getSharedViewPreset = function (guid) {
            return this.rxRecordInstanceService.get(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);
        };
        RxShareViewPresetDataService.prototype.createSharedViewPreset = function (payload) {
            return this.httpClient.post(this.getUrl(), payload, {
                responseType: 'text'
            });
        };
        RxShareViewPresetDataService.prototype.updateSharedViewPreset = function (guid, payload) {
            return this.httpClient.put(this.getUrl(guid), payload);
        };
        RxShareViewPresetDataService.prototype.deleteSharedViewPreset = function (guid) {
            return this.rxRecordInstanceService.delete(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);
        };
        RxShareViewPresetDataService.prototype.getUrl = function (guid) {
            return guid
                ? "/api/rx/application/configuration/viewpreset/" + guid
                : "/api/rx/application/configuration/viewpreset";
        };
        return RxShareViewPresetDataService;
    }());
    RxShareViewPresetDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetDataService, deps: [{ token: i1__namespace$5.RxRecordInstanceDataPageService }, { token: i1__namespace$5.RxRecordInstanceService }, { token: i1__namespace$9.HttpClient }, { token: i2__namespace$1.RxJsonParserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxShareViewPresetDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetDataService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetDataService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.RxRecordInstanceDataPageService }, { type: i1__namespace$5.RxRecordInstanceService }, { type: i1__namespace$9.HttpClient }, { type: i2__namespace$1.RxJsonParserService }]; } });

    var RxShareViewPresetService = /** @class */ (function () {
        function RxShareViewPresetService(rxShareViewPresetDataService, rxStringService, rxJsonParserService, rxCurrentUserService) {
            this.rxShareViewPresetDataService = rxShareViewPresetDataService;
            this.rxStringService = rxStringService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxCurrentUserService = rxCurrentUserService;
        }
        RxShareViewPresetService.prototype.getAutocompleteSearch = function (text$) {
            var _this = this;
            return text$.pipe(operators.debounceTime(250), operators.distinctUntilChanged(), operators.switchMap(function (searchTerm) {
                var trimmedValue = searchTerm.trim();
                if (trimmedValue.length > 0) {
                    return _this.rxShareViewPresetDataService.searchUsers(trimmedValue);
                }
                else {
                    return rxjs.of([]);
                }
            }), operators.map(function (users) { return users.map(function (user) { return ({
                text: user[RX_VIEW_PRESET.user.fields.fullName],
                data: {
                    loginId: user[RX_VIEW_PRESET.user.fields.loginId],
                    fullName: user[RX_VIEW_PRESET.user.fields.fullName],
                    emailAddress: user[RX_VIEW_PRESET.user.fields.email]
                }
            }); }); }));
        };
        RxShareViewPresetService.prototype.getSharedViewPresetUsers = function (guid) {
            var _this = this;
            return this.rxShareViewPresetDataService
                .getSharedViewPreset(guid)
                .pipe(operators.map(function (sharedViewPreset) { return _this.rxJsonParserService.tryParseJson(sharedViewPreset === null || sharedViewPreset === void 0 ? void 0 : sharedViewPreset.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers].value, []); }));
        };
        RxShareViewPresetService.prototype.getSharedViewPresetData = function (guid) {
            var _this = this;
            return this.rxShareViewPresetDataService.getSharedViewPreset(guid).pipe(operators.map(function (sharedViewPreset) { return ({
                viewPresetName: sharedViewPreset === null || sharedViewPreset === void 0 ? void 0 : sharedViewPreset.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName].value,
                sharedViewPresets: _this.rxJsonParserService.tryParseJson(sharedViewPreset === null || sharedViewPreset === void 0 ? void 0 : sharedViewPreset.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetInfo].value, null)
            }); }));
        };
        RxShareViewPresetService.prototype.createUpdateSharedViewPreset = function (payload, presetGuid) {
            if (presetGuid) {
                return this.rxShareViewPresetDataService.updateSharedViewPreset(presetGuid, payload).pipe(operators.map(function () { return presetGuid; }));
            }
            else {
                return this.rxShareViewPresetDataService.createSharedViewPreset(payload);
            }
        };
        RxShareViewPresetService.prototype.saveSharedViewPreset = function (data, presetGuid) {
            var _this = this;
            var sharedUsers$ = data.sharedUsers ? rxjs.of(data.sharedUsers) : this.getSharedViewPresetUsers(presetGuid);
            return rxjs.combineLatest([data.runtimeViewModelApi.shareViewPreset(data.presetSelectorGuid), sharedUsers$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), sharedViewPresets = _b[0], sharedUsers = _b[1];
                return ({
                    viewPresetName: data.currentViewPreset.label,
                    viewName: '',
                    viewPresetGuid: data.presetSelectorGuid,
                    submitter: _this.rxCurrentUserService.get().fullName,
                    sharedUsers: sharedUsers,
                    presetInformation: JSON.stringify(sharedViewPresets)
                });
            }), operators.switchMap(function (payload) { return _this.createUpdateSharedViewPreset(payload, presetGuid); }));
        };
        RxShareViewPresetService.prototype.deleteSharedViewPreset = function (sharedViewPresetInstanceGuid) {
            return this.rxShareViewPresetDataService.deleteSharedViewPreset(sharedViewPresetInstanceGuid);
        };
        RxShareViewPresetService.prototype.getSharedViewPresetsForCurrentUser = function (presetSelectorGuid) {
            return this.rxShareViewPresetDataService
                .getSharedViewPresets(presetSelectorGuid, this.rxCurrentUserService.getName())
                .pipe(operators.map(function (presets) { return presets.map(function (preset) { return ({
                label: preset[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName],
                guid: preset[RX_VIEW_PRESET.sharedViewPreset.fields.id],
                ownerFullName: preset[RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName]
            }); }); }));
        };
        return RxShareViewPresetService;
    }());
    RxShareViewPresetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetService, deps: [{ token: RxShareViewPresetDataService }, { token: i2__namespace$1.RxStringService }, { token: i2__namespace$1.RxJsonParserService }, { token: i1__namespace$1.RxCurrentUserService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxShareViewPresetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxShareViewPresetService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: RxShareViewPresetDataService }, { type: i2__namespace$1.RxStringService }, { type: i2__namespace$1.RxJsonParserService }, { type: i1__namespace$1.RxCurrentUserService }]; } });

    var RxViewPresetSelectorUserPreferencesService = /** @class */ (function () {
        function RxViewPresetSelectorUserPreferencesService(rxUserPreferencesService, rxShareViewPresetService) {
            this.rxUserPreferencesService = rxUserPreferencesService;
            this.rxShareViewPresetService = rxShareViewPresetService;
        }
        RxViewPresetSelectorUserPreferencesService.prototype.save = function (viewPresetSelectorState) {
            var customViewPresets = viewPresetSelectorState.customViewPresetOptions.map(function (customViewPresetOption) { return lodash.pick(customViewPresetOption, ['guid', 'label', 'userSharedViewPresetGuid']); });
            var sharedViewPresets = viewPresetSelectorState.sharedViewPresetOptions.map(function (sharedViewPresetOption) { return lodash.pick(sharedViewPresetOption, ['guid', 'label']); });
            var data = {
                preferences: JSON.stringify({
                    customViewPresets: customViewPresets,
                    sharedViewPresets: sharedViewPresets,
                    viewPresetGuid: viewPresetSelectorState.appliedViewPresetOption.guid
                }),
                componentTypeName: i1$1.RxViewComponentType.ViewPresetSelector,
                version: '1.0',
                componentId: this.viewPresetSelectorGuid
            };
            return this.rxUserPreferencesService.setUiComponentPreferences(data, this.viewPresetSelectorGuid);
        };
        RxViewPresetSelectorUserPreferencesService.prototype.applyUserPreferences = function (viewPresetSelectorGuid, viewPresetSelectorState) {
            var _this = this;
            this.viewPresetSelectorGuid = viewPresetSelectorGuid;
            return this.get(viewPresetSelectorGuid).pipe(operators.map(function (preferences) {
                viewPresetSelectorState.customViewPresetOptions = preferences.customViewPresets;
                if (preferences.sharedViewPresets) {
                    viewPresetSelectorState.sharedViewPresetOptions = preferences.sharedViewPresets.map(function (preset) { return (Object.assign(Object.assign({}, preset), { isShared: true })); });
                }
                viewPresetSelectorState.appliedViewPresetOption =
                    lodash.find(viewPresetSelectorState.customViewPresetOptions, { guid: preferences.viewPresetGuid }) ||
                        lodash.find(viewPresetSelectorState.systemViewPresetOptions, { guid: preferences.viewPresetGuid }) ||
                        lodash.find(viewPresetSelectorState.sharedViewPresetOptions, { guid: preferences.viewPresetGuid }) ||
                        viewPresetSelectorState.systemViewPresetOptions[0];
                return viewPresetSelectorState;
            }), operators.switchMap(function (state) { return _this.checkSharedViewPresets(state); }));
        };
        RxViewPresetSelectorUserPreferencesService.prototype.get = function (guid) {
            return this.rxUserPreferencesService.getUiComponentPreferences(guid).pipe(operators.map(function (preferences) { return preferences !== null && preferences !== void 0 ? preferences : {
                customViewPresets: [],
                sharedViewPresets: [],
                viewPresetGuid: null
            }; }));
        };
        RxViewPresetSelectorUserPreferencesService.prototype.checkSharedViewPresets = function (state) {
            if (state.sharedViewPresetOptions.length) {
                return this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.viewPresetSelectorGuid).pipe(operators.map(function (sharedPresets) {
                    var shouldUpdatePreferences = false;
                    var removedPresetGuid = null;
                    // checking if already added shared presets are still available
                    // and updating preset names in case of renaming
                    state.sharedViewPresetOptions = state.sharedViewPresetOptions.reduce(function (result, presetOption) {
                        var existingPreset = sharedPresets.find(function (sharedPreset) { return sharedPreset.guid === presetOption.guid; });
                        if (existingPreset) {
                            if (presetOption.label !== existingPreset.label) {
                                presetOption.label = existingPreset.label;
                                shouldUpdatePreferences = true;
                            }
                            result.push(presetOption);
                        }
                        else {
                            shouldUpdatePreferences = true;
                        }
                        return result;
                    }, []);
                    // checking if current selected preset is still available
                    // and if not - switching to first system preset
                    if (state.appliedViewPresetOption.isShared) {
                        var isOptionStillAvailable = state.sharedViewPresetOptions.find(function (option) { return option.guid === state.appliedViewPresetOption.guid; });
                        // if preset it not available anymore or sharing was disabled
                        if (!isOptionStillAvailable || !state.isSharingEnabled) {
                            if (!isOptionStillAvailable) {
                                removedPresetGuid = state.appliedViewPresetOption.guid;
                            }
                            state.appliedViewPresetOption = state.systemViewPresetOptions[0];
                        }
                    }
                    return { state: state, shouldUpdatePreferences: shouldUpdatePreferences, removedPresetGuid: removedPresetGuid };
                }));
            }
            else {
                return rxjs.of({ state: state, shouldUpdatePreferences: false, removedPresetGuid: null });
            }
        };
        return RxViewPresetSelectorUserPreferencesService;
    }());
    RxViewPresetSelectorUserPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxViewPresetSelectorUserPreferencesService, deps: [{ token: i1__namespace$1.RxUserPreferencesService }, { token: RxShareViewPresetService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxViewPresetSelectorUserPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxViewPresetSelectorUserPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxViewPresetSelectorUserPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxUserPreferencesService }, { type: RxShareViewPresetService }]; } });

    var RenameViewPresetComponent = /** @class */ (function (_super) {
        __extends(RenameViewPresetComponent, _super);
        function RenameViewPresetComponent(activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.viewPresetNameFormControl = new i2$4.FormControl('');
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.modalData = _this.activeModalRef.getData();
            _this.viewPresetNameFormControl.setValue(_this.modalData.viewPresetName);
            _this.viewPresetNameFormControl.valueChanges.pipe(operators.takeUntil(_this.destroyed$)).subscribe(function (value) {
                if (_this.viewPresetNameFormControl.dirty && value === _this.modalData.viewPresetName) {
                    _this.viewPresetNameFormControl.reset(_this.modalData.viewPresetName);
                }
            });
            return _this;
        }
        RenameViewPresetComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        RenameViewPresetComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RenameViewPresetComponent.prototype.save = function () {
            this.activeModalRef.close(this.generateUniqueViewPresetName(this.viewPresetNameFormControl.value));
        };
        RenameViewPresetComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        RenameViewPresetComponent.prototype.isViewPresetNameUnique = function (viewPresetName) {
            var trimmedViewPresetName = viewPresetName.trim();
            return !this.modalData.existingViewPresetNames.some(function (existingViewPresetName) { return existingViewPresetName === trimmedViewPresetName; });
        };
        RenameViewPresetComponent.prototype.generateUniqueViewPresetName = function (viewPresetName) {
            var trimmedViewPresetName = viewPresetName.trim();
            var uniqueViewPresetName = trimmedViewPresetName;
            var suffix = 1;
            while (!this.isViewPresetNameUnique(uniqueViewPresetName)) {
                uniqueViewPresetName = trimmedViewPresetName + "-" + suffix++;
            }
            return uniqueViewPresetName;
        };
        return RenameViewPresetComponent;
    }(i1$6.RxModalClass));
    RenameViewPresetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RenameViewPresetComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RenameViewPresetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RenameViewPresetComponent, selector: "rx-rename-view-preset", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <adapt-rx-textfield\n    [formControl]=\"viewPresetNameFormControl\"\n    [label]=\"modalData.fieldLabel\"\n    name=\"viewPresetName\"\n    rx-id=\"view-preset-name-field\"\n    [maxlength]=\"254\"\n    required=\"true\"\n    rxNoWhitespace\n    [autofocus]=\"true\"\n  >\n  </adapt-rx-textfield>\n\n  <p *ngIf=\"!isViewPresetNameUnique(viewPresetNameFormControl.value)\" class=\"text-info m-0 pt-1\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.view-preset-already-exists.error.message'\n        | translate\n    }}\n  </p>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [disabled]=\"viewPresetNameFormControl.invalid || viewPresetNameFormControl.pristine\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i2__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace$1.RxNoWhitespaceValidator, selector: "[rxNoWhitespace]", inputs: ["rxNoWhitespace"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RenameViewPresetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rename-view-preset',
                        templateUrl: './rename-view-preset.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    var ShareViewPresetUsersGridComponent = /** @class */ (function () {
        function ShareViewPresetUsersGridComponent(translateService) {
            this.translateService = translateService;
            this.users = [];
            this.remove = new i0.EventEmitter();
            this.recordGridConfig$ = this.getRecordGridConfig();
        }
        ShareViewPresetUsersGridComponent.prototype.ngOnChanges = function (changes) {
            if (changes.users.currentValue && !changes.users.firstChange) {
                this.recordGrid.api.refresh().subscribe();
            }
        };
        ShareViewPresetUsersGridComponent.prototype.getRecordGridConfig = function () {
            var _this = this;
            var gridColumns = [
                {
                    fieldId: 'fullName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.name.title')
                },
                {
                    fieldId: 'emailAddress',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.email.title')
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'fullName',
                        resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'emailAddress',
                        resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            return rxjs.of({
                columns: gridColumns,
                enableFiltering: false,
                enableRowSelection: exports.RowSelectionMode.Multiple,
                recordIdField: 'loginId',
                styles: 'flex-fill',
                toolbarConfig: {
                    filter: false,
                    visibleColumnsMenu: false
                },
                useExternalFiltering: false,
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.remove.label'),
                        style: 'tertiary',
                        iconCls: 'minus_circle_o',
                        disabled: function () { return _this.recordGrid.api.getSelectedRows().length === 0; },
                        actions: [
                            {
                                name: function () {
                                    var selectedUserLoginIds = _this.recordGrid.api.getSelectedRows().map(function (row) { return row.loginId; });
                                    _this.remove.emit(selectedUserLoginIds);
                                }
                            }
                        ]
                    }
                ],
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return rxjs.of({
                    data: _this.users,
                    totalSize: _this.users.length
                }); }
            });
        };
        return ShareViewPresetUsersGridComponent;
    }());
    ShareViewPresetUsersGridComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetUsersGridComponent, deps: [{ token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ShareViewPresetUsersGridComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ShareViewPresetUsersGridComponent, selector: "rx-share-view-preset-users-grid", inputs: { users: "users" }, outputs: { remove: "remove" }, viewQueries: [{ propertyName: "recordGrid", first: true, predicate: RecordGridComponent, descendants: true, static: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n", components: [{ type: RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetUsersGridComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-share-view-preset-users-grid',
                        templateUrl: './share-view-preset-users-grid.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.TranslateService }]; }, propDecorators: { recordGrid: [{
                    type: i0.ViewChild,
                    args: [RecordGridComponent, { static: true }]
                }], users: [{
                    type: i0.Input
                }], remove: [{
                    type: i0.Output
                }] } });

    var ShareViewPresetComponent = /** @class */ (function (_super) {
        __extends(ShareViewPresetComponent, _super);
        function ShareViewPresetComponent(activeModalRef, injector, formBuilder, translateService, rxShareViewPresetService, rxCurrentUserService, rxNotificationService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.formBuilder = formBuilder;
            _this.translateService = translateService;
            _this.rxShareViewPresetService = rxShareViewPresetService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxNotificationService = rxNotificationService;
            _this.maxRecipients = 100;
            _this.strings = {
                users: {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.label'),
                    placeholder: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.placeholder')
                },
                addButton: _this.translateService.instant('com.bmc.arsys.rx.client.common.add.label'),
                notifyRecipients: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.notify-recipients.label'),
                recipients: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.recipients.label'),
                savedNotification: {
                    title: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.title'),
                    message: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.message')
                },
                removedNotification: {
                    title: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.title'),
                    message: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.message')
                },
                maxRecipientsWarning: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.max-users-warning.message', {
                    maxUserCount: _this.maxRecipients
                })
            };
            _this.form = _this.formBuilder.group({
                users: _this.formBuilder.control([]),
                notifyRecipients: _this.formBuilder.control(false)
            });
            _this.modalData = _this.activeModalRef.getData();
            _this.runtimeViewModelApi = _this.modalData.runtimeViewModelApi;
            _this.selectedUsers = [];
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.currentUserLoginName = _this.rxCurrentUserService.getName();
            _this.isSelectedUsersChanged = false;
            _this.search = function (text$) {
                return _this.rxShareViewPresetService.getAutocompleteSearch(text$).pipe(operators.map(function (tags) {
                    var selectedUsersLoginIDs = _this.selectedUsers.map(function (user) { return user.loginId; });
                    var tagsInputLoginIDs = _this.form.get('users').value.map(function (_a) {
                        var data = _a.data;
                        return data.loginId;
                    });
                    // exclude current user and users that have already been added
                    return tags.filter(function (item) { return item.data.loginId !== _this.currentUserLoginName &&
                        !selectedUsersLoginIDs.includes(item.data.loginId) &&
                        !tagsInputLoginIDs.includes(item.data.loginId); });
                }));
            };
            return _this;
        }
        Object.defineProperty(ShareViewPresetComponent.prototype, "isRecipientsLimitReached", {
            get: function () {
                return this.form.get('users').value.length + this.selectedUsers.length > this.maxRecipients;
            },
            enumerable: false,
            configurable: true
        });
        ShareViewPresetComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.loadExistingSharedViewPresetUsers();
        };
        ShareViewPresetComponent.prototype.loadExistingSharedViewPresetUsers = function () {
            var _this = this;
            if (this.modalData.currentViewPreset.userSharedViewPresetGuid) {
                this.sharedViewPresetInstanceGuid = this.modalData.currentViewPreset.userSharedViewPresetGuid;
                this.rxShareViewPresetService.getSharedViewPresetUsers(this.sharedViewPresetInstanceGuid).subscribe(function (users) {
                    _this.selectedUsers = users;
                });
            }
        };
        ShareViewPresetComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        ShareViewPresetComponent.prototype.save = function () {
            if (this.selectedUsers.length) {
                this.saveViewPreset();
            }
            else {
                this.removeViewPreset();
            }
        };
        ShareViewPresetComponent.prototype.removeViewPreset = function () {
            var _this = this;
            this.rxShareViewPresetService.deleteSharedViewPreset(this.sharedViewPresetInstanceGuid).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.strings.removedNotification.message, _this.strings.removedNotification.title);
                _this.activeModalRef.close(null);
            });
        };
        ShareViewPresetComponent.prototype.saveViewPreset = function () {
            var _this = this;
            this.rxShareViewPresetService
                .saveSharedViewPreset({
                runtimeViewModelApi: this.runtimeViewModelApi,
                currentViewPreset: this.modalData.currentViewPreset,
                presetSelectorGuid: this.modalData.presetSelectorGuid,
                sharedUsers: this.selectedUsers
            }, this.sharedViewPresetInstanceGuid)
                .subscribe(function (sharedViewPresetInstanceGuid) {
                _this.rxNotificationService.addSuccessMessage(_this.strings.savedNotification.message, _this.strings.savedNotification.title);
                _this.activeModalRef.close(sharedViewPresetInstanceGuid);
            });
        };
        ShareViewPresetComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        ShareViewPresetComponent.prototype.onAdd = function () {
            var usersToAdd = this.form.get('users').value.map(function (tag) { return (Object.assign({}, tag.data)); });
            this.selectedUsers = this.selectedUsers.concat(usersToAdd);
            this.form.get('users').setValue([]);
            this.isSelectedUsersChanged = true;
        };
        ShareViewPresetComponent.prototype.removeSelectedUsers = function (selectedUserLoginIds) {
            this.selectedUsers = this.selectedUsers.filter(function (user) { return !selectedUserLoginIds.includes(user.loginId); });
            this.isSelectedUsersChanged = true;
            this.markAsDirty();
        };
        // saving is allowed when changing users of existing preset
        // or creating new preset with at least one user selected
        ShareViewPresetComponent.prototype.isSaveButtonDisabled = function () {
            return !((this.sharedViewPresetInstanceGuid && this.isSelectedUsersChanged) ||
                (!this.sharedViewPresetInstanceGuid && this.selectedUsers.length > 0));
        };
        return ShareViewPresetComponent;
    }(i1$6.RxModalClass));
    ShareViewPresetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }, { token: i2__namespace$3.FormBuilder }, { token: i2__namespace.TranslateService }, { token: RxShareViewPresetService }, { token: i1__namespace$1.RxCurrentUserService }, { token: i1__namespace$1.RxNotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ShareViewPresetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ShareViewPresetComponent, selector: "rx-share-view-preset", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <form [formGroup]=\"form\">\n    <div class=\"row row-no-gutters\">\n      <div class=\"col\">\n        <adapt-tag-field\n          formControlName=\"users\"\n          rx-id=\"users-input\"\n          [label]=\"strings.users.label\"\n          [placeholder]=\"strings.users.placeholder\"\n          [replaceModelOnWrite]=\"true\"\n          [suppressManual]=\"true\"\n          [search]=\"search\"\n          [selectItemTemplate]=\"selectItemTemplate\"\n          (ngModelChange)=\"markAsDirty()\"\n        >\n        </adapt-tag-field>\n        <div class=\"warning mb-3\" *ngIf=\"isRecipientsLimitReached\">\n          <adapt-icon name=\"exclamation_triangle\" class=\"text-warning\"></adapt-icon>\n          {{ strings.maxRecipientsWarning }}\n        </div>\n      </div>\n      <div class=\"col-auto pl-0\">\n        <button\n          class=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"secondary\"\n          rx-id=\"add-button\"\n          [disabled]=\"!form.get('users').value.length || isRecipientsLimitReached\"\n          (click)=\"onAdd()\"\n        >\n          <span>{{ strings.addButton }}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n\n  <adapt-rx-control-label [label]=\"strings.recipients\"></adapt-rx-control-label>\n\n  <rx-share-view-preset-users-grid\n    [users]=\"selectedUsers\"\n    (remove)=\"removeSelectedUsers($event)\"\n  ></rx-share-view-preset-users-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n\n<ng-template #selectItemTemplate let-result=\"result\" let-term=\"term\">\n  <strong>{{ result.text }}</strong>\n  <div>{{ result.data.emailAddress }}</div>\n</ng-template>\n", styles: [".add-button{margin-top:23px}.warning{margin-top:-10px}:host::ng-deep adapt-tag-field .adapt-mt-wrapper{min-height:80px;padding-right:5px}:host::ng-deep adapt-tag-field .adapt-mt-wrapper .adapt-mt{max-height:72px!important}\n"], components: [{ type: i1__namespace.AdaptMetatagComponent, selector: "adapt-metatag, adapt-tag-field", inputs: ["prefix", "suffix", "maxTagLength", "truncateConfig", "id", "testID", "name", "ariaLabel", "search", "maxHeight", "suppressManual", "label", "placeholder", "mainErrorText", "warningStateText", "width", "errorCheck", "warningCheck", "selectItemTemplate", "tagTemplate", "replaceModelOnWrite", "delimiterSymbol", "popupClass", "disabledInput", "openDropdownOnFocus", "selectItemFormatter", "fullWidthEdit", "tagStyleFormatter"], outputs: ["focus", "blur", "removeTag", "addTag", "initTagEditing"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: ShareViewPresetUsersGridComponent, selector: "rx-share-view-preset-users-grid", inputs: ["users"], outputs: ["remove"] }], directives: [{ type: i2__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i2__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-share-view-preset',
                        templateUrl: './share-view-preset.component.html',
                        styleUrls: ['./share-view-preset.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }, { type: i2__namespace$3.FormBuilder }, { type: i2__namespace.TranslateService }, { type: RxShareViewPresetService }, { type: i1__namespace$1.RxCurrentUserService }, { type: i1__namespace$1.RxNotificationService }]; } });

    var AddSharedViewPresetsComponent = /** @class */ (function (_super) {
        __extends(AddSharedViewPresetsComponent, _super);
        function AddSharedViewPresetsComponent(activeModalRef, injector, translateService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.recordGridConfig$ = rxjs.of({
                columns: [
                    {
                        fieldId: 'label',
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.preset-name.title')
                    },
                    {
                        fieldId: 'ownerFullName',
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.shared-by.title')
                    }
                ],
                enableFiltering: false,
                enableRowSelection: exports.RowSelectionMode.Multiple,
                recordIdField: 'guid',
                styles: 'flex-fill',
                toolbarConfig: {
                    filter: false,
                    visibleColumnsMenu: false
                },
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of({
                    fieldDefinitions: [
                        {
                            id: 'label',
                            resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character
                        },
                        {
                            id: 'ownerFullName',
                            resourceType: i1$4.RX_RECORD_DEFINITION.resourceTypes.character
                        }
                    ]
                }); },
                getData: function () { return rxjs.of({
                    data: _this.presets,
                    totalSize: _this.presets.length
                }); }
            });
            _this.modalData = _this.activeModalRef.getData();
            _this.presets = _this.modalData.newPresets;
            return _this;
        }
        AddSharedViewPresetsComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.isAddButtonDisabled$ = this.recordGrid.rowSelectionChanged.pipe(operators.map(lodash.isEmpty));
        };
        AddSharedViewPresetsComponent.prototype.add = function () {
            var result = this.recordGrid.api.getSelectedRows().map(function (_a) {
                var label = _a.label, guid = _a.guid;
                return ({
                    label: label,
                    guid: guid
                });
            });
            this.activeModalRef.close(result);
        };
        AddSharedViewPresetsComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1.DismissReasons.CLOSE_BTN);
        };
        return AddSharedViewPresetsComponent;
    }(i1$6.RxModalClass));
    AddSharedViewPresetsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsComponent, deps: [{ token: i1__namespace.ActiveModalRef }, { token: i0__namespace.Injector }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AddSharedViewPresetsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AddSharedViewPresetsComponent, selector: "rx-add-shared-view-presets", viewQueries: [{ propertyName: "recordGrid", first: true, predicate: RecordGridComponent, descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <div class=\"mb-4\" style=\"white-space: pre-line\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.description.label'\n        | translate\n    }}\n  </div>\n\n  <rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"add-button\"\n    (click)=\"add()\"\n    [disabled]=\"isAddButtonDisabled$ | async\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i2__namespace.TranslatePipe, "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-add-shared-view-presets',
                        templateUrl: './add-shared-view-presets.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveModalRef }, { type: i0__namespace.Injector }, { type: i2__namespace.TranslateService }]; }, propDecorators: { recordGrid: [{
                    type: i0.ViewChild,
                    args: [RecordGridComponent, { static: true }]
                }] } });

    var ViewPresetSelectorComponent = /** @class */ (function (_super) {
        __extends(ViewPresetSelectorComponent, _super);
        function ViewPresetSelectorComponent(changeDetectorRef, rxGuidService, rxModalService, rxUtilityModalsService, rxViewPresetSelectorUserPreferencesService, translateService, rxFeatureService, rxNotificationService, rxShareViewPresetService) {
            var _this = _super.call(this) || this;
            _this.changeDetectorRef = changeDetectorRef;
            _this.rxGuidService = rxGuidService;
            _this.rxModalService = rxModalService;
            _this.rxUtilityModalsService = rxUtilityModalsService;
            _this.rxViewPresetSelectorUserPreferencesService = rxViewPresetSelectorUserPreferencesService;
            _this.translateService = translateService;
            _this.rxFeatureService = rxFeatureService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxShareViewPresetService = rxShareViewPresetService;
            _this.api = {
                getGuid: function () { return _this.guid; },
                markAppliedViewPresetAsEdited: _this.markAppliedViewPresetAsEdited.bind(_this)
            };
            _this.isOperationInProgressSubject = new rxjs.BehaviorSubject(false);
            _this.isViewPresetEditedSubject = new rxjs.BehaviorSubject(false);
            _this.viewPresetSelectorModel$ = rxjs.combineLatest([_this.isOperationInProgressSubject, _this.isViewPresetEditedSubject]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), isOperationInProgress = _b[0], isViewPresetEdited = _b[1];
                return ({
                    isOperationInProgress: isOperationInProgress,
                    isViewPresetEdited: isViewPresetEdited
                });
            }));
            _this.strings = {
                deleteLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                discardChangesButtonLabel: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes.button.label'),
                editedViewPresetTagLabel: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.edited-view-preset-tag.label'),
                renameLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.rename.label'),
                saveLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),
                saveAsLabel: _this.translateService.instant('com.bmc.arsys.rx.client.common.save-as.label'),
                shareLabel: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share.button.label'),
                systemPresetsTitle: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.system.label'),
                sharedPresetsTitle: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.shared-with-me.label'),
                customPresetsTitle: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.created-by-me.label'),
                sharedTooltip: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.shared-preset.tooltip'),
                addSharedViewPresets: _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.title')
            };
            _this.userPreferencesChangedSubject = new rxjs.Subject();
            _this.isSharingFeatureEnabled = _this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME);
            _this.userPreferencesChangedSubject
                .pipe(operators.switchMap(function () { return _this.rxViewPresetSelectorUserPreferencesService.save(_this.state); }), operators.takeUntil(_this.destroyed$))
                .subscribe();
            return _this;
        }
        ViewPresetSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.notifyPropertyChanged('api', this.api);
            this.config
                .pipe(operators.take(1), operators.map(function (config) { return ({
                systemViewPresetOptions: config.viewPresets,
                customViewPresetOptions: [],
                sharedViewPresetOptions: [],
                appliedViewPresetOption: null,
                isSharingEnabled: config.enableSharing && _this.isSharingFeatureEnabled
            }); }), operators.switchMap(function (state) { return _this.rxViewPresetSelectorUserPreferencesService.applyUserPreferences(_this.guid, state); }), operators.tap(function (_a) {
                var state = _a.state, shouldUpdatePreferences = _a.shouldUpdatePreferences, removedPresetGuid = _a.removedPresetGuid;
                _this.state = state;
                _this.changeDetectorRef.detectChanges();
                _this.isOperationInProgressSubject.next(true);
                if (removedPresetGuid) {
                    _this.runtimeViewModelApi.deleteViewPreset(removedPresetGuid).subscribe();
                }
                if (shouldUpdatePreferences) {
                    _this.userPreferencesChangedSubject.next();
                }
            }), operators.switchMap(function () { return _this.applyViewPreset(_this.state.appliedViewPresetOption); }), operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                .subscribe();
        };
        ViewPresetSelectorComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.isOperationInProgressSubject.complete();
            this.isViewPresetEditedSubject.complete();
            this.userPreferencesChangedSubject.complete();
        };
        ViewPresetSelectorComponent.prototype.deleteViewPreset = function (viewPresetOptionToRemove) {
            var _this = this;
            this.rxUtilityModalsService
                .confirm(this.translateService.instant(viewPresetOptionToRemove.userSharedViewPresetGuid
                ? 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-shared-view-preset-confirmation.message'
                : 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-view-preset-confirmation.message'))
                .then(function (isConfirmed) {
                if (isConfirmed) {
                    var viewPresetGuidToDelete_1 = _this.state.appliedViewPresetOption.guid;
                    _this.state.appliedViewPresetOption = _this.state.systemViewPresetOptions[0];
                    _this.isViewPresetEditedSubject.next(false);
                    _this.state.customViewPresetOptions = lodash.reject(_this.state.customViewPresetOptions, {
                        guid: viewPresetGuidToDelete_1
                    });
                    _this.state.sharedViewPresetOptions = lodash.reject(_this.state.sharedViewPresetOptions, {
                        guid: viewPresetGuidToDelete_1
                    });
                    _this.userPreferencesChangedSubject.next();
                    _this.isOperationInProgressSubject.next(true);
                    _this.runtimeViewModelApi
                        .applyViewPreset(_this.guid, _this.state.appliedViewPresetOption.guid)
                        .pipe(operators.finalize(function () {
                        var deleteSharedViewPreset$ = viewPresetOptionToRemove.userSharedViewPresetGuid
                            ? _this.rxShareViewPresetService.deleteSharedViewPreset(viewPresetOptionToRemove.userSharedViewPresetGuid)
                            : rxjs.of(null);
                        deleteSharedViewPreset$
                            .pipe(operators.switchMap(function () { return _this.runtimeViewModelApi.deleteViewPreset(viewPresetGuidToDelete_1); }), operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                            .subscribe();
                    }))
                        .subscribe();
                }
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.discardViewPresetChanges = function () {
            var _this = this;
            this.rxUtilityModalsService
                .confirm(this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes-confirmation.message'))
                .then(function (isConfirmed) {
                if (isConfirmed) {
                    _this.isViewPresetEditedSubject.next(false);
                    _this.isOperationInProgressSubject.next(true);
                    var appliedViewPresetOption_1 = _this.state.appliedViewPresetOption;
                    rxjs.iif(function () { return appliedViewPresetOption_1.isShared; }, _this.getSharedViewPresetData(appliedViewPresetOption_1).pipe(operators.switchMap(function (sharedViewPresets) { return _this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption_1.guid, sharedViewPresets); })), _this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption_1.guid))
                        .pipe(operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                        .subscribe();
                }
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.renameViewPreset = function () {
            var _this = this;
            this.openRenamingModal(this.strings.renameLabel, true)
                .then(function (viewPresetName) {
                _this.state.appliedViewPresetOption.label = viewPresetName;
                _this.state.customViewPresetOptions = lodash.sortBy(_this.state.customViewPresetOptions, 'label');
                _this.userPreferencesChangedSubject.next();
                _this.changeDetectorRef.detectChanges();
                // if preset is shared with others - updating with new name
                if (_this.state.appliedViewPresetOption.userSharedViewPresetGuid) {
                    _this.saveSharedViewPreset().subscribe();
                }
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.selectPreset = function (viewPresetOption) {
            var _this = this;
            this.state.appliedViewPresetOption = viewPresetOption;
            this.isViewPresetEditedSubject.next(false);
            this.userPreferencesChangedSubject.next();
            this.isOperationInProgressSubject.next(true);
            this.applyViewPreset(viewPresetOption)
                .pipe(operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                .subscribe();
        };
        ViewPresetSelectorComponent.prototype.saveAsViewPreset = function () {
            var _this = this;
            this.openRenamingModal(this.strings.saveAsLabel)
                .then(function (viewPresetName) {
                var viewPreset = {
                    guid: _this.rxGuidService.generate(),
                    label: viewPresetName
                };
                _this.state.customViewPresetOptions.push(viewPreset);
                _this.state.customViewPresetOptions = lodash.sortBy(_this.state.customViewPresetOptions, 'label');
                _this.state.appliedViewPresetOption = viewPreset;
                _this.isViewPresetEditedSubject.next(false);
                _this.userPreferencesChangedSubject.next();
                _this.isOperationInProgressSubject.next(true);
                _this.runtimeViewModelApi
                    .applyViewPreset(_this.guid, _this.state.appliedViewPresetOption.guid)
                    .pipe(operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                    .subscribe();
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.saveViewPreset = function () {
            var _this = this;
            this.isViewPresetEditedSubject.next(false);
            this.isOperationInProgressSubject.next(true);
            var saveSharedViewPreset$ = this.state.appliedViewPresetOption.userSharedViewPresetGuid
                ? this.saveSharedViewPreset()
                : rxjs.of(null);
            saveSharedViewPreset$
                .pipe(operators.switchMap(function () { return _this.runtimeViewModelApi.saveViewPreset(_this.state.appliedViewPresetOption.guid); }), operators.finalize(function () { return _this.isOperationInProgressSubject.next(false); }))
                .subscribe();
        };
        ViewPresetSelectorComponent.prototype.shareViewPreset = function () {
            var _this = this;
            this.rxModalService
                .openModal({
                content: ShareViewPresetComponent,
                title: this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.title'),
                data: {
                    runtimeViewModelApi: this.runtimeViewModelApi,
                    currentViewPreset: this.state.appliedViewPresetOption,
                    presetSelectorGuid: this.guid
                },
                size: 'sm'
            })
                .then(function (sharedViewPresetGuid) {
                _this.state.appliedViewPresetOption.userSharedViewPresetGuid = sharedViewPresetGuid;
                _this.userPreferencesChangedSubject.next();
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.onAddSharedPresetsClick = function () {
            var _this = this;
            this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.guid).subscribe(function (presets) {
                var existingSharedPresetsGuids = _this.state.sharedViewPresetOptions.map(function (option) { return option.guid; });
                var newPresets = presets.filter(function (preset) { return !existingSharedPresetsGuids.includes(preset.guid); });
                if (newPresets.length) {
                    _this.openAddSharedPresetsModal(newPresets);
                }
                else {
                    _this.rxNotificationService.addInfoMessage(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.message'), _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.title'));
                }
            });
        };
        ViewPresetSelectorComponent.prototype.openAddSharedPresetsModal = function (newPresets) {
            var _this = this;
            this.rxModalService
                .openModal({
                content: AddSharedViewPresetsComponent,
                title: this.strings.addSharedViewPresets,
                data: {
                    presetSelectorGuid: this.guid,
                    newPresets: newPresets
                },
                size: 'sm'
            })
                .then(function (addedPresets) {
                _this.state.sharedViewPresetOptions = _this.state.sharedViewPresetOptions.concat(addedPresets.map(function (preset) { return (Object.assign(Object.assign({}, preset), { isShared: true })); }));
                _this.userPreferencesChangedSubject.next();
                if (addedPresets.length) {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.message'), _this.translateService.instant('com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.title'));
                }
            })
                .catch(lodash.noop);
        };
        ViewPresetSelectorComponent.prototype.markAppliedViewPresetAsEdited = function () {
            this.isViewPresetEditedSubject.next(true);
        };
        ViewPresetSelectorComponent.prototype.openRenamingModal = function (fieldLabel, isEdit) {
            var _this = this;
            var existingViewPresets = __spreadArray(__spreadArray([], __read(this.state.customViewPresetOptions)), __read(this.state.systemViewPresetOptions));
            if (isEdit) {
                existingViewPresets = existingViewPresets.filter(function (viewPreset) { return viewPreset.guid !== _this.state.appliedViewPresetOption.guid; });
            }
            return this.rxModalService.openModal({
                content: RenameViewPresetComponent,
                data: {
                    fieldLabel: fieldLabel,
                    existingViewPresetNames: existingViewPresets.map(function (_a) {
                        var label = _a.label;
                        return label;
                    }),
                    viewPresetName: this.state.appliedViewPresetOption.label
                },
                size: 'sm'
            });
        };
        ViewPresetSelectorComponent.prototype.applyViewPreset = function (viewPresetOption) {
            var _this = this;
            if (viewPresetOption.isShared) {
                return this.getSharedViewPresetData(viewPresetOption).pipe(operators.switchMap(function (sharedViewPresets) { return _this.runtimeViewModelApi.applyViewPreset(_this.guid, viewPresetOption.guid, sharedViewPresets); }), operators.catchError(function (error) { return _this.handleSharedViewPresetLoadError(error, viewPresetOption); }));
            }
            else {
                return this.runtimeViewModelApi.applyViewPreset(this.guid, viewPresetOption.guid);
            }
        };
        ViewPresetSelectorComponent.prototype.saveSharedViewPreset = function () {
            return this.rxShareViewPresetService.saveSharedViewPreset({
                runtimeViewModelApi: this.runtimeViewModelApi,
                currentViewPreset: this.state.appliedViewPresetOption,
                presetSelectorGuid: this.guid
            }, this.state.appliedViewPresetOption.userSharedViewPresetGuid);
        };
        ViewPresetSelectorComponent.prototype.getSharedViewPresetData = function (viewPresetOption) {
            return this.rxShareViewPresetService.getSharedViewPresetData(viewPresetOption.guid).pipe(operators.map(function (_a) {
                var viewPresetName = _a.viewPresetName, sharedViewPresets = _a.sharedViewPresets;
                viewPresetOption.label = viewPresetName;
                return sharedViewPresets;
            }));
        };
        ViewPresetSelectorComponent.prototype.handleSharedViewPresetLoadError = function (error, viewPresetOption) {
            if (error.status === 404) {
                this.state.sharedViewPresetOptions = this.state.sharedViewPresetOptions.filter(function (option) { return option.guid !== viewPresetOption.guid; });
                this.runtimeViewModelApi.deleteViewPreset(viewPresetOption.guid).subscribe();
                // if preset was removed - selecting first system preset instead
                this.selectPreset(this.state.systemViewPresetOptions[0]);
                return rxjs.EMPTY;
            }
            else {
                return rxjs.throwError(error);
            }
        };
        return ViewPresetSelectorComponent;
    }(i1$5.BaseViewComponent));
    ViewPresetSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i2__namespace$1.RxGuidService }, { token: i1__namespace$6.RxModalService }, { token: i1__namespace$6.RxUtilityModalsService }, { token: RxViewPresetSelectorUserPreferencesService }, { token: i2__namespace.TranslateService }, { token: i1__namespace$1.RxFeatureService }, { token: i1__namespace$1.RxNotificationService }, { token: RxShareViewPresetService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ViewPresetSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ViewPresetSelectorComponent, selector: "rx-view-preset-selector", inputs: { config: "config", runtimeViewModelApi: "runtimeViewModelApi" }, providers: [RxViewPresetSelectorUserPreferencesService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"viewPresetSelectorModel$ | async as viewPresetSelectorModel\">\n  <div class=\"btn-group align-items-center\" *ngIf=\"state\">\n    <div adaptDropdown>\n      <button\n        adapt-button\n        adaptDropdownToggle\n        type=\"button\"\n        btn-type=\"tertiary\"\n        class=\"text-default font-weight-bold text-left\"\n        rx-id=\"toggle-button\"\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      >\n        {{ state.appliedViewPresetOption.label }}\n      </button>\n\n      <div class=\"dropdown-menu {{ isSharingFeatureEnabled ? 'preset-selector' : '' }}\" adaptDropdownMenu tabindex=\"0\">\n        <ng-container *ngIf=\"state.customViewPresetOptions.length\">\n          <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.customPresetsTitle }}</div>\n          <button\n            *ngFor=\"let customViewPresetOption of state.customViewPresetOptions\"\n            [class.active]=\"customViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            class=\"dropdown-item\"\n            type=\"button\"\n            (click)=\"selectPreset(customViewPresetOption)\"\n            rx-id=\"custom-view-preset\"\n          >\n            {{ customViewPresetOption.label }}\n\n            <adapt-icon\n              *ngIf=\"customViewPresetOption.userSharedViewPresetGuid && isSharingFeatureEnabled\"\n              name=\"users\"\n              [adaptTooltip]=\"strings.sharedTooltip\"\n              class=\"btn-link float-end ml-2\"\n            ></adapt-icon>\n          </button>\n\n          <div *ngIf=\"!isSharingFeatureEnabled\" class=\"dropdown-divider\"></div>\n        </ng-container>\n\n        <ng-container *ngIf=\"state.isSharingEnabled\">\n          <div class=\"dropdown-heading\">\n            {{ strings.sharedPresetsTitle }}\n\n            <button\n              type=\"button\"\n              class=\"btn btn-link float-end p-0 pl-1 btn-add-shared\"\n              rx-id=\"add-preset-button\"\n              [adaptTooltip]=\"strings.addSharedViewPresets\"\n              (click)=\"onAddSharedPresetsClick()\"\n            >\n              <adapt-icon name=\"plus\"></adapt-icon>\n            </button>\n          </div>\n\n          <button\n            *ngFor=\"let sharedViewPresetOption of state.sharedViewPresetOptions\"\n            class=\"dropdown-item\"\n            [class.active]=\"sharedViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            type=\"button\"\n            (click)=\"selectPreset(sharedViewPresetOption)\"\n            rx-id=\"shared-view-preset\"\n          >\n            {{ sharedViewPresetOption.label }}\n          </button>\n        </ng-container>\n\n        <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.systemPresetsTitle }}</div>\n\n        <button\n          *ngFor=\"let systemViewPresetOption of state.systemViewPresetOptions\"\n          class=\"dropdown-item\"\n          [class.active]=\"systemViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n          type=\"button\"\n          (click)=\"selectPreset(systemViewPresetOption)\"\n          rx-id=\"system-view-preset\"\n        >\n          {{ systemViewPresetOption.label }}\n        </button>\n      </div>\n    </div>\n\n    <span class=\"badge badge-secondary extra-small mx-2\" *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\">\n      {{ strings.editedViewPresetTagLabel }}\n    </span>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      *ngIf=\"\n        !state.appliedViewPresetOption.isSystem &&\n        !state.appliedViewPresetOption.isShared &&\n        viewPresetSelectorModel.isViewPresetEdited\n      \"\n      class=\"d-icon-left-floppy p-2\"\n      rx-id=\"save-button\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveViewPreset()\"\n    >\n      {{ strings.saveLabel }}\n    </adapt-button>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveAsViewPreset()\"\n      class=\"d-icon-left-save_all_o\"\n      rx-id=\"save-as-button\"\n      *ngIf=\"\n        state.appliedViewPresetOption.isSystem ||\n        state.appliedViewPresetOption.isShared ||\n        !viewPresetSelectorModel.isViewPresetEdited\n      \"\n    >\n      {{ strings.saveAsLabel }}\n    </adapt-button>\n\n    <div\n      class=\"dropdown header-cell-menu-btn\"\n      adaptDropdown\n      *ngIf=\"viewPresetSelectorModel.isViewPresetEdited || !state.appliedViewPresetOption.isSystem\"\n    >\n      <button\n        rx-id=\"more-actions-toggle-button\"\n        class=\"d-icon-ellipsis btn btn-link px-0\"\n        type=\"button\"\n        adaptDropdownToggle\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n        [showCaret]=\"false\"\n      ></button>\n\n      <div class=\"dropdown-menu\" adaptDropdownMenu tabindex=\"0\">\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\"\n          class=\"d-icon-left-undo_adapt dropdown-item\"\n          rx-id=\"discard-changes-button\"\n          (click)=\"discardViewPresetChanges()\"\n        >\n          {{ strings.discardChangesButtonLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          (click)=\"saveAsViewPreset()\"\n          class=\"d-icon-left-save_all_o dropdown-item\"\n          rx-id=\"save-as-button\"\n          *ngIf=\"\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            viewPresetSelectorModel.isViewPresetEdited\n          \"\n        >\n          {{ strings.saveAsLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem && !state.appliedViewPresetOption.isShared\"\n          class=\"d-icon-left-field_text dropdown-item\"\n          rx-id=\"rename-selected-view-preset-button\"\n          (click)=\"renameViewPreset()\"\n        >\n          {{ strings.renameLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem\"\n          class=\"d-icon-left-trash_adapt dropdown-item\"\n          rx-id=\"remove-selected-view-preset-button\"\n          (click)=\"deleteViewPreset(state.appliedViewPresetOption)\"\n        >\n          {{ strings.deleteLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"\n            state.isSharingEnabled &&\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            !viewPresetSelectorModel.isViewPresetEdited\n          \"\n          class=\"d-icon-left-share dropdown-item\"\n          rx-id=\"share-view-preset-button\"\n          (click)=\"shareViewPreset()\"\n        >\n          {{ strings.shareLabel }}\n        </adapt-button>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", styles: ["button[rx-id=toggle-button],button[rx-id=shared-view-preset]{white-space:normal;word-break:break-word}.preset-selector .dropdown-heading{padding:.375rem .875rem;font-weight:bold}.preset-selector .dropdown-item{padding-left:1.75rem}.btn-add-shared{margin-top:-1px}\n"], components: [{ type: i1__namespace.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.AdaptTooltipDirective, selector: "[adaptTooltip]", inputs: ["popupDelay", "placement", "width", "minWidth", "useWidthFitting", "adaptRadarDisableEventSending", "adaptTooltip", "manual"], outputs: ["shown", "hidden"], exportAs: ["tooltip"] }], pipes: { "async": i3__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-view-preset-selector',
                        templateUrl: './view-preset-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [RxViewPresetSelectorUserPreferencesService],
                        styleUrls: ['./view-preset-selector.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace$1.RxGuidService }, { type: i1__namespace$6.RxModalService }, { type: i1__namespace$6.RxUtilityModalsService }, { type: RxViewPresetSelectorUserPreferencesService }, { type: i2__namespace.TranslateService }, { type: i1__namespace$1.RxFeatureService }, { type: i1__namespace$1.RxNotificationService }, { type: RxShareViewPresetService }]; }, propDecorators: { config: [{
                    type: i0.Input
                }], runtimeViewModelApi: [{
                    type: i0.Input
                }] } });

    var ViewPresetSelectorAdapterService = /** @class */ (function () {
        function ViewPresetSelectorAdapterService() {
        }
        ViewPresetSelectorAdapterService.prototype.adaptDefinition = function (viewPresetSelectorComponentDefinition) {
            viewPresetSelectorComponentDefinition.componentDefinitions
                .sort(function (a, b) { return a.propertiesByName.index - b.propertiesByName.index; })
                .forEach(function (componentDefinition) {
                Object.assign(componentDefinition.propertiesByName, {
                    guid: componentDefinition.guid,
                    isSystem: true
                });
            });
        };
        return ViewPresetSelectorAdapterService;
    }());
    ViewPresetSelectorAdapterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorAdapterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ViewPresetSelectorAdapterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorAdapterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorAdapterService, decorators: [{
                type: i0.Injectable
            }] });

    var ShareViewPresetModule = /** @class */ (function () {
        function ShareViewPresetModule() {
        }
        return ShareViewPresetModule;
    }());
    ShareViewPresetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ShareViewPresetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetModule, declarations: [ShareViewPresetComponent, ShareViewPresetUsersGridComponent], imports: [i1.AdaptMetatagModule,
            i1.AdaptButtonModule,
            i2$4.ReactiveFormsModule,
            i2$1.TranslateModule,
            RecordGridModule,
            i3.CommonModule,
            i1.AdaptIconModule,
            i1.AdaptRxLabelModule] });
    ShareViewPresetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetModule, imports: [[
                i1.AdaptMetatagModule,
                i1.AdaptButtonModule,
                i2$4.ReactiveFormsModule,
                i2$1.TranslateModule,
                RecordGridModule,
                i3.CommonModule,
                i1.AdaptIconModule,
                i1.AdaptRxLabelModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ShareViewPresetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptMetatagModule,
                            i1.AdaptButtonModule,
                            i2$4.ReactiveFormsModule,
                            i2$1.TranslateModule,
                            RecordGridModule,
                            i3.CommonModule,
                            i1.AdaptIconModule,
                            i1.AdaptRxLabelModule
                        ],
                        declarations: [ShareViewPresetComponent, ShareViewPresetUsersGridComponent]
                    }]
            }] });

    var AddSharedViewPresetsModule = /** @class */ (function () {
        function AddSharedViewPresetsModule() {
        }
        return AddSharedViewPresetsModule;
    }());
    AddSharedViewPresetsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AddSharedViewPresetsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsModule, declarations: [AddSharedViewPresetsComponent], imports: [i3.CommonModule, i2$1.TranslateModule, i1.AdaptButtonModule, RecordGridModule] });
    AddSharedViewPresetsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsModule, imports: [[i3.CommonModule, i2$1.TranslateModule, i1.AdaptButtonModule, RecordGridModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AddSharedViewPresetsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AddSharedViewPresetsComponent],
                        imports: [i3.CommonModule, i2$1.TranslateModule, i1.AdaptButtonModule, RecordGridModule]
                    }]
            }] });

    var ViewPresetSelectorModule = /** @class */ (function () {
        function ViewPresetSelectorModule(rxDefinitionAdapterRegistryService, viewPresetSelectorAdapterService) {
            this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;
            this.viewPresetSelectorAdapterService = viewPresetSelectorAdapterService;
            rxDefinitionAdapterRegistryService.registerRuntimeAdapter(i1$1.RxViewComponentType.ViewPresetSelector, this.viewPresetSelectorAdapterService);
        }
        return ViewPresetSelectorModule;
    }());
    ViewPresetSelectorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorModule, deps: [{ token: i1__namespace$1.RxDefinitionAdapterRegistryService }, { token: ViewPresetSelectorAdapterService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewPresetSelectorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorModule, declarations: [RenameViewPresetComponent, ViewPresetSelectorComponent], imports: [i1.AdaptButtonModule,
            i1.AdaptDropdownModule,
            i1.AdaptRxTextfieldModule,
            i1.AdaptTooltipModule,
            i3.CommonModule,
            i2$4.ReactiveFormsModule,
            i2$2.RxUniqueValidatorModule,
            i2$1.TranslateModule,
            i2$2.RxNoWhitespaceValidatorModule,
            ShareViewPresetModule,
            AddSharedViewPresetsModule,
            i1.AdaptIconModule], exports: [ViewPresetSelectorComponent] });
    ViewPresetSelectorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorModule, providers: [ViewPresetSelectorAdapterService], imports: [[
                i1.AdaptButtonModule,
                i1.AdaptDropdownModule,
                i1.AdaptRxTextfieldModule,
                i1.AdaptTooltipModule,
                i3.CommonModule,
                i2$4.ReactiveFormsModule,
                i2$2.RxUniqueValidatorModule,
                i2$1.TranslateModule,
                i2$2.RxNoWhitespaceValidatorModule,
                ShareViewPresetModule,
                AddSharedViewPresetsModule,
                i1.AdaptIconModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1.AdaptButtonModule,
                            i1.AdaptDropdownModule,
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptTooltipModule,
                            i3.CommonModule,
                            i2$4.ReactiveFormsModule,
                            i2$2.RxUniqueValidatorModule,
                            i2$1.TranslateModule,
                            i2$2.RxNoWhitespaceValidatorModule,
                            ShareViewPresetModule,
                            AddSharedViewPresetsModule,
                            i1.AdaptIconModule
                        ],
                        exports: [ViewPresetSelectorComponent],
                        declarations: [RenameViewPresetComponent, ViewPresetSelectorComponent],
                        entryComponents: [ViewPresetSelectorComponent],
                        providers: [ViewPresetSelectorAdapterService]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.RxDefinitionAdapterRegistryService }, { type: ViewPresetSelectorAdapterService }]; } });

    var ViewPresetSelectorDesignComponent = /** @class */ (function () {
        function ViewPresetSelectorDesignComponent() {
        }
        return ViewPresetSelectorDesignComponent;
    }());
    ViewPresetSelectorDesignComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ViewPresetSelectorDesignComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ViewPresetSelectorDesignComponent, selector: "rx-view-preset-selector-design", inputs: { model: "model" }, ngImport: i0__namespace, template: "<button\n  class=\"dropdown-toggle text-default font-weight-bold text-left\"\n  adapt-button\n  btn-type=\"tertiary\"\n  type=\"button\"\n  readonly\n>\n  {{ model.label$ | async }}\n</button>\n", styles: ["button{white-space:normal;word-break:break-word}\n"], components: [{ type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "async": i3__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-view-preset-selector-design',
                        templateUrl: './view-preset-selector-design.component.html',
                        styleUrls: ['./view-preset-selector-design.component.scss']
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var PresetsListWidgetComponent = /** @class */ (function (_super) {
        __extends(PresetsListWidgetComponent, _super);
        function PresetsListWidgetComponent(injector, translateService) {
            var _this = _super.call(this, injector) || this;
            _this.injector = injector;
            _this.translateService = translateService;
            _this.editedPreset = null;
            _this.presets = [];
            _this.strings = {
                cannotBeBlank: _this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message', {
                    propertyName: 'View preset name'
                }),
                duplicateValue: _this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message')
            };
            _this.itemValidationFn = _this.itemValidation.bind(_this);
            return _this;
        }
        PresetsListWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.designerItemModel.sandbox
                .getChildComponents()
                .pipe(operators.first(), operators.takeUntil(this.designerItemModel.sandbox.destroyed$))
                .subscribe(function (res) {
                res.sort(function (a, b) { return a.data.index - b.data.index; });
                _this.presets = res.map(function (component) { return ({
                    name: component.data.label,
                    id: component.guid
                }); });
            });
        };
        PresetsListWidgetComponent.prototype.onPresetsListChange = function (items) {
            items.forEach(function (item) {
                item.name = lodash.trim(item.name);
            });
            this.presets = lodash.cloneDeep(items);
            var payload = items.map(function (_a, index) {
                var name = _a.name, id = _a.id;
                return ({
                    type: i1$1.RxViewComponentType.ViewPreset,
                    guid: String(id),
                    data: {
                        label: name,
                        index: index
                    }
                });
            });
            this.designerItemModel.sandbox.setChildren(payload);
        };
        PresetsListWidgetComponent.prototype.onListItemAdd = function () {
            this.presets.push(this.presets.shift());
        };
        PresetsListWidgetComponent.prototype.onListItemEdit = function (preset) {
            this.editedPreset = preset;
        };
        PresetsListWidgetComponent.prototype.onListItemUpdate = function () {
            this.editedPreset = null;
        };
        PresetsListWidgetComponent.prototype.focus = function () {
            this.adaptRxListBuilderComponent.inputEl.nativeElement.focus();
        };
        PresetsListWidgetComponent.prototype.itemValidation = function (value, items, isEdit) {
            var _this = this;
            var errorMessage = null;
            var otherItemNames = lodash.chain(items)
                .reject(function (item) { return isEdit && item.id === _this.editedPreset.id; })
                .map('name')
                .value();
            var trimmedValue = lodash.trim(value);
            if (trimmedValue.length === 0) {
                errorMessage = this.strings.cannotBeBlank;
            }
            else if (otherItemNames.includes(trimmedValue)) {
                errorMessage = this.strings.duplicateValue;
            }
            return errorMessage;
        };
        return PresetsListWidgetComponent;
    }(i2.InspectorWidgetBase));
    PresetsListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetComponent, deps: [{ token: i0__namespace.Injector }, { token: i2__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PresetsListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PresetsListWidgetComponent, selector: "rx-presets-list-widget", viewQueries: [{ propertyName: "adaptRxListBuilderComponent", first: true, predicate: i1.AdaptRxListBuilderComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<adapt-rx-list-builder\n  [label]=\"'View preset names'\"\n  [(ngModel)]=\"presets\"\n  (ngModelChange)=\"onPresetsListChange($event)\"\n  [hideListAreaLabel]=\"true\"\n  [texts]=\"options.texts\"\n  [readonly]=\"isDisabled\"\n  (listItemAdd)=\"onListItemAdd()\"\n  (listItemEdit)=\"onListItemEdit($event)\"\n  (listItemUpdate)=\"onListItemUpdate()\"\n  [itemValidation]=\"itemValidationFn\"\n>\n</adapt-rx-list-builder>\n", styles: [""], components: [{ type: i1__namespace.AdaptRxListBuilderComponent, selector: "adapt-rx-list-builder", inputs: ["hideSearchField", "hideEdit", "hideDelete", "hideListAreaLabel", "customSort", "texts", "menuHeight", "listItemMaxLength", "generateListItemId", "itemValidation", "disabled", "treeStructure", "listItemFormatter", "listItemSetterProp", "listItemContentTemplate", "selectionMode"], outputs: ["listItemAdd", "listItemEdit", "listItemUpdate", "listItemRemove"] }], directives: [{ type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-presets-list-widget',
                        templateUrl: './presets-list-widget.component.html',
                        styleUrls: ['./presets-list-widget.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i2__namespace.TranslateService }]; }, propDecorators: { adaptRxListBuilderComponent: [{
                    type: i0.ViewChild,
                    args: [i1.AdaptRxListBuilderComponent]
                }] } });

    var ViewPresetSelectorDesignModel = /** @class */ (function (_super) {
        __extends(ViewPresetSelectorDesignModel, _super);
        function ViewPresetSelectorDesignModel() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.presetComponentGuids$ = _this.sandbox.getChildComponentGuids();
            _this.otherPresetSelectorsNames$ = _this.sandbox
                .getComponentsByType(i1$1.RxViewComponentType.ViewPresetSelector)
                .pipe(operators.map(function (selectors) { return selectors
                .filter(function (component) { return component.guid !== _this.sandbox.guid; })
                .map(function (component) { return component.data.name.trim(); }); }));
            _this.label$ = _this.sandbox.getChildComponents().pipe(operators.map(function (components) { return components.sort(function (a, b) { return a.data.index - b.data.index; }); }), operators.map(function (components) { return (components[0] ? components[0].data.label : 'No view presets added'); }), operators.takeUntil(_this.sandbox.destroyed$));
            _this.rxFeatureService = _this.injector.get(i1$2.RxFeatureService);
            return _this;
        }
        ViewPresetSelectorDesignModel.getInitialProperties = function (initialProperties) {
            return Object.assign(Object.assign({ name: 'View preset selector', styles: null, enableSharing: false }, i1$1.RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE), initialProperties);
        };
        ViewPresetSelectorDesignModel.prototype.rxInit = function () {
            var _this = this;
            this.sandbox.updateInspectorConfig(this.setInspectorConfig());
            rxjs.combineLatest([this.sandbox.componentProperties$, this.presetComponentGuids$])
                .pipe(operators.withLatestFrom(this.otherPresetSelectorsNames$), operators.map(function (_a) {
                var _b = __read(_a, 2), _c = __read(_b[0], 2), componentProperties = _c[0], presetGuids = _c[1], otherPresetSelectorsNames = _b[1];
                return _this.validate(componentProperties, presetGuids, otherPresetSelectorsNames);
            }), operators.takeUntil(this.sandbox.destroyed$))
                .subscribe(function (validationIssues) {
                _this.sandbox.setValidationIssues(validationIssues);
            });
        };
        ViewPresetSelectorDesignModel.prototype.setInspectorConfig = function () {
            return {
                inspectorSectionConfigs: [
                    {
                        label: 'General',
                        controls: [
                            {
                                name: 'name',
                                component: i2.TextFormControlComponent,
                                options: {
                                    label: 'Name',
                                    required: true
                                }
                            },
                            {
                                component: PresetsListWidgetComponent,
                                widgetName: 'presetsList'
                            },
                            this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME)
                                ? {
                                    name: 'enableSharing',
                                    component: i2.SwitchFormControlComponent,
                                    options: {
                                        label: 'Enable sharing'
                                    }
                                }
                                : null,
                            i1$3.getAvailableOnDevicesInspectorConfig(),
                            i1$3.getStylesFieldInspectorConfig()
                        ].filter(Boolean)
                    }
                ]
            };
        };
        ViewPresetSelectorDesignModel.prototype.validate = function (model, presetGuids, otherPresetSelectorsNames) {
            var validationIssues = [];
            var trimmedModelName = model.name.trim();
            if (!trimmedModelName) {
                validationIssues.push(this.sandbox.createError('Name cannot be blank.', 'name'));
            }
            else if (otherPresetSelectorsNames.includes(trimmedModelName)) {
                validationIssues.push(this.sandbox.createError('Name must be unique.', 'name'));
            }
            if (!presetGuids.length) {
                validationIssues.push(this.sandbox.createError('At least one view preset must be added.', 'presetsList'));
            }
            validationIssues = validationIssues.concat(i1$3.validateStandardProps(model));
            return validationIssues;
        };
        return ViewPresetSelectorDesignModel;
    }(i1$3.ViewDesignerComponentModel));

    var PresetsListWidgetModule = /** @class */ (function () {
        function PresetsListWidgetModule() {
        }
        return PresetsListWidgetModule;
    }());
    PresetsListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PresetsListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetModule, declarations: [PresetsListWidgetComponent], imports: [i3.CommonModule, i1.AdaptRxListBuilderModule, i2$4.FormsModule], exports: [PresetsListWidgetComponent] });
    PresetsListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetModule, imports: [[i3.CommonModule, i1.AdaptRxListBuilderModule, i2$4.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PresetsListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PresetsListWidgetComponent],
                        exports: [PresetsListWidgetComponent],
                        imports: [i3.CommonModule, i1.AdaptRxListBuilderModule, i2$4.FormsModule]
                    }]
            }] });

    var ViewPresetSelectorDesignModule = /** @class */ (function () {
        function ViewPresetSelectorDesignModule() {
        }
        return ViewPresetSelectorDesignModule;
    }());
    ViewPresetSelectorDesignModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewPresetSelectorDesignModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignModule, declarations: [ViewPresetSelectorDesignComponent], imports: [i3.CommonModule, PresetsListWidgetModule, i1.AdaptButtonModule] });
    ViewPresetSelectorDesignModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignModule, imports: [[i3.CommonModule, PresetsListWidgetModule, i1.AdaptButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorDesignModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, PresetsListWidgetModule, i1.AdaptButtonModule],
                        declarations: [ViewPresetSelectorDesignComponent],
                        entryComponents: [ViewPresetSelectorDesignComponent]
                    }]
            }] });

    var ViewPresetSelectorRegistrationModule = /** @class */ (function () {
        function ViewPresetSelectorRegistrationModule(rxViewComponentRegistryService, componentFactoryResolver) {
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.componentFactoryResolver = componentFactoryResolver;
            rxViewComponentRegistryService.register({
                type: i1$1.RxViewComponentType.ViewPresetSelector,
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ViewPresetSelectorComponent),
                properties: [
                    {
                        name: 'styles'
                    },
                    {
                        name: 'enableSharing',
                        type: i1$1.ViewComponentPropertyType.Boolean,
                        designType: i1$1.ViewComponentPropertyType.Boolean
                    },
                    i1$1.RX_AVAILABLE_ON_DEVICES_PROP_DESC
                ],
                isContainerComponent: true,
                name: 'View preset selector',
                group: i1$3.RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,
                icon: 'screens_triangle_down_circle',
                designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ViewPresetSelectorDesignComponent),
                designComponentModel: ViewPresetSelectorDesignModel,
                bundleId: i1$2.RX_APPLICATION.platformBundleId
            }, {
                type: i1$1.RxViewComponentType.ViewPreset,
                configPropertyName: 'viewPresets',
                isDataComponent: true,
                properties: [
                    {
                        name: 'label',
                        localizable: true
                    },
                    {
                        name: 'index',
                        designType: i1$1.ViewComponentPropertyType.Number,
                        type: i1$1.ViewComponentPropertyType.Number
                    }
                ]
            });
        }
        return ViewPresetSelectorRegistrationModule;
    }());
    ViewPresetSelectorRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorRegistrationModule, deps: [{ token: i1__namespace$4.RxViewComponentRegistryService }, { token: i0__namespace.ComponentFactoryResolver }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewPresetSelectorRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorRegistrationModule, imports: [ViewPresetSelectorDesignModule, ViewPresetSelectorModule] });
    ViewPresetSelectorRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorRegistrationModule, imports: [[ViewPresetSelectorDesignModule, ViewPresetSelectorModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewPresetSelectorRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ViewPresetSelectorDesignModule, ViewPresetSelectorModule]
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.RxViewComponentRegistryService }, { type: i0__namespace.ComponentFactoryResolver }]; } });

    var GainsightAdminOptInComponent = /** @class */ (function (_super) {
        __extends(GainsightAdminOptInComponent, _super);
        function GainsightAdminOptInComponent(translateService, rxNotificationService, rxGainsightConfiguratorService) {
            var _this = _super.call(this) || this;
            _this.translateService = translateService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            _this.deploymentTypeOptions = i2.RX_GAINSIGHT.deploymentTypes;
            _this.environmentTypeOptions = i2.RX_GAINSIGHT.environmentTypes;
            _this.vm$ = _this.rxGainsightConfiguratorService.getGainsightConfiguration(i1$2.RX_APPLICATION.innovationStudioBundleId).pipe(operators.take(1), operators.filter(function (config) { return Boolean(config); }), operators.map(function (config) { return config.settings; }), operators.map(function (settings) { return ({
                deploymentTypeOptions: _this.deploymentTypeOptions.filter(function (deploymentType) { return deploymentType.name === settings.deploymentType; }),
                environmentTypeOptions: [settings.environmentType],
                useAdaptRadar: settings.useAdaptRadar,
                loadGainsightFromBmcIt: settings.loadGainsightFromBmcIt,
                adaptAgreementState: {
                    organizationPerformance: settings.enableGainsight,
                    accountMarketing: false,
                    accountPerformance: false,
                    organizationMarketing: false
                }
            }); }), operators.shareReplay(1));
            return _this;
        }
        GainsightAdminOptInComponent.prototype.optionFormatter = function (deploymentType) {
            return deploymentType.name;
        };
        GainsightAdminOptInComponent.prototype.save = function () {
            var _this = this;
            this.vm$
                .pipe(operators.take(1), operators.map(function (vm) { return (Object.assign(Object.assign({}, vm), { deploymentType: vm.deploymentTypeOptions[0].id, environmentType: vm.environmentTypeOptions[0], enableGainsight: vm.adaptAgreementState.organizationPerformance })); }), operators.switchMap(function (gainsightSettings) { return _this.rxGainsightConfiguratorService.saveGainsightConfiguration(gainsightSettings); }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.gainsight.gainsight-settings-saved.success.message'));
            });
        };
        return GainsightAdminOptInComponent;
    }(i1$5.BaseViewComponent));
    GainsightAdminOptInComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInComponent, deps: [{ token: i2__namespace.TranslateService }, { token: i1__namespace$1.RxNotificationService }, { token: i2__namespace$5.RxGainsightConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    GainsightAdminOptInComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: GainsightAdminOptInComponent, selector: "rx-gainsight-admin-opt-in", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container class=\"p-0\" *ngIf=\"vm$ | async as vm; else emptyStateTemplate\">\n  <div class=\"mt-1 container\">\n    <h1>\n      <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.title' | translate }}</span>\n    </h1>\n\n    <div>\n      <adapt-agreement-card\n        [showOrganizationSettings]=\"true\"\n        [showMarketingSection]=\"false\"\n        [multiProductUsage]=\"false\"\n        [showShadow]=\"false\"\n        rx-id=\"enable-gainsight\"\n        [(state)]=\"vm.adaptAgreementState\"\n      >\n      </adapt-agreement-card>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\" [hidden]=\"true\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"Use ADAPT Radar\"\n        [(ngModel)]=\"vm.useAdaptRadar\"\n        name=\"useAdaptRadar\"\n        rx-id=\"use-adapt-radar\"\n      ></adapt-rx-switch>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.gainsight.gainsight-settings.load-gainsight-script-from-bmc-it.label' | translate\n        }}\"\n        [(ngModel)]=\"vm.loadGainsightFromBmcIt\"\n        name=\"loadGainsightFromBmcIt\"\n        rx-id=\"load-gainsight-from-bmc\"\n      ></adapt-rx-switch>\n    </div>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.deployment-type.label' | translate }}\"\n      [options]=\"deploymentTypeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"vm.deploymentTypeOptions\"\n      name=\"deploymentType\"\n      rx-id=\"deployment-type\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.environment-type.label' | translate }}\"\n      [options]=\"environmentTypeOptions\"\n      [(ngModel)]=\"vm.environmentTypeOptions\"\n      name=\"environmentType\"\n      rx-id=\"environment-type\"\n    >\n    </adapt-rx-select>\n\n    <div class=\"modal-footer mt-4\">\n      <button rx-id=\"save-button\" adapt-button btn-type=\"primary\" type=\"button\" (click)=\"save()\" rx-id=\"save-button\">\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #emptyStateTemplate>\n  <div class=\"d-flex align-items-center justify-content-center h-100\">\n    <adapt-empty-state\n      class=\"w-100\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.feature-is-disabled.label' | translate }}\"\n      type=\"config\"\n    ></adapt-empty-state>\n  </div>\n</ng-template>\n", styles: [":host ::ng-deep adapt-agreement-card adapt-agreement-admin-content div:nth-of-type(2)>adapt-rx-switch,:host ::ng-deep adapt-agreement-card adapt-agreement-admin-content hr:nth-of-type(2)~div,:host ::ng-deep adapt-agreement-card adapt-agreement-admin-content h4,:host ::ng-deep adapt-agreement-card adapt-agreement-admin-content hr:nth-of-type(3){display:none}\n"], components: [{ type: i1__namespace.AdaptAgreementCardComponent, selector: "adapt-agreement-card", inputs: ["multiProductUsage", "state", "showOrganizationSettings", "showMarketingSection", "showShadow"], outputs: ["stateChange"] }, { type: i1__namespace.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i3__namespace.AsyncPipe, "translate": i2__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-gainsight-admin-opt-in',
                        templateUrl: './gainsight-admin-opt-in.component.html',
                        styleUrls: ['./gainsight-admin-opt-in.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.TranslateService }, { type: i1__namespace$1.RxNotificationService }, { type: i2__namespace$5.RxGainsightConfiguratorService }]; } });

    var GainsightAdminOptInRegistrationModule = /** @class */ (function () {
        function GainsightAdminOptInRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-gainsight-admin-opt-in',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(GainsightAdminOptInComponent),
                name: 'Gainsight Admin Opt In',
                hidden: true,
                availableInBundles: [i1$2.RX_APPLICATION.settingsBundleId]
            });
        }
        return GainsightAdminOptInRegistrationModule;
    }());
    GainsightAdminOptInRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    GainsightAdminOptInRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInRegistrationModule, declarations: [GainsightAdminOptInComponent], imports: [i2$1.TranslateModule,
            i1.AdaptAgreementModule,
            i1.AdaptRxSelectModule,
            i2$4.FormsModule,
            i1.AdaptRxSwitchModule,
            i3.CommonModule,
            i1.AdaptButtonModule,
            i1.AdaptEmptyStateModule] });
    GainsightAdminOptInRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInRegistrationModule, imports: [[
                i2$1.TranslateModule,
                i1.AdaptAgreementModule,
                i1.AdaptRxSelectModule,
                i2$4.FormsModule,
                i1.AdaptRxSwitchModule,
                i3.CommonModule,
                i1.AdaptButtonModule,
                i1.AdaptEmptyStateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GainsightAdminOptInRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [GainsightAdminOptInComponent],
                        imports: [
                            i2$1.TranslateModule,
                            i1.AdaptAgreementModule,
                            i1.AdaptRxSelectModule,
                            i2$4.FormsModule,
                            i1.AdaptRxSwitchModule,
                            i3.CommonModule,
                            i1.AdaptButtonModule,
                            i1.AdaptEmptyStateModule
                        ],
                        entryComponents: [GainsightAdminOptInComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var ViewComponentsModule = /** @class */ (function () {
        function ViewComponentsModule() {
        }
        return ViewComponentsModule;
    }());
    ViewComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ViewComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewComponentsModule, imports: [ActionButtonRegistrationModule,
            ButtonBarRegistrationModule,
            ChatbotUserMappingRegistrationModule,
            ContainerRegistrationModule,
            RecordEditorRegistrationModule,
            FieldComponentsModule,
            IframeLoginEventRegistrationModule,
            RecordGridRegistrationModule,
            RichTextRegistrationModule,
            TabPanelRegistrationModule,
            PageRegistrationModule,
            ImageRegistrationModule,
            ServiceListRegistrationModule,
            SmartReportingRedirectorRegistrationModule,
            UnknownRegistrationModule,
            ViewPresetSelectorRegistrationModule,
            GainsightAdminOptInRegistrationModule] });
    ViewComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewComponentsModule, imports: [[
                ActionButtonRegistrationModule,
                ButtonBarRegistrationModule,
                ChatbotUserMappingRegistrationModule,
                ContainerRegistrationModule,
                RecordEditorRegistrationModule,
                FieldComponentsModule,
                IframeLoginEventRegistrationModule,
                RecordGridRegistrationModule,
                RichTextRegistrationModule,
                TabPanelRegistrationModule,
                PageRegistrationModule,
                ImageRegistrationModule,
                ServiceListRegistrationModule,
                SmartReportingRedirectorRegistrationModule,
                UnknownRegistrationModule,
                ViewPresetSelectorRegistrationModule,
                GainsightAdminOptInRegistrationModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ViewComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            ActionButtonRegistrationModule,
                            ButtonBarRegistrationModule,
                            ChatbotUserMappingRegistrationModule,
                            ContainerRegistrationModule,
                            RecordEditorRegistrationModule,
                            FieldComponentsModule,
                            IframeLoginEventRegistrationModule,
                            RecordGridRegistrationModule,
                            RichTextRegistrationModule,
                            TabPanelRegistrationModule,
                            PageRegistrationModule,
                            ImageRegistrationModule,
                            ServiceListRegistrationModule,
                            SmartReportingRedirectorRegistrationModule,
                            UnknownRegistrationModule,
                            ViewPresetSelectorRegistrationModule,
                            GainsightAdminOptInRegistrationModule
                        ]
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActionButtonComponent = ActionButtonComponent;
    exports.ActionButtonDesignComponent = ActionButtonDesignComponent;
    exports.ActionButtonDesignModule = ActionButtonDesignModule;
    exports.ActionButtonModule = ActionButtonModule;
    exports.AssociationDesignModule = AssociationDesignModule;
    exports.AssociationManagerFactory = AssociationManagerFactory;
    exports.AssociationModule = AssociationModule;
    exports.AssociationRegistrationModule = AssociationRegistrationModule;
    exports.AttachmentFieldComponent = AttachmentFieldComponent;
    exports.AttachmentFieldDesignComponent = AttachmentFieldDesignComponent;
    exports.AttachmentFieldDesignModule = AttachmentFieldDesignModule;
    exports.AttachmentFieldModule = AttachmentFieldModule;
    exports.AttachmentFieldRegistrationModule = AttachmentFieldRegistrationModule;
    exports.BaseRecordEditorFieldComponent = BaseRecordEditorFieldComponent;
    exports.BaseRecordEditorFieldDesign = BaseRecordEditorFieldDesign;
    exports.BooleanFieldComponent = BooleanFieldComponent;
    exports.BooleanFieldDesignComponent = BooleanFieldDesignComponent;
    exports.BooleanFieldDesignModule = BooleanFieldDesignModule;
    exports.BooleanFieldModule = BooleanFieldModule;
    exports.BooleanFieldRegistrationModule = BooleanFieldRegistrationModule;
    exports.ButtonBarComponent = ButtonBarComponent;
    exports.ButtonBarDesignComponent = ButtonBarDesignComponent;
    exports.ButtonBarDesignModel = ButtonBarDesignModel;
    exports.ButtonBarDesignModule = ButtonBarDesignModule;
    exports.ButtonBarModule = ButtonBarModule;
    exports.ChatbotUserMappingComponent = ChatbotUserMappingComponent;
    exports.ChatbotUserMappingRegistrationModule = ChatbotUserMappingRegistrationModule;
    exports.ContainerComponent = ContainerComponent;
    exports.ContainerDesignComponent = ContainerDesignComponent;
    exports.ContainerDesignModule = ContainerDesignModule;
    exports.ContainerModule = ContainerModule;
    exports.DateFieldComponent = DateFieldComponent;
    exports.DateFieldDesignComponent = DateFieldDesignComponent;
    exports.DateFieldDesignModule = DateFieldDesignModule;
    exports.DateFieldModule = DateFieldModule;
    exports.DateFieldRegistrationModule = DateFieldRegistrationModule;
    exports.DateTimeFieldComponent = DateTimeFieldComponent;
    exports.DateTimeFieldDesignComponent = DateTimeFieldDesignComponent;
    exports.DateTimeFieldDesignModule = DateTimeFieldDesignModule;
    exports.DateTimeFieldModule = DateTimeFieldModule;
    exports.DateTimeFieldRegistrationModule = DateTimeFieldRegistrationModule;
    exports.DecimalFieldComponent = DecimalFieldComponent;
    exports.DecimalFieldDesignComponent = DecimalFieldDesignComponent;
    exports.DecimalFieldDesignModule = DecimalFieldDesignModule;
    exports.DecimalFieldModule = DecimalFieldModule;
    exports.DecimalFieldRegistrationModule = DecimalFieldRegistrationModule;
    exports.ExtensionContainerDesignComponent = ExtensionContainerDesignComponent;
    exports.ExtensionContainerDesignModule = ExtensionContainerDesignModule;
    exports.ExtensionContainerRegistrationModule = ExtensionContainerRegistrationModule;
    exports.ExtensionContainerSectionComponent = ExtensionContainerSectionComponent;
    exports.FieldComponentsModule = FieldComponentsModule;
    exports.GainsightAdminOptInRegistrationModule = GainsightAdminOptInRegistrationModule;
    exports.IframeLoginEventComponent = IframeLoginEventComponent;
    exports.IframeLoginEventRegistrationModule = IframeLoginEventRegistrationModule;
    exports.ImageComponent = ImageComponent;
    exports.ImageDesignComponent = ImageDesignComponent;
    exports.ImageDesignModule = ImageDesignModule;
    exports.ImageModule = ImageModule;
    exports.IntegerFieldComponent = IntegerFieldComponent;
    exports.IntegerFieldDesignComponent = IntegerFieldDesignComponent;
    exports.IntegerFieldDesignModule = IntegerFieldDesignModule;
    exports.IntegerFieldModule = IntegerFieldModule;
    exports.IntegerFieldRegistrationModule = IntegerFieldRegistrationModule;
    exports.LocalizedCharacterFieldComponent = LocalizedCharacterFieldComponent;
    exports.LocalizedCharacterFieldRegistrationModule = LocalizedCharacterFieldRegistrationModule;
    exports.PageComponent = PageComponent;
    exports.PageComponentDefinitionAdapterService = PageComponentDefinitionAdapterService;
    exports.PageDesignComponent = PageDesignComponent;
    exports.PageDesignModule = PageDesignModule;
    exports.PageModule = PageModule;
    exports.RECORD_EDITOR = RECORD_EDITOR;
    exports.RX_ASSOCIATION = RX_ASSOCIATION;
    exports.RX_BASE_FIELD_PROPERTIES = RX_BASE_FIELD_PROPERTIES;
    exports.RX_RECORD_GRID = RX_RECORD_GRID;
    exports.RX_RECORD_GRID_DESIGN = RX_RECORD_GRID_DESIGN;
    exports.RecordEditorComponent = RecordEditorComponent;
    exports.RecordEditorDesignComponent = RecordEditorDesignComponent;
    exports.RecordEditorDesignModule = RecordEditorDesignModule;
    exports.RecordEditorModule = RecordEditorModule;
    exports.RecordGridColumnEditorControlComponent = RecordGridColumnEditorControlComponent;
    exports.RecordGridColumnEditorModalComponent = RecordGridColumnEditorModalComponent;
    exports.RecordGridComponent = RecordGridComponent;
    exports.RecordGridDesignComponent = RecordGridDesignComponent;
    exports.RecordGridDesignModule = RecordGridDesignModule;
    exports.RecordGridFilterSelectControlComponent = RecordGridFilterSelectControlComponent;
    exports.RecordGridFilterSelectControlModule = RecordGridFilterSelectControlModule;
    exports.RecordGridModule = RecordGridModule;
    exports.RichTextComponent = RichTextComponent;
    exports.RichTextDesignComponent = RichTextDesignComponent;
    exports.RichTextDesignModule = RichTextDesignModule;
    exports.RichTextModule = RichTextModule;
    exports.RichTextareaFieldComponent = RichTextareaFieldComponent;
    exports.RichTextareaFieldDesignComponent = RichTextareaFieldDesignComponent;
    exports.RichTextareaFieldDesignModule = RichTextareaFieldDesignModule;
    exports.RichTextareaFieldModule = RichTextareaFieldModule;
    exports.RichTextareaFieldRegistrationModule = RichTextareaFieldRegistrationModule;
    exports.RxAssociationComponent = RxAssociationComponent;
    exports.RxAssociationDesignComponent = RxAssociationDesignComponent;
    exports.RxDefaultRecordEditorInputType = RxDefaultRecordEditorInputType;
    exports.RxExtensionContainerComponent = RxExtensionContainerComponent;
    exports.RxExtensionContainerModule = RxExtensionContainerModule;
    exports.RxLocalizedCharacterFieldModule = RxLocalizedCharacterFieldModule;
    exports.RxRecordEditorUtilsService = RxRecordEditorUtilsService;
    exports.RxRecordGridAdvancedFilterValue = RxRecordGridAdvancedFilterValue;
    exports.RxRecordGridAdvancedFilteringService = RxRecordGridAdvancedFilteringService;
    exports.RxRecordGridDesignUtilsService = RxRecordGridDesignUtilsService;
    exports.RxRecordGridFilterHelperService = RxRecordGridFilterHelperService;
    exports.RxRecordGridFilterSelectHelperService = RxRecordGridFilterSelectHelperService;
    exports.RxRecordGridFilterService = RxRecordGridFilterService;
    exports.RxRecordGridQueryExpressionEvaluatorService = RxRecordGridQueryExpressionEvaluatorService;
    exports.RxRecordGridUtilsService = RxRecordGridUtilsService;
    exports.RxTabContainerComponent = RxTabContainerComponent;
    exports.RxTabPanelComponent = RxTabPanelComponent;
    exports.RxTabPanelModule = RxTabPanelModule;
    exports.SelectGroupComponent = SelectGroupComponent;
    exports.SelectGroupComponentDefinitionAdapterService = SelectGroupComponentDefinitionAdapterService;
    exports.SelectGroupDesignComponent = SelectGroupDesignComponent;
    exports.SelectGroupDesignModel = SelectGroupDesignModel;
    exports.SelectGroupFieldComponent = SelectGroupFieldComponent$1;
    exports.SelectGroupModule = SelectGroupModule;
    exports.SelectGroupRegistrationModule = SelectGroupRegistrationModule;
    exports.SelectionFieldComponent = SelectionFieldComponent;
    exports.SelectionFieldDesignComponent = SelectionFieldDesignComponent;
    exports.SelectionFieldDesignModule = SelectionFieldDesignModule;
    exports.SelectionFieldModule = SelectionFieldModule;
    exports.SelectionFieldRegistrationModule = SelectionFieldRegistrationModule;
    exports.ServiceListComponent = ServiceListComponent;
    exports.ServiceListDesignComponent = ServiceListDesignComponent;
    exports.ServiceListDesignModule = ServiceListDesignModule;
    exports.ServiceListModule = ServiceListModule;
    exports.TabPanelDesignModule = TabPanelDesignModule;
    exports.TextFieldComponent = TextFieldComponent;
    exports.TextFieldDesignComponent = TextFieldDesignComponent;
    exports.TextFieldDesignModule = TextFieldDesignModule;
    exports.TextFieldExpressionConfigurator = TextFieldExpressionConfigurator;
    exports.TextFieldModule = TextFieldModule;
    exports.TextFieldRegistrationModule = TextFieldRegistrationModule;
    exports.TextareaFieldComponent = TextareaFieldComponent;
    exports.TextareaFieldDesignComponent = TextareaFieldDesignComponent;
    exports.TextareaFieldDesignModule = TextareaFieldDesignModule;
    exports.TextareaFieldModule = TextareaFieldModule;
    exports.TextareaFieldRegistrationModule = TextareaFieldRegistrationModule;
    exports.TimeFieldComponent = TimeFieldComponent;
    exports.TimeFieldDesignComponent = TimeFieldDesignComponent;
    exports.TimeFieldDesignModule = TimeFieldDesignModule;
    exports.TimeFieldModule = TimeFieldModule;
    exports.TimeFieldRegistrationModule = TimeFieldRegistrationModule;
    exports.UploaderFactory = UploaderFactory;
    exports.ViewComponentsModule = ViewComponentsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=helix-platform-view-components.umd.js.map
