import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AdaptDropdownDirective, AdaptIsPanelOpenedCurrentlyModel, AdaptSidebarComponent } from '@bmc-ux/adapt-angular';
import { ColumnConfig } from '@bmc-ux/adapt-table';
import { IConfigDefinition, IConfigFieldDefinitionGridRow } from '@helix/platform/config/api';
import { IDesignerConfiguration, IFormBuilderConfig, IPlainObject, RxDefinitionNameService, RxGlobalCacheService } from '@helix/platform/shared/api';
import { IBreadcrumbItem, IValidationIssue, IValidationIssueSection } from '@helix/platform/ui-kit';
import { Store } from '@ngrx/store';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { ConfigDesignerService } from '../config-designer.service';
import { IConfigDefinitionModel, IConfigFieldDataType, IConfigFieldDefinitionModel } from '../config-designer.types';
import { FieldDefinitionManagerService } from '../services/field-definition-manager.service';
import * as i0 from "@angular/core";
export declare class ConfigDesignerComponent implements OnInit, OnChanges {
    private store$;
    private configDesignerService;
    private rxGlobalCacheService;
    private translateService;
    private rxDefinitionNameService;
    private fieldDefinitionManagerService;
    adaptSidebarComponent: AdaptSidebarComponent;
    createNewFieldDropdown: AdaptDropdownDirective;
    configuration: IDesignerConfiguration;
    definitionSaved: EventEmitter<string>;
    definitionErrorLoading: EventEmitter<void>;
    closeDesigner: EventEmitter<void>;
    newTitle: string;
    dataTypes: IConfigFieldDataType[];
    private trueLabel;
    private falseLabel;
    private yesLabel;
    private noLabel;
    private destroyed$;
    private isApplication$;
    private inspectorTabIndexSubject;
    private inspectorTabIndex$;
    private selectedFieldGuid$;
    private parentComponents$;
    private isDirty$;
    private bundleFriendlyName$;
    private definitionModel$;
    private definitionDisplayName$;
    private validationIssues$;
    private hasValidationErrors$;
    private isSaveButtonDisabled$;
    definitionInspectorConfig$: Observable<IFormBuilderConfig>;
    private inspectorFocusEditorSubject;
    inspectorFocusEditor$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    private fieldGridRows$;
    private selectedFieldGridRows$;
    private selectedFieldModel$;
    private selectedFieldInspectorConfig$;
    private breadcrumbItems$;
    private definitionFromDefinitionModel$;
    private isDesignMode$;
    private definitionForJsonViewer$;
    vm$: Observable<{
        breadcrumbItems: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        bundleFriendlyName: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        definitionDisplayName: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        definitionForJsonViewer: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        definitionInspectorConfig: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        definitionModel: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        fieldGridRows: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        hasValidationErrors: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        isSaveButtonDisabled: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        selectedFieldGridRows: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        selectedFieldGuid: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        selectedFieldInspectorConfig: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        selectedFieldModel: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
        validationIssues: string | boolean | IConfigFieldDefinitionModel | IConfigDefinitionModel | IConfigDefinition | IFormBuilderConfig | IValidationIssueSection[] | IConfigFieldDefinitionGridRow[] | IBreadcrumbItem[];
    }>;
    columns: ColumnConfig[];
    constructor(store$: Store<any>, configDesignerService: ConfigDesignerService, rxGlobalCacheService: RxGlobalCacheService, translateService: TranslateService, rxDefinitionNameService: RxDefinitionNameService, fieldDefinitionManagerService: FieldDefinitionManagerService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    onSelectionChange(selectedFieldModel: IConfigFieldDefinitionModel): void;
    canDeactivate(): boolean;
    saveDefinition(): void;
    onCorrectIssue(validationIssue: IValidationIssue): void;
    onDefinitionModelChange(newDefinitionModel: IConfigDefinitionModel): void;
    onSelectedFieldModelChange(newSelectedFieldModel: IConfigFieldDefinitionModel): void;
    validate(definitionModel: IConfigDefinitionModel): IValidationIssueSection[];
    addNewField(resourceType: string, isLoginNameField?: boolean): void;
    editFieldGroups(): void;
    private getDataTypeName;
    onBreadcrumbSelected(): void;
    toggleDesignMode(): void;
    onSidebarToggle(event: AdaptIsPanelOpenedCurrentlyModel): void;
    private getDefinitionInspectorConfig;
    private getBooleanDisplayValue;
    deleteSelectedField(): void;
    onFormInitialized(): void;
    private destroyConfigDesigner;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConfigDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConfigDesignerComponent, "rx-config-designer", never, { "configuration": "configuration"; }, { "definitionSaved": "definitionSaved"; "definitionErrorLoading": "definitionErrorLoading"; "closeDesigner": "closeDesigner"; }, never, never>;
}
