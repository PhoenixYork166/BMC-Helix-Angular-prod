import { EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { INamedListDefinition } from '@helix/platform/named-list/api';
import { RxRecordDefinitionCacheService } from '@helix/platform/record/api';
import { IDesignerConfiguration, IFormBuilderConfig, IFormBuilderEvent, IPlainObject, RxFeatureService, RxGlobalCacheService, RxNotificationService, RxOverlayService } from '@helix/platform/shared/api';
import { RxExpressionEditorService } from '@helix/platform/shared/components';
import { IBreadcrumbItem, IValidationIssue, IValidationIssueSection, RxModalService } from '@helix/platform/ui-kit';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { INamedListDefinitionModel } from '../named-list-designer.types';
import { NamedListDesignerService } from '../named-list-designer.service';
import * as i0 from "@angular/core";
export declare class RxNamedListDesignerComponent implements OnChanges, OnDestroy, OnInit {
    private injector;
    private store$;
    private namedListDesignerService;
    private rxGlobalCacheService;
    private rxModalService;
    private rxRecordDefinitionCacheService;
    private translateService;
    private rxOverlayService;
    private rxNotificationService;
    private rxExpressionEditorService;
    private rxFeatureService;
    configuration: IDesignerConfiguration;
    definitionSaved: EventEmitter<string>;
    definitionErrorLoading: EventEmitter<void>;
    closeDesigner: EventEmitter<void>;
    private bundleId$;
    private bundleFriendlyName$;
    private destroyed$;
    private expressionConfigurator;
    private isFormInitialized;
    private definitionModel$;
    private isDirty$;
    private originalDefinition$;
    private definitionModelFromDefinition$;
    private definitionFromDefinitionModel$;
    private recordDefinition$;
    private textFieldNameOptions$;
    private validationIssues$;
    private hasValidationErrors$;
    private areNewDefinitionsAllowed$;
    private isReadOnly$;
    private isSaveButtonDisabled$;
    private inspectorFocusEditorSubject;
    inspectorFocusEditor$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    private isExistingDefinition$;
    private breadcrumbItems$;
    private definitionInspectorConfig$;
    private isDesignMode$;
    private definitionForJsonViewer$;
    vm$: Observable<{
        breadcrumbItems: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        bundleFriendlyName: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        hasValidationErrors: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        isExistingDefinition: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        isSaveButtonDisabled: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionForJsonViewer: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionModel: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionInspectorConfig: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        validationIssues: string | boolean | INamedListDefinition | INamedListDefinitionModel | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
    }>;
    constructor(injector: Injector, store$: Store<any>, namedListDesignerService: NamedListDesignerService, rxGlobalCacheService: RxGlobalCacheService, rxModalService: RxModalService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, translateService: TranslateService, rxOverlayService: RxOverlayService, rxNotificationService: RxNotificationService, rxExpressionEditorService: RxExpressionEditorService, rxFeatureService: RxFeatureService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    canDeactivate(): boolean;
    onToggleDesignMode(): void;
    onCorrectIssue(validationIssue: IValidationIssue): void;
    onModelChange(newDefinitionModel: INamedListDefinitionModel): void;
    onFormInitialized(): void;
    onEditorEvent(event: IFormBuilderEvent): void;
    openExpressionEditor(event: IFormBuilderEvent): void;
    revertCustomization(): void;
    onSave(): void;
    private validate;
    private getFieldNameOptions;
    private getFormBuilderConfig;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxNamedListDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RxNamedListDesignerComponent, "rx-named-list-designer", never, { "configuration": "configuration"; }, { "definitionSaved": "definitionSaved"; "definitionErrorLoading": "definitionErrorLoading"; "closeDesigner": "closeDesigner"; }, never, never>;
}
