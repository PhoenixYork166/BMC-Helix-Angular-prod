import { ComponentFactoryResolver, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';
import { IRowDataItem } from '@helix/platform/view/api';
import { RxRecordInstanceService, RxRecordInstanceDataPageService } from '@helix/platform/record/api';
import { RxJsonParserService } from '@helix/platform/utils';
import { RxModalService } from '@helix/platform/ui-kit';
import { TranslateService } from '@ngx-translate/core';
import { DataImportService } from './data-import.service';
import { AdaptModalService } from '@bmc-ux/adapt-angular';
import { RxWizardService } from '@helix/platform/shared/components';
import { RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import * as i0 from "@angular/core";
export declare class DataImportComponent implements OnInit {
    private componentFactoryResolver;
    private rxModalService;
    private rxDefinitionNameService;
    private rxNotificationService;
    private rxWizardService;
    private translateService;
    private rxRecordInstanceService;
    private adaptModalService;
    private rxJsonParserService;
    private dataImportService;
    private rxRecordInstanceDataPageService;
    hostClass: string;
    gridConfig$: Observable<IRecordGridConfig>;
    grid: RecordGridComponent;
    private recordNamesCellTemplate;
    private statusInfoCellTemplate;
    private dataloadWizardContext;
    constructor(componentFactoryResolver: ComponentFactoryResolver, rxModalService: RxModalService, rxDefinitionNameService: RxDefinitionNameService, rxNotificationService: RxNotificationService, rxWizardService: RxWizardService, translateService: TranslateService, rxRecordInstanceService: RxRecordInstanceService, adaptModalService: AdaptModalService, rxJsonParserService: RxJsonParserService, dataImportService: DataImportService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService);
    ngOnInit(): void;
    private getData;
    private isNewOrStoppedRecord;
    private areAllSelectedArchived;
    newDataImport(selectedRecordInstanceId?: string): void;
    private loadDataFromSelectedRecords;
    private isProcessingOrQueuedRecord;
    private stopSelectedRecordProcessing;
    private stopRecordProcessing;
    private deleteSelectedDataRecords;
    private archiveSelectedDataRecords;
    private cloneDataImportConfiguration;
    private loadDataFromFile;
    getRecordNames(selectedRow: IRowDataItem): string;
    showStatusInfo(selectedRow: IRowDataItem): void;
    private getColumns;
    private savePrepareDataImportConfiguration;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataImportComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataImportComponent, "dl-data-import", never, {}, {}, never, never>;
}
