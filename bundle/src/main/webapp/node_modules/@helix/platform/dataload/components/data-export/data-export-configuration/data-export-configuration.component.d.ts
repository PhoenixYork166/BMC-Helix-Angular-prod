import { ChangeDetectorRef, Injector, OnDestroy, OnInit } from '@angular/core';
import { IDefinitionPickerComponentOptions, IExpressionFormControlOptions, RxExpressionEditorService } from '@helix/platform/shared/components';
import { TranslateService } from '@ngx-translate/core';
import { AdaptModalService, DockedPanelContext, RxSelectOption } from '@bmc-ux/adapt-angular';
import { RxModalClass } from '@helix/platform/ui-kit';
import { IExportConfiguration, IExportConfigurationDefinition } from '../data-export.types';
import { DataExportFiltersExpressionConfigurator } from '../data-export-filters-expression-configurator';
import { RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import { Observable } from 'rxjs';
import { RxFieldDefinitionService, RxRecordDefinitionService, RxRecordInstanceService } from '@helix/platform/record/api';
import * as i0 from "@angular/core";
export declare class DataExportConfigurationComponent extends RxModalClass implements OnInit, OnDestroy {
    private rxFieldDefinitionService;
    private rxRecordInstanceService;
    private rxRecordDefinitionService;
    private adaptModalService;
    private rxNotificationService;
    private rxExpressionEditorService;
    private translateService;
    private changeDetectorRef;
    private definitionNameService;
    private dockedPanelContext;
    protected injector: Injector;
    isSaveInProgress: boolean;
    private index$;
    private recordDefinitionNames$;
    definitionFields$: Observable<RxSelectOption[]>[];
    dataFilterExpressionOptions: IExpressionFormControlOptions;
    protected expressionConfigurator: DataExportFiltersExpressionConfigurator;
    private destroyed$;
    exportConfiguration: IExportConfiguration;
    recordPickerOptions: IDefinitionPickerComponentOptions;
    associationPickerOptions: IDefinitionPickerComponentOptions;
    definitionTypes: {
        record: string;
        association: string;
    };
    definitionTypeOptions: RxSelectOption[];
    constructor(rxFieldDefinitionService: RxFieldDefinitionService, rxRecordInstanceService: RxRecordInstanceService, rxRecordDefinitionService: RxRecordDefinitionService, adaptModalService: AdaptModalService, rxNotificationService: RxNotificationService, rxExpressionEditorService: RxExpressionEditorService, translateService: TranslateService, changeDetectorRef: ChangeDetectorRef, definitionNameService: RxDefinitionNameService, dockedPanelContext: DockedPanelContext, injector: Injector);
    ngOnInit(): void;
    addDefinition(): void;
    remove(index: number): void;
    cancel(): void;
    onDefinitionChange(definitionName: string, rowIndex: number): void;
    onExpressionEvent(rowIndex: number): void;
    isSaveButtonDisabled(): boolean;
    saveExportConfiguration(): void;
    clearFieldsSelection(index: number): void;
    openExportingDataPreview(definition: IExportConfigurationDefinition): void;
    isPreviewDisabled(definition: IExportConfigurationDefinition): boolean;
    ngOnDestroy(): void;
    optionFormatter(field: RxSelectOption): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataExportConfigurationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataExportConfigurationComponent, "dl-data-export-configuration", never, {}, {}, never, never>;
}
