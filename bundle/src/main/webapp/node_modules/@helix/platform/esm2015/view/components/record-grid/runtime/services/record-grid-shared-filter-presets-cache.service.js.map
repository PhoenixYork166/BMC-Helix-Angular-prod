{"version":3,"file":"record-grid-shared-filter-presets-cache.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-shared-filter-presets-cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport { IDataPageParams } from '@helix/platform/shared/api';\nimport { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { Observable, of } from 'rxjs';\nimport { IRxRecordGridSharedFilterPreset } from '../../common/types/record-grid-filter.types';\n\n@Injectable()\nexport class RxRecordGridSharedFilterPresetsCacheService {\n  private cache: { [guid: string]: IRxRecordGridSharedFilterPreset[] } = {};\n\n  constructor(private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService) {}\n\n  // return preset from \"Record Grid Filter Presets\"\n  getSharedFilterPresets(recordGridGuid: string): Observable<IRxRecordGridSharedFilterPreset[]> {\n    if (!this.cache[recordGridGuid]) {\n      const params = this.getQueryParams(recordGridGuid);\n\n      return this.rxRecordInstanceDataPageService.post({ params }).pipe(\n        map((sharedFilterPresets) => {\n          return (this.cache[recordGridGuid] = _map(\n            sharedFilterPresets.data,\n            (sharedFilterPreset): IRxRecordGridSharedFilterPreset => ({\n              id: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id],\n              name: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.name],\n              filters: [\n                {\n                  filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n                  value: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id]\n                }\n              ],\n              isCreatedByOtherUsers: true,\n              filterExpression: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression],\n              isDefault: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.isDefault]\n            })\n          ));\n        })\n      );\n    }\n\n    return of(this.cache[recordGridGuid]);\n  }\n\n  private getQueryParams(recordGridGuid: string): IDataPageParams {\n    const queryExpression = `('${RX_RECORD_GRID.sharedFilterPresets.fields.recordGridGuid}'=\"${recordGridGuid}\")`;\n\n    const propertySelection = [\n      RX_RECORD_DEFINITION.coreFieldIds.id,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name,\n      RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression,\n      RX_RECORD_GRID.sharedFilterPresets.fields.isDefault\n    ].join(',');\n\n    const sortBy = [\n      RX_RECORD_GRID.sharedFilterPresets.fields.sortOrder,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name\n    ].join(',');\n\n    return {\n      pageSize: -1,\n      startIndex: 0,\n      queryExpression: queryExpression,\n      propertySelection: propertySelection,\n      shouldIncludeTotalSize: false,\n      recorddefinition: RX_RECORD_GRID.sharedFilterPresets.recordDefinitionName,\n      sortBy\n    };\n  }\n}\n"]}