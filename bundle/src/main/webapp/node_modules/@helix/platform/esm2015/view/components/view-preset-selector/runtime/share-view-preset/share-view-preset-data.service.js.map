{"version":3,"file":"share-view-preset-data.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-data.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAkB,+BAA+B,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACtH,OAAO,EAAE,cAAc,EAAE,MAAM,kCAAkC,CAAC;AAClE,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;;;;;AAK1D,MAAM,OAAO,4BAA4B;IACvC,YACU,+BAAgE,EAChE,uBAAgD,EAChD,UAAsB,EACtB,mBAAwC;QAHxC,oCAA+B,GAA/B,+BAA+B,CAAiC;QAChE,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC/C,CAAC;IAEJ,WAAW,CAAC,KAAa;QACvB,OAAO,IAAI,CAAC,+BAA+B;aACxC,IAAI,CAAC;YACJ,MAAM,EAAE;gBACN,gBAAgB,EAAE,cAAc,CAAC,IAAI,CAAC,oBAAoB;gBAC1D,iBAAiB,EAAE;oBACjB,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ;oBACnC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;oBAChC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO;iBACnC;gBACD,QAAQ,EAAE,YAAY,CAAC,eAAe;gBACtC,eAAe,EAAE;oBACf,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ;oBACnC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK;oBAChC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO;iBACnC;qBACE,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,OAAO,YAAY,KAAK,KAAK,CAAC;qBACpD,IAAI,CAAC,MAAM,CAAC;aAChB;SACF,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,oBAAoB,CAAC,sBAA8B,EAAE,OAAe;QAClE,OAAO,IAAI,CAAC,+BAA+B;aACxC,IAAI,CAAC;YACJ,MAAM,EAAE;gBACN,gBAAgB,EAAE,cAAc,CAAC,gBAAgB,CAAC,oBAAoB;gBACtE,eAAe,EAAE;oBACf,IAAI,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,sBAAsB,QAAQ,sBAAsB,GAAG;iBACnG,CAAC,IAAI,CAAC,OAAO,CAAC;gBACf,iBAAiB,EAAE;oBACjB,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc;oBACrD,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;oBACzC,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,aAAa;oBACpD,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW;iBACnD;aACF;SACF,CAAC;aACD,IAAI,CACH,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CACrB,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,EAAE;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CACjD,gBAAgB,CAAC,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,EACpE,EAAE,CACH,CAAC;YAEF,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;QACxD,CAAC,CAAC,CACH,CACF,CAAC;IACN,CAAC;IAED,mBAAmB,CAAC,IAAY;QAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,cAAc,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACtG,CAAC;IAED,sBAAsB,CAAC,OAAgC;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE;YAClD,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,IAAY,EAAE,OAAgC;QACnE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,sBAAsB,CAAC,IAAY;QACjC,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACzG,CAAC;IAEO,MAAM,CAAC,IAAa;QAC1B,OAAO,IAAI;YACT,CAAC,CAAC,gDAAgD,IAAI,EAAE;YACxD,CAAC,CAAC,8CAA8C,CAAC;IACrD,CAAC;;yHAnFU,4BAA4B;6HAA5B,4BAA4B,cAF3B,MAAM;2FAEP,4BAA4B;kBAHxC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RecordInstance, RxRecordInstanceDataPageService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { HttpClient } from '@angular/common/http';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { IShareViewPresetPayload } from './share-view-preset.types';\nimport { RX_DATA_PAGE } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetDataService {\n  constructor(\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private httpClient: HttpClient,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  searchUsers(query: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.user.recordDefinitionName,\n          propertySelection: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ],\n          pageSize: RX_DATA_PAGE.defaultPageSize,\n          queryExpression: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ]\n            .map((fieldId) => `('${fieldId}' LIKE \"%${query}%\")`)\n            .join(' OR ')\n        }\n      })\n      .pipe(map((result) => result.data));\n  }\n\n  getSharedViewPresets(viewPresetSelectorGuid: string, loginId: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName,\n          queryExpression: [\n            `'${RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetSelectorGuid}' = \"${viewPresetSelectorGuid}\"`\n          ].join(' AND '),\n          propertySelection: [\n            RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.id,\n            RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers\n          ]\n        }\n      })\n      .pipe(\n        map((dataPageResult) =>\n          dataPageResult.data.filter((sharedViewPreset) => {\n            const users = this.rxJsonParserService.tryParseJson(\n              sharedViewPreset[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers],\n              []\n            );\n\n            return users.find((user) => user.loginId === loginId);\n          })\n        )\n      );\n  }\n\n  getSharedViewPreset(guid: string): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.get(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  createSharedViewPreset(payload: IShareViewPresetPayload): Observable<string> {\n    return this.httpClient.post(this.getUrl(), payload, {\n      responseType: 'text'\n    });\n  }\n\n  updateSharedViewPreset(guid: string, payload: IShareViewPresetPayload): Observable<any> {\n    return this.httpClient.put(this.getUrl(guid), payload);\n  }\n\n  deleteSharedViewPreset(guid: string): Observable<any> {\n    return this.rxRecordInstanceService.delete(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  private getUrl(guid?: string): string {\n    return guid\n      ? `/api/rx/application/configuration/viewpreset/${guid}`\n      : `/api/rx/application/configuration/viewpreset`;\n  }\n}\n"]}