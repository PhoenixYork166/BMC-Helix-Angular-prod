{"version":3,"file":"chatbot-user-mapping-registration.module.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping-registration.module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACnE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,8BAA8B,EAAE,MAAM,0BAA0B,CAAC;AAC1E,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,2BAA2B,EAAE,MAAM,kCAAkC,CAAC;;;AAE/E;;;;;;GAMG;AAMH,MAAM,OAAO,oCAAoC;IAC/C,YACU,wBAAkD,EAClD,8BAA8D;QAD9D,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,mCAA8B,GAA9B,8BAA8B,CAAgC;QAEtE,8BAA8B,CAAC,QAAQ,CAAC;YACtC,2GAA2G;YAC3G,IAAI,EAAE,+BAA+B;YACrC,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,2BAA2B,CAAC;YACpG,IAAI,EAAE,sBAAsB;YAC5B,kBAAkB,EAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC;YACrD,MAAM,EAAE,IAAI;YACZ,UAAU,EAAE;gBACV;oBACE,IAAI,EAAE,4BAA4B;oBAClC,0BAA0B,EAAE,IAAI;iBACjC;gBACD;oBACE,IAAI,EAAE,iBAAiB;oBACvB,0BAA0B,EAAE,IAAI;iBACjC;aACF;SACF,CAAC,CAAC;IACL,CAAC;;iIAvBU,oCAAoC;kIAApC,oCAAoC,iBAJhC,2BAA2B,aAChC,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe;kIAG5D,oCAAoC,YAHtC,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,CAAC;2FAG7D,oCAAoC;kBALhD,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,2BAA2B,CAAC;oBAC3C,OAAO,EAAE,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,CAAC;oBACxE,eAAe,EAAE,CAAC,2BAA2B,CAAC;iBAC/C","sourcesContent":["import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChatbotUserMappingComponent } from './chatbot-user-mapping.component';\n\n/**\n * This component is used by Chatbot to map users from a third party channel\n * as Slack, Skype for Enterprise to their Innovation Studio account.\n * Backend sends a link in Slack for example and when the user clicks on it,\n * a page on the rx.settings bundle will be displayed, leveraging this view component:\n * http://localhost:4200/helix/index.html#/com.bmc.arsys.rx.settings/view/com.bmc.arsys.rx.settings:BMCCloudVerification?encryptedChatUserAndChatId=12345&chatbotProvider=slack\n */\n@NgModule({\n  declarations: [ChatbotUserMappingComponent],\n  imports: [AdaptButtonModule, CommonModule, FormsModule, TranslateModule],\n  entryComponents: [ChatbotUserMappingComponent]\n})\nexport class ChatbotUserMappingRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCCloudVerification\".\n      type: 'com-bmc-arsys-rx-user-mapping',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotUserMappingComponent),\n      name: 'Chatbot User Mapping',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true,\n      properties: [\n        {\n          name: 'encryptedChatUserAndChatId',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'chatbotProvider',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n"]}