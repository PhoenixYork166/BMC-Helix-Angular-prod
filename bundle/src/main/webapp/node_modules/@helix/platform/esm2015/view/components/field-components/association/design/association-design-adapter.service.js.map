{"version":3,"file":"association-design-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/association/design/association-design-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAKL,kBAAkB,EAClB,mBAAmB,EACpB,MAAM,0BAA0B,CAAC;AAElC,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;;AAIhE,MAAM,OAAO,+BAA+B;IAG1C,eAAe,CAAC,mBAA8E;;QAC5F,4EAA4E;QAC5E,kFAAkF;QAClF,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;YAC/B,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,oBAAoB;iBAC/D,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,mBAAmB,CAAC,YAAY,CAAC;iBAC5E,GAAG,CAAC,CAAC,UAA6D,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE3F,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;gBAC1C,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,kBAAkB,CAAC,iBAAiB;wBAC1C,OAAO,EAAE;4BACP;gCACE,QAAQ,EAAE,iBAAiB;6BAC5B;yBACF;qBACF;iBACqB;aACzB,CAAC,CAAC;SACJ;QAED,MAAM,iBAAiB,GAAoC;YACzD,WAAW,EAAE,MAAA,mBAAmB,CAAC,gBAAgB,CAAC,WAAW,mCAAI,wBAAwB,CAAC,KAAK;YAC/F,SAAS,EAAE,MAAA,mBAAmB,CAAC,gBAAgB,CAAC,SAAS,mCAAI,IAAI;YACjE,SAAS,EAAE,MAAA,mBAAmB,CAAC,gBAAgB,CAAC,SAAS,mCAAI,IAAI;YACjE,MAAM,EAAE,MAAA,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,mCAAI,IAAI;YAC3D,eAAe,EAAE,MAAA,mBAAmB,CAAC,gBAAgB,CAAC,eAAe,mCAAI,KAAK;SAC/E,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;IACzE,CAAC;;4HAlCU,+BAA+B;gIAA/B,+BAA+B;2FAA/B,+BAA+B;kBAD3C,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  IViewLayoutOutlet,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { IActionButtonProperties } from '../../../action-button/action-button.types';\nimport { RxAssociationEditingMode } from '../association.types';\nimport { IAssociationProperties } from './association-design.types';\n\n@Injectable()\nexport class AssociationDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition<IAssociationProperties>, IViewDefinition>\n{\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition<IAssociationProperties>): void {\n    // If a view from old view designer gets opened we have to add a layout with\n    // action button guids, so they can be rendered inside association view component.\n    if (!componentDefinition.layout) {\n      const actionButtonGuids = componentDefinition.componentDefinitions\n        .filter((definition) => definition.type === RxViewComponentType.ActionButton)\n        .map((definition: IViewComponentDefinition<IActionButtonProperties>) => definition.guid);\n\n      componentDefinition.layout = JSON.stringify({\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [\n              {\n                children: actionButtonGuids\n              }\n            ]\n          }\n        ] as IViewLayoutOutlet[]\n      });\n    }\n\n    const adaptedProperties: Partial<IAssociationProperties> = {\n      editingMode: componentDefinition.propertiesByName.editingMode ?? RxAssociationEditingMode.Views,\n      nodeARole: componentDefinition.propertiesByName.nodeARole ?? null,\n      nodeBRole: componentDefinition.propertiesByName.nodeBRole ?? null,\n      styles: componentDefinition.propertiesByName.styles ?? null,\n      useDefaultRoles: componentDefinition.propertiesByName.useDefaultRoles ?? false\n    };\n\n    Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n  }\n}\n"]}