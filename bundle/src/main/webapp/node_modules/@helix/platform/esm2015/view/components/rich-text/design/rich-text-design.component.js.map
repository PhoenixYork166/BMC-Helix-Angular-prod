{"version":3,"file":"rich-text-design.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.ts","../../../../../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.html"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  ExpressionParserToken,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  RxExpressionParserService\n} from '@helix/platform/shared/api';\nimport { RxExpressionEditorService } from '@helix/platform/shared/components';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { CKEditor4, CKEditorComponent } from 'ckeditor4-angular';\nimport { escape } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, skip, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { RX_CKEDITOR_CONFIG } from './ckeditor-config.constant';\nimport { RichTextDesignModel } from './rich-text-design.model';\n\n@Component({\n  selector: 'rx-rich-text-design',\n  templateUrl: './rich-text-design.component.html',\n  styleUrls: ['./rich-text-design.component.scss']\n})\nexport class RichTextDesignComponent implements OnInit, OnDestroy {\n  constructor(\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxTreeService: RxTreeService,\n    private rxExpressionParserService: RxExpressionParserService,\n    private renderer2: Renderer2,\n    @Inject(DOCUMENT) private document,\n    private ngZone: NgZone\n  ) {}\n\n  @Input()\n  model: RichTextDesignModel;\n\n  @Input()\n  isReadOnly: boolean;\n\n  type = CKEditor4.EditorType.INLINE;\n  ckConfig: CKEditor4.Config = RX_CKEDITOR_CONFIG;\n  formControl = new FormControl(null);\n\n  @ViewChild(CKEditorComponent, { static: true })\n  ckEditor: CKEditorComponent;\n\n  private flatDataDictionary: IDataDictionary;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  // remove inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\"\n  private removeExpressionLabels = this.setExpressionLabelHtml.bind(this, null);\n\n  // set inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\"\n  private addExpressionLabels = this.setExpressionLabelHtml.bind(this, this.getExpressionWithLabels.bind(this));\n\n  ngOnInit(): void {\n    const dataDictionary$ = this.model.expressionConfigurator.getDataDictionary();\n\n    dataDictionary$\n      .pipe(withLatestFrom(this.model.html$), takeUntil(this.destroyed$))\n      .subscribe(([dataDictionary, html]) => {\n        this.flatDataDictionary = this.rxTreeService.flatten({\n          children: dataDictionary\n        });\n\n        this.formControl.setValue(this.addExpressionLabels(html));\n      });\n\n    this.formControl.valueChanges\n      .pipe(\n        map((value) => this.removeExpressionLabels(value)),\n        distinctUntilChanged(),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((html) => {\n        this.model.updateComponentProperties({ html });\n      });\n\n    // set initial value\n    this.model.html$.pipe(take(1), takeUntil(this.destroyed$)).subscribe((html) => {\n      this.formControl.setValue(this.addExpressionLabels(html));\n    });\n  }\n\n  onEditorReady(event: CKEditor4.EventInfo): void {\n    if (this.isReadOnly) {\n      this.ckConfig.toolbar = [];\n      this.document.getElementById(`${event.editor.id}_top`).style.display = 'none';\n    }\n\n    this.ckEditor.instance.on('openExpressionEditor', (evt: CKEDITOR.eventInfo) => {\n      const initialValue = evt.data && evt.data.getAttribute(RX_RICH_TEXT.expressionAttributeName);\n\n      this.ngZone.runTask(() =>\n        this.rxExpressionEditorService\n          .openEditor({\n            property: {\n              path: 'html',\n              value: initialValue,\n              label: 'Rich Text'\n            },\n            expressionConfigurator: this.model.expressionConfigurator\n          })\n          .pipe(takeUntil(this.destroyed$))\n          .subscribe({\n            next: ({ path, value }) => {\n              if (value) {\n                const labelHtmlString = this.getExpressionWithLabels(value);\n\n                if (initialValue) {\n                  evt.data.setAttribute(RX_RICH_TEXT.expressionAttributeName, value);\n                  evt.data.setHtml(labelHtmlString);\n\n                  // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                  this.ckEditor.instance.fire('saveSnapshot');\n                } else {\n                  this.ckEditor.instance.insertHtml(\n                    `<span contenteditable=\"false\" ${RX_RICH_TEXT.expressionAttributeName}=\"${escape(\n                      value\n                    )}\">${labelHtmlString}</span>`\n                  );\n                }\n              } else {\n                evt.data.remove();\n\n                // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                this.ckEditor.instance.fire('saveSnapshot');\n              }\n\n              this.moveCursorToEnd();\n            },\n            error: () => {\n              this.moveCursorToEnd();\n            }\n          })\n      );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getExpressionWithLabels(expressionValue: string): string {\n    return this.rxExpressionParserService.parse(expressionValue, (token, expression) => {\n      if (token !== ExpressionParserToken.RxStringExpression) {\n        const node = this.flatDataDictionary.find((item) => item.expression === expression);\n        const label = node && node.label ? escape(node.label) : expression;\n\n        return `<span title=\"${label}\">${label}</span>`;\n      }\n\n      return expression;\n    });\n  }\n\n  private moveCursorToEnd(): void {\n    const range = this.ckEditor.instance.createRange();\n\n    range.moveToElementEditEnd(range.root);\n    this.ckEditor.instance.getSelection().selectRanges([range]);\n  }\n\n  private setExpressionLabelHtml(predicate: (expression) => string, htmlString: string): string {\n    const tempElement = this.renderer2.createElement('div');\n\n    tempElement.innerHTML = htmlString;\n\n    tempElement\n      .querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`)\n      .forEach(\n        (el) => (el.innerHTML = predicate ? predicate(el.getAttribute(RX_RICH_TEXT.expressionAttributeName)) : null)\n      );\n\n    return tempElement.innerHTML.replace(/<br>/g, '<br />');\n  }\n}\n","<ckeditor\n  class=\"border\"\n  [class.border-transparent]=\"formControl.value\"\n  [formControl]=\"formControl\"\n  [config]=\"ckConfig\"\n  [type]=\"type\"\n  (ready)=\"onEditorReady($event)\"\n  [readOnly]=\"isReadOnly\"\n></ckeditor>\n"]}