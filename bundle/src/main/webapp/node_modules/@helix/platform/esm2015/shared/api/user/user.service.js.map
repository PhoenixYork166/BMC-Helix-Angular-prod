{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/user/user.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;;;;;;AAMvE,MAAM,OAAO,aAAa;IACxB,YACU,UAAsB,EACtB,gBAAkC,EAClC,MAAc,EACd,iBAAoC;QAHpC,eAAU,GAAV,UAAU,CAAY;QACtB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;IAC3C,CAAC;IAEJ,OAAO,CAAC,EAAU,EAAE,QAAiB;QACnC,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAQ,4BAA4B,EAAE,EAAE,EAAE;YAC5C,OAAO,EAAE,IAAI,WAAW,CAAC;gBACvB,sBAAsB,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE;aACvC,CAAC;YACF,OAAO,EAAE,UAAU;SACpB,CAAC;aACD,IAAI,CACH,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACf,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAElG,uCACK,QAAQ,CAAC,IAAI,KAChB,YAAY,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAClD,eAAe,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAC1D;QACJ,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC7E,CAAC;;0GA/BU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RxUrlUtilsService } from '@helix/platform/utils';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxFeatureService } from '../services/feature/feature.service';\nimport { IUser } from './user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUserService {\n  constructor(\n    private httpClient: HttpClient,\n    private rxFeatureService: RxFeatureService,\n    private router: Router,\n    private rxUrlUtilsService: RxUrlUtilsService\n  ) {}\n\n  getUser(id: string, bundleId?: string): Observable<IUser> {\n    return this.httpClient\n      .get<IUser>(`/api/rx/application/user/${id}`, {\n        headers: new HttpHeaders({\n          'default-bundle-scope': bundleId ?? ''\n        }),\n        observe: 'response'\n      })\n      .pipe(\n        map((response) => {\n          this.rxFeatureService.enableFeatures((response.headers.get('Enabled-Features') || '').split(','));\n\n          return {\n            ...response.body,\n            modifiedDate: new Date(response.body.modifiedDate),\n            ssoProviderType: response.headers.get('sso-provider-type')\n          };\n        })\n      );\n  }\n\n  getCurrentUser(): Observable<IUser> {\n    return this.getUser('$USER$', this.rxUrlUtilsService.getBundleIdFromUrl());\n  }\n}\n"]}