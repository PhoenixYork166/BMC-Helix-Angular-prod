{"version":3,"file":"session-expiration.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/api/security/session-expiration/session-expiration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { RxComponentCanDeactivateGuard } from '../../navigation/component-can-deactivate.guard';\nimport { debounce, isNaN, noop } from 'lodash';\nimport moment from 'moment-es6';\nimport { Observable } from 'rxjs';\nimport { RX_RESOURCE_URLS } from '../../resource-urls.constant';\nimport { RxAuthService } from '../auth.service';\nimport { RX_SESSION } from '../session.constant';\nimport { RxSessionService } from '../session.service';\nimport { RxSessionExpirationComponent } from './session-expiration.component';\nimport { SessionExpirationInfo, SessionExpirationType } from './session-expiration.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSessionExpirationService {\n  private sessionExpirationModal: ModalDeferred;\n\n  private trackUserInteractionDebounced = debounce(\n    this.trackUserInteraction,\n    RX_SESSION.userInteractionThrottleTimeMs,\n    { leading: true, trailing: false }\n  );\n\n  private sessionExpirationInfos = {\n    [SessionExpirationType.Absolute]: {} as SessionExpirationInfo,\n    [SessionExpirationType.Idle]: {} as SessionExpirationInfo\n  };\n\n  constructor(\n    private httpClient: HttpClient,\n    private adaptModalService: AdaptModalService,\n    private rxAuthService: RxAuthService,\n    private ngZone: NgZone,\n    private rxSessionService: RxSessionService,\n    private rxComponentCanDeactivateGuard: RxComponentCanDeactivateGuard\n  ) {\n    RX_SESSION.userInteractionEvents.forEach((e) =>\n      window.addEventListener(e, this.trackUserInteractionDebounced.bind(this))\n    );\n  }\n\n  setTimeout(type: SessionExpirationType, time: string): void {\n    const mDate = moment(time);\n    const isValid = this.isValidTimeout(mDate);\n\n    if (isValid && mDate.isAfter(this.sessionExpirationInfos[type].timeout)) {\n      this.sessionExpirationInfos[type].timeout = mDate.toDate();\n\n      if (this.isIdleTimeout(type)) {\n        localStorage.setItem('idleTimeout', this.sessionExpirationInfos[type].timeout.toString());\n        localStorage.removeItem('lastUserInteraction');\n      }\n\n      this.updateTimeoutHandler(type, this.sessionExpirationInfos[type].timeout);\n    }\n  }\n\n  keepSessionAlive(): Observable<any> {\n    const lastUserInteraction = this.getLastUserInteraction();\n\n    return this.httpClient.post(\n      RX_RESOURCE_URLS.command,\n      {\n        resourceType: RX_SESSION.keepAliveCommand\n      },\n      {\n        headers: {\n          'AR-JWT-Refresh-From': lastUserInteraction\n            ? new Date(lastUserInteraction).toUTCString()\n            : new Date().toUTCString()\n        }\n      }\n    );\n  }\n\n  logout(): void {\n    this.rxComponentCanDeactivateGuard.disable();\n    this.sessionExpirationModal.reject();\n    this.rxAuthService.logout().subscribe();\n  }\n\n  private trackUserInteraction(): void {\n    if (this.rxSessionService.isAlive()) {\n      localStorage.setItem('lastUserInteraction', Date.now().toString());\n    }\n  }\n\n  private getLastUserInteraction() {\n    const lastUserInteraction = Number(localStorage.getItem('lastUserInteraction'));\n\n    return !isNaN(lastUserInteraction) ? lastUserInteraction : null;\n  }\n\n  private getIdleSessionTimeout() {\n    const idleTimeout = new Date(localStorage.getItem('idleTimeout'));\n\n    return moment(idleTimeout).isValid() ? idleTimeout : null;\n  }\n\n  private updateTimeoutHandler(type: SessionExpirationType, expirationDate: Date): void {\n    const showWarnInMs = this.getTimeToSessionExpirationWarning(expirationDate);\n\n    this.clearTimer(type);\n    this.sessionExpirationInfos[type].timeout = expirationDate;\n\n    if (showWarnInMs > 0) {\n      // run outside angular to keep app 'stable' as required by QA automation\n      this.ngZone.runOutsideAngular(() => {\n        this.sessionExpirationInfos[type].timer = setTimeout(() => {\n          this.ngZone.run(() => {\n            if (this.isIdleTimeout(type)) {\n              this.showIdleTimeoutWarning(expirationDate);\n            } else if (type === SessionExpirationType.Absolute) {\n              this.showAbsoluteTimeoutWarning();\n            }\n          });\n        }, showWarnInMs);\n      });\n    }\n  }\n\n  private isIdleTimeout(type: SessionExpirationType): boolean {\n    return (\n      type === SessionExpirationType.Idle &&\n      !moment(this.sessionExpirationInfos[SessionExpirationType.Idle].timeout).isSame(\n        moment(this.sessionExpirationInfos[SessionExpirationType.Absolute].timeout)\n      )\n    );\n  }\n\n  private getTimeToSessionExpirationWarning(timeout: Date): number {\n    return moment(timeout).subtract(RX_SESSION.minutesBeforeLogout, 'minutes').diff(moment());\n  }\n\n  private showIdleTimeoutWarning(expirationDate: Date): void {\n    if (this.rxSessionService.isAlive() && !this.getLastUserInteraction()) {\n      const idleSessionTimeout = new Date(this.getIdleSessionTimeout());\n\n      if (\n        idleSessionTimeout &&\n        moment(idleSessionTimeout).isAfter(this.sessionExpirationInfos[SessionExpirationType.Idle].timeout)\n      ) {\n        this.updateTimeoutHandler(SessionExpirationType.Idle, idleSessionTimeout);\n      } else {\n        this.openModal(SessionExpirationType.Idle, {\n          expirationDate,\n          keepSessionAlive: this.keepSessionAlive.bind(this),\n          logout: this.logout.bind(this)\n        });\n      }\n    } else {\n      this.keepSessionAlive().subscribe();\n    }\n  }\n\n  private showAbsoluteTimeoutWarning(): void {\n    this.openModal(SessionExpirationType.Absolute);\n\n    // run outside angular to keep app 'stable' as required by QA automation\n    this.ngZone.runOutsideAngular(() => {\n      setTimeout(() => {\n        this.ngZone.run(() => {\n          this.logout();\n        });\n      }, RX_SESSION.minutesBeforeLogout * 60 * 1000);\n    });\n  }\n\n  private openModal(mode: SessionExpirationType, data?: object): void {\n    this.sessionExpirationModal = this.adaptModalService.open({\n      content: RxSessionExpirationComponent,\n      beforeDismiss: (): boolean => false,\n      size: 'sm',\n      data: {\n        mode,\n        ...data\n      }\n    });\n\n    // should be removed after ADAPT issue is resolved:\n    // https://github.bmc.com/bmc-ux/adapt-angular/issues/2746\n    this.sessionExpirationModal.then(noop, noop);\n  }\n\n  private isValidTimeout(date: moment.Moment): boolean {\n    return this.rxSessionService.isAlive() && date.isValid() && date.isAfter(moment());\n  }\n\n  private clearTimer(type: SessionExpirationType): void {\n    if (this.sessionExpirationInfos[type].timer) {\n      clearTimeout(this.sessionExpirationInfos[type].timer);\n      this.sessionExpirationInfos[type].timer = null;\n    }\n  }\n}\n"]}