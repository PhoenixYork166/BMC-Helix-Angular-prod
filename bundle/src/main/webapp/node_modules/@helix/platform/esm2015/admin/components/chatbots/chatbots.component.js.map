{"version":3,"file":"chatbots.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/chatbots/chatbots.component.ts","../../../../../../../libs/platform/admin/components/chatbots/chatbots.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { NgModel } from '@angular/forms';\nimport { ColumnConfig, DataCellTemplateParams } from '@bmc-ux/adapt-table';\nimport { RX_CHATBOTS, RxChatbotDefinitionService } from '@helix/platform/chatbot/api';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  IAdminComponentSetting,\n  IAdminComponentSettings,\n  RX_APPLICATION,\n  RxAdminSettingsService,\n  RxCurrentUserService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RenameDefinitionModalComponent } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IRecordGridConfig, RecordGridComponent, RowSelectionMode } from '@helix/platform/view/components';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { cloneDeep, find, head, includes, map, noop, toString } from 'lodash';\nimport { Observable, of, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'rx-admin-chatbots',\n  templateUrl: './chatbots.component.html'\n})\nexport class ChatbotsAdminComponent extends BaseViewComponent implements OnInit {\n  @ViewChild('chatbotConfigurationsRecordGrid', { static: true })\n  chatbotConfigurationsRecordGrid: RecordGridComponent;\n\n  @ViewChild('nameColumnTemplate', { static: true })\n  nameColumnTemplate: TemplateRef<DataCellTemplateParams>;\n\n  @ViewChild('displayChatbotsDropdownSwitch', { read: NgModel, static: false })\n  displayChatbotsDropdownSwitch: NgModel;\n\n  busy: Subscription;\n  recordGridConfig: Observable<IRecordGridConfig>;\n  private componentSettings: IAdminComponentSetting[];\n\n  sections = cloneDeep(RX_CHATBOTS.sections);\n  isAdministrator: boolean = this.rxCurrentUserService.isAdministrator();\n\n  constructor(\n    private rxAdminSettingsService: RxAdminSettingsService,\n    private rxChatbotDefinitionService: RxChatbotDefinitionService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxModalService: RxModalService,\n    private rxNotificationService: RxNotificationService,\n    private translateService: TranslateService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.notifyPropertyChanged('api', {\n      isDirty: () => this.displayChatbotsDropdownSwitch.dirty\n    });\n\n    if (this.isAdministrator) {\n      this.busy = this.rxAdminSettingsService\n        .getComponentSettings(RX_CHATBOTS.componentSettings.componentName, {\n          'default-bundle-scope': RX_APPLICATION.settingsBundleId\n        })\n        .subscribe((componentSettings: IAdminComponentSettings) => {\n          this.componentSettings = componentSettings.values;\n\n          const componentSetting = find(this.componentSettings, {\n            settingName: RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown\n          });\n\n          this.sections.globalChatbotSettings.displayChatbotsDropdown = JSON.parse(\n            componentSetting.settingValue as string\n          );\n        });\n    }\n\n    this.recordGridConfig = of({\n      enableFiltering: true,\n      recordDefinitionName: RX_CHATBOTS.chatbotSettings.recordDefinitionName,\n      enableRowSelection: RowSelectionMode.Multiple,\n\n      columns: [\n        {\n          index: 0,\n          fieldId: String(RX_CHATBOTS.chatbotSettings.recordFieldIds.name),\n          title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'),\n          cellTemplate: this.nameColumnTemplate\n        },\n        {\n          index: 1,\n          fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),\n          title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')\n        },\n        {\n          index: 2,\n          fieldId: String(RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId),\n          title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.application-library-id.title')\n        },\n        {\n          index: 3,\n          fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),\n          title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot-id.title')\n        }\n      ],\n\n      actionButtons: [\n        {\n          label: 'Rename',\n          style: 'tertiary',\n          icon: 'pencil',\n\n          disabled: () => {\n            return !this.isAdministrator || this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length !== 1;\n          },\n\n          actions: [\n            {\n              name: () => {\n                const selectedChatbot = head(this.chatbotConfigurationsRecordGrid.api.getSelectedRows());\n\n                this.rxModalService\n                  .openModal({\n                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.rename-chatbot.title'),\n                    size: 'sm',\n                    content: RenameDefinitionModalComponent,\n                    data: {\n                      definitionName: selectedChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name],\n                      infoText: this.translateService.instant(\n                        'com.bmc.arsys.rx.client.admin.chatbots.name-uniqueness-validation.message'\n                      ),\n                      fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),\n                      validationErrorText: this.translateService.instant(\n                        'com.bmc.arsys.rx.client.admin.chatbots.name-validation.message'\n                      ),\n                      definitionType: this.translateService.instant(\n                        'com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'\n                      ),\n                      definitionNames: this.chatbotConfigurationsRecordGrid.adaptTableConfig.data\n                        .filter(\n                          (chatbot) =>\n                            chatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId] ===\n                            selectedChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId]\n                        )\n                        .map((chatbot) => chatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name])\n                    }\n                  })\n                  .then((definitionName: string) => {\n                    this.rxChatbotDefinitionService\n                      .rename(selectedChatbot[RX_RECORD_DEFINITION.coreFieldIds.id], definitionName)\n                      .subscribe(() => {\n                        this.refreshChatbotGrid();\n                      });\n                  })\n                  .catch(noop);\n              }\n            }\n          ]\n        },\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),\n          style: 'tertiary',\n          icon: 'trash',\n\n          disabled: () => {\n            return !this.isAdministrator || this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length === 0;\n          },\n\n          actions: [\n            {\n              name: () => {\n                let confirmationMessage = this.translateService.instant(\n                  'com.bmc.arsys.rx.client.admin.chatbots.delete-confirmation.message'\n                );\n\n                const selectedChatbots = this.chatbotConfigurationsRecordGrid.api.getSelectedRows();\n                const selectedChatbotIds = map(selectedChatbots, RX_RECORD_DEFINITION.coreFieldIds.id);\n\n                if (includes(selectedChatbotIds, RX_CHATBOTS.chatbotSettings.defaultBotId)) {\n                  const defaultChatbot = find(selectedChatbots, [\n                    RX_RECORD_DEFINITION.coreFieldIds.id,\n                    RX_CHATBOTS.chatbotSettings.defaultBotId\n                  ]);\n\n                  confirmationMessage = this.translateService.instant(\n                    'com.bmc.arsys.rx.client.admin.chatbots.configurations-delete-confirmation.message',\n                    { defaultChatbotName: defaultChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name] }\n                  );\n                }\n\n                this.rxModalService\n                  .confirm({\n                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n                    modalStyle: RX_MODAL.modalStyles.warning,\n                    message: confirmationMessage\n                  })\n                  .then((result: boolean) => {\n                    if (result) {\n                      this.rxChatbotDefinitionService.delete(selectedChatbotIds).subscribe(() => {\n                        this.rxNotificationService.addSuccessMessage(\n                          this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.delete-success.message')\n                        );\n\n                        this.refreshChatbotGrid();\n                      });\n                    }\n                  });\n              }\n            }\n          ]\n        }\n      ]\n    });\n  }\n\n  getCellValue(dataItem: string[], column: ColumnConfig): string {\n    return dataItem[column.field];\n  }\n\n  onSaveClick(): void {\n    const componentSetting: IAdminComponentSetting = find(this.componentSettings, [\n      'settingName',\n      RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown\n    ]);\n\n    componentSetting.settingValue = toString(this.sections.globalChatbotSettings.displayChatbotsDropdown);\n\n    this.rxAdminSettingsService\n      .updateComponentSettings(\n        `${RX_CHATBOTS.componentSettings.componentName}/${head(this.componentSettings).ownerKeyValue1}`,\n        this.componentSettings\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.global-chatbot-settings-saved.message')\n        );\n\n        this.displayChatbotsDropdownSwitch.control.markAsPristine();\n      });\n  }\n\n  openChatbot(row: string[]): void {\n    if (row) {\n      const bundleId = row[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId];\n      const encodedBotName = encodeURIComponent(row[RX_CHATBOTS.chatbotSettings.recordFieldIds.name]);\n      const chatbotDesignerUrl = `/innovationstudio/index.html#/app/bundle/${bundleId}/ichatbot/${encodedBotName}`;\n\n      window.open(chatbotDesignerUrl);\n    }\n  }\n\n  private refreshChatbotGrid(): void {\n    this.chatbotConfigurationsRecordGrid.api.refresh().subscribe();\n  }\n}\n","<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.chatbots.header.title' | translate }}\">\n  <adapt-accordion [multiselect]=\"true\" class=\"pb-4\">\n    <adapt-accordion-tab\n      [title]=\"sections.chatbotConfigurations.title | translate\"\n      [isOpen]=\"sections.chatbotConfigurations.isExpanded\"\n    >\n      <rx-record-grid #chatbotConfigurationsRecordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n    </adapt-accordion-tab>\n\n    <adapt-accordion-tab\n      *ngIf=\"isAdministrator\"\n      [title]=\"sections.globalChatbotSettings.title | translate\"\n      [isOpen]=\"sections.globalChatbotSettings.isExpanded\"\n    >\n      <adapt-rx-switch\n        class=\"d-block\"\n        name=\"displayChatbotsDropdown\"\n        label=\" {{ 'com.bmc.arsys.rx.client.admin.chatbots.display-available-chatbots.label' | translate }} \"\n        [(ngModel)]=\"sections.globalChatbotSettings.displayChatbotsDropdown\"\n        #displayChatbotsDropdownSwitch=\"ngModel\"\n      ></adapt-rx-switch>\n\n      <button\n        class=\"mt-4\"\n        rx-id=\"save-button\"\n        adapt-button\n        btn-type=\"primary\"\n        size=\"small\"\n        type=\"button\"\n        [disabled]=\"!displayChatbotsDropdownSwitch.dirty\"\n        (click)=\"onSaveClick()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </adapt-accordion-tab>\n  </adapt-accordion>\n</rx-admin-settings>\n\n<ng-template #nameColumnTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <a href=\"javascript:void(0)\" (click)=\"openChatbot(dataItem)\">\n    {{ getCellValue(dataItem, column) | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n"]}