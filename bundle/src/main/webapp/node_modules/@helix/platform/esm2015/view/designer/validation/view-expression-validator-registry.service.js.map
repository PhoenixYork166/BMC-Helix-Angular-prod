{"version":3,"file":"view-expression-validator-registry.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/validation/view-expression-validator-registry.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IComponentPropertyDescriptor, RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { every, filter as _filter, flatten, isEmpty, map as _map, merge as _merge } from 'lodash';\nimport {\n  debounceTime,\n  filter,\n  map,\n  publishReplay,\n  refCount,\n  skipWhile,\n  switchMap,\n  take,\n  takeUntil\n} from 'rxjs/operators';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { IViewComponentDesignValidationIssue } from '../public-interfaces/view-component-design-validation-issue.interface';\nimport { ViewDesignerFacade } from '../+state/view-designer.facade';\nimport { RxViewExpressionValidatorService } from './view-expression-validator.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewExpressionValidatorRegistryService {\n  private issuesObservableMap = new Map<string, Observable<IViewComponentDesignValidationIssue[]>>();\n  private validateSubscription: Subscription;\n\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {}\n\n  registerComponents(guids: string[]): void {\n    guids.forEach((guid) => this.issuesObservableMap.set(guid, this.getComponentValidationIssues(guid)));\n\n    this.initValidation();\n  }\n\n  unregisterComponents(guids: string[]): void {\n    guids.forEach((guid) => this.issuesObservableMap.delete(guid));\n\n    this.initValidation();\n  }\n\n  unregisterAllComponents(): void {\n    this.issuesObservableMap.clear();\n    this.validateSubscription?.unsubscribe();\n  }\n\n  private initValidation(): void {\n    this.validateSubscription?.unsubscribe();\n\n    this.validateSubscription = combineLatest(\n      Array.from(this.issuesObservableMap.entries()).map(\n        ([guid, issues$]: [string, Observable<IViewComponentDesignValidationIssue[]>]) =>\n          issues$.pipe(\n            map((issues) => ({\n              [guid]: issues\n            }))\n          )\n      )\n    )\n      .pipe(\n        map((issuesByComponentGuid) => _merge({}, ...issuesByComponentGuid)),\n        skipWhile((issuesByComponentGuid) => every(Object.values(issuesByComponentGuid), isEmpty)),\n        // debounceTime will allow Set expression validation issues action to be executed once for improved performance.\n        debounceTime(0)\n      )\n      .subscribe((issues) => {\n        this.viewDesignerFacade.setExpressionValidationIssues(issues);\n      });\n  }\n\n  private getComponentValidationIssues(guid: string): Observable<IViewComponentDesignValidationIssue[]> {\n    return this.viewDesignerFacade.getComponentType(guid).pipe(\n      take(1),\n      switchMap((componentType) => {\n        const descriptor = this.rxViewComponentRegistryService.get(componentType);\n\n        const expressionProps = _filter(descriptor?.properties, {\n          enableExpressionEvaluation: true\n        });\n\n        const expressionPropertyNames = _map(expressionProps, 'name');\n\n        const descriptorPropMap = new Map<string, IComponentPropertyDescriptor>(\n          expressionProps.map((prop) => [prop.name, prop])\n        );\n\n        return expressionPropertyNames.length\n          ? combineLatest(\n              expressionPropertyNames.map((propertyName) =>\n                this.viewDesignerFacade\n                  .getComponentPropertyValue(guid, propertyName)\n                  .pipe(\n                    switchMap((propertyValue) =>\n                      this.rxViewExpressionValidatorService\n                        .validate(\n                          propertyValue,\n                          propertyName,\n                          descriptorPropMap.get(propertyName).label,\n                          descriptorPropMap.get(propertyName).evaluatorService\n                        )\n                        .pipe(\n                          takeUntil(\n                            this.viewDesignerFacade.allComponentGuids$.pipe(filter((guids) => !guids.has(guid)))\n                          )\n                        )\n                    )\n                  )\n              )\n            ).pipe(map(flatten))\n          : of([]);\n      }),\n      publishReplay(1),\n      refCount()\n    );\n  }\n}\n"]}