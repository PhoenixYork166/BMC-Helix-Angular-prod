{"version":3,"file":"approval-configuration.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/approval-configuration/approval-configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  IApprovalFlowGroup,\n  IApprovalFlowGroupConfigurationResponse,\n  IRecordRegistration,\n  ISelfApprovalConfiguration\n} from './approval-configuration.types';\nimport { RX_APPROVAL_CONFIGURATION } from './approval-configuration.constant';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { trim } from 'lodash';\nimport {\n  IDataPageResult,\n  IFunctionalRoleDescriptor,\n  RxFunctionalRoleDataPageService\n} from '@helix/platform/shared/api';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApprovalConfigurationService {\n  selfApprovalApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/approvalmapping';\n  registrationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/registration';\n  flowConfigurationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/flowconfiguration';\n\n  functionalRoles$: Observable<IFunctionalRoleDescriptor[]>;\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxFunctionalRoleDataPageService: RxFunctionalRoleDataPageService\n  ) {}\n\n  getRegisteredRecordDetails(registeredRecordDefinitionName: string): Observable<IRecordRegistration> {\n    return this.httpClient.get<any>(`${this.registrationApi}/${registeredRecordDefinitionName}`);\n  }\n\n  registerRecord(approvalRegistrationRecord: IRecordRegistration): Observable<any> {\n    return this.httpClient.post(this.registrationApi, approvalRegistrationRecord);\n  }\n\n  updateRecord(approvalRegistrationRecord: IRecordRegistration): Observable<any> {\n    return this.httpClient.put(\n      `${this.registrationApi}/${approvalRegistrationRecord.recordDefinition}`,\n      approvalRegistrationRecord\n    );\n  }\n\n  unRegisterRecord(definitionName: string): Observable<any> {\n    return this.httpClient.delete(`${this.registrationApi}/${encodeURIComponent(definitionName)}`);\n  }\n\n  createSelfApprovalConfiguration(configuration: ISelfApprovalConfiguration): Observable<any> {\n    return this.httpClient.post(this.selfApprovalApi, configuration);\n  }\n\n  updateSelfApprovalConfiguration(id: string, configuration: ISelfApprovalConfiguration): Observable<any> {\n    return this.httpClient.put(\n      `${this.selfApprovalApi}/${RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name}/${id}`,\n      configuration\n    );\n  }\n\n  deleteSelfApprovalConfiguration(id: string): Observable<any> {\n    return this.httpClient.delete(\n      `${this.selfApprovalApi}/${RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name}/${id}`\n    );\n  }\n\n  getFunctionalRoles(): Observable<IFunctionalRoleDescriptor[]> {\n    if (!this.functionalRoles$) {\n      this.functionalRoles$ = this.rxFunctionalRoleDataPageService\n        .get({\n          params: {\n            pageSize: -1,\n            propertySelection: ['applicationName', 'name']\n          }\n        })\n        .pipe(\n          map((response: IDataPageResult) =>\n            response.data.map((role: IFunctionalRoleDescriptor) => ({\n              id: role.id,\n              name: role.name,\n              applicationName: role.applicationName\n            }))\n          ),\n          shareReplay(1)\n        );\n    }\n\n    return this.functionalRoles$;\n  }\n\n  getApprovalFlowConfigurations(\n    registeredRecordDefinition: string\n  ): Observable<IApprovalFlowGroupConfigurationResponse> {\n    return this.httpClient.get<IApprovalFlowGroupConfigurationResponse>(\n      `${this.flowConfigurationApi}/${registeredRecordDefinition}`\n    );\n  }\n\n  updateApprovalFlowGroup(\n    flowGroupName: string,\n    flowGroupConfiguration: IApprovalFlowGroup,\n    recordDefinitionName: string\n  ): Observable<any> {\n    return this.httpClient.put(\n      `${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(\n        flowGroupName\n      )}`,\n      flowGroupConfiguration\n    );\n  }\n\n  saveApprovalFlowGroup(flowGroupConfiguration: IApprovalFlowGroup, recordDefinitionName: string): Observable<any> {\n    return this.httpClient.post(\n      `${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName`,\n      flowGroupConfiguration\n    );\n  }\n\n  getApprovalFlowGroup(recordDefinitionName: string, flowGroupName: string): Observable<IApprovalFlowGroup> {\n    return this.httpClient.get<IApprovalFlowGroup>(\n      `${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(\n        flowGroupName\n      )}`\n    );\n  }\n\n  deleteApprovalFlowGroup(flowGroupName: string, recordDefinitionName: string): Observable<any> {\n    return this.httpClient.delete(\n      `${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(\n        flowGroupName\n      )}`\n    );\n  }\n\n  getCtmPeopleFormFields(bundleId: string): Observable<IRecordDefinition> {\n    return this.httpClient.get<IRecordDefinition>(\n      `/api/com.bmc.arsys.rx.approval/rx/application/approval/recorddefinition/people/${bundleId}`\n    );\n  }\n\n  isFunctionalRole(approver: string): boolean {\n    return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.functionalRole);\n  }\n\n  getFunctionalRoleGuid(approver: string): string {\n    // FR[:]AGGADG2BIX85UAQM80BBQM80BBBM9X -> AGGADG2BIX85UAQM80BBQM80BBBM9X\n    return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];\n  }\n\n  isApproverPeople(approver: string): boolean {\n    // check if approver is a User, returns true for 'U[:]abc'\n    return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.people);\n  }\n\n  getApproverUser(approver: string): string {\n    // 'U[:]abc' -> abc\n    return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];\n  }\n\n  isFieldIdentifyingApprover(approver: string): boolean {\n    // checks if string is surrounded by $ e.g. $Display ID$\n    return Boolean(approver.match(/\\$(.*?)\\$/g));\n  }\n\n  getFieldIdentifyingApprover(approver: string): string {\n    // $Display ID$ -> Display ID\n    return trim(approver, '$');\n  }\n\n  getLastLabel(approver: string): string {\n    // finds approver name from hierarchy format e.g. returns Payroll from COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll\n    return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator).pop();\n  }\n\n  isCompany(approver: string): boolean {\n    // true when Approver value is prefixed by COM e.g. COM[:]Calbro Services\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.company\n    );\n  }\n\n  isCompanyOrg(approver: string): boolean {\n    // true when Approver value is prefixed by COMORG e.g. COMORG[:]Calbro Services[:]Human Resources\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrg\n    );\n  }\n\n  isCompanyOrgDept(approver: string): boolean {\n    // true when Approver value is prefixed by COMORGDEPT i.e. value is a department with hierarchy e.g. COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrgDept\n    );\n  }\n\n  isSupportCompany(approver: string): boolean {\n    // true when Approver value is prefixed by SCOM e.g. SCOM[:]Calbro Services\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompany\n    );\n  }\n\n  isSupportCompanyOrg(approver: string): boolean {\n    // true when Approver value is prefixed by SCOMSORG e.g. SCOMSORG[:]Calbro Services[:]IT Support\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrg\n    );\n  }\n\n  isSupportCompanyOrgGroup(approver: string): boolean {\n    // true when Approver value is prefixed by SCOMSORGSGRP e.g. SCOMSORGSGRP[:]Calbro Services[:]IT Support[:]Backoffice Support\n    return (\n      approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===\n      RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrgGroup\n    );\n  }\n}\n"]}