{"version":3,"file":"base-view-component.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/runtime/components/base-view-component/base-view-component.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAqB,MAAM,EAAE,MAAM,eAAe,CAAC;AAChG,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,iCAAiC,EAAE,MAAM,2DAA2D,CAAC;AAI9G,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;;AAIlD,kDAAkD;AAClD,MAAM,OAAgB,iBAAiB;IAFvC;QAOE,qBAAgB,GAAG,EAAE,CAAC;QAGtB,aAAQ,GAAG,IAAI,YAAY,EAAW,CAAC;QAGvC,eAAU,GAAG,IAAI,YAAY,EAAW,CAAC;QAGzC,WAAM,GAAG,IAAI,YAAY,EAAW,CAAC;QAa7B,sBAAiB,GAAG,KAAK,CAAC;QACxB,eAAU,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;QAIrD,oBAAe,GAAgD,IAAI,YAAY,EAAE,CAAC;KA+BnF;IA/CC,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IASD,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAc,EAAE,EAAE;YACzF,IAAI,CAAC,gBAAgB,GAAG,MAAM,IAAI,EAAE,CAAC;YAErC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,YAAoB,EAAE,QAAa,EAAE,QAAc;QACvE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,YAAY;YACZ,QAAQ;YACR,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB,CAChB,OAAe,IAAI,CAAC,IAAI,EACxB,6BAAqC,iCAAiC;QAEtE,OAAO,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;IACvF,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC;;8GA9DmB,iBAAiB;kGAAjB,iBAAiB;2FAAjB,iBAAiB;kBAFtC,SAAS;8BAIR,IAAI;sBADH,WAAW;uBAAC,2BAA2B;gBAIxC,gBAAgB;sBADf,WAAW;uBAAC,OAAO;gBAIpB,QAAQ;sBADP,MAAM;gBAIP,UAAU;sBADT,MAAM;gBAIP,MAAM;sBADL,MAAM;gBAIH,QAAQ;sBADX,WAAW;uBAAC,QAAQ","sourcesContent":["import { Directive, EventEmitter, HostBinding, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { VIEW_COMPONENT_DEFAULT_EVENT_NAME } from '../../event-manager/view-component-event-manager.constant';\nimport { IViewComponentPropertyChanged } from '../../interfaces/view-component-property-changed.interface';\nimport { IViewComponent } from '../../interfaces/view-component.interface';\nimport { RuntimeViewModelApi } from '../../runtime-view-model-api.class';\nimport { pluck, takeUntil } from 'rxjs/operators';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class BaseViewComponent implements IViewComponent, OnDestroy, OnInit {\n  @HostBinding('attr.rx-view-component-id')\n  guid: string;\n\n  @HostBinding('class')\n  customCssClasses = '';\n\n  @Output()\n  autoFill = new EventEmitter<boolean>();\n\n  @Output()\n  autoScroll = new EventEmitter<boolean>();\n\n  @Output()\n  hidden = new EventEmitter<boolean>();\n\n  @HostBinding('hidden')\n  get isHidden(): boolean {\n    return this.isComponentHidden;\n  }\n\n  set isHidden(value: boolean) {\n    this.hidden.emit(value);\n\n    this.isComponentHidden = Boolean(value);\n  }\n\n  private isComponentHidden = false;\n  protected destroyed$ = new ReplaySubject<boolean>(1);\n\n  config: Observable<IPlainObject>;\n  runtimeViewModelApi: RuntimeViewModelApi;\n  propertyChanged: EventEmitter<IViewComponentPropertyChanged> = new EventEmitter();\n\n  ngOnInit(): void {\n    this.config.pipe(pluck('styles'), takeUntil(this.destroyed$)).subscribe((styles: string) => {\n      this.customCssClasses = styles || '';\n\n      this.autoFill.emit(this.customCssClasses.includes('rx-auto-fill'));\n      this.autoScroll.emit(this.customCssClasses.includes('rx-auto-scroll'));\n    });\n  }\n\n  notifyPropertyChanged(propertyName: string, newValue: any, oldValue?: any): void {\n    this.propertyChanged.next({\n      guid: this.guid,\n      propertyName,\n      newValue,\n      oldValue\n    });\n  }\n\n  triggerViewActions(\n    guid: string = this.guid,\n    viewActionTriggerEventName: string = VIEW_COMPONENT_DEFAULT_EVENT_NAME\n  ): Promise<void> {\n    return this.runtimeViewModelApi.triggerViewActions(guid, viewActionTriggerEventName);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n"]}