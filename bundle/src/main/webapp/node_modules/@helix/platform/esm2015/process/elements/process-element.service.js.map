{"version":3,"file":"process-element.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/process/elements/process-element.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAEjD,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AACzE,OAAO,EAAsB,6BAA6B,EAAE,MAAM,6BAA6B,CAAC;;;;AAKhG,MAAM,OAAO,uBAAuB;IAClC,YACU,WAAwB,EACxB,mBAAwC,EACxC,6BAA4D;QAF5D,gBAAW,GAAX,WAAW,CAAa;QACxB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,kCAA6B,GAA7B,6BAA6B,CAA+B;IACnE,CAAC;IAEJ,6CAA6C;IAC7C,QAAQ,CAAC,UAA8B;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;QAEtF,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3B,MAAM,kBAAkB,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YAE/E,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,EAAE;gBAC5C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;aAC/B;YAED,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE;gBAC9C,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;aAChC;YAED,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAC7B,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC;aAClC;YAED,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC,IAAI,CAAC;YAE7C,MAAM,WAAW,GAAG,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,UAAU,EAAE;gBACtE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;aACpC,CAAC,CAAC;YAEH,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,2BAA2B,EAAE;gBAC5C,IAAI,CAAC,2BAA2B,GAAG,WAAW,CAAC,2BAA2B,CAAC;aAC5E;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;;oHAtCU,uBAAuB;wHAAvB,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { filter, map, startsWith } from 'lodash';\n\nimport { RxIdService, RxJsonParserService } from '@helix/platform/utils';\nimport { IProcessDefinition, RxProcessElementSearchService } from '@helix/platform/process/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementService {\n  constructor(\n    private rxIdService: RxIdService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxProcessElementSearchService: RxProcessElementSearchService\n  ) {}\n\n  // TODO-VS: remove in favour of getJsonObject\n  getGraph(definition: IProcessDefinition) {\n    const graph = this.rxJsonParserService.tryParseJson(definition.layout, { cells: [] });\n\n    graph.cells.forEach((cell) => {\n      const embeddedElementIds = map(filter(graph.cells, { parent: cell.id }), 'id');\n\n      if (startsWith(cell.type, 'rx.CallActivity')) {\n        cell.type = 'rx.CallActivity';\n      }\n\n      if (startsWith(cell.type, 'rx.ProcessActions')) {\n        cell.type = 'rx.ProcessAction';\n      }\n\n      if (embeddedElementIds.length) {\n        cell.embeds = embeddedElementIds;\n      }\n\n      cell.processDefinitionName = definition.name;\n\n      const flowElement = this.rxProcessElementSearchService.find(definition, {\n        guid: this.rxIdService.get(cell.id)\n      });\n\n      if (flowElement?.multiInstanceLoopDefinition) {\n        cell.multiInstanceLoopDefinition = flowElement.multiInstanceLoopDefinition;\n      }\n    });\n\n    return graph;\n  }\n}\n"]}