{"version":3,"file":"record-editor-form.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/runtime/record-editor-form.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { forEach, forOwn, includes, reduce } from 'lodash';\nimport { RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\n\nexport const RecordEditorFormDelimiter = '%';\n\nconst BASE_FORM_GROUP_KEY = 'baseFormGroup';\n\n@Injectable()\nexport class RecordEditorForm extends FormGroup {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super({});\n  }\n\n  addFieldControl(\n    fieldId: string,\n    guid: string,\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const formControl = new RecordEditorFormControl('', validator, asyncValidator);\n    const formGroup = this.controls[BASE_FORM_GROUP_KEY] as FormGroup;\n\n    formControl.setValue(initialValue);\n\n    if (!formGroup) {\n      this.addControl(\n        BASE_FORM_GROUP_KEY,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      formGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  addAssociatedFieldControl(\n    fieldId: string,\n    guid: string,\n    associatedRecordPath: string[],\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const associatedFormGroupName = associatedRecordPath.join(RecordEditorFormDelimiter);\n    const associatedFormGroup: FormGroup = this.controls[associatedFormGroupName] as FormGroup;\n    const formControl = new RecordEditorFormControl(initialValue, validator, asyncValidator);\n\n    if (!associatedFormGroup) {\n      this.addControl(\n        associatedFormGroupName,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      associatedFormGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  resetFieldControls(formStateByFieldId?: { [fieldId: string]: any }, associatedRecordPath?: string[]): void {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formStateByFieldId) {\n      formGroup.reset(this.prepareFormGroupState(formStateByFieldId, formGroup));\n    } else {\n      formGroup.reset();\n    }\n  }\n\n  syncFormControlValues(\n    fieldId: string,\n    value: any,\n    associatedFromGroupName?: string,\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    this.getControlsBoundToRecordField(String(fieldId), associatedFromGroupName).forEach((formControl) => {\n      if (options.markAsDirty !== false) {\n        formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        formControl.markAsTouched();\n      }\n\n      if (!this.rxRecordInstanceUtilsService.isFieldValueEqual(formControl.value, value)) {\n        formControl.setValue(value);\n      }\n    });\n  }\n\n  getFieldIds(associatedRecordPath?: string[]): string[] {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      return reduce(\n        formGroup.controls,\n        (result: string[], control: AbstractControl, formControlId: string) => {\n          const fieldId = this.getFieldId(formControlId);\n\n          if (control instanceof FormControl && !includes(result, fieldId)) {\n            result.push(fieldId);\n          }\n\n          return result;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  clearAndReset(): void {\n    forOwn(this.controls, (control, name) => this.removeControl(name));\n    this.reset();\n  }\n\n  markInvalidControlsAsTouched(): void {\n    forEach(this.controls, (formGroup: FormGroup) => {\n      forEach(formGroup.controls, (control) => {\n        if (control.invalid) {\n          control.markAsTouched();\n        }\n      });\n    });\n  }\n\n  getFormControl(fieldId: string, guid: string, associatedRecordPath?: string[]): RecordEditorFormControl {\n    let control: FormControl;\n    let formGroup: FormGroup;\n\n    formGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      control = formGroup.get(this.getControlId(fieldId, guid)) as FormControl;\n    }\n\n    return control as RecordEditorFormControl;\n  }\n\n  private getControlsBoundToRecordField(fieldId: string, associatedFormGroupName?: string): RecordEditorFormControl[] {\n    const formGroup: FormGroup = this.controls[associatedFormGroupName || BASE_FORM_GROUP_KEY] as FormGroup;\n\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        if (control instanceof FormControl && this.getFieldId(formControlId) === fieldId) {\n          result.push(control);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  private getControlId(fieldId: string, guid?: string): string {\n    return `${fieldId}:${guid || this.rxGuidService.generate()}`;\n  }\n\n  private getFieldId(formControlId: string): string {\n    return formControlId.split(':')[0];\n  }\n\n  private prepareFormGroupState(\n    formStateByFieldId: { [fieldId: string]: any },\n    formGroup: FormGroup\n  ): { [formControlId: string]: any } {\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        result[formControlId] = formStateByFieldId[this.getFieldId(formControlId)];\n\n        return result;\n      },\n      {}\n    );\n  }\n}\n"]}