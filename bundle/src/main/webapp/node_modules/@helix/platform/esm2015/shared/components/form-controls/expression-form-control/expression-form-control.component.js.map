{"version":3,"file":"expression-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/expression-form-control/expression-form-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/expression-form-control/expression-form-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { concat, EMPTY, Observable, of, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, finalize, switchMap, takeUntil, takeWhile, tap } from 'rxjs/operators';\nimport { flow, isArray, isEmpty, isNil, map, reduce, uniqueId } from 'lodash';\nimport {\n  ExpressionParserToken,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  IFormControlComponent,\n  RxDataDictionaryUtils,\n  RxExpressionParserService\n} from '@helix/platform/shared/api';\nimport { RxObjectUtilsService, RxTreeService } from '@helix/platform/utils';\nimport { IExpressionFormControlOptions } from './expression-form-control.types';\nimport { RX_EXPRESSION_EDITOR } from '../../expression-editor';\nimport { ValueAccessor } from '../../form-builder/value-accessor';\n\ninterface IExpressionNode {\n  id: string;\n  label?: string;\n  expression: string;\n  isInvalid?: boolean;\n  tooltip?: string;\n}\n\n@Component({\n  selector: 'rx-expression-form-control',\n  templateUrl: 'expression-form-control.component.html',\n  styleUrls: ['./expression-form-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: ExpressionFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class ExpressionFormControlComponent\n  extends ValueAccessor<string>\n  implements OnInit, OnDestroy, IFormControlComponent\n{\n  @Input()\n  options: IExpressionFormControlOptions;\n\n  @Input()\n  isDisabled: boolean;\n\n  @HostBinding('attr.property-path')\n  @Input()\n  propertyPath: string;\n\n  @HostBinding('attr.property-label')\n  get propertyLabel(): string {\n    return this.options?.expressionEditorPropertyName || this.options?.label || null;\n  }\n\n  @Output()\n  events: EventEmitter<any> = new EventEmitter();\n\n  nodes: Array<IExpressionNode> = [];\n\n  private valueSubject = new Subject<string>();\n\n  private dataDictionaryExpressionMap: Map<\n    IDataDictionaryBranch['expression'],\n    IDataDictionaryBranch & { tooltip: string }\n  >;\n\n  private expressionNodeMap = new Map<string, IExpressionNode>();\n  private destroyed$ = new ReplaySubject<boolean>(1);\n  private dataDictionary$: Observable<IDataDictionary>;\n  isTouched = false;\n\n  constructor(\n    private rxExpressionParserService: RxExpressionParserService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxDataDictionaryUtils: RxDataDictionaryUtils,\n    private rxTreeService: RxTreeService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.dataDictionary$ = this.options.dataDictionary$.pipe(takeUntil(this.destroyed$));\n\n    (isNil(this.value) ? this.valueSubject.asObservable() : concat(of(this.value), this.valueSubject.asObservable()))\n      .pipe(\n        distinctUntilChanged(),\n        switchMap((value) =>\n          // When value is not defined don't subscribe to data dictionary observable.\n          value\n            ? this.dataDictionary$.pipe(\n                tap(this.onDataDictionaryChange.bind(this)),\n                // Unsubscribe from data dictionary observable when value is removed.\n                takeWhile(() => Boolean(this.value))\n              )\n            : EMPTY.pipe(finalize(() => this.updateNodes()))\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  onWriteValue(value: string): void {\n    this.valueSubject.next(value);\n  }\n\n  openEditor(): void {\n    this.isTouched = true;\n\n    this.events.emit({\n      type: RX_EXPRESSION_EDITOR.events.openExpressionEditor,\n      payload: {\n        propertyPath: this.propertyPath,\n        propertyLabel: this.propertyLabel,\n        isReadOnly: this.isDisabled\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private onDataDictionaryChange(dataDictionary: IDataDictionary) {\n    this.dataDictionaryExpressionMap = flow(\n      (dictionary) => this.rxDataDictionaryUtils.addTooltips(dictionary),\n      (dictionary) =>\n        this.rxTreeService.flatten({\n          children: dictionary\n        }),\n      (dictionary) =>\n        reduce(\n          dictionary,\n          (dictionary, node) => {\n            if (isArray(node.expression)) {\n              node.expression.forEach((expressionItem) => {\n                dictionary.push({\n                  ...node,\n                  expression: expressionItem\n                });\n              });\n            } else {\n              dictionary.push(node);\n            }\n\n            return dictionary;\n          },\n          []\n        ),\n      (dictionary) => this.rxObjectUtilsService.mapFromArray(dictionary, 'expression')\n    )(dataDictionary);\n\n    this.updateNodes();\n  }\n\n  private getExpressionNode(token: string, expression: string): IExpressionNode {\n    const node: IExpressionNode = {\n      id: `$$rx-${uniqueId()}-rx$$`,\n      expression\n    };\n\n    const isArExpression = token === ExpressionParserToken.ArExpression;\n\n    if (\n      token === ExpressionParserToken.RxExpression ||\n      token === ExpressionParserToken.SingleQuoteRxExpression ||\n      token === ExpressionParserToken.SingleQuoteTextExpression ||\n      isArExpression\n    ) {\n      const dataDictionaryItem = this.dataDictionaryExpressionMap.get(expression);\n\n      if (dataDictionaryItem) {\n        node.label = dataDictionaryItem.label;\n        node.tooltip = dataDictionaryItem.tooltip;\n      } else if (isArExpression || token === ExpressionParserToken.SingleQuoteTextExpression) {\n        node.label = expression;\n      } else {\n        node.isInvalid = true;\n      }\n    }\n\n    return node;\n  }\n\n  private updateNodes(): void {\n    if (this.dataDictionaryExpressionMap) {\n      this.expressionNodeMap.clear();\n\n      this.nodes = this.value\n        ? map(\n            this.rxExpressionParserService\n              .parse(\n                this.value,\n                (token, expression) => {\n                  if (token !== ExpressionParserToken.RxStringExpression) {\n                    if (token === ExpressionParserToken.ArExpression) {\n                      expression = expression.replace('\\\\', '');\n                    }\n\n                    const node = this.getExpressionNode(token, expression);\n\n                    this.expressionNodeMap.set(node.id, node);\n\n                    expression = node.id;\n                  }\n\n                  return expression;\n                },\n                this.options.operators\n              )\n              .split(/(\\$\\$rx-[\\d]+-rx\\$\\$)/g)\n              .filter((element) => !isEmpty(element) && !/^((\\$\\$rx-)|(-rx\\$\\$)|([\\s]+))$/.test(element)),\n            (nodeId) =>\n              this.expressionNodeMap.get(nodeId) || {\n                id: nodeId,\n                expression: nodeId\n              }\n          )\n        : [];\n\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n}\n","<adapt-rx-control-label\n  *ngIf=\"!options.isLabelHidden\"\n  [label]=\"options.label\"\n  [showRequiredLabel]=\"options.isRequired\"\n  [tooltip]=\"\n    options.tooltip\n      ? {\n          content: popoverContent,\n          popoverMode: options.tooltip.popoverMode,\n          placement: options.tooltip.placement,\n          iconName: options.tooltip.iconName\n        }\n      : null\n  \"\n></adapt-rx-control-label>\n\n<ng-template #popoverContent>\n  <span [innerHtml]=\"options.tooltip.content\"></span>\n</ng-template>\n\n<button\n  type=\"button\"\n  adapt-button\n  [btn-type]=\"'tertiary'\"\n  [ngClass]=\"{ 'bg-hover': nodes.length }\"\n  class=\"position-relative text-left overflow-hidden w-100 rounded p-0\"\n  (click)=\"openEditor()\"\n  [disabled]=\"isDisabled && !nodes.length\"\n>\n  <ng-container *ngIf=\"!nodes.length\">{{\n    options.clickToBuildExpressionLabel ||\n      'com.bmc.arsys.rx.client.expression-form-control.click-to-build-expression.label' | translate\n  }}</ng-container>\n\n  <ng-container *ngFor=\"let node of nodes\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        node.isInvalid ? invalidExpression : node.label ? expression : plainText;\n        context: { $implicit: node }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <span class=\"fade-line position-absolute w-100 text-center\"><span class=\"d-icon-ellipsis_horizontal\"></span></span>\n</button>\n\n<ng-template #plainText let-node>\n  <span class=\"py-1 ml-1 rounded d-inline-block rx-ellipsis\">{{ node.expression }}</span>\n</ng-template>\n\n<ng-template #expression let-node>\n  <span\n    [adaptTooltip]=\"node.tooltip\"\n    placement=\"auto\"\n    class=\"d-inline-block rx-ellipsis p-1 ml-1 rounded bg-gray-300 text-default\"\n    >{{ node.label }}</span\n  >\n</ng-template>\n\n<ng-template #invalidExpression>\n  <span adaptTooltip=\"Error\" placement=\"auto\" class=\"d-inline-block rx-ellipsis p-1 ml-1 rounded bg-danger text-white\">\n    {{ 'com.bmc.arsys.rx.client.common.error.label' | translate }}\n  </span>\n</ng-template>\n\n<div *ngIf=\"options.isRequired && !nodes.length && isTouched\" class=\"text-danger\">\n  {{ 'com.bmc.arsys.rx.client.expression-form-control.validation.required.message' | translate }}\n</div>\n"]}