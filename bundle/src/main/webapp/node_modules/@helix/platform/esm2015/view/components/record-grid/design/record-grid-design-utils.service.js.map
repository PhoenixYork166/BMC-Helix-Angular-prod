{"version":3,"file":"record-grid-design-utils.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-design-utils.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport { IFieldDefinition, IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  IFormControlBuilderConfig,\n  IPlainObject,\n  RxDefinitionNameService,\n  RxFeatureService,\n  Tooltip\n} from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalSelectFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  ITextFormControlOptions,\n  OptionalSelectFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IViewActionDesignProperties,\n  RecordGridNamedFilterOptionKey,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewActionListItem,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  IViewDesignerInspectorConfig,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport {\n  defaults,\n  filter as _filter,\n  find,\n  forEach,\n  isEmpty,\n  isObject,\n  isUndefined,\n  map as _map,\n  omit,\n  pick,\n  reduce,\n  sortBy\n} from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap, take } from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IRecordGridSortable } from '../runtime/types/record-grid-column.types';\nimport { IRxRecordGridFilter } from '../common/types/record-grid-filter.types';\nimport { IRecordGridPredefinedFilterPreset } from '../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IRecordGridColumnDesignModel,\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridColumnEditorControlComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-control.component';\nimport {\n  IRecordGridFilterPresetDescriptorModel,\n  IRecordGridFilterPresetEditorControlOptions\n} from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor.types';\nimport { RecordGridFilterPresetEditorControlComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component';\nimport {\n  IRecordGridFilterDescriptorModel,\n  IRecordGridFilterSelectControlOptions,\n  RecordGridFilterMode\n} from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RecordGridFilterSelectControlComponent } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.component';\nimport { RxRecordGridRowActionEditorWidgetComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.types';\nimport { RecordGridSortEditorControlComponent } from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { INamedFilterOptionDesignData } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.types';\nimport { RecordGridViewPresetsWidgetComponent } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetsWidgetOptions\n} from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  IGridViewColumnProperties,\n  IGridViewPresetProperties,\n  IRecordGridColumnNamedFilterOptionDesign,\n  IRecordGridSortableObject\n} from '../common/types/record-grid.types';\nimport { IViewPresetProperties } from '../../view-preset-selector/view-preset-selector.types';\n\ntype ColumnsDataDictionaryBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionary;\ntype ColumnDataDictionaryBranchBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionaryBranch;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignUtilsService {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFeatureService: RxFeatureService,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private translateService: TranslateService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  private getColumnActionComponentPayloads(\n    actions: IViewActionListItem[]\n  ): IViewComponentDesignSetPayload<IViewActionDesignProperties>[] {\n    return _map(\n      actions,\n      (action): IViewComponentDesignSetPayload<IViewActionDesignProperties> => ({\n        ...action,\n        type: RxViewComponentType.Action\n      })\n    );\n  }\n\n  private getNamedFilterOptionPayloads(\n    namedFilterOptions: INamedFilterOptionDesignData[]\n  ): IViewComponentDesignSetPayload<IRecordGridColumnNamedFilterOptionDesign>[] {\n    return _map(namedFilterOptions, (namedFilterOption) => ({\n      ...namedFilterOption,\n      type: RX_RECORD_GRID.components.filterPreset\n    }));\n  }\n\n  getGridFilterComponentPayloads(\n    gridFilters: IRxRecordGridFilter[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel>[] {\n    return _map(\n      gridFilters,\n      (gridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n        guid: gridFilter.guid,\n        type: RX_RECORD_GRID.components.filter,\n        data: {\n          fieldId: gridFilter.fieldId,\n          value: gridFilter.value,\n          ...(gridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: gridFilter.$DISPLAYVALUE$ })\n        }\n      })\n    );\n  }\n\n  getColumnComponentPayloads(\n    columns: IRecordGridDesignInspectorColumnConfig[],\n    initialSortColumn: IRecordGridSortEditorModel\n  ): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel>[] {\n    return _map(columns, (inspectorColumn, index): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel> => {\n      let sortable: IRecordGridSortable = 'false';\n\n      if (initialSortColumn?.fieldId === inspectorColumn.fieldId && inspectorColumn.sortable !== false) {\n        sortable = JSON.stringify({\n          direction: initialSortColumn.direction\n        } as IRecordGridSortableObject) as IRecordGridSortable;\n      } else if (isObject(inspectorColumn.sortable) || inspectorColumn.sortable === true) {\n        sortable = 'true';\n      }\n\n      const columnDesignModel: IRecordGridColumnDesignModel = {\n        alignment: inspectorColumn.alignment,\n        fieldId: inspectorColumn.fieldId,\n        filterable: inspectorColumn.filterable,\n        filterType: inspectorColumn.filterType,\n        index: String(inspectorColumn.index),\n        sortable,\n        title: inspectorColumn.title,\n        searchable: inspectorColumn.searchable,\n        visible: inspectorColumn.visible,\n        cellDisplayProperties: inspectorColumn.cellDisplayProperties,\n        width: inspectorColumn.width,\n        wrapText: inspectorColumn.wrapText,\n        typeaheadKeystrokeCount: inspectorColumn.typeaheadKeystrokeCount,\n        additionalQueryCriteria: inspectorColumn.additionalQueryCriteria\n      };\n\n      return {\n        type: RX_RECORD_GRID.components.column,\n        guid: inspectorColumn.guid,\n        insertIndex: index,\n        outletName: RX_VIEW_DEFINITION.defaultOutletName,\n        data: columnDesignModel,\n        children: [\n          ...this.getColumnActionComponentPayloads(inspectorColumn.actions),\n          ...this.getNamedFilterOptionPayloads(inspectorColumn.namedFilterOptions)\n        ]\n      };\n    });\n  }\n\n  getGridFilterPresetComponentPayloads(\n    filterPresets: IRecordGridPredefinedFilterPreset[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel>[] {\n    const namedFilterGuids = columns.reduce(\n      (result, column) => result.concat(...column.namedFilterOptions.map((namedFilter) => namedFilter.guid)),\n      []\n    );\n\n    const selectedFieldIds = columns.map((column) => column.fieldId);\n\n    return _map(\n      filterPresets,\n      (filterPreset): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel> => {\n        const newRecordGridFilters = filterPreset.recordGridFilters\n          .filter((filter) => selectedFieldIds.includes(filter.fieldId))\n          .filter((filter) => {\n            const value = isObject(filter.value) ? filter.value : this.rxJsonParserService.tryParseJson(filter.value);\n\n            return (\n              !value?.[RecordGridNamedFilterOptionKey] ||\n              namedFilterGuids.includes(value[RecordGridNamedFilterOptionKey])\n            );\n          });\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          filterPreset.filters,\n          newRecordGridFilters\n        );\n\n        return {\n          guid: filterPreset.guid,\n          type: RX_RECORD_GRID.components.filterPreset,\n          data: {\n            title: filterPreset.title,\n            filters: newFilterData\n              ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n                  JSON.stringify(newFilterData),\n                  newRecordGridFilters\n                )\n              : null\n          },\n          children: _map(\n            newRecordGridFilters,\n            (recordGridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n              guid: recordGridFilter.guid,\n              type: RX_RECORD_GRID.components.filter,\n              data: {\n                fieldId: recordGridFilter.fieldId,\n                value: recordGridFilter.value,\n                ...(recordGridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: recordGridFilter.$DISPLAYVALUE$ })\n              }\n            })\n          )\n        };\n      }\n    );\n  }\n\n  getFilterPresetDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IRecordGridPredefinedFilterPreset[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset),\n      (\n        filterPresetsDescriptor: IViewComponentDesignData<IRecordGridFilterPresetDescriptorModel>\n      ): IRecordGridPredefinedFilterPreset => ({\n        filters: filterPresetsDescriptor.data.filters,\n        recordGridFilters: _map(\n          _filter(\n            filterPresetsDescriptor.children,\n            (definition) => definition.type === RX_RECORD_GRID.components.filter\n          ),\n          (presetFilter: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n            fieldId: presetFilter.data.fieldId,\n            value: presetFilter.data.value,\n            guid: presetFilter.guid,\n            $DISPLAYVALUE$: presetFilter.data.$DISPLAYVALUE$\n          })\n        ),\n        title: filterPresetsDescriptor.data.title,\n        guid: filterPresetsDescriptor.guid\n      })\n    ).filter((filterPreset) => filterPreset.recordGridFilters?.length > 0);\n  }\n\n  private getActionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): IViewComponentDesignData<IViewActionDesignProperties>[] {\n    return _map(\n      _filter(\n        componentDesignData.children,\n        (definition) => definition.type === RxViewComponentType.Action\n      ) as IViewComponentDesignData<IViewActionDesignProperties>[],\n      (columnAction) => ({\n        ...columnAction,\n        data: { ...columnAction.data }\n      })\n    );\n  }\n\n  private getNamedFilterOptionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): INamedFilterOptionDesignData[] {\n    return componentDesignData.children\n      .filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset)\n      .map((namedFilterOptionData: IViewComponentDesignData<IRecordGridColumnNamedFilterOptionDesign>) => ({\n        ...namedFilterOptionData,\n        data: { ...namedFilterOptionData.data }\n      }));\n  }\n\n  getDefaultColumns(recordDefinition: IRecordDefinition): IRecordGridDesignInspectorColumnConfig[] {\n    let columns: IRecordGridDesignInspectorColumnConfig[] = [];\n\n    if (recordDefinition) {\n      const fieldDefinitions = recordDefinition.fieldDefinitions;\n      const coreFieldIds = RX_RECORD_DEFINITION.coreFieldIds;\n\n      columns = [\n        {\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.displayId).name,\n          fieldId: String(coreFieldIds.displayId),\n          searchable: true\n        }\n      ];\n\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType) {\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.modifiedDate).name,\n          fieldId: String(coreFieldIds.modifiedDate),\n          searchable: false\n        });\n\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.description).name,\n          fieldId: String(coreFieldIds.description),\n          searchable: true\n        });\n      }\n\n      const defaultValues = reduce(\n        RX_RECORD_GRID.columnProperties,\n        (result, columnProperty) => {\n          result[columnProperty.name] = columnProperty.defaultValue;\n\n          return result;\n        },\n        {} as IPlainObject\n      );\n\n      forEach(columns, (column, index) =>\n        defaults(column, defaultValues, {\n          index,\n          guid: this.rxGuidService.generate()\n        } as IRecordGridDesignInspectorColumnConfig)\n      );\n    }\n\n    return columns;\n  }\n\n  getInitialSortColumnModel(columns: IRecordGridDesignInspectorColumnConfig[]): IRecordGridSortEditorModel {\n    const selectedSortColumn = find(columns, (column) => isObject(column.sortable));\n\n    return selectedSortColumn\n      ? {\n          direction: (selectedSortColumn.sortable as IRecordGridSortableObject).direction,\n          fieldId: selectedSortColumn.fieldId\n        }\n      : null;\n  }\n\n  getInspectorColumnsFromDesignData(\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): IRecordGridDesignInspectorColumnConfig[] {\n    return columnsDesignModel.map((columnDescriptor): IRecordGridDesignInspectorColumnConfig => {\n      const column = columnDescriptor.data;\n\n      return {\n        ...pick(column, [\n          'alignment',\n          'fieldId',\n          'filterType',\n          'searchable',\n          'title',\n          'cellDisplayProperties',\n          'width',\n          'typeaheadKeystrokeCount',\n          'additionalQueryCriteria'\n        ]),\n        actions: this.getActionsFromComponent(columnDescriptor),\n        namedFilterOptions: this.getNamedFilterOptionsFromComponent(columnDescriptor),\n        guid: columnDescriptor.guid,\n        filterable:\n          this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable),\n        sortable:\n          (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable as boolean) as any) ||\n          isUndefined(column.sortable),\n        visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n        wrapText: this.rxRecordGridConfigUtilsService.getBooleanValue(column.wrapText),\n        index: Number(column.index)\n      };\n    });\n  }\n\n  getComponentProperties(componentDesignProperties: IRecordGridDesignProperties): IRecordGridProperties {\n    return {\n      bordered: componentDesignProperties.bordered ?? true,\n      expandable: componentDesignProperties.expandable,\n      name: componentDesignProperties.name,\n      recordDefinitionName: componentDesignProperties.recordDefinitionName,\n      showDataForAllLocales: componentDesignProperties.showDataForAllLocales,\n      associationDefinitionName: componentDesignProperties.associationDefinitionName,\n      associatedRecordNodeSide: componentDesignProperties.associatedRecordNodeSide,\n      associatedRecordId: componentDesignProperties.associatedRecordId,\n      associatedRoleName: componentDesignProperties.associatedRoleName,\n      filterExpression: componentDesignProperties.filterExpression,\n      filters: isObject(componentDesignProperties.filters)\n        ? componentDesignProperties.filters.filtersJson\n        : componentDesignProperties.filters,\n      defaultFilterPreset: this.getDefaultFilterPreset(componentDesignProperties),\n      cardLayoutWidth: componentDesignProperties.cardLayoutWidth,\n      enableFiltering: componentDesignProperties.enableFiltering,\n      requiredFilters: componentDesignProperties.requiredFilters ?? 0,\n      getDataForHiddenColumns: componentDesignProperties.getDataForHiddenColumns ?? true,\n      enableFilterPresets: componentDesignProperties.enableFilterPresets,\n      enableRowSelection: componentDesignProperties.enableRowSelection,\n      styles: componentDesignProperties.styles,\n      striped: !!componentDesignProperties.striped,\n      viewPresetSelector: componentDesignProperties.viewPresetSelector,\n      [RX_AVAILABLE_ON_DEVICES_PROP_NAME]: componentDesignProperties[RX_AVAILABLE_ON_DEVICES_PROP_NAME]\n    };\n  }\n\n  private getDefaultFilterPreset(componentDesignProperties: IRecordGridDesignProperties): string {\n    if (componentDesignProperties.defaultFilterPreset && componentDesignProperties.filterPresets) {\n      return componentDesignProperties.filterPresets.some(\n        (filterPreset) => filterPreset.guid === componentDesignProperties.defaultFilterPreset\n      )\n        ? componentDesignProperties.defaultFilterPreset\n        : null;\n    } else if (componentDesignProperties.defaultFilterPreset && !componentDesignProperties.filterPresets) {\n      return componentDesignProperties.defaultFilterPreset;\n    }\n\n    return null;\n  }\n\n  getComponentDesignProperties(\n    componentProperties: IRecordGridProperties,\n    initialComponentProperties: IRecordGridDesignProperties,\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    basicRecordGridFilters: IRxRecordGridFilter[],\n    filterPresets: IRecordGridPredefinedFilterPreset[]\n  ): IRecordGridDesignProperties {\n    const columns = this.getInspectorColumnsFromDesignData(columnsDesignModel);\n\n    componentProperties = {\n      ...initialComponentProperties,\n      ...componentProperties\n    };\n\n    return {\n      ...componentProperties,\n      mode: componentProperties.associationDefinitionName\n        ? RecordGridDesignDefinitionMode.Association\n        : RecordGridDesignDefinitionMode.Record,\n      filters: {\n        basicFilters: basicRecordGridFilters,\n        filtersJson: componentProperties.filters\n      },\n      filterMode: componentProperties.filterExpression ? RecordGridFilterMode.Expression : RecordGridFilterMode.Basic,\n      filterPresets,\n      initialSortColumn: this.getInitialSortColumnModel(columns),\n      columns\n    };\n  }\n\n  getActionButtonDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IActionButtonProperties>[] {\n    return definitions.filter((definition) => definition.type === RxViewComponentType.ActionButton);\n  }\n\n  getGridViewPresetsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IGridViewPresetProperties>[] {\n    return definitions.filter(\n      (definition) => definition.type === RX_RECORD_GRID.components.viewPreset\n    ) as IViewComponentDesignData<IGridViewPresetProperties>[];\n  }\n\n  getBasicRecordGridFiltersFromChildData(definitions: IViewComponentDesignData[]): IRxRecordGridFilter[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filter),\n      (basicFilterDescriptor: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n        fieldId: basicFilterDescriptor.data.fieldId,\n        value: basicFilterDescriptor.data.value,\n        guid: basicFilterDescriptor.guid,\n        $DISPLAYVALUE$: basicFilterDescriptor.data.$DISPLAYVALUE$\n      })\n    );\n  }\n\n  getRowActionButtonPayloads(rowActions: IRowAction[]): IViewComponentDesignSetPayload<IActionButtonProperties>[] {\n    return rowActions.map((rowAction) => ({\n      type: RxViewComponentType.ActionButton,\n      guid: rowAction.guid,\n      data: omit(rowAction, 'actions', 'guid'),\n      outletName: RX_RECORD_GRID.rowActionsOutletName,\n      children: this.getColumnActionComponentPayloads(rowAction.actions)\n    }));\n  }\n\n  getInspector(\n    model: IRecordGridDesignProperties,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const hasRecordDefinition = Boolean(model.recordDefinitionName && recordDefinition);\n\n    const generalControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'name',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Name',\n          tooltip: new Tooltip('Enter a name to uniquely identify the Record grid.')\n        } as ITextFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          required: false,\n          label: 'Mode',\n          items: [\n            {\n              value: RecordGridDesignDefinitionMode.Record,\n              name: 'Record'\n            },\n            {\n              value: RecordGridDesignDefinitionMode.Association,\n              name: 'Association'\n            }\n          ]\n        } as IGroupButtonFormControlOptions\n      },\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? 'Record definition to show'\n              : 'Record definition name',\n          definitionType:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? RxDefinitionPickerType.RegularDataRecord\n              : RxDefinitionPickerType.Record,\n          required: true,\n\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (!isEmpty(model.columns) && Boolean(oldValue)) {\n              return this.rxModalService.confirm({\n                title: 'Warning',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message:\n                  'Initial column sort, initial filters, and added grid columns will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    const presentationControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'cardLayoutWidth',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Card layout width',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.cardLayoutWidthOptions,\n          emptyOption: true,\n          tooltip: new Tooltip('The width of the Record grid view component at which it will switch to card layout.')\n        } as ISelectFormControlOptions\n      },\n      {\n        name: 'initialSortColumn',\n        component: RecordGridSortEditorControlComponent,\n        options: {\n          label: 'Initial column sort',\n          gridColumns: sortBy(model.columns, 'title'),\n          recordDefinition\n        } as IRecordGridSortEditorControlOptions\n      },\n      {\n        name: 'enableRowSelection',\n        component: OptionalSelectFormControlComponent,\n        options: {\n          label: 'Enable row selection',\n          options: [\n            {\n              id: RX_RECORD_GRID.selectionTypes.multiple,\n              name: 'Multiple rows'\n            },\n            {\n              id: RX_RECORD_GRID.selectionTypes.single,\n              name: 'Single row'\n            }\n          ]\n        } as IOptionalSelectFormControlOptions\n      },\n      {\n        name: 'expandable',\n        component: SwitchFormControlComponent,\n        hidden: !this.rxFeatureService.isFeatureEnabled('DRD21-44922'),\n        options: {\n          label: 'Enable grid width expansion',\n          tooltip: new Tooltip(\n            'If enabled, the grid will expand in width to accommodate wider columns. If one or more columns extend beyond the right border of the grid, a horizontal scroll bar will appear.<br>Column width will be converted to pixels if grid width expansion mode is enabled.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'bordered',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show border lines'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'striped',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show striped rows'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'showDataForAllLocales',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show data for all locales',\n          tooltip: new Tooltip(\n            'If enabled, data for all locales will be displayed in the grid at runtime. If disabled, only data for current locale will be displayed.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      getAvailableOnDevicesInspectorConfig(),\n      getStylesFieldInspectorConfig()\n    ];\n\n    if (model.mode === RecordGridDesignDefinitionMode.Association) {\n      if (hasRecordDefinition) {\n        generalControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Association to use',\n            options: _map(\n              recordAssociationDefinitions,\n              (associationDescriptor): ISelectOption => ({\n                id: associationDescriptor.name,\n                name: this.rxDefinitionNameService.getDisplayName(associationDescriptor.name)\n              })\n            ),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      const selectedAssociationDefinition = find(\n        recordAssociationDefinitions,\n        (definition) => definition.name === model.associationDefinitionName\n      );\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.nodeAId === selectedAssociationDefinition.nodeBId\n      ) {\n        generalControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Associated record node side',\n            options: [\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                name: selectedAssociationDefinition.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                name: selectedAssociationDefinition.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ],\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      generalControls.push({\n        name: 'associatedRecordId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Associated record ID',\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value\n      ) {\n        generalControls.push({\n          name: 'associatedRoleName',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Associated role name'\n          } as IExpressionInspectorControlOptions\n        });\n      }\n    }\n\n    if (hasRecordDefinition) {\n      generalControls.push({\n        name: 'columns',\n        component: RecordGridColumnEditorControlComponent,\n        options: {\n          recordDefinition\n        } as IRecordGridColumnEditorControlOptions\n      });\n\n      generalControls.push({\n        name: 'getDataForHiddenColumns',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Get data for hidden columns',\n          tooltip: new Tooltip(\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.record-grid.get-data-for-hidden-columns.tooltip'\n            )\n          )\n        } as ISwitcherFormControlOptions\n      });\n\n      generalControls.push({\n        widgetName: 'rowActions',\n        component: RxRecordGridRowActionEditorWidgetComponent\n      });\n    }\n\n    const filtersControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'enableFiltering',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable filtering'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'requiredFilters',\n        component: SelectFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Required number of filters',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.numberOfFiltersOptions,\n          emptyOption: false,\n          tooltip: new Tooltip(\n            'Data will be displayed in the grid only if a) the number of applied filters is greater than or equal to the required number of filters, or b) a search is performed.'\n          )\n        } as ISelectFormControlOptions\n      }\n    ];\n\n    if (hasRecordDefinition) {\n      filtersControls.push({\n        name: 'filterMode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          label: 'Initial filters',\n          items: [\n            {\n              name: 'Basic',\n              value: RecordGridFilterMode.Basic\n            },\n            {\n              name: 'Expression',\n              value: RecordGridFilterMode.Expression\n            }\n          ],\n          tooltip: new Tooltip(\n            'Select the records that should be displayed on the deployed application UI. Application users can add filters in the deployed application.'\n          ),\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (\n              (newValue === RecordGridFilterMode.Expression && model.filters.filtersJson) ||\n              (newValue === RecordGridFilterMode.Basic && model.filterExpression)\n            ) {\n              return this.rxModalService.confirm({\n                title: 'Change filter type',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: 'Current filter will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IGroupButtonFormControlOptions\n      });\n\n      if (model.filterMode === RecordGridFilterMode.Basic) {\n        filtersControls.push({\n          name: 'filters',\n          component: RecordGridFilterSelectControlComponent,\n          options: {\n            primaryRecordDefinition: recordDefinition\n          } as IRecordGridFilterSelectControlOptions\n        });\n      } else {\n        filtersControls.push({\n          name: 'filterExpression',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Initial filters',\n            isLabelHidden: true\n          } as IExpressionInspectorControlOptions\n        });\n      }\n\n      filtersControls.push({\n        name: 'enableFilterPresets',\n        component: SwitchFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Enable filter presets'\n        } as ISwitcherFormControlOptions\n      });\n\n      filtersControls.push({\n        name: 'filterPresets',\n        component: RecordGridFilterPresetEditorControlComponent,\n        options: {\n          label: 'Filter presets',\n          tooltip: new Tooltip('Predefine sets of record grid filters users can apply.'),\n          primaryRecordDefinition: recordDefinition,\n          columns: model.columns.filter((column) => column.filterable)\n        } as IRecordGridFilterPresetEditorControlOptions\n      });\n    }\n\n    if (!isEmpty(model.filterPresets)) {\n      filtersControls.push({\n        name: 'defaultFilterPreset',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Default filter preset',\n          tooltip: new Tooltip('Select a filter preset to be applied when a user opens this view for the first time.'),\n          options: _map(\n            model.filterPresets,\n            (filterPreset): ISelectOption => ({ id: filterPreset.guid, name: filterPreset.title })\n          ),\n          emptyOption: true\n        } as ISelectFormControlOptions\n      });\n    }\n\n    const inspectorSectionConfigs = [\n      {\n        label: 'General',\n        controls: generalControls\n      },\n      {\n        label: 'Filters',\n        controls: filtersControls\n      },\n      {\n        label: 'Presentation',\n        controls: presentationControls\n      },\n      {\n        label: 'View presets',\n        controls: [\n          {\n            component: RecordGridViewPresetsWidgetComponent,\n            options: {\n              recordDefinition: recordDefinition\n            } as IRecordGridViewPresetsWidgetOptions\n          }\n        ]\n      }\n    ];\n\n    return { inspectorSectionConfigs };\n  }\n\n  getColumnDataDictionaryBranch(\n    recordGridGuid: string,\n    componentDescriptorName: string,\n    componentName$: Observable<string>,\n    columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]>,\n    recordDefinition$: Observable<IRecordDefinition>,\n    associationDefinitionDisplayName$: Observable<string>\n  ): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    const columnDataDictionaryBranch$ = combineLatest([columnComponents$, recordDefinition$]).pipe(\n      switchMap(([columnComponents, recordDefinition]) =>\n        recordDefinition\n          ? this.getColumnsDataDictionaryBuilder(recordGridGuid, columnComponents, recordDefinition).pipe(\n              map(\n                (buildColumnDataDictionary): IViewComponentDesignCommonDataDictionaryBranch => ({\n                  label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                  expression: `\\${view.components.${recordGridGuid}.api}`,\n                  children: [\n                    {\n                      label: 'First selected row',\n                      expression: `\\${view.components.${recordGridGuid}.firstSelectedRow}`,\n                      children: buildColumnDataDictionary('firstSelectedRow')\n                    },\n                    {\n                      label: 'Is user allowed to delete records',\n                      expression: `\\${view.components.${recordGridGuid}.isUserAllowedToDeleteRecords}`\n                    },\n                    {\n                      label: 'Last action row',\n                      expression: `\\${view.components.${recordGridGuid}.clickableRow}`,\n                      children: buildColumnDataDictionary('clickableRow')\n                    },\n                    {\n                      label: 'Selected rows',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRows}`,\n                      children: buildColumnDataDictionary('fieldValuesByFieldId')\n                    },\n                    {\n                      label: 'Selected row count',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRowCount}`\n                    },\n                    {\n                      label: 'Total row count',\n                      expression: `\\${view.components.${recordGridGuid}.totalRowCount}`\n                    },\n                    {\n                      label: 'Query expression',\n                      expression: `\\${view.components.${recordGridGuid}.queryExpression}`\n                    },\n                    {\n                      label: 'Last refresh time',\n                      expression: `\\${view.components.${recordGridGuid}.lastRefreshTime}`\n                    }\n                  ]\n                })\n              ),\n              take(1)\n            )\n          : of(null)\n      )\n    );\n\n    return combineLatest([componentName$, columnDataDictionaryBranch$, associationDefinitionDisplayName$]).pipe(\n      map(([label, dataDictionaryBranch, associationDefinitionDisplayName]) =>\n        dataDictionaryBranch\n          ? ({\n              ...dataDictionaryBranch,\n              label: this.getComponentName(\n                componentDescriptorName,\n                dataDictionaryBranch.label,\n                associationDefinitionDisplayName,\n                label\n              )\n            } as IViewComponentDesignCommonDataDictionaryBranch)\n          : null\n      )\n    );\n  }\n\n  private getColumnsDataDictionaryBuilder(\n    recordGridGuid: string,\n    columnComponents: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    recordDefinition: IRecordDefinition\n  ): Observable<ColumnsDataDictionaryBuilder> {\n    return (\n      columnComponents.length\n        ? forkJoin(\n            columnComponents.map((component) =>\n              this.rxRecordGridUtilsService.getFieldDefinition(component.data.fieldId, recordDefinition).pipe(\n                filter((fieldDefinition) => !!fieldDefinition),\n                map((fieldDefinition) =>\n                  this.getColumnDataDictionaryBranchBuilder(recordGridGuid, component, fieldDefinition)\n                )\n              )\n            ) as Observable<ColumnDataDictionaryBranchBuilder>[]\n          )\n        : of([])\n    ).pipe(\n      map(\n        (builders) => (gridPropertyName: string) =>\n          builders.map((buildColumnDataDictionaryBranch) =>\n            buildColumnDataDictionaryBranch.call(this, gridPropertyName)\n          )\n      )\n    );\n  }\n\n  private getColumnDataDictionaryBranchBuilder(\n    recordGridGuid: string,\n    columnComponent: IViewComponentDesignData<IRecordGridDesignColumnData>,\n    fieldDefinition: IFieldDefinition\n  ): ColumnDataDictionaryBranchBuilder {\n    const selectionList =\n      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n        ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n            label: optionName,\n            expression: `\\${view.components.${recordGridGuid}.recordDefinition.fieldDefinitionsById[${columnComponent.data.fieldId}].optionsById[${optionValue}].id}`\n          }))\n        : undefined;\n\n    return (propertyName: string): IViewComponentDesignCommonDataDictionaryBranch => ({\n      label: columnComponent.data.title?.trim() || `[${fieldDefinition.name}]`,\n      expression: `\\${view.components.${recordGridGuid}.${propertyName}.${columnComponent.data.fieldId}}`,\n      autocompleteOptions: selectionList,\n      children:\n        fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n          ? [\n              {\n                label: `${columnComponent.data.title} (Option name)`,\n                expression: `\\${view.components.${recordGridGuid}.${propertyName}.selectionFieldOptionNamesById.${columnComponent.data.fieldId}}`\n              },\n              {\n                label: 'Options',\n                children: selectionList\n              }\n            ]\n          : null\n    });\n  }\n\n  getComponentName(\n    componentDescriptorName: string,\n    recordDefinitionDisplayName?: string,\n    associationDefinitionDisplayName?: string,\n    name?: string\n  ): string {\n    const additionalLabels = [recordDefinitionDisplayName, associationDefinitionDisplayName, name].filter(Boolean);\n\n    return additionalLabels.length\n      ? `${componentDescriptorName} (${additionalLabels.join(': ')})`\n      : componentDescriptorName;\n  }\n\n  getGridViewPresetPayload(\n    viewPresetGuid: string,\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload {\n    return {\n      type: RX_RECORD_GRID.components.viewPreset,\n      guid: this.rxGuidService.generate(),\n      data: {\n        viewPresetGuid,\n        filters: null\n      },\n      children: columns.map((column) => this.getColumnPresetPayload(column))\n    };\n  }\n\n  getColumnPresetPayload(\n    column: IRecordGridDesignInspectorColumnConfig\n  ): IViewComponentDesignSetPayload<IGridViewColumnProperties> {\n    return {\n      type: RX_RECORD_GRID.components.columnViewPreset,\n      data: {\n        fieldId: column.fieldId,\n        index: column.index,\n        visible: column.visible,\n        sortable: isObject(column.sortable) ? column.sortable : null,\n        width: column.width\n      }\n    };\n  }\n\n  getPresetsList(guid: string): Observable<IPresetItem[]> {\n    return guid\n      ? this.viewDesignerFacade.getChildComponents<IViewPresetProperties>(guid).pipe(\n          map((res) => res.sort((a, b) => a.data.index - b.data.index)),\n          map((res) => res.map((item) => ({ guid: item.guid, name: item.data.label }))),\n          debounceTime(50) // used to let store be `stabilized` when indexes are updating for each preset\n        )\n      : of([]);\n  }\n}\n"]}