{"version":3,"file":"runtime-view.model.js","sourceRoot":"","sources":["../../../../../../libs/platform/view/runtime/runtime-view.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  RxBundleService,\n  RxCurrentUserService,\n  RxGlobalCacheService,\n  RxLogService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxJsonParserService, RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  IComponentPropertyDescriptor,\n  IContainerViewComponentDefinition,\n  IExpressionEvaluator,\n  IRuntimeComponentApiCallResult,\n  IViewActionParamDescriptor,\n  IViewComponentDefinition,\n  IViewComponentDefinitionWithParent,\n  IViewComponentDescriptor,\n  IViewDefinition,\n  IViewInputParams,\n  IViewPresetsByViewComponentGuid,\n  RxExpressionEvaluatorService,\n  RxViewActionRegistryService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService,\n  RxViewDefinitionService,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport {\n  every,\n  find,\n  forEach,\n  forIn,\n  forOwn,\n  get,\n  groupBy,\n  has,\n  includes,\n  intersection,\n  isEmpty,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  keys,\n  map as _map,\n  set,\n  some,\n  sortBy,\n  toNumber\n} from 'lodash';\nimport {\n  asyncScheduler,\n  BehaviorSubject,\n  combineLatest,\n  EMPTY,\n  from,\n  merge,\n  Observable,\n  of,\n  ReplaySubject,\n  Subject,\n  throwError\n} from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  distinct,\n  filter,\n  map,\n  reduce,\n  switchMap,\n  switchMapTo,\n  take,\n  tap\n} from 'rxjs/operators';\nimport { ComponentExpression } from './component/component-expression.class';\nimport { ViewComponentEventManager } from './event-manager/view-component-event-manager.class';\nimport { VIEW_COMPONENT_DEFAULT_EVENT_NAME } from './event-manager/view-component-event-manager.constant';\nimport { IExpressionContext } from './interfaces/expression-context.interface';\nimport { IRuntimeViewApi } from './interfaces/runtime-view-api.interface';\nimport { IViewComponentActionState } from './interfaces/runtime-view-component-action-state.interface';\nimport { IViewComponentState } from './interfaces/runtime-view-component-state.interface';\nimport { IRuntimeViewConfiguration } from './interfaces/runtime-view-configuration.interface';\nimport { IRuntimeViewOutputParameter } from './interfaces/runtime-view-output-parameter.interface';\nimport { IViewComponentPropertyChanged } from './interfaces/view-component-property-changed.interface';\nimport { IViewComponentRuntimeState } from './interfaces/view-component-runtime-state.interface';\nimport { RxRuntimeViewUtilsService } from './runtime-view-utils.service';\nimport { RxViewDefinitionAdapterService } from './view-definition-adapter.service';\n\n@Injectable()\nexport class RuntimeViewModel {\n  // public api which available for runtime view client\n  api: IRuntimeViewApi = {\n    save: this.save.bind(this),\n    close: this.close.bind(this),\n    cancel: this.cancel.bind(this),\n    refresh: this.refresh.bind(this),\n    canClose: this.canClose.bind(this),\n    applyViewPreset: this.applyViewPreset.bind(this),\n    deleteViewPreset: this.deleteViewPreset.bind(this),\n    discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n    saveViewPreset: this.saveViewPreset.bind(this)\n  };\n\n  private saveSubject: Subject<void> = new Subject();\n  private closeSubject: Subject<IRuntimeViewOutputParameter> = new Subject();\n  private cancelSubject: Subject<void> = new Subject();\n\n  save$: Observable<void> = this.saveSubject.asObservable();\n  close$: Observable<IRuntimeViewOutputParameter> = this.closeSubject.asObservable();\n  cancel$: Observable<void> = this.cancelSubject.asObservable();\n\n  viewDefinition: IViewDefinition;\n\n  isUserInteractionDetected: boolean;\n\n  private dependentOnViewIsValidPropViewComponentGuids: string[];\n\n  viewComponentStates: Map<string, IViewComponentState> = new Map();\n\n  private configuration: IRuntimeViewConfiguration;\n\n  // store all components state, needed for component expression re-evaluation\n  private evaluationData: IExpressionContext = {\n    view: {\n      api: this.api,\n      components: {},\n      inputParams: {},\n      isValid: false\n    },\n    keywords: {\n      user: this.rxCurrentUserService.getName(),\n      newLine: '\\n'\n    }\n  };\n\n  constructor(\n    private rxBundleService: RxBundleService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewDefinitionAdapterService: RxViewDefinitionAdapterService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxViewDefinitionService: RxViewDefinitionService,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxNotificationService: RxNotificationService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLogService: RxLogService,\n    private viewComponentEventManager: ViewComponentEventManager,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  init(configuration: IRuntimeViewConfiguration): Observable<never> {\n    this.configuration = configuration;\n\n    this.clear();\n\n    const viewDefinition$: Observable<IViewDefinition> = isString(configuration.viewDefinitionName)\n      ? this.rxViewDefinitionCacheService.getViewDefinition(configuration.viewDefinitionName)\n      : of(configuration.viewDefinitionName);\n\n    return viewDefinition$.pipe(\n      switchMap((viewDefinition) => {\n        const viewComponents = this.rxViewDefinitionParserService.getComponents(viewDefinition, true);\n\n        const ownerBundleIds: Observable<string>[] = viewComponents.map(\n          (viewComponent: IViewComponentDefinitionWithParent) =>\n            viewComponent.componentDefinition.type === RxViewComponentType.Action\n              ? this.rxViewActionRegistryService.getActionOwnerBundleId(\n                  viewComponent.componentDefinition.propertiesByName.name\n                )\n              : this.rxViewComponentRegistryService.getComponentOwnerBundleId(viewComponent.componentDefinition.type)\n        );\n\n        return merge(...ownerBundleIds).pipe(\n          filter(Boolean),\n          distinct(),\n          reduce((acc, bundleId) => {\n            acc.push(bundleId);\n\n            return acc;\n          }, []),\n          switchMap((bundleIds) =>\n            bundleIds.length\n              ? this.rxBundleService.loadBundles(bundleIds, true).pipe(map(() => viewDefinition))\n              : of(viewDefinition)\n          ),\n          switchMap((viewDefinition: IViewDefinition) =>\n            this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(map(() => viewDefinition))\n          )\n        );\n      }),\n      switchMap((viewDefinition: IViewDefinition) => this.processViewDefinition(viewDefinition))\n    );\n  }\n\n  clear(): void {\n    this.viewComponentStates.clear();\n\n    this.evaluationData.view.components = {};\n    this.evaluationData.view.inputParams = {};\n  }\n\n  save(closeViewAfterSave: boolean = false): Observable<never> {\n    return this.callRuntimeComponentsApi('save', closeViewAfterSave).pipe(\n      tap({\n        complete: () => this.saveSubject.next()\n      })\n    );\n  }\n\n  close(): Observable<IRuntimeViewOutputParameter> {\n    const viewOutputParams = this.evaluateViewOutputParams();\n\n    this.closeSubject.next(viewOutputParams);\n\n    return of(viewOutputParams);\n  }\n\n  cancel(skipDirtyCheck?: boolean): Observable<never> {\n    if (skipDirtyCheck) {\n      this.cancelSubject.next();\n\n      return EMPTY;\n    } else {\n      return this.isDirtyView().pipe(\n        switchMap((isDirty) => (isDirty ? this.rxUtilityModalsService.confirmUnsavedChanges() : of(true))),\n        tap((canClose) => {\n          if (canClose) {\n            this.cancelSubject.next();\n          }\n        }),\n        switchMap((canClose) => {\n          return canClose ? EMPTY : throwError(null);\n        })\n      );\n    }\n  }\n\n  refresh(): Observable<never> {\n    return this.callRuntimeComponentsApi('refresh');\n  }\n\n  canClose(): boolean {\n    let canClose = true;\n\n    this.isDirtyView().subscribe((isDirty) => (canClose = !isDirty));\n\n    return canClose;\n  }\n\n  applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.callRuntimeComponentsApi(\n      'applyViewPreset',\n      viewPresetSelectorGuid,\n      viewPresetGuid,\n      sharedViewPresets\n    ).pipe(switchMap(() => EMPTY));\n  }\n\n  deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.callRuntimeComponentsApi('deleteViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n\n  discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.callRuntimeComponentsApi('discardViewPresetChanges', viewPresetGuid, sharedViewPresets).pipe(\n      switchMap(() => EMPTY)\n    );\n  }\n\n  saveViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.callRuntimeComponentsApi('saveViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n\n  shareViewPreset(viewPresetSelectorGuid: string): Observable<IViewPresetsByViewComponentGuid> {\n    return this.callRuntimeComponentsApi<IRuntimeComponentApiCallResult[]>(\n      'shareViewPreset',\n      viewPresetSelectorGuid\n    ).pipe(\n      defaultIfEmpty([]),\n      map((data: IRuntimeComponentApiCallResult[]) =>\n        data\n          .filter((item) => Boolean(item?.data))\n          .reduce((result, item) => {\n            result[item.guid] = item.data;\n            return result;\n          }, {})\n      )\n    );\n  }\n\n  // launch view component actions for particular event\n  triggerViewActions(componentGuid: string, viewActionTriggerEventName: string): Promise<void> {\n    let actionsResult = Promise.resolve();\n\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n\n    if (viewComponentState) {\n      const eventState = viewComponentState.eventStates[viewActionTriggerEventName];\n\n      if (eventState) {\n        const actionStates = eventState.map((actionState) => ({\n          guid: actionState.guid,\n          name: actionState.name,\n          parameters: actionState.config\n        }));\n\n        // execute view component actions for particular event\n        actionsResult = this.viewComponentEventManager.executeActions(actionStates, (actionState, result) => {\n          // hook which is called after each action execution\n          // update action shared state and re-evaluate dependent action view component\n          this.onViewComponentActionOutputChanged(componentGuid, actionState.guid, result);\n        });\n      } else {\n        this.rxLogService.warning(\n          `Cannot trigger view actions. View Action Trigger Event ${viewActionTriggerEventName} not found.`\n        );\n      }\n    } else {\n      this.rxLogService.warning(`Cannot trigger view actions. View Component ${componentGuid} not found.`);\n    }\n\n    return actionsResult;\n  }\n\n  // hook which is called when view component triggers \"property changed\" event\n  onViewComponentPropertyChanged({ guid, propertyName, newValue }: IViewComponentPropertyChanged): void {\n    const viewComponentState = this.viewComponentStates.get(guid);\n\n    viewComponentState.publicState[propertyName] = newValue;\n\n    this.updateEvaluationData(viewComponentState);\n\n    // update config if changed property exist in component properties descriptor\n    if (propertyName !== 'api' && some(viewComponentState.componentDescriptor.properties, { name: propertyName })) {\n      this.updateComponentConfigProperty(propertyName, newValue, viewComponentState);\n      this.updateViewComponentConfig(viewComponentState);\n    }\n\n    const dependentViewComponentGuids = viewComponentState.dependentViewComponentsMap.get(propertyName);\n    let dependentViewComponentStates: IViewComponentState[];\n\n    // find all view components which depend on changed view component based on expressions\n    if (dependentViewComponentGuids) {\n      // restore dependent components from the cache\n      dependentViewComponentStates = dependentViewComponentGuids.map((viewComponentGuid) =>\n        this.viewComponentStates.get(viewComponentGuid)\n      );\n    } else {\n      dependentViewComponentStates = this.getDependentViewComponentStates((expression) =>\n        expression.hasDependency(guid, propertyName)\n      );\n\n      // cache dependent view component guids\n      viewComponentState.dependentViewComponentsMap.set(\n        propertyName,\n        dependentViewComponentStates.map((state) => state.guid)\n      );\n    }\n\n    // evaluate expressions for all dependent view components\n    dependentViewComponentStates.forEach((dependentViewComponentState) => {\n      this.evaluateDependentProperties(dependentViewComponentState, guid, propertyName);\n    });\n\n    // update config$ for all dependent view components\n    dependentViewComponentStates\n      .map((dependentViewComponentState) => {\n        // if dependentViewComponentState is data view component\n        // config$ should be updated for nearest parent view component with UI representation\n        // i.e. if rx-record-grid-column is dependent component then rx-record-grid config$ should be update\n        if (dependentViewComponentState.isDataViewComponent) {\n          return this.getParentViewComponent(dependentViewComponentState);\n        } else {\n          return dependentViewComponentState;\n        }\n      })\n      .forEach((dependentViewComponentState) => {\n        this.updateViewComponentConfig(dependentViewComponentState);\n      });\n\n    if (propertyName === 'isValid') {\n      this.triggerViewValidation(newValue);\n    }\n  }\n\n  // ts guard - defines whether componentDescriptor is data view component\n  isDataViewComponentDefinition(componentDescriptor: IViewComponentDescriptor): boolean {\n    return componentDescriptor.configPropertyName !== undefined;\n  }\n\n  getViewInputParameters(): IViewInputParams {\n    return this.configuration.inputParams;\n  }\n\n  private isDirtyView(): Observable<boolean> {\n    // Used a separate observable to handle scenario when callRuntimeComponentsApi observable\n    // will be immediately completed. It can happen when no view components will have 'isDirty' API.\n    const isDirtySubject = new ReplaySubject<boolean>(1);\n    let isDirtyView = false;\n\n    if (this.isUserInteractionDetected) {\n      this.callRuntimeComponentsApi<IRuntimeComponentApiCallResult<boolean>[]>('isDirty')\n        .pipe(tap((result) => (isDirtyView = result.some(({ data }) => data))))\n        .subscribe({\n          complete: () => isDirtySubject.next(isDirtyView)\n        });\n    } else {\n      isDirtySubject.next(isDirtyView);\n    }\n\n    return isDirtySubject.asObservable().pipe(take(1));\n  }\n\n  private triggerViewValidation(isValid): void {\n    if (isValid) {\n      isValid = Array.from(this.viewComponentStates.values())\n        .filter((viewComponent) => has(viewComponent.publicState, 'isValid'))\n        .every((viewComponent) => viewComponent.publicState.isValid);\n    }\n\n    if (this.evaluationData.view.isValid !== isValid) {\n      this.evaluationData.view.isValid = isValid;\n\n      let dependentViewComponentStates;\n\n      if (this.dependentOnViewIsValidPropViewComponentGuids) {\n        dependentViewComponentStates = this.dependentOnViewIsValidPropViewComponentGuids.map((guid) =>\n          this.viewComponentStates.get(guid)\n        );\n      } else {\n        dependentViewComponentStates = this.getDependentViewComponentStates((expression) =>\n          expression.hasViewIsValidToken()\n        );\n\n        this.dependentOnViewIsValidPropViewComponentGuids = dependentViewComponentStates.map((state) => state.guid);\n      }\n\n      dependentViewComponentStates.forEach((viewComponentState) => {\n        this.evaluateComponentExpressions(viewComponentState, (expression) => expression.hasViewIsValidToken());\n      });\n\n      // update view component configs in next javascript event loop, to avoid\n      // 'ExpressionChangedAfterItHasBeenCheckedError' error in components,\n      // dependent on the view isValid property e.g Action button disabled property\n      asyncScheduler.schedule(() => {\n        dependentViewComponentStates.forEach(this.updateViewComponentConfig.bind(this));\n      });\n    }\n  }\n\n  // return nearest parent view component with UI representation\n  private getParentViewComponent(viewComponentState: IViewComponentState): IViewComponentState {\n    let currentViewComponentState = viewComponentState;\n\n    while (currentViewComponentState.isDataViewComponent) {\n      currentViewComponentState = this.viewComponentStates.get(currentViewComponentState.parentViewComponentGuid);\n    }\n\n    return currentViewComponentState;\n  }\n\n  // return all view components which depend on particular expression\n  private getDependentViewComponentStates(\n    expressionFilterFn: (componentExpression: ComponentExpression) => boolean\n  ): IViewComponentState[] {\n    return Array.from(this.viewComponentStates.values()).filter((viewComponentState) => {\n      const isDependentComponentState = some(viewComponentState.expressions, expressionFilterFn);\n\n      const isDependentEventState = some(viewComponentState.eventStates, (eventState) =>\n        some(eventState, (event) => some(event.expressions, expressionFilterFn))\n      );\n\n      return isDependentComponentState || isDependentEventState;\n    });\n  }\n\n  // pass new view component config to the @Component\n  private updateViewComponentConfig(viewComponentState: IViewComponentState): void {\n    // finally update config\n    viewComponentState.config$.next(this.buildComponentConfig(viewComponentState));\n  }\n\n  // build view component config based on configState and child data view component\n  private buildComponentConfig(viewComponentState: IViewComponentState): IViewComponentRuntimeState {\n    const viewComponentConfigState = {\n      ...viewComponentState.configState\n    };\n\n    // build child data component states\n    this.buildComponentChildDataConfig(viewComponentState, viewComponentConfigState);\n\n    return viewComponentConfigState;\n  }\n\n  // recursively build view component config based on data view components\n  private buildComponentChildDataConfig(\n    viewComponentState: IViewComponentState,\n    viewComponentChildConfig: object = {}\n  ): void {\n    // find all child data view components\n    const dataViewComponentChildStates = viewComponentState.childViewComponentGuids\n      .map((viewComponentGuid) => this.viewComponentStates.get(viewComponentGuid))\n      .filter((currentViewComponentState) => Boolean(currentViewComponentState))\n      .filter((currentViewComponentState) => currentViewComponentState.isDataViewComponent);\n\n    // group data view components on config property name\n    const dataViewComponentChildStateGroups = groupBy<IViewComponentState>(\n      dataViewComponentChildStates,\n      (dataViewComponentState) => dataViewComponentState.configPropertyName\n    );\n\n    // store each data view component config under corresponding config property name\n    Object.keys(dataViewComponentChildStateGroups).forEach((configPropertyName) => {\n      viewComponentChildConfig[configPropertyName] = dataViewComponentChildStateGroups[configPropertyName].map(\n        (dataViewComponentStateChild) => {\n          const dataViewComponentChildState = {\n            ...dataViewComponentStateChild.configState\n          };\n\n          // recursively build data view component config\n          this.buildComponentChildDataConfig(dataViewComponentStateChild, dataViewComponentChildState);\n\n          return dataViewComponentChildState;\n        }\n      );\n    });\n  }\n\n  // update action view component shared state\n  // re-evaluate all dependent action view components\n  private onViewComponentActionOutputChanged(componentGuid: string, actionGuid: string, viewActionOutput: any): void {\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n\n    if (viewComponentState) {\n      const actionState = viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].find((currentAction) => {\n        return currentAction.guid === actionGuid;\n      });\n\n      actionState.publicState.output = viewActionOutput;\n\n      this.updateEvaluationData(viewComponentState);\n\n      this.evaluateDependentProperties(viewComponentState, actionGuid, 'output');\n    }\n  }\n\n  private evaluateViewOutputParams(): IRuntimeViewOutputParameter {\n    return this.viewDefinition.outputParams.reduce((result, outputParam) => {\n      result[outputParam.name] = this.rxExpressionEvaluatorService.tryEvaluate(outputParam.source, this.evaluationData);\n\n      return result;\n    }, {});\n  }\n\n  private processViewDefinition(viewDefinition: IViewDefinition): Observable<never> {\n    this.viewDefinition = this.rxObjectUtilsService.cloneDeep(viewDefinition);\n\n    this.rxViewDefinitionAdapterService.preProcessViewDefinition(this.viewDefinition);\n\n    const adapters$ = this.rxRuntimeViewUtilsService.runAdaptersForComponents(this.viewDefinition);\n\n    return combineLatest(adapters$).pipe(\n      switchMapTo(EMPTY),\n      tap({\n        complete: () => {\n          this.rxViewDefinitionAdapterService.postProcessViewDefinition(this.viewDefinition);\n\n          this.rxViewDefinitionParserService\n            .getComponents(this.viewDefinition)\n            .forEach(this.processComponentDefinition.bind(this));\n\n          // evaluate expressions with keyword tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasKeywordTokens()\n            );\n          });\n\n          // evaluate expressions without tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) => !componentExpression.hasTokens());\n          });\n\n          // evaluate expressions with view tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasViewTokens()\n            );\n          });\n\n          // evaluate expressions with component tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasComponentTokens()\n            );\n          });\n\n          // update all component configs\n          this.viewComponentStates.forEach((viewComponentState) => {\n            this.updateViewComponentConfig(viewComponentState);\n          });\n        }\n      })\n    );\n  }\n\n  private processComponentDefinition(componentDefinitionItem: IViewComponentDefinitionWithParent): void {\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      // process root component definition\n      const configuredParamNames = _map(\n        ((<any>componentDefinitionItem.componentDefinition) as IViewDefinition).inputParams,\n        'name'\n      );\n\n      const passedParamNames = keys(this.configuration.inputParams);\n\n      const onlyPositionalParams =\n        passedParamNames.length > 0 && every(passedParamNames, (inputParamName) => /^\\$[0-9]+\\$$/.test(inputParamName));\n\n      if (onlyPositionalParams && intersection(configuredParamNames, passedParamNames).length === 0) {\n        forEach(passedParamNames, (inputParamName) => {\n          const paramIndex = Number(inputParamName.match(/^\\$([0-9]+)\\$$/)[1]);\n\n          const definitionParamName = get(\n            componentDefinitionItem.componentDefinition,\n            `inputParams[${paramIndex}].name`\n          );\n\n          this.evaluationData.view.inputParams[definitionParamName] = this.configuration.inputParams[inputParamName];\n        });\n      } else {\n        forEach(configuredParamNames, (inputParamName) => {\n          this.evaluationData.view.inputParams[inputParamName] = this.configuration.inputParams[inputParamName];\n        });\n      }\n    } else {\n      const componentDefinition = componentDefinitionItem.componentDefinition;\n\n      const viewComponentState = this.buildViewComponentState(componentDefinitionItem);\n\n      if (viewComponentState) {\n        this.viewComponentStates.set(componentDefinition.guid, viewComponentState);\n      }\n    }\n  }\n\n  // generate view component state based on component definition\n  private buildViewComponentState(componentDefinitionItem: IViewComponentDefinitionWithParent): IViewComponentState {\n    const componentDefinition = componentDefinitionItem.componentDefinition;\n    const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n\n    if (componentDescriptor) {\n      const viewComponentState: IViewComponentState = {\n        guid: componentDefinition.guid,\n        type: componentDefinition.type,\n        config$: new BehaviorSubject<IViewComponentRuntimeState>({}),\n        expressions: [],\n        eventStates: {\n          [VIEW_COMPONENT_DEFAULT_EVENT_NAME]: []\n        },\n        configState: {},\n        publicState: {},\n        isDataViewComponent: false,\n        configPropertyName: null,\n        parentViewComponentGuid: componentDefinitionItem.parentComponentDefinition.guid,\n        childViewComponentGuids: [],\n        dependentViewComponentsMap: new Map<string, string[]>(),\n        componentDescriptor\n      };\n\n      if (this.isDataViewComponentDefinition(componentDescriptor)) {\n        viewComponentState.isDataViewComponent = true;\n        viewComponentState.configPropertyName = componentDescriptor.configPropertyName;\n      }\n\n      forOwn(componentDefinition.propertiesByName, (propertyValue, propertyName) => {\n        const viewComponentPropertyDescriptor = find(\n          componentDescriptor.properties,\n          (descriptor) => propertyName === descriptor.name\n        );\n\n        const isExpressionEvaluationEnabled =\n          viewComponentPropertyDescriptor && viewComponentPropertyDescriptor.enableExpressionEvaluation;\n\n        // initialize view component expressions\n        if (isExpressionEvaluationEnabled) {\n          // create expression for property\n          viewComponentState.expressions.push(\n            new ComponentExpression(\n              propertyName,\n              propertyValue,\n              this.rxExpressionEvaluatorService,\n              viewComponentPropertyDescriptor.evaluatorService\n            )\n          );\n        }\n\n        // update view component config state object\n        this.updateComponentConfigProperty(\n          propertyName,\n          isExpressionEvaluationEnabled ? null : propertyValue,\n          viewComponentState\n        );\n      });\n\n      // add initial view component state to evaluationData\n      this.updateEvaluationData(viewComponentState);\n\n      if (this.isContainerComponentDefinition(componentDefinition)) {\n        // set up view component events\n        componentDefinition.componentDefinitions\n          .filter((currentComponentDefinition) => currentComponentDefinition.type === RxViewComponentType.Action)\n          .forEach((actionComponentDefinition) => {\n            const actionState = this.buildViewComponentActionState(actionComponentDefinition);\n\n            if (actionState) {\n              viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].push(actionState);\n            }\n          });\n\n        // sort actions in correct order\n        viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME] = sortBy(\n          viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME],\n          'index'\n        );\n\n        // set up child view component guids\n        viewComponentState.childViewComponentGuids = componentDefinition.componentDefinitions\n          .filter((currentComponentDefinition) => currentComponentDefinition.type !== RxViewComponentType.Action)\n          .map((currentComponentDefinition) => currentComponentDefinition.guid);\n      }\n\n      return viewComponentState;\n    } else if (componentDefinition.type !== RxViewComponentType.Action) {\n      this.rxLogService.warning(\n        `Cannot initialize view component. View Component Descriptor for ${componentDefinition.type} not found.`\n      );\n    }\n  }\n\n  // generate action view component state\n  private buildViewComponentActionState(\n    actionComponentDefinition: IViewComponentDefinition\n  ): IViewComponentActionState {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionComponentDefinition.propertiesByName.name);\n\n    if (actionDescriptor) {\n      const actionState: IViewComponentActionState = {\n        guid: actionComponentDefinition.guid,\n        name: actionComponentDefinition.propertiesByName.name,\n        index: toNumber(actionComponentDefinition.propertiesByName.index) || 0,\n        config: {},\n        publicState: {},\n        expressions: []\n      };\n\n      Object.keys(actionComponentDefinition.propertiesByName || {})\n        .filter((parameterName) => parameterName !== 'name')\n        .map((parameterName) => {\n          const actionPropertyDescriptor = (actionDescriptor.parameters || []).find(\n            (descriptor) => parameterName === descriptor.name\n          );\n\n          const isExpressionEvaluationEnabled =\n            actionPropertyDescriptor && actionPropertyDescriptor.enableExpressionEvaluation;\n\n          // initialize action view component expressions\n          if (isExpressionEvaluationEnabled) {\n            // create expression for property\n            this.initializeActionExpressionForProperty(\n              actionState,\n              actionPropertyDescriptor.evaluatorService,\n              parameterName,\n              actionComponentDefinition.propertiesByName[parameterName]\n            );\n          }\n\n          // add initial action view component state to evaluationData\n          this.updateActionConfigProperty(\n            parameterName,\n            isExpressionEvaluationEnabled ? null : actionComponentDefinition.propertiesByName[parameterName],\n            actionState\n          );\n        });\n\n      return actionState;\n    }\n  }\n\n  private initializeActionExpressionForProperty(\n    actionState: IViewComponentActionState,\n    evaluatorService: IExpressionEvaluator,\n    propertyName: string,\n    propertyValue: any\n  ): void {\n    if (isObject(propertyValue)) {\n      forIn(propertyValue, (value, name) => {\n        this.initializeActionExpressionForProperty(actionState, evaluatorService, `${propertyName}.${name}`, value);\n      });\n    } else {\n      actionState.expressions.push(\n        new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, evaluatorService)\n      );\n    }\n  }\n\n  private callRuntimeComponentsApi<T = never>(methodName: string, ...args): Observable<T> {\n    const resultSubject = new ReplaySubject<T>(1);\n    const errors: Array<Error | HttpErrorResponse | string> = [];\n\n    const apiCallResults = Array.from(this.viewComponentStates.values())\n      .filter((viewComponent) =>\n        Boolean(viewComponent.publicState.api && isFunction(viewComponent.publicState.api[methodName]))\n      )\n      .map((viewComponent) => {\n        let result = viewComponent.publicState.api[methodName].apply(null, args);\n\n        if (result && result.then) {\n          result = from(result);\n        } else if (!(result instanceof Observable)) {\n          result = of(result);\n        }\n\n        return result.pipe(\n          take(1),\n          map((res) => ({\n            guid: viewComponent.guid,\n            data: res\n          })),\n          tap({\n            error: (error) => errors.push(error)\n          }),\n          // catch errors from each view component api call to allow to successfully finish other api calls.\n          catchError(() => EMPTY)\n        );\n      });\n\n    combineLatest<T>(apiCallResults).subscribe({\n      next: (results) => resultSubject.next(results),\n      complete: () => (isEmpty(errors) ? resultSubject.complete() : resultSubject.error(errors))\n    });\n\n    return resultSubject.asObservable();\n  }\n\n  private evaluateComponentExpressions(\n    viewComponent: IViewComponentState,\n    expressionFilterFunc: (componentEx: ComponentExpression) => boolean\n  ): void {\n    // update component expressions\n    viewComponent.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n      this.updateComponentConfigProperty(\n        componentExpression.propertyName,\n        this.evaluateExpression(componentExpression),\n        viewComponent\n      );\n    });\n\n    this.updateEvaluationData(viewComponent);\n\n    // update event expressions\n    Object.keys(viewComponent.eventStates).forEach((eventName) => {\n      viewComponent.eventStates[eventName].forEach((actionState) => {\n        actionState.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n          this.updateActionConfigProperty(\n            componentExpression.propertyName,\n            this.evaluateExpression(componentExpression),\n            actionState\n          );\n\n          this.updateEvaluationData(viewComponent);\n        });\n      });\n    });\n  }\n\n  private evaluateDependentProperties(viewComponent: IViewComponentState, guid: string, propertyName: string): void {\n    this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n      componentExpression.hasDependency(guid, propertyName)\n    );\n  }\n\n  private evaluateExpression(componentExpression: ComponentExpression): any {\n    let evaluatedValue;\n\n    try {\n      evaluatedValue = componentExpression.evaluate(this.evaluationData);\n    } catch (e) {\n      evaluatedValue = null;\n\n      this.rxNotificationService.addErrorMessage(e.message, '');\n    }\n\n    return evaluatedValue;\n  }\n\n  // update view component config property based on property descriptor\n  private updateComponentConfigProperty(\n    propertyName: string,\n    propertyValue: any,\n    viewComponent: IViewComponentState\n  ): void {\n    const viewComponentDescriptor = this.rxViewComponentRegistryService.get(viewComponent.type);\n    const viewComponentPropertyDescriptor: IComponentPropertyDescriptor = find(viewComponentDescriptor.properties, {\n      name: propertyName\n    });\n\n    viewComponent.configState[propertyName] = this.processPropertyValue(propertyValue, viewComponentPropertyDescriptor);\n  }\n\n  // update action view component config property based on property descriptor\n  private updateActionConfigProperty(\n    propertyName: string,\n    propertyValue: any,\n    actionComponent: IViewComponentActionState\n  ): void {\n    const viewActionDescriptor = this.rxViewActionRegistryService.get(actionComponent.name);\n\n    let viewActionParameterDescriptor: IViewActionParamDescriptor = find(viewActionDescriptor.parameters, {\n      name: propertyName\n    });\n\n    if (!viewActionParameterDescriptor && includes(propertyName, '.')) {\n      const primaryPropertyName = propertyName.split('.')[0];\n\n      viewActionParameterDescriptor = find(viewActionDescriptor.parameters, { name: primaryPropertyName });\n    }\n\n    set(actionComponent.config, propertyName, this.processPropertyValue(propertyValue, viewActionParameterDescriptor));\n  }\n\n  // sync component data with expression data\n  private updateEvaluationData(viewComponent: IViewComponentState): void {\n    // update component data\n    this.evaluationData.view.components[viewComponent.guid] = {\n      ...viewComponent.configState,\n      ...viewComponent.publicState\n    };\n\n    // update component actions data\n    Object.keys(viewComponent.eventStates).forEach((eventName) => {\n      viewComponent.eventStates[eventName].forEach((actionState) => {\n        this.evaluationData.view.components[actionState.guid] = actionState.publicState;\n      });\n    });\n  }\n\n  // cast property value to the type defined in the descriptor\n  private processPropertyValue(\n    propertyValue: any,\n    propertyDescriptor: IComponentPropertyDescriptor | IViewActionParamDescriptor\n  ): any {\n    if (propertyDescriptor && propertyDescriptor.type && !isNil(propertyValue)) {\n      // try to cast property value to type defined in component descriptor\n      if (propertyDescriptor.type === ViewComponentPropertyType.Boolean) {\n        if (includes(['0', 'false'], propertyValue)) {\n          propertyValue = false;\n        } else {\n          propertyValue = Boolean(propertyValue);\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.Number) {\n        propertyValue = Number(propertyValue);\n\n        if (Number.isNaN(propertyValue)) {\n          propertyValue = null;\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.String) {\n        propertyValue = String(propertyValue);\n      } else if (\n        [ViewComponentPropertyType.Array, ViewComponentPropertyType.Object].includes(propertyDescriptor.type)\n      ) {\n        propertyValue = this.rxJsonParserService.tryParseJson(propertyValue);\n      }\n    }\n\n    return propertyValue;\n  }\n\n  private isContainerComponentDefinition(\n    componentDefinition: IViewComponentDefinition | IContainerViewComponentDefinition\n  ): componentDefinition is IContainerViewComponentDefinition {\n    return (componentDefinition as IContainerViewComponentDefinition).componentDefinitions !== undefined;\n  }\n}\n"]}