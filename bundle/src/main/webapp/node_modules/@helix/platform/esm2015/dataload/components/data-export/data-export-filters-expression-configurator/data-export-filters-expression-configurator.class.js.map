{"version":3,"file":"data-export-filters-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/dataload/components/data-export/data-export-filters-expression-configurator/data-export-filters-expression-configurator.class.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IDataDictionary,\n  IExpressionConfigurator,\n  RxDefinitionNameService,\n  RxExpressionConfigurator\n} from '@helix/platform/shared/api';\nimport { iif, Observable, of } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IFieldDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { Injector } from '@angular/core';\nimport { IAssociationDefinition, RxAssociationDefinitionCacheService } from '@helix/platform/association/api';\n\nexport class DataExportFiltersExpressionConfigurator\n  extends RxExpressionConfigurator\n  implements IExpressionConfigurator\n{\n  private translateService = this.injector.get(TranslateService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxAssociationDefinitionCacheService = this.injector.get(RxAssociationDefinitionCacheService);\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  commonDataDictionary$: Observable<IDataDictionary> = of([\n    {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      children: [\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-user.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$USER$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$DATE$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-time.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$TIME$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$TIMESTAMP$'\n        }\n      ]\n    }\n  ]);\n\n  geDataDefinitionField(\n    definitionType: 'record' | 'association',\n    recordOrAssociationDefinitionName: string\n  ): Observable<IDataDictionary> {\n    if (recordOrAssociationDefinitionName) {\n      return iif(\n        () => definitionType === 'record',\n        this.rxRecordDefinitionCacheService.getRecordDefinition(recordOrAssociationDefinitionName),\n        this.rxAssociationDefinitionCacheService.getAssociationDefinition(recordOrAssociationDefinitionName).pipe(\n          map((associationDefinitionResponse: IAssociationDefinition) => associationDefinitionResponse.nodeAId),\n          switchMap((fetchedRecordDefinitionName: string) =>\n            this.rxRecordDefinitionCacheService.getRecordDefinition(fetchedRecordDefinitionName)\n          )\n        )\n      ).pipe(\n        withLatestFrom(this.commonDataDictionary$),\n        map(([definitionResponse, commonDataDictionary]) => {\n          return [\n            ...commonDataDictionary,\n            {\n              label: this.rxDefinitionNameService.getDisplayName(definitionResponse.name),\n              children: definitionResponse.fieldDefinitions.map((fieldDefinition: IFieldDefinition) => ({\n                label: fieldDefinition.name,\n                icon: 'd-icon-field_text',\n                expression: `'${fieldDefinition.id}'`\n              }))\n            }\n          ];\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n"]}