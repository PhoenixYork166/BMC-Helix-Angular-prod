{"version":3,"file":"overlay.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/overlay/overlay.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAQ,MAAM,QAAQ,CAAC;AAC3D,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAG3D,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAElD,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;;;;;AAKrC,MAAM,OAAO,gBAAgB;IAG3B,YACU,aAA4B,EAC5B,YAA0B,EAC1B,eAAgC,EAChC,oBAA0C,EAC1C,oBAA0C;QAJ1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,oBAAe,GAAf,eAAe,CAAiB;QAChC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,yBAAoB,GAApB,oBAAoB,CAAsB;IACjD,CAAC;IAEJ,wBAAwB,CAAC,QAAgB;QACvC,OAAO,IAAI,CAAC,oBAAoB;aAC7B,mBAAmB,CAAC,QAAQ,CAAC;aAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC1F,CAAC;IAED,4BAA4B,CAAC,gBAAmC;QAC9D,OAAO,CACL,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC1C,CAAC,CAAC,gBAAgB,CAAC,cAAc,IAAI,IAAI,CAAC,wBAAwB,EAAE,KAAK,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAC7G,CAAC;IACJ,CAAC;IAED,qCAAqC,CAAC,IAAW;QAC/C,MAAM,2BAA2B,GAAG,IAAI,CAAC,2BAA2B,CAAC;QACrE,MAAM,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAEzD,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,2BAA2B,CAAC,EAAE;YACtE,OAAO;SACR;QAED,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAExE,MAAM,kBAAkB,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CACvD,2BAA2B,CAAC,CAAC,CAAC,EAC9B,oCAAoC,CACrC,CAAC;QAEF,IAAI,mBAAmB,EAAE;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,EAAE,cAAc,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAEjF,kGAAkG;YAClG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,EAAE,cAAc,EAAE,qBAAqB,EAAE,CAAC,CAAC;gBACnF,IAAI,CAAC,YAAY,CAAC,KAAK,CACrB,6BAA6B,mBAAmB,6DAA6D,qBAAqB,EAAE,CACrI,CAAC;aACH;SACF;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,EAAE,cAAc,EAAE,qBAAqB,EAAE,CAAC,CAAC;SACpF;IACH,CAAC;IAED,mBAAmB,CAAC,cAAsB,EAAE,oBAA4B;QACtE,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC9D,IAAI,aAAa,GAAG,UAAU,CAAC,cAAc,CAAC,+BAA+B,CAAC;QAE9E,IAAI,qBAAqB,KAAK,cAAc,EAAE;YAC5C,aAAa,GAAG,oBAAoB;gBAClC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,4BAA4B;gBACxD,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,yBAAyB,CAAC;SACzD;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,sBAAsB,CAAC,IAAY,EAAE,UAAuB;QAC1D,IAAI,UAAU,CAAC,cAAc,EAAE;YAC7B,MAAM,iBAAiB,GAAG,UAAU,CAAC,iBAAiB,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;YAEzF,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAC/C,UAAU,CAAC,cAAc,EACzB,iBAAiB,CAAC,oBAAoB,CACvC,CAAC;YAEF,IAAI,gBAAgB,KAAK,UAAU,CAAC,cAAc,CAAC,yBAAyB,EAAE;gBAC5E,OAAO,IAAI,CAAC;aACb;YAED,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAChD;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,gBAAgB,CAAC,QAAgB;QAC/B,OAAO,CACL,IAAI,CAAC,6BAA6B,EAAE;YACpC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE;gBAC7C,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,EAAE,QAAQ,CAAC,CAAC,CACtE,CAAC;IACJ,CAAC;IAED,6BAA6B;QAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC;QAE7C,MAAM,kBAAkB,GAAG;YACzB,GAAG,IAAI,CAAC,2BAA2B;YACnC,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,kCAAkC;SAC1E,CAAC;QAEF,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAE9D,OAAO,IAAI,CAAC,kBAAkB,EAAE,EAAE,cAAc,EAAE,qBAAqB,EAAE,CAAC,CAAC,UAAU,CAAC;IACxF,CAAC;IAED,wBAAwB;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,kBAAkB,CAAC,eAAgC;QACjD,MAAM,cAAc,GAClB,eAAe,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC;QAElH,YAAY,CAAC,OAAO,CAAC,qBAAqB,EAAE,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED,kBAAkB;QAChB,MAAM,cAAc,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC,cAAc,CAAC;QAEtE,OAAO,cAAc,KAAK,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC;IAClH,CAAC;IAEO,+BAA+B,CAAC,YAA2C;QACjF,OAAO,GAAG,CAAC,YAAY,EAAE,+CAA+C,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC;IAEO,wBAAwB;QAC9B,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC;IAC9F,CAAC;IAED,4BAA4B;;QAC1B,OAAO,MAAA,MAAA,IAAI,CAAC,wBAAwB,EAAE,0CAAE,cAAc,mCAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC;IAClH,CAAC;;6GAtIU,gBAAgB;iHAAhB,gBAAgB,cAFf,MAAM;2FAEP,gBAAgB;kBAH5B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { find, get, includes, isNull, pick } from 'lodash';\nimport { RxBundleService } from '../bundle/bundle.service';\nimport { IBundleDescriptor } from '../bundle/bundle.interfaces';\nimport { IDefinition } from '../definition/definition.types';\nimport { RxLogService } from '../logging/log.service';\nimport { RxCurrentUserService } from '../user/current-user.service';\nimport { IUser, IUserOverlayGroupDescriptor, IUserOverlayGroupDescriptorChildren } from '../user/user.interface';\nimport { RX_OVERLAY } from './overlay.constant';\nimport { DevelopmentMode } from './overlay.types';\nimport { Observable } from 'rxjs';\nimport { RxGlobalCacheService } from '../caching/global-cache.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOverlayService {\n  private overlay: IUserOverlayGroupDescriptorChildren;\n\n  constructor(\n    private rxTreeService: RxTreeService,\n    private rxLogService: RxLogService,\n    private rxBundleService: RxBundleService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxGlobalCacheService: RxGlobalCacheService\n  ) {}\n\n  areNewDefinitionsAllowed(bundleId: string): Observable<boolean> {\n    return this.rxGlobalCacheService\n      .getBundleDescriptor(bundleId)\n      .pipe(map((bundleDescriptor) => this.areNewDefinitionsAllowedSync(bundleDescriptor)));\n  }\n\n  areNewDefinitionsAllowedSync(bundleDescriptor: IBundleDescriptor): boolean {\n    return (\n      this.isBundleEditable(bundleDescriptor.id) &&\n      !(bundleDescriptor.platformBundle && this.getCurrentOverlayGroupId() === RX_OVERLAY.overlayGroupIds.overlay)\n    );\n  }\n\n  setCurrentOverlayContextOnSessionInit(user: IUser): void {\n    const userOverlayGroupDescriptors = user.userOverlayGroupDescriptors;\n    const defaultOverlayGroupId = user.defaultOverlayGroupId;\n\n    if (!this.userHasAccessToMultipleOverlays(userOverlayGroupDescriptors)) {\n      return;\n    }\n\n    const savedOverlayGroupId = localStorage.getItem('rx-overlay-group-id');\n\n    const contextDescriptors = this.rxTreeService.flattenTree(\n      userOverlayGroupDescriptors[0],\n      'userOverlayGroupDescriptorChildren'\n    );\n\n    if (savedOverlayGroupId) {\n      this.overlay = find(contextDescriptors, { overlayGroupId: savedOverlayGroupId });\n\n      // use default defaultOverlayGroupId if the saved overlay context is missing in contextDescriptors\n      if (!this.overlay) {\n        this.overlay = find(contextDescriptors, { overlayGroupId: defaultOverlayGroupId });\n        this.rxLogService.debug(\n          `Invalid Overlay Group ID: ${savedOverlayGroupId}. The Overlay Group ID has been set to the default value: ${defaultOverlayGroupId}`\n        );\n      }\n    } else {\n      this.overlay = find(contextDescriptors, { overlayGroupId: defaultOverlayGroupId });\n    }\n  }\n\n  getOverlayOperation(overlayGroupId: string, parentOverlayGroupId: string): string {\n    const currentOverlayGroupId = this.getCurrentOverlayGroupId();\n    let operationType = RX_OVERLAY.operationTypes.notCustomizedInThisOverlayGroup;\n\n    if (currentOverlayGroupId === overlayGroupId) {\n      operationType = parentOverlayGroupId\n        ? RX_OVERLAY.operationTypes.customizedInThisOverlayGroup\n        : RX_OVERLAY.operationTypes.createdInThisOverlayGroup;\n    }\n\n    return operationType;\n  }\n\n  isCustomizationEnabled(type: string, definition: IDefinition): boolean {\n    if (definition.lastUpdateTime) {\n      const overlayDescriptor = definition.overlayDescriptor || { parentOverlayGroupId: null };\n\n      const overlayOperation = this.getOverlayOperation(\n        definition.overlayGroupId,\n        overlayDescriptor.parentOverlayGroupId\n      );\n\n      if (overlayOperation === RX_OVERLAY.operationTypes.createdInThisOverlayGroup) {\n        return true;\n      }\n\n      return isNull(type) ? false : definition[type];\n    } else {\n      return true;\n    }\n  }\n\n  isBundleEditable(bundleId: string): boolean {\n    return (\n      this.isCurrentOverlayGroupWritable() &&\n      (!this.rxCurrentUserService.isBusinessAnalyst() ||\n        includes(this.rxCurrentUserService.getEditableBundles(), bundleId))\n    );\n  }\n\n  isCurrentOverlayGroupWritable(): boolean {\n    const user = this.rxCurrentUserService.get();\n\n    const contextDescriptors = [\n      ...user.userOverlayGroupDescriptors,\n      ...user.userOverlayGroupDescriptors[0].userOverlayGroupDescriptorChildren\n    ];\n\n    const currentOverlayGroupId = this.getCurrentOverlayGroupId();\n\n    return find(contextDescriptors, { overlayGroupId: currentOverlayGroupId }).isWritable;\n  }\n\n  getCurrentOverlayContext(): IUserOverlayGroupDescriptorChildren {\n    return this.overlay;\n  }\n\n  setDevelopmentMode(developmentMode: DevelopmentMode): void {\n    const overlayGroupId =\n      developmentMode === DevelopmentMode.Base ? RX_OVERLAY.overlayGroupIds.base : RX_OVERLAY.overlayGroupIds.overlay;\n\n    localStorage.setItem('rx-overlay-group-id', overlayGroupId);\n  }\n\n  getDevelopmentMode(): DevelopmentMode {\n    const overlayGroupId = this.getCurrentOverlayContext().overlayGroupId;\n\n    return overlayGroupId === RX_OVERLAY.overlayGroupIds.base ? DevelopmentMode.Base : DevelopmentMode.BestPractice;\n  }\n\n  private userHasAccessToMultipleOverlays(overlayGroup: IUserOverlayGroupDescriptor[]): boolean {\n    return get(overlayGroup, '[0].userOverlayGroupDescriptorChildren.length') >= 1;\n  }\n\n  private getCurrentOverlayGroupId(): string {\n    return this.overlay.overlayGroupId || this.rxCurrentUserService.get().defaultOverlayGroupId;\n  }\n\n  getUserDefaultOverlayGroupId(): string {\n    return this.getCurrentOverlayContext()?.overlayGroupId ?? this.rxCurrentUserService.get().defaultOverlayGroupId;\n  }\n}\n"]}