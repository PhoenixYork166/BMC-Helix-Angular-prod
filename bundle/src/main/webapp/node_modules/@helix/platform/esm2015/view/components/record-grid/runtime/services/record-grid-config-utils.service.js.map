{"version":3,"file":"record-grid-config-utils.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-config-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAGhD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG/F,OAAO,EAAE,mBAAmB,EAAE,MAAM,sCAAsC,CAAC;;;AAK3E,MAAM,OAAO,8BAA8B;IACzC,YAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAG,CAAC;IAEhE,iBAAiB,CAAC,GAA0C;QAC1D,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE;YACjC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YACjB,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC1D;QAED,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;YACjB,OAAO,GAAG,CAAC;SACZ;QAED,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IACtC,CAAC;IAED,eAAe,CAAC,GAAgB;QAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAY,CAAC;IAChD,CAAC;IAED,kBAAkB,CAAC,SAA8B;QAC/C,OAAO,SAAS,KAAK,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC;IAChF,CAAC;IAED,sBAAsB,CAAC,SAAoB;QACzC,OAAO,SAAS,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,IAAI,CAAC;IAC1F,CAAC;IAED,eAAe,CAAC,aAAgC;QAC9C,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAE7D,OAAO,MAAM,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,gBAAgB,CAAC,OAA4B;QAC3C,OAAO,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;IAEO,eAAe,CAAC,MAAyB;QAC/C,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAE9D,OAAO,MAAM,CAAC,WAAW,EAAE,EAAE,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;IACpE,CAAC;;2HAtDU,8BAA8B;+HAA9B,8BAA8B,cAF7B,MAAM;2FAEP,8BAA8B;kBAH1C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { SortOrder } from '@bmc-ux/adapt-table';\n\nimport { BooleanLike } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { assign, cloneDeep, includes, isBoolean, isObject, isString, map, omit } from 'lodash';\nimport { IRecordGridColumn } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { ColumnSortDirection } from '../../common/types/record-grid.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfigUtilsService {\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  parseConfigString(str: BooleanLike | KeyValueObject | string): boolean | KeyValueObject {\n    if (!str) {\n      return false;\n    }\n\n    if (includes(['1', 'true'], str)) {\n      return true;\n    }\n\n    if (includes(['0', 'false'], str)) {\n      return false;\n    }\n\n    if (isString(str)) {\n      return this.rxJsonParserService.tryParseJson(str, false);\n    }\n\n    if (isObject(str)) {\n      return str;\n    }\n\n    return isBoolean(str) ? str : false;\n  }\n\n  getBooleanValue(str: BooleanLike): boolean {\n    return this.parseConfigString(str) as boolean;\n  }\n\n  getColumnSortOrder(direction: ColumnSortDirection): SortOrder {\n    return direction === ColumnSortDirection.Asc ? SortOrder.Asc : SortOrder.Desc;\n  }\n\n  getColumnSortDirection(sortOrder: SortOrder): ColumnSortDirection {\n    return sortOrder === SortOrder.Asc ? ColumnSortDirection.Asc : ColumnSortDirection.Desc;\n  }\n\n  configDeepClone(configuration: IRecordGridConfig): IRecordGridConfig {\n    const configClone = cloneDeep(omit(configuration, ['columns']));\n    const columns = this.columnsDeepClone(configuration.columns);\n\n    return assign(configClone, { columns });\n  }\n\n  columnsDeepClone(columns: IRecordGridColumn[]): IRecordGridColumn[] {\n    return map(columns, this.columnDeepClone);\n  }\n\n  private columnDeepClone(column: IRecordGridColumn): IRecordGridColumn {\n    const columnClone = cloneDeep(omit(column, ['cellTemplate']));\n\n    return assign(columnClone, { cellTemplate: column.cellTemplate });\n  }\n}\n"]}