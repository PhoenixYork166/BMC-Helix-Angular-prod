{"version":3,"file":"record-grid-card-layout.directive.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/record-grid-card-layout/record-grid-card-layout.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport {\n  AdaptTableComponent,\n  ColumnConfig,\n  ColumnHeaderTemplateParams,\n  DataCellTemplateParams\n} from '@bmc-ux/adapt-table';\nimport { IRowDataItem } from '@helix/platform/view/api';\nimport { ResizeSensor } from 'css-element-queries';\nimport { take } from 'rxjs/operators';\nimport { IChangedCardLayoutEvent } from './changed-card-layout-event.interface';\n\n@Directive({\n  selector: '[rxCardLayout]'\n})\nexport class GridCardLayoutDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  cardLayoutFieldsHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutValuesHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutFieldsDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input()\n  cardLayoutValuesDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input('cardLayoutGetDataCellClass')\n  recordGridGetDataCellClass: () => string;\n\n  @Input('cardLayoutRecordGridElementRef')\n  recordGridElementRef: ElementRef;\n\n  @Input()\n  set cardLayoutWidth(value: number) {\n    this._cardLayoutWidth = value;\n\n    if (this._hasViewInitialized) {\n      const { offsetWidth } = this.renderer.selectRootElement(\n        this.adaptTable.el.nativeElement,\n        true\n      );\n\n      this.changeTableCardLayout(offsetWidth);\n    }\n  }\n\n  get cardLayoutWidth(): number {\n    return this._cardLayoutWidth;\n  }\n\n  @Output()\n  changedCardLayout = new EventEmitter<IChangedCardLayoutEvent>();\n\n  hasCardLayout = false;\n  resizeSensor: ResizeSensor;\n\n  private _cardLayoutWidth: number;\n  private _hasViewInitialized = false;\n\n  constructor(\n    @Host() private adaptTable: AdaptTableComponent,\n    private ngZone: NgZone,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      const recordGrid = this.renderer.selectRootElement(this.recordGridElementRef.nativeElement, true);\n\n      this.changeTableCardLayout(recordGrid.offsetWidth);\n    });\n\n    this.ngZone.runOutsideAngular(() => {\n      this.resizeSensor = new ResizeSensor(\n        this.recordGridElementRef.nativeElement,\n        (size: { width: number; height: number }) => {\n          this.ngZone.run(() => {\n            this.changeTableCardLayout(size.width);\n          });\n        }\n      );\n    });\n\n    this._hasViewInitialized = true;\n  }\n\n  private changeTableCardLayout(gridWidth: number): void {\n    const hasCardLayout = gridWidth <= this.cardLayoutWidth;\n\n    if (this.hasCardLayout === hasCardLayout || !gridWidth) {\n      return;\n    }\n\n    this.hasCardLayout = hasCardLayout;\n    const adaptTable = this.adaptTable;\n\n    this.scrollToFirstVisibleRow();\n\n    if (hasCardLayout) {\n      this.renderer.addClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    } else {\n      this.renderer.removeClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    }\n\n    // fix for updating margin in header. Just primeng flaw\n    adaptTable.tableService.onValueChange(adaptTable.value);\n\n    this.changedCardLayout.emit({\n      cardLayoutColumns: hasCardLayout ? this.getCardLayoutColumns() : null\n    });\n  }\n\n  getCardLayoutColumns(): ColumnConfig[] {\n    return [\n      {\n        field: 'fields',\n        header: 'Fields',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutFieldsHeaderTemplate,\n        width: '35%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutFieldsDataCellTemplate,\n        testId: 'fields-column'\n      },\n      {\n        field: 'fields',\n        header: 'Values',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutValuesHeaderTemplate,\n        width: '65%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutValuesDataCellTemplate,\n        testId: 'values-column'\n      }\n    ];\n  }\n\n  private getDataCellClass(): string {\n    return `${this.recordGridGetDataCellClass()} rx-card-layout-data-cell`;\n  }\n\n  scrollToFirstVisibleRow(): void {\n    const adaptTable = this.adaptTable;\n\n    if (adaptTable.scrollable) {\n      const scrollableBody = this.renderer\n        .selectRootElement(adaptTable.el.nativeElement, true)\n        .querySelector('.ui-table-scrollable-body') as HTMLDivElement;\n\n      const scrollableBodyScrollTop = scrollableBody && scrollableBody.scrollTop;\n\n      if (scrollableBodyScrollTop) {\n        const firstVisibleRow = adaptTable.dataRows.find((dataRow) => {\n          const rowEl = dataRow.element.nativeElement;\n\n          return rowEl.offsetTop + rowEl.offsetHeight >= scrollableBodyScrollTop;\n        });\n\n        if (firstVisibleRow) {\n          let rowEl = firstVisibleRow.element.nativeElement;\n          const scrollRowProportion = (scrollableBodyScrollTop - rowEl.offsetTop) / rowEl.offsetHeight;\n\n          this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            rowEl = firstVisibleRow.element.nativeElement;\n            scrollableBody.scrollTop = rowEl.offsetTop + rowEl.offsetHeight * scrollRowProportion;\n          });\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.resizeSensor.detach();\n  }\n}\n"]}