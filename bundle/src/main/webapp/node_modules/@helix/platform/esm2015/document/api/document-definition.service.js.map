{"version":3,"file":"document-definition.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/document/api/document-definition.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAgB,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAA0C,SAAS,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AACxH,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;;;;AAMtC,MAAM,OAAO,2BAA2B;IACtC,YAAoB,UAAsB,EAAU,uBAAgD;QAAhF,eAAU,GAAV,UAAU,CAAY;QAAU,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAG,CAAC;IAExG,GAAG,CAAC,sBAA8B,EAAE,OAAwB;QAC1D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAsB,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAE,OAAO,CAAC,CAAC;IAChG,CAAC;IAED,MAAM;QACJ,OAAO,EAAE,CAAC;YACR,YAAY,EAAE,KAAK;YACnB,cAAc,EAAE,IAAI;YACpB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,SAAS,CAAC,oBAAoB,CAAC,MAAM;SAC7C,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,kBAAuC;QAC5C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,kBAAkB,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,MAAM,CAAC,kBAAuC,EAAE,OAAsB;QACpE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;IAChG,CAAC;IAED,MAAM,CAAC,sBAA8B;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,mBAAmB,CAAC,sBAA8B;QAChD,MAAM,0BAA0B,GAAa,IAAI,CAAC,uBAAuB,CAAC,eAAe,CACvF,+EAA+E,CAChF,CAAC;QAEF,OAAO,0BAA0B,CAAC,OAAO,CAAC,EAAE,sBAAsB,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,MAAM,CAAC,yBAAiC,EAAE,yBAAiC;QACzE,MAAM,aAAa,GAAa,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAC1E,+EAA+E,CAChF,CAAC;QAEF,OAAO,aAAa,CAAC,OAAO,CAAC;YAC3B,IAAI,EAAE,yBAAyB;YAC/B,OAAO,EAAE,yBAAyB;SACnC,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,sBAA+B;QAC5C,OAAO,sBAAsB;YAC3B,CAAC,CAAC,mDAAmD,kBAAkB,CAAC,sBAAsB,CAAC,EAAE;YACjG,CAAC,CAAC,iDAAiD,CAAC;IACxD,CAAC;;wHAnDU,2BAA2B;4HAA3B,2BAA2B,cAF1B,MAAM;2FAEP,2BAA2B;kBAHvC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ICommand, IHttpGetParams, IHttpOptions, RX_BUNDLE, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { Observable, of } from 'rxjs';\nimport { IDocumentDefinition } from './document-definition.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDocumentDefinitionService {\n  constructor(private httpClient: HttpClient, private rxCommandFactoryService: RxCommandFactoryService) {}\n\n  get(documentDefinitionName: string, options?: IHttpGetParams): Observable<IDocumentDefinition> {\n    return this.httpClient.get<IDocumentDefinition>(this.getUrl(documentDefinitionName), options);\n  }\n\n  getNew(): Observable<IDocumentDefinition> {\n    return of({\n      allowOverlay: false,\n      documentSchema: null,\n      name: null,\n      scope: RX_BUNDLE.definitionScopeTypes.bundle\n    });\n  }\n\n  create(documentDefinition: IDocumentDefinition): Observable<HttpResponse<any>> {\n    return this.httpClient.post(this.getUrl(), documentDefinition, { observe: 'response' });\n  }\n\n  update(documentDefinition: IDocumentDefinition, options?: IHttpOptions): Observable<any> {\n    return this.httpClient.put(this.getUrl(documentDefinition.name), documentDefinition, options);\n  }\n\n  delete(documentDefinitionName: string): Observable<any> {\n    return this.httpClient.delete(this.getUrl(documentDefinitionName));\n  }\n\n  revertCustomization(documentDefinitionName: string): Observable<any> {\n    const revertCustomizationCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n      'com.bmc.arsys.rx.application.document.command.RevertDocumentDefinitionCommand'\n    );\n\n    return revertCustomizationCommand.execute({ documentDefinitionName });\n  }\n\n  rename(oldDocumentDefinitionName: string, newDocumentDefinitionName: string): Observable<any> {\n    const renameCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n      'com.bmc.arsys.rx.application.document.command.RenameDocumentDefinitionCommand'\n    );\n\n    return renameCommand.execute({\n      name: oldDocumentDefinitionName,\n      newName: newDocumentDefinitionName\n    });\n  }\n\n  private getUrl(documentDefinitionName?: string): string {\n    return documentDefinitionName\n      ? `/api/rx/application/document/documentdefinition/${encodeURIComponent(documentDefinitionName)}`\n      : '/api/rx/application/document/documentdefinition';\n  }\n}\n"]}