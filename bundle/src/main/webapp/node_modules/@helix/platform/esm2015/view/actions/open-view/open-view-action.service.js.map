{"version":3,"file":"open-view-action.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/open-view/open-view-action.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  AdaptDockedPanelService,\n  AdaptModalService,\n  DismissReasons,\n  DockedPanelDirection\n} from '@bmc-ux/adapt-angular';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { IRuntimeViewApi, RuntimeViewModalComponent, RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { defaults, isObject, transform } from 'lodash';\nimport { EMPTY, from, Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, switchMapTo, take } from 'rxjs/operators';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { IOpenViewActionParams } from './open-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewActionService implements IViewActionService<IOpenViewActionParams, IPlainObject> {\n  constructor(\n    private adaptDockedPanelService: AdaptDockedPanelService,\n    private adaptModalService: AdaptModalService,\n    private router: Router,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IOpenViewActionParams): Observable<IPlainObject> {\n    const inputParams = transform(\n      params.viewParams,\n      (result, value, key) => {\n        result[key] = isObject(value) ? JSON.stringify(value) : String(value ?? '');\n      },\n      {}\n    );\n\n    return this.rxRuntimeViewUtilsService.isViewCancellable(params.viewDefinitionName).pipe(\n      switchMap((isViewCancellable: boolean) => {\n        let runtimeViewApi: IRuntimeViewApi;\n\n        const modalData = {\n          configuration: {\n            viewDefinitionName: params.viewDefinitionName,\n            inputParams: inputParams,\n\n            onRegisterApi(api: IRuntimeViewApi) {\n              runtimeViewApi = api;\n            }\n          },\n\n          title: params.presentation.title,\n          notification: params.presentation.notification,\n          isCancellable: isViewCancellable\n        };\n\n        const modalConfig = {\n          beforeDismiss: (reason) => {\n            // determine if the view is being closed programmatically,\n            // i.e. via executing the Close View action.\n            const isCloseViewAction = !Object.values(DismissReasons).includes(reason);\n\n            // do not close modal/blade when user clicked on backdrop except when view is cancellable\n            if (!isCloseViewAction && (reason !== DismissReasons.BACKDROP_CLICK || isViewCancellable)) {\n              runtimeViewApi\n                .cancel()\n                .pipe(\n                  take(1),\n                  catchError((error) => (error ? throwError(error) : EMPTY))\n                )\n                .subscribe();\n            }\n\n            // only allow to close view if dismiss is triggered by close view action with act as cancel\n            return isCloseViewAction;\n          },\n          blockKeyboard: !isViewCancellable,\n          content: RuntimeViewModalComponent,\n          size: params.presentation.modalSize as any,\n          data: modalData\n        };\n\n        switch (params.presentation.type) {\n          case RX_OPEN_VIEW.type.FullWidth: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n\n          case RX_OPEN_VIEW.type.CenteredModal: {\n            return this.adaptModalService.open(modalConfig);\n          }\n\n          case RX_OPEN_VIEW.type.DockedLeftModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.LEFT }, modalConfig));\n          }\n\n          case RX_OPEN_VIEW.type.DockedRightModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.RIGHT }, modalConfig));\n          }\n\n          default: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n        }\n      })\n    );\n  }\n\n  private openFullWidth(launchBehavior, viewDefinitionName, inputParams): Observable<never> {\n    const url = this.rxViewActionUtilsService.generateViewUrl(viewDefinitionName, inputParams);\n\n    if (launchBehavior === RX_OPEN_VIEW.launchBehavior.NewWindow) {\n      window.open(`${window.location.pathname}#${url}`);\n\n      return throwError(null);\n    } else {\n      return from(this.router.navigateByUrl(url)).pipe(switchMapTo(throwError(null)));\n    }\n  }\n}\n"]}