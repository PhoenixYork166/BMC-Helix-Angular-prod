{"version":3,"file":"search-filters.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/search-filters/search-filters.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,QAAQ,EAAc,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;AAMrC,MAAM,OAAO,sBAAsB;IACjC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAEzB,YAAO,GAAW,oCAAoC,CAAC;IAF3B,CAAC;IAI9C,gBAAgB;QACd,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAkB,GAAG,IAAI,CAAC,OAAO,iBAAiB,CAAC;aACtD,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,mBAAmB,CAAC,GAAa;QAC/B,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAO,GAAG,IAAI,CAAC,OAAO,mBAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACzG,CAAC;IAED,kBAAkB,CAAC,MAAqB;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAgB,GAAG,IAAI,CAAC,OAAO,iBAAiB,EAAE,MAAM,CAAC,CAAC;IACvF,CAAC;IAED,kBAAkB,CAAC,MAAqB;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAgB,GAAG,IAAI,CAAC,OAAO,iBAAiB,EAAE,MAAM,CAAC,CAAC;IACtF,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAW,GAAG,IAAI,CAAC,OAAO,WAAW,CAAC,CAAC;IACnE,CAAC;;mHAzBU,sBAAsB;uHAAtB,sBAAsB,cAFrB,MAAM;2FAEP,sBAAsB;kBAHlC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ISearchFilter } from './search-filter.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSearchFiltersService {\n  constructor(private httpClient: HttpClient) {}\n\n  private readonly apiPath: string = '/api/com.bmc.dsm.chatbot/comaround';\n\n  getSearchFilters(): Observable<IDataPageResult<ISearchFilter>> {\n    return this.httpClient\n      .get<ISearchFilter[]>(`${this.apiPath}/search-filters`)\n      .pipe(map((items) => ({ data: items, totalSize: items.length })));\n  }\n\n  deleteSearchFilters(ids: string[]): Observable<any> {\n    return forkJoin(ids.map((id) => this.httpClient.delete<void>(`${this.apiPath}/search-filters/${id}`)));\n  }\n\n  createSearchFilter(filter: ISearchFilter): Observable<any> {\n    return this.httpClient.post<ISearchFilter>(`${this.apiPath}/search-filters`, filter);\n  }\n\n  updateSearchFilter(filter: ISearchFilter): Observable<ISearchFilter> {\n    return this.httpClient.put<ISearchFilter>(`${this.apiPath}/search-filters`, filter);\n  }\n\n  getTags(): Observable<string[]> {\n    return this.httpClient.get<string[]>(`${this.apiPath}/api/tags`);\n  }\n}\n"]}