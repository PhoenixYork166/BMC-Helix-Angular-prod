{"version":3,"file":"association-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/association/runtime/association-definition-adapter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { filter, flow, map, sortBy } from 'lodash';\nimport { RX_ASSOCIATION } from '../association.types';\n\n@Injectable()\nexport class RxAssociationDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(private rxViewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(associationComponentDefinition: IContainerViewComponentDefinition, viewDefinition: IViewDefinition) {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      associationComponentDefinition\n    );\n\n    const childButtons = associationComponentDefinition.componentDefinitions.filter(\n      (component) => component.type === RxViewComponentType.ActionButton\n    );\n\n    const childSortedButtons = sortBy(childButtons, (componentDefinition: IViewComponentDefinition) =>\n      componentDefinition.propertiesByName.action === RX_ASSOCIATION.actions.associate ? 0 : 1\n    );\n\n    associationComponentDefinition.propertiesByName.state = targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    associationComponentDefinition.propertiesByName.useDefaultRoles =\n      associationComponentDefinition.propertiesByName.useDefaultRoles === 'true';\n\n    associationComponentDefinition.propertiesByName.fields = flow(\n      (componentDefinitions) =>\n        filter(componentDefinitions, {\n          type: RX_ASSOCIATION.componentTypes.associatedRecordField\n        }),\n      (componentDefinitions) =>\n        map(componentDefinitions, (fieldComponentDefinition) => ({\n          fieldId: fieldComponentDefinition.propertiesByName.fieldId,\n          label: fieldComponentDefinition.propertiesByName.label,\n          index: Number(fieldComponentDefinition.propertiesByName.index)\n        })),\n      (componentDefinitions) => sortBy(componentDefinitions, 'index')\n    )(associationComponentDefinition.componentDefinitions);\n\n    associationComponentDefinition.layout = JSON.stringify({\n      outlets: [\n        {\n          name: 'DEFAULT',\n          columns: [\n            {\n              children: childSortedButtons.map((component: IViewComponentDefinition) => component.guid)\n            }\n          ]\n        }\n      ]\n    });\n\n    associationComponentDefinition.componentDefinitions\n      .filter(\n        (componentDefinition: IViewComponentDefinition) => componentDefinition.type === RxViewComponentType.ActionButton\n      )\n      .forEach((componentDefinition: IViewComponentDefinition) => {\n        componentDefinition.propertiesByName.disabled =\n          associationComponentDefinition.propertiesByName.disabled +\n          ' OR ${view.components.' +\n          associationComponentDefinition.guid +\n          '.isDisabled}';\n      });\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n}\n"]}