{"version":3,"file":"associate-view-action-design-model.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/associate/associate-view-action-design-model.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IAssociateViewActionDesignProperties } from './associate-view-action.interfaces';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { omit } from 'lodash';\n\nexport class RxAssociateViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties> {\n    return {\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      viewDefinitionName: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IAssociateViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('recordDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('associationDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationNameOptions$: Observable<ISelectOption[]> = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName\n          ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n              map((associationDefinitions) =>\n                associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                  id: recordDefinition.name,\n                  name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n                }))\n              )\n            )\n          : of([])\n      )\n    );\n\n    const associationDefinition$ = associationDefinitionName$.pipe(\n      switchMap((associationDefinitionName) =>\n        associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)\n      ),\n      shareReplay(1)\n    );\n\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(\n      map((association) => (association ? association.nodeAId === association.nodeBId : false))\n    );\n\n    const isManyToManyAssociation$ = associationDefinition$.pipe(\n      map((association) =>\n        association ? association.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value : false\n      )\n    );\n\n    const useDefaultRoles$ = this.sandbox.actionProperties$.pipe(\n      pluck('useDefaultRoles'),\n      map(Boolean),\n      distinctUntilChanged()\n    );\n\n    useDefaultRoles$.pipe(distinctUntilChanged(), skip(1)).subscribe((useDefaultRoles) => {\n      if (useDefaultRoles) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['nodeARole', 'nodeBRole']));\n      }\n    });\n\n    const associationRoleOptions$: Observable<ISelectOption[]> = associationDefinition$.pipe(\n      map((association) =>\n        association\n          ? [\n              {\n                id: RxAssociatedRecordNodeSide.NodeA,\n                name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RxAssociatedRecordNodeSide.NodeB,\n                name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ]\n          : []\n      )\n    );\n\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n\n    associationDefinition$\n      .pipe(\n        // skip initial props set\n        skip(1),\n        withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)\n      )\n      .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n        if (associationDefinition && !isSymmetricalAssociation) {\n          const associationDefinitionRole =\n            recordDefinitionName === associationDefinition.nodeAId\n              ? RxAssociatedRecordNodeSide.NodeA\n              : RxAssociatedRecordNodeSide.NodeB;\n\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole\n          });\n        } else {\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole: null\n          });\n        }\n      });\n\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$, useDefaultRoles$])\n      .pipe(withLatestFrom(isSymmetricalAssociation$, isManyToManyAssociation$))\n      .subscribe(\n        ([\n          [recordDefinitionName, associationNameOptions, associationRoleOptions, useDefaultRoles],\n          isSymmetricalAssociation,\n          isManyToManyAssociation\n        ]) => {\n          this.sandbox.setActionPropertyEditorConfig(\n            this.getActionEditorConfig(\n              recordDefinitionName,\n              associationNameOptions,\n              associationRoleOptions,\n              isSymmetricalAssociation,\n              isManyToManyAssociation,\n              useDefaultRoles\n            )\n          );\n        }\n      );\n  }\n\n  private getActionEditorConfig(\n    recordDefinitionName: string,\n    associationNameOptions: ISelectOption[],\n    associationRoleOptions: ISelectOption[],\n    isSymmetricalAssociation: boolean,\n    isManyToManyAssociation: boolean,\n    useDefaultRoles: boolean\n  ): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(recordDefinitionName\n        ? [\n            {\n              name: 'associationDefinitionName',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Association to use',\n                options: associationNameOptions,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associationDefinitionRole',\n              component: SelectFormControlComponent,\n              isDisabled: !isSymmetricalAssociation,\n              options: {\n                label: 'Associated record node side',\n                required: true,\n                options: associationRoleOptions\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associatedRecordId',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Associated record ID',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            },\n            {\n              name: 'viewDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'View for selecting or creating associated records',\n                required: true,\n                definitionType: RxDefinitionPickerType.View\n              } as IDefinitionPickerComponentOptions\n            },\n            ...(isManyToManyAssociation\n              ? [\n                  {\n                    name: 'useDefaultRoles',\n                    component: SwitchFormControlComponent,\n                    options: {\n                      label: 'Use default roles'\n                    } as IExpressionFormControlOptions\n                  },\n                  ...(isManyToManyAssociation && useDefaultRoles\n                    ? []\n                    : [\n                        {\n                          name: 'nodeARole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'First record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        },\n                        {\n                          name: 'nodeBRole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'Second record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        }\n                      ])\n                ]\n              : [])\n          ]\n        : [])\n    ];\n  }\n}\n"]}