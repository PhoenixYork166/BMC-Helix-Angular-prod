{"version":3,"file":"field-groups-editor.store.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/config/designer/config-designer/field-groups-editor/field-groups-editor.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { Observable } from 'rxjs';\nimport { chain, reject } from 'lodash';\nimport { RxListBuilderItem, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { IFieldGroupsEditorState, IFieldState } from './field-groups-editor.types';\n\n@Injectable()\nexport class FieldGroupsEditorStore extends ComponentStore<IFieldGroupsEditorState> {\n  readonly fields$: Observable<IFieldState[]> = this.select((state: IFieldGroupsEditorState) => state.fields);\n  readonly groups$: Observable<RxListBuilderItem[]> = this.select((state: IFieldGroupsEditorState) => state.groups);\n  readonly selectedGroupName$: Observable<string> = this.select((state) => state.selectedGroupName);\n\n  readonly availableFields$: Observable<RxSelectOption[]> = this.select(\n    this.fields$,\n    this.selectedGroupName$,\n    (fields, selectedGroupName) =>\n      fields\n        .filter((field: IFieldState) => field.groupName !== selectedGroupName)\n        .map((field: IFieldState, index) => ({\n          name: field.name,\n          id: index,\n          guid: field.guid,\n          checked: field.checked\n        }))\n  );\n\n  readonly checkedAvailableFields$ = this.select(this.availableFields$, (fields) =>\n    fields.filter((field: RxSelectOption) => field.checked)\n  );\n\n  readonly selectedFields$: Observable<RxListBuilderItem[]> = this.select(\n    this.fields$,\n    this.selectedGroupName$,\n    (fields, selectedGroupName) =>\n      chain(fields)\n        .filter((field: IFieldState) => field.groupName === selectedGroupName)\n        .sortBy('fieldOrder')\n        .map((field: IFieldState, index) => ({\n          name: field.name,\n          id: index,\n          guid: field.guid,\n          selected: field.checked\n        }))\n        .value()\n  );\n\n  readonly checkedSelectedFields$ = this.select(this.selectedFields$, (fields) =>\n    fields.filter((field: RxSelectOption) => field.selected)\n  );\n\n  readonly isDirty$: Observable<boolean> = this.select((state: IFieldGroupsEditorState) => state.isDirty);\n\n  readonly vm$ = this.select(\n    this.groups$,\n    this.fields$,\n    this.availableFields$,\n    this.checkedAvailableFields$,\n    this.selectedFields$,\n    this.checkedSelectedFields$,\n    this.isDirty$,\n    (groups, fields, availableFields, checkedAvailableFields, selectedFields, checkedSelectedFields, isDirty) => ({\n      groups,\n      fields,\n      availableFields,\n      checkedAvailableFields,\n      selectedFields,\n      checkedSelectedFields,\n      isDirty\n    })\n  );\n\n  readonly selectGroup = this.updater((state: IFieldGroupsEditorState, groupName: string) => {\n    const groups = state.groups.map((group) => ({\n      ...group,\n      selected: group.name === groupName\n    }));\n\n    return { ...state, groups, selectedGroupName: groupName };\n  });\n\n  readonly markDirty = this.updater((state: IFieldGroupsEditorState) => ({ ...state, isDirty: true }));\n\n  readonly checkField = this.updater((state: IFieldGroupsEditorState, guid: string) => ({\n    ...state,\n    fields: state.fields.map((field) => (field.guid === guid ? { ...field, checked: true } : field))\n  }));\n\n  readonly uncheckField = this.updater((state: IFieldGroupsEditorState, guid: string) => ({\n    ...state,\n    fields: state.fields.map((field) => (field.guid === guid ? { ...field, checked: false } : field))\n  }));\n\n  readonly sortSelectedFields = this.updater((state: IFieldGroupsEditorState, guids: string[]) => ({\n    ...state,\n    fields: state.fields.map((field) => {\n      const index = guids.indexOf(field.guid);\n\n      return index > -1 ? { ...field, fieldOrder: index } : field;\n    })\n  }));\n\n  readonly assignCheckedFields = this.updater((state: IFieldGroupsEditorState) => {\n    const selectedFields = state.fields.filter((field) => field.groupName === state.selectedGroupName);\n    let fieldOrder = selectedFields.length;\n\n    return {\n      ...state,\n      fields: state.fields.map((field) =>\n        field.checked\n          ? {\n              ...field,\n              checked: false,\n              groupName: state.selectedGroupName,\n              fieldOrder: fieldOrder++\n            }\n          : field\n      ),\n      isDirty: true\n    };\n  });\n\n  readonly unassignCheckedFields = this.updater((state: IFieldGroupsEditorState) => ({\n    ...state,\n    fields: state.fields.map((field) =>\n      field.checked ? { ...field, checked: false, fieldOrder: null, groupName: null } : field\n    ),\n    isDirty: true\n  }));\n\n  readonly removeField = this.updater((state: IFieldGroupsEditorState, guid: string) => ({\n    ...state,\n    fields: state.fields.map((field) =>\n      field.guid === guid ? { ...field, groupName: null, fieldOrder: null } : field\n    ),\n    isDirty: true\n  }));\n\n  readonly removeGroup = this.updater((state: IFieldGroupsEditorState, groupName: string) => ({\n    ...state,\n    fields: state.fields.map((field) =>\n      field.groupName === groupName ? { ...field, groupName: null, fieldOrder: null } : field\n    ),\n    groups: reject(state.groups, { name: groupName }),\n    isDirty: true\n  }));\n\n  readonly renameGroup = this.updater(\n    (state: IFieldGroupsEditorState, group: { oldName: string; newName: string }) => ({\n      ...state,\n      fields: state.fields.map((field) =>\n        field.groupName === group.oldName ? { ...field, groupName: group.newName } : field\n      ),\n      isDirty: true\n    })\n  );\n\n  constructor() {\n    super({ fields: [], isDirty: false, groups: [], selectedGroupName: null });\n  }\n}\n"]}