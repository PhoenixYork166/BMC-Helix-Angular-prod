{"version":3,"file":"approval-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/admin/components/approval-configuration/approval-expression-configurator/approval-expression-configurator.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { flatten } from '@angular/compiler';\nimport { ErrorHandler, Injector } from '@angular/core';\nimport {\n  IAssociationTree,\n  IAssociationTreeNode,\n  RxAssociationNodeTreeDataPageService\n} from '@helix/platform/association/api';\nimport { IFieldDefinition, IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  IDataDictionary,\n  IExpressionConfigurator,\n  RxDefinitionNameService,\n  RxExpressionConfigurator\n} from '@helix/platform/shared/api';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, flow, forEach } from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { RxApprovalConfigurationService } from '../approval-configuration.service';\nimport { IAssociationsByDefinitionName, IDataParams } from '../approval-configuration.types';\n\nexport class RxApprovalExpressionConfigurator extends RxExpressionConfigurator implements IExpressionConfigurator {\n  private translateService = this.injector.get(TranslateService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxAssociationNodeTreeDataPageService = this.injector.get(RxAssociationNodeTreeDataPageService);\n  private rxTreeService = this.injector.get(RxTreeService);\n  private rxApprovalConfigurationService = this.injector.get(RxApprovalConfigurationService);\n  private errorHandler = this.injector.get(ErrorHandler);\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  commonDataDictionary$: Observable<IDataDictionary> = of([\n    {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      children: [\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-user.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$USER$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$DATE$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-time.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$TIME$'\n        },\n        {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'\n          ),\n          icon: 'd-icon-dollar',\n          expression: '$TIMESTAMP$'\n        }\n      ]\n    }\n  ]);\n\n  approvalExpressionDataDictionary(currentRecordDefinitionName): Observable<IDataDictionary> {\n    const queryParams = {\n      recorddefinition: currentRecordDefinitionName\n    };\n\n    return combineLatest([\n      this.rxAssociationNodeTreeDataPageService.get({ params: queryParams }),\n      this.commonDataDictionary$\n    ]).pipe(\n      switchMap(([associationNodeTreeDataPage, commonDataDictionary]) => {\n        const associations = associationNodeTreeDataPage.data as IAssociationTree[];\n\n        const associatedRecordDefinitionNames = flow(\n          (approvalAssociations) =>\n            approvalAssociations.map((tree: IAssociationTree) =>\n              this.rxTreeService.flattenTree(tree, 'children').map((association: IAssociationTree) => association.value)\n            ),\n          flatten,\n          (approvalAssociations) =>\n            approvalAssociations.map((association: IAssociationTreeNode) => association.recordDefinitionName)\n        )(associations);\n\n        const definitionRequests$: Observable<IRecordDefinition>[] = [\n          this.rxRecordDefinitionCacheService.getRecordDefinition(currentRecordDefinitionName)\n        ];\n\n        forEach(associatedRecordDefinitionNames, (definitionName: string) => {\n          definitionRequests$.push(this.rxRecordDefinitionCacheService.getRecordDefinition(definitionName));\n        });\n\n        return forkJoin(definitionRequests$).pipe(\n          map((definitions) => {\n            const params: IDataParams = {\n              definitionName: currentRecordDefinitionName,\n              definitions,\n              associationsByDefinition: {\n                [currentRecordDefinitionName]: associations\n              }\n            };\n\n            return [\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'\n                ),\n                children: [\n                  {\n                    label: this.rxDefinitionNameService.getDisplayName(currentRecordDefinitionName),\n                    children: this.getRecordDefinitionDataDictionary(params)\n                  }\n                ]\n              },\n              ...commonDataDictionary\n            ];\n          })\n        );\n      }),\n      shareReplay(1)\n    );\n  }\n\n  private getRecordDefinitionDataDictionary(params: IDataParams): IDataDictionary {\n    const recordDefinition = find(params.definitions, { name: params.definitionName });\n\n    const fields: IDataDictionary = recordDefinition.fieldDefinitions.map((field: IFieldDefinition) => ({\n      label: field.name,\n      icon: 'd-icon-field_text',\n      expression: params.association\n        ? '${recordContext' +\n          `${params.parentAssociationExpression || ''}._associations.` +\n          `${params.association.value.associationDefintionGuid}.${params.association.value.nodeSide}[0].${field.id}}`\n        : `'${field.name}'`\n    }));\n\n    if (params.associationsByDefinition && params.associationsByDefinition[recordDefinition.name]) {\n      const associatedFields = this.getAssociationDataDictionary(params);\n\n      if (associatedFields.length) {\n        fields.unshift({\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition-associations.title'\n          ),\n          children: associatedFields\n        });\n      }\n    }\n\n    return fields;\n  }\n\n  private getAssociationDataDictionary(params: IDataParams): IDataDictionary {\n    const associations: IDataDictionary = [];\n\n    if (params.associationsByDefinition[params.definitionName].length) {\n      forEach(params.associationsByDefinition[params.definitionName], (association) => {\n        let parentAssociationExpression = '';\n        const nextDefinitionAssociations: IAssociationsByDefinitionName = {};\n\n        if (params.association) {\n          parentAssociationExpression = `._associations.${params.association.value.associationDefintionGuid}.${params.association.value.nodeSide}[0]`;\n        }\n\n        const currentAssociation: IAssociationTree = find(\n          params.associationsByDefinition[params.definitionName],\n          (item: IAssociationTree) => {\n            return item.value.recordDefinitionName === association.value.recordDefinitionName;\n          }\n        );\n\n        if (currentAssociation) {\n          nextDefinitionAssociations[association.value.recordDefinitionName] = currentAssociation.children;\n        }\n\n        associations.push({\n          label:\n            association.value.nodeName !== association.value.recordDefinitionName\n              ? `${this.rxDefinitionNameService.getDisplayName(\n                  association.value.recordDefinitionName\n                )} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})`\n              : this.rxDefinitionNameService.getDisplayName(association.value.nodeName),\n          children: this.getRecordDefinitionDataDictionary({\n            definitionName: association.value.recordDefinitionName,\n            definitions: params.definitions,\n            associationsByDefinition: nextDefinitionAssociations,\n            association,\n            parentAssociationExpression\n          }),\n          expression:\n            `\\${recordContext${parentAssociationExpression}._associations.` +\n            `${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]}`\n        });\n      });\n    }\n\n    return associations;\n  }\n\n  getCtmPeopleFormFields(registeredRecordDefinitionName: string): Observable<IDataDictionary> {\n    return combineLatest([\n      this.rxApprovalConfigurationService\n        .getCtmPeopleFormFields(this.rxDefinitionNameService.getBundleId(registeredRecordDefinitionName || ''))\n        .pipe(\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(null);\n          })\n        ),\n      this.commonDataDictionary$\n    ]).pipe(\n      map(([ctmPeopleDefinition, commonDataDictionary]) => {\n        const dictionary = [...commonDataDictionary];\n\n        if (ctmPeopleDefinition) {\n          dictionary.unshift({\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'\n            ),\n            children: ctmPeopleDefinition.fieldDefinitions.map((field: IFieldDefinition) => ({\n              label: field.name,\n              icon: 'd-icon-field_text',\n              expression: `'${field.name}'`\n            }))\n          });\n        }\n\n        return dictionary;\n      }),\n      shareReplay(1)\n    );\n  }\n}\n"]}