{"version":3,"file":"runtime-view-component-state.interface.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/runtime/interfaces/runtime-view-component-state.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { ComponentExpression } from '../component/component-expression.class';\nimport { IViewComponentEventState } from './runtime-view-component-event-state.interface';\nimport { IViewComponentRuntimeState } from './view-component-runtime-state.interface';\nimport { IViewComponentDescriptor } from '@helix/platform/view/api';\n\nexport interface IViewComponentState {\n  // view component guid\n  guid: string;\n\n  // view component type\n  type: string;\n\n  // config$ is passed directly to @Component as @Input parameter and provides observable component config\n  config$: BehaviorSubject<IViewComponentRuntimeState>;\n\n  // contains view component evaluated config values\n  // passes to @Component through config$ and used for populating evaluation data\n  configState: IViewComponentRuntimeState;\n\n  // contains view component shared data, like Api\n  // used for populating evaluation data\n  publicState: IViewComponentRuntimeState;\n\n  // each expression in component definition is represented as Component Expression instance\n  // expressions contains all view component expressions\n  expressions: ComponentExpression[];\n\n  // contains Map where key is `propertyName` and value is array of guids of all view components\n  // which depend on `propertyName` of current view component\n  // used for more efficient expression evaluation\n  dependentViewComponentsMap: Map<string, string[]>;\n\n  // contains map of all view component event names and corresponding actions list\n  eventStates: IViewComponentEventState;\n\n  // defines whether current component is data view component\n  // data view component - component which does not have own UI representation and serve for storing data\n  isDataViewComponent: boolean;\n\n  // populated only for data view component\n  // used for building config object for parent view component\n  // defines the property name in parent config object which will contain data view component config\n  configPropertyName: string;\n\n  // contains parent view component guid\n  parentViewComponentGuid: string;\n\n  // contains all child view component guids\n  childViewComponentGuids: string[];\n\n  componentDescriptor: IViewComponentDescriptor;\n}\n"]}