{"version":3,"file":"server-action-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/server-action/server-action-expression-configurator.class.ts"],"names":[],"mappings":"AACA,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAEtC,OAAO,EACL,uBAAuB,EACvB,6BAA6B,EAC9B,MAAM,mEAAmE,CAAC;AAE3E,OAAO,EAAE,wBAAwB,EAAE,MAAM,0DAA0D,CAAC;AAGpG,MAAM,OAAgB,oCAAqC,SAAQ,wBAAwB;IAKzF,YAAgC,QAAkB;QAChD,KAAK,EAAE,CAAC;QADsB,aAAQ,GAAR,QAAQ,CAAU;QAF1C,0BAAqB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAK9D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC;QAE9E,IAAI,CAAC,oBAAoB,CAAC;YACxB,YAAY,EAAE,cAAc;YAC5B,eAAe,EAAE,IAAI,CAAC,yBAAyB,EAAE;YACjD,kBAAkB,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,YAAY,EAAE,UAAU,CAAC;YAC3G,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAI,CAAC;SACrE,CAAC,CAAC;IACL,CAAC;IAID,gBAAgB;QACd,uCACK,KAAK,CAAC,gBAAgB,EAAE,KAC3B,eAAe,EAAE,IAAI,CAAC,qBAAqB,EAC3C,SAAS,EAAE,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,SAAS,CAAC,IAC/E;IACJ,CAAC;IAED,yBAAyB;QACvB,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,0BAA0B,CAAC,YAAoB,EAAE,UAAkB;QACjE,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport {\n  ExpressionOperatorGroup,\n  ExpressionOperatorRowsByGroup\n} from '../expression-configurator/expression-configurator-operator.types';\nimport { IExpressionConfiguratorDefaultPropertyConfig } from '../expression-configurator/expression-configurator.interfaces';\nimport { RxExpressionConfigurator } from '../expression-configurator/expression-configurator.class';\nimport { IDataDictionary } from '../data-dictionary/data-dictionary.types';\n\nexport abstract class RxServerActionExpressionConfigurator extends RxExpressionConfigurator {\n  commonDataDictionary$: Observable<IDataDictionary>;\n\n  private dataDictionaryService = this.getDataDictionaryService();\n\n  protected constructor(protected injector: Injector) {\n    super();\n\n    this.commonDataDictionary$ = this.dataDictionaryService.commonDataDictionary$;\n\n    this.configureForProperty({\n      propertyPath: /inputMap\\/.*/,\n      dataDictionary$: this.getInputMapDataDictionary(),\n      validateExpression: (propertyPath, expression) => this.validateInputMapExpression(propertyPath, expression),\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.Math)\n    });\n  }\n\n  protected abstract getDataDictionaryService(): any;\n\n  getDefaultConfig(): IExpressionConfiguratorDefaultPropertyConfig {\n    return {\n      ...super.getDefaultConfig(),\n      dataDictionary$: this.commonDataDictionary$,\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllClient)\n    };\n  }\n\n  getInputMapDataDictionary(): Observable<IDataDictionary> {\n    return this.commonDataDictionary$;\n  }\n\n  validateInputMapExpression(propertyPath: string, expression: string): Observable<boolean> {\n    return of(true);\n  }\n}\n"]}