{"version":3,"file":"unit.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/file-utils/unit.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;;AAKtD,MAAM,OAAO,aAAa;IACxB,iBAAiB,CAAC,KAAa;QAC7B,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAE1C,IAAI,cAAc,GAAG,IAAI,CAAC;QAE1B,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE;YAC3B,cAAc,GAAG,GAAG,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SACzD;aAAM,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE;YAClC,cAAc,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;SACjE;aAAM,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE;YAClC,cAAc,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;SACjE;aAAM;YACL,cAAc,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;SACjE;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,8BAA8B,CAAC,KAAa,EAAE,QAAgB;QAC5D,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAE1C,IAAI,iBAAiB,GAAG,IAAI,CAAC;QAE7B,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI,EAAE;YAC/B,iBAAiB,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;SAC7C;aAAM,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI,EAAE;YACtC,iBAAiB,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;SAC7C;aAAM,IAAI,QAAQ,KAAK,SAAS,CAAC,IAAI,EAAE;YACtC,iBAAiB,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;SAC7C;aAAM;YACL,iBAAiB,GAAG,KAAK,CAAC;SAC3B;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;;0GAvCU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RX_SIZE_UNITS } from './size-units.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUnitService {\n  getValueWithUnits(value: number): string | null {\n    const kilobytes = RX_SIZE_UNITS.kilobytes;\n    const megabytes = RX_SIZE_UNITS.megabytes;\n    const gigabytes = RX_SIZE_UNITS.gigabytes;\n\n    let valueWithUnits = null;\n\n    if (value < kilobytes.value) {\n      valueWithUnits = `${value} ${RX_SIZE_UNITS.bytes.unit}`;\n    } else if (value < megabytes.value) {\n      valueWithUnits = `${value / kilobytes.value} ${kilobytes.unit}`;\n    } else if (value < gigabytes.value) {\n      valueWithUnits = `${value / megabytes.value} ${megabytes.unit}`;\n    } else {\n      valueWithUnits = `${value / gigabytes.value} ${gigabytes.unit}`;\n    }\n\n    return valueWithUnits;\n  }\n\n  getValueWithoutUnitsByUnitType(value: number, unitType: string): number | null {\n    const kilobytes = RX_SIZE_UNITS.kilobytes;\n    const megabytes = RX_SIZE_UNITS.megabytes;\n    const gigabytes = RX_SIZE_UNITS.gigabytes;\n\n    let valueWithoutUnits = null;\n\n    if (unitType === kilobytes.unit) {\n      valueWithoutUnits = value / kilobytes.value;\n    } else if (unitType === megabytes.unit) {\n      valueWithoutUnits = value / megabytes.value;\n    } else if (unitType === gigabytes.unit) {\n      valueWithoutUnits = value / gigabytes.value;\n    } else {\n      valueWithoutUnits = value;\n    }\n\n    return valueWithoutUnits;\n  }\n}\n"]}