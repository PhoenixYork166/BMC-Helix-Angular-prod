{"version":3,"file":"data-page.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/data-page/data-page.class.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAC3E,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAEtC,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,MAAM,iBAAiB,GAAG,8BAA8B,CAAC;AAEzD,MAAM,OAAO,QAAQ;IAUnB,YACE,QAAkB,EAClB,YAAoB,EACpB,sCAAqE,EAAE;QARjE,0BAAqB,GAAG;YAC9B,QAAQ,EAAE,CAAC,CAAC;YACZ,UAAU,EAAE,CAAC;SACd,CAAC;QAOA,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,mCAAmC,CAAC;IAC3D,CAAC;IAED,GAAG,CAAC,+BAA8D,EAAE;QAClE,MAAM,aAAa,iDACd,IAAI,CAAC,qBAAqB,GAC1B,IAAI,CAAC,aAAa,CAAC,MAAM,GACzB,4BAA4B,CAAC,MAAM,CACvC,CAAC;QAEF,MAAM,cAAc,mCACf,IAAI,CAAC,aAAa,CAAC,OAAO,GAC1B,4BAA4B,CAAC,OAAO,CACxC,CAAC;QAEF,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAErE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,iBAAiB,EAAE;YACvD,OAAO,EAAE,IAAI,WAAW,CAAC,cAAc,CAAC;YACxC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,OAAO,EAAE,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;IAED,IAAI,CAAC,+BAA8D,EAAE;QACnE,MAAM,aAAa,iDACd,IAAI,CAAC,qBAAqB,GAC1B,IAAI,CAAC,aAAa,CAAC,MAAM,GACzB,4BAA4B,CAAC,MAAM,CACvC,CAAC;QAEF,MAAM,cAAc,mCACf,IAAI,CAAC,aAAa,CAAC,OAAO,GAC1B,4BAA4B,CAAC,OAAO,CACxC,CAAC;QAEF,MAAM,WAAW,GAAG,EAAE,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;QAEpE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1C,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAkB,iBAAiB,EAAE,WAAW,EAAE;YACrE,OAAO,EAAE,IAAI,WAAW,CAAC,cAAc,CAAC;SACzC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { IDataPageParams } from './data-page-params.interface';\nimport { IDataPageRequestConfiguration } from './data-page-request-configuration.interface';\nimport { Injector } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { IDataPageResult } from './data-page-result.interface';\nimport { RX_DATA_PAGE } from './data-page.constant';\n\nconst DATA_PAGE_API_URL = '/api/rx/application/datapage';\n\nexport class DataPage {\n  http: HttpClient;\n  dataPageType: string;\n  configuration: IDataPageRequestConfiguration;\n\n  private requiredRequestParams = {\n    pageSize: -1,\n    startIndex: 0\n  };\n\n  constructor(\n    injector: Injector,\n    dataPageType: string,\n    defaultDataPageRequestConfiguration: IDataPageRequestConfiguration = {}\n  ) {\n    this.http = injector.get(HttpClient);\n    this.dataPageType = dataPageType;\n    this.configuration = defaultDataPageRequestConfiguration;\n  }\n\n  get(dataPageRequestConfiguration: IDataPageRequestConfiguration = {}): Observable<IDataPageResult> {\n    const requestParams: IDataPageParams = {\n      ...this.requiredRequestParams,\n      ...this.configuration.params,\n      ...dataPageRequestConfiguration.params\n    };\n\n    const requestHeaders = {\n      ...this.configuration.headers,\n      ...dataPageRequestConfiguration.headers\n    };\n\n    let params = new HttpParams().set('dataPageType', this.dataPageType);\n\n    Object.keys(requestParams).forEach((name) => {\n      params = params.set(name, String(requestParams[name]));\n    });\n\n    return this.http.get<IDataPageResult>(DATA_PAGE_API_URL, {\n      headers: new HttpHeaders(requestHeaders),\n      params\n    });\n  }\n\n  getEmptyDataPage(): Observable<IDataPageResult> {\n    return of(RX_DATA_PAGE.emptyDataPage);\n  }\n\n  post(dataPageRequestConfiguration: IDataPageRequestConfiguration = {}): Observable<IDataPageResult> {\n    const requestParams: IDataPageParams = {\n      ...this.requiredRequestParams,\n      ...this.configuration.params,\n      ...dataPageRequestConfiguration.params\n    };\n\n    const requestHeaders = {\n      ...this.configuration.headers,\n      ...dataPageRequestConfiguration.headers\n    };\n\n    const requestBody = { values: { dataPageType: this.dataPageType } };\n\n    Object.keys(requestParams).forEach((name) => {\n      requestBody.values[name] = String(requestParams[name]);\n    });\n\n    return this.http.post<IDataPageResult>(DATA_PAGE_API_URL, requestBody, {\n      headers: new HttpHeaders(requestHeaders)\n    });\n  }\n}\n"]}