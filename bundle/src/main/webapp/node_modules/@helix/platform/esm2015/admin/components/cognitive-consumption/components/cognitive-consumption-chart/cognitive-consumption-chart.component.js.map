{"version":3,"file":"cognitive-consumption-chart.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-consumption/components/cognitive-consumption-chart/cognitive-consumption-chart.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-consumption/components/cognitive-consumption-chart/cognitive-consumption-chart.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { assign, constant, defaults, flow, forEach, head, keys, last, map, mapValues, reduce, split } from 'lodash';\nimport moment from 'moment-es6';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RX_SIZE_UNITS, RxStringService, RxUnitService } from '@helix/platform/utils';\nimport {\n  ChartType,\n  ICognitiveConsumptionChart,\n  ICognitiveConsumptionChartConfig,\n  ICognitiveConsumptionGroupData,\n  ICognitiveLicenseUsageCount\n} from '../../cognitive-consumption.types';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cognitive-consumption-chart',\n  templateUrl: './cognitive-consumption-chart.component.html'\n})\nexport class CognitiveConsumptionChartComponent implements OnInit {\n  @Input()\n  chart: ICognitiveConsumptionChart;\n\n  @Input()\n  groupData: ICognitiveConsumptionGroupData;\n\n  @Input()\n  licenceUsageCount: ICognitiveLicenseUsageCount[];\n\n  capacity: IPlainObject;\n  chartConfig: ICognitiveConsumptionChartConfig;\n\n  areaChartType = ChartType.Area;\n  horizontalColumnChartType = ChartType.HorizontalColumn;\n\n  constructor(\n    private rxStringService: RxStringService,\n    private rxUnitService: RxUnitService,\n    private translateService: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.chartConfig = {\n      height: 400,\n      width: 500,\n      header: {\n        title: this.translateService.instant(this.chart.title),\n        allowHideLegend: true\n      },\n      suppressLegend: this.isCapacityAvailable(),\n      xAxis: {\n        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.x-axis-months.title'),\n        categories: []\n      },\n      yAxis: {\n        title: `${this.translateService.instant(this.groupData.label)} (${this.groupData.unit})`\n      },\n      series: []\n    };\n\n    if (this.chart.type === ChartType.HorizontalColumn) {\n      assign(this.chartConfig, {\n        type: 'column',\n        seriesDisplay: 'horizontal',\n        showSlider: true,\n        slidePointsCount: 3\n      });\n\n      const defaultCount = flow(\n        (licenceUsage: ICognitiveLicenseUsageCount[]) => map(licenceUsage, 'count'),\n        (countData: IPlainObject) => reduce(countData, assign, {}),\n        (countData: IPlainObject) => mapValues(countData, constant(0))\n      )(this.licenceUsageCount);\n\n      forEach(this.licenceUsageCount, (item) => {\n        defaults(item.count, defaultCount);\n      });\n    }\n\n    forEach(this.licenceUsageCount, (item) => {\n      const name = this.groupData.capacityName || this.rxStringService.prettify(last(split(item.bundleId, '.')));\n\n      const data = map(item.count, (key, value) => {\n        let result;\n\n        const countValue =\n          this.groupData.unit === RX_SIZE_UNITS.gigabytes.unit\n            ? this.rxUnitService.getValueWithoutUnitsByUnitType(key, RX_SIZE_UNITS.gigabytes.unit)\n            : key;\n\n        if (this.chart.type === ChartType.Area) {\n          result = {\n            x: moment(value).valueOf(),\n            y: countValue\n          };\n        } else {\n          result = countValue;\n        }\n\n        return result;\n      });\n\n      this.chartConfig.series.push({\n        name,\n        data\n      });\n    });\n\n    const firstLicenceUsageCount = head(this.licenceUsageCount);\n\n    this.chartConfig.xAxis.categories = map(keys(firstLicenceUsageCount.count), (key) => {\n      return moment(key).format('MMM YYYY');\n    });\n\n    if (this.isCapacityAvailable()) {\n      this.capacity = {\n        title: `Capacity (${this.groupData.unit})`,\n        value:\n          this.groupData.unit === RX_SIZE_UNITS.gigabytes.unit\n            ? this.rxUnitService.getValueWithoutUnitsByUnitType(\n                firstLicenceUsageCount.capacity,\n                RX_SIZE_UNITS.gigabytes.unit\n              )\n            : firstLicenceUsageCount.capacity\n      };\n    }\n  }\n\n  formatXAxisVal(xValue) {\n    return moment(xValue).format('MMM YYYY');\n  }\n\n  public isCapacityAvailable() {\n    return Boolean(this.groupData.capacityName);\n  }\n}\n","<ng-container [ngSwitch]=\"chart.type\">\n  <adapt-stacked-chart\n    *ngSwitchCase=\"horizontalColumnChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"horizontalColumnChartTooltip\"\n    [type]=\"chartConfig.type\"\n    [showSlider]=\"chartConfig.showSlider\"\n    [slidePointsCount]=\"chartConfig.slidePointsCount\"\n    [seriesDisplay]=\"chartConfig.seriesDisplay\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-stacked-chart>\n\n  <adapt-area-graph\n    *ngSwitchCase=\"areaChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"areaChartTooltip\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-area-graph>\n</ng-container>\n\n<ng-template #horizontalColumnChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.value }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n\n<ng-template #areaChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.xAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ formatXAxisVal(data.xValue) }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.yValue }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n"]}