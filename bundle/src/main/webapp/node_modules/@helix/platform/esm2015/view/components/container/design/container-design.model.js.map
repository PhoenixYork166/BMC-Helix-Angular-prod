{"version":3,"file":"container-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/container/design/container-design.model.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAGL,0BAA0B,EAC1B,wBAAwB,EACzB,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAEL,gCAAgC,EAChC,kBAAkB,EACnB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EACL,oCAAoC,EACpC,6BAA6B,EAC7B,6BAA6B,EAE7B,qBAAqB,EACrB,0BAA0B,EAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhD,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC5D,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAGtD,MAAM,4BAA4B,GAAG,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAChE,CAAC,KAAK,EAAyB,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CACpF,CAAC;AAEF,MAAM,OAAO,oBACX,SAAQ,0BAAgD;IAD1D;;QAIE,yBAAoB,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;QACzD,iBAAY,GAAwB,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAqHlH,CAAC;IAnHC,MAAM,CAAC,oBAAoB,CAAC,iBAAwC;QAClE,qCACE,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,gBAAgB,CAAC,EAAE,EAC5B,WAAW,EAAE,GAAG,IACb,gCAAgC,GAChC,iBAAiB,EACpB;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACrD,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAEjG,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,aAAa,CAAC;aACxC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACjD,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAChE,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;YAExG,IAAI,CAAC,OAAO,CAAC,mCAAmC,CAAC,aAAa,EAAE;gBAC9D;oBACE,KAAK,EAAE,QAAQ;oBACf,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;iBACpD;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,QAAQ,CAAC,KAA2B;QAC1C,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,mBAAmB,CAAC,UAAgC;QAClD,MAAM,MAAM,qBACP,UAAU,CACd,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,OAAO,MAAM,CAAC,MAAM,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,kBAAkB,CAAC,WAAqB;QACtC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEO,qBAAqB,CAAC,WAAmB;QAC/C,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,GAAG,WAAW,CAAC,CAAC;QAElE,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC;QAExF,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,YAAY;QAClB,OAAO;YACL,uBAAuB,EAAE;gBACvB;oBACE,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,MAAM;4BACZ,SAAS,EAAE,wBAAwB;4BACnC,OAAO,EAAE;gCACP,KAAK,EAAE,MAAM;gCACb,OAAO,EAAE,IAAI,OAAO,CAAC,kDAAkD,CAAC;6BACzE;yBACF;wBACD;4BACE,IAAI,EAAE,aAAa;4BACnB,SAAS,EAAE,0BAA0B;4BACrC,OAAO,EAAE;gCACP,KAAK,EAAE,mBAAmB;gCAC1B,QAAQ,EAAE,IAAI;gCACd,OAAO,EAAE,IAAI,OAAO,CAClB,sFAAsF,CACvF;gCACD,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;6BAChE;yBAC/B;wBACD;4BACE,IAAI,EAAE,SAAS;4BACf,SAAS,EAAE,0BAA0B;4BACrC,OAAO,EAAE;gCACP,KAAK,EAAE,UAAU;gCACjB,kBAAkB,EAAE,KAAK;gCACzB,OAAO,EAAE,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC;gCAC5C,OAAO,EAAE,IAAI,OAAO,CAClB;;;2CAGyB,CAC1B;6BAC2B;yBAC/B;wBACD,6BAA6B,EAAE;wBAC/B,oCAAoC,EAAE;wBACtC,6BAA6B,CAAC,4BAA4B,CAAC;qBAC5D;iBACF;aACF;SACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  ITagAutocompleteValue,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getHiddenFieldInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { isEmpty, times, values } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, skip, take, takeUntil } from 'rxjs/operators';\nimport { RX_CONTAINER } from '../container.constant';\nimport { ContainerRowWrap } from '../container.types';\nimport { IContainerProperties } from './container-design.types';\n\nconst cssClassesAutocompleteValues = RX_VIEW_DEFINITION.styles.map(\n  (style): ITagAutocompleteValue => ({ text: style.name, data: { value: style.id } })\n);\n\nexport class ContainerDesignModel\n  extends ViewDesignerComponentModel<IContainerProperties>\n  implements IViewDesignerComponentModel<IContainerProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n  hasChildren$: Observable<boolean> = this.sandbox.getChildComponentGuids().pipe(map((guids) => !isEmpty(guids)));\n\n  static getInitialProperties(initialProperties?: IContainerProperties): IContainerProperties {\n    return {\n      name: null,\n      rowWrap: ContainerRowWrap.Sm,\n      columnCount: '1',\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.componentProperties$.subscribe((componentProperties) => this.validate(componentProperties));\n\n    this.sandbox\n      .getComponentPropertyValue('columnCount')\n      .pipe(skip(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe((columnCount) => {\n        this.sandbox.setLayout(this.getDefaultColumnSpans(Number(columnCount)));\n      });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private validate(model: IContainerProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(model));\n  }\n\n  getPropertiesByName(properties: IContainerProperties): IContainerProperties {\n    const result = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  setContainerLayout(columnSizes: number[]): void {\n    this.sandbox.setLayout(columnSizes);\n  }\n\n  private getDefaultColumnSpans(columnCount: number): number[] {\n    const columnSpans: number[] = [];\n    const span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);\n\n    times(columnCount, () => columnSpans.push(span));\n    columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;\n\n    return columnSpans;\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Container.')\n              }\n            },\n            {\n              name: 'columnCount',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Number of columns',\n                required: true,\n                tooltip: new Tooltip(\n                  'Resize container columns on the canvas by dragging the dashed column separator line.'\n                ),\n                options: times(6, (index: number) => ({ id: (++index).toString(), name: index.toString() }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'rowWrap',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Row wrap',\n                sortAlphabetically: false,\n                options: values(RX_CONTAINER.rowWrapOptions),\n                tooltip: new Tooltip(\n                  `The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.`\n                )\n              } as ISelectFormControlOptions\n            },\n            getHiddenFieldInspectorConfig(),\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig(cssClassesAutocompleteValues)\n          ]\n        }\n      ]\n    };\n  }\n}\n"]}