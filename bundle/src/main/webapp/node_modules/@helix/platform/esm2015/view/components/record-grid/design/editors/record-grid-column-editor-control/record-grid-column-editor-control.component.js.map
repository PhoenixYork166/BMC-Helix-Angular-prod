{"version":3,"file":"record-grid-column-editor-control.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.ts","../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAuC,MAAM,eAAe,CAAC;AACtF,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,oBAAoB,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAE5F,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;AAClE,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACnF,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAC;AAC9F,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,8BAA8B,EAAE,MAAM,4DAA4D,CAAC;AAE5G,OAAO,EAAE,oCAAoC,EAAE,MAAM,6EAA6E,CAAC;;;;;;;;AAqBnI,MAAM,OAAO,sCACX,SAAQ,aAAuD;IAgD/D,YACU,cAA8B,EAC9B,wBAAkD,EAClD,8BAA8D,EAC9D,wBAAkD;QAE1D,KAAK,EAAE,CAAC;QALA,mBAAc,GAAd,cAAc,CAAgB;QAC9B,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,6BAAwB,GAAxB,wBAAwB,CAA0B;QA9CpD,yBAAoB,GAAG,IAAI,eAAe,CAA2C,EAAE,CAAC,CAAC;QAEjG,aAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CACvC,SAAS,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAC7B,QAAQ,CACN,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CACvC,QAAQ,CAAC;YACP,IAAI,CAAC,wBAAwB,CAAC,wBAAwB,CACpD,eAAe,CAAC,OAAO,EACvB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC9B;YACD,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;SACzG,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,qBAAqB,EAAE,eAAe,CAAC,EAAE,EAAE,CAAC,CAAC;YACjD,qBAAqB;YACrB,eAAe;YACf,eAAe;SAChB,CAAC,CAAC,CACJ,CACF,CACF,CAAC,IAAI,CACJ,cAAc,CAAC,EAAE,CAAC,EAClB,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAClB,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAA+B,EAAE;;YAC1D,uCACK,UAAU,CAAC,eAAe,KAC7B,eAAe,EAAE,UAAU,CAAC,eAAe,EAC3C,qBAAqB,EAAE,UAAU,CAAC,qBAAqB,EACvD,KAAK,EAAE,MAAA,UAAU,CAAC,eAAe,CAAC,KAAK,0CAAE,IAAI,EAAE,EAC/C,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,eAAe,EAAE,YAAY,CAAC;oBACvD,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,eAAe,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC;oBAC5F,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,UAAU;wBACrC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EACzG,aAAa,EAAE,IAAI,UAAU,CAAC,eAAe,CAAC,IAAI,GAAG,IACrD;QACJ,CAAC,CAAC,CACH,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CACF,CACF,CAAC;IASF,CAAC;IAED,WAAW,CAAC,OAAsB;;QAChC,IACE,CAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,aAAa;YAC7B,OAAO,CAAC,OAAO,CAAC,YAAsD,CAAC,gBAAgB,CAAC,IAAI;gBAC1F,OAAO,CAAC,OAAO,CAAC,aAAuD,CAAC,gBAAgB,CAAC,IAAI,EAChG;YACA,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,YAAY,CAAC,gBAA0D;QACrE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACnD,CAAC;IAED,YAAY,CAAC,UAAuC;QAClD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,KAAK,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACzF,CAAC;IAED,WAAW,CAAC,OAAiD;QAC3D,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,UAAU,CAAC,UAAmB,EAAE,iBAA0B;QACxD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE;YAChD,MAAM,IAAI,GAAuC;gBAC/C,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,OAAO;gBACP,YAAY,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;gBAC9D,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB;gBAC/C,iBAAiB;aAClB,CAAC;YAEF,IAAI,CAAC,cAAc;iBAChB,SAAS,CAAC;gBACT,KAAK,EAAE,mBAAmB;gBAC1B,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,EAAE;oBACJ,YAAY,EAAE,IAAI;iBACnB;gBACD,IAAI,EAAE,uBAAuB,CAAC,KAAY;gBAC1C,MAAM,EAAE,mBAAmB;aAC5B,CAAC;iBACD,IAAI,CAAC,CAAC,MAA0C,EAAE,EAAE;gBACnD,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;oBAC5B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAClC;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,IAA6C;QACjD,IAAI,CAAC,UAAU,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,CAAC,CAAC;IACvD,CAAC;IAED,yBAAyB,CAAC,MAAmC;QAC3D,MAAM,YAAY,GAAG,oBAAoB,CAAC,uBAAuB,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAEvG,OAAO,GAAG,CAAC,oBAAoB,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,gBAAgB,CAAC,OAAsC;QACrD,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;IAED,iBAAiB,CAAC,KAAa,EAAE,MAAmC;QAClE,OAAO,MAAM,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,eAAe,CAAC,OAAe;QAC7B,OAAO,OAAO,KAAK,cAAc,CAAC,4BAA4B,CAAC,EAAE,CAAC;IACpE,CAAC;IAED,WAAW;QACT,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;;mIAtIU,sCAAsC;uHAAtC,sCAAsC,uFARtC;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,sCAAsC;YACnD,KAAK,EAAE,IAAI;SACZ;KACF,sECjCH,yjDA2CA;2FDRa,sCAAsC;kBAZlD,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,oDAAoD;oBACjE,SAAS,EAAE,CAAC,oDAAoD,CAAC;oBACjE,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,wCAAwC;4BACnD,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;gOAMC,OAAO;sBADN,KAAK","sourcesContent":["import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { get, has, noop } from 'lodash';\nimport { BehaviorSubject, forkJoin } from 'rxjs';\nimport { defaultIfEmpty, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../../../runtime/services/record-grid-config-utils.service';\nimport { RecordGridDesignValidationIssue } from '../../record-grid-design.types';\nimport { RecordGridColumnEditorModalComponent } from './record-grid-column-editor-modal/record-grid-column-editor-modal.component';\nimport {\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './record-grid-column-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-column-editor',\n  templateUrl: './record-grid-column-editor-control.component.html',\n  styleUrls: ['./record-grid-column-editor-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridColumnEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridColumnEditorControlComponent\n  extends ValueAccessor<IRecordGridDesignInspectorColumnConfig[]>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridColumnEditorControlOptions;\n\n  private updateColumnsSubject = new BehaviorSubject<IRecordGridDesignInspectorColumnConfig[]>([]);\n\n  columns$ = this.updateColumnsSubject.pipe(\n    switchMap((inspectorColumns) =>\n      forkJoin(\n        inspectorColumns.map((inspectorColumn) =>\n          forkJoin([\n            this.rxRecordGridUtilsService.getAssociationDescriptor(\n              inspectorColumn.fieldId,\n              this.options.recordDefinition\n            ),\n            this.rxRecordGridUtilsService.getFieldDefinition(inspectorColumn.fieldId, this.options.recordDefinition)\n          ]).pipe(\n            map(([associationDescriptor, fieldDefinition]) => ({\n              associationDescriptor,\n              fieldDefinition,\n              inspectorColumn\n            }))\n          )\n        )\n      ).pipe(\n        defaultIfEmpty([]),\n        map((columnsData) =>\n          columnsData.map((columnData): IRecordGridDesignColumnData => {\n            return {\n              ...columnData.inspectorColumn,\n              fieldDefinition: columnData.fieldDefinition,\n              associationDescriptor: columnData.associationDescriptor,\n              title: columnData.inspectorColumn.title?.trim(),\n              searchable: has(columnData.inspectorColumn, 'searchable')\n                ? this.rxRecordGridConfigUtilsService.getBooleanValue(columnData.inspectorColumn.searchable)\n                : columnData.inspectorColumn.filterable &&\n                  this.rxRecordGridUtilsService.isSearchable(columnData.fieldDefinition, this.options.recordDefinition),\n              fallbackTitle: `[${columnData.fieldDefinition.name}]`\n            };\n          })\n        ),\n        shareReplay(1)\n      )\n    )\n  );\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (changes.options.currentValue as IRecordGridColumnEditorControlOptions).recordDefinition.name !==\n        (changes.options.previousValue as IRecordGridColumnEditorControlOptions).recordDefinition.name\n    ) {\n      this.updateColumnsSubject.next(this.value);\n    }\n  }\n\n  onWriteValue(inspectorColumns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.updateColumnsSubject.next(inspectorColumns);\n  }\n\n  removeColumn(columnData: IRecordGridDesignColumnData): void {\n    this.updateValue(this.value.filter((column) => column.fieldId !== columnData.fieldId));\n  }\n\n  updateValue(columns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.value = columns;\n    this.onWriteValue(columns);\n  }\n\n  openEditor(columnGuid?: string, activeActionIndex?: number): void {\n    this.columns$.pipe(take(1)).subscribe((columns) => {\n      const data: IRecordGridColumnEditorModalParams = {\n        isReadOnly: this.isDisabled,\n        columns,\n        activeColumn: columns.find((item) => item.guid === columnGuid),\n        recordDefinition: this.options.recordDefinition,\n        activeActionIndex\n      };\n\n      this.rxModalService\n        .openModal({\n          title: 'Edit grid columns',\n          content: RecordGridColumnEditorModalComponent,\n          data: {\n            columnParams: data\n          },\n          size: OpenViewActionModalSize.Large as any,\n          testID: 'edit-grid-columns'\n        })\n        .then((result: IRecordGridColumnEditorModalResult) => {\n          if (result && result.columns) {\n            this.updateValue(result.columns);\n          }\n        })\n        .catch(noop);\n    });\n  }\n\n  focus(data: RecordGridDesignValidationIssue['data']): void {\n    this.openEditor(data?.columnGuid, data?.actionIndex);\n  }\n\n  getColumnResourceTypeName(column: IRecordGridDesignColumnData): string {\n    const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[column.fieldDefinition.resourceType];\n\n    return get(RX_RECORD_DEFINITION.dataTypes[resourceType], 'displayName', '');\n  }\n\n  getSortedColumns(columns: IRecordGridDesignColumnData[]): IRecordGridDesignColumnData[] {\n    return columns.sort((column1, column2) => column1.index - column2.index);\n  }\n\n  trackByForColumns(index: number, column: IRecordGridDesignColumnData): string {\n    return column.fieldId;\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  ngOnDestroy(): void {\n    this.updateColumnsSubject.complete();\n  }\n}\n","<adapt-button btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit grid columns\n</adapt-button>\n\n<div *ngIf=\"columns$ | async as columns\">\n  <div rx-id=\"columns\">\n    <span *ngIf=\"columns.length === 0\" class=\"text-tertiary\"> No grid columns added. </span>\n  </div>\n\n  <div class=\"rx-selected-column\" *ngFor=\"let column of getSortedColumns(columns); trackBy: trackByForColumns\">\n    <div class=\"rx-selected-column__header-container\">\n      <span\n        class=\"rx-selected-column__header-title\"\n        rx-id=\"card-title\"\n        [ngClass]=\"{ 'd-icon-left-arrow_schema': column.associationDescriptor }\"\n        [title]=\"column.title\"\n      >\n        {{ column.title || column.fallbackTitle }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        (click)=\"openEditor(column.guid)\"\n        *ngIf=\"!isDisabled\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-column\"\n        (click)=\"removeColumn(column)\"\n        *ngIf=\"!isActionsColumn(column.fieldId) && !isDisabled\"\n      ></button>\n    </div>\n\n    <div class=\"rx-column-type\" rx-id=\"column-type\">\n      {{ getColumnResourceTypeName(column) }}\n      <span *ngIf=\"column.associationDescriptor\">– {{ column.associationDescriptor.label }}</span>\n    </div>\n  </div>\n</div>\n"]}