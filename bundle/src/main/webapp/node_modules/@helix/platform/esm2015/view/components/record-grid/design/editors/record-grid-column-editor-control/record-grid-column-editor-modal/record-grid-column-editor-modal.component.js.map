{"version":3,"file":"record-grid-column-editor-modal.component.js","sourceRoot":"","sources":["../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.ts","../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.html"],"names":[],"mappings":"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","sourcesContent":["import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Injector,\n  NgZone,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  ActiveModalRef,\n  AdaptAccordionTabComponent,\n  AdaptTreeNodeTyped,\n  DismissReasons,\n  TreeWrap\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RX_RECORD_DEFINITION\n} from '@helix/platform/record/api';\nimport { IExpressionConfigurator, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { ActionListControlComponent, NamedListFilterExpressionConfigurator } from '@helix/platform/view/designer';\nimport { every, find, findIndex, forEach, get, isEmpty, isNil, remove } from 'lodash';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport {\n  IColumnEditorAvailableColumn,\n  IColumnEditorColumnData,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData\n} from '../record-grid-column-editor.types';\nimport { IAvailableColumnTreeData } from './types/available-column-tree-data.interface';\nimport { IColumnEditorProperty } from './types/column-editor-property.types';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  templateUrl: './record-grid-column-editor-modal.component.html',\n  styleUrls: ['./record-grid-column-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridColumnEditorModalComponent extends RxModalClass implements AfterViewInit {\n  columns: IColumnEditorColumnData[];\n  recordDefinition: IRecordDefinition;\n  columnProperties = RX_RECORD_GRID.columnProperties;\n  actionsColumnProperties = RX_RECORD_GRID.actionsColumnProperties;\n  filteredColumns: IColumnEditorAvailableColumn[] = [];\n  availableColumnsTree: AdaptTreeNodeTyped<IAvailableColumnTreeData>[] = [];\n  startedLoadingAssociationDescriptors = false;\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n  expressionConfigurator: IExpressionConfigurator;\n  isReadOnly: boolean;\n\n  columnWidthPropertyOptions: IStepperWithUnitsFormControlOptions = this.columnProperties.find(\n    ({ name }) => name === 'width'\n  ).options as IStepperWithUnitsFormControlOptions;\n\n  typeaheadKeystrokeCountOptions: ISelectFormControlOptions = {\n    ...this.columnProperties.find(({ name }) => name === 'typeaheadKeystrokeCount').options,\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-column.keystroke-count.tooltip'\n      )\n    )\n  } as ISelectFormControlOptions;\n\n  @ViewChildren('draggableSelectedColumn', { read: CdkDrag })\n  draggableSelectedColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChild('selectedColumnsDropList', { read: CdkDropList })\n  selectedColumnsDropList: CdkDropList;\n\n  @ViewChildren('draggableAssociatedAvailableColumn', { read: CdkDrag })\n  draggableAssociatedAvailableColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChildren(ActionListControlComponent)\n  actionListControlComponents: QueryList<ActionListControlComponent>;\n\n  @ViewChild('associatedAvailableColumnsDropList', { read: CdkDropList })\n  associatedAvailableColumnsDropList: CdkDropList;\n\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  private readonly activeColumn: IRecordGridDesignColumnData;\n  private readonly activeActionIndex: number;\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private definitionNameService: RxDefinitionNameService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxGuidService: RxGuidService,\n    private ngZone: NgZone,\n    protected injector: Injector,\n    private translateService: TranslateService,\n    private rxExpressionEditorService: RxExpressionEditorService\n  ) {\n    super(activeModalRef, injector);\n    const params = this.activeModalRef.getData().columnParams as IRecordGridColumnEditorModalParams;\n\n    this.activeColumn = params.activeColumn;\n    this.activeActionIndex = params.activeActionIndex;\n    this.recordDefinition = params.recordDefinition;\n    this.isReadOnly = params.isReadOnly;\n\n    this.columns = params.columns\n      .map((column): IColumnEditorColumnData => {\n        const additionalQueryCriteriaExpressionOptions = column.fieldDefinition.namedListDefinition\n          ? this.getAdditionalQueryCriteriaExpressionOptions(column)\n          : null;\n\n        return {\n          ...column,\n          isOpen: column === this.activeColumn,\n          label: this.rxRecordGridUtilsService.getColumnLabel(column.fieldDefinition, column.associationDescriptor),\n          clickable: !isEmpty(column.actions),\n          additionalQueryCriteriaExpressionOptions\n        };\n      })\n      .sort((a, b) => a.index - b.index);\n\n    this.getAvailableColumnsTree();\n  }\n\n  ngAfterViewInit(): void {\n    this.updateSelectedColumnsDropList();\n    this.openActiveAction();\n\n    const openGridColumnIndex = findIndex(this.columns, 'isOpen');\n\n    if (openGridColumnIndex !== -1) {\n      this.accordionTabEls.toArray()[openGridColumnIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  updateSelectedColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableSelectedColumns, this.selectedColumnsDropList);\n  }\n\n  updateAssociatedAvailableColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableAssociatedAvailableColumns, this.associatedAvailableColumnsDropList);\n  }\n\n  updateColumnsDropList(\n    draggableColumnsList: QueryList<CdkDrag<IColumnEditorColumnData>>,\n    dropList: CdkDropList<IColumnEditorColumnData[]>\n  ): void {\n    // Workaround: update due to injection bug with the adapt-accordion and adapt-tree\n    const draggableColumns = draggableColumnsList.toArray();\n    const columns = this.columns;\n\n    draggableColumns.sort((column1, column2) => {\n      return columns.indexOf(column1.data) - columns.indexOf(column2.data);\n    });\n\n    dropList._dropListRef.withItems(\n      draggableColumns.map((drag) => {\n        const dragRef = drag._dragRef as any;\n\n        if (!dragRef._initialContainer) {\n          dragRef._initialContainer = dropList._dropListRef;\n        }\n\n        return drag._dragRef;\n      })\n    );\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onDropInSelectedColumnsContainer(event: CdkDragDrop<IColumnEditorColumnData[]>) {\n    if (event.previousContainer !== event.container && this.isColumnEditorAvailableColumn(event.item.data)) {\n      this.addColumn(event.item.data, event.currentIndex);\n    } else if (event.previousIndex !== event.currentIndex) {\n      this.moveColumn(event.previousIndex, event.currentIndex);\n    }\n  }\n\n  onColumnCheckboxPropertyChange(\n    value: boolean,\n    column: IColumnEditorColumnData,\n    columnProperty: IColumnEditorProperty\n  ) {\n    if (columnProperty.name === 'filterable' && column.fieldDefinition.namedListDefinition) {\n      if (value) {\n        column.typeaheadKeystrokeCount = RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;\n      } else {\n        column.typeaheadKeystrokeCount = null;\n        column.additionalQueryCriteria = null;\n      }\n    }\n\n    this.markAsDirty();\n  }\n\n  onColumnDragStarted(): void {\n    this.updateSelectedColumnsDropList();\n  }\n\n  onAssociatedAvailableColumnsDragStarted(): void {\n    this.onColumnDragStarted();\n    this.updateAssociatedAvailableColumnsDropList();\n  }\n\n  isColumnEditorAvailableColumn(\n    column: IColumnEditorAvailableColumn | IColumnEditorColumnData\n  ): column is IColumnEditorAvailableColumn {\n    return Boolean((column as IColumnEditorAvailableColumn).fieldDefinitionName);\n  }\n\n  moveColumn(fromIndex: number, toIndex: number): void {\n    this.markAsDirty();\n    moveItemInArray(this.columns, fromIndex, toIndex);\n    this.updateColumnIndexes();\n  }\n\n  removeColumn(index: number): void {\n    this.markAsDirty();\n    const column = this.columns[index];\n\n    this.columns.splice(index, 1);\n\n    const associatedAvailableColumnsNode = column.associationDescriptor\n      ? this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label)\n      : this.availableColumnsTree[0];\n\n    // variable can be null when we want remove column, but associations are not loaded yet\n    if (associatedAvailableColumnsNode && associatedAvailableColumnsNode.data.allAvailableColumns) {\n      associatedAvailableColumnsNode.data.allAvailableColumns.push(\n        this.getColumnMetadata(column.fieldDefinition, column.associationDescriptor)\n      );\n\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  private getAssociatedAvailableColumnsNode(\n    associationDescriptorLabel: string\n  ): AdaptTreeNodeTyped<IAvailableColumnTreeData> {\n    return this.availableColumnsTree.find(\n      (associatedAvailableColumn) =>\n        associatedAvailableColumn.data.associationDescriptor &&\n        associatedAvailableColumn.data.associationDescriptor.label === associationDescriptorLabel\n    );\n  }\n\n  getAvailableColumnsTree(): void {\n    const recordNode = {\n      children: null,\n      leaf: false,\n      expanded: true,\n      expandedIcon: 'd-icon-file_text',\n      collapsedIcon: 'd-icon-file_text',\n      label: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      key: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      data: {\n        allAvailableColumns: null\n      }\n    };\n\n    if (!this.startedLoadingAssociationDescriptors) {\n      this.startedLoadingAssociationDescriptors = true;\n\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.recordDefinition.name)\n        .subscribe((associationDescriptors) => {\n          associationDescriptors = associationDescriptors.slice();\n          associationDescriptors.sort((descriptor1, descriptor2) => descriptor1.label.localeCompare(descriptor2.label));\n\n          this.availableColumnsTree = associationDescriptors.map((associationDescriptor) => {\n            return {\n              children: null,\n              leaf: false,\n              expandedIcon: 'd-icon-arrow_schema',\n              collapsedIcon: 'd-icon-arrow_schema',\n              label: associationDescriptor.label,\n              key: associationDescriptor.associationDefinition.name,\n              data: {\n                associationDescriptor,\n                allAvailableColumns: null\n              }\n            };\n          });\n\n          this.availableColumnsTree.unshift(recordNode);\n\n          this.availableColumnsTree.forEach((node) => {\n            this.onNodeExpand({ node });\n          });\n        });\n    }\n  }\n\n  updateAvailableColumnsTree(): void {\n    this.availableColumnsTree.forEach((node) => {\n      const allAvailableColumns = node.data.allAvailableColumns;\n\n      if (allAvailableColumns) {\n        const availableColumns = this.sortAvailableColumns(allAvailableColumns);\n        const definitionName = node.data.associationDescriptor\n          ? node.data.associationDescriptor.associationDefinition.name\n          : this.recordDefinition.name;\n\n        node.children = availableColumns.map((availableColumn): AdaptTreeNodeTyped<IAvailableColumnTreeData> => {\n          return {\n            children: null,\n            leaf: true,\n            label: availableColumn.fieldDefinitionName,\n            key: `${definitionName}-${availableColumn.fieldDefinition.id}`,\n            data: {\n              availableColumn\n            }\n          };\n        });\n      }\n    });\n  }\n\n  onNodeExpand({ node }: { node: AdaptTreeNodeTyped<IAvailableColumnTreeData> }): void {\n    const associationDescriptor = node.data.associationDescriptor;\n\n    if (associationDescriptor && !node.data.allAvailableColumns) {\n      node.data.allAvailableColumns = [];\n\n      this.rxRecordDefinitionCacheService\n        .getRecordDefinition(associationDescriptor.recordDefinitionName)\n        .subscribe((recordDefinition) => {\n          node.data.allAvailableColumns = this.getAvailableColumns(recordDefinition, associationDescriptor);\n          this.updateAvailableColumnsTree();\n        });\n    } else if (!associationDescriptor) {\n      node.data.allAvailableColumns = this.getAvailableColumns(this.recordDefinition);\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  addColumn(availableColumn: IColumnEditorAvailableColumn, insertIndex?: number) {\n    this.markAsDirty();\n\n    if (!find(this.columns, (column) => column.fieldId === availableColumn.fieldId)) {\n      const additionalQueryCriteriaExpressionOptions = availableColumn.fieldDefinition.namedListDefinition\n        ? this.getAdditionalQueryCriteriaExpressionOptions(availableColumn)\n        : null;\n\n      const newColumn = {\n        ...this.getColumnEditorColumnData(availableColumn),\n        additionalQueryCriteriaExpressionOptions\n      };\n\n      if (isNil(insertIndex)) {\n        this.columns.push(newColumn);\n      } else {\n        this.columns.splice(insertIndex, 0, newColumn);\n      }\n\n      this.updateColumnIndexes();\n      this.removeFromAvailableColumns(availableColumn);\n\n      setTimeout(() => {\n        this.accordionTabEls.toArray()[insertIndex ?? this.columns.length - 1].nativeElement.scrollIntoView();\n      });\n    }\n  }\n\n  getColumnEditorColumnData(availableColumn: IColumnEditorAvailableColumn): IColumnEditorColumnData {\n    const column: IColumnEditorColumnData = {\n      guid: this.rxGuidService.generate(),\n      label: availableColumn.label,\n      fieldId: availableColumn.fieldId,\n      associationDescriptor: availableColumn.associationDescriptor,\n      fieldDefinition: availableColumn.fieldDefinition,\n      actions: [],\n      title: availableColumn.fieldDefinitionName,\n      isOpen: true\n    };\n\n    forEach(RX_RECORD_GRID.columnProperties, (columnProperty) => {\n      if (columnProperty.name === 'sortable') {\n        column.sortable = availableColumn.isSortable;\n      } else if (columnProperty.name === 'searchable') {\n        column.searchable = this.rxRecordGridUtilsService.isSearchable(\n          availableColumn.fieldDefinition,\n          this.recordDefinition\n        );\n      } else {\n        column[columnProperty.name] = columnProperty.defaultValue;\n      }\n    });\n\n    return column;\n  }\n\n  removeFromAvailableColumns(column: IColumnEditorAvailableColumn): void {\n    if (column.associationDescriptor) {\n      const associatedAvailableColumnsNode = this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label);\n\n      remove(associatedAvailableColumnsNode.data.allAvailableColumns, column);\n    } else {\n      remove(this.availableColumnsTree[0].data.allAvailableColumns, column);\n    }\n\n    this.updateAvailableColumnsTree();\n  }\n\n  sortAvailableColumns(availableColumns: IColumnEditorAvailableColumn[]): IColumnEditorAvailableColumn[] {\n    this.filteredColumns = availableColumns.sort((column1, column2) =>\n      column1.fieldDefinitionName.localeCompare(column2.fieldDefinitionName)\n    );\n\n    return this.filteredColumns;\n  }\n\n  getAvailableColumns(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn[] {\n    return recordDefinition.fieldDefinitions\n      .map((fieldDefinition) => this.getColumnMetadata(fieldDefinition, associationDescriptor))\n      .filter((availableColumn) => !find(this.columns, (column) => column.fieldId === availableColumn.fieldId));\n  }\n\n  getColumnMetadata(\n    fieldDefinition: IFieldDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn {\n    return {\n      fieldDefinitionName: fieldDefinition.name,\n      label: this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n      fieldId: this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor),\n      isSortable: this.rxFieldDefinitionService.isSortable(fieldDefinition),\n      associationDescriptor,\n      fieldDefinition\n    };\n  }\n\n  saveChanges(): void {\n    const result: IRecordGridColumnEditorModalResult = {\n      columns: this.columns.map((column): IRecordGridDesignColumnData => {\n        const isFilterableColumnWithNamedList = column.filterable && column.fieldDefinition.namedListDefinition;\n\n        return {\n          actions: column.actions,\n          alignment: column.alignment,\n          fieldId: column.fieldId,\n          filterable: column.filterable,\n          filterType: column.filterType,\n          guid: column.guid,\n          index: column.index,\n          sortable: column.sortable,\n          searchable: column.searchable,\n          title: column.title,\n          visible: column.visible,\n          associationDescriptor: column.associationDescriptor,\n          fieldDefinition: column.fieldDefinition,\n          cellDisplayProperties: column.cellDisplayProperties,\n          namedFilterOptions: column.namedFilterOptions,\n          width: column.width,\n          wrapText: column.wrapText,\n          typeaheadKeystrokeCount: isFilterableColumnWithNamedList ? column.typeaheadKeystrokeCount : null,\n          additionalQueryCriteria: isFilterableColumnWithNamedList ? column.additionalQueryCriteria : null\n        };\n      })\n    };\n\n    this.activeModalRef.close(result);\n  }\n\n  trackByForColumns(index: number, column: IColumnEditorColumnData): string {\n    return column.fieldId;\n  }\n\n  trackByForColumnProperties(index: number, columnProperty: IColumnEditorProperty): string {\n    return columnProperty.name;\n  }\n\n  isPropertyEditable(column: IColumnEditorColumnData, propertyName: string) {\n    if (propertyName === 'searchable') {\n      return (\n        !this.isReadOnly && this.rxRecordGridUtilsService.isSearchable(column.fieldDefinition, this.recordDefinition)\n      );\n    } else {\n      return !this.isReadOnly;\n    }\n  }\n\n  private updateColumnIndexes(): void {\n    this.columns.forEach((column, index) => {\n      column.index = index;\n    });\n  }\n\n  private openActiveAction(): void {\n    if (this.activeColumn && this.activeActionIndex >= 0) {\n      this.ngZone.runOutsideAngular(() => {\n        // timeout is required to let control set initial value\n        setTimeout(() => {\n          const listControl = this.actionListControlComponents.find(\n            (control) => control.value === this.activeColumn.actions\n          );\n\n          if (listControl) {\n            listControl.focus({ actionIndex: this.activeActionIndex });\n          }\n        });\n      });\n    }\n  }\n\n  isTreeEmpty(): boolean {\n    return every(this.availableColumnsTree, (node) => node.data.allAvailableColumns.length === 0);\n  }\n\n  openAdditionalQueryCriteriaExpressionEditor(\n    column: IColumnEditorColumnData,\n    control: ExpressionFormControlComponent\n  ): void {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'additionalQueryCriteria',\n          value: column.additionalQueryCriteria,\n          label: 'Additional named list filter'\n        },\n        isReadOnly: this.isReadOnly,\n        expressionConfigurator: namedListFilterExpressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),\n            icon: 'd-icon-mathematical_function'\n          },\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'\n            ),\n            icon: 'd-icon-file_o'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'\n            ),\n            icon: 'd-icon-arrow_right_square_input'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        column.additionalQueryCriteria = expression.value;\n        control.value = expression.value;\n        control.onWriteValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  getAdditionalQueryCriteriaExpressionOptions(column: IRecordGridDesignColumnData): IExpressionFormControlOptions {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    return {\n      label: 'Additional named list filter',\n      tooltip: new Tooltip(\n        'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n      ),\n      dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n      operators: namedListFilterExpressionConfigurator.getOperators()\n    };\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block d-flex flex-column\">\n          <div\n            *ngIf=\"!isTreeEmpty()\"\n            #associatedAvailableColumnsDropList=\"cdkDropList\"\n            cdkDropList\n            [cdkDropListData]=\"filteredColumns\"\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selectedColumnsDropList']\"\n          >\n            <adapt-tree\n              [value]=\"availableColumnsTree\"\n              (onNodeExpand)=\"onNodeExpand($event)\"\n              filter=\"true\"\n              [wrap]=\"treeWrap\"\n            >\n              <ng-template let-node adaptTreeNodeTemplate>\n                <span *ngIf=\"!node.data.availableColumn\" [title]=\"node.label\">\n                  {{ node.label }}\n                </span>\n\n                <div\n                  *ngIf=\"node.data.availableColumn\"\n                  class=\"rx-tree-draggable-node\"\n                  #draggableAssociatedAvailableColumn\n                  cdkDrag\n                  [cdkDragData]=\"node.data.availableColumn\"\n                  (cdkDragStarted)=\"onAssociatedAvailableColumnsDragStarted()\"\n                >\n                  <div (dblclick)=\"addColumn(node.data.availableColumn)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addColumn(node.data.availableColumn)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ node.label }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <div *ngIf=\"isTreeEmpty()\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n            <adapt-empty-state\n              class=\"w-100\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.empty-state.message'\n                  | translate\n              }}\"\n              type=\"search\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div\n        id=\"selectedColumnsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"columns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n        #selectedColumnsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"false\" *ngIf=\"columns.length\">\n          <div\n            *ngFor=\"\n              let column of columns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByForColumns\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"column\"\n            [cdkDragDisabled]=\"isReadOnly\"\n            (cdkDragStarted)=\"onColumnDragStarted()\"\n            #draggableSelectedColumn\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.label\" rx-id=\"card-title\">\n                      {{ column.label }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      *ngIf=\"!isActionsColumn(column.fieldId)\"\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeColumn(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <ng-container *ngIf=\"column.isOpen\">\n                <div\n                  *ngIf=\"\n                    isActionsColumn(column.fieldId);\n                    then actionsColumnEditorTemplate;\n                    else dataColumnEditorTemplate\n                  \"\n                ></div>\n              </ng-container>\n\n              <ng-template #dataColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <div class=\"d-flex flex-wrap\">\n                  <ng-container *ngFor=\"let columnProperty of columnProperties; trackBy: trackByForColumnProperties\">\n                    <div\n                      class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                      *ngIf=\"\n                        ['visible', 'sortable', 'filterable', 'searchable', 'wrapText'].includes(columnProperty.name)\n                      \"\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column[columnProperty.name]\"\n                          (ngModelChange)=\"onColumnCheckboxPropertyChange($event, column, columnProperty)\"\n                          [disabled]=\"!isPropertyEditable(column, columnProperty.name)\"\n                        />\n\n                        <span class=\"checkbox__item\">{{ columnProperty.label }}</span>\n                      </label>\n\n                      <span class=\"ml-1\" *ngIf=\"columnProperty.tooltip\">\n                        <span class=\"letter-space\"></span>\n                        <adapt-icon\n                          [name]=\"'question_circle_o'\"\n                          [adaptPopover]=\"columnProperty.tooltip.content\"\n                          appendToBody=\"true\"\n                        >\n                        </adapt-icon>\n                      </span>\n                    </div>\n                    <rx-column-editor-alignment\n                      *ngIf=\"columnProperty.name === 'alignment'\"\n                      [isReadOnly]=\"isReadOnly\"\n                      [column]=\"column\"\n                      [columnProperty]=\"columnProperty\"\n                      class=\"flex-fill\"\n                      [ngModel]=\"column.alignment\"\n                      (ngModelChange)=\"markAsDirty()\"\n                      ngDefaultControl\n                    ></rx-column-editor-alignment>\n                  </ng-container>\n                </div>\n\n                <div class=\"d-flex flex-row\">\n                  <rx-stepper-with-units-form-control\n                    class=\"d-block col-5 p-0\"\n                    [options]=\"columnWidthPropertyOptions\"\n                    [(ngModel)]=\"column.width\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-stepper-with-units-form-control>\n\n                  <rx-select-form-control\n                    *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                    class=\"d-block col-5 p-0 pb-2 pl-5\"\n                    [options]=\"typeaheadKeystrokeCountOptions\"\n                    [(ngModel)]=\"column.typeaheadKeystrokeCount\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [disabled]=\"isReadOnly\"\n                  ></rx-select-form-control>\n                </div>\n\n                <rx-expression-form-control\n                  #additionalQueryCriteriaExpression\n                  *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                  rx-id=\"additional-query-criteria-expression\"\n                  class=\"d-block p-0 pb-2\"\n                  [options]=\"column.additionalQueryCriteriaExpressionOptions\"\n                  [(ngModel)]=\"column.additionalQueryCriteria\"\n                  (events)=\"openAdditionalQueryCriteriaExpressionEditor(column, additionalQueryCriteriaExpression)\"\n                  [disabled]=\"isReadOnly\"\n                ></rx-expression-form-control>\n\n                <rx-cell-display-properties\n                  class=\"d-block pb-2\"\n                  [columns]=\"columns\"\n                  [columnName]=\"column.title\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.cellDisplayProperties\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-cell-display-properties>\n\n                <rx-named-filter-options\n                  class=\"d-block pb-2\"\n                  [column]=\"column\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.namedFilterOptions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.named-filter-options-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-named-filter-options>\n\n                <rx-action-list-control\n                  class=\"d-block\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.actions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-actions-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-action-list-control>\n              </ng-template>\n\n              <ng-template #actionsColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field d-block form-group\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <rx-stepper-with-units-form-control\n                  class=\"d-block col-5 p-0\"\n                  [options]=\"columnWidthPropertyOptions\"\n                  [(ngModel)]=\"column.width\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-stepper-with-units-form-control>\n\n                <div class=\"d-flex flex-wrap\">\n                  <div\n                    class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                    *ngFor=\"let actionsColumnProperty of actionsColumnProperties; trackBy: trackByForColumnProperties\"\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"column[actionsColumnProperty.name]\"\n                        (ngModelChange)=\"markAsDirty()\"\n                        [disabled]=\"!isPropertyEditable(column, actionsColumnProperty.name)\"\n                      />\n\n                      <span class=\"checkbox__item\">{{ actionsColumnProperty.label }}</span>\n                    </label>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!columns.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.empty-state.message'\n              | translate\n          }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n"]}