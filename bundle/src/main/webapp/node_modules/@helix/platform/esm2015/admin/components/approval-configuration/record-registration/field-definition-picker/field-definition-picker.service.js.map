{"version":3,"file":"field-definition-picker.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/approval-configuration/record-registration/field-definition-picker/field-definition-picker.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxRecordGridUtilsService } from '@helix/platform/view/components';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { IRecordFields } from './field-definition-picker-component.types';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IValueWithLabel } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxFieldDefinitionPickerService {\n  constructor(\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getAssociatedRecordFields(recordDefinitionName: string): Observable<IRecordFields[]> {\n    return this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName).pipe(\n      switchMap((associationDescriptors: IAssociationDescriptor[]) => {\n        if (associationDescriptors.length) {\n          associationDescriptors.sort((descriptor1, descriptor2) => descriptor1.label.localeCompare(descriptor2.label));\n\n          return forkJoin(\n            associationDescriptors.map((associationDescriptor) => {\n              return this.rxRecordDefinitionCacheService\n                .getRecordDefinition(associationDescriptor.recordDefinitionName)\n                .pipe(\n                  map(\n                    (recordDefinition: IRecordDefinition) =>\n                      ({\n                        fields: this.getFieldDefinitions(recordDefinition.fieldDefinitions, associationDescriptor),\n                        label: associationDescriptor.label,\n                        isAssociatedRecord: true,\n                        isExpanded: false,\n                        value: associationDescriptor.associationDefinition.name,\n                        associationDescriptor: associationDescriptor\n                      } as IRecordFields)\n                  )\n                );\n            })\n          );\n        }\n\n        return of([]);\n      }),\n      shareReplay({\n        bufferSize: 1,\n        refCount: true\n      })\n    );\n  }\n\n  getRecordFields(recordDefinitionName: string): Observable<IRecordFields[]> {\n    return forkJoin([\n      this.getAssociatedRecordFields(recordDefinitionName),\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)\n    ]).pipe(\n      map(([associatedRecordFields, recordDefinition]) => [\n        {\n          fields: this.getFieldDefinitions(recordDefinition.fieldDefinitions, null),\n          isExpanded: true,\n          isAssociatedRecord: false,\n          label: this.rxDefinitionNameService.getDisplayName(recordDefinitionName),\n          value: recordDefinitionName\n        } as IRecordFields,\n        ...associatedRecordFields\n      ]),\n      shareReplay({\n        bufferSize: 1,\n        refCount: true\n      })\n    );\n  }\n\n  private getFieldDefinitions(\n    fieldDefinitions: IFieldDefinition[],\n    associationDescriptor?: IAssociationDescriptor\n  ): IValueWithLabel[] {\n    return fieldDefinitions\n      .filter(\n        (fieldDefinition: IFieldDefinition) =>\n          fieldDefinition.resourceType !== RX_RECORD_DEFINITION.resourceTypes.attachment\n      )\n      .map((fieldDefinition) => {\n        const fieldKey = associationDescriptor\n          ? this.getFieldIdExpression(fieldDefinition.id, associationDescriptor)\n          : fieldDefinition.name;\n\n        return {\n          label: fieldDefinition.name,\n          value: fieldKey\n        };\n      })\n      .sort((field1, field2) => field1.label.localeCompare(field2.label));\n  }\n\n  private getFieldIdExpression(fieldId: string | number, associationDescriptor?: IAssociationDescriptor): string {\n    return `recordContext._associations.${associationDescriptor.associationDefinition.guid}.${associationDescriptor.nodeSide}[0].${fieldId}`;\n  }\n}\n"]}