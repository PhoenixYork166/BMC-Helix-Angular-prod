{"version":3,"file":"action-list-widget.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/designer/form-controls/action-list-widget/action-list-widget.component.ts","../../../../../../../../libs/platform/view/designer/form-controls/action-list-widget/action-list-widget.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAqB,SAAS,EAAE,MAAM,eAAe,CAAC;AAElF,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAA+B,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC5F,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAG3C,OAAO,EAAE,0BAA0B,EAAE,MAAM,sDAAsD,CAAC;AAClG,OAAO,EAAE,aAAa,EAAE,MAAM,MAAM,CAAC;;;;;AASrC,MAAM,OAAO,yBACX,SAAQ,mBAAkF;IAc1F,YAAsB,QAAkB;QACtC,KAAK,CAAC,QAAQ,CAAC,CAAC;QADI,aAAQ,GAAR,QAAQ,CAAU;QAPxC,YAAO,GAA0B,EAAE,CAAC;QAEpC,aAAa;QACb,iBAAY,GAAgC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;QAEnE,eAAU,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;IAInD,CAAC;IAED,QAAQ;QACN,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAA+B,CAAC;QAErF,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC;IAED,eAAe,CAAC,OAA8B;QAC5C,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAEO,0BAA0B,CAAC,qBAA4C;QAC7E,OAAO,qBAAqB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,iBAC1C,IAAI,EAAE,mBAAmB,CAAC,MAAM,IAC7B,KAAK,EACR,CAAC,CAAC;IACN,CAAC;;sHA7CU,yBAAyB;0GAAzB,yBAAyB,yHAIzB,0BAA0B,uECrBvC,0NAMA;2FDWa,yBAAyB;kBAJrC,SAAS;mBAAC;oBACT,QAAQ,EAAE,uBAAuB;oBACjC,WAAW,EAAE,qCAAqC;iBACnD;+FAMC,0BAA0B;sBADzB,SAAS;uBAAC,0BAA0B","sourcesContent":["import { Component, Injector, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IFormFocusable, IFormWidgetComponent } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { IViewActionDesignProperties, RxViewComponentType } from '@helix/platform/view/api';\nimport { takeUntil } from 'rxjs/operators';\nimport { ViewDesignerComponentModel } from '../../model/view-designer-component-model.class';\nimport { IViewComponentDesignSandbox } from '../../public-interfaces/view-component-design-sandbox.interface';\nimport { ActionListControlComponent } from '../action-list-control/action-list-control.component';\nimport { ReplaySubject } from 'rxjs';\nimport { IActionListWidgetComponentOptions } from './action-list-widget.types';\nimport { IViewActionListItem } from '../action-list-control/action-list-control.types';\nimport { IViewComponentDesignSetPayload } from '../../public-interfaces/view-component-design.types';\n\n@Component({\n  selector: 'rx-action-list-widget',\n  templateUrl: './action-list-widget.component.html'\n})\nexport class ActionListWidgetComponent\n  extends InspectorWidgetBase<IActionListWidgetComponentOptions, ViewDesignerComponentModel>\n  implements OnInit, OnDestroy, IFormWidgetComponent, IFormFocusable\n{\n  @ViewChild(ActionListControlComponent)\n  actionListControlComponent: ActionListControlComponent;\n\n  options: IActionListWidgetComponentOptions;\n  actions: IViewActionListItem[] = [];\n\n  // @ts-ignore\n  modelSandbox: IViewComponentDesignSandbox = this.designerItemModel.sandbox;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(protected injector: Injector) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    const actions$ = this.modelSandbox.getChildComponents<IViewActionDesignProperties>();\n\n    actions$.pipe(takeUntil(this.destroyed$)).subscribe((actions) => {\n      this.actions = actions;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  onActionsChange(actions: IViewActionListItem[]): void {\n    this.modelSandbox.setChildren(this.getActionComponentPayloads(actions));\n  }\n\n  focus(data): void {\n    this.actionListControlComponent.focus(data);\n  }\n\n  private getActionComponentPayloads(actionInspectorModels: IViewActionListItem[]): IViewComponentDesignSetPayload[] {\n    return actionInspectorModels.map((model) => ({\n      type: RxViewComponentType.Action,\n      ...model\n    }));\n  }\n}\n","<rx-action-list-control\n  [disabled]=\"modelSandbox.isViewReadOnly$ | async\"\n  [(ngModel)]=\"actions\"\n  (ngModelChange)=\"onActionsChange($event)\"\n  [tooltip]=\"options?.tooltip\"\n></rx-action-list-control>\n"]}