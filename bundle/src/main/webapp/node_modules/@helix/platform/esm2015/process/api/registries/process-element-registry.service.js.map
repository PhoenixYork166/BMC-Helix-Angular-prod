{"version":3,"file":"process-element-registry.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/api/registries/process-element-registry.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAA4B,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAGpF,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;;;AAOvE,MAAM,OAAO,+BAA+B;IAG1C,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAFtC,uBAAkB,GAA2C,IAAI,GAAG,EAAE,CAAC;IAE9B,CAAC;IAElD,GAAG,CAAC,IAAY;;QACd,OAAO,CACL,MAAA,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,mCACjC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CACrF,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,QAAQ,CAAC,UAAqC;QAC5C,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAChD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,mBAAmB,UAAU,CAAC,IAAI,yBAAyB,CAAC,CAAC;SACxF;aAAM;YACL,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YACxF,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,aAAa,EAAE,UAAU,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAEhG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SAC1D;IACH,CAAC;;4HAzBU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { IDesignerElementRegistry, RxLogService } from '@helix/platform/shared/api';\n\nimport { IProcessElementDescriptor } from './process-element-descriptor.interface';\nimport { RX_PROCESS_DEFINITION } from '../process-definition.constant';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementRegistryService implements IDesignerElementRegistry {\n  private elementDescriptors: Map<string, IProcessElementDescriptor> = new Map();\n\n  constructor(private rxLogService: RxLogService) {}\n\n  get(type: string): IProcessElementDescriptor {\n    return (\n      this.elementDescriptors.get(type) ??\n      this.elementDescriptors.get(RX_PROCESS_DEFINITION.processElementTypes.processAction)\n    );\n  }\n\n  getAll(): IProcessElementDescriptor[] {\n    return Array.from(this.elementDescriptors.values());\n  }\n\n  register(descriptor: IProcessElementDescriptor): void {\n    if (this.elementDescriptors.has(descriptor.type)) {\n      this.rxLogService.warning(`Process element ${descriptor.type} is already registered.`);\n    } else {\n      joint.util.setByPath(joint.shapes.rx, descriptor.shapeType, descriptor.shapeClass, '.');\n      joint.util.setByPath(joint.shapes.rx, descriptor.viewShapeType, descriptor.viewShapeClass, '.');\n\n      this.elementDescriptors.set(descriptor.type, descriptor);\n    }\n  }\n}\n"]}