{"version":3,"file":"view-preset-selector-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  ISwitcherFormControlOptions,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { IViewPresetSelectorDesignProperties } from './view-preset-selector-design.types';\nimport { PresetsListWidgetComponent } from './presets-list-widget/presets-list-widget.component';\nimport { RxFeatureService } from '@helix/platform/shared/api';\nimport { RX_SHARABLE_VIEW_RESETS_FEATURE_NAME } from '../view-preset-selector.types';\n\nexport class ViewPresetSelectorDesignModel\n  extends ViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n  implements IViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n{\n  sandbox: IViewComponentDesignSandbox<IViewPresetSelectorDesignProperties>;\n  presetComponentGuids$ = this.sandbox.getChildComponentGuids();\n\n  otherPresetSelectorsNames$: Observable<string[]> = this.sandbox\n    .getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector)\n    .pipe(\n      map((selectors) =>\n        selectors\n          .filter((component) => component.guid !== this.sandbox.guid)\n          .map((component) => component.data.name.trim())\n      )\n    );\n\n  label$: Observable<string> = this.sandbox.getChildComponents().pipe(\n    map((components) => components.sort((a, b) => a.data.index - b.data.index)),\n    map((components) => (components[0] ? components[0].data.label : 'No view presets added')),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  private rxFeatureService = this.injector.get(RxFeatureService);\n\n  static getInitialProperties(\n    initialProperties?: IViewPresetSelectorDesignProperties\n  ): IViewPresetSelectorDesignProperties {\n    return {\n      name: 'View preset selector',\n      styles: null,\n      enableSharing: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.updateInspectorConfig(this.setInspectorConfig());\n\n    combineLatest([this.sandbox.componentProperties$, this.presetComponentGuids$])\n      .pipe(\n        withLatestFrom(this.otherPresetSelectorsNames$),\n        map(([[componentProperties, presetGuids], otherPresetSelectorsNames]) =>\n          this.validate(componentProperties, presetGuids, otherPresetSelectorsNames)\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  private setInspectorConfig(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                required: true\n              }\n            },\n            {\n              component: PresetsListWidgetComponent,\n              widgetName: 'presetsList'\n            },\n            this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME)\n              ? {\n                  name: 'enableSharing',\n                  component: SwitchFormControlComponent,\n                  options: {\n                    label: 'Enable sharing'\n                  } as ISwitcherFormControlOptions\n                }\n              : null,\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig()\n          ].filter(Boolean)\n        }\n      ]\n    };\n  }\n\n  private validate(\n    model: IViewPresetSelectorDesignProperties,\n    presetGuids: string[],\n    otherPresetSelectorsNames: string[]\n  ): IViewComponentDesignValidationIssue[] {\n    let validationIssues = [];\n\n    const trimmedModelName = model.name.trim();\n\n    if (!trimmedModelName) {\n      validationIssues.push(this.sandbox.createError('Name cannot be blank.', 'name'));\n    } else if (otherPresetSelectorsNames.includes(trimmedModelName)) {\n      validationIssues.push(this.sandbox.createError('Name must be unique.', 'name'));\n    }\n\n    if (!presetGuids.length) {\n      validationIssues.push(this.sandbox.createError('At least one view preset must be added.', 'presetsList'));\n    }\n\n    validationIssues = validationIssues.concat(validateStandardProps(model));\n\n    return validationIssues;\n  }\n}\n"]}