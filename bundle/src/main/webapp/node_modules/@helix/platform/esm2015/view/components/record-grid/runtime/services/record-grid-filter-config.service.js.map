{"version":3,"file":"record-grid-filter-config.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter-config.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterNumberDataType,\n  AdvancedFilterNumberTypeParams,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionDataType,\n  AdvancedFilterSelectionTypeData,\n  AdvancedFilterStringDataType,\n  booleanDataTypeBlankValue,\n  NumberOrBigNumber,\n  RxSelectOption,\n  SelectedAdvancedFilter\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  ISelectionFieldDefinition,\n  RecordFieldOption,\n  RX_RECORD_DEFINITION,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { IPlainObject, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RxNumberUtilsService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castArray, chain, compact, find, get, isEmpty, isString, map as _map } from 'lodash';\nimport moment from 'moment-es6';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport {\n  ITagInfo,\n  IRecordGridFilterConfig,\n  IRecordGridFilterConfigs\n} from '../../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterData,\n  IRecordGridFilterOperator,\n  IRecordGridNamedFilterOption,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { IRecordGridColumnNamedFilterOption, RxAdvancedFilterDateDataType } from '../../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, NamedListTypeAheadOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridFilterConfigService {\n  private associatedFieldIdPatternRegExp: RegExp = new RegExp(\n    `'(${RX_RECORD_GRID.associatedFieldIdPrefixPattern}\\\\d+)'`,\n    'g'\n  );\n\n  constructor(\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxNumberUtilsService: RxNumberUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private translateService: TranslateService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getConfigs(): IRecordGridFilterConfigs {\n    const textColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.string,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n        const builtQuery = chain(filterTag.value.filterValue)\n          .filter(Boolean)\n          .map((optionValue: NamedListTypeAheadOption) => {\n            const { isLikeOperation, filterValue } = this.rxRecordGridFilterService.getStringDataTypeFilterData(\n              get(optionValue, 'value', optionValue),\n              fieldDefinition\n            );\n\n            return this.rxRecordGridFilterService.buildQueryFilter(\n              fieldId,\n              isLikeOperation ? 'like' : '=',\n              filterValue.trim()\n            );\n          })\n          .concat(selectedNamedOptionExpressions)\n          .value();\n\n        return this.rxRecordGridFilterService.joinQueryFilters(builtQuery, QueryFiltersLogic.Or);\n      },\n      getRecordGridFilterData: (value, fieldDefinition, fieldId, namedFilterOptions) => {\n        const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n        const filterOperators = value.filterValue.map(\n          (filterValue: NamedListTypeAheadOption): IRecordGridFilterOperator => {\n            const operators = this.getRecordGridFilterOperator(\n              RecordGridFilterOperator.Eq,\n              fieldId,\n              get(filterValue, 'value', filterValue).trim()\n            );\n\n            const displayValue = get(filterValue, 'displayValue');\n\n            if (fieldDefinition.namedListDefinition && displayValue) {\n              operators.eq['$DISPLAYVALUE$'] = displayValue;\n            }\n\n            return operators;\n          }\n        );\n\n        return {\n          or: filterOperators.concat(namedFilterOptionOperators)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        const filterValues: string[] = [];\n        const namedListFilterValues: INamedListOption[] = [];\n        const namedFilterOptionsGuids = [];\n\n        if (filterLogic === RecordGridFilterDataLogic.Or) {\n          filterOperators.forEach((filterOperator: IRecordGridFilterOperator) => {\n            const operator = Object.keys(filterOperator)[0];\n            const value = filterOperator[operator][fieldId];\n\n            if (isString(value)) {\n              if (fieldDefinition.namedListDefinition) {\n                const displayValue = filterOperator[operator]['$DISPLAYVALUE$'];\n\n                namedListFilterValues.push({ displayValue, value, title: '', contextualFields: [] });\n              } else {\n                filterValues.push(value);\n              }\n            } else if (value[RecordGridNamedFilterOptionKey]) {\n              namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n            }\n          });\n        }\n\n        const rxRecordGridAdvancedFilterValue = isEmpty(namedListFilterValues)\n          ? new RxRecordGridAdvancedFilterValue(filterValues, namedFilterOptionsGuids)\n          : new RxRecordGridAdvancedFilterValue(namedListFilterValues, namedFilterOptionsGuids);\n\n        return {\n          filterOptionId: fieldId,\n          value: rxRecordGridAdvancedFilterValue\n        };\n      },\n      getToolbarTagInfo: ({ primaryRecordDefinition, value, tag, fieldId, namedFilterOptions }) => {\n        const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(fieldId);\n        let associationDescriptor: IAssociationDescriptor;\n\n        return this.rxRecordGridUtilsService.getAssociationDescriptor(fieldId, primaryRecordDefinition).pipe(\n          mergeMap((loadedAssociationDescriptor) => {\n            associationDescriptor = loadedAssociationDescriptor;\n\n            return this.rxRecordGridUtilsService.getDisplayFieldDescriptor(\n              fieldId,\n              primaryRecordDefinition,\n              associationDescriptor && associationDescriptor.recordDefinitionName\n            );\n          }),\n          mergeMap((displayFieldDefinition) => {\n            const isRecordDisplayField = fieldLocator.fieldId !== String(displayFieldDefinition.id);\n\n            let displayValuesData$: Observable<{\n              displayValues: RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>;\n              label: string;\n            }>;\n\n            if (isRecordDisplayField) {\n              const filterValues = this.rxNamedListService.getNamesFromTypeAheadOptions(value.filterValue);\n\n              displayValuesData$ = this.rxRecordInstanceUtilsService\n                .getFieldValues(associationDescriptor.recordDefinitionName, filterValues, [\n                  String(RX_RECORD_DEFINITION.coreFieldIds.id),\n                  String(displayFieldDefinition.id)\n                ])\n                .pipe(\n                  map((displayValueRows) => {\n                    const nameWithAssociationLabel = compact([\n                      this.rxDefinitionNameService.getDisplayName(associationDescriptor.associationDefinition.name),\n                      displayFieldDefinition.name\n                    ]).join(' > ');\n\n                    const displayValues = value.filterValue.map((strFilterValue) => {\n                      const row = find(\n                        displayValueRows,\n                        (displayValueRow) => displayValueRow[RX_RECORD_DEFINITION.coreFieldIds.id] === strFilterValue\n                      );\n\n                      return row ? row[displayFieldDefinition.id] : strFilterValue;\n                    });\n\n                    return {\n                      displayValues: new RxRecordGridAdvancedFilterValue(displayValues),\n                      label: nameWithAssociationLabel\n                    };\n                  })\n                );\n            } else {\n              displayValuesData$ = of({ displayValues: value, label: tag.data.filterOption.label });\n            }\n\n            return displayValuesData$.pipe(\n              map(({ displayValues, label }) => {\n                const displayTagValue = displayValues.filterValue\n                  .map((filterValue) => {\n                    const filterValueExpression: string = get(filterValue, 'value', filterValue);\n\n                    const filterDisplayText: string =\n                      get(filterValue, 'displayValue') ?? get(filterValue, 'value', filterValue);\n\n                    const text =\n                      filterValueExpression === '$USER$'\n                        ? this.translateService.instant(\n                            'com.bmc.arsys.rx.client.view-components.record-grid.filters.me.label'\n                          )\n                        : filterDisplayText;\n\n                    const tooltip = filterValue?.displayValue\n                      ? `${filterValue.displayValue} (${filterValue.value})`\n                      : filterValue?.value ?? filterValue;\n\n                    return { tooltip, text } as ITagInfo;\n                  })\n                  .concat(\n                    displayValues.namedOptions.map((namedOption: string) => {\n                      const namedFilterOption =\n                        namedFilterOptions.find((option) => option.guid === namedOption)?.title || namedOption;\n\n                      return { text: namedFilterOption, tooltip: namedFilterOption } as ITagInfo;\n                    })\n                  );\n\n                const displayText = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.text).join(', ');\n                const tooltip = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.tooltip).join(', ');\n\n                return {\n                  text: `${label}: ${displayText}`,\n                  tooltip: `${label}: ${tooltip}`\n                };\n              })\n            );\n          })\n        );\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => fieldDefinition\n    };\n\n    const numericColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterNumberDataType>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.number,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n        const [fromValue, toValue] = filterTag.value.filterValue;\n        const queries: string[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', String(toValue)));\n        }\n\n        const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n        return this.rxRecordGridFilterService.joinQueryFilters(\n          valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n          QueryFiltersLogic.Or\n        );\n      },\n      getRecordGridFilterData: (value, fieldDefinition: IFieldDefinition, fieldId) => {\n        const [fromValue, toValue] = value.filterValue;\n        const queries: IRecordGridFilterOperator[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, String(toValue)));\n        }\n\n        return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): AdvancedFilterNumberTypeParams => {\n        return {\n          minValue: <NumberOrBigNumber>(<unknown>fieldDefinition.minValue),\n          maxValue: <NumberOrBigNumber>(<unknown>fieldDefinition.maxValue)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        /**\n         * Convert from:\n         *\n         *  \"and\": [\n         *    {\n         *      \"gte\": {\n         *        \"536870917\": -5\n         *      }\n         *    },\n         *    {\n         *      \"lte\": {\n         *        \"536870917\": -1 // or \"-1\"\n         *      }\n         *    }\n         *  ]\n         *\n         * to:\n         *\n         * {\n         *   filterOptionId: '536870917',\n         *   value: [-5, -1]\n         * }\n         *\n         */\n        let filterValue: AdvancedFilterNumberDataType = [null, null];\n\n        const processRange = (operators: IRecordGridFilterOperator[]) => {\n          const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n          if (gteOperator) {\n            const fromValue = parseFloat(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n              filterValue[0] = fromValue;\n            }\n          }\n\n          const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n          if (lteOperator) {\n            const toValue = parseFloat(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n              filterValue[1] = toValue;\n            }\n          }\n        };\n\n        if (filterLogic === RecordGridFilterDataLogic.And) {\n          processRange(filterOperators);\n        } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n          const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n          if (andOperator) {\n            processRange(andOperator[RecordGridFilterDataLogic.And]);\n          } else if (filterOperators.length === 1) {\n            let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n            if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n              eqValue = parseFloat(eqValue);\n\n              filterValue = [eqValue, eqValue];\n            }\n          }\n        }\n\n        const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n        return {\n          filterOptionId: fieldId,\n          value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n        };\n      }\n    };\n\n    return {\n      [RX_RECORD_DEFINITION.resourceTypes.character]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.attachment]: textColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.integer]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.decimal]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.real]: numericColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.selection]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterSelectionDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.selection,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            filterTag.value.filterValue\n              .map((filterValue) => this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', filterValue))\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getDataForAdvancedFilter: (fieldDefinition: ISelectionFieldDefinition): AdvancedFilterSelectionTypeData => {\n          const selectOptions: RxSelectOption[] = _map(\n            fieldDefinition.optionLabelsById,\n            (label, optionId): RxSelectOption => ({\n              id: optionId,\n              name: label\n            })\n          );\n\n          if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.optional) {\n            selectOptions.unshift({\n              id: '$NULL$',\n              name: this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n              )\n            });\n          }\n\n          return {\n            selectOptions,\n            selectTexts: null\n          };\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n          return {\n            or: value.filterValue\n              .map((optionId): IRecordGridFilterOperator => {\n                return this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, optionId);\n              })\n              .concat(namedFilterOptionOperators)\n          };\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          const filterValue: string[] = [];\n          const namedFilterOptionsGuids = [];\n\n          if (filterLogic === RecordGridFilterDataLogic.Or) {\n            filterOperators.forEach((filterOperator) => {\n              const operator = Object.keys(filterOperator)[0];\n\n              if (operator === RecordGridFilterOperator.Eq) {\n                const value = filterOperator[operator][fieldId];\n\n                if (isString(value)) {\n                  filterValue.push(value);\n                } else if (value[RecordGridNamedFilterOptionKey]) {\n                  namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n                }\n              }\n            });\n          }\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionsGuids)\n          };\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.timeOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.time,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('HH:mm:ss')));\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('HH:mm:ss')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n          const processRange = (operators: IRecordGridFilterOperator[]) => {\n            const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n            if (gteOperator) {\n              const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId], 'LTS');\n\n              if (fromValue.isValid()) {\n                filterValue[0] = fromValue;\n              }\n            }\n\n            const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n            if (lteOperator) {\n              const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId], 'LTS');\n\n              if (toValue.isValid()) {\n                filterValue[1] = toValue;\n              }\n            }\n          };\n\n          if (filterLogic === RecordGridFilterDataLogic.And) {\n            processRange(filterOperators);\n          } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n            const andOperator = find(\n              filterOperators,\n              (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]\n            );\n\n            if (andOperator) {\n              processRange(andOperator[RecordGridFilterDataLogic.And]);\n            } else if (filterOperators.length === 1) {\n              let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n              if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n                eqValue = moment(eqValue, 'LTS');\n\n                filterValue = [eqValue, eqValue];\n              }\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n          };\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.date,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(\n              this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('YYYY-MM-DD'))\n            );\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('YYYY-MM-DD')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateTime]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.datetime,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.toISOString()));\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.toISOString()));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, fromValue.toISOString())\n            );\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, toValue.toISOString())\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.boolean]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.boolean,\n        getQueryFilter: (\n          filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string,\n          namedFilterOptions\n        ): string => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            castArray(filterTag.value.filterValue)\n              .map((filterValue) =>\n                this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', this.getBooleanFilterValue(filterValue))\n              )\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (\n          value: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ): IRecordGridFilterData => {\n          return {\n            or: castArray(value.filterValue)\n              .map(\n                (filterValue): IRecordGridFilterOperator =>\n                  this.getRecordGridFilterOperator(\n                    RecordGridFilterOperator.Eq,\n                    fieldId,\n                    this.getBooleanFilterValue(filterValue)\n                  )\n              )\n              .concat(this.getNamedFilterOptionsOperators(value, fieldId))\n          };\n        },\n        getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => {\n          return {\n            selectOptions: [\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.true'),\n                id: true\n              },\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.false'),\n                id: false\n              },\n              {\n                name: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n                ),\n                id: 'blank'\n              }\n            ],\n            isRequired: fieldDefinition.fieldOption === RecordFieldOption.Required\n          };\n        },\n        getSelectedAdvancedFilterData: (\n          filterLogic: RecordGridFilterDataLogic,\n          filterOperators: IRecordGridFilterOperator[],\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ) => {\n          let filterValue;\n\n          if (fieldDefinition.fieldOption === RecordFieldOption.Required) {\n            if (filterOperators.length === 1) {\n              const eqOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterOperator.Eq]);\n\n              if (eqOperator) {\n                const savedFilterValue = eqOperator[RecordGridFilterOperator.Eq][fieldId];\n\n                if (savedFilterValue === '$NULL$') {\n                  filterValue = null;\n                } else {\n                  filterValue = [savedFilterValue === 'true'];\n                }\n              }\n            } else {\n              filterValue = null;\n            }\n          } else {\n            filterValue = [];\n\n            if (filterLogic === RecordGridFilterDataLogic.Or) {\n              filterOperators.forEach((filterOperator) => {\n                const operator = Object.keys(filterOperator)[0];\n\n                if (operator === RecordGridFilterOperator.Eq) {\n                  const value = filterOperator[operator][fieldId];\n\n                  if (!value[RecordGridNamedFilterOptionKey]) {\n                    switch (value) {\n                      case 'true':\n                        filterValue.push(true);\n                        break;\n                      case '$NULL$':\n                        filterValue.push(booleanDataTypeBlankValue);\n                        break;\n                      default:\n                        filterValue.push(false);\n                        break;\n                    }\n                  }\n                }\n              });\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return filterValue\n            ? {\n                filterOptionId: fieldId,\n                value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n              }\n            : null;\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstance]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.object]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstanceProcessVariable]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance]: null\n    };\n  }\n\n  private getDateSelectedAdvancedFilterData(\n    fieldId: string,\n    filterLogic: RecordGridFilterDataLogic,\n    filterOperators: IRecordGridFilterOperator[]\n  ): SelectedAdvancedFilter {\n    let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n    const processRange = (operators: IRecordGridFilterOperator[]) => {\n      const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n      if (gteOperator) {\n        const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n        if (fromValue.isValid()) {\n          filterValue[0] = fromValue;\n        }\n      }\n\n      const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n      if (lteOperator) {\n        const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n        if (toValue.isValid()) {\n          filterValue[1] = toValue;\n        }\n      }\n    };\n\n    if (filterLogic === RecordGridFilterDataLogic.And) {\n      processRange(filterOperators);\n    } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n      const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n      if (andOperator) {\n        processRange(andOperator[RecordGridFilterDataLogic.And]);\n      } else if (filterOperators.length === 1) {\n        let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n        if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n          eqValue = moment(eqValue);\n\n          filterValue = [eqValue, eqValue];\n        }\n      }\n    }\n\n    return {\n      filterOptionId: fieldId,\n      value: new RxRecordGridAdvancedFilterValue(filterValue, this.getNamedFilterOptionGuids(filterOperators, fieldId))\n    };\n  }\n\n  private getFilterRangeDataOperator(\n    queries: IRecordGridFilterOperator[],\n    namedFilterOptionOperators: IRecordGridFilterOperator[]\n  ): IRecordGridFilterData {\n    const andOperator = {\n      and: queries\n    };\n\n    if (namedFilterOptionOperators.length) {\n      return {\n        or: queries.length ? namedFilterOptionOperators.concat(andOperator) : namedFilterOptionOperators\n      };\n    } else {\n      return andOperator;\n    }\n  }\n\n  private getNamedFilterOptionGuids(filterOperators: IRecordGridFilterOperator[], fieldId: string): string[] {\n    return filterOperators\n      .filter((filterOperator) => filterOperator[RecordGridFilterOperator.Eq])\n      .map((operator) => {\n        const operatorElementElement = operator[RecordGridFilterOperator.Eq][fieldId];\n\n        return operatorElementElement ? operatorElementElement[RecordGridNamedFilterOptionKey] : null;\n      })\n      .filter((guid) => Boolean(guid));\n  }\n\n  private getSelectedNamedOptionExpressions(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>\n  ): string[] {\n    return namedFilterOptions\n      .filter((option) => filterTag.value.namedOptions.includes(option.guid))\n      .map((option) => option.filterExpression.replace(this.associatedFieldIdPatternRegExp, '${$1}'));\n  }\n\n  private getNamedFilterOptionsOperators(\n    value: RxRecordGridAdvancedFilterValue,\n    fieldId: string\n  ): IRecordGridFilterOperator[] {\n    return value.namedOptions.map((guid) =>\n      this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, {\n        [RecordGridNamedFilterOptionKey]: guid\n      } as IRecordGridNamedFilterOption)\n    );\n  }\n\n  private getRecordGridFilterOperator(operator: string, fieldId: string, value: any): IRecordGridFilterOperator {\n    return { [operator]: { [fieldId]: value } };\n  }\n\n  private getBooleanFilterValue(filterValue: boolean | string): string {\n    return filterValue ? (filterValue === booleanDataTypeBlankValue ? '$NULL$' : 'true') : 'false';\n  }\n}\n"]}