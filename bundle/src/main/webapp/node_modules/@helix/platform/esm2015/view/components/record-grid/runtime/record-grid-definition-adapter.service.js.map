{"version":3,"file":"record-grid-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/runtime/record-grid-definition-adapter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { chain, filter, without } from 'lodash';\n\nimport { IDefinitionAdapter, IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { ActionButtonSize, ActionButtonStyle } from '../../action-button/action-button.types';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\n\n@Injectable()\nexport class RxRecordGridDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService\n  ) {}\n\n  adaptDefinition(\n    recordGridContainerViewComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): void {\n    const cellDisplayPropertiesList = recordGridContainerViewComponentDefinition.componentDefinitions\n      .filter(({ type }) => type === RX_RECORD_GRID.components.column)\n      .map(({ propertiesByName }) => propertiesByName.cellDisplayProperties)\n      .filter(Boolean);\n\n    this.viewDefinitionParserService\n      .getComponents(recordGridContainerViewComponentDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        switch (componentDefinition.type) {\n          case RX_RECORD_GRID.type: {\n            componentDefinition.propertiesByName.enableFilterPresets =\n              componentDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n            componentDefinition.propertiesByName.requiredFilters =\n              componentDefinition.propertiesByName.requiredFilters ??\n              (componentDefinition.propertiesByName['requireFiltering'] === 'true' ? 1 : 0);\n\n            const layout = this.rxJsonParserService.tryParseJson<IViewLayout>(componentDefinition.layout);\n\n            const actionButtons = filter(componentDefinition.componentDefinitions, {\n              type: RxViewComponentType.ActionButton\n            });\n\n            const rowActionButtons = this.getActionButtonsForOutlet(\n              layout,\n              RX_RECORD_GRID.rowActionsOutletName,\n              actionButtons\n            );\n\n            rowActionButtons.forEach((action) => {\n              action.propertiesByName = { ...action.propertiesByName, cls: 'dropdown-item', styles: 'p-0' };\n            });\n\n            without(actionButtons, ...rowActionButtons).forEach((actionButton) => {\n              if (\n                [ActionButtonStyle.Primary, ActionButtonStyle.Secondary].includes(actionButton.propertiesByName.style)\n              ) {\n                actionButton.propertiesByName.size = ActionButtonSize.Small;\n              }\n            });\n\n            break;\n          }\n          case RX_RECORD_GRID.components.column: {\n            let isReferenced = null;\n\n            if (\n              !this.rxRecordGridConfigUtilsService.getBooleanValue(\n                recordGridContainerViewComponentDefinition.propertiesByName.getDataForHiddenColumns\n              )\n            ) {\n              const recordGridGuid = recordGridContainerViewComponentDefinition.guid;\n              const columnFieldId = componentDefinition.propertiesByName.fieldId;\n\n              const isReferencedInExpression = viewDefinition.viewComponentExpressions.some(\n                (expression) =>\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.firstSelectedRow.${columnFieldId}`) ||\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.clickableRow.${columnFieldId}`)\n              );\n\n              const isReferencedInCellDisplayProperties = cellDisplayPropertiesList.some((cellDisplayProperties) =>\n                cellDisplayProperties.includes(`\\$\\{view.components.grid.clickableRow.${columnFieldId}`)\n              );\n\n              isReferenced = isReferencedInExpression || isReferencedInCellDisplayProperties;\n            }\n\n            const adaptedProperties = {\n              actions: [],\n              clickable: false,\n              guid: componentDefinition.guid,\n              wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n              referenced: isReferenced,\n              typeaheadKeystrokeCount:\n                componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            };\n\n            const actions = filter(componentDefinition.componentDefinitions, {\n              type: 'rx-action'\n            }).map((action) => action.propertiesByName);\n\n            if (actions.length) {\n              adaptedProperties.clickable = true;\n              adaptedProperties.actions = actions;\n            }\n\n            Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n            break;\n          }\n          case RX_RECORD_GRID.components.filterPreset:\n          case RX_RECORD_GRID.components.filter: {\n            Object.assign(componentDefinition.propertiesByName, {\n              guid: componentDefinition.guid\n            });\n            break;\n          }\n        }\n      });\n  }\n\n  private getActionButtonsForOutlet(\n    layout: IViewLayout,\n    outletName: string,\n    actionButtons: AnyViewComponentDefinition<IPlainObject>[]\n  ): AnyViewComponentDefinition<IPlainObject>[] {\n    const actionButtonsGuids: string[] = chain(layout.outlets)\n      .filter({\n        name: outletName\n      })\n      .head()\n      .get('columns[0].children', [])\n      .value();\n\n    return filter(actionButtons, (actionButton) => actionButtonsGuids.includes(actionButton.guid));\n  }\n}\n"]}