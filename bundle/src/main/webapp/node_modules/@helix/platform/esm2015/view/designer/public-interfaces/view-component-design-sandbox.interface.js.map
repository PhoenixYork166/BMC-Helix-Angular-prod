{"version":3,"file":"view-component-design-sandbox.interface.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/public-interfaces/view-component-design-sandbox.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  ViewComponentAddComponentPayload\n} from './view-component-design.types';\nimport { IViewComponentDesignValidationIssue } from './view-component-design-validation-issue.interface';\nimport { IViewDesignerInspectorConfig } from './view-designer-inspector.types';\nimport { IViewDesignModel } from '../interfaces/view-design-model.interface';\nimport { IViewComponentDesignCommonDataDictionaryBranch } from './view-component-design-common-data-dictionary.interfaces';\nimport { IViewComponentDesignSettablePropertiesDataDictionary } from './view-component-design-settable-properties-data-dictionary.interfaces';\nimport { IViewComponentDescriptor, IViewDesignerComponentModel, IViewLayout } from '@helix/platform/view/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\nexport interface IViewComponentDesignSandbox<TDesignComponentProperties = IPlainObject> {\n  readonly descriptor: IViewComponentDescriptor;\n  readonly guid: string;\n  readonly componentProperties$: Observable<TDesignComponentProperties>;\n  readonly isComponentSelected$: Observable<boolean>;\n  readonly destroyed$: Observable<boolean>;\n  readonly viewModelsInitialized$: Observable<any>;\n  readonly isViewReadOnly$: Observable<boolean>;\n  readonly componentType: string;\n\n  createError(\n    description: string,\n    propertyName?: string,\n    disableCorrection?: boolean\n  ): IViewComponentDesignValidationIssue;\n\n  createWarning(\n    description: string,\n    propertyName?: string,\n    disableCorrection?: boolean\n  ): IViewComponentDesignValidationIssue;\n\n  getChildComponentGuids(\n    filterPredicate?: (component: IViewComponentDesignData) => boolean,\n    recursive?: boolean\n  ): Observable<string[]>;\n\n  getComponent<TChildComponentDesignProperties = IPlainObject>(\n    guid: string\n  ): Observable<IViewComponentDesignData<TChildComponentDesignProperties>>;\n\n  getChildComponents<TChildComponentDesignProperties = IPlainObject>(\n    filterPredicate?: (component: IViewComponentDesignData) => boolean\n  ): Observable<Omit<IViewComponentDesignData<TChildComponentDesignProperties>, 'children'>[]>;\n\n  getChildComponentsTree(): Observable<IViewComponentDesignData[]>;\n\n  setChildren(components: IViewComponentDesignSetPayload[], parentGuid?: string): void;\n\n  /**\n   * Will update only first level child components with provided types,\n   * components with other types will not be changed\n   * Useful when host component has child components of different types\n   * @internal\n   */\n  setChildrenByType(components: IViewComponentDesignSetPayload[], types: string[]): void;\n\n  getParentComponentGuid(componentType?: string): Observable<string>;\n\n  setValidationIssues(issues: IViewComponentDesignValidationIssue[]): void;\n\n  updateComponentProperties(componentProperties: Partial<TDesignComponentProperties>): void;\n\n  getComponentPropertyValue<TPropertyName extends keyof TDesignComponentProperties>(\n    propertyName: TPropertyName\n  ): Observable<TDesignComponentProperties[TPropertyName]>;\n\n  getComponentPropertyValue<\n    TPropertyName extends keyof TExternalDesignComponentProperties,\n    TExternalDesignComponentProperties = IPlainObject\n  >(\n    propertyName: TPropertyName,\n    componentGuid: string\n  ): Observable<TExternalDesignComponentProperties[TPropertyName]>;\n\n  getViewPropertyValue<T extends keyof IViewDesignModel>(propertyName: T): Observable<IViewDesignModel[T]>;\n\n  updateInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): void;\n\n  setBreadcrumbs(label: string);\n\n  addComponent(data: ViewComponentAddComponentPayload | ViewComponentAddComponentPayload[]): void;\n\n  selectComponent(guid: string): void;\n\n  removeComponents(guids: string[], selectParent?: boolean): void;\n\n  moveComponent(guid: string, insertIndex: number, parentGuid: string): void;\n\n  setLayout(cols: number[]): void;\n\n  getLayout(guid: string): Observable<IViewLayout>;\n\n  setCommonDataDictionary(dataDictionaryBranch: IViewComponentDesignCommonDataDictionaryBranch): void;\n\n  setSettablePropertiesDataDictionary(\n    componentName: string,\n    dataDictionary: IViewComponentDesignSettablePropertiesDataDictionary\n  ): void;\n\n  getComponentModel<T extends IViewDesignerComponentModel>(guid: string): T;\n\n  getComponentsByType<TComponentDesignProperties>(\n    type: string\n  ): Observable<IViewComponentDesignData<TComponentDesignProperties>[]>;\n}\n"]}