{"version":3,"file":"approval-configuration.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/approval-configuration/approval-configuration.types.ts"],"names":[],"mappings":"","sourcesContent":["import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { IAssociationTree } from '@helix/platform/association/api';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { JustificationRequirement } from '@helix/platform/shared/api';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nexport interface ISelfApprovalConfiguration {\n  id?: string;\n  auditText: string;\n  precedence: number;\n  description: string;\n  qualification: string;\n  approvalFlowName: string;\n  recordDefinition: string;\n  approvalMappingRecordDefinition: string;\n  approvalFlowProcessDefinitionGUID: string;\n}\n\nexport interface IFieldResponse {\n  [fieldId: number]: string;\n}\n\nexport interface IAssociationsByDefinitionName {\n  [definitionName: string]: IAssociationTree[];\n}\n\nexport interface IDataParams {\n  definitionName: string;\n  definitions: IRecordDefinition[];\n  association?: IAssociationTree;\n  associationsByDefinition?: IAssociationsByDefinitionName;\n  parentAssociationExpression?: string;\n}\n\nexport interface IRecordRegistration {\n  justificationRequired: RxSelectOption | JustificationRequirement;\n  recordDefinition: string;\n  requestIDField: string;\n  requestorField: string;\n  approverExclusionField: string;\n  summaryField: string;\n  justificationFieldName?: string;\n  notesField?: string;\n  permissionsFromSecurityLabels?: number[];\n  field3Mapping?: IAdditionalField;\n  field4Mapping?: IAdditionalField;\n  field5Mapping?: IAdditionalField;\n  field6Mapping?: IAdditionalField;\n  isNewConfiguration?: boolean;\n}\n\nexport interface IAdditionalField {\n  fieldID: string;\n  label: string;\n}\n\nexport interface IApprovalFlowOutcomeAction {\n  guid?: string;\n  action: string;\n  processName: string;\n  statusOutcome: string;\n}\n\nexport interface IApprovalFlow {\n  isOpen?: boolean;\n  hasError?: boolean;\n  guid?: string;\n  flowName: string;\n  precedence: number;\n  approvers: string;\n  applyApproverExclusion: boolean;\n  approversDisplayValue?: string;\n  isFieldIdentifyingApprover?: boolean;\n  qualification: string;\n  approverQualification: string;\n  formattedQualification: string;\n  isLevelUp: boolean;\n  levels: number;\n  approvalProcessId: string;\n  processType: string;\n  signingCriteria: number | RxSelectOption;\n  signingCriteriaList?: RxSelectOption[];\n  approvalOverridePercentage: number | RxSelectOption;\n  approvalFlowOutcomeMappingList: IApprovalFlowOutcomeAction[];\n}\n\nexport interface IApprovalFlowGroup {\n  flowGroupOldName?: string;\n  isDirty?: boolean;\n  flowGroup: string;\n  approvalFlowConfigurationList: IApprovalFlow[];\n  hasError?: boolean;\n}\n\nexport interface IApprovalFlowGroupConfigurationResponse {\n  approvalFlowGroupConfigurations: IApprovalFlowGroup[];\n}\n\nexport interface ISelectedApprover {\n  value: string;\n  displayValue: string;\n}\n\nexport interface IUserInfo {\n  [fieldId: number]: string;\n  selected: boolean;\n}\n\nexport interface IField {\n  name: string;\n  selected: boolean;\n}\n\nexport interface IOrgInfo {\n  company: string;\n  organization?: string;\n  supportOrganization?: string;\n}\n\nexport interface IRole {\n  id: string;\n  name: string;\n  selected: boolean;\n}\n\nexport interface IAppRoles {\n  applicationName: string;\n  roles: IRole[];\n}\n\nexport interface IFlowGroupRequestResponse {\n  status: 'Failed' | 'Success';\n  error?: HttpErrorResponse;\n}\n"]}