{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/notification/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, isNil, isUndefined, toNumber, values } from 'lodash';\nimport { EMPTY, Observable, Subject, throwError } from 'rxjs';\nimport { catchError, filter, switchMap, tap } from 'rxjs/operators';\nimport { RxAdminSettingsService } from '../administration/admin-settings.service';\nimport { IAdminComponentSettings } from '../administration/administration.types';\nimport { IServerResponseMessage } from '../error-handling/error-handling.types';\nimport { RxLogService } from '../logging/log.service';\nimport { RxCurrentUserService } from '../user/current-user.service';\nimport { Message } from 'primeng/api';\nimport { NotificationType, RX_DEFAULT_NOTIFICATION_SETTINGS } from './notification.constants';\nimport { INotificationConfig } from './notification.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxNotificationService {\n  private issuesToReportSubject$ = new Subject<IServerResponseMessage>();\n  private notificationSettings = RX_DEFAULT_NOTIFICATION_SETTINGS;\n  private componentName = 'InnovationSuiteServerSetting';\n\n  private messagesSubject = new Subject<Message>();\n  messages$: Observable<Message> = this.messagesSubject.asObservable();\n  issuesToReport$ = this.issuesToReportSubject$.asObservable();\n\n  constructor(\n    private rxLogService: RxLogService,\n    private translateService: TranslateService,\n    private rxAdminSettingsService: RxAdminSettingsService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  addErrorMessage(message: string, title?: string, config: INotificationConfig = {}): void {\n    if (isNil(title)) {\n      title = this.translateService.instant('com.bmc.arsys.rx.client.common.error.label');\n    }\n\n    this.messagesSubject.next({\n      severity: 'error',\n      summary: title,\n      detail: message,\n      life: config.ttl || this.notificationSettings[NotificationType.Error].ttl,\n      sticky: this.isSticky(config.ttl, NotificationType.Error),\n      data: config.issue\n    });\n\n    if (!config.suppressLog) {\n      this.rxLogService.error(`${title}: ${message}`);\n    }\n  }\n\n  addWarningMessage(message: string, title?: string, config: INotificationConfig = {}): void {\n    if (isNil(title)) {\n      title = this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label');\n    }\n\n    this.messagesSubject.next({\n      severity: 'warn',\n      summary: title,\n      detail: message,\n      life: config.ttl || this.notificationSettings[NotificationType.Warning].ttl,\n      sticky: this.isSticky(config.ttl, NotificationType.Warning),\n      data: config.issue\n    });\n\n    this.rxLogService.warning(`${title}: ${message}`);\n  }\n\n  addInfoMessage(message: string, title?: string, config: INotificationConfig = {}): void {\n    if (isNil(title)) {\n      title = this.translateService.instant('com.bmc.arsys.rx.client.common.info.label');\n    }\n\n    this.messagesSubject.next({\n      severity: 'info',\n      summary: title,\n      detail: message,\n      life: config.ttl || this.notificationSettings[NotificationType.Info].ttl,\n      sticky: this.isSticky(config.ttl, NotificationType.Info)\n    });\n\n    this.rxLogService.info(`${title}: ${message}`);\n  }\n\n  addSuccessMessage(message: string, title?: string, config: INotificationConfig = {}): void {\n    if (isNil(title)) {\n      title = this.translateService.instant('com.bmc.arsys.rx.client.common.success.label');\n    }\n\n    this.messagesSubject.next({\n      severity: 'success',\n      summary: title,\n      detail: message,\n      life: config.ttl || this.notificationSettings[NotificationType.Success].ttl,\n      sticky: this.isSticky(config.ttl, NotificationType.Success)\n    });\n\n    this.rxLogService.debug(`${title}: ${message}`);\n  }\n\n  reportIssue(issue: IServerResponseMessage): void {\n    this.issuesToReportSubject$.next(issue);\n  }\n\n  initialize(): void {\n    this.rxCurrentUserService.user$\n      .pipe(\n        filter((user) => Boolean(user)),\n        switchMap(() => {\n          if (this.rxCurrentUserService.isAdministrator()) {\n            return this.rxAdminSettingsService.getComponentSettings(this.componentName).pipe(\n              tap((settings: IAdminComponentSettings) => {\n                values(NotificationType).forEach((notificationType) => {\n                  const notificationSettings = find(settings.values, ['settingName', notificationType]);\n\n                  if (notificationSettings && notificationSettings.settingValue) {\n                    this.notificationSettings[notificationType].ttl =\n                      toNumber(notificationSettings.settingValue) * 1000;\n                  }\n                });\n              }),\n              catchError((err) => {\n                this.rxLogService.warning(\n                  'Notification Message Preferences cannot be applied. Default values will be used.'\n                );\n\n                return throwError(err);\n              })\n            );\n          } else {\n            this.rxLogService.debug(\n              'Notification Message Preferences cannot be applied since the current user is not a administrator.'\n            );\n\n            return EMPTY;\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  private isSticky(ttl: number, messageType: string): boolean {\n    return isUndefined(ttl) ? this.notificationSettings[messageType].ttl === 0 : ttl === 0;\n  }\n}\n"]}