{"version":3,"file":"boolean-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.html"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, Injector, ViewChild } from '@angular/core';\nimport { isNil, isNull } from 'lodash';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { RxBooleanPipe } from '@helix/platform/shared/api';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { BooleanFieldEditingMode, BooleanFieldModelValue, IBooleanFieldConfig } from '../boolean-field.types';\nimport { NgModel } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-boolean-field',\n  templateUrl: './boolean-field.component.html'\n})\nexport class BooleanFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, AfterViewInit {\n  editingMode: BooleanFieldEditingMode;\n\n  get booleanValue(): boolean | null {\n    const value = this.getFieldValue();\n\n    return isNull(value) ? null : Boolean(value);\n  }\n\n  set booleanValue(value: boolean | null) {\n    if (isNull(value)) {\n      this.setFieldValue(null);\n    } else {\n      this.setFieldValue(Number(value));\n    }\n  }\n\n  @ViewChild('booleanComponent', { read: NgModel })\n  ngModel: NgModel;\n\n  constructor(injector: Injector, private rxBooleanPipe: RxBooleanPipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (!isNil(displayValue)) {\n      return this.rxBooleanPipe.transform(displayValue);\n    } else {\n      return '-';\n    }\n  }\n\n  onConfigInitialized(config: IBooleanFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.editingMode = config.editingMode;\n  }\n\n  onConfigUpdated(config: IBooleanFieldConfig): void {\n    super.onConfigUpdated(config);\n\n    // Set 0 as a default value for checkbox, e.g. scenario in the create record editor mode\n    if (this.shouldDisplayAsCheckbox && this.getFieldValue() === null) {\n      this.setFieldValue(BooleanFieldModelValue.False, { markAsDirty: false, markAsTouched: false });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl.touched$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((touched) =>\n        touched ? this.ngModel?.control.markAsTouched() : this.ngModel?.control.markAsUntouched()\n      );\n  }\n\n  get shouldDisplayAsCheckbox(): boolean {\n    return this.editingMode === BooleanFieldEditingMode.Checkbox && this.isRequired;\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-boolean\n    #booleanComponent\n    [hidden]=\"isHidden\"\n    [label]=\"label\"\n    [isDisabled]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [shouldDisplayAsCheckbox]=\"shouldDisplayAsCheckbox\"\n    [(ngModel)]=\"booleanValue\"\n    (rxBlur)=\"onBlur()\"\n  >\n  </rx-boolean>\n</ng-template>\n"]}