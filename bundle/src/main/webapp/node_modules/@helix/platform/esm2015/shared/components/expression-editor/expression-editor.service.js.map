{"version":3,"file":"expression-editor.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/expression-editor/expression-editor.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAE1E,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAc,cAAc,EAAE,MAAM,wBAAwB,CAAC;;;;AAKpE,MAAM,OAAO,yBAAyB;IACpC,YAAoB,gBAAkC,EAAU,cAA8B;QAA1E,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAElG,UAAU,CACR,MAA+B,EAC/B,gBAAkD;QAElD,OAAO,IAAI,UAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjC,IAAI,CAAC,cAAc;iBAChB,SAAS,CAAC;gBACT,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,iEAAiE,CAAC;gBACvG,IAAI,kCACC,MAAM,KACT,GAAG,EAAE;wBACH,UAAU,CAAC,YAAY,EAAE,aAAa;4BACpC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;wBAC9D,CAAC;qBACF,EACD,UAAU,EAAE,CAAC,SAAqB,EAAE,EAAE;wBACpC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAG,SAAS,CAAC,CAAC;oBAChC,CAAC,GACF;gBACD,OAAO,EAAE,yBAAyB;gBAClC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,uBAAuB,CAAC,KAAK,CAAQ;aACxE,CAAC;iBACD,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBAC/B,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;gBACX,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAG,IAAI,CAAC,CAAC;gBAEzB,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;;sHAhCU,yBAAyB;0HAAzB,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { Observable } from 'rxjs';\nimport { ExpressionEditorComponent } from './expression-editor.component';\nimport { IExpressionEditorConfig, IExpressionEditorPropertyChange } from './expression-editor.interfaces';\nimport { RxError } from '@helix/platform/utils';\nimport { isString } from 'lodash';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IDialogApi, RxModalService } from '@helix/platform/ui-kit';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionEditorService {\n  constructor(private translateService: TranslateService, private rxModalService: RxModalService) {}\n\n  openEditor(\n    config: IExpressionEditorConfig,\n    onDialogApiReady?: (dialogApi: IDialogApi) => void\n  ): Observable<IExpressionEditorPropertyChange> {\n    return new Observable((observer) => {\n      this.rxModalService\n        .openModal({\n          title: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.edit-expression.title'),\n          data: {\n            ...config,\n            api: {\n              writeValue(propertyPath, propertyValue) {\n                observer.next({ path: propertyPath, value: propertyValue });\n              }\n            },\n            onApiReady: (dialogApi: IDialogApi) => {\n              onDialogApiReady?.(dialogApi);\n            }\n          },\n          content: ExpressionEditorComponent,\n          size: (config.isReadOnly ? 'sm' : OpenViewActionModalSize.Large) as any\n        })\n        .then(() => observer.complete())\n        .catch((e) => {\n          onDialogApiReady?.(null);\n\n          return isString(e) ? new RxError(e) : e;\n        });\n    });\n  }\n}\n"]}