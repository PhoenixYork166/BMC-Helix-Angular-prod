{"version":3,"file":"boolean-field-design.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.ts","../../../../../../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAqB,MAAM,eAAe,CAAC;AACpE,OAAO,EAAE,uBAAuB,EAAE,MAAM,8BAA8B,CAAC;AACvE,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,MAAM,CAAC;;;;;AAMpD,MAAM,OAAO,2BAA2B;IAJxC;QASE,4BAAuB,GAAG,KAAK,CAAC;QAExB,eAAU,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;KAkBpD;IAhBC,QAAQ;QACN,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,CACvD,GAAG,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,mBAAmB,CAAC,WAAW,IAAI,uBAAuB,CAAC,MAAM,CAAC,CAChG,CAAC;QAEF,aAAa,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;aAClD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAChC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,uBAAuB,GAAG,UAAU,IAAI,WAAW,KAAK,uBAAuB,CAAC,QAAQ,CAAC;QAChG,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC;;wHAxBU,2BAA2B;4GAA3B,2BAA2B,2FCVxC,0lBAmBA;2FDTa,2BAA2B;kBAJvC,SAAS;mBAAC;oBACT,QAAQ,EAAE,yBAAyB;oBACnC,WAAW,EAAE,uCAAuC;iBACrD;8BAGC,KAAK;sBADJ,KAAK","sourcesContent":["import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { BooleanFieldDesignModel } from './boolean-field-design.model';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { combineLatest, ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'rx-boolean-field-design',\n  templateUrl: './boolean-field-design.component.html'\n})\nexport class BooleanFieldDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: BooleanFieldDesignModel;\n\n  booleanValue: boolean; // need this, because new adapt-switcher don't work without ngModel\n  shouldDisplayAsCheckbox = false;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  ngOnInit(): void {\n    const editingMode$ = this.model.componentProperties$.pipe(\n      map((componentProperties) => componentProperties.editingMode || BooleanFieldEditingMode.Switch)\n    );\n\n    combineLatest([editingMode$, this.model.isRequired$])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([editingMode, isRequired]) => {\n        this.shouldDisplayAsCheckbox = isRequired && editingMode === BooleanFieldEditingMode.Checkbox;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<ng-container *ngIf=\"!shouldDisplayAsCheckbox\">\n  <div>\n    <strong>\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </strong>\n  </div>\n  <adapt-rx-switch [(ngModel)]=\"booleanValue\" [disabled]=\"true\"></adapt-rx-switch>\n</ng-container>\n\n<ng-container *ngIf=\"shouldDisplayAsCheckbox\">\n  <adapt-rx-checkbox\n    [(ngModel)]=\"booleanValue\"\n    [label]=\"model.label$ | async\"\n    [required]=\"model.isRequired$ | async\"\n    [disabled]=\"true\"\n  >\n  </adapt-rx-checkbox>\n</ng-container>\n"]}