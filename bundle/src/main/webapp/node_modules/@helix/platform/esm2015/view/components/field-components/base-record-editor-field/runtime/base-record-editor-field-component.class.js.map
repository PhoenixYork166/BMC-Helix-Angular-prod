{"version":3,"file":"base-record-editor-field-component.class.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/base-record-editor-field/runtime/base-record-editor-field-component.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { HostBinding, Injector, Input, OnInit, Directive } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport {\n  IFieldDefinition,\n  IRecordInstance,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { RX_ADMINISTRATION, RxSystemConfigurationService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, includes, isEqual, isNull, isUndefined, values } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { distinctUntilChanged, filter, pluck, skip, startWith, take, takeUntil } from 'rxjs/operators';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';\nimport { IBaseRecordEditorFieldComponentConfig } from './base-record-editor-field-component.types';\nimport { RecordEditorFormControl } from '../../../record-editor/runtime/record-editor-form-control.class';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class BaseRecordEditorFieldComponent extends BaseViewComponent implements OnInit {\n  @HostBinding('class.rx-field-required')\n  isRequired = false;\n\n  @HostBinding('class.rx-field-disabled')\n  isDisabled = false;\n\n  translateService = this.injector.get(TranslateService);\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  @Input()\n  config: Observable<IBaseRecordEditorFieldComponentConfig>;\n\n  private configReady$: Observable<IBaseRecordEditorFieldComponentConfig>;\n  protected recordInstance$: Observable<IRecordInstance>;\n  private isAlwaysDisabled;\n  private isAlwaysHidden;\n\n  inReadState = false;\n  fieldDefinition: IFieldDefinition;\n\n  fieldId: number;\n  label: string;\n  recordEditorApi: IRecordEditorApi;\n  isLoading = true;\n  validationErrorMessage: string = null;\n  permissionType: string;\n  associatedRecordPath: string[];\n\n  formControl: RecordEditorFormControl;\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.configReady$ = this.config.pipe(\n      filter((config) => Boolean(config.api && config.recordDefinition)),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$ = this.configReady$.pipe(\n      pluck<IBaseRecordEditorFieldComponentConfig, IRecordInstance>('recordInstance'),\n      distinctUntilChanged(),\n      skip(1),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$.subscribe(this.subscribeOnConfigValueChange.bind(this));\n\n    this.configReady$.pipe(take(1)).subscribe((config) => {\n      this.isLoading = false;\n\n      this.onConfigInitialized(config);\n      this.onConfigUpdated(config);\n    });\n\n    this.configReady$\n      .pipe(\n        skip(1),\n        filter((config) => Boolean(config.recordInstance)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(this.onConfigUpdated.bind(this));\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    if (!isEqual(value, this.formControl.value)) {\n      if (options.markAsDirty !== false) {\n        this.formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        this.formControl.markAsTouched();\n      }\n\n      this.formControl.setValue(value);\n    }\n  }\n\n  getFieldValue(): any {\n    return this.formControl?.value;\n  }\n\n  getDisplayValue(): any {\n    return this.getFieldValue();\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    this.fieldId = Number(config.fieldId);\n\n    this.fieldDefinition = find(config.recordDefinition.fieldDefinitions, { id: this.fieldId });\n\n    this.isRequired = this.fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n    this.recordEditorApi = config.api;\n\n    this.formControl = this.recordEditorApi.getFieldControl(\n      this.fieldId,\n      this.guid,\n      this.getFieldValidators(),\n      config.associatedRecordPath\n    );\n\n    this.associatedRecordPath = config.associatedRecordPath;\n    this.permissionType = this.recordEditorApi.getPermissionType(this.fieldId, this.associatedRecordPath);\n\n    this.subscribeOnConfigValueChange();\n\n    this.formControl.valueChanges.pipe(startWith(this.formControl.value), takeUntil(this.destroyed$)).subscribe(() => {\n      this.checkValidation();\n      this.updateValidationMessage();\n    });\n\n    this.isAlwaysDisabled =\n      this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view ||\n      this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService).isSystemField(this.fieldDefinition);\n\n    this.isAlwaysHidden = !this.permissionType;\n\n    const recordEditorMode = config.api.getRecordEditorMode();\n\n    if (Number(config.fieldId) === RX_RECORD_DEFINITION.coreFieldIds.createdBy) {\n      const submitterMode = this.injector\n        .get<RxSystemConfigurationService>(RxSystemConfigurationService)\n        .getConfigurationSync('Submitter-Mode');\n\n      this.isAlwaysDisabled =\n        this.isAlwaysDisabled ||\n        (recordEditorMode === RecordEditorMode.Edit && submitterMode === RX_ADMINISTRATION.submitterModes.locked);\n    }\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    const isDisabled = this.isAlwaysDisabled || Boolean(config.disabled);\n\n    if (this.isDisabled !== isDisabled) {\n      // In order to support accessibility for fields, \"disabled\" control status will be always \"false\" and will not\n      // be synced with \"isDisabled\" component property. Field might not be focusable when control is disabled.\n      this.isDisabled = isDisabled;\n\n      if (!this.isDisabled) {\n        // Update validation status of the control after change \"isDisabled\" status to false.\n        this.formControl.updateValueAndValidity();\n      }\n\n      this.checkValidation();\n    }\n\n    this.isHidden = this.isAlwaysHidden || Boolean(config.hidden);\n\n    this.label = isUndefined(config.label) ? this.fieldDefinition.name : config.label;\n    this.inReadState = Boolean(config.inReadState);\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    return [];\n  }\n\n  getRequiredFieldValidationError(): string {\n    return this.translateService.instant('com.bmc.arsys.rx.client.view-components.validation.required.message');\n  }\n\n  getFieldInstanceProp(\n    prop: string,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): any {\n    return this.recordEditorApi.getFieldInstanceProp(fieldId, prop, associatedRecordPath);\n  }\n\n  setFieldInstanceProp(\n    prop: string,\n    value: any,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): void {\n    this.recordEditorApi.setFieldInstanceProp(fieldId, prop, value, associatedRecordPath);\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (includes(['hidden', 'disabled'], propertyPath)) {\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else {\n      return throwError(`Field property ${propertyPath} is not settable.`);\n    }\n  }\n\n  private subscribeOnConfigValueChange() {\n    const value$ = this.configReady$.pipe(\n      pluck('value'),\n      // Do not update field value if expression gets evaluated to undefined, e.g when:\n      // - expression references a removed view component, or\n      // - view component hasn't loaded the data yet\n      filter((val) => !isUndefined(val)),\n      distinctUntilChanged(),\n      takeUntil(this.recordInstance$),\n      takeUntil(this.destroyed$)\n    );\n\n    value$.pipe(take(1)).subscribe((val) => {\n      // Only update field with non empty value on first expression change.\n      // At this time we don't know if null is a default value or it was evaluated from expression.\n      if (!isNull(val)) {\n        this.setFieldValue(val, { markAsTouched: false, markAsDirty: false });\n      }\n    });\n\n    value$.pipe(skip(1)).subscribe((val) => this.setFieldValue(val));\n  }\n\n  private checkValidation() {\n    if (this.isDisabled && this.formControl.invalid) {\n      // Remove errors to make control valid when \"isDisabled\" status is true.\n      this.formControl.setErrors(null);\n      this.updateValidationMessage();\n    }\n  }\n\n  private updateValidationMessage() {\n    if (this.formControl.errors) {\n      if (this.formControl.errors.required) {\n        this.formControl.errors.required = this.getRequiredFieldValidationError();\n      }\n\n      this.validationErrorMessage = values(this.formControl.errors).join(', ');\n    } else {\n      this.validationErrorMessage = null;\n    }\n  }\n}\n"]}