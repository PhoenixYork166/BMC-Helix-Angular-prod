{"version":3,"file":"optional-expression-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/optional-expression-control/optional-expression-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/optional-expression-control/optional-expression-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { head, last, upperFirst, includes } from 'lodash';\nimport { IFormControlComponent } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '../../form-builder/value-accessor';\nimport { IOptionalExpressionControlOptions } from './optional-expression-control-options.interface';\nimport { IExpressionFormControlOptions } from '../expression-form-control';\n\n@Component({\n  selector: 'rx-optional-expression-form-control',\n  templateUrl: './optional-expression-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: OptionalExpressionControlComponent,\n      multi: true\n    }\n  ],\n  styleUrls: ['./optional-expression-control.component.scss']\n})\nexport class OptionalExpressionControlComponent extends ValueAccessor<string> implements IFormControlComponent, OnInit {\n  @Input()\n  options: IOptionalExpressionControlOptions;\n\n  @Input()\n  propertyPath: string;\n\n  @Output()\n  events: EventEmitter<any> = new EventEmitter();\n\n  expressionFieldOptions: IExpressionFormControlOptions;\n\n  checkbox: boolean;\n\n  modelValues = {\n    disable: '0',\n    enable: '1'\n  };\n\n  selectValues = {\n    all: 'all',\n    condition: 'condition'\n  };\n\n  selectOptions: RxSelectOption[] = [\n    {\n      id: this.selectValues.all,\n      name: 'At all times'\n    },\n    {\n      id: this.selectValues.condition,\n      name: 'When condition is true'\n    }\n  ];\n\n  selectedCondition: RxSelectOption[] = [head(this.selectOptions)];\n\n  conditionValue: string;\n\n  ngOnInit(): void {\n    this.expressionFieldOptions = {\n      label: 'Condition',\n      expressionEditorPropertyName: this.options.expressionEditorPropertyName || upperFirst(this.propertyPath),\n      dataDictionary$: this.options.dataDictionary$,\n      operators: this.options.operators\n    };\n  }\n\n  onWriteValue(modelValue: string): void {\n    this.conditionValue = '';\n    this.selectedCondition = [head(this.selectOptions)];\n\n    if (modelValue === this.modelValues.enable) {\n      this.checkbox = true;\n    } else if (modelValue === this.modelValues.disable) {\n      this.checkbox = false;\n    } else {\n      this.checkbox = true;\n      this.selectedCondition = [last(this.selectOptions)];\n      this.conditionValue = modelValue;\n    }\n  }\n\n  onSwitcherChange(modelValue: boolean): void {\n    this.selectedCondition = [head(this.selectOptions)];\n    this.conditionValue = '';\n\n    this.value = modelValue ? this.modelValues.enable : this.modelValues.disable;\n  }\n\n  onSelectChange(selectedValue: RxSelectOption[]): void {\n    this.selectedCondition = selectedValue;\n    this.conditionValue = '';\n\n    this.value = head(selectedValue).id === this.selectValues.all ? this.modelValues.enable : '';\n  }\n\n  onConditionChange(expressionValue: string): void {\n    this.value = expressionValue;\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n}\n","<adapt-rx-control-label [label]=\"options.label\"></adapt-rx-control-label>\n\n<div class=\"clearfix\">\n  <adapt-rx-switch\n    [(ngModel)]=\"checkbox\"\n    (ngModelChange)=\"onSwitcherChange($event)\"\n    [disabled]=\"isDisabled\"\n  ></adapt-rx-switch>\n\n  <adapt-rx-select\n    *ngIf=\"checkbox\"\n    class=\"condition-select\"\n    [options]=\"selectOptions\"\n    [ngModel]=\"selectedCondition\"\n    (ngModelChange)=\"onSelectChange($event)\"\n    [disabled]=\"isDisabled\"\n    [optionFormatter]=\"optionFormatter\"\n  ></adapt-rx-select>\n</div>\n\n<rx-expression-form-control\n  *ngIf=\"selectedCondition[0].id === selectValues.condition\"\n  [options]=\"expressionFieldOptions\"\n  [propertyPath]=\"this.propertyPath\"\n  [disabled]=\"isDisabled\"\n  [(ngModel)]=\"conditionValue\"\n  (ngModelChange)=\"onConditionChange($event)\"\n  (events)=\"events.emit($event)\"\n>\n</rx-expression-form-control>\n"]}