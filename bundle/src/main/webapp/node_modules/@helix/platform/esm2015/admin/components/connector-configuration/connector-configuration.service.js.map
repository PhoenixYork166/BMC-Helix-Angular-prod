{"version":3,"file":"connector-configuration.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/connector-configuration/connector-configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,uCAAuC,EAAE,MAAM,6CAA6C,CAAC;AAEtG,OAAO,EAAE,2BAA2B,EAAE,MAAM,gCAAgC,CAAC;;;;;AAK7E,MAAM,OAAO,+BAA+B;IAS1C,YACU,UAAsB,EACtB,2BAAwD,EACxD,uCAAgF;QAFhF,eAAU,GAAV,UAAU,CAAY;QACtB,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,4CAAuC,GAAvC,uCAAuC,CAAyC;QAExF,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,CAAC,IAAI,CAChD,GAAG,CAAC,CAAC,QAAyB,EAAE,EAAE;YAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAqB,EAAE,EAAE,CAAC,CAAC;gBACnD,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,IAAI,EAAE,SAAS,CAAC,IAAI;aACrB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,0BAA0B,CAAC,WAAW;QACpC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE;YACvC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,uCAAuC;iBAC9E,GAAG,CAAC;gBACH,MAAM,EAAE;oBACN,WAAW,EAAE,WAAW;iBACzB;aACF,CAAC;iBACD,IAAI,CACH,GAAG,CAAC,CAAC,QAAyB,EAAE,EAAE;gBAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,eAAwC,EAAE,EAAE,CAAC,CAAC;oBACtE,EAAE,EAAE,eAAe,CAAC,EAAE;oBACtB,IAAI,EAAE,eAAe,CAAC,IAAI;oBAC1B,QAAQ,EAAE,eAAe,CAAC,QAAQ;iBACnC,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;SACL;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAED,oBAAoB,CAAC,WAAW,EAAE,QAAQ;QACxC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE;YACrC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC,IAAI,CAClF,GAAG,CAAC,CAAC,OAAkC,EAAE,EAAE;gBACzC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;gBAE/C,OAAO,MAAM,CAAC,QAAQ,CAAC;YACzB,CAAC,CAAC,CACH,CAAC;SACH;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;;4HAhEU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { find } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { RxConnectorConfigurationDataPageService } from './connector-configuration-data-page.service';\nimport { IConnector, IConnectorConfiguration, IConnectorProfile } from './connector-configuration.interface';\nimport { RxConnectorsDataPageService } from './connectors-data-page.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxConnectorConfigurationService {\n  private readonly connectorConfigs: {\n    [connectorId: string]: Observable<IConnectorConfiguration[]>;\n  };\n\n  private readonly connectorProfiles: {\n    [configId: string]: Observable<IConnectorProfile[]>;\n  };\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxConnectorsDataPageService: RxConnectorsDataPageService,\n    private rxConnectorConfigurationDataPageService: RxConnectorConfigurationDataPageService\n  ) {\n    this.connectorConfigs = {};\n    this.connectorProfiles = {};\n  }\n\n  getConnectors(): Observable<IConnector[]> {\n    return this.rxConnectorsDataPageService.get().pipe(\n      map((response: IDataPageResult) => {\n        return response.data.map((connector: IConnector) => ({\n          id: connector.id,\n          name: connector.name\n        }));\n      })\n    );\n  }\n\n  getConnectorConfigurations(connectorId): Observable<IConnectorConfiguration[]> {\n    if (!this.connectorConfigs[connectorId]) {\n      this.connectorConfigs[connectorId] = this.rxConnectorConfigurationDataPageService\n        .get({\n          params: {\n            connectorId: connectorId\n          }\n        })\n        .pipe(\n          map((response: IDataPageResult) => {\n            return response.data.map((connectorConfig: IConnectorConfiguration) => ({\n              id: connectorConfig.id,\n              name: connectorConfig.name,\n              profiles: connectorConfig.profiles\n            }));\n          }),\n          shareReplay(1)\n        );\n    }\n\n    return this.connectorConfigs[connectorId];\n  }\n\n  getConnectorProfiles(connectorId, configId): Observable<IConnectorProfile[]> {\n    if (!this.connectorProfiles[configId]) {\n      this.connectorProfiles[configId] = this.getConnectorConfigurations(connectorId).pipe(\n        map((configs: IConnectorConfiguration[]) => {\n          const config = find(configs, { id: configId });\n\n          return config.profiles;\n        })\n      );\n    }\n\n    return this.connectorProfiles[configId];\n  }\n}\n"]}