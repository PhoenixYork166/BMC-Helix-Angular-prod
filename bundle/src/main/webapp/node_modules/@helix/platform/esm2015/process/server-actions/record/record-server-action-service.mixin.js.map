{"version":3,"file":"record-server-action-service.mixin.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/server-actions/record/record-server-action-service.mixin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAMhC,OAAO,EAAE,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAG1E,MAAM,UAAU,gCAAgC,CAAoD,IAAW;IAC7G,OAAO,MAAM,2BAA4B,SAAQ,IAAI;QACnD,YAAY,GAAG,IAAW;YACxB,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QACjB,CAAC;QAED,gCAAgC,CAAC,cAAsB,EAAE,eAAuB;YAC9E,IAAI,cAAc,KAAK,sBAAsB,EAAE;gBAC7C,IAAI,eAAe,CAAC,KAAK,CAAC,uBAAuB,CAAC,gCAAgC,CAAC,EAAE;oBACnF,OAAO;wBACL,YAAY,EAAE,cAAc;wBAC5B,UAAU,EAAE,eAAe;qBAC5B,CAAC;iBACH;qBAAM;oBACL,OAAO;wBACL,YAAY,EAAE,cAAc;wBAC5B,UAAU,EAAE,GAAG,GAAG,eAAe,GAAG,GAAG;qBACxC,CAAC;iBACH;aACF;iBAAM,IAAI,cAAc,KAAK,4BAA4B,EAAE;gBAC1D,OAAO;oBACL,YAAY,EAAE,cAAc;oBAC5B,UAAU,EAAE,GAAG,GAAG,eAAe,GAAG,GAAG;iBACxC,CAAC;aACH;iBAAM;gBACL,OAAO,KAAK,CAAC,0BAA0B,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;aAC1E;QACH,CAAC;QAED,mCAAmC,CAAC,QAA0C;YAC5E,IAAI,gCAAgC,GAAW,IAAI,CAAC;YAEpD,IAAI,QAAQ,CAAC,oBAAoB,EAAE;gBACjC,IAAI,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,uBAAuB,CAAC,gCAAgC,CAAC,EAAE;oBACjG,IAAI,QAAQ,CAAC,0BAA0B,EAAE;wBACvC,gCAAgC,GAAG,QAAQ,CAAC,0BAA0B,CAAC;qBACxE;iBACF;qBAAM;oBACL,gCAAgC,GAAG,QAAQ,CAAC,oBAAoB,CAAC;iBAClE;aACF;YAED,OAAO,gCAAgC,CAAC;QAC1C,CAAC;QAED,sFAAsF;QACtF,sBAAsB,CAAC,UAAe;YACpC,OAAO,MAAM,CACX,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,KAAI,EAAE,EAC1B,CAAC,QAAQ,EAAE,aAAa,EAAE,EAAE;gBAC1B,MAAM,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC;gBAEhD,IAAI,YAAY,KAAK,sBAAsB,EAAE;oBAC3C,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,CAAC,gCAAgC,CAAC,EAAE;wBAC5F,QAAQ,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC;qBACnD;yBAAM;wBACL,QAAQ,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;qBACzE;iBACF;qBAAM,IAAI,YAAY,KAAK,4BAA4B,EAAE;oBACxD,QAAQ,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;iBACzE;qBAAM;oBACL,QAAQ,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,UAAU,CAAC;iBACnD;gBAED,OAAO,QAAQ,CAAC;YAClB,CAAC,EACD;gBACE,oBAAoB,EAAE,IAAI;gBAC1B,0BAA0B,EAAE,IAAI;gBAChC,QAAQ,EAAE,IAAI;aACf,CACF,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { reduce } from 'lodash';\n\nimport { Constructor } from '@helix/platform/utils';\nimport { IAssignmentExpression } from '@helix/platform/shared/api';\nimport { RxProcessActionService } from '@helix/platform/process/elements';\n\nimport { RX_RECORD_SERVER_ACTION } from './record-server-action.constant';\nimport { IRecordServerActionInputMapModel, IRecordServerActionService } from './record-server-action.types';\n\nexport function RxRecordServerActionServiceMixin<TBase extends Constructor<RxProcessActionService>>(Base: TBase) {\n  return class RxRecordServerActionService extends Base implements IRecordServerActionService {\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    getRecordDefinitionInputMapParam(inputParamName: string, inputParamValue: string): IAssignmentExpression {\n      if (inputParamName === 'recordDefinitionName') {\n        if (inputParamValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          return {\n            assignTarget: inputParamName,\n            expression: inputParamValue\n          };\n        } else {\n          return {\n            assignTarget: inputParamName,\n            expression: '\"' + inputParamValue + '\"'\n          };\n        }\n      } else if (inputParamName === 'sampleRecordDefinitionName') {\n        return {\n          assignTarget: inputParamName,\n          expression: '\"' + inputParamValue + '\"'\n        };\n      } else {\n        return super.getDefinitionInputMapParam(inputParamName, inputParamValue);\n      }\n    }\n\n    getRecordDefinitionNameFromInputMap(inputMap: IRecordServerActionInputMapModel): string {\n      let recordDefinitionNameFromInputMap: string = null;\n\n      if (inputMap.recordDefinitionName) {\n        if (inputMap.recordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          if (inputMap.sampleRecordDefinitionName) {\n            recordDefinitionNameFromInputMap = inputMap.sampleRecordDefinitionName;\n          }\n        } else {\n          recordDefinitionNameFromInputMap = inputMap.recordDefinitionName;\n        }\n      }\n\n      return recordDefinitionNameFromInputMap;\n    }\n\n    // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n    getRecordInputMapModel(definition: any): IRecordServerActionInputMapModel {\n      return reduce(\n        definition?.inputMap || [],\n        (inputMap, inputMapField) => {\n          const assignTarget = inputMapField.assignTarget;\n\n          if (assignTarget === 'recordDefinitionName') {\n            if (inputMapField.expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n              inputMap[assignTarget] = inputMapField.expression;\n            } else {\n              inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n            }\n          } else if (assignTarget === 'sampleRecordDefinitionName') {\n            inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n          } else {\n            inputMap[assignTarget] = inputMapField.expression;\n          }\n\n          return inputMap;\n        },\n        {\n          recordDefinitionName: null,\n          sampleRecordDefinitionName: null,\n          recordID: null\n        }\n      );\n    }\n  };\n}\n"]}