{"version":3,"file":"rich-textarea-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAU,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAE,6BAA6B,EAAE,MAAM,0BAA0B,CAAC;AAGzE,OAAO,EAAE,8BAA8B,EAAE,MAAM,iFAAiF,CAAC;;;;;;;AAOjI,MAAM,OAAO,0BAA2B,SAAQ,8BAA8B;IAI5E,YAAY,QAAkB,EAAU,6BAA4D;QAClG,KAAK,CAAC,QAAQ,CAAC,CAAC;QADsB,kCAA6B,GAA7B,6BAA6B,CAA+B;QAHpG,iBAAY,2BAAgC;QAC5C,mBAAc,GAAG,IAAI,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,CAAC;IAIxE,CAAC;IAED,aAAa,CAAC,KAAU,EAAE,UAA8D,EAAE;QACxF,yFAAyF;QACzF,uFAAuF;QACvF,mFAAmF;QACnF,0CAA0C;QAC1C,qFAAqF;QACrF,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,EAAE,CAAC,EAAE;YACtD,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC5B;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;IACnC,CAAC;;uHArBU,0BAA0B;2GAA1B,0BAA0B,qFCXvC,ugCAiCA;2FDtBa,0BAA0B;kBALtC,SAAS;mBAAC;oBACT,QAAQ,EAAE,wBAAwB;oBAClC,WAAW,EAAE,sCAAsC;oBACnD,SAAS,EAAE,CAAC,sCAAsC,CAAC;iBACpD","sourcesContent":["import { Component, Injector, OnInit } from '@angular/core';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { CKEditor4 } from 'ckeditor4-angular';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\n\n@Component({\n  selector: 'rx-rich-textarea-field',\n  templateUrl: './rich-textarea-field.component.html',\n  styleUrls: ['./rich-textarea-field.component.scss']\n})\nexport class RichTextareaFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  ckEditorType = CKEditor4.EditorType.DIVAREA;\n  ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();\n\n  constructor(injector: Injector, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super(injector);\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    // When pressing a toolbar button, e.g. Bold, while the field is blank, ckeditor triggers\n    // a `dataChange` event with an empty string as data. If we allow this value to be set,\n    // it will be converted back to null and result in all toolbar buttons being reset,\n    // e.g. the Bold button will be unpressed.\n    // As a workaround, we do not accept empty string if the current field value is null.\n    if (!(this.formControl.value === null && value === '')) {\n      super.setFieldValue(value);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <div class=\"read-only-content-wrapper focusable\" *ngIf=\"inReadState; else editStateElementRef\" tabindex=\"0\">\n    <label>{{ label }}</label>\n\n    <ckeditor\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"true\"\n      [ngModel]=\"getDisplayValue()\"\n    ></ckeditor>\n  </div>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <div [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\">\n    <adapt-rx-control-label [label]=\"label\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <ckeditor\n      (dataChange)=\"setFieldValue($event)\"\n      [data]=\"formControl.value\"\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"isDisabled\"\n      (blur)=\"onBlur()\"\n    ></ckeditor>\n\n    <adapt-rx-feedback\n      #adaptRxFeedbackRef\n      [errors]=\"formControl.errors\"\n      [controlTouched]=\"formControl.touched\"\n    ></adapt-rx-feedback>\n  </div>\n</ng-template>\n"]}