{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/ui-kit/modal/modal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentRef, Injectable } from '@angular/core';\nimport {\n  AdaptDockedPanelService,\n  AdaptModalService,\n  DismissReasons,\n  DockedPanelInstance,\n  ModalDeferred\n} from '@bmc-ux/adapt-angular';\nimport { RxModalComponent } from './modal.component';\nimport { IDialogApi, IModalConfig, IPromptResponse } from './modal.config.interfaces';\nimport { RX_MODAL } from './modal.constant';\nimport { constant, some, toArray } from 'lodash';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxModalService {\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private translateService: TranslateService,\n    private adaptDockedPanelService: AdaptDockedPanelService\n  ) {}\n\n  isAnyDockedPanelDirty(): boolean {\n    return some(this.adaptDockedPanelService.openedPanels, (dockedPanelInstance: DockedPanelInstance) =>\n      (dockedPanelInstance.contentInstanceRef as any)?.isDirty?.()\n    );\n  }\n\n  isAnyModalDirty(): boolean {\n    return some(toArray(this.adaptModalService.openedModals.values()), (modalRef: ComponentRef<any>) =>\n      modalRef.instance.contentInstanceRef?.isDirty?.()\n    );\n  }\n\n  confirm(modalConfig: IModalConfig, allowDismiss = true): Promise<boolean> {\n    this.setButtons(\n      modalConfig,\n      this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label'),\n      this.translateService.instant('com.bmc.arsys.rx.client.common.no.label')\n    );\n\n    return this.adaptModalService\n      .open({\n        content: RxModalComponent,\n        data: { modalType: RX_MODAL.modalTypes.confirm, modalConfig },\n        type: modalConfig.modalStyle,\n        isDialog: true,\n        beforeDismiss: () => allowDismiss\n      })\n      .then((result: any) => result === true)\n      .catch(constant(false));\n  }\n\n  alert(modalConfig: IModalConfig): ModalDeferred {\n    this.setButtons(modalConfig, this.translateService.instant('com.bmc.arsys.rx.client.common.ok.label'));\n\n    return this.adaptModalService.open({\n      content: RxModalComponent,\n      data: { modalType: RX_MODAL.modalTypes.alert, modalConfig },\n      type: modalConfig.modalStyle,\n      isDialog: true\n    });\n  }\n\n  prompt(modalConfig: IModalConfig): Promise<IPromptResponse> {\n    this.setButtons(\n      modalConfig,\n      this.translateService.instant('com.bmc.arsys.rx.client.common.ok.label'),\n      this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label')\n    );\n\n    return this.adaptModalService\n      .open({\n        content: RxModalComponent,\n        data: { modalType: RX_MODAL.modalTypes.prompt, modalConfig },\n        type: modalConfig.modalStyle\n      })\n      .then((result: any) => {\n        return result?.response ? result : { response: false };\n      })\n      .catch(\n        constant({\n          response: false\n        })\n      );\n  }\n\n  private setButtons(modalConfig: IModalConfig, confirmButton: string, dismissButton?: string) {\n    if (modalConfig.buttons) {\n      modalConfig.buttons.confirmButton = modalConfig.buttons.confirmButton || confirmButton;\n\n      modalConfig.buttons.dismissButton = modalConfig.buttons.dismissButton || dismissButton;\n    } else {\n      modalConfig.buttons = {\n        confirmButton,\n        dismissButton\n      };\n    }\n  }\n\n  private open(config: any, isModal: boolean): ModalDeferred | Promise<any> {\n    let api: IDialogApi | null = null;\n    const onApiReady = config.data?.onApiReady;\n\n    const updatedConfig = {\n      ...config,\n      data: {\n        ...config.data,\n        onApiReady: (dialogApi: IDialogApi) => {\n          onApiReady?.(dialogApi);\n          api = dialogApi;\n        }\n      },\n      beforeDismiss: (reason: any) => {\n        const canClose = !Object.values(DismissReasons).includes(reason);\n\n        if (!canClose) {\n          api?.dismissDialog();\n        }\n\n        return canClose;\n      }\n    };\n\n    const result = isModal\n      ? this.adaptModalService.open(updatedConfig)\n      : this.adaptDockedPanelService.open(updatedConfig);\n\n    return result.then(\n      (data) => {\n        api = null;\n\n        return data;\n      },\n      (reason) => {\n        api = null;\n\n        return Promise.reject(reason);\n      }\n    );\n  }\n\n  /**\n   * @deprecated The method is deprecated, use openModal instead\n   */\n  openDialog(config: any): ModalDeferred | Promise<any> {\n    return this.open(config, true);\n  }\n\n  openModal(config: any): ModalDeferred | Promise<any> {\n    return this.open(config, true);\n  }\n\n  openDockedPanel(config: any): ModalDeferred | Promise<any> {\n    return this.open(config, false);\n  }\n}\n"]}