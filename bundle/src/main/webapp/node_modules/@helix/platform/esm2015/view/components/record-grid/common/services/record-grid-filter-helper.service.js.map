{"version":3,"file":"record-grid-filter-helper.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/common/services/record-grid-filter-helper.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { forEach, includes, isEmpty, isEqual, isString, keys, reduce } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IFilterExpression, IRxRecordGridFilter } from '../types/record-grid-filter.types';\nimport { IRecordGridFilterData, RecordGridFilterOperator } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridFilterHelperService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  // Convert predefined filter data from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // {\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\n  //\n  getRecordGridFilterDataFromPredefinedFilter(\n    filterJson: string,\n    recordGridFilters: IRxRecordGridFilter[]\n  ): IRecordGridFilterData {\n    if (!isEmpty(recordGridFilters) && filterJson) {\n      filterJson = this.normalizeFilterString(filterJson, recordGridFilters);\n    }\n\n    return this.clearFilterData(this.rxJsonParserService.tryParseJson<IRecordGridFilterData>(filterJson));\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  normalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      filterString = filterString.replace(`\"${filterComponent.guid}\"`, JSON.stringify(filterExpression));\n    });\n\n    return filterString;\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  denormalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      if (filterExpression.$DISPLAYVALUE$) {\n        filterString = JSON.stringify(\n          JSON.parse(filterString),\n          this.replacer(this.denormalize(filterComponent.guid, filterExpression))\n        );\n      } else {\n        filterString = filterString.replace(JSON.stringify(filterExpression), `\"${filterComponent.guid}\"`);\n      }\n    });\n\n    return filterString;\n  }\n\n  // e.g.\n  // fn = denormalize(guid, {\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"foo\"});\n  //\n  // var filterExpression = {\n  //   \"and\": [\n  //     {\n  //       \"or\": [\n  //         {\n  //           \"eq\": {\n  //             \"536870913\": \"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\n  //             \"$DISPLAYVALUE$\": \"foo\"\n  //           }\n  //         }\n  //       ]\n  //     }\n  //   ]\n  // };\n  //\n  // JSON.stringify(filterExpression,replacer(fn));\n  // Here the filterExpression's keys are \"add\", “0”, “or”, “0”, “eq”\n  //\n  private replacer(fn: (guid: string, filterExpression: IFilterExpression) => any): any {\n    return (key: any, value: any) => (typeof key === 'string' && fn[key] ? fn[key](value) : value);\n  }\n\n  // This method declares, how object's value of an operator key should denormalize.\n  //\n  // Converts the Enum RecordGridFilterOperator\n  // to\n  // \"\n  // {\n  //   \"eq\": fn(),\n  //   \"gte\": fn(),\n  //   \"lte\": fn(),\n  //   \"like\": fn(),\n  //   \"ne\": fn(),\n  //   \"lt\": fn(),\n  //   \"gt\": fn(),\n  //   \"in\": fn()\n  // }\n  // \"\n  //  Note : fn() defines, how the value should be updated.\n  //\n  // e.g.\n  // Converts predefined filter string from:\n  //  {\"and\":[{\"or\":[{\"eq\":{\"Foo\":\"Bar\",\"$DISPLAYVALUE$\":\"Baz\"}}]}]}\n  // to:\n  //  {“and\":[{\"or\":[{\"eq\":\"aa88747c-8b8e-4dee-abf2-556b84b7d28e\"}]}]}\n  private denormalize(guid: string, filterExpression: IFilterExpression): any {\n    return reduce(\n      RecordGridFilterOperator,\n      (result, operator) => {\n        result[operator] = (value) => (isEqual(value, filterExpression) ? guid : value);\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n}\n"]}