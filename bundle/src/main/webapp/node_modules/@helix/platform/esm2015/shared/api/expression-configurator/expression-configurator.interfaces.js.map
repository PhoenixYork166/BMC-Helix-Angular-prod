{"version":3,"file":"expression-configurator.interfaces.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/expression-configurator/expression-configurator.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\nimport { IDataDictionary } from '../data-dictionary';\nimport {\n  ExpressionOperatorGroup,\n  IExpressionOperator,\n  IExpressionOperatorRow\n} from './expression-configurator-operator.types';\n\nexport interface IExpressionConfigurator {\n  getDataDictionary: (propertyPath?: string) => Observable<IDataDictionary>;\n\n  getOperators: (propertyPath?: string) => IExpressionOperator[];\n\n  getOperatorRows: (propertyPath?: string) => IExpressionOperatorRow[];\n\n  getOperatorRowsByGroup: (groupName: ExpressionOperatorGroup) => IExpressionOperatorRow[];\n\n  configureForProperty: (config: IExpressionConfiguratorPropertyConfig) => void;\n\n  validateProperty: (propertyPath: string, propertyValue: string) => Observable<boolean>;\n}\n\nexport interface IExpressionConfiguratorDefaultPropertyConfig {\n  dataDictionary$: Observable<IDataDictionary>;\n  operators: IExpressionOperatorRow[];\n  validateExpression: (propertyPath: string, expression: string) => Observable<boolean>;\n}\n\nexport interface IExpressionConfiguratorPropertyConfig extends Partial<IExpressionConfiguratorDefaultPropertyConfig> {\n  propertyPath: string | RegExp;\n}\n\nexport interface IExpressionConfiguratorProvider {\n  expressionConfigurator: IExpressionConfigurator;\n}\n"]}