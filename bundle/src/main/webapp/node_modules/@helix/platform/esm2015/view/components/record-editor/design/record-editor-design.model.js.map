{"version":3,"file":"record-editor-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/design/record-editor-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ViewComponentAddComponentPayload,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDropPredicateData,\n  ViewDesignerComponentModel,\n  IViewDesignerInspectorConfig\n} from '@helix/platform/view/designer';\nimport { IDataDictionaryBranch, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { ISelectOption } from '@helix/platform/shared/components';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { combineLatest, forkJoin, Observable, of, Subject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { flow, isEqual, map as _map, reject, uniq } from 'lodash';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxRecordEditorDesignHelpersService } from './record-editor-design-helpers.service';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { IRecordEditorSelectedFieldComponent } from './components/fields-inspector-widget/fields-inspector-widget.types';\n\nexport class RecordEditorDesignModel\n  extends ViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n  implements IViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n{\n  private rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  private rxViewComponentRegistryService =\n    this.injector.get<RxViewComponentRegistryService>(RxViewComponentRegistryService);\n\n  private rxRecordEditorDesignHelpersService = this.injector.get<RxRecordEditorDesignHelpersService>(\n    RxRecordEditorDesignHelpersService\n  );\n\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  private updateInspector$ = new Subject<IViewDesignerInspectorConfig>();\n\n  private associationOptions$: Observable<ISelectOption[]>;\n  private isAssociationRequired$: Observable<boolean>;\n\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  private mode$ = this.sandbox.getComponentPropertyValue('mode');\n  private showReadOnlyState$ = this.sandbox.getComponentPropertyValue('showReadOnlyState');\n  private targetExtensionContainerGuid$ = this.sandbox.getViewPropertyValue('targetExtensionContainerGuid');\n  private targetViewDefinitionName$ = this.sandbox.getViewPropertyValue('targetViewDefinitionName');\n\n  private recordDefinition$ = this.recordDefinitionName$.pipe(\n    switchMap((name) => this.rxRecordEditorDesignHelpersService.getRecordDefinition(name)),\n    shareReplay(1)\n  );\n\n  private childComponentGuids$ = this.sandbox.getChildComponentGuids().pipe(shareReplay(1));\n\n  private allChildFieldComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => this.rxRecordEditorDesignHelpersService.isFieldComponent(component), true)\n    .pipe(distinctUntilChanged<string[]>(isEqual), shareReplay(1));\n\n  isExtensionView$ = this.targetViewDefinitionName$.pipe(map(Boolean), shareReplay(1));\n\n  childFieldIds$: Observable<string[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid)\n            )\n          ).pipe(map(uniq))\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  selectedFieldComponents$: Observable<IRecordEditorSelectedFieldComponent[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.sandbox.getComponent(guid).pipe(\n                  take(1),\n                  map((component) => this.rxViewComponentRegistryService.get(component.type).name)\n                ),\n                this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid),\n                this.sandbox.getComponentPropertyValue<'label', IBaseRecordEditorFieldProperties>('label', guid)\n              ]).pipe(\n                map(\n                  ([componentName, fieldId, label]): IRecordEditorSelectedFieldComponent => ({\n                    fieldId,\n                    label: label || '<No field selected>',\n                    componentName,\n                    guid\n                  })\n                )\n              )\n            )\n          )\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  associationComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => component.type === RxViewComponentType.Association, true)\n    .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n\n  hasChildren$ = this.childComponentGuids$.pipe(\n    map((guids) => Boolean(guids.length)),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  readonly systemFieldComponentGuids$ = this.recordDefinition$.pipe(\n    mergeMap((recordDefinition) =>\n      recordDefinition\n        ? this.selectedFieldComponents$.pipe(\n            map((components) =>\n              components\n                .filter((component) => {\n                  const fieldDefinition = recordDefinition.fieldDefinitions.find(\n                    (definition) => String(definition.id) === component.fieldId\n                  );\n\n                  return this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n                })\n                .map((component) => component.guid)\n            ),\n            take(1)\n          )\n        : of([])\n    )\n  );\n\n  recordFieldDefinitionItems$ = this.recordDefinition$.pipe(\n    map((recordDefinition) =>\n      recordDefinition ? this.rxRecordEditorDesignHelpersService.getRecordFieldDefinitionItems(recordDefinition) : []\n    ),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProps?: IRecordEditorProperties): IRecordEditorDesignProperties {\n    const result: IRecordEditorProperties = {\n      name: null,\n      label: null,\n      mode: RecordEditorMode.Edit,\n      recordInstanceId: null,\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      defaultState: initialProps.defaultState || null,\n      allowEdit: '1',\n      styles: null,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProps\n    };\n\n    return {\n      ...result,\n      showReadOnlyState: Boolean(result.defaultState),\n      allowEdit: result.mode === RecordEditorMode.Edit ? result.allowEdit : null\n    };\n  }\n\n  rxInit(): void {\n    const targetRecordEditorProperties$ = combineLatest([\n      this.targetViewDefinitionName$.pipe(\n        switchMap((targetViewDefinitionName) =>\n          this.rxRecordEditorDesignHelpersService.getViewDefinition(targetViewDefinitionName)\n        )\n      ),\n      this.targetExtensionContainerGuid$\n    ]).pipe(\n      map(([viewDefinition, targetExtensionContainerGuid]) =>\n        this.rxRecordEditorDesignHelpersService.getTargetRecordEditorProperties(\n          viewDefinition,\n          targetExtensionContainerGuid\n        )\n      )\n    );\n\n    this.associationOptions$ = combineLatest([targetRecordEditorProperties$, this.recordDefinitionName$]).pipe(\n      switchMap(([targetRecordEditorProperties, extensionRecordDefinitionName]) =>\n        this.rxRecordEditorDesignHelpersService.getAssociationOptions(\n          targetRecordEditorProperties.recordDefinitionName,\n          extensionRecordDefinitionName\n        )\n      )\n    );\n\n    this.isAssociationRequired$ = combineLatest([\n      this.isExtensionView$,\n      this.recordDefinitionName$,\n      targetRecordEditorProperties$\n    ]).pipe(\n      map(\n        ([isExtensionView, recordDefinitionName, targetRecordEditorProperties]) =>\n          isExtensionView && recordDefinitionName !== targetRecordEditorProperties.recordDefinitionName\n      )\n    );\n\n    this.updateInspector$.pipe(takeUntil(this.sandbox.destroyed$)).subscribe((inspector) => {\n      this.sandbox.updateInspectorConfig(inspector);\n    });\n\n    // initial set of inspector\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$,\n      targetRecordEditorProperties$\n    ])\n      .pipe(first(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          { recordDefinitionName, mode, showReadOnlyState },\n          isExtensionView,\n          associationOptions,\n          isAssociationRequired,\n          targetRecordEditorProperties\n        ]) => {\n          if (isExtensionView && !recordDefinitionName) {\n            recordDefinitionName = targetRecordEditorProperties.recordDefinitionName;\n            mode = targetRecordEditorProperties.mode;\n\n            this.sandbox.updateComponentProperties({ mode, recordDefinitionName });\n          }\n\n          this.updateInspector$.next(\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              [],\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n          );\n        }\n      );\n\n    this.mode$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([mode, props]) => {\n        this.sandbox.updateComponentProperties(\n          mode === RecordEditorMode.Create || mode === RecordEditorMode.Temporary\n            ? {\n                ...props,\n                recordInstanceId: null,\n                defaultState: null,\n                allowEdit: null,\n                showReadOnlyState: null\n              }\n            : {\n                ...props,\n                defaultState: null,\n                allowEdit: '1',\n                showReadOnlyState: false\n              }\n        );\n      });\n\n    this.showReadOnlyState$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([showReadOnlyState, props]) => {\n        this.sandbox.updateComponentProperties({\n          ...props,\n          defaultState: showReadOnlyState ? RecordEditorState.Read : null\n        });\n      });\n\n    combineLatest([\n      combineLatest([\n        this.sandbox.getComponentPropertyValue('recordDefinitionName'),\n        this.sandbox.getComponentPropertyValue('mode'),\n        this.showReadOnlyState$\n      ]).pipe(skip(1)),\n      this.recordFieldDefinitionItems$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$\n    ])\n      .pipe(\n        map(\n          ([\n            [recordDefinitionName, mode, showReadOnlyState],\n            recordFieldDefinitionItems,\n            isExtensionView,\n            associationOptions,\n            isAssociationRequired\n          ]) =>\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              recordFieldDefinitionItems,\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(this.updateInspector$);\n\n    // clear child components after changing of record definition\n    this.recordDefinitionName$\n      .pipe(pairwise(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([prevName, currentName]) => {\n        if (prevName) {\n          this.sandbox.setChildren([]);\n          this.sandbox.updateComponentProperties({ associationDefinitionName: null });\n        }\n      });\n\n    this.associationOptions$\n      .pipe(\n        skip(1),\n        filter((associationOptions) => associationOptions.length === 1),\n        withLatestFrom(this.isAssociationRequired$),\n        filter(([, isAssociationRequired]) => isAssociationRequired),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([[{ id: associationDefinitionName }]]) =>\n        this.sandbox.updateComponentProperties({ associationDefinitionName })\n      );\n\n    // TODO: performance\n    // validation\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.childFieldIds$,\n      this.isAssociationRequired$,\n      this.isExtensionView$\n    ])\n      .pipe(\n        map(([componentProperties, recordDefinition, childFieldIds, isAssociationRequired, isExtensionView]) => {\n          return this.rxRecordEditorDesignHelpersService.validate(\n            this.sandbox,\n            componentProperties,\n            recordDefinition,\n            childFieldIds,\n            isAssociationRequired,\n            isExtensionView\n          );\n        }),\n        distinctUntilChanged(isEqual),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.sandbox.getComponentPropertyValue('name').pipe(\n        map((name) => name || null),\n        distinctUntilChanged()\n      ),\n      this.recordDefinition$\n    ])\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(([name, recordDefinition]) => {\n        this._setSettableProperties(name, recordDefinition);\n        this._setCommonDataDictionary(name, recordDefinition);\n      });\n  }\n\n  removeComponent(guids: string[]): void {\n    this.sandbox.removeComponents(guids);\n  }\n\n  updateSelectedFieldComponents(fieldIds: string[]): void {\n    this.selectedFieldComponents$\n      .pipe(\n        take(1),\n        mergeMap((components) => {\n          const fieldIdsToAdd = fieldIds.filter(\n            (fieldId) => !components.find((component) => component.fieldId === fieldId)\n          );\n\n          const fieldComponentsToAdd$: Observable<ViewComponentAddComponentPayload[]> = fieldIdsToAdd.length\n            ? this.recordFieldDefinitionItems$.pipe(\n                map((items) =>\n                  fieldIdsToAdd.map((fieldId) => {\n                    const { viewComponentType: type, name: label } = items.find((item) => item.id === fieldId);\n\n                    return {\n                      type,\n                      propertiesByName: {\n                        fieldId,\n                        label\n                      }\n                    };\n                  })\n                ),\n                take(1)\n              )\n            : of([]);\n\n          const fieldIdsSet = new Set(fieldIds);\n\n          const componentGuidsToRemove = components\n            .filter((component) => component.fieldId)\n            .filter((component) => !fieldIdsSet.has(component.fieldId))\n            .map((component) => component.guid);\n\n          return forkJoin([fieldComponentsToAdd$, of(componentGuidsToRemove)]);\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([fieldComponentsToAdd, fieldGuidsToRemove]) => {\n        if (fieldComponentsToAdd.length) {\n          this.sandbox.addComponent(fieldComponentsToAdd);\n        }\n\n        if (fieldGuidsToRemove.length) {\n          this.sandbox.removeComponents(fieldGuidsToRemove);\n        }\n      });\n  }\n\n  getPropertiesByName(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    return this.rxRecordEditorDesignHelpersService.getComponentProperties(properties);\n  }\n\n  _dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  _onBeforeModeChange(prevMode: string, currentMode: string): Promise<boolean> {\n    if (prevMode !== RecordEditorMode.Create && currentMode === RecordEditorMode.Create) {\n      return this.systemFieldComponentGuids$\n        .pipe(\n          mergeMap((systemFieldComponentGuids) =>\n            systemFieldComponentGuids.length\n              ? this.rxRecordEditorDesignHelpersService.confirmSystemFieldRemoval().pipe(\n                  tap((isConfirmed) => {\n                    if (isConfirmed) {\n                      this.sandbox.removeComponents(systemFieldComponentGuids);\n                    }\n                  })\n                )\n              : of(true)\n          ),\n          take(1)\n        )\n        .toPromise();\n    } else {\n      return Promise.resolve(true);\n    }\n  }\n\n  dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  private _setCommonDataDictionary(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setCommonDataDictionary(this._getCommonProps(componentName, recordDefinition));\n  }\n\n  private _setSettableProperties(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n      {\n        label: 'Edit state',\n        expression: this.getExpressionForProperty('editState')\n      },\n      {\n        label: 'Read state',\n        expression: this.getExpressionForProperty('readState')\n      },\n      ...(recordDefinition\n        ? [\n            {\n              label: 'Record instance',\n              children: recordDefinition.fieldDefinitions.map((definition) => ({\n                label: definition.name,\n                expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${definition.id}.value`)\n              }))\n            }\n          ]\n        : [])\n    ]);\n  }\n\n  private _getCommonProps(\n    componentName: string,\n    recordDefinition: IRecordDefinition\n  ): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: componentName,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Can save',\n          expression: this.getExpressionForProperty('canSave')\n        },\n        {\n          label: 'In read state',\n          expression: this.getExpressionForProperty('inReadState')\n        },\n        {\n          label: 'Is dirty',\n          expression: this.getExpressionForProperty('isDirty')\n        },\n        {\n          label: 'Is valid',\n          expression: this.getExpressionForProperty('isValid')\n        },\n        {\n          label: 'Record definition name',\n          expression: this.getExpressionForProperty('recordDefinitionName')\n        },\n        {\n          label: 'Record instance',\n          expression: this.getExpressionForProperty('recordInstance'),\n          children: recordDefinition ? this._getRecordInstanceChildProps(recordDefinition) : []\n        },\n        {\n          label: 'Record instance ID',\n          expression: this.getExpressionForProperty('recordInstanceId')\n        }\n      ]\n    };\n  }\n\n  private _getRecordInstanceChildProps(recordDefinition: IRecordDefinition): IViewComponentDesignCommonDataDictionary {\n    return flow(\n      (fieldDefinitions) => reject(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.attachment }),\n      (fieldDefinitions) =>\n        _map(fieldDefinitions, (fieldDefinition: IFieldDefinition) => {\n          const child: IDataDictionaryBranch = {\n            label: fieldDefinition.name,\n            expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${fieldDefinition.id}.value`)\n          };\n\n          if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection) {\n            const children = (child.autocompleteOptions = _map(\n              fieldDefinition.optionNamesById,\n              (optionName, optionValue) => ({\n                label: optionName,\n                expression: this.getExpressionForProperty(\n                  `recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id`\n                )\n              })\n            ));\n\n            child.children = [\n              {\n                label: `${fieldDefinition.name} (Option name)`,\n                expression: this.getExpressionForProperty(`selectionFieldOptionNamesById.${fieldDefinition.id}`)\n              },\n              {\n                label: 'Options',\n                children\n              }\n            ];\n          }\n\n          return child;\n        })\n    )(recordDefinition.fieldDefinitions);\n  }\n\n  private _getComponentName(name: string, recordDefinition: IRecordDefinition): string {\n    let componentName = this.sandbox.descriptor.name;\n\n    const recordDefinitionName = recordDefinition\n      ? this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n      : null;\n\n    if (recordDefinitionName && name) {\n      componentName += ` (${recordDefinitionName}: ${name})`;\n    } else if (recordDefinitionName) {\n      componentName += ` (${recordDefinitionName})`;\n    } else if (name) {\n      componentName += ` (${name})`;\n    }\n\n    return componentName;\n  }\n}\n"]}