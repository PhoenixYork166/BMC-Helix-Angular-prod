{"version":3,"file":"vertical-text-truncate.directive.js","sourceRoot":"","sources":["../../../../../../libs/platform/ui-kit/vertical-text-truncate/vertical-text-truncate.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAA4B,SAAS,EAAE,MAAM,eAAe,CAAC;;AAKlG,MAAM,OAAO,+BAA+B;IAC1C,YAAoB,EAAc,EAAU,QAAmB;QAA3C,OAAE,GAAF,EAAE,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAE/D,mBAAc,GAAG,EAAE,CAAC;QAGpB,2BAAsB,GAAG,EAAE,CAAC;IALsC,CAAC;IAOnE,eAAe;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,YAAY;QACV,MAAM,EAAE,GAAgB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAErF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAElD,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,KAAK,GAAa,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEpF,IAAI,WAAW,GAAG,EAAE,CAAC;YAErB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACxB,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;gBAE/B,WAAW,GAAG,GAAG,SAAS,IAAI,IAAI,EAAE,CAAC;gBAErC,IAAI,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,EAAE;oBACrC,kDAAkD;oBAClD,WAAW,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;oBAE/D,MAAM;iBACP;aACF;YAED,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;SACzD;IACH,CAAC;;4HAzCU,+BAA+B;gHAA/B,+BAA+B;2FAA/B,+BAA+B;kBAH3C,SAAS;mBAAC;oBACT,QAAQ,EAAE,0BAA0B;iBACrC;yHAOC,sBAAsB;sBADrB,KAAK","sourcesContent":["import { Directive, Input, ElementRef, AfterViewInit, OnChanges, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[rxVerticalTextTruncate]'\n})\nexport class RxVerticalTextTruncateDirective implements AfterViewInit, OnChanges {\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  textToTruncate = '';\n\n  @Input()\n  rxVerticalTextTruncate = '';\n\n  ngAfterViewInit(): void {\n    this.truncateText();\n  }\n\n  ngOnChanges(): void {\n    this.truncateText();\n  }\n\n  truncateText(): void {\n    const el: HTMLElement = this.renderer.selectRootElement(this.el.nativeElement, true);\n\n    this.textToTruncate = this.rxVerticalTextTruncate;\n\n    if (this.textToTruncate) {\n      const words: string[] = this.textToTruncate.trim().replace(/\\n|\\r/g, '').split(' ');\n\n      let resultValue = '';\n\n      for (const word of words) {\n        const innerText = el.innerText;\n\n        resultValue = `${innerText} ${word}`;\n\n        if (el.scrollHeight > el.offsetHeight) {\n          // Subtract 3 characters, since we concatenate ...\n          resultValue = `${innerText.slice(0, innerText.length - 3)}...`;\n\n          break;\n        }\n      }\n\n      this.renderer.setProperty(el, 'innerText', resultValue);\n    }\n  }\n}\n"]}