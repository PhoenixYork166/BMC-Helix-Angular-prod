{"version":3,"file":"cell-display-properties-editor.component.js","sourceRoot":"","sources":["../../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.ts","../../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, Injector, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ICellDisplayProperties,\n  ICellDisplayPropertiesEditorConfig,\n  RX_CELL_PROPERTIES,\n  RxGridCellBgColorCssMap,\n  RxGridCellColor,\n  RxGridCellIconPosition\n} from '../../../../../common/types/cell-display-properties.types';\nimport {\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  IIconPickerFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ExpressionOperatorGroup, IPlainObject } from '@helix/platform/shared/api';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { forEach, get, omit } from 'lodash';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RecordGridCellDisplayPropertiesExpressionConfigurator } from './cell-display-properties-expression-configurator.class';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cell-display-properties-editor',\n  templateUrl: './cell-display-properties-editor.component.html',\n  styleUrls: ['./cell-display-properties-editor.component.scss']\n})\nexport class RecordGridCellDisplayPropertiesEditorComponent extends RxModalClass implements OnInit, OnDestroy {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  private expressionConfigurator: RecordGridCellDisplayPropertiesExpressionConfigurator;\n\n  config: ICellDisplayPropertiesEditorConfig = this.activeModalRef.getData();\n  queryExpressionOptions: IExpressionFormControlOptions;\n  propsFormArray: FormArray = this.formBuilder.array([]);\n  iconPositions: RxSelectOption[] = RX_CELL_PROPERTIES.iconPositions;\n  textColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList;\n  fontSizes: RxSelectOption[] = RX_CELL_PROPERTIES.fontSizes;\n  colorsList: IPlainObject = RxGridCellBgColorCssMap;\n\n  backgroundColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => color.value !== RxGridCellColor.Light\n  );\n\n  badgeColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => ![RxGridCellColor.Light, RxGridCellColor.Active, null].includes(color.value)\n  );\n\n  iconPickerOptions: IIconPickerFormControlOptions = {\n    label: 'Icon',\n    appendToBody: true,\n    required: false\n  };\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.expressionConfigurator = new RecordGridCellDisplayPropertiesExpressionConfigurator();\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'cellDisplayProperties',\n      dataDictionary$: this.expressionConfigurator.cellDisplayExpressionDataDictionary(this.config.columns),\n      operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.AllClient)\n    });\n\n    this.queryExpressionOptions = {\n      label: 'Field value condition',\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('cellDisplayProperties'),\n      operators: this.expressionConfigurator.getOperators('cellDisplayProperties'),\n      isRequired: true\n    };\n\n    forEach(this.config.cellDisplayProperties, (props) => this.propsFormArray.push(this.getFormGroup(props)));\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  addCellProperties(): void {\n    this.markAsDirty();\n\n    this.propsFormArray.push(\n      this.getFormGroup({\n        fieldValueCondition: '',\n        displayAsBadge: false,\n        badgeColor: null,\n        icon: null,\n        iconPosition: null,\n        textColor: null,\n        backgroundColor: null,\n        fontSize: null,\n        bold: false,\n        italic: false,\n        isOpen: true\n      })\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeCellProperties(index: number): void {\n    this.propsFormArray.removeAt(index);\n    this.markAsDirty();\n  }\n\n  optionFormatter(selectOption: RxSelectOption): string {\n    return selectOption.label;\n  }\n\n  private getFormGroup(properties: ICellDisplayProperties): FormGroup {\n    const formGroup = this.formBuilder.group({\n      fieldValueCondition: [properties.fieldValueCondition, Validators.required],\n      displayAsBadge: [properties.displayAsBadge],\n      badgeColor: {\n        value: this.getSelectValue(this.badgeColors, 'value', properties.badgeColor),\n        disabled: !properties.displayAsBadge\n      },\n      icon: {\n        value: properties.icon,\n        disabled: properties.displayAsBadge\n      },\n      iconPosition: {\n        value: this.getSelectValue(this.iconPositions, 'value', properties.iconPosition),\n        disabled: !properties.icon\n      },\n      textColor: {\n        value: this.getSelectValue(this.textColors, 'value', properties.textColor),\n        disabled: properties.displayAsBadge\n      },\n      backgroundColor: {\n        value: this.getSelectValue(this.backgroundColors, 'value', properties.backgroundColor),\n        disabled: properties.displayAsBadge\n      },\n      fontSize: {\n        value: this.getSelectValue(this.fontSizes, 'value', properties.fontSize),\n        disabled: properties.displayAsBadge\n      },\n      bold: [properties.bold],\n      italic: [properties.italic],\n      isOpen: [properties.isOpen ?? false]\n    });\n\n    formGroup.controls.displayAsBadge.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((displayAsBadge: boolean) => {\n        if (displayAsBadge && formGroup.controls.badgeColor.disabled) {\n          formGroup.controls.badgeColor.reset({ value: [this.badgeColors[0]], disabled: false });\n        }\n\n        if (!displayAsBadge && formGroup.controls.badgeColor.enabled) {\n          formGroup.controls.badgeColor.reset({ value: [], disabled: true });\n        }\n      });\n\n    formGroup.controls.icon.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((iconName: string) => {\n      if (iconName && formGroup.controls.iconPosition.disabled) {\n        formGroup.controls.iconPosition.reset({ value: [this.iconPositions[0]], disabled: false });\n      }\n\n      if (!iconName && formGroup.controls.iconPosition.enabled) {\n        formGroup.controls.iconPosition.reset({ value: [], disabled: true });\n      }\n    });\n\n    return formGroup;\n  }\n\n  private getSelectValue(optionsList: RxSelectOption[], key: string, value: string): RxSelectOption[] {\n    const item = optionsList.find((option) => option[key] === value);\n\n    return item ? [item] : [];\n  }\n\n  openExpressionEditor(control: AbstractControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'cellDisplayProperties',\n          value: control.value,\n          label: 'Cell display properties'\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.column.label'),\n            icon: 'd-icon-field_text'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        control.setValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  moveCellProperties(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.propsFormArray.controls, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onSelectedCellPropertyDrop(event: CdkDragDrop<any[], any>): void {\n    moveItemInArray(this.propsFormArray.controls, event.previousIndex, event.currentIndex);\n\n    this.markAsDirty();\n  }\n\n  toggleProp(control: AbstractControl): void {\n    control.setValue(!control.value);\n    this.markAsDirty();\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.propsFormArray.controls.forEach((control) => {\n      control.get('isOpen').setValue(expandAll);\n    });\n  }\n\n  resetIconAndTextProps(props: AbstractControl): void {\n    const isDisplayAsBadge: boolean = props.get('displayAsBadge').value;\n\n    props.get('icon').reset({ value: null, disabled: isDisplayAsBadge });\n    props.get('textColor').reset({ value: [this.textColors[0]], disabled: isDisplayAsBadge });\n    props.get('backgroundColor').reset({ value: [this.backgroundColors[0]], disabled: isDisplayAsBadge });\n    props.get('fontSize').reset({ value: [this.fontSizes[0]], disabled: isDisplayAsBadge });\n    props.get('bold').reset({ value: false, disabled: isDisplayAsBadge });\n    props.get('italic').reset({ value: false, disabled: isDisplayAsBadge });\n  }\n\n  onSave(): void {\n    const formValues: ICellDisplayProperties[] = this.propsFormArray.getRawValue().map((value) => ({\n      ...value,\n      icon: get(value, 'icon', null),\n      badgeColor: get(value, 'badgeColor[0].value', null),\n      iconPosition: get(value, 'iconPosition[0].value', null),\n      textColor: get(value, 'textColor[0].value', null),\n      backgroundColor: get(value, 'backgroundColor[0].value', null),\n      fontSize: get(value, 'fontSize[0].value', null)\n    }));\n\n    const cellProps: ICellDisplayProperties[] = formValues.map((value) => ({\n      ...omit(value, 'isOpen')\n    }));\n\n    this.activeModalRef.close(cellProps);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <div>\n          <button\n            *ngIf=\"!config.isReadOnly\"\n            class=\"pl-0 pr-0\"\n            rx-id=\"add-button\"\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            (click)=\"addCellProperties()\"\n          >\n            <span class=\"d-icon-left-plus_circle\"></span>\n\n            {{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.add-cell-display-property.button.label' | translate }}\n          </button>\n\n          <span\n            class=\"d-icon-right-question_circle_o ml-1 mt-1\"\n            adaptPopover=\"Cell display properties will be applied based on the first field value condition evaluating to true.\"\n            placement=\"bottom\"\n            appendToBody=\"true\"\n          ></span>\n        </div>\n\n        <div *ngIf=\"propsFormArray.controls.length\" class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"toggleOpen(true)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"propsFormArray.controls.length\"\n        id=\"selected-cell-property\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedCellPropertyDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let props of propsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last;\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"props\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"props\"\n              [isOpen]=\"props.get('isOpen').value\"\n              (open)=\"props.get('isOpen').setValue(true)\"\n              (close)=\"props.get('isOpen').setValue(false)\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"'Cell display properties ' + (index + 1)\" rx-id=\"card-title\">\n                      Cell display properties {{ index + 1 }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeCellProperties(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <rx-expression-form-control\n                  formControlName=\"fieldValueCondition\"\n                  class=\"form-group d-block col-12\"\n                  rx-id=\"query-expression-field\"\n                  [options]=\"queryExpressionOptions\"\n                  (events)=\"openExpressionEditor(props.get('fieldValueCondition'))\"\n                ></rx-expression-form-control>\n              </div>\n\n              <div class=\"row form-group\">\n                <div class=\"col-3\">\n                  <adapt-rx-control-label\n                    label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.display-as-badge-field.label' | translate }}\"\n                  ></adapt-rx-control-label>\n\n                  <adapt-rx-switch\n                    [disabled]=\"config.isReadOnly\"\n                    formControlName=\"displayAsBadge\"\n                    (ngModelChange)=\"markAsDirty(); resetIconAndTextProps(props)\"\n                  ></adapt-rx-switch>\n                </div>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.badge-color-field.label' | translate }}\"\n                  formControlName=\"badgeColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"badgeColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <rx-icon-picker-form-control\n                  class=\"d-block col-3\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPickerOptions\"\n                  formControlName=\"icon\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-icon-picker-form-control>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.icon-position-field.label' | translate }}\"\n                  formControlName=\"iconPosition\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPositions\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n              </div>\n\n              <div class=\"row\">\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.text-color-field.label' | translate }}\"\n                  formControlName=\"textColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"textColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.background-color-field.label' | translate }}\"\n                  formControlName=\"backgroundColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"backgroundColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.font-size-field.label' | translate }}\"\n                  formControlName=\"fontSize\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"fontSizes\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <div class=\"col-3 pt-4 d-flex align-item-center\">\n                  <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label\n                      class=\"btn btn-secondary d-icon-bold_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('bold').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('bold'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n\n                    <label\n                      class=\"btn btn-secondary ml-2 d-icon-italic_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('italic').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('italic'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!propsFormArray.controls.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.empty-state.message' | translate }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"propsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ config.isReadOnly ? ('com.bmc.arsys.rx.client.common.close.label' | translate) : ('com.bmc.arsys.rx.client.common.cancel.label' | translate) }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <div class=\"d-flex align-items-center\">\n    <div [ngClass]=\"option.value ? 'color-option-box rounded mr-2 ' + colorsList[option.value] : ''\"></div>\n    {{ option.label }}\n  </div>\n</ng-template>\n"]}