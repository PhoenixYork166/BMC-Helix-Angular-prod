{"version":3,"file":"record-server-action.mixin.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/server-actions/record/record-server-action.mixin.ts"],"names":[],"mappings":"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","sourcesContent":["import { TranslateService } from '@ngx-translate/core';\n\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { Constructor } from '@helix/platform/utils';\nimport { RxRootInjector } from '@helix/platform/shared/api';\nimport { RX_SELECT_EXPRESSION_DROPDOWN } from '@helix/platform/shared/components';\n\nimport { RX_RECORD_SERVER_ACTION } from './record-server-action.constant';\nimport { IRecordServerActionInputMapModel } from './record-server-action.types';\n\nexport function RxRecordServerActionMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxRecordServerAction extends Base {\n    lastRecordDefinitionName: string;\n    lastSampleRecordDefinitionName: string;\n    selectExpressionDropdownValue: string;\n\n    initialize(config: any): void {\n      // @ts-ignore\n      super.initialize(config);\n\n      this.lastRecordDefinitionName = this.getRecordDefinitionName();\n      this.lastSampleRecordDefinitionName = this.getSampleRecordDefinitionName();\n\n      if (this.lastRecordDefinitionName) {\n        if (this.lastRecordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n        } else {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n        }\n      }\n    }\n\n    afterRecordDefinitionNameChange(recordDefinitionName: string): void {\n      this.lastRecordDefinitionName = recordDefinitionName;\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    afterSampleRecordDefinitionNameChange(sampleRecordDefinitionName: string): void {\n      this.lastSampleRecordDefinitionName = sampleRecordDefinitionName;\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    getRecordDefinitionName(): string {\n      // @ts-ignore\n      const recordDefinitionName = this.getInputMap().recordDefinitionName;\n\n      return recordDefinitionName ? recordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n\n    getRecordDefinitionNameChangeConfirmationMessageKey(): string {\n      return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-input-output-maps-confirmation.message';\n    }\n\n    getSampleRecordDefinitionName(): string {\n      // @ts-ignore\n      const sampleRecordDefinitionName = this.getInputMap().sampleRecordDefinitionName;\n\n      return sampleRecordDefinitionName ? sampleRecordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n\n    onInputMapChanged(\n      element: any,\n      inputMap: IRecordServerActionInputMapModel,\n      inputMapPropertyPath: string,\n      inputMapPropertyValue: string,\n      isCommandManagerOperation: boolean\n    ): void {\n      if (inputMapPropertyPath === 'recordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n\n          // @ts-ignore\n          if (this.lastRecordDefinitionName) {\n            RxRootInjector.injector\n              .get(RxModalService)\n              .confirm({\n                title: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n              })\n              .then((context) => {\n                if (context) {\n                  this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n                } else {\n                  // @ts-ignore\n                  this.getCommandManager().storeBatchCommand();\n                  // @ts-ignore\n                  this.getCommandManager().cancel();\n                }\n              })\n              .catch(() => {\n                // @ts-ignore\n                this.getCommandManager().storeBatchCommand();\n                // @ts-ignore\n                this.getCommandManager().cancel();\n              });\n          } else {\n            this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n\n        if (inputMapPropertyValue) {\n          if (inputMapPropertyValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n          } else {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n          }\n        }\n      }\n\n      if (inputMapPropertyPath === 'sampleRecordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastSampleRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n\n          if (this.lastSampleRecordDefinitionName) {\n            RxRootInjector.injector\n              .get(RxModalService)\n              .confirm({\n                title: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n              })\n              .then(() => {\n                this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n              })\n              .catch(() => {\n                // @ts-ignore\n                this.getCommandManager().storeBatchCommand();\n                // @ts-ignore\n                this.getCommandManager().cancel();\n              });\n          } else {\n            this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n      }\n    }\n  };\n}\n"]}