{"version":3,"file":"association-definition-cache.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/association/api/association-definition-cache.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAI3C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,8BAA8B,EAAE,MAAM,kCAAkC,CAAC;;;AAKlF,MAAM,OAAO,mCAAmC;IAI9C,YAAoB,8BAA8D;QAA9D,mCAA8B,GAA9B,8BAA8B,CAAgC;QAH1E,2BAAsB,GAAoD,IAAI,GAAG,EAAE,CAAC;QACpF,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;IAEsC,CAAC;IAEtF,wBAAwB,CAAC,yBAAyB,EAAE,OAAwB;QAC1E,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAAE;YAC/D,MAAM,sBAAsB,GAAG,IAAI,CAAC,8BAA8B;iBAC/D,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC;iBACvC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,yBAAyB,EAAE,sBAAsB,CAAC,CAAC;SACpF;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACpE,CAAC;IAED,gBAAgB,CAAC,gBAAiC;QAChD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;;gIAhCU,mCAAmC;oIAAnC,mCAAmC,cAFlC,MAAM;2FAEP,mCAAmC;kBAH/C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IHttpGetParams } from '@helix/platform/shared/api';\nimport { IAssociationDefinition } from './association-definition.types';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { isEmpty } from 'lodash';\nimport { RxAssociationDefinitionService } from './association-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAssociationDefinitionCacheService {\n  private associationDefinitions: Map<string, Observable<IAssociationDefinition>> = new Map();\n  private consumers = new Set<Observable<any>>();\n\n  constructor(private rxAssociationDefinitionService: RxAssociationDefinitionService) {}\n\n  getAssociationDefinition(associationDefinitionName, options?: IHttpGetParams): Observable<IAssociationDefinition> {\n    if (!this.associationDefinitions.has(associationDefinitionName)) {\n      const associationDefinition$ = this.rxAssociationDefinitionService\n        .get(associationDefinitionName, options)\n        .pipe(shareReplay(1));\n\n      this.associationDefinitions.set(associationDefinitionName, associationDefinition$);\n    }\n\n    return this.associationDefinitions.get(associationDefinitionName);\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  private clearCache(): void {\n    this.associationDefinitions.clear();\n  }\n}\n"]}