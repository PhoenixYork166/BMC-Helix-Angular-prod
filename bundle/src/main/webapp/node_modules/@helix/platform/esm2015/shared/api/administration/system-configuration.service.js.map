{"version":3,"file":"system-configuration.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/administration/system-configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAE/C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;;;AAM9D,MAAM,OAAO,4BAA4B;IACvC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAElC,yBAAoB,GAAkC,EAAE,CAAC;IAFpB,CAAC;IAI9C,UAAU;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CACrD,GAAG,CAAC,CAAC,oBAA4C,EAAE,EAAE;YACnD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC,MAAM,CACrD,CAAC,OAAO,EAAE,mBAAmB,EAAE,EAAE;gBAC/B,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,KAAK,CAAC;gBAE5D,OAAO,OAAO,CAAC;YACjB,CAAC,EACD,EAAE,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,oBAAoB,CAAC,UAAkB;QACrC,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YAE1D,IAAI,WAAW,CAAC,WAAW,CAAC,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,wBAAwB,UAAU,oBAAoB,CAAC,CAAC;aACzE;YAED,OAAO,WAAW,CAAC;SACpB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;IACH,CAAC;IAED,gBAAgB,CAAC,iBAAyB;QACxC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,GAAG,iBAAiB,CAAC,sBAAsB,IAAI,iBAAiB,EAAE,CACnE,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,iBAAyB,EAAE,kBAAuB;QACjE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,sBAAsB,IAAI,iBAAiB,EAAE,EAAE;YAC7F,IAAI,EAAE,iBAAiB;YACvB,KAAK,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC;SAC9F,CAAC,CAAC;IACL,CAAC;IAED,kBAAkB,CAAC,WAAqB;QACtC,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,kBAAkB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE9G,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,GAAG,iBAAiB,CAAC,sBAAsB,UAAU,WAAW,EAAE,CACnE,CAAC;IACJ,CAAC;;yHArDU,4BAA4B;6HAA5B,4BAA4B,cAF3B,MAAM;2FAEP,4BAA4B;kBAHxC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { isUndefined, isString } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RX_ADMINISTRATION } from './administration.constant';\nimport { ISystemConfiguration, SystemConfigurationValue, SystemConfigurationValuesById } from './administration.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSystemConfigurationService {\n  constructor(private httpClient: HttpClient) {}\n\n  private systemConfigurations: SystemConfigurationValuesById = {};\n\n  initialize(): Observable<ISystemConfiguration[]> {\n    return this.queryConfiguration(['Submitter-Mode']).pipe(\n      tap((systemConfigurations: ISystemConfiguration[]) => {\n        this.systemConfigurations = systemConfigurations.reduce<SystemConfigurationValuesById>(\n          (configs, systemConfiguration) => {\n            configs[systemConfiguration.id] = systemConfiguration.value;\n\n            return configs;\n          },\n          {}\n        );\n      })\n    );\n  }\n\n  getConfigurationSync(identifier: string): SystemConfigurationValue {\n    if (this.systemConfigurations) {\n      const configValue = this.systemConfigurations[identifier];\n\n      if (isUndefined(configValue)) {\n        throw new Error(`System configuration ${identifier} is not available.`);\n      }\n\n      return configValue;\n    } else {\n      throw new Error('System configuration service is not initialized.');\n    }\n  }\n\n  getConfiguration(configurationName: string): Observable<ISystemConfiguration> {\n    return this.httpClient.get<ISystemConfiguration>(\n      `${RX_ADMINISTRATION.systemConfigurationUrl}/${configurationName}`\n    );\n  }\n\n  setConfiguration(configurationName: string, configurationValue: any): Observable<any> {\n    return this.httpClient.put(`${RX_ADMINISTRATION.systemConfigurationUrl}/${configurationName}`, {\n      name: configurationName,\n      value: isString(configurationValue) ? configurationValue : JSON.stringify(configurationValue)\n    });\n  }\n\n  queryConfiguration(identifiers: string[]): Observable<ISystemConfiguration[]> {\n    const queryString = identifiers.map((identifier) => `identifier=${encodeURIComponent(identifier)}`).join('&');\n\n    return this.httpClient.get<ISystemConfiguration[]>(\n      `${RX_ADMINISTRATION.systemConfigurationUrl}/query?${queryString}`\n    );\n  }\n}\n"]}