{"version":3,"file":"http-log-interceptor.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/logging/http-log-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwD,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAC1G,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACrD,OAAO,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,2CAA2C,CAAC;AAE9E,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;;;;AAG7C,MAAM,OAAO,oBAAoB;IAC/B,YAAoB,YAA0B,EAAU,mBAAwC;QAA5E,iBAAY,GAAZ,YAAY,CAAc;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAG,CAAC;IAEpG,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,IAAI,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,EAAE;YAC1C,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;YAC5F,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAElG,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CACjD,GAAG,CAAC,CAAC,SAAyB,EAAE,EAAE;gBAChC,IAAI,SAAS,YAAY,YAAY,EAAE;oBACrC,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;oBAE5E,IAAI,SAAS,EAAE;wBACb,IAAI,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;wBAE7E,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;wBAE7D,OAAO,CAAC,iBAAiB,EAAE,CAAC,OAA+B,EAAE,EAAE,CAC7D,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAC3C,CAAC;qBACH;iBACF;YACH,CAAC,CAAC,EAEF,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;gBACjB,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,UAAU,GAAG,CAC3G,CAAC;gBAEF,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC7B;IACH,CAAC;IAEO,qBAAqB,CAAC,GAAW;QACvC,IAAI,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACxB,OAAO,GAAG,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;SACnC;aAAM;YACL,OAAO,GAAG,CAAC;SACZ;IACH,CAAC;;iHA5CU,oBAAoB;qHAApB,oBAAoB;2FAApB,oBAAoB;kBADhC,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { filter, forEach, startsWith } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RX_ERROR_HANDLING } from '../error-handling/error-handling.constant';\nimport { IServerResponseMessage } from '../error-handling/error-handling.types';\nimport { RxLogService } from './log.service';\n\n@Injectable()\nexport class RxHttpLogInterceptor implements HttpInterceptor {\n  constructor(private rxLogService: RxLogService, private rxJsonParserService: RxJsonParserService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.rxLogService.logCategories.length) {\n      const headers = request.headers.set('log-retrieval', this.rxLogService.serverLogCategories);\n      this.rxLogService.debug(`${request.method} ${this.getAbsoluteRequestUrl(request.urlWithParams)}`);\n\n      return next.handle(request.clone({ headers })).pipe(\n        tap((httpEvent: HttpEvent<any>) => {\n          if (httpEvent instanceof HttpResponse) {\n            const serverLog = httpEvent.headers.get(RX_ERROR_HANDLING.arMessagesHeader);\n\n            if (serverLog) {\n              let serverLogMessages = this.rxJsonParserService.tryParseJson(serverLog, []);\n\n              serverLogMessages = filter(serverLogMessages, 'messageText');\n\n              forEach(serverLogMessages, (logData: IServerResponseMessage) =>\n                this.rxLogService.log(logData.messageText)\n              );\n            }\n          }\n        }),\n\n        catchError((err) => {\n          this.rxLogService.warning(\n            `${request.method} ${this.getAbsoluteRequestUrl(request.urlWithParams)} ${err.status} (${err.statusText})`\n          );\n\n          return throwError(err);\n        })\n      );\n    } else {\n      return next.handle(request);\n    }\n  }\n\n  private getAbsoluteRequestUrl(url: string): string {\n    if (startsWith(url, '/')) {\n      return `${location.origin}${url}`;\n    } else {\n      return url;\n    }\n  }\n}\n"]}