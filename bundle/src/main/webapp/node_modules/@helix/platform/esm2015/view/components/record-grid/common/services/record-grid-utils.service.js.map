{"version":3,"file":"record-grid-utils.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/common/services/record-grid-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AACvG,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAC9D,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAExD,OAAO,EAIL,+BAA+B,EAC/B,yBAAyB,EAC1B,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAGL,oBAAoB,EACpB,8BAA8B,EAC/B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,uBAAuB,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AACnF,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAIxD,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAG5D,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;;;;;AAKtE,MAAM,OAAO,wBAAwB;IACnC,YACU,YAA0B,EAC1B,8BAA8D,EAC9D,aAA8B,EAC9B,uBAAgD,EAChD,wBAAkD;QAJlD,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,kBAAa,GAAb,aAAa,CAAiB;QAC9B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,6BAAwB,GAAxB,wBAAwB,CAA0B;IACzD,CAAC;IAEJ,oBAAoB,CAAC,oBAA4B,EAAE,MAAqB;QACtE,OAAO,IAAI,CAAC,8BAA8B;aACvC,mBAAmB,CAAC,oBAAoB,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,CAAC,gBAAmC,EAAE,EAAE;YAC5C,IAAI,UAAU,CAAoB,MAAO,CAAC,UAAU,CAAC,EAAE;gBACrD,MAAM,OAAO,GAA2C,MAAO;qBAC5D,UAAU,EAAE;qBACZ,GAAG,CAAC,CAAC,MAAyC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;oBAC1D,OAAO,EAAE,MAAM,CAAC,KAAK;oBACrB,KAAK;oBACL,KAAK,EAAE,MAAM,CAAC,MAAM;oBACpB,eAAe,EAAE,MAAM,CAAC,eAAe;iBACxC,CAAC,CAAC,CAAC;gBAEN,OAAO,OAAO,CAAC,GAAG,CAChB,OAAO;qBACJ,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;qBAClE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACd,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC;qBAC5D,SAAS,EAAE;qBACX,IAAI,CAAC,CAAC,qBAAqB,EAAE,EAAE;oBAC9B,MAAM,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;gBACvD,CAAC,CAAC,CACL,CACJ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;aAC3B;iBAAM;gBACL,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAC1C,CAAC,eAAiC,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC;oBACrD,OAAO,EAAU,eAAe,CAAC,EAAE;oBACnC,KAAK;oBACL,KAAK,EAAE,eAAe,CAAC,IAAI;oBAC3B,eAAe,EAAE,eAAe;iBACjC,CAAC,CACH,CAAC;aACH;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yBAAyB,CAAC,oBAA4B;QACpD,OAAO,QAAQ,CAAC;YACd,IAAI,CAAC,8BAA8B,CAAC,+BAA+B,CAAC,oBAAoB,CAAC;YACzF,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,oBAAoB,CAAC;SAC9E,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,gBAAgB,CAAC,EAAE,EAAE;YACvC,MAAM,sBAAsB,GAAG,EAAE,CAAC;YAElC,OAAO,CAAC,YAAY,CAAC,oBAAoB,CAAC,EAAE,CAAC,qBAAqB,EAAE,EAAE;gBACpE,MAAM,WAAW,GACf,qBAAqB,CAAC,WAAW,KAAK,yBAAyB,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC;gBAE9F,MAAM,uBAAuB,GAC3B,qBAAqB,CAAC,WAAW,KAAK,yBAAyB,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC;gBAE/F,IAAI,CAAC,uBAAuB,EAAE;oBAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,EAAE;wBAC1F,sBAAsB,CAAC,IAAI,CAAC;4BAC1B,qBAAqB,EAAE,qBAAqB;4BAC5C,oBAAoB,EAAE,qBAAqB,CAAC,OAAO;4BACnD,QAAQ,EAAE,+BAA+B,CAAC,KAAK,CAAC,KAAK;4BACrD,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,EAAE,+BAA+B,CAAC,KAAK,CAAC;yBAC9F,CAAC,CAAC;qBACJ;oBAED,IACE,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,CAAC;wBACtF,CAAC,WAAW,EACZ;wBACA,sBAAsB,CAAC,IAAI,CAAC;4BAC1B,qBAAqB,EAAE,qBAAqB;4BAC5C,oBAAoB,EAAE,qBAAqB,CAAC,OAAO;4BACnD,QAAQ,EAAE,+BAA+B,CAAC,KAAK,CAAC,KAAK;4BACrD,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,EAAE,+BAA+B,CAAC,KAAK,CAAC;yBAC9F,CAAC,CAAC;qBACJ;iBACF;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,kBAAkB,CAChB,iBAAyB,EACzB,uBAA0C;QAE1C,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACxD,MAAM,gBAAgB,GAAG,IAAI,YAAY,EAAoB,CAAC;QAC9D,IAAI,uBAAmD,CAAC;QAExD,IAAI,OAAO,CAAC,OAAO,KAAK,cAAc,CAAC,4BAA4B,CAAC,EAAE,EAAE;YACtE,OAAO,EAAE,CAAC,cAAc,CAAC,4BAA4B,CAAC,CAAC;SACxD;aAAM;YACL,IAAI,OAAO,CAAC,eAAe,EAAE;gBAC3B,uBAAuB,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,IAAI,CAAC;qBACnF,IAAI,CACH,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC,EAChG,MAAM,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,EACjE,GAAG,CACD,CAAC,qBAAqB,EAAE,EAAE,CACxB,qBAAqB,CAAC,qBAAqB,CACzC,+BAA+B,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,uBAAuB,CACxF,CACJ,EACD,SAAS,CAAC,CAAC,oBAAoB,EAAE,EAAE;oBACjC,OAAO,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;gBACvF,CAAC,CAAC,CACH;qBACA,SAAS,EAAE,CAAC;aAChB;iBAAM;gBACL,uBAAuB,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;aACpE;YAED,uBAAuB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBAChD,IAAI,eAAiC,CAAC;gBAEtC,IAAI,gBAAgB,EAAE;oBACpB,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;wBACxD,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO;qBAC/C,CAAC,CAAC;iBACJ;gBAED,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBACvC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;YAEH,OAAO,gBAAgB,CAAC;SACzB;IACH,CAAC;IAED,yBAAyB,CAAC,OAAe;QACvC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED,uBAAuB,CAAC,OAAwB,EAAE,qBAA8C;QAC9F,OAAO,qBAAqB;YAC1B,CAAC,CAAC,+BAA+B,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,IAAI,qBAAqB,CAAC,QAAQ,OAAO,OAAO,EAAE;YACnI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED,wBAAwB,CACtB,iBAAyB,EACzB,uBAA0C;QAE1C,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACxD,IAAI,qBAAqB,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,OAAO,CAAC,eAAe,EAAE;YAC3B,qBAAqB,GAAG,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,IAAI,CACvF,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC,CACjG,CAAC;SACH;QAED,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAED,yBAAyB,CACvB,OAAe,EACf,uBAA0C,EAC1C,8BAAsC;QAEtC,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAEnD,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC;YAC9D,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,8BAA8B,CAAC,CAAC,IAAI,CAC1F,GAAG,CAAC,CAAC,0BAA0B,EAAE,EAAE;gBACjC,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,KAAK,MAAM,CAAC,oBAAoB,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBAE5F,MAAM,cAAc,GAAG,MAAM,CAC3B,CAAC,aAAa,IAAI,0BAA0B,CAAC,2BAA2B,CAAC,IAAI,YAAY,CAAC,OAAO,CAClG,CAAC;gBAEF,OAAO,IAAI,CACT,0BAA0B,CAAC,gBAAgB,EAC3C,CAAC,eAAe,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,cAAc,CACnE,CAAC;YACJ,CAAC,CAAC,CACH;YACH,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;QAEpH,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,cAAc,CAAC,eAAiC,EAAE,qBAA8C;QAC9F,OAAO,qBAAqB,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,KAAK,MAAM,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC;IACnH,CAAC;IAED,yBAAyB,CACvB,sBAAgD,EAChD,OAAsB;QAEtB,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC,qBAA6C,EAAE,EAAE;YACpF,OAAO,CACL,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,KAAK,OAAO,CAAC,eAAe;gBAC5E,qBAAqB,CAAC,QAAQ,KAAK,OAAO,CAAC,mBAAmB,CAC/D,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,iBAAyB;QACvC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,8BAA8B,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEnH,OAAO;YACL,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;YACzB,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7B,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;SAClB,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,QAAgB,EAAE,oBAA4B,EAAE,gBAAmC;QACpG,OAAO,QAAQ,CAAC,CAAC,oBAAoB,EAAE,GAAG,CAAC,gBAAgB,EAAE,sCAAsC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACnH,CAAC;IAEO,mBAAmB,CAAC,qBAA6C,EAAE,QAA0B;QACnG,IAAI,YAAoB,CAAC;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAEpF,IAAI,qBAAqB,CAAC,OAAO,KAAK,qBAAqB,CAAC,OAAO,EAAE;YACnE,IAAI,QAAQ,KAAK,+BAA+B,CAAC,KAAK,EAAE;gBACtD,YAAY,GAAG,qBAAqB,CAAC,SAAS,CAAC;aAChD;YAED,IAAI,QAAQ,KAAK,+BAA+B,CAAC,KAAK,EAAE;gBACtD,YAAY,GAAG,qBAAqB,CAAC,SAAS,CAAC;aAChD;YAED,YAAY,GAAG,YAAY,IAAI,QAAQ,CAAC,WAAW,CAAC;YAEpD,KAAK,IAAI,IAAI,GAAG,YAAY,GAAG,GAAG,CAAC;SACpC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,uBAAuB,CAAC,GAAyB;QAC/C,OAAQ,GAAG,CAAC,IAAoC,CAAC,oBAAoB,CAAC;IACxE,CAAC;IAED,sBAAsB,CAAC,OAAe;QACpC,IAAI,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,EAAE;YAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACnD,OAAO,YAAY,YAAY,CAAC,eAAe,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;SAC3E;aAAM;YACL,OAAO,YAAY,OAAO,EAAE,CAAC;SAC9B;IACH,CAAC;IAED,YAAY,CAAC,eAAiC,EAAE,gBAAoC;QAClF,OAAO,CACL,QAAQ,CACN;YACE,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY;YACrD,oBAAoB,CAAC,SAAS,CAAC,kBAAkB,CAAC,YAAY;YAC9D,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY;YACnD,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY;YACnD,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY;SACjD,EACD,eAAe,CAAC,YAAY,CAC7B;YACD,CAAC,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,eAAe,CAAC;YAC1D,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,eAAe,CAAC;YACzD,CAAC,IAAI,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,eAAe,EAAE,gBAAgB,CAAC,CACxF,CAAC;IACJ,CAAC;;qHAjRU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IRecordGridColumnPublicProperties, IRxRecordGridApi, RecordsSource } from '@helix/platform/view/api';\nimport { constant, forEach, find, get, includes, isFunction, isUndefined, some, sortBy } from 'lodash';\nimport { AsyncSubject, forkJoin, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport {\n  IAssociationDefinition,\n  IAssociationDescriptor,\n  IAssociationNode,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService, RxLogService } from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\n\nimport { IColumnDescriptor } from '../types/column-descriptor.interface';\nimport { IFieldLocator } from '../types/field-locator.interface';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IRecordGridFilterTag, ISharedFilterPresetTagModel } from '../types/record-grid-filter.types';\nimport { TagModel } from '@bmc-ux/adapt-angular';\nimport { RxFieldDefinitionService } from '@helix/platform/record/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridUtilsService {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private stringService: RxStringService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFieldDefinitionService: RxFieldDefinitionService\n  ) {}\n\n  getColumnDescriptors(recordDefinitionName: string, source: RecordsSource): Promise<IColumnDescriptor[]> {\n    return this.rxRecordDefinitionCacheService\n      .getRecordDefinition(recordDefinitionName)\n      .toPromise()\n      .then((recordDefinition: IRecordDefinition) => {\n        if (isFunction((<IRxRecordGridApi>source).getColumns)) {\n          const columns: IColumnDescriptor[] = (<IRxRecordGridApi>source)\n            .getColumns()\n            .map((column: IRecordGridColumnPublicProperties, index) => ({\n              fieldId: column.field,\n              index,\n              title: column.header,\n              fieldDefinition: column.fieldDefinition\n            }));\n\n          return Promise.all(\n            columns\n              .filter((column) => this.isAssociatedRecordFieldId(column.fieldId))\n              .map((column) =>\n                this.getAssociationDescriptor(column.fieldId, recordDefinition)\n                  .toPromise()\n                  .then((associationDescriptor) => {\n                    column.associationDescriptor = associationDescriptor;\n                  })\n              )\n          ).then(constant(columns));\n        } else {\n          return recordDefinition.fieldDefinitions.map<IColumnDescriptor>(\n            (fieldDefinition: IFieldDefinition, index: number) => ({\n              fieldId: <string>fieldDefinition.id,\n              index,\n              title: fieldDefinition.name,\n              fieldDefinition: fieldDefinition\n            })\n          );\n        }\n      });\n  }\n\n  getAssociationDescriptors(recordDefinitionName: string): Observable<IAssociationDescriptor[]> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName),\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)\n    ]).pipe(\n      map(([associations, recordDefinition]) => {\n        const associationDescriptors = [];\n\n        forEach(associations[recordDefinitionName], (associationDefinition) => {\n          const isOneToMany =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value;\n\n          const isManyToManyAssociation =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n\n          if (!isManyToManyAssociation) {\n            if (this.isNeedSide(associationDefinition.nodeBId, recordDefinitionName, recordDefinition)) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeAId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA)\n              });\n            }\n\n            if (\n              this.isNeedSide(associationDefinition.nodeAId, recordDefinitionName, recordDefinition) &&\n              !isOneToMany\n            ) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeBId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB)\n              });\n            }\n          }\n        });\n\n        return sortBy(associationDescriptors, 'label');\n      })\n    );\n  }\n\n  getFieldDefinition(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IFieldDefinition> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    const fieldDefinition$ = new AsyncSubject<IFieldDefinition>();\n    let recordDefinitionPromise: Promise<IRecordDefinition>;\n\n    if (locator.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n      return of(RX_RECORD_GRID.actionsColumnFieldDefinition);\n    } else {\n      if (locator.associationGuid) {\n        recordDefinitionPromise = this.getAssociationDescriptors(primaryRecordDefinition.name)\n          .pipe(\n            map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator)),\n            filter((associationDescriptor) => Boolean(associationDescriptor)),\n            map(\n              (associationDescriptor) =>\n                associationDescriptor.associationDefinition[\n                  RX_ASSOCIATED_RECORD_NODE_SIDES[associationDescriptor.nodeSide].recordDefinitionNameKey\n                ]\n            ),\n            switchMap((recordDefinitionName) => {\n              return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName);\n            })\n          )\n          .toPromise();\n      } else {\n        recordDefinitionPromise = Promise.resolve(primaryRecordDefinition);\n      }\n\n      recordDefinitionPromise.then((recordDefinition) => {\n        let fieldDefinition: IFieldDefinition;\n\n        if (recordDefinition) {\n          fieldDefinition = find(recordDefinition.fieldDefinitions, {\n            id: Number(locator.fieldId) || locator.fieldId\n          });\n        }\n\n        fieldDefinition$.next(fieldDefinition);\n        fieldDefinition$.complete();\n      });\n\n      return fieldDefinition$;\n    }\n  }\n\n  isAssociatedRecordFieldId(fieldId: string): boolean {\n    return !some(this.getFieldLocator(fieldId), isUndefined);\n  }\n\n  getFieldIdForGridColumn(fieldId: string | number, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor\n      ? `recordContext._associations.${associationDescriptor.associationDefinition.guid}.${associationDescriptor.nodeSide}[0].${fieldId}`\n      : String(fieldId);\n  }\n\n  getAssociationDescriptor(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IAssociationDescriptor> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    let associationDescriptor = of(null);\n\n    if (locator.associationGuid) {\n      associationDescriptor = this.getAssociationDescriptors(primaryRecordDefinition.name).pipe(\n        map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator))\n      );\n    }\n\n    return associationDescriptor;\n  }\n\n  getDisplayFieldDescriptor(\n    fieldId: string,\n    primaryRecordDefinition: IRecordDefinition,\n    associatedRecordDefinitionName: string\n  ): Observable<IFieldDefinition> {\n    const fieldLocator = this.getFieldLocator(fieldId);\n\n    const fieldDefinition$ = this.isAssociatedRecordFieldId(fieldId)\n      ? this.rxRecordDefinitionCacheService.getRecordDefinition(associatedRecordDefinitionName).pipe(\n          map((associatedRecordDefinition) => {\n            const isCoreIdField = fieldLocator.fieldId === String(RX_RECORD_DEFINITION.coreFieldIds.id);\n\n            const displayFieldId = String(\n              (isCoreIdField && associatedRecordDefinition.displayFieldIdInAssociation) || fieldLocator.fieldId\n            );\n\n            return find(\n              associatedRecordDefinition.fieldDefinitions,\n              (fieldDefinition) => String(fieldDefinition.id) === displayFieldId\n            );\n          })\n        )\n      : of(find(primaryRecordDefinition.fieldDefinitions, (fieldDefinition) => String(fieldDefinition.id) === fieldId));\n\n    return fieldDefinition$;\n  }\n\n  getColumnLabel(fieldDefinition: IFieldDefinition, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor ? `${associationDescriptor.label} > ${fieldDefinition.name}` : fieldDefinition.name;\n  }\n\n  findAssociationDescriptor(\n    associationDescriptors: IAssociationDescriptor[],\n    locator: IFieldLocator\n  ): IAssociationDescriptor {\n    return find(associationDescriptors, (associationDescriptor: IAssociationDescriptor) => {\n      return (\n        associationDescriptor.associationDefinition.guid === locator.associationGuid &&\n        associationDescriptor.nodeSide === locator.associationNodeSide\n      );\n    });\n  }\n\n  getFieldLocator(gridColumnFieldId: string): IFieldLocator {\n    const match = new RegExp('(?:' + RX_RECORD_GRID.associatedFieldIdPrefixPattern + ')?(.+)').exec(gridColumnFieldId);\n\n    return {\n      associationGuid: match[1],\n      associationNodeSide: match[2],\n      fieldId: match[3]\n    };\n  }\n\n  private isNeedSide(sideName: string, recordDefinitionName: string, recordDefinition: IRecordDefinition): boolean {\n    return includes([recordDefinitionName, get(recordDefinition, 'inheritanceDescriptor.inheritingFrom')], sideName);\n  }\n\n  private getAssociationLabel(associationDefinition: IAssociationDefinition, nodeSide: IAssociationNode): string {\n    let nodeSideName: string;\n    let label = this.rxDefinitionNameService.getDisplayName(associationDefinition.name);\n\n    if (associationDefinition.nodeAId === associationDefinition.nodeBId) {\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA) {\n        nodeSideName = associationDefinition.nodeAName;\n      }\n\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB) {\n        nodeSideName = associationDefinition.nodeBName;\n      }\n\n      nodeSideName = nodeSideName || nodeSide.defaultName;\n\n      label += ' (' + nodeSideName + ')';\n    }\n\n    return label;\n  }\n\n  isSharedFilterPresetTag(tag: IRecordGridFilterTag): tag is TagModel<ISharedFilterPresetTagModel> {\n    return (tag.data as ISharedFilterPresetTagModel).isSharedFilterPreset;\n  }\n\n  getTestIdForGridColumn(fieldId: string): string {\n    if (this.isAssociatedRecordFieldId(fieldId)) {\n      const fieldLocator = this.getFieldLocator(fieldId);\n      return `field-id-${fieldLocator.associationGuid}-${fieldLocator.fieldId}`;\n    } else {\n      return `field-id-${fieldId}`;\n    }\n  }\n\n  isSearchable(fieldDefinition: IFieldDefinition, recordDefinition?: IRecordDefinition): boolean {\n    return (\n      includes(\n        [\n          RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ],\n        fieldDefinition.resourceType\n      ) &&\n      !this.rxFieldDefinitionService.isPassword(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isSecured(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isDataProviderIdField(fieldDefinition, recordDefinition)\n    );\n  }\n}\n"]}