{"version":3,"file":"record-grid-filter.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AdvancedFilterOption, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { RowDataItem } from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxJsonParserService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  IRecordGridFilterColumnValue,\n  IRecordGridFilterData,\n  IRecordGridFilterDataOrOperator,\n  IRecordGridFilterOperator,\n  IRowDataItem,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport {\n  every,\n  filter as _filter,\n  find,\n  findKey,\n  get,\n  has,\n  includes,\n  intersection,\n  isEmpty,\n  isString,\n  keys,\n  map as _map,\n  reduce,\n  some,\n  values\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { defaultIfEmpty, filter, map } from 'rxjs/operators';\nimport { RxRecordGridAdvancedFilteringService } from '../../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport { IAdaptTableColumnConfig, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRxRecordGridFilter } from '../../common/types/record-grid-filter.types';\nimport { IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxRecordGridFilterService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(\n    public rxStringService: RxStringService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {}\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getFilterForAvailableColumns(node: IPlainObject, filterableColumns: IRecordGridColumnWithMetadata[]): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n      const fieldId = Object.keys(node[operator])[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator]\n            .map((nodeChild) => this.getFilterForAvailableColumns(nodeChild, filterableColumns))\n            .filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case !some(filterableColumns, { fieldId }): {\n          result = null;\n\n          break;\n        }\n        case includes(['eq'], operator): {\n          const fieldDefinition = find(filterableColumns, { fieldId }).fieldDefinition;\n\n          // remove selection field filter option that is not available\n          if (\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection &&\n            !has(fieldDefinition.optionNamesById, node[operator][fieldId])\n          ) {\n            result = null;\n          }\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n\n  generateTextFilterQuery(text: string, columns: IAdaptTableColumnConfig[]): string {\n    let filterQuery = null;\n\n    if (text) {\n      const query = columns\n        .filter((column) => !column.hidden && column.searchable)\n        .map((column) => {\n          const fieldId = this.getQueryFilterField(column.field);\n          let queryString = '';\n\n          if (\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.character.shortName ||\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.localizedCharacter.shortName\n          ) {\n            queryString = `${fieldId} LIKE \"%${this.escapeDoubleQuotes(text).replace(/[%_]/g, '\\\\$&')}%\"`;\n          } else {\n            if (!isNaN(text as any)) {\n              queryString = `${fieldId} = \"${this.escapeDoubleQuotes(text)}\"`;\n            }\n          }\n\n          return queryString;\n        })\n        .filter(Boolean)\n        .join(' OR ');\n\n      filterQuery = query ? `(${query})` : '';\n    }\n\n    return filterQuery;\n  }\n\n  addQueries(...queries: string[]): string {\n    return _filter(queries, Boolean).join(' AND ');\n  }\n\n  joinQueryFilters(queries: string[], logic: QueryFiltersLogic): string {\n    const query = queries.join(logic === QueryFiltersLogic.And ? ' AND ' : ' OR ');\n\n    return query ? `(${query})` : '';\n  }\n\n  /**\n   * Convert saved filter preset data from:\n   * {\n   *   and: {\n   *     \"or\": [\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"bar\"\n   *         }\n   *       },\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"foo\"\n   *         }\n   *       }\n   *     ]\n   *   }\n   * }\n   *\n   *\n   * to:\n   * [{\n   *   filterOptionId: '1',\n   *   value: ['bar', 'foo']\n   * }]\n   */\n  getAdvancedFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    return forkJoin(\n      filterData && filterData.and\n        ? filterData.and.map((gridFilterData: IRecordGridFilterData): Observable<SelectedAdvancedFilter> => {\n            const filterLogic = Object.keys(gridFilterData)[0] as RecordGridFilterDataLogic;\n            const filterOperators = gridFilterData[filterLogic] as IRecordGridFilterOperator[];\n            const firstFilterOperator = values(filterOperators[0])[0];\n            const columnField = String(Object.keys(firstFilterOperator)[0]);\n            let fieldDefinition = fieldDefinitionsById[columnField];\n\n            const fieldDefinition$ = fieldDefinition\n              ? of(fieldDefinition)\n              : this.rxRecordGridUtilsService.getFieldDefinition(columnField, primaryRecordDefinition);\n\n            return fieldDefinition$.pipe(\n              filter<IFieldDefinition>(Boolean),\n              map((newFieldDefinition) => {\n                fieldDefinition = newFieldDefinition;\n\n                const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n                if (!fieldDefinitionsById[columnField]) {\n                  this.rxRecordDefinitionService.addFieldDefinitionToMap(\n                    fieldDefinition,\n                    fieldDefinitionsById,\n                    columnField\n                  );\n\n                  fieldDefinitionsById = primaryRecordDefinition.fieldDefinitionsById = {\n                    ...fieldDefinitionsById,\n                    ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n                  };\n\n                  const associationDescriptor = this.rxRecordGridUtilsService.findAssociationDescriptor(\n                    associationDescriptors,\n                    this.rxRecordGridUtilsService.getFieldLocator(columnField)\n                  );\n\n                  filterOptions.push(\n                    this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                      columnField,\n                      this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n                      fieldDefinition,\n                      filterConfig,\n                      true\n                    )\n                  );\n                }\n\n                return filterConfig.getSelectedAdvancedFilterData(\n                  filterLogic,\n                  filterOperators,\n                  fieldDefinition,\n                  columnField\n                );\n              })\n            );\n          })\n        : []\n    ).pipe(\n      defaultIfEmpty([]),\n      map((advancedFiltersData) => advancedFiltersData.filter(Boolean))\n    );\n  }\n\n  getQueryFromRecordGridFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById\n  ): string {\n    const primitiveOperators = [\n      RecordGridFilterOperator.Eq,\n      RecordGridFilterOperator.Like,\n      RecordGridFilterOperator.Ne,\n      RecordGridFilterOperator.Lt,\n      RecordGridFilterOperator.Lte,\n      RecordGridFilterOperator.Gt,\n      RecordGridFilterOperator.Gte,\n      RecordGridFilterOperator.In,\n      'regex'\n    ];\n\n    const isPrimitive = (expression: IRecordGridFilterDataOrOperator): expression is IRecordGridFilterOperator => {\n      return intersection(primitiveOperators.slice(), keys(expression)).length > 0;\n    };\n\n    const evaluatePrimitive = (expression: IRecordGridFilterOperator) => {\n      return reduce(\n        expression,\n        (operatorsResult, condition, operator: RecordGridFilterOperator) => {\n          return (\n            operatorsResult +\n            reduce(\n              condition as IRecordGridFilterColumnValue,\n              (operatorValuesResult, conditionValue, conditionId) => {\n                const fieldDefinition = fieldDefinitionsById[conditionId];\n                let filterOperator = operator;\n                let value = conditionValue;\n\n                const isTextField =\n                  !!fieldDefinition &&\n                  includes(\n                    [\n                      RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n                      RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType\n                    ],\n                    fieldDefinition.resourceType\n                  );\n\n                if (isTextField) {\n                  const { isLikeOperation, filterValue } = this.getStringDataTypeFilterData(\n                    conditionValue,\n                    fieldDefinition\n                  );\n\n                  filterOperator = isLikeOperation ? RecordGridFilterOperator.Like : filterOperator;\n                  value = filterValue;\n                }\n                // following code removes the $DISPLAYVALUE$ from the filter expression\n                // e.g.  {\"and\":[{\"or\":[{\"eq\":{\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"Alex\"}}]}]}\n                if (conditionId === '$DISPLAYVALUE$') {\n                  return operatorValuesResult;\n                }\n\n                return operatorValuesResult + this.getQueryExpression(value, conditionId, filterOperator);\n              },\n              ''\n            )\n          );\n        },\n        ''\n      );\n    };\n\n    let evaluateExpression = (expression: IRecordGridFilterDataOrOperator): string => {\n      if (isPrimitive(expression)) {\n        return evaluatePrimitive(expression);\n      }\n\n      return reduce(\n        expression,\n        (result, childExpression, operator) => {\n          const childExpressionResult = _map(childExpression, evaluateExpression);\n\n          switch (operator) {\n            case RecordGridFilterDataLogic.And:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n            case RecordGridFilterDataLogic.Or:\n              return result + `(${childExpressionResult.join(' OR ')})`;\n            default:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n          }\n        },\n        ''\n      );\n    };\n\n    evaluateExpression = evaluateExpression.bind(this);\n\n    return evaluateExpression(filterData);\n  }\n\n  getSelectedFiltersFromPredefinedFilter(\n    filters: string,\n    recordGridFilters: IRxRecordGridFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      filters,\n      this.deserializeNamedOptions(recordGridFilters)\n    );\n\n    const selectedFilters$ = this.getAdvancedFilterData(\n      recordGridFilterData,\n      fieldDefinitionsById,\n      recordGridFilterConfigs,\n      primaryRecordDefinition,\n      filterOptions,\n      associationDescriptors\n    );\n\n    return selectedFilters$;\n  }\n\n  getRecordGridFilterDataFromAdvancedFilter(\n    filters: SelectedAdvancedFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap\n  ): IRecordGridFilterData {\n    const mappedFilters = filters.map((filterData): IRecordGridFilterDataOrOperator => {\n      let mappedFilter = null;\n      const fieldId = String(filterData.filterOptionId);\n      const fieldDefinition = fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        mappedFilter = filterConfig.getRecordGridFilterData(\n          filterData.value,\n          fieldDefinition,\n          fieldId,\n          namedFilterOptions && namedFilterOptions[fieldId]\n        );\n      }\n\n      return mappedFilter;\n    });\n\n    return mappedFilters.length\n      ? {\n          and: mappedFilters\n        }\n      : {};\n  }\n\n  getQueryFilterField(fieldId: string): string {\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(fieldId)) {\n      return `\\${${fieldId}}`;\n    } else {\n      return `'${fieldId}'`;\n    }\n  }\n\n  buildQueryFilter(fieldId: string, operator: string, value: string | number): string {\n    const needQuotes = isString(value) && !this.filtersKeywords.includes(value);\n    const result = isString(value) ? (needQuotes ? `\"${this.escapeDoubleQuotes(value)}\"` : value) : String(value);\n\n    return `${this.getQueryFilterField(fieldId)} ${operator} ${result}`;\n  }\n\n  filterRows(\n    rows: IRowDataItem[],\n    filters: SelectedAdvancedFilter[],\n    recordDefinition: IRecordDefinition,\n    filterConfigs: IRecordGridFilterConfigs\n  ): IRowDataItem[] {\n    const filterData = this.getRecordGridFilterDataFromAdvancedFilter(\n      filters,\n      recordDefinition.fieldDefinitionsById,\n      filterConfigs\n    );\n\n    return rows.filter((row: IRowDataItem) => {\n      if (row.groupField) {\n        row.items = this.getFilteredItems(row.items, filterData, recordDefinition);\n\n        return row.items.length;\n      } else {\n        return every(filterData.and, (filterExpression) => this.matchRow(row, filterExpression, recordDefinition));\n      }\n    });\n  }\n\n  private getFilteredItems(\n    rowDataItems: RowDataItem[],\n    filterData: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): RowDataItem[] {\n    return reduce(\n      rowDataItems,\n      (filteredItems, itemsRow) => {\n        let { items = [] } = itemsRow;\n\n        if (\n          !itemsRow.items &&\n          every(filterData.and, (filterExpression) => this.matchRow(itemsRow, filterExpression, recordDefinition))\n        ) {\n          filteredItems.push(itemsRow);\n        } else {\n          items = this.getFilteredItems(items, filterData, recordDefinition);\n\n          if (items.length) {\n            filteredItems.push({ ...itemsRow, items });\n          }\n        }\n\n        return filteredItems;\n      },\n      []\n    );\n  }\n\n  private matchRow(\n    row: IRowDataItem | RowDataItem,\n    filterExpression: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(filterExpression);\n\n    switch (operator) {\n      case 'and':\n        return every(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      case 'or':\n        return some(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  private checkCondition(\n    row: IRowDataItem | RowDataItem,\n    childExpression: IRecordGridFilterDataOrOperator,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(childExpression);\n    const fieldId = findKey(childExpression[operator]);\n    const filterValue = childExpression[operator][fieldId];\n    const rowValue = row[fieldId];\n\n    if (\n      recordDefinition.fieldDefinitionsById[fieldId].resourceType ===\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType\n    ) {\n      switch (operator) {\n        case 'eq':\n          return moment(rowValue).isSame(filterValue);\n        case 'lte':\n          return moment(rowValue).isSameOrBefore(filterValue);\n        case 'lt':\n          return moment(rowValue).isBefore(filterValue);\n        case 'gte':\n          return moment(rowValue).isSameOrAfter(filterValue);\n        case 'gt':\n          return moment(rowValue).isAfter(filterValue);\n\n        default:\n          return false;\n      }\n    } else {\n      return operator === 'eq' ? this.rxStringService.caseInsensitiveIsEqual(rowValue, filterValue) : false;\n    }\n  }\n\n  private escapeDoubleQuotes(text: string): string {\n    return text.replace(/\"/g, '\"\"');\n  }\n\n  private getQueryExpression(conditionValue: any, conditionId: string, operator: RecordGridFilterOperator): string {\n    const value = isString(conditionValue) ? '\"' + conditionValue + '\"' : conditionValue;\n\n    conditionId = this.getQueryFilterField(conditionId);\n\n    switch (operator) {\n      case RecordGridFilterOperator.Eq:\n        return conditionId + '=' + value;\n      case RecordGridFilterOperator.Like:\n        return conditionId + ' LIKE ' + value;\n      case RecordGridFilterOperator.Ne:\n        return conditionId + '!=' + value;\n      case RecordGridFilterOperator.Lt:\n        return conditionId + '<' + value;\n      case RecordGridFilterOperator.Lte:\n        return conditionId + '<=' + value;\n      case RecordGridFilterOperator.Gt:\n        return conditionId + '>' + value;\n      case RecordGridFilterOperator.Gte:\n        return conditionId + '>=' + value;\n      case RecordGridFilterOperator.In:\n        return conditionId + ' IN ' + value;\n      default:\n        return conditionId + '=' + value;\n    }\n  }\n\n  getStringDataTypeFilterData(\n    filterValue: string,\n    fieldDefinition: IFieldDefinition\n  ): { isLikeOperation: boolean; filterValue: string } {\n    let isLikeOperation = false;\n\n    if (!get(fieldDefinition.searchDefinition, 'enableFTSSearch')) {\n      if (includes(filterValue, '%')) {\n        const filterValueSplitData = filterValue.split(/\\\\\\\\/);\n\n        isLikeOperation = some(filterValueSplitData, (value) => value.replace(/\\\\%/g, '').match('%'));\n\n        if (!isLikeOperation) {\n          filterValue = _map(filterValueSplitData, (value) => value.replace(/\\\\%/g, '%')).join('\\\\');\n        }\n      } else {\n        filterValue = filterValue.replace('\\\\\\\\', '\\\\');\n      }\n    }\n\n    return { isLikeOperation, filterValue };\n  }\n\n  clearRemovedNamedFilterOptions(\n    selectedFilters: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[],\n    namedFilterOptions: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return selectedFilters.reduce((result, filter) => {\n      const namedFilterOptionsGuids = namedFilterOptions[filter.filterOptionId]?.map((option) => option.guid) ?? [];\n\n      filter.value.namedOptions = filter.value.namedOptions.filter((option) =>\n        namedFilterOptionsGuids.includes(option)\n      );\n\n      if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(filter.value)) {\n        result.push(filter);\n      }\n\n      return result;\n    }, []);\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n}\n"]}