{"version":3,"file":"shell-route-reuse-strategy.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/application/shell-route-reuse-strategy.class.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAEjC,4EAA4E;AAC5E,MAAM,OAAO,uBAAuB;IAClC,gBAAgB,CAAC,OAA+B,EAAE,IAA4B;;QAC5E,IACE,CAAA,MAAA,IAAI,CAAC,IAAI,0CAAE,kBAAkB,MAAK,cAAc,CAAC,oBAAoB,CAAC,iBAAiB;YACvF,OAAO,CAAC,MAAM;YACd,OAAO,CAAC,MAAM,CAAC,WAAW,MAAK,MAAA,IAAI,CAAC,MAAM,0CAAE,WAAW,CAAA,EACvD;YACA,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC3D;aAAM;YACL,OAAO,CACL,OAAO,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW;gBACxC,CAAC,CAAA,MAAA,MAAA,OAAO,CAAC,WAAW,0CAAE,IAAI,0CAAE,WAAW;oBACrC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,MAAK,MAAA,MAAA,IAAI,CAAC,WAAW,0CAAE,IAAI,0CAAE,WAAW,CAAA,CAAC,CAChF,CAAC;SACH;IACH,CAAC;IAED,YAAY,CAAC,KAA6B;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,YAAY,CAAC,KAA6B;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,QAAQ,CAAC,KAA6B;QACpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,KAA6B,EAAE,MAAkC,IAAS,CAAC;CAClF","sourcesContent":["import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\nimport { RX_APPLICATION } from './application.constant';\nimport { isEqual } from 'lodash';\n\n// Customize shouldReuseRoute, use default implementation for other methods.\nexport class ShellRouteReuseStrategy implements RouteReuseStrategy {\n  shouldReuseRoute(current: ActivatedRouteSnapshot, next: ActivatedRouteSnapshot): boolean {\n    if (\n      next.data?.routeReuseStrategy === RX_APPLICATION.routeReuseStrategies.checkParentParams &&\n      current.parent &&\n      current.parent.routeConfig === next.parent?.routeConfig\n    ) {\n      return isEqual(next.parent.params, current.parent.params);\n    } else {\n      return (\n        current.routeConfig === next.routeConfig ||\n        (current.routeConfig?.data?.routerGroup &&\n          current.routeConfig.data.routerGroup === next.routeConfig?.data?.routerGroup)\n      );\n    }\n  }\n\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    return null;\n  }\n\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle | null): void {}\n}\n"]}