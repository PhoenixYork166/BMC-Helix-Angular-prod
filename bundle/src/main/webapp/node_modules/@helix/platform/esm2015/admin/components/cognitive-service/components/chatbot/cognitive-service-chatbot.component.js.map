{"version":3,"file":"cognitive-service-chatbot.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-service/components/chatbot/cognitive-service-chatbot.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-service/components/chatbot/cognitive-service-chatbot.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { cloneDeep, forEach, get, isArray, isEqual, keys } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { RX_COGNITIVE_SERVICE } from '../../cognitive-service.constant';\nimport { RxSelectOption, AdaptRxControlLabelTooltip } from '@bmc-ux/adapt-angular';\nimport {\n  RxDefinitionNameService,\n  RX_OVERLAY,\n  IUserOverlayGroupDescriptorChildren,\n  ISystemConfiguration,\n  RxNotificationService,\n  RxSystemConfigurationService\n} from '@helix/platform/shared/api';\nimport { RxCognitiveServiceService } from '../../cognitive-service.service';\nimport { IChatbotProvider } from '../../cognitive-service.interfaces';\nimport { forkJoin, Observable } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cognitive-service-chatbot',\n  templateUrl: './cognitive-service-chatbot.component.html',\n  styleUrls: ['./cognitive-service-chatbot.component.scss']\n})\nexport class CognitiveServiceChatbotComponent implements OnInit {\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxNotificationService: RxNotificationService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    private translateService: TranslateService\n  ) {}\n\n  @Input()\n  isAdministrator: boolean;\n\n  @Input()\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren;\n\n  chatbotProvidersForm: FormGroup;\n  initialChatbotProviderValues: IChatbotProvider = cloneDeep(RX_COGNITIVE_SERVICE.chatbot.systemSettings);\n  chatbotProcessDefinitionNameOptions: RxSelectOption[] = [];\n  private defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');\n\n  approverSelectionTooltip: AdaptRxControlLabelTooltip = {\n    popoverMode: true,\n    iconName: 'question_circle_o',\n    placement: 'right',\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.admin.cognitive-service-component.user-idle.tooltip'\n    )\n  };\n\n  chatbotNotificationsIdleTimeTooltip: AdaptRxControlLabelTooltip = {\n    popoverMode: true,\n    iconName: 'question_circle_o',\n    placement: 'right',\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-idle-time.tooltip'\n    )\n  };\n\n  chatbotNotificationsMaxTimeTooltip: AdaptRxControlLabelTooltip = {\n    popoverMode: true,\n    iconName: 'question_circle_o',\n    placement: 'right',\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-max-time.tooltip'\n    )\n  };\n\n  ngOnInit(): void {\n    this.chatbotProvidersForm = this.formBuilder.group({\n      chatSessionIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout,\n      chatUserIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout,\n      chatContextVariablesProcessName: [],\n      chatbotNotificationsIdleTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime,\n      chatbotNotificationsMaxTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime,\n      removePoweredByBmcHelix: RX_COGNITIVE_SERVICE.chatbot.systemSettings.removePoweredByBmcHelix\n    });\n\n    forkJoin({\n      processDefinitionNameOptions: this.getProcessDefinitionNameOptions(),\n      settingsData: this.rxCognitiveServiceService.getSystemSettings(keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings))\n    }).subscribe((result) => {\n      this.chatbotProcessDefinitionNameOptions = result.processDefinitionNameOptions;\n      this.loadChatbotSystemSettings(result.settingsData.data as ISystemConfiguration[]);\n    });\n  }\n\n  isFormDirty(): boolean {\n    return this.chatbotProvidersForm.dirty;\n  }\n\n  private getProcessDefinitionNameOptions(): Observable<RxSelectOption[]> {\n    return this.rxCognitiveServiceService.getChatbotProcessDefinitionNames().pipe(\n      map((processDefinitionNames) =>\n        processDefinitionNames.sort().map((processDefinitionName) => {\n          return {\n            id: processDefinitionName,\n            name: this.rxDefinitionNameService.getDisplayName(processDefinitionName)\n          };\n        })\n      )\n    );\n  }\n\n  private loadChatbotSystemSettings(settings: ISystemConfiguration[]): void {\n    forEach(settings, (setting) => {\n      let settingValue: RxSelectOption[] | number;\n\n      if (setting.name === RX_COGNITIVE_SERVICE.chatbot.chatContextVariablesProcessName) {\n        settingValue = [this.chatbotProcessDefinitionNameOptions.find((process) => process.id === setting.value)];\n      } else {\n        settingValue = setting.value as number;\n      }\n\n      this.setFormFieldValue(setting.name, settingValue);\n      this.initialChatbotProviderValues[setting.name] = settingValue;\n    });\n  }\n\n  private setFormFieldValue(name: string, value: RxSelectOption[] | number): void {\n    this.chatbotProvidersForm.controls[name].setValue(value);\n  }\n\n  setDefaultSessionIdleTimeout(): void {\n    if (\n      RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout !==\n      this.chatbotProvidersForm.controls.chatSessionIdleTimeout.value\n    ) {\n      this.setFormFieldValue(\n        'chatSessionIdleTimeout',\n        RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout\n      );\n\n      this.chatbotProvidersForm.markAsDirty();\n    }\n  }\n\n  setDefaultUserIdleTimeout(): void {\n    if (\n      RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout !==\n      this.chatbotProvidersForm.controls.chatUserIdleTimeout.value\n    ) {\n      this.setFormFieldValue('chatUserIdleTimeout', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout);\n      this.chatbotProvidersForm.markAsDirty();\n    }\n  }\n\n  setDefaultChatbotNotificationsIdleTime(): void {\n    if (\n      RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime !==\n      this.chatbotProvidersForm.controls.chatbotNotificationsIdleTime.value\n    ) {\n      this.setFormFieldValue(\n        'chatbotNotificationsIdleTime',\n        RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime\n      );\n      this.chatbotProvidersForm.markAsDirty();\n    }\n  }\n\n  setDefaultChatbotNotificationsMaxTime(): void {\n    if (\n      RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime !==\n      this.chatbotProvidersForm.controls.chatbotNotificationsMaxTime.value\n    ) {\n      this.setFormFieldValue(\n        'chatbotNotificationsMaxTime',\n        RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime\n      );\n      this.chatbotProvidersForm.markAsDirty();\n    }\n  }\n\n  save(): void {\n    const formValue = this.chatbotProvidersForm.getRawValue();\n\n    const systemPropertyObservables = Object.keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings).reduce(\n      (result, settingName) => {\n        let settingValue = formValue[settingName];\n\n        if (isArray(settingValue)) {\n          settingValue = settingValue[0]?.id ?? '';\n        }\n\n        if (!isEqual(this.initialChatbotProviderValues[settingName], settingValue)) {\n          result.push(this.rxSystemConfigurationService.setConfiguration(settingName, settingValue));\n        }\n\n        return result;\n      },\n      []\n    );\n\n    forkJoin(systemPropertyObservables).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.chatProviderSettingsSaved)\n      );\n\n      this.initialChatbotProviderValues = formValue;\n      this.chatbotProvidersForm.markAsPristine();\n    });\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return this.chatbotProvidersForm.pristine || this.chatbotProvidersForm.invalid;\n  }\n\n  isSaveButtonVisible(): boolean {\n    return (\n      this.isAdministrator &&\n      this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n      !this.currentOverlayContext.isShared\n    );\n  }\n\n  optionFormatter = (processDefinitionNameOption: RxSelectOption): string => {\n    return get(processDefinitionNameOption, 'name', this.defaultSelection);\n  };\n}\n","<form [formGroup]=\"chatbotProvidersForm\">\n  <adapt-accordion rx-id=\"accordion-chatbot-provider\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.chatbot.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"300\"\n          [max]=\"1200\"\n          [adaptRange]=\"[300, 1200]\"\n          rx-id=\"chatbot-provider-chat-session-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-session-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatSessionIdleTimeout\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-session-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultSessionIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"5\"\n          [max]=\"1200\"\n          [adaptRange]=\"[5, 1200]\"\n          rx-id=\"chatbot-provider-chat-user-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-user-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatUserIdleTimeout\"\n          [tooltip]=\"approverSelectionTooltip\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-user-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultUserIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <adapt-rx-select\n        rx-id=\"chat-context-variables-process-name\"\n        formControlName=\"chatContextVariablesProcessName\"\n        label=\"Chat context variables process name\"\n        [options]=\"chatbotProcessDefinitionNameOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        class=\"d-block form-group\"\n      ></adapt-rx-select>\n\n      <adapt-rx-control-label\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.remove-powered-by-bmc-helix.label'\n            | translate: { poweredByBmcHelix: 'Powered by BMC Helix' }\n        }}\"\n      ></adapt-rx-control-label>\n\n      <adapt-rx-switch\n        [formControl]=\"chatbotProvidersForm.controls.removePoweredByBmcHelix\"\n        rx-id=\"remove-powered-by-bmc-helix\"\n        [isLabelBefore]=\"false\"\n      ></adapt-rx-switch>\n    </adapt-accordion-tab>\n\n    <adapt-accordion rx-id=\"accordion-proactive-chatbot-notifications\">\n      <adapt-accordion-tab\n        title=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications.title' | translate\n        }}\"\n        isOpen=\"true\"\n      >\n        <div class=\"proactive-chatbot-notifications-idle-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"300\"\n            [max]=\"1200\"\n            [adaptRange]=\"[300, 1200]\"\n            rx-id=\"notifications-idle-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-idle-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsIdleTime\"\n            [tooltip]=\"chatbotNotificationsIdleTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-idle-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsIdleTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n\n        <div class=\"proactive-chatbot-notifications-max-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"120\"\n            [max]=\"3600\"\n            [adaptRange]=\"[120, 3600]\"\n            rx-id=\"notifications-max-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-max-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsMaxTime\"\n            [tooltip]=\"chatbotNotificationsMaxTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-max-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsMaxTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n"]}