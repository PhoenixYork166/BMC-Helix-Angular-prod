{"version":3,"file":"server-action.mixin.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/server-action/server-action.mixin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAQ3C,MAAM,UAAU,mBAAmB,CAA4B,IAAW;IACxE,OAAO,MAAM,cAAe,SAAQ,IAAI;QACtC,yCAAyC;QACzC,UAAU,CAAC,MAAW;YACpB,aAAa;YACb,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAEzB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAE/B,yCAAyC;YACzC,aAAa;YACb,IAAI,CAAC,EAAE,CACL,qBAAqB,EACrB,CAAC,OAAY,EAAE,YAAiB,EAAE,eAA6C,EAAE,EAAE;gBACjF,IAAI,SAAS,CAAC,eAAe,CAAC,YAAY,EAAE,uBAAuB,CAAC,EAAE;oBACpE,MAAM,oBAAoB,GAAW,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEnF,IAAI,qBAAqB,GAAG,eAAe,CAAC,aAAa,CAAC;oBAC1D,MAAM,yBAAyB,GAAG,GAAG,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;oBAEzE,IAAI,yBAAyB,EAAE;wBAC7B,qBAAqB,GAAG,YAAY,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;qBACrE;oBAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;oBAE/B,IAAI,CAAC,iBAAiB,CACpB,OAAO,EACP,YAAY,CAAC,QAAQ,EACrB,oBAAoB,EACpB,qBAAqB,EACrB,yBAAyB,CAC1B,CAAC;iBACH;YACH,CAAC,CACF,CAAC;QACJ,CAAC;QAED,cAAc;YACZ,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,EAAE,EAAE;gBACtC,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,IAAI;aACd,CAAC,CAAC;QACL,CAAC;QAED,iBAAiB,CAAC,IAAY;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,WAAW;YACT,aAAa;YACb,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,CAAC;QACzD,CAAC;QAED,yCAAyC;QACzC,iBAAiB,CACf,OAAY,EACZ,QAAsB,EACtB,oBAA4B,EAC5B,qBAA6B,EAC7B,yBAAkC,IAC3B,CAAC;QAEV,uBAAuB;YACrB,aAAa;YACb,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAEjE,cAAc,CAAC,6BAA6B;YAC1C,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;YAC9B,aAAa;YACb,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CACpE,CAAC;QACJ,CAAC;QAED,WAAW,CAAC,QAAsB,EAAE,OAAa;YAC/C,+DAA+D;YAC/D,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,QAAQ,EAAE;gBAC3C,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC;aACxC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { clone, get, has, last } from 'lodash';\nimport { startWith } from 'rxjs/operators';\n\nimport { Constructor } from '@helix/platform/utils';\n\nimport { IPlainObject } from '../common-types/plain-object.interface';\nimport { IDesignerElementService } from '../designer/designer.types';\nimport { IServerActionChangedProperty } from './server-action-changed-property.interface';\n\nexport function RxServerActionMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxServerAction extends Base {\n    // TODO-VS: add types after rappid update\n    initialize(config: any): any {\n      // @ts-ignore\n      super.initialize(config);\n\n      this.setDataDictionaryBranch();\n\n      // TODO-VS: add types after rappid update\n      // @ts-ignore\n      this.on(\n        'change:elementModel',\n        (element: any, elementModel: any, changedProperty: IServerActionChangedProperty) => {\n          if (startWith(changedProperty.propertyPath, 'elementModel/inputMap')) {\n            const inputMapPropertyPath: string = last(changedProperty.propertyPath.split('/'));\n\n            let inputMapPropertyValue = changedProperty.propertyValue;\n            const isCommandManagerOperation = has(changedProperty, 'commandManager');\n\n            if (isCommandManagerOperation) {\n              inputMapPropertyValue = elementModel.inputMap[inputMapPropertyPath];\n            }\n\n            this.setDataDictionaryBranch();\n\n            this.onInputMapChanged(\n              element,\n              elementModel.inputMap,\n              inputMapPropertyPath,\n              inputMapPropertyValue,\n              isCommandManagerOperation\n            );\n          }\n        }\n      );\n    }\n\n    clearOutputMap(): void {\n      // @ts-ignore\n      this.prop('elementModel/outputMap', [], {\n        rxSilent: true,\n        rewrite: true\n      });\n    }\n\n    getElementService(type: string): IDesignerElementService {\n      return null;\n    }\n\n    getInputMap(): IPlainObject {\n      // @ts-ignore\n      return clone(this.prop('elementModel/inputMap')) || {};\n    }\n\n    // TODO-VS: add types after rappid update\n    onInputMapChanged(\n      element: any,\n      inputMap: IPlainObject,\n      inputMapPropertyPath: string,\n      inputMapPropertyValue: string,\n      isCommandManagerOperation: boolean\n    ): void {}\n\n    setDataDictionaryBranch(): void {\n      // @ts-ignore\n      const elementService = this.getElementService(this.prop('type'));\n\n      elementService.setCommonDataDictionaryBranch(\n        // @ts-ignore\n        this.prop('elementModel/guid'),\n        // @ts-ignore\n        elementService.buildDataDictionaryBranch(this.prop('elementModel'))\n      );\n    }\n\n    setInputMap(inputMap: IPlainObject, options?: any): void {\n      // use 'rewrite' option to prevent the default 'merge' behavior\n      // @ts-ignore\n      this.prop('elementModel/inputMap', inputMap, {\n        rxSilent: true,\n        rewrite: true,\n        silent: get(options, 'isSilent', false)\n      });\n    }\n  };\n}\n"]}