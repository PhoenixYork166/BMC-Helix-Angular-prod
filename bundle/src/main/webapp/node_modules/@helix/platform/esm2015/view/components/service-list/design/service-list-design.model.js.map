{"version":3,"file":"service-list-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/service-list/design/service-list-design.model.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,0BAA0B,EAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAEtD,OAAO,EACL,mCAAmC,EAEpC,MAAM,mCAAmC,CAAC;AAE3C,MAAM,OAAO,sBAAuB,SAAQ,0BAAkD;IAC5F,MAAM,CAAC,oBAAoB,CAAC,iBAA0C;QACpE,uBACE,gBAAgB,EAAE,IAAI,EACtB,kBAAkB,EAAE,IAAI,EACxB,kBAAkB,EAAE,IAAI,IACrB,iBAAiB,EACpB;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,kBAAkB,CAAC;aAC7C,IAAI,CACH,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACZ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,8CAA8C,EAAE,kBAAkB,CAAC,CAAC,CAC5G,EACD,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,gBAAuD,EAAE,EAAE,CACrE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CACnD,CAAC;QAEJ,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC7D,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,cAAc;QACpB,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI;YACnC,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;YAChD,QAAQ,EAAE;gBACR;oBACE,KAAK,EAAE,oBAAoB;oBAC3B,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,CAAC;iBAC9D;gBACD;oBACE,KAAK,EAAE,sBAAsB;oBAC7B,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC;iBAChE;gBACD;oBACE,KAAK,EAAE,sBAAsB;oBAC7B,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC;iBAChE;aACF;SACF,CAAC;IACJ,CAAC;IAEO,YAAY;QAClB,OAAO;YACL,uBAAuB,EAAE;gBACvB;oBACE,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,kBAAkB;4BACxB,SAAS,EAAE,mCAAmC;4BAC9C,OAAO,EAAE;gCACP,KAAK,EAAE,oBAAoB;gCAC3B,UAAU,EAAE,IAAI;6BACqB;yBACxC;wBAED;4BACE,IAAI,EAAE,oBAAoB;4BAC1B,SAAS,EAAE,mCAAmC;4BAC9C,OAAO,EAAE;gCACP,KAAK,EAAE,sBAAsB;6BACQ;yBACxC;wBAED;4BACE,IAAI,EAAE,oBAAoB;4BAC1B,SAAS,EAAE,mCAAmC;4BAC9C,OAAO,EAAE;gCACP,KAAK,EAAE,sBAAsB;6BACQ;yBACxC;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { IServiceListProperties } from '../service-list.types';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions\n} from '@helix/platform/shared/components';\n\nexport class ServiceListDesignModel extends ViewDesignerComponentModel<IServiceListProperties> {\n  static getInitialProperties(initialProperties?: IServiceListProperties): IServiceListProperties {\n    return {\n      serviceRequestId: null,\n      serviceRequestName: null,\n      serviceRequestGuid: null,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox\n      .getComponentPropertyValue('serviceRequestId')\n      .pipe(\n        map((value) =>\n          value ? [] : [this.sandbox.createError('Selected service request ID cannot be blank.', 'serviceRequestId')]\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n      this.sandbox.setCommonDataDictionary(this.getCommonProps());\n    });\n  }\n\n  private getCommonProps(): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: this.sandbox.descriptor.name,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Service request ID',\n          expression: this.getExpressionForProperty('serviceRequestId')\n        },\n        {\n          label: 'Service request name',\n          expression: this.getExpressionForProperty('serviceRequestName')\n        },\n        {\n          label: 'Service request GUID',\n          expression: this.getExpressionForProperty('serviceRequestGuid')\n        }\n      ]\n    };\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'serviceRequestId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestName',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request name'\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestGuid',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request GUID'\n              } as IExpressionInspectorControlOptions\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n"]}