{"version":3,"file":"session.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/security/session.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAE,4BAA4B,EAAE,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC9D,OAAO,EAAS,oBAAoB,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;;;;;AAKrE,MAAM,OAAO,gBAAgB;IAQ3B,YACU,oBAA0C,EAC1C,aAA4B,EAC5B,gBAAkC,EAClC,4BAA0D;QAH1D,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,iCAA4B,GAA5B,4BAA4B,CAA8B;QAX5D,oBAAe,GAAW,IAAI,CAAC;QAEvC,mBAAc,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,CAAC,CAAC,IAAI,CAClG,KAAK,CAAC,IAAI,CAAC,EACX,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IAOC,CAAC;IAEJ,WAAW;QACT,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;IACzD,CAAC;IAED,OAAO;QACL,OAAO,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAEO,eAAe;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,IAAI,CAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACX,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,gBAAgB,CAAC,qCAAqC,CAAC,IAAI,CAAC,CAAC;YAClE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC9C,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;6GAnCU,gBAAgB;iHAAhB,gBAAgB,cAFf,MAAM;2FAEP,gBAAgB;kBAH5B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { concat, Observable, of } from 'rxjs';\nimport { mapTo, shareReplay, tap } from 'rxjs/operators';\nimport { RxSystemConfigurationService } from '../administration';\nimport { RxOverlayService } from '../overlay/overlay.service';\nimport { IUser, RxCurrentUserService, RxUserService } from '../user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSessionService {\n  private ssoProviderType: string = null;\n\n  sessionActive$ = concat(this.initCurrentUser(), this.rxSystemConfigurationService.initialize()).pipe(\n    mapTo(true),\n    shareReplay(1)\n  );\n\n  constructor(\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxUserService: RxUserService,\n    private rxOverlayService: RxOverlayService,\n    private rxSystemConfigurationService: RxSystemConfigurationService\n  ) {}\n\n  initSession(): Observable<boolean> {\n    return this.isAlive() ? of(true) : this.sessionActive$;\n  }\n\n  isAlive(): boolean {\n    return Boolean(this.rxCurrentUserService.get());\n  }\n\n  getSsoProviderType(): string {\n    return this.ssoProviderType;\n  }\n\n  private initCurrentUser(): Observable<IUser> {\n    return this.rxUserService.getCurrentUser().pipe(\n      tap((user) => {\n        this.rxCurrentUserService.set(user);\n        this.rxOverlayService.setCurrentOverlayContextOnSessionInit(user);\n        this.ssoProviderType = user.ssoProviderType;\n      })\n    );\n  }\n}\n"]}