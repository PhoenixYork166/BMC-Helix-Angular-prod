{"version":3,"file":"process-definition-cache.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/process/api/process-definition-cache.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEnD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAG1C,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;;;AAK1E,MAAM,OAAO,+BAA+B;IAK1C,YAAoB,0BAAsD;QAAtD,+BAA0B,GAA1B,0BAA0B,CAA4B;QAJlE,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;QACvC,2BAAsB,GAAgD,IAAI,GAAG,EAAE,CAAC;QAChF,sCAAiC,GAAqD,IAAI,GAAG,EAAE,CAAC;IAE3B,CAAC;IAE9E,oBAAoB,CAAC,qBAA6B;QAChD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE;YAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC,0BAA0B;iBACvD,GAAG,CAAC,qBAAqB,EAAE;gBAC1B,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC;aACpD,CAAC;iBACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,CAAC;SAC5E;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAChE,CAAC;IAED,eAAe,CAAC,qBAA6B;QAC3C,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE;YACtE,MAAM,8BAA8B,GAAG,IAAI,CAAC,0BAA0B;iBACnE,eAAe,CAAC,qBAAqB,EAAE;gBACtC,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC;aACpD,CAAC;iBACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,EAAE,8BAA8B,CAAC,CAAC;SACnG;QAED,OAAO,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAC3E,CAAC;IAED,gBAAgB,CAAC,gBAAiC;QAChD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,sBAAiC;QAC1C,IAAI,sBAAsB,EAAE;YAC1B,OAAO,CAAC,sBAAsB,EAAE,CAAC,qBAAqB,EAAE,EAAE;gBACxD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;gBAC1D,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;YACvE,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;YACpC,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,CAAC;SAChD;IACH,CAAC;;4HAzDU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { forEach, isEmpty } from 'lodash';\n\nimport { IFieldDefinitionLight, IProcessDefinition } from './process-definition.types';\nimport { RxProcessDefinitionService } from './process-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessDefinitionCacheService {\n  private consumers = new Set<Observable<any>>();\n  private processDefinitionCache: Map<string, Observable<IProcessDefinition>> = new Map();\n  private processDefinitionOutputParamCache: Map<string, Observable<IFieldDefinitionLight[]>> = new Map();\n\n  constructor(private rxProcessDefinitionService: RxProcessDefinitionService) {}\n\n  getProcessDefinition(processDefinitionName: string): Observable<IProcessDefinition> {\n    if (!this.processDefinitionCache.has(processDefinitionName)) {\n      const processDefinition$ = this.rxProcessDefinitionService\n        .get(processDefinitionName, {\n          headers: new HttpHeaders({ 'Design-Time': 'true' })\n        })\n        .pipe(shareReplay(1));\n\n      this.processDefinitionCache.set(processDefinitionName, processDefinition$);\n    }\n\n    return this.processDefinitionCache.get(processDefinitionName);\n  }\n\n  getOutputParams(processDefinitionName: string): Observable<IFieldDefinitionLight[]> {\n    if (!this.processDefinitionOutputParamCache.has(processDefinitionName)) {\n      const processDefinitionOutputParams$ = this.rxProcessDefinitionService\n        .getOutputParams(processDefinitionName, {\n          headers: new HttpHeaders({ 'Design-Time': 'true' })\n        })\n        .pipe(shareReplay(1));\n\n      this.processDefinitionOutputParamCache.set(processDefinitionName, processDefinitionOutputParams$);\n    }\n\n    return this.processDefinitionOutputParamCache.get(processDefinitionName);\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  clearCache(processDefinitionNames?: string[]): void {\n    if (processDefinitionNames) {\n      forEach(processDefinitionNames, (processDefinitionName) => {\n        this.processDefinitionCache.delete(processDefinitionName);\n        this.processDefinitionOutputParamCache.delete(processDefinitionName);\n      });\n    } else {\n      this.processDefinitionCache.clear();\n      this.processDefinitionOutputParamCache.clear();\n    }\n  }\n}\n"]}