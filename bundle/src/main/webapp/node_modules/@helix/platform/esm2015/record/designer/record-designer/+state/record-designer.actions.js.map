{"version":3,"file":"record-designer.actions.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/record/designer/record-designer/+state/record-designer.actions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAKlD,MAAM,CAAC,MAAM,IAAI,GAAG,YAAY,CAAC,wBAAwB,EAAE,KAAK,EAAiD,CAAC,CAAC;AAEnH,MAAM,CAAC,MAAM,cAAc,GAAG,YAAY,CAAC,mCAAmC,CAAC,CAAC;AAEhF,MAAM,CAAC,MAAM,iBAAiB,GAAG,YAAY,CAAC,uCAAuC,CAAC,CAAC;AAEvF,MAAM,CAAC,MAAM,qBAAqB,GAAG,YAAY,CAC/C,2CAA2C,EAC3C,KAAK,EAAqC,CAC3C,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,YAAY,CAC7C,yCAAyC,EACzC,KAAK,EAA6D,CACnE,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,YAAY,CAAC,0CAA0C,CAAC,CAAC;AAE7F,MAAM,CAAC,MAAM,iBAAiB,GAAG,YAAY,CAAC,uCAAuC,CAAC,CAAC;AAEvF,MAAM,CAAC,MAAM,gBAAgB,GAAG,YAAY,CAAC,sCAAsC,CAAC,CAAC;AAErF,MAAM,CAAC,MAAM,iCAAiC,GAAG,YAAY,CAC3D,yDAAyD,EACzD,KAAK,EAA2D,CACjE,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,YAAY,CAClD,+CAA+C,EAC/C,KAAK,EAAuD,CAC7D,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,YAAY,CAC9C,2CAA2C,EAC3C,KAAK,EAAiC,CACvC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,YAAY,CAC7C,0CAA0C,EAC1C,KAAK,EAA4B,CAClC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,YAAY,CACvC,mCAAmC,EACnC,KAAK,EAAkD,CACxD,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,YAAY,CAC3C,wCAAwC,EACxC,KAAK,EAAqD,CAC3D,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,YAAY,CAC9C,2CAA2C,EAC3C,KAAK,EAAoB,CAC1B,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,YAAY,CAAC,6CAA6C,CAAC,CAAC;AAElG,MAAM,CAAC,MAAM,mBAAmB,GAAG,YAAY,CAAC,yCAAyC,CAAC,CAAC;AAE3F,MAAM,CAAC,MAAM,iBAAiB,GAAG,YAAY,CAAC,uCAAuC,CAAC,CAAC;AAEvF,MAAM,CAAC,MAAM,yBAAyB,GAAG,YAAY,CAAC,kDAAkD,CAAC,CAAC;AAE1G,MAAM,CAAC,MAAM,0BAA0B,GAAG,YAAY,CAAC,iDAAiD,CAAC,CAAC;AAE1G,MAAM,CAAC,MAAM,wBAAwB,GAAG,YAAY,CAAC,+CAA+C,CAAC,CAAC;AAEtG,MAAM,CAAC,MAAM,cAAc,GAAG,YAAY,CAAC,mCAAmC,CAAC,CAAC;AAEhF,MAAM,CAAC,MAAM,qBAAqB,GAAG,YAAY,CAC/C,2CAA2C,EAC3C,KAAK,EAAmC,CACzC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,YAAY,CAAC,2BAA2B,CAAC,CAAC","sourcesContent":["import { createAction, props } from '@ngrx/store';\nimport { IRecordDefinitionModel, IRecordFieldDefinitionModel } from '../../record-designer.types';\nimport { IInitRecordDesignerActionPayload } from './record-designer.types';\nimport { IRecordDefinition } from '@helix/platform/record/api';\n\nexport const init = createAction('[Record Designer] Init', props<{ payload: IInitRecordDesignerActionPayload }>());\n\nexport const loadDefinition = createAction('[Record Designer] Load Definition');\n\nexport const clearSearchFields = createAction('[Record Designer] Clear Search Fields');\n\nexport const loadDefinitionSuccess = createAction(\n  '[Record Designer] Load Definition Success',\n  props<{ definition: IRecordDefinition }>()\n);\n\nexport const initDefinitionModel = createAction(\n  '[Record Designer] Init Definition Model',\n  props<{ definitionModelFromDefinition: IRecordDefinitionModel }>()\n);\n\nexport const markDesignerPristine = createAction('[Record Designer] Mark Designer Pristine');\n\nexport const markDesignerDirty = createAction('[Record Designer] Mark Designer Dirty');\n\nexport const toggleDesignMode = createAction('[Record Designer] Toggle Design Mode');\n\nexport const updateDefinitionModelFromDesigner = createAction(\n  '[Record Designer] Update Definition Model From Designer',\n  props<{ definitionModelFromDesigner: IRecordDefinitionModel }>()\n);\n\nexport const updateSelectedFieldModel = createAction(\n  '[Record Designer] Update Selected Field Model',\n  props<{ selectedFieldModel: IRecordFieldDefinitionModel }>()\n);\n\nexport const setInspectorTabIndex = createAction(\n  '[Record Designer] Set Inspector Tab Index',\n  props<{ inspectorTabIndex: number }>()\n);\n\nexport const createNewFieldModel = createAction(\n  '[Record Designer] Create New Field Model',\n  props<{ resourceType: string }>()\n);\n\nexport const addFieldModel = createAction(\n  '[Record Designer] Add Field Model',\n  props<{ newFieldModel: IRecordFieldDefinitionModel }>()\n);\n\nexport const addNewFieldModels = createAction(\n  '[Record Designer] Add New Field Models',\n  props<{ newFieldModels: IRecordFieldDefinitionModel[] }>()\n);\n\nexport const setSelectedFieldGuid = createAction(\n  '[Record Designer] Set Selected Field GUID',\n  props<{ guid: string }>()\n);\n\nexport const clearSelectedFieldGuid = createAction('[Record Designer] Clear Selected Field GUID');\n\nexport const deleteSelectedField = createAction('[Record Designer] Delete Selected Field');\n\nexport const copySelectedField = createAction('[Record Designer] Copy Selected Field');\n\nexport const checkIfFieldUsedByIndexes = createAction('[Record Designer] Check If Field Used By Indexes');\n\nexport const deleteSelectedFieldSuccess = createAction('[Record Designer] Delete Selected Field Success');\n\nexport const deleteSelectedFieldError = createAction('[Record Designer] Delete Selected Field Error');\n\nexport const saveDefinition = createAction('[Record Designer] Save Definition');\n\nexport const saveDefinitionSuccess = createAction(\n  '[Record Designer] Save Definition Success',\n  props<{ savedDefinitionName: string }>()\n);\n\nexport const destroy = createAction('[Record Designer] Destroy');\n"]}