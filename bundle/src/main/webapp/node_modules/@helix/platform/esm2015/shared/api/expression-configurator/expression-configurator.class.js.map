{"version":3,"file":"expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/expression-configurator/expression-configurator.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAOpF,OAAO,EACL,uBAAuB,EACvB,6BAA6B,EAG9B,MAAM,0CAA0C,CAAC;AAElD,MAAM,OAAgB,wBAAwB;IAA9C;QAGU,sBAAiB,GAA4C,EAAE,CAAC;IA+D1E,CAAC;IA7DW,gBAAgB;QACxB,OAAO;YACL,eAAe,EAAE,IAAI,CAAC,qBAAqB;YAC3C,SAAS,EAAE,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,IAAI,CAAC;YAC1E,kBAAkB,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;SAC3D,CAAC;IACJ,CAAC;IAED,oBAAoB,CAAC,MAA6C;QAChE,IAAI,CAAC,iBAAiB,CAAC,IAAI,iCACtB,IAAI,CAAC,gBAAgB,EAAE,GACvB,MAAM,EACT,CAAC;IACL,CAAC;IAED,iBAAiB,CAAC,YAAqB;QACrC,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC,IAAI,CAChE,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,CACjE,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,YAAqB;QAChC,OAAO,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,eAAe,CAAC,YAAqB;QACnC,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC;IAC1D,CAAC;IAED,sBAAsB,CAAC,KAA8B;QACnD,OAAO,SAAS,CAAC,6BAA6B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAES,mBAAmB,CAAC,YAAoB;QAChD,OAAO,CACL,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CACrC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,KAAK,YAAY,CAC9G,oBACC,YAAY,IACT,IAAI,CAAC,gBAAgB,EAAE,CAC3B,CACF,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,YAAoB,EAAE,aAAqB;QAC1D,OAAO,aAAa;YAClB,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,kBAAkB,CAAC,YAAY,EAAE,aAAa,CAAC;YACxF,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;IAEO,kBAAkB,CAAC,cAA+B;QACxD,OAAO,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,EAAE;YAC/B,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC,CAC5E,CAAC;aACH;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACxB,CAAC;CACF","sourcesContent":["import { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { cloneDeep, flatten, forEach, isRegExp, isUndefined, sortBy } from 'lodash';\nimport { IDataDictionary } from '../data-dictionary/data-dictionary.types';\nimport {\n  IExpressionConfigurator,\n  IExpressionConfiguratorDefaultPropertyConfig,\n  IExpressionConfiguratorPropertyConfig\n} from './expression-configurator.interfaces';\nimport {\n  ExpressionOperatorGroup,\n  ExpressionOperatorRowsByGroup,\n  IExpressionOperator,\n  IExpressionOperatorRow\n} from './expression-configurator-operator.types';\n\nexport abstract class RxExpressionConfigurator implements IExpressionConfigurator {\n  abstract commonDataDictionary$: Observable<IDataDictionary>;\n\n  private expressionConfigs: IExpressionConfiguratorPropertyConfig[] = [];\n\n  protected getDefaultConfig(): IExpressionConfiguratorDefaultPropertyConfig {\n    return {\n      dataDictionary$: this.commonDataDictionary$,\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.Math),\n      validateExpression: (propertyPath, expression) => of(true)\n    };\n  }\n\n  configureForProperty(config: IExpressionConfiguratorPropertyConfig): void {\n    this.expressionConfigs.push({\n      ...this.getDefaultConfig(),\n      ...config\n    });\n  }\n\n  getDataDictionary(propertyPath?: string): Observable<IDataDictionary> {\n    return this.getExpressionConfig(propertyPath).dataDictionary$.pipe(\n      map((dataDictionary) => this.sortDataDictionary(dataDictionary))\n    );\n  }\n\n  getOperators(propertyPath?: string): IExpressionOperator[] {\n    return flatten(this.getOperatorRows(propertyPath));\n  }\n\n  getOperatorRows(propertyPath?: string): IExpressionOperatorRow[] {\n    return this.getExpressionConfig(propertyPath).operators;\n  }\n\n  getOperatorRowsByGroup(group: ExpressionOperatorGroup): IExpressionOperatorRow[] {\n    return cloneDeep(ExpressionOperatorRowsByGroup.get(group));\n  }\n\n  protected getExpressionConfig(propertyPath: string): IExpressionConfiguratorPropertyConfig {\n    return (\n      this.expressionConfigs.find((config) =>\n        isRegExp(config.propertyPath) ? config.propertyPath.test(propertyPath) : config.propertyPath === propertyPath\n      ) || {\n        propertyPath,\n        ...this.getDefaultConfig()\n      }\n    );\n  }\n\n  validateProperty(propertyPath: string, propertyValue: string): Observable<boolean> {\n    return propertyValue\n      ? this.getExpressionConfig(propertyPath).validateExpression(propertyPath, propertyValue)\n      : of(true);\n  }\n\n  private sortDataDictionary(dataDictionary: IDataDictionary): IDataDictionary {\n    forEach(dataDictionary, (node) => {\n      if (node.children) {\n        node.children = this.sortDataDictionary(\n          sortBy(node.children, [(child) => !isUndefined(child.expression), 'label'])\n        );\n      }\n    });\n\n    return dataDictionary;\n  }\n}\n"]}