{"version":3,"file":"view-action-registry.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/view-action/view-action-registry.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAEL,cAAc,EACd,oBAAoB,EACpB,oBAAoB,EACrB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACvC,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,yBAAyB,EAAE,MAAM,+CAA+C,CAAC;;;;AAK1F,MAAM,OAAO,2BAA2B;IACtC,YACU,oBAA0C,EAC1C,eAAgC,EAChC,oBAA0C;QAF1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,oBAAe,GAAf,eAAe,CAAiB;QAChC,yBAAoB,GAApB,oBAAoB,CAAsB;QAG5C,0BAAqB,GAAuC,IAAI,GAAG,EAAE,CAAC;QACtE,mBAAc,GAA0C,IAAI,GAAG,EAAE,CAAC;QAElE,oBAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAC7E,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE,CACxB,iBAAiB,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,gBAAgB,EAAE,EAAE;;YAC5D,MAAA,gBAAgB,CAAC,SAAS,CAAC,WAAW,0CAAE,OAAO,CAAC,CAAC,cAAsB,EAAE,EAAE;gBACzE,cAAc,CAAC,cAAc,CAAC,GAAG,gBAAgB,CAAC,EAAE,CAAC;YACvD,CAAC,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QACxB,CAAC,EAAE,EAAE,CAAC,CACP,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IAhBC,CAAC;IAkBJ,QAAQ,CAAC,oBAA2C;QAClD,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE;YAC/B,oBAAoB,CAAC,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC;SACxD;QAED,oBAAoB,CAAC,UAAU,GAAG,oBAAoB,CAAC,UAAU,IAAI,EAAE,CAAC;QAExE,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,aAAa;YACnB,0BAA0B,EAAE,IAAI;SACjC,CAAC,CAAC;QAEH,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC;YACnC,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,yBAAyB,CAAC,MAAM;SAC7C,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAClF,CAAC;IAED,GAAG,CAAC,UAAkB;QACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,oBAAoB,CAAC,4BAA4B,EAAE,CAAC,IAAI,CAClE,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE;YACxB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBACjF,OAAO,CACL,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,iBAAiB,CAAC;oBACnE,IAAI,CAAC,gCAAgC,CAAC,gBAAgB,CAAC,CACxD,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,sBAAsB,CAAC,cAAsB;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;IAC5F,CAAC;IAEO,gBAAgB,CAAC,QAAgB,EAAE,iBAAsC;QAC/E,OAAO,QAAQ,KAAK,cAAc,CAAC,gBAAgB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IACnG,CAAC;IAEO,gCAAgC,CAAC,gBAAuC;QAC9E,OAAO,CACL,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,CAAC;YAC5C,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,kBAAkB,CAAC,CACzG,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,iBAAyB;QAC7C,IAAI,uBAAuB,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAE1D,IAAI,CAAC,uBAAuB,EAAE;YAC5B,uBAAuB,mCAClB,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,KAClC,IAAI,EAAE,iBAAiB,GACxB,CAAC;YAEF,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;SACxC;QAED,OAAO,uBAAuB,CAAC;IACjC,CAAC;IAED,qBAAqB,CAAC,UAAkB,EAAE,oBAA8C;QACtF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;IAC5D,CAAC;IAED,gBAAgB,CAAC,UAAkB;;QACjC,OAAO,MAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,mCAAI,MAAA,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,aAAa,CAAC;IAC1G,CAAC;;wHApGU,2BAA2B;4HAA3B,2BAA2B,cAF1B,MAAM;2FAEP,2BAA2B;kBAHvC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { IViewActionDescriptor, IViewActionDesignManager } from './view-action.interfaces';\nimport { Injectable } from '@angular/core';\nimport {\n  IBundleDescriptor,\n  RX_APPLICATION,\n  RxBundleCacheService,\n  RxGlobalCacheService\n} from '@helix/platform/shared/api';\nimport { isEmpty, some } from 'lodash';\nimport { RxStringService } from '@helix/platform/utils';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { ViewComponentPropertyType } from '../registries/view-component-descriptor.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewActionRegistryService {\n  constructor(\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxStringService: RxStringService,\n    private rxBundleCacheService: RxBundleCacheService\n  ) {}\n\n  private viewActionDescriptors: Map<string, IViewActionDescriptor> = new Map();\n  private designManagers: Map<string, IViewActionDesignManager> = new Map();\n\n  private ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(\n    map((bundleDescriptors) =>\n      bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n        bundleDescriptor.uiOptions.viewActions?.forEach((viewActionName: string) => {\n          ownerBundleIds[viewActionName] = bundleDescriptor.id;\n        });\n\n        return ownerBundleIds;\n      }, {})\n    ),\n    shareReplay(1)\n  );\n\n  register(viewActionDescriptor: IViewActionDescriptor) {\n    if (!viewActionDescriptor.label) {\n      viewActionDescriptor.label = viewActionDescriptor.name;\n    }\n\n    viewActionDescriptor.parameters = viewActionDescriptor.parameters || [];\n\n    viewActionDescriptor.parameters.push({\n      name: '$condition$',\n      enableExpressionEvaluation: true\n    });\n\n    viewActionDescriptor.parameters.push({\n      name: 'index',\n      designType: ViewComponentPropertyType.Number\n    });\n\n    this.viewActionDescriptors.set(viewActionDescriptor.name, viewActionDescriptor);\n  }\n\n  get(actionName: string): IViewActionDescriptor {\n    return this.viewActionDescriptors.get(actionName);\n  }\n\n  getRegisteredActions(): Map<string, IViewActionDescriptor> {\n    return this.viewActionDescriptors;\n  }\n\n  getLicensedActions(): Observable<IViewActionDescriptor[]> {\n    return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(\n      map((bundleDescriptors) => {\n        return Array.from(this.viewActionDescriptors.values()).filter((actionDescriptor) => {\n          return (\n            this.isBundleLicensed(actionDescriptor.bundleId, bundleDescriptors) &&\n            this.isActionAvailableInCurrentBundle(actionDescriptor)\n          );\n        });\n      })\n    );\n  }\n\n  getActionOwnerBundleId(viewActionName: string): Observable<string> {\n    return this.ownerBundleIds$.pipe(map((ownerBundleIds) => ownerBundleIds[viewActionName]));\n  }\n\n  private isBundleLicensed(bundleId: string, bundleDescriptors: IBundleDescriptor[]): boolean {\n    return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, { id: bundleId });\n  }\n\n  private isActionAvailableInCurrentBundle(actionDescriptor: IViewActionDescriptor): boolean {\n    return (\n      isEmpty(actionDescriptor.availableInBundles) ||\n      this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, actionDescriptor.availableInBundles)\n    );\n  }\n\n  registerUnknownAction(unknownActionName: string): IViewActionDescriptor {\n    let unknownActionDescriptor = this.get(unknownActionName);\n\n    if (!unknownActionDescriptor) {\n      unknownActionDescriptor = {\n        ...this.get('rxUnknownViewAction'),\n        name: unknownActionName\n      };\n\n      this.register(unknownActionDescriptor);\n    }\n\n    return unknownActionDescriptor;\n  }\n\n  registerDesignManager(actionName: string, designManagerService: IViewActionDesignManager): void {\n    this.designManagers.set(actionName, designManagerService);\n  }\n\n  getDesignManager(actionName: string): IViewActionDesignManager {\n    return this.designManagers.get(actionName) ?? this.viewActionDescriptors.get(actionName)?.designManager;\n  }\n}\n"]}