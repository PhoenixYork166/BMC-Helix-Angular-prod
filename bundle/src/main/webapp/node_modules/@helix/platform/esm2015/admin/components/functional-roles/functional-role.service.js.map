{"version":3,"file":"functional-role.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/functional-roles/functional-role.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAc,MAAM,MAAM,CAAC;;;AAM5C,MAAM,OAAO,sBAAsB;IAGjC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFlC,SAAI,GAAG,oCAAoC,CAAC;IAEP,CAAC;IAEtC,MAAM,CAAC,wBAAmD;QAChE,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,kBAAkB,CAAC,wBAAwB,CAAC,eAAe,CAAC,IAAI,kBAAkB,CACvG,wBAAwB,CAAC,IAAI,CAC9B,EAAE,CAAC;IACN,CAAC;IAED,GAAG,CAAC,wBAAmD;QACrD,OAAoC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACjG,CAAC;IAEO,oBAAoB,CAAC,wBAAmD;QAC9E,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,CAAC,KAAkC;QACvC,MAAM,iBAAiB,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/E,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,cAA+B;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,cAA+B,EAAE,QAAgB;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,IAAI,CAAC,MAAM,CAAC,EAAE,eAAe,EAAE,cAAc,CAAC,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAChF,cAAc,CACf,CAAC;IACJ,CAAC;;mHAlCU,sBAAsB;uHAAtB,sBAAsB,cAFrB,MAAM;2FAEP,sBAAsB;kBAHlC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { forkJoin, Observable } from 'rxjs';\nimport { IFunctionalRole, IFunctionalRoleDescriptor } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxFuntionalRoleService {\n  private path = '/api/rx/application/functionalrole';\n\n  constructor(private httpClient: HttpClient) {}\n\n  private getUrl(functionalRoleDescriptor: IFunctionalRoleDescriptor): string {\n    return `${this.path}/${encodeURIComponent(functionalRoleDescriptor.applicationName)}/${encodeURIComponent(\n      functionalRoleDescriptor.name\n    )}`;\n  }\n\n  get(functionalRoleDescriptor: IFunctionalRoleDescriptor): Observable<IFunctionalRole> {\n    return <Observable<IFunctionalRole>>this.httpClient.get(this.getUrl(functionalRoleDescriptor));\n  }\n\n  private deleteFunctionalRole(functionalRoleDescriptor: IFunctionalRoleDescriptor): Observable<any> {\n    return this.httpClient.delete(this.getUrl(functionalRoleDescriptor));\n  }\n\n  delete(roles: IFunctionalRoleDescriptor[]): Observable<any> {\n    const deleteObservables = roles.map((role) => this.deleteFunctionalRole(role));\n\n    return forkJoin(deleteObservables);\n  }\n\n  create(functionalRole: IFunctionalRole): Observable<any> {\n    return this.httpClient.post(this.path, functionalRole);\n  }\n\n  save(functionalRole: IFunctionalRole, roleName: string): Observable<any> {\n    return this.httpClient.put(\n      this.getUrl({ applicationName: functionalRole.applicationName, name: roleName }),\n      functionalRole\n    );\n  }\n}\n"]}