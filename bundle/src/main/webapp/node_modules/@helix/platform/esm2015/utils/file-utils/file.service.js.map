{"version":3,"file":"file.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/file-utils/file.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AACpC,OAAO,EAAW,KAAK,EAAE,MAAM,QAAQ,CAAC;;AAKxC,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,QAAQ,CAAC,UAAqC;;QACnD,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,IAAmB,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE3D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,eAAe,CAAC,EAAE;YACvC,IAAI,EAAE,MAAA,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,mCAAI,SAAS;SAC1D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,UAAqC;;QAC1D,MAAM,kBAAkB,GAAG,MAAA,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,mCAAI,EAAE,CAAC;QAE/E;;;WAGG;QACH,OAAO,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,qBAAqB,CAAC,IAAS,EAAE,IAAY,EAAE,IAAY,EAAE,SAAiB;QAC5E,MAAM,IAAI,GAAS,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9C,MAAM,CAAC,IAAI,EAAE,GAAG,IAAI,IAAI,SAAS,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,eAAe,CAAC,UAAqC;QACnD,OAAO,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;;0GA9BU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { replace, words } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxFileService {\n  static saveFile(fileStream: HttpResponse<ArrayBuffer>) {\n    const arrayBufferView = new Uint8Array(fileStream.body as ArrayBuffer);\n    const fileName = RxFileService.extractFileName(fileStream);\n\n    const file = new Blob([arrayBufferView], {\n      type: fileStream.headers.get('content-type') ?? undefined\n    });\n\n    saveAs(file, fileName);\n  }\n\n  static extractFileName(fileStream: HttpResponse<ArrayBuffer>): string | undefined {\n    const contentDisposition = fileStream.headers.get('content-disposition') ?? '';\n\n    /*\n     *  words('attachment; filename = logs.tar.gz'.replace(/\\s/g, ''), /filename=(.*)/)[1];\n     *  => 'logs.tar.gz'\n     */\n    return words(contentDisposition.replace(/\\s/g, ''), /filename=(.*)/)[1];\n  }\n\n  createAndDownloadBlob(data: any, type: string, name: string, extension: string): void {\n    const blob: Blob = new Blob([data], { type });\n\n    saveAs(blob, `${name}.${extension}`);\n  }\n\n  extractFileName(fileStream: HttpResponse<ArrayBuffer>): string | undefined {\n    return RxFileService.extractFileName(fileStream);\n  }\n}\n"]}