{"version":3,"file":"server-error-handler.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/error-handling/server-error-handler.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { compact, includes, isString, some, truncate } from 'lodash';\nimport { RxNotificationService } from '../notification/notification.service';\nimport { RX_ERROR_HANDLING } from './error-handling.constant';\nimport { IErrorMessage, IServerResponseMessage } from './error-handling.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxServerErrorHandlerService {\n  constructor(private translateService: TranslateService, private rxNotificationService: RxNotificationService) {}\n\n  getServerResponseErrorDetails(responseData: any): IServerResponseMessage[] {\n    let messages;\n\n    try {\n      messages = JSON.parse(responseData);\n    } catch (ignored) {\n      messages = [...responseData];\n    }\n\n    if (Array.isArray(messages)) {\n      return messages.filter(\n        (message: IServerResponseMessage) =>\n          message.messageType !== RX_ERROR_HANDLING.messageTypes.success &&\n          (message.messageText || message.appendedText)\n      );\n    } else {\n      return null;\n    }\n  }\n\n  buildMessageFromRawResponse(response): IErrorMessage {\n    const errorMessage = {\n      title: '',\n      message: ''\n    };\n\n    if (response.status === 0) {\n      errorMessage.title = this.translateService.instant('com.bmc.arsys.rx.client.error-handling.network-error.title');\n\n      errorMessage.message = this.translateService.instant(\n        'com.bmc.arsys.rx.client.error-handling.network-error.message'\n      );\n    } else {\n      errorMessage.title = this.translateService.instant(\n        'com.bmc.arsys.rx.client.error-handling.server-communication-error.title'\n      );\n\n      errorMessage.message = this.translateService.instant(\n        'com.bmc.arsys.rx.client.error-handling.server-communication-error.message',\n        {\n          status: compact([response.status, response.statusText]).join(' ')\n        }\n      );\n    }\n\n    return errorMessage;\n  }\n\n  buildMessageFromErrorDetails(error: IServerResponseMessage): IErrorMessage {\n    return {\n      title: `${error.messageType} (${error.messageNumber})`,\n      message: truncate([error.messageText, error.appendedText].filter(Boolean).join(' '), {\n        length: RX_ERROR_HANDLING.maxErrorMessageLength\n      })\n    };\n  }\n\n  handle(error: HttpErrorResponse): void {\n    if (!this.canIgnore(error)) {\n      const operationId = error.headers.get('operation-id');\n\n      if (Array.isArray(error.error) || isString(error.error)) {\n        const messages = this.getServerResponseErrorDetails(error.error);\n\n        messages.forEach((message: IServerResponseMessage) => {\n          const messageDetails = this.buildMessageFromErrorDetails(message);\n\n          switch (message.messageType) {\n            case RX_ERROR_HANDLING.messageTypes.error:\n              this.rxNotificationService.addErrorMessage(messageDetails.message, messageDetails.title, {\n                issue: { ...message, operationId, enableIssueReporting: true }\n              });\n              break;\n\n            case RX_ERROR_HANDLING.messageTypes.warning:\n              this.rxNotificationService.addWarningMessage(messageDetails.message, messageDetails.title, {\n                issue: { ...message, operationId, enableIssueReporting: true }\n              });\n              break;\n\n            case RX_ERROR_HANDLING.messageTypes.info:\n              this.rxNotificationService.addInfoMessage(messageDetails.message, messageDetails.title);\n              break;\n          }\n        });\n      } else {\n        const errorMessage = this.buildMessageFromRawResponse(error);\n\n        this.rxNotificationService.addErrorMessage(errorMessage.message, errorMessage.title);\n      }\n    }\n  }\n\n  private canIgnore(err: HttpErrorResponse): boolean {\n    return some(\n      RX_ERROR_HANDLING.ignoredErrors,\n      (ignoredError) => ignoredError.status === err.status && includes(JSON.stringify(err.error), ignoredError.contains)\n    );\n  }\n}\n"]}