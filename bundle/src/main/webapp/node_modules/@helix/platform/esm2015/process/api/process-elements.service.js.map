{"version":3,"file":"process-elements.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/process/api/process-elements.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { filter, find, forEach, map as _map, pick } from 'lodash';\nimport {\n  IDesignerStencilElement,\n  RxActionTypeUtilsService,\n  RxBundleCacheService,\n  RxDefinitionNameService,\n  RxGlobalCacheService\n} from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\nimport { RX_PROCESS_DEFINITION } from './process-definition.constant';\nimport { ElementVisibilityOptions, ICallActivityElement } from './process-element.types';\nimport { RxCallActivityRegistryService } from './call-activity-registry.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementsService {\n  constructor(\n    private rxActionTypeUtilsService: RxActionTypeUtilsService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxCallActivityRegistryService: RxCallActivityRegistryService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxStringService: RxStringService\n  ) {}\n\n  getActionElements(actionResourceType: string): Observable<IDesignerStencilElement[]> {\n    return forkJoin([\n      this.rxBundleCacheService.getActionTypes(),\n      this.rxGlobalCacheService.getBundleDescriptors()\n    ]).pipe(\n      map(([actionTypes, bundleDescriptors]) => {\n        return _map(actionTypes, (actionType) => {\n          return {\n            group:\n              this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) ||\n              'Platform actions',\n            label:\n              actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n            value: {\n              actionTypeName: actionType.actionTypeName,\n              resourceType: actionResourceType\n            }\n          };\n        });\n      })\n    );\n  }\n\n  getCallActivityElements(): Observable<IDesignerStencilElement[]> {\n    return forkJoin([this.rxGlobalCacheService.getBundleDescriptors(), this.getVisibleCallActivities()]).pipe(\n      map(([bundleDescriptors, visibleCallActivities]) => {\n        const callActivityElements = [];\n\n        forEach(visibleCallActivities, (visibleCallActivity) => {\n          const bundle = find(bundleDescriptors, {\n            id: this.rxDefinitionNameService.getBundleId(visibleCallActivity.processDefinitionName)\n          });\n\n          if (bundle) {\n            callActivityElements.push({\n              group: bundle.friendlyName,\n              label:\n                visibleCallActivity.displayName ||\n                this.rxStringService.prettify(\n                  this.rxDefinitionNameService.getDisplayName(visibleCallActivity.processDefinitionName)\n                ),\n              value: {\n                resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.callActivity,\n                calledProcessDefinitionName: visibleCallActivity.processDefinitionName\n              }\n            });\n          }\n        });\n\n        return callActivityElements;\n      })\n    );\n  }\n\n  getProcessElements(): Observable<IDesignerStencilElement[]>[] {\n    return [\n      this.getActionElements(RX_PROCESS_DEFINITION.processElementResourceTypes.processAction),\n      this.getCallActivityElements(),\n      this.getStandardProcessElements()\n    ];\n  }\n\n  getStandardProcessElements(): Observable<IDesignerStencilElement[]> {\n    return of(\n      _map(RX_PROCESS_DEFINITION.standardProcessElements, (element) => {\n        let label;\n\n        if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.processAction) {\n          label = this.rxActionTypeUtilsService.prettifyActionTypeName(element.actionTypeName);\n        } else if (element.eventResourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent) {\n          const errorEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent\n            ];\n\n          const boundaryEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent\n            ];\n\n          const endEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent\n            ];\n\n          label =\n            element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent\n              ? `${errorEventLabel} ${boundaryEventLabel}`\n              : `${errorEventLabel} ${endEventLabel}`;\n        } else if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent) {\n          label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.eventResourceType];\n        } else {\n          label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.resourceType];\n        }\n\n        return {\n          group: element.group,\n          label: label,\n          value: pick(element, RX_PROCESS_DEFINITION.processElementConfigurationProperties)\n        };\n      })\n    );\n  }\n\n  getVisibleCallActivities(): Observable<ICallActivityElement[]> {\n    return of(\n      filter(Array.from(this.rxCallActivityRegistryService.getRegisteredCallActivities()), {\n        visibility: ElementVisibilityOptions.Always\n      })\n    );\n  }\n}\n"]}