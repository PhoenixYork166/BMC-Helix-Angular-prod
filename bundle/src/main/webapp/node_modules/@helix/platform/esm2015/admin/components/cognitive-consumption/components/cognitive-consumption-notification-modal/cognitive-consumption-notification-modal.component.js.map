{"version":3,"file":"cognitive-consumption-notification-modal.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-consumption/components/cognitive-consumption-notification-modal/cognitive-consumption-notification-modal.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-consumption/components/cognitive-consumption-notification-modal/cognitive-consumption-notification-modal.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';\nimport { ActiveModalRef, AdaptModalService, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IPlainObject, RxCurrentUserService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { IRowDataItem, OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { IRecordGridConfig, RecordGridComponent, RowSelectionMode } from '@helix/platform/view/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  add,\n  compact,\n  every,\n  find,\n  forEach,\n  get,\n  includes,\n  inRange,\n  isEmpty,\n  map,\n  merge,\n  noop,\n  omit,\n  pullAt\n} from 'lodash';\nimport { EMPTY, Observable, of, Subscription, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { RX_COGNITIVE_CONSUMPTION } from '../../cognitive-consumption.constant';\nimport { RxCognitiveConsumptionService } from '../../cognitive-consumption.service';\nimport {\n  ICognitiveConsumptionGroup,\n  ICognitiveConsumptionNotificationConfig,\n  ICognitiveConsumptionNotificationEntity\n} from '../../cognitive-consumption.types';\nimport { CognitiveConsumptionNotificationHistoryModalComponent } from '../cognitive-consumption-notification-history-modal/cognitive-consumption-notification-history-modal.component';\n\n@Component({\n  selector: 'rx-cognitive-consumption-notification-modal',\n  templateUrl: './cognitive-consumption-notification-modal.component.html',\n  styleUrls: ['./cognitive-consumption-notification-modal.component.scss']\n})\nexport class CognitiveConsumptionNotificationModalComponent extends RxModalClass implements OnInit {\n  @ViewChild('availableEmailNotificationRecipientsRecordGrid', { static: true })\n  availableEmailNotificationRecipientsRecordGrid: RecordGridComponent;\n\n  @ViewChild('notificationForm', { static: true, read: NgForm })\n  notificationForm: NgForm;\n\n  busy: Subscription;\n  entity: ICognitiveConsumptionNotificationEntity;\n  group: ICognitiveConsumptionGroup;\n  isAdministrator: boolean;\n  label: string;\n  modalData: IPlainObject;\n  recordGridConfig: Observable<IRecordGridConfig>;\n\n  isEdit = false;\n  selectedEmailRecipients: string[] = [];\n\n  thresholds: IPlainObject[] = [\n    {\n      id: 1,\n      value: 0\n    },\n    {\n      id: 2,\n      value: 0\n    },\n    {\n      id: 3,\n      value: 0\n    }\n  ];\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private adaptModalService: AdaptModalService,\n    private rxCognitiveConsumptionService: RxCognitiveConsumptionService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxLogService: RxLogService,\n    private rxNotificationService: RxNotificationService,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    this.modalData = this.activeModalRef.getData();\n    this.isAdministrator = this.rxCurrentUserService.isAdministrator();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    forEach(RX_COGNITIVE_CONSUMPTION.sections, (section) => {\n      const group: ICognitiveConsumptionGroup = find(section.groups, ['id', this.modalData.groupId]);\n\n      if (group) {\n        this.group = group;\n      }\n    });\n\n    this.label = `${this.translateService.instant(this.group.label)} (${this.group.unit})`;\n\n    this.entity = {\n      action: this.modalData.groupId,\n      capacity: 0,\n      domain: 'com.bmc.dsm.innovationsuite.cognitive',\n      emailIds: [],\n      thresholds: [null, null, null]\n    };\n\n    this.busy = this.rxCognitiveConsumptionService\n      .getCognitiveConsumptionNotificationConfig({\n        action: this.entity.action,\n        domain: this.entity.domain\n      })\n      .pipe(\n        catchError((error) => {\n          return get(error, 'error[0].messageNumber') === 302 ? EMPTY : throwError(error);\n        })\n      )\n      .subscribe((config: ICognitiveConsumptionNotificationConfig) => {\n        this.isEdit = true;\n        merge(this.entity, config.entity);\n\n        this.thresholds = map(this.entity.thresholds, (threshold, index) => {\n          return {\n            id: index + 1,\n            value: threshold || 0\n          };\n        });\n\n        this.selectedEmailRecipients = this.entity.emailIds;\n      });\n\n    this.recordGridConfig = of({\n      enableFiltering: false,\n      recordDefinitionName: 'User',\n      enableRowSelection: RowSelectionMode.Multiple,\n      filterExpression: `('${RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId}' != $NULL$)`,\n\n      columns: [\n        {\n          index: 0,\n          fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),\n          title: this.translateService.instant(\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.full-name.title'\n          )\n        },\n        {\n          index: 1,\n          fieldId: String(RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId),\n          title: this.translateService.instant(\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.primary-email-address.title'\n          )\n        }\n      ]\n    });\n  }\n\n  isDirty(): boolean {\n    return this.notificationForm.dirty;\n  }\n\n  canSelectRecipients(): boolean {\n    const recipients: IRowDataItem[] = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();\n\n    return inRange(add(recipients.length, this.selectedEmailRecipients.length), 0, 11);\n  }\n\n  getEmptyCapacityValueValidator(): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl) => {\n      let result = null;\n\n      if (control.touched && !control.value) {\n        result = {\n          emptyCapacityValue: {\n            message: this.translateService.instant(\n              'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-empty-validation.message'\n            )\n          }\n        };\n      }\n\n      return result;\n    };\n  }\n\n  getEmptyThresholdValuesValidator(): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl) => {\n      let result = null;\n\n      if (control.touched && !control.value && every(this.thresholds, ['value', 0])) {\n        result = {\n          emptyThresholdValues: {\n            message: this.translateService.instant(\n              'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-threshold-validation.message'\n            )\n          }\n        };\n      }\n\n      return result;\n    };\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return this.notificationForm.invalid || isEmpty(this.selectedEmailRecipients);\n  }\n\n  onCloseClick(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onMoveToSelectedClick(): void {\n    const recipients: IRowDataItem[] = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();\n\n    if (this.canSelectRecipients()) {\n      forEach(recipients, (recipient) => {\n        if (\n          !includes(\n            this.selectedEmailRecipients,\n            recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId]\n          )\n        ) {\n          this.selectedEmailRecipients.push(recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId]);\n        }\n      });\n    }\n  }\n\n  onNotificationHistoryClick(): void {\n    this.adaptModalService\n      .open({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title'\n        ),\n        content: CognitiveConsumptionNotificationHistoryModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        data: {\n          domain: this.entity.domain,\n          groupId: this.modalData.groupId\n        }\n      })\n      .catch(noop);\n  }\n\n  onRemoveRecipientClick(index: number): void {\n    pullAt(this.selectedEmailRecipients, [index]);\n  }\n\n  onSaveClick(): void {\n    forEach(this.notificationForm.controls, (control) => {\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n\n    const entity: ICognitiveConsumptionNotificationEntity = {\n      action: this.entity.action,\n      capacity: this.entity.capacity,\n      domain: this.entity.domain,\n      emailIds: this.selectedEmailRecipients,\n      thresholds: compact(map(this.thresholds, 'value'))\n    };\n\n    if (this.notificationForm.valid) {\n      if (this.isEdit) {\n        this.rxCognitiveConsumptionService.putCognitiveConsumptionNotificationConfigEntity(entity).subscribe(() => {\n          this.activeModalRef.close();\n          this.rxNotificationService.addSuccessMessage(\n            this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n          );\n        });\n      } else {\n        this.rxCognitiveConsumptionService.postCognitiveConsumptionNotificationConfigEntity(entity).subscribe(() => {\n          this.activeModalRef.close();\n          this.rxNotificationService.addSuccessMessage(\n            this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n          );\n        });\n      }\n    }\n  }\n\n  onThresholdCounterModelChange(): void {\n    const controls = omit(this.notificationForm.controls, 'capacity');\n\n    forEach(controls, (control) => {\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    });\n  }\n}\n","<div class=\"modal-body d-flex\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form class=\"d-flex flex-column\" #notificationForm=\"ngForm\">\n    <div class=\"mb-4\" [style.width.%]=\"32\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity.title' | translate }}\n      </h5>\n\n      <adapt-rx-counter\n        name=\"capacity\"\n        [label]=\"label\"\n        placeholder=\"0\"\n        min=\"0\"\n        max=\"100\"\n        required\n        [rxCustomValidators]=\"getEmptyCapacityValueValidator()\"\n        [(ngModel)]=\"entity.capacity\"\n      >\n      </adapt-rx-counter>\n    </div>\n\n    <div class=\"mb-4\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption.capacity-consumption-thresholds.title' | translate }}\n      </h5>\n\n      <div class=\"d-flex justify-content-between\">\n        <adapt-rx-counter\n          *ngFor=\"let threshold of thresholds\"\n          [style.width.%]=\"32\"\n          name=\"threshold-{{ threshold.id }}\"\n          label=\"Threshold {{ threshold.id }} (%)\"\n          placeholder=\"0\"\n          min=\"0\"\n          max=\"100\"\n          adaptIntegerNumber\n          [rxCustomValidators]=\"getEmptyThresholdValuesValidator()\"\n          [(ngModel)]=\"threshold.value\"\n          (ngModelChange)=\"onThresholdCounterModelChange()\"\n        >\n        </adapt-rx-counter>\n      </div>\n    </div>\n\n    <div class=\"d-flex h-100\">\n      <div class=\"col-6 d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.available-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <rx-record-grid\n          class=\"flex-grow-1\"\n          [config]=\"recordGridConfig\"\n          #availableEmailNotificationRecipientsRecordGrid\n        ></rx-record-grid>\n      </div>\n\n      <button\n        class=\"d-icon-angle_right align-self-center mx-4\"\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        rx-id=\"move-to-selected-button\"\n        [disabled]=\"!canSelectRecipients()\"\n        (click)=\"onMoveToSelectedClick()\"\n      ></button>\n\n      <div class=\"col d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.selected-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <ul *ngIf=\"selectedEmailRecipients.length\" class=\"list-group\">\n          <li\n            *ngFor=\"let recipient of selectedEmailRecipients; let $index = index\"\n            class=\"list-group-item d-flex justify-content-between p-0 px-2\"\n          >\n            {{ recipient }}\n\n            <button\n              class=\"d-icon-trash_adapt\"\n              adapt-button\n              btn-type=\"tertiary\"\n              type=\"button\"\n              rx-id=\"remove-recipient\"\n              (click)=\"onRemoveRecipientClick($index)\"\n            ></button>\n          </li>\n        </ul>\n\n        <div *ngIf=\"!selectedEmailRecipients.length\" class=\"card h-100\">\n          <div class=\"card-block\">\n            <adapt-empty-state\n              type=\"objects\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.recipient-not-selected.message'\n                  | translate\n              }}\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer d-flex\">\n  <button\n    class=\"mr-auto\"\n    rx-id=\"notification-history-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"onNotificationHistoryClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title' | translate }}\n  </button>\n\n  <button\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button rx-id=\"close-button\" adapt-button btn-type=\"secondary\" size=\"small\" type=\"button\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n"]}