{"version":3,"file":"base-record-editor-field-design.class.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/base-record-editor-field/design/base-record-editor-field-design.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ITextFormControlOptions,\n  IValidationFormControlOptions,\n  SelectFormControlComponent,\n  TextFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSettablePropertiesDataDictionary,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { find, includes, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  startWith,\n  switchMap,\n  take,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IBaseRecordEditorFieldProperties } from './base-record-editor-field-design.types';\nimport {\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\n\nexport abstract class BaseRecordEditorFieldDesign extends ViewDesignerComponentModel {\n  protected rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  protected rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  protected rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  label$: Observable<string>;\n  recordEditorMode$: Observable<RecordEditorMode>;\n  parentGuid$: Observable<string>;\n  recordDefinitionName$: Observable<string>;\n  availableFieldDefinitions$: Observable<IFieldDefinition[]>;\n  recordDefinition$: Observable<IRecordDefinition>;\n  selectedFieldDefinition$: Observable<IFieldDefinition>;\n  isRequired$: Observable<boolean>;\n  private isSystemField$: Observable<boolean>;\n\n  abstract fieldResourceTypes: string[];\n\n  static getInitialProperties(initialProperties?: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    return {\n      fieldId: null,\n      label: null,\n      value: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    protected sandbox: IViewComponentDesignSandbox<IBaseRecordEditorFieldProperties>\n  ) {\n    super(injector, sandbox);\n  }\n\n  rxInit(): void {\n    this.pipeline();\n  }\n\n  private pipeline(): void {\n    this.parentGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.recordEditorMode$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n      })\n    );\n\n    this.recordDefinitionName$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName: string) => {\n        if (recordDefinitionName) {\n          return this.rxRecordDefinitionCacheService\n            .getRecordDefinition(recordDefinitionName)\n            .pipe(catchError((error) => EMPTY));\n        } else {\n          return of(null);\n        }\n      }),\n      distinctUntilChanged()\n    );\n\n    this.selectedFieldDefinition$ = this.sandbox.getComponentPropertyValue('fieldId').pipe(\n      switchMap((fieldId) =>\n        this.recordDefinition$.pipe(\n          map((recordDefinition) => {\n            if (recordDefinition && fieldId) {\n              return (\n                recordDefinition.fieldDefinitions.find(\n                  (fieldDefinition: IFieldDefinition) => fieldDefinition.id === Number(fieldId)\n                ) || null\n              );\n            } else {\n              return null;\n            }\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n\n    this.isRequired$ = this.selectedFieldDefinition$.pipe(\n      map(\n        (selectedFieldDefinition: IFieldDefinition) =>\n          selectedFieldDefinition && selectedFieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required\n      )\n    );\n\n    this.isSystemField$ = this.selectedFieldDefinition$.pipe(\n      startWith(false),\n      map((selectedFieldDefinition: IFieldDefinition) =>\n        this.rxFieldDefinitionService.isSystemField(selectedFieldDefinition)\n      )\n    );\n\n    // set field label\n    this.selectedFieldDefinition$\n      .pipe(\n        pairwise(),\n        withLatestFrom(this.sandbox.componentProperties$),\n        filter(\n          ([[oldField, newField], componentProperties]: [\n            [IFieldDefinition, IFieldDefinition],\n            IBaseRecordEditorFieldProperties\n          ]) => newField && ((oldField && oldField.name === componentProperties.label) || !componentProperties.label)\n        ),\n        map(\n          ([[oldField, newField]]: [[IFieldDefinition, IFieldDefinition], IBaseRecordEditorFieldProperties]) =>\n            newField.name\n        )\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    this.availableFieldDefinitions$ = combineLatest([this.recordDefinition$, this.recordEditorMode$]).pipe(\n      map(([recordDefinition, recordEditorMode]) => {\n        if (recordDefinition && recordDefinition.fieldDefinitions) {\n          return recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => includes(this.fieldResourceTypes, fieldDefinition.resourceType))\n            .filter((fieldDefinition) => {\n              const isSystemField = this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n\n              return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n            });\n        } else {\n          return [];\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.label$ = this.sandbox.componentProperties$.pipe(\n      map((componentProperties: IBaseRecordEditorFieldProperties) => {\n        return componentProperties && componentProperties.fieldId ? componentProperties.label : '<No field selected>';\n      })\n    );\n\n    this.sandbox.componentProperties$\n      .pipe(\n        mergeMap((componentProperties) => this.validate(componentProperties)),\n        distinctUntilChanged(isEqual)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    this.availableFieldDefinitions$\n      .pipe(switchMap(() => this.getInspectorConfig()))\n      .subscribe((inspectorConfig: IViewDesignerInspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        switchMap(() => this.getBreadcrumb()),\n        distinctUntilChanged()\n      )\n      .subscribe((breadcrumb: string) => {\n        this.sandbox.setBreadcrumbs(breadcrumb);\n      });\n\n    combineLatest([this.sandbox.getComponentPropertyValue('label'), this.selectedFieldDefinition$])\n      .pipe(\n        map(\n          ([label, fieldDefinition]) =>\n            label || (fieldDefinition ? `[${fieldDefinition.name}]` : `[${this.sandbox.descriptor.name}]`)\n        ),\n        distinctUntilChanged()\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, this.getSettableProperties());\n      });\n  }\n\n  getPropertiesByName(properties: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    const result: IBaseRecordEditorFieldProperties = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  validate(componentProperties: IBaseRecordEditorFieldProperties): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationIssues = [];\n\n    if (isEmpty(componentProperties.fieldId)) {\n      validationIssues.push(this.sandbox.createError('Field name cannot be blank.', 'fieldId'));\n    }\n\n    validationIssues.push(...validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  getBreadcrumb(): Observable<string> {\n    return of(null).pipe(\n      withLatestFrom(this.sandbox.componentProperties$),\n      map(([initial, componentProperties]) => componentProperties.label)\n    );\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return of(null).pipe(\n      withLatestFrom(\n        this.availableFieldDefinitions$,\n        this.recordDefinitionName$,\n        this.parentGuid$,\n        this.isSystemField$\n      ),\n      map(([initial, recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField]) => {\n        return this.getBaseInspectorConfig(recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField);\n      })\n    );\n  }\n\n  getSettableProperties(): IViewComponentDesignSettablePropertiesDataDictionary {\n    const disabledPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Disabled',\n            expression: `\\${view.components.${this.sandbox.guid}.disabled}`\n          }\n        ]\n      : [];\n\n    const hiddenPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Hidden',\n            expression: `\\${view.components.${this.sandbox.guid}.hidden}`\n          }\n        ]\n      : [];\n\n    return [...disabledPropDataDictionary, ...hiddenPropDataDictionary];\n  }\n\n  private getBaseInspectorFields(selectedFieldDefinitions: IFieldDefinition[], isSystemField: boolean) {\n    return [].concat(\n      [\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            required: true,\n            options: selectedFieldDefinitions.map((definition) => ({\n              name: definition.name,\n              id: String(definition.id)\n            }))\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'label',\n          component: TextFormControlComponent,\n          options: {\n            label: 'Display label'\n          } as ITextFormControlOptions\n        }\n      ],\n      isSystemField\n        ? []\n        : [\n            {\n              name: 'value',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Value'\n              } as IExpressionInspectorControlOptions\n            },\n            getDisabledFieldInspectorConfig()\n          ],\n      getStandardPropsInspectorConfigs()\n    );\n  }\n\n  private getBaseInspectorConfig(\n    recordFieldsSelectItems: IFieldDefinition[],\n    recordDefinitionName: string,\n    parentGuid: string,\n    isSystemField: boolean\n  ): IViewDesignerInspectorConfig {\n    const displayName = this.rxDefinitionNameService.getDisplayName(recordDefinitionName || '');\n\n    let controls;\n\n    if (recordDefinitionName) {\n      if (recordFieldsSelectItems.length) {\n        controls = this.getBaseInspectorFields(recordFieldsSelectItems, isSystemField);\n      } else {\n        controls = [\n          {\n            component: ValidationFormControlComponent,\n            options: {\n              text: `${displayName} does not have fields that can be bound to this field type.`,\n              componentGuid: parentGuid,\n              propertyName: 'recordDefinitionName'\n            } as IValidationFormControlOptions\n          }\n        ];\n      }\n    } else {\n      controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: parentGuid,\n            propertyName: 'recordDefinitionName' // todo remove that hardcode\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls\n        }\n      ]\n    };\n  }\n}\n"]}