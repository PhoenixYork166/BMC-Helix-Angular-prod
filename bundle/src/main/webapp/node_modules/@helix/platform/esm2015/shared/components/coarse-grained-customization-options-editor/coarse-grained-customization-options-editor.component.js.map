{"version":3,"file":"coarse-grained-customization-options-editor.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/coarse-grained-customization-options-editor/coarse-grained-customization-options-editor.component.ts","../../../../../../../libs/platform/shared/components/coarse-grained-customization-options-editor/coarse-grained-customization-options-editor.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,cAAc,EAA0C,MAAM,uBAAuB,CAAC;AAC/G,OAAO,EAAE,WAAW,EAAE,WAAW,EAAa,MAAM,gBAAgB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAChF,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAGL,SAAS,EACT,UAAU,EACX,MAAM,4BAA4B,CAAC;;;;;;AAMpC,MAAM,OAAO,gDAAiD,SAAQ,YAAY;IAMhF,YACU,WAAwB,EACxB,cAA8B,EAC/B,cAA8B,EAC3B,QAAkB;QAE5B,KAAK,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QALxB,gBAAW,GAAX,WAAW,CAAa;QACxB,mBAAc,GAAd,cAAc,CAAgB;QAC/B,mBAAc,GAAd,cAAc,CAAgB;QAC3B,aAAQ,GAAR,QAAQ,CAAU;QAT9B,SAAI,GAAoC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QACtE,0BAAqB,GAA4B,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC;QAEjF,eAAU,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,KAAK,UAAU,CAAC,cAAc,CAAC,yBAAyB,CAAC;QAS9F,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;IAC7C,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC;IAC1G,CAAC;IAED,eAAe,CAAC,MAAsB;QACpC,OAAO,MAAM,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;YACnB,IAAI,CAAC,cAAc;iBAChB,OAAO,CAAC;gBACP,KAAK,EAAE,SAAS;gBAChB,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;gBACxC,OAAO,EACL,yHAAyH;aAC5H,CAAC;iBACD,IAAI,CAAC,CAAC,MAAe,EAAE,EAAE;gBACxB,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,CAAC;SAChB;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,mBAAmB,KAAK,SAAS,CAAC,oBAAoB,CAAC,MAAM,EAAE;YAClF,IAAI,CAAC,cAAc;iBAChB,OAAO,CAAC;gBACP,KAAK,EAAE,SAAS;gBAChB,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;gBACxC,OAAO,EACL,kHAAkH;aACrH,CAAC;iBACD,IAAI,CAAC,CAAC,MAAe,EAAE,EAAE;gBACxB,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,CAAC;SAChB;aAAM;YACL,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;IACH,CAAC;IAED,aAAa,CAAC,sBAA8C;QAC1D,IAAI,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE;YACxF,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACnE;IACH,CAAC;IAED,UAAU;QACR,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,CAAC;QAC3D,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEO,QAAQ;QACd,MAAM,mBAAmB,GAAG,IAAI,CAC9B,IAAI,CAAC,qBAAqB,EAC1B,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAChE,CAAC;QAEF,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACrD,KAAK,EAAE,IAAI,WAAW,CAAC,CAAC,mBAAmB,CAAC,CAAC;YAC7C,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;SACzF,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACxD,CAAC;;6IAxFU,gDAAgD;iIAAhD,gDAAgD,2FChB7D,2uDAgDA;2FDhCa,gDAAgD;kBAJ5D,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,8DAA8D;iBAC5E","sourcesContent":["import { Component, Injector } from '@angular/core';\nimport { ActiveModalRef, DismissReasons, RxSelectionChangeEvent, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { RX_MODAL, RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { find, noop } from 'lodash';\nimport {\n  ICustomizationOptionsEditorData,\n  IScopeSelectionOption,\n  RX_BUNDLE,\n  RX_OVERLAY\n} from '@helix/platform/shared/api';\n\n@Component({\n  selector: 'rx-scope-customization-modal',\n  templateUrl: './coarse-grained-customization-options-editor.component.html'\n})\nexport class CoarseGrainedCustomizationOptionsEditorComponent extends RxModalClass {\n  data: ICustomizationOptionsEditorData = this.activeModalRef.getData();\n  scopeSelectionOptions: IScopeSelectionOption[] = this.data.scopeSelectionOptions;\n  customizationOptionsForm: FormGroup;\n  isDisabled = this.data.overlayOperation !== RX_OVERLAY.operationTypes.createdInThisOverlayGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxModalService: RxModalService,\n    public activeModalRef: ActiveModalRef,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n    this.initForm();\n  }\n\n  isDirty(): boolean {\n    return this.customizationOptionsForm.dirty;\n  }\n\n  isPublic(): boolean {\n    return this.customizationOptionsForm.get('scope').value[0].id === RX_BUNDLE.definitionScopeTypes.public;\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  submit(): void {\n    if (this.isPublic()) {\n      this.rxModalService\n        .confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message:\n            'If the definition scope is set to Public, it cannot be changed once the definition gets saved. Do you want to continue?'\n        })\n        .then((result: boolean) => {\n          if (result) {\n            this.closeModal();\n          }\n        })\n        .catch(noop);\n    } else if (this.data.definitionScopeName === RX_BUNDLE.definitionScopeNames.public) {\n      this.rxModalService\n        .confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message:\n            'Changing the definition scope from Public to Application or Library can break upgrades. Do you want to continue?'\n        })\n        .then((result: boolean) => {\n          if (result) {\n            this.closeModal();\n          }\n        })\n        .catch(noop);\n    } else {\n      this.closeModal();\n    }\n  }\n\n  onScopeChange(rxSelectionChangeEvent: RxSelectionChangeEvent): void {\n    if (rxSelectionChangeEvent.options[0].id === RX_BUNDLE.definitionScopes.application.type) {\n      this.customizationOptionsForm.get('allowOverlay').setValue(false);\n    }\n  }\n\n  closeModal(): void {\n    const result = this.customizationOptionsForm.getRawValue();\n    result.scope = result.scope[0].id;\n    this.activeModalRef.close(result);\n  }\n\n  private initForm(): void {\n    const definitionScopeName = find(\n      this.scopeSelectionOptions,\n      (scopeType) => scopeType.name === this.data.definitionScopeName\n    );\n\n    this.customizationOptionsForm = this.formBuilder.group({\n      scope: new FormControl([definitionScopeName]),\n      allowOverlay: { value: this.data.allowOverlay || false, disabled: this.data.isDisabled }\n    });\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"modal-body\">\n  <form [formGroup]=\"customizationOptionsForm\" class=\"row\">\n    <div class=\"col-lg-5\">\n      <adapt-rx-select\n        label=\"Scope\"\n        rx-id=\"scope\"\n        [options]=\"scopeSelectionOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [disabled]=\"isDisabled || data.isDisabled\"\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content:\n            'If Scope is set to Application or Library, the definition will be available only to this application or library. If Scope is set to Public, the definition will be available to use by this and other applications and libraries.',\n          placement: 'bottom',\n          popoverMode: true\n        }\"\n        formControlName=\"scope\"\n        (onSelectionChange)=\"onScopeChange($event)\"\n      >\n      </adapt-rx-select>\n    </div>\n\n    <div class=\"col-lg-12\">\n      <h5>{{'com.bmc.arsys.rx.client.customization-options-editor.customization-options.label' | translate}}</h5>\n      <adapt-rx-checkbox\n        label=\"{{'com.bmc.arsys.rx.client.customization-options-editor.allow-future-customization.label'\n        | translate : { definitionType: data.definitionTypeDisplayName } }}\"\n        formControlName=\"allowOverlay\"\n        [disabled]=\"isDisabled || !isPublic()\"\n      >\n      </adapt-rx-checkbox>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    class=\"btn btn-primary btn-sm\"\n    [disabled]=\"!customizationOptionsForm.dirty\"\n    rx-id=\"save-button\"\n    (click)=\"submit()\"\n    type=\"button\"\n  >\n    Save\n  </button>\n\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"cancel()\" rx-id=\"cancel-button\">Cancel</button>\n</div>\n"]}