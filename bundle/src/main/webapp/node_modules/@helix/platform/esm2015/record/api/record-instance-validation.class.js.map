{"version":3,"file":"record-instance-validation.class.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-instance-validation.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { IRecordDefinition } from './record-definition.types';\nimport {\n  FieldInstanceValidator,\n  IRecordInstance,\n  IRxFieldValidationResult,\n  IRxValidationResult\n} from './record-instance.types';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport { IFieldInstance } from './field-instance.interface';\nimport { isEmpty, isFinite, isNil, isString, isNaN } from 'lodash';\nimport BigNumber from 'bignumber.js';\n\ntype NumericOrString = number | BigNumber | string;\n\nexport class RecordInstanceValidation {\n  fieldValidatorsByType = {\n    'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition': null\n  };\n\n  private fieldDefinitions: IFieldDefinition[];\n  private fieldInstances: { [fieldId: number]: IFieldInstance };\n\n  validate(recordInstance: IRecordInstance, recordDefinition: IRecordDefinition): IRxValidationResult {\n    this.fieldDefinitions = recordDefinition.fieldDefinitions;\n    this.fieldInstances = recordInstance.fieldInstances;\n\n    const errors = Object.keys(this.fieldInstances).reduce((result, fieldId) => {\n      const fieldErrors = this.validateFieldInstance(this.fieldInstances[fieldId], this.fieldInstances[fieldId].value);\n\n      if (fieldErrors) {\n        result[fieldId] = fieldErrors;\n      }\n\n      return result;\n    }, {});\n\n    return isEmpty(errors) ? null : errors;\n  }\n\n  validateSingleField(fieldId: number, value: any): IRxFieldValidationResult {\n    return this.validateFieldInstance(this.fieldInstances[fieldId], value);\n  }\n\n  private validateFieldInstance(fieldInstance: IFieldInstance, value: any): IRxFieldValidationResult {\n    let errors = {};\n\n    if (fieldInstance) {\n      const fieldValidators = this.getValidatorsForFieldInstance(fieldInstance);\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n\n      errors = fieldValidators.reduce((result, validator) => {\n        const validatorResponse = validator.call(this, value, fieldDefinition);\n\n        if (validatorResponse) {\n          result = { ...result, ...validatorResponse };\n        }\n\n        return result;\n      }, {});\n    }\n\n    return errors;\n  }\n\n  private getValidatorsForFieldInstance(fieldInstance: IFieldInstance): FieldInstanceValidator[] {\n    const validators = [];\n\n    if (fieldInstance) {\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n      const fieldType = fieldDefinition.resourceType;\n\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        validators.push(this.isRequired);\n      }\n\n      if (this.fieldValidatorsByType[fieldType]) {\n        validators.push(...this.fieldValidatorsByType[fieldType]);\n      }\n    }\n\n    return validators;\n  }\n\n  private getFieldDefinition(fieldId: number): IFieldDefinition {\n    return this.fieldDefinitions.find((definition) => definition.id === fieldId);\n  }\n\n  private isRequired(value: NumericOrString): IRxFieldValidationResult {\n    if (isNil(value) || value === '') {\n      return { required: 'Value is required' };\n    } else {\n      return null;\n    }\n  }\n\n  private isNaNValidator(value: NumericOrString): IRxFieldValidationResult {\n    return isNaN(value) ? { nan: `Value cannot be NaN` } : null;\n  }\n\n  private minValidator(value, fieldDefinition: IFieldDefinition): IRxFieldValidationResult {\n    const minError = { min: `Minimum value is ${fieldDefinition.minValue}` };\n\n    if (BigNumber.isBigNumber(value) || isFinite(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isLessThan(fieldDefinition.minValue) ? minError : null;\n    } else {\n      return null;\n    }\n  }\n\n  private maxValidator(value: NumericOrString, fieldDefinition: IFieldDefinition): IRxFieldValidationResult {\n    const maxError = { max: `Maximum value is ${fieldDefinition.maxValue}` };\n\n    if (BigNumber.isBigNumber(value) || isFinite(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isGreaterThan(fieldDefinition.maxValue) ? maxError : null;\n    } else {\n      return null;\n    }\n  }\n\n  private isFiniteNumberString(value: NumericOrString): value is NumericOrString {\n    return isString(value) && value.trim() !== '' && isFinite(Number(value));\n  }\n}\n"]}