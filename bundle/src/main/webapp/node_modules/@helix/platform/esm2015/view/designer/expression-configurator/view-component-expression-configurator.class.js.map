{"version":3,"file":"view-component-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/expression-configurator/view-component-expression-configurator.class.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAGL,mCAAmC,EACnC,8BAA8B,EAC/B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,2BAA2B,EAAE,MAAM,iDAAiD,CAAC;AAC9F,OAAO,EAAE,4BAA4B,EAAE,MAAM,sCAAsC,CAAC;AAMpF,MAAM,OAAO,qCAAsC,SAAQ,4BAA4B;IAarF,YACY,QAAkB,EAClB,aAAqB,EACrB,cAA2C,EAC3C,aAAsB;QAEhC,KAAK,CAAC,QAAQ,CAAC,CAAC;QALN,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAQ;QACrB,mBAAc,GAAd,cAAc,CAA6B;QAC3C,kBAAa,GAAb,aAAa,CAAS;QAhB1B,wCAAmC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC7D,mCAAmC,CACpC,CAAC;QAEM,gCAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAA8B,2BAA2B,CAAC,CAAC;QAE1G,mCAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CACxD,8BAA8B,CAC/B,CAAC;QAEO,0BAAqB,GAAG,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CAAC;IASxF,CAAC;IAED,sBAAsB,CAAC,YAAoB;;QACzC,MAAM,kBAAkB,GACtB,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,8BAA8B;iBAChC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;iBACvB,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC;QAEnE,OAAO,UAAU,CAAC,MAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,gBAAgB,0CAAE,eAAe,CAAC;YACtE,CAAC,CAAC,kBAAkB,CAAC,gBAAgB;YACrC,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC;IAC/C,CAAC;IAED,uBAAuB,CACrB,yBAAsF,EACtF,aAAa,GAAG,IAAI,CAAC,aAAa;QAElC,OAAO,yBAAyB;YAC9B,CAAC,CAAC,yBAAyB,CAAC,IAAI,CAC5B,SAAS,CAAC,CAAC,cAAc,EAAE,EAAE,CAC3B,IAAI,CAAC,2BAA2B,CAAC,uBAAuB,CAAC;gBACvD,CAAC,aAAa,CAAC,EAAE,cAAc;aAChC,CAAC,CACH,CACF;YACH,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACjC,CAAC;IAED,gCAAgC,CAAC,IAAa;QAC5C,OAAO,IAAI,CAAC,2BAA2B,CAAC,gCAAgC,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;IACvG,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { isFunction } from 'lodash';\nimport { switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport {\n  IExpressionEvaluator,\n  IViewDesignerComponentModel,\n  RxDefaultExpressionEvaluatorService,\n  RxViewComponentRegistryService\n} from '@helix/platform/view/api';\nimport { RxViewDataDictionaryService } from '../data-dictionary/view-data-dictionary.service';\nimport { RxViewExpressionConfigurator } from './view-expression-configurator.class';\nimport {\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch\n} from '../public-interfaces';\n\nexport class RxViewComponentExpressionConfigurator extends RxViewExpressionConfigurator {\n  private rxDefaultExpressionEvaluatorService = this.injector.get<RxDefaultExpressionEvaluatorService>(\n    RxDefaultExpressionEvaluatorService\n  );\n\n  private rxViewDataDictionaryService = this.injector.get<RxViewDataDictionaryService>(RxViewDataDictionaryService);\n\n  private rxViewComponentRegistryService = this.injector.get<RxViewComponentRegistryService>(\n    RxViewComponentRegistryService\n  );\n\n  readonly commonDataDictionary$ = this.rxViewDataDictionaryService.commonDataDictionary$;\n\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: IViewDesignerComponentModel,\n    protected componentType?: string\n  ) {\n    super(injector);\n  }\n\n  getExpressionEvaluator(propertyName: string): IExpressionEvaluator {\n    const propertyDescriptor =\n      this.componentType &&\n      this.rxViewComponentRegistryService\n        .get(this.componentType)\n        .properties.find((property) => property.name === propertyName);\n\n    return isFunction(propertyDescriptor?.evaluatorService?.parseExpression)\n      ? propertyDescriptor.evaluatorService\n      : this.rxDefaultExpressionEvaluatorService;\n  }\n\n  getCommonDataDictionary(\n    componentBranchToReplace$?: Observable<IViewComponentDesignCommonDataDictionaryBranch>,\n    componentGuid = this.componentGuid\n  ): Observable<IViewComponentDesignCommonDataDictionary> {\n    return componentBranchToReplace$\n      ? componentBranchToReplace$.pipe(\n          switchMap((dataDictionary) =>\n            this.rxViewDataDictionaryService.getCommonDataDictionary({\n              [componentGuid]: dataDictionary\n            })\n          )\n        )\n      : this.commonDataDictionary$;\n  }\n\n  getComponentCommonDataDictionary(guid?: string): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    return this.rxViewDataDictionaryService.getComponentCommonDataDictionary(guid || this.componentGuid);\n  }\n}\n"]}