{"version":3,"file":"user-message.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/shell/user-messages/user-message.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  ICommand,\n  IDataPageParams,\n  IDataPageResult,\n  RX_APPLICATION,\n  RxAngularApplicationService,\n  RxCommandFactoryService,\n  RxCurrentUserService,\n  RxGlobalCacheService,\n  RxLogService\n} from '@helix/platform/shared/api';\nimport { RxViewDefinitionCacheService } from '@helix/platform/view/api';\nimport { forEach, remove, set } from 'lodash';\nimport { forkJoin, Observable, of, Subject, Subscription, timer } from 'rxjs';\nimport { catchError, map, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport { RxUserMessageDataPageService } from './user-message-data-page.service';\nimport { RX_USER_MESSAGE } from './user-message.constants';\nimport { IRxMessage, IRxMessages } from './user-message.interfaces';\n\n@Injectable()\nexport class RxUserMessageService implements OnDestroy {\n  constructor(\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxUserMessageDataPageService: RxUserMessageDataPageService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxLogService: RxLogService,\n    private rxAngularApplicationService: RxAngularApplicationService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private ngZone: NgZone\n  ) {}\n\n  private subscription = new Subscription();\n  private cancelMessagePolling$ = new Subject();\n  private userMessagesCommand: ICommand;\n  private messageFetchedSubject = new Subject<void>();\n  private messageCountSubject = new Subject<number>();\n\n  messageFetched$: Observable<void> = this.messageFetchedSubject.asObservable();\n  messageCount$: Observable<number> = this.messageCountSubject.asObservable();\n\n  private activeMessagesFilterExpression = `'${RX_RECORD_DEFINITION.coreFieldIds.status}'!=${RX_USER_MESSAGE.definitions.userMessage.status.dismissed}`;\n  private dismissedMessagesFilterExpression = `'${RX_RECORD_DEFINITION.coreFieldIds.status}'=${RX_USER_MESSAGE.definitions.userMessage.status.dismissed}`;\n\n  userMessageModel = {\n    userMessageDef: RX_USER_MESSAGE.definitions.userMessage,\n    pageSize: 30,\n    messages: {\n      active: {\n        type: RX_USER_MESSAGE.messageTypes.active,\n        count: 0,\n        list: [],\n        queryExpr: this.activeMessagesFilterExpression,\n        loadingInProgress: false\n      },\n      dismissed: {\n        type: RX_USER_MESSAGE.messageTypes.dismissed,\n        count: 0,\n        list: [],\n        queryExpr: this.dismissedMessagesFilterExpression,\n        loadingInProgress: false\n      }\n    }\n  };\n\n  private bodyFieldId = this.userMessageModel.userMessageDef.fields.body;\n\n  private convertLineBreaks(message) {\n    const bodyFieldValue = message[this.bodyFieldId];\n\n    message[this.bodyFieldId] = (bodyFieldValue && bodyFieldValue.replace(/\\n/g, '<br>')) || '';\n  }\n\n  private updateDsmApplicationViewUrls(dataPage: IDataPageResult): Observable<IRxMessages> {\n    if (dataPage.data.length) {\n      const messages: Observable<IRxMessage>[] = (dataPage.data as IRxMessage[]).map((message) => {\n        this.convertLineBreaks(message);\n\n        const body = message[this.bodyFieldId];\n        const hasHtmlAnchors = /\\<\\/a/.test(body);\n\n        if (hasHtmlAnchors) {\n          const container = document.createElement('div');\n\n          container.innerHTML = body;\n\n          const link = container.querySelector('a');\n\n          const isViewLink = /\\/view\\/|\\/iview\\//.test(link.href);\n\n          if (isViewLink) {\n            const bundleIdMatch = window.location.hash.match(/#\\/([a-zA-Z0-9-\\.]*)/);\n            const bundleId = bundleIdMatch && bundleIdMatch[1];\n\n            return this.rxAngularApplicationService.isAngularJsApplication(bundleId).pipe(\n              switchMap((isAngularJsApplication) => {\n                if (!isAngularJsApplication) {\n                  const queryParams = [];\n\n                  let urlWithoutParams = link.href.replace(/(?:[?&]param=)([^&]*)/g, (match, paramValue) => {\n                    queryParams.push(paramValue);\n\n                    return '';\n                  });\n\n                  urlWithoutParams = urlWithoutParams.replace('innovationsuite', 'helix');\n\n                  if (queryParams.length) {\n                    const viewDefinitionName = decodeURI(urlWithoutParams.split('/').pop());\n\n                    return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(\n                      map((viewDefinition) => {\n                        const newQueryParams = [];\n\n                        forEach(viewDefinition.inputParams, (inputParam, index) => {\n                          newQueryParams.push(`${inputParam.name}=${queryParams[index]}`);\n                        });\n\n                        link.href = [urlWithoutParams, newQueryParams.join('&')].join('?');\n\n                        message[this.bodyFieldId] = container.innerHTML;\n\n                        return message;\n                      }),\n                      catchError((err) => {\n                        this.rxLogService.error(err);\n\n                        return of(message);\n                      })\n                    );\n                  } else {\n                    link.href = urlWithoutParams;\n                    message[this.bodyFieldId] = container.innerHTML;\n\n                    return of(message);\n                  }\n                } else {\n                  return of(message);\n                }\n              })\n            );\n          }\n        }\n\n        return of(message);\n      });\n\n      return forkJoin(messages).pipe(\n        map((convertedMessages) => ({\n          messages: convertedMessages,\n          totalSize: dataPage.totalSize\n        }))\n      );\n    } else {\n      return of({\n        messages: [],\n        totalSize: dataPage.totalSize\n      });\n    }\n  }\n\n  cancelMessagePolling() {\n    this.cancelMessagePolling$.next();\n  }\n\n  launchMessagePolling() {\n    this.cancelMessagePolling();\n\n    this.ngZone.runOutsideAngular(() => {\n      this.subscription.add(\n        timer(0, RX_USER_MESSAGE.fetchMessageFrequency)\n          .pipe(\n            takeUntil(this.cancelMessagePolling$),\n            switchMap((_) => this.getMessages(RX_USER_MESSAGE.messageTypes.active, false, true))\n          )\n          .subscribe()\n      );\n    });\n  }\n\n  getMessages(\n    type = RX_USER_MESSAGE.messageTypes.active,\n    getMore = false,\n    suppressTokenRefresh = false\n  ): Observable<IRxMessages> {\n    const params: IDataPageParams = {\n      pageSize: this.userMessageModel.pageSize,\n      startIndex: 0,\n      sortBy: -RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n      queryExpression: '',\n      propertySelection: [\n        RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n        RX_RECORD_DEFINITION.coreFieldIds.id,\n        this.userMessageModel.userMessageDef.fields.body,\n        this.userMessageModel.userMessageDef.fields.subject\n      ].join(',')\n    };\n\n    this.userMessageModel.messages[type].loadingInProgress =\n      getMore || this.userMessageModel.messages[type].list.length === 0;\n\n    set(params, this.userMessageModel.userMessageDef.fields.recipient, this.rxCurrentUserService.get().loginName);\n    params.queryExpression = this.userMessageModel.messages[type].queryExpr;\n    params.startIndex = getMore ? this.userMessageModel.messages[type].list.length : 0;\n\n    const headers = {\n      'default-bundle-scope': RX_APPLICATION.innovationStudioBundleId,\n      ...(suppressTokenRefresh ? { 'Suppress-Token-Refresh': 'true' } : {})\n    };\n\n    return this.rxUserMessageDataPageService\n      .get({\n        params,\n        headers\n      })\n      .pipe(\n        switchMap(this.updateDsmApplicationViewUrls.bind(this)),\n        tap((rxMessages: IRxMessages) => {\n          this.ngZone.run(() => {\n            if (rxMessages.messages.length) {\n              if (getMore) {\n                this.userMessageModel.messages[type].list = this.userMessageModel.messages[type].list.concat(\n                  rxMessages.messages\n                );\n              } else {\n                this.userMessageModel.messages[type].count = rxMessages.totalSize;\n                this.userMessageModel.messages[type].list = rxMessages.messages;\n\n                if (type === RX_USER_MESSAGE.messageTypes.active) {\n                  this.messageCountSubject.next(rxMessages.totalSize);\n                }\n              }\n            } else if (!getMore && type === RX_USER_MESSAGE.messageTypes.active) {\n              this.messageCountSubject.next(this.userMessageModel.messages.active.count);\n            }\n\n            this.messageFetchedSubject.next();\n          });\n        })\n      );\n  }\n\n  handleSuccessfulDismiss(messageDismissed?: IRxMessage): void {\n    const shellNotifications = this.userMessageModel.messages;\n\n    if (messageDismissed) {\n      remove(shellNotifications.active.list, messageDismissed);\n      shellNotifications.dismissed.list.push(messageDismissed);\n      shellNotifications.active.count--;\n      shellNotifications.dismissed.count++;\n    } else {\n      shellNotifications.active.list = [];\n      shellNotifications.active.count = 0;\n    }\n\n    this.messageCountSubject.next(shellNotifications.active.count);\n\n    if (shellNotifications.active.list.length === 0) {\n      // avoid making backend call to get new notification on each dismiss\n      this.launchMessagePolling();\n    }\n  }\n\n  dismissNotification(message?: IRxMessage): void {\n    if (message) {\n      const inputParameter = {};\n\n      inputParameter[message[RX_RECORD_DEFINITION.coreFieldIds.id]] =\n        RX_USER_MESSAGE.definitions.userMessage.status.dismissed;\n\n      this.userMessagesCommand = this.rxCommandFactoryService.forResourceType(\n        RX_USER_MESSAGE.definitions.userMessage.updateStateOfUserMessagesCommand\n      );\n\n      this.subscription.add(\n        this.userMessagesCommand\n          .execute({\n            userMessageStateById: inputParameter\n          })\n          .subscribe(() => this.handleSuccessfulDismiss(message))\n      );\n    } else {\n      this.userMessagesCommand = this.rxCommandFactoryService.forResourceType(\n        RX_USER_MESSAGE.definitions.userMessage.updateStateOfAllUserMessagesCommand\n      );\n\n      this.subscription.add(this.userMessagesCommand.execute().subscribe(() => this.handleSuccessfulDismiss()));\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.cancelMessagePolling();\n  }\n}\n"]}