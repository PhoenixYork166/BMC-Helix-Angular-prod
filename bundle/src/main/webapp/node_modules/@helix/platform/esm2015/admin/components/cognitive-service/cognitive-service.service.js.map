{"version":3,"file":"cognitive-service.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/cognitive-service/cognitive-service.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,kCAAkC,EAAE,MAAM,6BAA6B,CAAC;AACjF,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAmB,cAAc,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AAC/F,OAAO,EAAE,oDAAoD,EAAE,MAAM,4DAA4D,CAAC;AAClI,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;;;;;AAKpE,MAAM,OAAO,yBAAyB;IACpC,YACU,UAAsB,EACtB,oDAA0G,EAC1G,kCAAsE;QAFtE,eAAU,GAAV,UAAU,CAAY;QACtB,yDAAoD,GAApD,oDAAoD,CAAsD;QAC1G,uCAAkC,GAAlC,kCAAkC,CAAoC;IAC7E,CAAC;IAEJ,kBAAkB,CAAC,QAAgB;QACjC,OAAO,QAAQ,KAAK,oBAAoB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;IACxE,CAAC;IAED,gCAAgC;QAC9B,OAAO,IAAI,CAAC,kCAAkC;aAC3C,GAAG,CAAC;YACH,OAAO,EAAE;gBACP,sBAAsB,EAAE,cAAc,CAAC,eAAe;aACvD;YACD,MAAM,EAAE;gBACN,iBAAiB,EAAE,CAAC,MAAM,CAAC;aAC5B;SACF,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAC,QAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,iBAAiB,CAAC,WAAqB;QACrC,OAAO,IAAI,CAAC,oDAAoD,CAAC,GAAG,CAAC;YACnE,MAAM,EAAE,EAAE,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;SACxC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,cAAsB;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACxE,CAAC;;sHAhCU,yBAAyB;0HAAzB,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { RxProcessDefinitionDataPageService } from '@helix/platform/process/api';\nimport { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { IDataPageResult, RX_APPLICATION, RX_RESOURCE_URLS } from '@helix/platform/shared/api';\nimport { RxCognitiveServiceSystemConfigurationDataPageService } from './cognitive-service-system-configuration-data-page.service';\nimport { RX_COGNITIVE_SERVICE } from './cognitive-service.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCognitiveServiceService {\n  constructor(\n    private httpClient: HttpClient,\n    private rxCognitiveServiceSystemConfigurationDataPageService: RxCognitiveServiceSystemConfigurationDataPageService,\n    private rxProcessDefinitionDataPageService: RxProcessDefinitionDataPageService\n  ) {}\n\n  filterMaskPassword(password: string): string {\n    return password === RX_COGNITIVE_SERVICE.passwordMask ? '' : password;\n  }\n\n  getChatbotProcessDefinitionNames(): Observable<string[]> {\n    return this.rxProcessDefinitionDataPageService\n      .get({\n        headers: {\n          'default-bundle-scope': RX_APPLICATION.chatbotBundleId\n        },\n        params: {\n          propertySelection: ['name']\n        }\n      })\n      .pipe(map((response: IDataPageResult) => _map(response.data, 'name')));\n  }\n\n  getSystemSettings(settingList: string[]): Observable<IDataPageResult> {\n    return this.rxCognitiveServiceSystemConfigurationDataPageService.get({\n      params: { name: settingList.join(',') }\n    });\n  }\n\n  testConnection(requestPayload: object): Observable<any> {\n    return this.httpClient.post(RX_RESOURCE_URLS.command, requestPayload);\n  }\n}\n"]}