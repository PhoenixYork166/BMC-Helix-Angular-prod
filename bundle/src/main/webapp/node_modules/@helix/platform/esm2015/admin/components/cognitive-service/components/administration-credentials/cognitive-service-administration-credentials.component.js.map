{"version":3,"file":"cognitive-service-administration-credentials.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-service/components/administration-credentials/cognitive-service-administration-credentials.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-service/components/administration-credentials/cognitive-service-administration-credentials.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAU,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,WAAW,EAAa,MAAM,gBAAgB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;AACxE,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAuC,MAAM,4BAA4B,CAAC;AACnH,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;AAC5E,OAAO,EAAE,qBAAqB,EAAE,4BAA4B,EAAE,MAAM,4BAA4B,CAAC;AACjG,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;;;;;;;;AAOvD,MAAM,OAAO,kDAAkD;IAW7D,YACU,WAAwB,EACxB,yBAAoD,EACpD,oBAA0C,EAC1C,qBAA4C,EAC5C,4BAA0D,EAC1D,gBAAkC;QALlC,gBAAW,GAAX,WAAW,CAAa;QACxB,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,iCAA4B,GAA5B,4BAA4B,CAA8B;QAC1D,qBAAgB,GAAhB,gBAAgB,CAAkB;IACzC,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,+CAA+C,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC5E,4BAA4B,EAAE,EAAE;SACjC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,+CAA+C,CAAC,KAAK,CAAC;IACpE,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,4BAA4B;aAC9B,gBAAgB,CAAC,oBAAoB,CAAC,kCAAkC,CAAC,iBAAiB,CAAC;aAC3F,SAAS,CAAC,CAAC,YAAY,EAAE,EAAE;YAC1B,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAe,CAAC,CAAC;YAC3E,IAAI,CAAC,mCAAmC,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,6BAA6B,CAAC,QAAgB;QACpD,OAAO,IAAI,CAAC,0BAA0B,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACnG,CAAC;IAEO,mCAAmC;QACzC,IAAI,WAAW,GAAG,EAAE,CAAC;QAErB,IAAI,IAAI,CAAC,0BAA0B,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,EAAE;YAC7E,WAAW,GAAG,IAAI,CAAC,6BAA6B,CAC9C,oBAAoB,CAAC,kCAAkC,CAAC,4BAA4B,CACrF;gBACC,CAAC,CAAC,oBAAoB,CAAC,YAAY;gBACnC,CAAC,CAAC,EAAE,CAAC;SACR;QAED,IAAI,CAAC,+CAA+C,CAAC,QAAQ,CAAC,4BAA4B,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACnH,CAAC;IAED,IAAI;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,+CAA+C,CAAC,KAAK,CAAC,4BAA4B,CAAC;QAC1G,MAAM,cAAc,GAAG,SAAS,CAAC,oBAAoB,CAAC,kCAAkC,CAAC,OAAO,CAAC,CAAC;QAElG,cAAc,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CACtD,oBAAoB,CAAC,kCAAkC,CAAC,4BAA4B,CACrF,GAAG,IAAI,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAEjE,IAAI,CAAC,4BAA4B;aAC9B,gBAAgB,CACf,oBAAoB,CAAC,kCAAkC,CAAC,iBAAiB,EACzE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAC/B;aACA,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC3B,oBAAoB,CAAC,oBAAoB,CAAC,uCAAuC,CAClF,CACF,CAAC;YAEF,IAAI,CAAC,+CAA+C,CAAC,cAAc,EAAE,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oBAAoB;QAClB,OAAO,CACL,IAAI,CAAC,+CAA+C,CAAC,QAAQ;YAC7D,IAAI,CAAC,+CAA+C,CAAC,OAAO,CAC7D,CAAC;IACJ,CAAC;IAED,mBAAmB;QACjB,OAAO,CACL,IAAI,CAAC,eAAe;YACpB,IAAI,CAAC,qBAAqB,CAAC,cAAc,KAAK,UAAU,CAAC,eAAe,CAAC,IAAI;YAC7E,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CACrC,CAAC;IACJ,CAAC;;+IAhGU,kDAAkD;mIAAlD,kDAAkD,uLCd/D,yiCAmCA;2FDrBa,kDAAkD;kBAL9D,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;oBAC3D,WAAW,EAAE,+DAA+D;oBAC5E,SAAS,EAAE,CAAC,+DAA+D,CAAC;iBAC7E;2RAGC,eAAe;sBADd,KAAK;gBAIN,qBAAqB;sBADpB,KAAK","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { cloneDeep } from 'lodash';\nimport { RX_COGNITIVE_SERVICE } from '../../cognitive-service.constant';\nimport { RxCurrentUserService, RX_OVERLAY, IUserOverlayGroupDescriptorChildren } from '@helix/platform/shared/api';\nimport { RxCognitiveServiceService } from '../../cognitive-service.service';\nimport { RxNotificationService, RxSystemConfigurationService } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cognitive-service-administration-credentials',\n  templateUrl: './cognitive-service-administration-credentials.component.html',\n  styleUrls: ['./cognitive-service-administration-credentials.component.scss']\n})\nexport class CognitiveServiceAdministrationCredentialsComponent implements OnInit {\n  @Input()\n  isAdministrator: boolean;\n\n  @Input()\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren;\n\n  cognitiveAdministrationCredentialsProvidersForm: FormGroup;\n  watsonAdminCredentialsData: string;\n  cognitiveAdminPlatformApiKey: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxNotificationService: RxNotificationService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    private translateService: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    this.cognitiveAdministrationCredentialsProvidersForm = this.formBuilder.group({\n      cognitiveAdminPlatformApiKey: ''\n    });\n\n    this.loadSystemSettings();\n  }\n\n  isFormDirty(): boolean {\n    return this.cognitiveAdministrationCredentialsProvidersForm.dirty;\n  }\n\n  private loadSystemSettings(): void {\n    this.rxSystemConfigurationService\n      .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey)\n      .subscribe((settingsData) => {\n        this.watsonAdminCredentialsData = JSON.parse(settingsData.value as string);\n        this.loadCognitiveAdminCredentialsValues();\n      });\n  }\n\n  private getWatsonAdminCredentialsData(property: string): string {\n    return this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider][property] || '';\n  }\n\n  private loadCognitiveAdminCredentialsValues(): void {\n    let apiKeyValue = '';\n\n    if (this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {\n      apiKeyValue = this.getWatsonAdminCredentialsData(\n        RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey\n      )\n        ? RX_COGNITIVE_SERVICE.passwordMask\n        : '';\n    }\n\n    this.cognitiveAdministrationCredentialsProvidersForm.controls.cognitiveAdminPlatformApiKey.setValue(apiKeyValue);\n  }\n\n  save(): void {\n    const newApiKey = this.cognitiveAdministrationCredentialsProvidersForm.value.cognitiveAdminPlatformApiKey;\n    const newCredentials = cloneDeep(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.payload);\n\n    newCredentials[RX_COGNITIVE_SERVICE.credentialsProvider][\n      RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey\n    ] = this.rxCognitiveServiceService.filterMaskPassword(newApiKey);\n\n    this.rxSystemConfigurationService\n      .setConfiguration(\n        RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey,\n        JSON.stringify(newCredentials)\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant(\n            RX_COGNITIVE_SERVICE.notificationMessages.cognitiveAdministrationCredentialsSaved\n          )\n        );\n\n        this.cognitiveAdministrationCredentialsProvidersForm.markAsPristine();\n      });\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return (\n      this.cognitiveAdministrationCredentialsProvidersForm.pristine ||\n      this.cognitiveAdministrationCredentialsProvidersForm.invalid\n    );\n  }\n\n  isSaveButtonVisible(): boolean {\n    return (\n      this.isAdministrator &&\n      this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n      !this.currentOverlayContext.isShared\n    );\n  }\n}\n","<form [formGroup]=\"cognitiveAdministrationCredentialsProvidersForm\">\n  <adapt-accordion>\n    <adapt-accordion-tab\n      title=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-administration-credentials.title' | translate\n      }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"form-group\">\n        <adapt-rx-textfield\n          rx-id=\"platform-api-key\"\n          label=\"Platform API key\"\n          formControlName=\"cognitiveAdminPlatformApiKey\"\n          maxlength=\"254\"\n          required=\"true\"\n          [isPassword]=\"true\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </adapt-accordion-tab>\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n"]}