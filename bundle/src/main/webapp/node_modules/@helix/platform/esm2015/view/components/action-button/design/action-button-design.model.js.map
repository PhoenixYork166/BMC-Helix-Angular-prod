{"version":3,"file":"action-button-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/action-button/design/action-button-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFieldDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { IFormControlBuilderConfig, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IconPickerFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\nimport {\n  ActionListWidgetComponent,\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { TranslateService } from '@ngx-translate/core';\nimport { flatten, map as _map } from 'lodash';\nimport { combineLatest, EMPTY, of } from 'rxjs';\nimport { catchError, map, pairwise, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport {\n  ActionButtonIconAlignment,\n  ActionButtonSize,\n  ActionButtonStyle,\n  IActionButtonProperties\n} from '../action-button.types';\nimport { IActionButtonDesignProperties } from './action-button-design.types';\n\nconst ACTIONS_KEY = 'actions';\n\nexport class ActionButtonDesignModel\n  extends ViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n  implements IViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private viewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private translateService = this.injector.get(TranslateService);\n\n  label$ = this.sandbox.getComponentPropertyValue('labelKey').pipe(\n    switchMap((labelKey) =>\n      labelKey ? of(this.translateService.instant(labelKey)) : this.sandbox.getComponentPropertyValue('label')\n    ),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  style$ = this.sandbox.getComponentPropertyValue('style');\n  size$ = this.sandbox.getComponentPropertyValue('size');\n  icon$ = this.sandbox.getComponentPropertyValue('icon');\n  iconAlignment$ = this.sandbox.getComponentPropertyValue('iconAlignment');\n\n  private fieldDefinitions$ = this.sandbox.getComponentPropertyValue('recordDefinitionName').pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName\n        ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n            map((recordDefinition) => recordDefinition.fieldDefinitions),\n            catchError(() => of([]))\n          )\n        : of([])\n    )\n  );\n\n  static getInitialProperties(props: IActionButtonProperties): IActionButtonDesignProperties {\n    return {\n      iconAlignment: ActionButtonIconAlignment.Left,\n      label: 'New button',\n      size: ActionButtonSize.Default,\n      icon: null,\n      style: ActionButtonStyle.Primary,\n      recordDefinitionName: null,\n      fieldId: null,\n      recordInstance: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...props\n    };\n  }\n\n  rxInit(): void {\n    // Set initial inspector config.\n    combineLatest([this.sandbox.componentProperties$, this.fieldDefinitions$])\n      .pipe(\n        map(([componentProperties, fieldDefinitions]) =>\n          this.getInspectorConfig(componentProperties, fieldDefinitions)\n        ),\n        take(1),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((inspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    const actions$ = this.sandbox.getChildComponents<IViewActionDesignProperties>();\n\n    combineLatest([\n      actions$.pipe(switchMap((actions) => this.viewActionValidatorService.validate(actions, ACTIONS_KEY))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues) => {\n        this.setValidationIssues(validationIssues);\n      });\n\n    // update field names when Record Definition Name changed\n    this.fieldDefinitions$\n      .pipe(\n        withLatestFrom(this.componentProperties$),\n        map(([fieldDefinitions, properties]: [IFieldDefinition[], IActionButtonDesignProperties]) =>\n          this.getInspectorConfig(properties, fieldDefinitions)\n        )\n      )\n      .subscribe((inspector) => this.sandbox.updateInspectorConfig(inspector));\n\n    // clear fieldId and recordInstance if recordDefinitionName changed\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(pairwise())\n      .subscribe(([oldName, newName]) => {\n        if (oldName && oldName !== newName) {\n          this.sandbox.updateComponentProperties({\n            fieldId: null,\n            recordInstance: null\n          });\n        }\n      });\n\n    this.label$.subscribe((label) => {\n      this.sandbox.setBreadcrumbs(label);\n    });\n\n    this.sandbox\n      .getComponentPropertyValue('action')\n      .pipe(\n        switchMap((action) => (action ? EMPTY : this.label$)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        // Don't build settable properties if 'action' property is not empty.\n        // In this case button threads as a child of association component only.\n        this.sandbox.setSettablePropertiesDataDictionary(label, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  setValidationIssues(issues: IViewComponentDesignValidationIssue[]): void {\n    this.sandbox.setValidationIssues(issues);\n  }\n\n  private getInspectorConfig(\n    props: IActionButtonDesignProperties,\n    fieldDefinitions: IFieldDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const securitySectionControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition name',\n          tooltip: new Tooltip(\n            'The view component will be hidden if the user has no access to the specified record definition.'\n          ),\n          definitionType: RxDefinitionPickerType.StandardDataRecord\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    if (props.recordDefinitionName) {\n      securitySectionControls.push(\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            tooltip: new Tooltip(\n              'The view component will be hidden if the user has no access to the specified field, or disabled if the user only has View permission ' +\n                'for the specified field. <br><br> Record definition name, Field name, and Record instance must all be ' +\n                'specified in order to control the disabled/hidden state of the view component using field permissions.'\n            ),\n            options: fieldDefinitions.map((definition) => ({ name: definition.name, id: String(definition.id) })),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'recordInstance',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Record instance',\n            tooltip: new Tooltip('Expression pointing to a record instance that provides the field permission details.')\n          } as IExpressionInspectorControlOptions\n        }\n      );\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'label',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Label'\n              }\n            },\n            {\n              name: 'style',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Style',\n                required: true,\n                options: _map(ActionButtonStyle, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'size',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Size',\n                options: _map(ActionButtonSize, (value, name) => ({\n                  id: value,\n                  name\n                })),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'icon',\n              component: IconPickerFormControlComponent,\n              options: {\n                label: 'Icon'\n              }\n            },\n            {\n              name: 'iconAlignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Icon alignment',\n                options: _map(ActionButtonIconAlignment, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            getDisabledFieldInspectorConfig(),\n            ...getStandardPropsInspectorConfigs()\n          ]\n        },\n        {\n          label: 'Actions',\n          controls: [\n            {\n              widgetName: ACTIONS_KEY,\n              component: ActionListWidgetComponent\n            }\n          ]\n        },\n        {\n          label: 'Security',\n          controls: securitySectionControls\n        }\n      ]\n    };\n  }\n}\n"]}