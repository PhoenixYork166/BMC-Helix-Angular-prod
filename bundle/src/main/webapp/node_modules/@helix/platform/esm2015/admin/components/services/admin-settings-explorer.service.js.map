{"version":3,"file":"admin-settings-explorer.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/services/admin-settings-explorer.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAA4B,sBAAsB,EAAE,MAAM,4BAA4B,CAAC;AAC9F,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAElC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;AAGrC,MAAM,OAAO,8BAA8B;IACzC,YAAoB,sBAA8C;QAA9C,2BAAsB,GAAtB,sBAAsB,CAAwB;IAAG,CAAC;IAEtE,uBAAuB;QACrB,OAAO,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7G,CAAC;IAEO,cAAc,CACpB,iCAA6D,EAC7D,MAAqD;QAErD,OAAO,CAAC,iCAAiC,IAAI,EAAE,CAAC;aAC7C,MAAM,CAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,kBAAkB,CAAC,QAAQ,KAAK,2BAA2B,CAAC;aAC3F,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC9D,GAAG,CAAC,CAAC,kBAAkB,EAAE,EAAE;YAC1B,MAAM,YAAY,GAAiD;gBACjE,KAAK,EAAE,kBAAkB,CAAC,KAAK;gBAC/B,IAAI,EAAE,kBAAkB;gBACxB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC;gBAC5C,GAAG,EAAE,QAAQ,EAAE;aAChB,CAAC;YAEF,YAAY,CAAC,QAAQ;gBACnB,kBAAkB,CAAC,KAAK,IAAI,kBAAkB,CAAC,KAAK,CAAC,MAAM;oBACzD,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,YAAY,CAAC;oBAC7D,CAAC,CAAC,EAAE,CAAC;YAET,IAAI,MAAM,EAAE;gBACV,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;aAC9B;YAED,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;;2HAlCU,8BAA8B;+HAA9B,8BAA8B;2FAA9B,8BAA8B;kBAD1C,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AdaptTreeNodeTyped } from '@bmc-ux/adapt-angular';\nimport { IAdminNavigationMenuItem, RxAdminSettingsService } from '@helix/platform/shared/api';\nimport { uniqueId } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class RxAdminSettingsExplorerService {\n  constructor(private rxAdminSettingsService: RxAdminSettingsService) {}\n\n  getNavigationTreeConfig(): Observable<AdaptTreeNodeTyped<IAdminNavigationMenuItem>[]> {\n    return this.rxAdminSettingsService.getAdminNavigationMenuItems().pipe(map(this.buildTreeNodes.bind(this)));\n  }\n\n  private buildTreeNodes(\n    administrationNavigationMenuItems: IAdminNavigationMenuItem[],\n    parent?: AdaptTreeNodeTyped<IAdminNavigationMenuItem>\n  ): AdaptTreeNodeTyped<IAdminNavigationMenuItem>[] {\n    return (administrationNavigationMenuItems || [])\n      .filter((navigationMenuItem) => navigationMenuItem.compName !== 'com.bmc.arsys.rx.settings')\n      .sort((item1, item2) => item1.label.localeCompare(item2.label))\n      .map((navigationMenuItem) => {\n        const treeMenuItem: AdaptTreeNodeTyped<IAdminNavigationMenuItem> = {\n          label: navigationMenuItem.label,\n          data: navigationMenuItem,\n          expanded: false,\n          selectable: Boolean(navigationMenuItem.guid),\n          key: uniqueId()\n        };\n\n        treeMenuItem.children =\n          navigationMenuItem.items && navigationMenuItem.items.length\n            ? this.buildTreeNodes(navigationMenuItem.items, treeMenuItem)\n            : [];\n\n        if (parent) {\n          treeMenuItem.parent = parent;\n        }\n\n        return treeMenuItem;\n      });\n  }\n}\n"]}