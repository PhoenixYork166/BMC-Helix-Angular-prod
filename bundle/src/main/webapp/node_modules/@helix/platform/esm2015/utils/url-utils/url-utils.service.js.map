{"version":3,"file":"url-utils.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/url-utils/url-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;;;;AAKzD,MAAM,OAAO,iBAAiB;IAC5B,YAAoB,MAAc,EAAU,YAA0B;QAAlD,WAAM,GAAN,MAAM,CAAQ;QAAU,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAE1E,QAAQ,CAAC,OAAe,EAAE,GAAG,WAAqB;QAChD,IAAI,GAAG,GAAG,OAAO,CAAC;QAClB,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,WAAW,CAAC,CAAC;QAEvD,IAAI,WAAW,EAAE;YACf,GAAG,IAAI,GAAG,GAAG,WAAW,CAAC;SAC1B;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,UAAU,CAAC,GAAW,EAAE,kBAAkB,GAAG,IAAI;QAC/C,MAAM,MAAM,GAAG,kBAAkB;YAC/B,CAAC,CAAC,sCAAsC;YACxC,CAAC,CAAC,yCAAyC,CAAC;QAE9C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,aAAa,CAAC,GAAG,WAAqB;QACpC,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CACjC,GAAG,CAAC,MAAa,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CACxG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACd,CAAC;IAED,kBAAkB,CAAC,GAAY;QAC7B,OAAO,GAAG,CACR,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,aAAH,GAAG,cAAH,GAAG,GAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAC9D,wCAAwC,CACzC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,GAAW;QACnB,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE1E,OAAO,GAAG,KAAK,YAAY,CAAC;IAC9B,CAAC;;8GAvCU,iBAAiB;kHAAjB,iBAAiB,cAFhB,MAAM;2FAEP,iBAAiB;kBAH7B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { get, map } from 'lodash';\nimport { Router } from '@angular/router';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUrlUtilsService {\n  constructor(private router: Router, private domSanitizer: DomSanitizer) {}\n\n  buildUrl(baseUrl: string, ...queryParams: Object[]): string {\n    let url = baseUrl;\n    const queryString = this.toQueryString(...queryParams);\n\n    if (queryString) {\n      url += '?' + queryString;\n    }\n\n    return url;\n  }\n\n  isValidUrl(url: string, isProtocolRequired = true): boolean {\n    const regExp = isProtocolRequired\n      ? /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/\n      : /^((https?|ftp):\\/\\/)?[^\\s/$.?#].[^\\s]*$/;\n\n    return regExp.test(url);\n  }\n\n  toQueryString(...queryParams: Object[]): string {\n    return map(queryParams, (params) =>\n      map(params as any, (value, key) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&')\n    ).join('&');\n  }\n\n  getBundleIdFromUrl(url?: string): string {\n    return get(\n      this.router.parseUrl(url ?? window.location.hash.substring(1)),\n      'root.children.primary.segments[0].path'\n    );\n  }\n\n  isUrlSafe(url: string): boolean {\n    const sanitizedUrl = this.domSanitizer.sanitize(SecurityContext.URL, url);\n\n    return url === sanitizedUrl;\n  }\n}\n"]}