{"version":3,"file":"share-view-preset.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { RxShareViewPresetDataService } from './share-view-preset-data.service';\nimport { RxJsonParserService, RxStringService } from '@helix/platform/utils';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { RxCurrentUserService } from '@helix/platform/shared/api';\nimport {\n  ISaveSharedViewPresetPayload,\n  ISharedViewPresetItem,\n  IShareViewPresetPayload,\n  IShareViewPresetUserPayload,\n  ITagUserAutocompleteValue\n} from './share-view-preset.types';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetService {\n  constructor(\n    private rxShareViewPresetDataService: RxShareViewPresetDataService,\n    private rxStringService: RxStringService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  getAutocompleteSearch(text$: Observable<string>): Observable<ITagUserAutocompleteValue[]> {\n    return text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      switchMap((searchTerm) => {\n        const trimmedValue = searchTerm.trim();\n\n        if (trimmedValue.length > 0) {\n          return this.rxShareViewPresetDataService.searchUsers(trimmedValue);\n        } else {\n          return of([]);\n        }\n      }),\n      map((users) =>\n        users.map((user) => ({\n          text: user[RX_VIEW_PRESET.user.fields.fullName],\n          data: {\n            loginId: user[RX_VIEW_PRESET.user.fields.loginId],\n            fullName: user[RX_VIEW_PRESET.user.fields.fullName],\n            emailAddress: user[RX_VIEW_PRESET.user.fields.email]\n          }\n        }))\n      )\n    );\n  }\n\n  getSharedViewPresetUsers(guid: string): Observable<IShareViewPresetUserPayload[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPreset(guid)\n      .pipe(\n        map((sharedViewPreset) =>\n          this.rxJsonParserService.tryParseJson(\n            sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers].value,\n            []\n          )\n        )\n      );\n  }\n\n  getSharedViewPresetData(\n    guid: string\n  ): Observable<{ viewPresetName: string; sharedViewPresets: IViewPresetsByViewComponentGuid }> {\n    return this.rxShareViewPresetDataService.getSharedViewPreset(guid).pipe(\n      map((sharedViewPreset) => ({\n        viewPresetName: sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName].value,\n        sharedViewPresets: this.rxJsonParserService.tryParseJson(\n          sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetInfo].value,\n          null\n        )\n      }))\n    );\n  }\n\n  private createUpdateSharedViewPreset(payload: IShareViewPresetPayload, presetGuid?: string): Observable<string> {\n    if (presetGuid) {\n      return this.rxShareViewPresetDataService.updateSharedViewPreset(presetGuid, payload).pipe(map(() => presetGuid));\n    } else {\n      return this.rxShareViewPresetDataService.createSharedViewPreset(payload);\n    }\n  }\n\n  saveSharedViewPreset(data: ISaveSharedViewPresetPayload, presetGuid?: string): Observable<string> {\n    const sharedUsers$ = data.sharedUsers ? of(data.sharedUsers) : this.getSharedViewPresetUsers(presetGuid);\n\n    return combineLatest([data.runtimeViewModelApi.shareViewPreset(data.presetSelectorGuid), sharedUsers$]).pipe(\n      map(([sharedViewPresets, sharedUsers]: [IViewPresetsByViewComponentGuid, IShareViewPresetUserPayload[]]) => ({\n        viewPresetName: data.currentViewPreset.label,\n        viewName: '',\n        viewPresetGuid: data.presetSelectorGuid,\n        submitter: this.rxCurrentUserService.get().fullName,\n        sharedUsers,\n        presetInformation: JSON.stringify(sharedViewPresets)\n      })),\n      switchMap((payload: IShareViewPresetPayload) => this.createUpdateSharedViewPreset(payload, presetGuid))\n    );\n  }\n\n  deleteSharedViewPreset(sharedViewPresetInstanceGuid: string): Observable<any> {\n    return this.rxShareViewPresetDataService.deleteSharedViewPreset(sharedViewPresetInstanceGuid);\n  }\n\n  getSharedViewPresetsForCurrentUser(presetSelectorGuid: string): Observable<ISharedViewPresetItem[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPresets(presetSelectorGuid, this.rxCurrentUserService.getName())\n      .pipe(\n        map((presets) =>\n          presets.map((preset) => ({\n            label: preset[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName],\n            guid: preset[RX_VIEW_PRESET.sharedViewPreset.fields.id],\n            ownerFullName: preset[RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName]\n          }))\n        )\n      );\n  }\n}\n"]}