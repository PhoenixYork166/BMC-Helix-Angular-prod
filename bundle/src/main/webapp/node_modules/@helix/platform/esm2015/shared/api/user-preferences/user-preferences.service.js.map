{"version":3,"file":"user-preferences.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/user-preferences/user-preferences.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { RX_USER_PREFERENCES } from './user-preferences.constants';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IUserPreferencesSetting } from './interfaces/user-preferences-setting.interface';\nimport { IUserPreferencesData } from './interfaces/user-preferences-data.interface';\nimport { map as _map, get, isEmpty } from 'lodash';\nimport { IPlainObject } from '../common-types/plain-object.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUserPreferencesService {\n  settingsByComponentId: Map<string, IUserPreferencesSetting[]> = new Map();\n  apiUrl = '/api/rx/application/admin-settings/user-preference/UI Preferences';\n\n  constructor(private httpClient: HttpClient, private rxJsonParserService: RxJsonParserService) {}\n\n  getUiComponentPreferences<T = IPlainObject>(guid: string): Observable<T> {\n    return this.httpClient\n      .get(this.apiUrl, {\n        headers: new HttpHeaders({\n          'default-bundle-scope': ''\n        }),\n        params: {\n          componentId: guid\n        }\n      })\n      .pipe(\n        map(({ values }: any) => {\n          this.settingsByComponentId.set(guid, values);\n\n          const preferenceSetting: IUserPreferencesSetting = values.find(\n            (value) => value.settingName === RX_USER_PREFERENCES.fieldPreferences\n          );\n\n          const settingValue = preferenceSetting ? preferenceSetting.settingValue : null;\n\n          return this.rxJsonParserService.tryParseJson(settingValue);\n        })\n      );\n  }\n\n  prepareUiPreferences(data: IUserPreferencesData, guid: string): IUserPreferencesSetting[] {\n    if (!isEmpty(this.settingsByComponentId.get(guid))) {\n      return this.createUpdatedSettings(data, guid);\n    }\n\n    const newSettings = _map(data, (value, name) => ({\n      componentName: RX_USER_PREFERENCES.componentName,\n      settingName: name,\n      settingValue: value,\n      assigneeGroupPermission: ''\n    }));\n\n    return newSettings;\n  }\n\n  setUiComponentPreferences(data: IUserPreferencesData, guid: string): Observable<any> {\n    const settings = this.prepareUiPreferences(data, guid);\n    const currentSettings = this.settingsByComponentId.get(guid);\n    const id = get(currentSettings, '[0].ownerKeyValue1');\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'default-bundle-scope': ''\n      })\n    };\n\n    return id\n      ? this.httpClient.put(`${this.apiUrl}/${id}`, settings, httpOptions)\n      : this.httpClient\n          .post(this.apiUrl, settings, httpOptions)\n          .pipe(tap(() => this.getUiComponentPreferences(data.componentId).subscribe()));\n  }\n\n  private createUpdatedSettings(data: IUserPreferencesData, guid: string): IUserPreferencesSetting[] {\n    const newSettings = this.settingsByComponentId.get(guid);\n    const preferenceSetting = newSettings.find(\n      (element) => element.settingName === RX_USER_PREFERENCES.fieldPreferences\n    );\n    const index = newSettings.indexOf(preferenceSetting);\n\n    preferenceSetting.settingValue = data.preferences;\n    newSettings[index] = preferenceSetting;\n\n    return newSettings;\n  }\n}\n"]}