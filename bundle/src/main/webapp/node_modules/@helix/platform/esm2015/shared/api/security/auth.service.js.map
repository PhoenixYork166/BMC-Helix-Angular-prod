{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/security/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location } from '@angular/common';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { DefaultUrlSerializer, NavigationCancel, NavigationEnd, Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { RxGlobalCacheService } from '../caching/global-cache.service';\nimport { RxLocalizationService } from '../localization/localization.service';\nimport { RxLogService } from '../logging/log.service';\nimport { RX_SESSION } from './session.constant';\nimport { RxSessionService } from './session.service';\nimport { RxUrlUtilsService } from '@helix/platform/utils';\nimport { RxRssoDebugService } from '../dev/rsso-debug.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAuthService {\n  // URL to redirect after login\n  targetUrl = '';\n  defaultUrlSerializer: DefaultUrlSerializer;\n\n  constructor(\n    private location: Location,\n    private httpClient: HttpClient,\n    private router: Router,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxLocalizationService: RxLocalizationService,\n    private rxSessionService: RxSessionService,\n    private rxLogService: RxLogService,\n    private rxUrlUtilsService: RxUrlUtilsService,\n    private rxRssoDebugService: RxRssoDebugService\n  ) {\n    this.defaultUrlSerializer = new DefaultUrlSerializer();\n\n    this.router.events.subscribe((event) => {\n      if (event instanceof NavigationCancel || event instanceof NavigationEnd) {\n        const bundleId = this.rxUrlUtilsService.getBundleIdFromUrl(event.url);\n        const bundleLoginRoute = `/${bundleId}/login`;\n\n        if (event.url !== bundleLoginRoute) {\n          this.targetUrl = event.url;\n        } else if (event.url === bundleLoginRoute && !this.targetUrl) {\n          this.targetUrl = `/${bundleId}`;\n        }\n      }\n    });\n  }\n\n  login(userName: string, password: string): Observable<any> {\n    return this.httpClient\n      .post(\n        '/api/rx/authentication/loginrequest',\n        {\n          userName,\n          password,\n          locale: this.rxLocalizationService.currentLocale\n        },\n        { responseType: 'text' }\n      )\n      .pipe(\n        tap((res) => {\n          // This is to avoid having additional url encoding when using router.navigate:\n          // for example a space %20 would be encoded to %2520\n          // https://stackoverflow.com/questions/46440887/url-encoding-breaking-angular-2-navigation\n          this.router.navigateByUrl(this.targetUrl);\n        })\n      );\n  }\n\n  redirectToLoginPage(): void {\n    this.rxLogService.debug('Redirecting to login page.');\n\n    if (this.rxSessionService.getSsoProviderType() === RX_SESSION.ssoProviderTypes.rsso) {\n      this.redirectToRssoLogoutPage();\n    } else {\n      if (this.rxRssoDebugService.isRssoDebugEnabled()) {\n        this.redirectToRssoDebugLoginPage();\n      } else {\n        this.redirectToApplicationLoginPage();\n      }\n    }\n  }\n\n  logout(): Observable<any> {\n    const onRequestEnd = () => {\n      this.rxLogService.debug('Destroying session after logout.');\n      localStorage.removeItem('lastUserInteraction');\n      localStorage.removeItem('idleTimeout');\n      localStorage.removeItem('rx-overlay-group-id');\n      this.redirectToLoginPage();\n    };\n\n    this.rxLogService.debug('Before logout.');\n\n    return this.httpClient\n      .post(\n        '/api/rx/authentication/logoutrequest',\n        {},\n        {\n          headers: new HttpHeaders({\n            'default-bundle-scope': this.rxGlobalCacheService.applicationId\n          })\n        }\n      )\n      .pipe(\n        tap(() => {\n          this.rxLogService.debug('Logout succeeded.');\n\n          onRequestEnd();\n        }),\n        catchError((err) => {\n          this.rxLogService.debug('Logout failed.');\n\n          onRequestEnd();\n\n          return throwError(err);\n        })\n      );\n  }\n\n  private redirectToRssoLogoutPage(): void {\n    window.location.href = '/api/rsso-logout';\n  }\n\n  private redirectToRssoDebugLoginPage(): void {\n    this.router.navigate(['rsso-debug/login'], {\n      state: {\n        shouldReloadPage: this.rxSessionService.isAlive()\n      }\n    });\n  }\n\n  private redirectToApplicationLoginPage(): void {\n    const url = this.location.path();\n\n    // Trying to deduce the bundleId from the url. This can happen if the user tried to directly access a view\n    // while not logged in. In this case the application resolver does not kick in and does not set\n    // the application ID rxGlobalCacheService.\n    const bundleId = this.rxGlobalCacheService.applicationId || this.rxUrlUtilsService.getBundleIdFromUrl(url);\n\n    // The login page should be reloaded in case of session timeout but\n    // not if the user connects the first time.\n    // auth.interceptor.ts detects if a a rest calls returns http 401 and\n    // calls the login page redirection.\n    // In the case of a session timeout the session object is still 'alive'.\n    if (bundleId) {\n      // Post PR #776 the event NavigationCancel / NavigationEnd is not triggered anymore.\n      // This was used when the user was directly accessing a url (DRIST-21802).\n      // The logic has been added here.\n      const bundleLoginRoute = `${bundleId}/login`;\n      const isLoginRoute = url === `/${bundleLoginRoute}`;\n\n      if (!isLoginRoute) {\n        this.targetUrl = url;\n      } else if (isLoginRoute && !this.targetUrl) {\n        this.targetUrl = `/${bundleId}`;\n      }\n\n      // The login page should be reloaded in case of session timeout but\n      // not if the user connects the first time.\n      // auth.interceptor.ts detects if a a rest calls returns http 401 and\n      // calls the login page redirection.\n      // In the case of a session timeout the session object is still 'alive'.\n      this.router.navigate([bundleLoginRoute], {\n        state: {\n          shouldReloadPage: this.rxSessionService.isAlive()\n        }\n      });\n    } else {\n      this.router.navigate(['unknown-application']);\n    }\n  }\n}\n"]}