{"version":3,"file":"view-definition-parser.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/services/view-definition-parser.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAQ3C,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;;;AAMtD,MAAM,OAAO,6BAA6B;IACxC,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAEpD,aAAa,CACX,UAA+D,EAC/D,WAAW,GAAG,KAAK;QAEnB,MAAM,UAAU,GAAyC,EAAE,CAAC;QAE5D,IAAI,CAAC,WAAW,EAAE;YAChB,UAAU,CAAC,IAAI,CAAC;gBACd,mBAAmB,EAAE,UAAU;gBAC/B,yBAAyB,EAAE,IAAI;aACM,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,oBAAoB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAEhF,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,iBAAiB,CACvB,oBAAyF,EACzF,UAAgD,EAChD,yBAA8E;QAE9E,oBAAoB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE;YACnD,UAAU,CAAC,IAAI,CAAC,EAAE,mBAAmB,EAAE,yBAAyB,EAAwC,CAAC,CAAC;YAE1G,IAAI,IAAI,CAAC,kCAAkC,CAAC,mBAAmB,CAAC,EAAE;gBAChE,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,UAAU,EAAE,mBAAmB,CAAC,CAAC;aACnG;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,kCAAkC,CACxC,mBAAiF;QAEjF,OAAQ,mBAAyD,CAAC,oBAAoB,KAAK,SAAS,CAAC;IACvG,CAAC;IAED,6BAA6B,CAC3B,cAA+B,EAC/B,wBAA6D,EAC7D,SAA8D;QAE9D,MAAM,8BAA8B,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAC1E,IAAI,yBAAyB,CAAC;QAE9B,IAAI,kCAAkC,GAAG,8BAA8B,CAAC,IAAI,CAC1E,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,KAAK,wBAAwB,CAAC,IAAI,CAC1E,CAAC;QAEF,OAAO,kCAAkC,IAAI,CAAC,yBAAyB,EAAE;YACvE,IAAI,SAAS,CAAC,kCAAkC,CAAC,mBAAmB,CAAC,EAAE;gBACrE,yBAAyB,GAAG,kCAAkC,CAAC,mBAAmB,CAAC;aACpF;iBAAM;gBACL,kCAAkC,GAAG,8BAA8B,CAAC,IAAI,CACtE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,KAAK,kCAAkC,CAAC,yBAAyB,CAAC,IAAI,CAC9G,CAAC;aACH;SACF;QAED,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAED,iBAAiB,CACf,sBAA2E,EAC3E,SAAsB;QAEtB,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,EAAE,SAAS,CAAC,CAAC;IACzG,CAAC;;0HAvEU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IViewDefinition } from '../domain/view-definition.interface';\nimport { IViewComponentDefinitionWithParent } from '../domain/view-component-definition-with-parent.interface';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition\n} from '../domain/view-component-definition.types';\nimport { find } from 'lodash';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { RxPredicate } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewDefinitionParserService {\n  constructor(private rxTreeService: RxTreeService) {}\n\n  getComponents(\n    definition: IContainerViewComponentDefinition | IViewDefinition,\n    skipInitial = false\n  ): IViewComponentDefinitionWithParent[] {\n    const components: IViewComponentDefinitionWithParent[] = [];\n\n    if (!skipInitial) {\n      components.push({\n        componentDefinition: definition,\n        parentComponentDefinition: null\n      } as IViewComponentDefinitionWithParent);\n    }\n\n    this.processComponents(definition.componentDefinitions, components, definition);\n\n    return components;\n  }\n\n  private processComponents(\n    componentDefinitions: Array<IViewComponentDefinition | IContainerViewComponentDefinition>,\n    components: IViewComponentDefinitionWithParent[],\n    parentComponentDefinition: IContainerViewComponentDefinition | IViewDefinition\n  ) {\n    componentDefinitions.forEach((componentDefinition) => {\n      components.push({ componentDefinition, parentComponentDefinition } as IViewComponentDefinitionWithParent);\n\n      if (this.isContainerViewComponentDefinition(componentDefinition)) {\n        this.processComponents(componentDefinition.componentDefinitions, components, componentDefinition);\n      }\n    });\n  }\n\n  private isContainerViewComponentDefinition(\n    componentDefinition: IViewComponentDefinition | IContainerViewComponentDefinition\n  ): componentDefinition is IContainerViewComponentDefinition {\n    return (componentDefinition as IContainerViewComponentDefinition).componentDefinitions !== undefined;\n  }\n\n  findParentComponentDefinition(\n    viewDefinition: IViewDefinition,\n    childComponentDefinition: Partial<AnyViewComponentDefinition>,\n    predicate: (definition: AnyViewComponentDefinition) => boolean\n  ): IContainerViewComponentDefinition {\n    const componentDefinitionsWithParent = this.getComponents(viewDefinition);\n    let parentComponentDefinition;\n\n    let childComponentDefinitionWithParent = componentDefinitionsWithParent.find(\n      (pair) => pair.componentDefinition.guid === childComponentDefinition.guid\n    );\n\n    while (childComponentDefinitionWithParent && !parentComponentDefinition) {\n      if (predicate(childComponentDefinitionWithParent.componentDefinition)) {\n        parentComponentDefinition = childComponentDefinitionWithParent.componentDefinition;\n      } else {\n        childComponentDefinitionWithParent = componentDefinitionsWithParent.find(\n          (pair) => pair.componentDefinition.guid === childComponentDefinitionWithParent.parentComponentDefinition.guid\n        );\n      }\n    }\n\n    return parentComponentDefinition;\n  }\n\n  findViewComponent(\n    viewComponentContainer: IContainerViewComponentDefinition | IViewDefinition,\n    predicate: RxPredicate\n  ): IViewComponentDefinition {\n    return find(this.rxTreeService.flattenTree(viewComponentContainer, 'componentDefinitions'), predicate);\n  }\n}\n"]}