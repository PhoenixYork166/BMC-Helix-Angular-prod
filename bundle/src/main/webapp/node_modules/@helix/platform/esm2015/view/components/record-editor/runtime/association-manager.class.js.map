{"version":3,"file":"association-manager.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/runtime/association-manager.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Optional } from '@angular/core';\nimport {\n  IRecordDefinition,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport { assign, clone, filter, find, forEach, get, isEmpty, map as _map, remove, uniq } from 'lodash';\nimport { BehaviorSubject, defer, forkJoin, Observable, of } from 'rxjs';\nimport { map, share, switchMap, tap } from 'rxjs/operators';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IAssociationManagerConfig } from './record-editor.types';\n\nenum CardinalityType {\n  One = 'ONE',\n  Many = 'MANY'\n}\n\nexport class RxAssociationManagerService {\n  extensions: RecordInstance[] = [];\n  existing = [];\n  pending = [];\n  deleted = [];\n\n  private existingSubject$ = new BehaviorSubject([]);\n  existing$ = this.existingSubject$.asObservable();\n\n  private pendingSubject$ = new BehaviorSubject([]);\n  pending$ = this.pendingSubject$.asObservable();\n\n  private extensionsSubject$ = new BehaviorSubject([]);\n  extensions$ = this.extensionsSubject$.asObservable();\n\n  private initialize$: Observable<any>;\n\n  cardinalityTypes = CardinalityType;\n\n  totalExistingCount = 0;\n  associationDefinition = null;\n\n  cardinalityType = null;\n\n  isDataLoading: boolean;\n\n  recordDefinition: IRecordDefinition;\n  remainingAssociatedRecordCount = 0;\n\n  // create a shared observable to eliminate duplicate API calls from multiple association components in dropdown mode\n  private getExistingAssociationInstances$ = defer(() => this.getExistingAssociationInstances()).pipe(share());\n\n  constructor(\n    @Optional() private options: IAssociationManagerConfig,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxAssociationDefinitionCacheService: RxAssociationDefinitionCacheService\n  ) {\n    assign(this.options, {\n      canLoadAssociations: Boolean(this.options.associatedRecordInstanceId),\n      pageSize: 10,\n      startIndex: 0\n    });\n\n    this.extensions = this.options.associationInstances.extensions;\n    this.existing = this.options.associationInstances.existing;\n    this.pending = this.options.associationInstances.pending;\n    this.deleted = this.options.associationInstances.deleted;\n\n    this.options.fieldIds = this.options.fieldIds || [];\n\n    // add id to core fields for tracking changes on associationInstances\n    this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n  }\n\n  initialize(): Observable<any> {\n    this.isDataLoading = true;\n\n    if (!this.initialize$) {\n      this.initialize$ = forkJoin([\n        this.rxAssociationDefinitionCacheService.getAssociationDefinition(this.options.associationDefinitionName),\n        this.rxRecordDefinitionCacheService.getRecordDefinition(this.options.recordDefinitionName)\n      ]).pipe(\n        tap(([associationDefinition, recordDefinition]) => {\n          this.isDataLoading = false;\n\n          this.associationDefinition = associationDefinition;\n          this.recordDefinition = recordDefinition;\n\n          // determine whether a single or multiple instances can be associated based on association's cardinality and record role\n          this.cardinalityType = this.getCardinalityType(\n            this.associationDefinition.cardinality,\n            this.options.associatedRecordNodeSide\n          );\n\n          // set up field ids if they are not be provided\n          if (this.options.allFieldIds) {\n            this.options.fieldIds = _map(this.recordDefinition.fieldDefinitions, 'id');\n\n            this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n          }\n        })\n      );\n    }\n\n    return this.initialize$;\n  }\n\n  loadExistingAssociations(): Observable<any> {\n    if (this.options.canLoadAssociations) {\n      return this.initialize().pipe(\n        switchMap(() => {\n          return this.getExistingAssociationInstances$.pipe(\n            tap((instances) => {\n              forEach(instances.data, (instance) => {\n                this.addToExisting(\n                  this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(instance)\n                );\n              });\n\n              this.options.startIndex += instances.data.length;\n              this.remainingAssociatedRecordCount = instances.totalSize - this.options.startIndex;\n            })\n          );\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  loadExtensions(): Observable<RecordInstance> {\n    return this.initialize().pipe(\n      switchMap(() => {\n        return this.getExtensionRecordInstance().pipe(\n          tap((extensionRecordInstance) => {\n            if (extensionRecordInstance) {\n              this.addExtension(extensionRecordInstance);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  addToExisting(association): void {\n    // Existing association can be loaded twice by parallel requests either with or without filtering by `roleName` attribute.\n    const existingAssociation = this.isInExisting(association.id);\n\n    if (existingAssociation) {\n      if (this.isDefaultNodeRoleUsed(existingAssociation) && !this.isDefaultNodeRoleUsed(this.options.rolesConfig)) {\n        // Remove and add association again instead of config update is needed to correctly observe associations collection change.\n        remove(this.existing, existingAssociation);\n        association.rolesConfig = this.options.rolesConfig;\n        this.existing.push(association);\n\n        this.existingSubject$.next(this.existing);\n      } else {\n        // Existing association already has custom roles of nodes, so newly added association instance will be skipped.\n      }\n    } else {\n      if (this.options.rolesConfig && !association.rolesConfig) {\n        association.rolesConfig = this.options.rolesConfig;\n      }\n\n      this.existing.push(association);\n      this.existingSubject$.next(this.existing);\n    }\n  }\n\n  isDefaultNodeRoleUsed(association): string {\n    return this.rxJsonParserService.tryParseJson(get(association, 'rolesConfig.useDefaultRoles', true));\n  }\n\n  addToPending(associations, rolesConfig): void {\n    if (!isEmpty(associations) && this.associationDefinition) {\n      if (this.cardinalityType === CardinalityType.Many) {\n        const associationsForAppending = filter(associations, (association) => {\n          return (\n            !this.isInExisting(association.id) && !this.isInDeleted(association.id) && !this.isInPending(association.id)\n          );\n        });\n\n        if (rolesConfig) {\n          forEach(associationsForAppending, (association) => {\n            association.rolesConfig = rolesConfig;\n          });\n        }\n\n        Array.prototype.push.apply(this.pending, associationsForAppending);\n\n        this.pendingSubject$.next(this.pending);\n\n        const previouslyDeletedAssociations = remove(this.deleted, (deletedAssociation) => {\n          return find(associations, {\n            id: deletedAssociation.id\n          });\n        });\n\n        forEach(previouslyDeletedAssociations, (deletedAssociation) => {\n          this.addToExisting(deletedAssociation);\n        });\n      } else if (this.cardinalityType === CardinalityType.One) {\n        const association = associations[0];\n\n        switch (true) {\n          case isEmpty(this.existing) && isEmpty(this.deleted):\n            this.pending.length = 0;\n            this.pending.push(association);\n\n            break;\n          case isEmpty(this.existing):\n            const deletedAssociation = this.deleted[0];\n            this.pending.length = 0;\n\n            if (deletedAssociation.id === association.id) {\n              this.addToExisting(this.deleted.splice(0, 1)[0]);\n            } else {\n              this.pending.push(association);\n            }\n\n            break;\n\n          case isEmpty(this.deleted):\n            const existingAssociation = this.existing[0];\n\n            if (existingAssociation.id !== association.id) {\n              this.deleteFromExisting(existingAssociation.id);\n\n              this.pending.length = 0;\n              this.pending.push(association);\n            }\n\n            break;\n        }\n        this.pendingSubject$.next(this.pending);\n      }\n    }\n  }\n\n  addExtension(extensionRecordInstance: RecordInstance): void {\n    this.extensions.push(extensionRecordInstance);\n    this.extensionsSubject$.next(this.extensions);\n  }\n\n  restore(): void {\n    this.extensionsSubject$.next(this.extensions);\n\n    forEach(this.deleted, (deletedAssociation) => {\n      this.addToExisting(deletedAssociation);\n    });\n\n    this.deleted.splice(0, this.deleted.length);\n    this.deleteAllPending();\n  }\n\n  reset(): void {\n    this.existing.splice(0, this.existing.length);\n    this.pending.splice(0, this.pending.length);\n    this.deleted.splice(0, this.deleted.length);\n    this.totalExistingCount = 0;\n    this.options.startIndex = 0;\n  }\n\n  delete(associationId): void {\n    if (this.isInExisting(associationId)) {\n      this.deleteFromExisting(associationId);\n    } else if (this.isInPending(associationId)) {\n      this.deleteFromPending(associationId);\n    }\n  }\n\n  deleteAllExisting(): void {\n    const associationIds = _map(this.existing, 'id');\n\n    forEach(associationIds, (associationId) => {\n      this.deleteFromExisting(associationId);\n    });\n  }\n\n  deleteAllPending(): void {\n    this.pending.splice(0, this.pending.length);\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  mergeFieldIds(fieldIds): void {\n    if (fieldIds) {\n      this.options.fieldIds = uniq(this.options.fieldIds.concat(fieldIds));\n    }\n  }\n\n  extendOptions(options): void {\n    if (options.fieldIds) {\n      this.mergeFieldIds(options.fieldIds);\n    }\n\n    this.options.allFieldIds = options.allFieldIds;\n  }\n\n  private getCardinalityType(cardinality, associatedRecordNodeSide): CardinalityType {\n    let cardinalityType;\n\n    switch (true) {\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value:\n        cardinalityType = CardinalityType.One;\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value:\n        if (associatedRecordNodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n          cardinalityType = CardinalityType.Many;\n        } else {\n          cardinalityType = CardinalityType.One;\n        }\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value:\n        cardinalityType = CardinalityType.Many;\n\n        break;\n    }\n\n    return cardinalityType;\n  }\n\n  private getExtensionRecordInstance(loadFullInstance = true): Observable<RecordInstance> {\n    const fields = loadFullInstance ? RX_RECORD_DEFINITION.coreFieldIds.id : this.options.fieldIds.join(',');\n\n    return this.rxAssociationInstanceDataPageService\n      .post({\n        params: {\n          associationDefinition: this.options.associationDefinitionName,\n          nodeToQuery: this.options.associatedRecordNodeSide,\n          associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n          propertySelection: fields\n        }\n      })\n      .pipe(\n        map((instances) => instances.data[0]),\n        switchMap((dataPageRow) => {\n          if (dataPageRow && loadFullInstance) {\n            return this.rxRecordInstanceService.get(\n              this.options.recordDefinitionName,\n              dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id]\n            );\n          } else if (dataPageRow && !loadFullInstance) {\n            return of(this.rxRecordInstanceService.createInstanceFromDataPageRow(dataPageRow, this.recordDefinition));\n          } else {\n            return of(null);\n          }\n        })\n      );\n  }\n\n  private getExistingAssociationInstances(): Observable<IDataPageResult> {\n    const params = {\n      pageSize: this.options.pageSize,\n      startIndex: this.options.startIndex,\n      associationDefinition: this.options.associationDefinitionName,\n      nodeToQuery: this.options.associatedRecordNodeSide,\n      associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n      propertySelection: this.options.fieldIds.join(','),\n      useDefaultRoleNames: false,\n      nodeARoleName: '',\n      nodeBRoleName: ''\n    };\n\n    if (this.options.rolesConfig.useDefaultRoles) {\n      params.useDefaultRoleNames = this.options.rolesConfig.useDefaultRoles;\n      delete params.nodeARoleName;\n      delete params.nodeBRoleName;\n    } else {\n      delete params.useDefaultRoleNames;\n      params.nodeARoleName = this.options.rolesConfig.nodeARole || '';\n      params.nodeBRoleName = this.options.rolesConfig.nodeBRole || '';\n    }\n\n    return this.rxAssociationInstanceDataPageService.post({ params });\n  }\n\n  private isInExisting(associationId) {\n    return find(this.existing, {\n      id: associationId\n    });\n  }\n\n  private isInPending(associationId) {\n    return find(this.pending, {\n      id: associationId\n    });\n  }\n\n  getFieldIds() {\n    return clone(this.options.fieldIds);\n  }\n\n  private isInDeleted(associationId) {\n    return find(this.deleted, {\n      id: associationId\n    });\n  }\n\n  private deleteFromExisting(associationId): void {\n    const removedAssociation = remove(this.existing, {\n      id: associationId\n    })[0];\n\n    this.deleted.push(removedAssociation);\n\n    this.existingSubject$.next(this.existing);\n  }\n\n  private deleteFromPending(associationId): void {\n    remove(this.pending, {\n      id: associationId\n    });\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  destroy(): void {\n    this.existingSubject$.complete();\n    this.pendingSubject$.complete();\n    this.extensionsSubject$.complete();\n  }\n}\n"]}