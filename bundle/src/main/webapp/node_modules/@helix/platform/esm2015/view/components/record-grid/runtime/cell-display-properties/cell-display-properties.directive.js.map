{"version":3,"file":"cell-display-properties.directive.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/cell-display-properties/cell-display-properties.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  ICellDisplayProperties,\n  RxGridCellBgColorCssMap,\n  RxGridCellFontColorCssMap,\n  RxGridCellFontSize,\n  RxGridCellIconPosition\n} from '../../common/types/cell-display-properties.types';\nimport { RxExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { set } from 'lodash';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\n\n@Directive({\n  selector: '[rxCellDisplayProps]'\n})\nexport class CellDisplayPropertiesDirective implements OnInit, OnChanges {\n  @Input()\n  rxCellDisplayProps: ICellDisplayProperties[];\n\n  @Input()\n  rxCellDisplayPropsBadgeElem: HTMLElement;\n\n  @Input()\n  rxCellDisplayPropsDataItem: IPlainObject;\n\n  @HostBinding('class')\n  cssClasses: string;\n\n  private evaluationData: IPlainObject = {};\n\n  constructor(\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.updateCellClasses();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      !changes.rxCellDisplayPropsDataItem.firstChange &&\n      changes.rxCellDisplayPropsDataItem.currentValue !== changes.rxCellDisplayPropsDataItem.previousValue\n    ) {\n      this.updateCellClasses();\n    }\n  }\n\n  private getActiveProps(items: ICellDisplayProperties[]): ICellDisplayProperties {\n    return (\n      items.find((props) =>\n        this.rxExpressionEvaluatorService.tryEvaluate(props.fieldValueCondition, this.evaluationData)\n      ) || null\n    );\n  }\n\n  private getCellCssClasses(props: ICellDisplayProperties): string[] {\n    const result = [];\n\n    if (!props.displayAsBadge) {\n      if (props.bold) {\n        result.push('font-weight-bold');\n      }\n\n      if (props.italic) {\n        result.push('font-italic');\n      }\n\n      if (props.fontSize === RxGridCellFontSize.Small) {\n        result.push('small');\n      } else if (props.fontSize === RxGridCellFontSize.Large) {\n        result.push('large');\n      }\n\n      if (props.textColor) {\n        result.push(RxGridCellFontColorCssMap[props.textColor]);\n      }\n\n      if (props.backgroundColor) {\n        result.push(RxGridCellBgColorCssMap[props.backgroundColor]);\n      }\n\n      if (props.icon) {\n        if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n          result.push(`d-icon-${props.icon}`);\n        } else {\n          result.push(`d-icon-${props.iconPosition}-${props.icon}`);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private getSpanCssClasses(props: ICellDisplayProperties): string[] {\n    if (props.displayAsBadge) {\n      return ['badge', `badge-${props.badgeColor}`];\n    } else if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n      return ['hidden'];\n    } else {\n      return [];\n    }\n  }\n\n  private updateCellClasses(): void {\n    if (this.rxCellDisplayProps?.length) {\n      let cssClasses = '';\n\n      const expandedRxCellDisplayPropsDataItem = {\n        ...this.rxCellDisplayPropsDataItem,\n        ...this.rxObjectUtilsService.expandProperties(this.rxCellDisplayPropsDataItem)\n      };\n\n      set(this.evaluationData, `view.components.grid.clickableRow`, expandedRxCellDisplayPropsDataItem);\n\n      const activeProps = this.getActiveProps(this.rxCellDisplayProps);\n\n      if (activeProps) {\n        const cellClasses = this.getCellCssClasses(activeProps);\n\n        cssClasses = cellClasses.join(' ');\n      }\n\n      if (this.rxCellDisplayPropsBadgeElem) {\n        const spanClasses: string[] = activeProps ? this.getSpanCssClasses(activeProps) : [];\n\n        this.rxCellDisplayPropsBadgeElem.classList.value = '';\n        this.rxCellDisplayPropsBadgeElem.classList.add(...spanClasses);\n      }\n\n      this.cssClasses = cssClasses;\n    }\n  }\n}\n"]}