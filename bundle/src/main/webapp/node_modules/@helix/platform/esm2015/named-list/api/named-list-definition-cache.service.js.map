{"version":3,"file":"named-list-definition-cache.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/named-list/api/named-list-definition-cache.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;AAKjC,MAAM,OAAO,iCAAiC;IAI5C,YAAoB,4BAA0D;QAA1D,iCAA4B,GAA5B,4BAA4B,CAA8B;QAHtE,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;QACvC,yBAAoB,GAAkD,IAAI,GAAG,EAAE,CAAC;IAEP,CAAC;IAElF,sBAAsB,CAAC,uBAA+B;QACpD,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAAE;YAC3D,MAAM,mBAAmB,GAAG,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhH,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,uBAAuB,EAAE,mBAAmB,CAAC,CAAC;SAC7E;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IAChE,CAAC;IAED,gBAAgB,CAAC,gBAAiC;QAChD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,CAAC;IACpC,CAAC;;8HA9BU,iCAAiC;kIAAjC,iCAAiC,cAFhC,MAAM;2FAEP,iCAAiC;kBAH7C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { INamedListDefinition } from './named-list-definition.types';\nimport { RxNamedListDefinitionService } from './named-list-definition.service';\nimport { shareReplay } from 'rxjs/operators';\nimport { isEmpty } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxNamedListDefinitionCacheService {\n  private consumers = new Set<Observable<any>>();\n  private namedListDefinitions: Map<string, Observable<INamedListDefinition>> = new Map();\n\n  constructor(private rxNamedListDefinitionService: RxNamedListDefinitionService) {}\n\n  getNamedListDefinition(namedListDefinitionName: string): Observable<INamedListDefinition> {\n    if (!this.namedListDefinitions.has(namedListDefinitionName)) {\n      const namedListDefinition = this.rxNamedListDefinitionService.get(namedListDefinitionName).pipe(shareReplay(1));\n\n      this.namedListDefinitions.set(namedListDefinitionName, namedListDefinition);\n    }\n\n    return this.namedListDefinitions.get(namedListDefinitionName);\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  private clearCache(): void {\n    this.namedListDefinitions.clear();\n  }\n}\n"]}