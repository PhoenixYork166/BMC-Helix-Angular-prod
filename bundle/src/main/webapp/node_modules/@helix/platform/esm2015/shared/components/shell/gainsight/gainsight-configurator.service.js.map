{"version":3,"file":"gainsight-configurator.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/shell/gainsight/gainsight-configurator.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  AdaptRadarGainsightIdentifyActionName,\n  AdaptRadarGainsightProvider,\n  AdaptRadarProductAreaName,\n  AdaptRadarService,\n  AdaptRadarSupportedProviders\n} from '@bmc-ux/adapt-radar';\nimport { map, switchMap, take, tap, shareReplay } from 'rxjs/operators';\nimport {\n  IBundleDescriptor,\n  IPlainObject,\n  IUser,\n  RX_APPLICATION,\n  RxCurrentUserService,\n  RxFeatureService,\n  RxGlobalCacheService,\n  RxLogService\n} from '@helix/platform/shared/api';\nimport { RxRecordInstanceService, RecordInstance, RxRecordInstanceUpdateService } from '@helix/platform/record/api';\nimport { RX_GAINSIGHT } from './gainsight.constant';\nimport { IGainsightConfiguration, IGainsightSettings } from './gainsight.types';\nimport { Observable, of, combineLatest, iif } from 'rxjs';\nimport { find, keys, merge } from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport { RxIframeUtilsService } from '@helix/platform/utils';\n\ndeclare function aptrinsic(gainsightEventName: string, customSettings: any, customEventData: any): void;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxGainsightConfiguratorService {\n  private productTag: string;\n  private updatedContext: IPlainObject;\n  private isGainsightLoaded: boolean;\n  private useAdaptRadar: boolean;\n  private bundleDescriptor$ = this.rxGlobalCacheService.getApplicationBundleDescriptor().pipe(take(1), shareReplay(1));\n\n  private gainsightConfiguration$ = this.bundleDescriptor$.pipe(\n    switchMap((bundleDescriptor: IBundleDescriptor) => this.getGainsightConfiguration(bundleDescriptor.id)),\n    shareReplay(1)\n  );\n\n  private globalContextData$ = combineLatest([this.bundleDescriptor$, this.gainsightConfiguration$]).pipe(\n    map(([bundleDescriptor, gainsightConfiguration]) =>\n      bundleDescriptor.id === RX_APPLICATION.innovationStudioBundleId\n        ? {\n            productArea: {\n              name: AdaptRadarProductAreaName.Platform,\n              version: bundleDescriptor.displayVersion,\n              hosting: gainsightConfiguration.settings.deploymentType\n            }\n          }\n        : null\n    ),\n    shareReplay(1)\n  );\n\n  constructor(\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private adaptRadarService: AdaptRadarService,\n    private adaptRadarGainsightProvider: AdaptRadarGainsightProvider,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxFeatureService: RxFeatureService,\n    private rxLogService: RxLogService,\n    private httpClient: HttpClient,\n    private rxRecordInstanceUpdateService: RxRecordInstanceUpdateService,\n    private rxIframeUtilsService: RxIframeUtilsService\n  ) {}\n\n  gainsightInitConfiguration$ = iif(\n    () => this.rxFeatureService.isFeatureEnabled('DRD21-11744'),\n    combineLatest([this.bundleDescriptor$, this.gainsightConfiguration$]).pipe(\n      tap(([bundleDescriptor, gainsightConfiguration]) => {\n        const company = gainsightConfiguration.company;\n        const companyId = gainsightConfiguration.companyId;\n        const user = this.rxCurrentUserService.get();\n        const hashedUserId = gainsightConfiguration.hashedUserId;\n        let isGainsightEnabled = gainsightConfiguration.settings.enableGainsight;\n        this.useAdaptRadar = gainsightConfiguration.settings.useAdaptRadar;\n        this.productTag = gainsightConfiguration.productTag;\n\n        if (isGainsightEnabled && !gainsightConfiguration.productTag) {\n          this.rxLogService.debug(`Gainsight product tag is missing for bundle ${bundleDescriptor.id}.`);\n          isGainsightEnabled = false;\n        }\n\n        if (isGainsightEnabled) {\n          if (this.useAdaptRadar) {\n            this.adaptRadarService.startDataCollecting({\n              providers: [\n                {\n                  name: AdaptRadarSupportedProviders.Gainsight,\n                  id: this.productTag,\n                  oneTimeActions: [\n                    {\n                      name: AdaptRadarGainsightIdentifyActionName.UserIdentify,\n                      data: {\n                        userData: {\n                          id: hashedUserId,\n                          role: user.isAdministrator\n                            ? RX_GAINSIGHT.administratorRole\n                            : user.isBusinessAnalyst\n                            ? RX_GAINSIGHT.businessAnalystRole\n                            : RX_GAINSIGHT.regularUserRole\n                        },\n                        accountData: {\n                          id: companyId || company,\n                          name: company\n                        }\n                      }\n                    }\n                  ]\n                }\n              ]\n            });\n          } else {\n            const gainsightUrl = gainsightConfiguration.settings.loadGainsightFromBmcIt\n              ? RX_GAINSIGHT.bmcGainsightUrl\n              : RX_GAINSIGHT.gainsightUrl;\n\n            this.loadGainsightScript(user, gainsightUrl, hashedUserId, company, companyId);\n          }\n        }\n      }),\n      switchMap(([bundleDescriptor, gainsightConfiguration]) =>\n        gainsightConfiguration.settings.enableGainsight && gainsightConfiguration.settings.useAdaptRadar\n          ? this.adaptRadarGainsightProvider.init$\n          : of(false)\n      ),\n      tap((isInitialized) => {\n        if (isInitialized) {\n          this.isGainsightLoaded = true;\n          this.setGlobalContext(this.updatedContext);\n        }\n      }),\n      switchMap(() => this.gainsightConfiguration$),\n      shareReplay(1)\n    ),\n    of(null)\n  );\n\n  updateGlobalContext(globalContext: any, viewDefinitionName?: string): void {\n    this.gainsightConfiguration$.pipe(take(1)).subscribe((gainsightConfiguration) => {\n      if (this.rxFeatureService.isFeatureEnabled('DRD21-11744')) {\n        if (viewDefinitionName) {\n          // For runtime views clear all the previous global context before update\n          this.removeGlobalContext(keys(this.updatedContext));\n\n          globalContext =\n            find(gainsightConfiguration.viewMapping, { viewName: viewDefinitionName })?.globalContext ??\n            find(gainsightConfiguration.viewMapping, { default: true })?.globalContext;\n\n          globalContext = globalContext && JSON.parse(globalContext);\n\n          this.updatedContext = globalContext;\n        }\n\n        this.setGlobalContext(globalContext);\n      }\n    });\n  }\n\n  private setGlobalContext(globalContext: IPlainObject): void {\n    this.globalContextData$.pipe(take(1)).subscribe((globalContextData) => {\n      if (this.useAdaptRadar && this.isGainsightLoaded) {\n        this.adaptRadarGainsightProvider.setGlobalContext(merge(globalContextData, globalContext));\n      } else if (!this.useAdaptRadar && this.isGainsightLoaded) {\n        aptrinsic('set', 'globalContext', merge(globalContextData, globalContext));\n      } else {\n        this.updatedContext = globalContext;\n      }\n    });\n  }\n\n  removeGlobalContext(contextList: string[]): void {\n    if (this.isGainsightLoaded) {\n      // Clear all global context if list is not specified\n      contextList ??= keys(this.updatedContext);\n\n      this.globalContextData$.pipe(take(1)).subscribe((globalContextData) => {\n        if (globalContextData) {\n          contextList.forEach((context) => delete globalContextData[context]);\n        }\n\n        if (this.useAdaptRadar) {\n          this.adaptRadarGainsightProvider.removeGlobalContext(contextList);\n        } else {\n          aptrinsic('remove', 'globalContext', contextList);\n        }\n      });\n    }\n  }\n\n  private async loadGainsightScript(\n    user: IUser,\n    gainsightUrl: string,\n    hashedUserId: string,\n    company: string,\n    companyId: string\n  ): Promise<void> {\n    const param = this.productTag;\n    const script = document.getElementsByTagName('script')[0];\n    const node = document.createElement('script');\n\n    window['aptrinsic'] =\n      window['aptrinsic'] ||\n      function () {\n        (window['aptrinsic'].q = window['aptrinsic'].q || []).push(arguments);\n      };\n\n    window['aptrinsic'].p = param;\n\n    // iframeModeEnabled is set to \"false\" when embedded in an iFrame, as per Gainsight documentation.\n    window['aptrinsic'].c = { iframeModeEnabled: !this.rxIframeUtilsService.isRunningInIframe() };\n\n    node.async = true;\n    node.src = gainsightUrl + '?a=' + param;\n\n    node.onload = () => {\n      const functionalRoles = user.functionalRoles.reduce((functionalRole, name) => {\n        functionalRole[name] = true;\n        return functionalRole;\n      }, {});\n\n      this.isGainsightLoaded = true;\n\n      aptrinsic(\n        'identify',\n        {\n          id: hashedUserId,\n          globalId: hashedUserId,\n          role: user.isAdministrator\n            ? RX_GAINSIGHT.administratorRole\n            : user.isBusinessAnalyst\n            ? RX_GAINSIGHT.businessAnalystRole\n            : RX_GAINSIGHT.regularUserRole,\n          functionalRoles\n        },\n        {\n          id: companyId || company,\n          name: company\n        }\n      );\n\n      this.setGlobalContext(this.updatedContext);\n    };\n\n    node.onerror = (error: any) => {\n      this.rxLogService.error(error);\n    };\n\n    script.parentNode.insertBefore(node, script);\n  }\n\n  getGainsightConfiguration(bundleId: string): Observable<IGainsightConfiguration> {\n    if (this.rxFeatureService.isFeatureEnabled('DRD21-11744')) {\n      return this.httpClient.get<IGainsightConfiguration>(RX_GAINSIGHT.gainsightConfigurationsApi + '/' + bundleId);\n    } else {\n      return of(null);\n    }\n  }\n\n  saveGainsightConfiguration(gainsightSettings: IGainsightSettings): Observable<any> {\n    return this.rxRecordInstanceService\n      .get(RX_GAINSIGHT.gainsightSettings.recordDefinitionName, RX_GAINSIGHT.gainsightSettings.recordInstanceId)\n      .pipe(\n        switchMap((recordInstance: RecordInstance) => {\n          recordInstance.setFieldValue(\n            RX_GAINSIGHT.gainsightSettings.fieldIds.enableGainsight,\n            gainsightSettings.enableGainsight\n          );\n\n          recordInstance.setFieldValue(\n            RX_GAINSIGHT.gainsightSettings.fieldIds.useAdaptRadar,\n            gainsightSettings.useAdaptRadar\n          );\n\n          recordInstance.setFieldValue(\n            RX_GAINSIGHT.gainsightSettings.fieldIds.loadGainsightFromBmcIt,\n            gainsightSettings.loadGainsightFromBmcIt\n          );\n\n          recordInstance.setFieldValue(\n            RX_GAINSIGHT.gainsightSettings.fieldIds.deploymentType,\n            gainsightSettings.deploymentType\n          );\n\n          recordInstance.setFieldValue(\n            RX_GAINSIGHT.gainsightSettings.fieldIds.environmentType,\n            gainsightSettings.environmentType\n          );\n\n          return this.rxRecordInstanceUpdateService.execute(recordInstance);\n        })\n      );\n  }\n}\n"]}