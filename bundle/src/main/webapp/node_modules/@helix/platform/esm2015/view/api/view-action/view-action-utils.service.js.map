{"version":3,"file":"view-action-utils.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/view-action/view-action-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE3E,OAAO,EAAkC,sBAAsB,EAAE,MAAM,6BAA6B,CAAC;AACrG,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACrF,OAAO,EAAgB,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAChF,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;;;;;AAMnE,MAAM,OAAO,wBAAwB;IACnC,YACU,oBAA0C,EAC1C,MAAc,EACd,eAAgC,EAChC,iBAAoC;QAHpC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAiB;QAChC,sBAAiB,GAAjB,iBAAiB,CAAmB;IAC3C,CAAC;IAEJ,eAAe,CAAC,kBAA0B,EAAE,cAAgC,EAAE;QAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC;QAExD,IAAI,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC;QAE1C,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,OAAO,GAAG,CAAC,EAAE;YACvD,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC;SACvC;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,OAAO,GAAG,CAAC,EAAE;YAC9D,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CACpC,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,IAAI,WAAW,IAAI,kBAAkB,EAAE,EAC7E,WAAW,CACZ,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,MAAqB;QACpC,IAAI,GAAG,GAAG,EAAE,CAAC;QAEb,IAAI,UAAU,CAAoB,MAAO,CAAC,eAAe,CAAC,EAAE;YAC1D,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAoB,MAAO,CAAC,eAAe,EAAE,CAAC,CAAC;SAC7E;aAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,EAAE;YACpG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;SAC1C;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;YAC1D,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAiB,MAAM,CAAC,CAAC;SACvD;aAAM,IAAI,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;YACxD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAClB;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,EAAE;YACvF,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;SACrB;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED,kBAAkB,CAAC,IAAoB;QACrC,OAAO,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,EAAE,sBAAsB,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1F,CAAC;;qHA7CU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RxStringService, RxUrlUtilsService } from '@helix/platform/utils';\nimport { RecordsSource } from './view-action.types';\nimport { IRowDataItem, IRxRecordGridApi, RowDataItemIdFieldName } from '../common/record-grid.types';\nimport { clone, compact, flow, isFunction, isObject, map, some, uniq } from 'lodash';\nimport { IPlainObject, RxBundleCacheService } from '@helix/platform/shared/api';\nimport { ViewDisplayType } from '../domain/view-display-type.enum';\nimport { IViewInputParams } from '../domain/view-input-params.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewActionUtilsService {\n  constructor(\n    private rxBundleCacheService: RxBundleCacheService,\n    private router: Router,\n    private rxStringService: RxStringService,\n    private rxUrlUtilsService: RxUrlUtilsService\n  ) {}\n\n  generateViewUrl(viewDefinitionName: string, inputParams: IViewInputParams = {}): string {\n    const currentUrl = this.router.routerState.snapshot.url;\n\n    let displayType = ViewDisplayType.Regular;\n\n    if (currentUrl.includes(`/${ViewDisplayType.Preview}/`)) {\n      displayType = ViewDisplayType.Preview;\n    } else if (currentUrl.includes(`/${ViewDisplayType.NoShell}/`)) {\n      displayType = ViewDisplayType.NoShell;\n    }\n\n    return this.rxUrlUtilsService.buildUrl(\n      `/${this.rxBundleCacheService.bundleId}/${displayType}/${viewDefinitionName}`,\n      inputParams\n    );\n  }\n\n  extractRecordIds(source: RecordsSource): string[] {\n    let ids = [];\n\n    if (isFunction((<IRxRecordGridApi>source).getSelectedRows)) {\n      ids = this.getIdsFromGridRows((<IRxRecordGridApi>source).getSelectedRows());\n    } else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n      ids.push(source[RowDataItemIdFieldName]);\n    } else if (Array.isArray(source) && some(source, isObject)) {\n      ids = this.getIdsFromGridRows(<IRowDataItem[]>source);\n    } else if (this.rxStringService.isNonEmptyString(source)) {\n      ids.push(source);\n    } else if (Array.isArray(source) && some(source, this.rxStringService.isNonEmptyString)) {\n      ids = clone(source);\n    }\n\n    return ids;\n  }\n\n  getIdsFromGridRows(rows: IPlainObject[]): string[] {\n    return flow((rowsArray) => map(rowsArray, RowDataItemIdFieldName), compact, uniq)(rows);\n  }\n}\n"]}