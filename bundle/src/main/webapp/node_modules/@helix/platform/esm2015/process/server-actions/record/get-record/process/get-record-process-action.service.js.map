{"version":3,"file":"get-record-process-action.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/process/server-actions/record/get-record/process/get-record-process-action.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { chain, isEmpty } from 'lodash';\n\nimport { RxTreeService } from '@helix/platform/utils';\nimport { IFormWidgetBuilderConfig, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IAssociationTree } from '@helix/platform/association/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { IOutputDataDictionaryBranch, RxProcessActionService } from '@helix/platform/process/elements';\n\nimport { RxRecordServerActionServiceMixin } from '../../record-server-action-service.mixin';\nimport { RxGetRecordServerActionServiceMixin } from '../get-record-server-action-service.mixin';\nimport { IGetRecordServerActionModel } from '../get-record-server-action.types';\nimport { RxGetRecordInputMapInspectorWidgetComponent } from '../components/get-record-input-map-inspector-widget';\nimport { RxGetRecordProcessActionExpressionConfiguratorClass } from './get-record-process-action-expression-configurator.class';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxGetRecordProcessActionService extends RxGetRecordServerActionServiceMixin(\n  RxRecordServerActionServiceMixin(RxProcessActionService)\n) {\n  constructor(\n    protected rxDefinitionNameService: RxDefinitionNameService,\n    protected rxProcessDefinitionService: RxProcessDefinitionService,\n    protected rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    protected rxTreeService: RxTreeService,\n    protected injector: Injector\n  ) {\n    super(injector);\n  }\n\n  buildOutputDataDictionaryBranch(model: IGetRecordServerActionModel): Observable<IOutputDataDictionaryBranch[]> {\n    const recordDefinitionName = super.getRecordDefinitionNameFromInputMap(model.inputMap);\n\n    return recordDefinitionName\n      ? this.rxRecordDefinitionCacheService.getRecordAssociationTree(recordDefinitionName).pipe(\n          switchMap((recordAssociationTrees) => {\n            const recordDefinitionNames = chain(recordAssociationTrees)\n              .map('value')\n              .compact()\n              .map('recordDefinitionName')\n              .push(recordDefinitionName)\n              .value();\n\n            return this.rxRecordDefinitionCacheService\n              .getRecordDefinitions(recordDefinitionNames)\n              .pipe(\n                map((recordDefinitions) =>\n                  this.getOutputChildrenBranch(recordDefinitionName, recordAssociationTrees, recordDefinitions)\n                )\n              );\n          })\n        )\n      : of(null);\n  }\n\n  getClass(): any {\n    return joint.shapes.rx.ProcessActions.getRecord;\n  }\n\n  getElementType(actionTypeName: string): string {\n    return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n  }\n\n  getExpressionConfiguratorClass(): any {\n    return RxGetRecordProcessActionExpressionConfiguratorClass;\n  }\n\n  getInputMapInspectorWidgetConfig(): IFormWidgetBuilderConfig {\n    return {\n      component: RxGetRecordInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator()\n      }\n    };\n  }\n\n  private getAssociationsBranch(\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[],\n    prefix?: string\n  ): IOutputDataDictionaryBranch {\n    return isEmpty(recordAssociationTree)\n      ? null\n      : {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.associations.label'),\n          children: recordAssociationTree.map((association) => {\n            let newPrefix = `_associations.${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]`;\n\n            const recordDefinitionName = association.value.recordDefinitionName;\n\n            newPrefix = prefix ? `${prefix}.${newPrefix}` : newPrefix;\n\n            const associationNodeLabel =\n              association.value.nodeName !== recordDefinitionName\n                ? `${this.rxDefinitionNameService.getDisplayName(\n                    recordDefinitionName\n                  )} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})`\n                : this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n\n            return {\n              label: associationNodeLabel,\n              outputPropertyPath: newPrefix,\n              children: this.getAssociationChildren(\n                recordDefinitionName,\n                association.children,\n                recordDefinitions,\n                newPrefix\n              )\n            };\n          })\n        };\n  }\n\n  private getAssociationChildren(\n    recordDefinitionName: string,\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[],\n    prefix: string\n  ): IOutputDataDictionaryBranch[] {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix);\n\n    const children: IOutputDataDictionaryBranch[] = chain(recordDefinitions)\n      .find({ name: recordDefinitionName })\n      .get('fieldDefinitions')\n      .map(function (fieldDefinition) {\n        return {\n          label: fieldDefinition.name,\n          outputPropertyPath: `${prefix}.${fieldDefinition.id}`\n        };\n      })\n      .value();\n\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n\n    return children;\n  }\n\n  private getOutputChildrenBranch(\n    recordDefinitionName: string,\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[]\n  ): IOutputDataDictionaryBranch[] {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions);\n\n    const children: IOutputDataDictionaryBranch[] = chain(recordDefinitions)\n      .find({ name: recordDefinitionName })\n      .get('fieldDefinitions')\n      .map((fieldDefinition) => ({\n        label: fieldDefinition.name,\n        outputPropertyPath: [fieldDefinition.id, fieldDefinition.name]\n      }))\n      .value();\n\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n\n    return children;\n  }\n}\n"]}