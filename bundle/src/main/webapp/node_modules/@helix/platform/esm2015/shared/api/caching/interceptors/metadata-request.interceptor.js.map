{"version":3,"file":"metadata-request.interceptor.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/api/caching/interceptors/metadata-request.interceptor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,qBAAqB,EAAE,MAAM,yCAAyC,CAAC;;;;;;AAGhF,MAAM,OAAO,4BAA4B;IACvC,YACU,kBAAwC,EACxC,iBAAoC,EACpC,oBAA0C,EAC1C,qBAA4C;QAH5C,uBAAkB,GAAlB,kBAAkB,CAAsB;QACxC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,0BAAqB,GAArB,qBAAqB,CAAuB;IACnD,CAAC;IAEJ,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,yBAAyB,GAAG,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QAC5F,MAAM,8BAA8B,GAAG,IAAI,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;QACtG,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAE5E,IAAI,iBAAiB,IAAI,yBAAyB,EAAE;YAClD,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC;YAC7C,MAAM,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,CAAC;YAClF,IAAI,MAAM,CAAC;YAEX,6EAA6E;YAC7E,6EAA6E;YAC7E,MAAM,QAAQ,GAAG,8BAA8B;gBAC7C,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;gBAC7C,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YAErC,IAAI,8BAA8B,IAAI,QAAQ,EAAE;gBAC9C,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;oBACtB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;iBACjD,CAAC,CAAC;aACJ;YAED,IAAI,sBAAsB,EAAE;gBAC1B,MAAM,QAAQ,GAAG;oBACf,IAAI,CAAC,MAAM;oBACX,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;oBAC3B,sBAAsB,CAAC,OAAO,EAAE;oBAChC,IAAI,CAAC,qBAAqB,CAAC,aAAa;iBACzC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAEX,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAE/C,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;oBACtB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC;oBAC7F,MAAM,EAAE,MAAM;iBACf,CAAC,CAAC;aACJ;SACF;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;yHAhDU,4BAA4B;6HAA5B,4BAA4B;2FAA5B,4BAA4B;kBADxC,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RxCurrentUserService } from '../../user/current-user.service';\nimport { RxMetadataService } from '../metadata.service';\nimport { RxBundleCacheService } from '../bundle-cache.service';\nimport { RxLocalizationService } from '../../localization/localization.service';\n\n@Injectable()\nexport class RxMetadataRequestInterceptor implements HttpInterceptor {\n  constructor(\n    private bundleCacheService: RxBundleCacheService,\n    private rxMetadataService: RxMetadataService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxLocalizationService: RxLocalizationService\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const isLocalizedStringsRequest = this.rxMetadataService.isLocalizedStringsRequest(request);\n    const isMetadataDataPageQueryRequest = this.rxMetadataService.isMetadataDataPageQueryRequest(request);\n    const isMetadataRequest = this.rxMetadataService.isMetadataRequest(request);\n\n    if (isMetadataRequest || isLocalizedStringsRequest) {\n      const user = this.rxCurrentUserService.get();\n      const metaDataLastUpdateTime = this.rxMetadataService.getMetadataLastUpdateTime();\n      let params;\n\n      // duplicate the 'default-bundle-scope' request header as a request parameter\n      // in order to have a separate cache for requests with different bundle scope\n      const bundleId = isMetadataDataPageQueryRequest\n        ? request.headers.get('default-bundle-scope')\n        : this.bundleCacheService.bundleId;\n\n      if (isMetadataDataPageQueryRequest && bundleId) {\n        request = request.clone({\n          params: request.params.set('bundleId', bundleId)\n        });\n      }\n\n      if (metaDataLastUpdateTime) {\n        const cacheKey = [\n          user.userId,\n          user.modifiedDate.getTime(),\n          metaDataLastUpdateTime.getTime(),\n          this.rxLocalizationService.currentLocale\n        ].join('');\n\n        params = request.params.append('_v', cacheKey);\n\n        request = request.clone({\n          headers: request.headers.delete('Cache-Control').delete('Pragma').delete('If-Modified-Since'),\n          params: params\n        });\n      }\n    }\n\n    return next.handle(request);\n  }\n}\n"]}