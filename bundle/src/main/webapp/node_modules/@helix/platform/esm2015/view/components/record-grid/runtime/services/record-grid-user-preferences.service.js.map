{"version":3,"file":"record-grid-user-preferences.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-user-preferences.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ColumnConfig, ResizeMode } from '@bmc-ux/adapt-table';\nimport { SelectedAdvancedFilter, ValueOrFunc1 } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinitionsById } from '@helix/platform/record/api';\nimport { RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  assign,\n  cloneDeep,\n  endsWith,\n  filter,\n  find,\n  flow,\n  has,\n  isEmpty,\n  isEqual,\n  isNull,\n  isString,\n  map as _map,\n  omit,\n  reduce,\n  remove,\n  some,\n  sortBy\n} from 'lodash';\nimport { SortMeta } from 'primeng/api';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IAdaptTableConfig } from '../types/adapt-table-config.interface';\nimport { IRecordGridColumnUserPreferences, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRecordGridFilterPreset } from '../types/record-grid-filter-preset.interface';\nimport {\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterData } from '@helix/platform/view/api';\nimport { IRecordGridState } from '../types/record-grid-state.interface';\nimport {\n  IRecordGridSharedViewPreset,\n  IRecordGridUserPreferences,\n  IRecordGridViewPreset\n} from '../types/record-grid-user-preferences.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { IGridViewColumnProperties, IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetConfigData } from '../types/record-grid-config.interface';\n\n@Injectable()\nexport class RxRecordGridUserPreferencesService {\n  private initialPreferences: IRecordGridUserPreferences = {\n    columns: [],\n    filterPresets: [],\n    filters: null,\n    visibleCardFieldIds: [],\n    appliedExternalFilterPresetGuid: null,\n    viewPresets: {}\n  };\n\n  private preferences = { ...this.initialPreferences };\n  private selectedViewPresetGuid: string;\n\n  constructor(\n    private recordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  saveUserPreferences(guid: string, adaptTableConfig: IAdaptTableConfig, state: IRecordGridState): void {\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.preferences.visibleCardFieldIds = this.getVisibleCardFieldIds(adaptTableConfig);\n    } else {\n      this.preferences.columns = this.getColumnsPreferences(adaptTableConfig);\n    }\n\n    this.preferences.filterPresets = state.advancedFiltering.savedFilters\n      .filter((savedFilter) => !savedFilter.isCreatedByOtherUsers)\n      .map((savedFilter) =>\n        this.getPreferencesFilterPresets(\n          savedFilter,\n          state.recordDefinition.fieldDefinitionsById,\n          state.advancedFiltering.recordGridFilterConfigs\n        )\n      );\n\n    const currentFilters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      state.advancedFiltering.selectedFilters,\n      state.recordDefinition.fieldDefinitionsById,\n      state.advancedFiltering.recordGridFilterConfigs\n    );\n\n    this.preferences.filters = currentFilters;\n\n    const appliedSharedFilterPreset = state.advancedFiltering.appliedSharedFilterPreset;\n\n    this.preferences.appliedExternalFilterPresetGuid = appliedSharedFilterPreset && appliedSharedFilterPreset.id;\n\n    if (this.selectedViewPresetGuid) {\n      const selectedPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      const newPreset: IRecordGridViewPreset = {\n        viewPresetGuid: this.selectedViewPresetGuid,\n        columns: this.getColumnsPreferences(adaptTableConfig),\n        filters: isEmpty(currentFilters) ? null : currentFilters\n      };\n\n      if (isEqual(selectedPreset.initial, newPreset)) {\n        this.discardViewPresetChanges(this.selectedViewPresetGuid);\n      } else {\n        selectedPreset.edited = newPreset;\n      }\n    }\n\n    this.save(guid, this.preferences);\n  }\n\n  get(guid: string): Observable<IRecordGridUserPreferences> {\n    this.preferences = { ...this.initialPreferences };\n\n    return this.rxUserPreferencesService\n      .getUiComponentPreferences<IRecordGridUserPreferences>(guid)\n      .pipe(map((preferences) => assign(this.preferences, preferences)));\n  }\n\n  getAppliedSharedFilterPresetGuid(): string {\n    return this.preferences.appliedExternalFilterPresetGuid;\n  }\n\n  applyUserPreferencesForColumns(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    gridGuid: string\n  ): void {\n    const isColumnPreferencesUpdated = this.reviseColumnPreferences(this.preferences.columns, adaptTableConfig);\n\n    if (isColumnPreferencesUpdated) {\n      this.save(gridGuid, this.preferences);\n    }\n\n    let columnSortMeta = this.getColumnSortMeta(this.preferences.columns);\n\n    this.sortColumnsConfigs(adaptTableConfig.columns);\n\n    this.setColumnsWidths(adaptTableConfig.columns, this.preferences.columns, adaptTableConfig.columnResizeMode);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.field === sortMeta.field)\n    );\n\n    if (this.preferences.columns.length) {\n      adaptTableConfig.multiSortMeta = columnSortMeta;\n    }\n\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.setCardFieldsVisibility(adaptTableConfig.columns);\n    } else {\n      this.setColumnsVisibility(adaptTableConfig.columns, columnsWithMetadata);\n    }\n  }\n\n  private reviseColumnPreferences(\n    columnPreferences: IRecordGridColumnUserPreferences[],\n    { columns }: IAdaptTableConfig\n  ): boolean {\n    let isColumnPreferencesChanged = false;\n\n    if (columnPreferences.length) {\n      const existingAdaptColumnIds = _map(columns, 'field');\n      const removedReferences = remove(columnPreferences, ({ fieldId }) => !existingAdaptColumnIds.includes(fieldId));\n      let isSortingPreferencesChanged = removedReferences.some(({ sort }) => Boolean(sort));\n\n      const preferencesSize = columnPreferences.length;\n      const sortableColumnPreferences = [];\n\n      columns.forEach((tableColumn, index) => {\n        const columnPreference = find(columnPreferences, { fieldId: tableColumn.field });\n\n        if (columnPreference) {\n          // Nullish width can be saved to preferences for column without width customization or without resizing.\n          // Non-empty value appearing means the width is customized after previous preferences saving.\n          columnPreference.width ??= tableColumn.width;\n\n          if (tableColumn.sortable) {\n            sortableColumnPreferences.push(columnPreference);\n          } else if (columnPreference.sort) {\n            isSortingPreferencesChanged = true;\n          }\n        } else {\n          columnPreferences.splice(index, 0, {\n            fieldId: tableColumn.field,\n            index: index,\n            visible: !tableColumn.hidden,\n            width: tableColumn.width\n          });\n        }\n      });\n\n      if (isSortingPreferencesChanged) {\n        const sortMetaForSortableColumns = this.getColumnSortMeta(sortableColumnPreferences);\n\n        this.updateColumnSortPreferences(columnPreferences, sortMetaForSortableColumns);\n      }\n\n      isColumnPreferencesChanged =\n        !isEmpty(removedReferences) || preferencesSize < columnPreferences.length || isSortingPreferencesChanged;\n    }\n\n    return isColumnPreferencesChanged;\n  }\n\n  applyUserPreferences(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    state: IRecordGridState,\n    sharedFilterPresets?: IRxRecordGridSharedFilterPreset[]\n  ): Observable<any> {\n    if (!state.viewPresetSelector) {\n      this.applyUserPreferencesForColumns(adaptTableConfig, columnsWithMetadata, state.guid);\n    }\n\n    let observable$: Observable<any>;\n\n    if (state?.enableFiltering) {\n      let isFilterPresetDataChanged = false;\n      // Remove filter presets that do not have any filters left.\n      // These filters could have been removed as a result of removing a column,\n      // used by the filter, from the grid.\n      this.preferences.filterPresets.forEach((filterPreset) => {\n        const prevFilterDataLength = filterPreset.filterData?.and?.length;\n\n        filterPreset.filterData = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n          filterPreset.filterData,\n          columnsWithMetadata.filter((column) => column.filterable)\n        );\n\n        if (prevFilterDataLength !== filterPreset.filterData?.and?.length) {\n          isFilterPresetDataChanged = true;\n        }\n      });\n\n      this.preferences.filterPresets = this.preferences.filterPresets.filter(\n        (filterPreset) => !isEmpty(filterPreset.filterData)\n      );\n\n      const prevFilters = cloneDeep(this.preferences.filters?.and);\n\n      this.preferences.filters = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n        this.preferences.filters,\n        columnsWithMetadata.filter((column) => column.filterable)\n      );\n\n      if (\n        isFilterPresetDataChanged ||\n        this.preferences.filters?.and?.length !== prevFilters?.length ||\n        !isEqual(prevFilters, this.preferences.filters?.and)\n      ) {\n        this.save(state.guid, this.preferences);\n      }\n\n      state.advancedFiltering.savedFilters = this.getAdvancedFilterPresets(this.preferences.filterPresets, false);\n\n      state.predefinedFilterPresets = state.predefinedFilterPresets.filter(\n        (filterPreset) => !isNull(filterPreset.filters)\n      );\n\n      const predefinedFilterPresets: IRecordGridFilterPreset[] = state.predefinedFilterPresets\n        .map(\n          (predefinedFilterPreset): IRecordGridFilterPreset => ({\n            title: predefinedFilterPreset.title,\n            guid: predefinedFilterPreset.guid,\n            filterData: this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n              predefinedFilterPreset.filters,\n              this.rxRecordGridFilterService.deserializeNamedOptions(predefinedFilterPreset.recordGridFilters ?? [])\n            )\n          })\n        )\n        .filter((preset) => preset.filterData);\n\n      const builtInPresets = this.getAdvancedFilterPresets(predefinedFilterPresets, true);\n\n      state.advancedFiltering.savedFilters.push(...builtInPresets);\n\n      if (sharedFilterPresets) {\n        if (this.getAppliedSharedFilterPresetGuid()) {\n          const appliedSharedFilterPreset = find(sharedFilterPresets, { id: this.getAppliedSharedFilterPresetGuid() });\n\n          state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = appliedSharedFilterPreset;\n        }\n\n        state.advancedFiltering.savedFilters.push(...sharedFilterPresets);\n      }\n\n      const defaultBuiltInFilterPreset = isString(state.defaultFilterPreset)\n        ? find(builtInPresets, (builtInPreset) => builtInPreset.id === state.defaultFilterPreset)\n        : state.defaultFilterPreset;\n\n      const defaultSharedFilterPreset = find(sharedFilterPresets, (sharedFilterPreset) => sharedFilterPreset.isDefault);\n\n      if (!isEmpty(this.preferences.filters)) {\n        observable$ = this.rxRecordGridFilterService\n          .getAdvancedFilterData(\n            this.preferences.filters,\n            state.recordDefinition.fieldDefinitionsById,\n            state.advancedFiltering.recordGridFilterConfigs,\n            state.recordDefinition,\n            state.advancedFiltering.filterOptions,\n            state.associationDescriptors\n          )\n          .pipe(\n            tap((selectedAdvancedFilters) => {\n              // Remove named filter options that do not have any filters left.\n              // These filters could have been removed as a result of removing named filter option,\n              // used by the filter, from the grid.\n              const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n                selectedAdvancedFilters,\n                state.namedFilterOptions\n              );\n\n              state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                newSelectedAdvancedFilters,\n                adaptTableConfig.columns.filter((column) => column.filterable)\n              );\n\n              this.preferences.filters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n                state.advancedFiltering.selectedFilters,\n                state.recordDefinition.fieldDefinitionsById,\n                state.advancedFiltering.recordGridFilterConfigs\n              );\n\n              if (state.advancedFiltering.appliedSharedFilterPreset) {\n                this.addExternalPresetToSelectedFilters(state);\n              }\n            })\n          );\n      } else if (\n        this.rxObjectUtilsService.isEmptyObject(this.preferences.filters) &&\n        !state.advancedFiltering.appliedSharedFilterPreset\n      ) {\n        if (defaultSharedFilterPreset && !defaultBuiltInFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      } else if (isNull(this.preferences.filters) && !state.advancedFiltering.appliedSharedFilterPreset) {\n        if (defaultBuiltInFilterPreset) {\n          const defaultBuildInPresetFilterData: IRecordGridFilterData = isString(state.defaultFilterPreset)\n            ? (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filterData\n            : (defaultBuiltInFilterPreset as IRecordGridFilterData);\n\n          observable$ = this.rxRecordGridFilterService\n            .getAdvancedFilterData(\n              defaultBuildInPresetFilterData,\n              state.recordDefinition.fieldDefinitionsById,\n              state.advancedFiltering.recordGridFilterConfigs,\n              state.recordDefinition,\n              state.advancedFiltering.filterOptions,\n              state.associationDescriptors\n            )\n            .pipe(\n              tap((selectedAdvancedFilters) => {\n                state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                  selectedAdvancedFilters,\n                  adaptTableConfig.columns\n                );\n\n                if (isString(state.defaultFilterPreset)) {\n                  (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filters =\n                    state.advancedFiltering.selectedFilters;\n                  state.advancedFiltering.activeSavedFilter =\n                    defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter;\n                }\n              })\n            );\n        } else if (defaultSharedFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      }\n\n      if (state.advancedFiltering.appliedSharedFilterPreset) {\n        this.addExternalPresetToSelectedFilters(state);\n      }\n    }\n\n    return observable$ || of(null);\n  }\n\n  applySharedViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string,\n    viewPresetData: IRecordGridSharedViewPreset\n  ) {\n    if (!this.preferences.viewPresets[viewPresetGuid]) {\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...viewPresetData,\n          viewPresetGuid\n        }\n      };\n    } else {\n      // updating initial and keeping user changes\n      this.preferences.viewPresets[viewPresetGuid].initial = {\n        ...viewPresetData,\n        viewPresetGuid\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  applyViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string\n  ): Observable<any> {\n    const systemViewPreset = gridState.viewPresets.find((preset) => preset.viewPresetGuid === viewPresetGuid);\n\n    if (systemViewPreset && !has(this.preferences.viewPresets, [viewPresetGuid, 'edited'])) {\n      // create/update the initial system view preset preferences\n      const newViewPresetPreferences = this.createSystemViewPresetPreferences(\n        systemViewPreset,\n        gridState.columnsWithMetadata\n      );\n\n      this.preferences.viewPresets[viewPresetGuid] = { initial: newViewPresetPreferences };\n    } else if (!this.preferences.viewPresets[viewPresetGuid] && this.selectedViewPresetGuid) {\n      // save existing view preset preferences as new custom view preset preferences\n      const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...cloneDeep(selectedViewPreset.edited || selectedViewPreset.initial),\n          viewPresetGuid\n        }\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    adaptTableConfig: IAdaptTableConfig,\n    gridState: IRecordGridState\n  ) {\n    const viewPresetPreferences = this.preferences.viewPresets[viewPresetGuid];\n    const presetToApply: IRecordGridViewPreset = viewPresetPreferences?.edited || viewPresetPreferences?.initial;\n    let observable$: Observable<any> = of(null);\n\n    if (presetToApply) {\n      this.selectedViewPresetGuid = presetToApply.viewPresetGuid;\n      this.updateColumnsOrder(adaptTableConfig.columns, presetToApply.columns);\n      this.updateColumnsVisibility(adaptTableConfig.columns, presetToApply.columns);\n      this.setColumnsWidths(adaptTableConfig.columns, presetToApply.columns, adaptTableConfig.columnResizeMode);\n      this.updateGridSorting(presetToApply, adaptTableConfig);\n\n      observable$ = this.rxRecordGridFilterService\n        .getAdvancedFilterData(\n          presetToApply.filters,\n          gridState.recordDefinition.fieldDefinitionsById,\n          gridState.advancedFiltering.recordGridFilterConfigs,\n          gridState.recordDefinition,\n          gridState.advancedFiltering.filterOptions,\n          gridState.associationDescriptors\n        )\n        .pipe(\n          tap((selectedAdvancedFilters) => {\n            const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n              selectedAdvancedFilters,\n              gridState.namedFilterOptions\n            );\n\n            gridState.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n              newSelectedAdvancedFilters,\n              adaptTableConfig.columns.filter((column) => column.filterable)\n            );\n          })\n        );\n    }\n\n    return observable$;\n  }\n\n  isCurrentViewPresetEdited(): boolean {\n    return Boolean(this.preferences.viewPresets[this.selectedViewPresetGuid]?.edited);\n  }\n\n  private addExternalPresetToSelectedFilters(state: IRecordGridState): void {\n    const selectedFilter = cloneDeep(state.advancedFiltering.selectedFilters);\n\n    selectedFilter.push({\n      filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n      value: state.advancedFiltering.appliedSharedFilterPreset.id as unknown as RxRecordGridAdvancedFilterValue\n    });\n\n    state.advancedFiltering.selectedFilters = selectedFilter;\n  }\n\n  private createSystemViewPresetPreferences(\n    sharedViewPreset: IGridViewPresetConfigData,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): IRecordGridViewPreset {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      sharedViewPreset.filters,\n      sharedViewPreset.recordGridFilters\n        ? this.rxRecordGridFilterService.deserializeNamedOptions(sharedViewPreset.recordGridFilters)\n        : []\n    );\n\n    const columns = sharedViewPreset.columnViewPresets\n      .sort((a, b) => a.index - b.index)\n      .map((columnViewPreset: IGridViewColumnProperties, index) => {\n        const width = has(columnViewPreset, 'width')\n          ? columnViewPreset.width\n          : find(columnsWithMetadata, { fieldId: columnViewPreset.fieldId })?.width ?? null;\n\n        const result: IRecordGridColumnUserPreferences = {\n          ...omit(columnViewPreset, 'sortable'),\n          index,\n          width\n        };\n\n        if (columnViewPreset.sortable) {\n          result.sort = {\n            priority: 0,\n            direction: columnViewPreset.sortable.direction\n          };\n        }\n\n        return result;\n      });\n\n    return cloneDeep({\n      columns,\n      filters: recordGridFilterData,\n      viewPresetGuid: sharedViewPreset.viewPresetGuid\n    } as IRecordGridViewPreset);\n  }\n\n  deleteViewPreset(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid];\n  }\n\n  isExistingViewPreset(viewPresetGuid: string): boolean {\n    return has(this.preferences.viewPresets, viewPresetGuid);\n  }\n\n  discardViewPresetChanges(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid]?.edited;\n  }\n\n  private updateGridSorting(presetPreferences: IRecordGridViewPreset, adaptTableConfig: IAdaptTableConfig): void {\n    let columnSortMeta = this.getColumnSortMeta(presetPreferences.columns);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.sortable && tableColumn.field === sortMeta.field)\n    );\n\n    adaptTableConfig.multiSortMeta = columnSortMeta;\n  }\n\n  private getAdvancedFilterPresets(\n    filterPresets: IRecordGridFilterPreset[],\n    isCreatedByOtherUsers: boolean\n  ): IRxRecordGridSavedAdvancedFilter[] {\n    return filterPresets\n      .map((filterPreset): IRxRecordGridSavedAdvancedFilter => {\n        const advancedFilterPreset: IRxRecordGridSavedAdvancedFilter = {\n          id: filterPreset.guid,\n          name: filterPreset.title,\n          filters: null,\n          filterData: filterPreset.filterData,\n          isCreatedByOtherUsers\n        };\n\n        if (filterPreset.appliedSharedFilterPresetGuid) {\n          advancedFilterPreset.appliedSharedFilterPresetGuid = filterPreset.appliedSharedFilterPresetGuid;\n\n          advancedFilterPreset.filters = [\n            {\n              filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n              value: filterPreset.appliedSharedFilterPresetGuid\n            }\n          ];\n        }\n\n        return advancedFilterPreset;\n      })\n      .sort((savedFilter1, savedFilter2) => savedFilter1.name.localeCompare(savedFilter2.name));\n  }\n\n  private getColumnsPreferences({ columns, multiSortMeta }: IAdaptTableConfig): IRecordGridColumnUserPreferences[] {\n    const columnPreferences = columns.map(({ field, hidden, width }, index) => {\n      const column: IRecordGridColumnUserPreferences = {\n        fieldId: field,\n        index,\n        visible: !hidden,\n        width\n      };\n\n      return column;\n    });\n\n    this.updateColumnSortPreferences(columnPreferences, multiSortMeta);\n\n    return columnPreferences;\n  }\n\n  private getPreferencesFilterPresets(\n    savedFilter: IRxRecordGridSavedAdvancedFilter,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs\n  ): IRecordGridFilterPreset {\n    const filterPreset: IRecordGridFilterPreset = {\n      guid: savedFilter.id,\n      title: savedFilter.name,\n      filterData: savedFilter.filters\n        ? this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n            savedFilter.filters,\n            fieldDefinitionsById,\n            recordGridFilterConfigs\n          )\n        : savedFilter.filterData\n    };\n\n    if (savedFilter.appliedSharedFilterPresetGuid) {\n      filterPreset.appliedSharedFilterPresetGuid = savedFilter.appliedSharedFilterPresetGuid;\n    }\n\n    return filterPreset;\n  }\n\n  private getVisibleCardFieldIds({ columns, multiSortMeta }: IAdaptTableConfig): (number | string)[] {\n    this.updateColumnSortPreferences(this.preferences.columns, multiSortMeta);\n\n    return columns.filter((column) => !column.hidden).map((column) => parseInt(column.field, 10) || column.field);\n  }\n\n  private updateColumnSortPreferences(columns: IRecordGridColumnUserPreferences[], sortMeta: SortMeta[]): void {\n    if (sortMeta) {\n      columns.forEach((column) => {\n        delete column.sort;\n      });\n\n      sortMeta.forEach(({ field, order }, index) => {\n        const sortedColumn = columns.find((column) => column.fieldId === field);\n\n        if (sortedColumn) {\n          sortedColumn.sort = {\n            priority: index,\n            direction: this.recordGridConfigUtilsService.getColumnSortDirection(order)\n          };\n        }\n      });\n    }\n  }\n\n  private save(guid: string, preferences: IRecordGridUserPreferences): void {\n    if (guid) {\n      const data = {\n        preferences: JSON.stringify(preferences),\n        componentTypeName: RX_RECORD_GRID.type,\n        version: RX_RECORD_GRID.version,\n        componentId: guid\n      };\n\n      this.rxUserPreferencesService.setUiComponentPreferences(data, guid).subscribe();\n    }\n  }\n\n  private sortColumnsConfigs(gridColumns: ColumnConfig[]): void {\n    this.updateColumnsOrder(gridColumns, this.preferences.columns);\n  }\n\n  private updateColumnsOrder(gridColumns: ColumnConfig[], columnsPreferences: { fieldId: string; index: number }[]) {\n    const columnIndexesMap = reduce(\n      gridColumns,\n      (result: { [field: string]: number }, column, columnIndex) => {\n        const columnSavedPreferences = find(\n          columnsPreferences,\n          (columnPreferences) => columnPreferences.fieldId === column.field\n        );\n\n        if (columnSavedPreferences) {\n          result[column.field] = columnSavedPreferences.index;\n        } else {\n          result[column.field] = columnIndex;\n        }\n\n        return result;\n      },\n      {}\n    );\n\n    gridColumns.sort((column1, column2) => columnIndexesMap[column1.field] - columnIndexesMap[column2.field]);\n  }\n\n  private setColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): void {\n    const columnsPreferences = this.preferences.columns;\n\n    if (isEmpty(columnsPreferences)) {\n      gridColumns.forEach((gridColumn) => {\n        const columnWithMetadata = find(columnsWithMetadata, (column) => column.fieldId === gridColumn.field);\n\n        gridColumn.hidden = columnWithMetadata ? !columnWithMetadata.visible : false;\n      });\n    } else {\n      this.updateColumnsVisibility(gridColumns, columnsPreferences);\n    }\n  }\n\n  private updateColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean }[]\n  ): void {\n    gridColumns.forEach((column) => {\n      const preferences = find(columnsPreferences, (columnPreferences) => columnPreferences.fieldId === column.field);\n\n      if (preferences) {\n        column.hidden = !preferences.visible;\n      }\n    });\n  }\n\n  private setColumnsWidths(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean; width?: string }[],\n    columnResizeMode: ResizeMode\n  ): void {\n    if (columnsPreferences.length) {\n      gridColumns.forEach((column) => {\n        const preferences = find(columnsPreferences, { fieldId: column.field });\n\n        // Default measure unit of native html table is px, but outdated user preferences use %.\n        // Only px units are supported in Expand mode.\n        if (preferences) {\n          const isColumnWidthInPixels = endsWith(preferences.width, 'px');\n\n          if (columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels) {\n            column.width = null;\n            column.minWidth = null;\n          } else {\n            column.width = /[0-9]+$/.test(preferences.width) ? `${preferences.width}%` : preferences.width;\n\n            if (isColumnWidthInPixels && parseInt(column.width) < 45) {\n              column.minWidth = column.width as ValueOrFunc1<`${number}px`>;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private setCardFieldsVisibility(gridColumns: ColumnConfig[]): void {\n    const visibleCardFieldIds = this.preferences.visibleCardFieldIds;\n\n    if (isEmpty(visibleCardFieldIds)) {\n      const defaultVisibleColumnsCount = 5;\n      let visibleColumnsCount = 0;\n\n      gridColumns.forEach((column) => {\n        if (visibleColumnsCount >= defaultVisibleColumnsCount) {\n          column.hidden = true;\n\n          return;\n        }\n\n        if (!column.hidden) {\n          visibleColumnsCount++;\n        }\n      });\n    } else {\n      gridColumns.forEach(\n        (column) => (column.hidden = !some(visibleCardFieldIds, (field) => String(field) === column.field))\n      );\n    }\n  }\n\n  private getColumnSortMeta(columnPreferences: IRecordGridColumnUserPreferences[]): SortMeta[] {\n    return flow(\n      (columns: IRecordGridColumnUserPreferences[]) => filter(columns, 'sort'),\n      (columns) => sortBy(columns, 'sort.priority'),\n      (columns) =>\n        _map(columns, (column) => ({\n          field: column.fieldId,\n          order: this.recordGridConfigUtilsService.getColumnSortOrder(column.sort.direction)\n        }))\n    )(columnPreferences);\n  }\n\n  private getFiltersForSelectedColumns(\n    advancedFilters: SelectedAdvancedFilter[],\n    gridColumns: ColumnConfig[]\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters.filter((advancedFilter) => some(gridColumns, { field: advancedFilter.filterOptionId }));\n  }\n\n  private getFilterForAvailableNamedFilterOptions(\n    advancedFilters: SelectedAdvancedFilter[],\n    availableNamedFilters: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters\n      .map((advancedFilter: SelectedAdvancedFilter) => {\n        advancedFilter.value.namedOptions = !isEmpty(availableNamedFilters)\n          ? advancedFilter.value.namedOptions.filter((namedFilterOptionGuid) =>\n              some(availableNamedFilters[Number(advancedFilter.filterOptionId)], { guid: namedFilterOptionGuid })\n            )\n          : [];\n\n        return advancedFilter;\n      })\n      .filter((advancedFilter) => !RxRecordGridAdvancedFilterValue.isEmptyWithRange(advancedFilter.value));\n  }\n\n  saveViewPreset(viewPresetGuid: string): void {\n    const preset = this.preferences.viewPresets[viewPresetGuid];\n\n    if (preset?.edited) {\n      preset.initial = cloneDeep(preset.edited);\n      delete preset.edited;\n    }\n  }\n\n  getSharedViewPresetData(): IRecordGridSharedViewPreset {\n    const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n    const presetData = selectedViewPreset.edited || selectedViewPreset.initial;\n\n    return {\n      columns: presetData.columns,\n      filters: presetData.filters\n    };\n  }\n}\n"]}