{"version":3,"file":"rich-text-expression-evaluator.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rich-text/runtime/rich-text-expression-evaluator.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAwB,mCAAmC,EAAE,MAAM,0BAA0B,CAAC;AACrG,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;;;AAG/B,MAAM,OAAO,oCAAoC;IAC/C,YAAoB,mCAAwE;QAAxE,wCAAmC,GAAnC,mCAAmC,CAAqC;IAAG,CAAC;IAEhG,QAAQ,CAAC,UAAkB,EAAE,IAAY;QACvC,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC;QAEnC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,YAAY,CAAC,uBAAuB,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC7F,MAAM,mBAAmB,GAAG,IAAI,CAAC,mCAAmC,CAAC,QAAQ,CAC3E,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,uBAAuB,CAAC,EACvD,IAAI,CACL,CAAC;YAEF,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;YAEhG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,SAAS,CAAC;IAC/B,CAAC;;iIAnBU,oCAAoC;qIAApC,oCAAoC;2FAApC,oCAAoC;kBADhD,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { isNil } from 'lodash';\n\n@Injectable()\nexport class RxRichTextExpressionEvaluatorService implements IExpressionEvaluator {\n  constructor(private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService) {}\n\n  evaluate(expression: string, data: object): string {\n    const tempElement = document.createElement('div');\n    tempElement.innerHTML = expression;\n\n    tempElement.querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`).forEach((span) => {\n      const evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(\n        span.getAttribute(RX_RICH_TEXT.expressionAttributeName),\n        data\n      );\n\n      const textNode = document.createTextNode(isNil(evaluatedExpression) ? '' : evaluatedExpression);\n\n      span.parentElement.replaceChild(textNode, span);\n    });\n\n    return tempElement.innerHTML;\n  }\n}\n"]}