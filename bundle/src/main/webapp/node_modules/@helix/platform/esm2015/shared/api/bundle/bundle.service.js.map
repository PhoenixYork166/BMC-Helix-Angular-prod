{"version":3,"file":"bundle.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/bundle/bundle.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Compiler, Inject, Injectable, Injector } from '@angular/core';\nimport { camelCase, includes, upperFirst } from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RxGlobalCacheService } from '../caching/global-cache.service';\nimport { IHttpGetParams } from '../http/http.interfaces';\nimport { RxLogService } from '../logging/log.service';\nimport { RxBundleLoadType } from './bundle-load.types';\nimport { IBundleContext, IBundleDescriptor } from './bundle.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxBundleService {\n  private baseUrl = '/api/rx/application/bundle/bundledescriptor/';\n  private bundleJs = {};\n  private bundleCss = {};\n\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    private compiler: Compiler,\n    private httpClient: HttpClient,\n    private injector: Injector,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxLogService: RxLogService\n  ) {}\n\n  get(bundleId: string, options?: IHttpGetParams): Observable<IBundleDescriptor> {\n    const url = this.baseUrl + bundleId;\n\n    return this.httpClient.get<IBundleDescriptor>(url, options);\n  }\n\n  // During login we issue a call to bundle descriptor rest api to get the current bundle\n  // information. If the user is not logged in yet we have to call the jsonp\n  // version that does not return an object but a method passing the object:\n  // rxLoadBundles({...}).\n  // Since we do not have this method in Angular (not in bootstrap.js), the workaround is to\n  // read the jsonp answer as text, extract the content withing the method call using regexp\n  // and then parse the bundle descriptor object.\n  getFromJsonp(bundleId: string): Observable<IBundleDescriptor> {\n    return this.httpClient.get(this.baseUrl + bundleId + '/jsonp', { responseType: 'text' }).pipe(\n      map((jsonpResult) => {\n        return JSON.parse(/\\(([^)]+)\\)/.exec(jsonpResult)[1]);\n      })\n    );\n  }\n\n  loadBundles(bundleIds: string[], force: boolean): Observable<IBundleContext[]> {\n    const loaders$ = bundleIds.map((bundleId) =>\n      this.rxGlobalCacheService.getBundleDescriptor(bundleId).pipe(\n        tap((bundleDescriptor) => {\n          if (\n            force ||\n            bundleDescriptor.uiOptions.options.loadCss === RxBundleLoadType.always ||\n            includes(bundleDescriptor.uiOptions.applicationInitializers, this.rxGlobalCacheService.applicationId)\n          ) {\n            this.loadBundleCss(bundleDescriptor);\n          }\n        }),\n        switchMap((bundleDescriptor) =>\n          force ||\n          bundleDescriptor.uiOptions.options.loadJs === RxBundleLoadType.always ||\n          includes(bundleDescriptor.uiOptions.applicationInitializers, this.rxGlobalCacheService.applicationId)\n            ? this.loadBundle(bundleDescriptor)\n            : of({ bundleId: bundleDescriptor.id, isBundleCompiled: false, isFileLoaded: false })\n        )\n      )\n    );\n\n    return forkJoin(loaders$);\n  }\n\n  private loadBundle(bundleDescriptor: IBundleDescriptor): Observable<IBundleContext> {\n    if (!this.bundleJs[bundleDescriptor.id]) {\n      this.bundleJs[bundleDescriptor.id] = this.loadBundleJs(bundleDescriptor).pipe(\n        switchMap((bundleContext: IBundleContext) => this.compileBundle(bundleContext)),\n        shareReplay(1)\n      );\n    }\n\n    return this.bundleJs[bundleDescriptor.id];\n  }\n\n  private compileBundle(bundleContext: IBundleContext): Observable<IBundleContext> {\n    return new Observable((observer) => {\n      if (bundleContext.isFileLoaded) {\n        bundleContext.module.then((module) => {\n          const moduleName = `${upperFirst(camelCase(bundleContext.bundleId))}Module`;\n\n          try {\n            const factory = this.compiler.compileModuleSync(module[moduleName]);\n\n            if (factory) {\n              factory.create(this.injector);\n              bundleContext.isBundleCompiled = true;\n\n              this.rxLogService.debug(`${bundleContext.bundleId}: loaded successfully.`);\n            } else {\n              this.rxLogService.error(\n                `ERROR! ${bundleContext.bundleId}: cannot find module factory for ${moduleName}.`\n              );\n            }\n          } catch (error) {\n            this.rxLogService.error(`ERROR! ${bundleContext.bundleId}:\\n${error}`);\n          }\n\n          observer.next(bundleContext);\n          observer.complete();\n        });\n      } else {\n        this.rxLogService.error(\n          `ERROR! ${bundleContext.bundleId}:\\n${bundleContext.message?.stack ?? bundleContext.message}`\n        );\n\n        observer.next(bundleContext);\n        observer.complete();\n      }\n    });\n  }\n\n  private loadBundleJs(bundleDescriptor: IBundleDescriptor): Observable<IBundleContext> {\n    const dasherizedBundleId = bundleDescriptor.id.replace(/\\./g, '-');\n    const cacheBuster = new Date(bundleDescriptor.lastDeployedTime).getTime();\n    const fileName = `../${bundleDescriptor.id}/scripts/libs_${dasherizedBundleId}_src_index_ts.js?_v=${cacheBuster}`;\n    const modulePathMapping = `./libs/${dasherizedBundleId}/src/index.ts`;\n\n    this.rxLogService.debug(`${bundleDescriptor.id}: loading from ${fileName}.`);\n\n    // WARNING! webpackIgnore comment below is critical for dynamic imports to work, DO NOT REMOVE!\n    const module = import(/* webpackIgnore: true */ `${fileName}`).then(\n      // WARNING! comment below is critical for dynamic imports to work, DO NOT REMOVE!\n      // @ts-ignore\n      __webpack_require__.bind(null, `${modulePathMapping}`)\n    );\n\n    return new Observable<IBundleContext>((observer) => {\n      module.then(\n        () => {\n          observer.next({\n            bundleId: bundleDescriptor.id,\n            isBundleCompiled: false,\n            isFileLoaded: true,\n            module: module\n          });\n\n          observer.complete();\n        },\n        (error: Error) => {\n          observer.next({\n            bundleId: bundleDescriptor.id,\n            isBundleCompiled: false,\n            isFileLoaded: false,\n            message: error\n          });\n\n          observer.complete();\n        }\n      );\n    });\n  }\n\n  private loadBundleCss(bundleDescriptor: IBundleDescriptor): void {\n    if (!this.bundleCss[bundleDescriptor.id]) {\n      const cacheBuster = new Date(bundleDescriptor.lastDeployedTime).getTime();\n      const link = document.createElement('link');\n\n      link.id = bundleDescriptor.id;\n      link.href = `/${bundleDescriptor.id}/scripts/${bundleDescriptor.id.replace(/\\./g, '-')}.css?_v=${cacheBuster}`;\n      link.type = 'text/css';\n      link.rel = 'stylesheet';\n\n      this.document.head.appendChild(link);\n      this.bundleCss[bundleDescriptor.id] = true;\n    }\n  }\n}\n"]}