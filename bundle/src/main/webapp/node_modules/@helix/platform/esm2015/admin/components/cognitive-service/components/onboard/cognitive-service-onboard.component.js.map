{"version":3,"file":"cognitive-service-onboard.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-service/components/onboard/cognitive-service-onboard.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-service/components/onboard/cognitive-service-onboard.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAU,SAAS,EAAE,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,kBAAkB,EAAkC,MAAM,uBAAuB,CAAC;AAC3G,OAAO,EAAE,+BAA+B,EAAE,MAAM,4BAA4B,CAAC;AAC7E,OAAO,EAIL,UAAU,EACV,uBAAuB,EACvB,qBAAqB,EACrB,4BAA4B,EAC7B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACtE,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;AAExE,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;;;;;;;;;;AAM5E,MAAM,OAAO,gCAAiC,SAAQ,YAAY;IAwBhE,YACU,kBAAsC,EACtC,yBAAoD,EACpD,uBAAgD,EAChD,cAA8B,EAC9B,qBAA4C,EAC5C,+BAAgE,EAChE,4BAA0D,EAC1D,gBAAkC,EAChC,QAAkB;QAE5B,KAAK,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAV5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,mBAAc,GAAd,cAAc,CAAgB;QAC9B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,oCAA+B,GAA/B,+BAA+B,CAAiC;QAChE,iCAA4B,GAA5B,4BAA4B,CAA8B;QAC1D,qBAAgB,GAAhB,gBAAgB,CAAkB;QAChC,aAAQ,GAAR,QAAQ,CAAU;QAvB9B,gCAA2B,GAAqB,oBAAoB,CAAC,OAAO,CAAC,sBAAsB,CAAC;QACpG,sBAAiB,GAAqB,CAAC,oBAAoB,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/F,YAAO,GAAqB,oBAAoB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,iCACxE,MAAM,KACT,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAChD,CAAC,CAAC;QAEJ,qBAAgB,GAAmC,EAAE,CAAC;QAG9C,qBAAgB,GAAW,oBAAoB,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrF,qBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,6CAA6C,CAAC,CAAC;QAqFxG,oBAAe,GAAG,CAAC,gBAAgC,EAAU,EAAE;YAC7D,OAAO,GAAG,CAAC,gBAAgB,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9D,CAAC,CAAC;IAzEF,CAAC;IAED,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEjB,MAAM,MAAM,GAAoB;YAC9B,gBAAgB,EAAE,UAAU,CAAC,cAAc,CAAC,oBAAoB;YAChE,eAAe,EAAE,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,kBAAkB,MAAM,UAAU,CAAC,gBAAgB,GAAG;YAC9G,iBAAiB,EAAE;gBACjB,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,kBAAkB;gBACrD,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,gBAAgB;aACpD;SACF,CAAC;QAEF,QAAQ,CAAC;YACP,0BAA0B,EAAE,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAC5E,oBAAoB,CAAC,WAAW,CAAC,iBAAiB,CAAC,0BAA0B,CAC9E;YACD,uBAAuB,EAAE,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CACzE,oBAAoB,CAAC,uBAAuB,CAAC,iBAAiB,CAC/D;YACD,UAAU,EAAE,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC;gBACpD,MAAM;aACP,CAAC;SACH,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YACtB,IAAI,CAAC,gBAAgB,GAAG,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAE7F,IAAI,CAAC,wBAAwB,CAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,0BAA0B,CAAC,KAAe,CAAC,EAC7D,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,uBAAuB,CAAC,KAAe,CAAC,CAC3D,CAAC;YAEF,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtD,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,oCAAoC,CAAC,KAAK,CAAC;IACzD,CAAC;IAEO,wBAAwB,CAAC,WAA2B,EAAE,cAA8B;QAC1F,MAAM,uBAAuB,GAAG,cAAc,CAAC,oBAAoB,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAE9G,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE;YAC1D,aAAa,CAAC,MAAM,GAAG,GAAG,CACxB,WAAW,CAAC,oBAAoB,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAC1E,aAAa,CAAC,kBAAkB,EAChC,EAAE,CACH,CAAC;YAEF,IAAI,GAAG,CAAC,uBAAuB,EAAE,SAAS,CAAC,EAAE;gBAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC;gBAEpG,aAAa,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,wBAAwB,CAAC,OAAuB;QACtD,MAAM,SAAS,GAAW,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;QAE/G,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACrH,CAAC;IAEO,yBAAyB;QAC/B,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAE,EAAE;YAC/C,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACL,CAAC;IAMD,uBAAuB;QACrB,OAAO,CACL,IAAI,CAAC,sBAAsB;YAC3B,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,WAAW,CAAC;YACzC,IAAI,CAAC,oCAAoC,CAAC,QAAQ;YAClD,IAAI,CAAC,oCAAoC,CAAC,OAAO,CAClD,CAAC;IACJ,CAAC;IAED,KAAK;QACH,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO;QACL,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACnC,MAAM,eAAe,GAAiB,EAAE,CAAC;QAEzC,eAAe,CAAC,oBAAoB,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,SAAS,CACxF,IAAI,CAAC,gBAAgB,EACrB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAChB,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,EAAE;gBACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;aAClE;QACH,CAAC,EACD,EAAE,CACH,CAAC;QAEF,IAAI,CAAC,uBAAuB;aACzB,eAAe,CAAC,sFAAsF,CAAC;aACvG,OAAO,CAAC,EAAE,kCAAkC,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,CAAC;aAChF,IAAI,CACH,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;YAEpC,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CACH;aACA,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,yBAAyB,EAAE,CAAC;YAEjC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAC1F,CAAC;YAEF,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAChE,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iBAAiB;QACf,OAAO,CAAC,CAAC;IACX,CAAC;;6HAnKU,gCAAgC;iHAAhC,gCAAgC,6SAOgB,MAAM,kECjCnE,ilHAkGA;2FDxEa,gCAAgC;kBAJ5C,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,4CAA4C;iBAC1D;uYAGC,eAAe;sBADd,KAAK;gBAIN,qBAAqB;sBADpB,KAAK;gBAIN,oCAAoC;sBADnC,SAAS;uBAAC,sCAAsC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE","sourcesContent":["import { Component, Injector, Input, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { DismissReasons, DockedPanelContext, KeyValueObject, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport {\n  IDataPageParams,\n  IPlainObject,\n  IUserOverlayGroupDescriptorChildren,\n  RX_CHATBOT,\n  RxCommandFactoryService,\n  RxNotificationService,\n  RxSystemConfigurationService\n} from '@helix/platform/shared/api';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\nimport { forEach, get, some, transform } from 'lodash';\nimport { forkJoin, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { RX_COGNITIVE_SERVICE } from '../../cognitive-service.constant';\nimport { IServiceConfig } from '../../cognitive-service.interfaces';\nimport { RxCognitiveServiceService } from '../../cognitive-service.service';\n\n@Component({\n  selector: 'rx-cognitive-service-onboard',\n  templateUrl: './cognitive-service-onboard.component.html'\n})\nexport class CognitiveServiceOnboardComponent extends RxModalClass implements OnInit {\n  @Input()\n  isAdministrator: boolean;\n\n  @Input()\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren;\n\n  @ViewChild('ownCognitivePoviderConfigurationForm', { read: NgForm, static: true })\n  ownCognitivePoviderConfigurationForm: NgForm;\n\n  supportedCognitiveProviders: RxSelectOption[] = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList;\n  cognitiveProvider: [RxSelectOption] = [RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0]];\n\n  regions: RxSelectOption[] = RX_COGNITIVE_SERVICE.regionsList.map((region) => ({\n    ...region,\n    name: this.translateService.instant(region.name)\n  }));\n\n  providerServices: KeyValueObject<IServiceConfig> = {};\n  isOnboardingInProgress: boolean;\n\n  private defaultServiceId: string = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0].id;\n  private defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');\n\n  constructor(\n    private dockedPanelContext: DockedPanelContext,\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxModalService: RxModalService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(dockedPanelContext, injector);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    const params: IDataPageParams = {\n      recorddefinition: RX_CHATBOT.chatbotLocales.recordDefinitionName,\n      queryExpression: `'${RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId}'=\"${RX_CHATBOT.defaultChatbotId}\"`,\n      propertySelection: [\n        RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId,\n        RX_CHATBOT.chatbotLocales.fieldIds.providerPassword\n      ]\n    };\n\n    forkJoin({\n      cognitiveServiceCredential: this.rxSystemConfigurationService.getConfiguration(\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential\n      ),\n      cognitiveServiceRegions: this.rxSystemConfigurationService.getConfiguration(\n        RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey\n      ),\n      botLocales: this.rxRecordInstanceDataPageService.post({\n        params\n      })\n    }).subscribe((result) => {\n      this.providerServices = RX_COGNITIVE_SERVICE.onboard.providerServices[this.defaultServiceId];\n\n      this.loadCredentialAndRegions(\n        JSON.parse(result.cognitiveServiceCredential.value as string),\n        JSON.parse(result.cognitiveServiceRegions.value as string)\n      );\n\n      this.setBotLocaleConversation(result.botLocales.data);\n      this.loadServiceProviderApiKey();\n    });\n  }\n\n  isDirty(): boolean {\n    return this.ownCognitivePoviderConfigurationForm.dirty;\n  }\n\n  private loadCredentialAndRegions(credentials: KeyValueObject, serviceRegions: KeyValueObject): void {\n    const cognitiveServiceRegions = serviceRegions[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]];\n\n    forEach(this.providerServices, (serviceConfig, serviceId) => {\n      serviceConfig.apiKey = get(\n        credentials[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]],\n        serviceConfig.apiKeyPropertyName,\n        ''\n      );\n\n      if (get(cognitiveServiceRegions, serviceId)) {\n        const regionValue = this.regions.find((region) => region.id === cognitiveServiceRegions[serviceId]);\n\n        serviceConfig.region = [regionValue];\n      }\n    });\n  }\n\n  private setBotLocaleConversation(locales: KeyValueObject): void {\n    const localeKey: string = RX_COGNITIVE_SERVICE.onboard.providerServices[this.defaultServiceId].conversation.id;\n\n    this.providerServices[localeKey].apiKey = get(locales[0], RX_CHATBOT.chatbotLocales.fieldIds.providerPassword, '');\n  }\n\n  private loadServiceProviderApiKey(): void {\n    forEach(this.providerServices, (serviceConfig) => {\n      serviceConfig.isEnabled = serviceConfig.hasApiKey = Boolean(serviceConfig.apiKey);\n    });\n  }\n\n  optionFormatter = (regionNameOption: RxSelectOption): string => {\n    return get(regionNameOption, 'name', this.defaultSelection);\n  };\n\n  isOnboardButtonDisabled(): boolean {\n    return (\n      this.isOnboardingInProgress ||\n      !some(this.providerServices, 'isEnabled') ||\n      this.ownCognitivePoviderConfigurationForm.pristine ||\n      this.ownCognitivePoviderConfigurationForm.invalid\n    );\n  }\n\n  close(): void {\n    this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onboard(): void {\n    this.isOnboardingInProgress = true;\n    const onboardSettings: IPlainObject = {};\n\n    onboardSettings[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]] = transform(\n      this.providerServices,\n      (result, value) => {\n        if (!value.hasApiKey && value.isEnabled) {\n          result[value.apiKeyPropertyName] = value.apiKey;\n          result[value.regionPropertyName] = get(value.region, '0.id', '');\n        }\n      },\n      {}\n    );\n\n    this.rxCommandFactoryService\n      .forResourceType('com.bmc.arsys.rx.application.cognitive.command.ConfigureOwnCognitiveProvidersCommand')\n      .execute({ ownCognitiveProvidersConfiguration: JSON.stringify(onboardSettings) })\n      .pipe(\n        catchError((err) => {\n          this.isOnboardingInProgress = false;\n\n          return throwError(err);\n        })\n      )\n      .subscribe(() => {\n        this.loadServiceProviderApiKey();\n\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceOnboarded)\n        );\n\n        this.ownCognitivePoviderConfigurationForm.form.markAsPristine();\n        this.isOnboardingInProgress = false;\n      });\n  }\n\n  keepKeyValueOrder(): number {\n    return 0;\n  }\n}\n","<div class=\"dp-body\">\n  <form #ownCognitivePoviderConfigurationForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        <adapt-rx-select\n          name=\"cognitiveProvider\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-provider.label' | translate }}\"\n          rx-id=\"cognitive-provider\"\n          [options]=\"supportedCognitiveProviders\"\n          [optionFormatter]=\"optionFormatter\"\n          [(ngModel)]=\"cognitiveProvider\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-sm-12\">\n        <div class=\"mt-2 mb-2\">\n          {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.instructions.label' | translate }}\n        </div>\n\n        <div class=\"card p-3 mb-3\" *ngFor=\"let service of providerServices | keyvalue: keepKeyValueOrder\">\n          <adapt-rx-switch\n            class=\"form-group\"\n            [name]=\"service.key + 'ProviderEnable'\"\n            [attr.rx-id]=\"'enable-cognitive-service-provider-' + service.key\"\n            [label]=\"service.value.switchLabel | translate\"\n            [(ngModel)]=\"service.value.isEnabled\"\n            [disabled]=\"service.value.hasApiKey\"\n            [tooltip]=\"\n              service.value.tooltipText\n                ? {\n                    iconName: 'question_circle_o',\n                    content: service.value.tooltipText | translate,\n                    placement: 'bottom',\n                    popoverMode: true\n                  }\n                : null\n            \"\n          ></adapt-rx-switch>\n\n          <adapt-rx-select\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.region.label' | translate }}\"\n            emptyOption=\"true\"\n            [name]=\"service.key + 'ProviderRegion'\"\n            [attr.rx-id]=\"'cognitive-service-provider-region-' + service.key\"\n            [options]=\"regions\"\n            [optionFormatter]=\"optionFormatter\"\n            [(ngModel)]=\"service.value.region\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-textfield\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label' | translate }}\"\n            maxlength=\"254\"\n            required=\"true\"\n            [isPassword]=\"true\"\n            [name]=\"service.key + 'ProviderApiKey'\"\n            [attr.rx-id]=\"'cognitive-service-provider-' + service.key + '-api-key'\"\n            [(ngModel)]=\"service.value.apiKey\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-textfield>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer align-items-end\">\n  <div>\n    <button\n      adapt-button\n      btn-type=\"primary\"\n      type=\"button\"\n      class=\"mr-2\"\n      activeText=\"Onboarding...\"\n      rx-id=\"onboarding-button\"\n      [adaptInlineLoader]=\"isOnboardingInProgress\"\n      [disabled]=\"isOnboardButtonDisabled()\"\n      (click)=\"onboard()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.button.onboard.label' | translate }}\n    </button>\n    <button\n      adapt-button\n      btn-type=\"secondary\"\n      type=\"button\"\n      rx-id=\"close-button\"\n      (click)=\"close()\"\n      [disabled]=\"isOnboardingInProgress\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</div>\n"]}