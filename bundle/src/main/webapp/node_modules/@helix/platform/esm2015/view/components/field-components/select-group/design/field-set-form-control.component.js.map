{"version":3,"file":"field-set-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.ts","../../../../../../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, Input, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { IFormWidgetComponent } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { omit } from 'lodash';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectGroupFieldProperties, ISelectGroupFormControlOptions } from './select-group-design.types';\nimport { SelectGroupDesignModel } from './select-group-design.model';\n\ninterface IFieldFormGroup extends ISelectGroupFieldProperties {\n  optionFilterFieldId: string;\n  sourceRecordDefinitionName: string;\n}\n\n@Component({\n  selector: 'rx-field-set-form-control',\n  templateUrl: './field-set-form-control.component.html',\n  styleUrls: ['./field-set-form-control.component.scss']\n})\nexport class FieldSetFormControlComponent\n  extends InspectorWidgetBase<ISelectGroupFormControlOptions, SelectGroupDesignModel>\n  implements OnDestroy, OnInit, IFormWidgetComponent\n{\n  @Input()\n  options: ISelectGroupFormControlOptions;\n\n  @Input()\n  isDisabled: boolean;\n\n  formArray = this.formBuilder.array([]);\n  valueChangeSubscription: Subscription;\n\n  private maxSelectGroupFieldCount = 6;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxGuidService: RxGuidService,\n    private rxModalService: RxModalService,\n    injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.fieldProperties$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((fieldModels) => this.onWriteValue(fieldModels));\n\n    this.setDisabledState(this.isDisabled);\n  }\n\n  onWriteValue(fieldModels: ISelectGroupFieldProperties[]): void {\n    this.valueChangeSubscription?.unsubscribe();\n\n    const formGroups = fieldModels\n      .sort((a, b) => Number(a.index) - Number(b.index))\n      .map((model) =>\n        this.formBuilder.group({\n          ...omit(model, 'index'),\n          sourceRecordDefinitionName: { value: null, disabled: true }\n        })\n      );\n\n    this.formArray = this.formBuilder.array(formGroups);\n\n    this.valueChangeSubscription = this.formArray.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(this.onFormValueChange.bind(this));\n  }\n\n  private onFormValueChange(formValue: IFieldFormGroup[]): void {\n    const value = formValue.map((formGroup, index) => {\n      const inspectorFieldModel: ISelectGroupFieldProperties = {\n        ...omit(formGroup, ['sourceRecordDefinitionName', 'optionFilterFieldId']),\n        index: String(index),\n        fieldId: formGroup.namedListDefinitionName ? formGroup.fieldId : null\n      };\n\n      if (index > 0) {\n        inspectorFieldModel.optionFilterFieldId = formGroup.namedListDefinitionName\n          ? formGroup.optionFilterFieldId\n          : null;\n      }\n\n      return inspectorFieldModel;\n    });\n\n    this.designerItemModel.onFieldPropertiesChange(value);\n  }\n\n  addField(): void {\n    this.formArray.push(this.getFieldFormGroup());\n  }\n\n  removeField(index: number): void {\n    this.rxModalService\n      .confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'Are you sure you want to delete this field?'\n      })\n      .then((response) => {\n        if (response) {\n          this.formArray.removeAt(index);\n        }\n      });\n  }\n\n  isAddFieldButtonDisabled(): boolean {\n    return this.isDisabled || this.formArray.length >= this.maxSelectGroupFieldCount;\n  }\n\n  trackByFn(index: number, control: AbstractControl): string {\n    return control.get('guid').value;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getFieldFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      guid: this.rxGuidService.generate(),\n      label: null,\n      namedListDefinitionName: null,\n      fieldId: null,\n      sourceRecordDefinitionName: null,\n      optionFilterFieldId: null\n    });\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n}\n","<adapt-button\n  btn-type=\"tertiary\"\n  rx-id=\"add-field-button\"\n  class=\"d-icon-plus_circle px-0 py-0\"\n  (click)=\"addField()\"\n  [disabled]=\"isAddFieldButtonDisabled()\"\n>\n  Add dependent field\n</adapt-button>\n\n<div\n  class=\"card mt-2\"\n  *ngFor=\"let formGroupControl of formArray.controls; trackBy: trackByFn; let index = index\"\n  rx-id=\"select-group-field-card\"\n>\n  <div class=\"card-block p-2\">\n    <button\n      (click)=\"removeField(index)\"\n      class=\"close position-relative\"\n      type=\"button\"\n      aria-label=\"Remove\"\n      rx-id=\"remove-field-button\"\n      *ngIf=\"!isDisabled\"\n    ></button>\n\n    <rx-select-group-field\n      [fieldformGroup]=\"formGroupControl\"\n      [index]=\"index\"\n      [targetFieldOptions]=\"options.targetFieldOptions\"\n    ></rx-select-group-field>\n  </div>\n</div>\n"]}