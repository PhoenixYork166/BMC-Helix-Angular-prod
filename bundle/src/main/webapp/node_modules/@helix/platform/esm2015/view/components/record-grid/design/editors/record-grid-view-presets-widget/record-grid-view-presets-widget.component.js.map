{"version":3,"file":"record-grid-view-presets-widget.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.ts","../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { cloneDeep, isEqual, noop } from 'lodash';\nimport { IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase, ISelectFormControlOptions, ISelectOption } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport { OpenViewActionModalSize, RecordGridNamedFilterOptionKey, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { RecordGridDesignModel } from '../../record-grid-design.model';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridEditViewPresetsModalComponent } from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetColumnData,\n  IRecordGridViewPresetsWidgetOptions\n} from './record-grid-view-presets-widget.types';\nimport {\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult\n} from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.types';\nimport { RxRecordGridDesignUtilsService } from '../../record-grid-design-utils.service';\nimport { IViewPresetSelectorDesignProperties } from '../../../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IRecordGridFilterDescriptorModel } from '../record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetProperties } from '../../../common/types/record-grid.types';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\n\n@Component({\n  selector: 'rx-record-grid-view-presets-widget',\n  templateUrl: './record-grid-view-presets-widget.component.html',\n  styleUrls: ['./record-grid-view-presets-widget.component.scss']\n})\nexport class RecordGridViewPresetsWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel>\n  implements OnInit, OnChanges, OnDestroy, IFormWidgetComponent\n{\n  @Input()\n  options: IRecordGridViewPresetsWidgetOptions;\n\n  currentPresetSelectorGuid: string;\n  currentPresetSelectorGuid$ = new ReplaySubject<string>(1);\n  isDisabled: boolean;\n\n  presetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.viewDesignerFacade.getComponentsByType<IViewPresetSelectorDesignProperties>(\n      RxViewComponentType.ViewPresetSelector\n    );\n\n  presetSelectorOptions$: Observable<ISelectOption[]> = this.presetSelectors$.pipe(\n    map((items) => items.map(({ guid, data }) => ({ id: guid, name: data.name })))\n  );\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.currentPresetSelectorGuid$.pipe(\n    tap((guid) => this.updateViewPresetSelectorProp(guid)),\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n    takeUntil(this.destroyed$)\n  );\n\n  viewPresetSelectorProp$ = this.designerItemModel.sandbox.getComponentPropertyValue('viewPresetSelector');\n\n  gridColumnGuids$ = this.designerItemModel.sandbox.getChildComponentGuids(\n    (component) => component.type === RX_RECORD_GRID.components.column\n  );\n\n  selectOptions: ISelectFormControlOptions = {\n    options: [],\n    emptyOption: true,\n    label: 'View preset selector',\n    beforeValueChange: (oldValue, newValue) => {\n      if (oldValue && oldValue !== newValue) {\n        return this.rxModalService.confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message: 'All record grid view presets will be cleared. Do you want to continue?'\n        });\n      } else {\n        return Promise.resolve(true);\n      }\n    }\n  };\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxJsonParserService: RxJsonParserService\n  ) {\n    super(injector);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options.currentValue.recordDefinition?.name !== changes.options.previousValue.recordDefinition?.name) {\n      this.currentPresetSelectorGuid = null;\n      this.currentPresetSelectorGuid$.next(null);\n    }\n  }\n\n  ngOnInit(): void {\n    this.presetSelectorOptions$.pipe(takeUntil(this.destroyed$)).subscribe((options) => {\n      this.selectOptions.options = options;\n    });\n\n    // select current preset selector item\n    this.viewPresetSelectorProp$\n      .pipe(\n        first(),\n        map((val) => this.designerItemModel.extractViewPresetSelectorGuid(val)),\n        withLatestFrom(this.presetSelectorOptions$),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([guid, presetSelectorOptions]) => {\n        const selectedOption = presetSelectorOptions.find((item) => item.id === guid)?.id;\n\n        if (selectedOption) {\n          this.currentPresetSelectorGuid = selectedOption;\n          this.currentPresetSelectorGuid$.next(this.currentPresetSelectorGuid);\n        }\n      });\n\n    this.gridColumnGuids$\n      .pipe(\n        filter(() => !!this.currentPresetSelectorGuid),\n        switchMap((guids) =>\n          combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.designerItemModel.sandbox.getComponentPropertyValue('sortable', guid),\n                this.designerItemModel.sandbox.getComponentPropertyValue('filterable', guid),\n                this.viewDesignerFacade.getChildComponents(\n                  guid,\n                  (c) => c.type === RX_RECORD_GRID.components.filterPreset\n                )\n              ])\n            )\n          )\n        ),\n        distinctUntilChanged(isEqual),\n        // in case of removing and adding columns at a same time from columns modal\n        // stream updated several times with according to adding/removing columns\n        // we need it to be stabilized to proceed with column presets updating\n        debounceTime(100),\n        switchMap(() => this.designerItemModel.columns$.pipe(first())),\n        withLatestFrom(this.designerItemModel.childComponentsTree$.pipe(map((components) => cloneDeep(components)))),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([gridColumns, allComponents]) => {\n        this.updateColumnPresets(allComponents, gridColumns);\n      });\n  }\n\n  private updateColumnPresets(\n    allComponents: IViewComponentDesignData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const viewPresetsPayload = allComponents\n      .filter((component) => component.type === RX_RECORD_GRID.components.viewPreset)\n      .map((component) => {\n        const presetColumnComponents: IRecordGridViewPresetColumnData[] = component.children.filter(\n          (item) => item.type === RX_RECORD_GRID.components.columnViewPreset\n        );\n\n        const presetFilterComponents = this.getPresetFilterComponentsForColumns(\n          component as IViewComponentDesignData<IGridViewPresetProperties>,\n          gridColumns\n        );\n\n        const updatedPresetColumns = gridColumns\n          .map((gridColumn) => {\n            const existingPresetColumn = presetColumnComponents.find(\n              (presetColumn) => presetColumn.data.fieldId === gridColumn.fieldId\n            );\n\n            if (existingPresetColumn) {\n              if (!gridColumn.sortable) {\n                existingPresetColumn.data.sortable = null;\n              }\n\n              return existingPresetColumn;\n            } else {\n              const columnPresetPayload = this.rxRecordGridDesignUtilsService.getColumnPresetPayload(gridColumn);\n              columnPresetPayload.data.visible = false;\n              columnPresetPayload.data.index = null;\n              columnPresetPayload.data.width = null;\n\n              return columnPresetPayload;\n            }\n          })\n          .map((presetCol, i, array) => {\n            if (presetCol.data.index === null) {\n              presetCol.data.index = Math.max(...array.map((col) => col.data.index)) + 1;\n            }\n\n            return presetCol;\n          });\n\n        (component as IViewComponentDesignSetPayload).children = [...updatedPresetColumns, ...presetFilterComponents];\n\n        return component;\n      });\n\n    this.designerItemModel.sandbox.setChildrenByType(viewPresetsPayload, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getPresetFilterComponentsForColumns(\n    presetComponent: IViewComponentDesignData<IGridViewPresetProperties>,\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload[] {\n    const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n    const presetFilterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[] =\n      presetComponent.children.filter((item) => item.type !== RX_RECORD_GRID.components.columnViewPreset);\n\n    // removing filter presets for removed columns or ones that have removed named filter option reference\n    const filteredPresetFilterComponents = presetFilterComponents.reduce((result, presetFilterComponent) => {\n      // checking if column still can be used for filtering\n      if (gridColumnsIds.includes(presetFilterComponent.data.fieldId)) {\n        const namedFilterOptions =\n          gridColumns.find((col) => col.fieldId === presetFilterComponent.data.fieldId)?.namedFilterOptions ?? [];\n        const namedFilterOptionsGuids = namedFilterOptions.map((option) => option.guid);\n\n        let presetFiltersObj = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData([\n          presetFilterComponent\n        ]);\n\n        presetFiltersObj = this.deserializeNamedOptions(presetFiltersObj);\n        const namedFilterOptionGuid = presetFiltersObj[0].value?.[RecordGridNamedFilterOptionKey];\n\n        // if named filter option selected then check if it's still available\n        if (namedFilterOptionGuid) {\n          if (namedFilterOptionsGuids.includes(namedFilterOptionGuid)) {\n            result.push(presetFilterComponent);\n          }\n        } else {\n          result.push(presetFilterComponent);\n        }\n      }\n\n      return result;\n    }, []);\n\n    if (presetFilterComponents.length) {\n      if (filteredPresetFilterComponents.length < presetFilterComponents.length) {\n        const presetFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filteredPresetFilterComponents);\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          presetComponent.data.filters,\n          presetFilters\n        );\n\n        // updating filters JSON after column remove\n        presetComponent.data.filters = newFilterData\n          ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), presetFilters)\n          : null;\n      }\n\n      return filteredPresetFilterComponents;\n    }\n\n    return presetFilterComponents;\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n\n  openEditor(preset?: IPresetItem) {\n    combineLatest([\n      this.designerItemModel.gridViewPresets$,\n      this.selectedPresetsList$,\n      this.designerItemModel.columns$,\n      this.designerItemModel.recordDefinition$\n    ])\n      .pipe(first(), takeUntil(this.destroyed$))\n      .subscribe(([viewPresets, presetsList, columns, recordDefinition]) => {\n        this.rxModalService\n          .openModal({\n            title: 'Edit view presets',\n            content: RecordGridEditViewPresetsModalComponent,\n            size: OpenViewActionModalSize.Large as any,\n            data: {\n              viewPresets,\n              presetsList,\n              gridColumns: columns,\n              recordDefinition,\n              activePreset: preset?.guid,\n              isReadOnly: this.isDisabled\n            } as IRecordGridEditViewPresetsModalOptions\n          })\n          .then((result: IRecordGridEditViewPresetsModalResult) => {\n            this.onPresetModalClose(result);\n          })\n          .catch(noop);\n      });\n  }\n\n  trackByGuid(index: number, item: IPresetItem): string {\n    return item.name;\n  }\n\n  private onPresetModalClose(result: IRecordGridEditViewPresetsModalResult): void {\n    if (result && result.presets) {\n      this.designerItemModel.childComponentsTree$\n        .pipe(\n          first(),\n          map((components) => cloneDeep(components) as IViewComponentDesignSetPayload[]),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe((components) => {\n          result.presets.forEach((preset) => {\n            const presetComponent = components.find(\n              (c) => c.type === RX_RECORD_GRID.components.viewPreset && c.data.viewPresetGuid === preset.guid\n            );\n\n            if (presetComponent) {\n              const columnPayloads = preset.presetColumns.map((column) =>\n                this.rxRecordGridDesignUtilsService.getColumnPresetPayload(column.data)\n              );\n\n              const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                preset.filters.basicFilters\n              );\n\n              presetComponent.data = {\n                viewPresetGuid: preset.guid,\n                filters: preset.filters.filtersJson\n              };\n\n              presetComponent.children = [...columnPayloads, ...filterPayloads];\n            }\n          });\n\n          this.designerItemModel.sandbox.setChildren(components);\n        });\n    }\n  }\n\n  private updateViewPresetSelectorProp(guid: string): void {\n    this.designerItemModel.sandbox.updateComponentProperties({\n      viewPresetSelector: guid ? `\\${view.components.${guid}.api}` : null\n    });\n  }\n}\n","<rx-select-form-control\n  class=\"d-block mb-3\"\n  rx-id=\"preset-selector\"\n  [options]=\"selectOptions\"\n  [(ngModel)]=\"currentPresetSelectorGuid\"\n  (ngModelChange)=\"currentPresetSelectorGuid$.next($event)\"\n  [disabled]=\"isDisabled\"\n>\n</rx-select-form-control>\n\n<div [hidden]=\"!options.recordDefinition\" *ngIf=\"selectedPresetsList$ | async as presetsList\">\n  <adapt-button\n    *ngIf=\"presetsList.length\"\n    btn-type=\"tertiary\"\n    rx-id=\"edit-view-presets-button\"\n    class=\"p-0 pb-1\"\n    (click)=\"openEditor()\"\n  >\n    <span class=\"d-icon-left-plus_circle\"></span>\n    Edit view presets\n  </adapt-button>\n\n  <span rx-id=\"no-presets\" *ngIf=\"currentPresetSelectorGuid && presetsList.length === 0\" class=\"text-tertiary\">\n    No presets added.\n  </span>\n\n  <div rx-id=\"presets-list\">\n    <div\n      class=\"border mb-1 pr-2 d-flex justify-content-between text-break\"\n      *ngFor=\"let preset of presetsList; let index = index; trackBy: trackByGuid\"\n    >\n      <strong class=\"preset-name\" rx-id=\"preset-name\" [title]=\"preset.name\">\n        {{ preset.name }}\n      </strong>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(preset)\"\n      ></button>\n    </div>\n  </div>\n</div>\n"]}