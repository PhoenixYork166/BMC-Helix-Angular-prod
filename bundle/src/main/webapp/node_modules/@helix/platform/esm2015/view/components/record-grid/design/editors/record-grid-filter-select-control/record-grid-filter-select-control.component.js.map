{"version":3,"file":"record-grid-filter-select-control.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.ts","../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent, RxDefinitionNameService, RxGlobalCacheService } from '@helix/platform/shared/api';\nimport {\n  IRecordGridFilterModel,\n  IRecordGridFilterSelectAdvancedFiltering,\n  IRecordGridFilterSelectControlOptions\n} from './record-grid-filter-select-control.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { cloneDeep, every, find, findIndex, isEmpty, isEqual, isFunction, reduce, uniq, values } from 'lodash';\nimport { AdvancedFilterOption, AdvancedFilterTag, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription } from 'rxjs';\nimport {\n  IRecordDefinition,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RxRecordGridFilterConfigService } from '../../../runtime/services/record-grid-filter-config.service';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { RxRecordGridFilterService } from '../../../runtime/services/record-grid-filter.service';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterOperator } from '@helix/platform/view/api';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RxRecordGridAdvancedFilteringService } from '../../../common/services/record-grid-advanced-filtering.service';\nimport { IRemoveFilterTagEvent } from '../../../common/components/filter-tags/filter-tags.types';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../../../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRecordGridColumnNamedFilterOption } from '../../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { ITagInfo } from '../../../common/types/record-grid-filter-config.interfaces';\n\n@Component({\n  selector: 'rx-record-grid-filter-select-control',\n  templateUrl: './record-grid-filter-select-control.component.html',\n  styleUrls: ['./record-grid-filter-select-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridFilterSelectControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridFilterSelectControlComponent\n  extends ValueAccessor<IRecordGridFilterModel>\n  implements IFormControlComponent, OnInit, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridFilterSelectControlOptions;\n  groupFilterValue: string;\n  groupFilterItems: { name: string; value: string }[];\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  advancedFilterData: IRecordGridFilterSelectAdvancedFiltering = {\n    filterOptions: [],\n    selectedFilters: [],\n    filterTexts: {\n      initialDropdownAnchorLabel: 'Filter'\n    },\n    recordGridFilterConfigs: null,\n    fieldDefinitionsById: {},\n    fieldDefinitionsInitialized$: new Subject(),\n    filterValueInitialized$: new Subject(),\n    associationDescriptors: []\n  };\n\n  private subscription = new Subscription();\n  private filtersModel: IRecordGridFilterModel;\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n    this.initEmptyValue();\n\n    this.advancedFilterData.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n\n    this.subscription.add(\n      combineLatest([\n        this.advancedFilterData.filterValueInitialized$,\n        this.advancedFilterData.fieldDefinitionsInitialized$\n      ]).subscribe(() => {\n        this.initSelectedAdvancedFilters(this.value);\n      })\n    );\n  }\n\n  getGroupFilterName(model: string): string {\n    return this.groupFilterItems.find((item) => item.value === model)?.name;\n  }\n\n  onGroupFilterValueModelChange(model: string): void {\n    this.groupFilterValue = model;\n  }\n\n  ngOnInit(): void {\n    this.initFilterOptions();\n  }\n\n  initEmptyValue(): void {\n    this.innerValue = {\n      basicFilters: null,\n      filtersJson: null\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options &&\n      changes.options.previousValue &&\n      (changes.options.currentValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name !==\n        (changes.options.previousValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name\n    ) {\n      this.initEmptyValue();\n      this.advancedFilterData.selectedFilters = [];\n      this.advancedFilterData.filterOptions = [];\n      this.initFilterOptions();\n    }\n  }\n\n  initFilterOptions(): void {\n    this.groupFilterItems = [];\n\n    if (this.options.primaryRecordDefinition) {\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.options.primaryRecordDefinition.name)\n        .pipe(\n          switchMap((associationDescriptors) => {\n            this.advancedFilterData.associationDescriptors = associationDescriptors;\n\n            const recordDefinitionNames = uniq(\n              associationDescriptors.map((associationDescriptor) => associationDescriptor.recordDefinitionName)\n            );\n\n            const recordDefinitions$ = recordDefinitionNames.length\n              ? forkJoin(\n                  recordDefinitionNames.map((name) => this.rxRecordDefinitionCacheService.getRecordDefinition(name))\n                )\n              : of([] as IRecordDefinition[]);\n\n            return recordDefinitions$.pipe(map((recordDefinitions) => ({ recordDefinitions, associationDescriptors })));\n          }),\n          take(1)\n        )\n        .subscribe(({ recordDefinitions, associationDescriptors }) => {\n          const primaryRecordDefinition = cloneDeep(this.options.primaryRecordDefinition);\n\n          [primaryRecordDefinition, ...recordDefinitions].forEach((recordDefinition) => {\n            if (!recordDefinition.fieldDefinitionsById) {\n              recordDefinition.fieldDefinitionsById =\n                this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n            }\n          });\n\n          this.groupFilterValue = primaryRecordDefinition.name;\n\n          this.advancedFilterData.fieldDefinitionsById =\n            this.rxRecordGridAdvancedFilteringService.addAssociationFieldsToFieldDefinitionsById(\n              primaryRecordDefinition.fieldDefinitionsById,\n              associationDescriptors,\n              recordDefinitions\n            );\n\n          associationDescriptors.forEach((associationDescriptor) => {\n            const currentRecordDefinition = find(\n              recordDefinitions,\n              (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n            );\n\n            this.groupFilterItems.push({\n              name: associationDescriptor.label,\n              value: associationDescriptor.label\n            });\n\n            this.advancedFilterData.filterOptions.push(\n              ...this.getFilterOptions(currentRecordDefinition, associationDescriptor, associationDescriptor.label)\n            );\n          });\n\n          this.groupFilterItems = this.groupFilterItems.sort((gropFilter, gropFilterToCompare) =>\n            gropFilter.name.localeCompare(gropFilterToCompare.name)\n          );\n\n          const mainRecordDefinitionName = this.rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name);\n\n          this.advancedFilterData.filterOptions.push(...this.getFilterOptions(primaryRecordDefinition, null, null));\n\n          this.groupFilterItems.unshift({\n            name: mainRecordDefinitionName,\n            value: primaryRecordDefinition.name\n          });\n\n          this.advancedFilterData.fieldDefinitionsInitialized$.next();\n        });\n    }\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    const selectedFilters = this.advancedFilterData.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n  }\n\n  getFilterOptions(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor: IAssociationDescriptor,\n    prefix?: string\n  ): AdvancedFilterOption[] {\n    const fieldDefinitions = recordDefinition.fieldDefinitions;\n\n    return fieldDefinitions\n      .map((fieldDefinition): AdvancedFilterOption => {\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n        const label = this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, null);\n\n        const fieldId = this.rxRecordGridUtilsService.getFieldIdForGridColumn(\n          fieldDefinition.id,\n          associationDescriptor\n        );\n\n        const filterOption = this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n          fieldId,\n          label,\n          fieldDefinition,\n          filterConfig,\n          false,\n          {\n            optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n            requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n            inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n            inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n            inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n            inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n            inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n            inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n            inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n          },\n          prefix ? `${prefix} > ${label}` : null,\n          this.options.namedFilterOptions ? this.options.namedFilterOptions[fieldId] : []\n        );\n\n        const recordDefinitionName = associationDescriptor\n          ? associationDescriptor.label\n          : this.options.primaryRecordDefinition.name;\n\n        filterOption.isHidden = () =>\n          this.groupFilterValue !== recordDefinitionName || this.options.selectedFieldIds?.includes(fieldId) === false;\n\n        return filterOption;\n      })\n      .sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  onAdvancedFiltersChange(selectedFilters: SelectedAdvancedFilter[]): void {\n    this.advancedFilterData.selectedFilters = selectedFilters;\n\n    const oldBasicFilters = this.value.basicFilters || [];\n\n    const basicFilters = reduce(\n      selectedFilters,\n      (recordGridFilters, selectedFilter) => {\n        const fieldId = selectedFilter.filterOptionId;\n        const fieldDefinition = this.advancedFilterData.fieldDefinitionsById[fieldId];\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        const columnRecordGridFilterData = filterConfig.getRecordGridFilterData(\n          selectedFilter.value,\n          fieldDefinition,\n          fieldId\n        );\n\n        (columnRecordGridFilterData.or || columnRecordGridFilterData.and).forEach(\n          (recordGridFilterOperator: IRecordGridFilterOperator) => {\n            const gridFilterValue = values(recordGridFilterOperator)[0][fieldId];\n            const gridFilterDisplayValue = values(recordGridFilterOperator)[0]['$DISPLAYVALUE$'];\n\n            const columnOldBasicFilter = find(\n              oldBasicFilters,\n              (oldBasicFilter) =>\n                oldBasicFilter.fieldId === fieldId &&\n                oldBasicFilter.value === gridFilterValue &&\n                every(recordGridFilters, (gridFilter) => gridFilter.guid !== oldBasicFilter.guid)\n            );\n\n            const recordGridFilter: IRxRecordGridFilter = {\n              fieldId,\n              value: gridFilterValue,\n              $DISPLAYVALUE$: gridFilterDisplayValue,\n              guid: (columnOldBasicFilter && columnOldBasicFilter.guid) || this.rxGuidService.generate()\n            };\n\n            recordGridFilters.push(recordGridFilter);\n          }\n        );\n\n        return recordGridFilters;\n      },\n      [] as IRxRecordGridFilter[]\n    );\n\n    const recordGridFilterData = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      selectedFilters,\n      this.advancedFilterData.fieldDefinitionsById,\n      this.advancedFilterData.recordGridFilterConfigs\n    );\n\n    let filtersJson = isEmpty(recordGridFilterData) ? null : JSON.stringify(recordGridFilterData);\n\n    if (filtersJson) {\n      filtersJson = this.rxRecordGridFilterHelperService.denormalizeFilterString(filtersJson, basicFilters);\n    }\n\n    this.filtersModel = {\n      basicFilters,\n      filtersJson\n    };\n\n    this.value = {\n      basicFilters,\n      filtersJson\n    };\n  }\n\n  onWriteValue(value: IRecordGridFilterModel): void {\n    if (!isEqual(this.filtersModel, value)) {\n      this.advancedFilterData.filterValueInitialized$.next();\n    }\n  }\n\n  initSelectedAdvancedFilters(value: IRecordGridFilterModel) {\n    if (value?.filtersJson && !isEmpty(value.basicFilters)) {\n      this.rxRecordGridFilterService\n        .getSelectedFiltersFromPredefinedFilter(\n          value.filtersJson,\n          value.basicFilters,\n          this.advancedFilterData.fieldDefinitionsById,\n          this.advancedFilterData.recordGridFilterConfigs,\n          this.options.primaryRecordDefinition,\n          this.advancedFilterData.filterOptions,\n          this.advancedFilterData.associationDescriptors\n        )\n        .pipe(\n          map((selectedFilters) =>\n            this.options.namedFilterOptions\n              ? this.rxRecordGridFilterService.clearRemovedNamedFilterOptions(\n                  selectedFilters,\n                  this.options.namedFilterOptions\n                )\n              : selectedFilters\n          )\n        )\n        .subscribe((selectedFilters) => {\n          this.advancedFilterData.selectedFilters = selectedFilters;\n        });\n    }\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.options.namedFilterOptions ? this.options.namedFilterOptions[filterOptionConfig.id] : [];\n  }\n\n  getTags(filtersExpressionsTags: AdvancedFilterTag[]): Observable<AdvancedFilterTag[]> {\n    const tags =\n      filtersExpressionsTags?.filter((filterTag: AdvancedFilterTag) => isEmpty(filterTag.data.validationErrors)) ?? [];\n\n    const tags$ = tags.map((tag: AdvancedFilterTag): Observable<AdvancedFilterTag> => {\n      if (tag.data.filterOption) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = tag.data.filterOption.data;\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition?.resourceType];\n\n        if (isFunction(filterConfig?.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.options.primaryRecordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.options.namedFilterOptions?.[fieldId] ?? []\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return tags$.length ? forkJoin(tags$) : of([]);\n  }\n}\n","<ng-container *ngIf=\"advancedFilterData.filterOptions\">\n  <adapt-advanced-filter\n    #advancedFilter\n    [hidden]=\"isDisabled\"\n    [appendDropdownToBody]=\"true\"\n    [enableSavedFilters]=\"false\"\n    [filterOptions]=\"advancedFilterData.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"advancedFilterData.selectedFilters\"\n    [texts]=\"advancedFilterData.filterTexts\"\n    [applyFiltersByUserAction]=\"true\"\n    [filterOptionsCustomAreaTemplate]=\"filterOptionsCustomAreaTemplate\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    [anchorDisabled]=\"options.anchorDisabled\"\n  ></adapt-advanced-filter>\n\n  <rx-filter-tags\n    [isDisabled]=\"isDisabled\"\n    [tags]=\"getTags(advancedFilter.filtersExpressionsTags) | async\"\n    [tagsLimit]=\"options.tagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n    [restTagsDropdownPlacement]=\"['right', 'bottom', 'bottom-right', 'auto']\"\n  ></rx-filter-tags>\n</ng-container>\n\n<ng-template #filterOptionsCustomAreaTemplate>\n  <div class=\"p-3 pt-4 pb-4\" *ngIf=\"this.groupFilterItems.length > 1\">\n    <adapt-accordion>\n      <adapt-accordion-tab [title]=\"'Show filters for: ' + getGroupFilterName(groupFilterValue)\" [multiline]=\"true\">\n        <adapt-rx-radiobutton-group\n          class=\"advanced-filter__radiobutton-group\"\n          [ngModel]=\"groupFilterValue\"\n          (ngModelChange)=\"onGroupFilterValueModelChange($event)\"\n        >\n          <adapt-rx-radiobutton\n            name=\"booleanTypeGroup\"\n            class=\"advanced-filter__radiobutton\"\n            *ngFor=\"let groupItem of groupFilterItems\"\n            [value]=\"groupItem.value\"\n            [label]=\"groupItem.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n"]}