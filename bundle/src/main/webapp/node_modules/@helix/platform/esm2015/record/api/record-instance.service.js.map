{"version":3,"file":"record-instance.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-instance.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector, NgZone } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  assign,\n  filter,\n  find,\n  forEach,\n  groupBy,\n  has,\n  includes,\n  isEmpty,\n  isEqual,\n  isNull,\n  isNumber,\n  isString,\n  isUndefined,\n  map as _map,\n  pick,\n  remove,\n  sortBy,\n  transform,\n  trim,\n  values\n} from 'lodash';\nimport { saveAs } from 'file-saver';\n\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport { IAttachedFile } from './attached-file.interface';\nimport { IFieldInstance } from './field-instance.interface';\nimport {\n  ICreatedRecordInstance,\n  IRecordInstance,\n  IRxRecordInstanceAssociationInstances\n} from './record-instance.types';\nimport { RecordInstance } from './record-instance.class';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { RX_RECORD_INSTANCE } from './record-instance.constant';\nimport { RxRecordDefinitionCacheService } from './record-definition-cache.service';\nimport { RxRecordInstanceUtilsService } from './record-instance-utils.service';\nimport { IRecordDefinition } from './record-definition.types';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport BigNumber from 'bignumber.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceService {\n  private path = '/api/rx/application/record/recordinstance';\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private injector: Injector,\n    private ngZone: NgZone\n  ) {}\n\n  get(recordDefinitionName: string, recordInstanceId: string): Observable<RecordInstance> {\n    return this.getRecordInstance(recordDefinitionName, recordInstanceId);\n  }\n\n  getNew(recordDefinitionName: string): Observable<RecordInstance> {\n    return this.getRecordInstance(recordDefinitionName, '0');\n  }\n\n  getEmpty(recordDefinitionName: string): Observable<RecordInstance> {\n    return this.getNew(recordDefinitionName).pipe(tap((recordInstance) => recordInstance.prepareForBulkEdit()));\n  }\n\n  save(\n    recordInstance: RecordInstance,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n    }\n  ): Observable<any> {\n    return this.httpClient.put(\n      `${this.path}/${encodeURIComponent(recordInstance.recordDefinitionName)}/${encodeURIComponent(\n        recordInstance.id\n      )}`,\n      this.prepareRecordInstance(recordInstance),\n      options\n    );\n  }\n\n  delete(recordDefinitionName: string, recordInstanceId: string): Observable<any> {\n    return this.httpClient.delete(\n      `${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`\n    );\n  }\n\n  private prepareAttachments(\n    fieldInstances: { [fieldId: number]: IFieldInstance },\n    isAssociation = false\n  ): IAttachedFile[] {\n    const attachedFiles = filter(fieldInstances, (fieldInstance) => Boolean(fieldInstance.file)).map(\n      (attachment: IFieldInstance) => {\n        const keyPrefix = isAssociation ? `${fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value}/` : '';\n\n        return {\n          key: `${keyPrefix}${attachment.id}`,\n          file: attachment.file\n        };\n      }\n    );\n\n    this.cleanAttachmentFiles(fieldInstances);\n\n    return attachedFiles;\n  }\n\n  // There should not be any files in record instance JSON so we are cleaning it\n  private cleanAttachmentFiles(fieldInstances: { [fieldId: number]: IFieldInstance }) {\n    filter(fieldInstances, (fieldInstance) => has(fieldInstance, 'file')).forEach((fieldInstanceWithFile) => {\n      if (fieldInstanceWithFile.file) {\n        delete fieldInstances[fieldInstanceWithFile.id];\n      } else {\n        delete fieldInstances[fieldInstanceWithFile.id].file;\n      }\n    });\n  }\n\n  create(recordInstance: RecordInstance): Observable<ICreatedRecordInstance> {\n    return this.httpClient\n      .post(this.path, this.prepareRecordInstance(recordInstance), {\n        observe: 'response',\n        responseType: 'text'\n      })\n      .pipe(\n        map((res: HttpResponse<any>) => {\n          let result = {};\n          const locationHeader = res.headers.get('location');\n\n          if (locationHeader) {\n            result = {\n              id: locationHeader.substr(locationHeader.lastIndexOf('/') + 1),\n              url: locationHeader\n            };\n          }\n\n          return result;\n        })\n      );\n  }\n\n  private getRecordInstance(recordDefinitionName: string, recordInstanceId: string): Observable<RecordInstance> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName),\n      this.getRecordInstanceData(recordDefinitionName, recordInstanceId)\n    ]).pipe(\n      map(\n        ([recordDefinition, recordInstanceData]) =>\n          new RecordInstance(recordDefinition, recordInstanceData, this.injector)\n      )\n    );\n  }\n\n  private getRecordInstanceData(recordDefinitionName: string, recordInstanceId: string): Observable<IRecordInstance> {\n    return this.httpClient.get<IRecordInstance>(\n      `${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`\n    );\n  }\n\n  private prepareRecordInstance(recordInstance: RecordInstance): IRecordInstance | FormData {\n    const modifiedFieldInstances: { [fieldId: string]: IFieldInstance } = {};\n    const recordInstanceFormData: FormData = new FormData();\n\n    Object.keys(recordInstance.originalData.fieldInstances).forEach((fieldIdKey: string) => {\n      const fieldId = Number(fieldIdKey);\n      const fieldInstance = recordInstance.fieldInstances[fieldId];\n      const originalFieldInstance = recordInstance.originalData.fieldInstances[fieldId];\n\n      if (isString(fieldInstance.value)) {\n        fieldInstance.value = trim(fieldInstance.value);\n      }\n\n      if (\n        isUndefined(originalFieldInstance) ||\n        (fieldInstance.value === null && originalFieldInstance.value !== null) ||\n        (fieldInstance.value !== null && originalFieldInstance.value === null) ||\n        (fieldInstance.value !== null &&\n          originalFieldInstance.value !== null &&\n          !(isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n          String(fieldInstance.value) !== originalFieldInstance.value) ||\n        ((isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n          !new BigNumber(fieldInstance.value).isEqualTo(originalFieldInstance.value)) ||\n        (fieldId === RX_RECORD_DEFINITION.coreFieldIds.modifiedDate && fieldInstance.value !== null) ||\n        (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance &&\n          !isEqual(originalFieldInstance.valueByLocale, fieldInstance.valueByLocale))\n      ) {\n        modifiedFieldInstances[fieldId] = fieldInstance;\n      }\n    });\n\n    const preparedRecordInstance = {\n      id: recordInstance.id,\n      resourceType: recordInstance.resourceType,\n      displayId: recordInstance.displayId,\n      recordDefinitionName: recordInstance.recordDefinitionName,\n      permittedGroupsBySecurityLabels: recordInstance.permittedGroupsBySecurityLabels,\n      permittedUsersBySecurityLabels: recordInstance.permittedUsersBySecurityLabels,\n      permittedRolesBySecurityLabels: recordInstance.permittedRolesBySecurityLabels,\n      fieldInstances: modifiedFieldInstances\n    };\n\n    let attachedFiles = this.prepareAttachments(preparedRecordInstance.fieldInstances);\n\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n\n    // We have to use FormData if we have attachments or associated data\n    if (!isEmpty(attachedFiles) || !isEmpty(associationInstances)) {\n      recordInstanceFormData.append('recordInstance', JSON.stringify(preparedRecordInstance));\n\n      if (!isEmpty(associationInstances)) {\n        filter(associationInstances, 'recordInstances').forEach((associationConfig) => {\n          forEach(associationConfig.recordInstances, (instance) => {\n            attachedFiles = attachedFiles.concat(this.prepareAttachments(instance.fieldInstances, true));\n          });\n        });\n\n        recordInstanceFormData.append('associationOperations', JSON.stringify(associationInstances));\n      }\n\n      attachedFiles.forEach((attachment) => {\n        recordInstanceFormData.append(attachment.key, attachment.file, attachment.file.name);\n      });\n\n      return recordInstanceFormData;\n    } else {\n      return preparedRecordInstance;\n    }\n  }\n\n  getAttachmentDownloadUrl(recordDefinitionName: string, fieldId: number, recordInstanceId: string): string {\n    return `${RX_RECORD_DEFINITION.recordInstanceAttachment}/${encodeURIComponent(\n      recordDefinitionName\n    )}/${encodeURIComponent(recordInstanceId)}/${fieldId}`;\n  }\n\n  downloadAttachment(recordDefinitionName: string, fieldId: number, recordInstanceId: string, fileName: string): void {\n    this.httpClient\n      .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n      .subscribe((fileStream) => {\n        if (fileStream) {\n          const file = new Blob([fileStream], {\n            type: fileStream.type\n          });\n\n          this.ngZone.runOutsideAngular(() => {\n            saveAs(file, fileName);\n          });\n        }\n      });\n  }\n\n  getAttachment(recordDefinitionName: string, fieldId: number, recordInstanceId: string): Observable<Blob> {\n    return this.httpClient\n      .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n      .pipe(\n        map((fileStream: Blob) => {\n          return new Blob([fileStream], {\n            type: fileStream.type\n          });\n        })\n      );\n  }\n\n  prepareAssociationInstancesForSaving(associationInstances: IRxRecordInstanceAssociationInstances) {\n    const associationPayload = transform(\n      associationInstances,\n      (result, associationInstance, associationDefinitionName) => {\n        forEach(associationInstance, (associationGroups: IAssociationRecords, key) => {\n          const nodeSide = key.split(':')[0];\n\n          const newAssociations: any[] = remove(associationGroups.pending, 'isNewInstance');\n\n          if (!isEmpty(associationGroups.pending)) {\n            values(groupBy(associationGroups.pending, (instance) => JSON.stringify(instance.rolesConfig))).forEach(\n              (instancesGroup) => {\n                result.push(\n                  assign(\n                    {\n                      associationDefinitionName: associationDefinitionName,\n                      recordInstanceIds: _map(instancesGroup, 'id'),\n                      nodeSide,\n                      resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n                    },\n                    instancesGroup[0].rolesConfig\n                  )\n                );\n              }\n            );\n          }\n\n          if (!isEmpty(newAssociations)) {\n            values(groupBy(newAssociations, (instance) => JSON.stringify(instance.rolesConfig))).forEach(\n              (instancesGroup) => {\n                result.push(\n                  assign(\n                    {\n                      associationDefinitionName: associationDefinitionName,\n                      recordInstances: _map(newAssociations, (newAssociation) =>\n                        pick(newAssociation, ['fieldInstances', 'recordDefinitionName'])\n                      ),\n                      nodeSide,\n                      resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                    },\n                    instancesGroup[0].rolesConfig\n                  )\n                );\n              }\n            );\n          }\n\n          if (!isEmpty(associationGroups.deleted)) {\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: _map(associationGroups.deleted, 'id'),\n              nodeSide,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.disassociate\n            });\n          }\n\n          if (!isEmpty(associationGroups.extensions)) {\n            const extensionRecordInstance = associationGroups.extensions[0];\n\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstances: [this.prepareAssociatedRecordInstanceForSaving(extensionRecordInstance)],\n              nodeSide,\n              resourceType: extensionRecordInstance.isNewInstance\n                ? RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                : RX_RECORD_INSTANCE.association.operationResourceTypes.update\n            });\n          }\n        });\n      },\n      []\n    );\n\n    return sortBy(associationPayload, (associationData) => {\n      // DISASSOCIATE operations must be at the beginning\n      return associationData.operation === 'ASSOCIATE';\n    });\n  }\n\n  prepareAssociatedRecordInstanceForSaving(recordInstance): IRecordInstance {\n    const recordInstanceClone = this.prepareRecordInstance(recordInstance) as IRecordInstance;\n\n    recordInstanceClone.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id] =\n      recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id];\n\n    // todo ychubar fix typings\n    delete (recordInstanceClone as any).isNewInstance;\n\n    return recordInstanceClone;\n  }\n\n  createInstanceFromDataPageRow(dataPageRow, recordDefinition: IRecordDefinition): RecordInstance {\n    const plainRecordInstance = this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(\n      dataPageRow\n    ) as IRecordInstance;\n\n    plainRecordInstance.recordDefinitionName = recordDefinition.name;\n\n    forEach(plainRecordInstance.fieldInstances, (fieldInstance, fieldId) => {\n      const fieldDefinition =\n        find(recordDefinition.fieldDefinitions, { id: Number(fieldId) }) || ({} as IFieldDefinition);\n\n      if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) {\n        fieldInstance.resourceType = RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance;\n      }\n\n      // normalize record instance fields\n      if (!isNull(fieldInstance.value)) {\n        if (\n          isNumber(fieldInstance.value) &&\n          includes(\n            [RX_RECORD_DEFINITION.resourceTypes.boolean, RX_RECORD_DEFINITION.resourceTypes.selection],\n            fieldDefinition.resourceType\n          )\n        ) {\n          fieldInstance.value = String(fieldInstance.value);\n        }\n      }\n    });\n\n    return new RecordInstance(recordDefinition, plainRecordInstance, this.injector);\n  }\n}\n"]}