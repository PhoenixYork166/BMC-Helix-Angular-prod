{"version":3,"file":"default-expression-validator.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/expressions/default-expression-validator.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mCAAmC,EAAE,MAAM,wCAAwC,CAAC;AAC7F,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AAExE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;;;;;AAKpC,MAAM,OAAO,mCAAmC;IAC9C,YACU,eAAgC,EAChC,mCAAwE,EACxE,yBAAoD;QAFpD,oBAAe,GAAf,eAAe,CAAiB;QAChC,wCAAmC,GAAnC,mCAAmC,CAAqC;QACxE,8BAAyB,GAAzB,yBAAyB,CAA2B;IAC3D,CAAC;IAEJ,OAAO,CAAC,UAAkB,EAAE,sBAA6C;QACvE,MAAM,SAAS,GAAG,sBAAsB,IAAI,IAAI,CAAC,mCAAmC,CAAC;QACrF,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE;YAC9F,MAAM,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE9E,IAAI;gBACF,SAAS,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;aAC/C;YAAC,OAAO,CAAC,EAAE;gBACV,KAAK,GAAG,KAAK,CAAC;aACf;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;;gIAtBU,mCAAmC;oIAAnC,mCAAmC,cAFlC,MAAM;2FAEP,mCAAmC;kBAH/C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { RxDefaultExpressionEvaluatorService } from './default-expression-evaluator.service';\nimport { RxExpressionHelperService } from './expression-helper.service';\nimport { IExpressionValidator } from './expression-validator.interface';\nimport { Injectable } from '@angular/core';\nimport { RxStringService } from '@helix/platform/utils';\nimport { IExpressionEvaluator } from './expression-evaluator.types';\nimport { isFunction } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDefaultExpressionValidatorService implements IExpressionValidator {\n  constructor(\n    private rxStringService: RxStringService,\n    private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService,\n    private rxExpressionHelperService: RxExpressionHelperService\n  ) {}\n\n  isValid(expression: string, customEvaluatorService?: IExpressionEvaluator): boolean {\n    const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n    let valid = true;\n\n    if (this.rxStringService.isNonEmptyString(expression) && isFunction(evaluator.parseExpression)) {\n      const preparedExpression = this.rxExpressionHelperService.prepare(expression);\n\n      try {\n        evaluator.parseExpression(preparedExpression);\n      } catch (e) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  }\n}\n"]}