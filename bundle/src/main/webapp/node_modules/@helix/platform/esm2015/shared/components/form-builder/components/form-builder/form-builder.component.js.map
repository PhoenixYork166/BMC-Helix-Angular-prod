{"version":3,"file":"form-builder.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/shared/components/form-builder/components/form-builder/form-builder.component.ts","../../../../../../../../../libs/platform/shared/components/form-builder/components/form-builder/form-builder.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';\nimport {\n  IFormBuilderConfig,\n  IFormBuilderEvent,\n  IFormControlBuilderConfig,\n  IFormWidgetBuilderConfig,\n  IPlainObject\n} from '@helix/platform/shared/api';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { find, forEach, has, isEmpty, isEqual } from 'lodash';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FormBuilderFactory } from '../../form-builder.factory';\nimport { FormControlModel } from '../../models/form-control.model';\nimport { FormSectionModel } from '../../models/form-section.model';\nimport { FormWidgetModel } from '../../models/form-widget.model';\nimport { IFormBuilderEditor } from './form-builder-editor.interface';\nimport { FormBuilderService } from './form-builder.service';\n\n@Component({\n  selector: 'rx-form-builder',\n  templateUrl: './form-builder.component.html',\n  providers: [FormBuilderService]\n})\nexport class FormBuilderComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n  @Input()\n  config: IFormBuilderConfig;\n\n  @Input()\n  model: IPlainObject;\n\n  @Input()\n  guid: string = this.rxGuidService.generate();\n\n  @Input()\n  isReadOnly?: boolean;\n\n  @Input()\n  focusEditor$?: Observable<IFormBuilderEditor>;\n\n  @Output()\n  modelChange: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  editorEvent: EventEmitter<IFormBuilderEvent> = new EventEmitter();\n\n  @Output()\n  formInitialized: EventEmitter<void> = new EventEmitter();\n\n  layout: any;\n  formGroup: FormGroup;\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private formSubscription: Subscription;\n\n  constructor(\n    private formBuilderFactory: FormBuilderFactory,\n    private formBuilder: FormBuilder,\n    private rxGuidService: RxGuidService,\n    private formBuilderService: FormBuilderService\n  ) {\n    this.formGroup = this.formBuilder.group({});\n\n    this.subscribeOnFormDataChange();\n  }\n\n  ngOnInit(): void {\n    if (this.focusEditor$) {\n      this.focusEditor$.pipe(takeUntil(this.destroyed$)).subscribe((focusEditorEvent: IFormBuilderEditor) => {\n        this.formBuilderService.setFocusEditor(focusEditorEvent);\n      });\n    }\n\n    this.formBuilderService.editorEvent$.pipe(takeUntil(this.destroyed$)).subscribe((event: IFormBuilderEvent) => {\n      this.editorEvent.emit(event);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.model &&\n      changes.model.currentValue &&\n      !isEqual(changes.model.currentValue, changes.model.previousValue)\n    ) {\n      this.updateFormData(changes.model.currentValue);\n    }\n\n    if (changes.config) {\n      this.prepareLayout(changes.config.currentValue || []);\n    }\n\n    if (changes.isReadOnly && changes.isReadOnly.isFirstChange() && changes.isReadOnly.currentValue) {\n      this.formGroup.disable();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.formInitialized.next();\n  }\n\n  trackByControl(index: number, item: FormSectionModel): string {\n    return `${this.guid}${item.label}`;\n  }\n\n  ngOnDestroy(): void {\n    this.formSubscription.unsubscribe();\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  dispatch(event: IFormBuilderEvent): void {\n    this.formBuilderService.dispatch(event);\n  }\n\n  private updateFormData(model): void {\n    this.formSubscription.unsubscribe();\n\n    Object.keys(model).forEach((propertyName) => this.getFormControlByName(propertyName).setValue(model[propertyName]));\n\n    Object.keys(this.formGroup.getRawValue())\n      .filter((propertyName) => !has(model, propertyName))\n      .forEach((propertyName) => this.formGroup.removeControl(propertyName));\n\n    this.subscribeOnFormDataChange();\n  }\n\n  private prepareLayout(config: IFormBuilderConfig): void {\n    this.layout = {\n      controls: config.map((section) =>\n        this.formBuilderFactory.section({\n          ...section,\n          controls: section.controls.map((propertyControlConfig) => {\n            let model: FormControlModel | FormWidgetModel;\n\n            if (this.isFormControl(propertyControlConfig)) {\n              const control = this.getFormControlByName(propertyControlConfig.name);\n\n              this.isReadOnly || propertyControlConfig.isDisabled\n                ? control.disable({ emitEvent: false })\n                : control.enable({ emitEvent: false });\n\n              model = this.formBuilderFactory.control(propertyControlConfig, control);\n            } else {\n              model = this.formBuilderFactory.widget({\n                ...propertyControlConfig,\n                isDisabled: propertyControlConfig.isDisabled || this.isReadOnly\n              });\n            }\n\n            return model;\n          })\n        })\n      )\n    };\n  }\n\n  private getFormControlByName(name: string): AbstractControl {\n    let control = this.formGroup.controls[name];\n\n    if (!control) {\n      let validators: ValidatorFn[];\n\n      forEach(this.config, (section) => {\n        const formControlConfig = find(section.controls, { name }) as IFormControlBuilderConfig;\n\n        if (formControlConfig) {\n          validators = formControlConfig.validators;\n        }\n\n        return !formControlConfig;\n      });\n\n      control = this.formBuilder.control(null, validators || []);\n\n      this.formGroup.addControl(name, control);\n    }\n\n    return control;\n  }\n\n  private subscribeOnFormDataChange(): void {\n    this.formSubscription = this.formGroup.valueChanges.subscribe(() => {\n      // Get a raw value for all form controls including disabled.\n      const rawValue = this.formGroup.getRawValue();\n      // Check if rawValue is not an empty object, in this case we don't\n      // want to emit model change when current model value is null.\n      const formData = isEmpty(rawValue) ? null : rawValue;\n\n      if (!isEqual(formData, this.model)) {\n        this.modelChange.emit(formData);\n      }\n    });\n  }\n\n  private isFormControl(\n    config: IFormControlBuilderConfig | IFormWidgetBuilderConfig\n  ): config is IFormControlBuilderConfig {\n    return !!(config as IFormControlBuilderConfig).name;\n  }\n}\n","<form *ngIf=\"layout\">\n  <rx-form-section\n    *ngFor=\"let control of layout.controls; trackBy: trackByControl\"\n    [section]=\"control\"\n    [guid]=\"guid\"\n  ></rx-form-section>\n</form>\n"]}