{"version":3,"file":"process-shape.mixin.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/process/elements/shared/process-shape/process-shape.mixin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAEhE,OAAO,EAAe,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACjE,OAAO,EAAE,uBAAuB,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAIrF,MAAM,UAAU,mBAAmB,CAA4B,IAAW;IACxE,OAAO,MAAM,cAAe,SAAQ,IAAI;QAAjC;;YACL,cAAS,GAAG,SAAS,CAAC;QAgOxB,CAAC;QA9NC,UAAU,CAAC,MAAW;YACpB,aAAa;YACb,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAEzB,aAAa;YACb,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1C,aAAa;YACb,IAAI,CAAC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAClD,aAAa;YACb,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YACtC,aAAa;YACb,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAE1D,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE7F,aAAa;YACb,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC;YACrD,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACxD,CAAC;QAED,iBAAiB;YACf,OAAO,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,GAAG,EAAE,CAAC;QACpE,CAAC;QAED,aAAa,CAAC,UAAU,EAAE,KAAK;YAC7B,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9D,aAAa;YACb,MAAM,gCAAgC,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBACpE,MAAM,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;iBACjC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE5E,OAAO,CAAC,YAAY,IAAI,CAAC,gCAAgC,CAAC;QAC5D,CAAC;QAED,eAAe,CAAC,SAAS,EAAE,KAAK;YAC9B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,QAAQ;YACN,aAAa;YACb,OAAO,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACzC,CAAC;QAED,SAAS;YACP,aAAa;YACb,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;gBACzB,cAAc;gBACd,QAAQ;gBACR,QAAQ;gBACR,yBAAyB;gBACzB,4BAA4B;gBAC5B,uBAAuB;gBACvB,gBAAgB;aACjB,CAAC,CAAC;QACL,CAAC;QAED,WAAW;YACT,aAAa;YACb,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,CAAC;QAED,oBAAoB,CAAC,OAAO,EAAE,IAAI;YAChC,QAAQ,IAAI,EAAE;gBACZ,KAAK,MAAM;oBACT,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE;4BACR,UAAU,EAAE,QAAQ;yBACrB;wBACD,QAAQ,EAAE;4BACR,cAAc,EAAE,CAAC;4BACjB,kBAAkB,EAAE,MAAM;yBAC3B;wBACD,IAAI,EAAE;4BACJ,GAAG,EAAE,QAAQ;yBACd;wBACD,KAAK,EAAE;4BACL,GAAG,EAAE,QAAQ;yBACd;wBACD,IAAI,EAAE;4BACJ,EAAE,EAAE,CAAC;4BACL,EAAE,EAAE,CAAC;yBACN;qBACF,CAAC,CAAC;oBAEH,MAAM;gBAER,KAAK,mBAAmB;oBACtB,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE;4BACR,UAAU,EAAE,QAAQ;yBACrB;wBACD,QAAQ,EAAE;4BACR,cAAc,EAAE,CAAC;4BACjB,kBAAkB,EAAE,KAAK;yBAC1B;wBACD,IAAI,EAAE;4BACJ,GAAG,EAAE,QAAQ;yBACd;wBACD,KAAK,EAAE;4BACL,GAAG,EAAE,QAAQ;yBACd;wBACD,IAAI,EAAE;4BACJ,EAAE,EAAE,CAAC;4BACL,EAAE,EAAE,CAAC;yBACN;qBACF,CAAC,CAAC;oBAEH,MAAM;gBAER,KAAK,eAAe;oBAClB,OAAO,CAAC,IAAI,CAAC;wBACX,QAAQ,EAAE;4BACR,UAAU,EAAE,QAAQ;yBACrB;wBACD,QAAQ,EAAE;4BACR,cAAc,EAAE,CAAC;4BACjB,kBAAkB,EAAE,MAAM;yBAC3B;wBACD,IAAI,EAAE;4BACJ,GAAG,EAAE,QAAQ;yBACd;wBACD,KAAK,EAAE;4BACL,GAAG,EAAE,QAAQ;yBACd;wBACD,IAAI,EAAE;4BACJ,EAAE,EAAE,CAAC;4BACL,EAAE,EAAE,CAAC;yBACN;qBACF,CAAC,CAAC;oBAEH,MAAM;aACT;QACH,CAAC;QAED,aAAa;YACX,aAAa;YACb,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACpC,aAAa;YACb,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;YAEpE,MAAM,OAAO,GAAG,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAEjD,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACtC,sCAAsC;gBACtC,aAAa;gBACb,IAAI,CAAC,IAAI,CAAC;oBACR,UAAU,EAAE;wBACV,mGAAmG;wBACnG,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC;wBACnB,KAAK,EAAE,OAAO;qBACf;iBACF,CAAC,CAAC;aACJ;iBAAM;gBACL,uCAAuC;gBACvC,+CAA+C;gBAC/C,aAAa;gBACb,IAAI,CAAC,IAAI,CAAC;oBACR,UAAU,EAAE;wBACV,IAAI,EAAE,KAAK;wBACX,KAAK,EAAE,OAAO;qBACf;iBACF,CAAC,CAAC;aACJ;QACH,CAAC;QAED,UAAU;YACR,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7E,CAAC;QAEO,UAAU,CAAC,OAAO,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAE/C,IAAI,IAAI,EAAE;gBACR,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;aAClG;YAED,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QACxG,CAAC;QAEO,oBAAoB,CAAC,OAAO,EAAE,YAAY,EAAE,OAAO;YACzD,IAAI,OAAO,CAAC,YAAY,KAAK,oBAAoB,EAAE;gBACjD,aAAa;gBACb,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC;gBAErD,IAAI,SAAS,EAAE;oBACb,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAC1C;aACF;YAED,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;QAEO,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO;YACjD,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,aAAa,EAAE;gBACjD,aAAa;gBACb,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAEnD,MAAM,aAAa,GAAG;oBACpB,EAAE,EAAE,gBAAgB,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;oBACnC,EAAE,EAAE,gBAAgB,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;iBACpC,CAAC;gBAEF,aAAa;gBACb,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;oBAC/C,IAAI,YAAY,CAAC,mBAAmB,EAAE;wBACpC,YAAY,CAAC,mBAAmB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;qBACvD;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QAEO,YAAY,CAAC,OAAO;YAC1B,OAAO,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;gBAClD,IAAI,YAAY,CAAC,eAAe,IAAI,YAAY,CAAC,mBAAmB,EAAE;oBACpE,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;iBAChD;YACH,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { chain, escape, isEmpty, omit, truncate } from 'lodash';\n\nimport { Constructor, RxIdService } from '@helix/platform/utils';\nimport { RxCommandManagerService, RxRootInjector } from '@helix/platform/shared/api';\n\ndeclare var joint: any;\n\nexport function RxProcessShapeMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxProcessShape extends Base {\n    labelPath = 'content';\n\n    initialize(config: any): void {\n      // @ts-ignore\n      super.initialize(config);\n\n      // @ts-ignore\n      this.on('change:size', this.onSizeChange);\n      // @ts-ignore\n      this.on('change:position', this.onPositionChange);\n      // @ts-ignore\n      this.on('change:id', this.onIdChange);\n      // @ts-ignore\n      this.on('change:elementModel', this.onElementModelChange);\n\n      // @ts-ignore\n      this.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(this.get('id')));\n\n      // @ts-ignore\n      const labelPath = this.get('labelPath') || 'content';\n      // @ts-ignore\n      this.prop('elementModel/label', this.prop(labelPath));\n    }\n\n    getCommandManager(): any {\n      return RxRootInjector.injector.get(RxCommandManagerService).get();\n    }\n\n    canBeEmbedded(parentView, paper): boolean {\n      const hasNeighbors = !isEmpty(paper.model.getNeighbors(this));\n\n      // @ts-ignore\n      const hasBoundaryElementsWithNeighbors = chain(this.getEmbeddedCells())\n        .filter({ isBoundaryEvent: true })\n        .some((embeddedCell) => !isEmpty(paper.model.getNeighbors(embeddedCell)));\n\n      return !hasNeighbors && !hasBoundaryElementsWithNeighbors;\n    }\n\n    canEmbedElement(childView, paper): boolean {\n      return false;\n    }\n\n    getLabel(): string {\n      // @ts-ignore\n      return this.prop('elementModel/label');\n    }\n\n    getLayout(): string[] {\n      // @ts-ignore\n      return omit(this.toJSON(), [\n        'elementModel',\n        'embeds',\n        'layout',\n        'parentProcessDefinition',\n        'ownerProcessDefinitionName',\n        'localizableProperties',\n        'inputMapFields'\n      ]);\n    }\n\n    getParentId(): string {\n      // @ts-ignore\n      return this.get('parent');\n    }\n\n    onActivityTypeChange(element, type): void {\n      switch (type) {\n        case 'task':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 2, //changed original value 1 to new value 2\n              'stroke-dasharray': 'none'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n\n          break;\n\n        case 'event-sub-process':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 2, //changed original value 1 to new value 2\n              'stroke-dasharray': '1,2'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n\n          break;\n\n        case 'call-activity':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 4, //changed original value 5 to new value 4\n              'stroke-dasharray': 'none'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n\n          break;\n      }\n    }\n\n    updateContent(): void {\n      // @ts-ignore\n      const content = this.get('content');\n      // @ts-ignore\n      const label = this.id ? content : truncate(content, { length: 20 });\n\n      const tooltip = label === content ? '' : content;\n\n      if (joint.env.test('svgforeignobject')) {\n        // Content element is a <div> element.\n        // @ts-ignore\n        this.attr({\n          '.content': {\n            // escape the label to patch XSS vulnerability (http://clientio.freshdesk.com/helpdesk/tickets/522)\n            html: escape(label),\n            title: tooltip\n          }\n        });\n      } else {\n        // Content element is a <text> element.\n        // SVG elements don't have innerHTML attribute.\n        // @ts-ignore\n        this.attr({\n          '.content': {\n            text: label,\n            title: tooltip\n          }\n        });\n      }\n    }\n\n    updateName(): void {\n      // @ts-ignore\n      this.prop('elementModel/name', this.getLabel() || this.get('defaultName'));\n    }\n\n    private onIdChange(element, id): void {\n      const guid = element.prop('elementModel/guid');\n\n      if (guid) {\n        element.prop('lastId', RxRootInjector.injector.get(RxIdService).getBase(guid), { silent: true });\n      }\n\n      element.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(id), { silent: true });\n    }\n\n    private onElementModelChange(element, elementModel, options): void {\n      if (options.propertyPath === 'elementModel/label') {\n        // @ts-ignore\n        const labelPath = this.get('labelPath') || 'content';\n\n        if (labelPath) {\n          element.prop(labelPath, this.getLabel());\n        }\n      }\n\n      this.updateName();\n    }\n\n    private onPositionChange(element, position, options): void {\n      if (!options.translateBy && options.propertyValue) {\n        // @ts-ignore\n        const previousPosition = this.previous('position');\n\n        const parentMovedBy = {\n          cx: previousPosition.x - position.x,\n          cy: previousPosition.y - position.y\n        };\n\n        // @ts-ignore\n        this.getEmbeddedCells().forEach((embeddedCell) => {\n          if (embeddedCell._snapToParentBorder) {\n            embeddedCell._snapToParentBorder(this, parentMovedBy);\n          }\n        });\n      }\n    }\n\n    private onSizeChange(element): void {\n      element.getEmbeddedCells().forEach((embeddedCell) => {\n        if (embeddedCell.isBoundaryEvent && embeddedCell._snapToParentBorder) {\n          embeddedCell._snapToParentBorder(embeddedCell);\n        }\n      });\n    }\n  };\n}\n"]}