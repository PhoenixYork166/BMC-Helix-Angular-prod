{"version":3,"file":"angular-application.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/application/angular-application.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAElC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAC9E,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;;;;AAKxD,MAAM,OAAO,2BAA2B;IA6BtC,YAAoB,sBAA8C,EAAU,eAAgC;QAAxF,2BAAsB,GAAtB,sBAAsB,CAAwB;QAAU,oBAAe,GAAf,eAAe,CAAiB;QA5BpG,mCAA8B,GAAyB,IAAI,CAAC,sBAAsB;aACvF,oBAAoB,CAAC,iBAAiB,CAAC,YAAY,CAAC,sBAAsB,EAAE;YAC3E,sBAAsB,EAAE,cAAc,CAAC,gCAAgC;SACxE,CAAC;aACD,IAAI,CACH,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAC5B,qBAAqB,CAAC,IAAI;aACvB,MAAM,CAAC,CAAC,6BAA6B,EAAE,EAAE,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,KAAK,MAAM,CAAC;aAC7G,GAAG,CAAC,CAAC,6BAA6B,EAAE,EAAE,CAAC,6BAA6B,CAAC,gBAAgB,CAAW,CAAC;aACjG,MAAM,CAAC,cAAc,CAAC,6BAA6B,CAAC,CACxD,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEI,oCAA+B,GAAyB,IAAI,CAAC,sBAAsB;aACxF,oBAAoB,CAAC,iBAAiB,CAAC,YAAY,CAAC,qBAAqB,EAAE;YAC1E,sBAAsB,EAAE,cAAc,CAAC,gCAAgC;SACxE,CAAC;aACD,IAAI,CACH,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAC5B,qBAAqB,CAAC,IAAI;aACvB,MAAM,CAAC,CAAC,4BAA4B,EAAE,EAAE,CAAC,4BAA4B,CAAC,uBAAuB,CAAC,KAAK,MAAM,CAAC;aAC1G,GAAG,CAAC,CAAC,4BAA4B,EAAE,EAAE,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,CAAC;aACrF,MAAM,CAAC,cAAc,CAAC,8BAA8B,CAAC,CACzD,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IAE2G,CAAC;IAEhH,sBAAsB,CAAC,QAAQ;QAC7B,OAAO,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAC7C,GAAG,CAAC,CAAC,6BAA6B,EAAE,EAAE,CAAC,QAAQ,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC,CAC1F,CAAC;IACJ,CAAC;IAED,6BAA6B,CAAC,QAAQ;QACpC,OAAO,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAC9C,GAAG,CAAC,CAAC,8BAA8B,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC,CACnH,CAAC;IACJ,CAAC;;wHAzCU,2BAA2B;4HAA3B,2BAA2B,cAF1B,MAAM;2FAEP,2BAA2B;kBAHvC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxStringService } from '@helix/platform/utils';\nimport { includes } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { RX_ADMINISTRATION, RxAdminSettingsService } from '../administration';\nimport { RX_APPLICATION } from './application.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAngularApplicationService {\n  private angularJsApplicationBundleIds$: Observable<string[]> = this.rxAdminSettingsService\n    .getComponentGridData(RX_ADMINISTRATION.settingNames.newApplicationUiOptOut, {\n      'default-bundle-scope': RX_APPLICATION.environmentConfigurationBundleId\n    })\n    .pipe(\n      map((gridComponentSettings) =>\n        gridComponentSettings.rows\n          .filter((newApplicationUiOptOutSetting) => newApplicationUiOptOutSetting['Use old application UI'] === 'true')\n          .map((newApplicationUiOptOutSetting) => newApplicationUiOptOutSetting['Application ID'] as string)\n          .concat(RX_APPLICATION.angularJsApplicationBundleIds)\n      ),\n      shareReplay(1)\n    );\n\n  private angularJsViewDesignerBundleIds$: Observable<string[]> = this.rxAdminSettingsService\n    .getComponentGridData(RX_ADMINISTRATION.settingNames.newViewDesignerOptOut, {\n      'default-bundle-scope': RX_APPLICATION.environmentConfigurationBundleId\n    })\n    .pipe(\n      map((gridComponentSettings) =>\n        gridComponentSettings.rows\n          .filter((newViewDesignerOptOutSetting) => newViewDesignerOptOutSetting['Use old view designer'] === 'true')\n          .map((newViewDesignerOptOutSetting) => newViewDesignerOptOutSetting['Application ID'])\n          .concat(RX_APPLICATION.angularJsViewDesignerBundleIds)\n      ),\n      shareReplay(1)\n    );\n\n  constructor(private rxAdminSettingsService: RxAdminSettingsService, private rxStringService: RxStringService) {}\n\n  isAngularJsApplication(bundleId): Observable<boolean> {\n    return this.angularJsApplicationBundleIds$.pipe(\n      map((angularJsApplicationBundleIds) => includes(angularJsApplicationBundleIds, bundleId))\n    );\n  }\n\n  isAngularJsViewDesignerBundle(bundleId): Observable<boolean> {\n    return this.angularJsViewDesignerBundleIds$.pipe(\n      map((angularJsViewDesignerBundleIds) => this.rxStringService.isIncluded(bundleId, angularJsViewDesignerBundleIds))\n    );\n  }\n}\n"]}