{"version":3,"file":"view-component-registry.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/registries/view-component-registry.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACrE,OAAO,EAEL,cAAc,EACd,oBAAoB,EACpB,oBAAoB,EACpB,YAAY,EACb,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;;;;AAMlD,MAAM,OAAO,8BAA8B;IAKzC,YACU,wBAAkD,EAClD,oBAA0C,EAC1C,oBAA0C,EAC1C,eAAgC,EAChC,YAA0B;QAJ1B,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QATpC,gDAAgD;QACxC,yBAAoB,GAA0C,IAAI,GAAG,EAAE,CAAC;QACxE,8BAAyB,GAAwC,EAAE,CAAC;QAUpE,oBAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAC7E,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE,CACxB,iBAAiB,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,gBAAgB,EAAE,EAAE;;YAC5D,MAAA,gBAAgB,CAAC,SAAS,CAAC,cAAc,0CAAE,OAAO,CAAC,CAAC,iBAAyB,EAAE,EAAE;gBAC/E,cAAc,CAAC,iBAAiB,CAAC,GAAG,gBAAgB,CAAC,EAAE,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QACxB,CAAC,EAAE,EAAE,CAAC,CACP,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IAbC,CAAC;IAeJ,uBAAuB;QACrB,IAAI,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,yBAAyB,CAAC,MAAM,kCAAkC,CAAC,CAAC;YAE9G,OAAO,KAAK,CAAC,GAAG,EAAE,CAChB,IAAI,CACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;gBAC/D,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBACjC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,YAAY,CAAC,KAAK,CACrB,YAAY,WAAW,CAAC,MAAM,gCAAgC,WAAW;qBACtE,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;qBACxB,IAAI,CAAC,IAAI,CAAC,GAAG,CACjB,CAAC;gBAEF,OAAO,IAAI,CAAC,oBAAoB,CAAC;YACnC,CAAC,CAAC,CACH,CACF,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SACtC;IACH,CAAC;IAED,uBAAuB;QACrB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED,GAAG,CAAC,IAAY;QACd,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,QAAQ,CAAC,GAAG,oBAAsF;QAChG,oBAAoB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC1C,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,UAAoC;;QAC/C,IAAI,MAAA,UAAU,CAAC,OAAO,0CAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACjD,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,aAAa,UAAU,CAAC,IAAI,oEAAoE,CACjG,CAAC;YAEF,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,CAAC;SACpF;QAED,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE3D,MAAA,UAAU,CAAC,OAAO,0CAAE,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACnC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB,CAAC,mBAA6C;QACrE,OAAO,OAAO,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;IACtD,CAAC;IAED,uBAAuB,CAAC,QAAgB,EAAE,cAAc,GAAG,KAAK;QAC9D,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,CAAC,mBAA6C,EAAE,EAAE,CAClG,mBAAmB,CAAC,eAAe,IAAI,OAAO,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;YACpF,CAAC,CAAC,mBAAmB,CAAC,QAAQ,KAAK,QAAQ;YAC3C,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,mBAAmB,CAAC,kBAAkB,CAAC,CACxD,CAAC;IAClC,CAAC;IAED,qBAAqB,CAAC,cAAc,GAAG,KAAK;QAC1C,OAAO,IAAI,CAAC,oBAAoB;aAC7B,4BAA4B,EAAE;aAC9B,IAAI,CACH,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE,CACxB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,MAAM,CACxC,CAAC,mBAAmB,EAAE,EAAE,CACtB,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,iBAAiB,CAAC;YACtE,IAAI,CAAC,mCAAmC,CAAC,mBAAmB,CAAC,CAChE,CACF,CACF,CAAC;IACN,CAAC;IAED,yBAAyB,CAAC,iBAAyB;QACjD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC/F,CAAC;IAEO,gBAAgB,CAAC,QAAgB,EAAE,iBAAsC;QAC/E,OAAO,QAAQ,KAAK,cAAc,CAAC,gBAAgB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IACnG,CAAC;IAEO,mCAAmC,CAAC,mBAA6C;QACvF,OAAO,CACL,OAAO,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,mBAAmB,CAAC,kBAAkB,CAAC,CAC5G,CAAC;IACJ,CAAC;IAEO,cAAc,CAAC,cAAc,GAAG,KAAK;QAC3C,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,EAAE;;YACpF,IAAI,cAAc,IAAI,CAAC,CAAA,MAAA,UAAU,CAAC,OAAO,0CAAE,QAAQ,CAAC,IAAI,CAAC,CAAA,EAAE;gBACzD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACzB;YAED,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;;2HAnIU,8BAA8B;+HAA9B,8BAA8B,cAF7B,MAAM;2FAEP,8BAA8B;kBAH1C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport {\n  IBundleDescriptor,\n  RX_APPLICATION,\n  RxBundleCacheService,\n  RxGlobalCacheService,\n  RxLogService\n} from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\nimport { isEmpty, some } from 'lodash';\nimport { defer, from, Observable, of } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { IViewComponentDescriptor } from './view-component-descriptor.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewComponentRegistryService {\n  // contains all registered component descriptors\n  private componentDescriptors: Map<string, IViewComponentDescriptor> = new Map();\n  private asyncComponentDescriptors: Promise<IViewComponentDescriptor>[] = [];\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxStringService: RxStringService,\n    private rxLogService: RxLogService\n  ) {}\n\n  private ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(\n    map((bundleDescriptors) =>\n      bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n        bundleDescriptor.uiOptions.viewComponents?.forEach((viewComponentName: string) => {\n          ownerBundleIds[viewComponentName] = bundleDescriptor.id;\n        });\n\n        return ownerBundleIds;\n      }, {})\n    ),\n    shareReplay(1)\n  );\n\n  resolveAsyncDescriptors(): Observable<Map<string, IViewComponentDescriptor>> {\n    if (this.asyncComponentDescriptors.length) {\n      this.rxLogService.debug(`Resolving ${this.asyncComponentDescriptors.length} view component descriptor(s)...`);\n\n      return defer(() =>\n        from(\n          Promise.all(this.asyncComponentDescriptors).then((descriptors) => {\n            descriptors.forEach((descriptor) => {\n              this.registerSync(descriptor);\n            });\n\n            this.rxLogService.debug(\n              `Resolved ${descriptors.length} view component descriptors: ${descriptors\n                .map((desc) => desc.type)\n                .join(', ')}.`\n            );\n\n            return this.componentDescriptors;\n          })\n        )\n      );\n    } else {\n      return of(this.componentDescriptors);\n    }\n  }\n\n  getRegisteredComponents(): Map<string, IViewComponentDescriptor> {\n    return this.componentDescriptors;\n  }\n\n  get(type: string): IViewComponentDescriptor {\n    return this.componentDescriptors.get(type);\n  }\n\n  register(...componentDescriptors: IViewComponentDescriptor[] | Promise<IViewComponentDescriptor>[]): void {\n    componentDescriptors.forEach((descriptor) => {\n      this.asyncComponentDescriptors.push(Promise.resolve(descriptor));\n    });\n  }\n\n  registerSync(descriptor: IViewComponentDescriptor): void {\n    if (descriptor.aliases?.includes(descriptor.type)) {\n      this.rxLogService.warning(\n        `Component ${descriptor.type} should not have its type listed in descriptor's aliases property.`\n      );\n\n      descriptor.aliases = descriptor.aliases.filter((type) => type !== descriptor.type);\n    }\n\n    this.componentDescriptors.set(descriptor.type, descriptor);\n\n    descriptor.aliases?.forEach((type) => {\n      this.componentDescriptors.set(type, descriptor);\n    });\n  }\n\n  isDataComponentDescriptor(componentDescriptor: IViewComponentDescriptor): boolean {\n    return Boolean(componentDescriptor.isDataComponent);\n  }\n\n  getBundlePageComponents(bundleId: string, includeAliases = false): IViewComponentDescriptor[] {\n    return this.getDescriptors(includeAliases).filter((componentDescriptor: IViewComponentDescriptor) =>\n      componentDescriptor.isPageComponent && isEmpty(componentDescriptor.availableInBundles)\n        ? componentDescriptor.bundleId === bundleId\n        : this.rxStringService.isIncluded(bundleId, componentDescriptor.availableInBundles)\n    ) as IViewComponentDescriptor[];\n  }\n\n  getLicensedComponents(includeAliases = false): Observable<IViewComponentDescriptor[]> {\n    return this.rxGlobalCacheService\n      .getLicensedBundleDescriptors()\n      .pipe(\n        map((bundleDescriptors) =>\n          this.getDescriptors(includeAliases).filter(\n            (componentDescriptor) =>\n              this.isBundleLicensed(componentDescriptor.bundleId, bundleDescriptors) &&\n              this.isComponentAvailableInCurrentBundle(componentDescriptor)\n          )\n        )\n      );\n  }\n\n  getComponentOwnerBundleId(viewComponentType: string): Observable<string> {\n    return this.ownerBundleIds$.pipe(map((ownerBundleIds) => ownerBundleIds[viewComponentType]));\n  }\n\n  private isBundleLicensed(bundleId: string, bundleDescriptors: IBundleDescriptor[]): boolean {\n    return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, { id: bundleId });\n  }\n\n  private isComponentAvailableInCurrentBundle(componentDescriptor: IViewComponentDescriptor): boolean {\n    return (\n      isEmpty(componentDescriptor.availableInBundles) ||\n      this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, componentDescriptor.availableInBundles)\n    );\n  }\n\n  private getDescriptors(includeAliases = false): IViewComponentDescriptor[] {\n    return [...this.componentDescriptors.entries()].reduce((result, [type, descriptor]) => {\n      if (includeAliases || !descriptor.aliases?.includes(type)) {\n        result.push(descriptor);\n      }\n\n      return result;\n    }, []);\n  }\n}\n"]}