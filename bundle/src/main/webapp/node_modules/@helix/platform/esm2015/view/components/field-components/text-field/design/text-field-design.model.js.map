{"version":3,"file":"text-field-design.model.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { IFieldDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISwitcherFormControlOptions,\n  RxDefinitionPickerComponent,\n  RX_DEFINITION_PICKER,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  NamedListFilterExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\nimport { ITextFieldProperties } from './text-field-design.types';\nimport { omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class TextFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(initialProperties?: ITextFieldProperties): ITextFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      enableMultiSelection: null,\n      additionalQueryCriteria: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<ITextFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return this.selectedFieldDefinition$.pipe(\n      switchMap((fieldDefinition) =>\n        super\n          .getInspectorConfig()\n          .pipe(\n            map((inspectorConfig) =>\n              fieldDefinition?.namedListDefinition\n                ? this.getNamedListInspectorConfig(inspectorConfig, fieldDefinition)\n                : inspectorConfig\n            )\n          )\n      )\n    );\n  }\n\n  private getNamedListInspectorConfig(\n    inspectorConfig: IViewDesignerInspectorConfig,\n    fieldDefinition: IFieldDefinition\n  ): IViewDesignerInspectorConfig {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      fieldDefinition,\n      this.injector\n    );\n\n    const enableMultiSelectionControl = {\n      name: 'enableMultiSelection',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Enable multi-selection'\n      } as ISwitcherFormControlOptions\n    };\n\n    const additionalQueryCriteriaControls = [\n      {\n        name: 'namedListDefinitionName',\n        component: RxDefinitionPickerComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.named-list.label'),\n          definitionType: RX_DEFINITION_PICKER.definitionTypes.namedList.type\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'additionalQueryCriteria',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Additional named list filter',\n          tooltip: new Tooltip(\n            'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n          ),\n          dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n          operators: namedListFilterExpressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      }\n    ];\n\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(enableMultiSelectionControl);\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(...additionalQueryCriteriaControls);\n\n    // update the named list name for named list inspector control\n    this.sandbox.updateComponentProperties({ namedListDefinitionName: fieldDefinition.namedListDefinition });\n\n    return inspectorConfig;\n  }\n\n  getPropertiesByName(properties: ITextFieldProperties): ITextFieldProperties {\n    return omit(super.getPropertiesByName(properties) as ITextFieldProperties, 'namedListDefinitionName');\n  }\n}\n"]}