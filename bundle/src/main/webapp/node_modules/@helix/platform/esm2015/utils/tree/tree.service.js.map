{"version":3,"file":"tree.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/tree/tree.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAK3C,MAAM,OAAO,aAAa;IACxB,OAAO,CAAC,IAAS,EAAE,uBAA+B,UAAU;QAC1D,MAAM,eAAe,GAAU,EAAE,CAAC;QAClC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,WAAgB,CAAC;QAErB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjB,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAE1B,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAElC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE;gBAC/C,WAAW,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC,YAAiB,EAAE,EAAE;oBAC9D,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAC;aACJ;SACF;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,IAAS,EAAE,GAAG,qBAA+B;QACvD,IAAI,KAAK,GAAU,EAAE,CAAC;QACtB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,WAAgB,CAAC;QAErB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjB,OAAO,YAAY,GAAG,KAAK,CAAC,MAAM,EAAE;YAClC,WAAW,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;YAEpC,IAAI,WAAW,EAAE;gBACf,OAAO,CAAC,qBAAqB,EAAE,UAAU,YAAY;oBACnD,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,EAAE;wBACvC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;qBACjD;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,SAAS,CAAC,IAAS,EAAE,SAA+B;QAClD,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,WAAW,GAAG,IAAI,CAAC;QAEvB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjB,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;YAE1B,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAElC,SAAS,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;gBAC9C,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;;0GA/DU,aAAa;8GAAb,aAAa,cAFZ,MAAM;2FAEP,aAAa;kBAHzB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { forEach, isEmpty, size } from 'lodash';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxTreeService {\n  flatten(tree: any, childrenPropertyName: string = 'children'): any[] {\n    const flattenElements: any[] = [];\n    const stack = [];\n    let currentNode: any;\n\n    stack.push(tree);\n\n    while (stack.length > 0) {\n      currentNode = stack.pop();\n\n      flattenElements.push(currentNode);\n\n      if (!isEmpty(currentNode[childrenPropertyName])) {\n        currentNode[childrenPropertyName].forEach((childrenNode: any) => {\n          stack.push(childrenNode);\n        });\n      }\n    }\n\n    return flattenElements;\n  }\n\n  flattenTree(tree: any, ...childrenPropertyNames: string[]): any[] {\n    let queue: any[] = [];\n    let currentIndex = 0;\n    let currentNode: any;\n\n    queue.push(tree);\n\n    while (currentIndex < queue.length) {\n      currentNode = queue[currentIndex++];\n\n      if (currentNode) {\n        forEach(childrenPropertyNames, function (propertyName) {\n          if (size(currentNode[propertyName]) > 0) {\n            queue = queue.concat(currentNode[propertyName]);\n          }\n        });\n      }\n    }\n\n    return queue;\n  }\n\n  flattenBy(tree: any, predicate: (node: any) => any[]): any[] {\n    const flattenElements = [];\n    const stack = [];\n    let currentNode = null;\n\n    stack.push(tree);\n\n    while (stack.length > 0) {\n      currentNode = stack.pop();\n\n      flattenElements.push(currentNode);\n\n      predicate(currentNode).forEach((childrenNode) => {\n        stack.push(childrenNode);\n      });\n    }\n\n    return flattenElements;\n  }\n}\n"]}