{"version":3,"file":"rich-text.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rich-text/runtime/rich-text.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAU,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,YAAY,EAAY,MAAM,2BAA2B,CAAC;AACnE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,iBAAiB,EAA6B,MAAM,8BAA8B,CAAC;AAE5F,OAAO,EAAE,6BAA6B,EAAE,MAAM,0BAA0B,CAAC;;;;AAezE,MAAM,OAAO,iBAAkB,SAAQ,iBAAiB;IAWtD,YAAoB,SAAuB,EAAU,6BAA4D;QAC/G,KAAK,EAAE,CAAC;QADU,cAAS,GAAT,SAAS,CAAc;QAAU,kCAA6B,GAA7B,6BAA6B,CAA+B;QANjH,WAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAEjC,QAAG,GAAG;YACJ,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;SACzC,CAAC;QAKA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,6BAA6B,CAAC,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEjB,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAE5C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YAChE,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,KAAK,EAAE;YACT,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAErC,MAAM,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC9D,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAErD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9B,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC3B,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;aAAM;YACL,KAAK,GAAG,EAAE,CAAC;SACZ;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAED,WAAW,CAAC,YAAoB,EAAE,KAAU;QAC1C,IAAI,YAAY,KAAK,QAAQ,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAEtB,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACzD;aAAM;YACL,OAAO,UAAU,CAAC,uBAAuB,YAAY,mBAAmB,CAAC,CAAC;SAC3E;IACH,CAAC;;8GArDU,iBAAiB;kGAAjB,iBAAiB,yGAXlB;;;;;;;;GAQT;2FAGU,iBAAiB;kBAb7B,SAAS;mBAAC;oBACT,QAAQ,EAAE,cAAc;oBACxB,QAAQ,EAAE;;;;;;;;GAQT;oBACD,SAAS,EAAE,CAAC,4BAA4B,CAAC;iBAC1C;+IAGC,MAAM;sBADL,KAAK","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Observable, throwError } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { BaseViewComponent, IViewComponentSetProperty } from '@helix/platform/view/runtime';\nimport { IRichTextConfig } from './rich-text.types';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\n\n@Component({\n  selector: 'rx-rich-text',\n  template: `\n    <div\n      class=\"text-container focusable\"\n      [hidden]=\"isHidden\"\n      tabindex=\"0\"\n      [innerHTML]=\"html\"\n      [attr.aria-hidden]=\"isHidden\"\n    ></div>\n  `,\n  styleUrls: ['./rich-text.component.scss']\n})\nexport class RichTextComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  @Input()\n  config: Observable<IRichTextConfig>;\n\n  html: SafeHtml;\n  filter = new CKEDITOR.filter('');\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private sanitizer: DomSanitizer, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super();\n\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      this.isHidden = Boolean(config.hidden);\n      this.html = this.updateHtml(config.html);\n    });\n  }\n\n  updateHtml(value: string): SafeHtml {\n    if (value) {\n      value = value.replace(/\\n/g, '<br>');\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(value);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n      value = writer.getHtml(true);\n    } else {\n      value = '';\n    }\n\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n\n  setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = value;\n\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Rich text: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n"]}