{"version":3,"file":"admin-common-settings-editor.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/admin-common-settings-editor/admin-common-settings-editor.component.ts","../../../../../../../libs/platform/admin/components/admin-common-settings-editor/admin-common-settings-editor.component.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,WAAW,EACX,KAAK,EAEL,QAAQ,EACR,MAAM,EACN,SAAS,EACT,YAAY,EACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAIL,sBAAsB,EACtB,qBAAqB,EACtB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AACzE,OAAO,EAAc,QAAQ,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAC9E,OAAO,EAAqB,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACzF,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EACL,KAAK,EACL,SAAS,EACT,KAAK,EACL,MAAM,EACN,IAAI,EACJ,SAAS,EACT,OAAO,EACP,OAAO,EACP,MAAM,EACN,IAAI,EACJ,GAAG,IAAI,IAAI,EACX,IAAI,EACL,MAAM,QAAQ,CAAC;AAChB,OAAO,EAAE,QAAQ,EAAc,EAAE,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAEjF,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AAEnF,OAAO,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;;;;;;;;;;AAOlE,MAAM,OAAO,kCAAkC;IAoD7C,YACU,sBAA8C,EAC9C,yBAAoD,EACpD,qBAA4C,EAC5C,cAA8B,EAC9B,gBAAkC,EAC9B,yBAAoD;QALxD,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,mBAAc,GAAd,cAAc,CAAgB;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QApD5C,kBAAa,GAAG,EAAE,CAAC;QAwBnB,gBAAW,GAAG,IAAI,YAAY,EAAQ,CAAC;QAGvC,SAAI,GAAG,IAAI,YAAY,EAAW,CAAC;QAGnC,SAAI,GAAG,IAAI,YAAY,EAAQ,CAAC;QAchC,oBAAe,GAAG,KAAK,CAAC;QAWtB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,yBAAyB,CAAC;QACnD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;IACxD,CAAC;IAED,QAAQ;QACN,IAAI,uBAAuB,CAAC;QAE5B,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE/G,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;gBAE9G,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAErB,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,IAAI,CAC5F,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE;oBACxB,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;oBAE1G,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC,MAAM,CAAC;oBAChD,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBAEvD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,iBAAiB,CAAC,MAAM,CAAC,MAAM,EAAE;wBAC1D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,uBAAuB,CAAC;qBAC7E;oBAED,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;wBAC7B,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;4BACjD,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;yBACzD;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,EACF,SAAS,CAAC,GAAG,EAAE;oBACb,MAAM,cAAc,GAAG,EAAE,CAAC;oBAE1B,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;wBACrC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;4BAC7B,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;wBACpD,CAAC,CAAC,CAAC;qBACJ;oBAED,OAAO,QAAQ,CAAC,cAAc,CAAC,CAAC;gBAClC,CAAC,CAAC,CACH,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC7B,IAAI,CAAC,KAAK,CAAC,gBAAgB,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;wBACjD,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;qBACvC;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;aAAM;YACL,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAErB,uBAAuB,GAAG,IAAI,CAAC,sBAAsB;qBAClD,oBAAoB,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;qBACzE,IAAI,CACH,GAAG,CAAC,CAAC,mBAAmB,EAAE,EAAE;oBAC1B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC;oBAErD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtE,CAAC,CAAC,CACH,CAAC;aACL;iBAAM;gBACL,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;aAChD;SACF;QAED,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CACnB,IAAI,CACJ,cAAc,CAAC,IAAI,CAAC,EACpB,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAChC,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEtB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,EAEH,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,KAA2B;QACvC,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC,mBAAmB,CAAC;YAC9B,KAAK,EAAE,KAAK,CAAC,IAAI;YACjB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,MAAM,EAAE,CAAC,KAAK,CAAC;YACf,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,cAAc,EAAE,IAAI;YACpB,gBAAgB,EAAE,CAAC,SAAqB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC1E,CAAC;aACC,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,CAAC;QACxC,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,SAAiB;QACtC,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;QAE/D,MAAM,SAAS,GAAG,SAAS,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAEjE,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAEO,gBAAgB,CAAC,KAA2B;QAClD,IAAI,KAAK,CAAC,WAAW,EAAE;YACrB,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBAC1B,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC;oBAChD,aAAa,EAAE,IAAI,CAAC,aAAa;oBACjC,QAAQ,EAAE,KAAK,CAAC,QAAQ;oBACxB,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;oBAChD,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;oBACvC,MAAM,EAAE,CAAC,KAAK,CAAC;oBACf,UAAU,EAAE,KAAK,CAAC,IAAI;oBACtB,aAAa,EAAE,IAAI,CAAC,aAAa;oBACjC,SAAS,EAAE,KAAK,CAAC,IAAI;oBACrB,gBAAgB,EAAE,CAAC,SAAqB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;iBAC1E,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,IAAI,CAAC,sBAAsB;qBAC/B,oBAAoB,CAAC,GAAG,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;qBACjF,IAAI,CACH,GAAG,CAAC,CAAC,sBAA+C,EAAE,EAAE;oBACtD,KAAK,CAAC,QAAQ,GAAG,sBAAsB,CAAC,MAAM,CAAC;oBAE/C,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACpD,CAAC,CAAC,CACH,CAAC;aACL;SACF;QAED,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAED,aAAa,CAAC,KAAmB,EAAE,KAA2B;QAC5D,KAAK,CAAC,aAAa,mCACd,KAAK,CAAC,aAAa,GACnB,KAAK,CACT,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,KAA2B,EAAE,iBAA2C;QACpG,MAAM,aAAa,GAAiB,EAAE,CAAC;QAEvC,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,cAAc,EAAE,EAAE;YAChD,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,EAAE,EAAE,WAAW,EAAE,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;YAEvF,IAAI,gBAAgB,EAAE;gBACpB,IAAI,gBAAgB,CAAC,YAAY,EAAE;oBACjC,QAAQ,cAAc,CAAC,QAAQ,EAAE;wBAC/B,KAAK,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;4BAC7C,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG;gCAC5C,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,CAChD,gBAAgB,CAAC,YAAsB,EACvC,gBAAgB,CAAC,QAAQ,EACzB,gBAAgB,CAAC,QAAQ,CAC1B;6BACF,CAAC;4BAEF,MAAM;yBACP;wBAED,KAAK,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;4BAC1C,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,gBAAgB,CAAC,YAAY,KAAK,MAAM,CAAC;4BAEvF,MAAM;yBACP;wBAED,KAAK,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC;wBAC3C,KAAK,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;4BAC1C,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;4BAEpF,MAAM;yBACP;wBAED,OAAO,CAAC,CAAC;4BACP,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,gBAAgB,CAAC,YAAY,CAAC;4BAE5E,MAAM;yBACP;qBACF;iBACF;qBAAM;oBACL,aAAa,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;iBACpD;aACF;iBAAM;gBACL,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC;aAClE;QACH,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,aAAa,qBACd,aAAa,CACjB,CAAC;IACJ,CAAC;IAEO,mBAAmB,CACzB,OAA+B,EAC/B,KAA+B;QAE/B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEtB,OAAO,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAClE,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;gBACnB,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC7B,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;gBAC7B,OAAO,CAAC,YAAY,GAAG,YAAY,CAAC;gBAEpC,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,CAAC,YAAY,GAAG,KAAK,CAAC;YAE7B,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC;SACpB;IACH,CAAC;IAED,YAAY;QACV,MAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACvC,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBACxE,IAAI,SAAS,GAAG,EAAE,CAAC;gBAEnB,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC/B,SAAS,GAAG,SAAS,CAAC,MAAM,CAC1B,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;wBACtD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;wBAE1E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;4BACzE,MAAM,OAAO,GAA2B;gCACtC,aAAa,EAAE,IAAI,CAAC,aAAa;gCACjC,WAAW;gCACX,uBAAuB,EAAE,IAAI,CAAC,aAAa;6BAClB,CAAC;4BAE5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;yBACxD;6BAAM;4BACL,OAAO,IAAI,CAAC;yBACb;oBACH,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,IAAI,SAAS,CAAC,MAAM,EAAE;oBACpB,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CACtB,SAAS,CAAC,CAAC,QAAkC,EAAE,EAAE,CAC/C,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAClF,EACD,SAAS,CAAC,CAAC,aAAqB,EAAE,EAAE;wBAClC,MAAM,SAAS,GAAsB,EAAE,CAAC;wBAExC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;wBAEnC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;4BAC7B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC/C,CAAC,CAAC,CAAC;wBAEH,SAAS,CAAC,IAAI,CACZ,IAAI,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,aAAa,IAAI,aAAa,EAAE,CAAC,CAAC,IAAI,CAC7F,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAE;4BAC7B,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,MAAM,CAAC;wBACvD,CAAC,CAAC,CACH,CACF,CAAC;wBAEF,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAC7B,GAAG,CAAC,GAAG,EAAE;4BACP,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACrB,CAAC,CAAC,CACH,CAAC;oBACJ,CAAC,CAAC,CACH,CACF,CAAC;iBACH;aACF;iBAAM;gBACL,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBACxE,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gBAErE,IAAI,gBAAgB,GAAG,EAAE,CAAC;gBAE1B,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC/B,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CACxC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;wBACtD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;wBAE1E,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;4BAChD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;4BAE5D,OAAO,CAAC,uBAAuB,GAAG,IAAI,CAAC,aAAa,CAAC;4BAErD,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;yBACxD;6BAAM;4BACL,OAAO,IAAI,CAAC;yBACb;oBACH,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,IAAI,gBAAgB,CAAC,MAAM,EAAE;oBAC3B,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAC7B,SAAS,CAAC,CAAC,eAAyC,EAAE,EAAE,CACtD,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CACjD,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE,EAC7C,eAAe,CAChB,CACF,CACF,CACF,CAAC;iBACH;gBAED,IAAI,cAAc,GAAG,EAAE,CAAC;gBAExB,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC7B,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;wBAC3B,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;4BAC3C,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;gCACtD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gCAE1E,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;oCAChD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;oCAEtD,OAAO,CAAC,uBAAuB,GAAG,IAAI,CAAC,aAAa,CAAC;oCAErD,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;iCACxD;qCAAM;oCACL,OAAO,IAAI,CAAC;iCACb;4BACH,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;4BAEF,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAC3B,SAAS,CAAC,CAAC,aAAuC,EAAE,EAAE,CACpD,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CACjD,GAAG,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,cAAc,EAAE,EACtD,aAAa,CACd,CACF,CACF,CACF,CAAC;yBACH;6BAAM;4BACL,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;gCACtD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gCAE1E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;oCACzE,MAAM,YAAY,GAA2B;wCAC3C,aAAa,EAAE,KAAK,CAAC,IAAI;wCACzB,mBAAmB,EAAE,IAAI,CAAC,aAAa;wCACvC,WAAW;wCACX,cAAc,EAAE,IAAI,CAAC,aAAa;wCAClC,uBAAuB,EAAE,IAAI,CAAC,aAAa;qCAClB,CAAC;oCAE5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;iCAC7D;qCAAM;oCACL,OAAO,IAAI,CAAC;iCACb;4BACH,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;4BAEF,IAAI,cAAc,CAAC,MAAM,EAAE;gCACzB,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAC3B,SAAS,CAAC,CAAC,aAAuC,EAAE,EAAE,CACpD,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CACjD,GAAG,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE,EACrC,aAAa,CACd,CACF,EACD,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAC9C,CACF,CAAC;6BACH;yBACF;qBACF;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;aAAM;YACL,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAElC,IAAI,cAAc,GAAG,EAAE,CAAC;YAExB,IAAI,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACrD,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;oBAC3D,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;wBACtD,IAAI,EAAE,WAAW;qBAClB,CAAC,CAAC;oBAEH,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;wBAChD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC;wBAE3D,OAAO,CAAC,uBAAuB,GAAG,IAAI,CAAC,aAAa,CAAC;wBAErD,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;qBACxD;yBAAM;wBACL,OAAO,IAAI,CAAC;qBACb;gBACH,CAAC,CAAC,CACH,CAAC;gBAEF,IAAI,cAAc,CAAC,MAAM,EAAE;oBACzB,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAC3B,SAAS,CAAC,CAAC,aAAuC,EAAE,EAAE,CACpD,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CACjD,GAAG,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAC/C,aAAa,CACd,CACF,CACF,CACF,CAAC;iBACH;aACF;iBAAM;gBACL,cAAc,GAAG,cAAc,CAAC,MAAM,CACpC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;oBAC3D,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;oBAE/E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE;wBACzE,MAAM,OAAO,GAA2B;4BACtC,aAAa,EAAE,UAAU,CAAC,IAAI;4BAC9B,mBAAmB,EAAE,IAAI,CAAC,aAAa;4BACvC,cAAc,EAAE,IAAI,CAAC,aAAa;4BAClC,WAAW;4BACX,uBAAuB,EAAE,IAAI,CAAC,aAAa;yBAClB,CAAC;wBAE5B,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;qBACxD;yBAAM;wBACL,OAAO,IAAI,CAAC;qBACb;gBACH,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;gBAEF,IAAI,cAAc,CAAC,MAAM,EAAE;oBACzB,aAAa,CAAC,IAAI,CAChB,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAC3B,SAAS,CAAC,CAAC,aAAuC,EAAE,EAAE,CACpD,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CACjD,GAAG,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE,EAC1C,aAAa,CACd,CACF,CACF,CACF,CAAC;iBACH;aACF;SACF;QAED,IAAI,aAAa,CAAC,MAAM,EAAE;YACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErB,QAAQ,CAAC,aAAa,CAAC;iBACpB,IAAI,CACH,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;gBACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEtB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC,CAAC,CACH;iBACA,SAAS,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,8BAA8B,CAAC,CAAC;gBAC7E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,CAAC;gBAE9D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEtB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;SACN;IACH,CAAC;IAED,YAAY;QACV,OAAO,CACL,IAAI,CAAC,KAAK;YACV,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAC3D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAChD,CAAC;IACJ,CAAC;IAED,aAAa;QACX,IAAI,CAAC,cAAc;aAChB,OAAO,CAAC;YACP,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8CAA8C,CAAC;YACpF,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;YACxC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,0DAA0D,CAAC;SACnG,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,IAAI,QAAQ,EAAE;gBACZ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;qBACf,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;qBAC/C,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;oBACjB,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;oBAErD,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,cAAc,EAAE,EAAE;wBAChD,IAAI,cAAc,CAAC,QAAQ,KAAK,QAAQ,CAAC,oBAAoB,CAAC,UAAU,EAAE;4BACxE,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,YAAY;gCAC9D,CAAC,CAAC;oCACE,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,CAChD,cAAc,CAAC,YAAY,EAC3B,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAChD,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CACjD;iCACF;gCACH,CAAC,CAAC,IAAI,CAAC;yBACV;6BAAM;4BACL,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,YAAY,CAAC;yBAClE;oBACH,CAAC,CAAC,CAAC;oBAEH,KAAK,CAAC,aAAa,GAAG,aAAa,CAAC;gBACtC,CAAC,CAAC;qBACD,KAAK,EAAE,CAAC;gBAEX,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;aAC5D;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,QAAQ;;QACN,OAAO,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,SAAS,0CAAE,OAAO,EAAE,MAAI,MAAA,IAAI,CAAC,KAAK,0CAAE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;IAC1F,CAAC;;+HAvlBU,kCAAkC;mHAAlC,kCAAkC,6hBAqC/B,mBAAmB,2DAGnB,oBAAoB,gDCzFpC,uzEAmEA;2FDlBa,kCAAkC;kBAL9C,SAAS;mBAAC;oBACT,QAAQ,EAAE,iCAAiC;oBAC3C,WAAW,EAAE,+CAA+C;oBAC5D,SAAS,EAAE,CAAC,+CAA+C,CAAC;iBAC7D;;0BA2DI,QAAQ;4CAxDX,aAAa;sBADZ,KAAK;gBAIN,aAAa;sBADZ,KAAK;gBAIN,MAAM;sBADL,KAAK;gBAIN,gBAAgB;sBADf,KAAK;gBAIN,KAAK;sBADJ,KAAK;gBAIN,cAAc;sBADb,KAAK;gBAIN,kBAAkB;sBADjB,KAAK;gBAIN,mBAAmB;sBADlB,KAAK;gBAIN,mBAAmB;sBADlB,KAAK;gBAIN,WAAW;sBADV,MAAM;gBAIP,IAAI;sBADH,MAAM;gBAIP,IAAI;sBADH,MAAM;gBAIP,mBAAmB;sBADlB,YAAY;uBAAC,mBAAmB;gBAIjC,KAAK;sBADJ,YAAY;uBAAC,oBAAoB;gBAIlC,KAAK;sBADJ,WAAW;uBAAC,OAAO","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport {\n  IAdminComponentSetting,\n  IAdminComponentSettings,\n  IPlainObject,\n  RxAdminSettingsService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { FormBuilderComponent } from '@helix/platform/shared/components';\nimport { IDialogApi, RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  chain,\n  cloneDeep,\n  every,\n  filter,\n  find,\n  findIndex,\n  forEach,\n  isEmpty,\n  isNull,\n  last,\n  map as _map,\n  some\n} from 'lodash';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { catchError, defaultIfEmpty, map, switchMap, tap } from 'rxjs/operators';\nimport { ICommonSettingsGroup } from '../admin-common-settings/admin-common-settings.types';\nimport { RX_ADMIN } from '../admin.constant';\nimport { RxAdminFileUtilityService } from '../services/admin-file-utility.service';\nimport { IGetRecordGridConfigParams, IOpenSettingsDetailsParams } from '../services/admin-common-settings.types';\nimport { AdaptDockedPanelComponent } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-admin-common-settings-editor',\n  templateUrl: './admin-common-settings-editor.component.html',\n  styleUrls: ['./admin-common-settings-editor.component.scss']\n})\nexport class AdminCommonSettingsEditorComponent implements OnInit {\n  @Input()\n  componentName: string;\n\n  @Input()\n  ownerKeyValue = '';\n\n  @Input()\n  groups: ICommonSettingsGroup[];\n\n  @Input()\n  createPermission: boolean;\n\n  @Input()\n  isNew: boolean;\n\n  @Input()\n  isChildSetting: boolean;\n\n  @Input()\n  childOwnerKeyValue: string;\n\n  @Input()\n  getRecordGridConfig: (options: IGetRecordGridConfigParams) => Observable<IRecordGridConfig>;\n\n  @Input()\n  openSettingsDetails: (options: IOpenSettingsDetailsParams) => Promise<any>;\n\n  @Output()\n  closeEditor = new EventEmitter<void>();\n\n  @Output()\n  busy = new EventEmitter<boolean>();\n\n  @Output()\n  save = new EventEmitter<void>();\n\n  @ViewChildren(RecordGridComponent)\n  recordGridInstances: QueryList<RecordGridComponent>;\n\n  @ViewChildren(FormBuilderComponent)\n  forms: QueryList<FormBuilderComponent>;\n\n  @HostBinding('class')\n  class: string;\n\n  private generalSettings: IAdminComponentSetting[];\n  private assigneeGroup: string;\n  isSettingsActionsAvailable: boolean;\n  isInDockedPanel = false;\n  private dialogApi: any;\n\n  constructor(\n    private rxAdminSettingsService: RxAdminSettingsService,\n    private rxAdminFileUtilityService: RxAdminFileUtilityService,\n    private rxNotificationService: RxNotificationService,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService,\n    @Optional() adaptDockedPanelComponent: AdaptDockedPanelComponent\n  ) {\n    this.isInDockedPanel = !!adaptDockedPanelComponent;\n    this.class = this.isInDockedPanel ? 'dp-content' : '';\n  }\n\n  ngOnInit(): void {\n    let componentSettingRequest;\n\n    this.isSettingsActionsAvailable = this.isChildSetting || some(this.groups, (group) => !group.supportsMultiple);\n\n    if (!this.isChildSetting) {\n      if (!this.isNew) {\n        const componentName = this.ownerKeyValue ? `${this.componentName}/${this.ownerKeyValue}` : this.componentName;\n\n        this.busy.emit(true);\n\n        componentSettingRequest = this.rxAdminSettingsService.getComponentSettings(componentName).pipe(\n          tap((componentSettings) => {\n            this.ownerKeyValue = componentSettings.values.length ? last(componentSettings.values).ownerKeyValue1 : '';\n\n            this.generalSettings = componentSettings.values;\n            this.isNew = !Boolean(componentSettings.values.length);\n\n            if (!this.assigneeGroup && componentSettings.values.length) {\n              this.assigneeGroup = last(componentSettings.values).assigneeGroupPermission;\n            }\n\n            forEach(this.groups, (group) => {\n              if (!group.supportsMultiple && !group.isComponent) {\n                this.setGroupSettingValues(group, this.generalSettings);\n              }\n            });\n          }),\n          switchMap(() => {\n            const childSettings$ = [];\n\n            if (!this.isNew && this.ownerKeyValue) {\n              forEach(this.groups, (group) => {\n                childSettings$.push(this.setChildSettings(group));\n              });\n            }\n\n            return forkJoin(childSettings$);\n          })\n        );\n      } else {\n        forEach(this.groups, (group) => {\n          if (!group.supportsMultiple && !group.isComponent) {\n            this.setGroupSettingValues(group, []);\n          }\n        });\n      }\n    } else {\n      this.groups = cloneDeep(this.groups);\n\n      if (!this.isNew) {\n        this.busy.emit(true);\n\n        componentSettingRequest = this.rxAdminSettingsService\n          .getComponentSettings(`${this.groups[0].name}/${this.childOwnerKeyValue}`)\n          .pipe(\n            tap((childCommonSettings) => {\n              this.groups[0].settings = childCommonSettings.values;\n\n              this.setGroupSettingValues(this.groups[0], this.groups[0].settings);\n            })\n          );\n      } else {\n        this.setGroupSettingValues(this.groups[0], []);\n      }\n    }\n\n    componentSettingRequest\n      ?.pipe(\n        defaultIfEmpty(null),\n        tap(() => this.busy.emit(false)),\n        catchError((err) => {\n          this.busy.emit(false);\n\n          return throwError(err);\n        })\n      )\n      .subscribe();\n  }\n\n  addNewSetting(group: ICommonSettingsGroup): Promise<any> {\n    const currentGrid = this.getCurrentGrid(group.name);\n\n    return this.openSettingsDetails({\n      title: group.name,\n      componentName: this.componentName,\n      groups: [group],\n      ownerKeyValue: this.ownerKeyValue,\n      isChildSetting: true,\n      onDialogApiReady: (dialogApi: IDialogApi) => (this.dialogApi = dialogApi)\n    })\n      .then(() => {\n        this.dialogApi = null;\n        currentGrid.api.refresh().subscribe();\n      })\n      .catch(() => {\n        this.dialogApi = null;\n        currentGrid.api.refresh().subscribe();\n      });\n  }\n\n  private getCurrentGrid(groupName: string): RecordGridComponent {\n    const groupsWithGrid = filter(this.groups, 'supportsMultiple');\n\n    const gridIndex = findIndex(groupsWithGrid, { name: groupName });\n\n    return this.recordGridInstances.toArray()[gridIndex];\n  }\n\n  private setChildSettings(group: ICommonSettingsGroup): Observable<any> {\n    if (group.isComponent) {\n      if (group.supportsMultiple) {\n        group.recordGridConfig = this.getRecordGridConfig({\n          componentName: this.componentName,\n          controls: group.controls,\n          getCurrentGridFn: this.getCurrentGrid.bind(this),\n          createPermission: this.createPermission,\n          groups: [group],\n          bladeTitle: group.name,\n          ownerKeyValue: this.ownerKeyValue,\n          groupName: group.name,\n          onDialogApiReady: (dialogApi: IDialogApi) => (this.dialogApi = dialogApi)\n        });\n      } else {\n        return this.rxAdminSettingsService\n          .getComponentSettings(`${this.componentName}/${group.name}/${this.ownerKeyValue}`)\n          .pipe(\n            tap((childComponentSettings: IAdminComponentSettings) => {\n              group.settings = childComponentSettings.values;\n\n              this.setGroupSettingValues(group, group.settings);\n            })\n          );\n      }\n    }\n\n    return of(true);\n  }\n\n  onModelChange(model: IPlainObject, group: ICommonSettingsGroup): void {\n    group.settingValues = {\n      ...group.settingValues,\n      ...model\n    };\n  }\n\n  private setGroupSettingValues(group: ICommonSettingsGroup, componentSettings: IAdminComponentSetting[]): void {\n    const settingValues: IPlainObject = {};\n\n    forEach(group.propertyConfigs, (propertyConfig) => {\n      const componentSetting = find(componentSettings, { settingName: propertyConfig.name });\n\n      if (componentSetting) {\n        if (componentSetting.settingValue) {\n          switch (propertyConfig.dataType) {\n            case RX_ADMIN.settingResourceTypes.attachment: {\n              settingValues[componentSetting.settingName] = [\n                this.rxAdminFileUtilityService.convertBase64ToFile(\n                  componentSetting.settingValue as string,\n                  componentSetting.fileName,\n                  componentSetting.fileType\n                )\n              ];\n\n              break;\n            }\n\n            case RX_ADMIN.settingResourceTypes.boolean: {\n              settingValues[componentSetting.settingName] = componentSetting.settingValue === 'true';\n\n              break;\n            }\n\n            case RX_ADMIN.settingResourceTypes.decimal:\n            case RX_ADMIN.settingResourceTypes.integer: {\n              settingValues[componentSetting.settingName] = Number(componentSetting.settingValue);\n\n              break;\n            }\n\n            default: {\n              settingValues[componentSetting.settingName] = componentSetting.settingValue;\n\n              break;\n            }\n          }\n        } else {\n          settingValues[componentSetting.settingName] = null;\n        }\n      } else {\n        settingValues[propertyConfig.name] = propertyConfig.defaultValue;\n      }\n    });\n\n    group.settingValues = {\n      ...settingValues\n    };\n  }\n\n  private getSettingWithValue(\n    setting: IAdminComponentSetting,\n    value: string | number | File[]\n  ): Observable<IAdminComponentSetting> {\n    if (Array.isArray(value)) {\n      const file = value[0];\n\n      return this.rxAdminFileUtilityService.convertFileToBase64(file).pipe(\n        map((base64String) => {\n          setting.fileName = file.name;\n          setting.fileType = file.type;\n          setting.settingValue = base64String;\n\n          return setting;\n        })\n      );\n    } else {\n      setting.settingValue = value;\n\n      return of(setting);\n    }\n  }\n\n  saveSettings(): void {\n    const saveRequests$ = [];\n\n    if (!this.isChildSetting) {\n      if (this.isNew && this.createPermission) {\n        const generalGroups = this.groups.filter((group) => !group.isComponent);\n        let settings$ = [];\n\n        forEach(generalGroups, (group) => {\n          settings$ = settings$.concat(\n            _map(group.settingValues, (settingValue, settingName) => {\n              const propertyConfig = find(group.propertyConfigs, { name: settingName });\n\n              if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {\n                const setting: IAdminComponentSetting = {\n                  componentName: this.componentName,\n                  settingName,\n                  assigneeGroupPermission: this.assigneeGroup\n                } as IAdminComponentSetting;\n\n                return this.getSettingWithValue(setting, settingValue);\n              } else {\n                return null;\n              }\n            }).filter(Boolean)\n          );\n        });\n\n        if (settings$.length) {\n          saveRequests$.push(\n            forkJoin(settings$).pipe(\n              switchMap((settings: IAdminComponentSetting[]) =>\n                this.rxAdminSettingsService.createComponentSettings(this.componentName, settings)\n              ),\n              switchMap((ownerKeyValue: string) => {\n                const requests$: Observable<any>[] = [];\n\n                this.ownerKeyValue = ownerKeyValue;\n\n                forEach(this.groups, (group) => {\n                  requests$.push(this.setChildSettings(group));\n                });\n\n                requests$.push(\n                  this.rxAdminSettingsService.getComponentSettings(`${this.componentName}/${ownerKeyValue}`).pipe(\n                    tap((adminComponentSettings) => {\n                      this.generalSettings = adminComponentSettings.values;\n                    })\n                  )\n                );\n\n                return forkJoin(requests$).pipe(\n                  tap(() => {\n                    this.isNew = false;\n                  })\n                );\n              })\n            )\n          );\n        }\n      } else {\n        const generalGroups = this.groups.filter((group) => !group.isComponent);\n        const childGroups = this.groups.filter((group) => group.isComponent);\n\n        let generalSettings$ = [];\n\n        forEach(generalGroups, (group) => {\n          generalSettings$ = generalSettings$.concat(\n            _map(group.settingValues, (settingValue, settingName) => {\n              const propertyConfig = find(group.propertyConfigs, { name: settingName });\n\n              if (propertyConfig && !propertyConfig.isDisabled) {\n                const setting = find(this.generalSettings, { settingName });\n\n                setting.assigneeGroupPermission = this.assigneeGroup;\n\n                return this.getSettingWithValue(setting, settingValue);\n              } else {\n                return null;\n              }\n            }).filter(Boolean)\n          );\n        });\n\n        if (generalSettings$.length) {\n          saveRequests$.push(\n            forkJoin(generalSettings$).pipe(\n              switchMap((generalSettings: IAdminComponentSetting[]) =>\n                this.rxAdminSettingsService.updateComponentSettings(\n                  `${this.componentName}/${this.ownerKeyValue}`,\n                  generalSettings\n                )\n              )\n            )\n          );\n        }\n\n        let childSettings$ = [];\n\n        forEach(childGroups, (group) => {\n          if (!group.supportsMultiple) {\n            if (group.settings && group.settings.length) {\n              childSettings$ = childSettings$.concat(\n                _map(group.settingValues, (settingValue, settingName) => {\n                  const propertyConfig = find(group.propertyConfigs, { name: settingName });\n\n                  if (propertyConfig && !propertyConfig.isDisabled) {\n                    const setting = find(group.settings, { settingName });\n\n                    setting.assigneeGroupPermission = this.assigneeGroup;\n\n                    return this.getSettingWithValue(setting, settingValue);\n                  } else {\n                    return null;\n                  }\n                }).filter(Boolean)\n              );\n\n              saveRequests$.push(\n                forkJoin(childSettings$).pipe(\n                  switchMap((childSettings: IAdminComponentSetting[]) =>\n                    this.rxAdminSettingsService.updateComponentSettings(\n                      `${group.name}/${last(group.settings).ownerKeyValue1}`,\n                      childSettings\n                    )\n                  )\n                )\n              );\n            } else {\n              childSettings$ = childSettings$.concat(\n                _map(group.settingValues, (settingValue, settingName) => {\n                  const propertyConfig = find(group.propertyConfigs, { name: settingName });\n\n                  if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {\n                    const childSetting: IAdminComponentSetting = {\n                      componentName: group.name,\n                      parentComponentName: this.componentName,\n                      settingName,\n                      ownerKeyValue2: this.ownerKeyValue,\n                      assigneeGroupPermission: this.assigneeGroup\n                    } as IAdminComponentSetting;\n\n                    return this.getSettingWithValue(childSetting, settingValue);\n                  } else {\n                    return null;\n                  }\n                }).filter(Boolean)\n              );\n\n              if (childSettings$.length) {\n                saveRequests$.push(\n                  forkJoin(childSettings$).pipe(\n                    switchMap((childSettings: IAdminComponentSetting[]) =>\n                      this.rxAdminSettingsService.createComponentSettings(\n                        `${group.name}/${this.ownerKeyValue}`,\n                        childSettings\n                      )\n                    ),\n                    switchMap(() => this.setChildSettings(group))\n                  )\n                );\n              }\n            }\n          }\n        });\n      }\n    } else {\n      const childGroup = this.groups[0];\n\n      let childSettings$ = [];\n\n      if (childGroup.settings && childGroup.settings.length) {\n        childSettings$ = childSettings$.concat(\n          _map(childGroup.settingValues, (settingValue, settingName) => {\n            const propertyConfig = find(childGroup.propertyConfigs, {\n              name: settingName\n            });\n\n            if (propertyConfig && !propertyConfig.isDisabled) {\n              const setting = find(childGroup.settings, { settingName });\n\n              setting.assigneeGroupPermission = this.assigneeGroup;\n\n              return this.getSettingWithValue(setting, settingValue);\n            } else {\n              return null;\n            }\n          })\n        );\n\n        if (childSettings$.length) {\n          saveRequests$.push(\n            forkJoin(childSettings$).pipe(\n              switchMap((childSettings: IAdminComponentSetting[]) =>\n                this.rxAdminSettingsService.updateComponentSettings(\n                  `${childGroup.name}/${this.childOwnerKeyValue}`,\n                  childSettings\n                )\n              )\n            )\n          );\n        }\n      } else {\n        childSettings$ = childSettings$.concat(\n          _map(childGroup.settingValues, (settingValue, settingName) => {\n            const propertyConfig = find(childGroup.propertyConfigs, { name: settingName });\n\n            if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {\n              const setting: IAdminComponentSetting = {\n                componentName: childGroup.name,\n                parentComponentName: this.componentName,\n                ownerKeyValue2: this.ownerKeyValue,\n                settingName,\n                assigneeGroupPermission: this.assigneeGroup\n              } as IAdminComponentSetting;\n\n              return this.getSettingWithValue(setting, settingValue);\n            } else {\n              return null;\n            }\n          }).filter(Boolean)\n        );\n\n        if (childSettings$.length) {\n          saveRequests$.push(\n            forkJoin(childSettings$).pipe(\n              switchMap((childSettings: IAdminComponentSetting[]) =>\n                this.rxAdminSettingsService.createComponentSettings(\n                  `${childGroup.name}/${this.ownerKeyValue}`,\n                  childSettings\n                )\n              )\n            )\n          );\n        }\n      }\n    }\n\n    if (saveRequests$.length) {\n      this.busy.emit(true);\n\n      forkJoin(saveRequests$)\n        .pipe(\n          catchError((err) => {\n            this.busy.emit(false);\n\n            return throwError(err);\n          })\n        )\n        .subscribe(() => {\n          this.rxNotificationService.addSuccessMessage('Settings saved successfully.');\n          this.forms.forEach((form) => form.formGroup.markAsPristine());\n\n          this.busy.emit(false);\n\n          this.save.emit();\n        });\n    }\n  }\n\n  isAbleToSave(): boolean {\n    return (\n      this.forms &&\n      every(this.forms.toArray(), (form) => form.formGroup.valid) &&\n      this.forms.some((form) => form.formGroup.dirty)\n    );\n  }\n\n  resetSettings(): void {\n    this.rxModalService\n      .confirm({\n        title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.reset-confirmation.message')\n      })\n      .then((response) => {\n        if (response) {\n          chain(this.groups)\n            .reject((group) => isEmpty(group.settingValues))\n            .forEach((group) => {\n              const settingValues = cloneDeep(group.settingValues);\n\n              forEach(group.propertyConfigs, (propertyConfig) => {\n                if (propertyConfig.dataType === RX_ADMIN.settingResourceTypes.attachment) {\n                  settingValues[propertyConfig.name] = propertyConfig.defaultValue\n                    ? [\n                        this.rxAdminFileUtilityService.convertBase64ToFile(\n                          propertyConfig.defaultValue,\n                          RX_ADMIN.defaultImages[propertyConfig.name].name,\n                          RX_ADMIN.defaultImages[propertyConfig.name].type\n                        )\n                      ]\n                    : null;\n                } else {\n                  settingValues[propertyConfig.name] = propertyConfig.defaultValue;\n                }\n              });\n\n              group.settingValues = settingValues;\n            })\n            .value();\n\n          this.forms.forEach((form) => form.formGroup.markAsDirty());\n        }\n      });\n  }\n\n  onCancel(): void {\n    this.closeEditor.emit();\n  }\n\n  canClose(): boolean {\n    return !(this.dialogApi?.isDirty() || this.forms?.some((form) => form.formGroup.dirty));\n  }\n}\n","<adapt-accordion [multiselect]=\"true\" [class.dp-body]=\"isInDockedPanel\">\n  <adapt-accordion-tab\n    *ngFor=\"let commonSettingsGroup of groups; let $index = index\"\n    [isOpen]=\"$index === 0\"\n    [title]=\"commonSettingsGroup.name\"\n    [disabled]=\"isNew && commonSettingsGroup.isComponent && !isChildSetting\"\n  >\n    <div class=\"property-controls\" *ngIf=\"!commonSettingsGroup.supportsMultiple || isChildSetting\">\n      <rx-form-builder\n        [config]=\"[{ controls: commonSettingsGroup.propertyConfigs }]\"\n        (modelChange)=\"onModelChange($event, commonSettingsGroup)\"\n        [model]=\"commonSettingsGroup.settingValues\"\n        *ngIf=\"commonSettingsGroup.settingValues\"\n      ></rx-form-builder>\n    </div>\n\n    <div *ngIf=\"commonSettingsGroup.supportsMultiple && commonSettingsGroup.recordGridConfig && !isChildSetting\">\n      <button\n        *ngIf=\"createPermission\"\n        adapt-button\n        type=\"button\"\n        class=\"px-0\"\n        btn-type=\"tertiary\"\n        (click)=\"addNewSetting(commonSettingsGroup)\"\n      >\n        <span class=\"d-icon-plus_circle\"></span>\n        {{ 'com.bmc.arsys.rx.client.admin.add-new-setting.label' | translate }}\n      </button>\n      <rx-record-grid [config]=\"commonSettingsGroup.recordGridConfig\"></rx-record-grid>\n    </div>\n  </adapt-accordion-tab>\n</adapt-accordion>\n\n<div\n  [ngClass]=\"{\n    'justify-content-start': !isInDockedPanel,\n    'justify-content-end': isInDockedPanel,\n    'dp-footer': isInDockedPanel\n  }\"\n  class=\"pt-3\"\n>\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    class=\"mr-2\"\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"!isAbleToSave()\"\n    (click)=\"saveSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"resetSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.reset.label' | translate }}\n  </button>\n\n  <button adapt-button class=\"ml-2\" btn-type=\"secondary\" type=\"button\" *ngIf=\"isInDockedPanel\" (click)=\"onCancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n"]}