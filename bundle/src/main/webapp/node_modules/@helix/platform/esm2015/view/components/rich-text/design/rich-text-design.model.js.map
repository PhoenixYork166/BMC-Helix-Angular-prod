{"version":3,"file":"rich-text-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rich-text/design/rich-text-design.model.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,wBAAwB,EAAE,MAAM,mCAAmC,CAAC;AAC7E,OAAO,EACL,gCAAgC,EAEhC,qBAAqB,EACrB,0BAA0B,EAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAEtC,OAAO,EAA+B,gCAAgC,EAAE,MAAM,0BAA0B,CAAC;AAEzG,MAAM,OAAO,mBACX,SAAQ,0BAA+C;IADzD;;QAIE,UAAK,GAAG,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;IA6DzD,CAAC;IA3DC,MAAM,CAAC,oBAAoB,CAAC,iBAAsC;QAChE,qCACE,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,IAAI,IACP,gCAAgC,GAEhC,iBAAiB,EACpB;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC7D,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;YACzD,MAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,kCAAkC,CAAC,CAAC,CAAC;YAE/G,gBAAgB,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAChE,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;YAExG,IAAI,CAAC,OAAO,CAAC,mCAAmC,CAAC,aAAa,EAAE;gBAC9D;oBACE,KAAK,EAAE,QAAQ;oBACf,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;iBACpD;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,YAAY;QAClB,OAAO;YACL,uBAAuB,EAAE;gBACvB;oBACE,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE;wBACR;4BACE,IAAI,EAAE,MAAM;4BACZ,SAAS,EAAE,wBAAwB;4BACnC,OAAO,EAAE;gCACP,KAAK,EAAE,MAAM;gCACb,OAAO,EAAE,IAAI,OAAO,CAAC,2DAA2D,CAAC;6BAClF;yBACF;wBACD,GAAG,gCAAgC,EAAE;qBACtC;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAED,yBAAyB,CAAC,KAAmC;QAC3D,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;CACF","sourcesContent":["import { Tooltip } from '@helix/platform/shared/api';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { take } from 'rxjs/operators';\nimport { IRichTextProperties } from './rich-text-design.types';\nimport { IViewDesignerComponentModel, RX_STANDARD_PROPS_DEFAULT_VALUES } from '@helix/platform/view/api';\n\nexport class RichTextDesignModel\n  extends ViewDesignerComponentModel<IRichTextProperties>\n  implements IViewDesignerComponentModel<IRichTextProperties>\n{\n  html$ = this.sandbox.getComponentPropertyValue('html');\n\n  static getInitialProperties(initialProperties: IRichTextProperties): IRichTextProperties {\n    return {\n      name: null,\n      html: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.componentProperties$.subscribe((properties) => {\n      const validationIssues = properties.html ? [] : [this.sandbox.createError('Rich text value cannot be blank.')];\n\n      validationIssues.push(...validateStandardProps(properties));\n\n      this.sandbox.setValidationIssues(validationIssues);\n    });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Rich text component')\n              }\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  updateComponentProperties(props: Partial<IRichTextProperties>): void {\n    this.sandbox.updateComponentProperties(props);\n  }\n}\n"]}