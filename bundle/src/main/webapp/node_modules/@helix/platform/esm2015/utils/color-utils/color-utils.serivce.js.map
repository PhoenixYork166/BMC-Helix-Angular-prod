{"version":3,"file":"color-utils.serivce.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/color-utils/color-utils.serivce.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAK3C,MAAM,OAAO,mBAAmB;IAHhC;QAIU,kBAAa,GAAG,mCAAmC,CAAC;KAoC7D;IAlCC,SAAS,CAAC,KAAa;QACrB,IAAI,eAAe,GAAG,KAAK,CAAC;QAE5B,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC5B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,eAAe,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;aACzF;iBAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACzC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACxC;SACF;aAAM;YACL,eAAe,GAAG,EAAE,CAAC;SACtB;QAED,OAAO,eAAe,CAAC,WAAW,EAAE,IAAI,IAAI,CAAC;IAC/C,CAAC;IAED,WAAW,CAAC,MAAc,EAAE,MAAc;QACxC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAEO,QAAQ,CAAC,QAAgB;QAC/B,MAAM,QAAQ,GAAG,QAAQ;aACtB,KAAK,CAAC,MAAM,CAAC;aACb,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;aACnD,IAAI,CAAC,EAAE,CAAC,CAAC;QAEZ,OAAO,IAAI,QAAQ,EAAE,CAAC;IACxB,CAAC;IAEO,YAAY,CAAC,KAAa;QAChC,MAAM,aAAa,GAAG,+BAA+B,CAAC;QAEtD,OAAO,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrE,CAAC;;gHApCU,mBAAmB;oHAAnB,mBAAmB,cAFlB,MAAM;2FAEP,mBAAmB;kBAH/B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxColorUtilsService {\n  private rgbColorRegex = /^rgb\\(\\d{1,3},\\d{1,3},\\d{1,3}\\)$/i;\n\n  normalize(color: string): string | null {\n    let normalizedColor = color;\n\n    if (this.isValidColor(color)) {\n      if (color.length === 4) {\n        normalizedColor = `#${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n      } else if (this.rgbColorRegex.test(color)) {\n        normalizedColor = this.rgbToHex(color);\n      }\n    } else {\n      normalizedColor = '';\n    }\n\n    return normalizedColor.toLowerCase() || null;\n  }\n\n  isSameColor(color1: string, color2: string): boolean {\n    return this.normalize(color1) === this.normalize(color2);\n  }\n\n  private rgbToHex(rgbColor: string): string {\n    const hexColor = rgbColor\n      .match(/\\d+/g)\n      .map((x) => Number(x).toString(16).padStart(2, '0'))\n      .join('');\n\n    return `#${hexColor}`;\n  }\n\n  private isValidColor(color: string): boolean {\n    const hexColorRegex = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i;\n\n    return hexColorRegex.test(color) || this.rgbColorRegex.test(color);\n  }\n}\n"]}