{"version":3,"file":"field-selector.component.js","sourceRoot":"","sources":["../../../../../../../../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.ts","../../../../../../../../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { groupBy, isEmpty, reduce, xor } from 'lodash';\nimport { RxStringService } from '@helix/platform/utils';\nimport { RecordFieldOption } from '@helix/platform/record/api';\nimport { IAvailableFieldsGroup, IFieldSelectorConfig } from './field-selector.types';\nimport { IRecordFieldDefinitionItem } from '../fields-inspector-widget.types';\n\ninterface ModelObject {\n  [id: string]: boolean;\n}\n\n@Component({\n  templateUrl: './field-selector.component.html',\n  styleUrls: ['./field-selector.component.scss']\n})\nexport class FieldSelectorComponent implements OnInit {\n  searchQuery: string;\n  selectedFieldIdsModel: ModelObject = {};\n  availableFieldGroups: IAvailableFieldsGroup[] = [];\n  hideSystemFields = false;\n  isApplyButtonDisabled = true;\n\n  private selectedFieldDefinitionIds: string[] = [];\n  private availableFieldDefinitions: IRecordFieldDefinitionItem[] = [];\n\n  constructor(public context: ActiveModalRef, private stringService: RxStringService) {}\n\n  ngOnInit(): void {\n    const data: IFieldSelectorConfig = this.context.getData();\n\n    this.availableFieldDefinitions = data.availableFields;\n    this.selectedFieldDefinitionIds = data.selectedFieldIds;\n    this.hideSystemFields = Boolean(data.hideSystemFields);\n\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions);\n    this.selectedFieldIdsModel = this.idsToModel(this.selectedFieldDefinitionIds);\n  }\n\n  closeModal(): void {\n    this.context.close(this.modelToIds(this.selectedFieldIdsModel));\n  }\n\n  search(searchQuery: string): void {\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions)\n      .map((fieldGroup) => ({\n        ...fieldGroup,\n        fields: fieldGroup.fields.filter((field) => this.stringService.caseInsensitiveSearch(field.name, searchQuery))\n      }))\n      .filter((fieldGroup) => !isEmpty(fieldGroup.fields));\n  }\n\n  select(groupName: string): void {\n    if (groupName === 'all') {\n      const ids = this.availableFieldDefinitions\n        .filter((recordField) => {\n          return recordField.fieldOption !== RecordFieldOption.System || !this.hideSystemFields;\n        })\n        .map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = this.idsToModel(ids);\n    } else {\n      const ids = this.availableFieldGroups\n        .find((group) => group.groupLabel === groupName)\n        .fields.map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = {\n        ...this.selectedFieldIdsModel,\n        ...this.idsToModel(ids)\n      };\n    }\n\n    this.updateApplyButtonDisabledStatus();\n  }\n\n  updateApplyButtonDisabledStatus(): void {\n    this.isApplyButtonDisabled = !xor(this.selectedFieldDefinitionIds, this.modelToIds(this.selectedFieldIdsModel))\n      .length;\n  }\n\n  groupFieldsByFieldOption(availableFields: IRecordFieldDefinitionItem[]): IAvailableFieldsGroup[] {\n    const groups = groupBy(availableFields, 'fieldOption');\n    const groupTypes = [RecordFieldOption.Required, RecordFieldOption.Optional];\n\n    if (!this.hideSystemFields) {\n      groupTypes.push(RecordFieldOption.System);\n    }\n\n    return groupTypes\n      .filter((groupType) => groups[groupType])\n      .map((groupType) => ({\n        groupLabel: `${this.stringService.prettify(groupType)} fields`,\n        selectAllFieldsInGroupButtonLabel: `Select all ${groupType.toLowerCase()} fields`,\n        fields: groups[groupType].map(({ id, name }) => ({ id, name })).sort((a, b) => a.name.localeCompare(b.name))\n      }));\n  }\n\n  trackByLabel(index: number, item: IAvailableFieldsGroup): string {\n    return item.groupLabel;\n  }\n\n  trackById(index: number, item: IRecordFieldDefinitionItem): string {\n    return item.id;\n  }\n\n  private idsToModel(ids: string[], selected = true): ModelObject {\n    return ids.filter(Boolean).reduce((result, id) => {\n      result[id] = selected;\n\n      return result;\n    }, {});\n  }\n\n  private modelToIds(model: ModelObject): string[] {\n    return reduce(\n      model,\n      (result, value, id) => {\n        if (value) {\n          result.push(id);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n}\n","<div class=\"modal-header pr-0\">\n  <h5 class=\"modal-title pl-0 mr-auto\">Quick edit fields</h5>\n\n  <button\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"apply-button\"\n    (click)=\"closeModal()\"\n    [disabled]=\"isApplyButtonDisabled\"\n    class=\"mr-5\"\n  >\n    Apply\n  </button>\n\n  <button\n    class=\"close my-1\"\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"tertiary\"\n    (click)=\"context.dismiss(0)\"\n    rx-id=\"x-button\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"body-controls\">\n    <adapt-button btn-type=\"tertiary\" rx-id=\"select-all-button\" class=\"pl-0\" (click)=\"select('all')\">\n      Select all\n    </adapt-button>\n\n    <adapt-rx-textfield\n      [placeholder]=\"'Search fields'\"\n      [ngModel]=\"searchQuery\"\n      [attr.rx-id]=\"'search-field'\"\n      (ngModelChange)=\"search($event)\"\n      class=\"form-group\"\n    >\n    </adapt-rx-textfield>\n  </div>\n\n  <div class=\"rx-record-definition-fields\">\n    <div\n      class=\"rx-record-definition-field-group\"\n      *ngFor=\"let availableFieldsGroup of availableFieldGroups; trackBy: trackByLabel\"\n    >\n      <div class=\"font-weight-bold\">\n        {{ availableFieldsGroup.groupLabel }}\n      </div>\n\n      <adapt-button btn-type=\"tertiary\" class=\"py-0 pl-0\" (click)=\"select(availableFieldsGroup.groupLabel)\">\n        {{ availableFieldsGroup.selectAllFieldsInGroupButtonLabel }}\n      </adapt-button>\n\n      <div class=\"checkbox\" *ngFor=\"let availableField of availableFieldsGroup.fields; trackBy: trackById\">\n        <label>\n          <input\n            type=\"checkbox\"\n            [(ngModel)]=\"selectedFieldIdsModel[availableField.id]\"\n            (ngModelChange)=\"updateApplyButtonDisabledStatus()\"\n          />\n\n          <span class=\"checkbox__item\">{{ availableField.name }}</span>\n        </label>\n      </div>\n    </div>\n\n    <div *ngIf=\"availableFieldGroups.length === 0\">No Fields Found</div>\n  </div>\n</div>\n"]}