import { EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { FormControl } from '@angular/forms';
import { AdaptSidebarComponent } from '@bmc-ux/adapt-angular';
import { IDocumentDefinition } from '@helix/platform/document/api';
import { IDesignerConfiguration, IFormBuilderConfig, IFormBuilderEvent, IPlainObject, RxGlobalCacheService, RxNotificationService, RxOverlayService } from '@helix/platform/shared/api';
import { IBreadcrumbItem, IValidationIssue, IValidationIssueSection } from '@helix/platform/ui-kit';
import { RxJsonParserService } from '@helix/platform/utils';
import { Store } from '@ngrx/store';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { DocumentDesignerService } from '../document-designer.service';
import { IDocumentDefinitionModel } from '../document-designer.types';
import * as i0 from "@angular/core";
export declare class DocumentDesignerComponent implements OnInit, OnChanges, OnDestroy {
    private store$;
    private renderer;
    private rxGlobalCacheService;
    private rxJsonParserService;
    private rxNotificationService;
    private rxOverlayService;
    private translateService;
    private documentDesignerService;
    configuration: IDesignerConfiguration;
    definitionSaved: EventEmitter<string>;
    definitionErrorLoading: EventEmitter<void>;
    closeDesigner: EventEmitter<void>;
    inspectorSidebar: AdaptSidebarComponent;
    schemaFormControl: FormControl;
    private isDirty$;
    private definitionModel$;
    private isDesignMode$;
    private bundleId$;
    private destroyed$;
    private originalDefinition$;
    private inspectorFocusEditorSubject;
    inspectorFocusEditor$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    private bundleFriendlyName$;
    private validationIssues$;
    private hasValidationErrors$;
    private definitionFromDefinitionModel$;
    private areNewDefinitionsAllowed$;
    private isReadOnly$;
    private isSaveButtonDisabled$;
    private definitionForJsonViewer$;
    private breadcrumbItems$;
    private definitionInspectorConfig$;
    vm$: Observable<{
        breadcrumbItems: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        bundleFriendlyName: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionModel: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        hasValidationErrors: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        isReadOnly: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionForJsonViewer: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        isSaveButtonDisabled: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        definitionInspectorConfig: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
        validationIssues: string | boolean | IDocumentDefinitionModel | IDocumentDefinition | IValidationIssueSection[] | IBreadcrumbItem[] | IFormBuilderConfig;
    }>;
    constructor(store$: Store<any>, renderer: Renderer2, rxGlobalCacheService: RxGlobalCacheService, rxJsonParserService: RxJsonParserService, rxNotificationService: RxNotificationService, rxOverlayService: RxOverlayService, translateService: TranslateService, documentDesignerService: DocumentDesignerService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onEditorEvent(event: IFormBuilderEvent): void;
    canDeactivate(): boolean;
    onCorrectIssue(validationIssue: IValidationIssue): void;
    onSave(): void;
    onToggleDesignMode(): void;
    onDefinitionModelChange(definitionModel: IDocumentDefinitionModel): void;
    onDefinitionInspectorInitialized(): void;
    private getFormBuilderConfig;
    private validate;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DocumentDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DocumentDesignerComponent, "rx-document-designer", never, { "configuration": "configuration"; }, { "definitionSaved": "definitionSaved"; "definitionErrorLoading": "definitionErrorLoading"; "closeDesigner": "closeDesigner"; }, never, never>;
}
