{"version":3,"file":"helix-platform-record-api.js","sources":["../../../../libs/platform/record/api/custom-uploader.service.ts","../../../../libs/platform/record/api/record-definition.constant.ts","../../../../libs/platform/record/api/record-definition.types.ts","../../../../libs/platform/record/api/record-definition.service.ts","../../../../libs/platform/record/api/record-definition-data-page.service.ts","../../../../libs/platform/record/api/record-definition-cache.service.ts","../../../../libs/platform/record/api/record-definition-inheritance-data-page.service.ts","../../../../libs/platform/record/api/record-instance-validation.class.ts","../../../../libs/platform/record/api/record-instance.class.ts","../../../../libs/platform/record/api/record-instance.constant.ts","../../../../libs/platform/record/api/record-instance-data-page.service.ts","../../../../libs/platform/record/api/record-instance-utils.service.ts","../../../../libs/platform/record/api/record-instance.service.ts","../../../../libs/platform/record/api/record-instance-update.service.ts","../../../../libs/platform/record/api/field-definition.service.ts","../../../../libs/platform/record/api/locale.service.ts","../../../../libs/platform/record/api/record-definition-resource-type.pipe.ts","../../../../libs/platform/record/api/record-definition-resource-type-pipe.module.ts","../../../../libs/platform/record/api/record-definition-field-option.pipe.ts","../../../../libs/platform/record/api/record-definition-field-option-pipe.module.ts","../../../../libs/platform/record/api/helix-platform-record-api.ts"],"sourcesContent":["import { RequestBody, SendFileUtils } from '@bmc-ux/adapt-angular';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n// LMA:: This Service is necessary to override the default UploaderService from\n// the Adapt Uploader Component.\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploaderService implements SendFileUtils {\n  url: string;\n\n  deleteFile(file: any, url?: string): any {\n    return of(null);\n  }\n\n  responseCallback(response?: any): any {}\n\n  sendChunk(requestBody: RequestBody, uploadAsOneChunk?: boolean, url?: string): Observable<any> {\n    return undefined;\n  }\n\n  sendFile(file: any): Observable<any> {\n    return of(null);\n  }\n}\n","import { assign, map, range } from 'lodash';\n\nconst coreFieldIds = {\n  displayId: 1,\n  createdBy: 2,\n  createdDate: 3,\n  assignee: 4,\n  modifiedBy: 5,\n  modifiedDate: 6,\n  status: 7,\n  description: 8,\n  notifierListening: 16,\n  id: 379\n};\n\nconst specialFieldIds = {\n  dataProviderId: 380\n};\n\nconst resourceTypes = {\n  character: 'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition',\n  localizedCharacter: 'com.bmc.arsys.rx.standardlib.record.LocalizedCharacterFieldDefinition',\n  dateTime: 'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition',\n  selection: 'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition',\n  integer: 'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition',\n  decimal: 'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition',\n  real: 'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition',\n  timeOnly: 'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition',\n  dateOnly: 'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition',\n  attachment: 'com.bmc.arsys.rx.standardlib.record.AttachmentFieldDefinition',\n  boolean: 'com.bmc.arsys.rx.standardlib.record.BooleanFieldDefinition',\n  recordInstance: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldDefinition',\n  object: 'com.bmc.arsys.rx.services.process.domain.record.ObjectFieldDefinition',\n  recordInstanceProcessVariable: 'com.bmc.arsys.rx.services.record.domain.RecordInstance',\n  localizedFieldInstance: 'com.bmc.arsys.rx.services.record.domain.LocalizedFieldInstance',\n  list: 'com.bmc.arsys.rx.standardlib.record.ListFieldDefinition'\n};\n\nconst resourceTypesByFullName = Object.keys(resourceTypes).reduce((currentValue, resourceType) => {\n  currentValue[resourceTypes[resourceType]] = resourceType;\n\n  return currentValue;\n}, {} as { [resourceTypeFullName: string]: string });\n\nconst validBundleIdRegExpString =\n  '[a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z0-9_]+)*(\\\\.([a-zA-Z0-9_]+|[a-zA-Z0-9_][a-zA-Z0-9_-]*[a-zA-Z0-9_]))';\n\nconst validDefinitionNameRegExpString = `[\n  'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A\n\n  'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\n\n  '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\n\n  0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\n\n  \\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\n\n  \\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D\n\n  \\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F\n  ]*`;\n\nexport enum RecordFieldOption {\n  System = 'SYSTEM',\n  Required = 'REQUIRED',\n  Optional = 'OPTIONAL'\n}\n\nconst fieldOptions = {\n  system: RecordFieldOption.System,\n  required: RecordFieldOption.Required,\n  optional: RecordFieldOption.Optional\n};\n\nconst coreDisplayIdField = {\n  resourceType: resourceTypes.character,\n  name: 'Display ID',\n  description: null,\n  id: coreFieldIds.displayId,\n  fieldOption: RecordFieldOption.System,\n  maxLength: 15,\n  defaultValue: null,\n  anyUserAllowedToSubmit: false,\n  allowPermissionsOverlay: false,\n  allowOtherPropertiesOverlay: false\n};\n\nconst coreIdField = {\n  resourceType: resourceTypes.character,\n  name: 'ID',\n  description: null,\n  id: coreFieldIds.id,\n  fieldOption: RecordFieldOption.System,\n  maxLength: 128,\n  defaultValue: null,\n  anyUserAllowedToSubmit: true,\n  allowPermissionsOverlay: false,\n  allowOtherPropertiesOverlay: false\n};\n\nconst joinFieldMapping = 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinitionFieldMapping';\nconst externalFieldMapping = 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinitionFieldMapping';\n\nconst sourceRecordTypes = {\n  primary: 'PRIMARY_RECORD_DEFINITION',\n  secondary: 'SECONDARY_RECORD_DEFINITION'\n};\n\nconst joinRecordDefinitionCoreFields = map([coreDisplayIdField, coreIdField], (coreField) =>\n  assign({}, coreField, {\n    maxLength: 255,\n    fieldMapping: {\n      resourceType: joinFieldMapping,\n      sourceFieldId: coreField.id,\n      source: sourceRecordTypes.primary\n    }\n  })\n);\n\nconst maxReservedFieldId = 536870912;\n\nexport const RX_RECORD_DEFINITION = {\n  coreFieldIds,\n  specialFieldIds,\n\n  alwaysRequiredNonSystemFieldIds: [coreFieldIds.createdBy, coreFieldIds.status, coreFieldIds.description],\n  AR_AUDIT_FIELD_IDS: range(450, 465),\n  AR_MAX_RESERVED_FIELD_ID: maxReservedFieldId,\n  AR_MIN_CUSTOM_FIELD_ID: maxReservedFieldId + 1,\n  AR_CORE_FIELD_IDS: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n  keyFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n\n  coreFields: [\n    coreDisplayIdField,\n    {\n      resourceType: resourceTypes.character,\n      name: 'Created By',\n      description: null,\n      id: coreFieldIds.createdBy,\n      fieldOption: fieldOptions.required,\n      maxLength: 254,\n      defaultValue: '$USER$',\n      anyUserAllowedToSubmit: true,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.dateTime,\n      name: 'Created Date',\n      description: null,\n      id: coreFieldIds.createdDate,\n      fieldOption: fieldOptions.system,\n      defaultValue: null,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.character,\n      name: 'Assignee',\n      description: null,\n      id: coreFieldIds.assignee,\n      fieldOption: fieldOptions.optional,\n      maxLength: 254,\n      defaultValue: null,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.character,\n      name: 'Modified By',\n      description: null,\n      id: coreFieldIds.modifiedBy,\n      fieldOption: fieldOptions.system,\n      maxLength: 254,\n      defaultValue: null,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.dateTime,\n      name: 'Modified Date',\n      description: null,\n      id: coreFieldIds.modifiedDate,\n      fieldOption: fieldOptions.system,\n      defaultValue: null,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.selection,\n      name: 'Status',\n      description: null,\n      id: coreFieldIds.status,\n      fieldOption: fieldOptions.required,\n      optionNamesById: {\n        0: 'New',\n        1: 'Assigned',\n        2: 'Fixed',\n        3: 'Rejected',\n        4: 'Closed'\n      },\n      displayType: null,\n      defaultValue: 0,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.character,\n      name: 'Description',\n      description: null,\n      id: coreFieldIds.description,\n      fieldOption: fieldOptions.required,\n      maxLength: 254,\n      defaultValue: null,\n      anyUserAllowedToSubmit: true,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    {\n      resourceType: resourceTypes.selection,\n      name: 'Notifier Listening',\n      description: null,\n      id: coreFieldIds.notifierListening,\n      fieldOption: fieldOptions.system,\n      optionNamesById: {\n        0: 'Not Listening',\n        1: 'Listening'\n      },\n      displayType: null,\n      defaultValue: 0,\n      anyUserAllowedToSubmit: false,\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false\n    },\n    coreIdField\n  ],\n\n  sortableCharacterFieldMaxLength: 4000,\n\n  fieldOptions,\n  resourceTypes,\n  resourceTypesByFullName,\n\n  dataTypes: {\n    character: {\n      displayName: 'Text',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.character.label',\n      resourceType: resourceTypes.character,\n      shortName: 'Character'\n    },\n    localizedCharacter: {\n      displayName: 'Localized text',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.localized-character.label',\n      resourceType: resourceTypes.localizedCharacter,\n      shortName: 'LocalizedCharacter'\n    },\n    integer: {\n      displayName: 'Integer',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.integer.label',\n      resourceType: resourceTypes.integer,\n      shortName: 'Integer'\n    },\n    dateTime: {\n      displayName: 'Date/Time',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-time.label',\n      resourceType: resourceTypes.dateTime,\n      shortName: 'DateTime'\n    },\n    selection: {\n      displayName: 'Selection',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.selection.label',\n      resourceType: resourceTypes.selection,\n      shortName: 'Selection'\n    },\n    decimal: {\n      displayName: 'Decimal',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.decimal.label',\n      resourceType: resourceTypes.decimal,\n      shortName: 'Decimal'\n    },\n    real: {\n      displayName: 'Floating',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.real.label',\n      resourceType: resourceTypes.real,\n      shortName: 'Real'\n    },\n    timeOnly: {\n      displayName: 'Time',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.time-only.label',\n      resourceType: resourceTypes.timeOnly,\n      shortName: 'TimeOnly'\n    },\n    dateOnly: {\n      displayName: 'Date',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-only.label',\n      resourceType: resourceTypes.dateOnly,\n      shortName: 'DateOnly'\n    },\n    attachment: {\n      displayName: 'Attachment',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.attachment.label',\n      resourceType: resourceTypes.attachment,\n      shortName: 'Attachment'\n    },\n    boolean: {\n      displayName: 'Boolean',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.boolean.label',\n      resourceType: resourceTypes.boolean,\n      shortName: 'Boolean',\n      options: [\n        {\n          value: '',\n          content: ''\n        },\n        {\n          value: '1',\n          content: 'True'\n        },\n        {\n          value: '0',\n          content: 'False'\n        }\n      ]\n    },\n    recordInstance: {\n      displayName: 'Record',\n      resourceType: resourceTypes.recordInstance,\n      skipDefaultValue: true\n    },\n    object: {\n      displayName: 'Object',\n      resourceType: resourceTypes.object,\n      skipDefaultValue: true\n    }\n  },\n  recordDefinitionTypes: {\n    regular: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.RegularRecordDefinition',\n      displayName: 'Regular'\n    },\n    join: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinition',\n      displayName: 'Join'\n    },\n    external: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinition',\n      displayName: 'External'\n    }\n  },\n\n  externalRecordDefinitionDataSourceTypes: {\n    webApi: 'Web Api'\n  },\n\n  externalRecordDefinitionTypes: {\n    custom: 'Custom'\n  },\n\n  passwordFieldIds: range(50, 71).concat([102, 123, 143]),\n  arCoreFieldIds: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n\n  recordInstanceAttachment: '/api/rx/application/record/attachment',\n\n  supportedSystemLocales: {\n    recordDefinitionName: 'Supported System Locales',\n    nameFieldId: 56100,\n    codeFieldId: 56101\n  },\n\n  fieldPermissionTypes: {\n    view: 'VIEW',\n    change: 'CHANGE'\n  },\n\n  groupIds: {\n    assigneeGroup: 7\n  },\n\n  securityLabelIds: {\n    assigneeGroup: 112\n  },\n\n  joinTypes: {\n    inner: {\n      value: 'INNER',\n      displayName: 'Inner join'\n    },\n    outer: {\n      value: 'OUTER',\n      displayName: 'Outer join'\n    }\n  },\n\n  joinRecordDefinitionCoreFieldIds: map(joinRecordDefinitionCoreFields, 'id'),\n  sourceRecordTypes,\n  joinRecordDefinitionCoreFields,\n  joinFieldMapping,\n  externalFieldMapping,\n  externalRecordDefinitionCoreFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n\n  validDefinitionNameRegExpString: validDefinitionNameRegExpString,\n\n  validDefinitionNameRegex: new RegExp('^' + validDefinitionNameRegExpString + '$'),\n\n  validFullDefinitionName: new RegExp('^' + validBundleIdRegExpString + '\\\\:' + validDefinitionNameRegExpString + '$')\n};\n","import { IFieldDefinition, IFieldDefinitionsById } from './field-definition.interfaces';\nimport { IRecordDefinitionPermission } from './record-definition-permission.interface';\nimport { IDefinition, IOverlayDescriptor } from '@helix/platform/shared/api';\n\ninterface IAssociatedField {\n  sourceFieldId: number;\n  fieldId: number;\n  fieldName: string;\n  sourceNode: string;\n  lastUpdateTime: string;\n  mappedFieldIds: number[];\n}\n\nexport interface IAssociatedAuditFieldsByAssociationName {\n  [associationName: string]: IAssociatedField[];\n}\n\nexport interface IAuditDescriptor {\n  auditRecordDefinitionName: string;\n  auditDataCriteria: string;\n  isEnabled: boolean;\n  associatedAuditFieldsByAssociationName: IAssociatedAuditFieldsByAssociationName;\n}\n\nexport enum ArchiveType {\n  CopyToArchiveAndDeleteFromSource = 'COPY_TO_ARCHIVE_AND_DELETE_FROM_SOURCE',\n  DeleteFromSource = 'DELETE_FROM_SOURCE',\n  None = 'NONE'\n}\n\nexport interface IArchiveDescriptor {\n  ageQualifierFieldId: number;\n  ageQualifierInDays: number;\n  archiveRecordDefinitionName: string;\n  description: string;\n  archiveType: ArchiveType;\n  includeAttachments: boolean;\n  archiveDataCriteria: string;\n  isEnabled: boolean;\n}\n\ninterface IRecordDefinitionOverlayDescriptor extends IOverlayDescriptor {\n  indexesOverlayType?: string;\n}\n\nexport enum AssociationSelectionType {\n  FollowParent = 'FOLLOW_PARENT',\n  Selected = 'SPECIFIC_ONLY',\n  AllEnforced = 'ALL_ENFORCED',\n  All = 'ALL'\n}\n\nexport interface IAssociationsToFollowForArchive {\n  selectionType: AssociationSelectionType;\n  specificAssociationNames: string[];\n}\n\nexport interface IIndexDefinition {\n  indexName: string;\n  unique: boolean;\n  indexFieldIds: number[];\n  ignoreBlankValues: boolean;\n}\n\nexport interface IRecordDefinition extends IDefinition {\n  allowFieldsOverlay?: boolean;\n  allowIndexesOverlay?: boolean;\n  allowNonAdminToDeleteRecordInstances?: boolean;\n  allowOtherPropertiesOverlay?: boolean;\n  allowPermissionsOverlay?: boolean;\n  auditDescriptor?: IAuditDescriptor;\n  archiveDescriptor?: IArchiveDescriptor;\n  associationsToFollowForArchive?: IAssociationsToFollowForArchive;\n  auditSourceRecordDefinitionName?: any;\n  enableCognitiveSearch?: boolean;\n  fieldDefinitions?: IFieldDefinition[];\n  fullPermissions?: IRecordDefinitionPermission[];\n  guid?: string;\n  displayFieldIdInAssociation?: string;\n  indexDefinitions?: IIndexDefinition[];\n  inheritanceDescriptor?: any;\n  isAbstract?: boolean;\n  isAuditRecordDefinition?: boolean;\n  isFinal?: boolean;\n  isSharedInstanceStorage?: boolean;\n  joinCriteria?: string;\n  joinType?: string;\n  localizableStringsByFieldId?: object;\n  overlayDescriptor?: IRecordDefinitionOverlayDescriptor;\n  permissions?: IRecordDefinitionPermission[];\n  primaryRecordDefinitionName?: string;\n  recordInstancePrefix?: string;\n  recordTypeName?: string;\n  resourceType?: string;\n  rowSecurityPropagations?: string[];\n  secondaryRecordDefinitionName?: string;\n  securityLabels?: ISecurityLabel[];\n  shouldExportData?: boolean;\n  upgradeVersion?: number;\n  weightedRelevancyFields?: any;\n  fieldDefinitionsById?: IFieldDefinitionsById;\n  type?: string;\n}\n\nexport interface ISecurityLabel {\n  id: number;\n  name: string;\n  parent?: string;\n  inherited?: boolean;\n  child?: any;\n  securityLabelMapping?: any;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ICommand,\n  IHttpGetParams,\n  IHttpOptions,\n  RX_BUNDLE,\n  RxCommandFactoryService,\n  IPlainObject\n} from '@helix/platform/shared/api';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { ArchiveType, AssociationSelectionType, IIndexDefinition, IRecordDefinition } from './record-definition.types';\nimport { IFieldDefinition, IFieldDefinitionsById } from './field-definition.interfaces';\nimport { assign, cloneDeep, defaults, get, mapValues, reduce, size } from 'lodash';\nimport { IFieldDefinitionOption } from './field-definition-option.interface';\nimport { ISelectionFieldDefinition } from './selection-field-definition.interface';\nimport { RxGuidService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionService {\n  private renameCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n    'com.bmc.arsys.rx.application.record.command.RenameRecordDefinitionCommand'\n  );\n\n  private revertCustomizationCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n    'com.bmc.arsys.rx.application.record.command.RevertRecordDefinitionCommand'\n  );\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxGuidService: RxGuidService\n  ) {}\n\n  get(\n    recordDefinitionName: string,\n    options: IHttpGetParams = {},\n    skipLocalization = false\n  ): Observable<IRecordDefinition> {\n    return this.httpClient.get<IRecordDefinition>(this.getUrl(recordDefinitionName), options).pipe(\n      tap((recordDefinition: IRecordDefinition) => {\n        if (!skipLocalization) {\n          this.applyLocalization(recordDefinition);\n        }\n      })\n    );\n  }\n\n  getNew(): Observable<IRecordDefinition> {\n    const definition: IRecordDefinition = {\n      name: '',\n      description: null,\n      resourceType: RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType,\n      fieldDefinitions: cloneDeep(RX_RECORD_DEFINITION.coreFields) as IFieldDefinition[],\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false,\n      allowNonAdminToDeleteRecordInstances: false,\n      allowIndexesOverlay: false,\n      allowFieldsOverlay: false,\n      archiveDescriptor: {\n        ageQualifierFieldId: RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n        ageQualifierInDays: 365,\n        archiveDataCriteria: null,\n        archiveRecordDefinitionName: null,\n        archiveType: ArchiveType.None,\n        description: null,\n        includeAttachments: false,\n        isEnabled: false\n      },\n      associationsToFollowForArchive: {\n        specificAssociationNames: [],\n        selectionType: AssociationSelectionType.AllEnforced\n      },\n      enableCognitiveSearch: false,\n      indexDefinitions: [],\n      scope: RX_BUNDLE.definitionScopeTypes.bundle\n    };\n\n    definition.fieldDefinitions.filter(this.isSelectionFieldDefinition).forEach((selectionFieldDefinition) => {\n      selectionFieldDefinition.optionLabelsById = mapValues(selectionFieldDefinition.optionNamesById, () =>\n        this.rxGuidService.generate()\n      );\n    });\n\n    return of(definition);\n  }\n\n  create(recordDefinition: IRecordDefinition): Observable<any> {\n    return this.httpClient.post(this.getUrl(), recordDefinition);\n  }\n\n  update(recordDefinition: IRecordDefinition, options?: IHttpOptions): Observable<any> {\n    return this.httpClient.put(this.getUrl(recordDefinition.name), recordDefinition, options);\n  }\n\n  delete(recordDefinitionName: string): Observable<any> {\n    return this.httpClient.delete(this.getUrl(recordDefinitionName));\n  }\n\n  rename(oldRecordDefinitionName: string, newRecordDefinitionName: string): Observable<any> {\n    return this.renameCommand.execute({\n      name: oldRecordDefinitionName,\n      newName: newRecordDefinitionName\n    });\n  }\n\n  revertCustomization(recordDefinitionName: string): Observable<any> {\n    return this.revertCustomizationCommand.execute({ recordDefinitionName });\n  }\n\n  private getUrl(recordDefinitionName?: string): string {\n    return recordDefinitionName\n      ? `/api/rx/application/record/recorddefinition/${encodeURIComponent(recordDefinitionName)}`\n      : '/api/rx/application/record/recorddefinition';\n  }\n\n  private setOptionsByIdProperty(fieldDefinition: IFieldDefinition): void {\n    fieldDefinition.optionsById = reduce(\n      fieldDefinition.optionNamesById,\n      (optionsById, optionName, optionId) => {\n        optionsById[optionId] = {\n          id: optionId,\n          label: optionName\n        };\n\n        return optionsById;\n      },\n      {} as { [id: string]: IFieldDefinitionOption }\n    );\n  }\n\n  buildFieldDefinitionsByIdMap(recordDefinition: IRecordDefinition): IFieldDefinitionsById {\n    return reduce(\n      recordDefinition.fieldDefinitions,\n      (fieldDefinitionsById, fieldDefinition) => {\n        this.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, fieldDefinition.id);\n\n        return fieldDefinitionsById;\n      },\n      {} as IFieldDefinitionsById\n    );\n  }\n\n  addFieldDefinitionToMap(\n    fieldDefinition: IFieldDefinition,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    field: string | number\n  ): void {\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n      this.setOptionsByIdProperty(fieldDefinition);\n    }\n\n    fieldDefinitionsById[field] = fieldDefinition;\n  }\n\n  setFieldDefinitionsToOptional(recordDefinition: IRecordDefinition): IRecordDefinition {\n    recordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        fieldDefinition.fieldOption = RX_RECORD_DEFINITION.fieldOptions.optional;\n      }\n    });\n\n    return recordDefinition;\n  }\n\n  private isSelectionFieldDefinition(fieldDefinition: IFieldDefinition): fieldDefinition is ISelectionFieldDefinition {\n    return fieldDefinition?.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection;\n  }\n\n  applyLocalization(recordDefinition: IRecordDefinition): void {\n    recordDefinition.fieldDefinitions\n      .filter(this.isSelectionFieldDefinition)\n      .forEach((fieldDefinition: ISelectionFieldDefinition) => {\n        const localizableStringsForField = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n\n        fieldDefinition.optionLabelsById = mapValues(\n          defaults(fieldDefinition.optionLabelsById, fieldDefinition.optionNamesById),\n          (stringGuid, optionId) =>\n            get(localizableStringsForField, stringGuid, fieldDefinition.optionNamesById[optionId])\n        );\n      });\n  }\n\n  isRegularRecord(recordDefinition: IRecordDefinition): boolean {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType;\n  }\n\n  isExternalRecord(recordDefinition: IRecordDefinition): boolean {\n    return (\n      recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n      !this.isCustomRecord(recordDefinition)\n    );\n  }\n\n  isJoinRecord(recordDefinition: IRecordDefinition): boolean {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType;\n  }\n\n  isCustomRecord(recordDefinition: IRecordDefinition): boolean {\n    return (\n      recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n      recordDefinition.type === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom\n    );\n  }\n\n  isAutomaticIndex(index: IIndexDefinition): boolean {\n    return (\n      index.unique && size(index.indexFieldIds) === 1 && index.indexFieldIds[0] === RX_RECORD_DEFINITION.coreFieldIds.id\n    );\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { DataPage } from '@helix/platform/shared/api';\n\nconst recordDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionDataPageQuery';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionDataPageService extends DataPage {\n  constructor(private injector: Injector) {\n    super(injector, recordDefinitionDataPageQuery);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { assign, castArray, fromPairs, isEmpty } from 'lodash';\n\nimport {\n  IAssociationDefinition,\n  IAssociationTree,\n  RxAssociationDefinitionDataPageService,\n  RxAssociationNodeTreeDataPageService\n} from '@helix/platform/association/api';\nimport { IHttpGetParams } from '@helix/platform/shared/api';\n\nimport { IRecordDefinition } from './record-definition.types';\nimport { RxRecordDefinitionService } from './record-definition.service';\n\nexport interface IRecordAssociationDefinitionData {\n  [associationDefinitionName: string]: Array<IAssociationDefinition>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionCacheService {\n  private consumers = new Set<Observable<any>>();\n  private recordDefinitions: Map<string, Observable<IRecordDefinition>> = new Map();\n  private recordAssociationDefinitions: Map<string, Observable<any>> = new Map();\n  private recordAssociationTrees: Map<string, Observable<IAssociationTree[]>> = new Map();\n\n  constructor(\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxAssociationNodeTreeDataPageService: RxAssociationNodeTreeDataPageService,\n    private rxRecordDefinitionService: RxRecordDefinitionService\n  ) {}\n\n  getRecordAssociationDefinitions(\n    recordDefinitionNames: string[] | string\n  ): Observable<IRecordAssociationDefinitionData> {\n    recordDefinitionNames = castArray(recordDefinitionNames);\n\n    const requestedAssociationDefinitions = [];\n\n    recordDefinitionNames.forEach((recordDefinitionName) => {\n      if (!this.recordAssociationDefinitions.has(recordDefinitionName)) {\n        const recordAssociationDefinition$ = this.rxAssociationDefinitionDataPageService\n          .getRecordAssociationDefinitions(recordDefinitionName)\n          .pipe(\n            map((result) => fromPairs([[recordDefinitionName, result[0].data]])),\n            shareReplay(1)\n          );\n\n        this.recordAssociationDefinitions.set(recordDefinitionName, recordAssociationDefinition$);\n      }\n\n      requestedAssociationDefinitions.push(this.recordAssociationDefinitions.get(recordDefinitionName));\n    });\n\n    return forkJoin(requestedAssociationDefinitions).pipe(\n      map((recordAssociationDefinitionData: Array<IRecordAssociationDefinitionData>) => {\n        return assign({}, ...recordAssociationDefinitionData);\n      })\n    );\n  }\n\n  getRecordAssociationTree(recordDefinitionName: string): Observable<IAssociationTree[]> {\n    if (!this.recordAssociationTrees.has(recordDefinitionName)) {\n      this.recordAssociationTrees.set(\n        recordDefinitionName,\n        this.rxAssociationNodeTreeDataPageService\n          .get({\n            params: {\n              startIndex: 0,\n              pageSize: -1,\n              depth: 2,\n              recorddefinition: recordDefinitionName\n            }\n          })\n          .pipe(\n            map((dataPage) => dataPage.data as IAssociationTree[]),\n            shareReplay(1)\n          )\n      );\n    }\n\n    return this.recordAssociationTrees.get(recordDefinitionName);\n  }\n\n  getRecordAssociationTrees(recordDefinitionNames: string[]): Observable<IAssociationTree[][]> {\n    return forkJoin(\n      recordDefinitionNames.map((recordDefinitionName) => this.getRecordAssociationTree(recordDefinitionName))\n    );\n  }\n\n  getRecordDefinition(recordDefinitionName: string, options?: IHttpGetParams): Observable<IRecordDefinition> {\n    if (!this.recordDefinitions.has(recordDefinitionName)) {\n      const recordDefinition$ = this.rxRecordDefinitionService.get(recordDefinitionName, options).pipe(shareReplay(1));\n\n      this.recordDefinitions.set(recordDefinitionName, recordDefinition$);\n    }\n\n    return this.recordDefinitions.get(recordDefinitionName);\n  }\n\n  getRecordDefinitions(recordDefinitionNames: string[], options?: IHttpGetParams): Observable<IRecordDefinition[]> {\n    return forkJoin(\n      recordDefinitionNames.map((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName, options))\n    );\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  private clearCache(): void {\n    this.recordDefinitions.clear();\n    this.recordAssociationDefinitions.clear();\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { DataPage } from '@helix/platform/shared/api';\n\nconst recordDefinitionDataPageQuery =\n  'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionInheritanceDataPageQuery';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionInheritanceDataPageService extends DataPage {\n  constructor(private injector: Injector) {\n    super(injector, recordDefinitionDataPageQuery);\n  }\n}\n","import { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { IRecordDefinition } from './record-definition.types';\nimport {\n  FieldInstanceValidator,\n  IRecordInstance,\n  IRxFieldValidationResult,\n  IRxValidationResult\n} from './record-instance.types';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport { IFieldInstance } from './field-instance.interface';\nimport { isEmpty, isFinite, isNil, isString, isNaN } from 'lodash';\nimport BigNumber from 'bignumber.js';\n\ntype NumericOrString = number | BigNumber | string;\n\nexport class RecordInstanceValidation {\n  fieldValidatorsByType = {\n    'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition': [\n      this.minValidator,\n      this.maxValidator,\n      this.isNaNValidator\n    ],\n    'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition': null,\n    'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition': null\n  };\n\n  private fieldDefinitions: IFieldDefinition[];\n  private fieldInstances: { [fieldId: number]: IFieldInstance };\n\n  validate(recordInstance: IRecordInstance, recordDefinition: IRecordDefinition): IRxValidationResult {\n    this.fieldDefinitions = recordDefinition.fieldDefinitions;\n    this.fieldInstances = recordInstance.fieldInstances;\n\n    const errors = Object.keys(this.fieldInstances).reduce((result, fieldId) => {\n      const fieldErrors = this.validateFieldInstance(this.fieldInstances[fieldId], this.fieldInstances[fieldId].value);\n\n      if (fieldErrors) {\n        result[fieldId] = fieldErrors;\n      }\n\n      return result;\n    }, {});\n\n    return isEmpty(errors) ? null : errors;\n  }\n\n  validateSingleField(fieldId: number, value: any): IRxFieldValidationResult {\n    return this.validateFieldInstance(this.fieldInstances[fieldId], value);\n  }\n\n  private validateFieldInstance(fieldInstance: IFieldInstance, value: any): IRxFieldValidationResult {\n    let errors = {};\n\n    if (fieldInstance) {\n      const fieldValidators = this.getValidatorsForFieldInstance(fieldInstance);\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n\n      errors = fieldValidators.reduce((result, validator) => {\n        const validatorResponse = validator.call(this, value, fieldDefinition);\n\n        if (validatorResponse) {\n          result = { ...result, ...validatorResponse };\n        }\n\n        return result;\n      }, {});\n    }\n\n    return errors;\n  }\n\n  private getValidatorsForFieldInstance(fieldInstance: IFieldInstance): FieldInstanceValidator[] {\n    const validators = [];\n\n    if (fieldInstance) {\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n      const fieldType = fieldDefinition.resourceType;\n\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        validators.push(this.isRequired);\n      }\n\n      if (this.fieldValidatorsByType[fieldType]) {\n        validators.push(...this.fieldValidatorsByType[fieldType]);\n      }\n    }\n\n    return validators;\n  }\n\n  private getFieldDefinition(fieldId: number): IFieldDefinition {\n    return this.fieldDefinitions.find((definition) => definition.id === fieldId);\n  }\n\n  private isRequired(value: NumericOrString): IRxFieldValidationResult {\n    if (isNil(value) || value === '') {\n      return { required: 'Value is required' };\n    } else {\n      return null;\n    }\n  }\n\n  private isNaNValidator(value: NumericOrString): IRxFieldValidationResult {\n    return isNaN(value) ? { nan: `Value cannot be NaN` } : null;\n  }\n\n  private minValidator(value, fieldDefinition: IFieldDefinition): IRxFieldValidationResult {\n    const minError = { min: `Minimum value is ${fieldDefinition.minValue}` };\n\n    if (BigNumber.isBigNumber(value) || isFinite(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isLessThan(fieldDefinition.minValue) ? minError : null;\n    } else {\n      return null;\n    }\n  }\n\n  private maxValidator(value: NumericOrString, fieldDefinition: IFieldDefinition): IRxFieldValidationResult {\n    const maxError = { max: `Maximum value is ${fieldDefinition.maxValue}` };\n\n    if (BigNumber.isBigNumber(value) || isFinite(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isGreaterThan(fieldDefinition.maxValue) ? maxError : null;\n    } else {\n      return null;\n    }\n  }\n\n  private isFiniteNumberString(value: NumericOrString): value is NumericOrString {\n    return isString(value) && value.trim() !== '' && isFinite(Number(value));\n  }\n}\n","import { IRecordDefinition } from './record-definition.types';\nimport { RecordInstanceValidation } from './record-instance-validation.class';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { IFieldInstance } from './field-instance.interface';\nimport {\n  cloneDeep,\n  find,\n  forEach,\n  forOwn,\n  get,\n  includes,\n  isNull,\n  isNaN,\n  isString,\n  isUndefined,\n  reduce,\n  set,\n  some,\n  toNumber\n} from 'lodash';\nimport {\n  IFieldValueChanged,\n  IRecordInstance,\n  IRxFieldValidationResult,\n  IRxRecordInstanceAssociationInstances,\n  IRxValidationResult\n} from './record-instance.types';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { Injector } from '@angular/core';\nimport { RxLocalizationService, RxLogService } from '@helix/platform/shared/api';\nimport BigNumber from 'bignumber.js';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport { RxNumberUtilsService, RxStringService } from '@helix/platform/utils';\n\nexport class RecordInstance implements IRecordInstance {\n  readonly resourceType: string;\n\n  private fieldValueChangedSubject = new Subject<IFieldValueChanged>();\n\n  validation$ = new BehaviorSubject<IRxValidationResult>(null);\n  id: string;\n  fieldValueChanged$: Observable<IFieldValueChanged> = this.fieldValueChangedSubject.asObservable();\n  displayId: string;\n  recordDefinitionName: string;\n  permittedGroupsBySecurityLabels: any;\n  permittedUsersBySecurityLabels: any;\n  permittedRolesBySecurityLabels: any;\n  fieldInstances: { [fieldId: number]: IFieldInstance };\n  originalData: IRecordInstance;\n  associationInstances: IRxRecordInstanceAssociationInstances;\n\n  private rxLogService: RxLogService = this.injector.get<RxLogService>(RxLogService);\n  private rxLocalizationService: RxLocalizationService =\n    this.injector.get<RxLocalizationService>(RxLocalizationService);\n  private rxStringService: RxStringService = this.injector.get<RxStringService>(RxStringService);\n  private rxNumberUtilsService: RxNumberUtilsService = this.injector.get<RxNumberUtilsService>(RxNumberUtilsService);\n  private validationService: RecordInstanceValidation = new RecordInstanceValidation();\n\n  constructor(public recordDefinition: IRecordDefinition, recordInstance: IRecordInstance, private injector: Injector) {\n    this.prepareRecordInstance(recordInstance);\n\n    this.originalData = cloneDeep(recordInstance);\n\n    Object.assign(this, recordInstance);\n\n    this.validate();\n  }\n\n  private prepareRecordInstance(recordInstance: IRecordInstance): void {\n    // convert numeric field instance values from string to BigNumber instance\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) =>\n        includes(\n          [\n            RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.real.resourceType\n          ],\n          fieldDefinition.resourceType\n        )\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance && fieldInstance.value) {\n          fieldInstance.value = new BigNumber(fieldInstance.value);\n        }\n      });\n\n    // update decimal field definition min and max numbers based on the precision\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) => fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.decimal.resourceType)\n      .forEach((fieldDefinition: IFieldDefinition) => {\n        // According to the backend side, min and max number must be based on the precision. E.g when:\n        // - precision is 1, safe number will be 1e27 - 0.1 = 99999999999999999999999999.9\n        // - precision is 3, safe number will be 1e25 - 0.001 = 999999999999999999999999.999\n        const base = new BigNumber(0.1).pow(fieldDefinition.precision);\n        const safeRangeNumber = new BigNumber(1e28).multipliedBy(base).minus(base);\n\n        fieldDefinition.maxValue = new BigNumber(fieldDefinition.maxValue);\n        fieldDefinition.minValue = new BigNumber(fieldDefinition.minValue);\n\n        if (fieldDefinition.maxValue.isGreaterThanOrEqualTo(safeRangeNumber)) {\n          fieldDefinition.maxValue = safeRangeNumber;\n        }\n\n        if (fieldDefinition.minValue.isLessThanOrEqualTo(safeRangeNumber.negated())) {\n          fieldDefinition.minValue = safeRangeNumber.negated();\n        }\n      });\n\n    // convert boolean and selection field instance values from string to number\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) =>\n        includes(\n          [RX_RECORD_DEFINITION.dataTypes.boolean.resourceType, RX_RECORD_DEFINITION.dataTypes.selection.resourceType],\n          fieldDefinition.resourceType\n        )\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance && fieldInstance.value) {\n          fieldInstance.value = toNumber(fieldInstance.value);\n        }\n      });\n\n    // add default value for localized character field component\n    this.recordDefinition.fieldDefinitions\n      .filter(\n        (fieldDefinition) =>\n          RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType === fieldDefinition.resourceType\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n        const currentLocaleCode = this.rxLocalizationService.currentLocale;\n        const defaultLocaleCode = 'en-US';\n\n        if (fieldInstance && !fieldInstance.value && fieldInstance.valueByLocale) {\n          fieldInstance.value =\n            fieldInstance.valueByLocale[currentLocaleCode] || fieldInstance.valueByLocale[defaultLocaleCode];\n        }\n      });\n\n    // set placeholder value for password fields\n    RX_RECORD_DEFINITION.passwordFieldIds.forEach((passwordFieldId) => {\n      const passwordFieldInstance = recordInstance.fieldInstances[passwordFieldId];\n\n      if (passwordFieldInstance) {\n        passwordFieldInstance.value = '********';\n      }\n    });\n  }\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): any {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    return get(fieldInstance, 'value', null);\n  }\n\n  setFieldValue(fieldId: number, value: any, associatedRecordPath?: string[]): void {\n    const recordInstance = this.getRecordInstance(associatedRecordPath);\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    const fieldDefinition = find(recordInstance.recordDefinition.fieldDefinitions, { id: fieldId });\n\n    let newValue = isUndefined(value) ? null : value;\n\n    if (fieldInstance) {\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.character.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType:\n          if (!isNull(newValue)) {\n            if (!isString(newValue)) {\n              newValue = String(newValue);\n            } else if (this.rxStringService.isEmptySafe(newValue)) {\n              newValue = null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n          if (!isNull(newValue)) {\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(newValue)) {\n              newValue = new BigNumber(value);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = isNaN(value) ? value : null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.selection.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType:\n          if (!isNull(newValue)) {\n            if (!this.rxStringService.isEmptySafe(newValue) && isFinite(Number(newValue))) {\n              newValue = Number(newValue);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n          if (value instanceof File) {\n            newValue = value.name;\n            set(fieldInstance, 'file', value);\n          } else {\n            if (!isNull(newValue)) {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n            }\n\n            newValue = null;\n\n            delete fieldInstance.file;\n          }\n\n          break;\n      }\n\n      set(fieldInstance, 'value', newValue);\n\n      this.validate();\n\n      recordInstance.fieldValueChangedSubject.next({\n        fieldId,\n        value: fieldInstance.value\n      });\n    }\n  }\n\n  getFieldProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    return get(fieldInstance, prop);\n  }\n\n  setFieldProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    set(fieldInstance, prop, value);\n  }\n\n  getFieldInstance(fieldId: number, associatedRecordPath?: string[]): IFieldInstance {\n    if (associatedRecordPath) {\n      return get(this.getRecordInstance(associatedRecordPath), ['fieldInstances', fieldId]);\n    } else {\n      return this.fieldInstances[fieldId];\n    }\n  }\n\n  getRecordInstance(associatedRecordPath?: string[]): RecordInstance {\n    return associatedRecordPath ? get(this, ['associationInstances', ...associatedRecordPath]) : this;\n  }\n\n  isFieldValueChanged(fieldId: number, newValue: any, associatedRecordPath?: string[]) {\n    const fieldDefinition = find(this.getRecordInstance(associatedRecordPath).recordDefinition.fieldDefinitions, {\n      id: fieldId\n    });\n\n    const value = this.getFieldValue(fieldId, associatedRecordPath);\n\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n        return value !== (newValue instanceof File ? newValue.name : newValue);\n\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        return !new BigNumber(value).eq(newValue);\n\n      default:\n        return value !== newValue;\n    }\n  }\n\n  revertFieldInstances(): void {\n    this.fieldInstances = cloneDeep(this.originalData.fieldInstances);\n    this.validate();\n\n    forEach(this.getExtensionRecords(), (recordInstance: RecordInstance) => recordInstance.revertFieldInstances());\n  }\n\n  reset(): void {\n    Object.assign(this, cloneDeep(this.originalData));\n    this.associationInstances = null;\n    this.validate();\n  }\n\n  getOriginalRecordInstance(): RecordInstance {\n    return new RecordInstance(this.recordDefinition, this.originalData, this.injector);\n  }\n\n  validate(): void {\n    const errors = this.validationService.validate(this, this.recordDefinition);\n\n    this.validation$.next(errors);\n  }\n\n  validateSingleField(fieldId: number, value: any, associatedRecordPath?: string[]): IRxFieldValidationResult {\n    let result = {};\n\n    if (associatedRecordPath) {\n      const associatedRecordInstance: RecordInstance = this.getRecordInstance(associatedRecordPath);\n\n      if (associatedRecordInstance) {\n        result = associatedRecordInstance.validationService.validateSingleField(fieldId, value);\n      }\n    } else {\n      result = this.validationService.validateSingleField(fieldId, value);\n    }\n\n    return result;\n  }\n\n  private getExtensionRecords(): RecordInstance[] {\n    return reduce(\n      this.associationInstances,\n      (result, value, key) => {\n        forEach(value, (associationRecords: IAssociationRecords, nodeSide: string) => {\n          result.push(...associationRecords.extensions);\n        });\n\n        return result;\n      },\n      []\n    );\n  }\n\n  private isDeletedOrPendingAssociations(): boolean {\n    return some(this.associationInstances, (value) => {\n      return some(value, (associationRecords: IAssociationRecords, nodeSide: string) => {\n        return Boolean(associationRecords.deleted.length || associationRecords.pending.length);\n      });\n    });\n  }\n\n  private logIncorrectFieldValueWarning(value: any, fieldDefinition: IFieldDefinition) {\n    const fieldTypeName = find(RX_RECORD_DEFINITION.dataTypes, {\n      resourceType: fieldDefinition.resourceType\n    }).displayName;\n\n    this.rxLogService.warning(`${value} cannot be assigned to ${fieldTypeName} field.`);\n  }\n\n  prepareForBulkEdit(): void {\n    forEach(this.fieldInstances, (fieldInstance) => {\n      fieldInstance.value = null;\n\n      if (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance) {\n        forOwn(fieldInstance.valueByLocale, (value, key) => {\n          fieldInstance.valueByLocale[key] = null;\n        });\n      }\n    });\n\n    this.originalData.fieldInstances = cloneDeep(this.fieldInstances);\n\n    this.validate();\n  }\n}\n","export const RX_RECORD_INSTANCE = {\n  association: {\n    operationResourceTypes: {\n      associate: 'com.bmc.arsys.rx.services.association.domain.AssociateOperation',\n      disassociate: 'com.bmc.arsys.rx.services.association.domain.DisassociateOperation',\n      createAndAssociate: 'com.bmc.arsys.rx.services.association.domain.CreateAndAssociateOperation',\n      update: 'com.bmc.arsys.rx.services.association.domain.UpdateOperation'\n    }\n  },\n\n  dataPageQuery: 'com.bmc.arsys.rx.application.record.datapage.RecordInstanceDataPageQuery'\n};\n","import { DataPage, IDataPageRequestConfiguration, IDataPageResult, RxLogService } from '@helix/platform/shared/api';\nimport { Observable } from 'rxjs';\nimport { Injectable, Injector } from '@angular/core';\nimport { RX_RECORD_INSTANCE } from './record-instance.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceDataPageService extends DataPage {\n  constructor(private injector: Injector, private rxLogService: RxLogService) {\n    super(injector, RX_RECORD_INSTANCE.dataPageQuery);\n  }\n\n  get(dataPageRequestConfiguration: IDataPageRequestConfiguration = {}): Observable<IDataPageResult> {\n    this.rxLogService.warning('RxRecordInstanceDataPageService: The get() method is deprecated. Use post() instead.');\n\n    return super.get(dataPageRequestConfiguration);\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IDataPageParams, IPlainObject, RxLogService } from '@helix/platform/shared/api';\nimport BigNumber from 'bignumber.js';\nimport { get, isEqual, last, map as _map, toNumber, transform } from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { IFieldInstance } from './field-instance.interface';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { RxRecordInstanceDataPageService } from './record-instance-data-page.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceUtilsService {\n  displayFieldsCache: { [serializedParams: string]: IPlainObject[] } = {};\n\n  constructor(\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxLogService: RxLogService\n  ) {}\n\n  convertFromDataPageRowToPlainRecordInstance(dataPageRow: IPlainObject): {\n    fieldInstances: { [fieldId: number]: IFieldInstance };\n    id: string;\n  } {\n    return {\n      id: dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id],\n      fieldInstances: transform(\n        dataPageRow,\n        (result, value, key) => {\n          result[key] = {\n            id: toNumber(key),\n            value: value\n          };\n        },\n        {}\n      )\n    };\n  }\n\n  escapeTextWildcards(value) {\n    // escape double quotes with double quotes, e.g. replace \"textInQuotes\" with \"\"textInQuotes\"\"\n    // escape wildcards with backslash, e.g. replace `search%And_` with `search\\%And\\_`\n    return value.replace(/\"/g, '\"\"').replace(/[%_]/g, '\\\\$&');\n  }\n\n  isFieldValueEqual(value: any, other: any) {\n    if (value instanceof BigNumber || other instanceof BigNumber) {\n      return new BigNumber(value).eq(new BigNumber(other));\n    } else {\n      return isEqual(value, other);\n    }\n  }\n\n  isNoRecordFoundError(error: Error) {\n    return error instanceof HttpErrorResponse && get(error, 'error[0].messageNumber') === 302;\n  }\n\n  getFieldValues(\n    recordDefinitionName: string,\n    recordInstanceIds: string[],\n    fieldIds: string[]\n  ): Observable<IPlainObject[]> {\n    const queryExpression = _map(\n      recordInstanceIds,\n      (recordInstanceId) => `'${RX_RECORD_DEFINITION.coreFieldIds.id}'=\"${recordInstanceId}\"`\n    ).join(' OR ');\n\n    const params: IDataPageParams = {\n      recorddefinition: recordDefinitionName,\n      propertySelection: fieldIds.join(','),\n      queryExpression,\n      pageSize: -1,\n      startIndex: 0\n    };\n\n    const serializedParams = JSON.stringify(params);\n\n    if (this.displayFieldsCache[serializedParams]) {\n      return of(this.displayFieldsCache[serializedParams]);\n    }\n\n    return this.rxRecordInstanceDataPageService.post({ params }).pipe(\n      shareReplay(1),\n      map((result) => {\n        this.displayFieldsCache[serializedParams] = result.data;\n\n        return result.data;\n      })\n    );\n  }\n\n  // This method parses content-disposition header and returns decoded file name, for example:\n  // 'attachment; filename*=UTF-8\\'\\'foo+bar.jpg' will become 'foo bar.jpg'\n  // Additional notes:\n  // 1. returns empty string if failed to parse content-disposition\n  // 2. '+'  symbols will be replaced with '%20' which will then be evaluated to spaces after decoding\n  tryParseContentDisposition(contentDisposition: string): string {\n    try {\n      let fileName = contentDisposition.match(/(?:attachment; filename\\*=UTF-8'')(.*)/)[1];\n\n      fileName = fileName.replace(/\\+/g, '%20');\n\n      return decodeURIComponent(fileName);\n    } catch (e) {\n      this.rxLogService.warning(`Cannot parse content-disposition response header: ${contentDisposition}`);\n\n      return '';\n    }\n  }\n}\n","import { Injectable, Injector, NgZone } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  assign,\n  filter,\n  find,\n  forEach,\n  groupBy,\n  has,\n  includes,\n  isEmpty,\n  isEqual,\n  isNull,\n  isNumber,\n  isString,\n  isUndefined,\n  map as _map,\n  pick,\n  remove,\n  sortBy,\n  transform,\n  trim,\n  values\n} from 'lodash';\nimport { saveAs } from 'file-saver';\n\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport { IAttachedFile } from './attached-file.interface';\nimport { IFieldInstance } from './field-instance.interface';\nimport {\n  ICreatedRecordInstance,\n  IRecordInstance,\n  IRxRecordInstanceAssociationInstances\n} from './record-instance.types';\nimport { RecordInstance } from './record-instance.class';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { RX_RECORD_INSTANCE } from './record-instance.constant';\nimport { RxRecordDefinitionCacheService } from './record-definition-cache.service';\nimport { RxRecordInstanceUtilsService } from './record-instance-utils.service';\nimport { IRecordDefinition } from './record-definition.types';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport BigNumber from 'bignumber.js';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceService {\n  private path = '/api/rx/application/record/recordinstance';\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private injector: Injector,\n    private ngZone: NgZone\n  ) {}\n\n  get(recordDefinitionName: string, recordInstanceId: string): Observable<RecordInstance> {\n    return this.getRecordInstance(recordDefinitionName, recordInstanceId);\n  }\n\n  getNew(recordDefinitionName: string): Observable<RecordInstance> {\n    return this.getRecordInstance(recordDefinitionName, '0');\n  }\n\n  getEmpty(recordDefinitionName: string): Observable<RecordInstance> {\n    return this.getNew(recordDefinitionName).pipe(tap((recordInstance) => recordInstance.prepareForBulkEdit()));\n  }\n\n  save(\n    recordInstance: RecordInstance,\n    options?: {\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n    }\n  ): Observable<any> {\n    return this.httpClient.put(\n      `${this.path}/${encodeURIComponent(recordInstance.recordDefinitionName)}/${encodeURIComponent(\n        recordInstance.id\n      )}`,\n      this.prepareRecordInstance(recordInstance),\n      options\n    );\n  }\n\n  delete(recordDefinitionName: string, recordInstanceId: string): Observable<any> {\n    return this.httpClient.delete(\n      `${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`\n    );\n  }\n\n  private prepareAttachments(\n    fieldInstances: { [fieldId: number]: IFieldInstance },\n    isAssociation = false\n  ): IAttachedFile[] {\n    const attachedFiles = filter(fieldInstances, (fieldInstance) => Boolean(fieldInstance.file)).map(\n      (attachment: IFieldInstance) => {\n        const keyPrefix = isAssociation ? `${fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value}/` : '';\n\n        return {\n          key: `${keyPrefix}${attachment.id}`,\n          file: attachment.file\n        };\n      }\n    );\n\n    this.cleanAttachmentFiles(fieldInstances);\n\n    return attachedFiles;\n  }\n\n  // There should not be any files in record instance JSON so we are cleaning it\n  private cleanAttachmentFiles(fieldInstances: { [fieldId: number]: IFieldInstance }) {\n    filter(fieldInstances, (fieldInstance) => has(fieldInstance, 'file')).forEach((fieldInstanceWithFile) => {\n      if (fieldInstanceWithFile.file) {\n        delete fieldInstances[fieldInstanceWithFile.id];\n      } else {\n        delete fieldInstances[fieldInstanceWithFile.id].file;\n      }\n    });\n  }\n\n  create(recordInstance: RecordInstance): Observable<ICreatedRecordInstance> {\n    return this.httpClient\n      .post(this.path, this.prepareRecordInstance(recordInstance), {\n        observe: 'response',\n        responseType: 'text'\n      })\n      .pipe(\n        map((res: HttpResponse<any>) => {\n          let result = {};\n          const locationHeader = res.headers.get('location');\n\n          if (locationHeader) {\n            result = {\n              id: locationHeader.substr(locationHeader.lastIndexOf('/') + 1),\n              url: locationHeader\n            };\n          }\n\n          return result;\n        })\n      );\n  }\n\n  private getRecordInstance(recordDefinitionName: string, recordInstanceId: string): Observable<RecordInstance> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName),\n      this.getRecordInstanceData(recordDefinitionName, recordInstanceId)\n    ]).pipe(\n      map(\n        ([recordDefinition, recordInstanceData]) =>\n          new RecordInstance(recordDefinition, recordInstanceData, this.injector)\n      )\n    );\n  }\n\n  private getRecordInstanceData(recordDefinitionName: string, recordInstanceId: string): Observable<IRecordInstance> {\n    return this.httpClient.get<IRecordInstance>(\n      `${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`\n    );\n  }\n\n  private prepareRecordInstance(recordInstance: RecordInstance): IRecordInstance | FormData {\n    const modifiedFieldInstances: { [fieldId: string]: IFieldInstance } = {};\n    const recordInstanceFormData: FormData = new FormData();\n\n    Object.keys(recordInstance.originalData.fieldInstances).forEach((fieldIdKey: string) => {\n      const fieldId = Number(fieldIdKey);\n      const fieldInstance = recordInstance.fieldInstances[fieldId];\n      const originalFieldInstance = recordInstance.originalData.fieldInstances[fieldId];\n\n      if (isString(fieldInstance.value)) {\n        fieldInstance.value = trim(fieldInstance.value);\n      }\n\n      if (\n        isUndefined(originalFieldInstance) ||\n        (fieldInstance.value === null && originalFieldInstance.value !== null) ||\n        (fieldInstance.value !== null && originalFieldInstance.value === null) ||\n        (fieldInstance.value !== null &&\n          originalFieldInstance.value !== null &&\n          !(isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n          String(fieldInstance.value) !== originalFieldInstance.value) ||\n        ((isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n          !new BigNumber(fieldInstance.value).isEqualTo(originalFieldInstance.value)) ||\n        (fieldId === RX_RECORD_DEFINITION.coreFieldIds.modifiedDate && fieldInstance.value !== null) ||\n        (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance &&\n          !isEqual(originalFieldInstance.valueByLocale, fieldInstance.valueByLocale))\n      ) {\n        modifiedFieldInstances[fieldId] = fieldInstance;\n      }\n    });\n\n    const preparedRecordInstance = {\n      id: recordInstance.id,\n      resourceType: recordInstance.resourceType,\n      displayId: recordInstance.displayId,\n      recordDefinitionName: recordInstance.recordDefinitionName,\n      permittedGroupsBySecurityLabels: recordInstance.permittedGroupsBySecurityLabels,\n      permittedUsersBySecurityLabels: recordInstance.permittedUsersBySecurityLabels,\n      permittedRolesBySecurityLabels: recordInstance.permittedRolesBySecurityLabels,\n      fieldInstances: modifiedFieldInstances\n    };\n\n    let attachedFiles = this.prepareAttachments(preparedRecordInstance.fieldInstances);\n\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n\n    // We have to use FormData if we have attachments or associated data\n    if (!isEmpty(attachedFiles) || !isEmpty(associationInstances)) {\n      recordInstanceFormData.append('recordInstance', JSON.stringify(preparedRecordInstance));\n\n      if (!isEmpty(associationInstances)) {\n        filter(associationInstances, 'recordInstances').forEach((associationConfig) => {\n          forEach(associationConfig.recordInstances, (instance) => {\n            attachedFiles = attachedFiles.concat(this.prepareAttachments(instance.fieldInstances, true));\n          });\n        });\n\n        recordInstanceFormData.append('associationOperations', JSON.stringify(associationInstances));\n      }\n\n      attachedFiles.forEach((attachment) => {\n        recordInstanceFormData.append(attachment.key, attachment.file, attachment.file.name);\n      });\n\n      return recordInstanceFormData;\n    } else {\n      return preparedRecordInstance;\n    }\n  }\n\n  getAttachmentDownloadUrl(recordDefinitionName: string, fieldId: number, recordInstanceId: string): string {\n    return `${RX_RECORD_DEFINITION.recordInstanceAttachment}/${encodeURIComponent(\n      recordDefinitionName\n    )}/${encodeURIComponent(recordInstanceId)}/${fieldId}`;\n  }\n\n  downloadAttachment(recordDefinitionName: string, fieldId: number, recordInstanceId: string, fileName: string): void {\n    this.httpClient\n      .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n      .subscribe((fileStream) => {\n        if (fileStream) {\n          const file = new Blob([fileStream], {\n            type: fileStream.type\n          });\n\n          this.ngZone.runOutsideAngular(() => {\n            saveAs(file, fileName);\n          });\n        }\n      });\n  }\n\n  getAttachment(recordDefinitionName: string, fieldId: number, recordInstanceId: string): Observable<Blob> {\n    return this.httpClient\n      .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n      .pipe(\n        map((fileStream: Blob) => {\n          return new Blob([fileStream], {\n            type: fileStream.type\n          });\n        })\n      );\n  }\n\n  prepareAssociationInstancesForSaving(associationInstances: IRxRecordInstanceAssociationInstances) {\n    const associationPayload = transform(\n      associationInstances,\n      (result, associationInstance, associationDefinitionName) => {\n        forEach(associationInstance, (associationGroups: IAssociationRecords, key) => {\n          const nodeSide = key.split(':')[0];\n\n          const newAssociations: any[] = remove(associationGroups.pending, 'isNewInstance');\n\n          if (!isEmpty(associationGroups.pending)) {\n            values(groupBy(associationGroups.pending, (instance) => JSON.stringify(instance.rolesConfig))).forEach(\n              (instancesGroup) => {\n                result.push(\n                  assign(\n                    {\n                      associationDefinitionName: associationDefinitionName,\n                      recordInstanceIds: _map(instancesGroup, 'id'),\n                      nodeSide,\n                      resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n                    },\n                    instancesGroup[0].rolesConfig\n                  )\n                );\n              }\n            );\n          }\n\n          if (!isEmpty(newAssociations)) {\n            values(groupBy(newAssociations, (instance) => JSON.stringify(instance.rolesConfig))).forEach(\n              (instancesGroup) => {\n                result.push(\n                  assign(\n                    {\n                      associationDefinitionName: associationDefinitionName,\n                      recordInstances: _map(newAssociations, (newAssociation) =>\n                        pick(newAssociation, ['fieldInstances', 'recordDefinitionName'])\n                      ),\n                      nodeSide,\n                      resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                    },\n                    instancesGroup[0].rolesConfig\n                  )\n                );\n              }\n            );\n          }\n\n          if (!isEmpty(associationGroups.deleted)) {\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: _map(associationGroups.deleted, 'id'),\n              nodeSide,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.disassociate\n            });\n          }\n\n          if (!isEmpty(associationGroups.extensions)) {\n            const extensionRecordInstance = associationGroups.extensions[0];\n\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstances: [this.prepareAssociatedRecordInstanceForSaving(extensionRecordInstance)],\n              nodeSide,\n              resourceType: extensionRecordInstance.isNewInstance\n                ? RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                : RX_RECORD_INSTANCE.association.operationResourceTypes.update\n            });\n          }\n        });\n      },\n      []\n    );\n\n    return sortBy(associationPayload, (associationData) => {\n      // DISASSOCIATE operations must be at the beginning\n      return associationData.operation === 'ASSOCIATE';\n    });\n  }\n\n  prepareAssociatedRecordInstanceForSaving(recordInstance): IRecordInstance {\n    const recordInstanceClone = this.prepareRecordInstance(recordInstance) as IRecordInstance;\n\n    recordInstanceClone.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id] =\n      recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id];\n\n    // todo ychubar fix typings\n    delete (recordInstanceClone as any).isNewInstance;\n\n    return recordInstanceClone;\n  }\n\n  createInstanceFromDataPageRow(dataPageRow, recordDefinition: IRecordDefinition): RecordInstance {\n    const plainRecordInstance = this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(\n      dataPageRow\n    ) as IRecordInstance;\n\n    plainRecordInstance.recordDefinitionName = recordDefinition.name;\n\n    forEach(plainRecordInstance.fieldInstances, (fieldInstance, fieldId) => {\n      const fieldDefinition =\n        find(recordDefinition.fieldDefinitions, { id: Number(fieldId) }) || ({} as IFieldDefinition);\n\n      if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) {\n        fieldInstance.resourceType = RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance;\n      }\n\n      // normalize record instance fields\n      if (!isNull(fieldInstance.value)) {\n        if (\n          isNumber(fieldInstance.value) &&\n          includes(\n            [RX_RECORD_DEFINITION.resourceTypes.boolean, RX_RECORD_DEFINITION.resourceTypes.selection],\n            fieldDefinition.resourceType\n          )\n        ) {\n          fieldInstance.value = String(fieldInstance.value);\n        }\n      }\n    });\n\n    return new RecordInstance(recordDefinition, plainRecordInstance, this.injector);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxRecordInstanceService } from './record-instance.service';\nimport { RecordInstance } from './record-instance.class';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { from, Observable, throwError } from 'rxjs';\nimport { RX_ERROR_HANDLING } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceUpdateService {\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxUtilityModalsService: RxUtilityModalsService\n  ) {}\n\n  execute(recordInstance: RecordInstance): Observable<any> {\n    return this.rxRecordInstanceService\n      .save(recordInstance)\n      .pipe(catchError((error) => this.handleModifiedInstanceError(error, recordInstance)));\n  }\n\n  private handleModifiedInstanceError(error, recordInstance: RecordInstance): Observable<any> {\n    if (error.status === RX_ERROR_HANDLING.optimisticLockErrorHttpStatus) {\n      return from(this.rxUtilityModalsService.confirmExternalChange(error.error[0].messageText)).pipe(\n        switchMap((isConfirmed) => {\n          if (isConfirmed) {\n            return this.rxRecordInstanceService.save(recordInstance, {\n              headers: {\n                'Override-Optimistic-Lock': 'true'\n              }\n            });\n          } else {\n            return throwError(error);\n          }\n        })\n      );\n    } else {\n      return throwError(error);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { includes, inRange, isNumber, get, isUndefined } from 'lodash';\nimport { IRecordDefinition } from './record-definition.types';\nimport { RX_OVERLAY, RxOverlayService } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxFieldDefinitionService {\n  constructor(private rxOverlayService: RxOverlayService) {}\n\n  isSystemField(fieldDefinition: IFieldDefinition): boolean {\n    return fieldDefinition?.fieldOption === RX_RECORD_DEFINITION.fieldOptions.system;\n  }\n\n  isRequiredField(fieldDefinition: IFieldDefinition): boolean {\n    return fieldDefinition?.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n  }\n\n  isPassword(fieldDefinition: IFieldDefinition): boolean {\n    return includes(RX_RECORD_DEFINITION.passwordFieldIds, fieldDefinition.id);\n  }\n\n  isSecured(fieldDefinition: IFieldDefinition): boolean {\n    return fieldDefinition.shouldPersistHashed || fieldDefinition.shouldPersistEncrypted;\n  }\n\n  isReadOnly(fieldDefinition: IFieldDefinition): boolean {\n    return this.isSystemField(fieldDefinition) || this.isInheritedField(fieldDefinition);\n  }\n\n  isInheritedField(fieldDefinition: IFieldDefinition): boolean {\n    return fieldDefinition.hasOwnProperty('isInherited') && fieldDefinition.isInherited;\n  }\n\n  isPropertiesCustomizationEnabled(fieldDefinition: IFieldDefinition): boolean {\n    return (\n      this.isTransient(fieldDefinition) ||\n      this.rxOverlayService.isCustomizationEnabled('allowOtherPropertiesOverlay', fieldDefinition)\n    );\n  }\n\n  isTransient(fieldDefinition): boolean {\n    return isUndefined(fieldDefinition.lastUpdateTime);\n  }\n\n  isOverlayMode(fieldDefinition: IFieldDefinition): boolean {\n    const overlayGroupId = fieldDefinition.overlayGroupId;\n    const overlayDescriptor = fieldDefinition.overlayDescriptor || { parentOverlayGroupId: null };\n\n    return (\n      this.rxOverlayService.getOverlayOperation(overlayGroupId, overlayDescriptor.parentOverlayGroupId) !==\n      RX_OVERLAY.operationTypes.createdInThisOverlayGroup\n    );\n  }\n\n  // Is field ID in a range reserved by BMC\n  isReservedField(fieldDefinition: IFieldDefinition, skipValidate = false): boolean {\n    // if (isNumber(fieldDefinition.id)) {\n    if (!skipValidate) {\n      return this.isExternalRecordField(fieldDefinition)\n        ? includes(RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds, fieldDefinition.id)\n        : fieldDefinition.id <= RX_RECORD_DEFINITION.AR_MAX_RESERVED_FIELD_ID;\n    } else {\n      return false;\n    }\n  }\n\n  isPermissionsCustomizationEnabled(fieldDefinition): boolean {\n    return (\n      this.isTransient(fieldDefinition) ||\n      this.rxOverlayService.isCustomizationEnabled('allowPermissionsOverlay', fieldDefinition)\n    );\n  }\n\n  isSortable(fieldDefinition: IFieldDefinition): boolean {\n    // Records cannot be sorted by a field with unlimited length (maxLength = 0), or by a field longer than 1000 characters.\n    // This applies to character and localized character fields.\n    // Sorting is allowed for fields with unspecified length.\n    return (\n      !isNumber(fieldDefinition.maxLength) ||\n      inRange(fieldDefinition.maxLength, 1, RX_RECORD_DEFINITION.sortableCharacterFieldMaxLength + 1)\n    );\n  }\n\n  isSearchable(fieldDefinition: IFieldDefinition, recordDefinition?: IRecordDefinition): boolean {\n    return (\n      includes(\n        [RX_RECORD_DEFINITION.dataTypes.character.resourceType, RX_RECORD_DEFINITION.dataTypes.attachment.resourceType],\n        fieldDefinition.resourceType\n      ) &&\n      !this.isPassword(fieldDefinition) &&\n      !this.isSecured(fieldDefinition) &&\n      !this.isReadOnly(fieldDefinition) &&\n      this.isPropertiesCustomizationEnabled(fieldDefinition)\n    );\n  }\n\n  isJoinedField(fieldDefinition: IFieldDefinition): boolean {\n    return this.isJoinRecordField(fieldDefinition) && !this.isCoreField(fieldDefinition);\n  }\n\n  isCoreField(fieldDefinition: IFieldDefinition): boolean {\n    let coreFieldIds = RX_RECORD_DEFINITION.arCoreFieldIds;\n\n    if (this.isJoinRecordField(fieldDefinition)) {\n      coreFieldIds = RX_RECORD_DEFINITION.joinRecordDefinitionCoreFieldIds;\n    } else if (this.isExternalRecordField(fieldDefinition)) {\n      coreFieldIds = RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds;\n    }\n\n    return includes(coreFieldIds, fieldDefinition.id);\n  }\n\n  isExternalRecordField(fieldDefinition: IFieldDefinition): boolean {\n    return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.externalFieldMapping;\n  }\n\n  canBeAssociatedDisplayField(fieldDefinition: IFieldDefinition): boolean {\n    return (\n      (this.isReservedField(fieldDefinition) || !this.isTransient(fieldDefinition)) &&\n      (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character ||\n        fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) &&\n      RX_RECORD_DEFINITION.coreFieldIds.id !== fieldDefinition.id\n    );\n  }\n\n  private isJoinRecordField(fieldDefinition: IFieldDefinition): boolean {\n    return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.joinFieldMapping;\n  }\n\n  isDataProviderIdField(fieldDefinition: IFieldDefinition, recordDefinition: IRecordDefinition): boolean {\n    const isCustomRecordDefinition =\n      recordDefinition?.type === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom;\n\n    return isCustomRecordDefinition && fieldDefinition.id === RX_RECORD_DEFINITION.specialFieldIds.dataProviderId;\n  }\n\n  isFieldInUserOverlay(fieldDefinition: IFieldDefinition): boolean {\n    return (\n      !fieldDefinition.lastUpdateTime ||\n      this.rxOverlayService.getUserDefaultOverlayGroupId() === fieldDefinition.overlayGroupId\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { RxRecordInstanceDataPageService } from './record-instance-data-page.service';\nimport { Injectable } from '@angular/core';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLocaleService {\n  private locales: Observable<IDataPageResult>;\n\n  constructor(private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService) {}\n\n  getLocales(): Observable<IDataPageResult> {\n    if (!this.locales) {\n      this.locales = this.rxRecordInstanceDataPageService\n        .post({\n          params: {\n            recorddefinition: RX_RECORD_DEFINITION.supportedSystemLocales.recordDefinitionName,\n            propertySelection: [\n              RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId,\n              RX_RECORD_DEFINITION.supportedSystemLocales.codeFieldId\n            ].join(','),\n            sortBy: RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId\n          }\n        })\n        .pipe(shareReplay(1));\n    }\n\n    return this.locales;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\n\n@Pipe({\n  name: 'rxRecordDefinitionResourceType'\n})\nexport class RxRecordDefinitionResourceTypePipe implements PipeTransform {\n  transform(value: string): string {\n    const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[value];\n\n    return RX_RECORD_DEFINITION.dataTypes[resourceType]?.displayName || '';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxRecordDefinitionResourceTypePipe } from './record-definition-resource-type.pipe';\n\n@NgModule({\n  declarations: [RxRecordDefinitionResourceTypePipe],\n  exports: [RxRecordDefinitionResourceTypePipe]\n})\nexport class RxRecordDefinitionResourceTypePipeModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\n\n@Pipe({\n  name: 'rxRecordDefinitionFieldOption'\n})\nexport class RxRecordDefinitionFieldOptionPipe implements PipeTransform {\n  constructor(private translateService: TranslateService) {}\n\n  transform(value: string): string {\n    let fieldOption: string;\n\n    if (value === RX_RECORD_DEFINITION.fieldOptions.required) {\n      fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label');\n    } else if (value === RX_RECORD_DEFINITION.fieldOptions.optional) {\n      fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.no.label');\n    } else if (value === RX_RECORD_DEFINITION.fieldOptions.system) {\n      fieldOption = `${this.translateService.instant(\n        'com.bmc.arsys.rx.client.common.yes.label'\n      )} (${this.translateService.instant('com.bmc.arsys.rx.client.field-definition.type.system.label')})`;\n    }\n\n    return fieldOption;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxRecordDefinitionFieldOptionPipe } from './record-definition-field-option.pipe';\n\n@NgModule({\n  declarations: [RxRecordDefinitionFieldOptionPipe],\n  exports: [RxRecordDefinitionFieldOptionPipe]\n})\nexport class RxRecordDefinitionFieldOptionPipeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["recordDefinitionDataPageQuery","map","isFinite","_map"],"mappings":"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"}