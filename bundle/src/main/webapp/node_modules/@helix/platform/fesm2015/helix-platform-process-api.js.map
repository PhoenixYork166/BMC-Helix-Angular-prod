{"version":3,"file":"helix-platform-process-api.js","sources":["../../../../libs/platform/process/api/data-dictionary/process-data-dictionary.service.ts","../../../../libs/platform/process/api/process-definition.constant.ts","../../../../libs/platform/process/api/registries/process-element-registry.service.ts","../../../../libs/platform/process/api/call-activity-registry.service.ts","../../../../libs/platform/process/api/process-element.types.ts","../../../../libs/platform/process/api/process-api.module.ts","../../../../libs/platform/process/api/process-definition-data-page.service.ts","../../../../libs/platform/process/api/process-definition.service.ts","../../../../libs/platform/process/api/process-definition.types.ts","../../../../libs/platform/process/api/process-definition-cache.service.ts","../../../../libs/platform/process/api/process-element-search.service.ts","../../../../libs/platform/process/api/process-elements.service.ts","../../../../libs/platform/process/api/process-instance.service.ts","../../../../libs/platform/process/api/process-instance-commands.service.ts","../../../../libs/platform/process/api/process-instance-data-page.service.ts","../../../../libs/platform/process/api/process-instance-count-by-status-data-page.service.ts","../../../../libs/platform/process/api/helix-platform-process-api.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { isEmpty, omit, reject } from 'lodash';\n\nimport { RxIdService, RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  IDataDictionary,\n  IDataDictionaryBranch,\n  RxDataDictionaryUtils,\n  RxDesignerCacheService,\n  RxGlobalCacheService\n} from '@helix/platform/shared/api';\n\nimport { IActivitiesDataDictionaryState } from './activities-data-dictionary-state.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessDataDictionaryService {\n  private commonActivities: IActivitiesDataDictionaryState = null;\n  private commonActivitiesSubject = new ReplaySubject<IActivitiesDataDictionaryState>(1);\n\n  commonActivities$ = this.commonActivitiesSubject.asObservable();\n\n  private commonActivitiesDataDictionaryStateClone$ = this.commonActivities$.pipe(\n    map((activitiesDataDictionaryState) =>\n      activitiesDataDictionaryState ? this.rxObjectUtilsService.cloneDeep(activitiesDataDictionaryState) : {}\n    ),\n    shareReplay(1)\n  );\n\n  commonDataDictionary$ = this.getCommonDataDictionary();\n\n  constructor(\n    private rxDataDictionaryUtils: RxDataDictionaryUtils,\n    private rxDesignerCacheService: RxDesignerCacheService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxIdService: RxIdService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private translateService: TranslateService\n  ) {}\n\n  clear(): void {\n    this.setCommonActivities(null);\n  }\n\n  getCommonDataDictionary(): Observable<IDataDictionary> {\n    return combineLatest([\n      this.commonActivitiesDataDictionaryStateClone$.pipe(\n        map((componentsDataDictionaryState) => Object.values(componentsDataDictionaryState))\n      )\n    ]).pipe(\n      map(([activitiesDataDictionaryBranches]) => {\n        return [\n          {\n            label: 'General',\n            children: [\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-date.label'),\n                icon: 'd-icon-dollar',\n                expression: '$DATE$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.designer.keywords.current-date-time.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$TIMESTAMP$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.designer.keywords.current-group-ids.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$GROUPIDS$'\n              },\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-groups.label'),\n                icon: 'd-icon-dollar',\n                expression: '$GROUPS$'\n              },\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-roles.label'),\n                icon: 'd-icon-dollar',\n                expression: '$ROLES$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.designer.keywords.current-server-urls.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$SERVERURL$'\n              },\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-time.label'),\n                icon: 'd-icon-dollar',\n                expression: '$TIME$'\n              },\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-user.label'),\n                icon: 'd-icon-dollar',\n                expression: '$USER$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.designer.keywords.current-user-locale.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$LOCALE$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.designer.keywords.current-week-day.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$WEEKDAY$'\n              },\n              {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.new-line.label'),\n                icon: 'd-icon-dollar',\n                expression: '$NEWLINE$'\n              },\n              {\n                label: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.process-designer.keywords.process-correlation-id.label'\n                ),\n                icon: 'd-icon-dollar',\n                expression: '$PROCESSCORRELATIONID$'\n              },\n              {\n                label: 'NULL',\n                icon: 'd-icon-dollar',\n                expression: '$NULL$',\n                hidden: true\n              }\n            ]\n          },\n          {\n            label: 'Functions',\n            expanded: true,\n            children: reject(\n              this.rxDataDictionaryUtils.getFunctionDataDictionaryBranch(\n                this.rxDesignerCacheService.getFunctionDescriptorsSync()\n              ),\n              { label: 'Rule Qualification' }\n            )\n          },\n          {\n            label: 'Activities',\n            expanded: true,\n            children: activitiesDataDictionaryBranches\n          }\n        ];\n      })\n    );\n  }\n\n  setCommonActivitiesDataDictionaryBranch(\n    guid: string,\n    activityDataDictionaryBranch: Observable<IDataDictionaryBranch>\n  ): void {\n    activityDataDictionaryBranch.pipe(take(1)).subscribe((dataDictionaryBranch) => {\n      this.setCommonActivities(\n        isEmpty(dataDictionaryBranch)\n          ? omit(this.commonActivities, [guid])\n          : { ...this.commonActivities, [guid]: dataDictionaryBranch }\n      );\n    });\n  }\n\n  private setCommonActivities(state: IActivitiesDataDictionaryState): void {\n    this.commonActivities = state;\n\n    this.commonActivitiesSubject.next(this.commonActivities);\n  }\n}\n","const specialActionTypeNames = {\n  connector: 'connector',\n  webRequest: 'WebRequest',\n  jitterbit: 'iPaaS Jitterbit',\n  mulesoft: 'iPaaS MuleSoft'\n};\n\nconst processElementResourceTypes = {\n  boundaryEvent: 'com.bmc.arsys.rx.services.process.domain.BoundaryEventDefinition',\n  callActivity: 'com.bmc.arsys.rx.services.process.domain.CallActivityDefinition',\n  endEvent: 'com.bmc.arsys.rx.services.process.domain.EndEventDefinition',\n  errorEvent: 'com.bmc.arsys.rx.services.process.domain.ErrorEventDefinition',\n  exclusiveGateway: 'com.bmc.arsys.rx.services.process.domain.ExclusiveGatewayDefinition',\n  parallelGateway: 'com.bmc.arsys.rx.services.process.domain.ParallelGatewayDefinition',\n  processAction: 'com.bmc.arsys.rx.services.process.domain.ServiceTaskDefinition',\n  receiveTask: 'com.bmc.arsys.rx.services.process.domain.ReceiveTaskDefinition',\n  sequenceFlow: 'com.bmc.arsys.rx.services.process.domain.SequenceFlowDefinition',\n  startEvent: 'com.bmc.arsys.rx.services.process.domain.StartEventDefinition',\n  subProcess: 'com.bmc.arsys.rx.services.process.domain.SubProcessDefinition',\n  textAnnotation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotation',\n  textAnnotationAssociation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotationAssociation',\n  timerEvent: 'com.bmc.arsys.rx.services.process.domain.TimerEventDefinition',\n  userTask: 'com.bmc.arsys.rx.services.process.domain.UserTaskDefinition'\n};\n\nconst processElementNamesByResourceType = {\n  // process event resource types\n  [processElementResourceTypes.boundaryEvent]: 'Boundary',\n  [processElementResourceTypes.endEvent]: 'End',\n  [processElementResourceTypes.errorEvent]: 'Error',\n  [processElementResourceTypes.startEvent]: 'Start',\n  [processElementResourceTypes.timerEvent]: 'Timer',\n\n  // process element resource types\n  [processElementResourceTypes.callActivity]: 'Call Activity',\n  [processElementResourceTypes.exclusiveGateway]: 'Exclusive',\n  [processElementResourceTypes.parallelGateway]: 'Parallel',\n  [processElementResourceTypes.receiveTask]: 'Receive Task',\n  [processElementResourceTypes.subProcess]: 'Sub-Process',\n  [processElementResourceTypes.textAnnotation]: 'Annotation',\n  [processElementResourceTypes.userTask]: 'User Task',\n\n  // rule element resource types\n  'com.bmc.arsys.rx.services.rule.domain.CancelProcessInstanceAction': 'Cancel Process',\n  'com.bmc.arsys.rx.services.rule.domain.SignalProcessInstanceAction': 'Signal Process',\n  'com.bmc.arsys.rx.services.rule.domain.StartProcessInstanceAction': 'Start Process',\n  ruleQualificationResourceType: 'Qualification'\n};\n\nconst standardProcessElementGroups = {\n  activities: {\n    name: 'Activities',\n    priority: 1\n  },\n  annotations: {\n    name: 'Annotations',\n    priority: 2\n  },\n  events: {\n    name: 'Events',\n    priority: 3\n  },\n  gateways: {\n    name: 'Gateways',\n    priority: 4\n  },\n  platformActions: {\n    name: 'Platform actions',\n    priority: 5\n  },\n  default: {\n    priority: 6\n  }\n};\n\nconst standardProcessElements = [\n  {\n    group: standardProcessElementGroups.annotations.name,\n    resourceType: processElementResourceTypes.textAnnotation\n  },\n  {\n    group: standardProcessElementGroups.events.name,\n    resourceType: processElementResourceTypes.startEvent\n  },\n  {\n    group: standardProcessElementGroups.events.name,\n    resourceType: processElementResourceTypes.endEvent\n  },\n  {\n    group: standardProcessElementGroups.events.name,\n    resourceType: processElementResourceTypes.boundaryEvent,\n    eventResourceType: processElementResourceTypes.timerEvent\n  },\n  {\n    group: standardProcessElementGroups.events.name,\n    resourceType: processElementResourceTypes.boundaryEvent,\n    eventResourceType: processElementResourceTypes.errorEvent\n  },\n  {\n    group: standardProcessElementGroups.events.name,\n    resourceType: processElementResourceTypes.endEvent,\n    eventResourceType: processElementResourceTypes.errorEvent\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.callActivity\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.processAction,\n    actionTypeName: specialActionTypeNames.connector\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.receiveTask\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.subProcess\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.userTask\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.processAction,\n    actionTypeName: specialActionTypeNames.webRequest\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.processAction,\n    actionTypeName: specialActionTypeNames.jitterbit\n  },\n  {\n    group: standardProcessElementGroups.activities.name,\n    resourceType: processElementResourceTypes.processAction,\n    actionTypeName: specialActionTypeNames.mulesoft\n  },\n  {\n    group: standardProcessElementGroups.gateways.name,\n    resourceType: processElementResourceTypes.parallelGateway\n  },\n  {\n    group: standardProcessElementGroups.gateways.name,\n    resourceType: processElementResourceTypes.exclusiveGateway\n  }\n];\n\nexport const RX_PROCESS_DEFINITION = {\n  processElementDisplayNames: {\n    endEvent: 'End',\n    startEvent: 'Start'\n  },\n\n  processElementNamesByResourceType,\n  processElementResourceTypes,\n\n  processElementTypes: {\n    endEvent: 'rx.EndEvent',\n    processAction: 'rx.ProcessAction',\n    startEvent: 'rx.StartEvent'\n  },\n\n  processElementGroups: [\n    standardProcessElementGroups.activities,\n    standardProcessElementGroups.annotations,\n    standardProcessElementGroups.events,\n    standardProcessElementGroups.gateways,\n    standardProcessElementGroups.platformActions\n  ],\n\n  standardProcessElements,\n  standardProcessElementGroups,\n\n  processElementConfigurationProperties: [\n    'actionTypeName',\n    'calledProcessDefinitionName',\n    'eventResourceType',\n    'resourceType'\n  ],\n\n  processVariableSubTypes: {\n    attachment: 11,\n    character: 4\n  },\n\n  processVariableTypes: {\n    record: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldType',\n    default: 'com.bmc.arsys.rx.services.record.domain.DefaultFieldType'\n  },\n\n  runAsUser: {\n    administrator: {\n      definitionValue: false,\n      modelValue: 'administrator'\n    },\n    currentUser: {\n      definitionValue: true,\n      modelValue: 'currentUser'\n    },\n    inheritFromProcess: {\n      definitionValue: null,\n      modelValue: 'inheritFromProcess'\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\n\nimport { IDesignerElementRegistry, RxLogService } from '@helix/platform/shared/api';\n\nimport { IProcessElementDescriptor } from './process-element-descriptor.interface';\nimport { RX_PROCESS_DEFINITION } from '../process-definition.constant';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementRegistryService implements IDesignerElementRegistry {\n  private elementDescriptors: Map<string, IProcessElementDescriptor> = new Map();\n\n  constructor(private rxLogService: RxLogService) {}\n\n  get(type: string): IProcessElementDescriptor {\n    return (\n      this.elementDescriptors.get(type) ??\n      this.elementDescriptors.get(RX_PROCESS_DEFINITION.processElementTypes.processAction)\n    );\n  }\n\n  getAll(): IProcessElementDescriptor[] {\n    return Array.from(this.elementDescriptors.values());\n  }\n\n  register(descriptor: IProcessElementDescriptor): void {\n    if (this.elementDescriptors.has(descriptor.type)) {\n      this.rxLogService.warning(`Process element ${descriptor.type} is already registered.`);\n    } else {\n      joint.util.setByPath(joint.shapes.rx, descriptor.shapeType, descriptor.shapeClass, '.');\n      joint.util.setByPath(joint.shapes.rx, descriptor.viewShapeType, descriptor.viewShapeClass, '.');\n\n      this.elementDescriptors.set(descriptor.type, descriptor);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ICallActivityDescriptor } from './process-element.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCallActivityRegistryService {\n  private callActivityDescriptors: Map<string, ICallActivityDescriptor> = new Map();\n\n  getRegisteredCallActivities(): IterableIterator<ICallActivityDescriptor> {\n    return this.callActivityDescriptors.values();\n  }\n\n  register(...callActivityDescriptors: ICallActivityDescriptor[]): void {\n    callActivityDescriptors.forEach((descriptor) => {\n      this.callActivityDescriptors.set(descriptor.processDefinitionName, descriptor);\n    });\n  }\n}\n","export enum ElementVisibilityOptions {\n  Always = 'Always',\n  Never = 'Never'\n}\n\nexport interface ICallActivityDescriptor {\n  displayName: string;\n  processDefinitionName: string;\n  callActivityManagerServiceName: string;\n  visibility: ElementVisibilityOptions;\n}\n\nexport interface ICallActivityElement {\n  processDefinitionName: string;\n  displayName: string;\n}\n\nexport interface ISelectedElementInspectorDesignerItemModel<TSelectedElementModel> {\n  elementModel: TSelectedElementModel;\n  graph: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxCallActivityRegistryService } from './call-activity-registry.service';\nimport { ElementVisibilityOptions } from './process-element.types';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class RxProcessApiModule {\n  constructor(private rxCallActivityRegistryService: RxCallActivityRegistryService) {\n    this.rxCallActivityRegistryService.register({\n      displayName: 'Approval Process',\n      processDefinitionName: 'com.bmc.arsys.rx.approval:Approval Process V2',\n      callActivityManagerServiceName: 'apApprovalProcessCallActivityManager',\n      visibility: ElementVisibilityOptions.Always\n    });\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { DataPage } from '@helix/platform/shared/api';\n\nconst processDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.process.datapage.ProcessDefinitionDataPageQuery';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessDefinitionDataPageService extends DataPage {\n  constructor(private injector: Injector) {\n    super(injector, processDefinitionDataPageQuery);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { last } from 'lodash';\n\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IHttpGetParams, IHttpOptions, RX_BUNDLE } from '@helix/platform/shared/api';\n\nimport { IFieldDefinitionLight, IProcessDefinition } from './process-definition.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessDefinitionService {\n  constructor(private httpClient: HttpClient, private rxGuidService: RxGuidService) {}\n\n  get(processDefinitionName: string, options?: IHttpGetParams): Observable<IProcessDefinition> {\n    return this.httpClient.get<IProcessDefinition>(this.getUrl(processDefinitionName), options);\n  }\n\n  getNew(): Observable<IProcessDefinition> {\n    return of({\n      allowOverlay: false,\n      artifacts: [],\n      contextKeyParam: null,\n      description: '',\n      flowElements: [],\n      guid: this.rxGuidService.generate('rx-'),\n      inputParams: [],\n      isEnabled: true,\n      lastChangedBy: null,\n      lastUpdateTime: null,\n      layout: JSON.stringify({ cells: [] }),\n      localVariables: [],\n      localizableStrings: {},\n      name: '',\n      outputParams: [],\n      overlayDescriptor: null,\n      overlayGroupId: null,\n      owner: null,\n      permissions: [],\n      runAsUser: false,\n      scope: RX_BUNDLE.definitionScopeTypes.bundle,\n      synchronous: null\n    });\n  }\n\n  getServerActionModelType(actionTypeName: string): string {\n    return `rx.ProcessActions.${actionTypeName.replace(':', '.')}`;\n  }\n\n  getServerActionTypeName(modelType: string): string {\n    return last(modelType.split('.'));\n  }\n\n  update(processDefinition: IProcessDefinition, options?: IHttpOptions): Observable<any> {\n    return this.httpClient.put(this.getUrl(processDefinition.name), processDefinition, options);\n  }\n\n  getOutputParams(processDefinitionName: string, options?: IHttpGetParams): Observable<IFieldDefinitionLight[]> {\n    return this.httpClient.get<IFieldDefinitionLight[]>(\n      `/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/outputParams`,\n      options\n    );\n  }\n\n  getInputParams(processDefinitionName: string, options?: IHttpGetParams): Observable<IFieldDefinitionLight[]> {\n    return this.httpClient.get<IFieldDefinitionLight[]>(\n      `/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/inputParams`,\n      options\n    );\n  }\n\n  private getUrl(processDefinitionName?: string): string {\n    return processDefinitionName\n      ? `/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}`\n      : '/api/rx/application/process/processdefinition';\n  }\n}\n","import { KeyValueObject } from '@bmc-ux/adapt-angular';\n\nimport {\n  IAssignmentExpression,\n  IMultiInstanceLoopDefinition,\n  IOverlayDescriptor,\n  IPermissionOwnerId\n} from '@helix/platform/shared/api';\nimport { RecordFieldOption } from '@helix/platform/record/api';\n\nexport interface IDefinitionLight {\n  description: string;\n  lastChangedBy: string;\n  lastUpdateTime: string;\n  name: string;\n  overlayDescriptor: IOverlayDescriptor;\n  overlayGroupId: string;\n  owner: string;\n  scope: string;\n}\n\nexport interface IFieldDefinitionLight extends IDefinitionLight {\n  defaultValue: string;\n  fieldOption: RecordFieldOption;\n  fieldTypeName: string;\n  id: number;\n  resourceType: string;\n}\n\nexport interface IRecordInstanceFieldDefinitionLight extends IFieldDefinitionLight {\n  recordDefinitionName: string;\n  useSampleData: boolean;\n}\n\nexport interface ISelectionFieldDefinitionLight extends IFieldDefinitionLight {\n  optionNamesById: { [id: number]: string };\n}\n\nexport enum ListFieldDefinitionSubType {\n  Attachment = 11,\n  Character = 4\n}\n\nexport interface IListFieldDefinitionLight extends IFieldDefinitionLight {\n  subType: ListFieldDefinitionSubType;\n}\n\nexport interface IArtifact {\n  guid: string;\n  resourceType: string;\n}\n\nexport interface IProcessFlowElementDefinition extends IDefinitionLight {\n  guid: string;\n  resourceType: string;\n}\n\nexport interface IActivityDefinition extends IProcessFlowElementDefinition {\n  multiInstanceLoopDefinition: IMultiInstanceLoopDefinition;\n}\n\nexport interface IServiceTaskDefinition extends IActivityDefinition {\n  actionTypeName: string;\n  inputMap: IAssignmentExpression[];\n  outputMap: IAssignmentExpression[];\n  runAsUser: boolean | null;\n}\n\nexport interface IProcess {\n  artifacts: IArtifact[];\n  guid: string;\n  flowElements: Array<ISubProcessDefinition | Partial<IProcessFlowElementDefinition>>;\n  layout: string;\n}\n\nexport interface ISubProcessDefinition extends IActivityDefinition, IProcess {}\n\nexport interface IProcessDefinitionPermission {\n  type: 'EXECUTE' | 'READ';\n  ownerId: IPermissionOwnerId;\n}\n\nexport interface IProcessLocalizableStrings extends KeyValueObject<string> {}\n\nexport interface IProcessDefinition extends IDefinitionLight, IProcess {\n  allowOverlay: boolean;\n  contextKeyParam: string;\n  inputParams: IFieldDefinitionLight[];\n  isEnabled: boolean;\n  localizableStrings: IProcessLocalizableStrings;\n  localVariables: IFieldDefinitionLight[];\n  outputParams: IFieldDefinitionLight[];\n  permissions: IProcessDefinitionPermission[];\n  runAsUser: boolean;\n  synchronous: boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { forEach, isEmpty } from 'lodash';\n\nimport { IFieldDefinitionLight, IProcessDefinition } from './process-definition.types';\nimport { RxProcessDefinitionService } from './process-definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessDefinitionCacheService {\n  private consumers = new Set<Observable<any>>();\n  private processDefinitionCache: Map<string, Observable<IProcessDefinition>> = new Map();\n  private processDefinitionOutputParamCache: Map<string, Observable<IFieldDefinitionLight[]>> = new Map();\n\n  constructor(private rxProcessDefinitionService: RxProcessDefinitionService) {}\n\n  getProcessDefinition(processDefinitionName: string): Observable<IProcessDefinition> {\n    if (!this.processDefinitionCache.has(processDefinitionName)) {\n      const processDefinition$ = this.rxProcessDefinitionService\n        .get(processDefinitionName, {\n          headers: new HttpHeaders({ 'Design-Time': 'true' })\n        })\n        .pipe(shareReplay(1));\n\n      this.processDefinitionCache.set(processDefinitionName, processDefinition$);\n    }\n\n    return this.processDefinitionCache.get(processDefinitionName);\n  }\n\n  getOutputParams(processDefinitionName: string): Observable<IFieldDefinitionLight[]> {\n    if (!this.processDefinitionOutputParamCache.has(processDefinitionName)) {\n      const processDefinitionOutputParams$ = this.rxProcessDefinitionService\n        .getOutputParams(processDefinitionName, {\n          headers: new HttpHeaders({ 'Design-Time': 'true' })\n        })\n        .pipe(shareReplay(1));\n\n      this.processDefinitionOutputParamCache.set(processDefinitionName, processDefinitionOutputParams$);\n    }\n\n    return this.processDefinitionOutputParamCache.get(processDefinitionName);\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  clearCache(processDefinitionNames?: string[]): void {\n    if (processDefinitionNames) {\n      forEach(processDefinitionNames, (processDefinitionName) => {\n        this.processDefinitionCache.delete(processDefinitionName);\n        this.processDefinitionOutputParamCache.delete(processDefinitionName);\n      });\n    } else {\n      this.processDefinitionCache.clear();\n      this.processDefinitionOutputParamCache.clear();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { find, forEach, filter, transform, flatten } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementSearchService {\n  find(definition, predicate): any {\n    let processElement = this.findElementInDefinition(definition, predicate);\n\n    if (!processElement) {\n      processElement = find(this.flattenElements(definition), predicate);\n    }\n\n    return processElement;\n  }\n\n  findElementInDefinition(definition, predicate) {\n    return find(definition.flowElements, predicate) || find(definition.artifacts, predicate);\n  }\n\n  findOwner(definition, guid) {\n    const processElement = this.findElementInDefinition(definition, { guid: guid });\n    let result;\n\n    if (processElement) {\n      result = definition;\n    } else {\n      result = find(this.flattenElements(definition), (element) => {\n        return this.findElementInDefinition(element, { guid: guid });\n      });\n    }\n\n    return result;\n  }\n\n  findByGuid(definition, guid) {\n    return this.find(definition, { guid: guid });\n  }\n\n  filter(definition, predicate) {\n    return filter(this.flattenElements(definition), predicate);\n  }\n\n  forEach(definition, iteratee) {\n    return forEach(this.flattenElements(definition), iteratee);\n  }\n\n  flattenElements(definition): object[] {\n    return flatten(\n      transform(\n        [].concat(definition.flowElements || [], definition.artifacts || []),\n        (result: object[], element: any) => {\n          result.push(element);\n\n          if (element.flowElements) {\n            result.push(this.flattenElements(element));\n          }\n        },\n        []\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { filter, find, forEach, map as _map, pick } from 'lodash';\nimport {\n  IDesignerStencilElement,\n  RxActionTypeUtilsService,\n  RxBundleCacheService,\n  RxDefinitionNameService,\n  RxGlobalCacheService\n} from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\nimport { RX_PROCESS_DEFINITION } from './process-definition.constant';\nimport { ElementVisibilityOptions, ICallActivityElement } from './process-element.types';\nimport { RxCallActivityRegistryService } from './call-activity-registry.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementsService {\n  constructor(\n    private rxActionTypeUtilsService: RxActionTypeUtilsService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxCallActivityRegistryService: RxCallActivityRegistryService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxStringService: RxStringService\n  ) {}\n\n  getActionElements(actionResourceType: string): Observable<IDesignerStencilElement[]> {\n    return forkJoin([\n      this.rxBundleCacheService.getActionTypes(),\n      this.rxGlobalCacheService.getBundleDescriptors()\n    ]).pipe(\n      map(([actionTypes, bundleDescriptors]) => {\n        return _map(actionTypes, (actionType) => {\n          return {\n            group:\n              this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) ||\n              'Platform actions',\n            label:\n              actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n            value: {\n              actionTypeName: actionType.actionTypeName,\n              resourceType: actionResourceType\n            }\n          };\n        });\n      })\n    );\n  }\n\n  getCallActivityElements(): Observable<IDesignerStencilElement[]> {\n    return forkJoin([this.rxGlobalCacheService.getBundleDescriptors(), this.getVisibleCallActivities()]).pipe(\n      map(([bundleDescriptors, visibleCallActivities]) => {\n        const callActivityElements = [];\n\n        forEach(visibleCallActivities, (visibleCallActivity) => {\n          const bundle = find(bundleDescriptors, {\n            id: this.rxDefinitionNameService.getBundleId(visibleCallActivity.processDefinitionName)\n          });\n\n          if (bundle) {\n            callActivityElements.push({\n              group: bundle.friendlyName,\n              label:\n                visibleCallActivity.displayName ||\n                this.rxStringService.prettify(\n                  this.rxDefinitionNameService.getDisplayName(visibleCallActivity.processDefinitionName)\n                ),\n              value: {\n                resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.callActivity,\n                calledProcessDefinitionName: visibleCallActivity.processDefinitionName\n              }\n            });\n          }\n        });\n\n        return callActivityElements;\n      })\n    );\n  }\n\n  getProcessElements(): Observable<IDesignerStencilElement[]>[] {\n    return [\n      this.getActionElements(RX_PROCESS_DEFINITION.processElementResourceTypes.processAction),\n      this.getCallActivityElements(),\n      this.getStandardProcessElements()\n    ];\n  }\n\n  getStandardProcessElements(): Observable<IDesignerStencilElement[]> {\n    return of(\n      _map(RX_PROCESS_DEFINITION.standardProcessElements, (element) => {\n        let label;\n\n        if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.processAction) {\n          label = this.rxActionTypeUtilsService.prettifyActionTypeName(element.actionTypeName);\n        } else if (element.eventResourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent) {\n          const errorEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent\n            ];\n\n          const boundaryEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent\n            ];\n\n          const endEventLabel =\n            RX_PROCESS_DEFINITION.processElementNamesByResourceType[\n              RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent\n            ];\n\n          label =\n            element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent\n              ? `${errorEventLabel} ${boundaryEventLabel}`\n              : `${errorEventLabel} ${endEventLabel}`;\n        } else if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent) {\n          label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.eventResourceType];\n        } else {\n          label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.resourceType];\n        }\n\n        return {\n          group: element.group,\n          label: label,\n          value: pick(element, RX_PROCESS_DEFINITION.processElementConfigurationProperties)\n        };\n      })\n    );\n  }\n\n  getVisibleCallActivities(): Observable<ICallActivityElement[]> {\n    return of(\n      filter(Array.from(this.rxCallActivityRegistryService.getRegisteredCallActivities()), {\n        visibility: ElementVisibilityOptions.Always\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IProcessInstance, IProcessInstanceLog } from './process-instance.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessInstanceService {\n  constructor(private httpClient: HttpClient) {}\n\n  get(processDefinitionName: string, processInstanceId: string): Observable<IProcessInstance> {\n    return this.httpClient.get<IProcessInstance>(\n      `/api/rx/application/process/processinstance/${encodeURIComponent(processDefinitionName)}/${processInstanceId}`\n    );\n  }\n\n  getLog(processDefinitionName: string, processInstanceId: string): Observable<IProcessInstanceLog> {\n    return this.httpClient.get<IProcessInstanceLog>(\n      `/api/rx/application/process/processinstance/log/${encodeURIComponent(\n        processDefinitionName\n      )}/${processInstanceId}/view`\n    );\n  }\n\n  downloadLog(processDefinitionName: string, processInstanceId: string): Observable<Blob> {\n    return this.httpClient.get(\n      `/api/rx/application/process/processinstance/log/${encodeURIComponent(\n        processDefinitionName\n      )}/${processInstanceId}/download`,\n      {\n        responseType: 'blob'\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IPlainObject, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessInstanceCommandsService {\n  private startProcessCommand = this.rxCommandFactoryService.forResourceType(\n    'com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand'\n  );\n\n  constructor(private rxCommandFactoryService: RxCommandFactoryService) {}\n\n  start(processDefinitionName: string, processInputValues: IPlainObject): Observable<any> {\n    return this.startProcessCommand.execute(\n      {\n        processDefinitionName,\n        processInputValues\n      },\n      {\n        observe: 'response',\n        responseType: 'text'\n      }\n    );\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { DataPage } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessInstanceDataPageService extends DataPage {\n  constructor(private injector: Injector) {\n    super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceDataPageQuery');\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { DataPage } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessInstanceCountsByStatusDataPageService extends DataPage {\n  constructor(private injector: Injector) {\n    super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceCountsByStatusDataPageQuery');\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map"],"mappings":";;;;;;;;;;;;;MAoBa,8BAA8B;IAezC,YACU,qBAA4C,EAC5C,sBAA8C,EAC9C,oBAA0C,EAC1C,WAAwB,EACxB,oBAA0C,EAC1C,gBAAkC;QALlC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,gBAAW,GAAX,WAAW,CAAa;QACxB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,qBAAgB,GAAhB,gBAAgB,CAAkB;QApBpC,qBAAgB,GAAmC,IAAI,CAAC;QACxD,4BAAuB,GAAG,IAAI,aAAa,CAAiC,CAAC,CAAC,CAAC;QAEvF,sBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC;QAExD,8CAAyC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC7E,GAAG,CAAC,CAAC,6BAA6B,KAChC,6BAA6B,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,6BAA6B,CAAC,GAAG,EAAE,CACxG,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,0BAAqB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;KASnD;IAEJ,KAAK;QACH,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;KAChC;IAED,uBAAuB;QACrB,OAAO,aAAa,CAAC;YACnB,IAAI,CAAC,yCAAyC,CAAC,IAAI,CACjD,GAAG,CAAC,CAAC,6BAA6B,KAAK,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC,CACrF;SACF,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,gCAAgC,CAAC;YACrC,OAAO;gBACL;oBACE,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE;wBACR;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8DAA8D,CAAC;4BACpG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,QAAQ;yBACrB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,mEAAmE,CACpE;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,aAAa;yBAC1B;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,mEAAmE,CACpE;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,YAAY;yBACzB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,gEAAgE,CAAC;4BACtG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,UAAU;yBACvB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,+DAA+D,CAAC;4BACrG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,SAAS;yBACtB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,qEAAqE,CACtE;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,aAAa;yBAC1B;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8DAA8D,CAAC;4BACpG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,QAAQ;yBACrB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8DAA8D,CAAC;4BACpG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,QAAQ;yBACrB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,qEAAqE,CACtE;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,UAAU;yBACvB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,kEAAkE,CACnE;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,WAAW;yBACxB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,0DAA0D,CAAC;4BAChG,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,WAAW;yBACxB;wBACD;4BACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,gFAAgF,CACjF;4BACD,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,wBAAwB;yBACrC;wBACD;4BACE,KAAK,EAAE,MAAM;4BACb,IAAI,EAAE,eAAe;4BACrB,UAAU,EAAE,QAAQ;4BACpB,MAAM,EAAE,IAAI;yBACb;qBACF;iBACF;gBACD;oBACE,KAAK,EAAE,WAAW;oBAClB,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,MAAM,CACd,IAAI,CAAC,qBAAqB,CAAC,+BAA+B,CACxD,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,EAAE,CACzD,EACD,EAAE,KAAK,EAAE,oBAAoB,EAAE,CAChC;iBACF;gBACD;oBACE,KAAK,EAAE,YAAY;oBACnB,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,gCAAgC;iBAC3C;aACF,CAAC;SACH,CAAC,CACH,CAAC;KACH;IAED,uCAAuC,CACrC,IAAY,EACZ,4BAA+D;QAE/D,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,oBAAoB;YACxE,IAAI,CAAC,mBAAmB,CACtB,OAAO,CAAC,oBAAoB,CAAC;kBACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC;kDAC9B,IAAI,CAAC,gBAAgB,KAAE,CAAC,IAAI,GAAG,oBAAoB,GAAE,CAC/D,CAAC;SACH,CAAC,CAAC;KACJ;IAEO,mBAAmB,CAAC,KAAqC;QAC/D,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAE9B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC1D;;2HA5JU,8BAA8B;+HAA9B,8BAA8B,cAF7B,MAAM;2FAEP,8BAA8B;kBAH1C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;ACnBD,MAAM,sBAAsB,GAAG;IAC7B,SAAS,EAAE,WAAW;IACtB,UAAU,EAAE,YAAY;IACxB,SAAS,EAAE,iBAAiB;IAC5B,QAAQ,EAAE,gBAAgB;CAC3B,CAAC;AAEF,MAAM,2BAA2B,GAAG;IAClC,aAAa,EAAE,kEAAkE;IACjF,YAAY,EAAE,iEAAiE;IAC/E,QAAQ,EAAE,6DAA6D;IACvE,UAAU,EAAE,+DAA+D;IAC3E,gBAAgB,EAAE,qEAAqE;IACvF,eAAe,EAAE,oEAAoE;IACrF,aAAa,EAAE,gEAAgE;IAC/E,WAAW,EAAE,gEAAgE;IAC7E,YAAY,EAAE,iEAAiE;IAC/E,UAAU,EAAE,+DAA+D;IAC3E,UAAU,EAAE,+DAA+D;IAC3E,cAAc,EAAE,yDAAyD;IACzE,yBAAyB,EAAE,oEAAoE;IAC/F,UAAU,EAAE,+DAA+D;IAC3E,QAAQ,EAAE,6DAA6D;CACxE,CAAC;AAEF,MAAM,iCAAiC,GAAG;;IAExC,CAAC,2BAA2B,CAAC,aAAa,GAAG,UAAU;IACvD,CAAC,2BAA2B,CAAC,QAAQ,GAAG,KAAK;IAC7C,CAAC,2BAA2B,CAAC,UAAU,GAAG,OAAO;IACjD,CAAC,2BAA2B,CAAC,UAAU,GAAG,OAAO;IACjD,CAAC,2BAA2B,CAAC,UAAU,GAAG,OAAO;;IAGjD,CAAC,2BAA2B,CAAC,YAAY,GAAG,eAAe;IAC3D,CAAC,2BAA2B,CAAC,gBAAgB,GAAG,WAAW;IAC3D,CAAC,2BAA2B,CAAC,eAAe,GAAG,UAAU;IACzD,CAAC,2BAA2B,CAAC,WAAW,GAAG,cAAc;IACzD,CAAC,2BAA2B,CAAC,UAAU,GAAG,aAAa;IACvD,CAAC,2BAA2B,CAAC,cAAc,GAAG,YAAY;IAC1D,CAAC,2BAA2B,CAAC,QAAQ,GAAG,WAAW;;IAGnD,mEAAmE,EAAE,gBAAgB;IACrF,mEAAmE,EAAE,gBAAgB;IACrF,kEAAkE,EAAE,eAAe;IACnF,6BAA6B,EAAE,eAAe;CAC/C,CAAC;AAEF,MAAM,4BAA4B,GAAG;IACnC,UAAU,EAAE;QACV,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE,CAAC;KACZ;IACD,WAAW,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,QAAQ,EAAE,CAAC;KACZ;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,CAAC;KACZ;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE,CAAC;KACZ;IACD,eAAe,EAAE;QACf,IAAI,EAAE,kBAAkB;QACxB,QAAQ,EAAE,CAAC;KACZ;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,CAAC;KACZ;CACF,CAAC;AAEF,MAAM,uBAAuB,GAAG;IAC9B;QACE,KAAK,EAAE,4BAA4B,CAAC,WAAW,CAAC,IAAI;QACpD,YAAY,EAAE,2BAA2B,CAAC,cAAc;KACzD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,IAAI;QAC/C,YAAY,EAAE,2BAA2B,CAAC,UAAU;KACrD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,IAAI;QAC/C,YAAY,EAAE,2BAA2B,CAAC,QAAQ;KACnD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,IAAI;QAC/C,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,iBAAiB,EAAE,2BAA2B,CAAC,UAAU;KAC1D;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,IAAI;QAC/C,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,iBAAiB,EAAE,2BAA2B,CAAC,UAAU;KAC1D;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,MAAM,CAAC,IAAI;QAC/C,YAAY,EAAE,2BAA2B,CAAC,QAAQ;QAClD,iBAAiB,EAAE,2BAA2B,CAAC,UAAU;KAC1D;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,YAAY;KACvD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,cAAc,EAAE,sBAAsB,CAAC,SAAS;KACjD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,WAAW;KACtD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,UAAU;KACrD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,QAAQ;KACnD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,cAAc,EAAE,sBAAsB,CAAC,UAAU;KAClD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,cAAc,EAAE,sBAAsB,CAAC,SAAS;KACjD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,UAAU,CAAC,IAAI;QACnD,YAAY,EAAE,2BAA2B,CAAC,aAAa;QACvD,cAAc,EAAE,sBAAsB,CAAC,QAAQ;KAChD;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,QAAQ,CAAC,IAAI;QACjD,YAAY,EAAE,2BAA2B,CAAC,eAAe;KAC1D;IACD;QACE,KAAK,EAAE,4BAA4B,CAAC,QAAQ,CAAC,IAAI;QACjD,YAAY,EAAE,2BAA2B,CAAC,gBAAgB;KAC3D;CACF,CAAC;MAEW,qBAAqB,GAAG;IACnC,0BAA0B,EAAE;QAC1B,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,OAAO;KACpB;IAED,iCAAiC;IACjC,2BAA2B;IAE3B,mBAAmB,EAAE;QACnB,QAAQ,EAAE,aAAa;QACvB,aAAa,EAAE,kBAAkB;QACjC,UAAU,EAAE,eAAe;KAC5B;IAED,oBAAoB,EAAE;QACpB,4BAA4B,CAAC,UAAU;QACvC,4BAA4B,CAAC,WAAW;QACxC,4BAA4B,CAAC,MAAM;QACnC,4BAA4B,CAAC,QAAQ;QACrC,4BAA4B,CAAC,eAAe;KAC7C;IAED,uBAAuB;IACvB,4BAA4B;IAE5B,qCAAqC,EAAE;QACrC,gBAAgB;QAChB,6BAA6B;QAC7B,mBAAmB;QACnB,cAAc;KACf;IAED,uBAAuB,EAAE;QACvB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,CAAC;KACb;IAED,oBAAoB,EAAE;QACpB,MAAM,EAAE,yEAAyE;QACjF,OAAO,EAAE,0DAA0D;KACpE;IAED,SAAS,EAAE;QACT,aAAa,EAAE;YACb,eAAe,EAAE,KAAK;YACtB,UAAU,EAAE,eAAe;SAC5B;QACD,WAAW,EAAE;YACX,eAAe,EAAE,IAAI;YACrB,UAAU,EAAE,aAAa;SAC1B;QACD,kBAAkB,EAAE;YAClB,eAAe,EAAE,IAAI;YACrB,UAAU,EAAE,oBAAoB;SACjC;KACF;;;MCjMU,+BAA+B;IAG1C,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;QAFtC,uBAAkB,GAA2C,IAAI,GAAG,EAAE,CAAC;KAE7B;IAElD,GAAG,CAAC,IAAY;;QACd,QACE,MAAA,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,mCACjC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,CAAC,EACpF;KACH;IAED,MAAM;QACJ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC;KACrD;IAED,QAAQ,CAAC,UAAqC;QAC5C,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAChD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,mBAAmB,UAAU,CAAC,IAAI,yBAAyB,CAAC,CAAC;SACxF;aAAM;YACL,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YACxF,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,aAAa,EAAE,UAAU,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAEhG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SAC1D;KACF;;4HAzBU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCLY,6BAA6B;IAH1C;QAIU,4BAAuB,GAAyC,IAAI,GAAG,EAAE,CAAC;KAWnF;IATC,2BAA2B;QACzB,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC;KAC9C;IAED,QAAQ,CAAC,GAAG,uBAAkD;QAC5D,uBAAuB,CAAC,OAAO,CAAC,CAAC,UAAU;YACzC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAU,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;SAChF,CAAC,CAAC;KACJ;;0HAXU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;ICLW;AAAZ,WAAY,wBAAwB;IAClC,6CAAiB,CAAA;IACjB,2CAAe,CAAA;AACjB,CAAC,EAHW,wBAAwB,KAAxB,wBAAwB;;MCQvB,kBAAkB;IAC7B,YAAoB,6BAA4D;QAA5D,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC9E,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC;YAC1C,WAAW,EAAE,kBAAkB;YAC/B,qBAAqB,EAAE,+CAA+C;YACtE,8BAA8B,EAAE,sCAAsC;YACtE,UAAU,EAAE,wBAAwB,CAAC,MAAM;SAC5C,CAAC,CAAC;KACJ;;+GARU,kBAAkB;gHAAlB,kBAAkB,YAFnB,YAAY;gHAEX,kBAAkB,YAFpB,CAAC,YAAY,CAAC;2FAEZ,kBAAkB;kBAH9B,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,CAAC;iBACxB;;;ACJD,MAAM,8BAA8B,GAAG,8EAA8E,CAAC;MAKzG,kCAAmC,SAAQ,QAAQ;IAC9D,YAAoB,QAAkB;QACpC,KAAK,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;QAD9B,aAAQ,GAAR,QAAQ,CAAU;KAErC;;+HAHU,kCAAkC;mIAAlC,kCAAkC,cAFjC,MAAM;2FAEP,kCAAkC;kBAH9C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCMY,0BAA0B;IACrC,YAAoB,UAAsB,EAAU,aAA4B;QAA5D,eAAU,GAAV,UAAU,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAe;KAAI;IAEpF,GAAG,CAAC,qBAA6B,EAAE,OAAwB;QACzD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAqB,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,OAAO,CAAC,CAAC;KAC7F;IAED,MAAM;QACJ,OAAO,EAAE,CAAC;YACR,YAAY,EAAE,KAAK;YACnB,SAAS,EAAE,EAAE;YACb,eAAe,EAAE,IAAI;YACrB,WAAW,EAAE,EAAE;YACf,YAAY,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC;YACxC,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,IAAI;YACnB,cAAc,EAAE,IAAI;YACpB,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;YACrC,cAAc,EAAE,EAAE;YAClB,kBAAkB,EAAE,EAAE;YACtB,IAAI,EAAE,EAAE;YACR,YAAY,EAAE,EAAE;YAChB,iBAAiB,EAAE,IAAI;YACvB,cAAc,EAAE,IAAI;YACpB,KAAK,EAAE,IAAI;YACX,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,KAAK;YAChB,KAAK,EAAE,SAAS,CAAC,oBAAoB,CAAC,MAAM;YAC5C,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;KACJ;IAED,wBAAwB,CAAC,cAAsB;QAC7C,OAAO,qBAAqB,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;KAChE;IAED,uBAAuB,CAAC,SAAiB;QACvC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACnC;IAED,MAAM,CAAC,iBAAqC,EAAE,OAAsB;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;KAC7F;IAED,eAAe,CAAC,qBAA6B,EAAE,OAAwB;QACrE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,iDAAiD,kBAAkB,CAAC,qBAAqB,CAAC,eAAe,EACzG,OAAO,CACR,CAAC;KACH;IAED,cAAc,CAAC,qBAA6B,EAAE,OAAwB;QACpE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,iDAAiD,kBAAkB,CAAC,qBAAqB,CAAC,cAAc,EACxG,OAAO,CACR,CAAC;KACH;IAEO,MAAM,CAAC,qBAA8B;QAC3C,OAAO,qBAAqB;cACxB,iDAAiD,kBAAkB,CAAC,qBAAqB,CAAC,EAAE;cAC5F,+CAA+C,CAAC;KACrD;;uHAhEU,0BAA0B;2HAA1B,0BAA0B,cAFzB,MAAM;2FAEP,0BAA0B;kBAHtC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;IC0BW;AAAZ,WAAY,0BAA0B;IACpC,wFAAe,CAAA;IACf,qFAAa,CAAA;AACf,CAAC,EAHW,0BAA0B,KAA1B,0BAA0B;;MC1BzB,+BAA+B;IAK1C,YAAoB,0BAAsD;QAAtD,+BAA0B,GAA1B,0BAA0B,CAA4B;QAJlE,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;QACvC,2BAAsB,GAAgD,IAAI,GAAG,EAAE,CAAC;QAChF,sCAAiC,GAAqD,IAAI,GAAG,EAAE,CAAC;KAE1B;IAE9E,oBAAoB,CAAC,qBAA6B;QAChD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE;YAC3D,MAAM,kBAAkB,GAAG,IAAI,CAAC,0BAA0B;iBACvD,GAAG,CAAC,qBAAqB,EAAE;gBAC1B,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC;aACpD,CAAC;iBACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,EAAE,kBAAkB,CAAC,CAAC;SAC5E;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;KAC/D;IAED,eAAe,CAAC,qBAA6B;QAC3C,IAAI,CAAC,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,CAAC,EAAE;YACtE,MAAM,8BAA8B,GAAG,IAAI,CAAC,0BAA0B;iBACnE,eAAe,CAAC,qBAAqB,EAAE;gBACtC,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC;aACpD,CAAC;iBACD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAExB,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,EAAE,8BAA8B,CAAC,CAAC;SACnG;QAED,OAAO,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;KAC1E;IAED,gBAAgB,CAAC,gBAAiC;QAChD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAgB,CAAC,SAAS,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;SACF,CAAC,CAAC;KACJ;IAED,UAAU,CAAC,sBAAiC;QAC1C,IAAI,sBAAsB,EAAE;YAC1B,OAAO,CAAC,sBAAsB,EAAE,CAAC,qBAAqB;gBACpD,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;gBAC1D,IAAI,CAAC,iCAAiC,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;aACtE,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;YACpC,IAAI,CAAC,iCAAiC,CAAC,KAAK,EAAE,CAAC;SAChD;KACF;;4HAzDU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCLY,6BAA6B;IACxC,IAAI,CAAC,UAAU,EAAE,SAAS;QACxB,IAAI,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAEzE,IAAI,CAAC,cAAc,EAAE;YACnB,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;SACpE;QAED,OAAO,cAAc,CAAC;KACvB;IAED,uBAAuB,CAAC,UAAU,EAAE,SAAS;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;KAC1F;IAED,SAAS,CAAC,UAAU,EAAE,IAAI;QACxB,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAChF,IAAI,MAAM,CAAC;QAEX,IAAI,cAAc,EAAE;YAClB,MAAM,GAAG,UAAU,CAAC;SACrB;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO;gBACtD,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;aAC9D,CAAC,CAAC;SACJ;QAED,OAAO,MAAM,CAAC;KACf;IAED,UAAU,CAAC,UAAU,EAAE,IAAI;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;KAC9C;IAED,MAAM,CAAC,UAAU,EAAE,SAAS;QAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;KAC5D;IAED,OAAO,CAAC,UAAU,EAAE,QAAQ;QAC1B,OAAO,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;KAC5D;IAED,eAAe,CAAC,UAAU;QACxB,OAAO,OAAO,CACZ,SAAS,CACP,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,IAAI,EAAE,EAAE,UAAU,CAAC,SAAS,IAAI,EAAE,CAAC,EACpE,CAAC,MAAgB,EAAE,OAAY;YAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAErB,IAAI,OAAO,CAAC,YAAY,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;aAC5C;SACF,EACD,EAAE,CACH,CACF,CAAC;KACH;;0HAxDU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCcY,wBAAwB;IACnC,YACU,wBAAkD,EAClD,oBAA0C,EAC1C,6BAA4D,EAC5D,uBAAgD,EAChD,oBAA0C,EAC1C,eAAgC;QALhC,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,oBAAe,GAAf,eAAe,CAAiB;KACtC;IAEJ,iBAAiB,CAAC,kBAA0B;QAC1C,OAAO,QAAQ,CAAC;YACd,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE;YAC1C,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE;SACjD,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,iBAAiB,CAAC;YACnC,OAAOA,KAAI,CAAC,WAAW,EAAE,CAAC,UAAU;gBAClC,OAAO;oBACL,KAAK,EACH,IAAI,CAAC,wBAAwB,CAAC,+BAA+B,CAAC,iBAAiB,EAAE,UAAU,CAAC;wBAC5F,kBAAkB;oBACpB,KAAK,EACH,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,UAAU,CAAC,cAAc,CAAC;oBAC3G,KAAK,EAAE;wBACL,cAAc,EAAE,UAAU,CAAC,cAAc;wBACzC,YAAY,EAAE,kBAAkB;qBACjC;iBACF,CAAC;aACH,CAAC,CAAC;SACJ,CAAC,CACH,CAAC;KACH;IAED,uBAAuB;QACrB,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC,IAAI,CACvG,GAAG,CAAC,CAAC,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;YAC7C,MAAM,oBAAoB,GAAG,EAAE,CAAC;YAEhC,OAAO,CAAC,qBAAqB,EAAE,CAAC,mBAAmB;gBACjD,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE;oBACrC,EAAE,EAAE,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,mBAAmB,CAAC,qBAAqB,CAAC;iBACxF,CAAC,CAAC;gBAEH,IAAI,MAAM,EAAE;oBACV,oBAAoB,CAAC,IAAI,CAAC;wBACxB,KAAK,EAAE,MAAM,CAAC,YAAY;wBAC1B,KAAK,EACH,mBAAmB,CAAC,WAAW;4BAC/B,IAAI,CAAC,eAAe,CAAC,QAAQ,CAC3B,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CACvF;wBACH,KAAK,EAAE;4BACL,YAAY,EAAE,qBAAqB,CAAC,2BAA2B,CAAC,YAAY;4BAC5E,2BAA2B,EAAE,mBAAmB,CAAC,qBAAqB;yBACvE;qBACF,CAAC,CAAC;iBACJ;aACF,CAAC,CAAC;YAEH,OAAO,oBAAoB,CAAC;SAC7B,CAAC,CACH,CAAC;KACH;IAED,kBAAkB;QAChB,OAAO;YACL,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,2BAA2B,CAAC,aAAa,CAAC;YACvF,IAAI,CAAC,uBAAuB,EAAE;YAC9B,IAAI,CAAC,0BAA0B,EAAE;SAClC,CAAC;KACH;IAED,0BAA0B;QACxB,OAAO,EAAE,CACPA,KAAI,CAAC,qBAAqB,CAAC,uBAAuB,EAAE,CAAC,OAAO;YAC1D,IAAI,KAAK,CAAC;YAEV,IAAI,OAAO,CAAC,YAAY,KAAK,qBAAqB,CAAC,2BAA2B,CAAC,aAAa,EAAE;gBAC5F,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aACtF;iBAAM,IAAI,OAAO,CAAC,iBAAiB,KAAK,qBAAqB,CAAC,2BAA2B,CAAC,UAAU,EAAE;gBACrG,MAAM,eAAe,GACnB,qBAAqB,CAAC,iCAAiC,CACrD,qBAAqB,CAAC,2BAA2B,CAAC,UAAU,CAC7D,CAAC;gBAEJ,MAAM,kBAAkB,GACtB,qBAAqB,CAAC,iCAAiC,CACrD,qBAAqB,CAAC,2BAA2B,CAAC,aAAa,CAChE,CAAC;gBAEJ,MAAM,aAAa,GACjB,qBAAqB,CAAC,iCAAiC,CACrD,qBAAqB,CAAC,2BAA2B,CAAC,QAAQ,CAC3D,CAAC;gBAEJ,KAAK;oBACH,OAAO,CAAC,YAAY,KAAK,qBAAqB,CAAC,2BAA2B,CAAC,aAAa;0BACpF,GAAG,eAAe,IAAI,kBAAkB,EAAE;0BAC1C,GAAG,eAAe,IAAI,aAAa,EAAE,CAAC;aAC7C;iBAAM,IAAI,OAAO,CAAC,YAAY,KAAK,qBAAqB,CAAC,2BAA2B,CAAC,aAAa,EAAE;gBACnG,KAAK,GAAG,qBAAqB,CAAC,iCAAiC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;aAC5F;iBAAM;gBACL,KAAK,GAAG,qBAAqB,CAAC,iCAAiC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aACvF;YAED,OAAO;gBACL,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,KAAK,EAAE,KAAK;gBACZ,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,qBAAqB,CAAC,qCAAqC,CAAC;aAClF,CAAC;SACH,CAAC,CACH,CAAC;KACH;IAED,wBAAwB;QACtB,OAAO,EAAE,CACP,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,2BAA2B,EAAE,CAAC,EAAE;YACnF,UAAU,EAAE,wBAAwB,CAAC,MAAM;SAC5C,CAAC,CACH,CAAC;KACH;;qHAxHU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCVY,wBAAwB;IACnC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;KAAI;IAE9C,GAAG,CAAC,qBAA6B,EAAE,iBAAyB;QAC1D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,+CAA+C,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,iBAAiB,EAAE,CAChH,CAAC;KACH;IAED,MAAM,CAAC,qBAA6B,EAAE,iBAAyB;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,mDAAmD,kBAAkB,CACnE,qBAAqB,CACtB,IAAI,iBAAiB,OAAO,CAC9B,CAAC;KACH;IAED,WAAW,CAAC,qBAA6B,EAAE,iBAAyB;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,mDAAmD,kBAAkB,CACnE,qBAAqB,CACtB,IAAI,iBAAiB,WAAW,EACjC;YACE,YAAY,EAAE,MAAM;SACrB,CACF,CAAC;KACH;;qHA1BU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCAY,gCAAgC;IAK3C,YAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAJ5D,wBAAmB,GAAG,IAAI,CAAC,uBAAuB,CAAC,eAAe,CACxE,0EAA0E,CAC3E,CAAC;KAEsE;IAExE,KAAK,CAAC,qBAA6B,EAAE,kBAAgC;QACnE,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,CACrC;YACE,qBAAqB;YACrB,kBAAkB;SACnB,EACD;YACE,OAAO,EAAE,UAAU;YACnB,YAAY,EAAE,MAAM;SACrB,CACF,CAAC;KACH;;6HAlBU,gCAAgC;iIAAhC,gCAAgC,cAF/B,MAAM;2FAEP,gCAAgC;kBAH5C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCAY,gCAAiC,SAAQ,QAAQ;IAC5D,YAAoB,QAAkB;QACpC,KAAK,CAAC,QAAQ,EAAE,4EAA4E,CAAC,CAAC;QAD5E,aAAQ,GAAR,QAAQ,CAAU;KAErC;;6HAHU,gCAAgC;iIAAhC,gCAAgC,cAF/B,MAAM;2FAEP,gCAAgC;kBAH5C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;MCCY,8CAA+C,SAAQ,QAAQ;IAC1E,YAAoB,QAAkB;QACpC,KAAK,CAAC,QAAQ,EAAE,0FAA0F,CAAC,CAAC;QAD1F,aAAQ,GAAR,QAAQ,CAAU;KAErC;;2IAHU,8CAA8C;+IAA9C,8CAA8C,cAF7C,MAAM;2FAEP,8CAA8C;kBAH1D,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;ACLD;;;;;;"}