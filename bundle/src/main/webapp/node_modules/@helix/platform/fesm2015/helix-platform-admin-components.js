import * as i8 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Component, Optional, Input, Output, ViewChildren, HostBinding, ViewChild, NgModule, ErrorHandler, Pipe, ChangeDetectionStrategy } from '@angular/core';
import * as i1$3 from '@angular/forms';
import { Validators, FormsModule, ReactiveFormsModule, NG_VALUE_ACCESSOR, NgModel, NgForm, FormGroup, FormControl, FormBuilder } from '@angular/forms';
import * as i1$1 from '@bmc-ux/adapt-angular';
import { DismissReasons, TreeWrap, AdaptButtonModule, AdaptRxSelectModule, AdaptRxTextareaModule, AdaptAlertModule, AdaptPopoverDirective, AdaptHighlightModule, AdaptRxTextfieldModule, AdaptTabsModule, AdaptRxLabelModule, AdaptDropdownModule, AdaptRxSearchModule, AdaptTreeModule, AdaptRxCounterModule, AdaptPopoverModule, AdaptTooltipModule, AdaptAccordionModule, AdaptRxRadiobuttonModule, AdaptBusyModule, AdaptRxCheckboxModule, AdaptRxValidatorsModule, AdaptEmptyStateModule, AdaptRxSwitchModule, AdaptIconModule, RxDatetimePickerMode, AdaptModalModule, AdaptRxDatetimeModule, AdaptRxListBuilderModule, LoaderType, UploaderMode, AdaptDockedPanelModule, AdaptRxUploaderModule, AdaptRxFormControlModule, AdaptBadgeModule, AdaptAdvancedFilteringModule, AdaptSubnavModule, ActiveModalRef, AdaptRxSelectEditableModule, AdaptValidators, AdaptRxTypeaheadModule, AdaptMetatagModule, AdaptTagModule, AdaptTruncatePipeModule, AdaptSidebarModule } from '@bmc-ux/adapt-angular';
import * as i4$1 from '@helix/platform/shared/components';
import { TextFormControlComponent, AttachmentFormControlComponent, DateFormControlComponent, CounterFormControlComponent, ColorPickerFormControlComponent, BooleanFormControlComponent, SelectFormControlComponent, FormBuilderComponent, AdminSettingsModule, RxDefinitionPickerType, ValueAccessor, RxDefinitionPickerScope, ExpressionFormControlModule, RxDefinitionPickerModule, RxSelectWithPaginationModule, RenameDefinitionModalComponent, RenameDefinitionModalModule, GroupButtonFormControlModule, RxWizardModule, RxFormBuilderModule } from '@helix/platform/shared/components';
import * as i1 from '@helix/platform/ui-kit';
import { RX_MODAL, RxModalClass, RxBusyIndicatorModule, RxDirectivesModule, ConnectionTestStatus, RxConnectionTesterModule, RxNameValuePairsEditorModule } from '@helix/platform/ui-kit';
import * as i4$4 from '@helix/platform/view/actions';
import { ViewActionsModule } from '@helix/platform/view/actions';
import * as i7 from '@helix/platform/view/components';
import { RecordGridColumnAlignment, RowSelectionMode, RecordGridComponent, RecordGridModule, RecordGridFilterMode, RecordGridDesignModule, RecordGridFilterSelectControlModule, ColumnSortDirection, ViewComponentsModule } from '@helix/platform/view/components';
import * as i4$2 from '@helix/platform/view/runtime';
import { BaseViewComponent, RuntimeViewModule } from '@helix/platform/view/runtime';
import * as i4 from '@ngx-translate/core';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { map, cloneDeep, noop, last, some, forEach, filter, findIndex, find, isNull, every, chain, isEmpty, flatten, uniqueId, head, trim, flow, isUndefined, groupBy, remove, uniqBy, sumBy, take as take$1, join, get, omit, reject, sortBy, includes, values, toString, parseInt as parseInt$1, merge, inRange, add, pullAt, compact, assign, reduce, mapValues, constant, defaults, split, keys, set, isArray, isEqual, transform, toLower, forIn, pick, has, castArray, flatMap, findKey, pull, isFunction, first, toNumber, isNil, isObject } from 'lodash';
import { of, Observable, forkJoin, throwError, NEVER, ReplaySubject, Subject, BehaviorSubject, combineLatest, EMPTY, Subscription, noop as noop$1 } from 'rxjs';
import * as i2 from '@helix/platform/shared/api';
import { RX_APPLICATION, RxComponentCanDeactivateGuard, RxExpressionConfigurator, RxDefinitionNameService, DataPage, ExpressionOperatorGroup, JustificationRequirement, RxDefinitionModule, RX_RESOURCE_URLS, RX_OVERLAY, MachineLearningProviderNames, RX_CHATBOT, RxNotificationService, RX_ADMINISTRATION } from '@helix/platform/shared/api';
import * as i3 from '@helix/platform/utils';
import { RxTreeService, RX_SIZE_UNITS, RxJsonModule, RxUniqueValidatorModule, RxFileService } from '@helix/platform/utils';
import { switchMap, map as map$1, tap, defaultIfEmpty, catchError, filter as filter$1, take, takeUntil, pluck, shareReplay, distinctUntilChanged, mergeMap, finalize, startWith, withLatestFrom, debounceTime } from 'rxjs/operators';
import * as i3$2 from '@helix/platform/record/api';
import { RX_RECORD_DEFINITION, RxRecordDefinitionCacheService, RxRecordInstanceDataPageService } from '@helix/platform/record/api';
import * as i3$1 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i1$2 from '@angular/common/http';
import * as i4$3 from '@bmc-ux/adapt-table';
import { AdaptTableModule } from '@bmc-ux/adapt-table';
import * as i1$4 from '@helix/platform/view/api';
import { OpenViewActionModalSize } from '@helix/platform/view/api';
import * as i9 from '@angular/cdk/drag-drop';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import { flatten as flatten$1 } from '@angular/compiler';
import { RxAssociationNodeTreeDataPageService } from '@helix/platform/association/api';
import * as i2$1 from '@helix/platform/chatbot/api';
import { RX_CHATBOTS } from '@helix/platform/chatbot/api';
import * as i3$3 from '@bmc-ux/adapt-charts';
import { AdaptChartsModule } from '@bmc-ux/adapt-charts';
import moment from 'moment-es6';
import * as i3$4 from '@helix/platform/process/api';
import { ai_info_circle_o_adapt } from '@bmc-ux/dpl-iconfont';
import * as i2$2 from '@helix/platform/rule/api';
import { RxRulePipesModule } from '@helix/platform/rule/api';
import * as i11 from '@angular/cdk/clipboard';
import { ClipboardModule } from '@angular/cdk/clipboard';

const RX_ADMIN = {
    defaultImages: {
        'rx-theme-favicon-logo': {
            name: 'favicon.ico',
            type: 'image/x-icon'
        },
        'rx-theme-large-logo-light': {
            name: 'company.svg',
            type: 'image/svg+xml'
        },
        'rx-theme-large-logo-dark': {
            name: 'company-dark.svg',
            type: 'image/svg+xml'
        },
        'rx-theme-small-logo-light': {
            name: 'company.svg',
            type: 'image/svg+xml'
        },
        'rx-theme-small-logo-dark': {
            name: 'company-dark.svg',
            type: 'image/svg+xml'
        }
    },
    settingResourceTypes: {
        character: RX_RECORD_DEFINITION.resourceTypes.character,
        selection: RX_RECORD_DEFINITION.resourceTypes.selection,
        integer: RX_RECORD_DEFINITION.resourceTypes.integer,
        decimal: RX_RECORD_DEFINITION.resourceTypes.decimal,
        boolean: RX_RECORD_DEFINITION.resourceTypes.boolean,
        dateOnly: RX_RECORD_DEFINITION.resourceTypes.dateOnly,
        color: 'com.bmc.arsys.rx.admin-settings.ColorChooserFieldDefinition',
        attachment: 'com.bmc.arsys.rx.admin-settings.AttachmentFieldDefinition',
        secure: 'com.bmc.arsys.rx.admin-settings.SecureDataFieldDefinition'
    }
};

class RxAdminCommonSettingsService {
    constructor(rxAdminSettingsService, translateService, rxNotificationService, rxModalService, rxNumberUtilsService) {
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.translateService = translateService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.rxNumberUtilsService = rxNumberUtilsService;
    }
    openSettingsDetails({ title, componentName, groups, ownerKeyValue, isChildSetting, childOwnerKeyValue, onDialogApiReady }) {
        const isNew = isChildSetting ? !(ownerKeyValue && childOwnerKeyValue) : !ownerKeyValue;
        return this.rxModalService.openDockedPanel({
            content: AdminCommonSettingsBladeComponent,
            size: 'lg',
            title,
            data: {
                config: {
                    componentName,
                    groups,
                    ownerKeyValue,
                    isNew,
                    isChildSetting,
                    childOwnerKeyValue
                },
                onApiReady: (dialogApi) => {
                    onDialogApiReady === null || onDialogApiReady === void 0 ? void 0 : onDialogApiReady(dialogApi);
                }
            }
        });
    }
    createPropertyConfig(adminComponentControl) {
        const config = {
            name: adminComponentControl.id,
            isDisabled: !adminComponentControl.changePermission,
            dataType: adminComponentControl.dataType,
            options: {
                label: adminComponentControl.label,
                required: adminComponentControl.required
            },
            validators: []
        };
        if (adminComponentControl.required) {
            config.validators.push(Validators.required);
        }
        if (adminComponentControl.defaultValue) {
            config.defaultValue = adminComponentControl.defaultValue;
        }
        else {
            config.defaultValue = null;
        }
        switch (adminComponentControl.dataType) {
            case RX_ADMIN.settingResourceTypes.selection: {
                config.component = SelectFormControlComponent;
                config.options = Object.assign(Object.assign({}, config.options), { options: map(adminComponentControl.optionNamesById, (value, key) => ({
                        id: key,
                        name: value
                    })), emptyOption: !adminComponentControl.required });
                break;
            }
            case RX_ADMIN.settingResourceTypes.secure:
            case RX_ADMIN.settingResourceTypes.character: {
                config.component = TextFormControlComponent;
                config.options.isPassword = adminComponentControl.dataType === RX_ADMIN.settingResourceTypes.secure;
                if (adminComponentControl.maxValue) {
                    config.options.maxLength = Number(adminComponentControl.maxValue);
                    config.validators.push(Validators.maxLength(config.options.maxLength));
                }
                if (adminComponentControl.minValue) {
                    config.options.minLength = Number(adminComponentControl.minValue);
                    config.validators.push(Validators.minLength(config.options.minLength));
                }
                break;
            }
            case RX_ADMIN.settingResourceTypes.boolean: {
                config.component = BooleanFormControlComponent;
                config.options.label = '';
                config.options.description = adminComponentControl.label;
                config.options.shouldDisplayAsCheckbox = config.options.required;
                if (config.defaultValue) {
                    config.defaultValue = config.defaultValue === 'true';
                }
                else if (config.options.required) {
                    config.defaultValue = false;
                }
                break;
            }
            case RX_ADMIN.settingResourceTypes.color: {
                config.component = ColorPickerFormControlComponent;
                config.defaultValue = config.defaultValue || null;
                break;
            }
            case RX_ADMIN.settingResourceTypes.decimal:
            case RX_ADMIN.settingResourceTypes.integer: {
                config.component = CounterFormControlComponent;
                config.options.allowIntegerOnly = adminComponentControl.dataType === RX_ADMIN.settingResourceTypes.integer;
                if (adminComponentControl.maxValue) {
                    config.options.maxValue = Number(adminComponentControl.maxValue);
                    config.validators.push(Validators.max(Number(adminComponentControl.maxValue)));
                }
                if (adminComponentControl.minValue) {
                    config.options.minValue = Number(adminComponentControl.minValue);
                    config.validators.push(Validators.min(Number(adminComponentControl.minValue)));
                }
                if (this.rxNumberUtilsService.isFiniteNumberString(adminComponentControl.defaultValue)) {
                    config.defaultValue = Number(adminComponentControl.defaultValue);
                }
                break;
            }
            case RX_ADMIN.settingResourceTypes.dateOnly: {
                config.component = DateFormControlComponent;
                break;
            }
            case RX_ADMIN.settingResourceTypes.attachment: {
                config.component = AttachmentFormControlComponent;
                config.options.maxFileSize = adminComponentControl.maxValue;
                break;
            }
            default: {
                config.component = TextFormControlComponent;
                break;
            }
        }
        return config;
    }
    getRecordGridConfig({ componentName, controls, getCurrentGridFn, createPermission, groups, bladeTitle, ownerKeyValue, groupName, onDialogApiReady }) {
        const subUrl = ownerKeyValue ? `${groupName}/${ownerKeyValue}` : componentName;
        const fieldDefinitions = controls.map((control) => {
            const fieldDefinition = {
                id: control.id,
                resourceType: control.dataType
            };
            if (control.dataType === RX_ADMIN.settingResourceTypes.selection &&
                control.optionNamesById &&
                control.optionLabelsById) {
                fieldDefinition.optionNamesById = control.optionNamesById;
                fieldDefinition.optionLabelsById = control.optionLabelsById;
            }
            return fieldDefinition;
        });
        const fieldDefinitionsById = fieldDefinitions.reduce((result, fieldDefinition) => {
            result[fieldDefinition.id] = cloneDeep(fieldDefinition);
            return result;
        }, {});
        const recordDefinition = {
            fieldDefinitions,
            fieldDefinitionsById
        };
        const columns = controls.map((control, index) => ({
            index,
            title: control.label,
            fieldId: control.id,
            visible: control.keySetting,
            sortable: true,
            filterable: false,
            alignment: RecordGridColumnAlignment.Left
        }));
        const actionButtons = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                style: 'tertiary',
                iconCls: 'pencil',
                actions: [
                    {
                        name: () => {
                            const currentGrid = getCurrentGridFn(groupName);
                            const selectedRow = currentGrid.api.getFirstSelectedRow();
                            if (createPermission) {
                                const componentOwnerKeyValue = ownerKeyValue || selectedRow.ownerKeyValue1;
                                const childOwnerKeyValue = ownerKeyValue ? selectedRow.ownerKeyValue1 : null;
                                this.openSettingsDetails({
                                    title: bladeTitle || groupName,
                                    componentName,
                                    groups,
                                    ownerKeyValue: componentOwnerKeyValue,
                                    isChildSetting: Boolean(groupName),
                                    childOwnerKeyValue,
                                    onDialogApiReady
                                })
                                    .then(() => {
                                    currentGrid.api.refresh().subscribe();
                                })
                                    .catch(noop);
                            }
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                icon: 'trash',
                actions: [
                    {
                        name: () => {
                            const currentGrid = getCurrentGridFn(groupName);
                            const selectedRow = currentGrid.api.getFirstSelectedRow();
                            if (createPermission) {
                                this.rxModalService
                                    .confirm({
                                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: RX_MODAL.modalStyles.warning,
                                    message: this.translateService.instant('com.bmc.arsys.rx.client.admin.admin-settings.delete-confirmation.message')
                                })
                                    .then((response) => {
                                    if (response) {
                                        this.rxAdminSettingsService
                                            .deleteComponentSettings(`${groupName || componentName}/${selectedRow.ownerKeyValue1}`)
                                            .pipe(switchMap(() => currentGrid.api.refresh()))
                                            .subscribe();
                                    }
                                });
                            }
                        }
                    }
                ]
            }
        ];
        return of({
            actionButtons: createPermission ? actionButtons : [],
            enableRowSelection: RowSelectionMode.Single,
            getRecordDefinition: () => of(recordDefinition),
            getData: () => this.rxAdminSettingsService.getComponentGridData(subUrl).pipe(map$1((data) => ({
                data: data.rows,
                totalSize: data.rows.length
            }))),
            columns,
            enableFiltering: false,
            useExternalFiltering: false,
            recordIdField: 'ownerKeyValue1'
        });
    }
}
RxAdminCommonSettingsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminCommonSettingsService, deps: [{ token: i2.RxAdminSettingsService }, { token: i4.TranslateService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: i3.RxNumberUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });
RxAdminCommonSettingsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminCommonSettingsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminCommonSettingsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.RxAdminSettingsService }, { type: i4.TranslateService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: i3.RxNumberUtilsService }]; } });

class RxAdminFileUtilityService {
    convertBase64ToFile(decodedString, fileName, fileType) {
        if (decodedString) {
            const buffer = map(atob(decodedString), (symbol) => symbol.charCodeAt(0));
            const uint8Array = new Uint8Array(buffer);
            return new File([uint8Array], fileName, { type: fileType });
        }
        else {
            return null;
        }
    }
    convertFileToBase64(file) {
        return new Observable((observer) => {
            const fileReader = new FileReader();
            fileReader.onloadend = () => {
                const base64String = last(fileReader.result.split(','));
                observer.next(base64String);
                observer.complete();
            };
            fileReader.onerror = () => {
                observer.next(null);
            };
            fileReader.readAsDataURL(file);
        });
    }
}
RxAdminFileUtilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminFileUtilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RxAdminFileUtilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminFileUtilityService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminFileUtilityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class AdminCommonSettingsEditorComponent {
    constructor(rxAdminSettingsService, rxAdminFileUtilityService, rxNotificationService, rxModalService, translateService, adaptDockedPanelComponent) {
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxAdminFileUtilityService = rxAdminFileUtilityService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.ownerKeyValue = '';
        this.closeEditor = new EventEmitter();
        this.busy = new EventEmitter();
        this.save = new EventEmitter();
        this.isInDockedPanel = false;
        this.isInDockedPanel = !!adaptDockedPanelComponent;
        this.class = this.isInDockedPanel ? 'dp-content' : '';
    }
    ngOnInit() {
        let componentSettingRequest;
        this.isSettingsActionsAvailable = this.isChildSetting || some(this.groups, (group) => !group.supportsMultiple);
        if (!this.isChildSetting) {
            if (!this.isNew) {
                const componentName = this.ownerKeyValue ? `${this.componentName}/${this.ownerKeyValue}` : this.componentName;
                this.busy.emit(true);
                componentSettingRequest = this.rxAdminSettingsService.getComponentSettings(componentName).pipe(tap((componentSettings) => {
                    this.ownerKeyValue = componentSettings.values.length ? last(componentSettings.values).ownerKeyValue1 : '';
                    this.generalSettings = componentSettings.values;
                    this.isNew = !Boolean(componentSettings.values.length);
                    if (!this.assigneeGroup && componentSettings.values.length) {
                        this.assigneeGroup = last(componentSettings.values).assigneeGroupPermission;
                    }
                    forEach(this.groups, (group) => {
                        if (!group.supportsMultiple && !group.isComponent) {
                            this.setGroupSettingValues(group, this.generalSettings);
                        }
                    });
                }), switchMap(() => {
                    const childSettings$ = [];
                    if (!this.isNew && this.ownerKeyValue) {
                        forEach(this.groups, (group) => {
                            childSettings$.push(this.setChildSettings(group));
                        });
                    }
                    return forkJoin(childSettings$);
                }));
            }
            else {
                forEach(this.groups, (group) => {
                    if (!group.supportsMultiple && !group.isComponent) {
                        this.setGroupSettingValues(group, []);
                    }
                });
            }
        }
        else {
            this.groups = cloneDeep(this.groups);
            if (!this.isNew) {
                this.busy.emit(true);
                componentSettingRequest = this.rxAdminSettingsService
                    .getComponentSettings(`${this.groups[0].name}/${this.childOwnerKeyValue}`)
                    .pipe(tap((childCommonSettings) => {
                    this.groups[0].settings = childCommonSettings.values;
                    this.setGroupSettingValues(this.groups[0], this.groups[0].settings);
                }));
            }
            else {
                this.setGroupSettingValues(this.groups[0], []);
            }
        }
        componentSettingRequest === null || componentSettingRequest === void 0 ? void 0 : componentSettingRequest.pipe(defaultIfEmpty(null), tap(() => this.busy.emit(false)), catchError((err) => {
            this.busy.emit(false);
            return throwError(err);
        })).subscribe();
    }
    addNewSetting(group) {
        const currentGrid = this.getCurrentGrid(group.name);
        return this.openSettingsDetails({
            title: group.name,
            componentName: this.componentName,
            groups: [group],
            ownerKeyValue: this.ownerKeyValue,
            isChildSetting: true,
            onDialogApiReady: (dialogApi) => (this.dialogApi = dialogApi)
        })
            .then(() => {
            this.dialogApi = null;
            currentGrid.api.refresh().subscribe();
        })
            .catch(() => {
            this.dialogApi = null;
            currentGrid.api.refresh().subscribe();
        });
    }
    getCurrentGrid(groupName) {
        const groupsWithGrid = filter(this.groups, 'supportsMultiple');
        const gridIndex = findIndex(groupsWithGrid, { name: groupName });
        return this.recordGridInstances.toArray()[gridIndex];
    }
    setChildSettings(group) {
        if (group.isComponent) {
            if (group.supportsMultiple) {
                group.recordGridConfig = this.getRecordGridConfig({
                    componentName: this.componentName,
                    controls: group.controls,
                    getCurrentGridFn: this.getCurrentGrid.bind(this),
                    createPermission: this.createPermission,
                    groups: [group],
                    bladeTitle: group.name,
                    ownerKeyValue: this.ownerKeyValue,
                    groupName: group.name,
                    onDialogApiReady: (dialogApi) => (this.dialogApi = dialogApi)
                });
            }
            else {
                return this.rxAdminSettingsService
                    .getComponentSettings(`${this.componentName}/${group.name}/${this.ownerKeyValue}`)
                    .pipe(tap((childComponentSettings) => {
                    group.settings = childComponentSettings.values;
                    this.setGroupSettingValues(group, group.settings);
                }));
            }
        }
        return of(true);
    }
    onModelChange(model, group) {
        group.settingValues = Object.assign(Object.assign({}, group.settingValues), model);
    }
    setGroupSettingValues(group, componentSettings) {
        const settingValues = {};
        forEach(group.propertyConfigs, (propertyConfig) => {
            const componentSetting = find(componentSettings, { settingName: propertyConfig.name });
            if (componentSetting) {
                if (componentSetting.settingValue) {
                    switch (propertyConfig.dataType) {
                        case RX_ADMIN.settingResourceTypes.attachment: {
                            settingValues[componentSetting.settingName] = [
                                this.rxAdminFileUtilityService.convertBase64ToFile(componentSetting.settingValue, componentSetting.fileName, componentSetting.fileType)
                            ];
                            break;
                        }
                        case RX_ADMIN.settingResourceTypes.boolean: {
                            settingValues[componentSetting.settingName] = componentSetting.settingValue === 'true';
                            break;
                        }
                        case RX_ADMIN.settingResourceTypes.decimal:
                        case RX_ADMIN.settingResourceTypes.integer: {
                            settingValues[componentSetting.settingName] = Number(componentSetting.settingValue);
                            break;
                        }
                        default: {
                            settingValues[componentSetting.settingName] = componentSetting.settingValue;
                            break;
                        }
                    }
                }
                else {
                    settingValues[componentSetting.settingName] = null;
                }
            }
            else {
                settingValues[propertyConfig.name] = propertyConfig.defaultValue;
            }
        });
        group.settingValues = Object.assign({}, settingValues);
    }
    getSettingWithValue(setting, value) {
        if (Array.isArray(value)) {
            const file = value[0];
            return this.rxAdminFileUtilityService.convertFileToBase64(file).pipe(map$1((base64String) => {
                setting.fileName = file.name;
                setting.fileType = file.type;
                setting.settingValue = base64String;
                return setting;
            }));
        }
        else {
            setting.settingValue = value;
            return of(setting);
        }
    }
    saveSettings() {
        const saveRequests$ = [];
        if (!this.isChildSetting) {
            if (this.isNew && this.createPermission) {
                const generalGroups = this.groups.filter((group) => !group.isComponent);
                let settings$ = [];
                forEach(generalGroups, (group) => {
                    settings$ = settings$.concat(map(group.settingValues, (settingValue, settingName) => {
                        const propertyConfig = find(group.propertyConfigs, { name: settingName });
                        if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                            const setting = {
                                componentName: this.componentName,
                                settingName,
                                assigneeGroupPermission: this.assigneeGroup
                            };
                            return this.getSettingWithValue(setting, settingValue);
                        }
                        else {
                            return null;
                        }
                    }).filter(Boolean));
                });
                if (settings$.length) {
                    saveRequests$.push(forkJoin(settings$).pipe(switchMap((settings) => this.rxAdminSettingsService.createComponentSettings(this.componentName, settings)), switchMap((ownerKeyValue) => {
                        const requests$ = [];
                        this.ownerKeyValue = ownerKeyValue;
                        forEach(this.groups, (group) => {
                            requests$.push(this.setChildSettings(group));
                        });
                        requests$.push(this.rxAdminSettingsService.getComponentSettings(`${this.componentName}/${ownerKeyValue}`).pipe(tap((adminComponentSettings) => {
                            this.generalSettings = adminComponentSettings.values;
                        })));
                        return forkJoin(requests$).pipe(tap(() => {
                            this.isNew = false;
                        }));
                    })));
                }
            }
            else {
                const generalGroups = this.groups.filter((group) => !group.isComponent);
                const childGroups = this.groups.filter((group) => group.isComponent);
                let generalSettings$ = [];
                forEach(generalGroups, (group) => {
                    generalSettings$ = generalSettings$.concat(map(group.settingValues, (settingValue, settingName) => {
                        const propertyConfig = find(group.propertyConfigs, { name: settingName });
                        if (propertyConfig && !propertyConfig.isDisabled) {
                            const setting = find(this.generalSettings, { settingName });
                            setting.assigneeGroupPermission = this.assigneeGroup;
                            return this.getSettingWithValue(setting, settingValue);
                        }
                        else {
                            return null;
                        }
                    }).filter(Boolean));
                });
                if (generalSettings$.length) {
                    saveRequests$.push(forkJoin(generalSettings$).pipe(switchMap((generalSettings) => this.rxAdminSettingsService.updateComponentSettings(`${this.componentName}/${this.ownerKeyValue}`, generalSettings))));
                }
                let childSettings$ = [];
                forEach(childGroups, (group) => {
                    if (!group.supportsMultiple) {
                        if (group.settings && group.settings.length) {
                            childSettings$ = childSettings$.concat(map(group.settingValues, (settingValue, settingName) => {
                                const propertyConfig = find(group.propertyConfigs, { name: settingName });
                                if (propertyConfig && !propertyConfig.isDisabled) {
                                    const setting = find(group.settings, { settingName });
                                    setting.assigneeGroupPermission = this.assigneeGroup;
                                    return this.getSettingWithValue(setting, settingValue);
                                }
                                else {
                                    return null;
                                }
                            }).filter(Boolean));
                            saveRequests$.push(forkJoin(childSettings$).pipe(switchMap((childSettings) => this.rxAdminSettingsService.updateComponentSettings(`${group.name}/${last(group.settings).ownerKeyValue1}`, childSettings))));
                        }
                        else {
                            childSettings$ = childSettings$.concat(map(group.settingValues, (settingValue, settingName) => {
                                const propertyConfig = find(group.propertyConfigs, { name: settingName });
                                if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                                    const childSetting = {
                                        componentName: group.name,
                                        parentComponentName: this.componentName,
                                        settingName,
                                        ownerKeyValue2: this.ownerKeyValue,
                                        assigneeGroupPermission: this.assigneeGroup
                                    };
                                    return this.getSettingWithValue(childSetting, settingValue);
                                }
                                else {
                                    return null;
                                }
                            }).filter(Boolean));
                            if (childSettings$.length) {
                                saveRequests$.push(forkJoin(childSettings$).pipe(switchMap((childSettings) => this.rxAdminSettingsService.createComponentSettings(`${group.name}/${this.ownerKeyValue}`, childSettings)), switchMap(() => this.setChildSettings(group))));
                            }
                        }
                    }
                });
            }
        }
        else {
            const childGroup = this.groups[0];
            let childSettings$ = [];
            if (childGroup.settings && childGroup.settings.length) {
                childSettings$ = childSettings$.concat(map(childGroup.settingValues, (settingValue, settingName) => {
                    const propertyConfig = find(childGroup.propertyConfigs, {
                        name: settingName
                    });
                    if (propertyConfig && !propertyConfig.isDisabled) {
                        const setting = find(childGroup.settings, { settingName });
                        setting.assigneeGroupPermission = this.assigneeGroup;
                        return this.getSettingWithValue(setting, settingValue);
                    }
                    else {
                        return null;
                    }
                }));
                if (childSettings$.length) {
                    saveRequests$.push(forkJoin(childSettings$).pipe(switchMap((childSettings) => this.rxAdminSettingsService.updateComponentSettings(`${childGroup.name}/${this.childOwnerKeyValue}`, childSettings))));
                }
            }
            else {
                childSettings$ = childSettings$.concat(map(childGroup.settingValues, (settingValue, settingName) => {
                    const propertyConfig = find(childGroup.propertyConfigs, { name: settingName });
                    if (!isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                        const setting = {
                            componentName: childGroup.name,
                            parentComponentName: this.componentName,
                            ownerKeyValue2: this.ownerKeyValue,
                            settingName,
                            assigneeGroupPermission: this.assigneeGroup
                        };
                        return this.getSettingWithValue(setting, settingValue);
                    }
                    else {
                        return null;
                    }
                }).filter(Boolean));
                if (childSettings$.length) {
                    saveRequests$.push(forkJoin(childSettings$).pipe(switchMap((childSettings) => this.rxAdminSettingsService.createComponentSettings(`${childGroup.name}/${this.ownerKeyValue}`, childSettings))));
                }
            }
        }
        if (saveRequests$.length) {
            this.busy.emit(true);
            forkJoin(saveRequests$)
                .pipe(catchError((err) => {
                this.busy.emit(false);
                return throwError(err);
            }))
                .subscribe(() => {
                this.rxNotificationService.addSuccessMessage('Settings saved successfully.');
                this.forms.forEach((form) => form.formGroup.markAsPristine());
                this.busy.emit(false);
                this.save.emit();
            });
        }
    }
    isAbleToSave() {
        return (this.forms &&
            every(this.forms.toArray(), (form) => form.formGroup.valid) &&
            this.forms.some((form) => form.formGroup.dirty));
    }
    resetSettings() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.admin.reset-confirmation.message')
        })
            .then((response) => {
            if (response) {
                chain(this.groups)
                    .reject((group) => isEmpty(group.settingValues))
                    .forEach((group) => {
                    const settingValues = cloneDeep(group.settingValues);
                    forEach(group.propertyConfigs, (propertyConfig) => {
                        if (propertyConfig.dataType === RX_ADMIN.settingResourceTypes.attachment) {
                            settingValues[propertyConfig.name] = propertyConfig.defaultValue
                                ? [
                                    this.rxAdminFileUtilityService.convertBase64ToFile(propertyConfig.defaultValue, RX_ADMIN.defaultImages[propertyConfig.name].name, RX_ADMIN.defaultImages[propertyConfig.name].type)
                                ]
                                : null;
                        }
                        else {
                            settingValues[propertyConfig.name] = propertyConfig.defaultValue;
                        }
                    });
                    group.settingValues = settingValues;
                })
                    .value();
                this.forms.forEach((form) => form.formGroup.markAsDirty());
            }
        });
    }
    onCancel() {
        this.closeEditor.emit();
    }
    canClose() {
        var _a, _b;
        return !(((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty()) || ((_b = this.forms) === null || _b === void 0 ? void 0 : _b.some((form) => form.formGroup.dirty)));
    }
}
AdminCommonSettingsEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsEditorComponent, deps: [{ token: i2.RxAdminSettingsService }, { token: RxAdminFileUtilityService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: i4.TranslateService }, { token: i1$1.AdaptDockedPanelComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
AdminCommonSettingsEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: { componentName: "componentName", ownerKeyValue: "ownerKeyValue", groups: "groups", createPermission: "createPermission", isNew: "isNew", isChildSetting: "isChildSetting", childOwnerKeyValue: "childOwnerKeyValue", getRecordGridConfig: "getRecordGridConfig", openSettingsDetails: "openSettingsDetails" }, outputs: { closeEditor: "closeEditor", busy: "busy", save: "save" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "recordGridInstances", predicate: RecordGridComponent, descendants: true }, { propertyName: "forms", predicate: FormBuilderComponent, descendants: true }], ngImport: i0, template: "<adapt-accordion [multiselect]=\"true\" [class.dp-body]=\"isInDockedPanel\">\n  <adapt-accordion-tab\n    *ngFor=\"let commonSettingsGroup of groups; let $index = index\"\n    [isOpen]=\"$index === 0\"\n    [title]=\"commonSettingsGroup.name\"\n    [disabled]=\"isNew && commonSettingsGroup.isComponent && !isChildSetting\"\n  >\n    <div class=\"property-controls\" *ngIf=\"!commonSettingsGroup.supportsMultiple || isChildSetting\">\n      <rx-form-builder\n        [config]=\"[{ controls: commonSettingsGroup.propertyConfigs }]\"\n        (modelChange)=\"onModelChange($event, commonSettingsGroup)\"\n        [model]=\"commonSettingsGroup.settingValues\"\n        *ngIf=\"commonSettingsGroup.settingValues\"\n      ></rx-form-builder>\n    </div>\n\n    <div *ngIf=\"commonSettingsGroup.supportsMultiple && commonSettingsGroup.recordGridConfig && !isChildSetting\">\n      <button\n        *ngIf=\"createPermission\"\n        adapt-button\n        type=\"button\"\n        class=\"px-0\"\n        btn-type=\"tertiary\"\n        (click)=\"addNewSetting(commonSettingsGroup)\"\n      >\n        <span class=\"d-icon-plus_circle\"></span>\n        {{ 'com.bmc.arsys.rx.client.admin.add-new-setting.label' | translate }}\n      </button>\n      <rx-record-grid [config]=\"commonSettingsGroup.recordGridConfig\"></rx-record-grid>\n    </div>\n  </adapt-accordion-tab>\n</adapt-accordion>\n\n<div\n  [ngClass]=\"{\n    'justify-content-start': !isInDockedPanel,\n    'justify-content-end': isInDockedPanel,\n    'dp-footer': isInDockedPanel\n  }\"\n  class=\"pt-3\"\n>\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    class=\"mr-2\"\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"!isAbleToSave()\"\n    (click)=\"saveSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"resetSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.reset.label' | translate }}\n  </button>\n\n  <button adapt-button class=\"ml-2\" btn-type=\"secondary\" type=\"button\" *ngIf=\"isInDockedPanel\" (click)=\"onCancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [".property-controls{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i4$1.FormBuilderComponent, selector: "rx-form-builder", inputs: ["config", "model", "guid", "isReadOnly", "focusEditor$"], outputs: ["modelChange", "editorEvent", "formInitialized"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-common-settings-editor',
                    templateUrl: './admin-common-settings-editor.component.html',
                    styleUrls: ['./admin-common-settings-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxAdminSettingsService }, { type: RxAdminFileUtilityService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: i4.TranslateService }, { type: i1$1.AdaptDockedPanelComponent, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { componentName: [{
                type: Input
            }], ownerKeyValue: [{
                type: Input
            }], groups: [{
                type: Input
            }], createPermission: [{
                type: Input
            }], isNew: [{
                type: Input
            }], isChildSetting: [{
                type: Input
            }], childOwnerKeyValue: [{
                type: Input
            }], getRecordGridConfig: [{
                type: Input
            }], openSettingsDetails: [{
                type: Input
            }], closeEditor: [{
                type: Output
            }], busy: [{
                type: Output
            }], save: [{
                type: Output
            }], recordGridInstances: [{
                type: ViewChildren,
                args: [RecordGridComponent]
            }], forms: [{
                type: ViewChildren,
                args: [FormBuilderComponent]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class AdminCommonSettingsBladeComponent extends RxModalClass {
    constructor(context, injector, rxAdminCommonSettingsService) {
        super(context, injector);
        this.context = context;
        this.injector = injector;
        this.rxAdminCommonSettingsService = rxAdminCommonSettingsService;
        this.busySubscription = null;
        this.getRecordGridConfig = this.getRecordGridConfig.bind(this);
        this.openSettingsDetails = this.openSettingsDetails.bind(this);
    }
    ngOnInit() {
        super.ngOnInit();
        const data = this.context.getData();
        this.groups = cloneDeep(data.config.groups);
        this.isNew = data.config.isNew;
        this.ownerKeyValue = data.config.ownerKeyValue;
        this.childOwnerKeyValue = data.config.childOwnerKeyValue;
        this.componentName = data.config.componentName;
        this.isChildSetting = data.config.isChildSetting;
    }
    isDirty() {
        return this.adminCommonSettingsEditorComponent ? !this.adminCommonSettingsEditorComponent.canClose() : false;
    }
    onCloseEditor() {
        this.context.dismiss(DismissReasons.CLOSE_BTN);
    }
    onBusy(isBusy) {
        var _a;
        if (isBusy) {
            this.busySubscription = NEVER.subscribe();
        }
        else {
            (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        }
    }
    getRecordGridConfig(options) {
        return this.rxAdminCommonSettingsService.getRecordGridConfig(options);
    }
    openSettingsDetails(options) {
        return this.rxAdminCommonSettingsService.openSettingsDetails(options);
    }
    onSave() {
        this.context.close(null);
    }
}
AdminCommonSettingsBladeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsBladeComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i0.Injector }, { token: RxAdminCommonSettingsService }], target: i0.ɵɵFactoryTarget.Component });
AdminCommonSettingsBladeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsBladeComponent, selector: "rx-admin-common-settings-blade", viewQueries: [{ propertyName: "adminCommonSettingsEditorComponent", first: true, predicate: ["editor"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings [busy]=\"busySubscription\">\n  <rx-admin-common-settings-editor\n    #editor\n    [componentName]=\"componentName\"\n    [isNew]=\"isNew\"\n    [groups]=\"groups\"\n    [isChildSetting]=\"isChildSetting\"\n    [ownerKeyValue]=\"ownerKeyValue\"\n    [childOwnerKeyValue]=\"childOwnerKeyValue\"\n    [createPermission]=\"true\"\n    [getRecordGridConfig]=\"getRecordGridConfig\"\n    [openSettingsDetails]=\"openSettingsDetails\"\n    (closeEditor)=\"onCloseEditor()\"\n    (busy)=\"onBusy($event)\"\n    (save)=\"onSave()\"\n  ></rx-admin-common-settings-editor>\n</rx-admin-settings>\n", styles: ["rx-admin-settings{padding:0!important}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: ["componentName", "ownerKeyValue", "groups", "createPermission", "isNew", "isChildSetting", "childOwnerKeyValue", "getRecordGridConfig", "openSettingsDetails"], outputs: ["closeEditor", "busy", "save"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsBladeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-common-settings-blade',
                    templateUrl: './admin-common-settings-blade.component.html',
                    styleUrls: ['./admin-common-settings-blade.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i0.Injector }, { type: RxAdminCommonSettingsService }]; }, propDecorators: { adminCommonSettingsEditorComponent: [{
                type: ViewChild,
                args: ['editor']
            }] } });

class AdminCommonSettingsComponent {
    constructor(rxModalService, rxAdminSettingsService, rxAdminCommonSettingsService) {
        this.rxModalService = rxModalService;
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxAdminCommonSettingsService = rxAdminCommonSettingsService;
        this.destroyed$ = new ReplaySubject(1);
        this.getRecordGridConfig = this.getRecordGridConfig.bind(this);
        this.openSettingsDetails = this.openSettingsDetails.bind(this);
    }
    ngOnInit() {
        let busySubject;
        this.componentName$
            .pipe(filter$1(Boolean), tap((componentName) => {
            busySubject = new Subject();
            this.componentName = componentName;
            this.state = null;
            this.busySubscription = busySubject.pipe(take(1)).subscribe();
        }), switchMap((componentName) => this.rxAdminSettingsService.getComponentDefinition(componentName)), tap((adminComponentDefinition) => {
            this.navigationMenuLabel = adminComponentDefinition.header;
        }), switchMap((adminComponentDefinition) => {
            const state = {
                headerLabel: adminComponentDefinition.header,
                createPermission: adminComponentDefinition.createPermission,
                componentName: adminComponentDefinition.compName,
                supportsMultiple: false,
                commonSettingGroups: []
            };
            const commonSettingGroups$ = [];
            forEach(adminComponentDefinition.groups, (group) => {
                const propertyConfigs$ = [];
                const commonSettingGroup = {
                    name: group.name,
                    supportsMultiple: group.supportsMultiple,
                    isComponent: group.component,
                    settings: []
                };
                if (commonSettingGroup.isComponent) {
                    propertyConfigs$.push(this.rxAdminSettingsService.getComponentDefinition(group.name).pipe(map$1((childAdminComponentDefinition) => {
                        const childGroup = childAdminComponentDefinition.groups[0];
                        if (commonSettingGroup.supportsMultiple) {
                            commonSettingGroup.controls = childGroup.controls;
                        }
                        return childGroup.controls.map((control) => this.rxAdminCommonSettingsService.createPropertyConfig(control));
                    })));
                }
                else {
                    forEach(group.controls, (control) => {
                        propertyConfigs$.push(of(this.rxAdminCommonSettingsService.createPropertyConfig(control)));
                    });
                }
                commonSettingGroups$.push(forkJoin(propertyConfigs$).pipe(map$1((propertyConfigs) => {
                    commonSettingGroup.propertyConfigs = flatten(propertyConfigs);
                    return commonSettingGroup;
                })));
            });
            return commonSettingGroups$.length
                ? forkJoin(commonSettingGroups$).pipe(map$1((commonSettingGroups) => {
                    state.commonSettingGroups = commonSettingGroups;
                    if (adminComponentDefinition.supportsMultiple) {
                        state.supportsMultiple = true;
                        const controls = flatten(adminComponentDefinition.groups.filter((group) => !group.component).map((group) => group.controls));
                        state.recordGridConfig = this.rxAdminCommonSettingsService
                            .getRecordGridConfig({
                            componentName: state.componentName,
                            controls,
                            getCurrentGridFn: this.getCurrentGrid.bind(this),
                            createPermission: state.createPermission,
                            groups: state.commonSettingGroups,
                            bladeTitle: state.headerLabel,
                            ownerKeyValue: null,
                            groupName: null,
                            onDialogApiReady: (dialogApi) => (this.dialogApi = dialogApi)
                        })
                            .pipe(map$1((recordGridConfig) => (Object.assign(Object.assign({}, recordGridConfig), { styles: 'h-auto flex-fill mw-100' }))));
                    }
                    return state;
                }))
                : of(null);
        }), takeUntil(this.destroyed$))
            .subscribe((state) => {
            this.state = state;
            busySubject.next();
        });
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
    addNewSetting() {
        this.rxAdminCommonSettingsService
            .openSettingsDetails({
            title: this.state.headerLabel,
            componentName: this.componentName,
            groups: this.state.commonSettingGroups,
            onDialogApiReady: (dialogApi) => (this.dialogApi = dialogApi)
        })
            .then(() => {
            this.dialogApi = null;
            this.recordGridComponent.api.refresh().subscribe();
        })
            .catch(() => {
            this.dialogApi = null;
        });
    }
    onBusy(isBusy) {
        var _a;
        if (isBusy) {
            this.busySubscription = NEVER.subscribe();
        }
        else {
            (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        }
    }
    getRecordGridConfig(options) {
        return this.rxAdminCommonSettingsService.getRecordGridConfig(options);
    }
    openSettingsDetails(options) {
        return this.rxAdminCommonSettingsService.openSettingsDetails(options);
    }
    getCurrentGrid() {
        return this.recordGridComponent;
    }
    canClose() {
        var _a, _b, _c;
        return Boolean((_b = (_a = this.adminCommonSettingsEditorComponent) === null || _a === void 0 ? void 0 : _a.canClose()) !== null && _b !== void 0 ? _b : !((_c = this.dialogApi) === null || _c === void 0 ? void 0 : _c.isDirty()));
    }
}
AdminCommonSettingsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxAdminSettingsService }, { token: RxAdminCommonSettingsService }], target: i0.ɵɵFactoryTarget.Component });
AdminCommonSettingsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsComponent, selector: "rx-admin-common-settings", inputs: { componentName$: "componentName$" }, viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: RecordGridComponent, descendants: true }, { propertyName: "adminCommonSettingsEditorComponent", first: true, predicate: AdminCommonSettingsEditorComponent, descendants: true }], ngImport: i0, template: "<rx-admin-settings [busy]=\"busySubscription\" [header]=\"state?.headerLabel || navigationMenuLabel\">\n  <div *ngIf=\"!state\" class=\"d-flex align-items-center justify-content-center h-100\">\n    <adapt-empty-state\n      [type]=\"'config'\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.no-settings-available.message' | translate }}\"\n    ></adapt-empty-state>\n  </div>\n\n  <div *ngIf=\"state\" class=\"d-flex flex-column align-items-start flex-fill\">\n    <ng-container *ngIf=\"state.supportsMultiple\">\n      <button *ngIf=\"state.createPermission\" adapt-button type=\"button\" btn-type=\"tertiary\" (click)=\"addNewSetting()\">\n        <span class=\"d-icon-plus_circle\"></span>\n        {{ 'com.bmc.arsys.rx.client.admin.add-new-setting.label' | translate }}\n      </button>\n\n      <rx-record-grid [config]=\"state.recordGridConfig\"></rx-record-grid>\n    </ng-container>\n\n    <div class=\"flex-fill w-100\" *ngIf=\"!state.supportsMultiple\">\n      <rx-admin-common-settings-editor\n        [componentName]=\"state.componentName\"\n        [groups]=\"state.commonSettingGroups\"\n        [isNew]=\"false\"\n        [createPermission]=\"state.createPermission\"\n        [getRecordGridConfig]=\"getRecordGridConfig\"\n        [openSettingsDetails]=\"openSettingsDetails\"\n        (busy)=\"onBusy($event)\"\n      ></rx-admin-common-settings-editor>\n    </div>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: ["componentName", "ownerKeyValue", "groups", "createPermission", "isNew", "isChildSetting", "childOwnerKeyValue", "getRecordGridConfig", "openSettingsDetails"], outputs: ["closeEditor", "busy", "save"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminCommonSettingsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-common-settings',
                    templateUrl: './admin-common-settings.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxAdminSettingsService }, { type: RxAdminCommonSettingsService }]; }, propDecorators: { componentName$: [{
                type: Input
            }], recordGridComponent: [{
                type: ViewChild,
                args: [RecordGridComponent]
            }], adminCommonSettingsEditorComponent: [{
                type: ViewChild,
                args: [AdminCommonSettingsEditorComponent]
            }] } });

class RxAdminSettingsExplorerService {
    constructor(rxAdminSettingsService) {
        this.rxAdminSettingsService = rxAdminSettingsService;
    }
    getNavigationTreeConfig() {
        return this.rxAdminSettingsService.getAdminNavigationMenuItems().pipe(map$1(this.buildTreeNodes.bind(this)));
    }
    buildTreeNodes(administrationNavigationMenuItems, parent) {
        return (administrationNavigationMenuItems || [])
            .filter((navigationMenuItem) => navigationMenuItem.compName !== 'com.bmc.arsys.rx.settings')
            .sort((item1, item2) => item1.label.localeCompare(item2.label))
            .map((navigationMenuItem) => {
            const treeMenuItem = {
                label: navigationMenuItem.label,
                data: navigationMenuItem,
                expanded: false,
                selectable: Boolean(navigationMenuItem.guid),
                key: uniqueId()
            };
            treeMenuItem.children =
                navigationMenuItem.items && navigationMenuItem.items.length
                    ? this.buildTreeNodes(navigationMenuItem.items, treeMenuItem)
                    : [];
            if (parent) {
                treeMenuItem.parent = parent;
            }
            return treeMenuItem;
        });
    }
}
RxAdminSettingsExplorerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminSettingsExplorerService, deps: [{ token: i2.RxAdminSettingsService }], target: i0.ɵɵFactoryTarget.Injectable });
RxAdminSettingsExplorerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminSettingsExplorerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAdminSettingsExplorerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.RxAdminSettingsService }]; } });

var AdminSettingViewType;
(function (AdminSettingViewType) {
    AdminSettingViewType["RuntimeView"] = "runtimeView";
    AdminSettingViewType["SharedView"] = "sharedView";
})(AdminSettingViewType || (AdminSettingViewType = {}));
var AdminSettingLinkType;
(function (AdminSettingLinkType) {
    AdminSettingLinkType["InBundle"] = "inBundle";
    AdminSettingLinkType["External"] = "external";
})(AdminSettingLinkType || (AdminSettingLinkType = {}));

class AdminSettingsExplorerComponent {
    constructor(rxAdminSettingsExplorerService, rxAdminSettingsService, rxGlobalCacheService, router, rxBundleCacheService, activatedRoute, rxPageTitleService, rxRuntimeViewRegistryService, rxUtilityModalsService, rxComponentCanDeactivateGuard, changeDetector, translateService, rxGainsightConfiguratorService) {
        this.rxAdminSettingsExplorerService = rxAdminSettingsExplorerService;
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.router = router;
        this.rxBundleCacheService = rxBundleCacheService;
        this.activatedRoute = activatedRoute;
        this.rxPageTitleService = rxPageTitleService;
        this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;
        this.rxUtilityModalsService = rxUtilityModalsService;
        this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;
        this.changeDetector = changeDetector;
        this.translateService = translateService;
        this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
        this.adminSettingViewType = AdminSettingViewType;
        this.componentName$ = new BehaviorSubject('');
        this.treeWrap = TreeWrap.WrapAll;
        this.emptyStateLabel = this.translateService.instant('com.bmc.arsys.rx.client.admin.admin-settings-explorer.select-from-settings.label');
        this.texts = {
            filterPlaceholder: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label')
        };
        this.destroyed$ = new ReplaySubject(1);
    }
    get selectedTreeNode() {
        return this.selectedTreeNodeValue;
    }
    set selectedTreeNode(node) {
        if (node.data.guid) {
            const prevGuid = this.currentSettingGuid;
            this.currentSettingGuid = node.data.guid;
            this.router
                .navigate([node.data.guid], { relativeTo: this.activatedRoute.parent })
                .then((isNavigationSucceeded) => {
                if (isNavigationSucceeded) {
                    this.selectedTreeNodeValue = node;
                    this.displayView(node.data);
                }
                else {
                    this.currentSettingGuid = prevGuid;
                }
            });
        }
    }
    ngOnInit() {
        this.rxComponentCanDeactivateGuard.setPageComponent(this);
        combineLatest([
            this.activatedRoute.params.pipe(pluck('settingGuid')),
            this.rxAdminSettingsExplorerService.getNavigationTreeConfig()
        ])
            .pipe(filter$1(([settingGuid, administrationNavigationTree]) => settingGuid !== this.currentSettingGuid), takeUntil(this.destroyed$))
            .subscribe(([settingGuid, administrationNavigationTree]) => {
            if (!this.navigationTree) {
                this.navigationTree = administrationNavigationTree;
            }
            this.currentSettingGuid = settingGuid;
            if (settingGuid !== 'root' && this.navigationTree.length) {
                this.selectedTreeNodeValue = this.findSelectedNode(settingGuid, this.navigationTree);
                if (this.selectedTreeNodeValue) {
                    this.expandParentNodes(this.selectedTreeNodeValue);
                    this.displayView(this.selectedTreeNodeValue.data);
                }
            }
            else {
                this.selectedTreeNodeValue = null;
                this.viewType = null;
                this.setPageTitle();
            }
        });
        if (this.rxGlobalCacheService.applicationId === RX_APPLICATION.innovationStudioBundleId) {
            this.rxGainsightConfiguratorService.updateGlobalContext({
                subProductLevel1: {
                    name: 'Design'
                },
                subProductLevel2: {
                    name: 'Administration'
                }
            });
        }
        else {
            // Clear the global context for runtime administration
            this.rxGainsightConfiguratorService.removeGlobalContext(null);
        }
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
        this.rxComponentCanDeactivateGuard.setPageComponent(null);
        this.rxGainsightConfiguratorService.removeGlobalContext(['subProductLevel2']);
    }
    canDeactivate() {
        if (this.adminCommonSettingsComponent) {
            return this.adminCommonSettingsComponent.canClose();
        }
        else {
            return every(this.rxRuntimeViewRegistryService.getAll(), (runtimeView) => runtimeView.canClose());
        }
    }
    confirmDeactivation() {
        return this.rxUtilityModalsService.confirmUnsavedChanges();
    }
    onBeforeLoad() {
        this.busySubscription = NEVER.subscribe();
        // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError
        this.changeDetector.detectChanges();
    }
    onAfterLoad() {
        var _a;
        (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    setPageTitle(componentSettingLabel) {
        const titleParts = [
            componentSettingLabel,
            this.rxGlobalCacheService.applicationId === RX_APPLICATION.innovationStudioBundleId
                ? this.translateService.instant('com.bmc.arsys.rx.client.common.administration.label')
                : this.translateService.instant('com.bmc.arsys.rx.client.common.settings.label')
        ];
        this.rxPageTitleService.set(titleParts, this.rxGlobalCacheService.applicationId);
    }
    findSelectedNode(settingGuid, sourceTree) {
        let selectedNode;
        forEach(sourceTree, (node) => {
            if (node.data.guid === settingGuid) {
                selectedNode = node;
                return false;
            }
            else {
                selectedNode = this.findSelectedNode(settingGuid, node.children);
                if (selectedNode) {
                    return false;
                }
            }
        });
        return selectedNode;
    }
    expandParentNodes(node) {
        if (node.parent) {
            node.parent.expanded = true;
            if (node.parent.parent) {
                this.expandParentNodes(node.parent);
            }
        }
    }
    displayView(adminNavigationMenuItem) {
        this.setPageTitle(adminNavigationMenuItem.label);
        this.rxBundleCacheService.bundleId = adminNavigationMenuItem.defaultBundleScope;
        if (adminNavigationMenuItem.isCustom) {
            if (adminNavigationMenuItem.linkType === AdminSettingLinkType.InBundle) {
                this.viewType = AdminSettingViewType.RuntimeView;
                this.runtimeViewConfig = { viewDefinitionName: adminNavigationMenuItem.registeredModuleName };
            }
            else if (adminNavigationMenuItem.linkType === AdminSettingLinkType.External) {
                window.open(adminNavigationMenuItem.externalLink, '_blank');
                this.viewType = null;
                this.emptyStateLabel = this.translateService.instant('com.bmc.arsys.rx.client.admin.external-settings.empty-state.label');
            }
        }
        else {
            this.componentName$.next(adminNavigationMenuItem.compName);
            this.viewType = AdminSettingViewType.SharedView;
        }
    }
}
AdminSettingsExplorerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminSettingsExplorerComponent, deps: [{ token: RxAdminSettingsExplorerService }, { token: i2.RxAdminSettingsService }, { token: i2.RxGlobalCacheService }, { token: i3$1.Router }, { token: i2.RxBundleCacheService }, { token: i3$1.ActivatedRoute }, { token: i2.RxPageTitleService }, { token: i4$2.RxRuntimeViewRegistryService }, { token: i1.RxUtilityModalsService }, { token: i2.RxComponentCanDeactivateGuard }, { token: i0.ChangeDetectorRef }, { token: i4.TranslateService }, { token: i4$1.RxGainsightConfiguratorService }], target: i0.ɵɵFactoryTarget.Component });
AdminSettingsExplorerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminSettingsExplorerComponent, selector: "rx-admin-settings-explorer", providers: [RxAdminSettingsExplorerService], viewQueries: [{ propertyName: "adminCommonSettingsComponent", first: true, predicate: AdminCommonSettingsComponent, descendants: true }], ngImport: i0, template: "<div class=\"position-relative busy-indicator\">\n  <rx-busy-indicator\n    [options]=\"{\n      busy: busySubscription,\n      loaderType: 'lineLoader',\n      delay: 250,\n      backdrop: false,\n      message: null\n    }\"\n  >\n  </rx-busy-indicator>\n</div>\n\n<adapt-sidebar [openedId]=\"0\" [adjustMainContainerWidth]=\"true\">\n  <adapt-sidebar-item\n    [iconClass]=\"'d-icon-layout_preview'\"\n    [headerTitle]=\"'com.bmc.arsys.rx.client.common.settings.label' | translate\"\n    [aria-label]=\"'com.bmc.arsys.rx.client.common.settings.label' | translate\"\n  >\n    <adapt-tree\n      *ngIf=\"navigationTree\"\n      [value]=\"navigationTree\"\n      selectionMode=\"single\"\n      [(selection)]=\"selectedTreeNode\"\n      [filter]=\"true\"\n      [texts]=\"texts\"\n      [wrap]=\"treeWrap\"\n    >\n    </adapt-tree>\n  </adapt-sidebar-item>\n\n  <div class=\"main rx-administration-settings-view\">\n    <rx-runtime-view\n      *ngIf=\"viewType === adminSettingViewType.RuntimeView\"\n      [configuration]=\"runtimeViewConfig\"\n      (beforeLoad)=\"onBeforeLoad()\"\n      (afterLoad)=\"onAfterLoad()\"\n    ></rx-runtime-view>\n\n    <rx-admin-common-settings\n      *ngIf=\"viewType === adminSettingViewType.SharedView\"\n      [componentName$]=\"componentName$\"\n    ></rx-admin-common-settings>\n\n    <div *ngIf=\"!viewType\" class=\"d-flex align-items-center justify-content-center h-100\">\n      <adapt-empty-state [type]=\"'config'\" [label]=\"emptyStateLabel\"></adapt-empty-state>\n    </div>\n  </div>\n</adapt-sidebar>\n", styles: ["adapt-tree ::ng-deep .a-tree__container{margin-left:10px}adapt-sidebar ::ng-deep .adapt-sidebar-main{padding:0}adapt-sidebar ::ng-deep button.close{margin:0}.rx-administration-settings-view{height:100%;overflow:auto}.busy-indicator{bottom:2px}:host rx-runtime-view ::ng-deep rx-runtime-view-root,:host rx-runtime-view ::ng-deep .content-outlet{overflow:visible}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptSidebarComponent, selector: "adapt-sidebar", inputs: ["className", "navClassName", "panelWidth", "panel2Width", "position", "theme", "widthLimit", "openedId", "adjustMainContainerWidth"], outputs: ["openedIdChange", "isPanelOpenedCurrently"], exportAs: ["adaptSidebar"] }, { type: i1$1.AdaptSidebarItemComponent, selector: "adapt-sidebar-item", inputs: ["iconClass", "headerTitle", "tooltipText", "aria-label"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i4$2.RuntimeViewComponent, selector: "rx-runtime-view", inputs: ["configuration"], outputs: ["save", "closeView", "cancelView", "beforeLoad", "afterLoad"] }, { type: AdminCommonSettingsComponent, selector: "rx-admin-common-settings", inputs: ["componentName$"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminSettingsExplorerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-settings-explorer',
                    templateUrl: 'admin-settings-explorer.component.html',
                    styleUrls: ['./admin-settings-explorer.component.scss'],
                    providers: [RxAdminSettingsExplorerService]
                }]
        }], ctorParameters: function () { return [{ type: RxAdminSettingsExplorerService }, { type: i2.RxAdminSettingsService }, { type: i2.RxGlobalCacheService }, { type: i3$1.Router }, { type: i2.RxBundleCacheService }, { type: i3$1.ActivatedRoute }, { type: i2.RxPageTitleService }, { type: i4$2.RxRuntimeViewRegistryService }, { type: i1.RxUtilityModalsService }, { type: i2.RxComponentCanDeactivateGuard }, { type: i0.ChangeDetectorRef }, { type: i4.TranslateService }, { type: i4$1.RxGainsightConfiguratorService }]; }, propDecorators: { adminCommonSettingsComponent: [{
                type: ViewChild,
                args: [AdminCommonSettingsComponent]
            }] } });

const routes = [
    {
        path: '',
        redirectTo: 'root',
        pathMatch: 'full'
    },
    {
        path: ':settingGuid',
        component: AdminSettingsExplorerComponent,
        pathMatch: 'full',
        canDeactivate: [RxComponentCanDeactivateGuard]
    }
];
class AdminComponentsRoutingModule {
}
AdminComponentsRoutingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsRoutingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AdminComponentsRoutingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsRoutingModule, imports: [i3$1.RouterModule], exports: [RouterModule] });
AdminComponentsRoutingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsRoutingModule, imports: [[RouterModule.forChild(routes)], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsRoutingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule.forChild(routes)],
                    exports: [RouterModule]
                }]
        }] });

const RX_ISSUES = {
    issuesRecordDefinitionName: 'Reported Errors',
    issuesRecordFieldIds: {
        operationId: 70100,
        applicationName: 70101,
        messageType: 70102,
        errorNumber: 70103,
        errorMessage: 70104,
        caseId: 70106,
        caseStatus: 70107,
        relatedRecordGuid: 70108,
        userDescription: 70109,
        submittedToSupportDate: 70110,
        caseGuid: 70111,
        caseStatusRefreshDate: 70112
    },
    statusOptionValues: {
        new: 0,
        submitted: 1
    },
    linkExpiredError: {
        code: 12206,
        message: 'com.bmc.arsys.rx.client.admin.application-issues.link-expired-error.message'
    },
    notificationMessages: {
        caseStatusRefreshed: 'com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed.message',
        duplicateIssuesClosed: 'com.bmc.arsys.rx.client.admin.application-issues.duplicate-issues-closed.message',
        caseSubmitted: 'com.bmc.arsys.rx.client.admin.application-issues.case-submitted.message'
    }
};

class RxApplicationIssuesService {
    constructor(httpClient, rxSystemConfigurationService) {
        this.httpClient = httpClient;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
    }
    getIssueReportingInfo() {
        return this.httpClient.get('/api/rx/application/oauth/token/IssueReporting');
    }
    getIssuesResource() {
        return forkJoin({
            issueReportingInfo: this.getIssueReportingInfo(),
            errorReportingInfo: this.rxSystemConfigurationService.getConfiguration('Error-Reporting-Service-Saas-Configuration')
        }).pipe(map$1((data) => {
            const errorReportingValue = JSON.parse(data.errorReportingInfo.value);
            const issuesResource = {
                issueReportingInfo: data.issueReportingInfo,
                errorReportingValue: errorReportingValue
            };
            return issuesResource;
        }));
    }
}
RxApplicationIssuesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApplicationIssuesService, deps: [{ token: i1$2.HttpClient }, { token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
RxApplicationIssuesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApplicationIssuesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApplicationIssuesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i2.RxSystemConfigurationService }]; } });

class IssueDetailsComponent {
    constructor(dockedPanelContext) {
        this.dockedPanelContext = dockedPanelContext;
    }
    ngOnInit() {
        this.issueFields = this.dockedPanelContext.getData();
        this.fieldIds = RX_ISSUES.issuesRecordFieldIds;
        this.coreFieldIds = RX_RECORD_DEFINITION.coreFieldIds;
    }
    close() {
        this.dockedPanelContext.close(DismissReasons.CLOSE_BTN);
    }
}
IssueDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueDetailsComponent, deps: [{ token: i1$1.DockedPanelContext }], target: i0.ɵɵFactoryTarget.Component });
IssueDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IssueDetailsComponent, selector: "rx-issue-detail", ngImport: i0, template: "<div class=\"dp-body\">\n  <div *ngIf=\"issueFields[fieldIds.caseId]\">\n    <h6 class=\"text-tertiary\" rx-id=\"case-id\">\n      {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-id.title' | translate }}\n    </h6>\n    <p class=\"text-default\">\n      {{ issueFields[fieldIds.caseId] }}\n    </p>\n    <div class=\"row\">\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"case-status\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-status.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields.selectionFieldOptionNamesById[fieldIds.caseStatus] }}\n        </p>\n      </div>\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"case-status-modified-date\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed-date.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields[fieldIds.caseStatusRefreshDate] | date: 'medium' }}\n        </p>\n      </div>\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"submitted-to-support-date\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.submitted-date.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields[fieldIds.submittedToSupportDate] | date: 'medium' }}\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"issue-status\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.issue-status.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields.selectionFieldOptionNamesById[coreFieldIds.status] }}\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"reported-by\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.reported-by.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields[coreFieldIds.createdBy] }}\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"reported-date\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.reported-date.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields[coreFieldIds.createdDate] | date: 'medium' }}\n      </p>\n    </div>\n  </div>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"application-name\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.application-name.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.applicationName] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"error-number\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.error-number.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.errorNumber] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"error-message\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.error-message.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.errorMessage] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"short-description\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.user-description.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.userDescription] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"operation-id\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.operation-id.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.operationId] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"guid\">\n    {{ 'com.bmc.arsys.rx.client.common.guid.label' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[coreFieldIds.id] }}\n  </p>\n  <div *ngIf=\"issueFields[fieldIds.relatedRecordGuid]\">\n    <h6 class=\"title-item text-tertiary\" rx-id=\"related-record-guid\">\n      {{ 'com.bmc.arsys.rx.client.admin.application-issues.related-issue-guid.title' | translate }}\n    </h6>\n    <p class=\"text-default\">\n      {{ issueFields[fieldIds.relatedRecordGuid] }}\n    </p>\n  </div>\n</div>\n<div class=\"dp-footer\">\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe, "date": i8.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-issue-detail',
                    templateUrl: './issue-details.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }]; } });

class CloseDuplicateIssuesComponent {
    constructor(adaptDockedPanelService, dockedPanelContext, rxCommandFactoryService, rxNotificationService, translateService) {
        this.adaptDockedPanelService = adaptDockedPanelService;
        this.dockedPanelContext = dockedPanelContext;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.selectedIssuesGridColumns = [
            {
                field: `${RX_ISSUES.issuesRecordFieldIds.applicationName}`,
                header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
            },
            {
                field: `${RX_ISSUES.issuesRecordFieldIds.errorNumber}`,
                header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title')
            },
            {
                field: `${RX_ISSUES.issuesRecordFieldIds.errorMessage}`,
                header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title'),
                sortable: false
            }
        ];
    }
    ngOnInit() {
        this.selectedIssuesData = this.dockedPanelContext.getData();
        this.submittedIssuesGridConfiguration();
    }
    getSubmittedIssuesGridColumns() {
        return [
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.applicationName}`,
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.errorNumber}`,
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.showIssueDetails(lastActionRow)
                    }
                ]
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.errorMessage}`,
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.createdDate}`,
                index: 3,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-date.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.caseId}`,
                index: 4,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-id.title')
            }
        ];
    }
    submittedIssuesGridConfiguration() {
        this.submittedIssuesGridConfiguration$ = of({
            recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
            columns: this.getSubmittedIssuesGridColumns(),
            filterExpression: `'${RX_RECORD_DEFINITION.coreFieldIds.status}' = "${RX_ISSUES.statusOptionValues.submitted}"`,
            styles: 'flex-fill'
        });
    }
    cancel() {
        this.dockedPanelContext.close('');
    }
    closeSelectedIssues() {
        const selection = head(this.submittedIssuesGrid.api.getSelectedRows());
        this.rxCommandFactoryService
            .forResourceType('com.bmc.arsys.rx.application.support.command.UpdateIssuesAsDuplicateCommand')
            .execute({
            recordId: selection[RX_RECORD_DEFINITION.coreFieldIds.id],
            recordIds: map(this.dockedPanelContext.getData(), (record) => record[RX_RECORD_DEFINITION.coreFieldIds.id])
        })
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_ISSUES.notificationMessages.duplicateIssuesClosed));
            this.dockedPanelContext.close('close');
        });
    }
    isCloseSelectedIssuesButtonDisabled() {
        return this.submittedIssuesGrid.api.getSelectedRows().length === 0;
    }
    showIssueDetails(rowData) {
        this.adaptDockedPanelService.open({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-details.title'),
            content: IssueDetailsComponent,
            size: 'lg',
            data: rowData
        });
    }
}
CloseDuplicateIssuesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CloseDuplicateIssuesComponent, deps: [{ token: i1$1.AdaptDockedPanelService }, { token: i1$1.DockedPanelContext }, { token: i2.RxCommandFactoryService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CloseDuplicateIssuesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CloseDuplicateIssuesComponent, selector: "rx-close-duplicate-issues", viewQueries: [{ propertyName: "submittedIssuesGrid", first: true, predicate: ["submittedIssuesGrid"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"dp-body d-flex flex-column\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h5 class=\"mt-0\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.selected-issues.title' | translate }}\n      </h5>\n      <adapt-table\n        rx-id=\"selected-issues-grid\"\n        [columns]=\"selectedIssuesGridColumns\"\n        [bordered]=\"true\"\n        [sortable]=\"true\"\n        [value]=\"selectedIssuesData\"\n      >\n      </adapt-table>\n    </div>\n  </div>\n  <div class=\"row flex-fill\">\n    <div class=\"col-12 d-flex flex-column\">\n      <h5>\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.duplicates.title' | translate }}\n      </h5>\n      <rx-record-grid\n        class=\"flex-fill\"\n        rx-id=\"submitted-issues-grid\"\n        #submittedIssuesGrid\n        [config]=\"submittedIssuesGridConfiguration$\"\n      ></rx-record-grid>\n    </div>\n  </div>\n</div>\n<div class=\"dp-footer\">\n  <button\n    rx-id=\"close-selected-issues-button\"\n    adapt-button\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    [disabled]=\"isCloseSelectedIssuesButtonDisabled()\"\n    (click)=\"closeSelectedIssues()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.close-selected.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" rx-id=\"cancel-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i4$3.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CloseDuplicateIssuesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-close-duplicate-issues',
                    templateUrl: './close-duplicate-issues.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.AdaptDockedPanelService }, { type: i1$1.DockedPanelContext }, { type: i2.RxCommandFactoryService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }]; }, propDecorators: { submittedIssuesGrid: [{
                type: ViewChild,
                args: ['submittedIssuesGrid', { static: true }]
            }] } });

class SubmitIssueToSupportComponent extends RxModalClass {
    constructor(activeModalRef, formBuilder, rxApplicationIssuesService, rxCommandFactoryService, rxModalService, rxNotificationService, rxStringService, translateService, injector) {
        super(activeModalRef, injector);
        this.activeModalRef = activeModalRef;
        this.formBuilder = formBuilder;
        this.rxApplicationIssuesService = rxApplicationIssuesService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.rxStringService = rxStringService;
        this.translateService = translateService;
        this.injector = injector;
        this.issueSeverityOptions = [
            {
                name: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-critical.message'),
                id: 1
            },
            {
                name: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-high.message'),
                id: 2
            },
            {
                name: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-medium.message'),
                id: 3
            },
            {
                name: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-low.message'),
                id: 4
            }
        ];
    }
    ngOnInit() {
        super.ngOnInit();
        this.submitIssueForm = this.formBuilder.group({
            description: [],
            severity: []
        });
        this.issues = this.activeModalRef.getData().issues;
        this.rxApplicationIssuesService.getIssuesResource().subscribe((issues) => {
            const { errorReportingValue } = issues;
            this.supportCentralUrl = errorReportingValue.supportCentralUrl;
        });
        this.message = this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-issues.title', { numberOfIssues: this.issues.length });
    }
    isDirty() {
        return this.submitIssueForm.dirty;
    }
    initSearchQuery() {
        if (this.issues.length >= 1) {
            const errorMessage = this.issues[0][RX_ISSUES.issuesRecordFieldIds.errorMessage];
            const errorNumber = this.issues[0][RX_ISSUES.issuesRecordFieldIds.errorNumber];
            const applicationName = this.issues[0][RX_ISSUES.issuesRecordFieldIds.applicationName];
            const searchQuery = `?fromproduct=helixplatform#q=${errorMessage}%20OR%20${errorNumber}&t=All&sort=relevancy&f:@bmcproductname=[${applicationName}]`;
            window.open(this.supportCentralUrl + searchQuery);
        }
    }
    submit() {
        this.rxCommandFactoryService
            .forResourceType('com.bmc.arsys.rx.application.support.command.CreateSupportCaseCommand')
            .execute({
            description: this.submitIssueForm.get('description').value,
            recordIds: map(this.issues, RX_RECORD_DEFINITION.coreFieldIds.id),
            severity: this.submitIssueForm.get('severity').value[0].id
        })
            .pipe(catchError((error) => {
            if (error.error[0].messageNumber === RX_ISSUES.linkExpiredError.code) {
                this.rxNotificationService.addErrorMessage(RX_ISSUES.linkExpiredError.message);
            }
            return throwError(error);
        }))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_ISSUES.notificationMessages.caseSubmitted));
            this.activeModalRef.close('cancel');
        });
    }
    optionFormatter(severity) {
        return severity.name;
    }
    cancel() {
        if (this.submitIssueForm.get('description')) {
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.cancel-submission.message')
            })
                .then((data) => {
                if (data)
                    this.activeModalRef.close();
            });
        }
        else {
            this.activeModalRef.close();
        }
    }
}
SubmitIssueToSupportComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SubmitIssueToSupportComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: i1$3.FormBuilder }, { token: RxApplicationIssuesService }, { token: i2.RxCommandFactoryService }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i3.RxStringService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
SubmitIssueToSupportComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SubmitIssueToSupportComponent, selector: "rx-submit-issue-to-support", usesInheritance: true, ngImport: i0, template: "<div class=\"modal-body pt-0\">\n  <div class=\"row bg-info\" *ngIf=\"supportCentralUrl\">\n    <button\n      adapt-button\n      rx-id=\"knowledge-articles-button\"\n      type=\"button\"\n      class=\"btn btn-secondary m-2\"\n      size=\"xtra-small\"\n      (click)=\"initSearchQuery()\"\n    >\n      <span class=\"d-icon-lightbulb_o p-2\" aria-hidden=\"true\"></span>\n      {{\n        'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.knowledge-articles.title' | translate\n      }}\n    </button>\n    <span class=\"mt-3 text-default-inverse\" rx-id=\"message\">{{\n      'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.search-knowledge-articles.message'\n        | translate\n    }}</span>\n  </div>\n  <div class=\"row mt-2\">\n    <div class=\"col-md-12\">\n      <p rx-id=\"message\">{{ message }}</p>\n    </div>\n  </div>\n  <form [formGroup]=\"submitIssueForm\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-textarea\n          rx-id=\"description\"\n          formControlName=\"description\"\n          label=\"Description\"\n          placeholder=\"Enter Issue Description\"\n          rows=\"7\"\n          required\n        ></adapt-rx-textarea>\n      </div>\n    </div>\n\n    <div class=\"row mt-4 mb-4\">\n      <div class=\"col-4\">\n        <adapt-rx-select\n          rx-id=\"severity\"\n          formControlName=\"severity\"\n          [options]=\"issueSeverityOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          label=\"Severity\"\n          required\n        ></adapt-rx-select>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"submit-case-button\"\n    [disabled]=\"submitIssueForm.invalid\"\n    (click)=\"submit()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.submit-case.label' | translate }}\n  </button>\n  <button rx-id=\"cancel-button\" adapt-button btn-type=\"secondary\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SubmitIssueToSupportComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-submit-issue-to-support',
                    templateUrl: './submit-issue-to-support.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: i1$3.FormBuilder }, { type: RxApplicationIssuesService }, { type: i2.RxCommandFactoryService }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i3.RxStringService }, { type: i4.TranslateService }, { type: i0.Injector }]; } });

class ApplicationIssuesAdminComponent {
    constructor(adaptDockedPanelService, rxApplicationIssuesService, rxCommandFactoryService, rxCurrentUserService, rxDeleteRecordsViewActionService, translateService, rxNotificationService, rxModalService) {
        this.adaptDockedPanelService = adaptDockedPanelService;
        this.rxApplicationIssuesService = rxApplicationIssuesService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxDeleteRecordsViewActionService = rxDeleteRecordsViewActionService;
        this.translateService = translateService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        this.issuesRecordGridConfiguration$ = new Observable((observer) => {
            if (this.isAdministrator) {
                observer.next({
                    recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
                    columns: this.getIssueColumns(),
                    actionButtons: this.getActionButtons(),
                    styles: 'flex-fill'
                });
            }
            observer.complete();
        });
    }
    ngOnInit() {
        this.rxApplicationIssuesService.getIssuesResource().subscribe((issues) => {
            const { issueReportingInfo, errorReportingValue } = issues;
            this.issueReportingInfo = issueReportingInfo;
            this.supportCentralUrl = errorReportingValue.supportCentralUrl;
        });
    }
    getIssueColumns() {
        return [
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.applicationName}`,
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.errorNumber}`,
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.showIssueDetails(lastActionRow)
                    }
                ]
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.errorMessage}`,
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.createdBy}`,
                index: 3,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-by.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.createdDate}`,
                index: 4,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-date.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.status}`,
                index: 5,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-status.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.caseId}`,
                index: 6,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-id.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.caseStatus}`,
                index: 7,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-status.title')
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.caseStatusRefreshDate}`,
                index: 8,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed-date.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.displayId}`,
                index: 9,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                visible: false
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.id}`,
                index: 10,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.guid.label'),
                visible: false
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.userDescription}`,
                index: 11,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.user-description.title'),
                visible: false
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.operationId}`,
                index: 12,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.operation-id.title'),
                visible: false
            },
            {
                fieldId: `${RX_ISSUES.issuesRecordFieldIds.relatedRecordGuid}`,
                index: 13,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.related-issue-guid.title'),
                visible: false
            }
        ];
    }
    getActionButtons() {
        return [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.view-details.label'),
                style: 'tertiary',
                disabled: () => {
                    return this.issuesRecordGrid.api.getSelectedRowCount() !== 1;
                },
                iconCls: 'search_plus',
                actions: [
                    {
                        name: () => {
                            this.showIssueDetails(this.issuesRecordGrid.api.getFirstSelectedRow());
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.search-knowledge-articles.label'),
                style: 'tertiary',
                disabled: () => {
                    return (!this.supportCentralUrl ||
                        this.issuesRecordGrid.api.getSelectedRowCount() !== 1 ||
                        this.issuesRecordGrid.api.getSelectedRows()[0][RX_RECORD_DEFINITION.coreFieldIds.status] !==
                            RX_ISSUES.statusOptionValues.new);
                },
                iconCls: 'search',
                actions: [
                    {
                        name: () => {
                            const selectedRow = this.issuesRecordGrid.api.getSelectedRows();
                            const errorMessage = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.errorMessage];
                            const errorNumber = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.errorNumber];
                            const applicationName = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.applicationName];
                            const searchQuery = `?fromproduct=helixplatform#q=${errorMessage}%20OR%20${errorNumber}&t=All&sort=relevancy&f:@bmcproductname=[${applicationName}]`;
                            window.open(this.supportCentralUrl + searchQuery);
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-to-bmc.label'),
                style: 'tertiary',
                iconCls: 'file_arrow_right',
                disabled: () => {
                    return (!this.issueReportingInfo.configured ||
                        some(this.issuesRecordGrid.api.getSelectedRows(), (record) => {
                            return record[RX_RECORD_DEFINITION.coreFieldIds.status] !== RX_ISSUES.statusOptionValues.new;
                        }));
                },
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .openModal({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-to-support.title'),
                                content: SubmitIssueToSupportComponent,
                                size: 'default',
                                data: {
                                    issues: this.issuesRecordGrid.api.getSelectedRows()
                                }
                            })
                                .then((result) => {
                                if (result) {
                                    this.issuesRecordGrid.api.refresh().subscribe();
                                }
                            })
                                .catch(noop);
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.refresh-case-status.label'),
                style: 'tertiary',
                iconCls: 'refresh',
                disabled: () => {
                    return (!this.issueReportingInfo.configured ||
                        some(this.issuesRecordGrid.api.getSelectedRows(), (record) => {
                            return !record[RX_ISSUES.issuesRecordFieldIds.caseId];
                        }));
                },
                actions: [
                    {
                        name: () => {
                            const selection = this.issuesRecordGrid.api.getSelectedRows();
                            this.rxCommandFactoryService
                                .forResourceType('com.bmc.arsys.rx.application.support.command.UpdateSupportCaseStatusCommand')
                                .execute({ recordIds: map(selection, RX_RECORD_DEFINITION.coreFieldIds.id) })
                                .pipe(catchError((error) => {
                                if (error.error[0].messageNumber === RX_ISSUES.linkExpiredError.code) {
                                    this.rxNotificationService.addErrorMessage(this.translateService.instant(RX_ISSUES.linkExpiredError.message));
                                }
                                return throwError(error);
                            }), tap(() => this.issuesRecordGrid.api.refresh().subscribe()))
                                .subscribe(() => {
                                this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_ISSUES.notificationMessages.caseStatusRefreshed));
                            });
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.close-as-duplicates.label'),
                style: 'tertiary',
                iconCls: 'cross_adapt',
                disabled: () => {
                    return some(this.issuesRecordGrid.api.getSelectedRows(), (record) => {
                        return record[RX_RECORD_DEFINITION.coreFieldIds.status] !== RX_ISSUES.statusOptionValues.new;
                    });
                },
                actions: [
                    {
                        name: () => {
                            this.adaptDockedPanelService
                                .open({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.close-duplicate-issues.title'),
                                content: CloseDuplicateIssuesComponent,
                                data: this.issuesRecordGrid.api.getSelectedRows(),
                                size: 'lg'
                            })
                                .then((result) => {
                                if (result) {
                                    this.issuesRecordGrid.api.refresh().subscribe();
                                }
                            }, () => { });
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                iconCls: 'trash',
                disabled: () => {
                    return some(this.issuesRecordGrid.api.getSelectedRows(), (record) => {
                        return record[RX_RECORD_DEFINITION.coreFieldIds.status] === RX_ISSUES.statusOptionValues.submitted;
                    });
                },
                actions: [
                    {
                        name: () => {
                            this.rxDeleteRecordsViewActionService
                                .execute({
                                recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
                                records: this.issuesRecordGrid.api
                            })
                                .subscribe();
                        }
                    }
                ]
            }
        ];
    }
    showIssueDetails(rowData) {
        this.adaptDockedPanelService.open({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-details.title'),
            content: IssueDetailsComponent,
            size: 'lg',
            data: rowData
        });
    }
}
ApplicationIssuesAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesAdminComponent, deps: [{ token: i1$1.AdaptDockedPanelService }, { token: RxApplicationIssuesService }, { token: i2.RxCommandFactoryService }, { token: i2.RxCurrentUserService }, { token: i4$4.RxDeleteRecordsViewActionService }, { token: i4.TranslateService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }], target: i0.ɵɵFactoryTarget.Component });
ApplicationIssuesAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApplicationIssuesAdminComponent, selector: "rx-admin-application-issues", viewQueries: [{ propertyName: "issuesRecordGrid", first: true, predicate: ["issuesRecordGrid"], descendants: true }], ngImport: i0, template: "<rx-admin-settings\n  *ngIf=\"isAdministrator\"\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.application-issues.header.title' | translate }}\"\n>\n  <rx-record-grid rx-id=\"issues-grid\" #issuesRecordGrid [config]=\"issuesRecordGridConfiguration$\"></rx-record-grid>\n</rx-admin-settings>\n\n<adapt-alert\n  *ngIf=\"!isAdministrator\"\n  class=\"p-4\"\n  [config]=\"{\n    title: 'com.bmc.arsys.rx.client.admin.access-denied.title' | translate,\n    content: 'com.bmc.arsys.rx.client.admin.access-denied.message' | translate,\n    variant: 'danger'\n  }\"\n></adapt-alert>\n", styles: [".icon-size{font-size:20px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-application-issues',
                    templateUrl: './application-issues.component.html',
                    styleUrls: ['./application-issues.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.AdaptDockedPanelService }, { type: RxApplicationIssuesService }, { type: i2.RxCommandFactoryService }, { type: i2.RxCurrentUserService }, { type: i4$4.RxDeleteRecordsViewActionService }, { type: i4.TranslateService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }]; }, propDecorators: { issuesRecordGrid: [{
                type: ViewChild,
                args: ['issuesRecordGrid']
            }] } });

class ApplicationIssuesRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-application-issues',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApplicationIssuesAdminComponent),
            name: 'Application issues',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ApplicationIssuesRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ApplicationIssuesRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesRegistrationModule, declarations: [ApplicationIssuesAdminComponent,
        IssueDetailsComponent,
        CloseDuplicateIssuesComponent,
        SubmitIssueToSupportComponent], imports: [i1$1.AdaptAlertModule, AdaptButtonModule,
        AdaptRxSelectModule,
        AdaptRxTextareaModule,
        AdaptTableModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        RecordGridModule,
        TranslateModule] });
ApplicationIssuesRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesRegistrationModule, imports: [[
            AdaptAlertModule.forRoot(),
            AdaptButtonModule,
            AdaptRxSelectModule,
            AdaptRxTextareaModule,
            AdaptTableModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RecordGridModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApplicationIssuesRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ApplicationIssuesAdminComponent,
                        IssueDetailsComponent,
                        CloseDuplicateIssuesComponent,
                        SubmitIssueToSupportComponent
                    ],
                    imports: [
                        AdaptAlertModule.forRoot(),
                        AdaptButtonModule,
                        AdaptRxSelectModule,
                        AdaptRxTextareaModule,
                        AdaptTableModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        RecordGridModule,
                        TranslateModule
                    ],
                    entryComponents: [
                        ApplicationIssuesAdminComponent,
                        IssueDetailsComponent,
                        CloseDuplicateIssuesComponent,
                        SubmitIssueToSupportComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_APPROVAL_CONFIGURATION = {
    selfApproval: {
        apForm: {
            name: 'AP:Form',
            fields: {
                formName: 12000,
                formRequestId: 10014,
                notesField: 10009,
                requester: 10015,
                summary: 10002,
                field3: 10004,
                field4: 10005,
                field5: 10006,
                field6: 10007,
                field7: 61001,
                securityLabels: 14850
            }
        },
        mapping: {
            name: 'com.bmc.arsys.rx.approval:SelfApprovalMappingV2',
            fields: {
                precedence: 10004,
                qualification: 10001,
                auditInformation: 12700,
                recordDefinition: 10000,
                approvalFlowName: 10002,
                approvalFlowGuid: 10003,
                hiddenQualification: 10006,
                applicationBundleId: 61001
            }
        },
        flowList: {
            name: 'com.bmc.arsys.rx.approval:SelfApprovalFlowList',
            fields: {
                recordDefinition: 10000,
                selfApprovalFlowName: 10001,
                selfApprovalFlowProcessDefinitionGuid: 10002
            }
        }
    },
    flowQualificationProperty: 'approvalQualification',
    approverQualificationProperty: 'approverQualification',
    noApproverProvided: 'NO_APPROVER_PROVIDED',
    signingCriteriaPercentageList: [50, 60, 70, 80, 90],
    approverCriteria: {
        oneMust: 0,
        allMust: 1,
        percentage: 2
    },
    approverTypes: {
        functionalRole: 'functionalRole',
        fieldIdentifying: 'fieldIdentifying',
        people: 'people',
        company: 'company',
        org: 'org',
        dept: 'dept',
        supportCompany: 'supportCompany',
        supportOrg: 'supportOrg',
        supportGroup: 'supportGroup'
    },
    approverFields: {
        companyField: 1000000001,
        organizationField: 1000000010,
        departmentField: 200000006,
        supportOrgField: 1000000014,
        supportGroupField: 1000000015,
        firstName: 1000000019,
        lastName: 1000000018,
        remedyLoginId: 4
    },
    valueSeparator: '_',
    approverSeparator: ';',
    levelSeparator: '[:]',
    approverFormatPrefixes: {
        people: 'U[:]',
        functionalRole: 'FR[:]',
        company: 'COM',
        companyOrg: 'COMORG',
        companyOrgDept: 'COMORGDEPT',
        supportCompany: 'SCOM',
        supportCompanyOrg: 'SCOMSORG',
        supportCompanyOrgGroup: 'SCOMSORGSGRP'
    }
};

class RxApprovalConfigurationService {
    constructor(httpClient, rxFunctionalRoleDataPageService) {
        this.httpClient = httpClient;
        this.rxFunctionalRoleDataPageService = rxFunctionalRoleDataPageService;
        this.selfApprovalApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/approvalmapping';
        this.registrationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/registration';
        this.flowConfigurationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/flowconfiguration';
    }
    getRegisteredRecordDetails(registeredRecordDefinitionName) {
        return this.httpClient.get(`${this.registrationApi}/${registeredRecordDefinitionName}`);
    }
    registerRecord(approvalRegistrationRecord) {
        return this.httpClient.post(this.registrationApi, approvalRegistrationRecord);
    }
    updateRecord(approvalRegistrationRecord) {
        return this.httpClient.put(`${this.registrationApi}/${approvalRegistrationRecord.recordDefinition}`, approvalRegistrationRecord);
    }
    unRegisterRecord(definitionName) {
        return this.httpClient.delete(`${this.registrationApi}/${encodeURIComponent(definitionName)}`);
    }
    createSelfApprovalConfiguration(configuration) {
        return this.httpClient.post(this.selfApprovalApi, configuration);
    }
    updateSelfApprovalConfiguration(id, configuration) {
        return this.httpClient.put(`${this.selfApprovalApi}/${RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name}/${id}`, configuration);
    }
    deleteSelfApprovalConfiguration(id) {
        return this.httpClient.delete(`${this.selfApprovalApi}/${RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name}/${id}`);
    }
    getFunctionalRoles() {
        if (!this.functionalRoles$) {
            this.functionalRoles$ = this.rxFunctionalRoleDataPageService
                .get({
                params: {
                    pageSize: -1,
                    propertySelection: ['applicationName', 'name']
                }
            })
                .pipe(map$1((response) => response.data.map((role) => ({
                id: role.id,
                name: role.name,
                applicationName: role.applicationName
            }))), shareReplay(1));
        }
        return this.functionalRoles$;
    }
    getApprovalFlowConfigurations(registeredRecordDefinition) {
        return this.httpClient.get(`${this.flowConfigurationApi}/${registeredRecordDefinition}`);
    }
    updateApprovalFlowGroup(flowGroupName, flowGroupConfiguration, recordDefinitionName) {
        return this.httpClient.put(`${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(flowGroupName)}`, flowGroupConfiguration);
    }
    saveApprovalFlowGroup(flowGroupConfiguration, recordDefinitionName) {
        return this.httpClient.post(`${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName`, flowGroupConfiguration);
    }
    getApprovalFlowGroup(recordDefinitionName, flowGroupName) {
        return this.httpClient.get(`${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(flowGroupName)}`);
    }
    deleteApprovalFlowGroup(flowGroupName, recordDefinitionName) {
        return this.httpClient.delete(`${this.flowConfigurationApi}/${encodeURIComponent(recordDefinitionName)}/flowGroupName/${encodeURIComponent(flowGroupName)}`);
    }
    getCtmPeopleFormFields(bundleId) {
        return this.httpClient.get(`/api/com.bmc.arsys.rx.approval/rx/application/approval/recorddefinition/people/${bundleId}`);
    }
    isFunctionalRole(approver) {
        return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.functionalRole);
    }
    getFunctionalRoleGuid(approver) {
        // FR[:]AGGADG2BIX85UAQM80BBQM80BBBM9X -> AGGADG2BIX85UAQM80BBQM80BBBM9X
        return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];
    }
    isApproverPeople(approver) {
        // check if approver is a User, returns true for 'U[:]abc'
        return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.people);
    }
    getApproverUser(approver) {
        // 'U[:]abc' -> abc
        return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];
    }
    isFieldIdentifyingApprover(approver) {
        // checks if string is surrounded by $ e.g. $Display ID$
        return Boolean(approver.match(/\$(.*?)\$/g));
    }
    getFieldIdentifyingApprover(approver) {
        // $Display ID$ -> Display ID
        return trim(approver, '$');
    }
    getLastLabel(approver) {
        // finds approver name from hierarchy format e.g. returns Payroll from COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll
        return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator).pop();
    }
    isCompany(approver) {
        // true when Approver value is prefixed by COM e.g. COM[:]Calbro Services
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.company);
    }
    isCompanyOrg(approver) {
        // true when Approver value is prefixed by COMORG e.g. COMORG[:]Calbro Services[:]Human Resources
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrg);
    }
    isCompanyOrgDept(approver) {
        // true when Approver value is prefixed by COMORGDEPT i.e. value is a department with hierarchy e.g. COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrgDept);
    }
    isSupportCompany(approver) {
        // true when Approver value is prefixed by SCOM e.g. SCOM[:]Calbro Services
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompany);
    }
    isSupportCompanyOrg(approver) {
        // true when Approver value is prefixed by SCOMSORG e.g. SCOMSORG[:]Calbro Services[:]IT Support
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrg);
    }
    isSupportCompanyOrgGroup(approver) {
        // true when Approver value is prefixed by SCOMSORGSGRP e.g. SCOMSORGSGRP[:]Calbro Services[:]IT Support[:]Backoffice Support
        return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
            RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrgGroup);
    }
}
RxApprovalConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalConfigurationService, deps: [{ token: i1$2.HttpClient }, { token: i2.RxFunctionalRoleDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });
RxApprovalConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i2.RxFunctionalRoleDataPageService }]; } });

class RxApprovalExpressionConfigurator extends RxExpressionConfigurator {
    constructor(injector) {
        super();
        this.injector = injector;
        this.translateService = this.injector.get(TranslateService);
        this.rxDefinitionNameService = this.injector.get(RxDefinitionNameService);
        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);
        this.rxAssociationNodeTreeDataPageService = this.injector.get(RxAssociationNodeTreeDataPageService);
        this.rxTreeService = this.injector.get(RxTreeService);
        this.rxApprovalConfigurationService = this.injector.get(RxApprovalConfigurationService);
        this.errorHandler = this.injector.get(ErrorHandler);
        this.commonDataDictionary$ = of([
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                children: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                        icon: 'd-icon-dollar',
                        expression: '$USER$'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                        icon: 'd-icon-dollar',
                        expression: '$DATE$'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                        icon: 'd-icon-dollar',
                        expression: '$TIME$'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                        icon: 'd-icon-dollar',
                        expression: '$TIMESTAMP$'
                    }
                ]
            }
        ]);
    }
    approvalExpressionDataDictionary(currentRecordDefinitionName) {
        const queryParams = {
            recorddefinition: currentRecordDefinitionName
        };
        return combineLatest([
            this.rxAssociationNodeTreeDataPageService.get({ params: queryParams }),
            this.commonDataDictionary$
        ]).pipe(switchMap(([associationNodeTreeDataPage, commonDataDictionary]) => {
            const associations = associationNodeTreeDataPage.data;
            const associatedRecordDefinitionNames = flow((approvalAssociations) => approvalAssociations.map((tree) => this.rxTreeService.flattenTree(tree, 'children').map((association) => association.value)), flatten$1, (approvalAssociations) => approvalAssociations.map((association) => association.recordDefinitionName))(associations);
            const definitionRequests$ = [
                this.rxRecordDefinitionCacheService.getRecordDefinition(currentRecordDefinitionName)
            ];
            forEach(associatedRecordDefinitionNames, (definitionName) => {
                definitionRequests$.push(this.rxRecordDefinitionCacheService.getRecordDefinition(definitionName));
            });
            return forkJoin(definitionRequests$).pipe(map$1((definitions) => {
                const params = {
                    definitionName: currentRecordDefinitionName,
                    definitions,
                    associationsByDefinition: {
                        [currentRecordDefinitionName]: associations
                    }
                };
                return [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'),
                        children: [
                            {
                                label: this.rxDefinitionNameService.getDisplayName(currentRecordDefinitionName),
                                children: this.getRecordDefinitionDataDictionary(params)
                            }
                        ]
                    },
                    ...commonDataDictionary
                ];
            }));
        }), shareReplay(1));
    }
    getRecordDefinitionDataDictionary(params) {
        const recordDefinition = find(params.definitions, { name: params.definitionName });
        const fields = recordDefinition.fieldDefinitions.map((field) => ({
            label: field.name,
            icon: 'd-icon-field_text',
            expression: params.association
                ? '${recordContext' +
                    `${params.parentAssociationExpression || ''}._associations.` +
                    `${params.association.value.associationDefintionGuid}.${params.association.value.nodeSide}[0].${field.id}}`
                : `'${field.name}'`
        }));
        if (params.associationsByDefinition && params.associationsByDefinition[recordDefinition.name]) {
            const associatedFields = this.getAssociationDataDictionary(params);
            if (associatedFields.length) {
                fields.unshift({
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition-associations.title'),
                    children: associatedFields
                });
            }
        }
        return fields;
    }
    getAssociationDataDictionary(params) {
        const associations = [];
        if (params.associationsByDefinition[params.definitionName].length) {
            forEach(params.associationsByDefinition[params.definitionName], (association) => {
                let parentAssociationExpression = '';
                const nextDefinitionAssociations = {};
                if (params.association) {
                    parentAssociationExpression = `._associations.${params.association.value.associationDefintionGuid}.${params.association.value.nodeSide}[0]`;
                }
                const currentAssociation = find(params.associationsByDefinition[params.definitionName], (item) => {
                    return item.value.recordDefinitionName === association.value.recordDefinitionName;
                });
                if (currentAssociation) {
                    nextDefinitionAssociations[association.value.recordDefinitionName] = currentAssociation.children;
                }
                associations.push({
                    label: association.value.nodeName !== association.value.recordDefinitionName
                        ? `${this.rxDefinitionNameService.getDisplayName(association.value.recordDefinitionName)} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})`
                        : this.rxDefinitionNameService.getDisplayName(association.value.nodeName),
                    children: this.getRecordDefinitionDataDictionary({
                        definitionName: association.value.recordDefinitionName,
                        definitions: params.definitions,
                        associationsByDefinition: nextDefinitionAssociations,
                        association,
                        parentAssociationExpression
                    }),
                    expression: `\${recordContext${parentAssociationExpression}._associations.` +
                        `${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]}`
                });
            });
        }
        return associations;
    }
    getCtmPeopleFormFields(registeredRecordDefinitionName) {
        return combineLatest([
            this.rxApprovalConfigurationService
                .getCtmPeopleFormFields(this.rxDefinitionNameService.getBundleId(registeredRecordDefinitionName || ''))
                .pipe(catchError((error) => {
                this.errorHandler.handleError(error);
                return of(null);
            })),
            this.commonDataDictionary$
        ]).pipe(map$1(([ctmPeopleDefinition, commonDataDictionary]) => {
            const dictionary = [...commonDataDictionary];
            if (ctmPeopleDefinition) {
                dictionary.unshift({
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                    children: ctmPeopleDefinition.fieldDefinitions.map((field) => ({
                        label: field.name,
                        icon: 'd-icon-field_text',
                        expression: `'${field.name}'`
                    }))
                });
            }
            return dictionary;
        }), shareReplay(1));
    }
}

class RxOrganizationDataPageService extends DataPage {
    constructor(injector) {
        super(injector, 'com.bmc.arsys.rx.approval.application.datapage.OrganizationDataPageQuery');
        this.injector = injector;
    }
}
RxOrganizationDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOrganizationDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxOrganizationDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOrganizationDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOrganizationDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class RxSupportOrganizationDataPageService extends DataPage {
    constructor(injector) {
        super(injector, 'com.bmc.arsys.rx.approval.application.datapage.SupportOrganizationDataPageQuery');
        this.injector = injector;
    }
}
RxSupportOrganizationDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSupportOrganizationDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxSupportOrganizationDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSupportOrganizationDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSupportOrganizationDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class FlowApproversSelectorComponent extends RxModalClass {
    constructor(rxTreeService, activeModalRef, rxModalService, translateService, rxGlobalCacheService, rxRecordInstanceUtilsService, rxOrganizationDataPageService, rxSupportOrganizationDataPageService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, injector) {
        super(activeModalRef, injector);
        this.rxTreeService = rxTreeService;
        this.activeModalRef = activeModalRef;
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
        this.rxOrganizationDataPageService = rxOrganizationDataPageService;
        this.rxSupportOrganizationDataPageService = rxSupportOrganizationDataPageService;
        this.rxApprovalConfigurationService = rxApprovalConfigurationService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.injector = injector;
        this.approverTypes = [];
        this.selectedApproverSelection = [];
        this.selectedApprovers = [];
        this.selectedCompanies = [];
        this.selectedOrganizations = [];
        this.selectedDepartments = [];
        this.selectedSupportCompanies = [];
        this.selectedSupportOrganizations = [];
        this.selectedSupportGroups = [];
        this.loadingMore = false;
        this.pageSize = 50;
        this.loadedUsers = [];
        this.showLoadMoreButton = true;
        this.treeWrap = TreeWrap.WrapAll;
        this.availableFields = [];
        this.availableFunctionRolesByApplication = [];
        this.shouldShowTree = true;
        this.separatorArrow = ' > ';
        this.companyLoaderFunc = this.companyLoader.bind(this);
        this.organizationLoaderFunc = this.organizationLoader.bind(this);
        this.departmentLoaderFunc = this.departmentLoader.bind(this);
        this.supportOrganizationLoaderFunc = this.supportOrganizationLoader.bind(this);
        this.supportGroupLoaderFunc = this.supportGroupLoader.bind(this);
    }
    isDirty() {
        return this.hasUserInteracted;
    }
    ngOnInit() {
        super.ngOnInit();
        this.loadUsers();
        this.loadFunctionalRoles();
        this.loadFieldIdentifyingApproversApprovers();
        this.approverTypes = [
            {
                value: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying')
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label'),
                disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
            }
        ];
        this.invalidMsg = this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying.warning');
        this.approverType = [
            find(this.approverTypes, {
                value: this.activeModalRef.getData().isFieldIdentifyingApprover
                    ? RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying
                    : RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole
            })
        ];
    }
    switchApproversTree() {
        this.selectedCompanies = [];
        this.selectedOrganizations = [];
        this.selectedDepartments = [];
        this.selectedSupportCompanies = [];
        this.selectedSupportOrganizations = [];
        this.selectedSupportGroups = [];
        this.availableFunctionRolesByApplication.forEach((application) => {
            application.roles.map((role) => (role.selected = false));
        });
        this.loadedUsers.map((user) => (user.selected = false));
        this.availableFields.map((field) => (field.selected = false));
    }
    companyLoader(startIndex, pageSize, searchQuery) {
        const queryParams = {
            startIndex: startIndex,
            pageSize: pageSize,
            recorddefinition: 'COM:Company',
            propertySelection: [RX_APPROVAL_CONFIGURATION.approverFields.companyField]
        };
        if (searchQuery) {
            queryParams.queryExpression = this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.companyField);
        }
        return this.rxRecordInstanceDataPageService
            .post({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((companyList) => ({
            totalSize: companyList.totalSize,
            options: companyList.data.map((item) => ({
                displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                value: this.getCompanyDataFormat(item[RX_APPROVAL_CONFIGURATION.approverFields.companyField])
            }))
        })));
    }
    getCompanyDataFormat(companyName) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.company}${RX_APPROVAL_CONFIGURATION.levelSeparator}${companyName}`;
    }
    onToggleDropdown(isOpen) {
        if (!isOpen) {
            this.resetLoadedOptions();
        }
    }
    resetLoadedOptions() {
        this.paginationComponents
            .toArray()
            .forEach((component) => component.resetLoadedOptions());
    }
    organizationLoader(startIndex, pageSize, searchQuery) {
        const queryParams = {
            startIndex: startIndex,
            pageSize: pageSize
        };
        if (searchQuery) {
            queryParams.organization = searchQuery;
        }
        else {
            queryParams.queryExpression = this.getDefaultSearchExpression();
        }
        if (this.selectedCompanies.length === 1) {
            queryParams.company = this.selectedCompanies[0].displayValue;
        }
        return this.rxOrganizationDataPageService
            .get({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((response) => ({
            totalSize: response.totalSize,
            options: response.data.map((item) => ({
                displayValue: item.organization,
                value: item.company
            }))
        })));
    }
    departmentLoader(startIndex, pageSize, searchQuery) {
        const queryParams = {
            recorddefinition: 'CTM:People Organization',
            propertySelection: [
                RX_APPROVAL_CONFIGURATION.approverFields.companyField,
                RX_APPROVAL_CONFIGURATION.approverFields.organizationField,
                RX_APPROVAL_CONFIGURATION.approverFields.departmentField
            ]
        };
        const queryList = [];
        if (searchQuery) {
            queryList.push(this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.departmentField));
        }
        if (this.selectedCompanies.length === 1) {
            queryList.push(this.getAdditionalQueryExpression(this.selectedCompanies[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.companyField, true));
        }
        if (this.selectedOrganizations.length === 1) {
            queryList.push(this.getAdditionalQueryExpression(this.selectedOrganizations[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.organizationField, true));
        }
        queryParams.queryExpression = queryList.join(' AND ');
        return this.rxRecordInstanceDataPageService
            .post({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((response) => ({
            totalSize: response.totalSize,
            options: response.data.map((item) => ({
                displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.departmentField],
                value: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                organization: item[RX_APPROVAL_CONFIGURATION.approverFields.organizationField]
            }))
        })));
    }
    supportOrganizationLoader(startIndex, pageSize, searchQuery) {
        const queryParams = {
            startIndex: startIndex,
            pageSize: pageSize
        };
        if (searchQuery) {
            queryParams.supportOrganization = searchQuery;
        }
        else {
            queryParams.queryExpression = this.getDefaultSearchExpression();
        }
        if (this.selectedSupportCompanies.length === 1) {
            queryParams.company = this.selectedSupportCompanies[0].displayValue;
        }
        return this.rxSupportOrganizationDataPageService
            .get({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((response) => ({
            totalSize: response.totalSize,
            options: response.data.map((item) => ({
                displayValue: item.supportOrganization,
                value: item.company
            }))
        })));
    }
    supportGroupLoader(startIndex, pageSize, searchQuery) {
        const queryParams = {
            recorddefinition: 'CTM:Support Group',
            propertySelection: [
                RX_APPROVAL_CONFIGURATION.approverFields.companyField,
                RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField,
                RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField
            ]
        };
        const queryList = [];
        if (searchQuery) {
            queryList.push(this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField));
        }
        if (this.selectedSupportCompanies.length === 1) {
            queryList.push(this.getAdditionalQueryExpression(this.selectedSupportCompanies[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.companyField, true));
        }
        if (this.selectedSupportOrganizations.length === 1) {
            queryList.push(this.getAdditionalQueryExpression(this.selectedSupportOrganizations[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField, true));
        }
        queryParams.queryExpression = queryList.join(' AND ');
        return this.rxRecordInstanceDataPageService
            .post({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((response) => ({
            totalSize: response.totalSize,
            options: response.data.map((item) => ({
                displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField],
                value: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                organization: item[RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField]
            }))
        })));
    }
    getAdditionalQueryExpression(searchQuery, fieldId, isEqualitySearch) {
        return isEqualitySearch
            ? `('${fieldId}' = "${searchQuery.replace(/"/g, '""')}")`
            : `('${fieldId}' LIKE "%${this.rxRecordInstanceUtilsService.escapeTextWildcards(searchQuery)}%")`;
    }
    loadUsers(inputEvent) {
        const queryParams = {
            recorddefinition: 'CTM:People',
            propertySelection: [
                RX_APPROVAL_CONFIGURATION.approverFields.firstName,
                RX_APPROVAL_CONFIGURATION.approverFields.lastName,
                RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId
            ],
            sortBy: RX_APPROVAL_CONFIGURATION.approverFields.firstName
        };
        this.startIndex = !isUndefined(this.startIndex) ? this.startIndex + this.pageSize : 0;
        this.loadingMore = true;
        if (!isUndefined(inputEvent)) {
            this.startIndex = 0;
            this.loadedUsers = [];
        }
        if (this.userSearchTextInput) {
            queryParams.queryExpression = this.getUserQueryExpression();
        }
        this.rxRecordInstanceDataPageService
            .post({
            params: Object.assign({ pageSize: this.pageSize, startIndex: this.startIndex }, queryParams)
        })
            .subscribe((response) => {
            this.loadedUsers = this.loadedUsers.concat(response.data);
            this.showLoadMoreButton = response.totalSize > this.loadedUsers.length;
            this.loadingMore = false;
        });
    }
    getUserQueryExpression() {
        return this.userSearchTextInput
            ? `('${RX_APPROVAL_CONFIGURATION.approverFields.firstName}' LIKE "%${this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput)}%") OR ('${RX_APPROVAL_CONFIGURATION.approverFields.lastName}' LIKE "%${this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput)}%") OR ('${RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId}' LIKE "%${this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput)}%")`
            : null;
    }
    loadFunctionalRoles() {
        forkJoin([
            this.rxApprovalConfigurationService.getFunctionalRoles(),
            this.rxGlobalCacheService.getBundleDescriptors()
        ])
            .pipe(tap(([functionalRoles, bundleDescriptors]) => {
            const globalLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
            this.addExistingApproversToSelectedTree(functionalRoles);
            this.availableFunctionRolesByApplication = flow((roles) => map(roles, (role) => {
                const bundleDescriptor = find(bundleDescriptors, { id: role.applicationName });
                return Object.assign(Object.assign({}, role), { applicationName: (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.friendlyName) || (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.id) || globalLabel });
            }), (roles) => groupBy(roles, 'applicationName'), (rolesByApplicationName) => map(rolesByApplicationName, (roles, applicationName) => ({
                applicationName,
                roles: map(roles, (role) => ({
                    id: role.id,
                    name: role.name,
                    selected: false
                })).sort((a, b) => a.name.localeCompare(b.name))
            })).sort((a, b) => a.applicationName.localeCompare(b.applicationName)))(functionalRoles);
        }))
            .subscribe();
    }
    removeApproversFromSelection() {
        this.hasUserInteracted = true;
        forEach(this.selectedApprovers, (node) => {
            remove(node.children, (childNode) => this.tree.first.isSelected(childNode));
        });
        this.selectedApprovers = this.selectedApprovers.filter((node) => node.children.length);
        this.selectedApproverSelection = [];
        this.reloadTree();
    }
    getNode(label, key, data) {
        return {
            label,
            key,
            data
        };
    }
    getFunctionalRoleDataFormat(guid) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.functionalRole}${guid}`;
    }
    transformFunctionRolesToNodeStructure() {
        const roles = [];
        this.availableFunctionRolesByApplication.forEach((application) => application.roles
            .filter((role) => role.selected)
            .forEach((selectedRole) => roles.push(this.getNode(`${selectedRole.name}`, `${selectedRole.id}`, this.getFunctionalRoleDataFormat(selectedRole.id)))));
        return roles;
    }
    transformFieldsToNodeStructure() {
        return this.availableFields
            .filter((field) => field.selected)
            .map((selectedField) => this.getNode(`${selectedField.name}`, `${selectedField.name}`, `$${selectedField.name}$`));
    }
    getPeopleDataFormat(userId) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.people}${userId}`;
    }
    transformPeopleToNodeStructure() {
        return this.loadedUsers
            .filter((user) => user.selected)
            .map((selectedUser) => this.getNode(`${selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.firstName]} ${selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.lastName]}`, `${selectedUser[4]}`, this.getPeopleDataFormat(selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId])));
    }
    getOrgDataFormat(company, org) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrg}${RX_APPROVAL_CONFIGURATION.levelSeparator}${company}${RX_APPROVAL_CONFIGURATION.levelSeparator}${org}`;
    }
    getDeptDataFormat(company, org, dept) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrgDept}${RX_APPROVAL_CONFIGURATION.levelSeparator}${company}${RX_APPROVAL_CONFIGURATION.levelSeparator}${org}${RX_APPROVAL_CONFIGURATION.levelSeparator}${dept}`;
    }
    getSupportOrgDataFormat(supportCompany, supportOrg) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrg}${RX_APPROVAL_CONFIGURATION.levelSeparator}${supportCompany}${RX_APPROVAL_CONFIGURATION.levelSeparator}${supportOrg}`;
    }
    getSupportGroupDataFormat(supportCompany, supportOrg, supportGroup) {
        return `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrgGroup}${RX_APPROVAL_CONFIGURATION.levelSeparator}${supportCompany}${RX_APPROVAL_CONFIGURATION.levelSeparator}${supportOrg}${RX_APPROVAL_CONFIGURATION.levelSeparator}${supportGroup}`;
    }
    transformToNodeStructure(selectedItems) {
        return selectedItems.map((option) => {
            let data = '';
            let label = `${option.displayValue} `;
            if (this.shouldMoveCompanies()) {
                data = option.value;
            }
            else if (this.shouldMoveOrganizations()) {
                data = this.getOrgDataFormat(option.value, option.displayValue);
                label += `(${option.value})`;
            }
            else if (this.shouldMoveDepartments()) {
                data = this.getDeptDataFormat(option.value, option.organization, option.displayValue);
                label += `(${option.value}${this.separatorArrow}${option.organization})`;
            }
            else if (this.shouldMoveSupportCompanies()) {
                data = `${RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompany}${RX_APPROVAL_CONFIGURATION.levelSeparator}${option.displayValue}`;
            }
            else if (this.shouldMoveSupportOrganizations()) {
                data = this.getSupportOrgDataFormat(option.value, option.displayValue);
                label += `(${option.value})`;
            }
            else if (this.shouldMoveSupportGroups()) {
                data = this.getSupportGroupDataFormat(option.value, option.organization, option.displayValue);
                label += `(${option.value}${this.separatorArrow}${option.organization})`;
            }
            return this.getNode(label, option.displayValue, data);
        });
    }
    onCompanySelectionChange() {
        this.selectedOrganizations = [];
        this.selectedDepartments = [];
    }
    onOrganizationSelectionChange() {
        this.selectedDepartments = [];
    }
    onSupportCompanySelectionChange() {
        this.selectedSupportOrganizations = [];
        this.selectedSupportGroups = [];
    }
    onSupportOrganizationSelectionChange() {
        this.selectedSupportGroups = [];
    }
    shouldMoveCompanies() {
        return this.selectedCompanies.length && !this.selectedOrganizations.length && !this.selectedDepartments.length;
    }
    shouldMoveOrganizations() {
        return this.selectedOrganizations.length && this.selectedCompanies.length <= 1 && !this.selectedDepartments.length;
    }
    shouldMoveDepartments() {
        return (this.selectedDepartments.length && this.selectedCompanies.length <= 1 && this.selectedOrganizations.length <= 1);
    }
    shouldMoveSupportCompanies() {
        return (this.selectedSupportCompanies.length &&
            !this.selectedSupportOrganizations.length &&
            !this.selectedSupportGroups.length);
    }
    shouldMoveSupportOrganizations() {
        return (this.selectedSupportOrganizations.length &&
            this.selectedSupportCompanies.length <= 1 &&
            !this.selectedSupportGroups.length);
    }
    shouldMoveSupportGroups() {
        return (this.selectedSupportGroups.length &&
            this.selectedSupportCompanies.length <= 1 &&
            this.selectedSupportOrganizations.length <= 1);
    }
    setFieldIdentifyingApprovers() {
        this.selectedApprovers = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                children: this.transformFieldsToNodeStructure(),
                expanded: true
            }
        ];
    }
    moveToSelectedApprovers() {
        let approverTypeNode = find(this.selectedApprovers, { type: this.approverType[0].value });
        if (this.isFieldIdentifyingSelection()) {
            if (this.selectedApprovers.length &&
                !find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying })) {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.field-identifying-select.warning')
                })
                    .then((result) => {
                    if (result) {
                        this.setFieldIdentifyingApprovers();
                    }
                });
            }
            else {
                this.setFieldIdentifyingApprovers();
            }
        }
        else if (this.isFunctionalRoleSelection()) {
            if (!approverTypeNode) {
                this.selectedApprovers.push({
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                    children: this.transformFunctionRolesToNodeStructure(),
                    expanded: true
                });
            }
            else {
                approverTypeNode.children.push(...this.transformFunctionRolesToNodeStructure());
            }
        }
        else if (this.isPeopleSelection()) {
            if (!approverTypeNode) {
                this.selectedApprovers.push({
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                    children: this.transformPeopleToNodeStructure(),
                    expanded: true
                });
            }
            else {
                approverTypeNode.children.push(...this.transformPeopleToNodeStructure());
            }
        }
        else if (this.isCompanySelection()) {
            if (this.shouldMoveCompanies()) {
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                        children: this.transformToNodeStructure(this.selectedCompanies),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedCompanies));
                }
            }
            else if (this.shouldMoveOrganizations()) {
                approverTypeNode = find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.org });
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.org,
                        children: this.transformToNodeStructure(this.selectedOrganizations),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedOrganizations));
                }
            }
            else if (this.shouldMoveDepartments()) {
                approverTypeNode = find(this.selectedApprovers, {
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.dept
                });
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.dept,
                        children: this.transformToNodeStructure(this.selectedDepartments),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedDepartments));
                }
            }
        }
        else if (this.isSupportCompanySelection()) {
            if (this.shouldMoveSupportCompanies()) {
                approverTypeNode = find(this.selectedApprovers, {
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.company
                });
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                        children: this.transformToNodeStructure(this.selectedSupportCompanies),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedSupportCompanies));
                }
            }
            else if (this.shouldMoveSupportOrganizations()) {
                approverTypeNode = find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg });
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg,
                        children: this.transformToNodeStructure(this.selectedSupportOrganizations),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedSupportOrganizations));
                }
            }
            else if (this.shouldMoveSupportGroups()) {
                approverTypeNode = find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup });
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup,
                        children: this.transformToNodeStructure(this.selectedSupportGroups),
                        expanded: true
                    });
                }
                else {
                    approverTypeNode.children.push(...this.transformToNodeStructure(this.selectedSupportGroups));
                }
            }
        }
        if (!this.isFieldIdentifyingSelection()) {
            remove(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying });
        }
        if (approverTypeNode) {
            approverTypeNode.expanded = true;
            approverTypeNode.children = uniqBy(approverTypeNode.children, 'key');
        }
        this.selectedApprovers = this.selectedApprovers
            .filter((approverNode) => approverNode.children.length)
            .map((node) => {
            node.children.sort((a, b) => a.label.localeCompare(b.label));
            return node;
        });
        this.hasUserInteracted = true;
        this.reloadTree();
    }
    reloadTree() {
        this.shouldShowTree = false;
        setTimeout(() => (this.shouldShowTree = true));
    }
    loadFieldIdentifyingApproversApprovers() {
        this.rxRecordDefinitionCacheService
            .getRecordDefinition(this.activeModalRef.getData().registeredRecordDefinitionName)
            .subscribe((fieldIdentifyingResponse) => (this.availableFields = fieldIdentifyingResponse.fieldDefinitions
            .map((field) => ({
            name: field.name,
            selected: false
        }))
            .sort((a, b) => a.name.localeCompare(b.name))));
    }
    noApproverSelected() {
        return ((this.isFieldIdentifyingSelection() && !some(this.availableFields, (field) => field.selected)) ||
            (this.isPeopleSelection() && !some(this.loadedUsers, (user) => user.selected)) ||
            (this.isFunctionalRoleSelection() &&
                !some(this.availableFunctionRolesByApplication, (application) => some(application.roles, (role) => role.selected))) ||
            Boolean(this.isCompanySelection() &&
                !this.selectedCompanies.length &&
                !this.selectedOrganizations.length &&
                !this.selectedDepartments.length));
    }
    isInvalidFieIdentifyingApprover() {
        return this.isFieldIdentifyingSelection() && sumBy(this.availableFields, 'selected') > 1;
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    isFieldIdentifyingSelection() {
        return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying;
    }
    isCompanySelection() {
        return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.company;
    }
    isSupportCompanySelection() {
        return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany;
    }
    isPeopleSelection() {
        return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.people;
    }
    isFunctionalRoleSelection() {
        return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole;
    }
    completeSelection() {
        const approvers = flow((allNodes) => map(allNodes, 'children'), flatten, (nodes) => map(nodes, (node) => {
            let label = '';
            if (this.rxApprovalConfigurationService.isCompanyOrg(node.data) ||
                this.rxApprovalConfigurationService.isCompanyOrgDept(node.data) ||
                this.rxApprovalConfigurationService.isSupportCompanyOrg(node.data) ||
                this.rxApprovalConfigurationService.isSupportCompanyOrgGroup(node.data)) {
                label = this.rxApprovalConfigurationService.getLastLabel(node.data);
            }
            return {
                value: node.data,
                displayValue: label || node.label
            };
        }))(this.selectedApprovers);
        const approver = {
            value: approvers.map((node) => node.value).join(RX_APPROVAL_CONFIGURATION.approverSeparator),
            displayValue: flow((items) => take$1(items, 10), (items) => map(items, 'displayValue'), (items) => join(items, ', '))(approvers)
        };
        if (approvers.length > 10) {
            approver.displayValue += '...';
        }
        this.activeModalRef.close(approver);
    }
    getEmptyApproverTree() {
        return [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.org,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.dept,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg,
                children: []
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                children: []
            }
        ];
    }
    addExistingApproversToSelectedTree(allFunctionalRoles) {
        this.selectedApprovers = this.getEmptyApproverTree();
        const approverList = this.activeModalRef
            .getData()
            .existingApprovers.split(RX_APPROVAL_CONFIGURATION.approverSeparator);
        forEach(approverList, (approver) => {
            if (this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approver)) {
                this.approverType = [
                    find(this.approverTypes, {
                        value: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying
                    })
                ];
                this.selectedApprovers = [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                        children: [
                            {
                                label: this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver),
                                key: this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver),
                                data: `$${this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver)}$`
                            }
                        ],
                        expanded: true
                    }
                ];
            }
            else if (this.rxApprovalConfigurationService.isFunctionalRole(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole }).children.push({
                    key: this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver),
                    data: this.getFunctionalRoleDataFormat(this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)),
                    label: get(find(allFunctionalRoles, {
                        id: this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)
                    }), 'name')
                });
            }
            else if (this.rxApprovalConfigurationService.isApproverPeople(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.people }).children.push({
                    key: approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1],
                    label: approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1],
                    data: this.getPeopleDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1])
                });
            }
            else if (this.rxApprovalConfigurationService.isCompany(approver) ||
                this.rxApprovalConfigurationService.isSupportCompany(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.company }).children.push({
                    label: this.rxApprovalConfigurationService.getLastLabel(approver),
                    key: `${this.rxApprovalConfigurationService.getLastLabel(approver)}`,
                    data: this.getCompanyDataFormat(this.rxApprovalConfigurationService.getLastLabel(approver))
                });
            }
            else if (this.rxApprovalConfigurationService.isCompanyOrg(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.org }).children.push({
                    label: `${this.rxApprovalConfigurationService.getLastLabel(approver)}${this.getHierarchyLabel(approver)}`,
                    key: `${this.rxApprovalConfigurationService.getLastLabel(approver)}`,
                    data: this.getOrgDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2])
                });
            }
            else if (this.rxApprovalConfigurationService.isCompanyOrgDept(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.dept }).children.push({
                    label: `${this.rxApprovalConfigurationService.getLastLabel(approver)}${this.getHierarchyLabel(approver)}`,
                    key: `${this.rxApprovalConfigurationService.getLastLabel(approver)}`,
                    data: this.getDeptDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[3])
                });
            }
            else if (this.rxApprovalConfigurationService.isSupportCompanyOrg(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg }).children.push({
                    label: `${this.rxApprovalConfigurationService.getLastLabel(approver)}${this.getHierarchyLabel(approver)}`,
                    key: `${this.rxApprovalConfigurationService.getLastLabel(approver)}`,
                    data: this.getSupportOrgDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2])
                });
            }
            else if (this.rxApprovalConfigurationService.isSupportCompanyOrgGroup(approver)) {
                find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup }).children.push({
                    label: `${this.rxApprovalConfigurationService.getLastLabel(approver)}${this.getHierarchyLabel(approver)}`,
                    key: `${this.rxApprovalConfigurationService.getLastLabel(approver)}`,
                    data: this.getSupportGroupDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[3])
                });
            }
        });
        this.selectedApprovers = this.selectedApprovers
            .filter((node) => node.children.length)
            .map((node) => {
            node.children.sort((a, b) => a.label.localeCompare(b.label));
            return node;
        });
    }
    getHierarchyLabel(approver) {
        const temp = approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator);
        temp.shift();
        temp.pop();
        return `(${temp.join(this.separatorArrow)})`;
    }
    close() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    getDefaultSearchExpression() {
        return `${RX_APPROVAL_CONFIGURATION.approverFields.companyField} != NULL`;
    }
}
FlowApproversSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FlowApproversSelectorComponent, deps: [{ token: i3.RxTreeService }, { token: i1$1.ActiveModalRef }, { token: i1.RxModalService }, { token: i4.TranslateService }, { token: i2.RxGlobalCacheService }, { token: i3$2.RxRecordInstanceUtilsService }, { token: RxOrganizationDataPageService }, { token: RxSupportOrganizationDataPageService }, { token: RxApprovalConfigurationService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
FlowApproversSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FlowApproversSelectorComponent, selector: "rx-flow-approvers-selector", viewQueries: [{ propertyName: "paginationComponents", predicate: ["paginationComponents"], descendants: true }, { propertyName: "tree", predicate: ["tree"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"approver-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <adapt-alert\n    *ngIf=\"isInvalidFieIdentifyingApprover()\"\n    [config]=\"{\n      variant: 'warning',\n      dismissible: false,\n      content: invalidMsg\n    }\"\n  ></adapt-alert>\n\n  <div class=\"d-flex h-100\">\n    <div class=\"flex-wrapper d-flex flex-column mh-100 wrapper-max-width\">\n      <h5 class=\"mt-1 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.available.label' | translate }}\n      </h5>\n\n      <adapt-rx-select\n        class=\"d-block form-group w-75\"\n        rx-id=\"approver-type\"\n        [(ngModel)]=\"approverType\"\n        [options]=\"approverTypes\"\n        (onSelectionChange)=\"switchApproversTree()\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n\n      <div class=\"flex-fill available-list\">\n        <div *ngIf=\"isCompanySelection()\" class=\"border section-wrapper flex-fill h-100\">\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedCompanies\"\n            [optionLoader]=\"companyLoaderFunc\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onCompanySelectionChange()\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedOrganizations\"\n            [optionLoader]=\"organizationLoaderFunc\"\n            [template]=\"orgOptionTemplate\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onOrganizationSelectionChange()\"\n            #paginationComponents\n            [disabled]=\"selectedCompanies.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedDepartments\"\n            [optionLoader]=\"departmentLoaderFunc\"\n            [template]=\"optionTemplate\"\n            isMultiSelectionMode=\"true\"\n            #paginationComponents\n            [disabled]=\"selectedCompanies.length > 1 || selectedOrganizations.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n        </div>\n\n        <div *ngIf=\"isSupportCompanySelection()\" class=\"border section-wrapper flex-fill h-100\">\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportCompanies\"\n            [optionLoader]=\"companyLoaderFunc\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onSupportCompanySelectionChange()\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportOrganizations\"\n            [optionLoader]=\"supportOrganizationLoaderFunc\"\n            [template]=\"orgOptionTemplate\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onSupportOrganizationSelectionChange()\"\n            #paginationComponents\n            [disabled]=\"selectedSupportCompanies.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportGroups\"\n            [optionLoader]=\"supportGroupLoaderFunc\"\n            [template]=\"optionTemplate\"\n            isMultiSelectionMode=\"true\"\n            #paginationComponents\n            [disabled]=\"selectedSupportCompanies.length > 1 || selectedSupportOrganizations.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n        </div>\n      </div>\n\n      <div\n        class=\"available-list d-flex flex-column flex-fill h-100 border-top functional-roles border\"\n        *ngIf=\"isFunctionalRoleSelection()\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <adapt-accordion-tab\n            *ngFor=\"let application of availableFunctionRolesByApplication\"\n            title=\"{{ application.applicationName }}\"\n            [isOpen]=\"true\"\n          >\n            <adapt-rx-checkbox\n              *ngFor=\"let role of application.roles; let index = index\"\n              label=\"{{ role.name }}\"\n              [(ngModel)]=\"application.roles[index].selected\"\n            ></adapt-rx-checkbox>\n          </adapt-accordion-tab>\n        </adapt-accordion>\n      </div>\n\n      <div class=\"available-list user-list h-100 border section-wrapper\" *ngIf=\"isPeopleSelection()\">\n        <ul class=\"list-unstyled\">\n          <div class=\"border-bottom-0 user-search-wrapper\">\n            <adapt-rx-search\n              [(ngModel)]=\"userSearchTextInput\"\n              placeholder=\"Filter\"\n              [debounceTime]=\"200\"\n              (ngModelChange)=\"loadUsers($event)\"\n            >\n            </adapt-rx-search>\n          </div>\n\n          <li *ngFor=\"let user of loadedUsers; let index = index\">\n            <adapt-rx-checkbox\n              label=\"{{ user[1000000019] + ' ' + user[1000000018] }}\"\n              [(ngModel)]=\"loadedUsers[index].selected\"\n            ></adapt-rx-checkbox>\n          </li>\n\n          <button\n            class=\"py-0\"\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"load-more-button\"\n            (click)=\"loadUsers()\"\n            *ngIf=\"showLoadMoreButton && !loadingMore\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.load-more.label' | translate }}\n          </button>\n\n          <div class=\"loader-container\" *ngIf=\"loadingMore\">\n            <div class=\"loader-inline\"></div>\n            <span class=\"ml-2\">{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n          </div>\n        </ul>\n      </div>\n\n      <div class=\"available-list h-100 border field-identifying section-wrapper\" *ngIf=\"isFieldIdentifyingSelection()\">\n        <ul class=\"list-unstyled\">\n          <li *ngFor=\"let field of availableFields; let index = index\">\n            <adapt-rx-checkbox\n              label=\"{{ field.name }}\"\n              [(ngModel)]=\"availableFields[index].selected\"\n            ></adapt-rx-checkbox>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <button\n      type=\"button\"\n      adapt-button\n      class=\"d-icon-right-angle_right form-group move-button\"\n      btn-type=\"secondary\"\n      rx-id=\"move-button\"\n      (click)=\"moveToSelectedApprovers()\"\n      [disabled]=\"isInvalidFieIdentifyingApprover() || noApproverSelected()\"\n    ></button>\n\n    <div class=\"flex-wrapper d-flex flex-column mh-100\">\n      <h5 class=\"mt-1 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.selected.label' | translate }}\n      </h5>\n\n      <button\n        type=\"button\"\n        adapt-button\n        class=\"d-icon-left-trash form-group align-self-start\"\n        btn-type=\"secondary\"\n        rx-id=\"remove-button\"\n        (click)=\"removeApproversFromSelection()\"\n        [disabled]=\"!selectedApproverSelection.length\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n      </button>\n\n      <div class=\"card available-list flex-fill\">\n        <div class=\"card-block\">\n          <adapt-tree\n            #tree\n            *ngIf=\"selectedApprovers.length && shouldShowTree\"\n            filter=\"true\"\n            [value]=\"selectedApprovers\"\n            selectionMode=\"checkbox\"\n            [(selection)]=\"selectedApproverSelection\"\n            [wrap]=\"treeWrap\"\n          >\n          </adapt-tree>\n        </div>\n\n        <div class=\"vertical-center\" *ngIf=\"!selectedApprovers.length\">\n          <div class=\"empty-state empty-state--config\"></div>\n          <div class=\"empty-state__label\">\n            {{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    (click)=\"completeSelection()\"\n    [disabled]=\"!hasUserInteracted\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <strong>{{ option.displayValue }}</strong>\n\n  <div class=\"text-secondary\">\n    {{ option.value + separatorArrow + option.organization }}\n  </div>\n</ng-template>\n\n<ng-template #orgOptionTemplate let-option>\n  <strong>{{ option.displayValue }}</strong>\n\n  <div class=\"text-secondary\">\n    {{ option.value }}\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host::ng-deep .checkbox{margin:0}:host::ng-deep .dropdown-item{white-space:normal}.approver-modal-body{padding:15px;height:645px}.available-list{overflow:auto}.section-wrapper{padding:15px}.flex-wrapper{flex-grow:1;flex-basis:0}.vertical-center{position:absolute;margin:auto;top:0;bottom:0;left:20px;right:20px;height:130px}.move-button{margin:325px 20px auto}.wrapper-max-width{max-width:365px}.loader-container{padding:0 16px}.user-search-wrapper{padding-bottom:15px}.user-list li,.field-identifying li{margin-bottom:8px}:host ::ng-deep adapt-rx-checkbox .checkbox__item{white-space:normal;word-break:break-all}:host ::ng-deep .functional-roles .adapt-accordion adapt-accordion-tab:last-child .card{border-bottom:0}:host ::ng-deep .functional-roles .adapt-accordion adapt-accordion-tab .card{border-left:0;border-right:0}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4$1.RxSelectWithPaginationComponent, selector: "rx-select-with-pagination", inputs: ["label", "required", "isMultiSelectionMode", "optionLoader", "pageSize", "showDefaultTitle", "showUncheckAll", "readonly", "template", "viewToModelValueAdapter", "modelToViewValueAdapter", "optionFormatter"], outputs: ["toggleDropdown", "selectionChange"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1$1.AdaptRxSearchComponent, selector: "adapt-rx-search", inputs: ["mode", "autocomplete", "placeholder", "size", "searchButton", "searchButtonText", "clearButtonText", "debounceTime", "ariaControlsPopupId", "ariaActiveDescendant", "initialAlign"], outputs: ["editModeChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FlowApproversSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-flow-approvers-selector',
                    templateUrl: './flow-approvers-selector.component.html',
                    styleUrls: ['./flow-approvers-selector.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i3.RxTreeService }, { type: i1$1.ActiveModalRef }, { type: i1.RxModalService }, { type: i4.TranslateService }, { type: i2.RxGlobalCacheService }, { type: i3$2.RxRecordInstanceUtilsService }, { type: RxOrganizationDataPageService }, { type: RxSupportOrganizationDataPageService }, { type: RxApprovalConfigurationService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i0.Injector }]; }, propDecorators: { paginationComponents: [{
                type: ViewChildren,
                args: ['paginationComponents']
            }], tree: [{
                type: ViewChildren,
                args: ['tree']
            }] } });

class ApprovalFlowConfigurationComponent {
    constructor(injector, errorHandler, rxModalService, translateService, rxNotificationService, rxExpressionEditorService, rxApprovalConfigurationService) {
        this.injector = injector;
        this.errorHandler = errorHandler;
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.rxNotificationService = rxNotificationService;
        this.rxExpressionEditorService = rxExpressionEditorService;
        this.rxApprovalConfigurationService = rxApprovalConfigurationService;
        this.allAvailableFlowGroups = [];
        this.signingCriteriaList = [
            {
                value: RX_APPROVAL_CONFIGURATION.approverCriteria.oneMust,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.one-must-approve')
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverCriteria.allMust,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.all-must-approve')
            },
            {
                value: RX_APPROVAL_CONFIGURATION.approverCriteria.percentage,
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.percentage-must-approve')
            }
        ];
        this.signingCriteriaPercentageList = RX_APPROVAL_CONFIGURATION.signingCriteriaPercentageList;
        this.processOnApproveOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-approve-label'),
            definitionType: RxDefinitionPickerType.PublicProcess
        };
        this.processOnRejectOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-rejection-label'),
            definitionType: RxDefinitionPickerType.PublicProcess
        };
        this.processOnErrorOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-error-label'),
            definitionType: RxDefinitionPickerType.PublicProcess
        };
        this.existingFlowGroupNames = [];
        this.isSaveInProgress = false;
        this.destroyed$ = new ReplaySubject(1);
        this.deletedFlowGroups = [];
        this.selectedFlowGroup = this.getEmptyFlowGroup();
    }
    getEmptyFlowGroup() {
        return {
            flowGroup: null,
            approvalFlowConfigurationList: []
        };
    }
    ngOnInit() {
        this.expressionConfigurator = new RxApprovalExpressionConfigurator(this.injector);
        this.expressionConfigurator.configureForProperty({
            propertyPath: RX_APPROVAL_CONFIGURATION.flowQualificationProperty,
            dataDictionary$: this.expressionConfigurator.approvalExpressionDataDictionary(this.registeredRecordDefinitionName),
            operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All)
        });
        this.flowQualificationOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.qualification'),
            dataDictionary$: this.expressionConfigurator.getDataDictionary(RX_APPROVAL_CONFIGURATION.flowQualificationProperty),
            operators: this.expressionConfigurator.getOperators(RX_APPROVAL_CONFIGURATION.flowQualificationProperty),
            isRequired: true
        };
        this.expressionConfigurator.configureForProperty({
            propertyPath: RX_APPROVAL_CONFIGURATION.approverQualificationProperty,
            dataDictionary$: this.expressionConfigurator.getCtmPeopleFormFields(this.registeredRecordDefinitionName),
            operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All)
        });
        this.qualifyApproversOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.general.qualify-approvers.label'),
            dataDictionary$: this.expressionConfigurator.getDataDictionary(RX_APPROVAL_CONFIGURATION.approverQualificationProperty),
            operators: this.expressionConfigurator.getOperators(RX_APPROVAL_CONFIGURATION.approverQualificationProperty)
        };
        this.rxApprovalConfigurationService
            .getFunctionalRoles()
            .pipe(tap((functionalRoles) => {
            this.availableFunctionalRoles = functionalRoles;
        }), switchMap(() => this.getFlowGroups()))
            .subscribe();
    }
    ngAfterViewInit() {
        this.approvalFlowsForm.form.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe(() => {
            if (this.approvalFlowsForm.dirty) {
                this.selectedFlowGroup.isDirty = true;
            }
        });
    }
    getFlowGroups() {
        this.existingFlowGroupNames = [];
        this.deletedFlowGroups = [];
        return this.rxApprovalConfigurationService.getApprovalFlowConfigurations(this.registeredRecordDefinitionName).pipe(tap((flowConfigurationResponse) => {
            var _a;
            this.allAvailableFlowGroups = flowConfigurationResponse.approvalFlowGroupConfigurations;
            if ((_a = this.allAvailableFlowGroups) === null || _a === void 0 ? void 0 : _a.length) {
                this.allAvailableFlowGroups = this.allAvailableFlowGroups
                    .map((flowGroup) => {
                    flowGroup.isDirty = false;
                    flowGroup.hasError = false;
                    this.existingFlowGroupNames.push(flowGroup.flowGroup);
                    flowGroup.approvalFlowConfigurationList = this.refactorFlowsResponse(flowGroup.approvalFlowConfigurationList);
                    return flowGroup;
                })
                    .sort((a, b) => a.flowGroup.localeCompare(b.flowGroup));
                this.selectedFlowGroup = this.selectedFlowGroup.flowGroup
                    ? find(this.allAvailableFlowGroups, { flowGroup: this.selectedFlowGroup.flowGroup })
                    : this.allAvailableFlowGroups[0];
                this.collapseAll();
                this.isSaveInProgress = false;
            }
        }));
    }
    preparePayload(flowGroup) {
        const flowGroupConfiguration = cloneDeep(omit(flowGroup, ['isDirty', 'hasError']));
        flowGroupConfiguration.approvalFlowConfigurationList = map(flowGroupConfiguration.approvalFlowConfigurationList, (approvalFlow) => {
            approvalFlow = Object.assign({}, omit(approvalFlow, [
                'isOpen',
                'hasError',
                'approversDisplayValue',
                'isFieldIdentifyingApprover',
                'signingCriteriaList'
            ]));
            approvalFlow.approvalFlowOutcomeMappingList = reject(approvalFlow.approvalFlowOutcomeMappingList, (outcome) => !outcome.processName);
            approvalFlow.flowName = trim(approvalFlow.flowName);
            approvalFlow.signingCriteria = approvalFlow.signingCriteria[0].value;
            approvalFlow.approvalOverridePercentage =
                approvalFlow.signingCriteria === RX_APPROVAL_CONFIGURATION.approverCriteria.percentage
                    ? approvalFlow.approvalOverridePercentage[0]
                    : 0;
            if (approvalFlow.approvers &&
                !this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approvalFlow.approvers)) {
                approvalFlow.approvers = '\\"' + approvalFlow.approvers + '\\"';
            }
            approvalFlow.approvers = approvalFlow.approvers || RX_APPROVAL_CONFIGURATION.noApproverProvided;
            return approvalFlow;
        });
        return flowGroupConfiguration;
    }
    canSave() {
        return !this.isSaveInProgress && ((this.areFlowGroupsValid() && this.isDirty()) || !!this.deletedFlowGroups.length);
    }
    isDirty() {
        var _a;
        return (some(this.allAvailableFlowGroups, (flowGroup) => flowGroup.isDirty) ||
            Boolean((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty()) ||
            !!this.deletedFlowGroups.length);
    }
    areFlowGroupsValid() {
        return !some(this.allAvailableFlowGroups, this.isInvalidFlowGroup);
    }
    isInvalidFlowGroup(flowGroup) {
        return (!flowGroup.approvalFlowConfigurationList.length ||
            some(flowGroup.approvalFlowConfigurationList, (flow) => !flow.flowName || !flow.qualification || (flow.isLevelUp && flow.levels < 1) || flow.hasError));
    }
    hasFlowGroups() {
        return this.selectedFlowGroup.flowGroup;
    }
    isInvalidFlow(flow) {
        return (!flow.flowName ||
            !flow.qualification ||
            (flow.isLevelUp && flow.levels < 1) ||
            (!flow.isLevelUp && !flow.approvers && !flow.approverQualification));
    }
    markInvalidSelectedGroupAndFlows() {
        this.selectedFlowGroup.approvalFlowConfigurationList.forEach((approvalFlow) => {
            approvalFlow.hasError = this.isInvalidFlow(approvalFlow);
        });
        this.selectedFlowGroup.hasError =
            !this.selectedFlowGroup.approvalFlowConfigurationList.length ||
                some(this.selectedFlowGroup.approvalFlowConfigurationList, (flow) => flow.hasError);
    }
    markInvalidGroupsAndFlows() {
        this.allAvailableFlowGroups.forEach((flowGroup) => {
            flowGroup.approvalFlowConfigurationList.forEach((approvalFlow) => {
                approvalFlow.hasError = this.isInvalidFlow(approvalFlow);
            });
            flowGroup.hasError =
                !flowGroup.approvalFlowConfigurationList.length ||
                    some(flowGroup.approvalFlowConfigurationList, (flow) => flow.hasError);
        });
    }
    saveFlowGroups() {
        this.approvalFlowsForm.form.markAsPristine();
        let createFailedCount = 0;
        let createSuccessCount = 0;
        let updateFailedCount = 0;
        let updateSuccessCount = 0;
        let deleteFailedCount = 0;
        let deleteSuccessCount = 0;
        const updateRequests$ = [];
        const createRequests$ = [];
        const deleteRequests$ = this.deletedFlowGroups.map((flowGroupName) => this.rxApprovalConfigurationService
            .deleteApprovalFlowGroup(flowGroupName, this.registeredRecordDefinitionName)
            .pipe(map$1(() => ({ status: 'Success' })), catchError((error) => of({
            status: 'Failed',
            error
        }))));
        this.allAvailableFlowGroups.forEach((flowGroup) => {
            if (flowGroup.isDirty) {
                this.isSaveInProgress = true;
                const flowGroupConfiguration = this.preparePayload(flowGroup);
                if (this.isExistingFlowGroup(flowGroupConfiguration.flowGroup) || flowGroupConfiguration.flowGroupOldName) {
                    updateRequests$.push(this.rxApprovalConfigurationService
                        .updateApprovalFlowGroup(flowGroupConfiguration.flowGroupOldName || flowGroupConfiguration.flowGroup, omit(flowGroupConfiguration, 'flowGroupOldName'), this.registeredRecordDefinitionName)
                        .pipe(map$1(() => ({
                        status: 'Success'
                    })), catchError((error) => of({
                        status: 'Failed',
                        error
                    }))));
                }
                else {
                    createRequests$.push(this.rxApprovalConfigurationService
                        .saveApprovalFlowGroup(flowGroupConfiguration, this.registeredRecordDefinitionName)
                        .pipe(switchMap(() => this.rxApprovalConfigurationService.getApprovalFlowGroup(this.registeredRecordDefinitionName, flowGroupConfiguration.flowGroup)), tap((createdFlowGroup) => {
                        this.existingFlowGroupNames.push(createdFlowGroup.flowGroup);
                        const flowGroup = find(this.allAvailableFlowGroups, { flowGroup: createdFlowGroup.flowGroup });
                        flowGroup.isDirty = false;
                        forEach(flowGroup.approvalFlowConfigurationList, (flow, flowIndex) => {
                            flow.approvalProcessId =
                                createdFlowGroup.approvalFlowConfigurationList[flowIndex].approvalProcessId;
                            flow.guid = createdFlowGroup.approvalFlowConfigurationList[flowIndex].guid;
                        });
                    }), map$1(() => ({
                        status: 'Success'
                    })), catchError((error) => of({
                        status: 'Failed',
                        error
                    }))));
                }
            }
        });
        forkJoin({
            createRequests: forkJoin(createRequests$).pipe(defaultIfEmpty([])),
            updateRequests: forkJoin(updateRequests$).pipe(defaultIfEmpty([])),
            deleteRequests: forkJoin(deleteRequests$).pipe(defaultIfEmpty([]))
        })
            .pipe(tap((response) => {
            let message = '';
            const failedResponses = flatten(map(response, (requestResponses) => filter(requestResponses, { status: 'Failed' })));
            createFailedCount = filter(response.createRequests, { status: 'Failed' }).length;
            createSuccessCount = filter(response.createRequests, { status: 'Success' }).length;
            updateFailedCount = filter(response.updateRequests, { status: 'Failed' }).length;
            updateSuccessCount = filter(response.updateRequests, { status: 'Success' }).length;
            deleteFailedCount = filter(response.deleteRequests, { status: 'Failed' }).length;
            deleteSuccessCount = filter(response.deleteRequests, { status: 'Success' }).length;
            if (createSuccessCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.created', { count: createSuccessCount })}\n`;
            }
            if (updateSuccessCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.updated', { count: updateSuccessCount })}\n`;
            }
            if (deleteSuccessCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.deleted', { count: deleteSuccessCount })}\n`;
            }
            if (createFailedCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.create-failed', { count: createFailedCount })}\n`;
            }
            if (updateFailedCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.update-failed', { count: updateFailedCount })}\n`;
            }
            if (deleteFailedCount) {
                message += `${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.delete-failed', { count: deleteFailedCount })}\n`;
            }
            if (createFailedCount || updateFailedCount || deleteFailedCount) {
                this.rxNotificationService.addWarningMessage(message);
            }
            else {
                this.rxNotificationService.addSuccessMessage(message);
            }
            forEach(failedResponses, (requestResponse) => {
                this.errorHandler.handleError(requestResponse.error);
            });
        }), filter$1(() => !(createFailedCount || updateFailedCount || deleteFailedCount)), switchMap(() => this.getFlowGroups()))
            .subscribe({
            complete: () => {
                this.isSaveInProgress = false;
            }
        });
    }
    onKeyDownNew(event) {
        if (event.code === 'Enter' && !this.isAddNewFlowGroupButtonDisabled()) {
            this.addNewFlowGroup();
        }
    }
    addNewFlowGroup() {
        this.markInvalidSelectedGroupAndFlows();
        this.adaptPopoverDirective.close();
        this.allAvailableFlowGroups.push({
            flowGroup: trim(this.flowGroupName),
            hasError: true,
            approvalFlowConfigurationList: []
        });
        this.allAvailableFlowGroups.sort((a, b) => a.flowGroup.localeCompare(b.flowGroup));
        this.selectedFlowGroup = find(this.allAvailableFlowGroups, { flowGroup: trim(this.flowGroupName) });
        this.flowGroupName = null;
    }
    onKeyDownRename(event, context) {
        if (event.code === 'Enter') {
            this.renameFlowGroup(context);
        }
    }
    renameFlowGroup(context) {
        if (!this.isExistingFlowGroup()) {
            this.selectedFlowGroup.flowGroup = trim(this.flowGroupNewName);
            context.close();
        }
        else {
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.updatingGroupName')
            })
                .then((result) => {
                if (result) {
                    this.selectedFlowGroup.isDirty = true;
                    this.selectedFlowGroup.flowGroupOldName = this.selectedFlowGroup.flowGroup;
                    this.selectedFlowGroup.flowGroup = trim(this.flowGroupNewName);
                }
            });
        }
    }
    deleteFlowGroup() {
        if (!this.isExistingFlowGroup()) {
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.common.unsaved-data.message')
            })
                .then((result) => {
                if (result) {
                    remove(this.allAvailableFlowGroups, { flowGroup: this.selectedFlowGroup.flowGroup });
                    this.setEmptyFlowGroup();
                }
            });
        }
        else {
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.confirm')
            })
                .then((result) => {
                if (result) {
                    this.deletedFlowGroups.push(this.selectedFlowGroup.flowGroup);
                    remove(this.allAvailableFlowGroups, { flowGroup: this.selectedFlowGroup.flowGroup });
                    this.setEmptyFlowGroup();
                }
            });
        }
    }
    setEmptyFlowGroup() {
        this.selectedFlowGroup = this.getEmptyFlowGroup();
    }
    onFlowQualificationEvent(flowIndex) {
        this.selectFlowQualificationExpression(flowIndex);
    }
    selectFlowQualificationExpression(flowIndex) {
        this.rxExpressionEditorService
            .openEditor({
            property: {
                path: RX_APPROVAL_CONFIGURATION.flowQualificationProperty,
                value: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].qualification,
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.qualification')
            },
            expressionConfigurator: this.expressionConfigurator,
            legend: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                    icon: 'd-icon-dollar'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                    icon: 'd-icon-field_text'
                }
            ]
        }, (dialogApi) => (this.dialogApi = dialogApi))
            .subscribe((expression) => {
            this.dialogApi = null;
            this.approvalFlowsForm.form.markAsDirty();
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].qualification = expression.value;
        });
    }
    onApproverQualificationEvent(flowIndex) {
        this.selectApproverQualificationExpression(flowIndex);
    }
    selectApproverQualificationExpression(flowIndex) {
        this.rxExpressionEditorService
            .openEditor({
            property: {
                path: RX_APPROVAL_CONFIGURATION.approverQualificationProperty,
                value: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification,
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.general.qualify-approvers.label')
            },
            expressionConfigurator: this.expressionConfigurator,
            legend: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                    icon: 'd-icon-dollar'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                    icon: 'd-icon-field_text'
                }
            ]
        }, (dialogApi) => (this.dialogApi = dialogApi))
            .subscribe((expression) => {
            this.dialogApi = null;
            this.approvalFlowsForm.form.markAsDirty();
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification = expression.value;
            this.updateFlowErrorState(flowIndex);
        });
    }
    updateFlowErrorState(flowIndex) {
        this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].hasError = Boolean(!this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification &&
            !this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers);
        this.selectedFlowGroup.hasError = some(this.selectedFlowGroup.approvalFlowConfigurationList, (flow) => flow.hasError);
    }
    getFlowEmptyOutcomes() {
        return [
            {
                processName: null,
                action: '2',
                statusOutcome: '1'
            },
            {
                processName: null,
                action: '2',
                statusOutcome: '2'
            },
            {
                processName: null,
                action: '2',
                statusOutcome: '6'
            }
        ];
    }
    getEmptyGeneralApprovalFlow() {
        return {
            isOpen: true,
            hasError: false,
            approvalProcessId: null,
            flowName: '',
            processType: null,
            qualification: null,
            formattedQualification: null,
            precedence: this.selectedFlowGroup.approvalFlowConfigurationList.length,
            signingCriteria: this.getCriteria(),
            signingCriteriaList: this.getFlowCriteriaList(),
            approvalOverridePercentage: 50,
            isLevelUp: false,
            levels: null,
            approvers: '',
            applyApproverExclusion: true,
            approversDisplayValue: '',
            approverQualification: null,
            approvalFlowOutcomeMappingList: this.getFlowEmptyOutcomes()
        };
    }
    getCriteria(value) {
        return [find(this.getFlowCriteriaList(), { value: value || RX_APPROVAL_CONFIGURATION.approverCriteria.oneMust })];
    }
    getFlowCriteriaList() {
        return cloneDeep(this.signingCriteriaList);
    }
    addNewGeneralFlow() {
        this.collapseAll();
        setTimeout(() => {
            this.selectedFlowGroup.approvalFlowConfigurationList.push(this.getEmptyGeneralApprovalFlow());
        });
    }
    addNewLevelUpFlow() {
        this.collapseAll();
        setTimeout(() => {
            this.selectedFlowGroup.approvalFlowConfigurationList.push(Object.assign(Object.assign({}, this.getEmptyGeneralApprovalFlow()), { isLevelUp: true }));
        });
    }
    selectFlowGroup(flowGroupName) {
        this.selectedFlowGroup = find(this.allAvailableFlowGroups, { flowGroup: flowGroupName });
        if (!this.selectedFlowGroup.isDirty) {
            this.approvalFlowsForm.form.markAsPristine();
        }
        this.collapseAll();
        this.markInvalidGroupsAndFlows();
    }
    onSelectedFlowDrop(event) {
        this.moveFlow(event.previousIndex, event.currentIndex);
    }
    moveFlow(previousIndex, currentIndex) {
        moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, previousIndex, currentIndex);
        this.resetFlowPrecedences();
    }
    moveFlowUp(currentIndex) {
        moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, currentIndex, currentIndex - 1);
        this.resetFlowPrecedences();
    }
    moveFlowDown(currentIndex) {
        moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, currentIndex, currentIndex + 1);
        this.resetFlowPrecedences();
    }
    removeFlow(index) {
        this.selectedFlowGroup.approvalFlowConfigurationList.splice(index, 1);
        this.markInvalidSelectedGroupAndFlows();
        this.resetFlowPrecedences();
    }
    resetFlowPrecedences() {
        this.approvalFlowsForm.form.markAsDirty();
        this.selectedFlowGroup.approvalFlowConfigurationList = this.selectedFlowGroup.approvalFlowConfigurationList.map((currentFlow, index) => {
            currentFlow.precedence = index;
            return currentFlow;
        });
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    refactorFlowsResponse(approvalFlows) {
        return flow((flows) => sortBy(flows, 'precedence'), (flows) => map(flows, (currentFlow) => {
            currentFlow.isOpen = false;
            const flowOutcomeMappings = cloneDeep(currentFlow.approvalFlowOutcomeMappingList);
            currentFlow.approvalFlowOutcomeMappingList[0] =
                find(flowOutcomeMappings, { statusOutcome: '1' }) || this.getFlowEmptyOutcomes()[0];
            currentFlow.approvalFlowOutcomeMappingList[1] =
                find(flowOutcomeMappings, { statusOutcome: '2' }) || this.getFlowEmptyOutcomes()[1];
            currentFlow.approvalFlowOutcomeMappingList[2] =
                find(flowOutcomeMappings, { statusOutcome: '6' }) || this.getFlowEmptyOutcomes()[2];
            if (!currentFlow.approvers || currentFlow.approvers === RX_APPROVAL_CONFIGURATION.noApproverProvided) {
                currentFlow.approvers = '';
            }
            currentFlow.approvers = currentFlow.approvers.replace(/\\"/g, '');
            currentFlow.approversDisplayValue = this.getApproversDisplay(currentFlow);
            currentFlow.signingCriteriaList = this.getFlowCriteriaList();
            currentFlow.approvalOverridePercentage = [currentFlow.approvalOverridePercentage];
            currentFlow.signingCriteria = [
                {
                    value: currentFlow.signingCriteria,
                    displayValue: this.getCriteria(currentFlow.signingCriteria)[0].displayValue
                }
            ];
            return currentFlow;
        }))(approvalFlows);
    }
    isExistingFlowGroup(flowGroupName = null) {
        return this.existingFlowGroupNames.includes(flowGroupName || this.selectedFlowGroup.flowGroup);
    }
    isRenameFlowGroupButtonDisabled() {
        return (trim(this.flowGroupNewName) !== this.selectedFlowGroup.flowGroup &&
            some(this.allAvailableFlowGroups, (flowGroup) => flowGroup.flowGroup.toLowerCase() === trim(this.flowGroupNewName.toLowerCase())));
    }
    isAddNewFlowGroupButtonDisabled() {
        return (!this.flowGroupName ||
            some(this.allAvailableFlowGroups, (flowGroup) => flowGroup.flowGroup.toLowerCase() === trim(this.flowGroupName.toLowerCase())));
    }
    expandAll() {
        this.selectedFlowGroup.approvalFlowConfigurationList.forEach((approvalFlow) => (approvalFlow.isOpen = true));
    }
    collapseAll() {
        this.selectedFlowGroup.approvalFlowConfigurationList.forEach((approvalFlow) => (approvalFlow.isOpen = false));
    }
    selectFlowApprovers(flowIndex) {
        this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.select-approvers-dialog.title') +
                ': ' +
                this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].flowName,
            data: {
                registeredRecordDefinitionName: this.registeredRecordDefinitionName,
                existingApprovers: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers,
                isFieldIdentifyingApprover: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].isFieldIdentifyingApprover,
                onApiReady: (dialogApi) => {
                    this.dialogApi = dialogApi;
                }
            },
            content: FlowApproversSelectorComponent,
            size: OpenViewActionModalSize.Large
        })
            .then((result) => {
            this.dialogApi = null;
            this.approvalFlowsForm.form.markAsDirty();
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers = result.value;
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approversDisplayValue = result.displayValue;
            this.manageApproverCriteriaOption(flowIndex);
            this.updateFlowErrorState(flowIndex);
            this.selectedFlowGroup.isDirty = true;
        })
            .catch(() => {
            this.dialogApi = null;
        });
    }
    manageApproverCriteriaOption(flowIndex) {
        if (this.rxApprovalConfigurationService.isFieldIdentifyingApprover(this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers)) {
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].signingCriteria = this.getCriteria();
            find(this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].signingCriteriaList, {
                value: RX_APPROVAL_CONFIGURATION.approverCriteria.percentage
            }).disabled = true;
        }
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    getApproversDisplay(approvalFlow) {
        const approvers = approvalFlow.approvers.split(RX_APPROVAL_CONFIGURATION.approverSeparator);
        return map(approvers, (approver) => {
            if (this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approvalFlow.approvers)) {
                approvalFlow.isFieldIdentifyingApprover = true;
                approver = this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver);
            }
            else if (this.rxApprovalConfigurationService.isFunctionalRole(approver)) {
                approver = get(find(this.availableFunctionalRoles, {
                    id: this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)
                }), 'name');
            }
            else if (this.rxApprovalConfigurationService.isApproverPeople(approver)) {
                approver = this.rxApprovalConfigurationService.getApproverUser(approver);
            }
            else {
                approver = this.rxApprovalConfigurationService.getLastLabel(approver);
            }
            return approver;
        })
            .filter(Boolean)
            .join(', ');
    }
    getFlowName(flow) {
        return (flow.flowName ||
            (flow.isLevelUp
                ? `[${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow-group.level-flow.new.default-value')}]`
                : `[${this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow-group.general-flow.new.default-value')}]`));
    }
}
ApprovalFlowConfigurationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalFlowConfigurationComponent, deps: [{ token: i0.Injector }, { token: i0.ErrorHandler }, { token: i1.RxModalService }, { token: i4.TranslateService }, { token: i2.RxNotificationService }, { token: i4$1.RxExpressionEditorService }, { token: RxApprovalConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
ApprovalFlowConfigurationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalFlowConfigurationComponent, selector: "rx-approval-flow-configuration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName" }, viewQueries: [{ propertyName: "adaptPopoverDirective", first: true, predicate: AdaptPopoverDirective, descendants: true }, { propertyName: "approvalFlowsForm", first: true, predicate: ["approvalFlowsForm"], descendants: true }], ngImport: i0, template: "<div class=\"row d-flex h-100\">\n  <div class=\"col-3 border-right d-flex flex-column h-100\">\n    <h5>\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.available-flow-groups.title' | translate }}\n    </h5>\n\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"tertiary\"\n      rx-id=\"new-flow-group-button\"\n      class=\"d-icon-plus_circle px-0 align-self-start\"\n      [adaptPopover]=\"newFlowGroupTemplate\"\n      maxWidth=\"365\"\n      autoClose=\"outside\"\n      appendToBody=\"true\"\n      placement=\"bottom-left\"\n      fallbackPlacement=\"bottom\"\n    >\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.new.title' | translate }}\n    </button>\n\n    <div class=\"available-list border p-3 flex-fill\">\n      <div class=\"vertical-center\" *ngIf=\"!allAvailableFlowGroups.length\">\n        <adapt-empty-state\n          [type]=\"'list'\"\n          label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\"\n        ></adapt-empty-state>\n      </div>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        rx-id=\"rename-flow-group-button\"\n        class=\"d-icon-field_text px-0 pt-0\"\n        [disabled]=\"!selectedFlowGroup.flowGroup\"\n        [adaptPopover]=\"renameFlowGroupTemplate\"\n        maxWidth=\"365\"\n        autoClose=\"outside\"\n        appendToBody=\"true\"\n        placement=\"bottom-left\"\n        fallbackPlacement=\"bottom\"\n        (shown)=\"flowGroupNewName = selectedFlowGroup.flowGroup\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.rename.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        rx-id=\"delete-flow-group-button\"\n        class=\"d-icon-trash pt-0\"\n        [disabled]=\"!selectedFlowGroup.flowGroup\"\n        (click)=\"deleteFlowGroup()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.delete.label' | translate }}\n      </button>\n\n      <adapt-rx-radiobutton-group\n        class=\"d-block form-group\"\n        rx-id=\"available-flow-groups\"\n        (ngModelChange)=\"selectFlowGroup($event)\"\n        [(ngModel)]=\"selectedFlowGroup.flowGroup\"\n      >\n        <div *ngFor=\"let group of allAvailableFlowGroups\" class=\"d-flex align-items-center\">\n          <adapt-rx-radiobutton\n            class=\"mb-0 mt-0 wrap-word\"\n            [value]=\"group.flowGroup\"\n            [label]=\"group.flowGroup\"\n          ></adapt-rx-radiobutton>\n\n          <div class=\"ml-1 mb-1 d-icon-exclamation_triangle text-danger\" *ngIf=\"group.hasError\"></div>\n        </div>\n      </adapt-rx-radiobutton-group>\n    </div>\n  </div>\n\n  <div class=\"col-9 d-flex flex-column h-100\">\n    <div class=\"d-flex flex-column h-100\">\n      <h5>\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.selected-flow-group.title' | translate }}:\n        {{ selectedFlowGroup.flowGroup || ('com.bmc.arsys.rx.client.common.none.label' | translate) }}\n      </h5>\n\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6\">\n          <div class=\"d-inline-flex align-items-center\">\n            <button\n              type=\"button\"\n              adapt-button\n              btn-type=\"tertiary\"\n              rx-id=\"new-general-flow-button\"\n              class=\"d-icon-plus_circle px-0\"\n              [disabled]=\"!selectedFlowGroup.flowGroup\"\n              (click)=\"addNewGeneralFlow()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.general.new.label' | translate }}\n            </button>\n            <span\n              class=\"d-icon-right-question_circle_o ml-1 mr-4\"\n              adaptPopover=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.general.info' | translate }}\"\n              placement=\"right\"\n              appendToBody=\"true\"\n            >\n            </span>\n          </div>\n\n          <div class=\"d-inline-flex align-items-center\">\n            <button\n              type=\"button\"\n              adapt-button\n              btn-type=\"tertiary\"\n              rx-id=\"new-level-flow-button\"\n              class=\"d-icon-plus_circle px-0\"\n              [disabled]=\"!selectedFlowGroup.flowGroup\"\n              (click)=\"addNewLevelUpFlow()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.level.new.label' | translate }}\n            </button>\n\n            <span\n              class=\"d-icon-right-question_circle_o ml-1\"\n              adaptPopover=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.level.info' | translate }}\"\n              placement=\"right\"\n              appendToBody=\"true\"\n            >\n            </span>\n          </div>\n        </div>\n\n        <div class=\"col-12 col-sm-6 text-right\">\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"expand-button\"\n            (click)=\"expandAll()\"\n            *ngIf=\"selectedFlowGroup.approvalFlowConfigurationList.length\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"collapse-button\"\n            (click)=\"collapseAll()\"\n            *ngIf=\"selectedFlowGroup.approvalFlowConfigurationList.length\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"selectedFlowGroup.flowGroup && !selectedFlowGroup.approvalFlowConfigurationList.length\"\n        [config]=\"{\n          variant: 'warning',\n          dismissible: false,\n          content: 'com.bmc.arsys.rx.client.approval.configuration.flow.group-has-no-flows-error.message' | translate\n        }\"\n      ></adapt-alert>\n\n      <div class=\"vertical-center\">\n        <adapt-empty-state\n          *ngIf=\"!selectedFlowGroup.flowGroup && !selectedFlowGroup.approvalFlowConfigurationList.length\"\n          [type]=\"'rules'\"\n          label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\"\n        ></adapt-empty-state>\n      </div>\n\n      <div\n        class=\"designer-modal-accordion-wrapper flex-fill pt-0\"\n        [ngClass]=\"{ 'border-top': selectedFlowGroup.approvalFlowConfigurationList.length }\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedFlowDrop($event)\"\n      >\n        <form #approvalFlowsForm=\"ngForm\">\n          <adapt-accordion [multiselect]=\"true\" class=\"flex-fill\">\n            <div\n              *ngFor=\"\n                let flow of selectedFlowGroup.approvalFlowConfigurationList;\n                let index = index;\n                let first = first;\n                let last = last\n              \"\n              class=\"designer-modal-accordion-content\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"flow\"\n            >\n              <div class=\"d-icon-left-dots designer-modal-drag-handle\" cdkDragHandle></div>\n\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"flow.isOpen\"\n                (open)=\"flow.isOpen = true\"\n                (close)=\"flow.isOpen = false; markInvalidSelectedGroupAndFlows()\"\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block\">\n                      <div class=\"rx-ellipsis\" [title]=\"getFlowName(flow)\" rx-id=\"card-title\">\n                        {{ getFlowName(flow) }}\n                      </div>\n                      <div class=\"d-icon-exclamation_triangle text-danger\" *ngIf=\"flow.hasError\"></div>\n                    </div>\n\n                    <div class=\"right-header-block\">\n                      <div class=\"designer-modal-card-title-index-buttons\">\n                        <button\n                          class=\"d-icon-angle_up px-3 py-1\"\n                          adapt-button\n                          btn-type=\"tertiary\"\n                          size=\"small\"\n                          type=\"button\"\n                          [disabled]=\"first\"\n                          (click)=\"$event.stopPropagation(); moveFlowUp(index)\"\n                        ></button>\n\n                        <button\n                          class=\"d-icon-angle_down px-3 py-1\"\n                          adapt-button\n                          btn-type=\"tertiary\"\n                          size=\"small\"\n                          type=\"button\"\n                          [disabled]=\"last\"\n                          (click)=\"$event.stopPropagation(); moveFlowDown(index)\"\n                        ></button>\n                      </div>\n\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"removeFlow(index)\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-alert\n                  *ngIf=\"flow.hasError\"\n                  [config]=\"{\n                    variant: 'warning',\n                    dismissible: false,\n                    content:\n                      'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.not-selected.message' | translate\n                  }\"\n                ></adapt-alert>\n\n                <adapt-rx-textfield\n                  class=\"form-group d-block\"\n                  rx-id=\"flow-name\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.approval.configuration.flow.general.flow-name.label' | translate\n                  }}\"\n                  required=\"true\"\n                  [(ngModel)]=\"flow.flowName\"\n                  [autofocus]=\"true\"\n                  name=\"{{ 'flowName' + index }}\"\n                  maxlength=\"254\"\n                >\n                </adapt-rx-textfield>\n\n                <adapt-rx-counter\n                  *ngIf=\"flow.isLevelUp\"\n                  adaptMin=\"1\"\n                  [min]=\"1\"\n                  class=\"form-group d-block\"\n                  rx-id=\"flow-levels\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.levels' | translate }}\"\n                  required=\"true\"\n                  [(ngModel)]=\"flow.levels\"\n                  name=\"{{ 'levels' + index }}\"\n                >\n                </adapt-rx-counter>\n\n                <rx-expression-form-control\n                  class=\"d-block\"\n                  [ngClass]=\"{ 'form-group': !flow.isLevelUp }\"\n                  rx-id=\"flow-qualification\"\n                  [options]=\"flowQualificationOptions\"\n                  [(ngModel)]=\"flow.qualification\"\n                  (events)=\"onFlowQualificationEvent(index)\"\n                  name=\"{{ 'flowQualification' + index }}\"\n                ></rx-expression-form-control>\n\n                <div *ngIf=\"!flow.isLevelUp\" rx-id=\"flow-approvers\" class=\"form-group\">\n                  <label class=\"form-control-label\">\n                    {{ 'com.bmc.arsys.rx.client.approval.configuration.approvers' | translate }}\n\n                    <button\n                      type=\"button\"\n                      adapt-button\n                      class=\"d-icon-pencil px-1 ml-3 mb-1\"\n                      btn-type=\"tertiary\"\n                      rx-id=\"edit-button\"\n                      (click)=\"selectFlowApprovers(index)\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n                    </button>\n                  </label>\n\n                  <adapt-rx-checkbox\n                    *ngIf=\"!flow.isLevelUp\"\n                    class=\"checkbox-inline ml-4\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.approval.configuration.apply-approver-exclusion.label' | translate\n                    }}\"\n                    [(ngModel)]=\"flow.applyApproverExclusion\"\n                    name=\"{{ 'applyApproverExclusion' + index }}\"\n                  >\n                  </adapt-rx-checkbox>\n                  <span\n                    class=\"d-icon-right-question_circle_o ml-1\"\n                    adaptPopover=\"{{\n                      'com.bmc.arsys.rx.client.approval.configuration.apply-approver-exclusion.tooltip' | translate\n                    }}\"\n                    placement=\"right\"\n                    appendToBody=\"true\"\n                  >\n                  </span>\n\n                  <div class=\"approver-list bg-secondary p-1\">\n                    {{ flow.approversDisplayValue }}\n                  </div>\n                </div>\n\n                <rx-expression-form-control\n                  *ngIf=\"!flow.isLevelUp\"\n                  class=\"d-block form-group\"\n                  rx-id=\"approver-qualification\"\n                  [options]=\"qualifyApproversOptions\"\n                  [(ngModel)]=\"flow.approverQualification\"\n                  (events)=\"onApproverQualificationEvent(index)\"\n                  name=\"{{ 'approverQualification' + index }}\"\n                ></rx-expression-form-control>\n\n                <div class=\"row\">\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <adapt-rx-select\n                      *ngIf=\"!flow.isLevelUp\"\n                      class=\"d-block\"\n                      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.if.multiple.approvers' | translate }}\"\n                      rx-id=\"signing-criteria\"\n                      [(ngModel)]=\"flow.signingCriteria\"\n                      [options]=\"flow.signingCriteriaList\"\n                      [optionFormatter]=\"optionFormatter\"\n                      name=\"{{ 'signingCriteria' + index }}\"\n                    >\n                    </adapt-rx-select>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <adapt-rx-select\n                      *ngIf=\"!flow.isLevelUp && flow.signingCriteria[0]?.value === 2\"\n                      class=\"d-block\"\n                      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.value.of' | translate }}\"\n                      rx-id=\"signing-criteria-percentage\"\n                      [(ngModel)]=\"flow.approvalOverridePercentage\"\n                      [options]=\"signingCriteriaPercentageList\"\n                      name=\"{{ 'signingCriteriaPercentage' + index }}\"\n                    >\n                    </adapt-rx-select>\n                  </div>\n                </div>\n\n                <hr class=\"my-1\" />\n                <h6>{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.outcome.label' | translate }}</h6>\n\n                <div class=\"row\" *ngIf=\"flow.isOpen\">\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnApproveOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[0].processName\"\n                      rx-id=\"process-on-approval\"\n                      name=\"{{ 'processOnApproval' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnRejectOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[1].processName\"\n                      rx-id=\"process-on-rejection\"\n                      name=\"{{ 'processOnRejection' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnErrorOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[2].processName\"\n                      rx-id=\"process-on-error\"\n                      name=\"{{ 'processOnError' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </adapt-accordion>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #newFlowGroupTemplate let-context=\"context\">\n  <div class=\"flow-group-template\">\n    <div class=\"text-center mb-3 font-weight-bold\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.new.title' | translate }}\n    </div>\n\n    <adapt-rx-textfield\n      class=\"mb-1 d-block\"\n      rx-id=\"new-flow-button\"\n      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-name.label' | translate }}\"\n      required=\"true\"\n      [(ngModel)]=\"flowGroupName\"\n      [autofocus]=\"true\"\n      (keydown)=\"onKeyDownNew($event)\"\n      maxlength=\"254\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"text-danger\" *ngIf=\"flowGroupName && isAddNewFlowGroupButtonDisabled()\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-exists.warning' | translate }}\n    </div>\n\n    <div class=\"text-right mt-5\">\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"primary\"\n        rx-id=\"add-button\"\n        (click)=\"addNewFlowGroup()\"\n        [disabled]=\"isAddNewFlowGroupButtonDisabled()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"secondary\"\n        rx-id=\"cancel-button\"\n        (click)=\"context.close()\"\n        class=\"ml-2\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #renameFlowGroupTemplate let-context=\"context\">\n  <div class=\"flow-group-template\">\n    <div class=\"text-center mb-3 font-weight-bold\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.rename.title' | translate }}\n    </div>\n\n    <adapt-rx-textfield\n      class=\"mb-1 d-block\"\n      rx-id=\"rename-flow-button\"\n      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-name.label' | translate }}\"\n      required=\"true\"\n      [(ngModel)]=\"flowGroupNewName\"\n      [autofocus]=\"true\"\n      (keydown)=\"onKeyDownRename($event, context)\"\n      maxlength=\"254\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"text-danger\" *ngIf=\"flowGroupNewName && isRenameFlowGroupButtonDisabled()\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-exists.warning' | translate }}\n    </div>\n\n    <div class=\"text-right mt-5\">\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"primary\"\n        rx-id=\"rename-button\"\n        (click)=\"renameFlowGroup(context)\"\n        [disabled]=\"isRenameFlowGroupButtonDisabled()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}.accordion-wrapper{max-height:540px;overflow:auto}.available-list{overflow:auto}.vertical-center{position:absolute;margin:auto;top:0;bottom:0;left:20px;right:20px;height:130px}.flow-group-template{width:290px}.approver-list{min-height:28px}.wrap-word{word-break:break-all}.left-header-block .d-icon-exclamation_triangle{margin-left:5px}\n"], components: [{ type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i4$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }], directives: [{ type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i9.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i9.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalFlowConfigurationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-approval-flow-configuration',
                    templateUrl: './approval-flow-configuration.component.html',
                    styleUrls: ['./approval-flow-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ErrorHandler }, { type: i1.RxModalService }, { type: i4.TranslateService }, { type: i2.RxNotificationService }, { type: i4$1.RxExpressionEditorService }, { type: RxApprovalConfigurationService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                type: Input
            }], adaptPopoverDirective: [{
                type: ViewChild,
                args: [AdaptPopoverDirective]
            }], approvalFlowsForm: [{
                type: ViewChild,
                args: ['approvalFlowsForm']
            }] } });

class RxFieldDefinitionPickerService {
    constructor(rxRecordGridUtilsService, rxRecordDefinitionCacheService, rxDefinitionNameService) {
        this.rxRecordGridUtilsService = rxRecordGridUtilsService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxDefinitionNameService = rxDefinitionNameService;
    }
    getAssociatedRecordFields(recordDefinitionName) {
        return this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName).pipe(switchMap((associationDescriptors) => {
            if (associationDescriptors.length) {
                associationDescriptors.sort((descriptor1, descriptor2) => descriptor1.label.localeCompare(descriptor2.label));
                return forkJoin(associationDescriptors.map((associationDescriptor) => {
                    return this.rxRecordDefinitionCacheService
                        .getRecordDefinition(associationDescriptor.recordDefinitionName)
                        .pipe(map$1((recordDefinition) => ({
                        fields: this.getFieldDefinitions(recordDefinition.fieldDefinitions, associationDescriptor),
                        label: associationDescriptor.label,
                        isAssociatedRecord: true,
                        isExpanded: false,
                        value: associationDescriptor.associationDefinition.name,
                        associationDescriptor: associationDescriptor
                    })));
                }));
            }
            return of([]);
        }), shareReplay({
            bufferSize: 1,
            refCount: true
        }));
    }
    getRecordFields(recordDefinitionName) {
        return forkJoin([
            this.getAssociatedRecordFields(recordDefinitionName),
            this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)
        ]).pipe(map$1(([associatedRecordFields, recordDefinition]) => [
            {
                fields: this.getFieldDefinitions(recordDefinition.fieldDefinitions, null),
                isExpanded: true,
                isAssociatedRecord: false,
                label: this.rxDefinitionNameService.getDisplayName(recordDefinitionName),
                value: recordDefinitionName
            },
            ...associatedRecordFields
        ]), shareReplay({
            bufferSize: 1,
            refCount: true
        }));
    }
    getFieldDefinitions(fieldDefinitions, associationDescriptor) {
        return fieldDefinitions
            .filter((fieldDefinition) => fieldDefinition.resourceType !== RX_RECORD_DEFINITION.resourceTypes.attachment)
            .map((fieldDefinition) => {
            const fieldKey = associationDescriptor
                ? this.getFieldIdExpression(fieldDefinition.id, associationDescriptor)
                : fieldDefinition.name;
            return {
                label: fieldDefinition.name,
                value: fieldKey
            };
        })
            .sort((field1, field2) => field1.label.localeCompare(field2.label));
    }
    getFieldIdExpression(fieldId, associationDescriptor) {
        return `recordContext._associations.${associationDescriptor.associationDefinition.guid}.${associationDescriptor.nodeSide}[0].${fieldId}`;
    }
}
RxFieldDefinitionPickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFieldDefinitionPickerService, deps: [{ token: i7.RxRecordGridUtilsService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i2.RxDefinitionNameService }], target: i0.ɵɵFactoryTarget.Injectable });
RxFieldDefinitionPickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFieldDefinitionPickerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFieldDefinitionPickerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i7.RxRecordGridUtilsService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i2.RxDefinitionNameService }]; } });

class RxFieldDefinitionPickerComponent extends ValueAccessor {
    constructor(rxDefinitionNameService, rxRecordGridUtilsService, rxRecordDefinitionCacheService, translateService, rxFieldDefinitionPickerService, rxStringService, rxObjectUtilsService, renderer) {
        super();
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxRecordGridUtilsService = rxRecordGridUtilsService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.translateService = translateService;
        this.rxFieldDefinitionPickerService = rxFieldDefinitionPickerService;
        this.rxStringService = rxStringService;
        this.rxObjectUtilsService = rxObjectUtilsService;
        this.renderer = renderer;
        this.defaultText = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.filteredFieldsTree = [];
        this.searchText = '';
    }
    ngOnChanges(changes) {
        var _a;
        const fieldsTree = (_a = changes.options.currentValue) === null || _a === void 0 ? void 0 : _a.fieldsTree;
        if (fieldsTree === null || fieldsTree === void 0 ? void 0 : fieldsTree.length) {
            this.filteredFieldsTree = this.rxObjectUtilsService.cloneDeep(fieldsTree);
        }
        else {
            this.filteredFieldsTree = [];
        }
        this.updateFieldLabel();
    }
    setDropdownWidth() {
        const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);
        this.dropdownWidth = dropdownButton.clientWidth + 2;
    }
    selectField(fieldNode) {
        this.dropdown.close();
        this.label = fieldNode.label;
        this.value = fieldNode.value;
    }
    clearFieldDefinition(e) {
        e.stopPropagation();
        this.reset();
    }
    reset() {
        this.label = '';
        this.value = '';
    }
    updateFieldLabel() {
        if (this.value) {
            if (this.value.indexOf('associations') !== -1) {
                this.initializeAssociatedFieldLabel().subscribe((fieldLabel) => (this.label = fieldLabel));
            }
            else {
                this.label = this.value;
            }
        }
        else {
            this.label = '';
        }
    }
    initializeAssociatedFieldLabel() {
        if (this.options.recordDefinitionName) {
            return this.rxRecordDefinitionCacheService
                .getRecordDefinition(this.options.recordDefinitionName)
                .pipe(mergeMap((recordDefinition) => this.rxRecordGridUtilsService
                .getFieldDefinition(this.value, recordDefinition)
                .pipe(map$1((fieldDefinition) => fieldDefinition.name))));
        }
    }
    filterFields(searchText) {
        this.filteredFieldsTree = this.rxObjectUtilsService.cloneDeep(this.options.fieldsTree);
        if (searchText) {
            this.filteredFieldsTree = this.filteredFieldsTree
                .map((recordFields) => (Object.assign(Object.assign({}, recordFields), { fields: recordFields.fields.filter((fieldDefinitionData) => this.rxStringService.caseInsensitiveSearch(fieldDefinitionData.label, searchText)) })))
                .filter((recordFields) => recordFields.fields.length);
        }
    }
}
RxFieldDefinitionPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFieldDefinitionPickerComponent, deps: [{ token: i2.RxDefinitionNameService }, { token: i7.RxRecordGridUtilsService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i4.TranslateService }, { token: RxFieldDefinitionPickerService }, { token: i3.RxStringService }, { token: i3.RxObjectUtilsService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
RxFieldDefinitionPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxFieldDefinitionPickerComponent, selector: "rx-field-definition-picker", inputs: { options: "options" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: RxFieldDefinitionPickerComponent,
            multi: true
        }
    ], viewQueries: [{ propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "dropdown", first: true, predicate: ["fieldDefinitionPicker"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"d-flex\">\n  <adapt-rx-control-label *ngIf=\"options.label\" [label]=\"options.label\" [showRequiredLabel]=\"options.required\">\n  </adapt-rx-control-label>\n\n  <span\n    *ngIf=\"options?.tooltip\"\n    class=\"d-icon-right-question_circle_o ml-2\"\n    [adaptPopover]=\"options.tooltip\"\n    placement=\"right\"\n    appendToBody=\"true\"\n  >\n  </span>\n</div>\n\n<div\n  class=\"dropdown\"\n  adaptDropdown\n  appendToBody=\"true\"\n  [autoClose]=\"'outside'\"\n  [autoFocusFirst]=\"false\"\n  #fieldDefinitionPicker=\"adaptDropdown\"\n>\n  <button\n    rx-id=\"toggle-button\"\n    #dropdownButton\n    class=\"btn btn-secondary\"\n    (click)=\"setDropdownWidth()\"\n    adaptDropdownToggle\n    type=\"button\"\n    [disabled]=\"!options.recordDefinitionName\"\n  >\n    <span class=\"rx-selected-item rx-ellipsis\">{{ label || defaultText }}</span>\n\n    <span\n      rx-id=\"clear-button\"\n      class=\"d-icon-cross_adapt btn-link\"\n      *ngIf=\"value && !isDisabled\"\n      (click)=\"clearFieldDefinition($event)\"\n    >\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu p-0\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <div class=\"dropdown-header\">\n      <adapt-rx-search\n        [(ngModel)]=\"searchText\"\n        placeholder=\"{{ 'com.bmc.arsys.rx.client.common.filter-data.label' | translate }}\"\n        debounceTime=\"250\"\n        class=\"py-2\"\n        (ngModelChange)=\"filterFields($event)\"\n      >\n      </adapt-rx-search>\n    </div>\n\n    <ul class=\"records\" *ngIf=\"filteredFieldsTree.length\">\n      <li\n        class=\"record rx-ellipsis\"\n        *ngFor=\"let recordNode of filteredFieldsTree\"\n        (click)=\"recordNode.isExpanded = !recordNode.isExpanded\"\n      >\n        <span rx-id=\"expand-button\" class=\"expand-arrow d-icon-angle_right\" [class.open]=\"recordNode.isExpanded\"></span>\n\n        <span\n          class=\"px-1\"\n          [ngClass]=\"recordNode.isAssociatedRecord ? 'd-icon-arrow_schema' : 'd-icon-file_text'\"\n        ></span>\n\n        <span> {{ recordNode.label }} </span>\n\n        <div class=\"fields\" *ngIf=\"recordNode.isExpanded\">\n          <button\n            class=\"dropdown-item rx-ellipsis\"\n            (click)=\"$event.stopPropagation(); selectField(fieldNode)\"\n            type=\"button\"\n            [class.active]=\"value === fieldNode.label\"\n            *ngFor=\"let fieldNode of recordNode.fields\"\n          >\n            <adapt-highlight [result]=\"fieldNode.label\" [term]=\"searchText\"></adapt-highlight>\n          </button>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.dropdown-header{border-bottom:1px solid #d6d7d8;display:flex;align-items:center;padding:0 10px;width:100%;height:50px}adapt-rx-search{flex-grow:1;align-items:center;margin:0}.expand-arrow{padding:5px;transition:.2s}.expand-arrow.open{transform:rotate(90deg)}.records{overflow-y:auto;margin:0;list-style:none;padding:5px 0;width:100%;height:275px}.record{width:100%;padding:0 5px;line-height:30px;cursor:pointer}span[rx-id=clear-button]{cursor:pointer;margin-right:5px}span[rx-id=clear-button]:not(:hover){color:#313538}span[rx-id=expand-button]{display:inline-flex;width:15px}.rx-selected-item{flex-grow:1}.dropdown-menu{height:330px}.dropdown-toggle{width:100%;display:flex;text-align:left}.dropdown-item{padding:0 15px 0 30px}\n"], components: [{ type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1$1.AdaptRxSearchComponent, selector: "adapt-rx-search", inputs: ["mode", "autocomplete", "placeholder", "size", "searchButton", "searchButtonText", "clearButtonText", "debounceTime", "ariaControlsPopupId", "ariaActiveDescendant", "initialAlign"], outputs: ["editModeChange"] }, { type: i1$1.AdaptHighlightDirective, selector: "adapt-highlight, ngb-highlight", inputs: ["highlightClass", "result", "term"], outputs: ["wordMatch"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFieldDefinitionPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-field-definition-picker',
                    templateUrl: './field-definition-picker.component.html',
                    styleUrls: ['./field-definition-picker.component.scss'],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RxFieldDefinitionPickerComponent,
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i2.RxDefinitionNameService }, { type: i7.RxRecordGridUtilsService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i4.TranslateService }, { type: RxFieldDefinitionPickerService }, { type: i3.RxStringService }, { type: i3.RxObjectUtilsService }, { type: i0.Renderer2 }]; }, propDecorators: { options: [{
                type: Input
            }], dropdownButton: [{
                type: ViewChild,
                args: ['dropdownButton', { static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['fieldDefinitionPicker', { static: true }]
            }] } });

class RecordRegistrationComponent {
    constructor(formBuilder, changeDetector, translateService, rxDefinitionNameService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, rxNotificationService, rxRecordGridUtilsService, rxFieldDefinitionPickerService) {
        this.formBuilder = formBuilder;
        this.changeDetector = changeDetector;
        this.translateService = translateService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxApprovalConfigurationService = rxApprovalConfigurationService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordGridUtilsService = rxRecordGridUtilsService;
        this.rxFieldDefinitionPickerService = rxFieldDefinitionPickerService;
        this.recordRegistered = new EventEmitter();
        this.recordRegistrationForm = this.createRecordRegistrationForm();
        this.recordDefinitionSecurityLabels = [];
        this.fieldNames = [];
        this.isSaveInProgress = false;
        this.alertConfig = {
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record-registration.info'),
            type: 'inline',
            variant: 'info'
        };
        this.recordDefinitionPickerOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.definition'),
            definitionType: RxDefinitionPickerType.PublicRegularDataRecord,
            required: true,
            availableDefinitionPickerStates: {
                definitionButtonsGroups: [RxDefinitionPickerScope.Rx],
                search: RxDefinitionPickerScope.Rx
            }
        };
        this.permissionTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.permissions.tooltip')
        };
        this.justificationTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.justification.tooltip')
        };
        this.recordDefinitionName$ = new BehaviorSubject('');
        this.fieldsTree$ = this.recordDefinitionName$.pipe(switchMap((recordDefinitionName) => {
            return recordDefinitionName ? this.rxFieldDefinitionPickerService.getRecordFields(recordDefinitionName) : of([]);
        }));
        this.requesterFieldDefinitionPickerOptions$ = combineLatest([
            this.recordDefinitionName$,
            this.fieldsTree$
        ]).pipe(map$1(([recordDefinitionName, fieldsTree]) => ({
            recordDefinitionName: recordDefinitionName,
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.requester'),
            required: true,
            tooltip: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.requester.tooltip'),
            fieldsTree: fieldsTree
        })));
        this.approverExclusionFieldDefinitionPickerOptions$ = combineLatest([
            this.recordDefinitionName$,
            this.fieldsTree$
        ]).pipe(map$1(([recordDefinitionName, fieldsTree]) => ({
            recordDefinitionName,
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.approver-exclusion.label'),
            required: false,
            tooltip: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.approver-exclusion.tooltip'),
            fieldsTree: fieldsTree
        })));
        this.summaryFieldDefinitionPickerOptions$ = combineLatest([
            this.recordDefinitionName$,
            this.fieldsTree$
        ]).pipe(map$1(([recordDefinitionName, fieldsTree]) => ({
            recordDefinitionName: recordDefinitionName,
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.summary'),
            required: true,
            fieldsTree: fieldsTree
        })));
        this.notesFieldDefinitionPickerOptions$ = combineLatest([
            this.recordDefinitionName$,
            this.fieldsTree$
        ]).pipe(map$1(([recordDefinitionName, fieldsTree]) => ({
            recordDefinitionName: recordDefinitionName,
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.notes'),
            required: false,
            fieldsTree: fieldsTree
        })));
        this.fieldDefinitionPickerOptions$ = combineLatest([
            this.recordDefinitionName$,
            this.fieldsTree$
        ]).pipe(map$1(([recordDefinitionName, fieldsTree]) => ({
            recordDefinitionName: recordDefinitionName,
            required: false,
            fieldsTree: fieldsTree
        })));
        this.destroyed$ = new ReplaySubject(1);
        this.isNewConfiguration = true;
    }
    ngOnInit() {
        if (this.isEditMode) {
            this.initializeRecordRegistrationForm();
        }
        this.recordRegistrationForm
            .get('recordDefinition')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.onRecordDefinitionChange(value));
        this.recordRegistrationForm
            .get('field3Mapping.fieldID')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.onFieldMappingChange('field3Mapping.label', value));
        this.recordRegistrationForm
            .get('field4Mapping.fieldID')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.onFieldMappingChange('field4Mapping.label', value));
        this.recordRegistrationForm
            .get('field5Mapping.fieldID')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.onFieldMappingChange('field5Mapping.label', value));
        this.recordRegistrationForm
            .get('field6Mapping.fieldID')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.onFieldMappingChange('field6Mapping.label', value));
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
    createRecordRegistrationForm() {
        return this.formBuilder.group({
            recordDefinition: ['', Validators.required],
            summaryField: ['', Validators.required],
            requestorField: ['', Validators.required],
            approverExclusionField: null,
            permissionsFromSecurityLabels: [[], Validators.nullValidator],
            requestIDField: '',
            notesField: '',
            justificationFieldName: [[], Validators.nullValidator],
            justificationRequired: this.formBuilder.group({
                toApprove: false,
                toReject: false
            }),
            field3Mapping: this.formBuilder.group(this.createAdditionalField()),
            field4Mapping: this.formBuilder.group(this.createAdditionalField()),
            field5Mapping: this.formBuilder.group(this.createAdditionalField()),
            field6Mapping: this.formBuilder.group(this.createAdditionalField())
        });
    }
    initializeRecordRegistrationForm() {
        forkJoin([
            this.rxRecordDefinitionCacheService.getRecordDefinition(this.registeredRecordDefinitionName),
            this.rxApprovalConfigurationService.getRegisteredRecordDetails(this.registeredRecordDefinitionName)
        ]).subscribe(([recordDefinition, registrationRecord]) => {
            this.isNewConfiguration = registrationRecord.isNewConfiguration;
            this.recordDefinition = recordDefinition;
            this.recordRegistrationForm.get('recordDefinition').setValue(registrationRecord.recordDefinition);
            this.recordRegistrationForm.controls['recordDefinition'].disable();
            this.recordRegistrationForm.get('summaryField').setValue(registrationRecord.summaryField);
            this.recordRegistrationForm.get('requestorField').setValue(registrationRecord.requestorField);
            this.recordRegistrationForm.get('requestIDField').setValue(registrationRecord.requestIDField);
            this.recordRegistrationForm.get('notesField').setValue(registrationRecord.notesField);
            this.recordRegistrationForm.get('approverExclusionField').setValue(registrationRecord.approverExclusionField);
            if (registrationRecord.field3Mapping) {
                this.recordRegistrationForm.get('field3Mapping').setValue(registrationRecord.field3Mapping);
            }
            if (registrationRecord.field4Mapping) {
                this.recordRegistrationForm.get('field4Mapping').setValue(registrationRecord.field4Mapping);
            }
            if (registrationRecord.field5Mapping) {
                this.recordRegistrationForm.get('field5Mapping').setValue(registrationRecord.field5Mapping);
            }
            if (registrationRecord.field6Mapping) {
                this.recordRegistrationForm.get('field6Mapping').setValue(registrationRecord.field6Mapping);
            }
            this.recordRegistrationForm
                .get('justificationFieldName')
                .setValue(registrationRecord.justificationFieldName ? [registrationRecord.justificationFieldName] : []);
            this.recordRegistrationForm
                .get('permissionsFromSecurityLabels')
                .setValue(this.getSecurityLabels(registrationRecord));
            this.recordRegistrationForm.get('justificationRequired').setValue({
                toApprove: registrationRecord.justificationRequired === JustificationRequirement.RequiredForApprovalOrRejection ||
                    registrationRecord.justificationRequired === JustificationRequirement.RequiredForApproval,
                toReject: registrationRecord.justificationRequired === JustificationRequirement.RequiredForApprovalOrRejection ||
                    registrationRecord.justificationRequired === JustificationRequirement.RequiredForRejection
            });
        });
    }
    getSecurityLabels(approvalRegistrationRecord) {
        return approvalRegistrationRecord.permissionsFromSecurityLabels.map((parentId) => this.recordDefinition.securityLabels.find((securityLabel) => securityLabel.id === parentId));
    }
    createAdditionalField() {
        return {
            fieldID: '',
            label: ''
        };
    }
    onFieldMappingChange(formControlName, value) {
        if (value && !value.includes('recordContext._associations')) {
            this.recordRegistrationForm.get(formControlName).setValue(value);
        }
        else {
            value
                ? this.setAssociatedRecordFieldLabel(value, formControlName)
                : this.recordRegistrationForm.get(formControlName).setValue('');
        }
    }
    setAssociatedRecordFieldLabel(fieldId, formControlName) {
        this.rxRecordGridUtilsService.getFieldDefinition(fieldId, this.recordDefinition).subscribe((fieldDefinition) => {
            this.recordRegistrationForm.get(formControlName).setValue(fieldDefinition.name);
        });
    }
    onRecordDefinitionChange(newRecordDefinitionName) {
        const oldRecordDefinitionName = this.recordRegistrationForm.value.recordDefinition;
        if (newRecordDefinitionName !== oldRecordDefinitionName) {
            this.reset();
            this.recordDefinitionName$.next(newRecordDefinitionName);
            if (newRecordDefinitionName) {
                this.rxRecordDefinitionCacheService
                    .getRecordDefinition(newRecordDefinitionName)
                    .subscribe((recordDefinition) => {
                    this.recordDefinition = recordDefinition;
                    this.initializeFormControls();
                });
            }
        }
    }
    initializeFormControls() {
        this.recordDefinitionSecurityLabels = cloneDeep(this.recordDefinition.securityLabels);
        this.fieldNames = this.recordDefinition.fieldDefinitions
            ? this.recordDefinition.fieldDefinitions
                .filter((fieldDefinition) => fieldDefinition.resourceType !== RX_RECORD_DEFINITION.resourceTypes.attachment)
                .map((fieldDefinition) => {
                if (fieldDefinition.id === 1) {
                    this.recordRegistrationForm.get('requestIDField').setValue(fieldDefinition.name);
                }
                return fieldDefinition.name;
            })
            : [];
    }
    optionFormatter(securityLabel) {
        return securityLabel.name;
    }
    justificationReasonOptionFormatter(fieldDefinition) {
        return fieldDefinition.name;
    }
    save() {
        this.isSaveInProgress = true;
        if (this.isEditMode) {
            this.updateRecordRegistration();
        }
        else {
            this.saveRecordRegistration();
        }
    }
    canSave() {
        return !this.isSaveInProgress && this.recordRegistrationForm.valid && this.recordRegistrationForm.dirty;
    }
    isFormValid() {
        return this.recordRegistrationForm.valid;
    }
    isFormDirty() {
        return this.recordRegistrationForm.dirty;
    }
    saveRecordRegistration() {
        const registrationRecord = this.transformFormControlData();
        registrationRecord.isNewConfiguration = true;
        this.rxRecordInstanceDataPageService
            .post({
            params: {
                recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name
            }
        })
            .subscribe((result) => {
            const isRecordRegistered = find(result.data, (record) => record[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName] ===
                registrationRecord.recordDefinition);
            if (!isRecordRegistered) {
                this.rxApprovalConfigurationService
                    .registerRecord(registrationRecord)
                    .pipe(finalize(() => {
                    this.isSaveInProgress = false;
                }))
                    .subscribe(() => {
                    this.isEditMode = true;
                    this.recordRegistrationForm.controls['recordDefinition'].disable();
                    this.recordRegistered.emit(registrationRecord.recordDefinition);
                    this.recordRegistrationForm.markAsPristine();
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.register.success'));
                });
            }
            else {
                this.isSaveInProgress = false;
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.register.duplicate'));
            }
        });
    }
    updateRecordRegistration() {
        const registrationRecord = this.transformFormControlData();
        registrationRecord.isNewConfiguration = this.isNewConfiguration;
        registrationRecord.recordDefinition = this.recordRegistrationForm.get('recordDefinition').value;
        this.rxApprovalConfigurationService
            .updateRecord(registrationRecord)
            .pipe(finalize(() => {
            this.isSaveInProgress = false;
        }))
            .subscribe(() => {
            this.isEditMode = true;
            this.recordRegistrationForm.markAsPristine();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.update', {
                recordDefinitionName: this.rxDefinitionNameService.getDisplayName(registrationRecord.recordDefinition)
            }));
        });
    }
    transformFormControlData() {
        const approvalRecord = cloneDeep(this.recordRegistrationForm.value);
        approvalRecord.justificationFieldName = approvalRecord.justificationFieldName.length
            ? approvalRecord.justificationFieldName.join()
            : null;
        approvalRecord.permissionsFromSecurityLabels = approvalRecord.permissionsFromSecurityLabels
            ? approvalRecord.permissionsFromSecurityLabels.map((securityLabel) => {
                return securityLabel.id;
            })
            : null;
        if (!approvalRecord.permissionsFromSecurityLabels) {
            delete approvalRecord.permissionsFromSecurityLabels;
        }
        if (!approvalRecord.justificationFieldName) {
            delete approvalRecord.justificationFieldName;
        }
        this.updateAdditionalFieldLabel(approvalRecord.field3Mapping);
        this.updateAdditionalFieldLabel(approvalRecord.field4Mapping);
        this.updateAdditionalFieldLabel(approvalRecord.field5Mapping);
        this.updateAdditionalFieldLabel(approvalRecord.field6Mapping);
        if (approvalRecord.justificationRequired.toApprove && approvalRecord.justificationRequired.toReject) {
            approvalRecord.justificationRequired = JustificationRequirement.RequiredForApprovalOrRejection;
        }
        else if (approvalRecord.justificationRequired.toApprove) {
            approvalRecord.justificationRequired = JustificationRequirement.RequiredForApproval;
        }
        else if (approvalRecord.justificationRequired.toReject) {
            approvalRecord.justificationRequired = JustificationRequirement.RequiredForRejection;
        }
        else {
            approvalRecord.justificationRequired = JustificationRequirement.NotRequired;
        }
        return approvalRecord;
    }
    updateAdditionalFieldLabel(fieldMapping) {
        if (fieldMapping.fieldID !== '' &&
            !fieldMapping.fieldID.includes('recordContext._associations') &&
            fieldMapping.label === '') {
            fieldMapping.label = fieldMapping.fieldID;
        }
    }
    reset() {
        this.recordDefinitionSecurityLabels = [];
        this.fieldNames = [];
        this.recordRegistrationForm.get('summaryField').setValue('');
        this.recordRegistrationForm.get('requestorField').setValue('');
        this.recordRegistrationForm.get('approverExclusionField').setValue('');
        this.recordRegistrationForm.get('permissionsFromSecurityLabels').setValue([]);
        this.recordRegistrationForm.get('justificationRequired').setValue({
            toApprove: false,
            toReject: false
        });
        this.recordRegistrationForm.get('justificationFieldName').setValue([]);
        this.recordRegistrationForm.get('requestIDField').setValue('');
        this.recordRegistrationForm.get('notesField').setValue('');
        this.recordRegistrationForm.get('field3Mapping').setValue(this.createAdditionalField());
        this.recordRegistrationForm.get('field4Mapping').setValue(this.createAdditionalField());
        this.recordRegistrationForm.get('field5Mapping').setValue(this.createAdditionalField());
        this.recordRegistrationForm.get('field6Mapping').setValue(this.createAdditionalField());
    }
    handleJustificationField() {
        if (this.recordRegistrationForm.dirty &&
            !this.recordRegistrationForm.get('justificationRequired').value.toApprove &&
            !this.recordRegistrationForm.get('justificationRequired').value.toReject) {
            this.recordRegistrationForm.get('justificationFieldName').setValue([]);
        }
    }
}
RecordRegistrationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RecordRegistrationComponent, deps: [{ token: i1$3.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: i4.TranslateService }, { token: i2.RxDefinitionNameService }, { token: RxApprovalConfigurationService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i2.RxNotificationService }, { token: i7.RxRecordGridUtilsService }, { token: RxFieldDefinitionPickerService }], target: i0.ɵɵFactoryTarget.Component });
RecordRegistrationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordRegistrationComponent, selector: "rx-record-registration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName", isEditMode: "isEditMode" }, outputs: { recordRegistered: "recordRegistered" }, ngImport: i0, template: "<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<form [formGroup]=\"recordRegistrationForm\">\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <rx-definition-picker\n        [options]=\"recordDefinitionPickerOptions\"\n        formControlName=\"recordDefinition\"\n        rx-id=\"definition-field\"\n        required=\"true\"\n      >\n      </rx-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"requesterFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"requestorField\"\n        rx-id=\"requester-id-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"approverExclusionFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"approverExclusionField\"\n        rx-id=\"approver-exclusion-field\"\n      ></rx-field-definition-picker>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <adapt-rx-select\n        [options]=\"recordDefinitionSecurityLabels\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.permissions' | translate }}\"\n        name=\"permissionsFromSecurityLabels\"\n        [optionFormatter]=\"optionFormatter\"\n        [multiple]=\"true\"\n        formControlName=\"permissionsFromSecurityLabels\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [disabled]=\"!recordDefinitionSecurityLabels.length\"\n        rx-id=\"permissions-field\"\n        [tooltip]=\"permissionTooltip\"\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        rx-id=\"request-id-field\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.console.detail.RequestId' | translate }}\"\n        formControlName=\"requestIDField\"\n        [readonly]=\"true\"\n        [disabledStyleForReadonlyState]=\"true\"\n      >\n      </adapt-rx-textfield>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"summaryFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"summaryField\"\n        rx-id=\"summary-field\"\n      ></rx-field-definition-picker>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"notesFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"notesField\"\n        rx-id=\"notes-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.label' | translate }}\"\n      ></adapt-rx-control-label>\n\n      <div formGroupName=\"justificationRequired\">\n        <adapt-rx-checkbox\n          class=\"checkbox-inline\"\n          formControlName=\"toApprove\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.approval.label' | translate }}\"\n          [disabled]=\"!fieldNames.length\"\n          (ngModelChange)=\"handleJustificationField()\"\n        >\n        </adapt-rx-checkbox>\n\n        <adapt-rx-checkbox\n          class=\"checkbox-inline\"\n          formControlName=\"toReject\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.rejection.label' | translate }}\"\n          [disabled]=\"!fieldNames.length\"\n          (ngModelChange)=\"handleJustificationField()\"\n        >\n        </adapt-rx-checkbox>\n      </div>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-select\n        [options]=\"fieldNames\"\n        [emptyOption]=\"true\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.justification-reason.label' | translate }}\"\n        formControlName=\"justificationFieldName\"\n        name=\"justificationFieldName\"\n        [selectAllButton]=\"true\"\n        enableFilter=\"true\"\n        closeOnSelect=\"true\"\n        rx-id=\"justification-reason-field\"\n        [deselectAllButton]=\"true\"\n        [disabled]=\"!fieldNames.length\"\n        [tooltip]=\"justificationTooltip\"\n        [required]=\"\n          recordRegistrationForm.get('justificationRequired').value.toApprove ||\n          recordRegistrationForm.get('justificationRequired').value.toReject\n        \"\n      ></adapt-rx-select>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.fields' | translate }}\"\n      ></adapt-rx-control-label>\n    </div>\n\n    <div class=\"col-4\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.fields.labels' | translate }}\"\n      ></adapt-rx-control-label>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field3Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n        rx-id=\"field3-mapping-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field3MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field3Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field4Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n        rx-id=\"field4-mapping-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field4MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field4Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\" formGroupName=\"field5Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        rx-id=\"field5-mapping-field\"\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field5MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field5Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field6Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        rx-id=\"field6-mapping-field\"\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field6MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field6Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n</form>\n", components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: RxFieldDefinitionPickerComponent, selector: "rx-field-definition-picker", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "async": i8.AsyncPipe, "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RecordRegistrationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-record-registration',
                    templateUrl: './record-registration.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: i4.TranslateService }, { type: i2.RxDefinitionNameService }, { type: RxApprovalConfigurationService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i2.RxNotificationService }, { type: i7.RxRecordGridUtilsService }, { type: RxFieldDefinitionPickerService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                type: Input
            }], isEditMode: [{
                type: Input
            }], recordRegistered: [{
                type: Output
            }] } });

const approvalMappingDataPage = 'com.bmc.arsys.rx.approval.application.datapage.ApprovalMappingDataPage';
class RxApprovalMappingDataPageService extends DataPage {
    constructor(injector) {
        super(injector, approvalMappingDataPage);
        this.injector = injector;
    }
}
RxApprovalMappingDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalMappingDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxApprovalMappingDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalMappingDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalMappingDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class SelfApprovalConfigurationComponent {
    constructor(injector, formBuilder, rxModalService, translateService, rxGlobalCacheService, rxNotificationService, rxDefinitionNameService, rxExpressionEditorService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxApprovalMappingDataPageService) {
        this.injector = injector;
        this.formBuilder = formBuilder;
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxNotificationService = rxNotificationService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxExpressionEditorService = rxExpressionEditorService;
        this.rxApprovalConfigurationService = rxApprovalConfigurationService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxApprovalMappingDataPageService = rxApprovalMappingDataPageService;
        this.alertConfig = {
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.information'),
            type: 'inline',
            variant: 'info'
        };
        this.processOptions = [];
    }
    ngOnInit() {
        this.isUpdateButtonVisible = false;
        this.expressionConfigurator = new RxApprovalExpressionConfigurator(this.injector);
        this.expressionConfigurator.configureForProperty({
            propertyPath: 'approvalQualification',
            dataDictionary$: this.expressionConfigurator.approvalExpressionDataDictionary(this.registeredRecordDefinitionName),
            operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All)
        });
        this.options = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.approval-qualification-field.label'),
            dataDictionary$: this.expressionConfigurator.getDataDictionary('approvalQualification'),
            operators: this.expressionConfigurator.getOperators('approvalQualification'),
            isRequired: true
        };
        this.selfApprovalConfigurationForm = this.formBuilder.group({
            qualificationExpression: null,
            precedence: null,
            auditInformation: null,
            process: []
        });
        this.gridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                    style: 'tertiary',
                    icon: 'pencil',
                    actions: [
                        {
                            name: this.setCurrentRecordValuesToForm.bind(this)
                        }
                    ],
                    disabled: () => this.grid.api.getSelectedRowCount() > 1
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: this.deleteConfiguration.bind(this)
                        }
                    ]
                }
            ],
            recordDefinitionName: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name,
            enableRowSelection: RowSelectionMode.Multiple,
            getData: (queryParams) => this.getData(queryParams),
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: this.getColumns(),
            styles: 'flex-fill'
        });
        this.grid.adaptTable.selectionChange.subscribe(() => {
            this.isUpdateButtonVisible = false;
            this.clearFormValues();
        });
        this.loadProcesses();
    }
    getData(queryParams) {
        const params = Object.assign(Object.assign({}, omit(queryParams, ['searchText'])), { [RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition]: this.registeredRecordDefinitionName });
        return this.rxApprovalMappingDataPageService.get({ params });
    }
    loadProcesses() {
        this.loadingProcesses = true;
        const queryParams = {
            recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.flowList.name,
            propertySelection: [
                RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition,
                RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName,
                RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowProcessDefinitionGuid
            ].join(',')
        };
        this.rxApprovalMappingDataPageService
            .get({ params: queryParams })
            .pipe(map$1((response) => {
            const bundleInfoRequests = chain(response.data)
                .filter({
                [RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition]: this.registeredRecordDefinitionName
            })
                .map((processData) => {
                const id = this.rxDefinitionNameService.getBundleId(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName]);
                return this.rxGlobalCacheService.getBundleFriendlyName(id).pipe(map$1((friendlyName) => ({
                    id,
                    friendlyName
                })));
            })
                .value();
            forkJoin(bundleInfoRequests).subscribe((bundleIdNameData) => {
                this.processOptions = chain(response.data)
                    .filter({
                    [RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition]: this.registeredRecordDefinitionName
                })
                    .map((processData) => {
                    return {
                        id: this.rxDefinitionNameService.getBundleId(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName]),
                        processGuid: processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowProcessDefinitionGuid],
                        value: processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName],
                        displayValue: this.rxDefinitionNameService.getDisplayName(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName])
                    };
                })
                    .groupBy('id')
                    .map((options, id) => {
                    return {
                        name: find(bundleIdNameData, { id }).friendlyName,
                        children: map(options, (option) => {
                            return {
                                value: option.value,
                                displayValue: option.displayValue,
                                processGuid: option.processGuid
                            };
                        })
                    };
                })
                    .value();
            }, () => { }, () => (this.loadingProcesses = false));
        }))
            .subscribe();
    }
    onEvent() {
        this.selectApprovalQualificationExpression();
    }
    selectApprovalQualificationExpression() {
        this.rxExpressionEditorService
            .openEditor({
            property: {
                path: 'approvalQualification',
                value: this.selfApprovalConfigurationForm.value.qualificationExpression,
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.approval-qualification-field.label')
            },
            expressionConfigurator: this.expressionConfigurator,
            legend: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                    icon: 'd-icon-dollar'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                    icon: 'd-icon-field_text'
                }
            ]
        }, (dialogApi) => (this.dialogApi = dialogApi))
            .subscribe((expression) => {
            this.dialogApi = null;
            this.selfApprovalConfigurationForm.get('qualificationExpression').setValue(expression.value);
            this.selfApprovalConfigurationForm.get('qualificationExpression').markAsDirty();
        });
    }
    createSelfApprovalConfiguration() {
        this.selfApprovalConfigurationForm.markAsPristine();
        const configuration = this.getSelfApprovalConfiguration();
        this.rxApprovalConfigurationService.createSelfApprovalConfiguration(configuration).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-saved.message'));
            this.clearFormValues();
            this.grid.api.refresh().subscribe();
        });
    }
    updateSelfApprovalConfiguration() {
        this.selfApprovalConfigurationForm.markAsPristine();
        const configuration = this.getSelfApprovalConfiguration();
        configuration.id = this.grid.api.getFirstSelectedRow()[RX_RECORD_DEFINITION.coreFieldIds.id];
        this.rxApprovalConfigurationService
            .updateSelfApprovalConfiguration(this.grid.api.getFirstSelectedRow()[RX_RECORD_DEFINITION.coreFieldIds.id], configuration)
            .subscribe(() => {
            this.clearFormValues();
            this.isUpdateButtonVisible = false;
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-updated.message'));
            this.grid.api.refresh().subscribe();
        });
    }
    getSelfApprovalConfiguration() {
        const selectedProcess = get(this.selfApprovalConfigurationForm.get('process').value, '[0]', {});
        return {
            auditText: this.selfApprovalConfigurationForm.value.auditInformation,
            precedence: this.selfApprovalConfigurationForm.value.precedence,
            qualification: this.selfApprovalConfigurationForm.value.qualificationExpression,
            description: this.registeredRecordDefinitionName,
            recordDefinition: this.registeredRecordDefinitionName,
            approvalFlowName: selectedProcess.value || '',
            approvalFlowProcessDefinitionGUID: selectedProcess.processGuid || '',
            approvalMappingRecordDefinition: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name
        };
    }
    setCurrentRecordValuesToForm() {
        this.isUpdateButtonVisible = true;
        const selectedRow = this.grid.api.getFirstSelectedRow();
        this.selfApprovalConfigurationForm
            .get('qualificationExpression')
            .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification]);
        this.selfApprovalConfigurationForm
            .get('precedence')
            .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence]);
        this.selfApprovalConfigurationForm
            .get('auditInformation')
            .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation]);
        const process = selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName]
            ? [
                {
                    value: selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName],
                    displayValue: this.rxDefinitionNameService.getDisplayName(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName])
                }
            ]
            : [];
        this.selfApprovalConfigurationForm.get('process').setValue(process);
    }
    deleteConfiguration() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-delete-confirmation.message')
        })
            .then((result) => {
            if (result) {
                const deleteRequests$ = this.grid.api
                    .getSelectedRows()
                    .map((record) => this.rxApprovalConfigurationService.deleteSelfApprovalConfiguration(record[RX_RECORD_DEFINITION.coreFieldIds.id]));
                forkJoin(deleteRequests$).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-deleted.message'));
                    this.clearFormValues();
                    this.isUpdateButtonVisible = false;
                    this.grid.api.refresh().subscribe();
                });
            }
        });
    }
    clearFormValues() {
        this.selfApprovalConfigurationForm.reset();
        this.selfApprovalConfigurationForm.get('process').setValue([]);
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    getRecordDefinition() {
        return {
            fieldDefinitions: [
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.hiddenQualification,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.integer
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowGuid,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
    }
    getColumns() {
        return [
            {
                index: 0,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.hiddenQualification),
                sortable: false,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.approvalExpression')
            },
            {
                index: 1,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.precedence')
            },
            {
                index: 2,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.auditInformation')
            },
            {
                index: 3,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.processFlow')
            },
            {
                index: 4,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification),
                visible: false,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.expressionValue')
            },
            {
                index: 5,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition),
                visible: false,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.recordDefinition'),
                cellTemplate: this.definitionNameCellTemplate
            },
            {
                index: 6,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowGuid),
                visible: false,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.processFlowGUID')
            },
            {
                index: 7,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                visible: false,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.id')
            }
        ];
    }
    isDirty() {
        var _a;
        return this.selfApprovalConfigurationForm.dirty || Boolean((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty());
    }
}
SelfApprovalConfigurationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SelfApprovalConfigurationComponent, deps: [{ token: i0.Injector }, { token: i1$3.FormBuilder }, { token: i1.RxModalService }, { token: i4.TranslateService }, { token: i2.RxGlobalCacheService }, { token: i2.RxNotificationService }, { token: i2.RxDefinitionNameService }, { token: i4$1.RxExpressionEditorService }, { token: RxApprovalConfigurationService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: RxApprovalMappingDataPageService }], target: i0.ɵɵFactoryTarget.Component });
SelfApprovalConfigurationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelfApprovalConfigurationComponent, selector: "rx-self-approval-configuration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName" }, viewQueries: [{ propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0, template: "<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<form [formGroup]=\"selfApprovalConfigurationForm\">\n  <rx-expression-form-control\n    class=\"d-block form-group\"\n    [options]=\"options\"\n    formControlName=\"qualificationExpression\"\n    (events)=\"onEvent()\"\n    required=\"true\"\n  ></rx-expression-form-control>\n\n  <div class=\"row\">\n    <div class=\"col-md-4 col-12\">\n      <div class=\"row\">\n        <div class=\"col-12 form-group\">\n          <adapt-rx-counter\n            rx-id=\"precedence\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.precedence' | translate }}\"\n            required=\"true\"\n            formControlName=\"precedence\"\n          >\n          </adapt-rx-counter>\n        </div>\n\n        <div class=\"col-12 form-group\">\n          <adapt-rx-select\n            class=\"d-block\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.selfApproval.process' | translate }}\"\n            rx-id=\"process\"\n            formControlName=\"process\"\n            [options]=\"processOptions\"\n            enableFilter=\"true\"\n            emptyOption=\"true\"\n            [optionFormatter]=\"optionFormatter\"\n            [loadingState]=\"loadingProcesses\"\n          >\n          </adapt-rx-select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-8 col-12 form-group\">\n      <adapt-rx-textarea\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.auditInformation' | translate }}\"\n        formControlName=\"auditInformation\"\n        rx-id=\"audit-information\"\n        required=\"true\"\n        rows=\"5\"\n      >\n      </adapt-rx-textarea>\n    </div>\n  </div>\n\n  <button\n    class=\"d-icon-plus_adapt form-group\"\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"add-button\"\n    size=\"small\"\n    [hidden]=\"isUpdateButtonVisible\"\n    [disabled]=\"selfApprovalConfigurationForm.pristine || selfApprovalConfigurationForm.invalid\"\n    (click)=\"createSelfApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n  </button>\n\n  <button\n    class=\"form-group\"\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"update-button\"\n    size=\"small\"\n    [hidden]=\"!isUpdateButtonVisible\"\n    [disabled]=\"selfApprovalConfigurationForm.pristine || selfApprovalConfigurationForm.invalid\"\n    (click)=\"updateSelfApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n  </button>\n</form>\n\n<rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: ["rx-record-grid{height:262px}:host::ng-deep rx-expression-form-control button{height:2rem}\n"], components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i4$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe, "rxDefinitionNamePipe": i2.RxDefinitionNamePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SelfApprovalConfigurationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-self-approval-configuration',
                    templateUrl: './self-approval-configuration.component.html',
                    styleUrls: ['./self-approval-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$3.FormBuilder }, { type: i1.RxModalService }, { type: i4.TranslateService }, { type: i2.RxGlobalCacheService }, { type: i2.RxNotificationService }, { type: i2.RxDefinitionNameService }, { type: i4$1.RxExpressionEditorService }, { type: RxApprovalConfigurationService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: RxApprovalMappingDataPageService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                type: Input
            }], definitionNameCellTemplate: [{
                type: ViewChild,
                args: ['definitionNameCellTemplate', { static: true }]
            }], grid: [{
                type: ViewChild,
                args: ['grid', { static: true }]
            }] } });

class ApprovalConfigurationEditorComponent extends RxModalClass {
    constructor(translateService, rxNotificationService, activeModalRef, injector) {
        super(activeModalRef, injector);
        this.translateService = translateService;
        this.rxNotificationService = rxNotificationService;
        this.activeModalRef = activeModalRef;
        this.injector = injector;
        this.activatedTabs = [true, false, false];
        this.selectedRecordDefinition = this.activeModalRef.getData().selectedRecordDefinition;
        this.editMode = this.activeModalRef.getData().editMode;
    }
    isDirty() {
        var _a, _b, _c;
        return (((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.isFormDirty()) ||
            ((_b = this.approvalFlowConfigurationComponent) === null || _b === void 0 ? void 0 : _b.isDirty()) ||
            ((_c = this.selfApprovalConfigurationComponent) === null || _c === void 0 ? void 0 : _c.isDirty()));
    }
    onRecordRegistered(registeredRecordDefinitionName) {
        this.editMode = true;
        this.selectedRecordDefinition = registeredRecordDefinitionName;
    }
    isSaveButtonDisabled() {
        var _a, _b, _c;
        if (this.editMode) {
            return !((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.canSave()) && !((_b = this.approvalFlowConfigurationComponent) === null || _b === void 0 ? void 0 : _b.canSave());
        }
        else {
            return !((_c = this.recordRegistrationComponent) === null || _c === void 0 ? void 0 : _c.canSave());
        }
    }
    saveApprovalConfiguration() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.isFormDirty()) && ((_b = this.recordRegistrationComponent) === null || _b === void 0 ? void 0 : _b.isFormValid())) {
            this.recordRegistrationComponent.save();
        }
        else if (((_c = this.recordRegistrationComponent) === null || _c === void 0 ? void 0 : _c.isFormDirty()) && !((_d = this.recordRegistrationComponent) === null || _d === void 0 ? void 0 : _d.isFormValid())) {
            this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.validation.error'));
            this.tabSetComponent.setActiveTab(0, true, null);
        }
        if (this.editMode && ((_e = this.approvalFlowConfigurationComponent) === null || _e === void 0 ? void 0 : _e.canSave())) {
            (_f = this.approvalFlowConfigurationComponent) === null || _f === void 0 ? void 0 : _f.markInvalidGroupsAndFlows();
            if ((_g = this.approvalFlowConfigurationComponent) === null || _g === void 0 ? void 0 : _g.areFlowGroupsValid()) {
                this.approvalFlowConfigurationComponent.saveFlowGroups();
            }
            else if ((_h = this.approvalFlowConfigurationComponent) === null || _h === void 0 ? void 0 : _h.hasFlowGroups()) {
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.validation.error'));
                this.tabSetComponent.setActiveTab(2, true, null);
            }
        }
    }
    closeModal() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
}
ApprovalConfigurationEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationEditorComponent, deps: [{ token: i4.TranslateService }, { token: i2.RxNotificationService }, { token: i1$1.ActiveModalRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ApprovalConfigurationEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalConfigurationEditorComponent, selector: "rx-approval-configuration-editor", viewQueries: [{ propertyName: "approvalFlowConfigurationComponent", first: true, predicate: ApprovalFlowConfigurationComponent, descendants: true }, { propertyName: "recordRegistrationComponent", first: true, predicate: RecordRegistrationComponent, descendants: true }, { propertyName: "selfApprovalConfigurationComponent", first: true, predicate: SelfApprovalConfigurationComponent, descendants: true }, { propertyName: "tabSetComponent", first: true, predicate: ["tabSetComponent"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"designer-modal-body d-flex mh-100 flex-column\">\n  <adapt-tabset [fullHeight]=\"true\" #tabSetComponent (tab-active-changed)=\"activatedTabs[$event.index] = true\">\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.registration' | translate }}\"\n    >\n      <rx-record-registration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        [isEditMode]=\"editMode\"\n        (recordRegistered)=\"onRecordRegistered($event)\"\n      ></rx-record-registration>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.selfApproval' | translate }}\"\n      [disabled]=\"!editMode\"\n    >\n      <rx-self-approval-configuration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        *ngIf=\"editMode && activatedTabs[1]\"\n      >\n      </rx-self-approval-configuration>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.approvalFlows' | translate }}\"\n      [disabled]=\"!editMode\"\n    >\n      <rx-approval-flow-configuration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        *ngIf=\"editMode && activatedTabs[2]\"\n      ></rx-approval-flow-configuration>\n    </adapt-tab-panel>\n  </adapt-tabset>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"saveApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"closeModal()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: RecordRegistrationComponent, selector: "rx-record-registration", inputs: ["registeredRecordDefinitionName", "isEditMode"], outputs: ["recordRegistered"] }, { type: SelfApprovalConfigurationComponent, selector: "rx-self-approval-configuration", inputs: ["registeredRecordDefinitionName"] }, { type: ApprovalFlowConfigurationComponent, selector: "rx-approval-flow-configuration", inputs: ["registeredRecordDefinitionName"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-approval-configuration-editor',
                    templateUrl: './approval-configuration-editor.component.html',
                    styleUrls: ['./approval-configuration-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i4.TranslateService }, { type: i2.RxNotificationService }, { type: i1$1.ActiveModalRef }, { type: i0.Injector }]; }, propDecorators: { approvalFlowConfigurationComponent: [{
                type: ViewChild,
                args: [ApprovalFlowConfigurationComponent]
            }], recordRegistrationComponent: [{
                type: ViewChild,
                args: [RecordRegistrationComponent]
            }], selfApprovalConfigurationComponent: [{
                type: ViewChild,
                args: [SelfApprovalConfigurationComponent]
            }], tabSetComponent: [{
                type: ViewChild,
                args: ['tabSetComponent']
            }] } });

const recordDefinitionRegistrationDataPageQuery = 'com.bmc.arsys.rx.approval.application.datapage.RecordDefinitionRegistrationDataPageQuery';
class RxRecordDefinitionRegistrationDataPageService extends DataPage {
    constructor(injector) {
        super(injector, recordDefinitionRegistrationDataPageQuery);
        this.injector = injector;
    }
}
RxRecordDefinitionRegistrationDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRecordDefinitionRegistrationDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxRecordDefinitionRegistrationDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRecordDefinitionRegistrationDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRecordDefinitionRegistrationDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class RxAssociatedRecordFieldNamePipe {
    transform(value, associatedRecordFieldNames) {
        return (associatedRecordFieldNames === null || associatedRecordFieldNames === void 0 ? void 0 : associatedRecordFieldNames[value]) || value;
    }
}
RxAssociatedRecordFieldNamePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAssociatedRecordFieldNamePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
RxAssociatedRecordFieldNamePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAssociatedRecordFieldNamePipe, name: "rxAssociatedRecordFieldNamePipe" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxAssociatedRecordFieldNamePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'rxAssociatedRecordFieldNamePipe'
                }]
        }] });

class ApprovalConfigurationAdminComponent {
    constructor(rxModalService, translateService, adaptModalService, rxNotificationService, rxApprovalConfigurationService, rxRecordDefinitionRegistrationDataPageService) {
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.adaptModalService = adaptModalService;
        this.rxNotificationService = rxNotificationService;
        this.rxApprovalConfigurationService = rxApprovalConfigurationService;
        this.rxRecordDefinitionRegistrationDataPageService = rxRecordDefinitionRegistrationDataPageService;
    }
    ngOnInit() {
        this.gridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.button.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: () => {
                                this.unregisterRecord();
                            }
                        }
                    ]
                }
            ],
            recordDefinitionName: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name,
            filterExpression: "('61001'!=$NULL$ AND '61001'!=\"\" AND ('14860' != $NULL$ AND '14860' = 1 ))",
            getData: (queryParams) => this.getData(queryParams),
            enableRowSelection: RowSelectionMode.Single,
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: this.getColumns(),
            styles: 'flex-fill',
            enableFiltering: false
        });
    }
    getData(queryParams) {
        delete queryParams.searchText;
        queryParams.pageSize = -1;
        return this.rxRecordDefinitionRegistrationDataPageService.get({ params: queryParams });
    }
    newApprovalConfiguration() {
        this.openApprovalConfiguration({
            editMode: false,
            selectedRecordDefinition: ''
        });
    }
    editApprovalConfiguration(clickedColumnRow) {
        this.openApprovalConfiguration({
            editMode: true,
            selectedRecordDefinition: clickedColumnRow[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName]
        });
    }
    openApprovalConfiguration(data) {
        this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.main.title'),
            content: ApprovalConfigurationEditorComponent,
            size: OpenViewActionModalSize.Large,
            data: Object.assign({}, data)
        })
            .then(() => { }, () => {
            this.grid.api.refresh().subscribe();
        })
            .catch(() => { });
    }
    unregisterRecord() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.warning')
        })
            .then((result) => {
            if (result) {
                this.rxApprovalConfigurationService
                    .unRegisterRecord(this.grid.api.getFirstSelectedRow()[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName])
                    .subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.success'));
                    this.grid.api.refresh().subscribe();
                });
            }
        });
    }
    getRecordDefinition() {
        return {
            fieldDefinitions: [
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formRequestId,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.requester,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.summary,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.notesField,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field3,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field4,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field5,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field6,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.securityLabels,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
    }
    getColumns() {
        return [
            {
                index: 0,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.recordDefinition'),
                cellTemplate: this.definitionNameCellTemplate
            },
            {
                index: 1,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formRequestId),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.requestId'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 2,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.requester),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.requester'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 3,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.summary),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.description'),
                cellTemplate: this.fieldNameCellTemplate
            },
            {
                index: 4,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.formInstanceId'),
                visible: false
            },
            {
                index: 5,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.notesField),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.notes'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 6,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field3),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field3'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 7,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field4),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field4'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 8,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field5),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field5'),
                cellTemplate: this.fieldNameCellTemplate,
                visible: false
            },
            {
                index: 9,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field6),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field6'),
                visible: false
            },
            {
                index: 10,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field7'),
                visible: false
            },
            {
                index: 11,
                fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.securityLabels),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.securityLabels'),
                visible: false
            }
        ];
    }
}
ApprovalConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationAdminComponent, deps: [{ token: i1.RxModalService }, { token: i4.TranslateService }, { token: i1$1.AdaptModalService }, { token: i2.RxNotificationService }, { token: RxApprovalConfigurationService }, { token: RxRecordDefinitionRegistrationDataPageService }], target: i0.ɵɵFactoryTarget.Component });
ApprovalConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalConfigurationAdminComponent, selector: "rx-admin-approval-configuration", viewQueries: [{ propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "fieldNameCellTemplate", first: true, predicate: ["fieldNameCellTemplate"], descendants: true, static: true }, { propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.title' | translate }}\">\n  <ng-container>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"newApprovalConfiguration()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <a href=\"javascript:void(0)\" (click)=\"editApprovalConfiguration(dataItem)\">\n    {{ dataItem[column.field] | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n\n<ng-template #fieldNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxAssociatedRecordFieldNamePipe: dataItem.associationsLabels }}\n</ng-template>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe, "rxDefinitionNamePipe": i2.RxDefinitionNamePipe, "rxAssociatedRecordFieldNamePipe": RxAssociatedRecordFieldNamePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-approval-configuration',
                    templateUrl: './approval-configuration.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i4.TranslateService }, { type: i1$1.AdaptModalService }, { type: i2.RxNotificationService }, { type: RxApprovalConfigurationService }, { type: RxRecordDefinitionRegistrationDataPageService }]; }, propDecorators: { definitionNameCellTemplate: [{
                type: ViewChild,
                args: ['definitionNameCellTemplate', { static: true }]
            }], fieldNameCellTemplate: [{
                type: ViewChild,
                args: ['fieldNameCellTemplate', { static: true }]
            }], grid: [{
                type: ViewChild,
                args: ['grid', { static: true }]
            }] } });

class ApprovalConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-approval-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApprovalConfigurationAdminComponent),
            name: 'Approval configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ApprovalConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ApprovalConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationRegistrationModule, declarations: [ApprovalConfigurationAdminComponent,
        ApprovalFlowConfigurationComponent,
        RxAssociatedRecordFieldNamePipe,
        SelfApprovalConfigurationComponent,
        RecordRegistrationComponent,
        RxFieldDefinitionPickerComponent,
        FlowApproversSelectorComponent,
        ApprovalConfigurationEditorComponent], imports: [AdaptAlertModule,
        AdaptButtonModule,
        AdaptHighlightModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptTabsModule,
        AdminSettingsModule,
        CommonModule,
        ExpressionFormControlModule,
        RecordGridModule,
        RxBusyIndicatorModule,
        RxDefinitionPickerModule,
        TranslateModule,
        ReactiveFormsModule,
        AdaptRxLabelModule,
        FormsModule,
        AdaptDropdownModule,
        AdaptRxSearchModule,
        AdaptTreeModule,
        RxDefinitionModule,
        AdaptRxCounterModule,
        AdaptRxTextareaModule,
        AdaptPopoverModule,
        AdaptTooltipModule,
        DragDropModule,
        AdaptAccordionModule,
        AdaptRxRadiobuttonModule,
        AdaptBusyModule,
        RxSelectWithPaginationModule,
        AdaptRxCheckboxModule,
        AdaptRxValidatorsModule,
        AdaptEmptyStateModule] });
ApprovalConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationRegistrationModule, imports: [[
            AdaptAlertModule,
            AdaptButtonModule,
            AdaptHighlightModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptTabsModule,
            AdminSettingsModule,
            CommonModule,
            ExpressionFormControlModule,
            RecordGridModule,
            RxBusyIndicatorModule,
            RxDefinitionPickerModule,
            TranslateModule,
            ReactiveFormsModule,
            AdaptRxLabelModule,
            FormsModule,
            AdaptDropdownModule,
            AdaptRxSearchModule,
            AdaptTreeModule,
            RxDefinitionModule,
            AdaptRxCounterModule,
            AdaptRxTextareaModule,
            AdaptPopoverModule,
            AdaptTooltipModule,
            DragDropModule,
            AdaptAccordionModule,
            AdaptRxRadiobuttonModule,
            AdaptBusyModule,
            RxSelectWithPaginationModule,
            AdaptRxCheckboxModule,
            AdaptRxValidatorsModule,
            AdaptEmptyStateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ApprovalConfigurationAdminComponent,
                        ApprovalFlowConfigurationComponent,
                        RxAssociatedRecordFieldNamePipe,
                        SelfApprovalConfigurationComponent,
                        RecordRegistrationComponent,
                        RxFieldDefinitionPickerComponent,
                        FlowApproversSelectorComponent,
                        ApprovalConfigurationEditorComponent
                    ],
                    imports: [
                        AdaptAlertModule,
                        AdaptButtonModule,
                        AdaptHighlightModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptTabsModule,
                        AdminSettingsModule,
                        CommonModule,
                        ExpressionFormControlModule,
                        RecordGridModule,
                        RxBusyIndicatorModule,
                        RxDefinitionPickerModule,
                        TranslateModule,
                        ReactiveFormsModule,
                        AdaptRxLabelModule,
                        FormsModule,
                        AdaptDropdownModule,
                        AdaptRxSearchModule,
                        AdaptTreeModule,
                        RxDefinitionModule,
                        AdaptRxCounterModule,
                        AdaptRxTextareaModule,
                        AdaptPopoverModule,
                        AdaptTooltipModule,
                        DragDropModule,
                        AdaptAccordionModule,
                        AdaptRxRadiobuttonModule,
                        AdaptBusyModule,
                        RxSelectWithPaginationModule,
                        AdaptRxCheckboxModule,
                        AdaptRxValidatorsModule,
                        AdaptEmptyStateModule
                    ],
                    entryComponents: [ApprovalConfigurationAdminComponent, FlowApproversSelectorComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_APPROVAL_NOTIFICATIONS = {
    approvalNotificationForm: {
        name: 'AP: Approval Notification',
        fields: {
            status: RX_RECORD_DEFINITION.coreFieldIds.status,
            notificationName: RX_RECORD_DEFINITION.coreFieldIds.description,
            sendToOther: 12300,
            method: 12301,
            sendTo: 12302,
            notificationMessage: 12303,
            subject: 12305,
            notifyOn: 12307,
            additionalConditions: 12308,
            useTemplate: 14053,
            applicationName: 14861,
            globalNotification: 14862,
            applicationBundleId: 61001
        }
    },
    apProcessDefinitionForm: {
        name: 'AP:Process Definition',
        fields: {
            processName: 10000,
            application: 10050
        }
    },
    approvalFlowConfiguration: {
        name: 'com.bmc.arsys.rx.approval:ApprovalFlowConfiguration',
        fields: {
            flowGroup: 10007,
            flowName: 10008,
            recordDefinition: 10000,
            arApprovalProcessDefinitionGuid: 57060
        }
    },
    arSystemEmailMailboxConfiguration: {
        name: 'AR System Email Mailbox Configuration',
        fields: {
            mailboxFunction: 18049
        }
    },
    arSystemAdministrationTextTemplate: {
        name: 'AR System Administration: TextTemplate',
        fields: {
            id: RX_RECORD_DEFINITION.coreFieldIds.id,
            name: 41202,
            applicationBundleId: 61001
        }
    }
};

const approvalNotificationDataPageQuery = 'com.bmc.arsys.rx.approval.application.datapage.ApprovalNotificationDataPageQuery';
class RxApprovalNotificationsDataPageService extends DataPage {
    constructor(injector) {
        super(injector, approvalNotificationDataPageQuery);
    }
}
RxApprovalNotificationsDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxApprovalNotificationsDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class RxApprovalNotificationsService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.approvalNotificationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/configuration/notification';
    }
    getApprovalNotification(notificationRecordInstanceId) {
        return this.httpClient.get(`${this.approvalNotificationApi}/${notificationRecordInstanceId}`);
    }
    createApprovalNotification(approvalNotificationRecord) {
        return this.httpClient.post(this.approvalNotificationApi, approvalNotificationRecord);
    }
    updateApprovalNotification(approvalNotificationRecord) {
        return this.httpClient.put(`${this.approvalNotificationApi}/${approvalNotificationRecord.notificationGuid}`, approvalNotificationRecord);
    }
    deleteApprovalNotifications(recordInstanceIds) {
        return forkJoin(map(recordInstanceIds, (id) => {
            return this.httpClient.delete(`${this.approvalNotificationApi}/${id}`);
        }));
    }
}
RxApprovalNotificationsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxApprovalNotificationsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxApprovalNotificationsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class RxApprovalNotificationExpressionConfigurator extends RxExpressionConfigurator {
    constructor(injector) {
        super();
        this.injector = injector;
        this.translateService = this.injector.get(TranslateService);
        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);
        this.commonDataDictionary$ = of([
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                children: []
            }
        ]);
    }
    approvalNotificationExpressionDataDictionary(recordDefinitionName, isSingleQuoteTextExpression) {
        if (recordDefinitionName) {
            return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(map$1((recordDefinition) => {
                return [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'),
                        children: recordDefinition.fieldDefinitions
                            .filter((fieldDefinition) => {
                            var _a;
                            return fieldDefinition.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&
                                ((_a = fieldDefinition.fieldMapping) === null || _a === void 0 ? void 0 : _a.source) === 'PRIMARY_RECORD_DEFINITION' &&
                                !includes([
                                    RX_RECORD_DEFINITION.coreFieldIds.displayId,
                                    RX_RECORD_DEFINITION.coreFieldIds.id,
                                    RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId
                                ], fieldDefinition.id);
                        })
                            .map((fieldDefinition) => ({
                            label: fieldDefinition.name.replace(new RegExp(' Primary$'), ''),
                            icon: 'd-icon-field_text',
                            expression: isSingleQuoteTextExpression
                                ? `'${fieldDefinition.name}'`
                                : `'\${${fieldDefinition.name}}'`,
                            resourceType: fieldDefinition.resourceType
                        }))
                    },
                    {
                        label: 'NULL',
                        icon: 'd-icon-dollar',
                        expression: '$NULL$',
                        hidden: true
                    }
                ];
            }));
        }
        else {
            return of([]);
        }
    }
}

const RX_CONNECTION_MAPPING = {
    aliasTypes: {
        dataSource: 'DataSource',
        webRequest: 'WebRequest',
        connector: 'connector'
    },
    connector: {
        recordDefinitionName: 'Connector Configurations',
        fields: {
            status: RX_RECORD_DEFINITION.coreFieldIds.status,
            id: RX_RECORD_DEFINITION.coreFieldIds.id,
            target_name: 56110,
            connector_id: 56111,
            connector_name: 56112,
            connector_config_id: 56113,
            connector_config_name: 56114,
            connector_profile_id: 56115,
            connector_profile_Name: 56116
        }
    },
    webRequest: {
        recordDefinitionName: 'WebAPI Connection',
        fields: {
            authentication: 70034,
            hostname: 70030,
            id: RX_RECORD_DEFINITION.coreFieldIds.id,
            name: RX_RECORD_DEFINITION.coreFieldIds.description,
            port: 70031
        }
    },
    dataSource: {
        recordDefinitionName: 'Data Source',
        fields: {
            name: RX_RECORD_DEFINITION.coreFieldIds.description,
            id: RX_RECORD_DEFINITION.coreFieldIds.id,
            sourceType: 70051
        }
    },
    aliasMapping: {
        recordDefinitionName: 'Alias Mapping',
        queryExpression: "'56150' != 'email'",
        fields: {
            status: RX_RECORD_DEFINITION.coreFieldIds.status,
            id: RX_RECORD_DEFINITION.coreFieldIds.id,
            aliasType: 56150,
            aliasName: 56153,
            aliasValue: 56154,
            applicationId: 56151,
            applicationName: 56152
        }
    }
};

class ApprovalNotificationEditorComponent extends RxModalClass {
    constructor(injector, formBuilder, activeModalRef, rxRecordDefinitionCacheService, rxExpressionEditorService, rxRecordInstanceDataPageService, rxApprovalNotificationsService, translateService, rxNotificationService, rxDefinitionNameService) {
        super(activeModalRef, injector);
        this.injector = injector;
        this.formBuilder = formBuilder;
        this.activeModalRef = activeModalRef;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxExpressionEditorService = rxExpressionEditorService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxApprovalNotificationsService = rxApprovalNotificationsService;
        this.translateService = translateService;
        this.rxNotificationService = rxNotificationService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.recordDefinitions = [];
        this.sendToOtherOptions = [];
        this.emailProfileOptions = [];
        this.emailTemplateOptions = [];
        this.isEditMode = false;
        this.groupedData = {};
        this.processList = [];
        this.treeWrap = TreeWrap.WrapAll;
        this.selectedFlows = [];
        this.availableFlows = [];
        this.processDefinitionPickerOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.process-name-field.label'),
            definitionType: RxDefinitionPickerType.Process,
            required: true,
            availableDefinitionPickerStates: {
                definitionButtonsGroups: [RxDefinitionPickerScope.All],
                search: RxDefinitionPickerScope.All
            }
        };
        this.notificationTypeTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.tooltip')
        };
        this.approverSelectionTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection.tooltip')
        };
        this.sendToOptionValue = {
            allApprovers: '0',
            selectedApprover: '1'
        };
        this.sendToOption = [
            {
                id: this.sendToOptionValue.allApprovers,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.all-approvers.name')
            },
            {
                id: this.sendToOptionValue.selectedApprover,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.other.name')
            }
        ];
        this.globalNotificationOptionValue = {
            global: 'global',
            flows: 'flows'
        };
        this.globalNotificationOptions = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.label'),
                value: this.globalNotificationOptionValue.flows
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.global.label'),
                value: this.globalNotificationOptionValue.global
            }
        ];
        this.notificationMethodOptions = [
            {
                id: '2',
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.email.name')
            },
            {
                id: '5',
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.process.name')
            }
        ];
        this.notifyOnOptions = [
            {
                id: 0,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.new-signature.name')
            },
            {
                id: 1,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.approve.name')
            },
            {
                id: 2,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reject.name')
            },
            {
                id: 9,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reassign.name')
            },
            {
                id: 11,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.cancel.name')
            },
            {
                id: 12,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info-provided.name')
            },
            {
                id: 16,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.hold.name')
            },
            {
                id: 17,
                name: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info.name')
            }
        ];
    }
    handleTemplateDependentFieldSelection(event) {
        if (event) {
            this.approvalNotificationForm.get('message').disable();
            this.approvalNotificationForm.get('outgoingEmailProfile').enable();
        }
        else {
            this.approvalNotificationForm.get('message').enable();
            this.approvalNotificationForm.get('outgoingEmailProfile').disable();
        }
    }
    optionFormatter(option) {
        return option.name;
    }
    ngOnInit() {
        super.ngOnInit();
        this.approvalNotificationForm = this.createApprovalNotificationForm();
        this.approvalNotificationData = this.activeModalRef.getData();
        this.recordDefinitions = this.approvalNotificationData.recordDefinitions;
        this.emailTemplateOptions = this.approvalNotificationData.templateList;
        this.approvalNotification = this.approvalNotificationData.approvalNotification;
        this.isEditMode = Boolean(this.approvalNotification.notificationName);
        this.expressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);
        this.recordDefinitionSubject = new BehaviorSubject('');
        this.subjectExpressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);
        this.subjectExpressionConfigurator.configureForProperty({
            propertyPath: 'subject',
            dataDictionary$: this.recordDefinitionSubject
                .asObservable()
                .pipe(switchMap((recordDefinitionName) => this.subjectExpressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, false))),
            operators: null
        });
        this.expressionConfigurator.configureForProperty({
            propertyPath: 'approvalNotification',
            dataDictionary$: this.recordDefinitionSubject
                .asObservable()
                .pipe(switchMap((recordDefinitionName) => this.expressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, true))),
            operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All)
        });
        this.expressionFormControlOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label'),
            dataDictionary$: this.expressionConfigurator.getDataDictionary('approvalNotification'),
            operators: this.expressionConfigurator.getOperators('approvalNotification'),
            isRequired: false,
            tooltip: {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.tooltip')
            }
        };
        this.subjectExpressionFormControlOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label'),
            dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),
            operators: this.expressionConfigurator.getOperators('subject'),
            isRequired: this.isRequiredForEmail()
        };
        this.notificationMessageExpressionOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.common.message.label'),
            dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),
            operators: this.expressionConfigurator.getOperators('subject'),
            isRequired: this.isRequiredForEmail()
        };
        this.approvalNotificationForm
            .get('primaryRecordName')
            .valueChanges.subscribe((value) => this.onRecordDefinitionChange(value));
        this.approvalNotificationForm
            .get('notificationMethod')
            .valueChanges.subscribe((value) => this.onNotificationMethodChange(value));
        if (this.isEditMode) {
            this.initializeApprovalNotificationForm();
        }
    }
    isDirty() {
        var _a, _b;
        return Boolean(((_a = this.approvalNotificationForm) === null || _a === void 0 ? void 0 : _a.dirty) || ((_b = this.expressionDialogApi) === null || _b === void 0 ? void 0 : _b.isDirty()));
    }
    ngOnDestroy() {
        this.recordDefinitionSubject.complete();
    }
    createApprovalNotificationForm() {
        return this.formBuilder.group({
            primaryRecordName: [[], Validators.required],
            notificationName: ['', Validators.required],
            notifyOn: [[], Validators.required],
            additionalQualification: '',
            notificationType: this.globalNotificationOptionValue.flows,
            useTemplate: false,
            outgoingEmailProfile: [{ value: [], disabled: true }, Validators.required],
            approvalTemplate: [[], Validators.nullValidator],
            sendTo: ['0'],
            subject: '',
            notificationMethod: [[this.notificationMethodOptions[0]], Validators.required],
            status: true,
            message: '',
            approver: [{ value: [], disabled: true }, Validators.required],
            rxProcessName: '',
            check: false
        });
    }
    reset() {
        this.approvalNotificationForm.get('additionalQualification').setValue('');
        this.approvalNotificationForm.get('rxProcessName').setValue('');
        this.approvalNotificationForm.get('subject').setValue('');
        this.approvalNotificationForm.get('message').setValue('');
        this.approvalNotificationForm.get('sendTo').setValue('0');
        this.approvalNotificationForm.get('notifyOn').setValue([]);
        this.approvalNotificationForm.get('notificationType').setValue(this.globalNotificationOptionValue.flows);
        this.approvalNotificationForm.get('useTemplate').setValue(false);
        this.approvalNotificationForm.get('notificationMethod').setValue([this.notificationMethodOptions[0]]);
        this.approvalNotificationForm.get('outgoingEmailProfile').setValue([]);
        this.approvalNotificationForm.get('approvalTemplate').setValue([]);
        this.approvalNotificationForm.get('approver').setValue([]);
        this.approvalNotificationForm.get('status').setValue(true);
    }
    onNotificationMethodChange(value) {
        // check if notification method is process or email i.e '5' or '2'
        if (value[0].id === this.notificationMethodOptions[1].id) {
            this.approvalNotificationForm.get('subject').setValue('');
            this.approvalNotificationForm.get('message').setValue('');
            this.approvalNotificationForm.controls['subject'].disable();
            this.approvalNotificationForm.controls['message'].disable();
            this.approvalNotificationForm.controls['rxProcessName'].enable();
        }
        else if (value[0].id === this.notificationMethodOptions[0].id) {
            this.approvalNotificationForm.get('rxProcessName').setValue('');
            this.approvalNotificationForm.controls['rxProcessName'].disable();
            this.approvalNotificationForm.controls['subject'].enable();
            this.approvalNotificationForm.controls['message'].enable();
        }
    }
    handleSendToOptionSelection() {
        if (this.approvalNotificationForm.get('sendTo').value === this.sendToOptionValue.selectedApprover) {
            this.approvalNotificationForm.get('approver').enable();
        }
        else {
            this.approvalNotificationForm.get('approver').disable();
        }
    }
    initializeApprovalNotification(recordDefinitionName) {
        return forkJoin([
            this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName + ' Detail Signature'),
            this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.name,
                    propertySelection: [RX_RECORD_DEFINITION.coreFieldIds.id],
                    queryExpression: `'${RX_RECORD_DEFINITION.coreFieldIds.status}' = "0" AND '${RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.fields.mailboxFunction}' = "1"`
                }
            }),
            this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.name,
                    propertySelection: values(RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields).join(),
                    queryExpression: `'${RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.recordDefinition}' == "${recordDefinitionName}"`
                }
            })
        ]);
    }
    initializeApprovalNotificationForm() {
        this.approvalNotificationForm.get('notificationName').setValue(this.approvalNotification.notificationName);
        this.approvalNotificationForm.get('status').setValue(this.approvalNotification.status === '0');
        this.approvalNotificationForm.get('rxProcessName').setValue(this.approvalNotification.rxProcessName);
        this.approvalNotificationForm
            .get('subject')
            .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.subject));
        this.approvalNotificationForm
            .get('message')
            .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.message));
        this.approvalNotificationForm.get('sendTo').setValue(this.approvalNotification.sendTo);
        this.handleSendToOptionSelection();
        this.approvalNotificationForm
            .get('additionalQualification')
            .setValue(this.approvalNotification.additionalQualification);
        this.approvalNotificationForm
            .get('notifyOn')
            .setValue(filter(this.notifyOnOptions, { id: this.approvalNotification.notifyOn }));
        this.approvalNotificationForm
            .get('notificationType')
            .setValue(this.approvalNotification.notificationType === 1
            ? this.globalNotificationOptionValue.global
            : this.globalNotificationOptionValue.flows);
        this.approvalNotificationForm.get('useTemplate').setValue(this.approvalNotification.useTemplate === '1');
        this.handleTemplateDependentFieldSelection(true);
        this.approvalNotificationForm
            .get('notificationMethod')
            .setValue(filter(this.notificationMethodOptions, { id: this.approvalNotification.notificationMethod }));
        this.approvalNotificationForm.get('outgoingEmailProfile').setValue([
            {
                name: this.approvalNotification.emailProfile,
                id: this.approvalNotification.emailProfileGuid
            }
        ]);
        this.approvalNotificationForm.get('approvalTemplate').setValue([
            {
                name: this.approvalNotification.approvalTemplateName,
                id: this.approvalNotification.approvalTemplateGuid
            }
        ]);
        this.approvalNotificationForm.get('primaryRecordName').setValue(this.approvalNotification.primaryRecordName
            ? [
                {
                    value: this.approvalNotification.primaryRecordName,
                    displayValue: this.rxDefinitionNameService.getDisplayName(this.approvalNotification.primaryRecordName)
                }
            ]
            : []);
    }
    onRecordDefinitionChange(recordDefinitionOption) {
        const oldRecordDefinitionName = this.approvalNotificationForm.value.primaryRecordName.length
            ? this.approvalNotificationForm.value.primaryRecordName[0]
            : '';
        const newRecordDefinitionName = recordDefinitionOption[0].value;
        const threeWayRecordDefinitionName = newRecordDefinitionName + ' Detail Signature';
        if (newRecordDefinitionName !== oldRecordDefinitionName) {
            if (!this.isEditMode) {
                this.reset();
            }
            this.recordDefinitionSubject.next(threeWayRecordDefinitionName);
            if (newRecordDefinitionName) {
                this.initializeApprovalNotification(newRecordDefinitionName).subscribe(([recordDefinition, outgoingMailboxes, recordInstances]) => {
                    this.prepareApprovalFlowTree(recordInstances);
                    this.initializeSendToFromControlOptions(recordDefinition);
                    this.initializeEmailProfiles(outgoingMailboxes, newRecordDefinitionName);
                });
            }
        }
    }
    onSelectionChange() {
        this.isTreeTouched = true;
        this.approvalNotificationForm.markAsDirty();
    }
    isGlobalNotification() {
        return (this.isEditMode &&
            this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.global);
    }
    prepareApprovalFlowTree(recordInstances) {
        this.selectedFlows = [];
        this.availableFlows = flow((instanceData) => groupBy(instanceData, RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowGroup), (flowsByFlowGroup) => map(flowsByFlowGroup, (flows, flowGroupName) => ({
            label: flowGroupName,
            disallowMultipleNodeSelection: this.isGlobalNotification(),
            expanded: true,
            children: map(flows, (approvalFlow) => {
                const leafNode = {
                    label: approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowName],
                    key: approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid],
                    leaf: true,
                    data: flowGroupName,
                    disallowMultipleNodeSelection: this.isGlobalNotification()
                };
                if (includes(this.approvalNotification.processList, approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid])) {
                    this.selectedFlows.push(leafNode);
                }
                return leafNode;
            })
        })))(recordInstances.data);
        this.updateParentNodesForSelectedFlows();
    }
    updateParentNodesForSelectedFlows() {
        forEach(this.selectedFlows, (selectedFlow) => {
            const availableParentNode = find(this.availableFlows, (availableFlow) => availableFlow.label === selectedFlow.data);
            if (every(availableParentNode.children, (node) => includes(this.selectedFlows, node))) {
                this.selectedFlows.push(availableParentNode);
            }
            else {
                availableParentNode.partialSelected = true;
            }
        });
    }
    initializeEmailProfiles(outgoingMailboxes, recordDefinitionName) {
        let additionalExpression = `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}' = "email"`;
        let expression = '';
        if (recordDefinitionName) {
            additionalExpression += ` AND ('${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}' = "${this.rxDefinitionNameService.getBundleId(recordDefinitionName)}" OR '${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}' = "None")`;
        }
        forEach(outgoingMailboxes.data, (outgoingMailbox) => {
            if (!isEmpty(expression)) {
                expression += ' OR ';
            }
            expression += `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue}' = "${outgoingMailbox[RX_RECORD_DEFINITION.coreFieldIds.id]}"`;
        });
        expression = expression ? ' AND ((' + expression + '))' : '';
        this.rxRecordInstanceDataPageService
            .post({
            params: {
                recorddefinition: 'Alias Mapping',
                propertySelection: [
                    RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName,
                    RX_RECORD_DEFINITION.coreFieldIds.id,
                    RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId
                ],
                queryExpression: additionalExpression + expression
            }
        })
            .subscribe((result) => {
            this.emailProfileOptions = result.data.map((emailData) => {
                return {
                    name: emailData[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName],
                    id: emailData[RX_RECORD_DEFINITION.coreFieldIds.id]
                };
            });
        });
    }
    initializeSendToFromControlOptions(recordDefinition) {
        if (recordDefinition && recordDefinition.fieldDefinitions) {
            this.sendToOtherOptions = this.filterFieldDefinitions(recordDefinition.fieldDefinitions);
            this.approvalNotificationForm
                .get('approver')
                .setValue(filter(this.sendToOtherOptions, { id: this.approvalNotification.sendToOthers }));
        }
    }
    filterFieldDefinitions(fieldDefinitions) {
        return fieldDefinitions
            .filter((fieldDefinition) => {
            var _a;
            return fieldDefinition.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&
                ((_a = fieldDefinition.fieldMapping) === null || _a === void 0 ? void 0 : _a.source) === 'PRIMARY_RECORD_DEFINITION' &&
                !includes([
                    RX_RECORD_DEFINITION.coreFieldIds.displayId,
                    RX_RECORD_DEFINITION.coreFieldIds.id,
                    RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId
                ], fieldDefinition.id);
        })
            .map((fieldDefinition) => ({
            name: fieldDefinition.name.replace(/ Primary$/, ''),
            id: `'\$\{${fieldDefinition.name}\}'`
        }));
    }
    buildExpression(propertyName) {
        this.selectApprovalNotificationExpression(propertyName);
    }
    selectApprovalNotificationExpression(propertyName) {
        let fieldLabel = '';
        if (propertyName === 'additionalQualification') {
            fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label');
        }
        else if (propertyName === 'subject') {
            fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label');
        }
        else if (propertyName === 'message') {
            fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.message.label');
        }
        const expressionEditorConfig = {
            property: {
                path: propertyName === 'additionalQualification' ? 'approvalNotification' : 'subject',
                value: this.approvalNotificationForm.get(propertyName).value,
                label: fieldLabel
            },
            expressionConfigurator: propertyName === 'additionalQualification' ? this.expressionConfigurator : this.subjectExpressionConfigurator,
            legend: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                    icon: 'd-icon-dollar'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                    icon: 'd-icon-field_text'
                }
            ]
        };
        this.rxExpressionEditorService
            .openEditor(expressionEditorConfig, (dialogApi) => (this.expressionDialogApi = dialogApi))
            .subscribe((expression) => {
            this.expressionDialogApi = null;
            this.approvalNotificationForm.get(propertyName).setValue(expression.value);
            this.approvalNotificationForm.get(propertyName).markAsDirty();
        });
    }
    transformFormControlData() {
        var _a, _b;
        const approvalNotificationRecord = cloneDeep(this.approvalNotificationForm.value);
        approvalNotificationRecord.primaryRecordName = approvalNotificationRecord.primaryRecordName[0].value;
        approvalNotificationRecord.notifyOn = approvalNotificationRecord.notifyOn.length
            ? approvalNotificationRecord.notifyOn[0].id
            : '';
        if (approvalNotificationRecord.notificationType === this.globalNotificationOptionValue.flows) {
            approvalNotificationRecord.notificationType = 0;
            approvalNotificationRecord.processList = this.selectedFlows
                .filter((approvalFlow) => approvalFlow.leaf)
                .map((approvalFlow) => approvalFlow.key);
        }
        else {
            approvalNotificationRecord.notificationType = 1;
        }
        if ((_a = approvalNotificationRecord === null || approvalNotificationRecord === void 0 ? void 0 : approvalNotificationRecord.outgoingEmailProfile) === null || _a === void 0 ? void 0 : _a.length) {
            approvalNotificationRecord.emailProfile = approvalNotificationRecord.outgoingEmailProfile[0].name;
            approvalNotificationRecord.emailProfileGuid = approvalNotificationRecord.outgoingEmailProfile[0].id;
        }
        delete approvalNotificationRecord.outgoingEmailProfile;
        if (approvalNotificationRecord.approvalTemplate.length) {
            approvalNotificationRecord.approvalTemplateName = approvalNotificationRecord.approvalTemplate.name;
            approvalNotificationRecord.approvalTemplateGuid = approvalNotificationRecord.approvalTemplate.id;
        }
        delete approvalNotificationRecord.approvalTemplate;
        approvalNotificationRecord.sendToOthers = ((_b = approvalNotificationRecord.approver) === null || _b === void 0 ? void 0 : _b.length)
            ? approvalNotificationRecord.approver[0].id
            : '';
        approvalNotificationRecord.notificationMethod = approvalNotificationRecord.notificationMethod.length
            ? approvalNotificationRecord.notificationMethod[0].id
            : '';
        if (approvalNotificationRecord.notificationMethod === this.notificationMethodOptions[1].id) {
            approvalNotificationRecord.subject = approvalNotificationRecord.notificationName;
            approvalNotificationRecord.message = approvalNotificationRecord.notificationName;
        }
        else if (approvalNotificationRecord.useTemplate) {
            approvalNotificationRecord.message = approvalNotificationRecord.notificationName;
        }
        approvalNotificationRecord.useTemplate = approvalNotificationRecord.useTemplate ? '1' : '0';
        approvalNotificationRecord.status = approvalNotificationRecord.status ? '0' : '1';
        approvalNotificationRecord.subject = this.convertExpressionToServerFormat(approvalNotificationRecord.subject);
        approvalNotificationRecord.message = this.convertExpressionToServerFormat(approvalNotificationRecord.message);
        delete approvalNotificationRecord.approver;
        delete approvalNotificationRecord.check;
        if (this.isEditMode) {
            approvalNotificationRecord.notificationGuid = this.approvalNotification.notificationGuid;
        }
        return approvalNotificationRecord;
    }
    save() {
        this.approvalNotificationForm.markAsPristine();
        const approvalNotificationRecord = this.transformFormControlData();
        this.rxApprovalNotificationsService.createApprovalNotification(approvalNotificationRecord).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-saved.message'));
            this.activeModalRef.close(approvalNotificationRecord);
        });
    }
    update() {
        this.approvalNotificationForm.markAsPristine();
        const approvalNotificationRecord = this.transformFormControlData();
        this.rxApprovalNotificationsService.updateApprovalNotification(approvalNotificationRecord).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-updated.message'));
            this.activeModalRef.close(approvalNotificationRecord);
        });
    }
    closeModal() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    shouldUseTemplate() {
        var _a;
        return ((_a = this.approvalNotificationForm.get('notifyOn').value[0]) === null || _a === void 0 ? void 0 : _a.id) === 0;
    }
    showProcessDefinitionPicker() {
        var _a;
        return ((_a = this.approvalNotificationForm.get('notificationMethod').value[0]) === null || _a === void 0 ? void 0 : _a.id) === '5';
    }
    isRequiredForEmail() {
        var _a;
        return ((_a = this.approvalNotificationForm.get('notificationMethod').value[0]) === null || _a === void 0 ? void 0 : _a.id) === '2';
    }
    onNotifyChange(event) {
        if (event.options[0].id !== 0) {
            this.approvalNotificationForm.get('useTemplate').setValue(false);
        }
    }
    isNotificationOptionInvalid() {
        return this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.flows
            ? !this.selectedFlows.length
            : false;
    }
    definitionOptionFormatter(option) {
        return option.displayValue;
    }
    // Convert expression received from server to format supported by expression editor,
    // e.g. $Assignee Primary$ -> '${Assignee Primary}'
    convertExpressionFromServerFormat(expression) {
        const fieldTokenServerFormatRegExp = new RegExp('(\\$' + RX_RECORD_DEFINITION.validDefinitionNameRegExpString + '\\$)', 'g');
        return (expression &&
            expression.replace(fieldTokenServerFormatRegExp, function (match) {
                const expressionEntry = match.replace(/\$/g, '');
                return expressionEntry ? "'${" + expressionEntry + "}'" : match;
            }));
    }
    // Convert expression to format expected by the server,
    // e.g. '${Assignee Primary}' -> $Assignee Primary$
    convertExpressionToServerFormat(expression) {
        const fieldTokenExpressionEditorFormatRegExp = new RegExp("('\\${" + RX_RECORD_DEFINITION.validDefinitionNameRegExpString + "}')", 'g');
        return (expression &&
            expression.replace(fieldTokenExpressionEditorFormatRegExp, function (match) {
                return '$' + match.replace(/['${}]/g, '') + '$';
            }));
    }
}
ApprovalNotificationEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationEditorComponent, deps: [{ token: i0.Injector }, { token: i1$3.FormBuilder }, { token: i1$1.ActiveModalRef }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i4$1.RxExpressionEditorService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: RxApprovalNotificationsService }, { token: i4.TranslateService }, { token: i2.RxNotificationService }, { token: i2.RxDefinitionNameService }], target: i0.ɵɵFactoryTarget.Component });
ApprovalNotificationEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalNotificationEditorComponent, selector: "rx-approval-notification-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"modal-body\">\n  <form [formGroup]=\"approvalNotificationForm\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"primaryRecordName\"\n          [options]=\"recordDefinitions\"\n          rx-id=\"record-definition-name\"\n          [disabled]=\"isEditMode\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.record-definition-field.label' | translate }}\"\n          [optionFormatter]=\"definitionOptionFormatter\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"notification-name\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-name-field.label' | translate\n          }}\"\n          formControlName=\"notificationName\"\n        ></adapt-rx-textfield>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6 d-flex flex-column\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notifyOn\"\n          [options]=\"notifyOnOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notify-on\"\n          (onSelectionChange)=\"onNotifyChange($event)\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on-field.label' | translate }}\"\n        >\n        </adapt-rx-select>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          [options]=\"expressionFormControlOptions\"\n          formControlName=\"additionalQualification\"\n          rx-id=\"additional-qualification\"\n          (events)=\"buildExpression('additionalQualification')\"\n          required=\"false\"\n        ></rx-expression-form-control>\n\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"notificationType\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.label' | translate\n          }}\"\n          [tooltip]=\"notificationTypeTooltip\"\n          rx-id=\"notification-type\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of globalNotificationOptions; let index = index\"\n            [label]=\"option.label\"\n            [value]=\"option.value\"\n            [disabled]=\"isEditMode\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <div\n          class=\"d-flex flex-column h-100\"\n          *ngIf=\"approvalNotificationForm.get('notificationType').value === globalNotificationOptionValue.flows\"\n        >\n          <adapt-rx-control-label\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.sub-label'\n                | translate\n            }}\"\n            [showRequiredLabel]=\"true\"\n          >\n          </adapt-rx-control-label>\n\n          <div class=\"card flex-fill\" [ngClass]=\"{ 'border-danger': isTreeTouched && isNotificationOptionInvalid() }\">\n            <div class=\"card-block\">\n              <adapt-empty-state\n                *ngIf=\"!availableFlows.length\"\n                [type]=\"'grid'\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.approval.notification-configuration.no-flows-available.message' | translate\n                }}\"\n              >\n              </adapt-empty-state>\n\n              <adapt-tree\n                [value]=\"availableFlows\"\n                selectionMode=\"checkbox\"\n                [(selection)]=\"selectedFlows\"\n                *ngIf=\"availableFlows.length\"\n                (selectionChange)=\"onSelectionChange()\"\n                [wrap]=\"treeWrap\"\n              >\n              </adapt-tree>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-6\">\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"sendTo\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.send-to-field.label' | translate }}\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of sendToOption; let index = index\"\n            [value]=\"option.id\"\n            [label]=\"option.name\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n            rx-id=\"send-to-option\"\n            (checkedChange)=\"handleSendToOptionSelection()\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection' | translate\n          }}\"\n          *ngIf=\"approvalNotificationForm.get('sendTo').value === '1'\"\n          formControlName=\"approver\"\n          [options]=\"sendToOtherOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          [tooltip]=\"approverSelectionTooltip\"\n          rx-id=\"approver\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notificationMethod\"\n          [options]=\"notificationMethodOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notification-method\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-method-field.label' | translate\n          }}\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-checkbox\n          *ngIf=\"shouldUseTemplate()\"\n          class=\"d-block form-group\"\n          formControlName=\"useTemplate\"\n          rx-id=\"use-template\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.email-based-approval-field.label' | translate\n          }}\"\n          (ngModelChange)=\"handleTemplateDependentFieldSelection($event)\"\n        ></adapt-rx-checkbox>\n\n        <div *ngIf=\"approvalNotificationForm.get('useTemplate').value\">\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"outgoingEmailProfile\"\n            [options]=\"emailProfileOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"outgoing-email-profile\"\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.email-outgoing-profile-field.label'\n                | translate\n            }}\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"approvalTemplate\"\n            [options]=\"emailTemplateOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"approval-template\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.template-field.label' | translate }}\"\n          >\n          </adapt-rx-select>\n        </div>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2'\"\n          [options]=\"subjectExpressionFormControlOptions\"\n          formControlName=\"subject\"\n          rx-id=\"subject\"\n          (events)=\"buildExpression('subject')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"\n            approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2' &&\n            !approvalNotificationForm.get('useTemplate').value\n          \"\n          [options]=\"notificationMessageExpressionOptions\"\n          formControlName=\"message\"\n          rx-id=\"message\"\n          (events)=\"buildExpression('message')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-definition-picker\n          class=\"d-block form-group\"\n          *ngIf=\"showProcessDefinitionPicker()\"\n          [options]=\"processDefinitionPickerOptions\"\n          formControlName=\"rxProcessName\"\n          rx-id=\"definition-field\"\n          required=\"true\"\n        >\n        </rx-definition-picker>\n\n        <adapt-rx-switch\n          formControlName=\"status\"\n          rx-id=\"status\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.enabled-field.label' | translate }}\"\n          [isLabelBefore]=\"false\"\n        ></adapt-rx-switch>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    (click)=\"update()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" type=\"button\" rx-id=\"cancel-button\" (click)=\"closeModal()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.approval-notification-flow{overflow-y:auto;max-height:320px}adapt-rx-textfield,adapt-rx-select,rx-definition-picker{max-width:400px}:host::ng-deep rx-expression-form-control button{height:2.38rem}:host::ng-deep adapt-rx-radiobutton .radio{margin:8px 0}.card{min-height:152px;max-height:285px;overflow:auto}\n"], components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i4$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-approval-notification-editor',
                    templateUrl: './approval-notification-editor.component.html',
                    styleUrls: ['./approval-notification-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$3.FormBuilder }, { type: i1$1.ActiveModalRef }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i4$1.RxExpressionEditorService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: RxApprovalNotificationsService }, { type: i4.TranslateService }, { type: i2.RxNotificationService }, { type: i2.RxDefinitionNameService }]; } });

class ApprovalNotificationsComponent extends BaseViewComponent {
    constructor(rxModalService, adaptModalService, translateService, rxGlobalCacheService, rxDefinitionNameService, rxApprovalNotificationsDataPageService, rxApprovalNotificationsService, rxNotificationService, rxRecordInstanceDataPageService) {
        super();
        this.rxModalService = rxModalService;
        this.adaptModalService = adaptModalService;
        this.translateService = translateService;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxApprovalNotificationsDataPageService = rxApprovalNotificationsDataPageService;
        this.rxApprovalNotificationsService = rxApprovalNotificationsService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
    }
    ngOnInit() {
        this.editMode = false;
        this.gridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: () => {
                                this.deleteNotification();
                            }
                        }
                    ]
                }
            ],
            getData: (queryParams) => this.getData(queryParams),
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: this.getColumns(),
            styles: 'flex-fill',
            enableRowSelection: RowSelectionMode.Multiple
        });
    }
    createApprovalNotification() {
        this.editMode = false;
        this.initializeApprovalNotificationForm({
            notificationName: '',
            primaryRecordName: ''
        });
    }
    initializeApprovalNotificationForm(approvalNotification) {
        forkJoin([
            this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name,
                    propertySelection: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName,
                    queryExpression: `('${RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7}'!=$NULL$ OR '${RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7}'!="")`
                }
            }),
            this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: 'AR System Administration: TextTemplate',
                    propertySelection: values(RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields).join()
                }
            }),
            this.rxGlobalCacheService.getBundleDescriptors()
        ]).subscribe(([apFormInstances, emailTemplateInstances, bundleDescriptors]) => {
            const globalLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
            const recordDefinitions = flow((instanceData) => map(instanceData, (recordInstance) => {
                const bundleDescriptor = find(bundleDescriptors, {
                    id: this.rxDefinitionNameService.getBundleId(recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName])
                });
                return {
                    value: recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName],
                    displayValue: this.rxDefinitionNameService.getDisplayName(recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName]),
                    applicationName: (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.friendlyName) || (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.id) || globalLabel
                };
            }), (definitions) => groupBy(definitions, 'applicationName'), (optionsByApplicationName) => map(optionsByApplicationName, (options, applicationName) => ({
                name: applicationName,
                children: map(options, (option) => {
                    return {
                        value: option.value,
                        displayValue: option.displayValue
                    };
                })
            })))(apFormInstances.data);
            const templateList = [];
            if (emailTemplateInstances.data.length) {
                const nonApprovalTemplates = filter(emailTemplateInstances.data, function (template) {
                    return (template[RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields.applicationBundleId] !==
                        RX_APPLICATION.approvalBundleId);
                });
                forEach(nonApprovalTemplates, function (template) {
                    templateList.push({
                        name: template[RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields.name],
                        guid: template[RX_RECORD_DEFINITION.coreFieldIds.id]
                    });
                });
            }
            const title = this.editMode
                ? this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.edit-approval-notification.title')
                : this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.new-approval-notification.title');
            this.openModal(title, {
                approvalNotification: this.editMode
                    ? approvalNotification
                    : {
                        notificationName: '',
                        primaryRecordName: ''
                    },
                recordDefinitions,
                templateList: templateList
            });
        });
    }
    openModal(title, data) {
        this.rxModalService
            .openModal({
            title: title,
            content: ApprovalNotificationEditorComponent,
            data: Object.assign({}, data)
        })
            .then((result) => {
            if (result) {
                this.recordGridComponent.api.refresh().subscribe();
                this.editMode = false;
            }
        })
            .catch(noop);
    }
    deleteNotification() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.delete-selected-notification-confirmation.message')
        })
            .then((result) => {
            if (result) {
                const selectedApprovalNotifications = this.recordGridComponent.api.getSelectedRows();
                const selectedApprovalNotificationsIds = map(selectedApprovalNotifications, RX_RECORD_DEFINITION.coreFieldIds.id);
                this.rxApprovalNotificationsService
                    .deleteApprovalNotifications(selectedApprovalNotificationsIds)
                    .subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-deleted.message'));
                    this.recordGridComponent.api.refresh().subscribe();
                });
            }
        });
    }
    getData(queryParams) {
        const propertySelection = Object.values(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields);
        const additionalQueryExpression = `('${RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId}' != $NULL$)`;
        const queryExpression = queryParams.queryExpression
            ? '(' +
                additionalQueryExpression.substring(1, additionalQueryExpression.length - 1) +
                ' AND ' +
                queryParams.queryExpression.substring(1, queryParams.queryExpression.length - 1) +
                ')'
            : additionalQueryExpression;
        queryParams = Object.assign(Object.assign({}, queryParams), { propertySelection: propertySelection, queryExpression: queryExpression });
        return this.rxApprovalNotificationsDataPageService.get({ params: queryParams });
    }
    getRecordDefinition() {
        return {
            fieldDefinitions: [
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notificationName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notifyOn,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: {
                        0: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.new-signature.name'),
                        1: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.approve.name'),
                        2: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reject.name'),
                        9: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reassign.name'),
                        10: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.error.name'),
                        11: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.cancel.name'),
                        12: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info-provided.name'),
                        16: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.hold.name'),
                        17: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info.name')
                    }
                },
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.method,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: {
                        2: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.email.name'),
                        5: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.process.name')
                    }
                },
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.status,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: {
                        0: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.options.active.value'),
                        1: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.options.inactive.value')
                    }
                },
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.globalNotification,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: {
                        0: this.translateService.instant('com.bmc.arsys.rx.client.common.no.label'),
                        1: this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label')
                    }
                }
            ]
        };
    }
    getColumns() {
        return [
            {
                index: 0,
                fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notificationName),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notification-name.title'),
                clickable: true,
                actions: [
                    {
                        name: (previousAction, clickedColumnRow) => this.editApprovalNotification(clickedColumnRow)
                    }
                ]
            },
            {
                index: 1,
                fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationName),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.record-definition.title'),
                filterable: false
            },
            {
                index: 2,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.id.title'),
                visible: false
            },
            {
                index: 3,
                fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notifyOn),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notify-on.title')
            },
            {
                index: 4,
                fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.method),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notification-method.title')
            },
            {
                index: 5,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.status),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.title')
            },
            {
                index: 6,
                fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.globalNotification),
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.global-notification.title')
            }
        ];
    }
    editApprovalNotification(approvalNotificationRow) {
        this.editMode = true;
        this.rxApprovalNotificationsService
            .getApprovalNotification(approvalNotificationRow[RX_RECORD_DEFINITION.coreFieldIds.id])
            .subscribe((approvalNotification) => {
            this.initializeApprovalNotificationForm(approvalNotification);
        });
    }
}
ApprovalNotificationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsComponent, deps: [{ token: i1.RxModalService }, { token: i1$1.AdaptModalService }, { token: i4.TranslateService }, { token: i2.RxGlobalCacheService }, { token: i2.RxDefinitionNameService }, { token: RxApprovalNotificationsDataPageService }, { token: RxApprovalNotificationsService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Component });
ApprovalNotificationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalNotificationsComponent, selector: "rx-admin-approval-notifications", viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: ["recordGrid"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.title' | translate }}\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createApprovalNotification()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"approval-notifications-grid\" #recordGrid [config]=\"gridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-approval-notifications',
                    templateUrl: './approval-notifications.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i1$1.AdaptModalService }, { type: i4.TranslateService }, { type: i2.RxGlobalCacheService }, { type: i2.RxDefinitionNameService }, { type: RxApprovalNotificationsDataPageService }, { type: RxApprovalNotificationsService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceDataPageService }]; }, propDecorators: { recordGridComponent: [{
                type: ViewChild,
                args: ['recordGrid', { static: true }]
            }] } });

class ApprovalNotificationsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-approval-notifications',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApprovalNotificationsComponent),
            name: 'Approval notifications',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ApprovalNotificationsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ApprovalNotificationsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsRegistrationModule, declarations: [ApprovalNotificationsComponent, ApprovalNotificationEditorComponent], imports: [AdaptEmptyStateModule,
        AdminSettingsModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptRxSwitchModule,
        AdaptRxCheckboxModule,
        AdaptRxRadiobuttonModule,
        AdaptButtonModule,
        AdaptAccordionModule,
        CommonModule,
        ExpressionFormControlModule,
        RecordGridModule,
        ReactiveFormsModule,
        RxDefinitionPickerModule,
        TranslateModule,
        AdaptRxLabelModule,
        AdaptTreeModule] });
ApprovalNotificationsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsRegistrationModule, imports: [[
            AdaptEmptyStateModule,
            AdminSettingsModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptRxSwitchModule,
            AdaptRxCheckboxModule,
            AdaptRxRadiobuttonModule,
            AdaptButtonModule,
            AdaptAccordionModule,
            CommonModule,
            ExpressionFormControlModule,
            RecordGridModule,
            ReactiveFormsModule,
            RxDefinitionPickerModule,
            TranslateModule,
            AdaptRxLabelModule,
            AdaptTreeModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApprovalNotificationsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ApprovalNotificationsComponent, ApprovalNotificationEditorComponent],
                    imports: [
                        AdaptEmptyStateModule,
                        AdminSettingsModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSwitchModule,
                        AdaptRxCheckboxModule,
                        AdaptRxRadiobuttonModule,
                        AdaptButtonModule,
                        AdaptAccordionModule,
                        CommonModule,
                        ExpressionFormControlModule,
                        RecordGridModule,
                        ReactiveFormsModule,
                        RxDefinitionPickerModule,
                        TranslateModule,
                        AdaptRxLabelModule,
                        AdaptTreeModule
                    ],
                    entryComponents: [ApprovalNotificationsComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class BmcServiceCloudAccountAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, translateService) {
        super();
        this.formBuilder = formBuilder;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        this.settingName = 'errorReportingServiceSaasConfiguration';
    }
    getConfiguration() {
        this.busy = this.rxSystemConfigurationService.getConfiguration(this.settingName).subscribe((data) => {
            this.bmcServiceCloudAccountConfigForm.patchValue(JSON.parse(data.value));
        });
    }
    saveConfig() {
        const formValue = this.bmcServiceCloudAccountConfigForm.getRawValue();
        this.rxSystemConfigurationService.setConfiguration(this.settingName, formValue).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.save-successful.message'));
            this.bmcServiceCloudAccountConfigForm.markAsPristine();
        });
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => { var _a; return (_a = this.bmcServiceCloudAccountConfigForm) === null || _a === void 0 ? void 0 : _a.dirty; }
        });
        if (this.isAdministrator) {
            this.bmcServiceCloudAccountConfigForm = this.formBuilder.group({
                clientId: '',
                clientSecret: '',
                dataCenterUrl: '',
                authorizationUrl: '',
                serviceCloudInstanceUrl: '',
                supportCentralUrl: ''
            });
            this.getConfiguration();
        }
    }
}
BmcServiceCloudAccountAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i2.RxCurrentUserService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
BmcServiceCloudAccountAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BmcServiceCloudAccountAdminComponent, selector: "rx-admin-bmc-service-cloud-account", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <form [formGroup]=\"bmcServiceCloudAccountConfigForm\">\n    <adapt-rx-textfield\n      rx-id=\"client-id\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-id.label' | translate }}\"\n      formControlName=\"clientId\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"client-secret\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-secret.label' | translate }}\"\n      formControlName=\"clientSecret\"\n      required=\"true\"\n      [isPassword]=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"data-center-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.data-center-url.label' | translate }}\"\n      formControlName=\"dataCenterUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"authorization-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.authorization-url.label' | translate }}\"\n      formControlName=\"authorizationUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"service-cloud-instance-url\"\n      label=\"{{\n        'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.service-cloud-instance-url.label' | translate\n      }}\"\n      formControlName=\"serviceCloudInstanceUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"support-central-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.support-central-url.label' | translate }}\"\n      formControlName=\"supportCentralUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"bmcServiceCloudAccountConfigForm.pristine || bmcServiceCloudAccountConfigForm.invalid\"\n      (click)=\"saveConfig()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-bmc-service-cloud-account',
                    templateUrl: 'bmc-service-cloud-account.component.html',
                    styleUrls: ['./bmc-service-cloud-account.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i2.RxCurrentUserService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; } });

class BmcServiceCloudAccountRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-bmc-service-cloud-account',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(BmcServiceCloudAccountAdminComponent),
            name: 'BMC Service Cloud account',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
BmcServiceCloudAccountRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
BmcServiceCloudAccountRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountRegistrationModule, declarations: [BmcServiceCloudAccountAdminComponent], imports: [AdaptAccordionModule,
        AdaptAlertModule,
        AdaptButtonModule,
        AdaptIconModule,
        AdaptRxTextfieldModule,
        AdminSettingsModule,
        CommonModule,
        ReactiveFormsModule,
        TranslateModule] });
BmcServiceCloudAccountRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountRegistrationModule, imports: [[
            AdaptAccordionModule,
            AdaptAlertModule,
            AdaptButtonModule,
            AdaptIconModule,
            AdaptRxTextfieldModule,
            AdminSettingsModule,
            CommonModule,
            ReactiveFormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: BmcServiceCloudAccountRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        AdaptAccordionModule,
                        AdaptAlertModule,
                        AdaptButtonModule,
                        AdaptIconModule,
                        AdaptRxTextfieldModule,
                        AdminSettingsModule,
                        CommonModule,
                        ReactiveFormsModule,
                        TranslateModule
                    ],
                    declarations: [BmcServiceCloudAccountAdminComponent],
                    entryComponents: [BmcServiceCloudAccountAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class ChatbotsAdminComponent extends BaseViewComponent {
    constructor(rxAdminSettingsService, rxChatbotDefinitionService, rxCurrentUserService, rxModalService, rxNotificationService, translateService) {
        super();
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxChatbotDefinitionService = rxChatbotDefinitionService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.sections = cloneDeep(RX_CHATBOTS.sections);
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.displayChatbotsDropdownSwitch.dirty
        });
        if (this.isAdministrator) {
            this.busy = this.rxAdminSettingsService
                .getComponentSettings(RX_CHATBOTS.componentSettings.componentName, {
                'default-bundle-scope': RX_APPLICATION.settingsBundleId
            })
                .subscribe((componentSettings) => {
                this.componentSettings = componentSettings.values;
                const componentSetting = find(this.componentSettings, {
                    settingName: RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown
                });
                this.sections.globalChatbotSettings.displayChatbotsDropdown = JSON.parse(componentSetting.settingValue);
            });
        }
        this.recordGridConfig = of({
            enableFiltering: true,
            recordDefinitionName: RX_CHATBOTS.chatbotSettings.recordDefinitionName,
            enableRowSelection: RowSelectionMode.Multiple,
            columns: [
                {
                    index: 0,
                    fieldId: String(RX_CHATBOTS.chatbotSettings.recordFieldIds.name),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'),
                    cellTemplate: this.nameColumnTemplate
                },
                {
                    index: 1,
                    fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
                },
                {
                    index: 2,
                    fieldId: String(RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.application-library-id.title')
                },
                {
                    index: 3,
                    fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot-id.title')
                }
            ],
            actionButtons: [
                {
                    label: 'Rename',
                    style: 'tertiary',
                    icon: 'pencil',
                    disabled: () => {
                        return !this.isAdministrator || this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length !== 1;
                    },
                    actions: [
                        {
                            name: () => {
                                const selectedChatbot = head(this.chatbotConfigurationsRecordGrid.api.getSelectedRows());
                                this.rxModalService
                                    .openModal({
                                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.rename-chatbot.title'),
                                    size: 'sm',
                                    content: RenameDefinitionModalComponent,
                                    data: {
                                        definitionName: selectedChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name],
                                        infoText: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name-uniqueness-validation.message'),
                                        fieldLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
                                        validationErrorText: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name-validation.message'),
                                        definitionType: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'),
                                        definitionNames: this.chatbotConfigurationsRecordGrid.adaptTableConfig.data
                                            .filter((chatbot) => chatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId] ===
                                            selectedChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId])
                                            .map((chatbot) => chatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name])
                                    }
                                })
                                    .then((definitionName) => {
                                    this.rxChatbotDefinitionService
                                        .rename(selectedChatbot[RX_RECORD_DEFINITION.coreFieldIds.id], definitionName)
                                        .subscribe(() => {
                                        this.refreshChatbotGrid();
                                    });
                                })
                                    .catch(noop);
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    disabled: () => {
                        return !this.isAdministrator || this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length === 0;
                    },
                    actions: [
                        {
                            name: () => {
                                let confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.delete-confirmation.message');
                                const selectedChatbots = this.chatbotConfigurationsRecordGrid.api.getSelectedRows();
                                const selectedChatbotIds = map(selectedChatbots, RX_RECORD_DEFINITION.coreFieldIds.id);
                                if (includes(selectedChatbotIds, RX_CHATBOTS.chatbotSettings.defaultBotId)) {
                                    const defaultChatbot = find(selectedChatbots, [
                                        RX_RECORD_DEFINITION.coreFieldIds.id,
                                        RX_CHATBOTS.chatbotSettings.defaultBotId
                                    ]);
                                    confirmationMessage = this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.configurations-delete-confirmation.message', { defaultChatbotName: defaultChatbot[RX_CHATBOTS.chatbotSettings.recordFieldIds.name] });
                                }
                                this.rxModalService
                                    .confirm({
                                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: RX_MODAL.modalStyles.warning,
                                    message: confirmationMessage
                                })
                                    .then((result) => {
                                    if (result) {
                                        this.rxChatbotDefinitionService.delete(selectedChatbotIds).subscribe(() => {
                                            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.delete-success.message'));
                                            this.refreshChatbotGrid();
                                        });
                                    }
                                });
                            }
                        }
                    ]
                }
            ]
        });
    }
    getCellValue(dataItem, column) {
        return dataItem[column.field];
    }
    onSaveClick() {
        const componentSetting = find(this.componentSettings, [
            'settingName',
            RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown
        ]);
        componentSetting.settingValue = toString(this.sections.globalChatbotSettings.displayChatbotsDropdown);
        this.rxAdminSettingsService
            .updateComponentSettings(`${RX_CHATBOTS.componentSettings.componentName}/${head(this.componentSettings).ownerKeyValue1}`, this.componentSettings)
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.global-chatbot-settings-saved.message'));
            this.displayChatbotsDropdownSwitch.control.markAsPristine();
        });
    }
    openChatbot(row) {
        if (row) {
            const bundleId = row[RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId];
            const encodedBotName = encodeURIComponent(row[RX_CHATBOTS.chatbotSettings.recordFieldIds.name]);
            const chatbotDesignerUrl = `/innovationstudio/index.html#/app/bundle/${bundleId}/ichatbot/${encodedBotName}`;
            window.open(chatbotDesignerUrl);
        }
    }
    refreshChatbotGrid() {
        this.chatbotConfigurationsRecordGrid.api.refresh().subscribe();
    }
}
ChatbotsAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsAdminComponent, deps: [{ token: i2.RxAdminSettingsService }, { token: i2$1.RxChatbotDefinitionService }, { token: i2.RxCurrentUserService }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ChatbotsAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotsAdminComponent, selector: "rx-admin-chatbots", viewQueries: [{ propertyName: "chatbotConfigurationsRecordGrid", first: true, predicate: ["chatbotConfigurationsRecordGrid"], descendants: true, static: true }, { propertyName: "nameColumnTemplate", first: true, predicate: ["nameColumnTemplate"], descendants: true, static: true }, { propertyName: "displayChatbotsDropdownSwitch", first: true, predicate: ["displayChatbotsDropdownSwitch"], descendants: true, read: NgModel }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.chatbots.header.title' | translate }}\">\n  <adapt-accordion [multiselect]=\"true\" class=\"pb-4\">\n    <adapt-accordion-tab\n      [title]=\"sections.chatbotConfigurations.title | translate\"\n      [isOpen]=\"sections.chatbotConfigurations.isExpanded\"\n    >\n      <rx-record-grid #chatbotConfigurationsRecordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n    </adapt-accordion-tab>\n\n    <adapt-accordion-tab\n      *ngIf=\"isAdministrator\"\n      [title]=\"sections.globalChatbotSettings.title | translate\"\n      [isOpen]=\"sections.globalChatbotSettings.isExpanded\"\n    >\n      <adapt-rx-switch\n        class=\"d-block\"\n        name=\"displayChatbotsDropdown\"\n        label=\" {{ 'com.bmc.arsys.rx.client.admin.chatbots.display-available-chatbots.label' | translate }} \"\n        [(ngModel)]=\"sections.globalChatbotSettings.displayChatbotsDropdown\"\n        #displayChatbotsDropdownSwitch=\"ngModel\"\n      ></adapt-rx-switch>\n\n      <button\n        class=\"mt-4\"\n        rx-id=\"save-button\"\n        adapt-button\n        btn-type=\"primary\"\n        size=\"small\"\n        type=\"button\"\n        [disabled]=\"!displayChatbotsDropdownSwitch.dirty\"\n        (click)=\"onSaveClick()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </adapt-accordion-tab>\n  </adapt-accordion>\n</rx-admin-settings>\n\n<ng-template #nameColumnTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <a href=\"javascript:void(0)\" (click)=\"openChatbot(dataItem)\">\n    {{ getCellValue(dataItem, column) | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe, "rxDefinitionNamePipe": i2.RxDefinitionNamePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-chatbots',
                    templateUrl: './chatbots.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxAdminSettingsService }, { type: i2$1.RxChatbotDefinitionService }, { type: i2.RxCurrentUserService }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }]; }, propDecorators: { chatbotConfigurationsRecordGrid: [{
                type: ViewChild,
                args: ['chatbotConfigurationsRecordGrid', { static: true }]
            }], nameColumnTemplate: [{
                type: ViewChild,
                args: ['nameColumnTemplate', { static: true }]
            }], displayChatbotsDropdownSwitch: [{
                type: ViewChild,
                args: ['displayChatbotsDropdownSwitch', { read: NgModel, static: false }]
            }] } });

class ChatbotsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-chatbots',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotsAdminComponent),
            name: 'Chatbots',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ChatbotsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ChatbotsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsRegistrationModule, declarations: [ChatbotsAdminComponent], imports: [AdaptAccordionModule,
        AdaptButtonModule,
        AdaptIconModule,
        AdaptRxSwitchModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        RecordGridModule,
        RenameDefinitionModalModule,
        RxDefinitionModule,
        RxDirectivesModule,
        TranslateModule] });
ChatbotsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsRegistrationModule, imports: [[
            AdaptAccordionModule,
            AdaptButtonModule,
            AdaptIconModule,
            AdaptRxSwitchModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            RecordGridModule,
            RenameDefinitionModalModule,
            RxDefinitionModule,
            RxDirectivesModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ChatbotsAdminComponent],
                    imports: [
                        AdaptAccordionModule,
                        AdaptButtonModule,
                        AdaptIconModule,
                        AdaptRxSwitchModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        RecordGridModule,
                        RenameDefinitionModalModule,
                        RxDefinitionModule,
                        RxDirectivesModule,
                        TranslateModule
                    ],
                    entryComponents: [ChatbotsAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

var ChartGroup;
(function (ChartGroup) {
    ChartGroup["Chat"] = "chat";
    ChartGroup["ChatByUser"] = "chatbyuser";
    ChartGroup["Classify"] = "classify";
    ChartGroup["SearchDiskUsage"] = "searchdiskusage";
    ChartGroup["SearchDocumentUsage"] = "searchdocumentusage";
    ChartGroup["Search"] = "search";
})(ChartGroup || (ChartGroup = {}));
var ChartType;
(function (ChartType) {
    ChartType["Area"] = "area";
    ChartType["HorizontalColumn"] = "horizontal-column";
})(ChartType || (ChartType = {}));

const RX_COGNITIVE_CONSUMPTION = {
    sections: [
        {
            id: ChartGroup.Chat,
            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-service-chatbot.title',
            groups: [
                {
                    id: ChartGroup.Chat,
                    label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-conversations.label',
                    unit: 'N',
                    charts: [
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.conversations.title',
                            type: ChartType.HorizontalColumn
                        },
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.conversation-summary.title',
                            type: ChartType.Area
                        }
                    ]
                }
            ]
        },
        {
            id: ChartGroup.ChatByUser,
            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.chatbot-users.title',
            groups: [
                {
                    id: ChartGroup.ChatByUser,
                    unit: 'N',
                    label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-users.label',
                    charts: [
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.users.title',
                            type: ChartType.HorizontalColumn
                        },
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.user-summary.title',
                            type: ChartType.Area
                        }
                    ]
                }
            ]
        },
        {
            id: ChartGroup.Classify,
            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-service-automation.title',
            groups: [
                {
                    id: ChartGroup.Classify,
                    label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-api-calls.label',
                    unit: 'N',
                    charts: [
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.api-calls.title',
                            type: ChartType.HorizontalColumn
                        },
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.api-call-summary.title',
                            type: ChartType.Area
                        }
                    ]
                }
            ]
        },
        {
            id: ChartGroup.Search,
            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-search.title',
            groups: [
                {
                    id: ChartGroup.SearchDocumentUsage,
                    label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-documents.label',
                    unit: 'N',
                    capacityName: 'Count',
                    charts: [
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.documents.title',
                            type: ChartType.HorizontalColumn
                        },
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-summary.title',
                            type: ChartType.Area
                        }
                    ]
                },
                {
                    id: ChartGroup.SearchDiskUsage,
                    label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-size.label',
                    unit: 'GB',
                    capacityName: 'Size',
                    charts: [
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-storage.title',
                            type: ChartType.HorizontalColumn
                        },
                        {
                            title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-storage-summary.title',
                            type: ChartType.Area
                        }
                    ]
                }
            ]
        }
    ],
    settings: {
        countType: 'BY_MONTH',
        licenseType: 'com.bmc.arsys.rx.services.cognitive.CognitiveService',
        fields: {
            emailsAddressFieldId: 103,
            consumedCapacityField: 'consumedCapacity',
            thresholdReachedField: 'thresholdReached',
            notificationDateField: 'notificationDate',
            recipientsField: 'recipients'
        }
    }
};

const notificationConfigApi = '/api/rx/application/telemetry/notification/config';
class RxCognitiveConsumptionService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getCognitiveConsumptionNotificationConfig(params) {
        return this.httpClient.get(notificationConfigApi, {
            params: {
                action: params.action,
                domain: params.domain
            }
        });
    }
    postCognitiveConsumptionNotificationConfigEntity(entity) {
        return this.httpClient.post(notificationConfigApi, entity);
    }
    putCognitiveConsumptionNotificationConfigEntity(entity) {
        return this.httpClient.put(notificationConfigApi, entity);
    }
    getCognitiveConsumptionNotificationHistory(params) {
        return this.httpClient.get('/api/rx/application/telemetry/notification/history', {
            params: {
                action: params.action,
                domain: params.domain
            }
        });
    }
    getCognitiveLicenseUsage(licenseType, id, params) {
        return this.httpClient.get(`/api/rx/application/license/licenseusage/${licenseType}/${id}`, {
            params: {
                countType: params.countType,
                endDate: moment(params.endDate, 'YYYY-MM').endOf('month').format('YYYY-MM-DD') + 'T23:59:59.999Z',
                startDate: moment(params.startDate, 'YYYY-MM').startOf('month').format('YYYY-MM-DD') + 'T00:00:00.000Z'
            }
        });
    }
}
RxCognitiveConsumptionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveConsumptionService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveConsumptionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveConsumptionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveConsumptionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class DownloadReportModalComponent {
    constructor(activeModalRef, rxCognitiveConsumptionService, rxCsvService, rxFileService, rxUnitService, translateService) {
        this.activeModalRef = activeModalRef;
        this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
        this.rxCsvService = rxCsvService;
        this.rxFileService = rxFileService;
        this.rxUnitService = rxUnitService;
        this.translateService = translateService;
        this.dateTimePickerMode = RxDatetimePickerMode.DateTime;
        this.parameters = {
            startDate: '',
            endDate: '',
            countType: RX_COGNITIVE_CONSUMPTION.settings.countType
        };
        this.periodOptions = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-twelve-months.label'),
                value: '12'
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-twenty-four-months.label'),
                value: '24'
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-thirty-six-months.label'),
                value: '36'
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.selected-time-period.label'),
                value: 'custom'
            }
        ];
        this.csvData = [['Operation', 'Application', 'Period', 'Count']];
        this.modalData = this.activeModalRef.getData();
    }
    ngOnInit() {
        this.period = head(this.periodOptions).value;
    }
    onDownloadClick() {
        if (this.period === 'custom') {
            this.parameters.endDate = moment(last(this.customRange)).format('YYYY-MM');
            this.parameters.startDate = moment(head(this.customRange)).format('YYYY-MM');
        }
        else {
            this.parameters.endDate = moment().format('YYYY-MM');
            this.parameters.startDate = moment(this.parameters.endDate, 'YYYY-MM')
                .add(-1 * parseInt$1(this.period, 10), 'months')
                .format('YYYY-MM');
        }
        const sections = filter(RX_COGNITIVE_CONSUMPTION.sections, (section) => includes(this.modalData.sectionIds, section.id));
        const groupIds = [];
        forEach(sections, (section) => {
            forEach(section.groups, (group) => {
                groupIds.push(group.id);
            });
        });
        forkJoin(map(groupIds, (groupId) => {
            return this.rxCognitiveConsumptionService.getCognitiveLicenseUsage(RX_COGNITIVE_CONSUMPTION.settings.licenseType, groupId, this.parameters);
        })).subscribe((licenseUsages) => {
            forEach(licenseUsages, (licenseUsage) => {
                const currentSection = find(sections, (section) => some(section.groups, ['id', licenseUsage.operation]));
                const group = find(currentSection.groups, ['id', licenseUsage.operation]);
                forEach(licenseUsage.licenseUsageCount, (licenseUsageCount) => {
                    forEach(licenseUsageCount.count, (value, period) => {
                        this.csvData.push([
                            `${this.translateService.instant(currentSection.title)} - ${this.translateService.instant(head(group.charts).title)}`,
                            licenseUsageCount.bundleId,
                            period,
                            group.unit === RX_SIZE_UNITS.gigabytes.unit ? this.rxUnitService.getValueWithUnits(value) : value
                        ]);
                    });
                });
            });
            const csv = this.rxCsvService.convertToCsv(this.csvData);
            this.rxFileService.createAndDownloadBlob(csv, 'text/csv;charset=utf-8;', 'report', 'csv');
            this.activeModalRef.close();
        });
    }
    onCancelClick() {
        this.activeModalRef.dismiss();
    }
}
DownloadReportModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DownloadReportModalComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: RxCognitiveConsumptionService }, { token: i3.RxCsvService }, { token: i3.RxFileService }, { token: i3.RxUnitService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
DownloadReportModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DownloadReportModalComponent, selector: "rx-download-report-modal", ngImport: i0, template: "<div class=\"modal-body\">\n  <form>\n    <adapt-rx-radiobutton-group name=\"period\" [(ngModel)]=\"period\">\n      <adapt-rx-radiobutton\n        *ngFor=\"let option of periodOptions\"\n        [label]=\"option.label | translate\"\n        [value]=\"option.value\"\n      ></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-datetime-range\n      name=\"customDatetimeRange\"\n      label=\" {{\n        'com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.select-range.label' | translate\n      }}\"\n      [mode]=\"dateTimePickerMode\"\n      [disabled]=\"period !== 'custom'\"\n      [(ngModel)]=\"customRange\"\n    ></adapt-rx-datetime-range>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    rx-id=\"download-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    (click)=\"onDownloadClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n  </button>\n\n  <button rx-id=\"cancel-button\" adapt-button btn-type=\"secondary\" type=\"button\" (click)=\"onCancelClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1$1.AdaptRxDatetimeRangeComponent, selector: "adapt-rx-datetime-range", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DownloadReportModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-download-report-modal',
                    templateUrl: './download-report-modal.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: RxCognitiveConsumptionService }, { type: i3.RxCsvService }, { type: i3.RxFileService }, { type: i3.RxUnitService }, { type: i4.TranslateService }]; } });

class CognitiveConsumptionNotificationHistoryModalComponent {
    constructor(activeModalRef, rxCognitiveConsumptionService, translateService) {
        this.activeModalRef = activeModalRef;
        this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
        this.translateService = translateService;
        this.modalData = this.activeModalRef.getData();
    }
    ngOnInit() {
        const recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_COGNITIVE_CONSUMPTION.settings.fields.consumedCapacityField,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_COGNITIVE_CONSUMPTION.settings.fields.thresholdReachedField,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_COGNITIVE_CONSUMPTION.settings.fields.notificationDateField,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.dateTime
                },
                {
                    id: RX_COGNITIVE_CONSUMPTION.settings.fields.recipientsField,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const columns = [
            {
                index: 0,
                fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.consumedCapacityField,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.consumption-measure.title')
            },
            {
                index: 1,
                fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.thresholdReachedField,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.threshold-reached.title')
            },
            {
                index: 2,
                fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.notificationDateField,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.notification-date.title')
            },
            {
                index: 3,
                fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.recipientsField,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.email-recipient.title')
            }
        ];
        this.recordGridConfig = of({
            columns,
            enableFiltering: false,
            useExternalFiltering: false,
            enableRowSelection: RowSelectionMode.Multiple,
            styles: 'flex-fill',
            getRecordDefinition: () => of(recordDefinition),
            getData: () => this.rxCognitiveConsumptionService
                .getCognitiveConsumptionNotificationHistory({
                action: this.modalData.groupId,
                domain: this.modalData.domain
            })
                .pipe(map$1((data) => ({
                data: data.entity,
                totalSize: data.entity.length
            })))
        });
    }
    onCloseClick() {
        this.activeModalRef.close();
    }
}
CognitiveConsumptionNotificationHistoryModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionNotificationHistoryModalComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: RxCognitiveConsumptionService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveConsumptionNotificationHistoryModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionNotificationHistoryModalComponent, selector: "rx-cognitive-consumption-notification-history-modal", ngImport: i0, template: "<div class=\"modal-body d-flex\">\n  <rx-record-grid [config]=\"recordGridConfig\"></rx-record-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button rx-id=\"close-button\" adapt-button btn-type=\"secondary\" type=\"button\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":host ::ng-deep rx-record-grid{height:auto}\n"], components: [{ type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionNotificationHistoryModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-consumption-notification-history-modal',
                    templateUrl: './cognitive-consumption-notification-history-modal.component.html',
                    styleUrls: ['./cognitive-consumption-notification-history-modal.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: RxCognitiveConsumptionService }, { type: i4.TranslateService }]; } });

class CognitiveConsumptionNotificationModalComponent extends RxModalClass {
    constructor(activeModalRef, adaptModalService, rxCognitiveConsumptionService, rxCurrentUserService, rxLogService, rxNotificationService, translateService, injector) {
        super(activeModalRef, injector);
        this.activeModalRef = activeModalRef;
        this.adaptModalService = adaptModalService;
        this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxLogService = rxLogService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.injector = injector;
        this.isEdit = false;
        this.selectedEmailRecipients = [];
        this.thresholds = [
            {
                id: 1,
                value: 0
            },
            {
                id: 2,
                value: 0
            },
            {
                id: 3,
                value: 0
            }
        ];
        this.modalData = this.activeModalRef.getData();
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
    }
    ngOnInit() {
        super.ngOnInit();
        forEach(RX_COGNITIVE_CONSUMPTION.sections, (section) => {
            const group = find(section.groups, ['id', this.modalData.groupId]);
            if (group) {
                this.group = group;
            }
        });
        this.label = `${this.translateService.instant(this.group.label)} (${this.group.unit})`;
        this.entity = {
            action: this.modalData.groupId,
            capacity: 0,
            domain: 'com.bmc.dsm.innovationsuite.cognitive',
            emailIds: [],
            thresholds: [null, null, null]
        };
        this.busy = this.rxCognitiveConsumptionService
            .getCognitiveConsumptionNotificationConfig({
            action: this.entity.action,
            domain: this.entity.domain
        })
            .pipe(catchError((error) => {
            return get(error, 'error[0].messageNumber') === 302 ? EMPTY : throwError(error);
        }))
            .subscribe((config) => {
            this.isEdit = true;
            merge(this.entity, config.entity);
            this.thresholds = map(this.entity.thresholds, (threshold, index) => {
                return {
                    id: index + 1,
                    value: threshold || 0
                };
            });
            this.selectedEmailRecipients = this.entity.emailIds;
        });
        this.recordGridConfig = of({
            enableFiltering: false,
            recordDefinitionName: 'User',
            enableRowSelection: RowSelectionMode.Multiple,
            filterExpression: `('${RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId}' != $NULL$)`,
            columns: [
                {
                    index: 0,
                    fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.full-name.title')
                },
                {
                    index: 1,
                    fieldId: String(RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.primary-email-address.title')
                }
            ]
        });
    }
    isDirty() {
        return this.notificationForm.dirty;
    }
    canSelectRecipients() {
        const recipients = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();
        return inRange(add(recipients.length, this.selectedEmailRecipients.length), 0, 11);
    }
    getEmptyCapacityValueValidator() {
        return (control) => {
            let result = null;
            if (control.touched && !control.value) {
                result = {
                    emptyCapacityValue: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-empty-validation.message')
                    }
                };
            }
            return result;
        };
    }
    getEmptyThresholdValuesValidator() {
        return (control) => {
            let result = null;
            if (control.touched && !control.value && every(this.thresholds, ['value', 0])) {
                result = {
                    emptyThresholdValues: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-threshold-validation.message')
                    }
                };
            }
            return result;
        };
    }
    isSaveButtonDisabled() {
        return this.notificationForm.invalid || isEmpty(this.selectedEmailRecipients);
    }
    onCloseClick() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    onMoveToSelectedClick() {
        const recipients = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();
        if (this.canSelectRecipients()) {
            forEach(recipients, (recipient) => {
                if (!includes(this.selectedEmailRecipients, recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId])) {
                    this.selectedEmailRecipients.push(recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId]);
                }
            });
        }
    }
    onNotificationHistoryClick() {
        this.adaptModalService
            .open({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title'),
            content: CognitiveConsumptionNotificationHistoryModalComponent,
            size: OpenViewActionModalSize.Large,
            data: {
                domain: this.entity.domain,
                groupId: this.modalData.groupId
            }
        })
            .catch(noop);
    }
    onRemoveRecipientClick(index) {
        pullAt(this.selectedEmailRecipients, [index]);
    }
    onSaveClick() {
        forEach(this.notificationForm.controls, (control) => {
            control.markAsTouched();
            control.updateValueAndValidity();
        });
        const entity = {
            action: this.entity.action,
            capacity: this.entity.capacity,
            domain: this.entity.domain,
            emailIds: this.selectedEmailRecipients,
            thresholds: compact(map(this.thresholds, 'value'))
        };
        if (this.notificationForm.valid) {
            if (this.isEdit) {
                this.rxCognitiveConsumptionService.putCognitiveConsumptionNotificationConfigEntity(entity).subscribe(() => {
                    this.activeModalRef.close();
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                });
            }
            else {
                this.rxCognitiveConsumptionService.postCognitiveConsumptionNotificationConfigEntity(entity).subscribe(() => {
                    this.activeModalRef.close();
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                });
            }
        }
    }
    onThresholdCounterModelChange() {
        const controls = omit(this.notificationForm.controls, 'capacity');
        forEach(controls, (control) => {
            control.markAsTouched();
            control.updateValueAndValidity();
        });
    }
}
CognitiveConsumptionNotificationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionNotificationModalComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: i1$1.AdaptModalService }, { token: RxCognitiveConsumptionService }, { token: i2.RxCurrentUserService }, { token: i2.RxLogService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
CognitiveConsumptionNotificationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionNotificationModalComponent, selector: "rx-cognitive-consumption-notification-modal", viewQueries: [{ propertyName: "availableEmailNotificationRecipientsRecordGrid", first: true, predicate: ["availableEmailNotificationRecipientsRecordGrid"], descendants: true, static: true }, { propertyName: "notificationForm", first: true, predicate: ["notificationForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"modal-body d-flex\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form class=\"d-flex flex-column\" #notificationForm=\"ngForm\">\n    <div class=\"mb-4\" [style.width.%]=\"32\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity.title' | translate }}\n      </h5>\n\n      <adapt-rx-counter\n        name=\"capacity\"\n        [label]=\"label\"\n        placeholder=\"0\"\n        min=\"0\"\n        max=\"100\"\n        required\n        [rxCustomValidators]=\"getEmptyCapacityValueValidator()\"\n        [(ngModel)]=\"entity.capacity\"\n      >\n      </adapt-rx-counter>\n    </div>\n\n    <div class=\"mb-4\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption.capacity-consumption-thresholds.title' | translate }}\n      </h5>\n\n      <div class=\"d-flex justify-content-between\">\n        <adapt-rx-counter\n          *ngFor=\"let threshold of thresholds\"\n          [style.width.%]=\"32\"\n          name=\"threshold-{{ threshold.id }}\"\n          label=\"Threshold {{ threshold.id }} (%)\"\n          placeholder=\"0\"\n          min=\"0\"\n          max=\"100\"\n          adaptIntegerNumber\n          [rxCustomValidators]=\"getEmptyThresholdValuesValidator()\"\n          [(ngModel)]=\"threshold.value\"\n          (ngModelChange)=\"onThresholdCounterModelChange()\"\n        >\n        </adapt-rx-counter>\n      </div>\n    </div>\n\n    <div class=\"d-flex h-100\">\n      <div class=\"col-6 d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.available-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <rx-record-grid\n          class=\"flex-grow-1\"\n          [config]=\"recordGridConfig\"\n          #availableEmailNotificationRecipientsRecordGrid\n        ></rx-record-grid>\n      </div>\n\n      <button\n        class=\"d-icon-angle_right align-self-center mx-4\"\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        rx-id=\"move-to-selected-button\"\n        [disabled]=\"!canSelectRecipients()\"\n        (click)=\"onMoveToSelectedClick()\"\n      ></button>\n\n      <div class=\"col d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.selected-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <ul *ngIf=\"selectedEmailRecipients.length\" class=\"list-group\">\n          <li\n            *ngFor=\"let recipient of selectedEmailRecipients; let $index = index\"\n            class=\"list-group-item d-flex justify-content-between p-0 px-2\"\n          >\n            {{ recipient }}\n\n            <button\n              class=\"d-icon-trash_adapt\"\n              adapt-button\n              btn-type=\"tertiary\"\n              type=\"button\"\n              rx-id=\"remove-recipient\"\n              (click)=\"onRemoveRecipientClick($index)\"\n            ></button>\n          </li>\n        </ul>\n\n        <div *ngIf=\"!selectedEmailRecipients.length\" class=\"card h-100\">\n          <div class=\"card-block\">\n            <adapt-empty-state\n              type=\"objects\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.recipient-not-selected.message'\n                  | translate\n              }}\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer d-flex\">\n  <button\n    class=\"mr-auto\"\n    rx-id=\"notification-history-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"onNotificationHistoryClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title' | translate }}\n  </button>\n\n  <button\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button rx-id=\"close-button\" adapt-button btn-type=\"secondary\" size=\"small\" type=\"button\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":host ::ng-deep .card-block{display:flex;justify-content:center;align-items:center}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionNotificationModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-consumption-notification-modal',
                    templateUrl: './cognitive-consumption-notification-modal.component.html',
                    styleUrls: ['./cognitive-consumption-notification-modal.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: i1$1.AdaptModalService }, { type: RxCognitiveConsumptionService }, { type: i2.RxCurrentUserService }, { type: i2.RxLogService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { availableEmailNotificationRecipientsRecordGrid: [{
                type: ViewChild,
                args: ['availableEmailNotificationRecipientsRecordGrid', { static: true }]
            }], notificationForm: [{
                type: ViewChild,
                args: ['notificationForm', { static: true, read: NgForm }]
            }] } });

class CognitiveConsumptionChartComponent {
    constructor(rxStringService, rxUnitService, translateService) {
        this.rxStringService = rxStringService;
        this.rxUnitService = rxUnitService;
        this.translateService = translateService;
        this.areaChartType = ChartType.Area;
        this.horizontalColumnChartType = ChartType.HorizontalColumn;
    }
    ngOnInit() {
        this.chartConfig = {
            height: 400,
            width: 500,
            header: {
                title: this.translateService.instant(this.chart.title),
                allowHideLegend: true
            },
            suppressLegend: this.isCapacityAvailable(),
            xAxis: {
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.x-axis-months.title'),
                categories: []
            },
            yAxis: {
                title: `${this.translateService.instant(this.groupData.label)} (${this.groupData.unit})`
            },
            series: []
        };
        if (this.chart.type === ChartType.HorizontalColumn) {
            assign(this.chartConfig, {
                type: 'column',
                seriesDisplay: 'horizontal',
                showSlider: true,
                slidePointsCount: 3
            });
            const defaultCount = flow((licenceUsage) => map(licenceUsage, 'count'), (countData) => reduce(countData, assign, {}), (countData) => mapValues(countData, constant(0)))(this.licenceUsageCount);
            forEach(this.licenceUsageCount, (item) => {
                defaults(item.count, defaultCount);
            });
        }
        forEach(this.licenceUsageCount, (item) => {
            const name = this.groupData.capacityName || this.rxStringService.prettify(last(split(item.bundleId, '.')));
            const data = map(item.count, (key, value) => {
                let result;
                const countValue = this.groupData.unit === RX_SIZE_UNITS.gigabytes.unit
                    ? this.rxUnitService.getValueWithoutUnitsByUnitType(key, RX_SIZE_UNITS.gigabytes.unit)
                    : key;
                if (this.chart.type === ChartType.Area) {
                    result = {
                        x: moment(value).valueOf(),
                        y: countValue
                    };
                }
                else {
                    result = countValue;
                }
                return result;
            });
            this.chartConfig.series.push({
                name,
                data
            });
        });
        const firstLicenceUsageCount = head(this.licenceUsageCount);
        this.chartConfig.xAxis.categories = map(keys(firstLicenceUsageCount.count), (key) => {
            return moment(key).format('MMM YYYY');
        });
        if (this.isCapacityAvailable()) {
            this.capacity = {
                title: `Capacity (${this.groupData.unit})`,
                value: this.groupData.unit === RX_SIZE_UNITS.gigabytes.unit
                    ? this.rxUnitService.getValueWithoutUnitsByUnitType(firstLicenceUsageCount.capacity, RX_SIZE_UNITS.gigabytes.unit)
                    : firstLicenceUsageCount.capacity
            };
        }
    }
    formatXAxisVal(xValue) {
        return moment(xValue).format('MMM YYYY');
    }
    isCapacityAvailable() {
        return Boolean(this.groupData.capacityName);
    }
}
CognitiveConsumptionChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionChartComponent, deps: [{ token: i3.RxStringService }, { token: i3.RxUnitService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveConsumptionChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionChartComponent, selector: "rx-cognitive-consumption-chart", inputs: { chart: "chart", groupData: "groupData", licenceUsageCount: "licenceUsageCount" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"chart.type\">\n  <adapt-stacked-chart\n    *ngSwitchCase=\"horizontalColumnChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"horizontalColumnChartTooltip\"\n    [type]=\"chartConfig.type\"\n    [showSlider]=\"chartConfig.showSlider\"\n    [slidePointsCount]=\"chartConfig.slidePointsCount\"\n    [seriesDisplay]=\"chartConfig.seriesDisplay\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-stacked-chart>\n\n  <adapt-area-graph\n    *ngSwitchCase=\"areaChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"areaChartTooltip\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-area-graph>\n</ng-container>\n\n<ng-template #horizontalColumnChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.value }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n\n<ng-template #areaChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.xAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ formatXAxisVal(data.xValue) }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.yValue }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n", components: [{ type: i3$3.AdaptStackedChartComponent, selector: "adapt-stacked-chart", inputs: ["backgroundColor", "width", "height", "header", "suppressHeader", "suppressLegend", "tooltip", "dataBuilder", "type", "xAxis", "yAxis", "showSlider", "hasTotalLabels", "seriesDisplay", "totalLabelTextFormatter", "barWidth", "slidePointsCount", "hideAxises", "rotateXAxis", "xAxisTickFormatResolver", "scientificMode", "renderLegend", "thresholdLine", "showEmptyColIndicator", "series", "legend"], outputs: ["clickChart", "categoryShow", "categoryHide"] }, { type: i3$3.AdaptAreaGraphComponent, selector: "adapt-area-graph", inputs: ["formatXAxisValue", "getTooltipXValueTitle"], outputs: ["categoryShow", "categoryHide"] }], directives: [{ type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-consumption-chart',
                    templateUrl: './cognitive-consumption-chart.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i3.RxStringService }, { type: i3.RxUnitService }, { type: i4.TranslateService }]; }, propDecorators: { chart: [{
                type: Input
            }], groupData: [{
                type: Input
            }], licenceUsageCount: [{
                type: Input
            }] } });

class CognitiveConsumptionGroupComponent {
    constructor(rxModalService, rxCognitiveConsumptionService, translateService) {
        this.rxModalService = rxModalService;
        this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
        this.translateService = translateService;
        this.parameters = {
            startDate: '',
            endDate: moment().format('YYYY-MM'),
            countType: RX_COGNITIVE_CONSUMPTION.settings.countType
        };
    }
    ngOnInit() {
        this.generateCognitiveConsumptionGroup();
    }
    generateCognitiveConsumptionGroup() {
        this.licenceUsageCount = [];
        this.groupData = omit(this.group, ['charts']);
        this.parameters.startDate = moment(this.parameters.endDate, 'YYYY-MM')
            .add(-1 * 36, 'months')
            .format('YYYY-MM');
        this.busy = this.rxCognitiveConsumptionService
            .getCognitiveLicenseUsage(RX_COGNITIVE_CONSUMPTION.settings.licenseType, this.group.id, this.parameters)
            .subscribe((licenseUsage) => {
            forEach(licenseUsage.licenseUsageCount, (licenseUsageCount) => {
                if (licenseUsageCount && !isEmpty(licenseUsageCount.count)) {
                    this.licenceUsageCount.push(licenseUsageCount);
                }
            });
        });
    }
    onNotificationsClick() {
        this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-group.add-edit-notifications.title'),
            content: CognitiveConsumptionNotificationModalComponent,
            size: 'rx-lg',
            data: {
                groupId: this.group.id
            }
        })
            .catch(noop);
    }
}
CognitiveConsumptionGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionGroupComponent, deps: [{ token: i1.RxModalService }, { token: RxCognitiveConsumptionService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveConsumptionGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionGroupComponent, selector: "rx-cognitive-consumption-group", inputs: { group: "group", isAdministrator: "isAdministrator", sectionId: "sectionId" }, ngImport: i0, template: "<button\n  *ngIf=\"isAdministrator\"\n  class=\"d-icon-envelope_o mb-4\"\n  adapt-button\n  btn-type=\"tertiary\"\n  type=\"button\"\n  rx-id=\"notifications-button\"\n  (click)=\"onNotificationsClick()\"\n>\n  {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-group.notifications.label' | translate }}\n</button>\n\n<div class=\"d-flex flex-row flex-wrap\">\n  <div class=\"card mb-4 mr-4 placeholder\" *ngFor=\"let chart of group.charts\">\n    <div class=\"card-block p-4\">\n      <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n      <div *ngIf=\"licenceUsageCount.length\">\n        <rx-cognitive-consumption-chart\n          [chart]=\"chart\"\n          [groupData]=\"groupData\"\n          [licenceUsageCount]=\"licenceUsageCount\"\n        ></rx-cognitive-consumption-chart>\n      </div>\n\n      <div *ngIf=\"!licenceUsageCount.length\">\n        <h5 class=\"m-0\">{{ chart.title | translate }}</h5>\n        <div class=\"mt-6 pt-4\">\n          <adapt-empty-state\n            type=\"chart\"\n            label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-data-to-display.label' | translate }}\"\n          ></adapt-empty-state>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".placeholder{min-width:550px;min-height:400px}\n"], components: [{ type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: CognitiveConsumptionChartComponent, selector: "rx-cognitive-consumption-chart", inputs: ["chart", "groupData", "licenceUsageCount"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-consumption-group',
                    templateUrl: './cognitive-consumption-group.component.html',
                    styleUrls: ['./cognitive-consumption-group.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: RxCognitiveConsumptionService }, { type: i4.TranslateService }]; }, propDecorators: { group: [{
                type: Input
            }], isAdministrator: [{
                type: Input
            }], sectionId: [{
                type: Input
            }] } });

class CognitiveConsumptionAdminComponent {
    constructor(adaptModalService, rxLicenseDataPageService, rxCurrentUserService, translateService) {
        this.adaptModalService = adaptModalService;
        this.rxLicenseDataPageService = rxLicenseDataPageService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.translateService = translateService;
    }
    ngOnInit() {
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        this.busy = this.rxLicenseDataPageService
            .get({
            params: {
                startIndex: -1,
                pageSize: 0,
                propertySelection: ['name', 'serviceLicensedCount'].join(',')
            }
        })
            .subscribe((result) => {
            const isHelixCognitiveChatbotPerUserLicensed = find(result.data[0].serviceLicenseDescriptors, [
                'name',
                'HelixCognitiveChatbotPerUser'
            ]).licensed;
            this.sectionIds = [
                isHelixCognitiveChatbotPerUserLicensed ? ChartGroup.ChatByUser : ChartGroup.Chat,
                ChartGroup.Classify,
                ChartGroup.Search
            ];
            this.sections = filter(RX_COGNITIVE_CONSUMPTION.sections, (section) => includes(this.sectionIds, section.id));
        });
    }
    onDownloadClick() {
        this.adaptModalService
            .open({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-csv-file.title'),
            type: 'default',
            size: 'sm',
            content: DownloadReportModalComponent,
            data: {
                sectionIds: this.sectionIds
            }
        })
            .catch(noop);
    }
    onRefreshClick() {
        this.cognitiveConsumptionGroups.forEach((cognitiveConsumptionGroup) => {
            cognitiveConsumptionGroup.generateCognitiveConsumptionGroup();
        });
    }
}
CognitiveConsumptionAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionAdminComponent, deps: [{ token: i1$1.AdaptModalService }, { token: i2.RxLicenseDataPageService }, { token: i2.RxCurrentUserService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveConsumptionAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionAdminComponent, selector: "rx-admin-cognitive-consumption", viewQueries: [{ propertyName: "cognitiveConsumptionGroups", predicate: CognitiveConsumptionGroupComponent, descendants: true }], ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"mb-4\">\n    <button\n      class=\"d-icon-refresh_adapt\"\n      adapt-button\n      btn-type=\"tertiary\"\n      type=\"button\"\n      rx-id=\"refresh-button\"\n      (click)=\"onRefreshClick()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.refresh.label' | translate }}\n    </button>\n\n    <button\n      class=\"d-icon-download_csv\"\n      adapt-button\n      btn-type=\"tertiary\"\n      type=\"button\"\n      rx-id=\"download-button\"\n      (click)=\"onDownloadClick()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n    </button>\n  </div>\n\n  <div *ngFor=\"let section of sections\">\n    <h4 class=\"m-0 mb-4\">{{ section.title | translate }}</h4>\n\n    <rx-cognitive-consumption-group\n      *ngFor=\"let group of section.groups\"\n      [group]=\"group\"\n      [sectionId]=\"section.id\"\n      [isAdministrator]=\"isAdministrator\"\n    >\n    </rx-cognitive-consumption-group>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: CognitiveConsumptionGroupComponent, selector: "rx-cognitive-consumption-group", inputs: ["group", "isAdministrator", "sectionId"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-cognitive-consumption',
                    templateUrl: './cognitive-consumption.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.AdaptModalService }, { type: i2.RxLicenseDataPageService }, { type: i2.RxCurrentUserService }, { type: i4.TranslateService }]; }, propDecorators: { cognitiveConsumptionGroups: [{
                type: ViewChildren,
                args: [CognitiveConsumptionGroupComponent]
            }] } });

class CognitiveConsumptionRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-cognitive-consumption',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveConsumptionAdminComponent),
            name: 'Cognitive consumption',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
CognitiveConsumptionRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
CognitiveConsumptionRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionRegistrationModule, declarations: [CognitiveConsumptionAdminComponent,
        CognitiveConsumptionChartComponent,
        CognitiveConsumptionGroupComponent,
        CognitiveConsumptionNotificationHistoryModalComponent,
        CognitiveConsumptionNotificationModalComponent,
        DownloadReportModalComponent], imports: [AdaptButtonModule,
        AdaptChartsModule,
        AdaptEmptyStateModule,
        AdaptModalModule,
        AdaptRxCounterModule,
        AdaptRxDatetimeModule,
        AdaptRxListBuilderModule,
        AdaptRxRadiobuttonModule,
        AdminSettingsModule,
        CommonModule,
        RecordGridModule,
        RxBusyIndicatorModule,
        RxDirectivesModule,
        FormsModule,
        TranslateModule] });
CognitiveConsumptionRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionRegistrationModule, imports: [[
            AdaptButtonModule,
            AdaptChartsModule,
            AdaptEmptyStateModule,
            AdaptModalModule,
            AdaptRxCounterModule,
            AdaptRxDatetimeModule,
            AdaptRxListBuilderModule,
            AdaptRxRadiobuttonModule,
            AdminSettingsModule,
            CommonModule,
            RecordGridModule,
            RxBusyIndicatorModule,
            RxDirectivesModule,
            FormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveConsumptionRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        CognitiveConsumptionAdminComponent,
                        CognitiveConsumptionChartComponent,
                        CognitiveConsumptionGroupComponent,
                        CognitiveConsumptionNotificationHistoryModalComponent,
                        CognitiveConsumptionNotificationModalComponent,
                        DownloadReportModalComponent
                    ],
                    imports: [
                        AdaptButtonModule,
                        AdaptChartsModule,
                        AdaptEmptyStateModule,
                        AdaptModalModule,
                        AdaptRxCounterModule,
                        AdaptRxDatetimeModule,
                        AdaptRxListBuilderModule,
                        AdaptRxRadiobuttonModule,
                        AdminSettingsModule,
                        CommonModule,
                        RecordGridModule,
                        RxBusyIndicatorModule,
                        RxDirectivesModule,
                        FormsModule,
                        TranslateModule
                    ],
                    entryComponents: [
                        CognitiveConsumptionAdminComponent,
                        CognitiveConsumptionNotificationHistoryModalComponent,
                        CognitiveConsumptionNotificationModalComponent,
                        DownloadReportModalComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_COGNITIVE_SEARCH = {
    definitionName: 'Cognitive Service Data Set Descriptor',
    resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.SearchDataSource',
    queryExpression: "'1732' = 2 AND '61001' = ",
    defaultLocale: 'en',
    maxCollectionsPerProject: 5,
    datasetTypes: {
        bmcHelixPlatForm: 0,
        external: 10
    },
    searchDatasetTypeOptions: [
        {
            displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.bmc-helix-platform-data-set.label',
            datasetType: 0
        },
        {
            displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.external-data-set.label',
            datasetType: 10
        }
    ],
    externalDatasetSourceTypes: {
        rkm: '10',
        other: '20'
    },
    fields: {
        datasetId: 1730,
        datasetName: 1731,
        searchType: 1732,
        datasetError: 1733,
        dateLastSubmitted: 1735,
        bundleId: 61001,
        locale: 1737,
        dataSource: 1738,
        newDatasetId: 1740,
        searchDatasetType: 1815,
        externalDatasetSource: 1817,
        confidenceThreshold: 1821,
        projectId: 1832
    },
    datasetStatus: {
        failed: {
            id: 3,
            label: 'com.bmc.arsys.rx.client.admin.cognitive-search.failed.label',
            variant: 'danger'
        },
        inProgress: {
            id: 5,
            label: 'com.bmc.arsys.rx.client.admin.cognitive-search.in-progress.label',
            variant: 'info'
        },
        created: {
            id: 6,
            label: 'com.bmc.arsys.rx.client.admin.cognitive-search.created.label',
            variant: 'success'
        }
    },
    templateFields: {
        templateType: 1818
    },
    templateTypes: {
        webChannel: '10',
        nonWebChannel: '20'
    },
    templateDefinitionName: 'Cognitive Service Chatbot Knowledge Article Template',
    templateAssociationDefinitionName: 'Cognitive Service Data Set To Cognitive Service Chatbot Knowledge Article Template'
};

const dataPageType$1 = 'com.bmc.arsys.rx.application.cognitive.datapage.CognitiveSearchProjectDataPageQuery';
class RxCognitiveSearchProjectDataPageService extends DataPage {
    constructor(injector) {
        super(injector, dataPageType$1);
        this.injector = injector;
    }
}
RxCognitiveSearchProjectDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchProjectDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveSearchProjectDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchProjectDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchProjectDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

const dataPageType = 'com.bmc.arsys.rx.application.cognitive.datapage.CognitiveSearchCollectionDataPageQuery';
class RxCognitiveSearchCollectionDataPageService extends DataPage {
    constructor(injector) {
        super(injector, dataPageType);
        this.injector = injector;
    }
}
RxCognitiveSearchCollectionDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchCollectionDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveSearchCollectionDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchCollectionDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveSearchCollectionDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class CognitiveSearchEditorAdminComponent extends RxModalClass {
    constructor(formBuilder, dockedPanelContext, rxRecordInstanceService, rxNotificationService, rxBundleCacheService, rxCognitiveSearchProjectDataPageService, rxCognitiveSearchCollectionDataPageService, translateService, injector) {
        super(dockedPanelContext, injector);
        this.formBuilder = formBuilder;
        this.dockedPanelContext = dockedPanelContext;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxNotificationService = rxNotificationService;
        this.rxBundleCacheService = rxBundleCacheService;
        this.rxCognitiveSearchProjectDataPageService = rxCognitiveSearchProjectDataPageService;
        this.rxCognitiveSearchCollectionDataPageService = rxCognitiveSearchCollectionDataPageService;
        this.translateService = translateService;
        this.injector = injector;
        this.externalDatasetSourceOptions = [
            {
                value: '10',
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.rkm.label')
            },
            {
                value: '20',
                displayValue: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.other.label')
            }
        ];
        this.options = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.common.record-definition-name.label'),
            definitionType: RxDefinitionPickerType.Record,
            required: true
        };
        this.searchLocaleOptions = ['en', 'ar', 'fr', 'de', 'ja', 'it', 'pt', 'es'];
    }
    ngOnInit() {
        super.ngOnInit();
        this.isEditMode = this.dockedPanelContext.getData().isEditMode;
        this.datasetType = this.dockedPanelContext.getData().datasetType;
        this.formatDataSource = this.dockedPanelContext.getData().formatDataSource;
        this.searchDatasetForm = this.formBuilder.group({
            datasetName: null,
            description: null,
            locale: [],
            recordDefinition: null,
            projectId: [],
            collectionId: [],
            externalDatasetSource: [],
            confidenceThreshold: 0
        });
        this.collections$ = this.searchDatasetForm.controls.projectId.valueChanges.pipe(distinctUntilChanged(), map$1((selection) => (this.isExternalDataset() ? selection === null || selection === void 0 ? void 0 : selection[0] : null)), filter$1(Boolean), switchMap((project) => this.rxCognitiveSearchCollectionDataPageService.get({
            params: { projectId: project.id }
        })), map$1((dataPage) => dataPage.data.sort((a, b) => a.name.localeCompare(b.name))), startWith([]), tap((collections) => {
            if (!this.isEditMode && this.isExternalDataset()) {
                this.searchDatasetForm.controls.collectionId.setValue([]);
                collections.length
                    ? this.searchDatasetForm.controls.collectionId.enable()
                    : this.searchDatasetForm.controls.collectionId.disable();
            }
        }));
        this.projects$ = this.rxCognitiveSearchProjectDataPageService.get().pipe(map$1((dataPage) => dataPage.data.sort((a, b) => a.name.localeCompare(b.name))), startWith([]), shareReplay(1), tap(() => {
            if (!this.isEditMode) {
                this.searchDatasetForm.controls.projectId.enable();
            }
        }), map$1((projects) => !this.isEditMode && this.isHelixPlatformDataset()
            ? projects.filter((project) => project.collectionCount < RX_COGNITIVE_SEARCH.maxCollectionsPerProject)
            : projects));
        if (this.isEditMode) {
            this.searchDatasetForm.get('datasetName').disable();
            this.searchDatasetForm.get('description').disable();
            this.searchDatasetForm.get('locale').disable();
            this.searchDatasetForm.get('recordDefinition').disable();
            this.searchDatasetForm.get('projectId').disable();
            this.searchDatasetForm.get('collectionId').disable();
            this.searchDatasetForm.get('externalDatasetSource').disable();
            const recordInstance$ = this.rxRecordInstanceService
                .get(RX_COGNITIVE_SEARCH.definitionName, this.dockedPanelContext.getData().recordId)
                .pipe(tap((recordInstance) => (this.recordInstance = recordInstance)));
            const subscription = forkJoin([recordInstance$, this.projects$])
                .pipe(switchMap(([recordInstance, projects]) => {
                const projectId = recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.projectId].value;
                const project = projects.find((project) => project.id === projectId);
                if (project) {
                    this.searchDatasetForm.controls.projectId.setValue([project]);
                }
                else {
                    this.searchDatasetForm.controls.projectId.setValue([
                        {
                            name: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.project-not-found.label'),
                            id: projectId
                        }
                    ], { emitEvent: false });
                }
                return project
                    ? this.rxCognitiveSearchCollectionDataPageService.get({ params: { projectId } })
                    : this.rxCognitiveSearchCollectionDataPageService.getEmptyDataPage();
            }), map$1((dataPage) => dataPage.data), withLatestFrom(recordInstance$))
                .subscribe(([collections, recordInstance]) => {
                const collectionId = recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetId].value;
                const selectedCollection = collections.find((collection) => collection.id === collectionId);
                this.searchDatasetForm.controls.collectionId.setValue([
                    selectedCollection || {
                        name: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.collection-not-found.label'),
                        id: collectionId
                    }
                ]);
                this.setFormControlValues();
            });
            this.busyConfig = {
                busy: subscription,
                loaderType: LoaderType.SECTION,
                message: 'Loading'
            };
        }
        else {
            this.searchDatasetForm.get('locale').setValue([this.searchLocaleOptions[0]]);
            this.searchDatasetForm.get('confidenceThreshold').setValue(0);
            this.searchDatasetForm.get('projectId').disable();
            this.searchDatasetForm.get('collectionId').disable();
            if (this.isHelixPlatformDataset()) {
                this.searchDatasetForm.get('externalDatasetSource').disable();
            }
            else if (this.isExternalDataset()) {
                this.searchDatasetForm.get('recordDefinition').disable();
                this.searchDatasetForm
                    .get('externalDatasetSource')
                    .setValue([
                    find(this.externalDatasetSourceOptions, { value: RX_COGNITIVE_SEARCH.externalDatasetSourceTypes.rkm })
                ]);
            }
            this.rxRecordInstanceService
                .getNew(RX_COGNITIVE_SEARCH.definitionName)
                .subscribe((recordInstance) => (this.recordInstance = recordInstance));
        }
    }
    isDirty() {
        return this.searchDatasetForm.dirty;
    }
    isHelixPlatformDataset() {
        return this.datasetType === RX_COGNITIVE_SEARCH.datasetTypes.bmcHelixPlatForm;
    }
    isExternalDataset() {
        return this.datasetType === RX_COGNITIVE_SEARCH.datasetTypes.external;
    }
    setFormControlValues() {
        const status = find(RX_COGNITIVE_SEARCH.datasetStatus, {
            id: this.recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.status].value
        });
        this.statusAlert = {
            content: this.translateService.instant(status.label),
            type: 'inline',
            variant: status.variant
        };
        this.failedReasonAlert = this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetError].value
            ? {
                content: this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetError].value,
                type: 'page',
                variant: 'warning',
                dismissible: false
            }
            : null;
        this.searchDatasetForm
            .get('datasetName')
            .setValue(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetName].value);
        this.searchDatasetForm
            .get('description')
            .setValue(this.recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.description].value);
        this.searchDatasetForm
            .get('locale')
            .setValue([this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.locale].value]);
        if (this.isHelixPlatformDataset()) {
            this.searchDatasetForm
                .get('recordDefinition')
                .setValue(this.formatDataSource(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.dataSource].value));
        }
        else if (this.isExternalDataset()) {
            this.searchDatasetForm.get('externalDatasetSource').setValue([
                find(this.externalDatasetSourceOptions, {
                    value: String(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.externalDatasetSource].value)
                })
            ]);
        }
        this.searchDatasetForm
            .get('confidenceThreshold')
            .setValue(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.confidenceThreshold].value);
    }
    optionFormatter(option) {
        return option.displayValue || option.name;
    }
    thresholdRangeValidator() {
        return (control) => {
            return control.value && !/^(0(\.[0-9]{1,6})?)|^(1(\.0{1,6})?)$/.test(control.value)
                ? {
                    thresholdOutOfRange: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.range-validation.message')
                    }
                }
                : null;
        };
    }
    saveSearchDataset() {
        this.searchDatasetForm.markAsPristine();
        if (!this.isEditMode) {
            this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.searchType].value = this.translateService.instant('com.bmc.arsys.rx.client.common.search.label');
            this.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_SEARCH.datasetStatus.inProgress.id);
            this.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, this.searchDatasetForm.get('description').value);
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetId, '');
            this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetId].value =
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetName, this.searchDatasetForm.get('datasetName').value);
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.bundleId, this.rxBundleCacheService.bundleId);
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.locale, this.searchDatasetForm.get('locale').value[0]);
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.dateLastSubmitted, moment());
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.searchDatasetType, this.datasetType);
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.projectId, [
                this.searchDatasetForm.get('projectId').value[0].id
            ]);
            if (this.isExternalDataset()) {
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetId, [
                    this.searchDatasetForm.get('collectionId').value[0].id
                ]);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.externalDatasetSource, this.searchDatasetForm.get('externalDatasetSource').value[0].value);
            }
            else if (this.isHelixPlatformDataset()) {
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.dataSource, JSON.stringify({
                    resourceType: RX_COGNITIVE_SEARCH.resourceType,
                    recordDefinitions: [this.searchDatasetForm.get('recordDefinition').value]
                }));
            }
            this.recordInstance.associationInstances = this.prepareAssociatedRecordInstance(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetName].value);
        }
        this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.confidenceThreshold, this.searchDatasetForm.get('confidenceThreshold').value);
        if (this.isEditMode) {
            this.rxRecordInstanceService.save(this.recordInstance).subscribe(() => this.successCallback());
        }
        else {
            this.rxRecordInstanceService.create(this.recordInstance).subscribe(() => this.successCallback());
        }
    }
    successCallback() {
        this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.search-data-save-successful.message'));
        this.dockedPanelContext.close(null);
    }
    prepareAssociatedRecordInstance(datasetName) {
        const associationOperations = set({}, 'nodeB', {
            pending: [
                {
                    recordDefinitionName: RX_COGNITIVE_SEARCH.templateDefinitionName,
                    isNewInstance: true,
                    id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                    fieldInstances: {
                        [RX_COGNITIVE_SEARCH.templateFields.templateType]: {
                            id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                            value: RX_COGNITIVE_SEARCH.templateTypes.webChannel
                        },
                        [RX_RECORD_DEFINITION.coreFieldIds.description]: {
                            id: RX_RECORD_DEFINITION.coreFieldIds.description,
                            value: 'Template for ' + datasetName
                        }
                    }
                },
                {
                    recordDefinitionName: RX_COGNITIVE_SEARCH.templateDefinitionName,
                    isNewInstance: true,
                    id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                    fieldInstances: {
                        [RX_COGNITIVE_SEARCH.templateFields.templateType]: {
                            id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                            value: RX_COGNITIVE_SEARCH.templateTypes.nonWebChannel
                        },
                        [RX_RECORD_DEFINITION.coreFieldIds.description]: {
                            id: RX_RECORD_DEFINITION.coreFieldIds.description,
                            value: 'Template for ' + datasetName
                        }
                    }
                }
            ]
        });
        return set({}, RX_COGNITIVE_SEARCH.templateAssociationDefinitionName, associationOperations);
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
CognitiveSearchEditorAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchEditorAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1$1.DockedPanelContext }, { token: i3$2.RxRecordInstanceService }, { token: i2.RxNotificationService }, { token: i2.RxBundleCacheService }, { token: RxCognitiveSearchProjectDataPageService }, { token: RxCognitiveSearchCollectionDataPageService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
CognitiveSearchEditorAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveSearchEditorAdminComponent, selector: "rx-cognitive-search-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\" [ngBusy]=\"busyConfig\">\n  <div class=\"mb-1\" *ngIf=\"isEditMode && statusAlert\">\n    <label class=\"form-control-label\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-search.status.label' | translate }}\n    </label>\n    <adapt-alert [config]=\"statusAlert\"></adapt-alert>\n  </div>\n\n  <div class=\"mb-1\" *ngIf=\"isEditMode && failedReasonAlert\">\n    <label class=\"form-control-label\">\n      {{ 'com.bmc.arsys.rx.client.common.error.label' | translate }}\n    </label>\n    <adapt-alert [config]=\"failedReasonAlert\"></adapt-alert>\n  </div>\n\n  <form [formGroup]=\"searchDatasetForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"dataset-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      formControlName=\"datasetName\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      formControlName=\"description\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale\"\n      formControlName=\"locale\"\n      [options]=\"searchLocaleOptions\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.project-id.label' | translate }}\"\n      rx-id=\"project-id\"\n      formControlName=\"projectId\"\n      [options]=\"projects$ | async\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n      [tooltip]=\"\n        isHelixPlatformDataset()\n          ? {\n              iconName: 'question_circle_o',\n              content: 'com.bmc.arsys.rx.client.admin.cognitive-search.project-id.tooltip' | translate,\n              placement: 'right',\n              popoverMode: true\n            }\n          : null\n      \"\n    >\n    </adapt-rx-select>\n\n    <rx-definition-picker\n      *ngIf=\"isHelixPlatformDataset()\"\n      class=\"form-group d-block\"\n      [options]=\"options\"\n      formControlName=\"recordDefinition\"\n      rx-id=\"record-definition\"\n      required=\"true\"\n    >\n    </rx-definition-picker>\n\n    <adapt-rx-select\n      *ngIf=\"isExternalDataset()\"\n      class=\"form-group d-block\"\n      rx-id=\"collection-id\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.collection-id.label' | translate }}\"\n      formControlName=\"collectionId\"\n      [options]=\"collections$ | async\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      *ngIf=\"isExternalDataset()\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.external-data-set-source.label' | translate }}\"\n      rx-id=\"external-data-set-source\"\n      formControlName=\"externalDatasetSource\"\n      [options]=\"externalDatasetSourceOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-counter\n      adaptRange\n      class=\"form-group d-block\"\n      rx-id=\"confidence-threshold\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.confidence-threshold.label' | translate }}\"\n      [max]=\"1\"\n      [min]=\"0\"\n      [formControl]=\"searchDatasetForm.controls.confidenceThreshold\"\n      [rxCustomValidators]=\"thresholdRangeValidator()\"\n      [step]=\"0.1\"\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: popoverContent,\n        placement: 'right',\n        popoverMode: true\n      }\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"searchDatasetForm.pristine || searchDatasetForm.invalid\"\n    (click)=\"saveSearchDataset()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">Cancel</button>\n</div>\n\n<ng-template #popoverContent>\n  <div\n    style=\"white-space: pre-wrap\"\n    [innerHTML]=\"'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-range.tooltip' | translate\"\n  ></div>\n</ng-template>\n", components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$1.AdaptBusyDirective, selector: "[adapt-busy], [ngBusy]", inputs: ["ngBusy", "adaptRadarDisableEventSending", "busyPromise", "determinate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }], pipes: { "translate": i4.TranslatePipe, "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchEditorAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-search-editor',
                    templateUrl: './cognitive-search-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1$1.DockedPanelContext }, { type: i3$2.RxRecordInstanceService }, { type: i2.RxNotificationService }, { type: i2.RxBundleCacheService }, { type: RxCognitiveSearchProjectDataPageService }, { type: RxCognitiveSearchCollectionDataPageService }, { type: i4.TranslateService }, { type: i0.Injector }]; } });

class CognitiveSearchAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxModalService, rxCurrentUserService, rxBundleCacheService, rxNotificationService, rxRecordInstanceService, rxDefinitionNameService, translateService, rxRecordInstanceDataPageService) {
        super();
        this.formBuilder = formBuilder;
        this.rxModalService = rxModalService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxBundleCacheService = rxBundleCacheService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.translateService = translateService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
    }
    ngOnInit() {
        this.searchDatasetTypes = RX_COGNITIVE_SEARCH.searchDatasetTypeOptions.map((dataSetType) => (Object.assign(Object.assign({}, dataSetType), { displayName: this.translateService.instant(dataSetType.displayName) })));
        this.gridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: this.deleteSearchDataset.bind(this)
                        }
                    ]
                }
            ],
            enableFiltering: true,
            recordDefinitionName: RX_COGNITIVE_SEARCH.definitionName,
            enableRowSelection: RowSelectionMode.Multiple,
            getData: (queryParams) => this.getData(queryParams),
            columns: this.getColumns(),
            filterExpression: `${RX_COGNITIVE_SEARCH.queryExpression} "${this.rxBundleCacheService.bundleId}"`,
            styles: 'flex-fill'
        });
    }
    getData(queryParams) {
        return this.rxRecordInstanceDataPageService.post({
            params: Object.assign({}, omit(queryParams, ['searchText']))
        });
    }
    createNewSearchDataset(datasetType) {
        this.openCognitiveSearchEditor(false, datasetType);
    }
    editSearchDataset(selectedRecord) {
        if (!this.isAdministrator) {
            this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.warning.message'));
        }
        else {
            this.openCognitiveSearchEditor(true, selectedRecord[RX_COGNITIVE_SEARCH.fields.searchDatasetType], selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id]);
        }
    }
    deleteSearchDataset() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.delete-confirmation.message')
        })
            .then((result) => {
            if (result) {
                const deleteRequests$ = [];
                map(this.grid.api.getSelectedRows(), (record) => {
                    deleteRequests$.push(this.rxRecordInstanceService.delete(RX_COGNITIVE_SEARCH.definitionName, record[RX_RECORD_DEFINITION.coreFieldIds.id]));
                });
                forkJoin(deleteRequests$).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-deletion.message'));
                    this.grid.api.refresh().subscribe();
                });
            }
        });
    }
    formatDataSource(dataSource) {
        return dataSource
            ? map(JSON.parse(dataSource).recordDefinitions, (recordDefinitionName) => this.rxDefinitionNameService.getDisplayName(recordDefinitionName)).join(', ')
            : '';
    }
    getDatasetType(searchDatasetType) {
        return find(this.searchDatasetTypes, { datasetType: searchDatasetType }).displayName;
    }
    getColumns() {
        return [
            {
                index: 0,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetName),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousAction, selectedRow) => {
                            this.editSearchDataset(selectedRow);
                        }
                    }
                ]
            },
            {
                index: 1,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.status),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label')
            },
            {
                index: 2,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label')
            },
            {
                index: 3,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.searchDatasetType),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.type.title'),
                cellTemplate: this.datasetTypeTemplate
            },
            {
                index: 4,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.locale),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.locale.label')
            },
            {
                index: 5,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.dataSource),
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.record-definition.label'),
                cellTemplate: this.definitionNameCellTemplate
            },
            {
                index: 6,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.confidenceThreshold),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.confidence-threshold.label')
            },
            {
                index: 7,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetId),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                visible: false
            },
            {
                index: 8,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.modifiedDate),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.date-modified.title'),
                visible: false
            },
            {
                index: 9,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.searchType),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.search-type.title'),
                visible: false
            },
            {
                index: 10,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.displayId),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.request-id.title'),
                visible: false
            },
            {
                index: 11,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                visible: false
            },
            {
                index: 12,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetError),
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.error.label'),
                visible: false
            },
            {
                index: 13,
                fieldId: String(RX_COGNITIVE_SEARCH.fields.projectId),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.project-id.title'),
                visible: false
            }
        ];
    }
    openCognitiveSearchEditor(isEditMode, datasetType, recordId) {
        return this.rxModalService
            .openDockedPanel({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.cognitive-search-data-set.title'),
            content: CognitiveSearchEditorAdminComponent,
            data: {
                isEditMode,
                datasetType,
                formatDataSource: this.formatDataSource.bind(this),
                recordId
            }
        })
            .then(() => {
            this.grid.api.refresh().subscribe();
        })
            .catch(noop);
    }
}
CognitiveSearchAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1.RxModalService }, { token: i2.RxCurrentUserService }, { token: i2.RxBundleCacheService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceService }, { token: i2.RxDefinitionNameService }, { token: i4.TranslateService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveSearchAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveSearchAdminComponent, selector: "rx-cognitive-search", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }, { propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "searchDatasetConfigurationTemplate", first: true, predicate: ["searchDatasetConfigurationTemplate"], descendants: true, static: true }, { propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "datasetTypeTemplate", first: true, predicate: ["datasetTypeTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.header.title' | translate }}\">\n  <ng-container>\n    <div class=\"dropdown\" adaptDropdown>\n      <button\n        adapt-button\n        #dropdownButton\n        adaptDropdownToggle\n        type=\"button\"\n        btn-type=\"tertiary\"\n        class=\"d-icon-plus_circle align-self-start\"\n        rx-id=\"new-button\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n      </button>\n\n      <div class=\"dropdown-menu\" adaptDropdownMenu>\n        <button\n          *ngFor=\"let dataset of searchDatasetTypes\"\n          class=\"dropdown-item\"\n          (click)=\"createNewSearchDataset(dataset.datasetType)\"\n          [disabled]=\"!isAdministrator\"\n        >\n          {{ dataset.displayName | translate }}\n        </button>\n      </div>\n    </div>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ formatDataSource(dataItem[column.field]) }}\n</ng-template>\n\n<ng-template #datasetTypeTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ getDatasetType(dataItem[column.field]) }}\n</ng-template>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-search',
                    templateUrl: './cognitive-search.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1.RxModalService }, { type: i2.RxCurrentUserService }, { type: i2.RxBundleCacheService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceService }, { type: i2.RxDefinitionNameService }, { type: i4.TranslateService }, { type: i3$2.RxRecordInstanceDataPageService }]; }, propDecorators: { grid: [{
                type: ViewChild,
                args: ['grid', { static: true }]
            }], dropdownButton: [{
                type: ViewChild,
                args: ['dropdownButton', { static: true }]
            }], searchDatasetConfigurationTemplate: [{
                type: ViewChild,
                args: ['searchDatasetConfigurationTemplate', { static: true }]
            }], definitionNameCellTemplate: [{
                type: ViewChild,
                args: ['definitionNameCellTemplate', { static: true }]
            }], datasetTypeTemplate: [{
                type: ViewChild,
                args: ['datasetTypeTemplate', { static: true }]
            }] } });

class CognitiveSearchRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-cognitive-search',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveSearchAdminComponent),
            name: 'Cognitive search',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
CognitiveSearchRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
CognitiveSearchRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchRegistrationModule, declarations: [CognitiveSearchAdminComponent, CognitiveSearchEditorAdminComponent], imports: [CommonModule,
        AdaptButtonModule,
        AdaptDropdownModule,
        AdaptRxCounterModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        ReactiveFormsModule,
        RecordGridModule,
        RxDirectivesModule,
        RxDefinitionPickerModule,
        TranslateModule,
        AdminSettingsModule,
        AdaptRxLabelModule,
        AdaptRxValidatorsModule,
        AdaptAlertModule,
        AdaptBusyModule] });
CognitiveSearchRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchRegistrationModule, imports: [[
            CommonModule,
            AdaptButtonModule,
            AdaptDropdownModule,
            AdaptRxCounterModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            ReactiveFormsModule,
            RecordGridModule,
            RxDirectivesModule,
            RxDefinitionPickerModule,
            TranslateModule,
            AdminSettingsModule,
            AdaptRxLabelModule,
            AdaptRxValidatorsModule,
            AdaptAlertModule,
            AdaptBusyModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveSearchRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [CognitiveSearchAdminComponent, CognitiveSearchEditorAdminComponent],
                    imports: [
                        CommonModule,
                        AdaptButtonModule,
                        AdaptDropdownModule,
                        AdaptRxCounterModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        ReactiveFormsModule,
                        RecordGridModule,
                        RxDirectivesModule,
                        RxDefinitionPickerModule,
                        TranslateModule,
                        AdminSettingsModule,
                        AdaptRxLabelModule,
                        AdaptRxValidatorsModule,
                        AdaptAlertModule,
                        AdaptBusyModule
                    ],
                    entryComponents: [CognitiveSearchAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const passwordMask = '********';
const urlPattern = /^((http[s]?):\/)\/?([^:\/\s]+)((\/\w+)*\/)?([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/;
const RX_COGNITIVE_SERVICE = {
    passwordMask: passwordMask,
    credentialsProvider: 'WATSON',
    nativeProvider: 'NATIVE',
    chatbot: {
        chatContextVariablesProcessName: 'chatContextVariablesProcessName',
        systemSettings: {
            chatSessionIdleTimeout: 900,
            chatUserIdleTimeout: 30,
            chatbotNotificationsIdleTime: 900,
            chatbotNotificationsMaxTime: 3600,
            chatContextVariablesProcessName: '',
            removePoweredByBmcHelix: 0
        }
    },
    cognitiveAdministrationCredentials: {
        systemSettingsKey: 'cognitiveAdminTenantCredential',
        cognitiveAdminPlatformApiKey: 'cognitiveAdminPlatformApiKey',
        payload: {
            WATSON: {
                cognitiveAdminPlatformApiKey: passwordMask
            }
        }
    },
    connections: {
        systemSettingKeys: {
            helixPortalUrl: 'helixPortalUrl',
            helixServiceCredential: 'helixServiceCredential',
            cognitiveServiceCredential: 'cognitiveServiceCredential',
            classificationServiceProvider: 'classificationServiceProvider',
            translationServiceProvider: 'translationServiceProvider',
            serviceAccountCredential: 'gcpServiceCredential',
            google: 'gcpTranslationServiceCredential',
            microsoft: 'microsoftServiceCredential'
        },
        cognitiveServiceCredentialKeys: {
            classification: 'naturalLanguageClassifierAPIKey',
            discovery: 'searchAPIKey',
            toneAnalyzer: 'toneAnalyzerAPIKey'
        },
        payload: {
            helixClassifierKey: '',
            helixClassifierSecret: '',
            naturalLanguageClassifierAPIKey: '',
            searchAPIKey: '',
            toneAnalyzerAPIKey: '',
            serviceAccountCredentials: '',
            apiKey: ''
        },
        serviceDefinitions: {
            helixClassifier: {
                id: 'helixClassifier',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-ade.title',
                isOpen: true,
                isApiKeyTest: true,
                serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                fields: [
                    {
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-portal-url.label',
                        name: 'helixPortalUrl',
                        readonly: true,
                        type: 'text',
                        required: false
                    },
                    {
                        name: 'helixClassifierKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.access-key.label',
                        type: 'text',
                        required: true,
                        rxId: 'accessKey'
                    },
                    {
                        name: 'helixClassifierSecret',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.secret-key.label',
                        type: 'password',
                        required: true,
                        rxId: 'secretKey'
                    }
                ]
            },
            classification: {
                id: 'classification',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant.title',
                model: 'naturalLanguageClassifierAPIKey',
                isOpen: true,
                isApiKeyTest: true,
                serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                fields: [
                    {
                        name: 'naturalLanguageClassifierAPIKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                        type: 'password',
                        required: true,
                        rxId: 'api-key'
                    }
                ]
            },
            serviceAccountCredentials: {
                id: 'serviceAccountCredentials',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.bmc-native.title',
                model: 'serviceAccountCredentials',
                isOpen: true,
                isApiKeyTest: true,
                serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                fields: [
                    {
                        name: 'serviceAccountCredentials',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.api-key.label',
                        type: 'json',
                        required: true,
                        rxId: 'api-key',
                        jsonValidatorErrorMessage: 'Credentials are invalid.'
                    }
                ]
            },
            discovery: {
                id: 'discovery',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-discovery.title',
                model: 'searchAPIKey',
                isOpen: false,
                isApiKeyTest: true,
                serviceType: 'SEARCH',
                fields: [
                    {
                        name: 'searchAPIKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                        type: 'password',
                        required: true,
                        rxId: 'api-key'
                    }
                ]
            },
            toneAnalyzer: {
                id: 'toneAnalyzer',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-tone-analyzer.title',
                model: 'toneAnalyzerAPIKey',
                isOpen: false,
                isApiKeyTest: true,
                serviceType: 'TONE_ANALYZER',
                fields: [
                    {
                        name: 'toneAnalyzerAPIKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                        type: 'password',
                        required: true,
                        rxId: 'api-key'
                    }
                ]
            },
            microsoft: {
                id: 'microsoft',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.microsoft-translator.title',
                isOpen: false,
                isApiKeyTest: false,
                fields: [
                    {
                        name: 'apiKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.microsoft-azure-api-key.label',
                        type: 'password',
                        required: true,
                        rxId: 'microsoft-azure-api-key'
                    },
                    {
                        name: 'serviceURL',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.service-url.label',
                        type: 'text',
                        required: true,
                        pattern: urlPattern,
                        rxId: 'microsoft-translator-service-url'
                    },
                    {
                        name: 'authURL',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.oauth-url.label',
                        type: 'text',
                        required: true,
                        pattern: urlPattern,
                        rxId: 'microsoft-translator-oauth-url'
                    }
                ]
            },
            google: {
                id: 'google',
                title: 'com.bmc.arsys.rx.client.admin.cognitive-service.google-translation.title',
                model: 'apiKey',
                isOpen: false,
                isApiKeyTest: false,
                fields: [
                    {
                        name: 'apiKey',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-service.google-cloud-service-key.label',
                        type: 'json',
                        required: true,
                        rxId: 'google-cloud-service-key',
                        jsonValidatorErrorMessage: 'Service key is invalid.'
                    }
                ]
            }
        }
    },
    cognitiveServiceRegions: {
        systemSettingsKey: 'cognitiveServiceRegionTenantConfiguration',
        settings: [
            { id: 'naturalLanguageClassifier', name: 'Natural language classification' },
            { id: 'conversation', name: 'Chatbot' },
            { id: 'search', name: 'Cognitive search' },
            { id: 'toneAnalyzer', name: 'Tone analysis' }
        ]
    },
    toneAnalyzer: {
        systemSettingsKey: 'toneScoreThreshold'
    },
    summarization: {
        systemSettingsKey: 'summarizationServiceTenantConfiguration'
    },
    onboard: {
        cognitiveProvidersList: [
            {
                id: 'watson',
                name: 'IBM Watson'
            }
        ],
        providers: {
            watson: 'WATSON'
        },
        providerServices: {
            watson: {
                naturalLanguageClassifier: {
                    id: 'naturalLanguageClassifier',
                    apiKeyPropertyName: 'naturalLanguageClassifierAPIKey',
                    regionPropertyName: 'naturalLanguageClassifierRegion',
                    switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant.title'
                },
                conversation: {
                    id: 'conversation',
                    apiKeyPropertyName: 'conversationAPIKey',
                    regionPropertyName: 'conversationRegion',
                    switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant-for-chatbot.message',
                    tooltipText: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.conversation.tooltip'
                },
                toneAnalyzer: {
                    id: 'toneAnalyzer',
                    apiKeyPropertyName: 'toneAnalyzerAPIKey',
                    regionPropertyName: 'toneAnalyzerRegion',
                    switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-tone-analyzer.title'
                }
            }
        }
    },
    cognitiveServicesList: [
        {
            id: 'chatbot',
            name: 'com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'
        },
        {
            id: 'cognitiveAdministrationCredentials',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-administration-credentials.title'
        },
        {
            id: 'connections',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-service-connections.title'
        },
        {
            id: 'summarization',
            name: 'com.bmc.arsys.rx.client.admin.summarization-service-configuration.title'
        },
        {
            id: 'cognitiveServiceRegions',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.title'
        },
        {
            id: 'toneAnalyzerConfiguration',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.tone-analyzer.title'
        }
    ],
    regionsList: [
        {
            id: 'EU_DE',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.germany.label'
        },
        {
            id: 'AU_SYD',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.sydney.label'
        },
        {
            id: 'US_EAST',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-east.label'
        },
        {
            id: 'US_SOUTH',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-south.label'
        },
        {
            id: 'EU_GB',
            name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.uk.label'
        }
    ],
    notificationMessages: {
        chatProviderSettingsSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.chat-provider-settings-saved.message',
        cognitiveAdministrationCredentialsSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.cognitive-administration-credentials-saved.message',
        toneAnalyzerConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.tone-analyzer-configuration-saved.message',
        serviceRegionConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-region-configuration-saved.message',
        serviceConnectionSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-connection-saved.message',
        summarizationConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.summarization-configuration-saved.message',
        serviceOnboarded: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-onboarded.message'
    }
};

const systemConfigurationDataPageQuery = 'com.bmc.arsys.rx.application.common.datapage.SystemConfigurationDataPageQuery';
class RxCognitiveServiceSystemConfigurationDataPageService extends DataPage {
    constructor(injector) {
        super(injector, systemConfigurationDataPageQuery);
        this.injector = injector;
    }
}
RxCognitiveServiceSystemConfigurationDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceSystemConfigurationDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveServiceSystemConfigurationDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceSystemConfigurationDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceSystemConfigurationDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class RxCognitiveServiceService {
    constructor(httpClient, rxCognitiveServiceSystemConfigurationDataPageService, rxProcessDefinitionDataPageService) {
        this.httpClient = httpClient;
        this.rxCognitiveServiceSystemConfigurationDataPageService = rxCognitiveServiceSystemConfigurationDataPageService;
        this.rxProcessDefinitionDataPageService = rxProcessDefinitionDataPageService;
    }
    filterMaskPassword(password) {
        return password === RX_COGNITIVE_SERVICE.passwordMask ? '' : password;
    }
    getChatbotProcessDefinitionNames() {
        return this.rxProcessDefinitionDataPageService
            .get({
            headers: {
                'default-bundle-scope': RX_APPLICATION.chatbotBundleId
            },
            params: {
                propertySelection: ['name']
            }
        })
            .pipe(map$1((response) => map(response.data, 'name')));
    }
    getSystemSettings(settingList) {
        return this.rxCognitiveServiceSystemConfigurationDataPageService.get({
            params: { name: settingList.join(',') }
        });
    }
    testConnection(requestPayload) {
        return this.httpClient.post(RX_RESOURCE_URLS.command, requestPayload);
    }
}
RxCognitiveServiceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceService, deps: [{ token: i1$2.HttpClient }, { token: RxCognitiveServiceSystemConfigurationDataPageService }, { token: i3$4.RxProcessDefinitionDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveServiceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveServiceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: RxCognitiveServiceSystemConfigurationDataPageService }, { type: i3$4.RxProcessDefinitionDataPageService }]; } });

class CognitiveServiceChatbotComponent {
    constructor(formBuilder, rxCognitiveServiceService, rxDefinitionNameService, rxNotificationService, rxSystemConfigurationService, translateService) {
        this.formBuilder = formBuilder;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
        this.initialChatbotProviderValues = cloneDeep(RX_COGNITIVE_SERVICE.chatbot.systemSettings);
        this.chatbotProcessDefinitionNameOptions = [];
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.approverSelectionTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.user-idle.tooltip')
        };
        this.chatbotNotificationsIdleTimeTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-idle-time.tooltip')
        };
        this.chatbotNotificationsMaxTimeTooltip = {
            popoverMode: true,
            iconName: 'question_circle_o',
            placement: 'right',
            content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-max-time.tooltip')
        };
        this.optionFormatter = (processDefinitionNameOption) => {
            return get(processDefinitionNameOption, 'name', this.defaultSelection);
        };
    }
    ngOnInit() {
        this.chatbotProvidersForm = this.formBuilder.group({
            chatSessionIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout,
            chatUserIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout,
            chatContextVariablesProcessName: [],
            chatbotNotificationsIdleTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime,
            chatbotNotificationsMaxTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime,
            removePoweredByBmcHelix: RX_COGNITIVE_SERVICE.chatbot.systemSettings.removePoweredByBmcHelix
        });
        forkJoin({
            processDefinitionNameOptions: this.getProcessDefinitionNameOptions(),
            settingsData: this.rxCognitiveServiceService.getSystemSettings(keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings))
        }).subscribe((result) => {
            this.chatbotProcessDefinitionNameOptions = result.processDefinitionNameOptions;
            this.loadChatbotSystemSettings(result.settingsData.data);
        });
    }
    isFormDirty() {
        return this.chatbotProvidersForm.dirty;
    }
    getProcessDefinitionNameOptions() {
        return this.rxCognitiveServiceService.getChatbotProcessDefinitionNames().pipe(map$1((processDefinitionNames) => processDefinitionNames.sort().map((processDefinitionName) => {
            return {
                id: processDefinitionName,
                name: this.rxDefinitionNameService.getDisplayName(processDefinitionName)
            };
        })));
    }
    loadChatbotSystemSettings(settings) {
        forEach(settings, (setting) => {
            let settingValue;
            if (setting.name === RX_COGNITIVE_SERVICE.chatbot.chatContextVariablesProcessName) {
                settingValue = [this.chatbotProcessDefinitionNameOptions.find((process) => process.id === setting.value)];
            }
            else {
                settingValue = setting.value;
            }
            this.setFormFieldValue(setting.name, settingValue);
            this.initialChatbotProviderValues[setting.name] = settingValue;
        });
    }
    setFormFieldValue(name, value) {
        this.chatbotProvidersForm.controls[name].setValue(value);
    }
    setDefaultSessionIdleTimeout() {
        if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout !==
            this.chatbotProvidersForm.controls.chatSessionIdleTimeout.value) {
            this.setFormFieldValue('chatSessionIdleTimeout', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout);
            this.chatbotProvidersForm.markAsDirty();
        }
    }
    setDefaultUserIdleTimeout() {
        if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout !==
            this.chatbotProvidersForm.controls.chatUserIdleTimeout.value) {
            this.setFormFieldValue('chatUserIdleTimeout', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout);
            this.chatbotProvidersForm.markAsDirty();
        }
    }
    setDefaultChatbotNotificationsIdleTime() {
        if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime !==
            this.chatbotProvidersForm.controls.chatbotNotificationsIdleTime.value) {
            this.setFormFieldValue('chatbotNotificationsIdleTime', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime);
            this.chatbotProvidersForm.markAsDirty();
        }
    }
    setDefaultChatbotNotificationsMaxTime() {
        if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime !==
            this.chatbotProvidersForm.controls.chatbotNotificationsMaxTime.value) {
            this.setFormFieldValue('chatbotNotificationsMaxTime', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime);
            this.chatbotProvidersForm.markAsDirty();
        }
    }
    save() {
        const formValue = this.chatbotProvidersForm.getRawValue();
        const systemPropertyObservables = Object.keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings).reduce((result, settingName) => {
            var _a, _b;
            let settingValue = formValue[settingName];
            if (isArray(settingValue)) {
                settingValue = (_b = (_a = settingValue[0]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
            }
            if (!isEqual(this.initialChatbotProviderValues[settingName], settingValue)) {
                result.push(this.rxSystemConfigurationService.setConfiguration(settingName, settingValue));
            }
            return result;
        }, []);
        forkJoin(systemPropertyObservables).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.chatProviderSettingsSaved));
            this.initialChatbotProviderValues = formValue;
            this.chatbotProvidersForm.markAsPristine();
        });
    }
    isSaveButtonDisabled() {
        return this.chatbotProvidersForm.pristine || this.chatbotProvidersForm.invalid;
    }
    isSaveButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
}
CognitiveServiceChatbotComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceChatbotComponent, deps: [{ token: i1$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2.RxDefinitionNameService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceChatbotComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceChatbotComponent, selector: "rx-cognitive-service-chatbot", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0, template: "<form [formGroup]=\"chatbotProvidersForm\">\n  <adapt-accordion rx-id=\"accordion-chatbot-provider\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.chatbot.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"300\"\n          [max]=\"1200\"\n          [adaptRange]=\"[300, 1200]\"\n          rx-id=\"chatbot-provider-chat-session-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-session-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatSessionIdleTimeout\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-session-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultSessionIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"5\"\n          [max]=\"1200\"\n          [adaptRange]=\"[5, 1200]\"\n          rx-id=\"chatbot-provider-chat-user-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-user-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatUserIdleTimeout\"\n          [tooltip]=\"approverSelectionTooltip\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-user-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultUserIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <adapt-rx-select\n        rx-id=\"chat-context-variables-process-name\"\n        formControlName=\"chatContextVariablesProcessName\"\n        label=\"Chat context variables process name\"\n        [options]=\"chatbotProcessDefinitionNameOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        class=\"d-block form-group\"\n      ></adapt-rx-select>\n\n      <adapt-rx-control-label\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.remove-powered-by-bmc-helix.label'\n            | translate: { poweredByBmcHelix: 'Powered by BMC Helix' }\n        }}\"\n      ></adapt-rx-control-label>\n\n      <adapt-rx-switch\n        [formControl]=\"chatbotProvidersForm.controls.removePoweredByBmcHelix\"\n        rx-id=\"remove-powered-by-bmc-helix\"\n        [isLabelBefore]=\"false\"\n      ></adapt-rx-switch>\n    </adapt-accordion-tab>\n\n    <adapt-accordion rx-id=\"accordion-proactive-chatbot-notifications\">\n      <adapt-accordion-tab\n        title=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications.title' | translate\n        }}\"\n        isOpen=\"true\"\n      >\n        <div class=\"proactive-chatbot-notifications-idle-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"300\"\n            [max]=\"1200\"\n            [adaptRange]=\"[300, 1200]\"\n            rx-id=\"notifications-idle-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-idle-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsIdleTime\"\n            [tooltip]=\"chatbotNotificationsIdleTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-idle-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsIdleTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n\n        <div class=\"proactive-chatbot-notifications-max-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"120\"\n            [max]=\"3600\"\n            [adaptRange]=\"[120, 3600]\"\n            rx-id=\"notifications-max-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-max-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsMaxTime\"\n            [tooltip]=\"chatbotNotificationsMaxTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-max-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsMaxTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.chat-session-idle-timeout,.proactive-chatbot-notifications-idle-time,.proactive-chatbot-notifications-max-time{display:flex}.chat-session-idle-timeout adapt-button,.proactive-chatbot-notifications-idle-time adapt-button,.proactive-chatbot-notifications-max-time adapt-button{margin-top:1.5rem}adapt-rx-counter,adapt-rx-select{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceChatbotComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-chatbot',
                    templateUrl: './cognitive-service-chatbot.component.html',
                    styleUrls: ['./cognitive-service-chatbot.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2.RxDefinitionNameService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }] } });

class CognitiveServiceAdministrationCredentialsComponent {
    constructor(formBuilder, rxCognitiveServiceService, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, translateService) {
        this.formBuilder = formBuilder;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
    }
    ngOnInit() {
        this.cognitiveAdministrationCredentialsProvidersForm = this.formBuilder.group({
            cognitiveAdminPlatformApiKey: ''
        });
        this.loadSystemSettings();
    }
    isFormDirty() {
        return this.cognitiveAdministrationCredentialsProvidersForm.dirty;
    }
    loadSystemSettings() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey)
            .subscribe((settingsData) => {
            this.watsonAdminCredentialsData = JSON.parse(settingsData.value);
            this.loadCognitiveAdminCredentialsValues();
        });
    }
    getWatsonAdminCredentialsData(property) {
        return this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider][property] || '';
    }
    loadCognitiveAdminCredentialsValues() {
        let apiKeyValue = '';
        if (this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {
            apiKeyValue = this.getWatsonAdminCredentialsData(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey)
                ? RX_COGNITIVE_SERVICE.passwordMask
                : '';
        }
        this.cognitiveAdministrationCredentialsProvidersForm.controls.cognitiveAdminPlatformApiKey.setValue(apiKeyValue);
    }
    save() {
        const newApiKey = this.cognitiveAdministrationCredentialsProvidersForm.value.cognitiveAdminPlatformApiKey;
        const newCredentials = cloneDeep(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.payload);
        newCredentials[RX_COGNITIVE_SERVICE.credentialsProvider][RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey] = this.rxCognitiveServiceService.filterMaskPassword(newApiKey);
        this.rxSystemConfigurationService
            .setConfiguration(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey, JSON.stringify(newCredentials))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.cognitiveAdministrationCredentialsSaved));
            this.cognitiveAdministrationCredentialsProvidersForm.markAsPristine();
        });
    }
    isSaveButtonDisabled() {
        return (this.cognitiveAdministrationCredentialsProvidersForm.pristine ||
            this.cognitiveAdministrationCredentialsProvidersForm.invalid);
    }
    isSaveButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
}
CognitiveServiceAdministrationCredentialsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceAdministrationCredentialsComponent, deps: [{ token: i1$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2.RxCurrentUserService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceAdministrationCredentialsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceAdministrationCredentialsComponent, selector: "rx-cognitive-service-administration-credentials", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0, template: "<form [formGroup]=\"cognitiveAdministrationCredentialsProvidersForm\">\n  <adapt-accordion>\n    <adapt-accordion-tab\n      title=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-administration-credentials.title' | translate\n      }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"form-group\">\n        <adapt-rx-textfield\n          rx-id=\"platform-api-key\"\n          label=\"Platform API key\"\n          formControlName=\"cognitiveAdminPlatformApiKey\"\n          maxlength=\"254\"\n          required=\"true\"\n          [isPassword]=\"true\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </adapt-accordion-tab>\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceAdministrationCredentialsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-administration-credentials',
                    templateUrl: './cognitive-service-administration-credentials.component.html',
                    styleUrls: ['./cognitive-service-administration-credentials.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2.RxCurrentUserService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }] } });

class CognitiveServiceConnectionsComponent {
    constructor(rxCognitiveServiceService, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, rxJsonParserService, translateService) {
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.rxJsonParserService = rxJsonParserService;
        this.translateService = translateService;
        this.connectionInfo = RX_COGNITIVE_SERVICE.connections.payload;
        this.serviceDefinitions = RX_COGNITIVE_SERVICE.connections.serviceDefinitions;
        this.availableServicesList = [];
        this.connectionTestStatusesByServiceId = {};
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
        this.isFormFieldChanged = false;
        this.availableServices = {
            classification: true,
            discovery: true,
            toneAnalyzer: true
        };
    }
    ngOnInit() {
        this.rxSystemConfigurationService
            .queryConfiguration([
            RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,
            RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider,
            RX_COGNITIVE_SERVICE.connections.systemSettingKeys.translationServiceProvider,
            RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixPortalUrl,
            RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential
        ])
            .pipe(finalize(() => this.loadServices()))
            .subscribe(([cognitiveServiceCredential, classificationServiceProvider, translationServiceProvider, helixPortalUrl, helixServiceCredential]) => {
            this.loadCognitiveSystemSettings(cognitiveServiceCredential);
            if (classificationServiceProvider.value === MachineLearningProviderNames.Helix) {
                this.loadHelixCognitiveSystemSettings(helixServiceCredential);
                this.connectionInfo[helixPortalUrl.id] = helixPortalUrl.value;
            }
            this.loadClassificationServiceProvider(classificationServiceProvider);
            this.loadRealTimeTranslationProviders(translationServiceProvider);
        });
    }
    isFormDirty() {
        return this.isFormFieldChanged;
    }
    loadServices() {
        this.availableServicesList = transform(this.serviceDefinitions, (result, value, key) => {
            if (this.availableServices[key]) {
                result.push(key);
            }
        }, []);
    }
    loadClassificationServiceProvider(provider) {
        if (this.isNativeClassificationProvider) {
            this.availableServices[this.serviceDefinitions.classification.id] = false;
            this.availableServices[this.serviceDefinitions.serviceAccountCredentials.id] = true;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential)
                .subscribe((settingData) => {
                this.connectionInfo.serviceAccountCredentials = settingData.value;
            });
            return;
        }
        if (provider.value === MachineLearningProviderNames.Helix) {
            this.availableServices[this.serviceDefinitions.classification.id] = false;
            this.availableServices[this.serviceDefinitions.helixClassifier.id] = true;
        }
    }
    loadRealTimeTranslationProviders(settingsData) {
        const realTimeTranslationProvider = toLower(settingsData.value);
        if (realTimeTranslationProvider) {
            this.realTimeTranslationProvider = realTimeTranslationProvider;
            this.availableServices[this.serviceDefinitions[realTimeTranslationProvider].id] = true;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys[realTimeTranslationProvider])
                .subscribe((settingData) => {
                if (realTimeTranslationProvider === this.serviceDefinitions.google.id) {
                    this.connectionInfo.apiKey = settingData.value;
                }
                else if (realTimeTranslationProvider === this.serviceDefinitions.microsoft.id) {
                    this.connectionInfo = assign(this.connectionInfo, this.rxJsonParserService.tryParseJson(settingData.value, {}));
                }
            });
        }
    }
    loadHelixCognitiveSystemSettings(settingsData) {
        var _a, _b;
        const credentials = this.rxJsonParserService.tryParseJson(settingsData.value);
        this.connectionInfo.helixClassifierKey = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.accessKey) !== null && _a !== void 0 ? _a : '';
        this.connectionInfo.helixClassifierSecret = (_b = credentials === null || credentials === void 0 ? void 0 : credentials.secretKey) !== null && _b !== void 0 ? _b : '';
    }
    loadCognitiveSystemSettings(settingsData) {
        const credentials = JSON.parse(settingsData.value)[RX_COGNITIVE_SERVICE.credentialsProvider];
        if (credentials) {
            forIn(credentials, (value, key) => {
                this.connectionInfo[key] = credentials[key];
            });
        }
    }
    isConnectionTestStatusInvalid(form) {
        return (!(this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared) ||
            form.invalid ||
            form.pristine);
    }
    getConnectionTestPayload(serviceId, serviceForm) {
        const serviceDefinition = this.serviceDefinitions[serviceId];
        if (!serviceDefinition.isApiKeyTest) {
            const isGoogleServiceId = serviceId === this.serviceDefinitions.google.id;
            return {
                credential: isGoogleServiceId ? serviceForm.value[serviceDefinition.model] : JSON.stringify(serviceForm.value),
                resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingTranslationServiceCommand'
            };
        }
        // Get the fields that are supposed to be sent as credentials
        const editableFields = serviceDefinition.fields.filter((field) => !field.readonly);
        if (editableFields.length === 1) {
            // use the model name as the apiKey
            return {
                apiKey: serviceForm.value[serviceDefinition.model],
                serviceType: serviceDefinition.serviceType,
                resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'
            };
        }
        // If more than one field, username and passowrd are required to test the connection
        const [usernameField, passwordField] = editableFields.map((field) => field.name);
        return {
            userName: serviceForm.value[usernameField],
            password: serviceForm.value[passwordField],
            serviceType: serviceDefinition.serviceType,
            resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'
        };
    }
    resetConnectionTest(serviceId, form) {
        this.connectionTestStatus = ConnectionTestStatus.Unknown;
        this.isFormFieldChanged = form.dirty;
        this.connectionTestStatusesByServiceId[serviceId] = this.isConnectionTestStatusInvalid(form)
            ? ConnectionTestStatus.Invalid
            : ConnectionTestStatus.Unknown;
    }
    onTestConnection(serviceId, form) {
        const connectionTestPayload = this.getConnectionTestPayload(serviceId, form);
        this.rxCognitiveServiceService
            .testConnection(connectionTestPayload)
            .pipe(catchError((error) => {
            this.connectionTestStatusesByServiceId[serviceId] = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatusesByServiceId[serviceId] = ConnectionTestStatus.Passed;
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    save() {
        const settingsPayload = [];
        if (this.isNativeClassificationProvider &&
            this.connectionTestStatusesByServiceId[this.serviceDefinitions.serviceAccountCredentials.id] ===
                ConnectionTestStatus.Passed &&
            !(this.connectionTestStatusesByServiceId[this.serviceDefinitions.classification.id] ===
                ConnectionTestStatus.Passed ||
                this.connectionTestStatusesByServiceId[this.serviceDefinitions.discovery.id] === ConnectionTestStatus.Passed ||
                this.connectionTestStatusesByServiceId[this.serviceDefinitions.toneAnalyzer.id] ===
                    ConnectionTestStatus.Passed ||
                (this.realTimeTranslationProvider &&
                    this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===
                        ConnectionTestStatus.Passed))) {
            settingsPayload.push({
                name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential,
                value: JSON.stringify(JSON.parse(this.connectionInfo[this.serviceDefinitions.serviceAccountCredentials.id]))
            });
        }
        else {
            if (this.realTimeTranslationProvider &&
                this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===
                    ConnectionTestStatus.Passed) {
                const fields = this.serviceDefinitions[this.realTimeTranslationProvider].fields;
                settingsPayload.push({
                    name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys[this.realTimeTranslationProvider],
                    value: this.realTimeTranslationProvider === this.serviceDefinitions.google.id
                        ? this.connectionInfo[fields[0].name]
                        : JSON.stringify(transform(fields, (result, value) => {
                            const fieldName = value['name'];
                            return (result[fieldName] = this.connectionInfo[fieldName]);
                        }, {}))
                });
            }
            const cognitiveCredentials = transform(RX_COGNITIVE_SERVICE.connections.cognitiveServiceCredentialKeys, (result, value, key) => {
                if (this.connectionTestStatusesByServiceId[this.serviceDefinitions[key].id] === ConnectionTestStatus.Passed) {
                    return (result[value] = this.connectionInfo[value]);
                }
            }, {});
            if (!isEmpty(cognitiveCredentials)) {
                settingsPayload.push({
                    name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,
                    value: JSON.stringify({
                        [RX_COGNITIVE_SERVICE.credentialsProvider]: cognitiveCredentials
                    })
                });
            }
        }
        const { helixClassifier } = this.serviceDefinitions;
        if (helixClassifier && this.connectionTestStatusesByServiceId[helixClassifier.id] === ConnectionTestStatus.Passed) {
            settingsPayload.push({
                name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential,
                value: JSON.stringify({
                    accessKey: this.connectionInfo.helixClassifierKey,
                    secretKey: this.connectionInfo.helixClassifierSecret
                })
            });
        }
        forkJoin(settingsPayload.map((settingPayload) => this.rxSystemConfigurationService.setConfiguration(settingPayload.name, settingPayload.value))).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceConnectionSaved));
            this.connectionTestStatus = ConnectionTestStatus.Invalid;
            this.connectionTestStatusesByServiceId = {};
            this.isFormFieldChanged = false;
        });
    }
    isSaveButtonDisabled() {
        return this.connectionTestStatus !== ConnectionTestStatus.Passed;
    }
    isSaveButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
}
CognitiveServiceConnectionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceConnectionsComponent, deps: [{ token: RxCognitiveServiceService }, { token: i2.RxCurrentUserService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i3.RxJsonParserService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceConnectionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceConnectionsComponent, selector: "rx-cognitive-service-connections", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext", isNativeClassificationProvider: "isNativeClassificationProvider" }, ngImport: i0, template: "<adapt-accordion multiselect=\"true\">\n  <form *ngFor=\"let serviceId of availableServicesList\" #serviceForm=\"ngForm\">\n    <adapt-accordion-tab\n      [title]=\"serviceDefinitions[serviceId].title | translate\"\n      [isOpen]=\"serviceDefinitions[serviceId].isOpen\"\n      [attr.rx-id]=\"serviceDefinitions[serviceId].id\"\n      class=\"mb-3\"\n    >\n      <div *ngFor=\"let field of serviceDefinitions[serviceId].fields\" class=\"form-group\">\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'password'\"\n          maxlength=\"254\"\n          [isPassword]=\"true\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          [disabled]=\"field.readonly\"\n          *ngIf=\"field.type === 'text'\"\n          [pattern]=\"field.pattern\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textarea\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'json'\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          rows=\"6\"\n          class=\"d-block\"\n          [rxJson]=\"{\n            errorMessage: field.jsonValidatorErrorMessage\n          }\"\n        ></adapt-rx-textarea>\n      </div>\n\n      <rx-connection-tester\n        class=\"mt-1\"\n        [status]=\"connectionTestStatusesByServiceId[serviceId]\"\n        (testConnection)=\"onTestConnection(serviceId, serviceForm)\"\n      ></rx-connection-tester>\n    </adapt-accordion-tab>\n  </form>\n\n  <button\n    adapt-button\n    rx-id=\"save-button\"\n    btn-type=\"primary\"\n    class=\"mt-4\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    *ngIf=\"isSaveButtonVisible()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n</adapt-accordion>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i3.RxJsonValidator, selector: "[rxJson]", inputs: ["rxJson"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceConnectionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-connections',
                    templateUrl: './cognitive-service-connections.component.html',
                    styleUrls: ['./cognitive-service-connections.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxCognitiveServiceService }, { type: i2.RxCurrentUserService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i3.RxJsonParserService }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }], isNativeClassificationProvider: [{
                type: Input
            }] } });

class CognitiveServiceOnboardComponent extends RxModalClass {
    constructor(dockedPanelContext, rxCognitiveServiceService, rxCommandFactoryService, rxModalService, rxNotificationService, rxRecordInstanceDataPageService, rxSystemConfigurationService, translateService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
        this.injector = injector;
        this.supportedCognitiveProviders = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList;
        this.cognitiveProvider = [RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0]];
        this.regions = RX_COGNITIVE_SERVICE.regionsList.map((region) => (Object.assign(Object.assign({}, region), { name: this.translateService.instant(region.name) })));
        this.providerServices = {};
        this.defaultServiceId = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0].id;
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.optionFormatter = (regionNameOption) => {
            return get(regionNameOption, 'name', this.defaultSelection);
        };
    }
    ngOnInit() {
        super.ngOnInit();
        const params = {
            recorddefinition: RX_CHATBOT.chatbotLocales.recordDefinitionName,
            queryExpression: `'${RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId}'="${RX_CHATBOT.defaultChatbotId}"`,
            propertySelection: [
                RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId,
                RX_CHATBOT.chatbotLocales.fieldIds.providerPassword
            ]
        };
        forkJoin({
            cognitiveServiceCredential: this.rxSystemConfigurationService.getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential),
            cognitiveServiceRegions: this.rxSystemConfigurationService.getConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey),
            botLocales: this.rxRecordInstanceDataPageService.post({
                params
            })
        }).subscribe((result) => {
            this.providerServices = RX_COGNITIVE_SERVICE.onboard.providerServices[this.defaultServiceId];
            this.loadCredentialAndRegions(JSON.parse(result.cognitiveServiceCredential.value), JSON.parse(result.cognitiveServiceRegions.value));
            this.setBotLocaleConversation(result.botLocales.data);
            this.loadServiceProviderApiKey();
        });
    }
    isDirty() {
        return this.ownCognitivePoviderConfigurationForm.dirty;
    }
    loadCredentialAndRegions(credentials, serviceRegions) {
        const cognitiveServiceRegions = serviceRegions[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]];
        forEach(this.providerServices, (serviceConfig, serviceId) => {
            serviceConfig.apiKey = get(credentials[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]], serviceConfig.apiKeyPropertyName, '');
            if (get(cognitiveServiceRegions, serviceId)) {
                const regionValue = this.regions.find((region) => region.id === cognitiveServiceRegions[serviceId]);
                serviceConfig.region = [regionValue];
            }
        });
    }
    setBotLocaleConversation(locales) {
        const localeKey = RX_COGNITIVE_SERVICE.onboard.providerServices[this.defaultServiceId].conversation.id;
        this.providerServices[localeKey].apiKey = get(locales[0], RX_CHATBOT.chatbotLocales.fieldIds.providerPassword, '');
    }
    loadServiceProviderApiKey() {
        forEach(this.providerServices, (serviceConfig) => {
            serviceConfig.isEnabled = serviceConfig.hasApiKey = Boolean(serviceConfig.apiKey);
        });
    }
    isOnboardButtonDisabled() {
        return (this.isOnboardingInProgress ||
            !some(this.providerServices, 'isEnabled') ||
            this.ownCognitivePoviderConfigurationForm.pristine ||
            this.ownCognitivePoviderConfigurationForm.invalid);
    }
    close() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
    onboard() {
        this.isOnboardingInProgress = true;
        const onboardSettings = {};
        onboardSettings[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]] = transform(this.providerServices, (result, value) => {
            if (!value.hasApiKey && value.isEnabled) {
                result[value.apiKeyPropertyName] = value.apiKey;
                result[value.regionPropertyName] = get(value.region, '0.id', '');
            }
        }, {});
        this.rxCommandFactoryService
            .forResourceType('com.bmc.arsys.rx.application.cognitive.command.ConfigureOwnCognitiveProvidersCommand')
            .execute({ ownCognitiveProvidersConfiguration: JSON.stringify(onboardSettings) })
            .pipe(catchError((err) => {
            this.isOnboardingInProgress = false;
            return throwError(err);
        }))
            .subscribe(() => {
            this.loadServiceProviderApiKey();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceOnboarded));
            this.ownCognitivePoviderConfigurationForm.form.markAsPristine();
            this.isOnboardingInProgress = false;
        });
    }
    keepKeyValueOrder() {
        return 0;
    }
}
CognitiveServiceOnboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceOnboardComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: RxCognitiveServiceService }, { token: i2.RxCommandFactoryService }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceOnboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceOnboardComponent, selector: "rx-cognitive-service-onboard", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, viewQueries: [{ propertyName: "ownCognitivePoviderConfigurationForm", first: true, predicate: ["ownCognitivePoviderConfigurationForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form #ownCognitivePoviderConfigurationForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        <adapt-rx-select\n          name=\"cognitiveProvider\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-provider.label' | translate }}\"\n          rx-id=\"cognitive-provider\"\n          [options]=\"supportedCognitiveProviders\"\n          [optionFormatter]=\"optionFormatter\"\n          [(ngModel)]=\"cognitiveProvider\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-sm-12\">\n        <div class=\"mt-2 mb-2\">\n          {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.instructions.label' | translate }}\n        </div>\n\n        <div class=\"card p-3 mb-3\" *ngFor=\"let service of providerServices | keyvalue: keepKeyValueOrder\">\n          <adapt-rx-switch\n            class=\"form-group\"\n            [name]=\"service.key + 'ProviderEnable'\"\n            [attr.rx-id]=\"'enable-cognitive-service-provider-' + service.key\"\n            [label]=\"service.value.switchLabel | translate\"\n            [(ngModel)]=\"service.value.isEnabled\"\n            [disabled]=\"service.value.hasApiKey\"\n            [tooltip]=\"\n              service.value.tooltipText\n                ? {\n                    iconName: 'question_circle_o',\n                    content: service.value.tooltipText | translate,\n                    placement: 'bottom',\n                    popoverMode: true\n                  }\n                : null\n            \"\n          ></adapt-rx-switch>\n\n          <adapt-rx-select\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.region.label' | translate }}\"\n            emptyOption=\"true\"\n            [name]=\"service.key + 'ProviderRegion'\"\n            [attr.rx-id]=\"'cognitive-service-provider-region-' + service.key\"\n            [options]=\"regions\"\n            [optionFormatter]=\"optionFormatter\"\n            [(ngModel)]=\"service.value.region\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-textfield\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label' | translate }}\"\n            maxlength=\"254\"\n            required=\"true\"\n            [isPassword]=\"true\"\n            [name]=\"service.key + 'ProviderApiKey'\"\n            [attr.rx-id]=\"'cognitive-service-provider-' + service.key + '-api-key'\"\n            [(ngModel)]=\"service.value.apiKey\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-textfield>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer align-items-end\">\n  <div>\n    <button\n      adapt-button\n      btn-type=\"primary\"\n      type=\"button\"\n      class=\"mr-2\"\n      activeText=\"Onboarding...\"\n      rx-id=\"onboarding-button\"\n      [adaptInlineLoader]=\"isOnboardingInProgress\"\n      [disabled]=\"isOnboardButtonDisabled()\"\n      (click)=\"onboard()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.button.onboard.label' | translate }}\n    </button>\n    <button\n      adapt-button\n      btn-type=\"secondary\"\n      type=\"button\"\n      rx-id=\"close-button\"\n      (click)=\"close()\"\n      [disabled]=\"isOnboardingInProgress\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</div>\n", components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe, "keyvalue": i8.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceOnboardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-onboard',
                    templateUrl: './cognitive-service-onboard.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: RxCognitiveServiceService }, { type: i2.RxCommandFactoryService }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }], ownCognitivePoviderConfigurationForm: [{
                type: ViewChild,
                args: ['ownCognitivePoviderConfigurationForm', { read: NgForm, static: true }]
            }] } });

class CognitiveServiceRegionsComponent {
    constructor(formBuilder, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, translateService) {
        this.formBuilder = formBuilder;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
        this.settings = RX_COGNITIVE_SERVICE.cognitiveServiceRegions.settings;
        this.regions = RX_COGNITIVE_SERVICE.regionsList.map((region) => (Object.assign(Object.assign({}, region), { name: this.translateService.instant(region.name) })));
    }
    ngOnInit() {
        this.cognitiveServiceRegionConfigurationForm = this.formBuilder.group({
            naturalLanguageClassifier: [],
            conversation: [],
            search: [],
            toneAnalyzer: []
        });
        this.loadSystemSettings();
    }
    isFormDirty() {
        return this.cognitiveServiceRegionConfigurationForm.dirty;
    }
    loadSystemSettings() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey)
            .subscribe((settingsData) => {
            let watsonServiceRegionsData = JSON.parse(settingsData.value);
            if (watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {
                watsonServiceRegionsData = watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider];
                this.settings.forEach((setting) => {
                    if (!isEmpty(watsonServiceRegionsData[setting.id])) {
                        const value = this.regions.find((region) => region.id === watsonServiceRegionsData[setting.id]);
                        this.cognitiveServiceRegionConfigurationForm.controls[setting.id].setValue([value]);
                    }
                });
            }
        });
    }
    optionFormatter(regionNameOption) {
        return regionNameOption.name;
    }
    save() {
        const formValue = this.cognitiveServiceRegionConfigurationForm.getRawValue();
        const configurations = mapValues(formValue, function (value) {
            return get(value, '[0].id', '');
        });
        this.rxSystemConfigurationService
            .setConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey, JSON.stringify({ WATSON: configurations }))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceRegionConfigurationSaved));
            this.cognitiveServiceRegionConfigurationForm.markAsPristine();
        });
    }
    isSaveButtonDisabled() {
        return this.cognitiveServiceRegionConfigurationForm.pristine;
    }
    isSaveButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
}
CognitiveServiceRegionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegionsComponent, deps: [{ token: i1$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceRegionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceRegionsComponent, selector: "rx-cognitive-service-regions", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0, template: "<form [formGroup]=\"cognitiveServiceRegionConfigurationForm\">\n  <adapt-accordion rx-id=\"accordion-cognitive-service-region\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <adapt-alert\n        class=\"mb-4\"\n        [config]=\"{\n          type: 'inline',\n          variant: 'warning',\n          content: 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.warning' | translate\n        }\"\n      ></adapt-alert>\n\n      <div\n        *ngFor=\"let setting of settings\"\n        [attr.rx-id]=\"'select-block-cognitive-service-region--' + setting.id\"\n        class=\"form-group\"\n      >\n        <adapt-rx-select\n          emptyOption=\"true\"\n          [formControlName]=\"setting.id\"\n          [label]=\"setting.name\"\n          [options]=\"regions\"\n          [optionFormatter]=\"optionFormatter\"\n          class=\"d-block\"\n        ></adapt-rx-select>\n      </div>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-regions',
                    templateUrl: './cognitive-service-regions.component.html',
                    styleUrls: ['./cognitive-service-regions.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }] } });

class CognitiveServiceSummarizationComponent {
    constructor(rxCurrentUserService, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, formBuilder, translateService) {
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.formBuilder = formBuilder;
        this.translateService = translateService;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
    }
    ngOnInit() {
        this.isAdministratorOverlayConfigured =
            this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared;
        this.testConnection()
            .pipe(catchError((error) => {
            this.isSummarizationServiceConfigured = false;
            return EMPTY;
        }))
            .subscribe(() => {
            this.isSummarizationServiceConfigured = true;
        });
        this.summarizationConfigurationForm = this.formBuilder.group({
            enableSummarization: { value: 0, disabled: this.isEnableSummarizationCheckboxDisabled() },
            summarizationPercentage: ''
        });
        this.loadSystemSettings();
    }
    isFormDirty() {
        return this.summarizationConfigurationForm.dirty;
    }
    loadSystemSettings() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_COGNITIVE_SERVICE.summarization.systemSettingsKey)
            .subscribe((settingsData) => {
            const summarizationData = JSON.parse(settingsData.value);
            this.summarizationConfigurationForm.setValue(summarizationData);
        });
    }
    save() {
        const formValue = this.summarizationConfigurationForm.getRawValue();
        formValue.enableSummarization = formValue.enableSummarization ? 1 : 0;
        const configurations = mapValues(formValue, (value) => value);
        this.rxSystemConfigurationService
            .setConfiguration(RX_COGNITIVE_SERVICE.summarization.systemSettingsKey, JSON.stringify(configurations))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.summarizationConfigurationSaved));
            this.connectionTestStatus = ConnectionTestStatus.Invalid;
            this.summarizationConfigurationForm.markAsPristine();
        });
    }
    isSaveButtonDisabled() {
        return !this.summarizationConfigurationForm.controls.enableSummarization.value &&
            this.summarizationConfigurationForm.dirty
            ? false
            : this.connectionTestStatus !== ConnectionTestStatus.Passed;
    }
    isEnableSummarizationCheckboxDisabled() {
        return !(this.rxCurrentUserService.isAdministrator() &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
    isConnectionTestStatusInvalid() {
        return (!this.isAdministratorOverlayConfigured ||
            this.summarizationConfigurationForm.invalid ||
            this.summarizationConfigurationForm.pristine ||
            !this.summarizationConfigurationForm.controls.enableSummarization.value);
    }
    resetConnectionTest() {
        this.connectionTestStatus = this.isConnectionTestStatusInvalid()
            ? ConnectionTestStatus.Invalid
            : ConnectionTestStatus.Unknown;
        if (this.summarizationConfigurationForm.controls.enableSummarization.value) {
            this.summarizationConfigurationForm.get('summarizationPercentage').enable();
        }
        else {
            this.summarizationConfigurationForm.get('summarizationPercentage').disable();
        }
    }
    testConnection() {
        return this.rxCognitiveServiceService.testConnection({
            resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingSummarizationServiceCommand'
        });
    }
    onTestConnection() {
        this.testConnection()
            .pipe(catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
}
CognitiveServiceSummarizationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceSummarizationComponent, deps: [{ token: i2.RxCurrentUserService }, { token: RxCognitiveServiceService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i1$3.FormBuilder }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceSummarizationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceSummarizationComponent, selector: "rx-cognitive-service-summarization", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0, template: "<adapt-alert\n  *ngIf=\"isSummarizationServiceConfigured === false\"\n  [config]=\"{ content: 'Summarization service has not been configured.', type: 'inline', variant: 'warning' }\"\n></adapt-alert>\n\n<form [formGroup]=\"summarizationConfigurationForm\" *ngIf=\"isSummarizationServiceConfigured\">\n  <adapt-accordion rx-id=\"accordion-summarization-configuration\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.summarization.title' | translate }}\"\n    >\n      <adapt-rx-switch\n        class=\"form-group\"\n        rx-id=\"enable-summarization-service\"\n        formControlName=\"enableSummarization\"\n        label=\"Enable summarization service\"\n        (ngModelChange)=\"resetConnectionTest()\"\n      ></adapt-rx-switch>\n\n      <adapt-rx-counter\n        class=\"d-block form-group\"\n        adaptRange\n        rx-id=\"summarization-percentage\"\n        [min]=\"1\"\n        [max]=\"50\"\n        label=\"Summarization %\"\n        required=\"true\"\n        [formControl]=\"summarizationConfigurationForm.controls.summarizationPercentage\"\n        [step]=\"1\"\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: 'com.bmc.arsys.rx.client.admin.cognitive-service.summarization.percentage.tooltip' | translate,\n          placement: 'right',\n          popoverMode: true\n        }\"\n        (ngModelChange)=\"resetConnectionTest()\"\n      ></adapt-rx-counter>\n\n      <rx-connection-tester\n        class=\"mt-1\"\n        *ngIf=\"isAdministrator\"\n        [status]=\"connectionTestStatus\"\n        (testConnection)=\"onTestConnection()\"\n      ></rx-connection-tester>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isAdministratorOverlayConfigured\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceSummarizationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-summarization',
                    templateUrl: './cognitive-service-summarization.component.html',
                    styleUrls: ['./cognitive-service-summarization.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxCurrentUserService }, { type: RxCognitiveServiceService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i1$3.FormBuilder }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }] } });

class CognitiveServiceToneAnalyzerComponent {
    constructor(formBuilder, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, translateService) {
        this.formBuilder = formBuilder;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxNotificationService = rxNotificationService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
    }
    ngOnInit() {
        this.toneAnalyzerConfigurationForm = this.formBuilder.group({
            toneScoreThreshold: 0.5
        });
        this.loadSystemSettings();
    }
    isFormDirty() {
        return this.toneAnalyzerConfigurationForm.dirty;
    }
    loadSystemSettings() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_COGNITIVE_SERVICE.toneAnalyzer.systemSettingsKey)
            .subscribe((settingsData) => {
            this.toneAnalyzerConfigurationForm.controls[settingsData.name].setValue(settingsData.value);
        });
    }
    save() {
        this.rxSystemConfigurationService
            .setConfiguration(RX_COGNITIVE_SERVICE.toneAnalyzer.systemSettingsKey, this.toneAnalyzerConfigurationForm.value.toneScoreThreshold)
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.toneAnalyzerConfigurationSaved));
            this.toneAnalyzerConfigurationForm.markAsPristine();
        });
    }
    isSaveButtonDisabled() {
        return this.toneAnalyzerConfigurationForm.pristine || this.toneAnalyzerConfigurationForm.invalid;
    }
    isSaveButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
}
CognitiveServiceToneAnalyzerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceToneAnalyzerComponent, deps: [{ token: i1$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2.RxNotificationService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceToneAnalyzerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceToneAnalyzerComponent, selector: "rx-cognitive-service-tone-analyzer", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0, template: "<form [formGroup]=\"toneAnalyzerConfigurationForm\">\n  <adapt-accordion>\n    <adapt-accordion-tab title=\"Tone analyzer configuration\" isOpen=\"true\">\n      <adapt-rx-counter\n        adaptRange\n        label=\"Tone score threshold\"\n        required=\"true\"\n        class=\"d-block form-group\"\n        [max]=\"1\"\n        [min]=\"0.5\"\n        adaptFloatNumber\n        [formControl]=\"toneAnalyzerConfigurationForm.controls.toneScoreThreshold\"\n        [step]=\"0.1\"\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: popoverContent,\n          placement: 'right',\n          popoverMode: true\n        }\"\n      ></adapt-rx-counter>\n\n      <ng-template #popoverContent>\n        <div\n          style=\"white-space: pre-wrap\"\n          [innerHTML]=\"\n            'com.bmc.arsys.rx.client.admin.cognitive-service.tone-analyzer.tone-score-threshold.tooltip' | translate\n          \"\n        ></div>\n      </ng-template>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$1.AdaptFloatNumberValidatorDirective, selector: "[adaptFloatNumber][ngModel], [adaptFloatNumber][formControl]", inputs: ["adaptFloatNumberMessageFn"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceToneAnalyzerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-service-tone-analyzer',
                    templateUrl: './cognitive-service-tone-analyzer.component.html',
                    styleUrls: ['./cognitive-service-tone-analyzer.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2.RxNotificationService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; }, propDecorators: { isAdministrator: [{
                type: Input
            }], currentOverlayContext: [{
                type: Input
            }] } });

class CognitiveServiceAdminComponent extends BaseViewComponent {
    constructor(rxModalService, rxCognitiveServiceService, rxCurrentUserService, rxOverlayService, rxSystemConfigurationService, translateService) {
        super();
        this.rxModalService = rxModalService;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxOverlayService = rxOverlayService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.translateService = translateService;
        this.cognitiveServices = RX_COGNITIVE_SERVICE.cognitiveServicesList.map((service) => (Object.assign(Object.assign({}, service), { name: this.translateService.instant(service.name) })));
        this.selectedService = [this.cognitiveServices[2]];
        this.supportedCognitiveServices = [];
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        this.currentOverlayContext = this.rxOverlayService.getCurrentOverlayContext();
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.selectedConfiguration.isFormDirty()
        });
        this.rxSystemConfigurationService
            .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider)
            .subscribe((settingsData) => {
            let cognitiveServices = this.cognitiveServices;
            if (RX_COGNITIVE_SERVICE.nativeProvider === settingsData.value) {
                this.isNativeClassificationProvider = true;
                cognitiveServices = reject(cognitiveServices, {
                    id: RX_COGNITIVE_SERVICE.cognitiveServicesList[1].id
                });
            }
            this.supportedCognitiveServices = cognitiveServices;
        });
    }
    optionFormatter(option) {
        return option.name;
    }
    getSelectedServiceId() {
        return this.selectedService[0].id;
    }
    isOwnCognitiveProviderButtonVisible() {
        return (this.isAdministrator &&
            this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&
            !this.currentOverlayContext.isShared);
    }
    openOnboardServicesPanel() {
        this.rxModalService
            .openDockedPanel({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.label'),
            content: CognitiveServiceOnboardComponent,
            size: 'lg'
        })
            .catch(noop);
    }
}
CognitiveServiceAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceAdminComponent, deps: [{ token: i1.RxModalService }, { token: RxCognitiveServiceService }, { token: i2.RxCurrentUserService }, { token: i2.RxOverlayService }, { token: i2.RxSystemConfigurationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveServiceAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceAdminComponent, selector: "rx-admin-cognitive-service", viewQueries: [{ propertyName: "selectedConfiguration", first: true, predicate: ["selectedConfiguration"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\" {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.header.title' | translate }} \">\n  <div class=\"mb-4 d-flex align-items-baseline\" *ngIf=\"isOwnCognitiveProviderButtonVisible()\">\n    <adapt-button\n      class=\"text-truncate\"\n      rx-id=\"onboard-services-button\"\n      btn-type=\"secondary\"\n      (click)=\"openOnboardServicesPanel()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service-component.button.title' | translate }}\n    </adapt-button>\n\n    <adapt-icon\n      name=\"question_circle_o\"\n      class=\"ml-2\"\n      placement=\"bottom\"\n      maxWidth=\"400\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.client.admin.cognitive-service-component.tooltip' | translate\"\n    >\n    </adapt-icon>\n  </div>\n\n  <div class=\"mb-4 align-items-end\">\n    <adapt-rx-select\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.configure.label' | translate }}\"\n      [options]=\"supportedCognitiveServices\"\n      [(ngModel)]=\"selectedService\"\n      [optionFormatter]=\"optionFormatter\"\n    >\n    </adapt-rx-select>\n  </div>\n\n  <div class=\"row pb-4\">\n    <div [ngSwitch]=\"getSelectedServiceId()\" class=\"col-12\">\n      <rx-cognitive-service-chatbot\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[0].id\"\n        #selectedConfiguration\n      >\n      </rx-cognitive-service-chatbot>\n\n      <rx-cognitive-service-administration-credentials\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[1].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-administration-credentials>\n\n      <rx-cognitive-service-connections\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        [isNativeClassificationProvider]=\"isNativeClassificationProvider\"\n        *ngSwitchCase=\"cognitiveServices[2].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-connections>\n\n      <rx-cognitive-service-summarization\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[3].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-summarization>\n\n      <rx-cognitive-service-regions\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[4].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-regions>\n\n      <rx-cognitive-service-tone-analyzer\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[5].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-tone-analyzer>\n    </div>\n  </div>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: CognitiveServiceChatbotComponent, selector: "rx-cognitive-service-chatbot", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceAdministrationCredentialsComponent, selector: "rx-cognitive-service-administration-credentials", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceConnectionsComponent, selector: "rx-cognitive-service-connections", inputs: ["isAdministrator", "currentOverlayContext", "isNativeClassificationProvider"] }, { type: CognitiveServiceSummarizationComponent, selector: "rx-cognitive-service-summarization", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceRegionsComponent, selector: "rx-cognitive-service-regions", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceToneAnalyzerComponent, selector: "rx-cognitive-service-tone-analyzer", inputs: ["isAdministrator", "currentOverlayContext"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-cognitive-service',
                    templateUrl: './cognitive-service.component.html',
                    styleUrls: ['./cognitive-service.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: RxCognitiveServiceService }, { type: i2.RxCurrentUserService }, { type: i2.RxOverlayService }, { type: i2.RxSystemConfigurationService }, { type: i4.TranslateService }]; }, propDecorators: { selectedConfiguration: [{
                type: ViewChild,
                args: ['selectedConfiguration']
            }] } });

class CognitiveServiceRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        this.rxViewComponentRegistryService.register({
            type: 'rx-admin-cognitive-service',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveServiceAdminComponent),
            name: 'Cognitive service',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
CognitiveServiceRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
CognitiveServiceRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegistrationModule, declarations: [CognitiveServiceAdminComponent,
        CognitiveServiceAdministrationCredentialsComponent,
        CognitiveServiceChatbotComponent,
        CognitiveServiceConnectionsComponent,
        CognitiveServiceOnboardComponent,
        CognitiveServiceRegionsComponent,
        CognitiveServiceSummarizationComponent,
        CognitiveServiceToneAnalyzerComponent], imports: [AdaptAccordionModule, i1$1.AdaptAlertModule, AdaptBusyModule,
        AdaptButtonModule,
        AdaptIconModule,
        AdaptPopoverModule,
        AdaptRxCheckboxModule,
        AdaptRxCounterModule,
        AdaptRxSelectModule,
        AdaptRxSwitchModule,
        AdaptRxTextareaModule,
        AdaptRxTextfieldModule,
        AdaptRxValidatorsModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        RxConnectionTesterModule,
        RxJsonModule,
        TranslateModule,
        AdaptRxLabelModule] });
CognitiveServiceRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegistrationModule, imports: [[
            AdaptAccordionModule,
            AdaptAlertModule.forRoot(),
            AdaptBusyModule,
            AdaptButtonModule,
            AdaptIconModule,
            AdaptPopoverModule,
            AdaptRxCheckboxModule,
            AdaptRxCounterModule,
            AdaptRxSelectModule,
            AdaptRxSwitchModule,
            AdaptRxTextareaModule,
            AdaptRxTextfieldModule,
            AdaptRxValidatorsModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RxConnectionTesterModule,
            RxJsonModule,
            TranslateModule,
            AdaptRxLabelModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveServiceRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        CognitiveServiceAdminComponent,
                        CognitiveServiceAdministrationCredentialsComponent,
                        CognitiveServiceChatbotComponent,
                        CognitiveServiceConnectionsComponent,
                        CognitiveServiceOnboardComponent,
                        CognitiveServiceRegionsComponent,
                        CognitiveServiceSummarizationComponent,
                        CognitiveServiceToneAnalyzerComponent
                    ],
                    imports: [
                        AdaptAccordionModule,
                        AdaptAlertModule.forRoot(),
                        AdaptBusyModule,
                        AdaptButtonModule,
                        AdaptIconModule,
                        AdaptPopoverModule,
                        AdaptRxCheckboxModule,
                        AdaptRxCounterModule,
                        AdaptRxSelectModule,
                        AdaptRxSwitchModule,
                        AdaptRxTextareaModule,
                        AdaptRxTextfieldModule,
                        AdaptRxValidatorsModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        RxConnectionTesterModule,
                        RxJsonModule,
                        TranslateModule,
                        AdaptRxLabelModule
                    ],
                    entryComponents: [CognitiveServiceAdminComponent, CognitiveServiceOnboardComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

var CognitiveTrainingTabNames;
(function (CognitiveTrainingTabNames) {
    CognitiveTrainingTabNames["DataSets"] = "dataSets";
    CognitiveTrainingTabNames["TestResults"] = "testResults";
})(CognitiveTrainingTabNames || (CognitiveTrainingTabNames = {}));
var CognitiveTrainingDataSourceNames;
(function (CognitiveTrainingDataSourceNames) {
    CognitiveTrainingDataSourceNames["InnovationSuiteDataSource"] = "innovationSuiteDataSource";
    CognitiveTrainingDataSourceNames["FileDataSource"] = "fileDataSource";
})(CognitiveTrainingDataSourceNames || (CognitiveTrainingDataSourceNames = {}));
var CognitiveTrainingEvaluationNames;
(function (CognitiveTrainingEvaluationNames) {
    CognitiveTrainingEvaluationNames["AutoClassificationTrainingAndEvaluation"] = "autoClassificationTrainingAndEvaluation";
    CognitiveTrainingEvaluationNames["ChatbotEvaluation"] = "chatbotEvaluation";
})(CognitiveTrainingEvaluationNames || (CognitiveTrainingEvaluationNames = {}));

const defaultTrainDataPercentage = 80;
const RX_COGNITIVE_TRAINING = {
    settings: {
        sections: [
            {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation.title',
                evaluationName: CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation,
                isExpanded: true
            },
            {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-evaluation-ibm.watson.assistant.title',
                evaluationName: CognitiveTrainingEvaluationNames.ChatbotEvaluation,
                isExpanded: false
            }
        ],
        tabs: {
            [CognitiveTrainingTabNames.DataSets]: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-sets.title',
                name: CognitiveTrainingTabNames.DataSets,
                deletionConfirmationMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-set-delete-confirmation.message',
                deletionSuccessMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-set-deleted.message',
                recordDefinitionName: 'Cognitive Service Data Set Descriptor'
            },
            [CognitiveTrainingTabNames.TestResults]: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results.title',
                name: CognitiveTrainingTabNames.TestResults,
                deletionConfirmationMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results-delete-confirmation.message',
                deletionSuccessMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results-deleted.message',
                recordDefinitionName: 'Cognitive Service Test Results'
            }
        },
        evaluations: {
            [CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation]: {
                name: CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation,
                queryExpression: "'1732' = 0 AND '61001' = ",
                serviceProviderQueryExpresion: " AND '1820' = "
            },
            [CognitiveTrainingEvaluationNames.ChatbotEvaluation]: {
                name: CognitiveTrainingEvaluationNames.ChatbotEvaluation,
                queryExpression: "'1732' = 1 AND '61001' = "
            }
        },
        trainingTypes: {
            [MachineLearningProviderNames.Watson]: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-ibm-watson.title',
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-training.ibm-watson-conversation.title',
                name: MachineLearningProviderNames.Watson,
                value: 0,
                uniqueValue: 0
            },
            [MachineLearningProviderNames.Native]: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-bmc-native-google.title',
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-service.bmc-native.title',
                name: 'native',
                value: 0,
                uniqueValue: 1
            },
            [MachineLearningProviderNames.Helix]: {
                title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-helix-ade.title',
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-ade.title',
                name: MachineLearningProviderNames.Helix,
                value: 0,
                uniqueValue: 2
            },
            chatbot: {
                value: 1
            }
        },
        dataSourceTypes: {
            [CognitiveTrainingDataSourceNames.InnovationSuiteDataSource]: {
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.bmc-helix-platform-data-set.label',
                name: CognitiveTrainingDataSourceNames.InnovationSuiteDataSource,
                resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.InnovationSuiteDataSource',
                dataSourceHistory: {
                    layout: {
                        queryExpressionBasic: {
                            filtersJson: null,
                            basicFilters: null
                        },
                        textFields: [],
                        categoryFields: []
                    },
                    resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.InnovationSuiteDataSource',
                    recordDefinitionName: '',
                    queryExpression: '',
                    trainingDataMapper: {
                        resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.CategorizationTrainingDataMapper',
                        textFields: [],
                        categoryFields: []
                    },
                    timeCriteria: null,
                    isScheduleEnabled: false
                }
            },
            [CognitiveTrainingDataSourceNames.FileDataSource]: {
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-data-set.label',
                name: CognitiveTrainingDataSourceNames.FileDataSource,
                resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.FileDataSource',
                dataSourceHistory: {
                    resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.FileDataSource',
                    fileName: ''
                }
            }
        },
        commands: {
            classify: 'com.bmc.arsys.rx.application.cognitive.command.AutomaticCategorySuggestionCommand',
            train: 'com.bmc.arsys.rx.application.cognitive.command.TrainCognitiveServiceCommand',
            test: 'com.bmc.arsys.rx.application.cognitive.command.TestChatbotCommand'
        },
        trainingStatuses: {
            untrained: {
                label: 'Untrained',
                value: 0
            },
            training: {
                label: 'Training',
                value: 1
            },
            trained: {
                label: 'Trained',
                value: 2
            },
            failed: {
                label: 'Failed',
                value: 3
            },
            pendingRetraining: {
                label: 'Pending retraining',
                value: 4
            },
            inProgress: {
                label: 'In progress',
                value: 5
            },
            created: {
                label: 'Created',
                value: 6
            }
        },
        evaluationStatuses: {
            queued: {
                label: 'Queued',
                value: 0
            },
            running: {
                label: 'Running',
                value: 10
            },
            completed: {
                label: 'Completed',
                value: 20
            },
            failed: {
                label: 'Failed',
                value: 30
            }
        },
        nativeProviderTrainingLocales: ['de', 'en', 'es', 'fr', 'it', 'pt'],
        watsonProviderTrainingLocales: ['ar', 'de', 'en', 'es', 'fr', 'it', 'ja', 'ko', 'nl', 'pt', 'zh-cn', 'zh-tw'],
        defaultTrainingLocale: 'en',
        dataSetDefinitionName: 'Cognitive Service Data Set Descriptor',
        testResultsDefinitionName: 'Cognitive Service Test Results',
        fieldIds: {
            modifiedDate: 6,
            evaluationStatus: 7,
            instanceId: 379,
            dataSetID: 1730,
            dataSetName: 1731,
            trainingType: 1732,
            machineLearningError: 1733,
            error: 1733,
            dataSource: 1734,
            dateLastSubmitted: 1735,
            dateLastTrained: 1736,
            locale: 1737,
            dataSourceHistory: 1738,
            developerId: 1739,
            newDataSetId: 1740,
            useSeedTrainingData: 1741,
            resultCsv: 1795,
            serviceInstanceGuid: 1742,
            trainDataPercent: 1796,
            testDataPercent: 1797,
            trainingDataCsv: 1798,
            testDataCsv: 1799,
            accuracy: 1806,
            precision: 1807,
            recall: 1808,
            fScore: 1809,
            dateLastTested: 1811,
            chatbotName: 1816,
            classificationServiceProvider: 1820,
            dataSetLocale: 1829,
            bundleId: 61001
        },
        defaultTrainDataPercentage: defaultTrainDataPercentage,
        defaultTestDataPercentage: 100 - defaultTrainDataPercentage
    }
};

class RxCognitiveTrainingService {
    constructor(rxSystemConfigurationService, rxRecordInstanceDataPageService) {
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
    }
    getClassificationServiceProvider() {
        return this.rxSystemConfigurationService.getConfiguration('classificationServiceProvider');
    }
    getChatbotLocalesById(id) {
        return this.rxRecordInstanceDataPageService.post({
            params: {
                recorddefinition: RX_CHATBOT.chatbotLocales.recordDefinitionName,
                propertySelection: values(RX_CHATBOT.chatbotLocales.fieldIds).join(','),
                queryExpression: `'${RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId}'="${id}"`
            }
        });
    }
}
RxCognitiveTrainingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingService, deps: [{ token: i2.RxSystemConfigurationService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveTrainingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxSystemConfigurationService }, { type: i3$2.RxRecordInstanceDataPageService }]; } });

class RxCognitiveTrainingUtilsService {
    getDataSourceType(dataSourceHistory) {
        let dataSourceType;
        if (dataSourceHistory.fileName) {
            dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource;
        }
        else if (dataSourceHistory.recordDefinitionName) {
            dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource;
        }
        return dataSourceType;
    }
    getTrainingLocales(trainingTypeValue) {
        let result;
        if (trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[MachineLearningProviderNames.Native].value) {
            result = RX_COGNITIVE_TRAINING.settings.nativeProviderTrainingLocales;
        }
        else if (trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[MachineLearningProviderNames.Watson].value) {
            result = RX_COGNITIVE_TRAINING.settings.watsonProviderTrainingLocales;
        }
        return result;
    }
}
RxCognitiveTrainingUtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingUtilsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RxCognitiveTrainingUtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingUtilsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCognitiveTrainingUtilsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class ChatbotDataSetBladeComponent extends RxModalClass {
    constructor(dockedPanelContext, rxChatbotDefinitionDataPageService, rxCognitiveTrainingService, rxCognitiveTrainingUtilsService, rxRecordInstanceService, translateService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxChatbotDefinitionDataPageService = rxChatbotDefinitionDataPageService;
        this.rxCognitiveTrainingService = rxCognitiveTrainingService;
        this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.translateService = translateService;
        this.injector = injector;
        this.chatbotDefinitionPickerOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
            definitionType: RxDefinitionPickerType.Chatbot,
            required: true
        };
        this.csvFileUploadMode = UploaderMode.Auto;
        this.chatbotDefinitionName$ = new BehaviorSubject('');
        this.chatbotDefinitions$ = this.rxChatbotDefinitionDataPageService
            .get({
            headers: {
                'default-bundle-scope': ''
            },
            params: {
                propertySelection: ['chatbotName', 'id', 'enableTranslation']
            }
        })
            .pipe(map$1((dataPage) => dataPage.data));
        this.chatbotDefinition$ = combineLatest([
            this.chatbotDefinitionName$,
            this.chatbotDefinitions$
        ]).pipe(map$1(([chatbotDefinitionName, chatbotDefinitions]) => find(chatbotDefinitions, { chatbotName: chatbotDefinitionName }) || null), shareReplay(1));
        this.isChatbotTranslationEnabled$ = this.chatbotDefinition$.pipe(map$1((chatbotDefinition) => (chatbotDefinition === null || chatbotDefinition === void 0 ? void 0 : chatbotDefinition.enableTranslation) === 1));
        this.chatbotLocaleOptions$ = this.chatbotDefinition$.pipe(switchMap((chatbotDefinition) => chatbotDefinition
            ? this.rxCognitiveTrainingService
                .getChatbotLocalesById(chatbotDefinition.id)
                .pipe(map$1((dataPageResult) => dataPageResult.data.map((localeFieldIds) => localeFieldIds[RX_CHATBOT.chatbotLocales.fieldIds.locale])))
            : of([])));
        this.optionFormatter = (opt) => opt;
        this.contextData = this.dockedPanelContext.getData().data;
    }
    ngOnInit() {
        super.ngOnInit();
        this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value);
        const dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
        this.dataSet = {
            dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
            description: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description),
            csvFile: null,
            chatbotLocale: [this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale)],
            chatbotDefinitionName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName),
            locale: [
                this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale) ||
                    RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
            ],
            lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
            status: find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                value: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status)
            })
        };
        if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
            this.rxRecordInstanceService
                .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                .subscribe((blob) => {
                this.dataSet.csvFile = [
                    {
                        data: assign(blob, {
                            name: dataSource
                        }),
                        downloadURL: this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.recordInstance.id),
                        isUploading: true
                    }
                ];
            });
        }
        if (this.dataSet.chatbotDefinitionName) {
            this.chatbotDefinitionName$.next(this.dataSet.chatbotDefinitionName);
        }
    }
    isDirty() {
        return this.chatbotDataSetForm.dirty;
    }
    ngOnDestroy() {
        this.chatbotDefinitionName$.complete();
    }
    onChatbotDefinitionNameChange(chatbotDefinitionName) {
        this.dataSet.chatbotLocale = [];
        this.dataSet.locale = [];
        this.chatbotDefinitionName$.next(chatbotDefinitionName);
    }
    onSaveClick() {
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
            resourceType: this.contextData.dataSourceType.resourceType,
            fileName: this.dataSet.csvFile && this.dataSet.csvFile[0].data.name
        }));
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
        this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale, this.dataSet.locale[0] || null);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment());
        if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName, this.dataSet.chatbotDefinitionName);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.chatbotLocale[0]);
            this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value);
            this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
        else if (this.contextData.editDataSet) {
            if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
            }
            this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
    }
    onCloseClick() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
ChatbotDataSetBladeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotDataSetBladeComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i2.RxChatbotDefinitionDataPageService }, { token: RxCognitiveTrainingService }, { token: RxCognitiveTrainingUtilsService }, { token: i3$2.RxRecordInstanceService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ChatbotDataSetBladeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotDataSetBladeComponent, selector: "rx-chatbot-data-set-blade", viewQueries: [{ propertyName: "chatbotDataSetForm", first: true, predicate: ["chatbotDataSetForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form #chatbotDataSetForm=\"ngForm\">\n    <div class=\"d-flex justify-content-between m-0 mb-4\" *ngIf=\"contextData.editDataSet\">\n      <label class=\"form-control-label\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n      </label>\n\n      <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      required\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <rx-definition-picker\n      class=\"form-group d-block\"\n      name=\"chatbot-name\"\n      rx-id=\"chatbot-name-field\"\n      required\n      [options]=\"chatbotDefinitionPickerOptions\"\n      [(ngModel)]=\"dataSet.chatbotDefinitionName\"\n      (ngModelChange)=\"onChatbotDefinitionNameChange($event)\"\n    >\n    </rx-definition-picker>\n\n    <div *ngIf=\"chatbotDefinition$ | async\">\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"chatbot-locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.chatbot-locale.label' | translate\n        }}\"\n        rx-id=\"chatbot-locale-field\"\n        required\n        [options]=\"(chatbotLocaleOptions$ | async) || []\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.chatbotLocale\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        *ngIf=\"isChatbotTranslationEnabled$ | async\"\n        name=\"locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.data-set-locale.label' | translate\n        }}\"\n        rx-id=\"locale-field\"\n        required\n        [options]=\"localeOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.locale\"\n      >\n      </adapt-rx-select>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"chatbotDataSetForm.pristine || chatbotDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe, "date": i8.DatePipe, "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ChatbotDataSetBladeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-chatbot-data-set-blade',
                    templateUrl: './chatbot-data-set-blade.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i2.RxChatbotDefinitionDataPageService }, { type: RxCognitiveTrainingService }, { type: RxCognitiveTrainingUtilsService }, { type: i3$2.RxRecordInstanceService }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { chatbotDataSetForm: [{
                type: ViewChild,
                args: ['chatbotDataSetForm', { static: true, read: NgForm }]
            }] } });

class FileDataSetBladeComponent extends RxModalClass {
    constructor(dockedPanelContext, rxCognitiveTrainingUtilsService, rxRecordInstanceService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.injector = injector;
        this.csvFileUploadMode = UploaderMode.Auto;
        this.optionFormatter = (opt) => opt;
        this.contextData = this.dockedPanelContext.getData().data;
    }
    ngOnInit() {
        super.ngOnInit();
        this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(this.contextData.trainingType.value);
        const dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
        this.dataSet = {
            dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
            description: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description),
            csvFile: null,
            locale: [
                this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale) ||
                    RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
            ],
            testDataPercent: this.contextData.isNewDataSet
                ? RX_COGNITIVE_TRAINING.settings.defaultTestDataPercentage
                : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
            trainDataPercent: this.contextData.isNewDataSet
                ? RX_COGNITIVE_TRAINING.settings.defaultTrainDataPercentage
                : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
            status: find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                value: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status)
            }),
            lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
            lastTrainedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
            machineLearningError: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.machineLearningError)
        };
        if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
            this.rxRecordInstanceService
                .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                .subscribe((blob) => {
                this.dataSet.csvFile = [
                    {
                        data: assign(blob, {
                            name: dataSource
                        }),
                        downloadURL: this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.recordInstance.id),
                        isUploading: true
                    }
                ];
            });
        }
    }
    isDirty() {
        return this.fileDataSetForm.dirty;
    }
    onTrainDataPercentCounterChange(trainDataPercent) {
        this.dataSet.testDataPercent = 100 - trainDataPercent;
    }
    onTestDataPercentCounterChange(testDataPercent) {
        this.dataSet.trainDataPercent = 100 - testDataPercent;
    }
    onSaveClick() {
        this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
            resourceType: this.contextData.dataSourceType.resourceType,
            fileName: this.dataSet.csvFile[0].data.name
        }));
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.locale[0]);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment());
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, this.dataSet.testDataPercent);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, this.dataSet.trainDataPercent);
        if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
            this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, this.contextData.trainingType.uniqueValue);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, this.contextData.trainingType.value);
            this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
        else if (this.contextData.editDataSet) {
            if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
            }
            this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
    }
    onCloseClick() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
FileDataSetBladeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FileDataSetBladeComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: RxCognitiveTrainingUtilsService }, { token: i3$2.RxRecordInstanceService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
FileDataSetBladeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FileDataSetBladeComponent, selector: "rx-file-data-set-blade", viewQueries: [{ propertyName: "fileDataSetForm", first: true, predicate: ["fileDataSetForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form #fileDataSetForm=\"ngForm\">\n    <div *ngIf=\"contextData.editDataSet\">\n      <div class=\"d-flex justify-content-between m-0 mb-3\">\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.status.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.status.label }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastTrainedDate | date: 'medium' }}</div>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"dataSet.machineLearningError\"\n        [config]=\"{\n          content: dataSet.machineLearningError,\n          type: 'inline',\n          variant: 'danger'\n        }\"\n      ></adapt-alert>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [disabled]=\"contextData.editDataSet\"\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.chatbots.description.title' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"training-type\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label' | translate }}\"\n      rx-id=\"training-type-field\"\n      required\n      disabled\n      [(ngModel)]=\"contextData.trainingType.displayName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      required\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      name=\"locale\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale-field\"\n      required\n      [options]=\"localeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"dataSet.locale\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"training-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label' | translate }}\"\n      rx-id=\"training-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTrainDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.trainDataPercent\"\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"test-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label' | translate }}\"\n      rx-id=\"test-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTestDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.testDataPercent\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"fileDataSetForm.pristine || fileDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }], pipes: { "translate": i4.TranslatePipe, "date": i8.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FileDataSetBladeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-file-data-set-blade',
                    templateUrl: './file-data-set-blade.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: RxCognitiveTrainingUtilsService }, { type: i3$2.RxRecordInstanceService }, { type: i0.Injector }]; }, propDecorators: { fileDataSetForm: [{
                type: ViewChild,
                args: ['fileDataSetForm', { static: true, read: NgForm }]
            }] } });

class InteractiveEvaluationBladeComponent extends RxModalClass {
    constructor(dockedPanelContext, rxCommandFactoryService, rxRecordInstanceDataPageService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.injector = injector;
        this.classifications = [];
        this.evaluationText = '';
        this.trainedDataSetOptions = [];
        this.optionFormatter = (opt) => opt.name;
        this.contextData = this.dockedPanelContext.getData();
    }
    ngOnInit() {
        super.ngOnInit();
        this.getDataSetList();
    }
    isDirty() {
        return this.interactiveEvaluationForm.dirty;
    }
    getDataSetList() {
        const params = {
            recorddefinition: RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName,
            sortBy: RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,
            queryExpression: this.contextData.evaluation.queryExpression +
                JSON.stringify(this.contextData.bundleId) +
                this.contextData.evaluation.serviceProviderQueryExpresion +
                this.contextData.trainingType.uniqueValue,
            propertySelection: [
                RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,
                RX_RECORD_DEFINITION.coreFieldIds.status
            ].join(',')
        };
        this.busy = this.rxRecordInstanceDataPageService.post({ params }).subscribe((result) => {
            this.trainedDataSetOptions = chain(result.data)
                .filter((dataSet) => dataSet[RX_RECORD_DEFINITION.coreFieldIds.status] ===
                RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                dataSet[RX_RECORD_DEFINITION.coreFieldIds.status] ===
                    RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value)
                .map((dataSet) => ({
                id: this.trainedDataSetOptions.length + 1,
                name: dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]
            }))
                .value();
        });
    }
    classify() {
        this.rxCommandFactoryService
            .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.classify)
            .execute({
            textToClassify: this.evaluationText,
            trainingDataSetName: this.contextData.bundleId + ':' + this.trainedDataSet[0].name
        })
            .subscribe((classifications) => {
            this.classifications = classifications;
        });
    }
    displayClassification(classification) {
        return `${classification.className} ${classification.confidence.toFixed(2)}`;
    }
    onCloseClick() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
InteractiveEvaluationBladeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: InteractiveEvaluationBladeComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i2.RxCommandFactoryService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
InteractiveEvaluationBladeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: InteractiveEvaluationBladeComponent, selector: "rx-interactive-evaluation-blade", viewQueries: [{ propertyName: "interactiveEvaluationForm", first: true, predicate: ["interactiveEvaluationForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form #interactiveEvaluationForm=\"ngForm\">\n    <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n    <div class=\"d-flex flex-row justify-content-between\">\n      <adapt-rx-select\n        class=\"form-group d-block w-100\"\n        name=\"trained-data-set\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.trained-data-set.label'\n            | translate\n        }}\"\n        rx-id=\"trained-data-set-field\"\n        required\n        [options]=\"trainedDataSetOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"trainedDataSet\"\n      >\n      </adapt-rx-select>\n\n      <button\n        class=\"d-icon-refresh_adapt\"\n        type=\"button\"\n        rx-id=\"refresh-button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        (click)=\"getDataSetList()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.refresh.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"evaluation-text\"\n      label=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.text.label' | translate\n      }}\"\n      rx-id=\"evaluation-text-field\"\n      required\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: 'Separate text entries for multiple fields with a comma.',\n        placement: 'right',\n        popoverMode: true\n      }\"\n      [(ngModel)]=\"evaluationText\"\n    >\n    </adapt-rx-textfield>\n\n    <button\n      type=\"button\"\n      rx-id=\"classify-button\"\n      adapt-button\n      btn-type=\"primary\"\n      [disabled]=\"interactiveEvaluationForm.invalid\"\n      (click)=\"classify()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation.classify.label' | translate }}\n    </button>\n\n    <div *ngIf=\"classifications\">\n      <hr />\n\n      <div class=\"card card-well mb-2\" *ngFor=\"let classification of classifications; let index = index\">\n        {{ displayClassification(classification) }}\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: InteractiveEvaluationBladeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-interactive-evaluation-blade',
                    templateUrl: './interactive-evaluation-blade.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i2.RxCommandFactoryService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i0.Injector }]; }, propDecorators: { interactiveEvaluationForm: [{
                type: ViewChild,
                args: ['interactiveEvaluationForm', { static: true, read: NgForm }]
            }] } });

class RxRecordDataSetExpressionConfigurator extends RxExpressionConfigurator {
    constructor() {
        super(...arguments);
        this.commonDataDictionary$ = of([
            {
                label: 'Keywords',
                children: [
                    {
                        label: 'Current user',
                        icon: 'd-icon-dollar',
                        expression: `$USER$`
                    },
                    {
                        label: 'NULL',
                        icon: 'd-icon-dollar',
                        expression: '$NULL$',
                        hidden: true
                    },
                    {
                        label: 'Time stamp',
                        icon: 'd-icon-dollar',
                        expression: '$TIMESTAMP$'
                    }
                ]
            }
        ]);
    }
}

class RecordDataSetBladeComponent extends RxModalClass {
    constructor(dockedPanelContext, rxCognitiveTrainingUtilsService, rxDefinitionNameService, rxExpressionEditorService, rxRecordDefinitionCacheService, rxRecordInstanceService, translateService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxExpressionEditorService = rxExpressionEditorService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.translateService = translateService;
        this.injector = injector;
        this.csvFileUploadMode = UploaderMode.Auto;
        this.recordDefinitionPickerOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.record-definition-field.label'),
            definitionType: RxDefinitionPickerType.Record,
            required: true
        };
        this.filterModeOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filters.label'),
            items: [
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.basic.label'),
                    value: RecordGridFilterMode.Basic
                },
                {
                    name: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.expression.label'),
                    value: RecordGridFilterMode.Expression
                }
            ]
        };
        this.recordDefinitionName$ = new BehaviorSubject('');
        this.recordDefinition$ = this.recordDefinitionName$.pipe(switchMap((recordDefinitionName) => recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)), shareReplay(1));
        this.fieldOptions$ = this.recordDefinition$.pipe(map$1((recordDefinition) => recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.fieldDefinitions.map((fieldDefinition) => pick(fieldDefinition, ['name', 'id'])).sort((a, b) => a.name.localeCompare(b.name))), shareReplay(1));
        this.optionFormatter = (opt) => opt;
        this.fieldOptionsFormatter = (opt) => opt.name;
        this.contextData = this.dockedPanelContext.getData().data;
    }
    ngOnInit() {
        super.ngOnInit();
        this.expressionConfigurator = new RxRecordDataSetExpressionConfigurator();
        this.expressionConfigurator.configureForProperty({
            propertyPath: 'queryExpression',
            operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All),
            dataDictionary$: this.recordDefinition$.pipe(withLatestFrom(this.expressionConfigurator.commonDataDictionary$), map$1(([recordDefinition, commonDataDictionary]) => [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filter-by.label'),
                    children: [
                        {
                            label: this.rxDefinitionNameService.getDisplayName(recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.name),
                            children: recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.fieldDefinitions.map((field) => ({
                                label: field.name,
                                icon: 'd-icon-field_text',
                                expression: `'${field.id}'`
                            }))
                        }
                    ]
                },
                commonDataDictionary[0]
            ]))
        });
        this.queryExpressionOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.expression.label'),
            dataDictionary$: this.expressionConfigurator.getDataDictionary('queryExpression'),
            operators: this.expressionConfigurator.getOperators()
        };
        this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(this.contextData.trainingType.value);
        const dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
        this.dataSet = {
            dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
            description: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description),
            csvFile: null,
            locale: [
                this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale) ||
                    RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
            ],
            useSeedTrainingData: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.useSeedTrainingData),
            testDataPercent: this.contextData.isNewDataSet
                ? RX_COGNITIVE_TRAINING.settings.defaultTestDataPercentage
                : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
            trainDataPercent: this.contextData.isNewDataSet
                ? RX_COGNITIVE_TRAINING.settings.defaultTrainDataPercentage
                : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
            status: find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                value: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status)
            }),
            lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
            lastTrainedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
            machineLearningError: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.machineLearningError)
        };
        let dataSourceHistory = JSON.parse(this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
        if (dataSourceHistory) {
            dataSourceHistory.layout = JSON.parse(dataSourceHistory.layout);
            dataSourceHistory.layout.categoryFields = map(dataSourceHistory.layout.categoryFields, (categoryField) => pick(categoryField, ['name', 'id']));
            dataSourceHistory.layout.textFields = map(dataSourceHistory.layout.textFields, (textField) => pick(textField, ['name', 'id']));
            dataSourceHistory.layout.queryExpressionBasic = {
                filtersJson: JSON.stringify(dataSourceHistory.layout.queryExpressionBasic.filtersJson),
                basicFilters: dataSourceHistory.layout.queryExpressionBasic.basicFilters
            };
        }
        else {
            dataSourceHistory = this.contextData.dataSourceType.dataSourceHistory;
        }
        this.dataSet.dataSourceHistory = dataSourceHistory;
        this.dataSet.filterMode = dataSourceHistory.queryExpression
            ? RecordGridFilterMode.Expression
            : RecordGridFilterMode.Basic;
        if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
            this.rxRecordInstanceService
                .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                .subscribe((blob) => {
                this.dataSet.csvFile = [
                    {
                        data: assign(blob, {
                            name: dataSource
                        }),
                        downloadURL: this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.recordInstance.id),
                        isUploading: true
                    }
                ];
            });
        }
        if (this.dataSet.dataSourceHistory.recordDefinitionName) {
            this.recordDefinitionName$.next(this.dataSet.dataSourceHistory.recordDefinitionName);
        }
    }
    isDirty() {
        return this.recordDataSetForm.dirty;
    }
    ngOnDestroy() {
        this.recordDefinitionName$.complete();
    }
    openExpressionEditor() {
        this.rxExpressionEditorService
            .openEditor({
            property: {
                path: 'queryExpression',
                value: this.dataSet.dataSourceHistory.queryExpression,
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filter-expression.label')
            },
            expressionConfigurator: this.expressionConfigurator,
            legend: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                    icon: 'd-icon-dollar'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                    icon: 'd-icon-arrow_right_square_input'
                }
            ]
        })
            .subscribe((expression) => {
            this.dataSet.dataSourceHistory.queryExpression = expression.value;
        });
    }
    isBasicFilterMode() {
        return this.dataSet.filterMode === RecordGridFilterMode.Basic;
    }
    isExpressionFilterMode() {
        return this.dataSet.filterMode === RecordGridFilterMode.Expression;
    }
    onRecordDefinitionNameChange(recordDefinitionName) {
        this.dataSet.filterMode = RecordGridFilterMode.Basic;
        this.dataSet.dataSourceHistory.layout.queryExpressionBasic = {
            filtersJson: null,
            basicFilters: null
        };
        this.dataSet.dataSourceHistory.queryExpression = null;
        this.dataSet.dataSourceHistory.layout.textFields = [];
        this.dataSet.dataSourceHistory.layout.categoryFields = [];
        this.recordDefinitionName$.next(recordDefinitionName);
    }
    onTrainDataPercentCounterChange(trainDataPercent) {
        this.dataSet.testDataPercent = 100 - trainDataPercent;
    }
    onTestDataPercentCounterChange(testDataPercent) {
        this.dataSet.trainDataPercent = 100 - testDataPercent;
    }
    onFilterModeChange() {
        this.dataSet.dataSourceHistory.layout.queryExpressionBasic = {
            filtersJson: null,
            basicFilters: null
        };
        this.dataSet.dataSourceHistory.queryExpression = '';
    }
    onSaveClick() {
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
        this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment());
        this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.locale[0]);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, this.dataSet.testDataPercent);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, this.dataSet.trainDataPercent);
        this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
            layout: JSON.stringify({
                queryExpressionBasic: {
                    filtersJson: JSON.parse(this.dataSet.dataSourceHistory.layout.queryExpressionBasic.filtersJson),
                    basicFilters: this.dataSet.dataSourceHistory.layout.queryExpressionBasic.basicFilters
                },
                textFields: this.dataSet.dataSourceHistory.layout.textFields,
                categoryFields: this.dataSet.dataSourceHistory.layout.categoryFields
            }),
            resourceType: this.contextData.dataSourceType.resourceType,
            recordDefinitionName: this.dataSet.dataSourceHistory.recordDefinitionName,
            queryExpression: this.dataSet.dataSourceHistory.queryExpression,
            trainingDataMapper: {
                resourceType: this.dataSet.dataSourceHistory.trainingDataMapper.resourceType,
                textFields: map(this.dataSet.dataSourceHistory.layout.textFields, 'id'),
                categoryFields: map(this.dataSet.dataSourceHistory.layout.categoryFields, 'id')
            },
            timeCriteria: this.dataSet.dataSourceHistory.timeCriteria,
            isScheduleEnabled: this.dataSet.dataSourceHistory.isScheduleEnabled
        }));
        if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, this.contextData.trainingType.uniqueValue);
            this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, this.contextData.trainingType.value);
            this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
        else if (this.contextData.editDataSet) {
            if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                this.contextData.recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
            }
            this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(() => {
                this.dockedPanelContext.close('save');
            });
        }
    }
    onCloseClick() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
RecordDataSetBladeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RecordDataSetBladeComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: RxCognitiveTrainingUtilsService }, { token: i2.RxDefinitionNameService }, { token: i4$1.RxExpressionEditorService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i3$2.RxRecordInstanceService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
RecordDataSetBladeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordDataSetBladeComponent, selector: "rx-record-data-set-blade", viewQueries: [{ propertyName: "recordDataSetForm", first: true, predicate: ["recordDataSetForm"], descendants: true, read: NgForm }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form #recordDataSetForm=\"ngForm\">\n    <div *ngIf=\"contextData.editDataSet\">\n      <div class=\"d-flex justify-content-between m-0 mb-3\">\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.status.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.status.label }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastTrainedDate | date: 'medium' }}</div>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"dataSet.machineLearningError\"\n        [config]=\"{\n          content: dataSet.machineLearningError,\n          type: 'inline',\n          variant: 'danger'\n        }\"\n      ></adapt-alert>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [disabled]=\"contextData.editDataSet\"\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"training-type\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label' | translate }}\"\n      rx-id=\"training-type-field\"\n      required\n      disabled\n      [(ngModel)]=\"contextData.trainingType.displayName\"\n    >\n    </adapt-rx-textfield>\n\n    <span class=\"form-group d-block\" *ngIf=\"dataSet.useSeedTrainingData\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set.seed-data-required.label' | translate }}\n    </span>\n\n    <span class=\"form-group d-block\" *ngIf=\"!dataSet.useSeedTrainingData\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set.no-seed-data-required.label' | translate }}\n    </span>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      name=\"locale\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale-field\"\n      required\n      [options]=\"localeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"dataSet.locale\"\n    >\n    </adapt-rx-select>\n\n    <rx-definition-picker\n      class=\"form-group d-block\"\n      name=\"record-definition-name\"\n      rx-id=\"record-definition-name-field\"\n      required\n      [options]=\"recordDefinitionPickerOptions\"\n      [(ngModel)]=\"dataSet.dataSourceHistory.recordDefinitionName\"\n      (ngModelChange)=\"onRecordDefinitionNameChange($event)\"\n    >\n    </rx-definition-picker>\n\n    <div *ngIf=\"recordDefinition$ | async\">\n      <rx-group-button-form-control\n        class=\"form-group d-block\"\n        name=\"filter-mode\"\n        rx-id=\"filter-mode-field\"\n        [options]=\"filterModeOptions\"\n        (ngModelChange)=\"onFilterModeChange()\"\n        [(ngModel)]=\"dataSet.filterMode\"\n      >\n      </rx-group-button-form-control>\n\n      <div *ngIf=\"isBasicFilterMode()\">\n        <rx-record-grid-filter-select-control\n          class=\"form-group d-block\"\n          name=\"filters\"\n          rx-id=\"filters-field\"\n          [options]=\"{ primaryRecordDefinition: recordDefinition$ | async }\"\n          [(ngModel)]=\"dataSet.dataSourceHistory.layout.queryExpressionBasic\"\n        >\n        </rx-record-grid-filter-select-control>\n      </div>\n\n      <div *ngIf=\"isExpressionFilterMode()\">\n        <rx-expression-form-control\n          class=\"form-group d-block\"\n          name=\"query-expression\"\n          rx-id=\"query-expression-field\"\n          [options]=\"queryExpressionOptions\"\n          (events)=\"openExpressionEditor()\"\n          [(ngModel)]=\"dataSet.dataSourceHistory.queryExpression\"\n        >\n        </rx-expression-form-control>\n      </div>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"text-fields\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.text-fields.label' | translate\n        }}\"\n        rx-id=\"text-fields-field\"\n        required\n        multiple=\"true\"\n        [options]=\"fieldOptions$ | async\"\n        [optionFormatter]=\"fieldOptionsFormatter\"\n        [(ngModel)]=\"dataSet.dataSourceHistory.layout.textFields\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"category-fields\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.category-fields.label' | translate\n        }}\"\n        rx-id=\"category-fields-field\"\n        required\n        multiple=\"true\"\n        [options]=\"fieldOptions$ | async\"\n        [optionFormatter]=\"fieldOptionsFormatter\"\n        [(ngModel)]=\"dataSet.dataSourceHistory.layout.categoryFields\"\n      >\n      </adapt-rx-select>\n    </div>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"training-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label' | translate }}\"\n      rx-id=\"training-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTrainDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.trainDataPercent\"\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"test-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label' | translate }}\"\n      rx-id=\"test-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTestDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.testDataPercent\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"recordDataSetForm.pristine || recordDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i4$1.GroupButtonFormControlComponent, selector: "rx-group-button-form-control", inputs: ["options"] }, { type: i7.RecordGridFilterSelectControlComponent, selector: "rx-record-grid-filter-select-control", inputs: ["options"] }, { type: i4$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }], pipes: { "translate": i4.TranslatePipe, "date": i8.DatePipe, "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RecordDataSetBladeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-record-data-set-blade',
                    templateUrl: './record-data-set-blade.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: RxCognitiveTrainingUtilsService }, { type: i2.RxDefinitionNameService }, { type: i4$1.RxExpressionEditorService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i3$2.RxRecordInstanceService }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { recordDataSetForm: [{
                type: ViewChild,
                args: ['recordDataSetForm', { read: NgForm }]
            }] } });

class CognitiveTrainingRecordGridComponent {
    constructor(rxBundleCacheService, rxCommandFactoryService, rxCognitiveTrainingUtilsService, rxCurrentUserService, rxDefinitionNameService, rxJsonParserService, rxModalService, rxNotificationService, rxRecordInstanceDataPageService, rxRecordInstanceService, translateService) {
        this.rxBundleCacheService = rxBundleCacheService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxJsonParserService = rxJsonParserService;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.translateService = translateService;
        this.fileDataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes[CognitiveTrainingDataSourceNames.FileDataSource];
        this.innovationSuiteDataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes[CognitiveTrainingDataSourceNames.InnovationSuiteDataSource];
        this.bundleId = this.rxBundleCacheService.bundleId;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
    }
    ngOnInit() {
        this.trainingType.displayName = this.translateService.instant(this.trainingType.displayName);
        const availableActionButtons = {
            [CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation]: {
                dataSets: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.train-and-test.label'),
                        style: 'tertiary',
                        iconCls: 'play_o',
                        disabled: () => this.isDataSetActionButtonDisabled(),
                        actions: [
                            {
                                name: () => {
                                    this.trainDataSet(head(this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                }
                            }
                        ]
                    }
                ],
                testResults: []
            },
            [CognitiveTrainingEvaluationNames.ChatbotEvaluation]: {
                dataSets: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test.label'),
                        style: 'tertiary',
                        iconCls: 'play_o',
                        disabled: () => !this.isAdministrator || this.cognitiveTrainingRecordGrid.api.getSelectedRows().length !== 1,
                        actions: [
                            {
                                name: () => {
                                    this.testDataSet(head(this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                }
                            }
                        ]
                    }
                ]
            },
            common: {
                dataSets: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                        style: 'tertiary',
                        icon: 'pencil',
                        disabled: () => this.isChatbotDataSetEditButtonDisabled(),
                        actions: [
                            {
                                name: () => {
                                    this.editDataSet(head(this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                }
                            }
                        ]
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.copy.label'),
                        style: 'tertiary',
                        icon: 'files_copy_o',
                        disabled: () => !this.isAdministrator || this.cognitiveTrainingRecordGrid.api.getSelectedRows().length !== 1,
                        actions: [
                            {
                                name: () => {
                                    this.copyDataSet(head(this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                }
                            }
                        ]
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        disabled: () => !this.isAdministrator,
                        actions: [
                            {
                                name: () => {
                                    this.delete();
                                }
                            }
                        ]
                    }
                ],
                testResults: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        disabled: () => this.isTestResultsDeletionRestricted(),
                        actions: [
                            {
                                name: () => {
                                    this.delete();
                                }
                            }
                        ]
                    }
                ]
            }
        };
        const availableColumns = {
            [CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation]: {
                dataSets: [
                    {
                        index: 2,
                        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.status),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label')
                    },
                    {
                        index: 3,
                        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.description'),
                        visible: false
                    },
                    {
                        index: 4,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-source.label'),
                        visible: false,
                        cellTemplate: this.dataSourceHistoryNameCellTemplate
                    },
                    {
                        index: 6,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label')
                    },
                    {
                        index: 8,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.locale),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.locale.label'),
                        visible: false
                    },
                    {
                        index: 11,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.train-data-percent.label')
                    },
                    {
                        index: 12,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test-data-percent.label')
                    },
                    {
                        index: 13,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.classification-service-provider.label'),
                        visible: true
                    }
                ],
                testResults: [
                    {
                        index: 6,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label'),
                        clickable: true,
                        actions: [
                            {
                                name: (previousActionResult, lastActionRow) => this.downloadTrainingData(lastActionRow)
                            }
                        ]
                    }
                ]
            },
            [CognitiveTrainingEvaluationNames.ChatbotEvaluation]: {
                dataSets: [
                    {
                        index: 2,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
                        visible: true,
                        cellTemplate: this.chatbotNameCellTemplate
                    },
                    {
                        index: 3,
                        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.status),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label'),
                        visible: false
                    },
                    {
                        index: 4,
                        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
                    },
                    {
                        index: 5,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-source.label'),
                        cellTemplate: this.dataSourceHistoryNameCellTemplate
                    },
                    {
                        index: 7,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label'),
                        visible: false
                    },
                    {
                        index: 9,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.locale),
                        title: 'Locale'
                    },
                    {
                        index: 12,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.data-set-locale.label'),
                        visible: false
                    }
                ]
            },
            common: {
                dataSets: [
                    {
                        index: 0,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                        visible: false
                    },
                    {
                        index: 1,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label')
                    },
                    {
                        index: 5,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.current-data-source.title'),
                        visible: false
                    },
                    {
                        index: 7,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label'),
                        visible: false
                    },
                    {
                        index: 10,
                        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.displayId),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.request-id.title'),
                        visible: false
                    },
                    {
                        index: 10,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                        visible: false
                    }
                ],
                testResults: [
                    {
                        index: 0,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                        visible: false
                    },
                    {
                        index: 1,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-set-type.label'),
                        visible: false
                    },
                    {
                        index: 2,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label')
                    },
                    {
                        index: 3,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.evaluationStatus),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.evaluation-status.label')
                    },
                    {
                        index: 4,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTested),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-last-tested.label'),
                        visible: false
                    },
                    {
                        index: 5,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.modifiedDate),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.modified-date.label'),
                        visible: false
                    },
                    {
                        index: 7,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label'),
                        clickable: true,
                        actions: [
                            {
                                name: (previousActionResult, lastActionRow) => this.downloadTestData(lastActionRow)
                            }
                        ]
                    },
                    {
                        index: 8,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.accuracy),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.accuracy.label')
                    },
                    {
                        index: 9,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.precision),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.precision.label')
                    },
                    {
                        index: 10,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.recall),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.recall.label')
                    },
                    {
                        index: 11,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.fScore),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.f-score.label')
                    },
                    {
                        index: 12,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.results.label'),
                        clickable: true,
                        actions: [
                            {
                                name: (previousActionResult, lastActionRow) => this.downloadResults(lastActionRow)
                            }
                        ]
                    },
                    {
                        index: 13,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                        visible: false
                    },
                    {
                        index: 14,
                        fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.error),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.error.name'),
                        visible: false
                    }
                ]
            }
        };
        this.evaluation = RX_COGNITIVE_TRAINING.settings.evaluations[this.evaluationName];
        this.recordGridConfig = of({
            enableFiltering: true,
            enableRowSelection: RowSelectionMode.Multiple,
            recordDefinitionName: this.recordDefinitionName,
            actionButtons: chain(availableActionButtons.common[this.tab.name])
                .concat(availableActionButtons[this.evaluation.name][this.tab.name])
                .compact()
                .value(),
            columns: chain(availableColumns.common[this.tab.name])
                .concat(availableColumns[this.evaluation.name][this.tab.name])
                .compact()
                .value(),
            getData: (queryParams) => {
                let queryExpression = this.evaluation.queryExpression + JSON.stringify(this.bundleId);
                if (this.evaluation.name ===
                    RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name) {
                    queryExpression += this.evaluation.serviceProviderQueryExpresion + this.trainingType.uniqueValue;
                }
                const params = {
                    recorddefinition: queryParams.recorddefinition,
                    pageSize: queryParams.pageSize,
                    queryExpression: compact([queryParams.queryExpression, queryExpression]).join(' AND ')
                };
                return this.rxRecordInstanceDataPageService.post({ params });
            }
        });
    }
    createDataSet(dataSourceTypeName) {
        this.rxRecordInstanceService
            .getNew(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName)
            .subscribe((recordInstance) => {
            const data = {
                bundleId: this.bundleId,
                dataSourceType: cloneDeep(RX_COGNITIVE_TRAINING.settings.dataSourceTypes[dataSourceTypeName]),
                evaluation: this.evaluation,
                isNewDataSet: true,
                recordInstance,
                trainingType: this.trainingType
            };
            if (this.isAutoClassificationTrainingAndEvaluation()) {
                if (dataSourceTypeName === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                        }),
                        content: RecordDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
                else if (dataSourceTypeName === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                        }),
                        content: FileDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
            }
            else if (this.isChatbotEvaluation()) {
                this.openDockedPanel({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-chatbot-data-set.title'),
                    content: ChatbotDataSetBladeComponent,
                    size: 'lg',
                    data: {
                        data
                    }
                })
                    .then((result) => {
                    if (result) {
                        this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                    }
                })
                    .catch(noop);
            }
        });
    }
    editDataSet(dataSet) {
        const recordInstanceId = dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId];
        this.rxRecordInstanceService
            .get(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, recordInstanceId)
            .subscribe((recordInstance) => {
            const dataSourceHistory = this.rxJsonParserService.tryParseJson(recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
            const dataSourceType = this.rxCognitiveTrainingUtilsService.getDataSourceType(dataSourceHistory);
            const data = {
                dataSourceType,
                editDataSet: true,
                evaluation: this.evaluation,
                recordInstance,
                trainingType: this.trainingType,
                getAttachmentRecordInstanceId: recordInstance.id
            };
            if (this.isAutoClassificationTrainingAndEvaluation()) {
                if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                        }),
                        content: RecordDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
                else if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                        }),
                        content: FileDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
            }
            else if (this.isChatbotEvaluation()) {
                this.openDockedPanel({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-chatbot-data-set.title'),
                    content: ChatbotDataSetBladeComponent,
                    size: 'lg',
                    data: {
                        data
                    }
                })
                    .then((result) => {
                    if (result) {
                        this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                    }
                })
                    .catch(noop);
            }
        });
    }
    copyDataSet(dataSet) {
        const recordInstanceId = dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId];
        combineLatest([
            this.rxRecordInstanceService.get(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, recordInstanceId),
            this.rxRecordInstanceService.getNew(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName)
        ]).subscribe(([recordInstance, newRecordInstance]) => {
            const dataSourceHistory = this.rxJsonParserService.tryParseJson(recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
            const dataSourceType = this.rxCognitiveTrainingUtilsService.getDataSourceType(dataSourceHistory);
            newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, '');
            newRecordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description));
            newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType));
            newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale));
            newRecordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource) || null);
            newRecordInstance.fieldInstances[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory].value =
                JSON.stringify(dataSourceHistory);
            const data = {
                bundleId: this.bundleId,
                dataSourceType,
                copyDataSet: true,
                evaluation: this.evaluation,
                recordInstance: null,
                trainingType: this.trainingType,
                getAttachmentRecordInstanceId: recordInstance.id
            };
            if (this.isAutoClassificationTrainingAndEvaluation()) {
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider));
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent));
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent));
                data.recordInstance = newRecordInstance;
                if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                        }),
                        content: RecordDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
                else if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                    this.openDockedPanel({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-data-set.title', {
                            dataSetName: this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                        }),
                        content: FileDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data
                        }
                    })
                        .then((result) => {
                        if (result) {
                            this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(noop);
                }
            }
            else if (this.isChatbotEvaluation()) {
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName));
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale));
                data.recordInstance = newRecordInstance;
                this.openDockedPanel({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-chatbot-data-set.title'),
                    content: ChatbotDataSetBladeComponent,
                    size: 'lg',
                    data: {
                        data
                    }
                })
                    .then((result) => {
                    if (result) {
                        this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                    }
                })
                    .catch(noop);
            }
        });
    }
    delete() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant(this.tab.deletionConfirmationMessage)
        })
            .then((result) => {
            if (result) {
                forkJoin(map(this.cognitiveTrainingRecordGrid.api.getSelectedRows(), (dataSet) => this.rxRecordInstanceService.delete(this.tab.recordDefinitionName, dataSet[RX_RECORD_DEFINITION.coreFieldIds.id]))).subscribe(() => {
                    this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant(this.tab.deletionSuccessMessage));
                });
            }
        });
    }
    trainDataSet(dataSet) {
        this.rxCommandFactoryService
            .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.train)
            .execute({
            trainingDataSetName: `${this.bundleId}:${dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]}`
        })
            .pipe(catchError((errorResponse) => throwError(errorResponse)), finalize(() => this.cognitiveTrainingRecordGrid.api.refresh().subscribe()))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-process-triggered.message'));
        });
    }
    testDataSet(dataSet) {
        this.rxCommandFactoryService
            .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.test)
            .execute({
            trainingDataSetName: `${this.bundleId}:${dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]}`
        })
            .pipe(catchError((errorResponse) => throwError(errorResponse)), finalize(() => this.cognitiveTrainingRecordGrid.api.refresh().subscribe()))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-set-submitted.message'));
        });
    }
    downloadTrainingData(dataSet) {
        this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv]);
    }
    downloadTestData(dataSet) {
        this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv]);
    }
    downloadResults(dataSet) {
        this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv]);
    }
    openInteractiveEvaluationBlade() {
        this.openDockedPanel({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-interactive.evaluation.title'),
            content: InteractiveEvaluationBladeComponent,
            size: 'lg',
            data: {
                bundleId: this.bundleId,
                evaluation: this.evaluation,
                trainingType: this.trainingType
            }
        })
            .then((result) => {
            if (result) {
                this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
            }
        })
            .catch(noop);
    }
    isDataSetsTab() {
        return this.tab.name === 'dataSets';
    }
    isTestResultsTab() {
        return this.tab.name === 'testResults';
    }
    isAutoClassificationTrainingAndEvaluation() {
        return (this.evaluation.name === RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name);
    }
    isChatbotEvaluation() {
        return this.evaluation.name === RX_COGNITIVE_TRAINING.settings.evaluations.chatbotEvaluation.name;
    }
    formatDataSourceHistory(dataItem, column) {
        const dataSourceHistory = JSON.parse(this.getCellValue(dataItem, column));
        return (dataSourceHistory.fileName || this.rxDefinitionNameService.getDisplayName(dataSourceHistory.recordDefinitionName));
    }
    getCellValue(dataItem, column) {
        return dataItem[column.field];
    }
    isDataSetActionButtonDisabled() {
        const dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
        return (!this.isAdministrator ||
            dataSets.length !== 1 ||
            dataSets[0][RX_RECORD_DEFINITION.coreFieldIds.status] ===
                RX_COGNITIVE_TRAINING.settings.trainingStatuses.training.value ||
            dataSets[0][RX_RECORD_DEFINITION.coreFieldIds.status] ===
                RX_COGNITIVE_TRAINING.settings.trainingStatuses.inProgress.value);
    }
    isChatbotDataSetEditButtonDisabled() {
        const dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
        return (!this.isAdministrator ||
            dataSets.length !== 1 ||
            dataSets[0][RX_RECORD_DEFINITION.coreFieldIds.status] ===
                RX_COGNITIVE_TRAINING.settings.trainingStatuses.training.value);
    }
    isTestResultsDeletionRestricted() {
        const dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
        return (!this.isAdministrator ||
            some(dataSets, (dataSet) => dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.evaluationStatus] ===
                RX_COGNITIVE_TRAINING.settings.evaluationStatuses.queued.value));
    }
    openDockedPanel(config) {
        return this.rxModalService.openDockedPanel(config).catch(noop);
    }
}
CognitiveTrainingRecordGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRecordGridComponent, deps: [{ token: i2.RxBundleCacheService }, { token: i2.RxCommandFactoryService }, { token: RxCognitiveTrainingUtilsService }, { token: i2.RxCurrentUserService }, { token: i2.RxDefinitionNameService }, { token: i3.RxJsonParserService }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i3$2.RxRecordInstanceService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveTrainingRecordGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveTrainingRecordGridComponent, selector: "rx-cognitive-training-record-grid", inputs: { tab: "tab", evaluationName: "evaluationName", recordDefinitionName: "recordDefinitionName", trainingType: "trainingType" }, viewQueries: [{ propertyName: "cognitiveTrainingRecordGrid", first: true, predicate: ["cognitiveTrainingRecordGrid"], descendants: true, static: true }, { propertyName: "chatbotNameCellTemplate", first: true, predicate: ["chatbotNameCellTemplate"], descendants: true, static: true }, { propertyName: "dataSourceHistoryNameCellTemplate", first: true, predicate: ["dataSourceHistoryNameCellTemplate"], descendants: true, static: true }], ngImport: i0, template: "<div *ngIf=\"isDataSetsTab()\">\n  <div class=\"dropdown\" *ngIf=\"isAutoClassificationTrainingAndEvaluation()\" adaptDropdown [autoFocusFirst]=\"false\">\n    <button\n      class=\"d-icon-plus_circle align-self-start\"\n      type=\"button\"\n      rx-id=\"data-set-dropdown\"\n      adapt-button\n      adaptDropdownToggle\n      btn-type=\"tertiary\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <div class=\"dropdown-menu\" adaptDropdownMenu>\n      <button\n        class=\"dropdown-item\"\n        rx-id=\"create-record-data-set\"\n        [disabled]=\"!isAdministrator\"\n        (click)=\"createDataSet(innovationSuiteDataSourceType.name)\"\n      >\n        {{ innovationSuiteDataSourceType.displayName | translate }}\n      </button>\n\n      <button\n        class=\"dropdown-item\"\n        rx-id=\"create-file-data-set\"\n        [disabled]=\"!isAdministrator\"\n        (click)=\"createDataSet(fileDataSourceType.name)\"\n      >\n        {{ fileDataSourceType.displayName | translate }}\n      </button>\n    </div>\n  </div>\n\n  <button\n    class=\"d-icon-plus_circle align-self-start\"\n    *ngIf=\"isChatbotEvaluation()\"\n    type=\"button\"\n    rx-id=\"create-chatbot-data-set\"\n    adapt-button\n    btn-type=\"tertiary\"\n    [disabled]=\"!isAdministrator\"\n    (click)=\"createDataSet(fileDataSourceType.name)\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n</div>\n\n<button\n  class=\"d-icon-target_cursor align-self-start\"\n  *ngIf=\"isAutoClassificationTrainingAndEvaluation() && isTestResultsTab()\"\n  type=\"button\"\n  rx-id=\"interactive-evaluation\"\n  adapt-button\n  btn-type=\"tertiary\"\n  [disabled]=\"!isAdministrator\"\n  (click)=\"openInteractiveEvaluationBlade()\"\n>\n  {{\n    'com.bmc.arsys.rx.client.admin.cognitive-training.cognitive-training-record-grid.interactive-evaluation.label'\n      | translate\n  }}\n</button>\n\n<rx-record-grid #cognitiveTrainingRecordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n\n<ng-template #dataSourceHistoryNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container>\n    {{ formatDataSourceHistory(dataItem, column) }}\n  </ng-container>\n</ng-template>\n\n<ng-template #chatbotNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container>\n    {{ getCellValue(dataItem, column) | rxDefinitionNamePipe }}\n  </ng-container>\n</ng-template>\n", components: [{ type: i1$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }], pipes: { "translate": i4.TranslatePipe, "rxDefinitionNamePipe": i2.RxDefinitionNamePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRecordGridComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-cognitive-training-record-grid',
                    templateUrl: './cognitive-training-record-grid.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxBundleCacheService }, { type: i2.RxCommandFactoryService }, { type: RxCognitiveTrainingUtilsService }, { type: i2.RxCurrentUserService }, { type: i2.RxDefinitionNameService }, { type: i3.RxJsonParserService }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i3$2.RxRecordInstanceService }, { type: i4.TranslateService }]; }, propDecorators: { cognitiveTrainingRecordGrid: [{
                type: ViewChild,
                args: ['cognitiveTrainingRecordGrid', { static: true }]
            }], chatbotNameCellTemplate: [{
                type: ViewChild,
                args: ['chatbotNameCellTemplate', { static: true }]
            }], dataSourceHistoryNameCellTemplate: [{
                type: ViewChild,
                args: ['dataSourceHistoryNameCellTemplate', { static: true }]
            }], tab: [{
                type: Input
            }], evaluationName: [{
                type: Input
            }], recordDefinitionName: [{
                type: Input
            }], trainingType: [{
                type: Input
            }] } });

class CognitiveTrainingAdminComponent extends BaseViewComponent {
    constructor(rxCognitiveTrainingService) {
        super();
        this.rxCognitiveTrainingService = rxCognitiveTrainingService;
        this.sections = RX_COGNITIVE_TRAINING.settings.sections;
        this.tabs = [
            RX_COGNITIVE_TRAINING.settings.tabs[CognitiveTrainingTabNames.DataSets],
            RX_COGNITIVE_TRAINING.settings.tabs[CognitiveTrainingTabNames.TestResults]
        ];
        this.destroyed$ = new ReplaySubject(1);
    }
    ngOnInit() {
        super.ngOnInit();
        this.busy = this.rxCognitiveTrainingService
            .getClassificationServiceProvider()
            .pipe(takeUntil(this.destroyed$))
            .subscribe((classificationServiceProvider) => {
            this.trainingType = RX_COGNITIVE_TRAINING.settings.trainingTypes[classificationServiceProvider.value];
            find(this.sections, {
                evaluationName: RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name
            }).title = this.trainingType.title;
        });
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
CognitiveTrainingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingAdminComponent, deps: [{ token: RxCognitiveTrainingService }], target: i0.ɵɵFactoryTarget.Component });
CognitiveTrainingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveTrainingAdminComponent, selector: "rx-admin-cognitive-training", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.header.title' | translate }}\">\n  <adapt-accordion multiselect=\"true\">\n    <adapt-accordion-tab\n      *ngFor=\"let section of sections\"\n      [title]=\"section.title | translate\"\n      [isOpen]=\"section.isExpanded\"\n    >\n      <adapt-tabset *ngIf=\"trainingType\">\n        <adapt-tab-panel *ngFor=\"let tab of tabs\" [adapt-tab-title]=\"tab.title | translate\">\n          <rx-cognitive-training-record-grid\n            [evaluationName]=\"section.evaluationName\"\n            [tab]=\"tab\"\n            [recordDefinitionName]=\"tab.recordDefinitionName\"\n            [trainingType]=\"trainingType\"\n          >\n          </rx-cognitive-training-record-grid>\n        </adapt-tab-panel>\n      </adapt-tabset>\n    </adapt-accordion-tab>\n  </adapt-accordion>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: CognitiveTrainingRecordGridComponent, selector: "rx-cognitive-training-record-grid", inputs: ["tab", "evaluationName", "recordDefinitionName", "trainingType"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-cognitive-training',
                    templateUrl: './cognitive-training.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxCognitiveTrainingService }]; } });

class CognitiveTrainingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-cognitive-training',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveTrainingAdminComponent),
            name: 'Cognitive training',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
CognitiveTrainingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
CognitiveTrainingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRegistrationModule, declarations: [ChatbotDataSetBladeComponent,
        CognitiveTrainingAdminComponent,
        CognitiveTrainingRecordGridComponent,
        FileDataSetBladeComponent,
        InteractiveEvaluationBladeComponent,
        RecordDataSetBladeComponent], imports: [AdaptAccordionModule,
        AdaptAlertModule,
        AdaptButtonModule,
        AdaptDockedPanelModule,
        AdaptDropdownModule,
        AdaptModalModule,
        AdaptRxCounterModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptRxUploaderModule,
        AdaptRxValidatorsModule,
        AdaptTabsModule,
        AdminSettingsModule,
        CommonModule,
        ExpressionFormControlModule,
        FormsModule,
        GroupButtonFormControlModule,
        RecordGridDesignModule,
        RecordGridModule,
        RxBusyIndicatorModule,
        RxDefinitionModule,
        RxDefinitionPickerModule,
        TranslateModule,
        RecordGridFilterSelectControlModule] });
CognitiveTrainingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRegistrationModule, imports: [[
            AdaptAccordionModule,
            AdaptAlertModule,
            AdaptButtonModule,
            AdaptDockedPanelModule,
            AdaptDropdownModule,
            AdaptModalModule,
            AdaptRxCounterModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptRxUploaderModule,
            AdaptRxValidatorsModule,
            AdaptTabsModule,
            AdminSettingsModule,
            CommonModule,
            ExpressionFormControlModule,
            FormsModule,
            GroupButtonFormControlModule,
            RecordGridDesignModule,
            RecordGridModule,
            RxBusyIndicatorModule,
            RxDefinitionModule,
            RxDefinitionPickerModule,
            TranslateModule,
            RecordGridFilterSelectControlModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CognitiveTrainingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ChatbotDataSetBladeComponent,
                        CognitiveTrainingAdminComponent,
                        CognitiveTrainingRecordGridComponent,
                        FileDataSetBladeComponent,
                        InteractiveEvaluationBladeComponent,
                        RecordDataSetBladeComponent
                    ],
                    imports: [
                        AdaptAccordionModule,
                        AdaptAlertModule,
                        AdaptButtonModule,
                        AdaptDockedPanelModule,
                        AdaptDropdownModule,
                        AdaptModalModule,
                        AdaptRxCounterModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptRxUploaderModule,
                        AdaptRxValidatorsModule,
                        AdaptTabsModule,
                        AdminSettingsModule,
                        CommonModule,
                        ExpressionFormControlModule,
                        FormsModule,
                        GroupButtonFormControlModule,
                        RecordGridDesignModule,
                        RecordGridModule,
                        RxBusyIndicatorModule,
                        RxDefinitionModule,
                        RxDefinitionPickerModule,
                        TranslateModule,
                        RecordGridFilterSelectControlModule
                    ],
                    entryComponents: [
                        ChatbotDataSetBladeComponent,
                        CognitiveTrainingAdminComponent,
                        CognitiveTrainingRecordGridComponent,
                        FileDataSetBladeComponent,
                        InteractiveEvaluationBladeComponent,
                        RecordDataSetBladeComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_COMAROUND_KNOWLEDGE = {
    configName: 'ComAround Knowledge',
    pingComAroundCommand: 'com.bmc.dsm.chatbot.command.PingComAroundCommand',
    settingNames: {
        serverUrl: 'ComAround Knowledge URL',
        subscriptionId: 'ComAround Knowledge Subscription ID',
        userName: 'ComAround Knowledge User',
        password: 'ComAround Knowledge Password',
        frameUrl: 'ComAround Knowledge Frame URL',
        mainUrl: 'ComAround Knowledge Main URL',
        portalId: 'ComAround Knowledge Portal ID'
    }
};

class ComaroundKnowledgeAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxUrlUtilsService, rxNotificationService, rxAdminSettingsService, rxCommandFactoryService, rxCognitiveServiceService, httpClient, translateService) {
        super();
        this.formBuilder = formBuilder;
        this.rxUrlUtilsService = rxUrlUtilsService;
        this.rxNotificationService = rxNotificationService;
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.httpClient = httpClient;
        this.translateService = translateService;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
        this.availablePortals = [];
        this.isNewConfigurationSetting = false;
        this.comaroundComponentSettingsValues = [];
        this.subscription = new Subscription();
    }
    get comaroundConfigFormGroup() {
        return this.knowledgeConfigForm.controls.comaroundForm;
    }
    get portalControl() {
        return this.knowledgeConfigForm.controls.portal;
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.knowledgeConfigForm.dirty
        });
        this.knowledgeConfigForm = this.formBuilder.group({
            comaroundForm: this.formBuilder.group({
                mainUrl: this.formBuilder.control(null, this.validateUrl),
                frameUrl: this.formBuilder.control(null, this.validateUrl),
                subscriptionId: this.formBuilder.control(null, Validators.required),
                userName: this.formBuilder.control(null, Validators.required),
                password: this.formBuilder.control(null, Validators.required),
                serverUrl: this.formBuilder.control(null, [Validators.required, this.validateUrl])
            }),
            portal: this.formBuilder.control({ value: [], disabled: true })
        });
        this.busy = this.getComaroundComponentSettings()
            .pipe(tap((componentSettings) => {
            var _a;
            const settingNames = Object.values(RX_COMAROUND_KNOWLEDGE.settingNames);
            const { values } = componentSettings;
            this.isNewConfigurationSetting = values.length === 0;
            this.comaroundComponentSettingsValues = values;
            // complete the missing configuration settings
            // works for new configuration too
            if (values.length < settingNames.length) {
                const ownerKey = (_a = values[0]) === null || _a === void 0 ? void 0 : _a.ownerKeyValue1;
                settingNames
                    .filter((name) => !values.find((setting) => setting.settingName === name))
                    .forEach((name) => values.push({
                    // these fields satisfy update/create settings
                    componentName: RX_COMAROUND_KNOWLEDGE.configName,
                    ownerKeyValue1: ownerKey,
                    settingName: name,
                    settingValue: null
                }));
            }
            this.comaroundConfigFormGroup.patchValue({
                serverUrl: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.serverUrl),
                subscriptionId: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.subscriptionId),
                userName: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.userName),
                password: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.password),
                frameUrl: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.frameUrl),
                mainUrl: this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.mainUrl)
            });
        }), switchMap(() => {
            return this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId) ? this.getAvailablePortals() : of([]);
        }), tap((portals) => {
            this.availablePortals = portals;
            if (portals.length) {
                const configuredPortalId = this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId);
                let selectedPortal = configuredPortalId && portals.find((portal) => portal.id == configuredPortalId);
                selectedPortal !== null && selectedPortal !== void 0 ? selectedPortal : (selectedPortal = portals.find((portal) => portal.isDefault));
                this.portalControl.setValue([selectedPortal]);
            }
        }))
            .subscribe();
        this.subscription = this.comaroundConfigFormGroup.valueChanges.subscribe(() => {
            this.connectionTestStatus =
                this.comaroundConfigFormGroup.pristine || this.comaroundConfigFormGroup.invalid
                    ? ConnectionTestStatus.Invalid
                    : ConnectionTestStatus.Unknown;
            if (this.portalControl.enabled) {
                this.portalControl.disable();
            }
        });
    }
    getComaroundComponentSettings() {
        return this.rxAdminSettingsService.getComponentSettings(RX_COMAROUND_KNOWLEDGE.configName, {
            'default-bundle-scope': RX_APPLICATION.chatbotBundleId
        });
    }
    getAvailablePortals() {
        return this.httpClient
            .get('/api/rx/application/knowledge?ComAroundRequest=v1/user/portals')
            .pipe(catchError(() => of([])));
    }
    portalOptionFormatter(option) {
        return option.name;
    }
    getValue(settingName) {
        const setting = find(this.comaroundComponentSettingsValues, {
            settingName
        });
        return setting === null || setting === void 0 ? void 0 : setting.settingValue;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    isSaveButtonDisabled() {
        return (this.knowledgeConfigForm.pristine ||
            this.knowledgeConfigForm.invalid ||
            this.connectionTestStatus !== ConnectionTestStatus.Passed);
    }
    setValue(settingName, value) {
        const setting = find(this.comaroundComponentSettingsValues, {
            settingName
        });
        if (setting) {
            setting.settingValue = value;
        }
    }
    saveConfiguration() {
        var _a;
        const formValue = Object.assign(Object.assign({}, this.comaroundConfigFormGroup.getRawValue()), { portal: this.portalControl.value });
        let adminSetting$;
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.serverUrl, formValue.serverUrl);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.subscriptionId, formValue.subscriptionId);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.userName, formValue.userName);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.password, formValue.password);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.frameUrl, formValue.frameUrl);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.mainUrl, formValue.mainUrl);
        this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId, (_a = formValue.portal[0]) === null || _a === void 0 ? void 0 : _a.id);
        if (this.isNewConfigurationSetting) {
            adminSetting$ = this.rxAdminSettingsService
                .createComponentSettings(RX_COMAROUND_KNOWLEDGE.configName, this.comaroundComponentSettingsValues)
                .pipe(switchMap(() => this.getComaroundComponentSettings()), tap((response) => {
                this.isNewConfigurationSetting = false;
                this.comaroundComponentSettingsValues = response.values;
            }));
        }
        else {
            adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(`${RX_COMAROUND_KNOWLEDGE.configName}/${this.comaroundComponentSettingsValues[0].ownerKeyValue1}`, this.comaroundComponentSettingsValues);
        }
        this.busy = adminSetting$.subscribe(() => {
            this.knowledgeConfigForm.markAsPristine();
            this.updateComaroundTokenWithLatestValues();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.comaround-knowledge.configuration-saved.message'));
            this.connectionTestStatus = ConnectionTestStatus.Invalid;
            this.portalControl.disable();
        });
    }
    updateComaroundTokenWithLatestValues() {
        this.rxCommandFactoryService
            .forResourceType('com.bmc.dsm.chatbot.command.UpdateComAroundTokenCommand')
            .execute({})
            .subscribe();
    }
    onTestConnection() {
        const formValue = this.comaroundConfigFormGroup.getRawValue();
        this.knowledgeConfigForm.disable();
        this.rxCognitiveServiceService
            .testConnection({
            resourceType: RX_COMAROUND_KNOWLEDGE.pingComAroundCommand,
            serverUrl: formValue.serverUrl,
            subscriptionId: formValue.subscriptionId,
            userName: formValue.userName,
            password: formValue.password,
            frameUrl: formValue.frameUrl,
            mainUrl: formValue.mainUrl
        })
            .pipe(finalize(() => this.comaroundConfigFormGroup.enable({ emitEvent: false })), catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe((portals) => {
            this.availablePortals = portals || [];
            if (portals) {
                const configuredPortalId = this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId);
                let selectedPortal = configuredPortalId && portals.find((portal) => portal.id == configuredPortalId);
                selectedPortal !== null && selectedPortal !== void 0 ? selectedPortal : (selectedPortal = portals.find((portal) => portal.isDefault));
                this.portalControl.setValue([selectedPortal]);
                this.portalControl.enable();
            }
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    validateUrl() {
        return (control) => {
            return control.value && !this.rxUrlUtilsService.isValidUrl(control.value, true)
                ? { invalidUrl: { message: this.translateService.instant('com.bmc.arsys.rx.client.admin.invalid-url.label') } }
                : null;
        };
    }
}
ComaroundKnowledgeAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i3.RxUrlUtilsService }, { token: i2.RxNotificationService }, { token: i2.RxAdminSettingsService }, { token: i2.RxCommandFactoryService }, { token: RxCognitiveServiceService }, { token: i1$2.HttpClient }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ComaroundKnowledgeAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ComaroundKnowledgeAdminComponent, selector: "rx-admin-comaround-knowledge", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings\n  header=\" {{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.header.title' | translate }}\"\n  [busy]=\"busy\">\n  <form [formGroup]=\"knowledgeConfigForm\">\n    <fieldset formGroupName=\"comaroundForm\">\n      <adapt-rx-textfield\n        rx-id=\"main-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.main-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"mainUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"frame-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.frame-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"frameUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"server-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.api-endpoint-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"serverUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"subscription-id\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.subscription-id.label' | translate }}\"\n        formControlName=\"subscriptionId\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"user-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n        formControlName=\"userName\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"password\"\n        label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n        formControlName=\"password\"\n        isPassword=\"true\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <rx-connection-tester\n        buttonType=\"secondary\"\n        [status]=\"connectionTestStatus\"\n        (testConnection)=\"onTestConnection()\"\n        rx-id=\"test-button\"\n        class=\"d-block form-group\">\n      </rx-connection-tester>\n\n    </fieldset>\n\n    <hr />\n\n    <adapt-rx-select\n      rx-id=\"portal\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.portal.label' | translate }}\"\n      formControlName=\"portal\"\n      [options]=\"availablePortals\"\n      [optionFormatter]=\"portalOptionFormatter\"\n      class=\"d-block form-group\"></adapt-rx-select>\n\n    <adapt-alert\n      *ngIf=\"portalControl.disabled\"\n      [config]=\"{type: 'inline', variant: 'info', icon: true}\">\n      {{ \"com.bmc.arsys.rx.client.admin.comaround-knowledge.portal-cannot-be-selected.message\" | translate }}\n    </adapt-alert>\n\n    <div class=\"d-flex justify-content-start mt-5\">\n      <button\n        adapt-button\n        class=\"mr-2\"\n        btn-type=\"primary\"\n        type=\"button\"\n        rx-id=\"save-button\"\n        [disabled]=\"isSaveButtonDisabled()\"\n        (click)=\"saveConfiguration()\">\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}form>*{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-comaround-knowledge',
                    templateUrl: './comaround-knowledge.component.html',
                    styleUrls: ['./comaround-knowledge.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i3.RxUrlUtilsService }, { type: i2.RxNotificationService }, { type: i2.RxAdminSettingsService }, { type: i2.RxCommandFactoryService }, { type: RxCognitiveServiceService }, { type: i1$2.HttpClient }, { type: i4.TranslateService }]; } });

class ComaroundKnowledgeRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-comaround-knowledge',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ComaroundKnowledgeAdminComponent),
            name: 'ComAround knowledge',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ComaroundKnowledgeRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ComaroundKnowledgeRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeRegistrationModule, declarations: [ComaroundKnowledgeAdminComponent], imports: [AdaptButtonModule,
        AdaptRxTextfieldModule,
        AdaptRxSelectModule,
        AdaptAlertModule,
        AdaptAccordionModule,
        AdminSettingsModule,
        CommonModule,
        ReactiveFormsModule,
        RxConnectionTesterModule,
        RxDirectivesModule,
        TranslateModule] });
ComaroundKnowledgeRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeRegistrationModule, imports: [[
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            AdaptRxSelectModule,
            AdaptAlertModule,
            AdaptAccordionModule,
            AdminSettingsModule,
            CommonModule,
            ReactiveFormsModule,
            RxConnectionTesterModule,
            RxDirectivesModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ComaroundKnowledgeRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ComaroundKnowledgeAdminComponent],
                    imports: [
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSelectModule,
                        AdaptAlertModule,
                        AdaptAccordionModule,
                        AdminSettingsModule,
                        CommonModule,
                        ReactiveFormsModule,
                        RxConnectionTesterModule,
                        RxDirectivesModule,
                        TranslateModule
                    ],
                    entryComponents: [ComaroundKnowledgeAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

var AliasType;
(function (AliasType) {
    AliasType["DataSource"] = "dataSource";
    AliasType["WebRequest"] = "webRequest";
    AliasType["Connector"] = "connector";
})(AliasType || (AliasType = {}));

class ConnectionMappingComponent {
    constructor(rxNotificationService, rxRecordInstanceService, rxRecordInstanceUpdateService, translateService) {
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
        this.translateService = translateService;
        this.aliasNameId = RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName;
        this.optionFormatter = this.optionFormatter.bind(this);
    }
    ngOnInit() {
        if (this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue]) {
            const connectionConfiguration = this.configurations.find((config) => config[RX_CONNECTION_MAPPING.dataSource.fields.id] ===
                this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue]);
            this.connectionConfiguration = [connectionConfiguration];
        }
    }
    optionFormatter(configurationOption) {
        const fieldName = this.aliasType === AliasType.Connector
            ? RX_CONNECTION_MAPPING.connector.fields.target_name
            : RX_CONNECTION_MAPPING.dataSource.fields.name;
        return get(configurationOption, fieldName, 'Select configuration');
    }
    onConnectionConfigurationChange(configuration) {
        this.rxRecordInstanceService
            .get(RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName, this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.id])
            .subscribe((recordInstance) => {
            recordInstance.setFieldValue(RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue, configuration[0][RX_CONNECTION_MAPPING.dataSource.fields.id]);
            this.rxRecordInstanceUpdateService.execute(recordInstance).subscribe(() => {
                this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.connection-mapping.mapping-saved.message'));
            });
        });
    }
}
ConnectionMappingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectionMappingComponent, deps: [{ token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceService }, { token: i3$2.RxRecordInstanceUpdateService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ConnectionMappingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: { configurations: "configurations", aliasMapping: "aliasMapping", aliasType: "aliasType" }, ngImport: i0, template: "<div class=\"row\">\n  <adapt-rx-textfield\n    class=\"col-md-6 form-group\"\n    rx-id=\"connection-target\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connection-target.label' | translate }}\"\n    disabled=\"true\"\n    [(ngModel)]=\"aliasMapping[this.aliasNameId]\"\n  ></adapt-rx-textfield>\n\n  <adapt-rx-select\n    class=\"d-block col-md-6 form-group\"\n    rx-id=\"connection-configuration\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connection-configuration.label' | translate }}\"\n    [ngModel]=\"connectionConfiguration\"\n    [options]=\"configurations\"\n    [optionFormatter]=\"optionFormatter\"\n    (ngModelChange)=\"onConnectionConfigurationChange($event)\"\n  ></adapt-rx-select>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectionMappingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-connection-mapping',
                    templateUrl: './connection-mapping.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceService }, { type: i3$2.RxRecordInstanceUpdateService }, { type: i4.TranslateService }]; }, propDecorators: { configurations: [{
                type: Input
            }], aliasMapping: [{
                type: Input
            }], aliasType: [{
                type: Input
            }] } });

class RxConnectionMappingModule {
}
RxConnectionMappingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectionMappingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
RxConnectionMappingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectionMappingModule, declarations: [ConnectionMappingComponent], imports: [CommonModule, AdaptRxSelectModule, FormsModule, AdaptRxTextfieldModule, TranslateModule], exports: [ConnectionMappingComponent] });
RxConnectionMappingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectionMappingModule, imports: [[CommonModule, AdaptRxSelectModule, FormsModule, AdaptRxTextfieldModule, TranslateModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectionMappingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AdaptRxSelectModule, FormsModule, AdaptRxTextfieldModule, TranslateModule],
                    declarations: [ConnectionMappingComponent],
                    exports: [ConnectionMappingComponent]
                }]
        }] });

class ConnectorMappingAdminComponent {
    constructor(rxRecordInstanceDataPageService, translateService) {
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.translateService = translateService;
        this.mappingSelectOptions = [];
    }
    ngOnInit() {
        this.busy = this.getRecordInstanceDataPage({
            recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
            queryExpression: `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'!="email"`,
            propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
        }).subscribe((response) => {
            this.mappingSelectOptions = uniqBy(response.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
        });
    }
    optionFormatter(application) {
        return application[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationName];
    }
    getRecordInstanceDataPage(params) {
        return this.rxRecordInstanceDataPageService.post({ params });
    }
    onApplicationChange(selectedApplication) {
        const applicationId = get(selectedApplication, `0.${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}`);
        if (applicationId) {
            forkJoin({
                configurationList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.connector.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.connector.fields).join()
                }),
                applicationMappingList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                    queryExpression: `(('${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}'="${applicationId}" AND ` +
                        `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'="${RX_CONNECTION_MAPPING.aliasTypes.connector}"))`
                })
            }).subscribe((result) => {
                this.configurationList = result.configurationList.data;
                this.mappingList = result.applicationMappingList.data;
            });
        }
    }
}
ConnectorMappingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingAdminComponent, deps: [{ token: i3$2.RxRecordInstanceDataPageService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ConnectorMappingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorMappingAdminComponent, selector: "rx-connector-mapping", ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connector-mapping.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connector-mapping.application.label' | translate }}\"\n      [ngModel]=\"selectedMapping\"\n      [options]=\"mappingSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let mapping of mappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"mapping\"\n    aliasType=\"connector\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-connector-mapping',
                    templateUrl: './connector-mapping.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i3$2.RxRecordInstanceDataPageService }, { type: i4.TranslateService }]; } });

class ConnectorMappingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-connector-mapping',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ConnectorMappingAdminComponent),
            name: 'Connector mapping',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ConnectorMappingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ConnectorMappingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingRegistrationModule, declarations: [ConnectorMappingAdminComponent], imports: [AdminSettingsModule,
        AdaptRxTextfieldModule,
        AdaptRxSelectModule,
        CommonModule,
        FormsModule,
        RxConnectionMappingModule,
        TranslateModule] });
ConnectorMappingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingRegistrationModule, imports: [[
            AdminSettingsModule,
            AdaptRxTextfieldModule,
            AdaptRxSelectModule,
            CommonModule,
            FormsModule,
            RxConnectionMappingModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorMappingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ConnectorMappingAdminComponent],
                    imports: [
                        AdminSettingsModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSelectModule,
                        CommonModule,
                        FormsModule,
                        RxConnectionMappingModule,
                        TranslateModule
                    ],
                    entryComponents: [ConnectorMappingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class DataSourceMappingAdminComponent {
    constructor(rxRecordInstanceDataPageService) {
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.applicationSelectOptions = [];
    }
    ngOnInit() {
        this.busy = this.getRecordInstanceDataPage({
            recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
            queryExpression: `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'!="email"`,
            propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
        }).subscribe((response) => {
            this.applicationSelectOptions = uniqBy(response.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
        });
    }
    optionFormatter(application) {
        return application[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationName];
    }
    getRecordInstanceDataPage(params) {
        return this.rxRecordInstanceDataPageService.post({ params });
    }
    onApplicationChange(selectedApplication) {
        const applicationId = get(selectedApplication, `0.${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}`);
        if (applicationId) {
            forkJoin({
                configurationList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.dataSource.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.dataSource.fields).join()
                }),
                applicationMappingList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                    queryExpression: `(('${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}'="${applicationId}" AND ` +
                        `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'="${RX_CONNECTION_MAPPING.aliasTypes.dataSource}"))`
                })
            }).subscribe((result) => {
                this.configurationList = result.configurationList.data;
                this.applicationMappingList = result.applicationMappingList.data;
            });
        }
    }
}
DataSourceMappingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingAdminComponent, deps: [{ token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Component });
DataSourceMappingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceMappingAdminComponent, selector: "rx-admin-data-source-mapping", ngImport: i0, template: "<rx-admin-settings header=\"Data source mapping\" [busy]=\"busy\">\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"data-source-application\"\n      label=\"Application\"\n      [ngModel]=\"selectedApplication\"\n      [options]=\"applicationSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let applicationMapping of applicationMappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"applicationMapping\"\n    aliasType=\"dataSource\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-data-source-mapping',
                    templateUrl: './data-source-mapping.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i3$2.RxRecordInstanceDataPageService }]; } });

class DataSourceMappingModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-data-source-mapping',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceMappingAdminComponent),
            name: 'Data source mapping',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
DataSourceMappingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
DataSourceMappingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingModule, declarations: [DataSourceMappingAdminComponent], imports: [CommonModule,
        AdminSettingsModule,
        AdaptRxSelectModule,
        FormsModule,
        AdaptRxTextfieldModule,
        RxConnectionMappingModule] });
DataSourceMappingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            AdaptRxSelectModule,
            FormsModule,
            AdaptRxTextfieldModule,
            RxConnectionMappingModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceMappingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DataSourceMappingAdminComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        AdaptRxSelectModule,
                        FormsModule,
                        AdaptRxTextfieldModule,
                        RxConnectionMappingModule
                    ],
                    entryComponents: [DataSourceMappingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class WebApiMappingAdminComponent {
    constructor(rxGlobalCacheService, rxRecordInstanceDataPageService) {
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.mappingSelectOptions = [];
    }
    ngOnInit() {
        this.busy = forkJoin([
            this.getRecordInstanceDataPage({
                recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                queryExpression: `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'!="email"`,
                propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
            }),
            this.rxGlobalCacheService.getBundleDescriptors()
        ]).subscribe(([dataPage, bundleDescriptors]) => {
            this.mappingSelectOptions = uniqBy(dataPage.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId)
                .map((mapping) => (Object.assign(Object.assign({}, mapping), { friendlyName: find(bundleDescriptors, {
                    id: mapping[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId]
                }).friendlyName })))
                .sort((a, b) => a.friendlyName.localeCompare(b.friendlyName));
        });
    }
    optionFormatter(application) {
        return application.friendlyName;
    }
    getRecordInstanceDataPage(params) {
        return this.rxRecordInstanceDataPageService.post({ params });
    }
    onApplicationChange(selectedApplication) {
        const applicationId = get(selectedApplication, `0.${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}`);
        if (applicationId) {
            forkJoin({
                configurationList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.webRequest.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.webRequest.fields).join()
                }),
                applicationMappingList: this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                    propertySelection: values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                    queryExpression: `(('${RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId}'="${applicationId}" AND ` +
                        `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}'="${RX_CONNECTION_MAPPING.aliasTypes.webRequest}"))`
                })
            }).subscribe((result) => {
                this.configurationList = result.configurationList.data;
                this.mappingList = result.applicationMappingList.data;
            });
        }
    }
}
WebApiMappingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingAdminComponent, deps: [{ token: i2.RxGlobalCacheService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Component });
WebApiMappingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiMappingAdminComponent, selector: "rx-web-api-mapping", ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.web-api-mapping.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}\"\n      [ngModel]=\"selectedMapping\"\n      [options]=\"mappingSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let mapping of mappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"mapping\"\n    aliasType=\"webRequest\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-web-api-mapping',
                    templateUrl: './web-api-mapping.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxGlobalCacheService }, { type: i3$2.RxRecordInstanceDataPageService }]; } });

class WebApiMappingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-web-api-mapping',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebApiMappingAdminComponent),
            name: 'Web API mapping',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
WebApiMappingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
WebApiMappingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingRegistrationModule, declarations: [WebApiMappingAdminComponent], imports: [AdminSettingsModule,
        AdaptRxTextfieldModule,
        AdaptRxSelectModule,
        CommonModule,
        FormsModule,
        RxConnectionMappingModule,
        TranslateModule] });
WebApiMappingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingRegistrationModule, imports: [[
            AdminSettingsModule,
            AdaptRxTextfieldModule,
            AdaptRxSelectModule,
            CommonModule,
            FormsModule,
            RxConnectionMappingModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiMappingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [WebApiMappingAdminComponent],
                    imports: [
                        AdminSettingsModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSelectModule,
                        CommonModule,
                        FormsModule,
                        RxConnectionMappingModule,
                        TranslateModule
                    ],
                    entryComponents: [WebApiMappingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_CONNECTOR_CONFIGURATION = {
    dataPageType: 'com.bmc.arsys.rx.application.record.datapage.RecordInstanceDataPageQuery',
    recordDefinitionName: 'Connector Configurations',
    connectorType: 'connector',
    fields: {
        targetName: 56110,
        connectorId: 56111,
        connectorName: 56112,
        connectorConfigId: 56113,
        connectorConfigName: 56114,
        connectorProfileId: 56115,
        connectorProfileName: 56116
    }
};

const connectorConfigurationDataPageQuery = 'com.bmc.arsys.rx.application.integration.ConnectorConfigDataPageQuery';
class RxConnectorConfigurationDataPageService extends DataPage {
    constructor(injector) {
        super(injector, connectorConfigurationDataPageQuery);
        this.injector = injector;
    }
}
RxConnectorConfigurationDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxConnectorConfigurationDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

const connectorsDataPageQuery = 'com.bmc.arsys.rx.application.integration.ConnectorDataPageQuery';
class RxConnectorsDataPageService extends DataPage {
    constructor(injector) {
        super(injector, connectorsDataPageQuery);
        this.injector = injector;
    }
}
RxConnectorsDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorsDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxConnectorsDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorsDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorsDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class RxConnectorConfigurationService {
    constructor(httpClient, rxConnectorsDataPageService, rxConnectorConfigurationDataPageService) {
        this.httpClient = httpClient;
        this.rxConnectorsDataPageService = rxConnectorsDataPageService;
        this.rxConnectorConfigurationDataPageService = rxConnectorConfigurationDataPageService;
        this.connectorConfigs = {};
        this.connectorProfiles = {};
    }
    getConnectors() {
        return this.rxConnectorsDataPageService.get().pipe(map$1((response) => {
            return response.data.map((connector) => ({
                id: connector.id,
                name: connector.name
            }));
        }));
    }
    getConnectorConfigurations(connectorId) {
        if (!this.connectorConfigs[connectorId]) {
            this.connectorConfigs[connectorId] = this.rxConnectorConfigurationDataPageService
                .get({
                params: {
                    connectorId: connectorId
                }
            })
                .pipe(map$1((response) => {
                return response.data.map((connectorConfig) => ({
                    id: connectorConfig.id,
                    name: connectorConfig.name,
                    profiles: connectorConfig.profiles
                }));
            }), shareReplay(1));
        }
        return this.connectorConfigs[connectorId];
    }
    getConnectorProfiles(connectorId, configId) {
        if (!this.connectorProfiles[configId]) {
            this.connectorProfiles[configId] = this.getConnectorConfigurations(connectorId).pipe(map$1((configs) => {
                const config = find(configs, { id: configId });
                return config.profiles;
            }));
        }
        return this.connectorProfiles[configId];
    }
}
RxConnectorConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationService, deps: [{ token: i1$2.HttpClient }, { token: RxConnectorsDataPageService }, { token: RxConnectorConfigurationDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });
RxConnectorConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxConnectorConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: RxConnectorsDataPageService }, { type: RxConnectorConfigurationDataPageService }]; } });

class ConnectorConfigurationEditorComponent extends RxModalClass {
    constructor(dockedPanelContext, formBuilder, rxRecordInstanceService, rxNotificationService, rxConnectorConfigurationService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.formBuilder = formBuilder;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxNotificationService = rxNotificationService;
        this.rxConnectorConfigurationService = rxConnectorConfigurationService;
        this.injector = injector;
        this.connectorProfiles = [];
        this.connectorList = [];
        this.connectorConfigurations = [];
    }
    ngOnInit() {
        super.ngOnInit();
        this.isNewConfiguration = this.dockedPanelContext.getData().isNewConfiguration;
        this.connectorList = this.dockedPanelContext.getData().connectorList;
        this.connectorConfigurationForm = this.formBuilder.group({
            configurationName: '',
            connector: [
                {
                    id: '',
                    name: ''
                }
            ],
            connectorConfiguration: [
                {
                    id: '',
                    name: ''
                }
            ],
            connectorProfile: [
                {
                    id: '',
                    name: ''
                }
            ]
        });
        if (!this.isNewConfiguration) {
            this.currentRecordInstance = this.rxRecordInstanceService.get(RX_CONNECTOR_CONFIGURATION.recordDefinitionName, this.dockedPanelContext.getData().recordId);
            this.currentRecordInstance.subscribe((recordInstance) => {
                this.connectorConfigurationForm
                    .get('configurationName')
                    .setValue(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value);
                this.connectorConfigurationForm.get('connector').setValue([
                    {
                        id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value,
                        name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value
                    }
                ]);
                this.connectorConfigurationForm.get('connectorConfiguration').setValue([
                    {
                        id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value,
                        name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value
                    }
                ]);
                this.connectorConfigurationForm.get('connectorProfile').setValue(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value
                    ? [
                        {
                            id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value,
                            name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value
                        }
                    ]
                    : []);
                this.loadConnectorConfigurations(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value);
                this.loadConnectorProfiles(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value);
            });
        }
    }
    isDirty() {
        return this.connectorConfigurationForm.dirty;
    }
    loadConnectorConfigurations(event) {
        if (this.isSelectionChangeEvent(event)) {
            this.resetFields();
        }
        this.loadingConfigs = true;
        const selectedConnectorId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;
        this.rxConnectorConfigurationService
            .getConnectorConfigurations(selectedConnectorId)
            .subscribe((configurations) => {
            this.connectorConfigurations = configurations;
            this.loadingConfigs = false;
        });
    }
    loadConnectorProfiles(event) {
        if (this.isSelectionChangeEvent(event)) {
            this.connectorConfigurationForm.get('connectorProfile').setValue([]);
        }
        this.loadingProfiles = true;
        const selectedConfigId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;
        const selectedConnectorId = this.connectorConfigurationForm.get('connector').value[0].id;
        this.rxConnectorConfigurationService
            .getConnectorProfiles(selectedConnectorId, selectedConfigId)
            .subscribe((profiles) => {
            this.connectorProfiles = profiles;
            this.loadingProfiles = false;
        });
    }
    saveConnectorConfiguration() {
        if (this.isNewConfiguration) {
            this.currentRecordInstance = this.rxRecordInstanceService.getNew(RX_CONNECTOR_CONFIGURATION.recordDefinitionName);
        }
        this.currentRecordInstance
            .pipe(map$1((recordInstance) => {
            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value =
                this.connectorConfigurationForm.value.connector[0].id;
            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value =
                this.connectorConfigurationForm.value.connector[0].name;
            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value =
                this.connectorConfigurationForm.value.connectorConfiguration[0].id;
            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value =
                this.connectorConfigurationForm.value.connectorConfiguration[0].name;
            if (this.connectorConfigurationForm.value.connectorProfile.length) {
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value =
                    this.connectorConfigurationForm.value.connectorProfile[0].id;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value =
                    this.connectorConfigurationForm.value.connectorProfile[0].name;
            }
            else {
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value = null;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value = null;
            }
            recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.description].value =
                this.connectorConfigurationForm.value.configurationName;
            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value =
                this.connectorConfigurationForm.value.configurationName;
            return recordInstance;
        }), switchMap((recordInstance) => {
            if (this.isNewConfiguration) {
                return this.rxRecordInstanceService.create(recordInstance);
            }
            else {
                return this.rxRecordInstanceService.save(recordInstance);
            }
        }))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage('Configuration saved successfully.');
            this.dockedPanelContext.close(null);
        });
    }
    optionFormatter(option) {
        return option.name;
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
    isSelectionChangeEvent(event) {
        return !isUndefined(event.options);
    }
    resetFields() {
        this.connectorProfiles = [];
        this.connectorConfigurations = [];
        this.connectorConfigurationForm.get('connectorConfiguration').setValue([]);
        this.connectorConfigurationForm.get('connectorProfile').setValue([]);
        this.connectorConfigurationForm.markAsPristine();
    }
}
ConnectorConfigurationEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationEditorComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i1$3.FormBuilder }, { token: i3$2.RxRecordInstanceService }, { token: i2.RxNotificationService }, { token: RxConnectorConfigurationService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ConnectorConfigurationEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorConfigurationEditorComponent, selector: "rx-connector-configuration-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"connectorConfigurationForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"configuration-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n      formControlName=\"configurationName\"\n      required=\"true\"\n      [readonly]=\"!isNewConfiguration\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.connector-type.label' | translate }}\"\n      rx-id=\"connector\"\n      formControlName=\"connector\"\n      [options]=\"connectorList\"\n      enableFilter=\"true\"\n      [optionFormatter]=\"optionFormatter\"\n      (onSelectionChange)=\"loadConnectorConfigurations($event)\"\n      [loadingState]=\"loadingConnectors\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.configuration.label' | translate }}\"\n      rx-id=\"connector-configuration\"\n      formControlName=\"connectorConfiguration\"\n      [options]=\"connectorConfigurations\"\n      [optionFormatter]=\"optionFormatter\"\n      enableFilter=\"true\"\n      (onSelectionChange)=\"loadConnectorProfiles($event)\"\n      [loadingState]=\"loadingConfigs\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.profile.label' | translate }}\"\n      rx-id=\"connector-profile\"\n      formControlName=\"connectorProfile\"\n      [options]=\"connectorProfiles\"\n      [optionFormatter]=\"optionFormatter\"\n      [loadingState]=\"loadingProfiles\"\n    >\n    </adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"connectorConfigurationForm.pristine || connectorConfigurationForm.invalid\"\n    (click)=\"saveConnectorConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" size=\"small\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-connector-configuration-editor',
                    templateUrl: './connector-configuration-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i1$3.FormBuilder }, { type: i3$2.RxRecordInstanceService }, { type: i2.RxNotificationService }, { type: RxConnectorConfigurationService }, { type: i0.Injector }]; } });

class ConnectorConfigurationAdminComponent {
    constructor(formBuilder, rxModalService, rxConnectorConfigurationService) {
        this.formBuilder = formBuilder;
        this.rxModalService = rxModalService;
        this.rxConnectorConfigurationService = rxConnectorConfigurationService;
        this.connectorList = [];
    }
    ngOnInit() {
        this.busySubscription = this.rxConnectorConfigurationService.getConnectors().subscribe((connectors) => {
            this.connectorList = connectors;
        }, (response) => {
            this.errorText = get(response, 'error[0].appendedText', 'Unknown error.');
        });
        this.gridConfig = of({
            actionButtons: [
                {
                    label: 'Edit',
                    style: 'tertiary',
                    icon: 'pencil',
                    actions: [
                        {
                            name: () => {
                                this.openConnectionConfiguration(this.grid.api.getFirstSelectedRow());
                            }
                        }
                    ]
                }
            ],
            recordDefinitionName: RX_CONNECTOR_CONFIGURATION.recordDefinitionName,
            enableRowSelection: RowSelectionMode.Single,
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: this.getColumns(),
            styles: 'flex-fill'
        });
    }
    newConnectionConfiguration() {
        this.openConnectorConfigurationEditor(true);
    }
    openConnectionConfiguration(selectedRecord) {
        this.openConnectorConfigurationEditor(false, selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id]);
    }
    getRecordDefinition() {
        return {
            fieldDefinitions: [
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_CONNECTOR_CONFIGURATION.fields.targetName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_CONNECTOR_CONFIGURATION.fields.connectorName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
    }
    getColumns() {
        return [
            {
                index: 0,
                title: 'Name',
                fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.targetName),
                clickable: true,
                actions: [
                    {
                        name: (previousAction, selectedRow) => this.openConnectionConfiguration(selectedRow)
                    }
                ]
            },
            {
                index: 1,
                title: 'Connector type',
                fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorName)
            },
            {
                index: 2,
                title: 'Configuration',
                fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName)
            },
            {
                index: 3,
                title: 'Profile',
                fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName)
            },
            {
                index: 4,
                title: 'ID',
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                visible: false
            }
        ];
    }
    openConnectorConfigurationEditor(isNewConfiguration, recordId) {
        return this.rxModalService
            .openDockedPanel({
            title: 'Connector configuration',
            content: ConnectorConfigurationEditorComponent,
            data: {
                connectorList: this.connectorList,
                isNewConfiguration,
                recordId
            }
        })
            .then(() => {
            this.grid.api.refresh().subscribe();
        })
            .catch(noop);
    }
}
ConnectorConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1.RxModalService }, { token: RxConnectorConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
ConnectorConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorConfigurationAdminComponent, selector: "rx-admin-connector-configuration", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true }, { propertyName: "connectorConfigurationTemplate", first: true, predicate: ["connectorConfigurationTemplate"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.header.title' | translate }}\"\n  [busy]=\"busySubscription\"\n>\n  <adapt-alert\n    [config]=\"{\n      title:\n        'com.bmc.arsys.rx.client.admin.connection-configuration.invalid-integration-service-configuration.message'\n        | translate,\n      content: errorText,\n      variant: 'danger',\n      dismissible: false\n    }\"\n    *ngIf=\"errorText\"\n  >\n  </adapt-alert>\n\n  <ng-container *ngIf=\"!errorText\">\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"newConnectionConfiguration()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-connector-configuration',
                    templateUrl: './connector-configuration.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1.RxModalService }, { type: RxConnectorConfigurationService }]; }, propDecorators: { grid: [{
                type: ViewChild,
                args: ['grid']
            }], connectorConfigurationTemplate: [{
                type: ViewChild,
                args: ['connectorConfigurationTemplate', { static: true }]
            }] } });

class ConnectorConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-connector-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ConnectorConfigurationAdminComponent),
            name: 'Connector configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ConnectorConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ConnectorConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationRegistrationModule, declarations: [ConnectorConfigurationAdminComponent, ConnectorConfigurationEditorComponent], imports: [CommonModule,
        AdaptButtonModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptRxTextfieldModule,
        ReactiveFormsModule,
        AdaptRxSelectModule,
        AdaptAlertModule,
        TranslateModule] });
ConnectorConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationRegistrationModule, imports: [[
            CommonModule,
            AdaptButtonModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptRxTextfieldModule,
            ReactiveFormsModule,
            AdaptRxSelectModule,
            AdaptAlertModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ConnectorConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ConnectorConfigurationAdminComponent, ConnectorConfigurationEditorComponent],
                    imports: [
                        CommonModule,
                        AdaptButtonModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptRxTextfieldModule,
                        ReactiveFormsModule,
                        AdaptRxSelectModule,
                        AdaptAlertModule,
                        TranslateModule
                    ],
                    entryComponents: [ConnectorConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxCustomDataSourceProviderPickerComponent extends ValueAccessor {
    constructor(translateService, renderer) {
        super();
        this.translateService = translateService;
        this.renderer = renderer;
        this.defaultText = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
    }
    setDropdownWidth() {
        const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);
        this.dropdownWidth = dropdownButton.clientWidth + 2;
    }
    selectProvider(providerName) {
        this.dropdown.close();
        this.value = providerName;
    }
}
RxCustomDataSourceProviderPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCustomDataSourceProviderPickerComponent, deps: [{ token: i4.TranslateService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
RxCustomDataSourceProviderPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxCustomDataSourceProviderPickerComponent, selector: "rx-custom-data-source-provider-picker", inputs: { options: "options" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: RxCustomDataSourceProviderPickerComponent,
            multi: true
        }
    ], viewQueries: [{ propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "dropdown", first: true, predicate: ["providerPicker"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"d-flex\">\n  <adapt-rx-control-label\n    *ngIf=\"options.label\"\n    [label]=\"options.label | translate\"\n    [showRequiredLabel]=\"options.required\"\n  ></adapt-rx-control-label>\n</div>\n\n<div class=\"dropdown\" adaptDropdown [autoClose]=\"'outside'\" [autoFocusFirst]=\"false\" #providerPicker=\"adaptDropdown\">\n  <button\n    rx-id=\"toggle-button\"\n    #dropdownButton\n    class=\"btn btn-secondary\"\n    (click)=\"setDropdownWidth()\"\n    adaptDropdownToggle\n    type=\"button\"\n  >\n    <span class=\"rx-selected-item rx-ellipsis\">\n      {{ (value | rxDefinitionNamePipe) || defaultText }}\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu p-0\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <ul class=\"providers\" *ngIf=\"options.providersTree.length\">\n      <li\n        class=\"provider rx-ellipsis\"\n        *ngFor=\"let providersTreeNode of options.providersTree\"\n        (click)=\"providersTreeNode.isExpanded = !providersTreeNode.isExpanded\"\n      >\n        <span\n          rx-id=\"expand-button\"\n          class=\"expand-arrow d-icon-angle_right\"\n          [class.open]=\"providersTreeNode.isExpanded\"\n        ></span>\n        <span> {{ providersTreeNode.label }} </span>\n\n        <div *ngIf=\"providersTreeNode.isExpanded\">\n          <button\n            class=\"dropdown-item rx-ellipsis\"\n            type=\"button\"\n            *ngFor=\"let provider of providersTreeNode.providers\"\n            (click)=\"$event.stopPropagation(); selectProvider(provider)\"\n            [class.active]=\"value === provider\"\n          >\n            <span>{{ provider | rxDefinitionNamePipe }}</span>\n          </button>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.expand-arrow{padding:5px;transition:.2s}.expand-arrow.open{transform:rotate(90deg)}.providers{overflow-y:auto;margin:0;list-style:none;padding:5px 0;width:100%;height:275px}.provider{width:100%;padding:0 5px;line-height:30px;cursor:pointer}span[rx-id=expand-button]{display:inline-flex;width:15px}.rx-selected-item{flex-grow:1}.dropdown-menu{height:330px}.dropdown-toggle{width:100%;display:flex;text-align:left}.dropdown-item{padding:0 15px 0 30px}\n"], components: [{ type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe, "rxDefinitionNamePipe": i2.RxDefinitionNamePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCustomDataSourceProviderPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-custom-data-source-provider-picker',
                    templateUrl: './custom-data-source-provider-picker.component.html',
                    styleUrls: ['./custom-data-source-provider-picker.component.scss'],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RxCustomDataSourceProviderPickerComponent,
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i4.TranslateService }, { type: i0.Renderer2 }]; }, propDecorators: { options: [{
                type: Input
            }], dropdownButton: [{
                type: ViewChild,
                args: ['dropdownButton', { static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['providerPicker', { static: true }]
            }] } });

const resourceTypes = {
    arSystem: {
        value: 'com.bmc.arsys.rx.services.datasource.domain.ARSystemDataSource',
        name: 'com.bmc.arsys.rx.client.admin.data-source-connections.ar-system.label'
    },
    custom: {
        value: 'com.bmc.arsys.rx.services.datasource.domain.CustomDataSource',
        name: 'com.bmc.arsys.rx.client.admin.data-source-connections.custom.label'
    },
    webApi: {
        value: 'com.bmc.arsys.rx.services.datasource.domain.WebApiDataSource',
        name: 'com.bmc.arsys.rx.client.admin.data-source-connections.web-api.label'
    }
};
const authTypes$1 = [
    {
        name: 'com.bmc.arsys.rx.client.admin.data-source-connections.rsso.label',
        value: 'rsso'
    },
    {
        name: 'com.bmc.arsys.rx.client.admin.data-source-connections.ras.label',
        value: 'ras'
    }
];
const RX_DATA_SOURCE_CONNECTIONS = {
    recordDefinitionName: 'Data Source',
    dataPageQueryType: 'com.bmc.arsys.rx.application.datasource.datapage.DataSourceDataPageQuery',
    dataSourceConnectionUrl: '/api/rx/application/datasource/configuration',
    resourceTypes,
    authTypes: authTypes$1,
    portMinValue: 0,
    portMaxValue: 65535,
    hostNameMaxLength: 254,
    pingConfigurationCommand: 'com.bmc.arsys.rx.application.datasource.command.ValidateDataSourceCommand',
    initialWizardContext: {
        dataSourceName: '',
        resourceType: resourceTypes.arSystem,
        hostName: '',
        portNumber: null,
        authType: head(authTypes$1).name,
        rasPassword: '',
        enforceAuthorization: false,
        webApiDataSourceGuid: '',
        isEditMode: false,
        isGeneralFormPristine: true
    }
};

class DataSourceConnectionGeneralComponent {
    constructor(rxWizardModalComponent, translateService) {
        this.rxWizardModalComponent = rxWizardModalComponent;
        this.translateService = translateService;
        this.dataSourceConfigTypes = Object.values(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).map((resourceType) => (Object.assign(Object.assign({}, resourceType), { name: this.translateService.instant(resourceType.name) })));
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.destroyed$ = new ReplaySubject(1);
        this.optionFormatter = (dataSourceOption) => {
            return get(dataSourceOption, 'name', this.defaultSelection);
        };
    }
    ngOnInit() {
        this.rxWizardModalComponent.context$.pipe(take(1)).subscribe((context) => {
            this.generalForm = new FormGroup({
                dataSourceName: new FormControl(context.dataSourceName, [Validators.required]),
                resourceType: new FormControl([context.resourceType], [Validators.required])
            });
            if (this.generalForm.invalid) {
                this.rxWizardModalComponent.api.disableNextButton();
            }
        });
        this.generalForm.valueChanges
            .pipe(withLatestFrom(this.rxWizardModalComponent.context$), takeUntil(this.destroyed$))
            .subscribe(([value, context]) => {
            this.rxWizardModalComponent.api.updateContext(Object.assign(Object.assign({}, value), { resourceType: head(value.resourceType), isGeneralFormPristine: this.generalForm.pristine }));
            if (this.generalForm.valid) {
                this.rxWizardModalComponent.api.enableNextButton();
            }
            else {
                this.rxWizardModalComponent.api.disableNextButton();
            }
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
DataSourceConnectionGeneralComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionGeneralComponent, deps: [{ token: i4$1.RxWizardModalComponent }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
DataSourceConnectionGeneralComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionGeneralComponent, selector: "rx-data-source-connection-general", ngImport: i0, template: "<form [formGroup]=\"generalForm\">\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <adapt-rx-textfield\n        label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n        name=\"dataSourceName\"\n        formControlName=\"dataSourceName\"\n        rx-id=\"name-field\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <adapt-rx-select\n        label=\"{{ 'com.bmc.arsys.rx.client.common.item-type.label' | translate }}\"\n        name=\"resourceType\"\n        class=\"d-block form-group\"\n        rx-id=\"type-field\"\n        formControlName=\"resourceType\"\n        [options]=\"dataSourceConfigTypes\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select{max-width:400px}\n"], components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionGeneralComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-data-source-connection-general',
                    templateUrl: './data-source-connection-general.component.html',
                    styleUrls: ['./data-source-connection-general.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i4$1.RxWizardModalComponent }, { type: i4.TranslateService }]; } });

class RxCustomDataSourceProviderDataPageService extends DataPage {
    constructor(injector) {
        super(injector, 'com.bmc.arsys.rx.application.query.CustomDataSourceProviderDataPageQuery');
        this.injector = injector;
    }
}
RxCustomDataSourceProviderDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCustomDataSourceProviderDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxCustomDataSourceProviderDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCustomDataSourceProviderDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxCustomDataSourceProviderDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

class DataSourceConnectionPropertiesComponent {
    constructor(rxCognitiveServiceService, rxRecordInstanceDataPageService, rxCustomDataSourceProviderDataPageService, rxDefinitionNameService, rxWizardModalComponent, translateService, rxGlobalCacheService) {
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxCustomDataSourceProviderDataPageService = rxCustomDataSourceProviderDataPageService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxWizardModalComponent = rxWizardModalComponent;
        this.translateService = translateService;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.isRasPasswordDisabled = true;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
        this.webApis = [];
        this.customDataSourceProvidersPickerOptions = {
            label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.custom-data-source-provider.label',
            required: true,
            providersTree: []
        };
        this.dataSourceAuthenticationTypes = RX_DATA_SOURCE_CONNECTIONS.authTypes.map((authType) => (Object.assign(Object.assign({}, authType), { name: this.translateService.instant(authType.name) })));
        this.isResourceTypeArSystem$ = this.rxWizardModalComponent.context$.pipe(map$1((context) => context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value), shareReplay(1));
        this.isResourceTypeCustom$ = this.rxWizardModalComponent.context$.pipe(map$1((context) => context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value), shareReplay(1));
        this.isResourceTypeWebApi$ = this.rxWizardModalComponent.context$.pipe(map$1((context) => context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value), shareReplay(1));
        this.destroyed$ = new ReplaySubject(1);
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.isDataLoaded = {};
        this.optionFormatter = (dataSourceOption) => get(dataSourceOption, 'name', this.defaultSelection);
    }
    ngOnInit() {
        this.rxWizardModalComponent.context$.pipe(take(1)).subscribe((context) => {
            this.connectionPropertiesForm = new FormGroup({
                hostName: new FormControl(context.hostName, [Validators.required]),
                port: new FormControl(context.port, [Validators.required]),
                authType: new FormControl(context.authType, [Validators.required]),
                rasPassword: new FormControl(context.rasPassword),
                enforceAuthorization: new FormControl(context.enforceAuthorization),
                selectedWebApi: new FormControl(context.webApiDataSourceGuid, [Validators.required]),
                providerId: new FormControl(context.providerId, [Validators.required])
            });
        });
        this.rxWizardModalComponent.context$.pipe(takeUntil(this.destroyed$)).subscribe((context) => {
            const arSystemControls = ['hostName', 'port', 'authType', 'rasPassword', 'enforceAuthorization'];
            if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value) {
                arSystemControls.forEach((control) => this.connectionPropertiesForm.get(control).enable({ emitEvent: false }));
                this.connectionPropertiesForm.get('selectedWebApi').disable({ emitEvent: false });
                this.connectionPropertiesForm.get('providerId').disable({ emitEvent: false });
            }
            else if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value) {
                arSystemControls.forEach((control) => this.connectionPropertiesForm.get(control).disable({ emitEvent: false }));
                this.connectionPropertiesForm.get('selectedWebApi').enable({ emitEvent: false });
                this.connectionPropertiesForm.get('providerId').disable({ emitEvent: false });
            }
            else if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value) {
                arSystemControls.forEach((control) => this.connectionPropertiesForm.get(control).disable({ emitEvent: false }));
                this.connectionPropertiesForm.get('selectedWebApi').disable({ emitEvent: false });
                this.connectionPropertiesForm.get('providerId').enable({ emitEvent: false });
            }
            this.loadCustomDataSourceProviders(context);
            this.loadWebApis(context);
            if (this.connectionPropertiesForm.valid && !context.isGeneralFormPristine) {
                this.rxWizardModalComponent.api.enableFinishButton();
            }
            else {
                this.rxWizardModalComponent.api.disableFinishButton();
            }
        });
        this.connectionPropertiesForm.valueChanges
            .pipe(withLatestFrom(this.isResourceTypeWebApi$), takeUntil(this.destroyed$))
            .subscribe(([value, isResourceTypeWebApi]) => {
            this.rxWizardModalComponent.api.updateContext(omit(value, ['selectedWebApi']));
            if (!isResourceTypeWebApi) {
                this.connectionTestStatus =
                    this.connectionPropertiesForm.pristine || this.connectionPropertiesForm.invalid
                        ? ConnectionTestStatus.Invalid
                        : ConnectionTestStatus.Unknown;
            }
        });
        this.connectionPropertiesForm.valueChanges
            .pipe(withLatestFrom(this.rxWizardModalComponent.context$), takeUntil(this.destroyed$))
            .subscribe(([_, context]) => {
            if (this.connectionPropertiesForm.invalid ||
                (this.connectionPropertiesForm.pristine && context.isGeneralFormPristine)) {
                this.rxWizardModalComponent.api.disableFinishButton();
            }
            else {
                this.rxWizardModalComponent.api.enableFinishButton();
            }
        });
    }
    setAuthType(type) {
        const newContext = {
            authType: type
        };
        this.isRasPasswordDisabled = type !== RX_DATA_SOURCE_CONNECTIONS.authTypes[1].name;
        if (this.isRasPasswordDisabled) {
            newContext.rasPassword = null;
        }
        this.rxWizardModalComponent.api.updateContext(newContext);
    }
    onTestConnection() {
        this.rxWizardModalComponent.context$
            .pipe(switchMap((context) => this.rxCognitiveServiceService.testConnection({
            resourceType: RX_DATA_SOURCE_CONNECTIONS.pingConfigurationCommand,
            dataSource: {
                resourceType: RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value,
                authType: context.authType,
                hostName: context.hostName,
                port: context.port,
                rasPassword: context.rasPassword,
                enforceAuthorization: context.enforceAuthorization
            }
        })), catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    loadCustomDataSourceProviders(context) {
        if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value &&
            !this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value]) {
            const globalLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
            this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value] = true;
            this.rxCustomDataSourceProviderDataPageService
                .get()
                .pipe(switchMap((dataPage) => forkJoin(dataPage.data.map((customDataSourceProvider) => {
                const bundleId = this.rxDefinitionNameService.getBundleId(customDataSourceProvider.name) || globalLabel;
                return this.rxGlobalCacheService.getBundleFriendlyName(bundleId, bundleId).pipe(map$1((bundleFriendlyName) => ({
                    bundleFriendlyName,
                    value: customDataSourceProvider.name
                })));
            }))))
                .subscribe((providers) => {
                var _a;
                const customDataSourceProvidersByBundleFriendlyName = groupBy(providers, 'bundleFriendlyName');
                this.customDataSourceProvidersPickerOptions.providersTree = Object.keys(customDataSourceProvidersByBundleFriendlyName)
                    .map((bundleFriendlyName) => ({
                    label: bundleFriendlyName,
                    isExpanded: true,
                    providers: customDataSourceProvidersByBundleFriendlyName[bundleFriendlyName]
                        .map((provider) => provider.value)
                        .sort()
                }))
                    .sort((provider1, provider2) => {
                    if (provider1.label === globalLabel) {
                        return -1;
                    }
                    return provider1.label > provider2.label ? 1 : -1;
                });
                this.connectionPropertiesForm
                    .get('providerId')
                    .setValue((_a = find(providers, (provider) => provider.value === context.providerId)) === null || _a === void 0 ? void 0 : _a.value, {
                    emitEvent: false
                });
            });
        }
    }
    loadWebApis(context) {
        if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value &&
            !this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value]) {
            const params = {
                recorddefinition: 'WebAPI Connection'
            };
            this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value] = true;
            this.rxRecordInstanceDataPageService.post({ params }).subscribe((result) => {
                this.webApis = result.data.map((webApi) => ({
                    name: webApi[RX_RECORD_DEFINITION.coreFieldIds.description],
                    id: webApi[RX_RECORD_DEFINITION.coreFieldIds.id]
                }));
                this.connectionPropertiesForm
                    .get('selectedWebApi')
                    .setValue(filter(this.webApis, ['id', context.webApiDataSourceGuid]), { emitEvent: false });
            });
        }
    }
    onWebApiChange(event) {
        this.rxWizardModalComponent.api.updateContext({
            webApiDataSourceGuid: event.options[0].id
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
DataSourceConnectionPropertiesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionPropertiesComponent, deps: [{ token: RxCognitiveServiceService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: RxCustomDataSourceProviderDataPageService }, { token: i2.RxDefinitionNameService }, { token: i4$1.RxWizardModalComponent }, { token: i4.TranslateService }, { token: i2.RxGlobalCacheService }], target: i0.ɵɵFactoryTarget.Component });
DataSourceConnectionPropertiesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionPropertiesComponent, selector: "rx-data-source-connection-properties", ngImport: i0, template: "<form [formGroup]=\"connectionPropertiesForm\">\n  <ng-container *ngIf=\"isResourceTypeArSystem$ | async\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textfield\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label' | translate }}\"\n          name=\"hostName\"\n          formControlName=\"hostName\"\n          rx-id=\"host-name-field\"\n          class=\"d-block form-group\"\n          maxlength=\"254\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-counter\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label' | translate }}\"\n          name=\"port\"\n          adaptRange\n          [formControl]=\"connectionPropertiesForm.controls.port\"\n          [min]=\"0\"\n          [max]=\"65535\"\n          adaptIntegerNumber\n          rx-id=\"port-field\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-counter>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-radiobutton-group\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label' | translate\n          }}\"\n          name=\"authType\"\n          rx-id=\"authentication-field\"\n          formControlName=\"authType\"\n          (ngModelChange)=\"setAuthType($event)\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let selectionValue of dataSourceAuthenticationTypes\"\n            [value]=\"selectionValue.name\"\n            [label]=\"selectionValue.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textfield\n          formControlName=\"rasPassword\"\n          [isPassword]=\"true\"\n          name=\"password\"\n          rx-id=\"password-field\"\n          class=\"d-block form-group\"\n          [disabled]=\"isRasPasswordDisabled\"\n        >\n        </adapt-rx-textfield>\n      </div>\n      <div class=\"col-md-6\">\n        <adapt-rx-checkbox\n          name=\"permission\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.use-current-user-permissions.label'\n              | translate\n          }}\"\n          rx-id=\"permission-field\"\n          formControlName=\"enforceAuthorization\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.permission.tooltip' | translate,\n            placement: 'top',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-checkbox>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-8 mt-2\">\n        <rx-connection-tester\n          buttonType=\"secondary\"\n          [status]=\"connectionTestStatus\"\n          (testConnection)=\"onTestConnection()\"\n          rx-id=\"test-connection-button\"\n        ></rx-connection-tester>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isResourceTypeCustom$ | async\">\n    <div class=\"row\">\n      <rx-custom-data-source-provider-picker\n        class=\"col-md-6\"\n        name=\"providerId\"\n        formControlName=\"providerId\"\n        rx-id=\"custom-data-source-provider-field\"\n        [options]=\"customDataSourceProvidersPickerOptions\"\n      ></rx-custom-data-source-provider-picker>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isResourceTypeWebApi$ | async\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.web-api-connection.label' | translate\n          }}\"\n          name=\"webApiConnection\"\n          class=\"d-block form-group\"\n          rx-id=\"web-api-connection-field\"\n          [options]=\"webApis\"\n          formControlName=\"selectedWebApi\"\n          (onSelectionChange)=\"onWebApiChange($event)\"\n          [optionFormatter]=\"optionFormatter\"\n        >\n        </adapt-rx-select>\n      </div>\n    </div>\n  </ng-container>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select,adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: RxCustomDataSourceProviderPickerComponent, selector: "rx-custom-data-source-provider-picker", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i8.AsyncPipe, "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionPropertiesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-data-source-connection-properties',
                    templateUrl: './data-source-connection-properties.component.html',
                    styleUrls: ['./data-source-connection-properties.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxCognitiveServiceService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: RxCustomDataSourceProviderDataPageService }, { type: i2.RxDefinitionNameService }, { type: i4$1.RxWizardModalComponent }, { type: i4.TranslateService }, { type: i2.RxGlobalCacheService }]; } });

class RxDataSourceConnectionsService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getDataSourceConnection(connectionId) {
        return this.httpClient.get(`${RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl}/${connectionId}`);
    }
    createDataSourceConnection(dataSourceConnection) {
        return this.httpClient.post(RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl, dataSourceConnection);
    }
    updateDataSourceConnection(connectionId, dataSourceConnection) {
        return this.httpClient.put(`${RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl}/${connectionId}`, dataSourceConnection);
    }
    deleteDataSourceConnections(recordInstanceIds) {
        return forkJoin(map(recordInstanceIds, (id) => this.httpClient.delete(`${RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl}/${id}`)));
    }
}
RxDataSourceConnectionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxDataSourceConnectionsService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxDataSourceConnectionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxDataSourceConnectionsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxDataSourceConnectionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class DataSourceConnectionsAdminComponent {
    constructor(rxModalService, rxDataPageService, rxDataSourceConnectionsService, rxNotificationService, adaptModalService, componentFactoryResolver, rxWizardService, translateService) {
        this.rxModalService = rxModalService;
        this.rxDataPageService = rxDataPageService;
        this.rxDataSourceConnectionsService = rxDataSourceConnectionsService;
        this.rxNotificationService = rxNotificationService;
        this.adaptModalService = adaptModalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxWizardService = rxWizardService;
        this.translateService = translateService;
        this.getData = (queryParams) => {
            delete queryParams.searchText;
            delete queryParams.shouldIncludeTotalSize;
            return this.resource.get({ params: queryParams });
        };
        this.resource = this.rxDataPageService.withType(RX_DATA_SOURCE_CONNECTIONS.dataPageQueryType);
    }
    ngOnInit() {
        RX_DATA_SOURCE_CONNECTIONS.resourceTypes = Object.entries(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).reduce((resourceTypesWithTranslatedName, [key, resourceType]) => (Object.assign(Object.assign({}, resourceTypesWithTranslatedName), { [key]: {
                value: resourceType.value,
                name: this.translateService.instant(resourceType.name)
            } })), {});
        RX_DATA_SOURCE_CONNECTIONS.authTypes = RX_DATA_SOURCE_CONNECTIONS.authTypes.map((authType) => (Object.assign(Object.assign({}, authType), { name: this.translateService.instant(authType.name) })));
        RX_DATA_SOURCE_CONNECTIONS.initialWizardContext.resourceType = RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem;
        RX_DATA_SOURCE_CONNECTIONS.initialWizardContext.authType = RX_DATA_SOURCE_CONNECTIONS.authTypes[0].name;
        const gridColumns = [
            {
                index: 0,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                visible: false
            },
            {
                index: 1,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.description),
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.editDataSourceConnection(lastActionRow)
                    }
                ]
            },
            {
                index: 2,
                fieldId: String(RX_CONNECTION_MAPPING.dataSource.fields.sourceType),
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.source-type.title')
            }
        ];
        const recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.description,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_CONNECTION_MAPPING.dataSource.fields.sourceType,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const actionButtons = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                icon: 'trash',
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .confirm({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: RX_MODAL.modalStyles.warning,
                                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.delete-confirmation.message')
                            })
                                .then((result) => {
                                if (result) {
                                    const selectedDataSourceConnections = this.dataSourceConnectionsGrid.api.getSelectedRows();
                                    const selectedDataSourceConnectionsIds = map(selectedDataSourceConnections, RX_RECORD_DEFINITION.coreFieldIds.id);
                                    this.rxDataSourceConnectionsService
                                        .deleteDataSourceConnections(selectedDataSourceConnectionsIds)
                                        .subscribe(() => {
                                        this.rxNotificationService.addSuccessMessage('Data source connection(s) deleted successfully.');
                                        this.refreshDataSourceConnectionsGrid();
                                    });
                                }
                            });
                        }
                    }
                ]
            }
        ];
        this.recordGridConfig = of({
            enableFiltering: true,
            columns: gridColumns,
            getRecordDefinition: () => of(recordDefinition),
            enableRowSelection: RowSelectionMode.Multiple,
            recordDefinitionName: RX_DATA_SOURCE_CONNECTIONS.recordDefinitionName,
            actionButtons: actionButtons,
            getData: this.getData,
            styles: 'flex-fill'
        });
    }
    getCellValue(dataItem, column) {
        return dataItem[column.field];
    }
    createDataSourceConnection() {
        this.wizardTitle = this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.new-data-source-connection.label');
        this.finishButtonLabel = 'Save';
        this.wizardConfigData = cloneDeep(RX_DATA_SOURCE_CONNECTIONS.initialWizardContext);
        this.openWizard();
    }
    editDataSourceConnection(dataItem) {
        this.wizardTitle = this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.edit-data-source-connection.label');
        this.finishButtonLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.update.button.label');
        this.selectedConnectionId = dataItem[RX_RECORD_DEFINITION.coreFieldIds.id];
        this.rxDataSourceConnectionsService.getDataSourceConnection(this.selectedConnectionId).subscribe((result) => {
            this.wizardConfigData = {
                dataSourceName: result.dataSourceName,
                resourceType: Object.values(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).find((resourceType) => resourceType.value === result.resourceType),
                hostName: result.hostName,
                port: result.port,
                authType: result.authType,
                rasPassword: result.rasPassword,
                enforceAuthorization: result.enforceAuthorization,
                webApiDataSourceGuid: result.webApiDataSourceGuid,
                isEditMode: true,
                isGeneralFormPristine: true,
                providerId: result.providerId
            };
            this.openWizard();
        });
    }
    refreshDataSourceConnectionsGrid() {
        this.dataSourceConnectionsGrid.api.refresh().subscribe();
    }
    openWizard() {
        const dataSourceWizardConfig = {
            title: this.wizardTitle,
            allowFinish: true,
            finishButtonLabel: this.finishButtonLabel,
            steps: [
                {
                    id: 'general',
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionGeneralComponent)
                },
                {
                    id: 'connection-properties',
                    name: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.connection-properties.label'),
                    componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionPropertiesComponent)
                }
            ]
        };
        this.rxWizardService
            .open({
            context: this.wizardConfigData,
            options: dataSourceWizardConfig
        })
            .then((result) => {
            if (result) {
                this.save();
            }
        });
    }
    save() {
        let dataSourceConnection = {
            dataSourceName: this.wizardConfigData.dataSourceName,
            resourceType: this.wizardConfigData.resourceType.value,
            hostName: this.wizardConfigData.hostName,
            port: this.wizardConfigData.port,
            rasPassword: this.wizardConfigData.rasPassword || null,
            authType: this.wizardConfigData.authType,
            enforceAuthorization: this.wizardConfigData.enforceAuthorization,
            providerId: this.wizardConfigData.providerId
        };
        if (this.wizardConfigData.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value) {
            dataSourceConnection = pick(dataSourceConnection, ['dataSourceName', 'resourceType']);
            dataSourceConnection.webApiDataSourceGuid = this.wizardConfigData.webApiDataSourceGuid;
        }
        else if (this.wizardConfigData.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value) {
            dataSourceConnection = pick(dataSourceConnection, ['dataSourceName', 'resourceType', 'providerId']);
        }
        const writeEvent = this.wizardConfigData.isEditMode
            ? this.rxDataSourceConnectionsService.updateDataSourceConnection(this.selectedConnectionId, dataSourceConnection)
            : this.rxDataSourceConnectionsService.createDataSourceConnection(dataSourceConnection);
        writeEvent.subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.edit-data-source-connection-saved.message'));
            this.refreshDataSourceConnectionsGrid();
        });
    }
}
DataSourceConnectionsAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsAdminComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxDataPageFactoryService }, { token: RxDataSourceConnectionsService }, { token: i2.RxNotificationService }, { token: i1$1.AdaptModalService }, { token: i0.ComponentFactoryResolver }, { token: i4$1.RxWizardService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
DataSourceConnectionsAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionsAdminComponent, selector: "rx-admin-data-source-connections", viewQueries: [{ propertyName: "dataSourceConnectionsGrid", first: true, predicate: ["dataSourceConnectionsGrid"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connections.header.title' | translate }}\">\n  <ng-container>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"createDataSourceConnection()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #dataSourceConnectionsGrid [config]=\"recordGridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-data-source-connections',
                    templateUrl: './data-source-connections.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxDataPageFactoryService }, { type: RxDataSourceConnectionsService }, { type: i2.RxNotificationService }, { type: i1$1.AdaptModalService }, { type: i0.ComponentFactoryResolver }, { type: i4$1.RxWizardService }, { type: i4.TranslateService }]; }, propDecorators: { dataSourceConnectionsGrid: [{
                type: ViewChild,
                args: ['dataSourceConnectionsGrid', { static: true }]
            }] } });

class DataSourceConnectionsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-data-source-connections',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionsAdminComponent),
            name: 'Data source connections',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
DataSourceConnectionsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
DataSourceConnectionsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsRegistrationModule, declarations: [DataSourceConnectionsAdminComponent,
        DataSourceConnectionGeneralComponent,
        DataSourceConnectionPropertiesComponent,
        RxCustomDataSourceProviderPickerComponent], imports: [AdaptButtonModule,
        AdaptDropdownModule,
        AdaptRxCheckboxModule,
        AdaptRxCounterModule,
        AdaptRxFormControlModule,
        AdaptRxRadiobuttonModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptRxValidatorsModule,
        AdaptTreeModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        RecordGridModule,
        RxConnectionTesterModule,
        RxDefinitionModule,
        RxWizardModule,
        TranslateModule] });
DataSourceConnectionsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsRegistrationModule, imports: [[
            AdaptButtonModule,
            AdaptDropdownModule,
            AdaptRxCheckboxModule,
            AdaptRxCounterModule,
            AdaptRxFormControlModule,
            AdaptRxRadiobuttonModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptRxValidatorsModule,
            AdaptTreeModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            RecordGridModule,
            RxConnectionTesterModule,
            RxDefinitionModule,
            RxWizardModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DataSourceConnectionsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        DataSourceConnectionsAdminComponent,
                        DataSourceConnectionGeneralComponent,
                        DataSourceConnectionPropertiesComponent,
                        RxCustomDataSourceProviderPickerComponent
                    ],
                    imports: [
                        AdaptButtonModule,
                        AdaptDropdownModule,
                        AdaptRxCheckboxModule,
                        AdaptRxCounterModule,
                        AdaptRxFormControlModule,
                        AdaptRxRadiobuttonModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptRxValidatorsModule,
                        AdaptTreeModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        RecordGridModule,
                        RxConnectionTesterModule,
                        RxDefinitionModule,
                        RxWizardModule,
                        TranslateModule
                    ],
                    entryComponents: [
                        DataSourceConnectionsAdminComponent,
                        DataSourceConnectionGeneralComponent,
                        DataSourceConnectionPropertiesComponent
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const aliasTypeFieldId = 56150;
const aliasTypeDefaultValue = 'email';
const incomingMailboxType = 0;
const outgoingMailboxType = 1;
const RX_EMAIL_PROFILES = {
    aliasMapping: {
        recordDefinitionName: 'Alias Mapping',
        queryExpression: `'${aliasTypeFieldId}' = "${aliasTypeDefaultValue}"`,
        fieldIds: {
            aliasType: {
                id: aliasTypeFieldId,
                defaultValue: aliasTypeDefaultValue
            },
            applicationId: 56151,
            applicationName: 56152,
            aliasName: 56153,
            aliasValue: 56154,
            description: RX_RECORD_DEFINITION.coreFieldIds.description,
            assignee: RX_RECORD_DEFINITION.coreFieldIds.assignee,
            status: RX_RECORD_DEFINITION.coreFieldIds.status
        },
        mailboxType: {
            outgoing: 0,
            incoming: 1
        },
        status: {
            new: 0,
            assigned: 1
        }
    },
    mailbox: {
        recordDefinitionName: 'AR System Email Mailbox Configuration',
        queryExpression: `'${RX_RECORD_DEFINITION.coreFieldIds.status}' = "0"`,
        fieldIds: {
            mailboxName: {
                id: 18037,
                label: 'Mailbox name'
            },
            mailboxFunction: 18049
        },
        mailboxFunctions: {
            incoming: {
                id: incomingMailboxType,
                label: 'com.bmc.arsys.rx.client.admin.email-profiles.incoming-mailbox.label',
                value: String(incomingMailboxType)
            },
            outgoing: {
                id: outgoingMailboxType,
                label: 'com.bmc.arsys.rx.client.admin.email-profiles.outgoing-mailbox.label',
                value: String(outgoingMailboxType)
            }
        }
    }
};

class CreateEmailProfileComponent extends RxModalClass {
    constructor(formBuilder, rxGlobalCacheService, rxRecordInstanceDataPageService, dockedPanelContext, injector) {
        super(dockedPanelContext, injector);
        this.formBuilder = formBuilder;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.dockedPanelContext = dockedPanelContext;
        this.injector = injector;
        this.mailboxFunctions = RX_EMAIL_PROFILES.mailbox.mailboxFunctions;
        this.bundleOptions = [];
        this.mailboxOptions = [];
        this.availableMailboxOptions = [];
        this.validDefinitionNameRegex = RX_RECORD_DEFINITION.validDefinitionNameRegex;
        this.subscription = new Subscription();
    }
    ngOnInit() {
        super.ngOnInit();
        this.emailProfile = this.dockedPanelContext.getData().profile;
        this.createEmailProfileFormGroup = this.formBuilder.group({
            profileName: '',
            mailboxFunction: this.mailboxFunctions.incoming.value,
            mailbox: [],
            application: []
        });
        forkJoin({
            bundleDescriptors: this.rxGlobalCacheService.getBundleDescriptors(),
            mailboxes: this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: RX_EMAIL_PROFILES.mailbox.recordDefinitionName,
                    queryExpression: RX_EMAIL_PROFILES.mailbox.queryExpression
                }
            })
        }).subscribe((result) => {
            this.bundleOptions = reject(result.bundleDescriptors, (bundleDescriptor) => {
                return includes([RX_APPLICATION.innovationStudioBundleId, RX_APPLICATION.platformBundleId], bundleDescriptor.id);
            }).sort((a, b) => a.friendlyName.localeCompare(b.friendlyName));
            this.availableMailboxOptions = result.mailboxes.data;
            if (this.emailProfile) {
                this.createEmailProfileFormGroup.controls.mailboxFunction.disable();
                this.loadEmailProfileData();
            }
            else {
                this.filterMailboxes(this.mailboxFunctions.incoming.value);
            }
            this.subscription = this.createEmailProfileFormGroup
                .get('mailboxFunction')
                .valueChanges.subscribe((mailboxFunctionName) => {
                this.createEmailProfileFormGroup.controls.mailbox.setValue([]);
                this.filterMailboxes(mailboxFunctionName);
            });
        });
    }
    isDirty() {
        return this.createEmailProfileFormGroup.dirty;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    filterMailboxes(mailBoxFunctionName) {
        this.mailboxOptions = filter(this.availableMailboxOptions, (mailbox) => {
            return mailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxFunction] === parseInt(mailBoxFunctionName, 10);
        });
    }
    loadEmailProfileData() {
        let selectedMailboxType = '';
        if (this.emailProfile.mailboxType === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.incoming.id) {
            selectedMailboxType = this.mailboxFunctions.incoming.value;
        }
        else if (this.emailProfile.mailboxType === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.outgoing.id) {
            selectedMailboxType = this.mailboxFunctions.outgoing.value;
        }
        this.filterMailboxes(selectedMailboxType);
        const selectedApplication = this.bundleOptions.find((bundle) => bundle.id === this.emailProfile.application);
        const selectedMailbox = this.availableMailboxOptions.find((mailbox) => mailbox[RX_RECORD_DEFINITION.coreFieldIds.id] === this.emailProfile.mailbox);
        this.createEmailProfileFormGroup.patchValue({
            profileName: this.emailProfile.profileName,
            mailboxFunction: selectedMailboxType,
            mailbox: selectedMailbox ? [selectedMailbox] : [],
            application: selectedApplication ? [selectedApplication] : []
        });
    }
    bundleNameFormatter(bundleOption) {
        return bundleOption.friendlyName;
    }
    mailboxNameFormatter(mailboxOption) {
        return mailboxOption[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxName.id];
    }
    save() {
        this.dockedPanelContext.close(this.createEmailProfileFormGroup.getRawValue());
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
CreateEmailProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CreateEmailProfileComponent, deps: [{ token: i1$3.FormBuilder }, { token: i2.RxGlobalCacheService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i1$1.DockedPanelContext }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
CreateEmailProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CreateEmailProfileComponent, selector: "rx-create-email-profile", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"createEmailProfileFormGroup\">\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"profile-name\"\n      formControlName=\"profileName\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.profile-name.label' | translate }}\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"validDefinitionNameRegex\"\n    ></adapt-rx-textfield>\n\n    <adapt-rx-radiobutton-group\n      class=\"d-block form-group\"\n      rx-id=\"mailbox-function\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.mailbox-function.label' | translate }}\"\n      required\n      [formControl]=\"createEmailProfileFormGroup.controls.mailboxFunction\"\n    >\n      <adapt-rx-radiobutton\n        class=\"mb-0 mt-0 radio-inline\"\n        *ngFor=\"let mailboxFunction of mailboxFunctions | keyvalue\"\n        [value]=\"mailboxFunction.value.value\"\n        [label]=\"mailboxFunction.value.label | translate\"\n      ></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-select\n      class=\"d-block form-group\"\n      formControlName=\"mailbox\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.mailbox.label' | translate }}\"\n      rx-id=\"mailbox\"\n      required\n      [options]=\"mailboxOptions\"\n      [optionFormatter]=\"mailboxNameFormatter\"\n    ></adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"d-block form-group\"\n      emptyOption=\"true\"\n      formControlName=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.application.label' | translate }}\"\n      rx-id=\"application\"\n      [options]=\"bundleOptions\"\n      [optionFormatter]=\"bundleNameFormatter\"\n    ></adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    [disabled]=\"createEmailProfileFormGroup.invalid || createEmailProfileFormGroup.pristine\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe, "keyvalue": i8.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: CreateEmailProfileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-create-email-profile',
                    templateUrl: './create-email-profile.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i2.RxGlobalCacheService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i1$1.DockedPanelContext }, { type: i0.Injector }]; } });

class RxEmailProfilesService {
    constructor(rxRecordInstanceService) {
        this.rxRecordInstanceService = rxRecordInstanceService;
    }
    deleteEmailProfiles(recordDefinitionName, recordInstanceIds) {
        return forkJoin(map(recordInstanceIds, (id) => {
            return this.rxRecordInstanceService.delete(recordDefinitionName, id);
        }));
    }
}
RxEmailProfilesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxEmailProfilesService, deps: [{ token: i3$2.RxRecordInstanceService }], target: i0.ɵɵFactoryTarget.Injectable });
RxEmailProfilesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxEmailProfilesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxEmailProfilesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i3$2.RxRecordInstanceService }]; } });

class EmailProfilesAdminComponent {
    constructor(rxRecordInstanceDataPageService, rxRecordInstanceService, rxNotificationService, rxModalService, rxEmailProfilesService, translateService) {
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.rxEmailProfilesService = rxEmailProfilesService;
        this.translateService = translateService;
        this.getData = (queryParams) => {
            delete queryParams.searchText;
            delete queryParams.shouldIncludeTotalSize;
            queryParams.recorddefinition = RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName;
            queryParams.propertySelection.push(`${RX_RECORD_DEFINITION.coreFieldIds.status}`, `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId}`);
            if (!queryParams.queryExpression) {
                queryParams.queryExpression = RX_EMAIL_PROFILES.aliasMapping.queryExpression;
            }
            else {
                queryParams.queryExpression += `AND ${RX_EMAIL_PROFILES.aliasMapping.queryExpression}`;
            }
            return this.rxRecordInstanceDataPageService.post({ params: queryParams }).pipe(switchMap((aliasMappings) => {
                if (aliasMappings.totalSize === 0) {
                    return of(aliasMappings);
                }
                else {
                    let expression = '';
                    aliasMappings.data.forEach((aliasMapping) => {
                        if (aliasMapping[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue] !== null) {
                            if (!isEmpty(expression)) {
                                expression += ' OR ';
                            }
                            expression += `'${RX_RECORD_DEFINITION.coreFieldIds.id}' = "${aliasMapping[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue]}"`;
                        }
                    });
                    const query = {
                        queryExpression: RX_EMAIL_PROFILES.mailbox.queryExpression,
                        recorddefinition: RX_EMAIL_PROFILES.mailbox.recordDefinitionName
                    };
                    if (!isEmpty(expression)) {
                        query.queryExpression += ` AND ((${expression}))`;
                    }
                    return this.rxRecordInstanceDataPageService.post({ params: query }).pipe(map$1((outgoingMailboxes) => {
                        if (outgoingMailboxes.totalSize === 0) {
                            return aliasMappings;
                        }
                        else {
                            outgoingMailboxes.data.forEach((outgoingMailbox) => {
                                aliasMappings.data = transform(aliasMappings.data, (result, value) => {
                                    if (value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue] ===
                                        outgoingMailbox[RX_RECORD_DEFINITION.coreFieldIds.id]) {
                                        value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.description] =
                                            outgoingMailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxName.id];
                                        value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee] =
                                            outgoingMailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxFunction];
                                    }
                                    result.push(value);
                                }, []);
                            });
                            return aliasMappings;
                        }
                    }));
                }
            }));
        };
    }
    ngOnInit() {
        const gridColumns = [
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.id}`,
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                visible: false
            },
            {
                fieldId: `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName}`,
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.profile-name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, selectedRow) => {
                            this.currentRecordInstance = this.rxRecordInstanceService.get(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName, selectedRow[RX_RECORD_DEFINITION.coreFieldIds.id]);
                            const profileData = {
                                profileName: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName],
                                mailbox: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue],
                                application: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId],
                                mailboxType: (() => {
                                    const assignee = parseInt$1(selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee], 10);
                                    return map(RX_EMAIL_PROFILES.mailbox.mailboxFunctions, (mailboxFunction) => mailboxFunction.id).includes(assignee)
                                        ? assignee
                                        : null;
                                })()
                            };
                            this.createEmailProfile(profileData);
                        }
                    }
                ]
            },
            {
                fieldId: `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.description}`,
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.mailbox.label'),
                sortable: false,
                filterable: false
            },
            {
                fieldId: `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee}`,
                index: 3,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.mailbox-function.label'),
                sortable: false,
                filterable: false,
                cellTemplate: this.mailboxFunctionCellTemplate
            },
            {
                fieldId: `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue}`,
                index: 4,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.outgoing-mailbox-id.label'),
                visible: false
            },
            {
                fieldId: `${RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName}`,
                index: 5,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.application.label')
            }
        ];
        const recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.description,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const actionButtons = [
            {
                label: 'Delete',
                style: 'tertiary',
                icon: 'trash',
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .confirm({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: RX_MODAL.modalStyles.warning,
                                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.delete-confirmation.message')
                            })
                                .then((response) => {
                                if (response) {
                                    const selectedEmailProfiles = this.emailProfilesGrid.api.getSelectedRows();
                                    const selectedEmailProfileIds = map(selectedEmailProfiles, RX_RECORD_DEFINITION.coreFieldIds.id);
                                    this.rxEmailProfilesService
                                        .deleteEmailProfiles(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName, selectedEmailProfileIds)
                                        .subscribe(() => {
                                        this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.deleted-email-profile.message'));
                                        this.refreshEmailProfilesGrid();
                                    });
                                }
                            });
                        }
                    }
                ]
            }
        ];
        this.emailProfilesGridConfig$ = of({
            enableFiltering: true,
            columns: gridColumns,
            getRecordDefinition: () => of(recordDefinition),
            actionButtons: actionButtons,
            getData: this.getData,
            styles: 'flex-fill'
        });
    }
    createEmailProfile(profile) {
        this.rxModalService
            .openDockedPanel({
            title: profile
                ? this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.update-email-profile.message')
                : this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.add-new-email-profile.message'),
            content: CreateEmailProfileComponent,
            size: 'lg',
            data: {
                profile
            }
        })
            .then((emailProfile) => {
            if (!profile) {
                this.currentRecordInstance = this.rxRecordInstanceService.getNew(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName);
            }
            return this.currentRecordInstance
                .pipe(map$1((recordInstance) => {
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasType.id, this.translateService.instant(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasType.defaultValue));
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName, emailProfile.profileName);
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId, get(emailProfile, 'application[0].id', 'None'));
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName, get(emailProfile, 'application[0].name', 'None'));
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue, emailProfile.mailbox[0][RX_RECORD_DEFINITION.coreFieldIds.id]);
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.description, 'Email profile');
                recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.status, parseInt$1(emailProfile.mailboxFunction, 10) === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.outgoing.id
                    ? RX_EMAIL_PROFILES.aliasMapping.status.new
                    : RX_EMAIL_PROFILES.aliasMapping.status.assigned);
                return recordInstance;
            }), switchMap((recordInstance) => {
                if (profile) {
                    return this.rxRecordInstanceService.save(recordInstance);
                }
                else {
                    return this.rxRecordInstanceService.create(recordInstance);
                }
            }))
                .subscribe(() => {
                this.refreshEmailProfilesGrid();
                this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.saved-email-profile.message'));
            });
        })
            .catch(noop);
    }
    refreshEmailProfilesGrid() {
        this.emailProfilesGrid.api.refresh().subscribe();
    }
    getMailboxFunctionType(dataItem) {
        const mailbox = find(RX_EMAIL_PROFILES.mailbox.mailboxFunctions, (mailboxFunction) => mailboxFunction.id === dataItem[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee]);
        return mailbox ? this.translateService.instant(mailbox.label) : 'None';
    }
}
EmailProfilesAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesAdminComponent, deps: [{ token: i3$2.RxRecordInstanceDataPageService }, { token: i3$2.RxRecordInstanceService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: RxEmailProfilesService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
EmailProfilesAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: EmailProfilesAdminComponent, selector: "rx-admin-email-profiles", viewQueries: [{ propertyName: "emailProfilesGrid", first: true, predicate: ["emailProfilesGrid"], descendants: true }, { propertyName: "mailboxFunctionCellTemplate", first: true, predicate: ["mailboxFunctionCellTemplate"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.email-profiles.header.title' | translate }}\">\n  <div>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-left-plus_circle\"\n      rx-id=\"new-email-profile-button\"\n      (click)=\"createEmailProfile()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n  </div>\n  <rx-record-grid rx-id=\"email-profile-grid\" #emailProfilesGrid [config]=\"emailProfilesGridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n\n<ng-template #mailboxFunctionCellTemplate let-dataItem=\"dataItem\">\n  <div>\n    {{ getMailboxFunctionType(dataItem) }}\n  </div>\n</ng-template>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-email-profiles',
                    templateUrl: './email-profiles.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i3$2.RxRecordInstanceDataPageService }, { type: i3$2.RxRecordInstanceService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: RxEmailProfilesService }, { type: i4.TranslateService }]; }, propDecorators: { emailProfilesGrid: [{
                type: ViewChild,
                args: ['emailProfilesGrid']
            }], mailboxFunctionCellTemplate: [{
                type: ViewChild,
                args: ['mailboxFunctionCellTemplate', { static: true }]
            }] } });

class EmailProfilesRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-email-profiles',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(EmailProfilesAdminComponent),
            name: 'Email profiles',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
EmailProfilesRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
EmailProfilesRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesRegistrationModule, declarations: [EmailProfilesAdminComponent, CreateEmailProfileComponent], imports: [AdminSettingsModule,
        CommonModule,
        RecordGridModule,
        AdaptRxTextfieldModule,
        AdaptRxRadiobuttonModule,
        AdaptRxSelectModule,
        FormsModule,
        ReactiveFormsModule,
        AdaptButtonModule,
        TranslateModule] });
EmailProfilesRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesRegistrationModule, imports: [[
            AdminSettingsModule,
            CommonModule,
            RecordGridModule,
            AdaptRxTextfieldModule,
            AdaptRxRadiobuttonModule,
            AdaptRxSelectModule,
            FormsModule,
            ReactiveFormsModule,
            AdaptButtonModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: EmailProfilesRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [EmailProfilesAdminComponent, CreateEmailProfileComponent],
                    imports: [
                        AdminSettingsModule,
                        CommonModule,
                        RecordGridModule,
                        AdaptRxTextfieldModule,
                        AdaptRxRadiobuttonModule,
                        AdaptRxSelectModule,
                        FormsModule,
                        ReactiveFormsModule,
                        AdaptButtonModule,
                        TranslateModule
                    ],
                    entryComponents: [EmailProfilesAdminComponent, CreateEmailProfileComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxFuntionalRoleService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.path = '/api/rx/application/functionalrole';
    }
    getUrl(functionalRoleDescriptor) {
        return `${this.path}/${encodeURIComponent(functionalRoleDescriptor.applicationName)}/${encodeURIComponent(functionalRoleDescriptor.name)}`;
    }
    get(functionalRoleDescriptor) {
        return this.httpClient.get(this.getUrl(functionalRoleDescriptor));
    }
    deleteFunctionalRole(functionalRoleDescriptor) {
        return this.httpClient.delete(this.getUrl(functionalRoleDescriptor));
    }
    delete(roles) {
        const deleteObservables = roles.map((role) => this.deleteFunctionalRole(role));
        return forkJoin(deleteObservables);
    }
    create(functionalRole) {
        return this.httpClient.post(this.path, functionalRole);
    }
    save(functionalRole, roleName) {
        return this.httpClient.put(this.getUrl({ applicationName: functionalRole.applicationName, name: roleName }), functionalRole);
    }
}
RxFuntionalRoleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFuntionalRoleService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxFuntionalRoleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFuntionalRoleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxFuntionalRoleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class FunctionalRoleEditorComponent extends RxModalClass {
    constructor(rxGlobalCacheService, activeModalRef, rxRoleDataPage, rxFuntionalRoleService, rxNotificationService, translateService, injector) {
        super(activeModalRef, injector);
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.activeModalRef = activeModalRef;
        this.rxRoleDataPage = rxRoleDataPage;
        this.rxFuntionalRoleService = rxFuntionalRoleService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.injector = injector;
        this.availableRoles = [];
        this.isEditMode = false;
        this.isSaveButtonDisabled = true;
        this.selectedRolesList = [];
        this.destroyed$ = new ReplaySubject(1);
        this.treeWrap = TreeWrap.WrapAll;
        this.validatorFn = this.functionalRoleNameValidator.bind(this);
    }
    get selectedRoles() {
        return this.selectedRolesList;
    }
    set selectedRoles(roles) {
        this.selectedRolesList = roles;
        this.isSaveButtonDisabled = !this.functionalRoleEditorForm.valid;
    }
    ngOnInit() {
        super.ngOnInit();
        const roleQueryParams = {
            propertySelection: ['applicationName', 'roleName'].join(','),
            includeSmartAppRolesOnly: true
        };
        const excludedBundles = [
            RX_APPLICATION.innovationStudioBundleId,
            RX_APPLICATION.standardlib,
            RX_APPLICATION.settingsBundleId,
            RX_APPLICATION.platformBundleId
        ];
        const startIndex = 0;
        const pageSize = -1;
        this.functionalRole = this.activeModalRef.getData().functionalRole;
        this.isEditMode = Boolean(this.functionalRole.id);
        this.busy = forkJoin([
            this.rxRoleDataPage.get({
                params: Object.assign({ startIndex, pageSize }, roleQueryParams)
            }),
            this.rxGlobalCacheService.getBundleDescriptors()
        ]).subscribe(([roleDataPage, bundleDescriptors]) => {
            this.applicationOptions = bundleDescriptors
                .filter((bundleDescriptor) => !excludedBundles.includes(bundleDescriptor.id))
                .sort((bundleDescriptor, bundleDescriptorToCompare) => bundleDescriptor.friendlyName.localeCompare(bundleDescriptorToCompare.friendlyName))
                .map((bundleDescriptor) => ({
                displayValue: bundleDescriptor.friendlyName,
                value: bundleDescriptor.id
            }));
            if (!this.isEditMode) {
                this.selectedApplication = [this.applicationOptions[0]];
            }
            else {
                let selectedApplication = find(this.applicationOptions, { value: this.functionalRole.applicationName });
                if (!selectedApplication) {
                    selectedApplication = {
                        displayValue: this.functionalRole.applicationName,
                        value: this.functionalRole.applicationName
                    };
                    this.applicationOptions.push(selectedApplication);
                }
                this.selectedApplication = [selectedApplication];
                this.oldRoleName = this.functionalRole.name;
            }
            this.availableRoles = chain(roleDataPage.data)
                .groupBy('applicationName')
                .map((roles, application) => ({
                children: this.getChildren(roles),
                leaf: false,
                label: find(bundleDescriptors, { id: application }).friendlyName,
                key: application,
                data: { name: '', applicationName: application }
            }))
                .value();
            if (this.isEditMode) {
                this.updateParentNodesForSelectedRoles();
            }
        });
        this.functionalRoleEditorForm.statusChanges
            .pipe(distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((value) => {
            this.isSaveButtonDisabled = !this.functionalRoleEditorForm.valid || this.functionalRoleEditorForm.pristine;
        });
        this.functionalRoleEditorForm.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe((value) => {
            this.isSaveButtonDisabled = !this.functionalRoleEditorForm.valid || this.functionalRoleEditorForm.pristine;
        });
    }
    isDirty() {
        return this.functionalRoleEditorForm.dirty;
    }
    getChildren(rolesForApplication) {
        return rolesForApplication.map((role) => {
            const node = {
                children: null,
                leaf: true,
                label: role.roleName,
                key: `${role.applicationName}:${role.roleName}`,
                data: { name: role.roleName, applicationName: role.applicationName }
            };
            if (this.isEditMode) {
                this.checkAndAddToSelectedRoles(node);
            }
            return node;
        });
    }
    checkAndAddToSelectedRoles(node) {
        if (this.functionalRole.applicationRoles) {
            if (has(this.functionalRole.applicationRoles, node.data.applicationName)) {
                const selectedRolesList = this.functionalRole.applicationRoles[node.data.applicationName];
                if (selectedRolesList.includes(node.data.name)) {
                    this.selectedRolesList.push(node);
                }
            }
        }
    }
    updateParentNodesForSelectedRoles() {
        map(this.selectedRolesList, (role) => {
            const parentNode = find(this.availableRoles, (availableRole) => availableRole.data.applicationName === role.data.applicationName);
            const selectedChildNodes = filter(this.selectedRolesList, (selectedRole) => parentNode.children.find((child) => child.data.name === selectedRole.data.name &&
                parentNode.data.applicationName === selectedRole.data.applicationName));
            if (selectedChildNodes.length === parentNode.children.length) {
                if (!this.selectedRolesList.includes(parentNode)) {
                    this.selectedRolesList.push(parentNode);
                }
            }
            else {
                parentNode.partialSelected = true;
            }
        });
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    save() {
        this.allowDismiss = false;
        this.isSaveButtonDisabled = true;
        if (!this.isEditMode) {
            this.functionalRole.applicationName = this.selectedApplication[0].value;
        }
        const leafNodes = filter(this.selectedRolesList, (role) => role.leaf);
        this.functionalRole.applicationRoles = chain(leafNodes)
            .groupBy((role) => role.data.applicationName)
            .map((roles, applicationName) => ({
            [applicationName]: roles.map((role) => role.label)
        }))
            .reduce((applicationName, roles) => Object.assign(applicationName, roles), {})
            .value();
        const result$ = this.isEditMode
            ? this.rxFuntionalRoleService.save(this.functionalRole, this.oldRoleName)
            : this.rxFuntionalRoleService.create(this.functionalRole);
        result$
            .pipe(finalize(() => {
            this.allowDismiss = true;
            this.isSaveButtonDisabled = false;
        }))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-saved.label'));
            this.activeModalRef.close(true);
        });
    }
    functionalRoleNameValidator(control) {
        return control.value && !RX_RECORD_DEFINITION.validDefinitionNameRegex.test(control.value)
            ? {
                invalidRoleName: {
                    message: this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-name-validation.message')
                }
            }
            : null;
    }
    cancel() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
FunctionalRoleEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRoleEditorComponent, deps: [{ token: i2.RxGlobalCacheService }, { token: i1$1.ActiveModalRef }, { token: i2.RxRoleDataPageService }, { token: RxFuntionalRoleService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
FunctionalRoleEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FunctionalRoleEditorComponent, selector: "rx-functional-role-editor", viewQueries: [{ propertyName: "functionalRoleEditorForm", first: true, predicate: ["functionalRoleEditorForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{\n      (isEditMode\n        ? 'com.bmc.arsys.rx.client.admin.functional-roles.edit-functional-role.label'\n        : 'com.bmc.arsys.rx.client.admin.functional-roles.create-functional-role.label'\n      ) | translate\n    }}\n  </h5>\n\n  <button class=\"close dp-close\" type=\"button\" rx-id=\"x-button\" [disabled]=\"!allowDismiss\" (click)=\"cancel()\"></button>\n</div>\n\n<div class=\"modal-body functional-role-editor-modal-body d-flex\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form #functionalRoleEditorForm=\"ngForm\" class=\"w-100\">\n    <div class=\"row h-100\" *ngIf=\"applicationOptions\">\n      <div class=\"col-6 d-flex flex-column mh-100 mt-2\">\n        <adapt-rx-select\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.application-or-library.label' | translate }}\"\n          rx-id=\"application-name\"\n          [(ngModel)]=\"selectedApplication\"\n          [options]=\"applicationOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          required=\"true\"\n          name=\"application\"\n          [readonly]=\"isEditMode\"\n        >\n        </adapt-rx-select>\n        <adapt-rx-textfield\n          rx-id=\"name\"\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.functional-roles.functional-role-name.label' | translate }}\"\n          required=\"true\"\n          [(ngModel)]=\"functionalRole.name\"\n          name=\"name\"\n          [rxCustomValidators]=\"validatorFn\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"description\"\n          class=\"form-group d-block\"\n          required=\"true\"\n          [(ngModel)]=\"functionalRole.description\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n          name=\"description\"\n        ></adapt-rx-textfield>\n        <adapt-rx-textfield\n          *ngIf=\"isEditMode\"\n          rx-id=\"id\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"functionalRole.id\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.id.label' | translate }}\"\n          name=\"id\"\n          [readonly]=\"true\"\n          [disabledStyleForReadonlyState]=\"true\"\n        ></adapt-rx-textfield>\n      </div>\n      <div class=\"col-6 d-flex flex-column mh-100 mt-2\">\n        <adapt-rx-control-label label=\"Roles\"> </adapt-rx-control-label>\n        <div class=\"card roles-list-wrapper flex-grow-1\">\n          <div class=\"card-block\">\n            <adapt-tree\n              *ngIf=\"availableRoles.length\"\n              [value]=\"availableRoles\"\n              filter=\"true\"\n              selectionMode=\"checkbox\"\n              [(selection)]=\"selectedRoles\"\n              [wrap]=\"treeWrap\"\n            >\n            </adapt-tree>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"isSaveButtonDisabled || !allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    rx-id=\"cancel-button\"\n    (click)=\"cancel()\"\n    [disabled]=\"!allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.functional-role-editor-modal-body{height:645px}.roles-list-wrapper{overflow:auto}adapt-rx-select,adapt-rx-textfield{max-width:500px}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRoleEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-functional-role-editor',
                    templateUrl: './functional-role-editor.component.html',
                    styleUrls: ['./functional-role-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxGlobalCacheService }, { type: i1$1.ActiveModalRef }, { type: i2.RxRoleDataPageService }, { type: RxFuntionalRoleService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { functionalRoleEditorForm: [{
                type: ViewChild,
                args: ['functionalRoleEditorForm', { read: NgForm, static: true }]
            }] } });

const RX_FUNCTIONAL_ROLES = {
    recordDefinitionName: 'Functional Roles',
    fieldIds: {
        applicationName: 1720,
        name: 1721
    }
};

class FunctionalRolesAdminComponent {
    constructor(rxFuntionalRoleService, rxNotificationService, rxModalService, translateService) {
        this.rxFuntionalRoleService = rxFuntionalRoleService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.translateService = translateService;
        this.gridConfig$ = new Observable((observer) => {
            observer.next({
                recordDefinitionName: RX_FUNCTIONAL_ROLES.recordDefinitionName,
                columns: this.getColumns(),
                actionButtons: this.getActionButtons(),
                styles: 'flex-fill'
            });
            observer.complete();
        });
    }
    getActionButtons() {
        return [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                iconCls: 'trash',
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .confirm({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.dialog.warning.label'),
                                modalStyle: RX_MODAL.modalStyles.warning,
                                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-delete-confirmation.message')
                            })
                                .then((response) => {
                                if (response) {
                                    const selectedRecords = castArray(this.functionalRolesRecordGrid.api.getSelectedRows());
                                    const rolesToDelete = selectedRecords.map((record) => {
                                        return {
                                            applicationName: record[RX_FUNCTIONAL_ROLES.fieldIds.applicationName],
                                            name: record[RX_FUNCTIONAL_ROLES.fieldIds.name]
                                        };
                                    });
                                    this.rxFuntionalRoleService.delete(rolesToDelete).subscribe(() => {
                                        this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-deleted.message'));
                                        this.functionalRolesRecordGrid.api.refresh().subscribe();
                                    });
                                }
                            });
                        }
                    }
                ]
            }
        ];
    }
    getColumns() {
        return [
            {
                fieldId: `${RX_FUNCTIONAL_ROLES.fieldIds.name}`,
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.editFunctionalRole(lastActionRow)
                    }
                ]
            },
            {
                fieldId: `${RX_FUNCTIONAL_ROLES.fieldIds.applicationName}`,
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.application-library-name.label')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.description}`,
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.id}`,
                index: 3,
                title: 'ID'
            }
        ];
    }
    openModal(data) {
        this.rxModalService
            .openModal({
            content: FunctionalRoleEditorComponent,
            size: 'default',
            data: {
                functionalRole: data
            }
        })
            .then((result) => {
            if (result) {
                this.functionalRolesRecordGrid.api.refresh().subscribe();
            }
        })
            .catch(noop);
    }
    createFunctionalRole() {
        this.openModal({
            name: '',
            applicationName: '',
            description: '',
            applicationRoles: {}
        });
    }
    editFunctionalRole(functionalRoleRow) {
        this.rxFuntionalRoleService
            .get({
            applicationName: functionalRoleRow[RX_FUNCTIONAL_ROLES.fieldIds.applicationName],
            name: functionalRoleRow[RX_FUNCTIONAL_ROLES.fieldIds.name]
        })
            .subscribe((functionalRole) => {
            this.openModal(functionalRole);
        });
    }
}
FunctionalRolesAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesAdminComponent, deps: [{ token: RxFuntionalRoleService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
FunctionalRolesAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FunctionalRolesAdminComponent, selector: "rx-admin-functional-roles", viewQueries: [{ propertyName: "functionalRolesRecordGrid", first: true, predicate: ["functionalRolesRecordGrid"], descendants: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.functional.roles' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createFunctionalRole()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n  <rx-record-grid rx-id=\"functional-roles-grid\" #functionalRolesRecordGrid [config]=\"gridConfig$\"> </rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-functional-roles',
                    templateUrl: './functional-roles.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxFuntionalRoleService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: i4.TranslateService }]; }, propDecorators: { functionalRolesRecordGrid: [{
                type: ViewChild,
                args: ['functionalRolesRecordGrid', { static: false }]
            }] } });

class FunctionalRolesRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-functional-roles',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(FunctionalRolesAdminComponent),
            name: 'Functional roles',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
FunctionalRolesRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
FunctionalRolesRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesRegistrationModule, declarations: [FunctionalRolesAdminComponent, FunctionalRoleEditorComponent], imports: [CommonModule,
        FormsModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptRxTextfieldModule,
        AdaptButtonModule,
        AdaptBusyModule,
        AdaptRxSelectModule,
        AdaptRxFormControlModule,
        AdaptTreeModule,
        RxBusyIndicatorModule,
        TranslateModule,
        RxDirectivesModule] });
FunctionalRolesRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesRegistrationModule, imports: [[
            CommonModule,
            FormsModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptRxTextfieldModule,
            AdaptButtonModule,
            AdaptBusyModule,
            AdaptRxSelectModule,
            AdaptRxFormControlModule,
            AdaptTreeModule,
            RxBusyIndicatorModule,
            TranslateModule,
            RxDirectivesModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: FunctionalRolesRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [FunctionalRolesAdminComponent, FunctionalRoleEditorComponent],
                    imports: [
                        CommonModule,
                        FormsModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptRxTextfieldModule,
                        AdaptButtonModule,
                        AdaptBusyModule,
                        AdaptRxSelectModule,
                        AdaptRxFormControlModule,
                        AdaptTreeModule,
                        RxBusyIndicatorModule,
                        TranslateModule,
                        RxDirectivesModule
                    ],
                    entryComponents: [FunctionalRolesAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxHkmAccessMappingService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.knowledgeApi = '/api/rx/application/knowledge';
        this.folderCache = new Map();
    }
    callItsmMappingApi() {
        return this.httpClient.get(`${this.knowledgeApi}/mapping/itsm`);
    }
    callHkmMappingApi() {
        return this.httpClient.get(`${this.knowledgeApi}/mapping/hkm`);
    }
    getFolderAccess(userGroupId, portalId, nodeId) {
        const cacheKey = `${userGroupId}-${portalId}-${nodeId}`;
        if (this.folderCache.has(cacheKey)) {
            return of(this.folderCache.get(cacheKey));
        }
        const request = encodeURIComponent(`v1/contentaccess/${userGroupId}/${portalId}/${nodeId}`);
        return this.httpClient
            .get(`${this.knowledgeApi}?ComAroundRequest=${request}`)
            .pipe(tap((folders) => this.folderCache.set(cacheKey, folders)));
    }
    deleteAccessMappings(hkmGroupMappingIds) {
        return this.httpClient.delete(`${this.knowledgeApi}/mapping/delete/${hkmGroupMappingIds.join(',')}`);
    }
    saveAccessMappings(hkmGroupMappings) {
        return this.httpClient.post(`${this.knowledgeApi}/mapping/save`, hkmGroupMappings);
    }
}
RxHkmAccessMappingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxHkmAccessMappingService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxHkmAccessMappingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxHkmAccessMappingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxHkmAccessMappingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class HkmAccessMapEditorComponent {
    constructor(dockedPanelContext, rxNotificationService, translateService, rxModalService, rxHkmAccessMappingService) {
        this.dockedPanelContext = dockedPanelContext;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.rxModalService = rxModalService;
        this.rxHkmAccessMappingService = rxHkmAccessMappingService;
        this.destroyed$ = new ReplaySubject(1);
        this.userGroupToFoldersMap = new Map();
        this.selectedItsmSupportGroups = [];
        this.alertConfig = {
            title: '',
            content: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.mapping-info.message'),
            type: 'inline',
            variant: 'info'
        };
        const contextData = this.dockedPanelContext.getData();
        this.selectedItsmSupportGroups = contextData.selectedSupportGroups;
        this.portals = contextData.hkmPortals;
        this.company = contextData.company;
        this.portalUserGroups = contextData.selectedHkmPortal.userGroups;
        this.selectedPortal = new FormControl([contextData.selectedHkmPortal]);
        this.selectedUserGroups = new FormControl(contextData.selectedHkmUserGroups);
    }
    ngOnInit() {
        this.selectedPortal.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe(([portal]) => {
            this.portalUserGroups = portal.userGroups;
            this.selectedUserGroups.reset([]);
        });
        this.selectedUserGroups.valueChanges
            .pipe(takeUntil(this.destroyed$), startWith(this.selectedUserGroups.value || []), switchMap((userGroups) => {
            if (userGroups.length === 0) {
                return of(userGroups);
            }
            const [selectedPortal] = this.selectedPortal.value;
            const folderAcecssRequests = userGroups.map((userGroup) => {
                return this.rxHkmAccessMappingService
                    .getFolderAccess(userGroup.id, selectedPortal.portalId, selectedPortal.nodeId)
                    .pipe(tap((folders) => this.userGroupToFoldersMap.set(userGroup, folders)));
            });
            return forkJoin(folderAcecssRequests).pipe(map$1(() => userGroups));
        }))
            .subscribe((userGroups) => {
            this.setUpFoldersFromHkmPortalUserGroups(userGroups);
        });
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.ESC);
    }
    save() {
        if (this.selectedItsmSupportGroups.length === 0) {
            this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-support-group.message'));
            return;
        }
        if (this.selectedUserGroups.value.length === 0) {
            this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-user-group.message'));
            return;
        }
        const hkmGroupFoldersNames = this.hkmFolders.map((data) => data.name);
        const selectedUserGroups = this.selectedUserGroups.value;
        const mappingConfigurations = this.selectedItsmSupportGroups.map((itsmSupportGroup) => ({
            AppCompanyID: this.company.permissionId,
            AppCompanyName: this.company.name,
            AppGroupName: itsmSupportGroup.supportGroupName,
            AppName: 'ITSM',
            IsMapped: true,
            AppGroupID: itsmSupportGroup.permissionGroupId,
            HKMPortalID: this.selectedPortal.value[0].portalId,
            HKMPortalName: this.selectedPortal.value[0].portalName,
            HKMRoleName: selectedUserGroups.map((group) => group.role).join(','),
            HKMGroupID: selectedUserGroups.map((group) => group.id).join(','),
            HKMGroupFoldersNames: hkmGroupFoldersNames,
            HKMGroupName: selectedUserGroups.map((group) => group.name).join(',')
        }));
        this.rxHkmAccessMappingService.saveAccessMappings(mappingConfigurations).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.connection-mapping.mapping-saved.message'));
            this.dockedPanelContext.close(DismissReasons.CLOSE_BTN);
        }, () => {
            this.dockedPanelContext.close(DismissReasons.BACKDROP_CLICK);
        });
    }
    hkmFolderSortFn(first, second) {
        if (first.hasFolderChildren !== second.hasFolderChildren) {
            return +second.hasFolderChildren - +first.hasFolderChildren;
        }
        return first.name.localeCompare(second.name);
    }
    setUpFoldersFromHkmPortalUserGroups(userGroups) {
        const items = flatMap(userGroups, (group) => this.userGroupToFoldersMap
            .get(group)
            .filter((folder) => folder.haveAccess)
            .map((folder) => ({ group, folder })));
        items.sort((first, second) => this.hkmFolderSortFn(first.folder, second.folder));
        const uniqueItems = uniqBy(items, (item) => item.folder.nodeId);
        this.hkmFolders = uniqueItems.map((item) => item.folder);
        this.filesTree = uniqueItems.map((item) => ({
            data: item,
            expandedIcon: item.folder.hasFolderChildren ? 'd-icon-folder_open' : 'd-icon-folder_o',
            collapsedIcon: item.folder.hasFolderChildren ? 'd-icon-folder' : 'd-icon-folder_o',
            label: item.folder.name,
            level: 1,
            expression: `'${item.folder.nodeId}'`,
            children: null,
            leaf: !item.folder.hasFolderChildren
        }));
    }
    deleteVisibilityGroup(group) {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.delete-visibility-group.message')
        })
            .then((result) => {
            if (result) {
                this.selectedItsmSupportGroups.forEach((element, index) => {
                    if (element.supportGroupName === group.supportGroupName) {
                        this.selectedItsmSupportGroups.splice(index, 1);
                    }
                });
            }
        });
    }
    onNodeExpand({ node }) {
        if (node && !node.children) {
            this.rxHkmAccessMappingService
                .getFolderAccess(node.data.group.id, node.data.folder.portalId, node.data.folder.nodeId)
                .subscribe((hkmFolders) => {
                node.children = hkmFolders
                    .filter((folder) => folder.haveAccess)
                    .sort(this.hkmFolderSortFn)
                    .map((folder) => ({
                    data: { group: node.data.group, folder },
                    expandedIcon: folder.hasFolderChildren ? 'd-icon-folder_open' : 'd-icon-folder_o',
                    collapsedIcon: folder.hasFolderChildren ? 'd-icon-folder' : 'd-icon-folder_o',
                    label: folder.name,
                    level: 1,
                    expression: `'${folder.nodeId}'`,
                    children: null,
                    leaf: !folder.hasFolderChildren
                }));
            });
        }
    }
    supportGroupFormatter(group) {
        return group.supportGroupName;
    }
    userGroupOptionformatter(group) {
        return group.name;
    }
    hkmPortalFormatter(portal) {
        return portal.portalName;
    }
}
HkmAccessMapEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMapEditorComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i1.RxModalService }, { token: RxHkmAccessMappingService }], target: i0.ɵɵFactoryTarget.Component });
HkmAccessMapEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: HkmAccessMapEditorComponent, selector: "rx-hkm-access-map-editor", ngImport: i0, template: "<div class=\"container col d-flex flex-column\" style=\"overflow-y: auto\">\n  <div class=\"row justify-content-between\">\n    <div class=\"col-5 form-control-label\">\n      <adapt-rx-textfield\n        [disabled]=\"true\"\n        rx-id=\"company-field\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping.company.label' | translate\"\n        [(ngModel)]=\"company.name\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-1 d-flex align-items-end p-2 justify-content-center\">\n      <adapt-icon name=\"arrow_right\"></adapt-icon>\n    </div>\n    <div class=\"col-6 form-control-label\">\n      <adapt-rx-select\n        [formControl]=\"selectedPortal\"\n        [options]=\"portals\"\n        rx-id=\"portal-select\"\n        [optionFormatter]=\"hkmPortalFormatter\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping-editor.header.label' | translate\"\n      ></adapt-rx-select>\n    </div>\n  </div>\n  <hr />\n  <div class=\"row\">\n    <div class=\"col\">\n      <adapt-alert [config]=\"alertConfig\"></adapt-alert>\n    </div>\n  </div>\n  <div class=\"row flex-grow-1 py-3 justify-content-between\">\n    <div class=\"col-5 d-flex flex-column\">\n      <div class=\"pb-1\">\n        <span class=\"form-control-label\">\n          {{\n            'com.bmc.arsys.rx.client.hkm-access-mapping-editor.support-group.label'\n              | translate: { count: selectedItsmSupportGroups.length }\n          }}\n        </span>\n      </div>\n      <div class=\"card flex-grow-1\" rx-id=\"selected-support-groups\">\n        <div\n          class=\"d-flex px-2 align-items-center adapt-rx-list-item cursor-pointer\"\n          *ngFor=\"let group of selectedItsmSupportGroups\"\n        >\n          <span>{{ group.supportGroupName }}</span>\n          <button\n            type=\"button\"\n            [disabled]=\"false\"\n            class=\"btn btn-link d-icon-trash p-1\"\n            rx-id=\"delete-button\"\n            (click)=\"deleteVisibilityGroup(group)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-1 d-flex p-2 mt-4 justify-content-center\">\n      <adapt-icon [name]=\"'arrow_right'\"></adapt-icon>\n    </div>\n    <div class=\"col-6 d-flex flex-column\">\n      <adapt-rx-select\n        [formControl]=\"selectedUserGroups\"\n        rx-id=\"user-groups-select\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-hkm-user-groups.label' | translate\"\n        [options]=\"portalUserGroups\"\n        [optionFormatter]=\"userGroupOptionformatter\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [enableFilter]=\"true\"\n        [multiple]=\"true\"\n      >\n      </adapt-rx-select>\n      <div class=\"mt-3 pb-1\">\n        <span class=\"form-control-label\">\n          {{ 'com.bmc.arsys.rx.client.hkm-access-mapping-editor.accessible-folders.title' | translate }}\n        </span>\n      </div>\n      <div class=\"card flex-grow-1 p-2\">\n        <div class=\"mh-100\" style=\"overflow-y: auto\">\n          <adapt-tree [value]=\"filesTree\" (onNodeExpand)=\"onNodeExpand($event)\"> </adapt-tree>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"dp-footer\">\n  <div>\n    <button rx-id=\"save-button\" type=\"button\" class=\"btn btn-primary mr-2\" (click)=\"save()\">\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </div>\n  <div>\n    <button rx-id=\"cancel-button\" type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\n      {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n    </button>\n  </div>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMapEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-hkm-access-map-editor',
                    templateUrl: './hkm-access-map-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i1.RxModalService }, { type: RxHkmAccessMappingService }]; } });

var PredefinedLobOptions;
(function (PredefinedLobOptions) {
    PredefinedLobOptions["All"] = "$ALL$";
    PredefinedLobOptions["None"] = "$NONE$";
})(PredefinedLobOptions || (PredefinedLobOptions = {}));

class HkmAccessMappingAdminComponent extends BaseViewComponent {
    constructor(adaptDockedPanelService, translateService, rxModalService, rxHkmAccessMappingService) {
        super();
        this.adaptDockedPanelService = adaptDockedPanelService;
        this.translateService = translateService;
        this.rxModalService = rxModalService;
        this.rxHkmAccessMappingService = rxHkmAccessMappingService;
        this.predefinedLinesOfBusiness = [
            { id: PredefinedLobOptions.All, name: this.translateService.instant('com.bmc.arsys.rx.client.common.all.label') },
            { id: PredefinedLobOptions.None, name: this.translateService.instant('com.bmc.arsys.rx.client.common.none.label') }
        ];
        this.hkmPortals = [];
        this.supportGroups = [];
        this.selectedLob = this.predefinedLinesOfBusiness[0];
        this.itsmCompanies = [];
        this.linesOfBusiness = [];
    }
    ngOnInit() {
        this.loadItsmHkmMappingData();
        this.rxHkmAccessMappingService.callHkmMappingApi().subscribe((portals) => {
            this.hkmPortals = portals;
        });
        this.setupGridInit();
    }
    setupGridInit() {
        this.gridColumns = [
            {
                fieldId: 'supportGroupName',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-permission-group.title'),
                filterable: false,
                cellTemplate: this.visibilityGroupColTemplate
            },
            {
                fieldId: 'description',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.support-group-description.title'),
                filterable: false
            },
            {
                fieldId: 'permissionGroupId',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-permission-group-id.title'),
                filterable: false,
                visible: false
            },
            {
                filterable: true,
                fieldId: 'isMapped',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.title'),
                cellTemplate: this.statusColTemplate
            },
            {
                fieldId: 'hkmportalName',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-portal-name.title'),
                visible: true,
                filterable: false
            },
            {
                fieldId: 'hkmgroupName',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-group-name.title'),
                visible: true,
                filterable: false
            },
            {
                fieldId: 'hkmgroupID',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-group-id.title'),
                visible: false,
                filterable: false
            },
            {
                fieldId: 'hkmroleName',
                title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-role.title'),
                visible: true,
                filterable: false
            }
        ];
        const gridRecordDefinition = {
            fieldDefinitions: [
                {
                    id: 'supportGroupName',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'description',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'permissionGroupId',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'isMapped',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: {
                        true: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.mapped.label'),
                        false: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.unmapped.label')
                    }
                },
                {
                    id: 'hkmportalName',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'hkmgroupName',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'hkmgroupID',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'hkmroleName',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const actionButtons = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.map-access.button.label'),
                style: 'tertiary',
                iconCls: 'cubes_restart',
                disabled: (selectedRows) => !this.hasPortals() || selectedRows.length === 0 || selectedRows.some((row) => row.isMapped),
                actions: [{ name: () => this.openAccessMappingDialog() }]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.unmap-access.button.label'),
                style: 'tertiary',
                iconCls: 'cube_cross_circle',
                disabled: (selectedRows) => !this.hasPortals() || selectedRows.length === 0 || selectedRows.some((row) => !row.isMapped),
                actions: [{ name: () => this.deleteMapping() }]
            }
        ];
        this.recordGridConfig$ = of({
            columns: this.gridColumns,
            emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.document-selection.grid.empty-state.label'),
            enableRowSelection: RowSelectionMode.Multiple,
            enableFiltering: true,
            recordIdField: 'requestId',
            styles: 'flex-fill',
            useExternalFiltering: false,
            getRecordDefinition: () => of(gridRecordDefinition),
            getData: () => of({
                totalSize: this.supportGroups.length,
                data: this.supportGroups
            }),
            actionButtons,
            filterMode: RecordGridFilterMode.Basic
        });
    }
    setUpValues() {
        if (this.selectedLob.id === PredefinedLobOptions.All) {
            this.supportGroups = [...this.selectedCompany.supportGroups];
        }
        else if (this.selectedLob.id === PredefinedLobOptions.None) {
            this.supportGroups = this.selectedCompany.supportGroups.filter((group) => isEmpty(group.lineOfBusiness));
        }
        else {
            this.supportGroups = this.selectedCompany.supportGroups.filter((group) => { var _a; return (_a = group.lineOfBusiness) === null || _a === void 0 ? void 0 : _a.some((lob) => lob === this.selectedLob.id); });
        }
        this.itsmHkmMappingDataGrid.api.refresh().subscribe();
    }
    loadItsmHkmMappingData() {
        this.busy = this.rxHkmAccessMappingService
            .callItsmMappingApi()
            .subscribe(({ data }) => {
            var _a;
            this.itsmCompanies = [...data];
            const extractedLinesOfBusiness = chain(data)
                .flatMap((company) => company.supportGroups)
                .filter((group) => !isEmpty(group.lineOfBusiness))
                .flatMap((group) => group.lineOfBusiness)
                .sort()
                .sortedUniq()
                .map((lob) => ({ id: lob, name: lob }))
                .value();
            this.linesOfBusiness = [...this.predefinedLinesOfBusiness, ...extractedLinesOfBusiness];
            if (isEmpty((_a = this.selectedCompany) === null || _a === void 0 ? void 0 : _a.name)) {
                this.setSelected(0);
            }
            else {
                const currentCompanyId = this.selectedCompany.permissionId;
                this.selectedCompany = this.itsmCompanies.find((company) => company.permissionId === currentCompanyId);
                this.setUpValues();
            }
        });
    }
    setSelected(index) {
        this.selectedCompany = this.itsmCompanies[index];
        this.setUpValues();
    }
    setSelectedLineOfBusiness(lob) {
        this.selectedLob = lob;
        this.setUpValues();
    }
    openAccessMappingDialog(supportGroup = null) {
        let title = this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.new.title');
        let portal = this.hkmPortals[0];
        let selectedSupportGroups = this.itsmHkmMappingDataGrid.api.getSelectedRows();
        let userGroups = [];
        if (supportGroup) {
            const mappedUserGroupsIds = supportGroup.hkmgroupID.split(',').map(Number);
            title = this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.edit.title');
            portal = this.hkmPortals.find((hkmPortal) => hkmPortal.portalName === supportGroup.hkmportalName);
            selectedSupportGroups = [supportGroup];
            userGroups = portal.userGroups.filter((group) => mappedUserGroupsIds.includes(group.id));
        }
        this.openDetailDialog(title, selectedSupportGroups, portal, userGroups);
    }
    openDetailDialog(dialogTitle, selectedSupportGroups, selectedHkmPortal, selectedHkmUserGroups = []) {
        var _a;
        if (((_a = this.hkmPortals) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            this.adaptDockedPanelService
                .open({
                title: dialogTitle,
                content: HkmAccessMapEditorComponent,
                size: OpenViewActionModalSize.Small,
                data: {
                    company: this.selectedCompany,
                    hkmPortals: this.hkmPortals,
                    selectedLob: this.selectedLob,
                    selectedSupportGroups,
                    selectedHkmPortal,
                    selectedHkmUserGroups
                }
            })
                .then((result) => {
                if (result === DismissReasons.CLOSE_BTN) {
                    this.loadItsmHkmMappingData();
                }
            })
                .catch(noop);
        }
    }
    deleteMapping() {
        const selectedGroups = this.itsmHkmMappingDataGrid.api.getSelectedRows();
        const selectedGroupIds = selectedGroups.map((group) => group.id);
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.delete-mapping.message')
        })
            .then((result) => {
            if (result) {
                this.rxHkmAccessMappingService
                    .deleteAccessMappings(selectedGroupIds)
                    .subscribe(() => this.loadItsmHkmMappingData());
            }
        });
    }
    hasPortals() {
        return !isEmpty(this.hkmPortals);
    }
}
HkmAccessMappingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingAdminComponent, deps: [{ token: i1$1.AdaptDockedPanelService }, { token: i4.TranslateService }, { token: i1.RxModalService }, { token: RxHkmAccessMappingService }], target: i0.ɵɵFactoryTarget.Component });
HkmAccessMappingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: HkmAccessMappingAdminComponent, selector: "rx-admin-hkm-access-mapping", viewQueries: [{ propertyName: "itsmHkmMappingDataGrid", first: true, predicate: ["itsmHkmMappingDataGrid"], descendants: true }, { propertyName: "statusColTemplate", first: true, predicate: ["statusColTemplate"], descendants: true, static: true }, { propertyName: "visibilityGroupColTemplate", first: true, predicate: ["visibilityGroupColTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.header.label' | translate }}\" [busy]=\"busy\">\n  <div class=\"d-flex\">\n    <div class=\"d-flex pr-3 align-items-baseline\">\n      <label class=\"text-strong\">{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.company.label' | translate }}:</label>\n      <div class=\"d-flex\" adaptDropdown>\n        <button\n          class=\"pl-1\"\n          adapt-button\n          #dropdownButton\n          rx-id=\"company-dropdown\"\n          adaptDropdownToggle\n          type=\"button\"\n          btn-type=\"tertiary\">\n          {{ selectedCompany?.name }}\n        </button>\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <button\n            *ngFor=\"let company of itsmCompanies; let index = index\"\n            [class.text-active]=\"company?.permissionId === selectedCompany?.permissionId\"\n            [class.active]=\"company?.permissionId === selectedCompany?.permissionId\"\n            type=\"button\"\n            class=\"dropdown-item\"\n            (click)=\"setSelected(index)\">\n            {{ company.name }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex align-items-baseline\">\n      <label class=\"text-strong\">{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.line-of-business.label' | translate\n        }}:</label>\n      <div class=\"d-flex\" adaptDropdown >\n        <button\n          adapt-button\n          #dropdownButton\n          adaptDropdownToggle\n          type=\"button\"\n          rx-id=\"lob-dropdown\"\n          btn-type=\"tertiary\"\n          class=\"pl-1\">\n          {{ selectedLob?.name }}\n        </button>\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <button\n            type=\"button\"\n            *ngFor=\"let lob of linesOfBusiness\"\n            [class.text-active]=\"lob.id === selectedLob.id\"\n            [class.active]=\"lob.id === selectedLob.id\"\n            class=\"dropdown-item\"\n            (click)=\"setSelectedLineOfBusiness(lob)\">\n            {{ lob.name }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <rx-record-grid class=\"mb-3 mt-1\" [config]=\"recordGridConfig$\" #itsmHkmMappingDataGrid></rx-record-grid>\n\n  <ng-template #statusColTemplate let-dataItem=\"dataItem\">\n    <div class=\"cm-container container\">\n      <div class=\"row\">\n        <div class=\"col-sm-6 align-start\">\n          <adapt-badge\n            [animate]=\"animation\"\n            variant=\"warning\"\n            [showAlert]=\"false\"\n            alertVariant=\"warning\"\n            *ngIf=\"!dataItem.isMapped\"\n          >\n            {{ 'com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.unmapped.label' | translate }}\n          </adapt-badge>\n          <adapt-badge\n            [animate]=\"animation\"\n            variant=\"success\"\n            [showAlert]=\"false\"\n            alertVariant=\"success\"\n            *ngIf=\"dataItem.isMapped\"\n          >\n            {{ 'com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.mapped.label' | translate }}\n          </adapt-badge>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #visibilityGroupColTemplate let-dataItem=\"dataItem\">\n    <div class=\"cm-container container\">\n      <div class=\"row align-start\" *ngIf=\"dataItem.isMapped && hasPortals()\">\n        <a href=\"javascript:void(0)\" (click)=\"openAccessMappingDialog(dataItem)\" class=\"alert-link\">{{\n          dataItem.supportGroupName\n        }}</a>\n      </div>\n      <div class=\"row align-start\" *ngIf=\"!dataItem.isMapped || !hasPortals()\">\n        {{ dataItem.supportGroupName }}\n      </div>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }], directives: [{ type: i1$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-hkm-access-mapping',
                    templateUrl: './hkm-access-mapping.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.AdaptDockedPanelService }, { type: i4.TranslateService }, { type: i1.RxModalService }, { type: RxHkmAccessMappingService }]; }, propDecorators: { itsmHkmMappingDataGrid: [{
                type: ViewChild,
                args: ['itsmHkmMappingDataGrid']
            }], statusColTemplate: [{
                type: ViewChild,
                args: ['statusColTemplate', { static: true }]
            }], visibilityGroupColTemplate: [{
                type: ViewChild,
                args: ['visibilityGroupColTemplate', { static: true }]
            }] } });

class HkmAccessMappingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-hkm-access-mapping',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(HkmAccessMappingAdminComponent),
            name: 'HKM Access Mapping',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
HkmAccessMappingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
HkmAccessMappingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingRegistrationModule, declarations: [HkmAccessMappingAdminComponent, HkmAccessMapEditorComponent], imports: [AdminSettingsModule,
        FormsModule,
        ReactiveFormsModule,
        CommonModule,
        TranslateModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        AdaptRxListBuilderModule,
        AdaptEmptyStateModule,
        AdaptIconModule,
        AdaptRxSelectModule,
        AdaptPopoverModule,
        AdaptTabsModule,
        AdaptTableModule,
        AdaptDropdownModule,
        AdaptBadgeModule,
        AdaptAdvancedFilteringModule,
        AdaptTreeModule,
        AdaptSubnavModule,
        AdaptBusyModule,
        RecordGridModule,
        AdaptAlertModule] });
HkmAccessMappingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingRegistrationModule, providers: [ActiveModalRef], imports: [[
            AdminSettingsModule,
            FormsModule,
            ReactiveFormsModule,
            CommonModule,
            TranslateModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            AdaptRxListBuilderModule,
            AdaptEmptyStateModule,
            AdaptIconModule,
            AdaptRxSelectModule,
            AdaptPopoverModule,
            AdaptTabsModule,
            AdaptTableModule,
            AdaptDropdownModule,
            AdaptBadgeModule,
            AdaptAdvancedFilteringModule,
            AdaptTreeModule,
            AdaptSubnavModule,
            AdaptBusyModule,
            RecordGridModule,
            AdaptAlertModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: HkmAccessMappingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [HkmAccessMappingAdminComponent, HkmAccessMapEditorComponent],
                    imports: [
                        AdminSettingsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CommonModule,
                        TranslateModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        AdaptRxListBuilderModule,
                        AdaptEmptyStateModule,
                        AdaptIconModule,
                        AdaptRxSelectModule,
                        AdaptPopoverModule,
                        AdaptTabsModule,
                        AdaptTableModule,
                        AdaptDropdownModule,
                        AdaptBadgeModule,
                        AdaptAdvancedFilteringModule,
                        AdaptTreeModule,
                        AdaptSubnavModule,
                        AdaptBusyModule,
                        RecordGridModule,
                        AdaptAlertModule
                    ],
                    providers: [ActiveModalRef],
                    entryComponents: [HkmAccessMappingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_IFRAME_SECURITY = {
    sections: {
        iframeAllowedSites: {
            infoMessage: 'com.bmc.arsys.rx.client.admin.iframe-security.allowed-sites-info.message',
            name: 'iframeAllowedSites',
            settingName: 'iframeAllowedSites',
            title: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-web-applications.title',
            urls: []
        },
        trustedWebsites: {
            infoMessage: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-sites-info.message',
            name: 'trustedWebsites',
            settingName: 'trustedWebsites',
            title: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-websites.title',
            urls: []
        }
    }
};

class RxIframeSecurityService {
    constructor(rxSystemConfigurationService) {
        this.rxSystemConfigurationService = rxSystemConfigurationService;
    }
    getIframeSecurities() {
        return forkJoin({
            iframeAllowedSites: this.rxSystemConfigurationService.getConfiguration(RX_IFRAME_SECURITY.sections.iframeAllowedSites.settingName),
            trustedWebsites: this.rxSystemConfigurationService.getConfiguration(RX_IFRAME_SECURITY.sections.trustedWebsites.settingName)
        });
    }
    postIframeSecurities(allowedSitesData, trustedWebsitesData) {
        return forkJoin([
            this.rxSystemConfigurationService.setConfiguration(RX_IFRAME_SECURITY.sections.iframeAllowedSites.settingName, allowedSitesData.value),
            this.rxSystemConfigurationService.setConfiguration(RX_IFRAME_SECURITY.sections.trustedWebsites.settingName, trustedWebsitesData.value)
        ]);
    }
}
RxIframeSecurityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIframeSecurityService, deps: [{ token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
RxIframeSecurityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIframeSecurityService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIframeSecurityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxSystemConfigurationService }]; } });

class IframeSecurityAdminComponent extends BaseViewComponent {
    constructor(rxIframeSecurityService, rxNotificationService, rxUrlUtilsService, translateService) {
        super();
        this.rxIframeSecurityService = rxIframeSecurityService;
        this.rxNotificationService = rxNotificationService;
        this.rxUrlUtilsService = rxUrlUtilsService;
        this.translateService = translateService;
        this.hostClass = 'd-block col-12 col-sm-12 col-md-10 col-lg-8 col-xl-6 p-0';
        this.sections = cloneDeep(RX_IFRAME_SECURITY.sections);
        this.listBuilderTexts = {
            searchPlaceholder: this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.filter-or-add-urls.label'),
            notFound: this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.no-urls-added.label')
        };
        this.counter = 0;
        this.invalidUrlMsg = this.translateService.instant('com.bmc.arsys.rx.client.admin.invalid-url.label');
        this.duplicateUrlMsg = this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message');
        this.generateId = () => {
            return this.counter++;
        };
        this.iframeAllowedSitesValidation = (value, items) => {
            return this.itemValidation(value, items, false);
        };
        this.trustedWebsitesValidation = (value, items) => {
            return this.itemValidation(value, items);
        };
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.isDirty()
        });
        this.busy = this.rxIframeSecurityService.getIframeSecurities().subscribe((result) => {
            const iframeAllowedSites = result.iframeAllowedSites;
            const trustedWebsites = result.trustedWebsites;
            if (iframeAllowedSites.value) {
                this.sections.iframeAllowedSites.urls = map(iframeAllowedSites.value.split(' '), (url) => ({
                    id: this.generateId(),
                    name: url
                }));
            }
            if (trustedWebsites.value) {
                this.sections.trustedWebsites.urls = map(trustedWebsites.value.split(' '), (url) => ({
                    id: this.generateId(),
                    name: url
                }));
            }
        });
    }
    isDirty() {
        return this.iframeAllowedSitesListBuilder.dirty || this.trustedWebsitesListBuilder.dirty;
    }
    onSaveClick() {
        const iframeAllowedSitesData = {
            id: this.sections.iframeAllowedSites.name,
            name: this.sections.iframeAllowedSites.name,
            value: map(this.sections.iframeAllowedSites.urls, 'name').join(' ')
        };
        const trustedWebsitesData = {
            id: this.sections.trustedWebsites.name,
            name: this.sections.trustedWebsites.name,
            value: map(this.sections.trustedWebsites.urls, 'name').join(' ')
        };
        this.rxIframeSecurityService.postIframeSecurities(iframeAllowedSitesData, trustedWebsitesData).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.iframe-security-information-saved.message'));
            this.iframeAllowedSitesListBuilder.control.markAsPristine();
            this.trustedWebsitesListBuilder.control.markAsPristine();
        });
    }
    itemValidation(value, items, isProtocolRequired = true) {
        let errorMessage = null;
        if (some(items, { name: value })) {
            errorMessage = this.duplicateUrlMsg;
        }
        else if (!this.rxUrlUtilsService.isValidUrl(value, isProtocolRequired)) {
            errorMessage = this.invalidUrlMsg;
        }
        return errorMessage;
    }
}
IframeSecurityAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityAdminComponent, deps: [{ token: RxIframeSecurityService }, { token: i2.RxNotificationService }, { token: i3.RxUrlUtilsService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
IframeSecurityAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IframeSecurityAdminComponent, selector: "rx-admin-iframe-security", host: { properties: { "class": "this.hostClass" } }, viewQueries: [{ propertyName: "iframeAllowedSitesListBuilder", first: true, predicate: ["iframeAllowedSitesListBuilder"], descendants: true, read: NgModel, static: true }, { propertyName: "trustedWebsitesListBuilder", first: true, predicate: ["trustedWebsitesListBuilder"], descendants: true, read: NgModel, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"Iframe security\" [busy]=\"busy\">\n  <h4>{{ sections.iframeAllowedSites.title | translate }}</h4>\n\n  <adapt-rx-list-builder\n    class=\"d-block mb-4\"\n    name=\"iframeAllowedSitesListBuilder\"\n    [(ngModel)]=\"sections.iframeAllowedSites.urls\"\n    [label]=\"sections.iframeAllowedSites.infoMessage | translate\"\n    [texts]=\"listBuilderTexts\"\n    [itemValidation]=\"iframeAllowedSitesValidation\"\n    hideListAreaLabel=\"true\"\n    #iframeAllowedSitesListBuilder=\"ngModel\"\n  ></adapt-rx-list-builder>\n\n  <h4>{{ sections.trustedWebsites.title | translate }}</h4>\n\n  <adapt-rx-list-builder\n    class=\"d-block mb-4\"\n    name=\"trustedWebsitesListBuilder\"\n    [(ngModel)]=\"sections.trustedWebsites.urls\"\n    [label]=\"sections.trustedWebsites.infoMessage | translate\"\n    [texts]=\"listBuilderTexts\"\n    [itemValidation]=\"trustedWebsitesValidation\"\n    hideListAreaLabel=\"true\"\n    #trustedWebsitesListBuilder=\"ngModel\"\n  ></adapt-rx-list-builder>\n\n  <button\n    class=\"align-self-start\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    type=\"button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxListBuilderComponent, selector: "adapt-rx-list-builder", inputs: ["hideSearchField", "hideEdit", "hideDelete", "hideListAreaLabel", "customSort", "texts", "menuHeight", "listItemMaxLength", "generateListItemId", "itemValidation", "disabled", "treeStructure", "listItemFormatter", "listItemSetterProp", "listItemContentTemplate", "selectionMode"], outputs: ["listItemAdd", "listItemEdit", "listItemUpdate", "listItemRemove"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-iframe-security',
                    templateUrl: './iframe-security.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxIframeSecurityService }, { type: i2.RxNotificationService }, { type: i3.RxUrlUtilsService }, { type: i4.TranslateService }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], iframeAllowedSitesListBuilder: [{
                type: ViewChild,
                args: ['iframeAllowedSitesListBuilder', { read: NgModel, static: true }]
            }], trustedWebsitesListBuilder: [{
                type: ViewChild,
                args: ['trustedWebsitesListBuilder', { read: NgModel, static: true }]
            }] } });

class IframeSecurityRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-iframe-security',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeSecurityAdminComponent),
            name: 'Iframe security',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
IframeSecurityRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
IframeSecurityRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityRegistrationModule, declarations: [IframeSecurityAdminComponent], imports: [AdaptButtonModule,
        AdaptRxListBuilderModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        TranslateModule] });
IframeSecurityRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityRegistrationModule, imports: [[
            AdaptButtonModule,
            AdaptRxListBuilderModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IframeSecurityRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IframeSecurityAdminComponent],
                    imports: [
                        AdaptButtonModule,
                        AdaptRxListBuilderModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        TranslateModule
                    ],
                    entryComponents: [IframeSecurityAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

var AuthTypes;
(function (AuthTypes) {
    AuthTypes[AuthTypes["ANONYMOUS"] = 0] = "ANONYMOUS";
    AuthTypes[AuthTypes["BASIC"] = 10] = "BASIC";
    AuthTypes[AuthTypes["APIKEY"] = 20] = "APIKEY";
    AuthTypes[AuthTypes["OAUTH2"] = 30] = "OAUTH2";
    AuthTypes[AuthTypes["CUSTOM"] = 40] = "CUSTOM";
})(AuthTypes || (AuthTypes = {}));

const authTypeOptions$1 = [
    {
        id: AuthTypes.ANONYMOUS,
        key: 'ANONYMOUS',
        labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.anonymous.label'
    },
    {
        id: AuthTypes.BASIC,
        key: 'BASIC',
        labelKey: 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.basic.label'
    },
    {
        id: AuthTypes.APIKEY,
        key: 'APIKEY',
        labelKey: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label'
    },
    {
        id: AuthTypes.OAUTH2,
        key: 'OAUTH2',
        labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.oauth.label'
    },
    {
        id: AuthTypes.CUSTOM,
        key: 'CUSTOM',
        labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label'
    }
];
const RX_IPAAS_APIS = {
    fieldIds: {
        groupName: 71003,
        apiName: 71004,
        organization: 71001,
        environment: 71002,
        path: 71005,
        method: 71006
    },
    methods: {
        0: 'GET',
        10: 'POST',
        20: 'PUT',
        30: 'DELETE'
    },
    authTypeOptions: authTypeOptions$1,
    authTypeFields: {
        0: [],
        10: [
            {
                name: 'username',
                labelKey: 'com.bmc.arsys.rx.client.common.user-name.label',
                rxId: 'username',
                isRequired: true
            },
            {
                name: 'credentials',
                labelKey: 'com.bmc.arsys.rx.client.common.password.label',
                rxId: 'password',
                isPassword: true,
                isRequired: true
            }
        ],
        20: [
            {
                name: 'key',
                labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-key-name.label',
                rxId: 'key',
                isRequired: true
            },
            {
                name: 'value',
                labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-key-value.label',
                rxId: 'value',
                isPassword: true,
                isRequired: true
            }
        ],
        30: [
            {
                name: 'authServerEndpoint',
                labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.auth-server-endpoint.label',
                rxId: 'authServerEndpoint',
                isRequired: true
            },
            {
                name: 'tokenPath',
                labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.token-url.label',
                rxId: 'tokenPath',
                isRequired: true
            },
            {
                name: 'username',
                labelKey: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'username',
                isRequired: true
            },
            {
                name: 'credentials',
                labelKey: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'credentials',
                isPassword: true,
                isRequired: true
            },
            {
                name: 'redirectUri',
                labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.redirect-uri.label',
                rxId: 'redirectUri'
            },
            {
                name: 'scope',
                labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.scope.label',
                rxId: 'scope'
            }
        ]
    }
};

class ApiEditorBase extends RxModalClass {
    constructor(activeModalRef, injector) {
        super(activeModalRef, injector);
        this.activeModalRef = activeModalRef;
        this.injector = injector;
        this.formBuilder = this.injector.get(FormBuilder);
        this.rxNotificationService = this.injector.get(RxNotificationService);
        this.translateService = this.injector.get(TranslateService);
        this.rxRecordInstanceDataPageService = this.injector.get(RxRecordInstanceDataPageService);
        this.organizations = [];
        this.environments = [];
        this.groupNameList = [];
        this.methodTypeOptions = [];
        this.authTypeOptions = [];
        this.activeIndex = 0;
        this.isEditMode = false;
        this.authTypeFields = [];
        this.apiPaths = [];
        this.loadingState = false;
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.destroyed$ = new ReplaySubject(1);
        this.optionFormatterLabel = (option) => this.translateService.instant(get(option, 'labelKey', this.defaultSelection));
        this.optionFormatterName = (option) => this.translateService.instant(get(option, 'name', this.defaultSelection));
        this.selectedApiDefinition = this.activeModalRef.getData();
        this.isEditMode = Boolean(this.selectedApiDefinition.id);
    }
    ngOnInit() {
        super.ngOnInit();
        this.ipaasApiEditorForm = this.formBuilder.group({
            organization: [[], Validators.required],
            environment: [[], Validators.required],
            apiPath: [[], Validators.required],
            apiGroupName: ['', [Validators.required, Validators.maxLength(254), Validators.pattern('^[a-zA-Z0-9 _-]+$')]],
            apiName: ['', [Validators.required, Validators.maxLength(254), Validators.pattern('^[a-zA-Z0-9 _-]+$')]],
            requestMethod: [[], Validators.required],
            authorizationType: [[], Validators.required],
            headers: this.formBuilder.array([]),
            queryParameters: this.formBuilder.array([]),
            authTypeDetails: this.formBuilder.array([]),
            customAuthTypeHeaders: this.formBuilder.array([]),
            customAuthTypeQueryParams: this.formBuilder.array([])
        });
        this.ipaasApiEditorForm.patchValue({ apiGroupName: this.selectedApiDefinition.groupName });
        this.busy = this.getOrganizationsAndEnvironments().subscribe((data) => {
            this.organizations = data;
            if (this.organizations.length === 1) {
                this.ipaasApiEditorForm.get('organization').setValue([this.organizations[0]]);
                this.getEnvironments(this.organizations[0]);
            }
        });
        this.getGroupAndApiDetails();
        if (this.isEditMode) {
            this.busy = this.getApiDefinition(this.selectedApiDefinition.id)
                .pipe(switchMap((data) => {
                var _a, _b;
                this.initialApiDefinition = cloneDeep(data);
                this.ipaasApiEditorForm.patchValue({
                    organization: [{ name: data.organization, id: data.organizationId }],
                    environment: [{ name: data.environment, id: data.environmentId }],
                    apiPath: [data.path],
                    apiGroupName: data.group,
                    apiName: data.name,
                    requestMethod: [RX_IPAAS_APIS.methods[data.method]],
                    authorizationType: [find(RX_IPAAS_APIS.authTypeOptions, (type) => type.id === data.authType)]
                });
                this.selectedOrganization = { id: data.organizationId, name: data.organization };
                this.authTypeFields = RX_IPAAS_APIS.authTypeFields[data.authType];
                this.isCustomAuthType = data.authType === AuthTypes.CUSTOM;
                if (this.isCustomAuthType) {
                    forEach(data.authTypeDetails.httpHeaders, (httpHeader) => this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(this.customAuthTypeFormItem(httpHeader)));
                    forEach(data.authTypeDetails.queryParams, (queryParam) => this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(this.customAuthTypeFormItem(queryParam)));
                }
                else {
                    this.createAuthTypeFormFields();
                }
                forEach(compact((_a = data.headers) === null || _a === void 0 ? void 0 : _a.split(',')), (header) => {
                    this.setApiVariables('headers', header);
                });
                forEach(compact((_b = data.queryParams) === null || _b === void 0 ? void 0 : _b.split(',')), (param) => {
                    this.setApiVariables('queryParameters', param);
                });
                return this.getApiPathDefinitions({ name: data.environment, id: data.environmentId });
            }))
                .subscribe((apiPath) => {
                this.onEditMethodAndAuthTypeUpdate(apiPath);
            });
        }
        this.ipaasApiEditorForm
            .get('apiName')
            .valueChanges.pipe(takeUntil(this.destroyed$))
            .subscribe((value) => {
            var _a;
            const isApiNameAlreadyExists = !(((_a = this.selectedApiDefinition) === null || _a === void 0 ? void 0 : _a.apiName) === value) &&
                some(this.groupAndApiNameList, (group) => group[RX_IPAAS_APIS.fieldIds.groupName] === trim(this.ipaasApiEditorForm.get('apiGroupName').value) &&
                    includes(group.apis, trim(value)));
            if (isApiNameAlreadyExists) {
                this.ipaasApiEditorForm.get('apiName').setErrors({
                    invalidApi: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.api-name-exists.error.message')
                    }
                });
            }
        });
        this.ipaasApiEditorForm
            .get('apiGroupName')
            .valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$))
            .subscribe(() => {
            this.ipaasApiEditorForm.get('apiName').updateValueAndValidity();
        });
    }
    isDirty() {
        return this.ipaasApiEditorForm.dirty;
    }
    createFormItem(value) {
        return this.formBuilder.group({
            name: [value, [Validators.maxLength(254), Validators.pattern('^[a-zA-Z0-9_-]+$')]]
        });
    }
    customAuthTypeFormItem(fieldData) {
        return this.formBuilder.group({
            key: [fieldData.key, [Validators.required, Validators.maxLength(254), Validators.pattern('^[a-zA-Z0-9_-]+$')]],
            value: [fieldData.value, [Validators.required, Validators.maxLength(254), Validators.pattern('^[a-zA-Z0-9_-]+$')]]
        });
    }
    getEnvironments(organization) {
        this.selectedOrganization = organization;
        this.environments = organization.environments || [];
        if (this.environments.length === 1) {
            this.ipaasApiEditorForm.get('environment').setValue([this.environments[0]]);
            this.getApiPaths(this.environments[0]);
        }
        else {
            this.ipaasApiEditorForm.get('environment').setValue([]);
            this.getApiPaths();
        }
    }
    setApiVariables(type, value) {
        const apiVariable = this.ipaasApiEditorForm.get(type);
        apiVariable.push(this.createFormItem(value));
    }
    getAuthTypes(method) {
        var _a, _b, _c, _d;
        this.ipaasApiEditorForm.get('authorizationType').setValue([]);
        this.authTypeFieldDetails = (_a = this.apiPathDetails[this.selectedApiPath][method]) === null || _a === void 0 ? void 0 : _a.authTypes;
        this.authTypeOptions = map(this.authTypeFieldDetails, (option) => find(RX_IPAAS_APIS.authTypeOptions, (type) => type.id === AuthTypes[keys(option)[0]]));
        if (((_b = this.authTypeOptions) === null || _b === void 0 ? void 0 : _b.length) === 1) {
            this.ipaasApiEditorForm.get('authorizationType').setValue([this.authTypeOptions[0]]);
            this.getAuthTypeFields(this.authTypeOptions[0]);
        }
        else {
            this.authTypeFields = RX_IPAAS_APIS.authTypeFields[0];
            this.createAuthTypeFormFields();
        }
        forEach((_c = this.apiPathDetails[this.selectedApiPath][method]) === null || _c === void 0 ? void 0 : _c.headers, (header) => {
            this.setApiVariables('headers', header);
        });
        forEach((_d = this.apiPathDetails[this.selectedApiPath][method]) === null || _d === void 0 ? void 0 : _d.queryParams, (param) => {
            this.setApiVariables('queryParameters', param);
        });
    }
    onEditMethodAndAuthTypeUpdate(apiPath) {
        var _a;
        this.environments = this.getEnvironmentList();
        this.apiPaths = keys(apiPath);
        this.apiPathDetails = apiPath;
        this.selectedApiPath = this.initialApiDefinition.path;
        this.methodTypeOptions = keys(apiPath[this.initialApiDefinition.path]);
        this.authTypeFieldDetails =
            (_a = this.apiPathDetails[this.selectedApiPath][RX_IPAAS_APIS.methods[this.initialApiDefinition.method]]) === null || _a === void 0 ? void 0 : _a.authTypes;
        this.authTypeOptions = map(this.authTypeFieldDetails, (option) => find(RX_IPAAS_APIS.authTypeOptions, { id: AuthTypes[keys(option)[0]] }));
    }
    getApiPaths(environment) {
        this.ipaasApiEditorForm.get('apiPath').setValue([]);
        this.apiPaths = [];
        this.resetFormFields();
        if (environment) {
            this.loadingState = true;
            this.getApiPathDefinitions(environment).subscribe((response) => {
                this.apiPathDetails = response;
                this.apiPaths = keys(response);
                if (this.apiPaths.length === 1) {
                    this.ipaasApiEditorForm.get('apiPath').setValue([this.apiPaths[0]]);
                    this.getApiMethods(this.apiPaths[0]);
                }
                this.loadingState = false;
            }, () => {
                this.loadingState = false;
            });
        }
    }
    getApiMethods(apiPath) {
        var _a;
        this.resetFormFields();
        this.selectedApiPath = apiPath;
        this.methodTypeOptions = keys(this.apiPathDetails[this.selectedApiPath]);
        if (((_a = this.methodTypeOptions) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            this.ipaasApiEditorForm.get('requestMethod').setValue([this.methodTypeOptions[0]]);
            this.getAuthTypes(this.methodTypeOptions[0]);
        }
    }
    getGroupAndApiDetails() {
        const params = {
            startIndex: 0,
            pageSize: -1,
            recorddefinition: this.selectedApiDefinition.recordDefinitionName,
            propertySelection: [
                RX_IPAAS_APIS.fieldIds.groupName,
                RX_IPAAS_APIS.fieldIds.apiName,
                RX_RECORD_DEFINITION.coreFieldIds.id
            ]
        };
        this.rxRecordInstanceDataPageService
            .post({ params })
            .pipe(map$1((response) => ({
            data: map(groupBy(response.data, RX_IPAAS_APIS.fieldIds.groupName), (options, id) => {
                return {
                    [RX_IPAAS_APIS.fieldIds.groupName]: id,
                    apis: map(options, (option) => option[RX_IPAAS_APIS.fieldIds.apiName])
                };
            })
        })))
            .subscribe((response) => {
            this.groupAndApiNameList = response.data;
            this.groupNameList = sortBy(map(this.groupAndApiNameList, (option) => option[RX_IPAAS_APIS.fieldIds.groupName]));
        });
    }
    getAuthTypeFields(authType) {
        var _a, _b, _c, _d;
        const authTypeDetail = find(this.authTypeFieldDetails, authType.key)[authType.key];
        this.isCustomAuthType = authType.id === AuthTypes.CUSTOM;
        if (this.isCustomAuthType) {
            // "[foo, bar]" => ["foo", "bar"]
            const headerKeys = ((_b = (_a = authTypeDetail.headers) === null || _a === void 0 ? void 0 : _a.replace(/[\[\] ]/g, '')) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
            const queryParamKeys = ((_d = (_c = authTypeDetail.queryParams) === null || _c === void 0 ? void 0 : _c.replace(/[\[\] ]/g, '')) === null || _d === void 0 ? void 0 : _d.split(',')) || [];
            this.ipaasApiEditorForm.get('customAuthTypeHeaders').clear();
            this.ipaasApiEditorForm.get('customAuthTypeQueryParams').clear();
            forEach(headerKeys, (headerKey) => this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(this.customAuthTypeFormItem({ key: headerKey, value: '' })));
            forEach(queryParamKeys, (queryParamKey) => this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(this.customAuthTypeFormItem({ key: queryParamKey, value: '' })));
        }
        else {
            this.authTypeFields = RX_IPAAS_APIS.authTypeFields[authType.id];
            this.createAuthTypeFormFields(authTypeDetail);
        }
    }
    createAuthTypeFormFields(fieldDetails) {
        const formArrayFields = this.authTypeFields.reduce((obj, item) => Object.assign(obj, { [item.name]: '' }), {});
        const authTypeDetails = this.ipaasApiEditorForm.get('authTypeDetails');
        this.isCustomAuthType = false;
        if (authTypeDetails === null || authTypeDetails === void 0 ? void 0 : authTypeDetails.length) {
            authTypeDetails.removeAt(0);
        }
        authTypeDetails.push(this.formBuilder.group(formArrayFields));
        fieldDetails =
            (this.initialApiDefinition && merge(this.initialApiDefinition.authTypeDetails, fieldDetails)) || fieldDetails;
        if (fieldDetails) {
            this.ipaasApiEditorForm.controls.authTypeDetails.patchValue([fieldDetails]);
        }
    }
    tabChanged({ index }) {
        this.activeIndex = index;
    }
    addHeader() {
        this.headers = this.ipaasApiEditorForm.get('headers');
        this.headers.push(this.createFormItem(''));
    }
    removeHeader(index) {
        this.headers = this.ipaasApiEditorForm.get('headers');
        this.headers.removeAt(index);
        this.ipaasApiEditorForm.markAsDirty();
    }
    addQueryParameter() {
        this.queryParameters = this.ipaasApiEditorForm.get('queryParameters');
        this.queryParameters.push(this.createFormItem(''));
    }
    removeQueryParameter(index) {
        this.queryParameters = this.ipaasApiEditorForm.get('queryParameters');
        this.queryParameters.removeAt(index);
        this.ipaasApiEditorForm.markAsDirty();
    }
    addCustomAuthTypeHeader() {
        this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(this.customAuthTypeFormItem({ key: '', value: '' }));
    }
    removeCustomAuthTypeHeader(index) {
        this.ipaasApiEditorForm.get('customAuthTypeHeaders').removeAt(index);
        this.ipaasApiEditorForm.markAsDirty();
    }
    addCustomAuthTypeQueryParam() {
        this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(this.customAuthTypeFormItem({ key: '', value: '' }));
    }
    removeCustomAuthTypeQueryParam(index) {
        this.ipaasApiEditorForm.get('customAuthTypeQueryParams').removeAt(index);
        this.ipaasApiEditorForm.markAsDirty();
    }
    isSaveButtonDisabled() {
        return this.ipaasApiEditorForm.pristine || this.ipaasApiEditorForm.invalid;
    }
    save() {
        let adminSetting$;
        const formValue = this.ipaasApiEditorForm.getRawValue();
        const headers = map(formValue.headers, (header) => header.name);
        const queryParams = map(formValue.queryParameters, (parameter) => parameter.name);
        if (this.isCustomAuthType) {
            formValue.authTypeDetails = [
                {
                    httpHeaders: formValue.customAuthTypeHeaders,
                    queryParams: formValue.customAuthTypeQueryParams
                }
            ];
        }
        const param = {
            organization: formValue.organization[0].name,
            environment: formValue.environment[0].name,
            group: formValue.apiGroupName,
            name: formValue.apiName,
            path: formValue.apiPath[0],
            method: findKey(RX_IPAAS_APIS.methods, (value) => value === formValue.requestMethod[0]),
            authType: formValue.authorizationType[0].id,
            queryParams: pull(queryParams, '').toString(),
            headers: pull(headers, '').toString(),
            description: `${formValue.apiGroupName}: ${formValue.apiName}`,
            authTypeDetails: formValue.authTypeDetails[0] || {}
        };
        if (this.isEditMode) {
            param.id = this.initialApiDefinition.id;
            adminSetting$ = this.editApiDefinition(param, formValue);
        }
        else {
            adminSetting$ = this.createApiDefinition(param, formValue);
        }
        this.busy = adminSetting$.subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.save.success.message'));
            this.activeModalRef.close(adminSetting$);
        });
    }
    cancel() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
    resetFormFields() {
        this.methodTypeOptions = [];
        this.ipaasApiEditorForm.get('requestMethod').setValue([]);
        this.authTypeOptions = [];
        this.ipaasApiEditorForm.get('authorizationType').setValue([]);
        this.authTypeFields = RX_IPAAS_APIS.authTypeFields[0];
        this.createAuthTypeFormFields();
    }
}
ApiEditorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApiEditorBase, deps: [{ token: i1$1.ActiveModalRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
ApiEditorBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApiEditorBase });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ApiEditorBase, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: i0.Injector }]; } });

class RxJitterbitApisService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.apiDefinitionUrl = '/api/com.bmc.dsm.ipaas-jitterbit/rx/application/ipaas/jitterbit';
    }
    deleteApiDefinition(apiId) {
        return this.httpClient.delete(`${this.apiDefinitionUrl}/apidefinition/${apiId}`);
    }
    createApiDefinition(apiDefinition) {
        return this.httpClient.post(`${this.apiDefinitionUrl}/apidefinition`, apiDefinition);
    }
    getApiDefinition(apiId) {
        return this.httpClient.get(`${this.apiDefinitionUrl}/apidefinition/${apiId}`);
    }
    editApiDefinition(apiDefinition) {
        return this.httpClient.put(`${this.apiDefinitionUrl}/apidefinition/${apiDefinition.id}`, apiDefinition);
    }
    getOrganizationsAndEnvironments() {
        return this.httpClient.get(`${this.apiDefinitionUrl}/organization-info`);
    }
    getApiPathDefinitions(organization, environment) {
        return this.httpClient.get(`${this.apiDefinitionUrl}/api-specs/${encodeURIComponent(organization)}/${encodeURIComponent(environment)}`);
    }
}
RxJitterbitApisService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxJitterbitApisService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxJitterbitApisService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxJitterbitApisService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxJitterbitApisService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class JitterbitApiEditorComponent extends ApiEditorBase {
    constructor(rxJitterbitApisService, activeModalRef, injector) {
        super(activeModalRef, injector);
        this.rxJitterbitApisService = rxJitterbitApisService;
        this.activeModalRef = activeModalRef;
        this.injector = injector;
    }
    ngOnInit() {
        super.ngOnInit();
    }
    getOrganizationsAndEnvironments() {
        return this.rxJitterbitApisService.getOrganizationsAndEnvironments().pipe(map$1((organizationEnvironmentList) => map(organizationEnvironmentList, (environments, organization) => ({
            name: organization,
            environments: map(environments, (environment) => ({ name: environment }))
        }))));
    }
    getApiPathDefinitions(environment) {
        return this.rxJitterbitApisService.getApiPathDefinitions(this.selectedOrganization.name, environment.name);
    }
    getApiDefinition(apiId) {
        return this.rxJitterbitApisService.getApiDefinition(apiId);
    }
    editApiDefinition(apiDefinition) {
        return this.rxJitterbitApisService.editApiDefinition(apiDefinition);
    }
    createApiDefinition(apiDefinition) {
        return this.rxJitterbitApisService.createApiDefinition(apiDefinition);
    }
    getEnvironmentList() {
        var _a;
        return ((_a = this.organizations.find((value) => value.name === this.selectedOrganization.name)) === null || _a === void 0 ? void 0 : _a.environments) || [];
    }
}
JitterbitApiEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApiEditorComponent, deps: [{ token: RxJitterbitApisService }, { token: i1$1.ActiveModalRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
JitterbitApiEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitApiEditorComponent, selector: "rx-jitterbit-api-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"modal-body api-editor-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form [formGroup]=\"ipaasApiEditorForm\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\n        </h6>\n\n        <adapt-rx-select\n          formControlName=\"organization\"\n          [options]=\"organizations\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"organization\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.org' | translate }}\"\n          (onSelectionChange)=\"getEnvironments($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"environment\"\n          [options]=\"environments\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"environment\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label' | translate }}\"\n          (onSelectionChange)=\"getApiPaths($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"apiPath\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\"\n          [options]=\"apiPaths\"\n          [enableFilter]=\"true\"\n          [loadingState]=\"loadingState\"\n          (onSelectionChange)=\"getApiMethods($event.options[0])\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-paths.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-properties.label' | translate }}\n        </h6>\n\n        <adapt-rx-select-editable\n          formControlName=\"apiGroupName\"\n          [options]=\"groupNameList\"\n          rx-id=\"api-group-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          customOptionTitle=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-new.label' | translate }}\"\n          [customOptionOnTop]=\"true\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-group-name.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select-editable>\n\n        <adapt-rx-textfield\n          formControlName=\"apiName\"\n          rx-id=\"api-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          [tooltip]=\"\n            isEditMode\n              ? {\n                  iconName: 'question_circle_o',\n                  content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.edit-api.api-name.tooltip' | translate,\n                  placement: 'right',\n                  popoverMode: true\n                }\n              : null\n          \"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-select\n          formControlName=\"requestMethod\"\n          [options]=\"methodTypeOptions\"\n          (onSelectionChange)=\"getAuthTypes($event.options[0])\"\n          rx-id=\"request-method\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.request-method.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"authorizationType\"\n          [options]=\"authTypeOptions\"\n          [optionFormatter]=\"optionFormatterLabel\"\n          (onSelectionChange)=\"getAuthTypeFields($event.options[0])\"\n          rx-id=\"authorization-type\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.authorization-type.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <ng-container *ngIf=\"!isCustomAuthType\">\n          <div\n            formArrayName=\"authTypeDetails\"\n            *ngFor=\"let authType of ipaasApiEditorForm.get('authTypeDetails')['controls']; let $index = index\"\n          >\n            <div [formGroupName]=\"$index\">\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                *ngFor=\"let field of authTypeFields\"\n                [label]=\"field.labelKey | translate\"\n                [isPassword]=\"field.isPassword\"\n                [formControlName]=\"field.name\"\n                [attr.rx-id]=\"field.rxId\"\n                [required]=\"field.isRequired\"\n              >\n              </adapt-rx-textfield>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"isCustomAuthType\">\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeHeader()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-http-header.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeHeaders\"\n            *ngFor=\"\n              let customAuthTypeHeaders of ipaasApiEditorForm.get('customAuthTypeHeaders')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.http-header.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeHeader($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeQueryParam()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-query-parameter.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeQueryParams\"\n            *ngFor=\"\n              let customAuthTypeQueryParams of ipaasApiEditorForm.get('customAuthTypeQueryParams')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.query-parameter.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeQueryParam($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"my-1\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-variables.label' | translate }}\n        </h6>\n\n        <adapt-tabset [type]=\"'pills'\" [tab-active]=\"activeIndex\" (tab-active-changed)=\"tabChanged($event)\">\n          <adapt-tab-panel\n            adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.headers.label' | translate }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addHeader()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-header.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"headers\"\n              *ngFor=\"let header of ipaasApiEditorForm.get('headers')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeHeader($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n\n          <adapt-tab-panel\n            adapt-tab-title=\"{{\n              'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.query-parameters.label' | translate\n            }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addQueryParameter()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-query-parameter.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"queryParameters\"\n              *ngFor=\"let parameter of ipaasApiEditorForm.get('queryParameters')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeQueryParameter($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n        </adapt-tabset>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n    rx-id=\"save-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-select-editable,adapt-rx-textfield{max-width:400px}.api-editor-modal-body{height:645px}.modal-body{overflow-y:auto}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxSelectEditableComponent, selector: "adapt-rx-select-editable", inputs: ["options", "placeholder", "customOptionTitle", "customOptionOnTop", "size", "menuMaxHeight", "placement", "appendToBody", "mobileView", "disabledStyleForReadonlyState", "popupClass", "customValueMatcher"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApiEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-jitterbit-api-editor',
                    templateUrl: '../ipaas-base-apis/api-editor/api-editor.component.html',
                    styleUrls: ['../ipaas-base-apis/api-editor/api-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxJitterbitApisService }, { type: i1$1.ActiveModalRef }, { type: i0.Injector }]; } });

class RxIpaasBaseApisService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    renameApiGroup(resourceType, oldGroupName, newGroupName) {
        return this.httpClient.post(RX_RESOURCE_URLS.command, {
            resourceType: resourceType,
            oldGroup: oldGroupName,
            newGroup: newGroupName
        });
    }
}
RxIpaasBaseApisService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIpaasBaseApisService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxIpaasBaseApisService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIpaasBaseApisService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIpaasBaseApisService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class GroupEditorComponent extends RxModalClass {
    constructor(activeModalRef, injector) {
        super(activeModalRef, injector);
        this.activeModalRef = activeModalRef;
        this.injector = injector;
    }
    ngOnInit() {
        super.ngOnInit();
        this.groupName = this.activeModalRef.getData().groupName;
        this.groupNames = pull(this.activeModalRef.getData().groupNames, this.groupName);
        this.oldGroupName = this.groupName;
    }
    isDirty() {
        return this.groupNameForm.dirty;
    }
    isSaveButtonDisabled() {
        return this.groupNameForm.pristine || this.groupNameForm.invalid || this.oldGroupName === this.groupName;
    }
    saveGroupName() {
        this.activeModalRef.close(this.groupName);
    }
    cancel() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
}
GroupEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: GroupEditorComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
GroupEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: GroupEditorComponent, selector: "rx-group-editor", viewQueries: [{ propertyName: "groupNameForm", first: true, predicate: ["groupNameForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<form #groupNameForm=\"ngForm\">\n  <adapt-rx-textfield\n    name=\"group-name\"\n    rx-id=\"group-name\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n    [(ngModel)]=\"groupName\"\n    [rxUnique]=\"{\n      errorMessage: 'com.bmc.arsys.rx.client.admin.ipaas-api-editor.group-name-exists.error.message' | translate,\n      items: groupNames\n    }\"\n    pattern=\"^[a-zA-Z0-9 _-]+$\"\n    maxlength=\"254\"\n    required=\"true\"\n    class=\"d-block form-group m-4\"\n  >\n  </adapt-rx-textfield>\n</form>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"saveGroupName()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RxUniqueValidator, selector: "[rxUnique]", inputs: ["rxUnique"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: GroupEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-group-editor',
                    templateUrl: './group-editor.component.html',
                    styleUrls: ['./group-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: i0.Injector }]; }, propDecorators: { groupNameForm: [{
                type: ViewChild,
                args: ['groupNameForm', { read: NgForm, static: true }]
            }] } });

class IpaasBaseApisComponent {
    constructor(translateService, rxIpaasBaseApisService, rxNotificationService, rxModalService, rxViewActionUtilsService, rxRecordInstanceDataPageService) {
        this.translateService = translateService;
        this.rxIpaasBaseApisService = rxIpaasBaseApisService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.rxViewActionUtilsService = rxViewActionUtilsService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.createApi = new EventEmitter();
        this.editApi = new EventEmitter();
        this.deleteApis = new EventEmitter();
        this.recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_IPAAS_APIS.fieldIds.groupName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_IPAAS_APIS.fieldIds.apiName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_IPAAS_APIS.fieldIds.organization,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_IPAAS_APIS.fieldIds.environment,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_IPAAS_APIS.fieldIds.path,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_IPAAS_APIS.fieldIds.method,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.selection,
                    optionNamesById: RX_IPAAS_APIS.methods
                }
            ]
        };
    }
    ngOnInit() {
        this.gridConfig$ = of({
            getData: this.getData.bind(this),
            recordDefinitionName: this.ipaasApisConfig.recordDefinitionName,
            columns: this.getColumns(),
            actionButtons: this.getActionButtons(),
            getRecordDefinition: () => of(this.recordDefinition),
            styles: 'flex-fill'
        });
    }
    getData(queryParams) {
        const params = Object.assign(Object.assign({}, queryParams), { propertySelection: [
                RX_RECORD_DEFINITION.coreFieldIds.id,
                RX_IPAAS_APIS.fieldIds.groupName,
                RX_IPAAS_APIS.fieldIds.apiName,
                RX_IPAAS_APIS.fieldIds.organization,
                RX_IPAAS_APIS.fieldIds.environment,
                RX_IPAAS_APIS.fieldIds.path,
                RX_IPAAS_APIS.fieldIds.method
            ] });
        delete params.searchText;
        return this.rxRecordInstanceDataPageService.post({ params });
    }
    getColumns() {
        return [
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.groupName),
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.group-name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.renameGroup(lastActionRow)
                    }
                ],
                sortable: { direction: ColumnSortDirection.Asc, priority: 0 }
            },
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.apiName),
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.openEditApiDialog(lastActionRow)
                    }
                ],
                sortable: { direction: ColumnSortDirection.Asc, priority: 1 }
            },
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.organization),
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.org')
            },
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.environment),
                index: 3,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label')
            },
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.path),
                index: 4,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.path.label')
            },
            {
                fieldId: String(RX_IPAAS_APIS.fieldIds.method),
                index: 5,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.method.label')
            }
        ];
    }
    getActionButtons() {
        return [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                iconCls: 'trash',
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .confirm({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: RX_MODAL.modalStyles.warning,
                                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.confirmation.message')
                            })
                                .then((result) => {
                                if (result) {
                                    const records = castArray(this.ipaasApisGrid.api.getSelectedRows());
                                    const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);
                                    this.deleteApis.emit(recordIds);
                                }
                            });
                        }
                    }
                ]
            },
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                style: 'tertiary',
                icon: 'pencil',
                disabled: () => this.ipaasApisGrid.api.getSelectedRowCount() !== 1,
                actions: [
                    {
                        name: () => this.openEditApiDialog(this.ipaasApisGrid.api.getFirstSelectedRow())
                    }
                ]
            }
        ];
    }
    renameGroup(row) {
        this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.rename-api-group.label'),
            content: GroupEditorComponent,
            size: OpenViewActionModalSize.Xsmall,
            data: {
                groupName: row[RX_IPAAS_APIS.fieldIds.groupName],
                groupNames: map(this.ipaasApisGrid.adaptTableConfig.data, RX_IPAAS_APIS.fieldIds.groupName)
            }
        })
            .then((groupName) => {
            this.rxIpaasBaseApisService
                .renameApiGroup(this.ipaasApisConfig.resourceType, row[RX_IPAAS_APIS.fieldIds.groupName], groupName)
                .subscribe(() => {
                this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.rename-group-save.success.message'));
                this.refreshIpaasGrid();
            });
        })
            .catch(noop$1);
    }
    openAddApiDialog() {
        const selectedGroup = this.ipaasApisGrid.api.getFirstSelectedRow();
        this.createApi.emit({
            groupName: get(selectedGroup, RX_IPAAS_APIS.fieldIds.groupName, ''),
            recordDefinitionName: this.ipaasApisConfig.recordDefinitionName
        });
    }
    openEditApiDialog(row) {
        this.editApi.emit({
            id: row[RX_RECORD_DEFINITION.coreFieldIds.id],
            apiName: row[RX_IPAAS_APIS.fieldIds.apiName],
            groupName: row[RX_IPAAS_APIS.fieldIds.groupName],
            recordDefinitionName: this.ipaasApisConfig.recordDefinitionName
        });
    }
    refreshIpaasGrid() {
        this.ipaasApisGrid.api.refresh().subscribe();
    }
}
IpaasBaseApisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisComponent, deps: [{ token: i4.TranslateService }, { token: RxIpaasBaseApisService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: i1$4.RxViewActionUtilsService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Component });
IpaasBaseApisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: { ipaasApisConfig: "ipaasApisConfig" }, outputs: { createApi: "createApi", editApi: "editApi", deleteApis: "deleteApis" }, viewQueries: [{ propertyName: "ipaasApisGrid", first: true, predicate: ["ipaasApisGrid"], descendants: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ ipaasApisConfig.titleKey | translate }}\">\n  <div class=\"d-flex ml-2\">\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"openAddApiDialog()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n    </button>\n  </div>\n\n  <rx-record-grid rx-id=\"ipaas-apis-grid\" #ipaasApisGrid [config]=\"gridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-ipaas-base-apis',
                    templateUrl: './ipaas-base-apis.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i4.TranslateService }, { type: RxIpaasBaseApisService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: i1$4.RxViewActionUtilsService }, { type: i3$2.RxRecordInstanceDataPageService }]; }, propDecorators: { ipaasApisConfig: [{
                type: Input
            }], createApi: [{
                type: Output
            }], editApi: [{
                type: Output
            }], deleteApis: [{
                type: Output
            }], ipaasApisGrid: [{
                type: ViewChild,
                args: ['ipaasApisGrid']
            }] } });

class JitterbitApisAdminComponent {
    constructor(rxModalService, rxNotificationService, translateService, rxJitterbitApisService) {
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.rxJitterbitApisService = rxJitterbitApisService;
        this.jitterbitApisConfig = {
            titleKey: 'com.bmc.arsys.rx.client.admin.jitterbit-apis.header.title',
            recordDefinitionName: 'com.bmc.dsm.ipaas-jitterbit:iPaaS Jitterbit API Definition',
            resourceType: 'com.bmc.dsm.ipaas.jitterbit.command.RenameJitterbitApiGroupCommand'
        };
    }
    openJitterbitCreateApiEditor(apiInfo) {
        return this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.add-api.label'),
            content: JitterbitApiEditorComponent,
            data: apiInfo
        })
            .then((result) => {
            if (result) {
                this.ipaasBaseApisComponent.refreshIpaasGrid();
            }
        })
            .catch(noop$1);
    }
    openJitterbitEditApiEditor(apiInfo) {
        return this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.edit-api.label'),
            content: JitterbitApiEditorComponent,
            data: apiInfo
        })
            .then((result) => {
            if (result) {
                this.ipaasBaseApisComponent.refreshIpaasGrid();
            }
        })
            .catch(noop$1);
    }
    deleteJitterbitApis(apiIds) {
        this.deleteApiDefinitions(apiIds).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.success.message'));
            this.ipaasBaseApisComponent.refreshIpaasGrid();
        });
    }
    deleteApiDefinitions(apiIds) {
        if (apiIds.length) {
            const deleteApiObservables$ = apiIds.map((apiId) => this.rxJitterbitApisService.deleteApiDefinition(apiId));
            return forkJoin(deleteApiObservables$);
        }
        return EMPTY;
    }
}
JitterbitApisAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisAdminComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: RxJitterbitApisService }], target: i0.ɵɵFactoryTarget.Component });
JitterbitApisAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitApisAdminComponent, selector: "rx-admin-jitterbit-apis", viewQueries: [{ propertyName: "ipaasBaseApisComponent", first: true, predicate: ["ipaasBaseApisConfiguration"], descendants: true }], ngImport: i0, template: "<rx-ipaas-base-apis\n  [ipaasApisConfig]=\"jitterbitApisConfig\"\n  (createApi)=\"openJitterbitCreateApiEditor($event)\"\n  (editApi)=\"openJitterbitEditApiEditor($event)\"\n  (deleteApis)=\"deleteJitterbitApis($event)\"\n  #ipaasBaseApisConfiguration\n></rx-ipaas-base-apis>\n", components: [{ type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: ["ipaasApisConfig"], outputs: ["createApi", "editApi", "deleteApis"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-jitterbit-apis',
                    templateUrl: './jitterbit-apis.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: RxJitterbitApisService }]; }, propDecorators: { ipaasBaseApisComponent: [{
                type: ViewChild,
                args: ['ipaasBaseApisConfiguration']
            }] } });

class IpaasBaseApisModule {
}
IpaasBaseApisModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IpaasBaseApisModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisModule, declarations: [IpaasBaseApisComponent, GroupEditorComponent], imports: [CommonModule,
        AdminSettingsModule,
        RecordGridModule,
        TranslateModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        FormsModule,
        RxUniqueValidatorModule], exports: [IpaasBaseApisComponent] });
IpaasBaseApisModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            RecordGridModule,
            TranslateModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            FormsModule,
            RxUniqueValidatorModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseApisModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        TranslateModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        FormsModule,
                        RxUniqueValidatorModule
                    ],
                    declarations: [IpaasBaseApisComponent, GroupEditorComponent],
                    exports: [IpaasBaseApisComponent]
                }]
        }] });

class JitterbitApisRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-jitterbit-apis',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(JitterbitApisAdminComponent),
            name: 'iPaaS Jitterbit APIs',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
JitterbitApisRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
JitterbitApisRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisRegistrationModule, declarations: [JitterbitApisAdminComponent, JitterbitApiEditorComponent], imports: [IpaasBaseApisModule,
        RxBusyIndicatorModule,
        ReactiveFormsModule,
        AdaptRxLabelModule,
        AdaptRxSelectModule,
        AdaptRxSelectEditableModule,
        AdaptRxTextfieldModule,
        AdaptTabsModule,
        TranslateModule,
        AdaptButtonModule,
        CommonModule] });
JitterbitApisRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisRegistrationModule, imports: [[
            IpaasBaseApisModule,
            RxBusyIndicatorModule,
            ReactiveFormsModule,
            AdaptRxLabelModule,
            AdaptRxSelectModule,
            AdaptRxSelectEditableModule,
            AdaptRxTextfieldModule,
            AdaptTabsModule,
            TranslateModule,
            AdaptButtonModule,
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitApisRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        IpaasBaseApisModule,
                        RxBusyIndicatorModule,
                        ReactiveFormsModule,
                        AdaptRxLabelModule,
                        AdaptRxSelectModule,
                        AdaptRxSelectEditableModule,
                        AdaptRxTextfieldModule,
                        AdaptTabsModule,
                        TranslateModule,
                        AdaptButtonModule,
                        CommonModule
                    ],
                    declarations: [JitterbitApisAdminComponent, JitterbitApiEditorComponent],
                    entryComponents: [JitterbitApisAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class IpaasBaseConfigurationComponent {
    constructor(rxAdminSettingsService, rxCognitiveServiceService, rxNotificationService, translateService) {
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
    }
    ngAfterContentInit() {
        this.busy = this.getComponentSettings()
            .pipe(tap((componentSettings) => {
            this.isNewIpaasConfiguration = !get(componentSettings, 'values', []).length;
            if (this.isNewIpaasConfiguration) {
                this.componentSettings = map(values(this.ipaasConfig.settingNames), (settingName) => ({
                    assigneeGroupPermission: null,
                    componentName: this.ipaasConfig.componentName,
                    settingId: null,
                    settingName,
                    settingValue: null,
                    ownerKeyValue1: null
                }));
            }
            else {
                this.componentSettings = componentSettings.values;
                this.updateConfigFormValues();
            }
        }))
            .subscribe();
        this.childFormGroup.valueChanges
            .pipe(tap(() => {
            this.connectionTestStatus =
                this.childFormGroup.pristine || this.childFormGroup.invalid
                    ? ConnectionTestStatus.Invalid
                    : ConnectionTestStatus.Unknown;
        }))
            .subscribe();
    }
    updateConfigFormValues() {
        const savedValues = {};
        forEach(this.ipaasConfig.controlsConfig, (fieldValue, fieldName) => (savedValues[fieldName] = this.getValueFromSetting(fieldName)));
        if (isFunction(this.ipaasConfig.getFormValues)) {
            this.childFormGroup.patchValue(this.ipaasConfig.getFormValues(savedValues));
        }
        else {
            this.childFormGroup.patchValue(savedValues);
        }
    }
    onTestConnection() {
        this.rxCognitiveServiceService
            .testConnection(Object.assign({ resourceType: this.ipaasConfig.resourceType }, this.ipaasConfig.getPayload(this.childFormGroup.getRawValue())))
            .pipe(catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    save() {
        if (this.childFormGroup.valid && this.connectionTestStatus === ConnectionTestStatus.Passed) {
            let adminSetting$;
            const payload = this.ipaasConfig.getPayload(this.childFormGroup.getRawValue());
            forEach(payload, (settingValue, settingName) => this.setSettingValue(settingName, settingValue));
            if (this.isNewIpaasConfiguration) {
                adminSetting$ = this.rxAdminSettingsService.createComponentSettings(this.ipaasConfig.componentName, this.componentSettings, {
                    'default-bundle-scope': this.ipaasConfig.bundleScope
                });
            }
            else {
                adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(`${this.ipaasConfig.componentName}/${this.componentSettings[0].ownerKeyValue1}`, this.componentSettings, {
                    'default-bundle-scope': this.ipaasConfig.bundleScope
                });
            }
            this.busy = adminSetting$
                .pipe(tap(() => {
                this.rxNotificationService.addSuccessMessage(this.translateService.instant(this.ipaasConfig.saveMessageKey));
                this.connectionTestStatus = ConnectionTestStatus.Invalid;
                this.childFormGroup.markAsPristine();
            }), switchMap(() => this.getComponentSettings()), tap((response) => {
                this.isNewIpaasConfiguration = false;
                this.componentSettings = response.values;
                this.updateConfigFormValues();
            }))
                .subscribe();
        }
    }
    isSaveButtonDisabled() {
        return (this.childFormGroup.pristine ||
            this.childFormGroup.invalid ||
            this.connectionTestStatus !== ConnectionTestStatus.Passed);
    }
    getComponentSettings() {
        return this.rxAdminSettingsService.getComponentSettings(this.ipaasConfig.componentName, {
            'default-bundle-scope': this.ipaasConfig.bundleScope
        });
    }
    setSettingValue(settingName, value) {
        find(this.componentSettings, {
            settingName
        }).settingValue = value;
    }
    getValueFromSetting(settingName) {
        return get(find(this.componentSettings, {
            settingName
        }), 'settingValue', null);
    }
}
IpaasBaseConfigurationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationComponent, deps: [{ token: i2.RxAdminSettingsService }, { token: RxCognitiveServiceService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
IpaasBaseConfigurationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: { ipaasConfig: "ipaasConfig", childFormGroup: "childFormGroup" }, ngImport: i0, template: "<rx-admin-settings [header]=\"ipaasConfig.titleKey | translate\" [busy]=\"busy\">\n  <ng-content> </ng-content>\n\n  <rx-connection-tester\n    class=\"d-block form-group\"\n    buttonType=\"secondary\"\n    [status]=\"connectionTestStatus\"\n    (testConnection)=\"onTestConnection()\"\n    rx-id=\"ipaas-configuration-test-button\"\n  ></rx-connection-tester>\n\n  <div class=\"align-items-baseline\">\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"primary\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      (click)=\"save()\"\n      rx-id=\"save-button\"\n      class=\"mt-3\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-ipaas-base-configuration',
                    templateUrl: './ipaas-base-configuration.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxAdminSettingsService }, { type: RxCognitiveServiceService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }]; }, propDecorators: { ipaasConfig: [{
                type: Input
            }], childFormGroup: [{
                type: Input
            }] } });

class IpaasBaseConfigurationModule {
}
IpaasBaseConfigurationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IpaasBaseConfigurationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationModule, declarations: [IpaasBaseConfigurationComponent], imports: [AdminSettingsModule,
        AdaptButtonModule,
        CommonModule,
        TranslateModule,
        RxConnectionTesterModule,
        ReactiveFormsModule], exports: [IpaasBaseConfigurationComponent] });
IpaasBaseConfigurationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationModule, imports: [[
            AdminSettingsModule,
            AdaptButtonModule,
            CommonModule,
            TranslateModule,
            RxConnectionTesterModule,
            ReactiveFormsModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IpaasBaseConfigurationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        AdminSettingsModule,
                        AdaptButtonModule,
                        CommonModule,
                        TranslateModule,
                        RxConnectionTesterModule,
                        ReactiveFormsModule
                    ],
                    declarations: [IpaasBaseConfigurationComponent],
                    exports: [IpaasBaseConfigurationComponent]
                }]
        }] });

class JitterbitConfigurationAdminComponent extends BaseViewComponent {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.jitterbitConfig = {
            componentName: 'iPaaS Jitterbit Configuration',
            resourceType: 'com.bmc.dsm.ipaas.jitterbit.command.PingJitterbitCommand',
            bundleScope: RX_APPLICATION.ipaasJitterbitBundleId,
            titleKey: 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.header.title',
            saveMessageKey: 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.saved.message',
            controlsConfig: {
                url: '',
                username: '',
                password: ''
            },
            settingNames: {
                url: 'url',
                userName: 'username',
                password: 'password'
            },
            getPayload: (formValue) => ({
                url: formValue.url,
                username: formValue.username,
                password: formValue.password
            })
        };
    }
    ngOnInit() {
        this.jitterBitConfigurationForm = this.formBuilder.group(this.jitterbitConfig.controlsConfig);
        this.notifyPropertyChanged('api', {
            isDirty: () => this.ipaasBaseConfigurationComponent.childFormGroup.dirty
        });
    }
}
JitterbitConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
JitterbitConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitConfigurationAdminComponent, selector: "rx-admin-jitterbit-configuration", viewQueries: [{ propertyName: "ipaasBaseConfigurationComponent", first: true, predicate: IpaasBaseConfigurationComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<rx-ipaas-base-configuration [ipaasConfig]=\"jitterbitConfig\" [childFormGroup]=\"jitterBitConfigurationForm\">\n  <ng-container [formGroup]=\"jitterBitConfigurationForm\">\n    <adapt-rx-textfield\n      rx-id=\"endpoint-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.end-point-url.label' | translate }}\"\n      formControlName=\"url\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"user-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n      formControlName=\"username\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"password\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n      formControlName=\"password\"\n      required=\"true\"\n      [isPassword]=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n  </ng-container>\n</rx-ipaas-base-configuration>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: ["ipaasConfig", "childFormGroup"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-jitterbit-configuration',
                    templateUrl: './jitterbit-configuration.component.html',
                    styleUrls: ['./jitterbit-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }]; }, propDecorators: { ipaasBaseConfigurationComponent: [{
                type: ViewChild,
                args: [IpaasBaseConfigurationComponent]
            }] } });

class JitterbitConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-jitterbit-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(JitterbitConfigurationAdminComponent),
            name: 'iPaaS Jitterbit configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
JitterbitConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
JitterbitConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationRegistrationModule, declarations: [JitterbitConfigurationAdminComponent], imports: [CommonModule, AdaptRxTextfieldModule, IpaasBaseConfigurationModule, ReactiveFormsModule, TranslateModule] });
JitterbitConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationRegistrationModule, imports: [[CommonModule, AdaptRxTextfieldModule, IpaasBaseConfigurationModule, ReactiveFormsModule, TranslateModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: JitterbitConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AdaptRxTextfieldModule, IpaasBaseConfigurationModule, ReactiveFormsModule, TranslateModule],
                    declarations: [JitterbitConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxMulesoftApisService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.apiDefinitionUrl = '/api/com.bmc.dsm.ipaas-mulesoft/rx/application/ipaas/mulesoft';
    }
    deleteApiDefinition(apiId) {
        return this.httpClient.delete(`${this.apiDefinitionUrl}/apidefinition/${apiId}`);
    }
    createApiDefinition(apiDefinition) {
        return this.httpClient.post(`${this.apiDefinitionUrl}/apidefinition`, apiDefinition);
    }
    getApiDefinition(apiId) {
        return this.httpClient.get(`${this.apiDefinitionUrl}/apidefinition/${apiId}`);
    }
    editApiDefinition(apiDefinition) {
        return this.httpClient.put(`${this.apiDefinitionUrl}/apidefinition/${apiDefinition.id}`, apiDefinition);
    }
    getOrganizationsAndEnvironments() {
        return this.httpClient.get(`${this.apiDefinitionUrl}/organization-info`);
    }
    getApiPathDefinitions(organization, environment) {
        return this.httpClient.get(`${this.apiDefinitionUrl}/api-specs/${encodeURIComponent(organization)}/${encodeURIComponent(environment)}`);
    }
}
RxMulesoftApisService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxMulesoftApisService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxMulesoftApisService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxMulesoftApisService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxMulesoftApisService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class MulesoftApiEditorComponent extends ApiEditorBase {
    constructor(rxMulesoftApisService, activeModalRef, injector) {
        super(activeModalRef, injector);
        this.rxMulesoftApisService = rxMulesoftApisService;
        this.activeModalRef = activeModalRef;
        this.injector = injector;
    }
    ngOnInit() {
        super.ngOnInit();
    }
    getOrganizationsAndEnvironments() {
        return this.rxMulesoftApisService.getOrganizationsAndEnvironments();
    }
    getApiPathDefinitions(environment) {
        return this.rxMulesoftApisService.getApiPathDefinitions(this.selectedOrganization.id, environment.id);
    }
    getApiDefinition(apiId) {
        return this.rxMulesoftApisService.getApiDefinition(apiId);
    }
    editApiDefinition(apiDefinition, formValue) {
        apiDefinition.organizationId = formValue.organization[0].id;
        apiDefinition.environmentId = formValue.environment[0].id;
        return this.rxMulesoftApisService.editApiDefinition(apiDefinition);
    }
    createApiDefinition(apiDefinition, formValue) {
        apiDefinition.organizationId = formValue.organization[0].id;
        apiDefinition.environmentId = formValue.environment[0].id;
        return this.rxMulesoftApisService.createApiDefinition(apiDefinition);
    }
    getEnvironmentList() {
        var _a;
        return ((_a = this.organizations.find((value) => value.id === this.selectedOrganization.id)) === null || _a === void 0 ? void 0 : _a.environments) || [];
    }
}
MulesoftApiEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApiEditorComponent, deps: [{ token: RxMulesoftApisService }, { token: i1$1.ActiveModalRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
MulesoftApiEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftApiEditorComponent, selector: "rx-mulesoft-api-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"modal-body api-editor-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form [formGroup]=\"ipaasApiEditorForm\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\n        </h6>\n\n        <adapt-rx-select\n          formControlName=\"organization\"\n          [options]=\"organizations\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"organization\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.org' | translate }}\"\n          (onSelectionChange)=\"getEnvironments($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"environment\"\n          [options]=\"environments\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"environment\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label' | translate }}\"\n          (onSelectionChange)=\"getApiPaths($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"apiPath\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\"\n          [options]=\"apiPaths\"\n          [enableFilter]=\"true\"\n          [loadingState]=\"loadingState\"\n          (onSelectionChange)=\"getApiMethods($event.options[0])\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-paths.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-properties.label' | translate }}\n        </h6>\n\n        <adapt-rx-select-editable\n          formControlName=\"apiGroupName\"\n          [options]=\"groupNameList\"\n          rx-id=\"api-group-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          customOptionTitle=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-new.label' | translate }}\"\n          [customOptionOnTop]=\"true\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-group-name.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select-editable>\n\n        <adapt-rx-textfield\n          formControlName=\"apiName\"\n          rx-id=\"api-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          [tooltip]=\"\n            isEditMode\n              ? {\n                  iconName: 'question_circle_o',\n                  content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.edit-api.api-name.tooltip' | translate,\n                  placement: 'right',\n                  popoverMode: true\n                }\n              : null\n          \"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-select\n          formControlName=\"requestMethod\"\n          [options]=\"methodTypeOptions\"\n          (onSelectionChange)=\"getAuthTypes($event.options[0])\"\n          rx-id=\"request-method\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.request-method.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"authorizationType\"\n          [options]=\"authTypeOptions\"\n          [optionFormatter]=\"optionFormatterLabel\"\n          (onSelectionChange)=\"getAuthTypeFields($event.options[0])\"\n          rx-id=\"authorization-type\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.authorization-type.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <ng-container *ngIf=\"!isCustomAuthType\">\n          <div\n            formArrayName=\"authTypeDetails\"\n            *ngFor=\"let authType of ipaasApiEditorForm.get('authTypeDetails')['controls']; let $index = index\"\n          >\n            <div [formGroupName]=\"$index\">\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                *ngFor=\"let field of authTypeFields\"\n                [label]=\"field.labelKey | translate\"\n                [isPassword]=\"field.isPassword\"\n                [formControlName]=\"field.name\"\n                [attr.rx-id]=\"field.rxId\"\n                [required]=\"field.isRequired\"\n              >\n              </adapt-rx-textfield>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"isCustomAuthType\">\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeHeader()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-http-header.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeHeaders\"\n            *ngFor=\"\n              let customAuthTypeHeaders of ipaasApiEditorForm.get('customAuthTypeHeaders')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.http-header.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeHeader($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeQueryParam()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-query-parameter.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeQueryParams\"\n            *ngFor=\"\n              let customAuthTypeQueryParams of ipaasApiEditorForm.get('customAuthTypeQueryParams')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.query-parameter.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeQueryParam($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"my-1\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-variables.label' | translate }}\n        </h6>\n\n        <adapt-tabset [type]=\"'pills'\" [tab-active]=\"activeIndex\" (tab-active-changed)=\"tabChanged($event)\">\n          <adapt-tab-panel\n            adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.headers.label' | translate }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addHeader()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-header.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"headers\"\n              *ngFor=\"let header of ipaasApiEditorForm.get('headers')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeHeader($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n\n          <adapt-tab-panel\n            adapt-tab-title=\"{{\n              'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.query-parameters.label' | translate\n            }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addQueryParameter()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-query-parameter.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"queryParameters\"\n              *ngFor=\"let parameter of ipaasApiEditorForm.get('queryParameters')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeQueryParameter($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n        </adapt-tabset>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n    rx-id=\"save-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-select-editable,adapt-rx-textfield{max-width:400px}.api-editor-modal-body{height:645px}.modal-body{overflow-y:auto}\n"], components: [{ type: i1.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxSelectEditableComponent, selector: "adapt-rx-select-editable", inputs: ["options", "placeholder", "customOptionTitle", "customOptionOnTop", "size", "menuMaxHeight", "placement", "appendToBody", "mobileView", "disabledStyleForReadonlyState", "popupClass", "customValueMatcher"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApiEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-mulesoft-api-editor',
                    templateUrl: '../ipaas-base-apis/api-editor/api-editor.component.html',
                    styleUrls: ['../ipaas-base-apis/api-editor/api-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxMulesoftApisService }, { type: i1$1.ActiveModalRef }, { type: i0.Injector }]; } });

class MulesoftApisAdminComponent {
    constructor(rxModalService, rxNotificationService, translateService, rxMulesoftApisService) {
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.rxMulesoftApisService = rxMulesoftApisService;
        this.mulesoftConfig = {
            titleKey: 'com.bmc.arsys.rx.client.admin.mulesoft-apis.header.title',
            recordDefinitionName: 'com.bmc.dsm.ipaas-mulesoft:iPaaS MuleSoft API Definition',
            resourceType: 'com.bmc.dsm.ipaas.mulesoft.command.RenameMuleSoftApiGroupCommand'
        };
    }
    openMulesoftCreateApiEditor(apiInfo) {
        return this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.add-api.label'),
            content: MulesoftApiEditorComponent,
            data: apiInfo
        })
            .then((result) => {
            if (result) {
                this.ipaasBaseApisComponent.refreshIpaasGrid();
            }
        })
            .catch(noop$1);
    }
    openMulesoftEditApiEditor(apiInfo) {
        return this.rxModalService
            .openModal({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.edit-api.label'),
            content: MulesoftApiEditorComponent,
            data: apiInfo
        })
            .then((result) => {
            if (result) {
                this.ipaasBaseApisComponent.refreshIpaasGrid();
            }
        })
            .catch(noop$1);
    }
    deleteMulesoftApis(apiIds) {
        this.deleteApiDefinitions(apiIds).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.success.message'));
            this.ipaasBaseApisComponent.refreshIpaasGrid();
        });
    }
    deleteApiDefinitions(apiIds) {
        if (apiIds.length) {
            const deleteApiObservables$ = apiIds.map((apiId) => this.rxMulesoftApisService.deleteApiDefinition(apiId));
            return forkJoin(deleteApiObservables$);
        }
        return EMPTY;
    }
}
MulesoftApisAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisAdminComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: RxMulesoftApisService }], target: i0.ɵɵFactoryTarget.Component });
MulesoftApisAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftApisAdminComponent, selector: "rx-admin-mulesoft-apis", viewQueries: [{ propertyName: "ipaasBaseApisComponent", first: true, predicate: ["ipaasBaseApisConfiguration"], descendants: true }], ngImport: i0, template: "<rx-ipaas-base-apis\n  [ipaasApisConfig]=\"mulesoftConfig\"\n  (createApi)=\"openMulesoftCreateApiEditor($event)\"\n  (editApi)=\"openMulesoftEditApiEditor($event)\"\n  (deleteApis)=\"deleteMulesoftApis($event)\"\n  #ipaasBaseApisConfiguration\n></rx-ipaas-base-apis>\n", components: [{ type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: ["ipaasApisConfig"], outputs: ["createApi", "editApi", "deleteApis"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-mulesoft-apis',
                    templateUrl: './mulesoft-apis.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: RxMulesoftApisService }]; }, propDecorators: { ipaasBaseApisComponent: [{
                type: ViewChild,
                args: ['ipaasBaseApisConfiguration']
            }] } });

class MulesoftApisRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-mulesoft-apis',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(MulesoftApisAdminComponent),
            name: 'iPaaS MuleSoft APIs',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
MulesoftApisRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
MulesoftApisRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisRegistrationModule, declarations: [MulesoftApisAdminComponent, MulesoftApiEditorComponent], imports: [IpaasBaseApisModule,
        RxBusyIndicatorModule,
        ReactiveFormsModule,
        AdaptRxLabelModule,
        AdaptRxSelectModule,
        AdaptRxSelectEditableModule,
        AdaptRxTextfieldModule,
        AdaptTabsModule,
        TranslateModule,
        AdaptButtonModule,
        CommonModule] });
MulesoftApisRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisRegistrationModule, imports: [[
            IpaasBaseApisModule,
            RxBusyIndicatorModule,
            ReactiveFormsModule,
            AdaptRxLabelModule,
            AdaptRxSelectModule,
            AdaptRxSelectEditableModule,
            AdaptRxTextfieldModule,
            AdaptTabsModule,
            TranslateModule,
            AdaptButtonModule,
            CommonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftApisRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        IpaasBaseApisModule,
                        RxBusyIndicatorModule,
                        ReactiveFormsModule,
                        AdaptRxLabelModule,
                        AdaptRxSelectModule,
                        AdaptRxSelectEditableModule,
                        AdaptRxTextfieldModule,
                        AdaptTabsModule,
                        TranslateModule,
                        AdaptButtonModule,
                        CommonModule
                    ],
                    declarations: [MulesoftApisAdminComponent, MulesoftApiEditorComponent],
                    entryComponents: [MulesoftApisAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const AUTH_TYPE = {
    basicAuth: '0',
    oAuth2: '1'
};
const MULESOFT_AUTH_TYPE_OPTIONS = [
    {
        id: AUTH_TYPE.basicAuth,
        label: 'Basic'
    },
    {
        id: AUTH_TYPE.oAuth2,
        label: 'OAuth 2.0'
    }
];

class MulesoftConfigurationAdminComponent extends BaseViewComponent {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.mulesoftConfig = {
            componentName: 'iPaaS MuleSoft Configuration',
            resourceType: 'com.bmc.dsm.ipaas.mulesoft.command.PingMuleSoftCommand',
            bundleScope: RX_APPLICATION.ipaasMulesoftBundleId,
            titleKey: 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.header.title',
            saveMessageKey: 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.saved.message',
            controlsConfig: {
                url: ['', AdaptValidators.required()],
                authType: ['', AdaptValidators.required()],
                username: '',
                password: '',
                clientId: '',
                clientSecret: ''
            },
            getFormValues: (formValue) => ({
                url: formValue.url,
                authType: this.getAuthTypeOption(formValue.authType),
                username: formValue.username,
                password: formValue.password,
                clientId: formValue.clientId,
                clientSecret: formValue.clientSecret
            }),
            settingNames: {
                url: 'url',
                userName: 'username',
                password: 'password',
                authType: 'authType',
                clientId: 'clientId',
                clientSecret: 'clientSecret'
            },
            getPayload: (formValue) => {
                var _a;
                switch ((_a = first(formValue.authType)) === null || _a === void 0 ? void 0 : _a.id) {
                    case AUTH_TYPE.oAuth2: {
                        return {
                            url: formValue.url,
                            authType: this.getAuthTypePayload(formValue.authType),
                            username: null,
                            password: null,
                            clientId: formValue.clientId,
                            clientSecret: formValue.clientSecret
                        };
                    }
                    default: {
                        return {
                            url: formValue.url,
                            authType: this.getAuthTypePayload(formValue.authType),
                            username: formValue.username,
                            password: formValue.password,
                            clientId: null,
                            clientSecret: null
                        };
                    }
                }
            }
        };
        this.authenticationOptions = MULESOFT_AUTH_TYPE_OPTIONS;
        this.optionFormatter = (authenticationOption) => authenticationOption.label;
    }
    ngOnInit() {
        this.mulesoftConfigurationForm = this.formBuilder.group(this.mulesoftConfig.controlsConfig);
        this.mulesoftConfigurationForm.patchValue({ authType: [first(MULESOFT_AUTH_TYPE_OPTIONS)] });
        this.authType.valueChanges.pipe(map$1((authType) => this.getAuthTypePayload(authType))).subscribe((authType) => {
            if (authType === AUTH_TYPE.basicAuth) {
                this.mulesoftConfigurationForm.controls.username.setValidators(AdaptValidators.required());
                this.mulesoftConfigurationForm.controls.username.enable();
                this.mulesoftConfigurationForm.controls.password.setValidators(AdaptValidators.required());
                this.mulesoftConfigurationForm.controls.password.enable();
                this.mulesoftConfigurationForm.controls.clientId.clearValidators();
                this.mulesoftConfigurationForm.controls.clientId.disable();
                this.mulesoftConfigurationForm.controls.clientSecret.clearValidators();
                this.mulesoftConfigurationForm.controls.clientSecret.disable();
            }
            else if (authType === AUTH_TYPE.oAuth2) {
                this.mulesoftConfigurationForm.controls.username.clearValidators();
                this.mulesoftConfigurationForm.controls.username.disable();
                this.mulesoftConfigurationForm.controls.password.clearValidators();
                this.mulesoftConfigurationForm.controls.password.disable();
                this.mulesoftConfigurationForm.controls.clientId.setValidators(AdaptValidators.required());
                this.mulesoftConfigurationForm.controls.clientId.enable();
                this.mulesoftConfigurationForm.controls.clientSecret.setValidators(AdaptValidators.required());
                this.mulesoftConfigurationForm.controls.clientSecret.enable();
            }
        });
        this.mulesoftConfigurationForm.patchValue({ authType: [first(MULESOFT_AUTH_TYPE_OPTIONS)] });
        this.notifyPropertyChanged('api', {
            isDirty: () => this.ipaasBaseConfigurationComponent.childFormGroup.dirty
        });
    }
    get authType() {
        return this.mulesoftConfigurationForm.get('authType');
    }
    getAuthTypeOption(id) {
        const authType = find(MULESOFT_AUTH_TYPE_OPTIONS, { id: id });
        return authType ? [authType] : [];
    }
    getAuthTypePayload(authType) {
        var _a;
        return (_a = first(authType)) === null || _a === void 0 ? void 0 : _a.id;
    }
}
MulesoftConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
MulesoftConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftConfigurationAdminComponent, selector: "rx-admin-mulesoft-configuration", viewQueries: [{ propertyName: "ipaasBaseConfigurationComponent", first: true, predicate: IpaasBaseConfigurationComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<rx-ipaas-base-configuration [ipaasConfig]=\"mulesoftConfig\" [childFormGroup]=\"mulesoftConfigurationForm\">\n  <ng-container [formGroup]=\"mulesoftConfigurationForm\">\n    <adapt-rx-textfield\n      rx-id=\"endpoint-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.end-point-url.label' | translate }}\"\n      formControlName=\"url\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      rx-id=\"auth-type\"\n      formControlName=\"authType\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label' | translate }}\"\n      [options]=\"authenticationOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-select>\n\n    <ng-container [ngSwitch]=\"authType.value[0]?.id\">\n      <ng-container *ngSwitchDefault>\n        <adapt-rx-textfield\n          rx-id=\"user-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n          formControlName=\"username\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"password\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n          formControlName=\"password\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"authenticationOptions[1].id\">\n        <adapt-rx-textfield\n          rx-id=\"client-id\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-id.label' | translate }}\"\n          formControlName=\"clientId\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"client-secret\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-secret.label' | translate }}\"\n          formControlName=\"clientSecret\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</rx-ipaas-base-configuration>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select{max-width:400px}\n"], components: [{ type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: ["ipaasConfig", "childFormGroup"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-mulesoft-configuration',
                    templateUrl: './mulesoft-configuration.component.html',
                    styleUrls: ['./mulesoft-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }]; }, propDecorators: { ipaasBaseConfigurationComponent: [{
                type: ViewChild,
                args: [IpaasBaseConfigurationComponent]
            }] } });

class MulesoftConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-mulesoft-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(MulesoftConfigurationAdminComponent),
            name: 'iPaaS MuleSoft configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
MulesoftConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
MulesoftConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationRegistrationModule, declarations: [MulesoftConfigurationAdminComponent], imports: [CommonModule,
        ReactiveFormsModule,
        AdaptRxTextfieldModule,
        AdaptRxSelectModule,
        TranslateModule,
        IpaasBaseConfigurationModule] });
MulesoftConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationRegistrationModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            AdaptRxTextfieldModule,
            AdaptRxSelectModule,
            TranslateModule,
            IpaasBaseConfigurationModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: MulesoftConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSelectModule,
                        TranslateModule,
                        IpaasBaseConfigurationModule
                    ],
                    declarations: [MulesoftConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_ISSUE_REPORTING_CONFIGURATION = {
    oauthUrl: '/api/rx/application/oauth/token/IssueReporting',
    settingName: 'errorReportingServiceTenantConfiguration',
    supportUserMapping: {
        recordDefinitionName: 'SupportUserMapping',
        defaultDescription: 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.default-description.label',
        fieldIds: {
            loginName: 70221,
            supportEmail: 70222
        }
    }
};

class RxIssueReportingConfigurationService {
    constructor(httpClient, rxRecordInstanceDataPageService, rxCurrentUserService, rxSystemConfigurationService) {
        this.httpClient = httpClient;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
    }
    getOauthConfig() {
        return this.httpClient.get(RX_ISSUE_REPORTING_CONFIGURATION.oauthUrl);
    }
    getSupportId() {
        return this.rxSystemConfigurationService
            .getConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName)
            .pipe(map$1((result) => JSON.parse(result.value).supportId || ''));
    }
    setSupportId(supportId) {
        return this.rxSystemConfigurationService.setConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName, {
            supportId
        });
    }
    getSupportConfig() {
        return this.rxRecordInstanceDataPageService
            .post({
            params: {
                recorddefinition: RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName,
                queryExpression: `'${RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName}' = "${this.rxCurrentUserService.getName()}"`,
                propertySelection: [
                    RX_RECORD_DEFINITION.coreFieldIds.id,
                    RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName,
                    RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail
                ]
            }
        })
            .pipe(map$1((result) => get(result, 'data[0]', null)));
    }
}
RxIssueReportingConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIssueReportingConfigurationService, deps: [{ token: i1$2.HttpClient }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i2.RxCurrentUserService }, { token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
RxIssueReportingConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIssueReportingConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxIssueReportingConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i2.RxCurrentUserService }, { type: i2.RxSystemConfigurationService }]; } });

class IssueReportingConfigurationAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxCurrentUserService, rxIssueReportingConfigurationService, rxNotificationService, rxRecordInstanceService, rxRecordInstanceUpdateService, translateService) {
        super();
        this.formBuilder = formBuilder;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxIssueReportingConfigurationService = rxIssueReportingConfigurationService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
        this.translateService = translateService;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        this.oauthUrl = '';
    }
    saveConfig() {
        const formValue = this.issueReportingConfigurationForm.getRawValue();
        this.rxIssueReportingConfigurationService.setSupportId(formValue.supportId).subscribe();
        if (this.configId) {
            this.rxRecordInstanceService
                .get(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName, this.configId)
                .subscribe((recordInstance) => {
                recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail, formValue.supportEmail);
                this.rxRecordInstanceUpdateService.execute(recordInstance).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-updated.message'));
                    this.issueReportingConfigurationForm.markAsPristine();
                });
            });
        }
        else {
            this.rxRecordInstanceService
                .getNew(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName)
                .subscribe((recordInstance) => {
                recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, this.translateService.instant(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.defaultDescription));
                recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail, formValue.supportEmail);
                recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName, this.rxCurrentUserService.getName());
                this.rxRecordInstanceService.create(recordInstance).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-saved.message'));
                    this.issueReportingConfigurationForm.markAsPristine();
                });
            });
        }
    }
    getOauthData() {
        this.busy = this.rxIssueReportingConfigurationService.getOauthConfig().subscribe((data) => {
            this.oauthUrl = data.authorizeURL;
            this.isAccountLinked = data.configured;
        });
    }
    openWindow() {
        const title = 'BMC Cloud Service';
        const openedWindow = window.open(this.oauthUrl, title, 'scrollbars=1,height=600,width=670');
        this.assertWindowClosed(openedWindow);
    }
    assertWindowClosed(openedWindow) {
        const interval = setInterval(() => {
            if (!openedWindow || !openedWindow.closed) {
                return;
            }
            clearInterval(interval);
            this.getOauthData();
        }, 100);
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => { var _a; return (_a = this.issueReportingConfigurationForm) === null || _a === void 0 ? void 0 : _a.dirty; }
        });
        if (this.isAdministrator) {
            this.issueReportingConfigurationForm = this.formBuilder.group({
                supportId: '',
                supportEmail: ''
            });
            this.busy = forkJoin({
                supportId: this.rxIssueReportingConfigurationService.getSupportId(),
                supportConfig: this.rxIssueReportingConfigurationService.getSupportConfig()
            }).subscribe((result) => {
                let supportEmail = '';
                if (result.supportConfig) {
                    this.configId = result.supportConfig[RX_RECORD_DEFINITION.coreFieldIds.id];
                    supportEmail =
                        result.supportConfig[RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail];
                }
                this.issueReportingConfigurationForm.patchValue({
                    supportId: result.supportId,
                    supportEmail
                });
            });
            this.getOauthData();
        }
    }
}
IssueReportingConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i2.RxCurrentUserService }, { token: RxIssueReportingConfigurationService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceService }, { token: i3$2.RxRecordInstanceUpdateService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
IssueReportingConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IssueReportingConfigurationAdminComponent, selector: "rx-admin-issue-reporting-configuration", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form [formGroup]=\"issueReportingConfigurationForm\" *ngIf=\"isAdministrator\">\n      <adapt-accordion-tab\n        title=\"{{\n          'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.bmc-service-cloud-account-configuration.label'\n            | translate\n        }}\"\n        isOpen=\"true\"\n      >\n        <adapt-rx-textfield\n          rx-id=\"support-id\"\n          label=\"Support ID\"\n          formControlName=\"supportId\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"support-email\"\n          label=\"Support email\"\n          formControlName=\"supportEmail\"\n          required=\"true\"\n          email=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </adapt-accordion-tab>\n\n      <adapt-accordion-tab title=\"Link BMC Service Cloud account to BMC Helix platform\" isOpen=\"true\" class=\"d-block\">\n        <adapt-alert\n          *ngIf=\"oauthUrl === null\"\n          class=\"py-2\"\n          [config]=\"{\n            content:\n              'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-missing.message'\n              | translate,\n            type: 'inline',\n            variant: 'danger'\n          }\"\n        ></adapt-alert>\n        <ng-container *ngIf=\"oauthUrl\">\n          <adapt-alert\n            *ngIf=\"isAccountLinked\"\n            class=\"py-2\"\n            [config]=\"{\n              content:\n                'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.account-is-linked.message' | translate,\n              type: 'inline',\n              variant: 'success'\n            }\"\n          ></adapt-alert>\n          <adapt-alert\n            *ngIf=\"!isAccountLinked\"\n            class=\"py-2\"\n            [config]=\"{\n              content:\n                'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.account-is-not-linked.message' | translate,\n              type: 'inline',\n              variant: 'warning'\n            }\"\n          ></adapt-alert>\n          <button\n            adapt-button\n            type=\"button\"\n            rx-id=\"link-account-button\"\n            btn-type=\"secondary\"\n            [disabled]=\"isAccountLinked\"\n            (click)=\"openWindow()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.link-account.label' | translate }}\n          </button>\n        </ng-container>\n      </adapt-accordion-tab>\n\n      <button\n        adapt-button\n        type=\"button\"\n        rx-id=\"save-button\"\n        btn-type=\"primary\"\n        class=\"mt-4\"\n        [disabled]=\"issueReportingConfigurationForm.pristine || issueReportingConfigurationForm.invalid\"\n        (click)=\"saveConfig()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.EmailValidator, selector: "[email][formControlName],[email][formControl],[email][ngModel]", inputs: ["email"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-issue-reporting-configuration',
                    templateUrl: './issue-reporting-configuration.component.html',
                    styleUrls: ['./issue-reporting-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i2.RxCurrentUserService }, { type: RxIssueReportingConfigurationService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceService }, { type: i3$2.RxRecordInstanceUpdateService }, { type: i4.TranslateService }]; } });

class IssueReportingConfigurationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-issue-reporting-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(IssueReportingConfigurationAdminComponent),
            name: 'Issue reporting configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
IssueReportingConfigurationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
IssueReportingConfigurationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationModule, declarations: [IssueReportingConfigurationAdminComponent], imports: [AdaptAccordionModule,
        AdaptAlertModule,
        AdaptButtonModule,
        AdaptIconModule,
        AdaptRxTextfieldModule,
        AdminSettingsModule,
        CommonModule,
        ReactiveFormsModule,
        TranslateModule] });
IssueReportingConfigurationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationModule, imports: [[
            AdaptAccordionModule,
            AdaptAlertModule,
            AdaptButtonModule,
            AdaptIconModule,
            AdaptRxTextfieldModule,
            AdminSettingsModule,
            CommonModule,
            ReactiveFormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: IssueReportingConfigurationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        AdaptAccordionModule,
                        AdaptAlertModule,
                        AdaptButtonModule,
                        AdaptIconModule,
                        AdaptRxTextfieldModule,
                        AdminSettingsModule,
                        CommonModule,
                        ReactiveFormsModule,
                        TranslateModule
                    ],
                    declarations: [IssueReportingConfigurationAdminComponent],
                    entryComponents: [IssueReportingConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxTenantService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.tenantApiUrl = '/api/rx/application/tenant';
    }
    createTenant(tenant) {
        return this.httpClient.post(this.tenantApiUrl, tenant);
    }
    deleteTenant(tenantName) {
        return this.httpClient.delete(`${this.tenantApiUrl}/${tenantName}`);
    }
    editTenant(tenant) {
        return this.httpClient.put(`${this.tenantApiUrl}/${tenant.name}`, tenant);
    }
    getTenant(tenantName) {
        return this.httpClient.get(`${this.tenantApiUrl}/${tenantName}`);
    }
}
RxTenantService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxTenantService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxTenantService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxTenantService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxTenantService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

var TenantFields;
(function (TenantFields) {
    TenantFields["Name"] = "name";
    TenantFields["DomainIdentifier"] = "domainIdentifier";
    TenantFields["VirtualHostname"] = "virtualHostname";
})(TenantFields || (TenantFields = {}));

class TenantEditorComponent extends RxModalClass {
    constructor(formBuilder, dockedPanelContext, rxManageTenantService, rxNotificationService, translateService, injector) {
        super(dockedPanelContext, injector);
        this.formBuilder = formBuilder;
        this.dockedPanelContext = dockedPanelContext;
        this.rxManageTenantService = rxManageTenantService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.injector = injector;
        this.domainIdentifierRegexp = /^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        this.isEditMode = false;
    }
    ngOnInit() {
        super.ngOnInit();
        const selectedTenantData = this.dockedPanelContext.getData().tenant;
        this.tenantEditorFormGroup = this.formBuilder.group({
            name: '',
            domainIdentifier: '',
            virtualHostname: ''
        });
        if (selectedTenantData) {
            this.isEditMode = true;
            this.tenantEditorFormGroup.patchValue({
                name: selectedTenantData.name,
                domainIdentifier: selectedTenantData.domainIdentifier,
                virtualHostname: selectedTenantData.virtualHostname
            });
        }
    }
    isDirty() {
        return this.tenantEditorFormGroup.dirty;
    }
    save() {
        const tenantPayload = this.tenantEditorFormGroup.getRawValue();
        if (this.isEditMode) {
            tenantPayload.tenantId = this.dockedPanelContext.getData().tenant.tenantId;
        }
        const writeEvent = this.isEditMode
            ? this.rxManageTenantService.editTenant(tenantPayload)
            : this.rxManageTenantService.createTenant(tenantPayload);
        writeEvent.subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.isEditMode
                ? this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-updated.message')
                : this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-created.message'));
            this.tenantEditorFormGroup.markAsPristine();
            this.dockedPanelContext.close('');
        });
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
TenantEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: TenantEditorComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1$1.DockedPanelContext }, { token: RxTenantService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
TenantEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TenantEditorComponent, selector: "rx-tenant-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"tenantEditorFormGroup\">\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"tenant-name-field\"\n      formControlName=\"name\"\n      label=\" {{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-name.label' | translate }}\"\n      required\n      maxlength=\"20\"\n      [disabled]=\"isEditMode\"\n    ></adapt-rx-textfield>\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"domain-identifier-field\"\n      formControlName=\"domainIdentifier\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.domain-identifier.label' | translate }}\"\n      placeholder=\"e.g. domain.com\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"domainIdentifierRegexp\"\n    ></adapt-rx-textfield>\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"virtual-host-name-field\"\n      formControlName=\"virtualHostname\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.virtual-host-name.label' | translate }}\"\n      placeholder=\"e.g. host.domain.com\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"domainIdentifierRegexp\"\n    ></adapt-rx-textfield>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    [disabled]=\"tenantEditorFormGroup.invalid || tenantEditorFormGroup.pristine\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: TenantEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-tenant-editor',
                    templateUrl: './tenant-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1$1.DockedPanelContext }, { type: RxTenantService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i0.Injector }]; } });

class ManageTenantAdminComponent {
    constructor(rxDataPageService, rxTenantService, rxModalService, rxNotificationService, translateService) {
        this.rxDataPageService = rxDataPageService;
        this.rxTenantService = rxTenantService;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.getData = (queryParams) => this.dataPage.get({ params: omit(queryParams, ['searchText', 'recorddefinition']) });
        this.dataPage = this.rxDataPageService.withType('com.bmc.arsys.rx.application.tenant.datapage.TenantDataPageQuery');
    }
    ngOnInit() {
        this.manageTenantGridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: () => this.deleteTenant()
                        }
                    ]
                }
            ],
            recordIdField: 'name',
            enableRowSelection: RowSelectionMode.Single,
            enableFiltering: false,
            getData: (queryParams) => this.getData(queryParams),
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: [
                {
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant.label'),
                    fieldId: TenantFields.Name,
                    clickable: true,
                    sortable: false,
                    actions: [
                        {
                            name: (previousActionResult, lastActionRow) => this.editTenant(lastActionRow)
                        }
                    ]
                },
                {
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.domain-identifier.label'),
                    fieldId: TenantFields.DomainIdentifier,
                    sortable: false
                },
                {
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.virtual-host-name.label'),
                    fieldId: TenantFields.VirtualHostname,
                    sortable: false
                }
            ],
            styles: 'flex-fill'
        });
    }
    getRecordDefinition() {
        return {
            fieldDefinitions: [
                {
                    id: TenantFields.Name,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: TenantFields.DomainIdentifier,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: TenantFields.VirtualHostname,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
    }
    refreshManageTenantGrid() {
        this.manageTenantGrid.api.refresh().subscribe();
    }
    addTenant() {
        const tenantCount = this.manageTenantGrid.adaptTableConfig.data.length;
        if (tenantCount > 0) {
            this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-already-exists.message'));
        }
        else {
            this.openDockedPanel();
        }
    }
    editTenant(selectedTenant) {
        const selectedTenantName = selectedTenant[TenantFields.Name];
        this.rxTenantService.getTenant(selectedTenantName).subscribe((tenant) => {
            this.openDockedPanel(tenant);
        });
    }
    openDockedPanel(tenant) {
        this.rxModalService
            .openDockedPanel({
            title: tenant
                ? this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.edit-tenant.label')
                : this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.new-tenant.label'),
            content: TenantEditorComponent,
            size: 'lg',
            data: {
                tenant
            }
        })
            .then(() => {
            this.refreshManageTenantGrid();
        })
            .catch(noop);
    }
    deleteTenant() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.delete-confirmation.message')
        })
            .then((result) => {
            if (result) {
                const selectedTenantDefinition = this.manageTenantGrid.api.getFirstSelectedRow();
                this.rxTenantService.deleteTenant(selectedTenantDefinition.name).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-deleted.message'));
                    this.refreshManageTenantGrid();
                });
            }
        });
    }
}
ManageTenantAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantAdminComponent, deps: [{ token: i2.RxDataPageFactoryService }, { token: RxTenantService }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
ManageTenantAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ManageTenantAdminComponent, selector: "rx-admin-manage-tenant", viewQueries: [{ propertyName: "manageTenantGrid", first: true, predicate: ["manageTenantGrid"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-activation.header.title' | translate }}\"\n>\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"addTenant()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"manage-tenant-grid\" #manageTenantGrid [config]=\"manageTenantGridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-manage-tenant',
                    templateUrl: './manage-tenant.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxDataPageFactoryService }, { type: RxTenantService }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }]; }, propDecorators: { manageTenantGrid: [{
                type: ViewChild,
                args: ['manageTenantGrid', { static: true }]
            }] } });

class ManageTenantRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-manage-tenant',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ManageTenantAdminComponent),
            name: 'Manage tenant',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ManageTenantRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ManageTenantRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantRegistrationModule, declarations: [ManageTenantAdminComponent, TenantEditorComponent], imports: [CommonModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        ReactiveFormsModule,
        TranslateModule] });
ManageTenantRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantRegistrationModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            ReactiveFormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ManageTenantRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ManageTenantAdminComponent, TenantEditorComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        ReactiveFormsModule,
                        TranslateModule
                    ],
                    entryComponents: [ManageTenantAdminComponent, TenantEditorComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const dataPageQuery = 'com.bmc.arsys.rx.application.email.datapage.OutgoingEmailMessageStatusDataPageQuery';
class RxOutgoingMailboxStatusDataPageService extends DataPage {
    constructor(injector) {
        super(injector, dataPageQuery);
        this.injector = injector;
    }
}
RxOutgoingMailboxStatusDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOutgoingMailboxStatusDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RxOutgoingMailboxStatusDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOutgoingMailboxStatusDataPageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxOutgoingMailboxStatusDataPageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });

const RX_OUTGOING_MAILBOX_STATUS = {
    availableTimeFrames: [
        {
            id: '1',
            name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-hour.label',
            duration: moment.duration(1, 'hour')
        },
        {
            id: '2',
            name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-three-hours.label',
            duration: moment.duration(3, 'hour')
        },
        {
            id: '3',
            name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-day.label',
            duration: moment.duration(1, 'day')
        },
        {
            id: '4',
            name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-week.label',
            duration: moment.duration(1, 'week')
        },
        {
            id: '5',
            name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-month.label',
            duration: moment.duration(1, 'month')
        }
    ],
    fields: {
        mailboxName: 'MailBoxName',
        pending: 'Pending',
        sent: 'Sent',
        error: 'Error'
    }
};

class OutgoingMailboxStatusAdminComponent {
    constructor(rxOutgoingMailboxStatusDataPageService, translateService, iconConfig) {
        this.rxOutgoingMailboxStatusDataPageService = rxOutgoingMailboxStatusDataPageService;
        this.translateService = translateService;
        this.iconConfig = iconConfig;
        this.availableTimeFrames = RX_OUTGOING_MAILBOX_STATUS.availableTimeFrames.map((timeFrame) => (Object.assign(Object.assign({}, timeFrame), { name: this.translateService.instant(timeFrame.name) })));
        this.selectedTimeFrame = [this.availableTimeFrames[0]];
        iconConfig.registerIcons([ai_info_circle_o_adapt]);
    }
    ngOnInit() {
        const gridColumns = [
            {
                index: 0,
                fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.mailboxName,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.mailbox-name.label')
            },
            {
                index: 1,
                fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.pending,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.pending.label'),
                filterable: false
            },
            {
                index: 2,
                fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.error,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.error.label'),
                filterable: false
            },
            {
                index: 3,
                fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.sent,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.sent.label'),
                filterable: false
            }
        ];
        const recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_OUTGOING_MAILBOX_STATUS.fields.mailboxName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_OUTGOING_MAILBOX_STATUS.fields.pending,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_OUTGOING_MAILBOX_STATUS.fields.error,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_OUTGOING_MAILBOX_STATUS.fields.sent,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        this.recordGridConfig = of({
            columns: gridColumns,
            enableFiltering: true,
            enableRowSelection: null,
            getRecordDefinition: () => of(recordDefinition),
            getData: (queryParams) => {
                assign(queryParams, {
                    messagesBefore: moment().subtract(this.selectedTimeFrame[0].duration).toISOString()
                });
                return this.rxOutgoingMailboxStatusDataPageService.get({ params: queryParams });
            },
            styles: 'flex-fill',
            useExternalFiltering: false
        });
    }
    onTimeFrameChange(timeFrame) {
        this.selectedTimeFrame = timeFrame;
        this.recordGrid.api.refresh().subscribe();
    }
    optionFormatter(timeFrame) {
        return timeFrame.name;
    }
}
OutgoingMailboxStatusAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusAdminComponent, deps: [{ token: RxOutgoingMailboxStatusDataPageService }, { token: i4.TranslateService }, { token: i1$1.AdaptIconConfig }], target: i0.ɵɵFactoryTarget.Component });
OutgoingMailboxStatusAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: OutgoingMailboxStatusAdminComponent, selector: "rx-admin-outgoing-mailbox-status", viewQueries: [{ propertyName: "recordGrid", first: true, predicate: ["recordGrid"], descendants: true }], ngImport: i0, template: "<rx-admin-settings header=\"Outgoing mailbox status\">\n  <div class=\"d-flex flex-wrap\">\n    <adapt-rx-select\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.time-frame.label' | translate }}\"\n      class=\"form-group\"\n      rx-id=\"time-frame\"\n      [options]=\"availableTimeFrames\"\n      [ngModel]=\"selectedTimeFrame\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onTimeFrameChange($event)\"\n    >\n    </adapt-rx-select>\n\n    <button\n      adapt-button\n      btn-type=\"tertiary\"\n      class=\"form-group ml-auto align-self-end\"\n      placement=\"bottom\"\n      type=\"button\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.about-sent-email.tooltip' | translate\"\n    >\n      <span>\n        <adapt-icon name=\"info_circle_o_adapt\"></adapt-icon>\n        {{ 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.about-sent-email.label' | translate }}\n      </span>\n    </button>\n  </div>\n\n  <rx-record-grid rx-id=\"outgoing-mailbox-status-grid\" #recordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", styles: ["adapt-rx-select[rx-id=time-frame]{width:150px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-outgoing-mailbox-status',
                    templateUrl: './outgoing-mailbox-status.component.html',
                    styleUrls: ['./outgoing-mailbox-status.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxOutgoingMailboxStatusDataPageService }, { type: i4.TranslateService }, { type: i1$1.AdaptIconConfig }]; }, propDecorators: { recordGrid: [{
                type: ViewChild,
                args: ['recordGrid']
            }] } });

class OutgoingMailboxStatusRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-outgoing-mailbox-status',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(OutgoingMailboxStatusAdminComponent),
            name: 'Outgoing mailbox status',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
OutgoingMailboxStatusRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
OutgoingMailboxStatusRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusRegistrationModule, declarations: [OutgoingMailboxStatusAdminComponent], imports: [CommonModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptRxSelectModule,
        FormsModule,
        AdaptIconModule,
        AdaptPopoverModule,
        AdaptButtonModule,
        TranslateModule] });
OutgoingMailboxStatusRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusRegistrationModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptRxSelectModule,
            FormsModule,
            AdaptIconModule,
            AdaptPopoverModule,
            AdaptButtonModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: OutgoingMailboxStatusRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [OutgoingMailboxStatusAdminComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptRxSelectModule,
                        FormsModule,
                        AdaptIconModule,
                        AdaptPopoverModule,
                        AdaptButtonModule,
                        TranslateModule
                    ],
                    entryComponents: [OutgoingMailboxStatusAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class PermissionsPolicyHeaderAdminComponent extends BaseViewComponent {
    constructor(rxNotificationService, translateService, rxSystemConfigurationService) {
        super();
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.settingName = 'permissionsPolicy';
        this.permissionsPolicyHeader = '';
        this.syntaxUrl = 'https://github.com/w3c/webappsec-permissions-policy/blob/main/permissions-policy-explainer.md';
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.isDirty()
        });
        this.busy = this.rxSystemConfigurationService.getConfiguration(this.settingName).subscribe((settingsData) => {
            this.permissionsPolicyHeader = settingsData.value;
        });
    }
    isDirty() {
        var _a;
        return (_a = this.permissionPolicyHeaderModel) === null || _a === void 0 ? void 0 : _a.dirty;
    }
    onSaveClick() {
        this.rxSystemConfigurationService.setConfiguration(this.settingName, this.permissionsPolicyHeader).subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.settings-saved.message'));
            this.permissionPolicyHeaderModel.control.markAsPristine();
        });
    }
}
PermissionsPolicyHeaderAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderAdminComponent, deps: [{ token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
PermissionsPolicyHeaderAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PermissionsPolicyHeaderAdminComponent, selector: "rx-admin-permissions-policy", viewQueries: [{ propertyName: "permissionPolicyHeaderModel", first: true, predicate: ["permissionPolicyHeaderModel"], descendants: true, read: NgModel, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.permissions-policy-header.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-rx-textfield\n    [label]=\"'com.bmc.arsys.rx.client.admin.permissions-policy-header.label' | translate\"\n    [(ngModel)]=\"permissionsPolicyHeader\"\n    rx-id=\"permission-policy-header\"\n    name=\"permissionPolicyHeaderModel\"\n    class=\"form-group d-block\"\n    #permissionPolicyHeaderModel=\"ngModel\"\n    [autofocus]=\"true\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: popover,\n      placement: 'right',\n      popoverMode: true,\n      maxWidth: 400\n    }\"\n  ></adapt-rx-textfield>\n\n  <button\n    class=\"align-self-start\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"!permissionsPolicyHeader || !isDirty()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <ng-template #popover>\n    {{ 'com.bmc.arsys.rx.client.admin.permissions-policy-header.syntax-information.message' | translate }}\n    <a class=\"text-secondary\" target=\"_blank\" href=\"{{ syntaxUrl }}\">{{ syntaxUrl }}</a>\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-permissions-policy',
                    templateUrl: './permissions-policy-header.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i2.RxSystemConfigurationService }]; }, propDecorators: { permissionPolicyHeaderModel: [{
                type: ViewChild,
                args: ['permissionPolicyHeaderModel', { read: NgModel, static: true }]
            }] } });

class PermissionsPolicyHeaderRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-permissions-policy',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(PermissionsPolicyHeaderAdminComponent),
            name: 'Permissions Policy Header',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
PermissionsPolicyHeaderRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
PermissionsPolicyHeaderRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderRegistrationModule, declarations: [PermissionsPolicyHeaderAdminComponent], imports: [AdminSettingsModule,
        FormsModule,
        CommonModule,
        TranslateModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        AdaptEmptyStateModule,
        AdaptIconModule,
        AdaptPopoverModule] });
PermissionsPolicyHeaderRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderRegistrationModule, imports: [[
            AdminSettingsModule,
            FormsModule,
            CommonModule,
            TranslateModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            AdaptEmptyStateModule,
            AdaptIconModule,
            AdaptPopoverModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: PermissionsPolicyHeaderRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PermissionsPolicyHeaderAdminComponent],
                    imports: [
                        AdminSettingsModule,
                        FormsModule,
                        CommonModule,
                        TranslateModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        AdaptEmptyStateModule,
                        AdaptIconModule,
                        AdaptPopoverModule
                    ],
                    entryComponents: [PermissionsPolicyHeaderAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_REAL_TIME_TRANSLATION = {
    supportedLocales: [
        {
            id: 'zh_cn',
            name: 'com.bmc.arsys.rx.client.common.language.chinese.label'
        },
        {
            id: 'nl',
            name: 'com.bmc.arsys.rx.client.common.language.dutch.label'
        },
        {
            id: 'en',
            name: 'com.bmc.arsys.rx.client.common.language.english.label'
        },
        {
            id: 'fr',
            name: 'com.bmc.arsys.rx.client.common.language.french.label'
        },
        {
            id: 'de',
            name: 'com.bmc.arsys.rx.client.common.language.german.label'
        },
        {
            id: 'it',
            name: 'com.bmc.arsys.rx.client.common.language.italian.label'
        },
        {
            id: 'ja',
            name: 'com.bmc.arsys.rx.client.common.language.japanese.label'
        },
        {
            id: 'ko',
            name: 'com.bmc.arsys.rx.client.common.language.korean.label'
        },
        {
            id: 'pt_br',
            name: 'com.bmc.arsys.rx.client.common.language.portuguese.label'
        },
        {
            id: 'ru',
            name: 'com.bmc.arsys.rx.client.common.language.russian.label'
        },
        {
            id: 'es',
            name: 'com.bmc.arsys.rx.client.common.language.spanish.label'
        },
        {
            id: 'sv',
            name: 'com.bmc.arsys.rx.client.common.language.swedish.label'
        }
    ],
    defaultSourceLocale: {
        id: 'en',
        name: 'com.bmc.arsys.rx.client.common.language.english.label'
    },
    defaultTargetLocale: {
        id: 'de',
        name: 'com.bmc.arsys.rx.client.common.language.german.label'
    }
};

class RealTimeTranslationAdminComponent {
    constructor(rxCommandFactoryService, translateService) {
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.translateService = translateService;
        this.sourceLanguage = [];
        this.targetLanguage = [];
        this.supportedLocaleOptions = RX_REAL_TIME_TRANSLATION.supportedLocales.map((locale) => (Object.assign(Object.assign({}, locale), { name: this.translateService.instant(locale.name) })));
    }
    ngOnInit() {
        this.reset();
    }
    optionFormatter(option) {
        return option.name;
    }
    reset() {
        this.sourceText = this.translatedText = null;
        this.sourceLanguage = [
            Object.assign(Object.assign({}, RX_REAL_TIME_TRANSLATION.defaultSourceLocale), { name: this.translateService.instant(RX_REAL_TIME_TRANSLATION.defaultSourceLocale.name) })
        ];
        this.targetLanguage = [
            Object.assign(Object.assign({}, RX_REAL_TIME_TRANSLATION.defaultTargetLocale), { name: this.translateService.instant(RX_REAL_TIME_TRANSLATION.defaultTargetLocale.name) })
        ];
        this.realTimeTranslationForm.form.markAsPristine();
    }
    translate() {
        this.realTimeTranslationForm.form.markAsPristine();
        this.rxCommandFactoryService
            .forResourceType('com.bmc.arsys.rx.application.cognitive.command.TranslateTextCommand')
            .execute({
            texts: castArray(this.sourceText),
            sourceLanguage: head(this.sourceLanguage).id,
            targetLanguage: head(this.targetLanguage).id
        })
            .subscribe((response) => {
            this.translatedText = head(response);
        });
    }
    clearTexts() {
        this.sourceText = null;
        this.translatedText = null;
    }
    isTranslateButtonDisabled() {
        return this.realTimeTranslationForm.pristine || this.realTimeTranslationForm.invalid;
    }
    isClearButtonDisabled() {
        return isEmpty(this.sourceText) && isEmpty(this.translatedText);
    }
    copyTranslatedText() {
        const element = document.querySelector('[rx-id="translation"] textarea');
        element.select();
        document.execCommand('copy');
    }
    isCopyButtonDisabled() {
        return isEmpty(this.translatedText);
    }
}
RealTimeTranslationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationAdminComponent, deps: [{ token: i2.RxCommandFactoryService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RealTimeTranslationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RealTimeTranslationAdminComponent, selector: "rx-admin-real-time-translation", viewQueries: [{ propertyName: "realTimeTranslationForm", first: true, predicate: ["realTimeTranslationForm"], descendants: true, read: NgForm, static: true }], ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.interactive-translation.header.title' | translate }}\"\n>\n  <form #realTimeTranslationForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          name=\"sourceLanguage\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-language.label' | translate }}\"\n          rx-id=\"source-language\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"sourceLanguage\"\n          [options]=\"supportedLocaleOptions\"\n          [optionFormatter]=\"optionFormatter\"\n        ></adapt-rx-select>\n      </div>\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          name=\"targetLanguage\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.target-language.label' | translate }}\"\n          rx-id=\"target-language\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"targetLanguage\"\n          [options]=\"supportedLocaleOptions\"\n          [optionFormatter]=\"optionFormatter\"\n        ></adapt-rx-select>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textarea\n          name=\"sourceText\"\n          required=\"true\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-text.label' | translate }}\"\n          placeholder=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-text.placeholder' | translate }}\"\n          rx-id=\"source-text\"\n          rows=\"18\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"sourceText\"\n        ></adapt-rx-textarea>\n\n        <div class=\"mb-2\">\n          <button\n            adapt-button\n            btn-type=\"primary\"\n            type=\"button\"\n            class=\"d-icon-file_arrow_right mr-2 mb-2\"\n            rx-id=\"translate-button\"\n            (click)=\"translate()\"\n            [disabled]=\"isTranslateButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.real-time-translation.translate.label' | translate }}\n          </button>\n\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"secondary\"\n            class=\"d-icon-minus_circle mb-2\"\n            rx-id=\"clear-button\"\n            (click)=\"clearTexts()\"\n            [disabled]=\"isClearButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"col-md-6\">\n        <adapt-rx-textarea\n          name=\"translatedText\"\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.translation.label' | translate }}\"\n          rx-id=\"translation\"\n          rows=\"18\"\n          [readonly]=\"true\"\n          [disabledStyleForReadonlyState]=\"true\"\n          [ngModel]=\"translatedText\"\n        ></adapt-rx-textarea>\n\n        <div class=\"mb-4\">\n          <button\n            adapt-button\n            btn-type=\"secondary\"\n            type=\"button\"\n            class=\"d-icon-files_copy_o\"\n            rx-id=\"copy-button\"\n            (click)=\"copyTranslatedText()\"\n            [disabled]=\"isCopyButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.copy.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textarea ::ng-deep textarea{resize:none}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-real-time-translation',
                    templateUrl: './real-time-translation.component.html',
                    styleUrls: ['./real-time-translation.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxCommandFactoryService }, { type: i4.TranslateService }]; }, propDecorators: { realTimeTranslationForm: [{
                type: ViewChild,
                args: ['realTimeTranslationForm', { static: true, read: NgForm }]
            }] } });

class RealTimeTranslationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-real-time-translation',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(RealTimeTranslationAdminComponent),
            name: 'Real time translation',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
RealTimeTranslationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
RealTimeTranslationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationRegistrationModule, declarations: [RealTimeTranslationAdminComponent], imports: [AdminSettingsModule,
        AdaptRxTextfieldModule,
        CommonModule,
        FormsModule,
        AdaptRxSelectModule,
        AdaptRxTextareaModule,
        AdaptButtonModule,
        TranslateModule] });
RealTimeTranslationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationRegistrationModule, imports: [[
            AdminSettingsModule,
            AdaptRxTextfieldModule,
            CommonModule,
            FormsModule,
            AdaptRxSelectModule,
            AdaptRxTextareaModule,
            AdaptButtonModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RealTimeTranslationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RealTimeTranslationAdminComponent],
                    imports: [
                        AdminSettingsModule,
                        AdaptRxTextfieldModule,
                        CommonModule,
                        FormsModule,
                        AdaptRxSelectModule,
                        AdaptRxTextareaModule,
                        AdaptButtonModule,
                        TranslateModule
                    ],
                    entryComponents: [RealTimeTranslationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_ROLE_PERMISSIONS = {
    minRoleId: -2147483647,
    maxRoleId: -1
};

class RxRolePermissionsService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.path = '/api/rx/application/role';
    }
    getUrl(roleDescriptor) {
        return `${this.path}/${encodeURIComponent(roleDescriptor.applicationName)}/${encodeURIComponent(roleDescriptor.name)}`;
    }
    get(roleDescriptor) {
        return this.httpClient.get(this.getUrl(roleDescriptor));
    }
    deleteRole(roleDescriptor) {
        return this.httpClient.delete(this.getUrl(roleDescriptor));
    }
    delete(roles) {
        const deleteObservables = roles.map((role) => this.deleteRole(role));
        return forkJoin(deleteObservables);
    }
    create(role) {
        return this.httpClient.post(this.path, role);
    }
    update(role, roleName) {
        return this.httpClient.put(this.getUrl({ applicationName: role.applicationName, name: roleName }), role);
    }
}
RxRolePermissionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRolePermissionsService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxRolePermissionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRolePermissionsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRolePermissionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class RoleEditorComponent extends RxModalClass {
    constructor(rxGlobalCacheService, rxGroupDataPageService, rxRolePermissionsService, rxNotificationService, dockedPanelContext, translateService, injector) {
        super(dockedPanelContext, injector);
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxGroupDataPageService = rxGroupDataPageService;
        this.rxRolePermissionsService = rxRolePermissionsService;
        this.rxNotificationService = rxNotificationService;
        this.dockedPanelContext = dockedPanelContext;
        this.translateService = translateService;
        this.injector = injector;
        this.isEditMode = false;
        this.isSaveInProgress = false;
        this.isSaveButtonDisabled = true;
        this.maxRoleId = RX_ROLE_PERMISSIONS.maxRoleId;
        this.minRoleId = RX_ROLE_PERMISSIONS.minRoleId;
        this.validDefinitionNameRegex = RX_RECORD_DEFINITION.validDefinitionNameRegex;
        this.destroyed$ = new ReplaySubject(1);
        this.validatorFn = this.roleNameValidator.bind(this);
        this.testSearch = (text$) => text$.pipe(distinctUntilChanged(), map$1((term) => this.groupList.filter((v) => v.toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)));
        this.productionSearch = (text$) => text$.pipe(distinctUntilChanged(), map$1((term) => this.groupList.filter((v) => v.toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10)));
    }
    ngOnInit() {
        super.ngOnInit();
        this.getApplicationList();
        this.getGroupList();
        this.role = this.dockedPanelContext.getData().role;
        this.isEditMode = Boolean(this.role.roleName);
        this.isSaveButtonDisabled = !this.roleEditorForm.valid;
        this.roleEditorForm.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe((value) => {
            this.isSaveButtonDisabled = !this.roleEditorForm.valid || this.roleEditorForm.pristine;
        });
        if (this.isEditMode) {
            let selectedApplication = find(this.applicationOptions, { value: this.role.applicationName });
            if (!selectedApplication) {
                selectedApplication = {
                    displayValue: this.role.applicationName,
                    value: this.role.applicationName
                };
                this.applicationOptions.push(selectedApplication);
            }
            this.selectedApplication = [selectedApplication];
            this.oldRoleName = this.role.roleName;
        }
    }
    isDirty() {
        return this.roleEditorForm.dirty;
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    save() {
        this.isSaveInProgress = true;
        this.isSaveButtonDisabled = true;
        if (!this.isEditMode) {
            this.role.applicationName = this.selectedApplication[0].value;
        }
        const saveRole$ = this.isEditMode
            ? this.rxRolePermissionsService.update(this.role, this.oldRoleName)
            : this.rxRolePermissionsService.create(this.role);
        saveRole$
            .pipe(catchError((error) => {
            this.isSaveInProgress = false;
            this.isSaveButtonDisabled = false;
            return throwError(error);
        }))
            .subscribe((response) => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-saved.message'));
            this.isSaveInProgress = false;
            this.isSaveButtonDisabled = false;
            this.dockedPanelContext.close(saveRole$);
        });
    }
    getGroupList() {
        const startIndex = 0;
        const pageSize = -1;
        const queryParams = {
            propertySelection: ['groupName', 'groupId'].join(','),
            sortBy: 'groupName'
        };
        this.rxGroupDataPageService
            .get({
            params: Object.assign({ startIndex, pageSize }, queryParams)
        })
            .pipe(map$1((groupDataPage) => {
            this.groupList = map(groupDataPage.data, 'groupName');
        }))
            .subscribe();
    }
    getApplicationList() {
        this.rxGlobalCacheService.getBundleDescriptors().subscribe((bundleDescriptors) => {
            this.applicationOptions = bundleDescriptors
                .sort((bundleDescriptor, bundleDescriptorToCompare) => bundleDescriptor.friendlyName.localeCompare(bundleDescriptorToCompare.friendlyName))
                .map((bundleDescriptor) => ({
                displayValue: bundleDescriptor.friendlyName,
                value: bundleDescriptor.id
            }));
        });
    }
    closeModal() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
    roleNameValidator(control) {
        return control.value && !RX_RECORD_DEFINITION.validDefinitionNameRegex.test(control.value)
            ? {
                invalidRoleName: {
                    message: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-name-validation.message')
                }
            }
            : null;
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
RoleEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RoleEditorComponent, deps: [{ token: i2.RxGlobalCacheService }, { token: i2.RxGroupDataPageService }, { token: RxRolePermissionsService }, { token: i2.RxNotificationService }, { token: i1$1.DockedPanelContext }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
RoleEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RoleEditorComponent, selector: "rx-role-editor", viewQueries: [{ propertyName: "roleEditorForm", first: true, predicate: ["roleEditorForm"], descendants: true, read: NgForm, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <h4 class=\"m-0 mb-3\">{{ 'com.bmc.arsys.rx.client.admin.role-permissions.general-information.label' | translate }}</h4>\n  <form #roleEditorForm=\"ngForm\">\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.application-or-library.label' | translate }}\"\n      rx-id=\"application-name\"\n      [(ngModel)]=\"selectedApplication\"\n      [options]=\"applicationOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      name=\"application\"\n      required=\"true\"\n      [readonly]=\"isEditMode\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      rx-id=\"role-name\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.role-name.label' | translate }}\"\n      name=\"roleName\"\n      required=\"true\"\n      [(ngModel)]=\"role.roleName\"\n      [rxCustomValidators]=\"validatorFn\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-counter\n      rx-id=\"role-id\"\n      class=\"form-group d-block\"\n      required=\"true\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.role-id.label' | translate }}\"\n      name=\"roleId\"\n      adaptIntegerNumber\n      [max]=\"maxRoleId\"\n      [min]=\"minRoleId\"\n      [adaptMax]=\"maxRoleId\"\n      [adaptMin]=\"minRoleId\"\n      [(ngModel)]=\"role.roleID\"\n    ></adapt-rx-counter>\n\n    <div class=\"d-row\">\n      <h4 class=\"form-group\">{{ 'com.bmc.arsys.rx.client.admin.role-permissions.group-mapping.label' | translate }}</h4>\n    </div>\n\n    <adapt-rx-typeahead\n      rx-id=\"test\"\n      class=\"form-group d-block\"\n      [(ngModel)]=\"role.test\"\n      name=\"test\"\n      [typeahead]=\"testSearch\"\n      label=\"Test\"\n      placeholder=\"Enter test group name\"\n    ></adapt-rx-typeahead>\n\n    <adapt-rx-typeahead\n      rx-id=\"production\"\n      class=\"form-group d-block\"\n      [(ngModel)]=\"role.production\"\n      name=\"production\"\n      [typeahead]=\"productionSearch\"\n      label=\"Production\"\n      placeholder=\"Enter production group name\"\n    ></adapt-rx-typeahead>\n\n    <adapt-rx-textfield\n      rx-id=\"datatag\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.datatag.label' | translate }}\"\n      name=\"datatag\"\n      placeholder=\"Enter datatag\"\n      [(ngModel)]=\"role.datatag\"\n    ></adapt-rx-textfield>\n  </form>\n</div>\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"isSaveButtonDisabled\"\n    [adaptInlineLoader]=\"isSaveInProgress\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"closeModal()\">Cancel</button>\n</div>\n", components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxTypeaheadComponent, selector: "adapt-rx-typeahead", inputs: ["autocomplete", "placeholder", "editable", "focusFirst", "restoreFocusAfterClose", "inputFormatter", "typeahead", "resultFormatter", "resultTemplate", "showHint", "placement", "appendToBody", "size", "popupMaxHeight", "disabledStyleForReadonlyState", "virtualScroll", "virtualScrollItemSize", "minBufferPx", "maxBufferPx", "virtualScrollDropdownHeight", "popupClass", "popupWidth", "mobileFocusAutoscrollTopOffset", "showEmptyResultMessage", "resultStatusMessage", "showClearButton", "clearButtonText"], outputs: ["onSelectItem"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }, { type: i1$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RoleEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-role-editor',
                    templateUrl: './role-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxGlobalCacheService }, { type: i2.RxGroupDataPageService }, { type: RxRolePermissionsService }, { type: i2.RxNotificationService }, { type: i1$1.DockedPanelContext }, { type: i4.TranslateService }, { type: i0.Injector }]; }, propDecorators: { roleEditorForm: [{
                type: ViewChild,
                args: ['roleEditorForm', { read: NgForm, static: true }]
            }] } });

var RoleFields;
(function (RoleFields) {
    RoleFields["RoleId"] = "roleID";
    RoleFields["RoleName"] = "roleName";
    RoleFields["ApplicationName"] = "applicationName";
    RoleFields["Datatag"] = "datatag";
})(RoleFields || (RoleFields = {}));

class RolePermissionsAdminComponent {
    constructor(rxRolePermissionsService, rxNotificationService, rxModalService, rxRoleDataPage, translateService) {
        this.rxRolePermissionsService = rxRolePermissionsService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.rxRoleDataPage = rxRoleDataPage;
        this.translateService = translateService;
        this.isDirty = false;
        this.getData = (queryParams) => {
            delete queryParams.searchText;
            return this.rxRoleDataPage.get({
                params: Object.assign({}, queryParams)
            });
        };
    }
    ngOnInit() {
        const gridColumns = [
            {
                index: 0,
                fieldId: RoleFields.RoleId,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-id.label'),
                filterable: false
            },
            {
                index: 1,
                fieldId: RoleFields.RoleName,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-name.label'),
                filterable: true,
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.editRole(lastActionRow)
                    }
                ]
            },
            {
                index: 2,
                fieldId: RoleFields.ApplicationName,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title'),
                filterable: true
            },
            {
                index: 3,
                fieldId: RoleFields.Datatag,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.datatag.label'),
                filterable: false
            }
        ];
        const recordDefinition = {
            fieldDefinitions: [
                {
                    id: RoleFields.RoleId,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RoleFields.RoleName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RoleFields.ApplicationName,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RoleFields.Datatag,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const actionButtons = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                icon: 'trash',
                actions: [
                    {
                        name: () => {
                            this.rxModalService
                                .confirm({
                                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                modalStyle: RX_MODAL.modalStyles.warning,
                                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.delete-confirmation.message')
                            })
                                .then((result) => {
                                if (result) {
                                    const selectedRecords = castArray(this.rolesPermissionsRecordGrid.api.getSelectedRows());
                                    const rolesToDelete = selectedRecords.map((record) => {
                                        return {
                                            applicationName: record[RoleFields.ApplicationName],
                                            name: record[RoleFields.RoleName]
                                        };
                                    });
                                    this.rxRolePermissionsService.delete(rolesToDelete).subscribe(() => {
                                        this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.roles-deleted.message'));
                                        this.rolesPermissionsRecordGrid.api.refresh().subscribe();
                                    });
                                }
                            });
                        }
                    }
                ]
            }
        ];
        this.recordGridConfig$ = of({
            columns: gridColumns,
            enableFiltering: true,
            recordIdField: RoleFields.RoleId,
            getRecordDefinition: () => of(recordDefinition),
            enableRowSelection: RowSelectionMode.Multiple,
            actionButtons: actionButtons,
            getData: this.getData,
            styles: 'flex-fill'
        });
    }
    openDockedPanel(title, role) {
        this.rxModalService
            .openDockedPanel({
            title: title,
            content: RoleEditorComponent,
            size: 'lg',
            data: {
                role
            }
        })
            .then((result) => {
            if (result) {
                this.rolesPermissionsRecordGrid.api.refresh().subscribe();
            }
        })
            .catch(noop);
    }
    createRole() {
        this.openDockedPanel(this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.create-role.label'), {
            roleID: null,
            roleName: '',
            datatag: '',
            test: '',
            production: '',
            applicationName: ''
        });
    }
    editRole(roleRow) {
        this.rxRolePermissionsService
            .get({
            applicationName: roleRow[RoleFields.ApplicationName],
            name: roleRow[RoleFields.RoleName]
        })
            .subscribe((role) => {
            this.openDockedPanel(this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.edit-role.label'), role);
        });
    }
}
RolePermissionsAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsAdminComponent, deps: [{ token: RxRolePermissionsService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: i2.RxRoleDataPageService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RolePermissionsAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RolePermissionsAdminComponent, selector: "rx-admin-role-permissions", viewQueries: [{ propertyName: "rolesPermissionsRecordGrid", first: true, predicate: ["rolesPermissionsRecordGrid"], descendants: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.header.title' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start btn btn-link\"\n    rx-id=\"new-button\"\n    (click)=\"createRole()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"roles-permissions-grid\" #rolesPermissionsRecordGrid [config]=\"recordGridConfig$\">\n  </rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-role-permissions',
                    templateUrl: './role-permissions.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxRolePermissionsService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: i2.RxRoleDataPageService }, { type: i4.TranslateService }]; }, propDecorators: { rolesPermissionsRecordGrid: [{
                type: ViewChild,
                args: ['rolesPermissionsRecordGrid', { static: false }]
            }] } });

class RolePermissionsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-role-permissions',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(RolePermissionsAdminComponent),
            name: 'Role permissions',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
RolePermissionsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
RolePermissionsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsRegistrationModule, declarations: [RolePermissionsAdminComponent, RoleEditorComponent], imports: [AdaptBusyModule,
        AdaptButtonModule,
        AdaptRxCounterModule,
        AdaptRxFormControlModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptRxTypeaheadModule,
        AdaptRxValidatorsModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        RecordGridModule,
        RxDirectivesModule,
        TranslateModule] });
RolePermissionsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsRegistrationModule, imports: [[
            AdaptBusyModule,
            AdaptButtonModule,
            AdaptRxCounterModule,
            AdaptRxFormControlModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptRxTypeaheadModule,
            AdaptRxValidatorsModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            RecordGridModule,
            RxDirectivesModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RolePermissionsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RolePermissionsAdminComponent, RoleEditorComponent],
                    imports: [
                        AdaptBusyModule,
                        AdaptButtonModule,
                        AdaptRxCounterModule,
                        AdaptRxFormControlModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptRxTypeaheadModule,
                        AdaptRxValidatorsModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        RecordGridModule,
                        RxDirectivesModule,
                        TranslateModule
                    ],
                    entryComponents: [RolePermissionsAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const fieldIds$1 = {
    clientId: 1780,
    clientSecret: 1781,
    apiAuthorizationEndpoint: 1782,
    oAuthProvider: 1783,
    resourceServer: 1784,
    bundleId: 61001
};
const sections = [
    {
        title: 'com.bmc.arsys.rx.client.admin.rsso-auth.bmc-helix-digital-workplace.title',
        isOpen: true,
        isSaveInProgress: false,
        recordInstanceId: '',
        rxId: 'digital-workplace',
        fields: [
            {
                id: fieldIds$1.apiAuthorizationEndpoint,
                type: 'text',
                name: 'API authorization endpoint',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.api-authorization-endpoint-url.label',
                rxId: 'api-auth-endpoint'
            },
            {
                id: fieldIds$1.resourceServer,
                type: 'text',
                name: 'Resource server',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.resource-server.label',
                rxId: 'resource-server'
            },
            {
                id: fieldIds$1.clientId,
                type: 'text',
                name: 'Client ID',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'client-id'
            },
            {
                id: fieldIds$1.clientSecret,
                type: 'password',
                name: 'Client secret',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'client-secret'
            }
        ],
        formName: 'digitalWorkplaceForm',
        oAuthProvider: 'RSSO OAuth'
    },
    {
        title: 'com.bmc.arsys.rx.client.admin.rsso-auth.bmc-helix-cloud-cost.title',
        isOpen: true,
        isSaveInProgress: false,
        recordInstanceId: '',
        rxId: 'cloud-cost',
        fields: [
            {
                id: fieldIds$1.apiAuthorizationEndpoint,
                type: 'text',
                name: 'API authorization endpoint',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.api-authorization-endpoint-url.label',
                rxId: 'api-auth-endpoint'
            },
            {
                id: fieldIds$1.resourceServer,
                type: 'text',
                name: 'Resource server',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.resource-server.label',
                rxId: 'resource-server'
            },
            {
                id: fieldIds$1.clientId,
                type: 'text',
                name: 'Client ID',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'client-id'
            },
            {
                id: fieldIds$1.clientSecret,
                type: 'password',
                name: 'Client secret',
                value: '',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'client-secret'
            }
        ],
        formName: 'cloudCostForm',
        oAuthProvider: 'Cloud Cost RSSO'
    }
];
const RX_RSSO_OAUTH = {
    recordDefinitionName: 'OAuth Configuration',
    oAuthConfigurationDescription: 'oauth-configuration',
    fieldIds: {
        bundleId: fieldIds$1.bundleId,
        oAuthProvider: fieldIds$1.oAuthProvider
    },
    sections
};

class RxRssoOAuthConfigurationService {
    constructor(rxRecordInstanceService, rxRecordInstanceUpdateService, rxRecordInstanceDataPageService) {
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
    }
    getConfigs() {
        return this.rxRecordInstanceDataPageService
            .post({
            params: {
                recorddefinition: RX_RSSO_OAUTH.recordDefinitionName,
                queryExpression: `('${RX_RECORD_DEFINITION.coreFieldIds.description}'="${RX_RSSO_OAUTH.oAuthConfigurationDescription}")`,
                propertySelection: [RX_RECORD_DEFINITION.coreFieldIds.id, RX_RSSO_OAUTH.fieldIds.oAuthProvider]
            }
        })
            .pipe(map$1((response) => {
            return response.data.map((rssoConfiguration) => {
                return Object.keys(rssoConfiguration).map(function (key) {
                    return { id: key, value: rssoConfiguration[key] };
                });
            });
        }));
    }
    saveConfigRecordInstance(recordInstance) {
        if (recordInstance.id) {
            return this.rxRecordInstanceUpdateService.execute(recordInstance);
        }
        else {
            return this.rxRecordInstanceService.create(recordInstance);
        }
    }
    getConfigRecordInstance(recordInstanceId) {
        if (recordInstanceId) {
            return this.rxRecordInstanceService.get(RX_RSSO_OAUTH.recordDefinitionName, recordInstanceId);
        }
        else {
            return this.rxRecordInstanceService.getNew(RX_RSSO_OAUTH.recordDefinitionName);
        }
    }
}
RxRssoOAuthConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRssoOAuthConfigurationService, deps: [{ token: i3$2.RxRecordInstanceService }, { token: i3$2.RxRecordInstanceUpdateService }, { token: i3$2.RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });
RxRssoOAuthConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRssoOAuthConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRssoOAuthConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i3$2.RxRecordInstanceService }, { type: i3$2.RxRecordInstanceUpdateService }, { type: i3$2.RxRecordInstanceDataPageService }]; } });

class RssoOauthAdminComponent extends BaseViewComponent {
    constructor(rxRssoOAuthService, rxCurrentUserService, rxNotificationService, translateService) {
        super();
        this.rxRssoOAuthService = rxRssoOAuthService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.sections = RX_RSSO_OAUTH.sections;
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.serviceForm.dirty
        });
        this.busy = this.rxRssoOAuthService
            .getConfigs()
            .pipe(switchMap((rssoConfigurations) => {
            const recondInstanceConfigs$ = map(rssoConfigurations, (configuration) => {
                const oAuthProviderInConfiguration = find(configuration, {
                    id: String(RX_RSSO_OAUTH.fieldIds.oAuthProvider)
                }).value;
                const section = find(this.sections, { oAuthProvider: oAuthProviderInConfiguration });
                section.recordInstanceId = find(configuration, {
                    id: String(RX_RECORD_DEFINITION.coreFieldIds.id)
                }).value;
                return this.rxRssoOAuthService.getConfigRecordInstance(section.recordInstanceId).pipe(tap((recordInstance) => {
                    map(section.fields, (field) => {
                        field.value = recordInstance.fieldInstances[field.id].value;
                    });
                }));
            });
            return forkJoin(recondInstanceConfigs$);
        }))
            .subscribe();
    }
    save(section, form) {
        section.isSaveInProgress = true;
        this.rxRssoOAuthService
            .getConfigRecordInstance(section.recordInstanceId)
            .pipe(switchMap((recordInstance) => {
            map(section.fields, (field) => {
                recordInstance.fieldInstances[field.id].value = field.value;
            });
            recordInstance.setFieldValue(RX_RSSO_OAUTH.fieldIds.oAuthProvider, section.oAuthProvider);
            recordInstance.setFieldValue(RX_RSSO_OAUTH.fieldIds.bundleId, RX_APPLICATION.chatbotBundleId);
            recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, RX_RSSO_OAUTH.oAuthConfigurationDescription);
            return this.rxRssoOAuthService.saveConfigRecordInstance(recordInstance);
        }), catchError((err) => {
            section.isSaveInProgress = false;
            return throwError(err);
        }))
            .subscribe((response) => {
            if (response) {
                section.recordInstanceId = response.id;
            }
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.rsso-auth.rsso-oauth-settings-saved.message'));
            form.form.markAsPristine();
            section.isSaveInProgress = false;
        });
    }
    isSaveButtonDisabled(form) {
        return form.pristine || form.invalid;
    }
    isSaveButtonVisible() {
        return this.rxCurrentUserService.isAdministrator();
    }
    isSaveInProgress(section) {
        return section.isSaveInProgress;
    }
}
RssoOauthAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthAdminComponent, deps: [{ token: RxRssoOAuthConfigurationService }, { token: i2.RxCurrentUserService }, { token: i2.RxNotificationService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RssoOauthAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RssoOauthAdminComponent, selector: "rx-admin-rsso-oauth", viewQueries: [{ propertyName: "serviceForm", first: true, predicate: ["serviceForm"], descendants: true, read: NgForm }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.rsso-auth.header.title' | translate }}\" [busy]=\"busy\">\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form *ngFor=\"let section of sections\" name=\"section.formName\" #serviceForm=\"ngForm\">\n      <adapt-accordion-tab\n        [title]=\"section.title | translate\"\n        [isOpen]=\"section.isOpen\"\n        class=\"mb-3\"\n        [attr.rx-id]=\"section.rxId\"\n      >\n        <adapt-rx-textfield\n          *ngFor=\"let field of section.fields\"\n          [name]=\"field.name\"\n          [(ngModel)]=\"field.value\"\n          [required]=\"true\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [pattern]=\"field.pattern\"\n          class=\"d-block form-group\"\n          [isPassword]=\"field.type === 'password'\"\n        >\n        </adapt-rx-textfield>\n        <button\n          adapt-button\n          type=\"button\"\n          rx-id=\"save-button\"\n          btn-type=\"primary\"\n          class=\"mt-4\"\n          [disabled]=\"isSaveButtonDisabled(serviceForm)\"\n          [adaptInlineLoader]=\"isSaveInProgress(section)\"\n          *ngIf=\"isSaveButtonVisible()\"\n          (click)=\"save(section, serviceForm)\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n        </button>\n      </adapt-accordion-tab>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-rsso-oauth',
                    templateUrl: './rsso-oauth.component.html',
                    styleUrls: ['./rsso-oauth.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: RxRssoOAuthConfigurationService }, { type: i2.RxCurrentUserService }, { type: i2.RxNotificationService }, { type: i4.TranslateService }]; }, propDecorators: { serviceForm: [{
                type: ViewChild,
                args: ['serviceForm', { read: NgForm, static: false }]
            }] } });

class RssoOauthRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-rsso-oauth',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(RssoOauthAdminComponent),
            name: 'RSSO OAuth',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
RssoOauthRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
RssoOauthRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthRegistrationModule, declarations: [RssoOauthAdminComponent], imports: [CommonModule,
        AdminSettingsModule,
        AdaptAccordionModule,
        AdaptRxTextfieldModule,
        AdaptButtonModule,
        AdaptBusyModule,
        FormsModule,
        TranslateModule] });
RssoOauthRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthRegistrationModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            AdaptAccordionModule,
            AdaptRxTextfieldModule,
            AdaptButtonModule,
            AdaptBusyModule,
            FormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RssoOauthRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RssoOauthAdminComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        AdaptAccordionModule,
                        AdaptRxTextfieldModule,
                        AdaptButtonModule,
                        AdaptBusyModule,
                        FormsModule,
                        TranslateModule
                    ],
                    entryComponents: [RssoOauthAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_RULE_POOL_MANAGEMENT = {
    ruleTypes: {
        ruleWithIssues: 'rule-with-issues',
        ruleWithoutIssues: 'rule-without-issues',
        remedyEscalationWithIssues: 'remedy-escalation-with-issues',
        remedyEscalationWithoutIssues: 'remedy-escalation-without-issues'
    },
    poolTypes: {
        poolWithIssues: 'pool-with-issues',
        poolWithoutIssues: 'pool-without-issues'
    },
    conflictsRecordFieldIds: {
        ruleName: 'rule',
        numberOfDelays: 'noOfTimesDelayed'
    }
};

class RxRulePoolDataService {
    constructor(rxDataPageService) {
        this.rxDataPageService = rxDataPageService;
        this.resource = this.rxDataPageService.withType('com.bmc.arsys.rx.application.rule.datapage.RulePoolStatisticsDataPageQuery');
    }
    getRulePoolStatistics() {
        return this.resource.get().pipe(map$1((dataPageResult) => dataPageResult.data));
    }
}
RxRulePoolDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolDataService, deps: [{ token: i2.RxDataPageFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });
RxRulePoolDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolDataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxDataPageFactoryService }]; } });

class RxRulePoolManagementService {
    constructor(rxGlobalCacheService, rxDefinitionNameService, rxOverlayService, rxRuleDefinitionService, rxRulePoolDataService, translateService) {
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxDefinitionNameService = rxDefinitionNameService;
        this.rxOverlayService = rxOverlayService;
        this.rxRuleDefinitionService = rxRuleDefinitionService;
        this.rxRulePoolDataService = rxRulePoolDataService;
        this.translateService = translateService;
        this.availablePoolsTreeSubject$ = new BehaviorSubject([]);
        this.availablePoolsTree$ = this.availablePoolsTreeSubject$
            .asObservable()
            .pipe(shareReplay(1));
    }
    fetchAvailablePoolsTree() {
        return forkJoin([
            this.rxRulePoolDataService.getRulePoolStatistics(),
            this.rxGlobalCacheService.getBundleDescriptors()
        ])
            .pipe(map$1(([rulePoolStatistics, bundleDescriptors]) => {
            this.availablePoolsTreeSubject$.next(this.buildTreeNodes(rulePoolStatistics, bundleDescriptors));
        }))
            .subscribe();
    }
    getAvailablePoolOptions() {
        return this.availablePoolsTree$.pipe(map$1(this.buildSelectOptions));
    }
    getRuleConflictsData(adaptTreeNode) {
        if (!adaptTreeNode) {
            return [];
        }
        return adaptTreeNode.data.conflictingRules.delayedByRules.concat(adaptTreeNode.data.conflictingRules.delaysOtherRules.map((ruleConflictOccurrences) => (Object.assign(Object.assign({}, ruleConflictOccurrences), { noOfTimesDelayed: 0 }))));
    }
    isRuleDesignerAvailable(ruleStatistics) {
        return !ruleStatistics.remedyEscalation && Boolean(this.rxDefinitionNameService.getBundleId(ruleStatistics.name));
    }
    reassignRuleToPool(ruleDefinitionName, poolNumber) {
        return this.rxRuleDefinitionService.get(ruleDefinitionName).pipe(switchMap((ruleDefinition) => {
            ruleDefinition.triggerEvent.poolNumber = poolNumber;
            return this.rxRuleDefinitionService.update(ruleDefinition);
        }));
    }
    buildSelectOptions(poolTreeNodes) {
        return poolTreeNodes.map((pool) => ({
            id: pool.data.executionPoolNumber,
            name: pool.label
        }));
    }
    buildTreeNodes(rulePoolStatistics, bundleDescriptors) {
        return rulePoolStatistics.map((pool) => {
            const children = pool.rules.map((rule) => {
                rule.isRuleWithIssues = Boolean(rule.conflictingRules.delayedByRules.length ||
                    rule.conflictingRules.delaysOtherRules.length ||
                    rule.designTimePoolNumber > rulePoolStatistics.length);
                let ruleType;
                if (rule.remedyEscalation) {
                    ruleType = rule.isRuleWithIssues
                        ? RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithIssues
                        : RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithoutIssues;
                }
                else {
                    ruleType = rule.isRuleWithIssues
                        ? RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithIssues
                        : RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithoutIssues;
                }
                rule.isEditable = this.isRuleEditable(rule, bundleDescriptors);
                return {
                    data: rule,
                    key: `${pool.executionPoolNumber}_${rule.guid}`,
                    label: this.rxDefinitionNameService.getDisplayName(rule.name),
                    type: ruleType
                };
            });
            const localizedStringKey = pool.isDefaultPool
                ? 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.default-pool-tree-node.label'
                : 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.pool-tree-node.label';
            const label = this.translateService.instant(localizedStringKey, {
                poolNumber: pool.executionPoolNumber,
                ruleCount: pool.rules.length
            });
            return {
                children,
                data: pool,
                label: label,
                selectable: false,
                type: pool.hasRulesWithIssues
                    ? RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithIssues
                    : RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithoutIssues
            };
        });
    }
    isRuleEditable(ruleStatistics, bundleDescriptors) {
        const bundleId = this.rxDefinitionNameService.getBundleId(ruleStatistics.name), bundleDescriptor = find(bundleDescriptors, ['id', bundleId]);
        return !ruleStatistics.remedyEscalation && Boolean(bundleId)
            ? this.rxOverlayService.areNewDefinitionsAllowedSync(bundleDescriptor)
            : false;
    }
}
RxRulePoolManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolManagementService, deps: [{ token: i2.RxGlobalCacheService }, { token: i2.RxDefinitionNameService }, { token: i2.RxOverlayService }, { token: i2$2.RxRuleDefinitionService }, { token: RxRulePoolDataService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });
RxRulePoolManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxRulePoolManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxGlobalCacheService }, { type: i2.RxDefinitionNameService }, { type: i2.RxOverlayService }, { type: i2$2.RxRuleDefinitionService }, { type: RxRulePoolDataService }, { type: i4.TranslateService }]; } });

class RuleReassignmentComponent extends RxModalClass {
    constructor(activeModalRef, rxNotificationService, rxRuleDefinitionService, rxRulePoolManagementService, translateService, injector) {
        super(activeModalRef, injector);
        this.activeModalRef = activeModalRef;
        this.rxNotificationService = rxNotificationService;
        this.rxRuleDefinitionService = rxRuleDefinitionService;
        this.rxRulePoolManagementService = rxRulePoolManagementService;
        this.translateService = translateService;
        this.injector = injector;
        this.isSaveButtonDisabled = true;
        this.poolFormControl = new FormControl([]);
        this.destroyed$ = new ReplaySubject(1);
        this.poolFormControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((selectedPools) => {
            this.selectedPoolId = selectedPools[0].id;
            this.isSaveButtonDisabled = false;
        });
    }
    ngOnInit() {
        super.ngOnInit();
        this.poolSelectOptions$ = this.rxRulePoolManagementService.getAvailablePoolOptions();
    }
    optionFormatter(selectOption) {
        return selectOption.name;
    }
    save() {
        this.allowDismiss = false;
        this.isSaveButtonDisabled = true;
        this.rxRulePoolManagementService
            .reassignRuleToPool(this.activeModalRef.getData().ruleName, this.selectedPoolId)
            .pipe(take(1), finalize(() => {
            this.allowDismiss = true;
            this.isSaveButtonDisabled = false;
        }))
            .subscribe(() => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.reassignment-saved.message'));
            this.activeModalRef.close(true);
        });
    }
    cancel() {
        this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
RuleReassignmentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RuleReassignmentComponent, deps: [{ token: i1$1.ActiveModalRef }, { token: i2.RxNotificationService }, { token: i2$2.RxRuleDefinitionService }, { token: RxRulePoolManagementService }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
RuleReassignmentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RuleReassignmentComponent, selector: "rx-rule-reassignment", usesInheritance: true, ngImport: i0, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.client.admin.rule-pool-management.reassignment-dialog.title' | translate }}\n  </h5>\n  <button\n    class=\"close dp-close\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <adapt-rx-select\n    [formControl]=\"poolFormControl\"\n    [options]=\"poolSelectOptions$ | async\"\n    [optionFormatter]=\"optionFormatter\"\n    [label]=\"'com.bmc.arsys.rx.client.admin.rule-pool-management.assign-to.label' | translate\"\n  ></adapt-rx-select>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"isSaveButtonDisabled || !allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    rx-id=\"cancel-button\"\n    (click)=\"cancel()\"\n    [disabled]=\"!allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe, "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RuleReassignmentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-rule-reassignment',
                    templateUrl: './rule-reassignment.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ActiveModalRef }, { type: i2.RxNotificationService }, { type: i2$2.RxRuleDefinitionService }, { type: RxRulePoolManagementService }, { type: i4.TranslateService }, { type: i0.Injector }]; } });

class RulePoolManagementAdminComponent {
    constructor(rxModalService, rxRulePoolManagementService, translateService) {
        this.rxModalService = rxModalService;
        this.rxRulePoolManagementService = rxRulePoolManagementService;
        this.translateService = translateService;
        this.availablePoolsTree = [];
        this.ruleDesignerLink = `/helix/index.html#/${RX_APPLICATION.innovationStudioBundleId}/rule/edit/`;
        this.showOnlyRulesWithIssuesFormControl = new FormControl(false);
        this.strings = {};
        this.treeWrap = TreeWrap.WrapAll;
        this.destroyed$ = new ReplaySubject(1);
        this.selectedRuleValue = null;
        this.selectedRuleSubject$ = new BehaviorSubject(this.selectedRuleValue);
        this.selectedRule$ = this.selectedRuleSubject$.asObservable().pipe(takeUntil(this.destroyed$));
        this.showOnlyRulesWithIssuesSubject$ = new BehaviorSubject(false);
        this.showOnlyRulesWithIssues$ = this.showOnlyRulesWithIssuesSubject$
            .asObservable()
            .pipe(takeUntil(this.destroyed$));
        this.setStrings();
        this.showOnlyRulesWithIssuesFormControl.valueChanges
            .pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.showOnlyRulesWithIssuesSubject$.next(value));
        this.ruleConflictsTableConfig = {
            columns: [
                {
                    header: this.strings.ruleNameColumnTitle,
                    field: `${RX_RULE_POOL_MANAGEMENT.conflictsRecordFieldIds.ruleName}`
                },
                {
                    header: this.strings.numberOfDelaysColumnTitle,
                    field: `${RX_RULE_POOL_MANAGEMENT.conflictsRecordFieldIds.numberOfDelays}`
                }
            ],
            data: [],
            texts: { emptyStateLabelText: this.strings.ruleConflictsEmptyStateLabel }
        };
        this.selectedRule$.subscribe((adaptTreeNode) => {
            this.selectedRuleValue = adaptTreeNode;
            this.ruleConflictsTableConfig.data = this.rxRulePoolManagementService.getRuleConflictsData(adaptTreeNode);
        });
        combineLatest([this.rxRulePoolManagementService.availablePoolsTree$, this.showOnlyRulesWithIssues$])
            .pipe(map$1(([availablePoolsTree, showOnlyRulesWithIssues]) => {
            return showOnlyRulesWithIssues
                ? availablePoolsTree.map((poolTreeNode) => (Object.assign(Object.assign({}, poolTreeNode), { children: poolTreeNode.data.hasRulesWithIssues
                        ? poolTreeNode.children.filter(({ data }) => data.isRuleWithIssues)
                        : [] })))
                : availablePoolsTree;
        }), takeUntil(this.destroyed$))
            .subscribe((availablePoolsTree) => {
            this.availablePoolsTree.forEach((poolTreeNode, index) => {
                const updatedPool = availablePoolsTree[index];
                updatedPool.expanded = updatedPool.children.length && poolTreeNode.expanded;
            });
            this.availablePoolsTree = availablePoolsTree;
            if (this.selectedRuleValue) {
                const isSelectedRulePresentInTree = this.availablePoolsTree.some((poolTreeNode) => {
                    const rule = poolTreeNode.children.find((ruleTreeNode) => ruleTreeNode.data.guid === this.selectedRuleValue.data.guid);
                    if (rule) {
                        this.selectedRule = rule;
                        return true;
                    }
                });
                if (!isSelectedRulePresentInTree) {
                    this.selectedRuleSubject$.next(null);
                }
            }
        });
    }
    get selectedRule() {
        return this.selectedRuleValue;
    }
    set selectedRule(selectedRule) {
        this.selectedRuleSubject$.next(selectedRule);
    }
    ngOnInit() {
        this.busy = this.rxRulePoolManagementService.fetchAvailablePoolsTree();
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
    isAssignedPoolOutOfRange() {
        return this.selectedRuleValue.data.designTimePoolNumber > this.availablePoolsTree.length;
    }
    isRuleDesignerAvailable() {
        return this.rxRulePoolManagementService.isRuleDesignerAvailable(this.selectedRuleValue.data);
    }
    openReassignPoolDialog() {
        this.rxModalService
            .openModal({
            content: RuleReassignmentComponent,
            data: {
                ruleName: this.selectedRuleValue.data.name
            },
            size: 'sm'
        })
            .then(() => this.rxRulePoolManagementService.fetchAvailablePoolsTree(), noop);
    }
    setStrings() {
        this.strings = {
            adminSettingsHeader: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.header.title'),
            assignedPoolLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.assigned-pool.label'),
            availablePoolsLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.label'),
            availablePoolsTooltip: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.tooltip', {
                clockAlertIcon: '<i class="d-icon-clock_alert"></i>',
                clockArrowIcon: '<i class="d-icon-clock_arrow"></i>',
                dangerTriangleIcon: '<i class="text-danger d-icon-exclamation_triangle"></i>',
                triangleIcon: '<i class="d-icon-exclamation_triangle"></i>',
                successCheckIcon: '<i class="text-success d-icon-check_circle"></i>',
                checkIcon: '<i class="d-icon-check_circle"></i>'
            }),
            averageExecutionTimeLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.average-execution-time.label'),
            averageLatencyLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.average-latency.label'),
            lastEndDateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.last-end-date.label'),
            lastStartDateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.last-start-date.label'),
            numberOfDelaysColumnTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.column.delays-caused.title'),
            numberOfRunsLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.execution-count.label'),
            selectedRuleEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.selected-rule.empty-state.label'),
            showOnlyRulesWithIssuesLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.show-only-rules-with-issues.label'),
            reassignButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.button.reassign.label'),
            ruleConflictsEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.empty-state.label'),
            ruleConflictsTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.title'),
            ruleNameColumnTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.column.rule-name.title'),
            ruleNameLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.rule-name.label'),
            rulePoolsEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-data-to-display.label'),
            ruleSummaryTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.title'),
            ruleSummaryTooltip: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.tooltip'),
            timerDefinitionLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.timer-definition.label')
        };
    }
}
RulePoolManagementAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementAdminComponent, deps: [{ token: i1.RxModalService }, { token: RxRulePoolManagementService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RulePoolManagementAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RulePoolManagementAdminComponent, selector: "rx-admin-rule-pool-management", ngImport: i0, template: "<rx-admin-settings header=\"{{ strings.adminSettingsHeader }}\" [busy]=\"busy\">\n  <div *ngIf=\"availablePoolsTree.length; else emptyRulePoolsTemplate\" class=\"d-flex h-100 overflow-auto\">\n    <div class=\"d-flex flex-shrink-0 flex-column border-right page-content-left pr-4\">\n      <h5 class=\"m-0\">\n        {{ strings.availablePoolsLabel }}\n        <adapt-icon\n          name=\"info_circle_o_adapt\"\n          [adaptPopover]=\"availablePoolsTooltipTemplate\"\n          maxWidth=\"400\"\n        ></adapt-icon>\n      </h5>\n\n      <ng-template #availablePoolsTooltipTemplate>\n        <div [innerHtml]=\"strings.availablePoolsTooltip\"></div>\n      </ng-template>\n\n      <adapt-rx-checkbox\n        [label]=\"strings.showOnlyRulesWithIssuesLabel\"\n        [formControl]=\"showOnlyRulesWithIssuesFormControl\"\n      ></adapt-rx-checkbox>\n\n      <div class=\"overflow-auto\">\n        <adapt-tree [value]=\"availablePoolsTree\" [(selection)]=\"selectedRule\" [wrap]=\"treeWrap\" selectionMode=\"single\">\n          <ng-template let-node adaptTreeNodeTemplate=\"pool-without-issues\">\n            <span><i class=\"text-success d-icon-check_circle at-action-icon\"></i>{{ node.label }}</span>\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"pool-with-issues\">\n            <span><i class=\"text-danger d-icon-exclamation_triangle at-action-icon\"></i>{{ node.label }}</span>\n          </ng-template>\n\n          <ng-template let-node adaptTreeNodeTemplate=\"rule-without-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-check_circle at-action-icon\" [ngClass]=\"{ 'text-success': node.data.isEditable }\"></i\n              >{{ node.label }}</span\n            >\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"rule-with-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i\n                class=\"d-icon-exclamation_triangle at-action-icon\"\n                [ngClass]=\"{ 'text-danger': node.data.isEditable }\"\n              ></i\n              >{{ node.label }}\n            </span>\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"remedy-escalation-with-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-clock_alert at-action-icon\"></i>{{ node.label }}</span\n            >\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"remedy-escalation-without-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-clock_arrow at-action-icon\"></i>{{ node.label }}</span\n            >\n          </ng-template>\n        </adapt-tree>\n      </div>\n    </div>\n\n    <div class=\"flex-fill pl-4\">\n      <div *ngIf=\"selectedRule?.data as rule; else noRuleSelectedTemplate\">\n        <h5 class=\"mt-0\">\n          {{ strings.ruleSummaryTitle }}\n          <adapt-icon\n            name=\"info_circle_o_adapt\"\n            [adaptPopover]=\"ruleSummaryTooltipTemplate\"\n            maxWidth=\"280\"\n            placement=\"bottom\"\n          ></adapt-icon>\n        </h5>\n\n        <ng-template #ruleSummaryTooltipTemplate>\n          <div [innerHTML]=\"strings.ruleSummaryTooltip\"></div>\n        </ng-template>\n\n        <div class=\"mb-3\">\n          <adapt-rx-control-label [label]=\"strings.ruleNameLabel\"></adapt-rx-control-label>\n\n          <span *ngIf=\"!isRuleDesignerAvailable(); else ruleFullNameWithDesignerLink\" class=\"rule-name-value\">{{\n            rule.name\n          }}</span>\n\n          <ng-template #ruleFullNameWithDesignerLink>\n            <a\n              adapt-button\n              btn-type=\"tertiary\"\n              class=\"d-icon-left-pop_up p-0 border-0 rule-name-value\"\n              rx-id=\"open-rule-designer-button\"\n              target=\"_blank\"\n              href=\"{{ ruleDesignerLink + rule.name }}\"\n            >\n              {{ rule.name }}\n            </a>\n          </ng-template>\n        </div>\n\n        <div class=\"mb-3\">\n          <adapt-rx-control-label [label]=\"strings.timerDefinitionLabel\"></adapt-rx-control-label>\n          <span>{{ rule.timeCriteria | rxRuleTriggerTimeCriteriaDisplayValue }}</span>\n        </div>\n\n        <div class=\"d-flex mb-3\">\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.numberOfRunsLabel\"></adapt-rx-control-label>\n            <span>{{ rule.numberOfRuns }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.averageLatencyLabel\"></adapt-rx-control-label>\n            <span>{{ rule.avgWaitTime }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.averageExecutionTimeLabel\"></adapt-rx-control-label>\n            <span>{{ rule.avgExecutionTime }}</span>\n          </div>\n        </div>\n\n        <div class=\"d-flex mb-3\">\n          <div class=\"flex-fill col-4 p-0\">\n            <div class=\"pb-1\">\n              <span class=\"form-control-label pr-3\">{{ strings.assignedPoolLabel }}</span>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                class=\"p-0 border-0\"\n                rx-id=\"reassign-button\"\n                *ngIf=\"rule.isEditable\"\n                (click)=\"openReassignPoolDialog()\"\n                [style.vertical-align]=\"'baseline'\"\n              >\n                <span class=\"d-icon-pencil\"></span>\n                {{ strings.reassignButtonLabel }}\n              </adapt-button>\n            </div>\n            <span>\n              <i\n                *ngIf=\"isAssignedPoolOutOfRange()\"\n                class=\"d-icon-exclamation_triangle at-action-icon\"\n                [ngClass]=\"{ 'text-danger': rule.isEditable }\"\n              ></i>\n              {{ rule.designTimePoolNumber }}\n            </span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.lastStartDateLabel\"></adapt-rx-control-label>\n            <span>{{ rule.lastStartTime | date: 'medium' }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.lastEndDateLabel\"></adapt-rx-control-label>\n            <span>{{ rule.lastEndTime | date: 'medium' }}</span>\n          </div>\n        </div>\n\n        <h5>\n          {{ strings.ruleConflictsTitle }}\n          <i\n            *ngIf=\"ruleConflictsTableConfig.data.length\"\n            class=\"text-danger d-icon-exclamation_triangle\"\n            [ngClass]=\"{ 'text-danger': rule.isEditable }\"\n          ></i>\n        </h5>\n        <adapt-table\n          [columns]=\"ruleConflictsTableConfig.columns\"\n          [bordered]=\"true\"\n          [sortable]=\"true\"\n          [texts]=\"ruleConflictsTableConfig.texts\"\n          [value]=\"ruleConflictsTableConfig.data\"\n        >\n        </adapt-table>\n      </div>\n\n      <ng-template #noRuleSelectedTemplate>\n        <div class=\"d-flex align-items-center justify-content-center h-100\">\n          <adapt-empty-state [type]=\"'rules'\" [label]=\"strings.selectedRuleEmptyStateLabel\"></adapt-empty-state>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n\n  <ng-template #emptyRulePoolsTemplate>\n    <div class=\"d-flex align-items-center h-100\">\n      <adapt-empty-state\n        class=\"flex-fill\"\n        [type]=\"'rules'\"\n        [label]=\"strings.rulePoolsEmptyStateLabel\"\n      ></adapt-empty-state>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}rx-admin-settings{max-height:calc(100vh - 54px)}.overflow-auto{overflow:auto}.page-content-left{width:280px}.rule-name-value{display:inline-block;vertical-align:middle;line-height:1.5385}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i4$3.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i1$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$1.AdaptTreeNodeTemplateDirective, selector: "[adaptTreeNodeTemplate]", inputs: ["adaptTreeNodeTemplate"] }, { type: i1$1.AdaptTooltipDirective, selector: "[adaptTooltip]", inputs: ["popupDelay", "placement", "width", "minWidth", "useWidthFitting", "adaptRadarDisableEventSending", "adaptTooltip", "manual"], outputs: ["shown", "hidden"], exportAs: ["tooltip"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "rxRuleTriggerTimeCriteriaDisplayValue": i2$2.RxRuleTriggerTimeCriteriaDisplayValuePipe, "date": i8.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-rule-pool-management',
                    templateUrl: './rule-pool-management.component.html',
                    styleUrls: ['./rule-pool-management.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: RxRulePoolManagementService }, { type: i4.TranslateService }]; } });

class RulePoolManagementRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-rule-pool-management',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(RulePoolManagementAdminComponent),
            name: 'Rule pool management',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
RulePoolManagementRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
RulePoolManagementRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementRegistrationModule, declarations: [RuleReassignmentComponent, RulePoolManagementAdminComponent], imports: [AdaptBusyModule,
        AdaptButtonModule,
        AdaptEmptyStateModule,
        AdaptIconModule,
        AdaptPopoverModule,
        AdaptRxCheckboxModule,
        AdaptRxFormControlModule,
        AdaptRxLabelModule,
        AdaptRxSelectModule,
        AdaptTableModule,
        AdaptTooltipModule,
        AdaptTreeModule,
        AdminSettingsModule,
        CommonModule,
        ReactiveFormsModule,
        RxRulePipesModule,
        TranslateModule] });
RulePoolManagementRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementRegistrationModule, imports: [[
            AdaptBusyModule,
            AdaptButtonModule,
            AdaptEmptyStateModule,
            AdaptIconModule,
            AdaptPopoverModule,
            AdaptRxCheckboxModule,
            AdaptRxFormControlModule,
            AdaptRxLabelModule,
            AdaptRxSelectModule,
            AdaptTableModule,
            AdaptTooltipModule,
            AdaptTreeModule,
            AdminSettingsModule,
            CommonModule,
            ReactiveFormsModule,
            RxRulePipesModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RulePoolManagementRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RuleReassignmentComponent, RulePoolManagementAdminComponent],
                    imports: [
                        AdaptBusyModule,
                        AdaptButtonModule,
                        AdaptEmptyStateModule,
                        AdaptIconModule,
                        AdaptPopoverModule,
                        AdaptRxCheckboxModule,
                        AdaptRxFormControlModule,
                        AdaptRxLabelModule,
                        AdaptRxSelectModule,
                        AdaptTableModule,
                        AdaptTooltipModule,
                        AdaptTreeModule,
                        AdminSettingsModule,
                        CommonModule,
                        ReactiveFormsModule,
                        RxRulePipesModule,
                        TranslateModule
                    ],
                    entryComponents: [RulePoolManagementAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxServerInformationService {
    constructor(rxSystemConfigurationService) {
        this.rxSystemConfigurationService = rxSystemConfigurationService;
    }
    getServerInformation() {
        const identifiers = [
            'VERSION',
            'SERVER_DIR',
            'OS',
            'HARDWARE',
            'SERVER_NAME',
            'SERVER_TIME',
            'CONFIGURATION_NAME',
            'DB_TYPE',
            'DB_NAME',
            'DB_VERSION',
            'DB_USER'
        ];
        return this.rxSystemConfigurationService.queryConfiguration(identifiers).pipe(map$1((serverInformation) => {
            return {
                serverVersion: find(serverInformation, { id: 'VERSION' }).value,
                serverDirectory: find(serverInformation, { id: 'SERVER_DIR' }).value,
                operatingSystem: find(serverInformation, { id: 'OS' }).value,
                hardware: find(serverInformation, { id: 'HARDWARE' }).value,
                serverName: find(serverInformation, { id: 'SERVER_NAME' }).value,
                serverTime: new Date(find(serverInformation, { id: 'SERVER_TIME' }).value * 1000).toLocaleString(),
                configurationName: find(serverInformation, { id: 'CONFIGURATION_NAME' }).value,
                databaseType: find(serverInformation, { id: 'DB_TYPE' }).value,
                databaseName: find(serverInformation, { id: 'DB_NAME' }).value,
                databaseVersion: find(serverInformation, { id: 'DB_VERSION' }).value,
                databaseUser: find(serverInformation, { id: 'DB_USER' }).value
            };
        }));
    }
}
RxServerInformationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerInformationService, deps: [{ token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
RxServerInformationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerInformationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerInformationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.RxSystemConfigurationService }]; } });

class ServerInformationAdminComponent {
    constructor(rxServerInformationService) {
        this.rxServerInformationService = rxServerInformationService;
    }
    ngOnInit() {
        this.busy = this.rxServerInformationService.getServerInformation().subscribe((serverInformation) => {
            this.serverInformation = serverInformation;
        });
    }
}
ServerInformationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationAdminComponent, deps: [{ token: RxServerInformationService }], target: i0.ɵɵFactoryTarget.Component });
ServerInformationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServerInformationAdminComponent, selector: "rx-admin-server-information", ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-version\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-version.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverVersion\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-directory\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-directory.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverDirectory\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"operating-system\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.operating-system.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.operatingSystem\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"hardware\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.hardware.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.hardware\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-name-alias.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-time\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-time.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverTime\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"configuration-name\"\n        label=\" {{ 'com.bmc.arsys.rx.client.admin.server-information.configuration-name-time.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.configurationName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-type\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-type.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseType\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-tablespace-name.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-version\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-version.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseVersion\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-server-information',
                    templateUrl: './server-information.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxServerInformationService }]; } });

class ServerInformationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-server-information',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServerInformationAdminComponent),
            name: 'Server information',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ServerInformationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ServerInformationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationRegistrationModule, declarations: [ServerInformationAdminComponent], imports: [AdminSettingsModule, AdaptRxTextfieldModule, CommonModule, FormsModule, TranslateModule] });
ServerInformationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationRegistrationModule, imports: [[AdminSettingsModule, AdaptRxTextfieldModule, CommonModule, FormsModule, TranslateModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerInformationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ServerInformationAdminComponent],
                    imports: [AdminSettingsModule, AdaptRxTextfieldModule, CommonModule, FormsModule, TranslateModule],
                    entryComponents: [ServerInformationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_SERVER_LOGS = {
    configUrl: `${RX_ADMINISTRATION.systemConfigurationUrl}/logging/server`,
    downloadUrl: `${RX_ADMINISTRATION.systemConfigurationUrl}/logging/server/download`,
    defaultFormConfig: {
        autoTurnOffDuration: 30,
        ruleLogOn: false,
        timedRuleLogOn: false,
        processLogOn: false,
        sqlLogOn: false,
        apiLogOn: false
    }
};

class RxServerLogsService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getConfig() {
        return this.httpClient.get(RX_SERVER_LOGS.configUrl);
    }
    save(logsConfig) {
        return this.httpClient.post(RX_SERVER_LOGS.configUrl, logsConfig);
    }
    downloadServerLogs(logFileNames) {
        return this.httpClient.post(RX_SERVER_LOGS.downloadUrl, logFileNames, {
            observe: 'response',
            responseType: 'arraybuffer'
        });
    }
}
RxServerLogsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerLogsService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxServerLogsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerLogsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxServerLogsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class ServerLogsAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxNotificationService, rxServerErrorHandlerService, rxServerLogsService) {
        super();
        this.formBuilder = formBuilder;
        this.rxNotificationService = rxNotificationService;
        this.rxServerErrorHandlerService = rxServerErrorHandlerService;
        this.rxServerLogsService = rxServerLogsService;
        this.hostClass = 'd-block col-md-9 p-0';
    }
    getServerLogsConfig() {
        this.busy = this.rxServerLogsService.getConfig().subscribe((serverLogsConfig) => {
            this.serverLogsForm.patchValue(serverLogsConfig);
        });
    }
    toggleAdditionalLogTypes() {
        this.shouldDisplayAdditionalLogTypes = !this.shouldDisplayAdditionalLogTypes;
    }
    save() {
        const formValue = this.serverLogsForm.getRawValue();
        this.rxServerLogsService.save(formValue).subscribe(() => {
            this.rxNotificationService.addSuccessMessage('Server Logs configuration saved successfully.');
            this.serverLogsForm.markAsPristine();
        });
    }
    downloadLogs() {
        this.isDownloadInProgress = true;
        this.rxServerLogsService
            .downloadServerLogs({
            fileNames: ['server', 'License']
        })
            .subscribe((data) => {
            RxFileService.saveFile(data);
            this.isDownloadInProgress = false;
        }, (error) => {
            error.data = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(error.error)));
            this.rxServerErrorHandlerService.handle(error);
            this.isDownloadInProgress = false;
        });
    }
    get autoTurnOffDuration() {
        return this.serverLogsForm.get('autoTurnOffDuration').value;
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.serverLogsForm.dirty
        });
        this.serverLogsForm = this.formBuilder.group(RX_SERVER_LOGS.defaultFormConfig);
        this.getServerLogsConfig();
    }
}
ServerLogsAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i2.RxNotificationService }, { token: i2.RxServerErrorHandlerService }, { token: RxServerLogsService }], target: i0.ɵɵFactoryTarget.Component });
ServerLogsAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServerLogsAdminComponent, selector: "rx-admin-server-logs", host: { properties: { "class": "this.hostClass" } }, usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.header.title' | translate }}\" [busy]=\"busy\">\n  <form [formGroup]=\"serverLogsForm\">\n    <div>\n      <h6 class=\"dt\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.capture-logs.title' | translate }}</h6>\n      <div class=\"d-flex p-0 logs-duration\" rx-id=\"logs-duration\">\n        <adapt-rx-counter\n          formControlName=\"autoTurnOffDuration\"\n          min=\"1\"\n          adaptIntegerNumber\n        >\n        </adapt-rx-counter>\n        <span class=\"p-2\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.minutes.label' | translate }}</span>\n      </div>\n      <div *ngIf=\"autoTurnOffDuration < 1\" class=\"adapt-mt-error\">\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.minimum-of-one-minute.label' | translate }}\n      </div>\n    </div>\n\n    <div>\n      <h6 class=\"dt\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.log-types-to-be-captured.title' | translate }}</h6>\n      <adapt-rx-checkbox\n        formControlName=\"ruleLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.rule.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"timedRuleLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.escalation.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"processLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.process.label' | translate }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div rx-id=\"show-additional-log\" (click)=\"toggleAdditionalLogTypes()\" class=\"btn-link alert-link pt-2\">\n      {{\n        (shouldDisplayAdditionalLogTypes\n          ? 'com.bmc.arsys.rx.client.admin.server-logs.show-less.label'\n          : 'com.bmc.arsys.rx.client.admin.server-logs.show-more.label'\n        ) | translate\n      }}\n    </div>\n\n    <div *ngIf=\"shouldDisplayAdditionalLogTypes\">\n      <h6 class=\"dt\">\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.additional-log-types-to-be-captured.title' | translate }}\n      </h6>\n      <adapt-rx-checkbox\n        formControlName=\"sqlLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.sql.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"apiLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.api.label' | translate }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div class=\"mt-4 d-flex\">\n      <button\n        type=\"submit\"\n        adapt-button\n        btn-type=\"primary\"\n        [disabled]=\"serverLogsForm.pristine || autoTurnOffDuration < 1\"\n        (click)=\"save()\"\n        rx-id=\"save-button\"\n        class=\"mr-3\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"secondary\"\n        [adaptInlineLoader]=\"isDownloadInProgress\"\n        activeText=\"Downloading...\"\n        (click)=\"downloadLogs()\"\n        rx-id=\"download-button\"\n      >\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.download-logs.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [".logs-duration{max-width:200px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-server-logs',
                    templateUrl: './server-logs.component.html',
                    styleUrls: ['./server-logs.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i2.RxNotificationService }, { type: i2.RxServerErrorHandlerService }, { type: RxServerLogsService }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class ServerLogsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-server-logs',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServerLogsAdminComponent),
            name: 'Server logs',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ServerLogsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ServerLogsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsRegistrationModule, declarations: [ServerLogsAdminComponent], imports: [AdaptBusyModule,
        AdaptButtonModule,
        AdaptRxCheckboxModule,
        AdaptRxCounterModule,
        AdaptRxValidatorsModule,
        AdminSettingsModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        TranslateModule] });
ServerLogsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsRegistrationModule, imports: [[
            AdaptBusyModule,
            AdaptButtonModule,
            AdaptRxCheckboxModule,
            AdaptRxCounterModule,
            AdaptRxValidatorsModule,
            AdminSettingsModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServerLogsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ServerLogsAdminComponent],
                    imports: [
                        AdaptBusyModule,
                        AdaptButtonModule,
                        AdaptRxCheckboxModule,
                        AdaptRxCounterModule,
                        AdaptRxValidatorsModule,
                        AdminSettingsModule,
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        TranslateModule
                    ],
                    entryComponents: [ServerLogsAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_SERVICES_PROVIDER_REGION = {
    connections: {
        cognitiveAdminCredential: 'cognitiveAdminCredential'
    },
    providers: {
        watson: 'WATSON'
    },
    regionOptions: [
        { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.germany.label', id: 'EU_DE' },
        { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.sydney.label', id: 'AU_SYD' },
        { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-east.label', id: 'US_EAST' },
        { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-south.label', id: 'US_SOUTH' },
        { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.uk.label', id: 'EU_GB' }
    ]
};

class ServicesProviderRegionAdminComponent {
    constructor(translateService, rxSystemConfigurationService, rxNotificationService) {
        this.translateService = translateService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.rxNotificationService = rxNotificationService;
        this.isSaveInProgress = false;
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.regionOptions = RX_SERVICES_PROVIDER_REGION.regionOptions.map((region) => (Object.assign(Object.assign({}, region), { name: this.translateService.instant(region.name) })));
        this.optionFormatter = (regionNameOption) => {
            return get(regionNameOption, 'name', this.defaultSelection);
        };
    }
    ngOnInit() {
        this.servicesProviderRegionForm = new FormGroup({
            region: new FormControl('')
        });
        this.rxSystemConfigurationService
            .getConfiguration(RX_SERVICES_PROVIDER_REGION.connections.cognitiveAdminCredential)
            .subscribe((result) => {
            const cognitiveAdminCredential = JSON.parse(result.value);
            this.servicesProviderRegionForm.get('region').setValue([
                find(this.regionOptions, {
                    id: cognitiveAdminCredential[RX_SERVICES_PROVIDER_REGION.providers.watson].cognitiveAdminRegionName
                })
            ]);
        });
    }
    save() {
        this.isSaveInProgress = true;
        const payload = {
            [RX_SERVICES_PROVIDER_REGION.providers.watson]: {
                cognitiveAdminRegionName: this.servicesProviderRegionForm.get('region').value[0].id
            }
        };
        this.rxSystemConfigurationService
            .setConfiguration(RX_SERVICES_PROVIDER_REGION.connections.cognitiveAdminCredential, payload)
            .subscribe((response) => {
            this.isSaveInProgress = false;
            this.servicesProviderRegionForm.markAsPristine();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.services-provider-region.saved.message'));
        }, (error) => {
            this.isSaveInProgress = false;
        });
    }
    canSave() {
        return !this.isSaveInProgress && this.servicesProviderRegionForm.valid && this.servicesProviderRegionForm.dirty;
    }
}
ServicesProviderRegionAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionAdminComponent, deps: [{ token: i4.TranslateService }, { token: i2.RxSystemConfigurationService }, { token: i2.RxNotificationService }], target: i0.ɵɵFactoryTarget.Component });
ServicesProviderRegionAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServicesProviderRegionAdminComponent, selector: "rx-admin-services-provider-region", ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.services-provider-region.header.title' | translate }}\">\n  <form [formGroup]=\"servicesProviderRegionForm\">\n    <adapt-rx-select\n      [options]=\"regionOptions\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.services-provider-region.region.label' | translate }}\"\n      name=\"region\"\n      [optionFormatter]=\"optionFormatter\"\n      formControlName=\"region\"\n      rx-id=\"region\"\n      class=\"form-group d-block\"\n      required\n    ></adapt-rx-select>\n\n    <button adapt-button btn-type=\"primary\" type=\"button\" rx-id=\"save-button\" (click)=\"save()\" [disabled]=\"!canSave()\">\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-services-provider-region',
                    templateUrl: './services-provider-region.component.html',
                    styleUrls: ['./services-provider-region.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i4.TranslateService }, { type: i2.RxSystemConfigurationService }, { type: i2.RxNotificationService }]; } });

class ServicesProviderRegionRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-services-provider-region',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServicesProviderRegionAdminComponent),
            name: 'Services provider region',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ServicesProviderRegionRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ServicesProviderRegionRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionRegistrationModule, declarations: [ServicesProviderRegionAdminComponent], imports: [CommonModule,
        ReactiveFormsModule,
        AdaptRxSelectModule,
        TranslateModule,
        AdminSettingsModule,
        AdaptButtonModule] });
ServicesProviderRegionRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionRegistrationModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            AdaptRxSelectModule,
            TranslateModule,
            AdminSettingsModule,
            AdaptButtonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ServicesProviderRegionRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ServicesProviderRegionAdminComponent],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        AdaptRxSelectModule,
                        TranslateModule,
                        AdminSettingsModule,
                        AdaptButtonModule
                    ],
                    entryComponents: [ServicesProviderRegionAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_SUMMARIZATION_SERVICE = {
    connections: {
        summarizationServiceEndpointConfiguration: 'summarizationServiceEndpointConfiguration'
    },
    summarizationRepository: 'NATIVE'
};

class SummarizationServiceAdminComponent extends BaseViewComponent {
    constructor(translateService, rxCommandFactoryService, rxSystemConfigurationService, rxNotificationService, rxCurrentUserService) {
        super();
        this.translateService = translateService;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.rxNotificationService = rxNotificationService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
        this.isSaveInProgress = false;
        this.isAdministrator = this.rxCurrentUserService.isAdministrator();
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.summarizationServiceForm.dirty
        });
        this.summarizationServiceForm = new FormGroup({
            endpoint: new FormControl(''),
            username: new FormControl(''),
            password: new FormControl('')
        });
        this.rxSystemConfigurationService
            .getConfiguration(RX_SUMMARIZATION_SERVICE.connections.summarizationServiceEndpointConfiguration)
            .subscribe((result) => {
            const summarizationConfiguration = JSON.parse(result.value)[RX_SUMMARIZATION_SERVICE.summarizationRepository];
            this.summarizationServiceForm.get('endpoint').setValue(summarizationConfiguration.endpoint);
            this.summarizationServiceForm.get('username').setValue(summarizationConfiguration.username);
            this.summarizationServiceForm.get('password').setValue(summarizationConfiguration.username);
        });
        this.summarizationServiceForm.valueChanges
            .pipe(takeUntil(this.destroyed$))
            .subscribe((value) => this.resetConnectionTest());
    }
    resetConnectionTest() {
        this.connectionTestStatus =
            this.summarizationServiceForm.valid && this.summarizationServiceForm.dirty
                ? ConnectionTestStatus.Unknown
                : ConnectionTestStatus.Invalid;
    }
    onTestConnection() {
        this.rxCommandFactoryService
            .forResourceType('com.bmc.arsys.rx.application.cognitive.command.PingSummarizationServiceCommand')
            .execute(this.summarizationServiceForm.value)
            .pipe(catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    save() {
        this.isSaveInProgress = true;
        this.rxSystemConfigurationService
            .setConfiguration(RX_SUMMARIZATION_SERVICE.connections.summarizationServiceEndpointConfiguration, {
            [RX_SUMMARIZATION_SERVICE.summarizationRepository]: this.summarizationServiceForm.value
        })
            .subscribe((response) => {
            this.isSaveInProgress = false;
            this.summarizationServiceForm.markAsPristine();
            this.resetConnectionTest();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-service.saved.message'));
        }, (error) => {
            this.isSaveInProgress = false;
        });
    }
    isSaveButtonDisabled() {
        return (this.summarizationServiceForm.pristine ||
            this.summarizationServiceForm.invalid ||
            this.connectionTestStatus !== ConnectionTestStatus.Passed ||
            this.isSaveInProgress);
    }
}
SummarizationServiceAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceAdminComponent, deps: [{ token: i4.TranslateService }, { token: i2.RxCommandFactoryService }, { token: i2.RxSystemConfigurationService }, { token: i2.RxNotificationService }, { token: i2.RxCurrentUserService }], target: i0.ɵɵFactoryTarget.Component });
SummarizationServiceAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SummarizationServiceAdminComponent, selector: "rx-admin-summarization-service", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-service.header.title' | translate }}\">\n  <form [formGroup]=\"summarizationServiceForm\">\n    <adapt-rx-textfield\n      name=\"endpoint\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-service.api-endpoint-url.title' | translate }}\"\n      rx-id=\"api-endpoint-url\"\n      class=\"form-group d-block\"\n      formControlName=\"endpoint\"\n      required\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      name=\"username\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n      rx-id=\"user-name\"\n      class=\"form-group d-block\"\n      formControlName=\"username\"\n      required\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      name=\"password\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n      rx-id=\"password\"\n      [isPassword]=\"true\"\n      class=\"form-group d-block\"\n      formControlName=\"password\"\n      required\n    >\n    </adapt-rx-textfield>\n    <div class=\"d-flex\" *ngIf=\"isAdministrator\">\n      <rx-connection-tester\n        [status]=\"connectionTestStatus\"\n        buttonType=\"secondary\"\n        rx-id=\"test-connection-button\"\n        (testConnection)=\"onTestConnection()\"\n      >\n      </rx-connection-tester>\n      <button\n        adapt-button\n        type=\"button\"\n        rx-id=\"save-button\"\n        btn-type=\"primary\"\n        class=\"ml-4\"\n        [disabled]=\"isSaveButtonDisabled()\"\n        (click)=\"save()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-summarization-service',
                    templateUrl: './summarization-service.component.html',
                    styleUrls: ['./summarization-service.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i4.TranslateService }, { type: i2.RxCommandFactoryService }, { type: i2.RxSystemConfigurationService }, { type: i2.RxNotificationService }, { type: i2.RxCurrentUserService }]; } });

class SummarizationServiceRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-summarization-service',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(SummarizationServiceAdminComponent),
            name: 'Summarization service',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
SummarizationServiceRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
SummarizationServiceRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceRegistrationModule, declarations: [SummarizationServiceAdminComponent], imports: [CommonModule,
        AdminSettingsModule,
        TranslateModule,
        AdaptRxTextfieldModule,
        ReactiveFormsModule,
        RxConnectionTesterModule,
        AdaptButtonModule] });
SummarizationServiceRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceRegistrationModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            TranslateModule,
            AdaptRxTextfieldModule,
            ReactiveFormsModule,
            RxConnectionTesterModule,
            AdaptButtonModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationServiceRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SummarizationServiceAdminComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        TranslateModule,
                        AdaptRxTextfieldModule,
                        ReactiveFormsModule,
                        RxConnectionTesterModule,
                        AdaptButtonModule
                    ],
                    entryComponents: [SummarizationServiceAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxSummarizationTestingService {
    constructor(httpClient, rxCommandFactoryService) {
        this.httpClient = httpClient;
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.textSummarizationCommand = 'com.bmc.arsys.rx.application.cognitive.command.SummarizeTextCommand';
        this.recordSummarizationCommand = 'com.bmc.arsys.rx.application.cognitive.command.SummarizeFromRecInstCommand';
    }
    getTextSummarization(payload) {
        return this.rxCommandFactoryService.forResourceType(this.textSummarizationCommand).execute(payload);
    }
    getRecordInstanceSummarization(payload) {
        return this.rxCommandFactoryService.forResourceType(this.recordSummarizationCommand).execute(payload);
    }
}
RxSummarizationTestingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSummarizationTestingService, deps: [{ token: i1$2.HttpClient }, { token: i2.RxCommandFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });
RxSummarizationTestingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSummarizationTestingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSummarizationTestingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i2.RxCommandFactoryService }]; } });

class SummarizationTestingAdminComponent {
    constructor(formBuilder, rxSummarizationTestingService, rxNotificationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, adaptDockedPanelService, rxSystemConfigurationService, rxJsonParserService, translateService) {
        this.formBuilder = formBuilder;
        this.rxSummarizationTestingService = rxSummarizationTestingService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        this.adaptDockedPanelService = adaptDockedPanelService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.rxJsonParserService = rxJsonParserService;
        this.translateService = translateService;
        this.textInputFieldOptions = [];
        this.summaryOutputFieldOptions = [];
        this.shouldShowGrid = false;
        this.dataSourceOptions = ['Email', 'Chat', 'Other'];
        this.index = 0;
        this.defaultSummarizationPercentage = 50;
        this.isSummarizationInProgress = false;
        this.isRecordSummarizationInProgress = false;
        this.disableContent = {
            variant: 'danger',
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.summarization-service-disabled.message'),
            content: '',
            dismissible: false
        };
        this.recordDefinition = {
            fieldDefinitions: []
        };
        this.recordDefinitionPickerOptions = {
            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.record-definition.label'),
            definitionType: RxDefinitionPickerType.RegularRecord,
            required: true
        };
    }
    /*ngAfterViewInit(): void {
      this.dockedPanelId = this.adaptDockedPanelService.register({
        title: this.translateService.instant(
          'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-details.label'
        ),
        content: this.viewSummarizationDetailsTemplate,
        size: 'lg'
      });
    }*/
    ngOnInit() {
        this.interactiveSummarizationTestingForm = this.createInteractiveSummarizationTestingForm();
        this.recordSummarizationTestingForm = this.createRecordSummarizationTestingForm();
        this.shouldShowGrid = true;
        this.rxSystemConfigurationService
            .getConfiguration('summarizationServiceTenantConfiguration')
            .subscribe((response) => {
            const summarizationConfiguration = this.rxJsonParserService.tryParseJson(response.value);
            this.defaultSummarizationPercentage =
                summarizationConfiguration['summarizationPercentage'] || this.defaultSummarizationPercentage;
            if (summarizationConfiguration) {
                this.isSummarizationServiceDisabled = !summarizationConfiguration['enableSummarization'];
                this.interactiveSummarizationTestingForm
                    .get('summarizationPercentage')
                    .setValue(summarizationConfiguration['summarizationPercentage']);
                this.recordSummarizationTestingForm
                    .get('summarizationPercentage')
                    .setValue(summarizationConfiguration['summarizationPercentage']);
            }
        });
        this.updateGridConfig(true);
        this.recordSummarizationTestingForm
            .get('recordDefinition')
            .valueChanges.subscribe((value) => this.onRecordDefinitionChange(value));
        this.recordSummarizationTestingForm
            .get('textInputField')
            .valueChanges.subscribe((value) => this.onTextInputFieldChange(value));
    }
    createInteractiveSummarizationTestingForm() {
        return this.formBuilder.group({
            text: ['', Validators.required],
            source: [[this.dataSourceOptions[0]], Validators.nullValidator],
            summarizationPercentage: [50, Validators.required],
            extractedSummaryText: ''
        });
    }
    createRecordSummarizationTestingForm() {
        return this.formBuilder.group({
            recordDefinition: ['', Validators.required],
            textInputField: [[], Validators.required],
            summaryOutputField: [[], Validators.required],
            source: [[this.dataSourceOptions[0]]],
            summarizationPercentage: [50]
        });
    }
    onRecordDefinitionChange(newRecordDefinitionName) {
        const oldRecordDefinitionName = this.recordSummarizationTestingForm.value.recordDefinition;
        if (newRecordDefinitionName !== oldRecordDefinitionName) {
            this.resetRecordSummarizationTestingForm();
            if (newRecordDefinitionName) {
                this.rxRecordDefinitionCacheService
                    .getRecordDefinition(newRecordDefinitionName)
                    .subscribe((recordDefinition) => {
                    this.initializeFormControls(recordDefinition);
                });
            }
        }
    }
    initializeFormControls(recordDefinition) {
        this.textInputFieldOptions = recordDefinition.fieldDefinitions
            ? recordDefinition.fieldDefinitions
                .filter(function (fieldDefinition) {
                return ((fieldDefinition.fieldOption !== RX_RECORD_DEFINITION.fieldOptions.system &&
                    fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character) ||
                    fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.attachment);
            })
                .map((fieldDefinition) => {
                return {
                    id: fieldDefinition.id,
                    name: fieldDefinition.name,
                    resourceType: fieldDefinition.resourceType
                };
            })
            : [];
        this.summaryOutputFieldOptions = this.textInputFieldOptions.filter((fieldDefinition) => {
            return fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character;
        });
    }
    optionFormatter(option) {
        return option.name;
    }
    onTextInputFieldChange(value) {
        if (value.length) {
            this.recordSummarizationTestingForm.get('summaryOutputField').setValue([]);
            this.summaryOutputFieldOptions = this.textInputFieldOptions.filter((fieldDefinition) => {
                return (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character &&
                    fieldDefinition.id !== value[0].id);
            });
            this.updateGridConfig(false);
        }
    }
    resetRecordSummarizationTestingForm() {
        this.recordSummarizationTestingForm.get('textInputField').reset([]);
        this.recordSummarizationTestingForm.get('summaryOutputField').reset([]);
        this.recordSummarizationTestingForm.get('source').reset([this.dataSourceOptions[0]]);
        this.recordSummarizationTestingForm.get('summarizationPercentage').reset(this.defaultSummarizationPercentage);
        this.updateGridConfig(true);
    }
    summarizeUsingText() {
        this.isSummarizationInProgress = true;
        this.interactiveSummarizationTestingForm.markAsPristine();
        this.rxSummarizationTestingService
            .getTextSummarization(this.transformFormControlData())
            .pipe(catchError((error) => {
            this.isSummarizationInProgress = false;
            return throwError(error);
        }))
            .subscribe((response) => {
            this.interactiveSummarizationTestingForm.get('extractedSummaryText').setValue(response[0]);
            this.rxNotificationService.addSuccessMessage('Summarization completed successfully.');
            this.isSummarizationInProgress = false;
        });
    }
    transformFormControlData() {
        const summarizationRecord = {
            texts: [],
            source: '',
            summarizationPercentage: 0
        };
        summarizationRecord.texts.push(this.interactiveSummarizationTestingForm.get('text').value);
        summarizationRecord.source = this.interactiveSummarizationTestingForm.get('source').value[0];
        summarizationRecord.summarizationPercentage =
            this.interactiveSummarizationTestingForm.get('summarizationPercentage').value;
        return summarizationRecord;
    }
    resetInteractiveSummarizationTestingForm() {
        this.interactiveSummarizationTestingForm.get('text').reset();
        this.interactiveSummarizationTestingForm.get('source').reset([this.dataSourceOptions[0]]);
        this.interactiveSummarizationTestingForm.get('summarizationPercentage').reset(this.defaultSummarizationPercentage);
        this.interactiveSummarizationTestingForm.get('extractedSummaryText').reset('');
    }
    isResetButtonDisabled() {
        return this.interactiveSummarizationTestingForm.pristine || this.interactiveSummarizationTestingForm.invalid;
    }
    getColumns() {
        return [
            {
                index: 0,
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),
                title: 'Text input',
                filterable: false
            }
        ];
    }
    summarizeUsingRecordInstance() {
        this.isRecordSummarizationInProgress = true;
        const recordSummarizationTestingRecord = cloneDeep(this.recordSummarizationTestingForm.value);
        const payload = {
            recordDefinitionName: recordSummarizationTestingRecord.recordDefinition,
            inputFieldId: this.recordSummarizationTestingForm.get('textInputField').value[0].id,
            outputFieldId: this.recordSummarizationTestingForm.get('summaryOutputField').value[0].id,
            source: this.recordSummarizationTestingForm.get('source').value[0],
            summarizationPercentage: this.recordSummarizationTestingForm.get('summarizationPercentage').value
        };
        const observables$ = this.recordGridComponent.api.getSelectedRows().map((row) => {
            payload['recordID'] = row[RX_RECORD_DEFINITION.coreFieldIds.id];
            return this.rxSummarizationTestingService.getRecordInstanceSummarization(payload);
        });
        forkJoin(observables$)
            .pipe(catchError((error) => {
            this.isRecordSummarizationInProgress = false;
            return throwError(error);
        }))
            .subscribe(() => {
            this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: this.recordSummarizationTestingForm.get('recordDefinition').value,
                    queryExpression: this.prepareQueryExpression()
                }
            })
                .subscribe((results) => {
                this.isRecordSummarizationInProgress = false;
                this.summarizedRecords = results;
                this.index = 0;
                // this.adaptDockedPanelService.open(this.dockedPanelId);
                this.adaptDockedPanelService.open({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.summarization-details.label'),
                    content: this.viewSummarizationDetailsTemplate,
                    size: 'lg'
                });
            });
        });
    }
    prepareQueryExpression() {
        let expression = '';
        this.recordGridComponent.api.getSelectedRows().map((row) => {
            if (!isEmpty(expression)) {
                expression += ' OR ';
            }
            expression += `('${RX_RECORD_DEFINITION.coreFieldIds.id}' = "${row[RX_RECORD_DEFINITION.coreFieldIds.id]}")`;
        });
        return expression;
    }
    isSummarizeButtonDisabled() {
        return (this.isRecordSummarizationInProgress ||
            this.recordSummarizationTestingForm.invalid ||
            (this.recordGridComponent.api.getSelectedRows() && !this.recordGridComponent.api.getSelectedRows().length) ||
            this.recordGridComponent.api.getSelectedRows().length > 5);
    }
    previous() {
        this.index--;
    }
    next() {
        this.index++;
    }
    updateGridConfig(isEmptyGridRequired) {
        this.shouldShowGrid = false;
        this.gridConfig = isEmptyGridRequired ? this.createEmptyGridConfiguration() : this.prepareGridConfiguration();
        setTimeout(() => {
            this.shouldShowGrid = true;
        });
    }
    getRecordDefinition() {
        this.recordDefinition.fieldDefinitions = [
            {
                id: RX_RECORD_DEFINITION.coreFieldIds.id,
                resourceType: RX_RECORD_DEFINITION.resourceTypes.character
            }
        ];
        return this.recordDefinition;
    }
    getData(queryParams) {
        if (this.recordSummarizationTestingForm.get('recordDefinition').value) {
            return this.rxRecordInstanceDataPageService
                .post({
                params: Object.assign(Object.assign({}, omit(queryParams, ['searchText'])), { recorddefinition: this.recordSummarizationTestingForm.get('recordDefinition').value })
            })
                .pipe(map$1((result) => {
                result.data = result['data'].filter((recordInstance) => recordInstance[this.recordSummarizationTestingForm.get('textInputField').value[0].id] != null);
                return result;
            }));
        }
        else {
            return this.rxRecordInstanceDataPageService.getEmptyDataPage();
        }
    }
    createEmptyGridConfiguration() {
        return (this.gridConfig = of({
            actionButtons: [],
            getData: (queryParams) => this.rxRecordInstanceDataPageService.getEmptyDataPage(),
            getRecordDefinition: () => of(this.getRecordDefinition()),
            columns: this.getColumns(),
            enableFiltering: true,
            enableRowSelection: RowSelectionMode.Multiple
        }));
    }
    prepareGridConfiguration() {
        const columns = this.getColumns();
        const recordDefinition = this.getRecordDefinition();
        if (this.recordSummarizationTestingForm.get('textInputField').value.length) {
            const textInput = this.recordSummarizationTestingForm.get('textInputField').value[0];
            recordDefinition.fieldDefinitions[0] = {
                id: textInput.id,
                resourceType: textInput.resourceType,
                name: textInput.name
            };
            columns[0] = {
                index: 0,
                fieldId: String(textInput.id),
                title: `Text input:  ${textInput.name}`
            };
        }
        return of({
            actionButtons: [],
            getData: (queryParams) => this.getData(queryParams),
            getRecordDefinition: () => of(recordDefinition),
            columns: columns,
            enableFiltering: true,
            enableRowSelection: RowSelectionMode.Multiple
        });
    }
}
SummarizationTestingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: RxSummarizationTestingService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i3$2.RxRecordInstanceDataPageService }, { token: i1$1.AdaptDockedPanelService }, { token: i2.RxSystemConfigurationService }, { token: i3.RxJsonParserService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
SummarizationTestingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SummarizationTestingAdminComponent, selector: "rx-admin-summarization-testing", viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: ["recordGrid"], descendants: true }, { propertyName: "viewSummarizationDetailsTemplate", first: true, predicate: ["viewSummarizationDetailsTemplate"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.header.title' | translate }}\">\n  <div class=\"row\" *ngIf=\"isSummarizationServiceDisabled; else summarizationTesting\">\n    <div class=\"col-md-12 form-group\">\n      <div class=\"disabled-warning\">\n        <adapt-alert [config]=\"disableContent\"></adapt-alert>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #summarizationTesting>\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <adapt-accordion [multiselect]=\"true\">\n          <adapt-accordion-tab\n            [title]=\"'com.bmc.arsys.rx.client.admin.summarization-testing.interactive-summarization.title' | translate\"\n            [isOpen]=\"true\"\n            rx-id=\"interactive-summarization\"\n          >\n            <form [formGroup]=\"interactiveSummarizationTestingForm\">\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <adapt-rx-select\n                    formControlName=\"source\"\n                    [options]=\"dataSourceOptions\"\n                    name=\"source\"\n                    rx-id=\"data-source\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.data-source.label' | translate }}\"\n                    class=\"form-group d-block\"\n                  >\n                  </adapt-rx-select>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <adapt-rx-textarea\n                    formControlName=\"text\"\n                    rx-id=\"text-input\"\n                    class=\"form-group d-block\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.text-input.label' | translate }}\"\n                    rows=\"10\"\n                  >\n                  </adapt-rx-textarea>\n\n                  <div class=\"d-flex flex-wrap\">\n                    <div class=\"flex-grow-1 mr-2 summarization-percentage\">\n                      <adapt-rx-counter\n                        [formControl]=\"interactiveSummarizationTestingForm.controls.summarizationPercentage\"\n                        label=\"{{\n                          'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.label'\n                            | translate\n                        }}\"\n                        rx-id=\"summarization-percentage\"\n                        required\n                        adaptRange\n                        [min]=\"1\"\n                        [max]=\"50\"\n                        [tooltip]=\"{\n                          iconName: 'question_circle_o',\n                          content:\n                            'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.tooltip'\n                            | translate,\n                          placement: 'top',\n                          popoverMode: true\n                        }\"\n                      ></adapt-rx-counter>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"primary\"\n                        type=\"button\"\n                        rx-id=\"summarize-button\"\n                        class=\"mr-2 button-margin-top\"\n                        (click)=\"summarizeUsingText()\"\n                        [adaptInlineLoader]=\"isSummarizationInProgress\"\n                        [disabled]=\"\n                          interactiveSummarizationTestingForm.pristine || interactiveSummarizationTestingForm.invalid\n                        \"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summarize.button.label' | translate }}\n                      </button>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"secondary\"\n                        type=\"button\"\n                        rx-id=\"reset-button\"\n                        class=\"d-icon-reply button-margin-top\"\n                        (click)=\"resetInteractiveSummarizationTestingForm()\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <adapt-rx-textarea\n                    formControlName=\"extractedSummaryText\"\n                    rx-id=\"summary-output\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summary-output.label' | translate }}\"\n                    disabled=\"true\"\n                    class=\"form-group d-block\"\n                    rows=\"10\"\n                  ></adapt-rx-textarea>\n\n                  <button\n                    adapt-button\n                    btn-type=\"secondary\"\n                    type=\"button\"\n                    rx-id=\"copy-button\"\n                    class=\"mr-2 button-margin-top d-icon-files_copy_o\"\n                    [cdkCopyToClipboard]=\"interactiveSummarizationTestingForm.get('extractedSummaryText').value\"\n                    [disabled]=\"!interactiveSummarizationTestingForm.get('extractedSummaryText').value\"\n                  >\n                    {{ 'com.bmc.arsys.rx.client.common.copy.label' | translate }}\n                  </button>\n                </div>\n              </div>\n            </form>\n          </adapt-accordion-tab>\n\n          <adapt-accordion-tab\n            [title]=\"'com.bmc.arsys.rx.client.admin.summarization-testing.record-summarization.title' | translate\"\n            [isOpen]=\"true\"\n            rx-id=\"record-summarization\"\n          >\n            <form [formGroup]=\"recordSummarizationTestingForm\">\n              <div class=\"row\">\n                <div class=\"col-md-5\">\n                  <adapt-rx-control-label\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-options.label' | translate\n                    }}\"\n                    class=\"mb-2 d-block\"\n                  ></adapt-rx-control-label>\n                  <rx-definition-picker\n                    [options]=\"recordDefinitionPickerOptions\"\n                    formControlName=\"recordDefinition\"\n                    rx-id=\"record-definition\"\n                    required=\"true\"\n                    class=\"form-group d-block\"\n                  >\n                  </rx-definition-picker>\n\n                  <adapt-rx-select\n                    [options]=\"textInputFieldOptions\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.text-input-field.label' | translate\n                    }}\"\n                    name=\"textInputField\"\n                    [optionFormatter]=\"optionFormatter\"\n                    formControlName=\"textInputField\"\n                    rx-id=\"text-input-field\"\n                    class=\"form-group d-block\"\n                    [tooltip]=\"{\n                      iconName: 'question_circle_o',\n                      content:\n                        'com.bmc.arsys.rx.client.admin.summarization-testing.text-input-field.tooltip' | translate,\n                      placement: 'left',\n                      popoverMode: true\n                    }\"\n                  ></adapt-rx-select>\n\n                  <adapt-rx-select\n                    [options]=\"summaryOutputFieldOptions\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.summary-output-field.label' | translate\n                    }}\"\n                    name=\"summaryOutputField\"\n                    [optionFormatter]=\"optionFormatter\"\n                    formControlName=\"summaryOutputField\"\n                    rx-id=\"summary-output-field\"\n                    class=\"form-group d-block\"\n                  ></adapt-rx-select>\n\n                  <adapt-rx-select\n                    formControlName=\"source\"\n                    [options]=\"dataSourceOptions\"\n                    name=\"source\"\n                    rx-id=\"data-source\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.data-source.label' | translate }}\"\n                    class=\"form-group d-block\"\n                  >\n                  </adapt-rx-select>\n\n                  <div class=\"d-flex flex-wrap\">\n                    <div class=\"flex-grow-1 mr-2 summarization-percentage\">\n                      <adapt-rx-counter\n                        [formControl]=\"recordSummarizationTestingForm.controls.summarizationPercentage\"\n                        label=\"{{\n                          'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.label'\n                            | translate\n                        }}\"\n                        rx-id=\"summarization-percentage\"\n                        required\n                        adaptRange\n                        [min]=\"1\"\n                        [max]=\"50\"\n                        [tooltip]=\"{\n                          iconName: 'question_circle_o',\n                          content:\n                            'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.tooltip'\n                            | translate,\n                          placement: 'top',\n                          popoverMode: true\n                        }\"\n                      ></adapt-rx-counter>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"primary\"\n                        type=\"button\"\n                        class=\"mr-2 button-margin-top\"\n                        rx-id=\"summarize-button\"\n                        (click)=\"summarizeUsingRecordInstance()\"\n                        [disabled]=\"isSummarizeButtonDisabled()\"\n                        [adaptInlineLoader]=\"isRecordSummarizationInProgress\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summarize.button.label' | translate }}\n                      </button>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"secondary\"\n                        type=\"button\"\n                        rx-id=\"reset-button\"\n                        class=\"d-icon-reply button-margin-top\"\n                        (click)=\"resetRecordSummarizationTestingForm()\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-7 d-flex flex-column\">\n                  <adapt-alert\n                    [config]=\"{\n                      title: '',\n                      content:\n                        'com.bmc.arsys.rx.client.admin.summarization-testing.select-records-alert.message' | translate,\n                      type: 'inline',\n                      variant: 'info'\n                    }\"\n                    adaptPopover=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.select-records-alert.tooltip' | translate\n                    }}\"\n                  >\n                  </adapt-alert>\n                  <rx-record-grid\n                    rx-id=\"record-grid\"\n                    #recordGrid\n                    [config]=\"gridConfig\"\n                    *ngIf=\"shouldShowGrid\"\n                    class=\"record-summarization-grid form-group\"\n                  ></rx-record-grid>\n                </div>\n              </div>\n            </form>\n          </adapt-accordion-tab>\n        </adapt-accordion>\n      </div>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n\n<ng-template #viewSummarizationDetailsTemplate let-close=\"close\">\n  <div class=\"dp-content\">\n    <div class=\"row pt-4 px-4 pb-1 mr-0\">\n      <div class=\"col-12 form-inline\">\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"secondary\"\n          rx-id=\"previous-button\"\n          class=\"mr-2 d-icon-left-angle_left\"\n          (click)=\"previous()\"\n          [disabled]=\"!index\"\n          size=\"small\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.previous-step.label' | translate }}\n        </button>\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"secondary\"\n          rx-id=\"next-button\"\n          class=\"mr-2 d-icon-right-angle_right\"\n          (click)=\"next()\"\n          [disabled]=\"index === recordGridComponent.api.getSelectedRows().length - 1\"\n          size=\"small\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.next-step.label' | translate }}\n        </button>\n\n        <div class=\"mr-2 pl-3\">\n          Summarization {{ index + 1 }} of {{ recordGridComponent.api.getSelectedRows().length }}\n        </div>\n      </div>\n    </div>\n    <div class=\"dp-body\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <adapt-rx-control-label\n            label=\"{{ 'Text input: ' + recordSummarizationTestingForm.get('textInputField').value[0].name }}\"\n            class=\"form-group\"\n          ></adapt-rx-control-label>\n\n          <div class=\"border-secondary form-group\" rx-id=\"text-input\">\n            {{ summarizedRecords.data[index][recordSummarizationTestingForm.get('textInputField').value[0].id] }}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <adapt-rx-control-label\n            class=\"form-group\"\n            label=\"{{ 'Summary output: ' + recordSummarizationTestingForm.get('summaryOutputField').value[0].name }}\"\n          ></adapt-rx-control-label>\n\n          <div class=\"border-secondary form-group\" rx-id=\"summary-output\">\n            {{ summarizedRecords.data[index][recordSummarizationTestingForm.get('summaryOutputField').value[0].id] }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"dp-footer\">\n      <button type=\"button\" adapt-button (click)=\"close()\" btn-type=\"secondary\" rx-id=\"close-button\">\n        {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".summarized-details{max-height:200px;overflow-y:auto}.record-summarization-grid{height:300px}.button-margin-top{margin-top:1.5rem}.summarization-percentage{max-width:200px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i4$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }, { type: i11.CdkCopyToClipboard, selector: "[cdkCopyToClipboard]", inputs: ["cdkCopyToClipboard", "cdkCopyToClipboardAttempts"], outputs: ["cdkCopyToClipboardCopied"] }, { type: i1$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-summarization-testing',
                    templateUrl: './summarization-testing.component.html',
                    styleUrls: ['./summarization-testing.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: RxSummarizationTestingService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i3$2.RxRecordInstanceDataPageService }, { type: i1$1.AdaptDockedPanelService }, { type: i2.RxSystemConfigurationService }, { type: i3.RxJsonParserService }, { type: i4.TranslateService }]; }, propDecorators: { recordGridComponent: [{
                type: ViewChild,
                args: ['recordGrid']
            }], viewSummarizationDetailsTemplate: [{
                type: ViewChild,
                args: ['viewSummarizationDetailsTemplate', { static: true }]
            }] } });

class SummarizationTestingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-summarization-testing',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(SummarizationTestingAdminComponent),
            name: 'Summarization testing',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
SummarizationTestingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
SummarizationTestingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingRegistrationModule, declarations: [SummarizationTestingAdminComponent], imports: [AdminSettingsModule,
        AdaptAccordionModule,
        AdaptButtonModule,
        AdaptRxTextareaModule,
        AdaptRxSelectModule,
        AdaptRxCounterModule,
        AdaptRxTextfieldModule,
        AdaptRxLabelModule,
        AdaptAlertModule,
        CommonModule,
        ReactiveFormsModule,
        RxDefinitionPickerModule,
        RecordGridModule,
        ClipboardModule,
        AdaptPopoverModule,
        AdaptRxValidatorsModule,
        TranslateModule,
        AdaptBusyModule] });
SummarizationTestingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingRegistrationModule, imports: [[
            AdminSettingsModule,
            AdaptAccordionModule,
            AdaptButtonModule,
            AdaptRxTextareaModule,
            AdaptRxSelectModule,
            AdaptRxCounterModule,
            AdaptRxTextfieldModule,
            AdaptRxLabelModule,
            AdaptAlertModule,
            CommonModule,
            ReactiveFormsModule,
            RxDefinitionPickerModule,
            RecordGridModule,
            ClipboardModule,
            AdaptPopoverModule,
            AdaptRxValidatorsModule,
            TranslateModule,
            AdaptBusyModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SummarizationTestingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SummarizationTestingAdminComponent],
                    imports: [
                        AdminSettingsModule,
                        AdaptAccordionModule,
                        AdaptButtonModule,
                        AdaptRxTextareaModule,
                        AdaptRxSelectModule,
                        AdaptRxCounterModule,
                        AdaptRxTextfieldModule,
                        AdaptRxLabelModule,
                        AdaptAlertModule,
                        CommonModule,
                        ReactiveFormsModule,
                        RxDefinitionPickerModule,
                        RecordGridModule,
                        ClipboardModule,
                        AdaptPopoverModule,
                        AdaptRxValidatorsModule,
                        TranslateModule,
                        AdaptBusyModule
                    ],
                    entryComponents: [SummarizationTestingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_TONE_ANALYSIS_TESTING = {
    languageOptions: [
        { id: 'en', name: 'en' },
        { id: 'fr', name: 'fr' }
    ],
    userEngagementResourceType: 'com.bmc.arsys.rx.application.cognitive.command.AnalyzeCustomerEngagementToneCommand',
    documentEngagementResourceType: 'com.bmc.arsys.rx.application.cognitive.command.AnalyzeTextToneCommand',
    systemSettingKeys: {
        toneScoreThreshold: 'Tone-Score-Threshold'
    }
};

class DocumentToneAnalysisComponent {
    constructor(rxCommandFactoryService, rxSystemConfigurationService) {
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.languageOptions = RX_TONE_ANALYSIS_TESTING.languageOptions;
        this.language = [];
        this.defaultToneScoreThreshold = 0.5;
    }
    ngOnInit() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_TONE_ANALYSIS_TESTING.systemSettingKeys.toneScoreThreshold)
            .pipe(finalize(() => this.reset()))
            .subscribe((data) => {
            this.defaultToneScoreThreshold = data.value ? toNumber(data.value) : 0.5;
        });
    }
    clearDocumentText() {
        this.documentText = null;
    }
    optionFormatter(option) {
        return option.name;
    }
    setDefaultThreshold() {
        this.toneScoreThreshold = this.defaultToneScoreThreshold;
    }
    analyzeTone() {
        this.rxCommandFactoryService
            .forResourceType(RX_TONE_ANALYSIS_TESTING.documentEngagementResourceType)
            .execute({
            resourceType: RX_TONE_ANALYSIS_TESTING.documentEngagementResourceType,
            language: get(this.language[0], 'id'),
            text: this.documentText,
            containsHTML: this.containsHtml,
            sentenceLevelAnalysis: this.includeSentenceLevelAnalysis,
            toneScoreThreshold: this.toneScoreThreshold
        })
            .subscribe((response) => {
            this.extractedToneData = response;
        });
    }
    reset() {
        this.language = [RX_TONE_ANALYSIS_TESTING.languageOptions[0]];
        this.documentText = null;
        this.toneScoreThreshold = this.defaultToneScoreThreshold;
        this.containsHtml = false;
        this.includeSentenceLevelAnalysis = false;
        this.extractedToneData = null;
        this.documentToneAnalysisForm.form.markAsPristine();
    }
    isAnalyzeToneButtonDisabled() {
        return this.documentToneAnalysisForm.pristine || this.documentToneAnalysisForm.invalid;
    }
    isResetButtonDisabled() {
        return this.documentToneAnalysisForm.pristine && isNil(this.documentText);
    }
}
DocumentToneAnalysisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DocumentToneAnalysisComponent, deps: [{ token: i2.RxCommandFactoryService }, { token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
DocumentToneAnalysisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DocumentToneAnalysisComponent, selector: "rx-document-tone-analysis", viewQueries: [{ propertyName: "documentToneAnalysisForm", first: true, predicate: ["documentToneAnalysisForm"], descendants: true, read: NgForm, static: true }], ngImport: i0, template: "<form #documentToneAnalysisForm=\"ngForm\">\n  <div class=\"row mb-4\">\n    <div class=\"col-md-3\">\n      <adapt-rx-select\n        rx-id=\"language\"\n        name=\"language\"\n        [(ngModel)]=\"language\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.language.label' | translate }}\"\n        [options]=\"languageOptions\"\n        [optionFormatter]=\"optionFormatter\"\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"col-md-3 contains-html\">\n      <adapt-rx-checkbox\n        rx-id=\"document-text-contains-html\"\n        name=\"containsHtml\"\n        [(ngModel)]=\"containsHtml\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-text-contains-html.label' | translate\n        }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div class=\"col-md-6\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-tone.label' | translate }}\"\n      ></adapt-rx-control-label>\n      <div class=\"mt-1\">\n        <adapt-badge variant=\"info\" *ngIf=\"!extractedToneData\">\n          {{ 'com.bmc.arsys.rx.client.common.none.label' | translate }}\n        </adapt-badge>\n        <adapt-badge variant=\"info\" class=\"mr-1\" *ngFor=\"let score of extractedToneData?.documentTone?.scores\">\n          <b>{{ score.toneName }}</b> ({{ score.score }})\n        </adapt-badge>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6 form-group\">\n      <button\n        rx-id=\"clear-button\"\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        class=\"p-0 float-right\"\n        (click)=\"clearDocumentText()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n      </button>\n\n      <adapt-rx-textarea\n        rx-id=\"document-text\"\n        name=\"documentText\"\n        [(ngModel)]=\"documentText\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-text.label' | translate }}\"\n        placeholder=\"Type or paste document text here\"\n        [rows]=\"12\"\n        required\n      ></adapt-rx-textarea>\n\n      <div class=\"form-group pt-3\">\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"tertiary\"\n          rx-id=\"set-to-default-button\"\n          class=\"p-0 float-right\"\n          (click)=\"setDefaultThreshold()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.admin.set-to-default.label' | translate }}\n        </button>\n\n        <adapt-rx-counter\n          rx-id=\"tone-score-threshold\"\n          name=\"toneScoreThresholdField\"\n          [(ngModel)]=\"toneScoreThreshold\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.label' | translate }}\"\n          [max]=\"1.0\"\n          [min]=\"0.5\"\n          [step]=\"0.1\"\n          [size]=\"'small'\"\n          adaptRequired\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-counter>\n      </div>\n\n      <div class=\"form-group\">\n        <adapt-rx-switch\n          rx-id=\"include-sentence-level-analysis\"\n          name=\"includeSentenceLevelAnalysis\"\n          [(ngModel)]=\"includeSentenceLevelAnalysis\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.include-sentence-level-analysis.label' | translate\n          }}\"\n        ></adapt-rx-switch>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-12 form-group\">\n          <button\n            class=\"mr-2 d-icon-left-check_adapt\"\n            adapt-button\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"analyze-tone-button\"\n            (click)=\"analyzeTone()\"\n            [disabled]=\"isAnalyzeToneButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.analyze-tone.label' | translate }}\n          </button>\n\n          <button\n            class=\"mr-2 d-icon-left-undo\"\n            adapt-button\n            btn-type=\"secondary\"\n            type=\"button\"\n            rx-id=\"reset-button\"\n            (click)=\"reset()\"\n            [disabled]=\"isResetButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 form-group\">\n      <div rx-id=\"sentences-tone\" name=\"sentenceTone\">\n        <adapt-rx-control-label label=\"Sentences tone\"></adapt-rx-control-label>\n        <div class=\"sentences-tones form-control\">\n          <div class=\"sentences-tone\" *ngFor=\"let sentenceTone of extractedToneData?.sentencesTone\">\n            <div class=\"sentence\">{{ sentenceTone.text }}</div>\n            <div>\n              <adapt-badge class=\"mr-1\" variant=\"info\" *ngFor=\"let score of sentenceTone?.scores\">\n                <b>{{ score.toneName }}</b> ({{ score.score }})</adapt-badge\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select[rx-id=user-language]{max-width:400px;min-width:auto}.sentences-tones{border:1px solid #d6d7d8;height:430px;overflow-y:auto}.sentences-tones .sentences-tone{padding-bottom:10px}.sentences-tones .sentences-tone .sentence:before{content:open-quote}.sentences-tones .sentences-tone .sentence:after{content:close-quote}.contains-html{display:flex;justify-content:center;align-content:center;flex-direction:column;margin-top:1.9%}\n"], components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: DocumentToneAnalysisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-document-tone-analysis',
                    templateUrl: './document-tone-analysis.component.html',
                    styleUrls: ['./document-tone-analysis.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxCommandFactoryService }, { type: i2.RxSystemConfigurationService }]; }, propDecorators: { documentToneAnalysisForm: [{
                type: ViewChild,
                args: ['documentToneAnalysisForm', { static: true, read: NgForm }]
            }] } });

class UserEngagementToneAnalysisComponent {
    constructor(rxCommandFactoryService, rxSystemConfigurationService) {
        this.rxCommandFactoryService = rxCommandFactoryService;
        this.rxSystemConfigurationService = rxSystemConfigurationService;
        this.languageOptions = RX_TONE_ANALYSIS_TESTING.languageOptions;
        this.defaultToneScoreThreshold = 0.5;
    }
    ngOnInit() {
        this.rxSystemConfigurationService
            .getConfiguration(RX_TONE_ANALYSIS_TESTING.systemSettingKeys.toneScoreThreshold)
            .pipe(finalize(() => this.reset()))
            .subscribe((data) => {
            this.defaultToneScoreThreshold = data.value ? toNumber(data.value) : 0.5;
        });
    }
    clearUtterances() {
        this.utterances = null;
    }
    setDefaultThreshold() {
        this.toneScoreThreshold = this.defaultToneScoreThreshold;
    }
    optionFormatter(option) {
        return option.name;
    }
    analyzeTone() {
        const utterances = map(compact(this.utterances.split('\n')), (utterance) => {
            return {
                text: utterance
            };
        });
        this.rxCommandFactoryService
            .forResourceType(RX_TONE_ANALYSIS_TESTING.userEngagementResourceType)
            .execute({
            resourceType: RX_TONE_ANALYSIS_TESTING.userEngagementResourceType,
            language: this.language.id,
            utterances: utterances,
            toneScoreThreshold: this.toneScoreThreshold
        })
            .subscribe((response) => {
            this.utteranceTonesData = response;
        });
    }
    reset() {
        this.toneScoreThreshold = this.defaultToneScoreThreshold;
        this.language = [RX_TONE_ANALYSIS_TESTING.languageOptions[0]];
        this.utterances = null;
        this.utteranceTonesData = null;
        this.userEngagementToneAnalysisForm.form.markAsPristine();
    }
    isAnalyzeToneButtonDisabled() {
        return this.userEngagementToneAnalysisForm.pristine || this.userEngagementToneAnalysisForm.invalid;
    }
    isResetButtonDisabled() {
        return this.userEngagementToneAnalysisForm.pristine && isNil(this.utterances);
    }
}
UserEngagementToneAnalysisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: UserEngagementToneAnalysisComponent, deps: [{ token: i2.RxCommandFactoryService }, { token: i2.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
UserEngagementToneAnalysisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: UserEngagementToneAnalysisComponent, selector: "rx-user-engagement-tone-analysis", viewQueries: [{ propertyName: "userEngagementToneAnalysisForm", first: true, predicate: ["userEngagementToneAnalysisForm"], descendants: true, read: NgForm, static: true }], ngImport: i0, template: "<form #userEngagementToneAnalysisForm=\"ngForm\">\n  <div class=\"row form-group\">\n    <div class=\"col-md-3\">\n      <adapt-rx-select\n        rx-id=\"language\"\n        name=\"language\"\n        [(ngModel)]=\"language\"\n        [options]=\"languageOptions\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.language.label' | translate }}\"\n        [optionFormatter]=\"optionFormatter\"\n      ></adapt-rx-select>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <button\n        rx-id=\"clear-button\"\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        class=\"p-0 float-right\"\n        (click)=\"clearUtterances()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n      </button>\n\n      <adapt-rx-textarea\n        rx-id=\"utterances\"\n        name=\"utterances\"\n        [(ngModel)]=\"utterances\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.label' | translate }}\"\n        placeholder=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.placeholder' | translate }}\"\n        [rows]=\"16\"\n        required\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.tooltip' | translate,\n          placement: 'right',\n          popoverMode: true\n        }\"\n      ></adapt-rx-textarea>\n\n      <div class=\"form-group pt-3\">\n        <button type=\"button\" adapt-button btn-type=\"tertiary\" class=\"p-0 float-right\" (click)=\"setDefaultThreshold()\">\n          {{ 'com.bmc.arsys.rx.client.admin.set-to-default.label' | translate }}\n        </button>\n\n        <adapt-rx-counter\n          rx-id=\"tone-score-threshold\"\n          name=\"toneScoreThreshold\"\n          [(ngModel)]=\"toneScoreThreshold\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.label' | translate }}\"\n          [max]=\"1.0\"\n          [min]=\"0.5\"\n          [step]=\"0.1\"\n          [size]=\"'small'\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-counter>\n      </div>\n\n      <div class=\"my-4\">\n        <button\n          class=\"mr-2 d-icon-left-check_adapt\"\n          adapt-button\n          btn-type=\"primary\"\n          type=\"button\"\n          rx-id=\"analyze-tone-button\"\n          (click)=\"analyzeTone()\"\n          [disabled]=\"isAnalyzeToneButtonDisabled()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.analyze-tone.label' | translate }}\n        </button>\n\n        <button\n          [disabled]=\"true\"\n          class=\"mr-2 d-icon-left-undo\"\n          adapt-button\n          btn-type=\"secondary\"\n          type=\"button\"\n          rx-id=\"reset-button\"\n          (click)=\"reset()\"\n          [disabled]=\"isResetButtonDisabled()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 mb-4\">\n      <div rx-id=\"utterance-tone\" name=\"utteranceTones\">\n        <adapt-rx-control-label\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances-tone.label' | translate }}\"\n        ></adapt-rx-control-label>\n        <div class=\"sentences-tones form-control\">\n          <div class=\"sentences-tone\" *ngFor=\"let sentenceTone of utteranceTonesData?.utterancesTone\">\n            <div class=\"sentence\">{{ sentenceTone.text }}</div>\n            <div>\n              <adapt-badge variant=\"info\" class=\"mr-1\" *ngFor=\"let score of sentenceTone?.scores\">\n                <b>{{ score.toneName }}</b> ({{ score.score }})</adapt-badge\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.sentences-tones{border:1px solid #d6d7d8;height:480px;overflow-y:auto}.sentences-tones .sentences-tone{padding-bottom:10px}.sentences-tones .sentences-tone .sentence:before{content:open-quote}.sentences-tones .sentences-tone .sentence:after{content:close-quote}adapt-rx-select{max-width:400px;min-width:auto}\n"], components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: UserEngagementToneAnalysisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-user-engagement-tone-analysis',
                    templateUrl: './user-engagement-tone-analysis.component.html',
                    styleUrls: ['./user-engagement-tone-analysis.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i2.RxCommandFactoryService }, { type: i2.RxSystemConfigurationService }]; }, propDecorators: { userEngagementToneAnalysisForm: [{
                type: ViewChild,
                args: ['userEngagementToneAnalysisForm', { static: true, read: NgForm }]
            }] } });

class ToneAnalysisTestingAdminComponent {
}
ToneAnalysisTestingAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingAdminComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ToneAnalysisTestingAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ToneAnalysisTestingAdminComponent, selector: "rx-tone-analysis-testing", ngImport: i0, template: "<rx-admin-settings header=\"Tone analysis testing\">\n  <adapt-tabset [fullHeight]=\"true\">\n    <adapt-tab-panel\n      adapt-tab-title=\"{{\n        'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-tone-analysis.title' | translate\n      }}\"\n    >\n      <rx-document-tone-analysis></rx-document-tone-analysis>\n    </adapt-tab-panel>\n    <adapt-tab-panel\n      adapt-tab-title=\"{{\n        'com.bmc.arsys.rx.client.admin.tone-analysis-testing.user-engagement-tone-analysis.title' | translate\n      }}\"\n    >\n      <rx-user-engagement-tone-analysis></rx-user-engagement-tone-analysis>\n    </adapt-tab-panel>\n  </adapt-tabset>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: DocumentToneAnalysisComponent, selector: "rx-document-tone-analysis" }, { type: UserEngagementToneAnalysisComponent, selector: "rx-user-engagement-tone-analysis" }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-tone-analysis-testing',
                    templateUrl: './tone-analysis-testing.component.html'
                }]
        }] });

class ToneAnalysisTestingRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-tone-analysis-testing',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(ToneAnalysisTestingAdminComponent),
            name: 'Tone analysis testing',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
ToneAnalysisTestingRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
ToneAnalysisTestingRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingRegistrationModule, declarations: [ToneAnalysisTestingAdminComponent, DocumentToneAnalysisComponent, UserEngagementToneAnalysisComponent], imports: [AdminSettingsModule,
        AdaptTabsModule,
        AdaptRxSelectModule,
        AdaptRxCheckboxModule,
        AdaptRxTextareaModule,
        AdaptRxTextareaModule,
        AdaptRxLabelModule,
        AdaptRxCounterModule,
        AdaptButtonModule,
        AdaptRxSwitchModule,
        AdaptBadgeModule,
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        TranslateModule] });
ToneAnalysisTestingRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingRegistrationModule, imports: [[
            AdminSettingsModule,
            AdaptTabsModule,
            AdaptRxSelectModule,
            AdaptRxCheckboxModule,
            AdaptRxTextareaModule,
            AdaptRxTextareaModule,
            AdaptRxLabelModule,
            AdaptRxCounterModule,
            AdaptButtonModule,
            AdaptRxSwitchModule,
            AdaptBadgeModule,
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: ToneAnalysisTestingRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ToneAnalysisTestingAdminComponent, DocumentToneAnalysisComponent, UserEngagementToneAnalysisComponent],
                    imports: [
                        AdminSettingsModule,
                        AdaptTabsModule,
                        AdaptRxSelectModule,
                        AdaptRxCheckboxModule,
                        AdaptRxTextareaModule,
                        AdaptRxTextareaModule,
                        AdaptRxLabelModule,
                        AdaptRxCounterModule,
                        AdaptButtonModule,
                        AdaptRxSwitchModule,
                        AdaptBadgeModule,
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        TranslateModule
                    ],
                    entryComponents: [ToneAnalysisTestingAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_VIRTUAL_CHAT_CONFIGURATION = {
    virtualChatConfigName: 'Virtual Chat Configuration',
    virtualChatAdditionalSettingsName: 'Virtual Chat Additional Settings',
    pingLiveChatServiceCommand: 'com.bmc.arsys.rx.application.cognitive.command.PingLiveChatServiceCommand',
    virtualChatConfigurationSaved: 'Live Chat configuration saved successfully.',
    virtualChatVerifyAdministratorKey: 'Unable to retrieve chat topics. Please verify that the Live Chat administrator key is correct.',
    virtualChat: {
        settingNames: {
            url: 'URL',
            userName: 'Username',
            password: 'Password',
            arServerUrl: 'ARServer-URL'
        }
    },
    virtualChatAdditionalSetting: {
        settingNames: {
            adminKey: 'AdminKey',
            company: 'Company'
        }
    }
};

class VirtualChatConfigurationAdminComponent extends BaseViewComponent {
    constructor(formBuilder, rxAdminSettingsService, rxNotificationService, rxModalService, rxCognitiveServiceService, rxLiveAgentSettingsService, translateService) {
        super();
        this.formBuilder = formBuilder;
        this.rxAdminSettingsService = rxAdminSettingsService;
        this.rxNotificationService = rxNotificationService;
        this.rxModalService = rxModalService;
        this.rxCognitiveServiceService = rxCognitiveServiceService;
        this.rxLiveAgentSettingsService = rxLiveAgentSettingsService;
        this.translateService = translateService;
        this.connectionTestStatus = ConnectionTestStatus.Invalid;
        this.isNewVirtualChatSetting = false;
        this.isNewVirtualChatAdditionalSetting = false;
        this.virtualChatComponentSettingsValues = [];
        this.additionalSettingsComponentSettingsValues = [];
    }
    ngOnInit() {
        this.notifyPropertyChanged('api', {
            isDirty: () => this.virtualChatConfigurationForm.dirty || this.virtualChatAdditionalSettingsForm.dirty
        });
        this.virtualChatConfigurationForm = this.formBuilder.group({
            virtualChatUrl: '',
            username: '',
            password: '',
            systemServerUrl: ''
        });
        this.virtualChatAdditionalSettingsForm = this.formBuilder.group({
            administratorKey: '',
            company: ''
        });
        this.busy = forkJoin({
            virtualChatComponentSettings: this.getVirtualChatComponentSettings(),
            additionalSettingsComponentSettings: this.getAdditionalSettingsComponentSettings()
        }).subscribe((response) => {
            this.isNewVirtualChatSetting = !get(response.virtualChatComponentSettings, 'values', []).length;
            this.isNewVirtualChatAdditionalSetting = !get(response.additionalSettingsComponentSettings, 'values', []).length;
            if (this.isNewVirtualChatSetting) {
                this.virtualChatComponentSettingsValues = map(values(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames), (settingName) => ({
                    assigneeGroupPermission: null,
                    componentName: RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName,
                    settingId: null,
                    settingName: settingName,
                    settingValue: null,
                    ownerKeyValue1: null
                }));
            }
            else {
                this.virtualChatComponentSettingsValues = response.virtualChatComponentSettings.values;
            }
            if (this.isNewVirtualChatAdditionalSetting) {
                this.additionalSettingsComponentSettingsValues = map(values(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames), (settingName) => ({
                    assigneeGroupPermission: null,
                    componentName: RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName,
                    ownerKeyValue1: null,
                    settingId: null,
                    settingName: settingName,
                    settingValue: null
                }));
            }
            else {
                this.additionalSettingsComponentSettingsValues = response.additionalSettingsComponentSettings.values;
            }
            this.virtualChatConfigurationForm.patchValue({
                virtualChatUrl: this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.url),
                username: this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.userName),
                password: this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.password),
                systemServerUrl: this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.arServerUrl)
            });
            this.virtualChatAdditionalSettingsForm.patchValue({
                administratorKey: this.getValueFromAdditionalSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.adminKey),
                company: this.getValueFromAdditionalSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.company)
            });
        });
        this.virtualChatConfigurationForm.valueChanges.subscribe(() => {
            this.connectionTestStatus =
                this.virtualChatConfigurationForm.pristine || this.virtualChatConfigurationForm.invalid
                    ? ConnectionTestStatus.Invalid
                    : ConnectionTestStatus.Unknown;
        });
    }
    getVirtualChatComponentSettings() {
        return this.rxAdminSettingsService.getComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName, {
            'default-bundle-scope': RX_APPLICATION.settingsBundleId
        });
    }
    getAdditionalSettingsComponentSettings() {
        return this.rxAdminSettingsService.getComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName, {
            'default-bundle-scope': RX_APPLICATION.settingsBundleId
        });
    }
    getValueFromAdditionalSetting(settingName) {
        return get(find(this.additionalSettingsComponentSettingsValues, {
            settingName
        }), 'settingValue', null);
    }
    getValueFromVirtualSetting(settingName) {
        return get(find(this.virtualChatComponentSettingsValues, {
            settingName
        }), 'settingValue', null);
    }
    onTestConnection() {
        const formValue = this.virtualChatConfigurationForm.getRawValue();
        this.rxCognitiveServiceService
            .testConnection({
            resourceType: RX_VIRTUAL_CHAT_CONFIGURATION.pingLiveChatServiceCommand,
            remedyMidTierUrl: formValue.virtualChatUrl,
            arAdministratorUser: formValue.username,
            arAdministratorPassword: formValue.password,
            arSystemServerUrl: formValue.systemServerUrl
        })
            .pipe(catchError((error) => {
            this.connectionTestStatus = ConnectionTestStatus.Failed;
            return throwError(error);
        }))
            .subscribe(() => {
            this.connectionTestStatus = ConnectionTestStatus.Passed;
        });
    }
    isSaveButtonDisabled() {
        return (this.virtualChatConfigurationForm.pristine ||
            this.virtualChatConfigurationForm.invalid ||
            this.connectionTestStatus !== ConnectionTestStatus.Passed);
    }
    setVirtualSettingValue(settingName, value) {
        find(this.virtualChatComponentSettingsValues, {
            settingName
        }).settingValue = value;
    }
    saveVirtualChatConfig() {
        let adminSetting$;
        const formValue = this.virtualChatConfigurationForm.getRawValue();
        this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.url, formValue.virtualChatUrl);
        this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.userName, formValue.username);
        this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.password, formValue.password);
        this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.arServerUrl, formValue.systemServerUrl);
        if (this.isNewVirtualChatSetting) {
            adminSetting$ = this.rxAdminSettingsService
                .createComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName, this.virtualChatComponentSettingsValues)
                .pipe(switchMap(() => this.getVirtualChatComponentSettings()), tap((response) => {
                this.isNewVirtualChatSetting = false;
                this.virtualChatComponentSettingsValues = response.values;
            }));
        }
        else {
            adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(`${RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName}/${this.virtualChatComponentSettingsValues[0].ownerKeyValue1}`, this.virtualChatComponentSettingsValues);
        }
        this.busy = adminSetting$.subscribe(() => {
            this.rxNotificationService.addSuccessMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigurationSaved);
            this.connectionTestStatus = ConnectionTestStatus.Invalid;
            this.virtualChatConfigurationForm.markAsPristine();
            this.rxLiveAgentSettingsService.getAvailableTopics();
        });
    }
    setAdditionalSettingValue(settingName, value) {
        find(this.additionalSettingsComponentSettingsValues, {
            settingName
        }).settingValue = value;
    }
    saveAdditionalSettings() {
        let adminSetting$;
        const formValue = this.virtualChatAdditionalSettingsForm.getRawValue();
        this.setAdditionalSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.adminKey, formValue.administratorKey);
        this.setAdditionalSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.company, formValue.company);
        if (this.isNewVirtualChatAdditionalSetting) {
            adminSetting$ = this.rxAdminSettingsService
                .createComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName, this.additionalSettingsComponentSettingsValues)
                .pipe(switchMap(() => this.getAdditionalSettingsComponentSettings()), tap((response) => {
                this.isNewVirtualChatAdditionalSetting = false;
                this.additionalSettingsComponentSettingsValues = response.values;
            }));
        }
        else {
            adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(`${RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName}/${this.additionalSettingsComponentSettingsValues[0].ownerKeyValue1}`, this.additionalSettingsComponentSettingsValues);
        }
        this.busy = adminSetting$.subscribe(() => {
            this.virtualChatAdditionalSettingsForm.markAsPristine();
            this.rxNotificationService.addSuccessMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigurationSaved);
            this.rxLiveAgentSettingsService.getAvailableTopics().subscribe((topics) => {
                if (isEmpty(topics)) {
                    this.rxNotificationService.addWarningMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatVerifyAdministratorKey);
                }
            });
        });
    }
}
VirtualChatConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i2.RxAdminSettingsService }, { token: i2.RxNotificationService }, { token: i1.RxModalService }, { token: RxCognitiveServiceService }, { token: i2.RxLiveAgentSettingsService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
VirtualChatConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: VirtualChatConfigurationAdminComponent, selector: "rx-admin-virtual-chat-configuration", usesInheritance: true, ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.virtual-chat-configuration.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form [formGroup]=\"virtualChatConfigurationForm\">\n      <adapt-accordion-tab title=\"Authentication\" isOpen=\"true\" rx-id=\"authentication\">\n        <adapt-rx-textfield\n          rx-id=\"virtual-chat-url\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.bmc-remedy-virtual-chat-api-endpoint-url.label'\n              | translate\n          }}\"\n          formControlName=\"virtualChatUrl\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"administrator-user\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-administrator-user.label' | translate }}\"\n          formControlName=\"username\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"administrator-password\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-administrator-password.label' | translate\n          }}\"\n          formControlName=\"password\"\n          maxlength=\"254\"\n          required=\"true\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"system-server-url\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-system-server-api-endpoint-url.label' | translate\n          }}\"\n          formControlName=\"systemServerUrl\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n\n        <div class=\"d-flex justify-content-start\">\n          <rx-connection-tester\n            buttonType=\"secondary\"\n            [status]=\"connectionTestStatus\"\n            (testConnection)=\"onTestConnection()\"\n            rx-id=\"virtual-chat-configuration-test-button\"\n          ></rx-connection-tester>\n          <button\n            adapt-button\n            class=\"ml-4 mr-2\"\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"save-button\"\n            [disabled]=\"isSaveButtonDisabled()\"\n            (click)=\"saveVirtualChatConfig()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n          </button>\n        </div>\n      </adapt-accordion-tab>\n    </form>\n\n    <form [formGroup]=\"virtualChatAdditionalSettingsForm\">\n      <adapt-accordion-tab title=\"Additional settings\" rx-id=\"additional-settings\" class=\"d-block\">\n        <adapt-rx-textfield\n          rx-id=\"administrator-key\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.administrator-key.label' | translate }}\"\n          formControlName=\"administratorKey\"\n          class=\"d-block form-group\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.virtual-chat-configuration.administrator-key.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield rx-id=\"company\" label=\"Company\" formControlName=\"company\" class=\"d-block form-group\">\n        </adapt-rx-textfield>\n\n        <div class=\"d-flex justify-content-start\">\n          <button\n            adapt-button\n            class=\"mr-2\"\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"additional-settings-save-button\"\n            [disabled]=\"virtualChatAdditionalSettingsForm.pristine || virtualChatAdditionalSettingsForm.invalid\"\n            (click)=\"saveAdditionalSettings()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n          </button>\n        </div>\n      </adapt-accordion-tab>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-virtual-chat-configuration',
                    templateUrl: './virtual-chat-configuration.component.html',
                    styleUrls: ['./virtual-chat-configuration.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i2.RxAdminSettingsService }, { type: i2.RxNotificationService }, { type: i1.RxModalService }, { type: RxCognitiveServiceService }, { type: i2.RxLiveAgentSettingsService }, { type: i4.TranslateService }]; } });

class VirtualChatConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-virtual-chat-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(VirtualChatConfigurationAdminComponent),
            name: 'Virtual Chat configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
VirtualChatConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
VirtualChatConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationRegistrationModule, declarations: [VirtualChatConfigurationAdminComponent], imports: [AdaptAccordionModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        AdminSettingsModule,
        CommonModule,
        ReactiveFormsModule,
        RxConnectionTesterModule,
        TranslateModule] });
VirtualChatConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationRegistrationModule, imports: [[
            AdaptAccordionModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            AdminSettingsModule,
            CommonModule,
            ReactiveFormsModule,
            RxConnectionTesterModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: VirtualChatConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [VirtualChatConfigurationAdminComponent],
                    imports: [
                        AdaptAccordionModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        AdminSettingsModule,
                        CommonModule,
                        ReactiveFormsModule,
                        RxConnectionTesterModule,
                        TranslateModule
                    ],
                    entryComponents: [VirtualChatConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const fieldIds = {
    hostname: 70030,
    port: 70031,
    protocol: 70032,
    authType: 70033,
    authentication: 70034
};
const authTypes = {
    basicAuth: 0,
    oAuth2: 1,
    rsso: 2,
    custom: 3,
    remedy: 11,
    oAuthTokenExchange: 12
};
const protocolTypes = {
    http: 0,
    https: 1
};
const protocolTypeOptions = [
    {
        id: protocolTypes.http,
        label: 'HTTP'
    },
    {
        id: protocolTypes.https,
        label: 'HTTPS'
    }
];
const grantTypeOptions = [
    {
        id: 0,
        label: 'client_credentials'
    }
];
const authTypeOptions = [
    {
        id: authTypes.basicAuth,
        label: 'Basic'
    },
    {
        id: authTypes.oAuth2,
        label: 'OAuth 2.0'
    },
    {
        id: authTypes.rsso,
        label: 'RSSO'
    },
    {
        id: authTypes.custom,
        label: 'Custom'
    },
    {
        id: authTypes.remedy,
        label: 'Remedy'
    },
    {
        id: authTypes.oAuthTokenExchange,
        label: 'OAuth token exchange'
    }
];
const webApiConnection = {
    authTypeCode: '',
    secure: '',
    name: '',
    hostname: '',
    port: '',
    authTypeDetails: {
        username: '',
        credentials: '',
        httpHeaders: [],
        queryParams: [],
        tokenFetchMechanism: 0,
        additionalFormParams: []
    }
};
const wizardSteps = [
    {
        title: 'General',
        fields: [
            {
                type: 'text',
                name: 'name',
                label: 'com.bmc.arsys.rx.client.common.name.label',
                rxId: 'name',
                required: true
            },
            {
                type: 'text',
                name: 'hostname',
                label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label',
                rxId: 'host-name',
                required: true
            },
            {
                type: 'number',
                name: 'port',
                label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label',
                rxId: 'port',
                minValue: 1,
                maxValue: 65535,
                required: true,
                allowScientific: false,
                allowIntegerOnly: true
            },
            {
                type: 'select',
                name: 'secure',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.protocol.label',
                rxId: 'protocol',
                selectOptions: protocolTypeOptions,
                required: true
            },
            {
                type: 'select',
                name: 'authTypeCode',
                label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label',
                rxId: 'authentication',
                selectOptions: authTypeOptions,
                required: true
            }
        ],
        id: 'General',
        formName: 'generalConfigurationForm',
        isValid: true,
        isDirty: false
    },
    {
        title: 'Authentication',
        fields: [
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                rxId: 'login',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.common.password.label',
                rxId: 'password',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'HTTP headers',
                rxId: 'http-headers',
                required: true
            }
        ],
        id: 'Authentication',
        formName: 'authenticationConfigurationForm',
        isValid: true,
        isDirty: false
    }
];
const authTypeFields = [
    {
        id: authTypes.basicAuth,
        fields: [
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                rxId: 'login',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.common.password.label',
                rxId: 'password',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            }
        ]
    },
    {
        id: authTypes.oAuth2,
        fields: [
            {
                type: 'select',
                name: 'grantType',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.grant-type.label',
                rxId: 'grant-type',
                selectOptions: grantTypeOptions,
                disabled: false,
                required: true
            },
            {
                type: 'text',
                name: 'tokenPath',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                rxId: 'access-token-url',
                required: true
            },
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'client-id',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'client-secret',
                required: true
            },
            {
                type: 'radio',
                name: 'tokenFetchMechanism',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.client-credentials-transfer-mechanism.label',
                rxId: 'token-fetch-mechanism',
                selectOptions: [
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-request-header.label',
                        value: 0
                    },
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.form-parameters.label',
                        value: 1
                    }
                ]
            },
            {
                type: 'text',
                name: 'redirectUri',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.redirect-uri.label',
                rxId: 'redirect-uri',
                required: false
            },
            {
                type: 'text',
                name: 'scope',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.scope.label',
                rxId: 'scope',
                required: false
            },
            {
                type: 'serverEndpointRadio',
                name: 'authServerEndpoint',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.label',
                rxId: 'auth-server-endpoint',
                selectOptions: [
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                        value: 'Default'
                    },
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                        value: 'Custom'
                    }
                ],
                placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.placeholder',
                referenceFieldName: 'hostname',
                tooltip: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.tooltip',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'additionalFormParams',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-form-parameters.label',
                rxId: 'additional-form-params'
            }
        ]
    },
    {
        id: authTypes.rsso,
        fields: [
            {
                type: 'text',
                name: 'loginName',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                rxId: 'login',
                required: true
            },
            {
                type: 'text',
                name: 'tokenPath',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                rxId: 'access-token-url',
                required: true
            },
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'client-id',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'client-secret',
                required: true
            },
            {
                type: 'serverEndpointRadio',
                name: 'authServerEndpoint',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.rsso-server-endpoint.label',
                rxId: 'auth-server-endpoint',
                referenceFieldName: 'hostname',
                selectOptions: [
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                        value: 'Default'
                    },
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                        value: 'Custom'
                    }
                ],
                placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.rsso-server-endpoint.placeholder',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            }
        ]
    },
    {
        id: authTypes.custom,
        fields: [
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'queryParams',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-query-parameters.label',
                rxId: 'query-parameters',
                required: true
            }
        ]
    },
    {
        id: authTypes.remedy,
        fields: [
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                rxId: 'login',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.common.password.label',
                rxId: 'password',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            }
        ]
    },
    {
        id: authTypes.oAuthTokenExchange,
        fields: [
            {
                type: 'text',
                name: 'loginName',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                rxId: 'login'
            },
            {
                type: 'text',
                name: 'tokenPath',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                rxId: 'access-token-url',
                required: true
            },
            {
                type: 'text',
                name: 'username',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                rxId: 'client-id',
                required: true
            },
            {
                type: 'password',
                name: 'credentials',
                label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                rxId: 'client-secret',
                required: true
            },
            {
                type: 'text',
                name: 'resources',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.resources.label',
                rxId: 'resources',
                required: true,
                isUrl: true
            },
            {
                type: 'serverEndpointRadio',
                name: 'authServerEndpoint',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.oauth-token-exchange-server-endpoint.label',
                rxId: 'auth-server-endpoint',
                referenceFieldName: 'hostname',
                selectOptions: [
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                        value: 'Default'
                    },
                    {
                        label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                        value: 'Custom'
                    }
                ],
                placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.oauth-token-exchange-server-endpoint.placeholder',
                required: true
            },
            {
                type: 'nameValuePairs',
                name: 'httpHeaders',
                label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                rxId: 'http-headers',
                required: true
            }
        ]
    }
];
const authServerEndpoints = {
    default: 'Default',
    custom: 'Custom'
};
const RX_WEB_API_CONNECTIONS = {
    recordDefinitionName: 'WebAPI Connection',
    passwordMask: '********',
    fieldIds: fieldIds,
    wizardContext: {
        wizardSteps,
        webApiConnection,
        isEditMode: false
    },
    protocolTypeOptions,
    authTypes,
    authTypeOptions,
    authTypeFields,
    grantTypeOptions,
    authServerEndpoints
};

class WebApiConnectionWizardStepFieldsComponent {
    constructor(rxUrlUtilsService, translateService) {
        this.rxUrlUtilsService = rxUrlUtilsService;
        this.translateService = translateService;
        this.selectionChange = new EventEmitter();
        this.formStatusChange = new EventEmitter();
        this.destroyed$ = new ReplaySubject(1);
        this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
        this.optionFormatter = (option) => {
            return get(option, 'label', this.defaultSelection);
        };
    }
    onRadioButtonChange(event, field) {
        if (event.startsWith(RX_WEB_API_CONNECTIONS.authServerEndpoints.default)) {
            this.stepDetails[field.name] = null;
        }
    }
    getSelectionValue(selectedValue, field) {
        return this.translateService.instant(selectedValue.label, {
            hostName: this.webApiConnection[field.referenceFieldName]
        });
    }
    validate(field) {
        return (control) => {
            let result = null;
            if (field.isUrl && control.value) {
                const urls = control.value.split(/[,;]/);
                if (some(urls, (url) => !this.rxUrlUtilsService.isValidUrl(url, true))) {
                    result = { invalidUrl: { message: 'Invalid URL.' } };
                }
            }
            return result;
        };
    }
    ngOnInit() {
        this.authEndpoint = this.stepDetails['authServerEndpoint']
            ? RX_WEB_API_CONNECTIONS.authServerEndpoints.custom
            : RX_WEB_API_CONNECTIONS.authServerEndpoints.default;
        this.configurationForm.statusChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe((value) => {
            this.step.isValid = value === 'VALID';
            this.formStatusChange.emit();
        });
        this.configurationForm.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe((value) => {
            this.step.isDirty = !this.configurationForm.pristine;
            this.formStatusChange.emit();
        });
    }
    ngOnDestroy() {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    }
}
WebApiConnectionWizardStepFieldsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionWizardStepFieldsComponent, deps: [{ token: i3.RxUrlUtilsService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
WebApiConnectionWizardStepFieldsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: { step: "step", webApiConnection: "webApiConnection", stepDetails: "stepDetails" }, outputs: { selectionChange: "selectionChange", formStatusChange: "formStatusChange" }, viewQueries: [{ propertyName: "configurationForm", first: true, predicate: ["configurationForm"], descendants: true, read: NgForm, static: true }], ngImport: i0, template: "<form [name]=\"step.formName\" #configurationForm=\"ngForm\">\n  <ng-container *ngFor=\"let field of step.fields\">\n    <adapt-rx-select\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      rx-id=\"field.rxId\"\n      [options]=\"field.selectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      *ngIf=\"field.type === 'select'\"\n      [disabled]=\"field.disabled\"\n      (ngModelChange)=\"selectionChange.emit({ selection: $event, fieldName: field.name })\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      *ngIf=\"field.type === 'text' || field.type === 'password'\"\n      [isPassword]=\"field.type === 'password'\"\n      [placeholder]=\"field.placeholder\"\n      [rxCustomValidators]=\"validate(field)\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-counter\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      [adaptMin]=\"field.minValue\"\n      [adaptMax]=\"field.maxValue\"\n      *ngIf=\"field.type === 'number' && field.allowIntegerOnly\"\n      [placeholder]=\"field.placeholder\"\n      adaptIntegerNumber\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      [adaptMin]=\"field.minValue\"\n      [adaptMax]=\"field.maxValue\"\n      *ngIf=\"field.type === 'number' && field.allowScientific\"\n      [placeholder]=\"field.placeholder\"\n      adaptScientificNumber\n    >\n    </adapt-rx-counter>\n\n    <rx-name-value-pairs-editor\n      addButtonLabel=\"{{ field.label | translate }}\"\n      *ngIf=\"field.type === 'nameValuePairs'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [name]=\"field.name\"\n    >\n    </rx-name-value-pairs-editor>\n\n    <adapt-rx-radiobutton-group\n      *ngIf=\"field.type === 'radio'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n    >\n      <adapt-rx-radiobutton\n        *ngFor=\"let selectionValue of field.selectOptions\"\n        [value]=\"selectionValue.value\"\n        [label]=\"getSelectionValue(selectionValue, field)\"\n      >\n      </adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-radiobutton-group\n      *ngIf=\"field.type === 'serverEndpointRadio'\"\n      [(ngModel)]=\"authEndpoint\"\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: field.tooltip | translate,\n        placement: 'auto',\n        popoverMode: true\n      }\"\n      (ngModelChange)=\"onRadioButtonChange($event, field)\"\n    >\n      <adapt-rx-radiobutton\n        *ngFor=\"let selectionValue of field.selectOptions\"\n        [value]=\"selectionValue.value\"\n        [label]=\"getSelectionValue(selectionValue, field)\"\n      >\n      </adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-textfield\n      name=\"url\"\n      *ngIf=\"field.type === 'serverEndpointRadio'\"\n      [disabled]=\"authEndpoint != 'Custom'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [placeholder]=\"field.placeholder | translate\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n  </ng-container>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-textfield,adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1.RxNameValuePairsEditorComponent, selector: "rx-name-value-pairs-editor", inputs: ["addButtonLabel"] }, { type: i1$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }, { type: i1$1.AdaptScientificNumberValidatorDirective, selector: "[adaptScientificNumber][ngModel], [adaptScientificNumber][formControl]", inputs: ["adaptScientificNumberMessageFn"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionWizardStepFieldsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-web-api-connection-wizard-step-fields',
                    templateUrl: './web-api-connection-wizard-step-fields.component.html',
                    styleUrls: ['./web-api-connection-wizard-step-fields.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i3.RxUrlUtilsService }, { type: i4.TranslateService }]; }, propDecorators: { step: [{
                type: Input
            }], webApiConnection: [{
                type: Input
            }], configurationForm: [{
                type: ViewChild,
                args: ['configurationForm', { read: NgForm, static: true }]
            }], selectionChange: [{
                type: Output
            }], formStatusChange: [{
                type: Output
            }], stepDetails: [{
                type: Input
            }] } });

class AuthenticationWizardStepComponent {
    constructor(rxWizardModalComponent) {
        this.rxWizardModalComponent = rxWizardModalComponent;
        this.context$ = this.rxWizardModalComponent.context$;
        this.isSaveButtonDisabled$ = this.rxWizardModalComponent.context$.pipe(map$1((context) => {
            const isDirty = some(context.wizardSteps, { isDirty: true });
            return some(context.wizardSteps, { isValid: false }) || !isDirty;
        }));
    }
    onFormStatusChange() {
        this.isSaveButtonDisabled$.pipe(take(1)).subscribe((isSaveButtonDisabled) => {
            if (isSaveButtonDisabled) {
                this.rxWizardModalComponent.api.disableFinishButton();
            }
            else {
                this.rxWizardModalComponent.api.enableFinishButton();
            }
        });
    }
}
AuthenticationWizardStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AuthenticationWizardStepComponent, deps: [{ token: i4$1.RxWizardModalComponent }], target: i0.ɵɵFactoryTarget.Component });
AuthenticationWizardStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AuthenticationWizardStepComponent, selector: "rx-authentication-wizard-step", ngImport: i0, template: "<ng-container *ngIf=\"context$ | async as context\">\n  <rx-web-api-connection-wizard-step-fields\n    [step]=\"context.wizardSteps[1]\"\n    [stepDetails]=\"context.webApiConnection.authTypeDetails\"\n    (formStatusChange)=\"onFormStatusChange()\"\n    [webApiConnection]=\"context.webApiConnection\"\n  >\n  </rx-web-api-connection-wizard-step-fields>\n</ng-container>\n", components: [{ type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: ["step", "webApiConnection", "stepDetails"], outputs: ["selectionChange", "formStatusChange"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AuthenticationWizardStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-authentication-wizard-step',
                    templateUrl: './authentication-wizard-step.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i4$1.RxWizardModalComponent }]; } });

class GeneralWizardStepComponent {
    constructor(rxWizardModalComponent) {
        this.rxWizardModalComponent = rxWizardModalComponent;
        this.context$ = this.rxWizardModalComponent.context$;
    }
    ngOnInit() {
        this.context$.pipe(take(1)).subscribe((context) => {
            if (context.isEditMode) {
                this.rxWizardModalComponent.api.enableNextButton();
                this.savedAuthTypeCode = context.webApiConnection.authTypeCode;
                this.savedAuthTypeDetails = context.webApiConnection.authTypeDetails;
            }
        });
    }
    onSelectionChange(selection) {
        this.context$.pipe(take(1)).subscribe((context) => {
            if (selection['fieldName'] === 'authTypeCode') {
                const authTypeId = selection['selection'][0].id;
                const newWizardSteps = cloneDeep(context.wizardSteps);
                newWizardSteps[1].fields = find(RX_WEB_API_CONNECTIONS.authTypeFields, { id: authTypeId }).fields;
                this.rxWizardModalComponent.api.updateContext({
                    wizardSteps: newWizardSteps
                });
                if (this.savedAuthTypeCode && isEqual(selection['selection'][0], this.savedAuthTypeCode[0])) {
                    this.rxWizardModalComponent.api.updateContext({
                        webApiConnection: this.savedAuthTypeDetails
                    });
                }
                else {
                    const newWebApiConnection = cloneDeep(context.webApiConnection);
                    newWebApiConnection.authTypeDetails = {
                        username: '',
                        credentials: '',
                        httpHeaders: [],
                        queryParams: [],
                        tokenFetchMechanism: 0,
                        additionalFormParams: [],
                        grantType: [RX_WEB_API_CONNECTIONS.grantTypeOptions[0]]
                    };
                    this.rxWizardModalComponent.api.updateContext({
                        webApiConnection: newWebApiConnection
                    });
                }
            }
        });
    }
    onFormStatusChange() {
        this.rxWizardModalComponent.context$.pipe(take(1)).subscribe((context) => {
            if (context.wizardSteps[0].isValid) {
                this.rxWizardModalComponent.api.enableNextButton();
                if (context.wizardSteps[0].isDirty && context.isEditMode) {
                    this.rxWizardModalComponent.api.enableFinishButton();
                }
            }
            else {
                this.rxWizardModalComponent.api.disableNextButton();
            }
            if (context.wizardSteps[0].isDirty) {
                this.rxWizardModalComponent.api.markDirty();
            }
        });
    }
}
GeneralWizardStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: GeneralWizardStepComponent, deps: [{ token: i4$1.RxWizardModalComponent }], target: i0.ɵɵFactoryTarget.Component });
GeneralWizardStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: GeneralWizardStepComponent, selector: "rx-general-wizard-step", ngImport: i0, template: "<ng-container *ngIf=\"context$ | async as context\">\n  <rx-web-api-connection-wizard-step-fields\n    [step]=\"context.wizardSteps[0]\"\n    [stepDetails]=\"context.webApiConnection\"\n    (selectionChange)=\"onSelectionChange($event)\"\n    (formStatusChange)=\"onFormStatusChange()\"\n    [webApiConnection]=\"context.webApiConnection\"\n  >\n  </rx-web-api-connection-wizard-step-fields>\n</ng-container>\n", components: [{ type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: ["step", "webApiConnection", "stepDetails"], outputs: ["selectionChange", "formStatusChange"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: GeneralWizardStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-general-wizard-step',
                    templateUrl: './general-wizard-step.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i4$1.RxWizardModalComponent }]; } });

class RxWebAPIConnectionsService {
    constructor(httpClient, injector, rxViewActionUtilsService) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.rxViewActionUtilsService = rxViewActionUtilsService;
        this.path = '/api/rx/application/webapi/connection';
    }
    getAuthTypeDetails(webApiConnection) {
        const authTypeDetails = cloneDeep(webApiConnection.authTypeDetails);
        if (authTypeDetails.credentials === RX_WEB_API_CONNECTIONS.passwordMask) {
            authTypeDetails.credentials = null;
        }
        delete authTypeDetails.grantType;
        return authTypeDetails;
    }
    save(webApiConnection, id) {
        return this.httpClient.put(this.getUrl(id), this.getWebApiConnectionToSave(webApiConnection));
    }
    create(webApiConnection) {
        return this.httpClient.post(this.path, this.getWebApiConnectionToSave(webApiConnection));
    }
    getWebApiConnectionToSave(webApiConnection) {
        return {
            authTypeCode: webApiConnection.authTypeCode[0].id,
            authTypeDetails: this.getAuthTypeDetails(webApiConnection),
            hostname: webApiConnection.hostname,
            name: webApiConnection.name,
            port: webApiConnection.port,
            secure: webApiConnection.secure[0].id
        };
    }
    getUrl(id) {
        return `${this.path}/${encodeURIComponent(id)}`;
    }
    delete(id) {
        return this.httpClient.delete(this.getUrl(id));
    }
    deleteRecords(recordsApi) {
        const records = castArray(recordsApi.getSelectedRows());
        const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);
        if (recordIds.length) {
            const deleteObservables = recordIds.map((recordId) => this.delete(recordId));
            return forkJoin(deleteObservables);
        }
        return EMPTY;
    }
}
RxWebAPIConnectionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebAPIConnectionsService, deps: [{ token: i1$2.HttpClient }, { token: i0.Injector }, { token: i1$4.RxViewActionUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });
RxWebAPIConnectionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebAPIConnectionsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebAPIConnectionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i0.Injector }, { type: i1$4.RxViewActionUtilsService }]; } });

class WebApiConnectionsAdminComponent {
    constructor(rxModalService, rxCurrentUserService, rxWebAPIConnectionsService, rxNotificationService, rxRecordInstanceService, componentFactoryResolver, rxWizardService, translateService) {
        this.rxModalService = rxModalService;
        this.rxCurrentUserService = rxCurrentUserService;
        this.rxWebAPIConnectionsService = rxWebAPIConnectionsService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxWizardService = rxWizardService;
        this.translateService = translateService;
        this.recordDefinition = {
            fieldDefinitions: [
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.description,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_WEB_API_CONNECTIONS.fieldIds.hostname,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_WEB_API_CONNECTIONS.fieldIds.port,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.integer
                },
                {
                    id: RX_WEB_API_CONNECTIONS.fieldIds.authentication,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        this.gridConfig$ = new Observable((observer) => {
            observer.next({
                recordDefinitionName: RX_WEB_API_CONNECTIONS.recordDefinitionName,
                columns: this.getWebApiConnectionColumns(),
                actionButtons: this.getActionButtons(),
                getRecordDefinition: () => of(this.recordDefinition),
                styles: 'flex-fill'
            });
            observer.complete();
        });
    }
    save() {
        const saveConnection$ = this.isNewConfiguration
            ? this.rxWebAPIConnectionsService.create(this.webApiConnectionWizardContext.webApiConnection)
            : this.rxWebAPIConnectionsService.save(this.webApiConnectionWizardContext.webApiConnection, this.currentRecordInstanceId);
        saveConnection$
            .pipe(catchError((error) => {
            this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.failed-to-save.message'));
            return throwError(error);
        }))
            .subscribe((response) => {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.connection-saved.message'));
            this.webApiConnectionsRecordGrid.api.refresh().subscribe();
        });
    }
    getActionButtons() {
        return [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                iconCls: 'trash',
                actions: [
                    {
                        name: () => {
                            {
                                this.rxModalService
                                    .confirm({
                                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: RX_MODAL.modalStyles.warning,
                                    message: this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.delete-confirmation.message')
                                })
                                    .then((result) => {
                                    if (result)
                                        this.rxWebAPIConnectionsService
                                            .deleteRecords(this.webApiConnectionsRecordGrid.api)
                                            .subscribe((response) => {
                                            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.deleted.message'));
                                            this.webApiConnectionsRecordGrid.api.refresh().subscribe();
                                        });
                                });
                            }
                        }
                    }
                ]
            }
        ];
    }
    getWebApiConnectionColumns() {
        return [
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.description}`,
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, lastActionRow) => this.editWebApiConnection(lastActionRow)
                    }
                ]
            },
            {
                fieldId: `${RX_WEB_API_CONNECTIONS.fieldIds.hostname}`,
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label')
            },
            {
                fieldId: `${RX_WEB_API_CONNECTIONS.fieldIds.port}`,
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label'),
                cellTemplate: this.portCellTemplate
            },
            {
                fieldId: `${RX_WEB_API_CONNECTIONS.fieldIds.authentication}`,
                index: 3,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label'),
                visible: false
            },
            {
                fieldId: `${RX_RECORD_DEFINITION.coreFieldIds.id}`,
                index: 4,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                visible: false
            }
        ];
    }
    resetFields() {
        this.webApiConnectionWizardContext = cloneDeep(RX_WEB_API_CONNECTIONS.wizardContext);
        this.webApiConnectionWizardContext.webApiConnection.authTypeCode = [RX_WEB_API_CONNECTIONS.authTypeOptions[0]];
        this.webApiConnectionWizardContext.webApiConnection.secure = [RX_WEB_API_CONNECTIONS.protocolTypeOptions[0]];
        this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.grantType = [
            RX_WEB_API_CONNECTIONS.grantTypeOptions[0]
        ];
    }
    openWizard(wizardTitle, isEdit) {
        const wizardOptions = {
            title: wizardTitle,
            allowFinish: true,
            finishButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),
            steps: [
                {
                    id: 'general',
                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    componentFactory: this.componentFactoryResolver.resolveComponentFactory(GeneralWizardStepComponent)
                },
                {
                    id: 'authentication',
                    name: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label'),
                    componentFactory: this.componentFactoryResolver.resolveComponentFactory(AuthenticationWizardStepComponent)
                }
            ]
        };
        this.rxWizardService
            .open({
            context: this.webApiConnectionWizardContext,
            options: wizardOptions
        })
            .then((result) => {
            if (isObject(result)) {
                this.save();
            }
        });
    }
    createWebApiConnection() {
        this.resetFields();
        this.isNewConfiguration = true;
        this.openWizard(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.new-web-api-connection.label'), false);
    }
    editWebApiConnection(selectedRecord) {
        this.resetFields();
        this.isNewConfiguration = false;
        this.currentRecordInstanceId = selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id];
        const currentRecordInstance = this.rxRecordInstanceService.get(RX_WEB_API_CONNECTIONS.recordDefinitionName, selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id]);
        currentRecordInstance.subscribe((recordInstance) => {
            const authTypeId = recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.authType].value;
            const authTypeOption = find(RX_WEB_API_CONNECTIONS.authTypeOptions, { id: authTypeId });
            const credentials = JSON.parse(recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.authentication].value);
            const protocolId = recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.protocol].value;
            const protocolOption = find(RX_WEB_API_CONNECTIONS.protocolTypeOptions, { id: protocolId });
            this.webApiConnectionWizardContext.webApiConnection.name =
                recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.description].value;
            this.webApiConnectionWizardContext.webApiConnection.hostname =
                recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.hostname].value;
            this.webApiConnectionWizardContext.webApiConnection.port =
                recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.port].value;
            this.webApiConnectionWizardContext.webApiConnection.secure = [protocolOption];
            this.webApiConnectionWizardContext.webApiConnection.authTypeCode = [authTypeOption];
            this.webApiConnectionWizardContext.wizardSteps[1].fields = find(RX_WEB_API_CONNECTIONS.authTypeFields, {
                id: authTypeId
            }).fields;
            this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.httpHeaders = credentials['httpHeaders'];
            if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuth2) {
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.authServerEndpoint =
                    credentials['authServerEndpoint'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.redirectUri = credentials['redirectUri'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.scope = credentials['scope'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenPath = credentials['tokenPath'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenFetchMechanism =
                    credentials['tokenFetchMechanism'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.additionalFormParams =
                    credentials['additionalFormParams'];
            }
            if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.rsso ||
                authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuthTokenExchange) {
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.loginName = credentials['loginName'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenPath = credentials['tokenPath'];
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.authServerEndpoint =
                    credentials['authServerEndpoint'];
            }
            if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuthTokenExchange) {
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.resources = credentials['resources'];
            }
            if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.custom) {
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.queryParams = credentials['queryParams'];
            }
            else {
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.credentials =
                    RX_WEB_API_CONNECTIONS.passwordMask;
                this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.username = credentials['username'];
            }
            this.webApiConnectionWizardContext.isEditMode = true;
            this.openWizard(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.edit-web-api-connection.label'), true);
        });
    }
}
WebApiConnectionsAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsAdminComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxCurrentUserService }, { token: RxWebAPIConnectionsService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceService }, { token: i0.ComponentFactoryResolver }, { token: i4$1.RxWizardService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
WebApiConnectionsAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiConnectionsAdminComponent, selector: "rx-admin-web-api-connections", viewQueries: [{ propertyName: "webApiConnectionsRecordGrid", first: true, predicate: ["webApiConnectionsRecordGrid"], descendants: true }, { propertyName: "portCellTemplate", first: true, predicate: ["portCellTemplate"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.web-api-connections.header.title' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createWebApiConnection()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n  <rx-record-grid rx-id=\"web-api-grid\" #webApiConnectionsRecordGrid [config]=\"gridConfig$\"> </rx-record-grid>\n\n  <ng-template #portCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n    {{ dataItem[column.field] }}\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-web-api-connections',
                    templateUrl: './web-api-connections.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxCurrentUserService }, { type: RxWebAPIConnectionsService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceService }, { type: i0.ComponentFactoryResolver }, { type: i4$1.RxWizardService }, { type: i4.TranslateService }]; }, propDecorators: { webApiConnectionsRecordGrid: [{
                type: ViewChild,
                args: ['webApiConnectionsRecordGrid', { static: false }]
            }], portCellTemplate: [{
                type: ViewChild,
                args: ['portCellTemplate', { static: true }]
            }] } });

class WebApiConnectionsRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-web-api-connections',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebApiConnectionsAdminComponent),
            name: 'Web API connections',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
WebApiConnectionsRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
WebApiConnectionsRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsRegistrationModule, declarations: [WebApiConnectionsAdminComponent,
        WebApiConnectionWizardStepFieldsComponent,
        GeneralWizardStepComponent,
        AuthenticationWizardStepComponent], imports: [CommonModule,
        FormsModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptAlertModule,
        AdaptButtonModule,
        AdaptRxTextfieldModule,
        AdaptButtonModule,
        AdaptRxSelectModule,
        AdaptTabsModule,
        AdaptRxRadiobuttonModule,
        AdaptRxFormControlModule,
        RxNameValuePairsEditorModule,
        AdaptRxCounterModule,
        RxDirectivesModule,
        TranslateModule] });
WebApiConnectionsRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsRegistrationModule, imports: [[
            CommonModule,
            FormsModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptAlertModule,
            AdaptButtonModule,
            AdaptRxTextfieldModule,
            AdaptButtonModule,
            AdaptRxSelectModule,
            AdaptTabsModule,
            AdaptRxRadiobuttonModule,
            AdaptRxFormControlModule,
            RxNameValuePairsEditorModule,
            AdaptRxCounterModule,
            RxDirectivesModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebApiConnectionsRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        WebApiConnectionsAdminComponent,
                        WebApiConnectionWizardStepFieldsComponent,
                        GeneralWizardStepComponent,
                        AuthenticationWizardStepComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptAlertModule,
                        AdaptButtonModule,
                        AdaptRxTextfieldModule,
                        AdaptButtonModule,
                        AdaptRxSelectModule,
                        AdaptTabsModule,
                        AdaptRxRadiobuttonModule,
                        AdaptRxFormControlModule,
                        RxNameValuePairsEditorModule,
                        AdaptRxCounterModule,
                        RxDirectivesModule,
                        TranslateModule
                    ],
                    entryComponents: [WebApiConnectionsAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

const RX_WEBHOOK_CALLBACK_CONFIGURATION = {
    recordDefinition: {
        name: 'Webhook Callback Processor Configuration',
        fieldIds: {
            name: 56600,
            processor: 56601,
            bundleId: 56602,
            configMetadata: 56603
        }
    }
};

class RxWebhookCallbackConfigurationService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.metadataFieldData = this.httpClient.get('/api/rx/application/webhook/processorsmetadata');
    }
    getMetadataFields() {
        return this.metadataFieldData;
    }
}
RxWebhookCallbackConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebhookCallbackConfigurationService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxWebhookCallbackConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebhookCallbackConfigurationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxWebhookCallbackConfigurationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class WebhookCallbackConfigurationEditorComponent extends RxModalClass {
    constructor(dockedPanelContext, rxGlobalCacheService, rxRecordDefinitionCacheService, rxRecordInstanceService, rxWebhookCallbackConfigurationService, rxOverlayService, rxJsonParserService, rxNotificationService, formBuilder, translateService, injector) {
        super(dockedPanelContext, injector);
        this.dockedPanelContext = dockedPanelContext;
        this.rxGlobalCacheService = rxGlobalCacheService;
        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.rxWebhookCallbackConfigurationService = rxWebhookCallbackConfigurationService;
        this.rxOverlayService = rxOverlayService;
        this.rxJsonParserService = rxJsonParserService;
        this.rxNotificationService = rxNotificationService;
        this.formBuilder = formBuilder;
        this.translateService = translateService;
        this.injector = injector;
        this.defaultControls = {
            configurationName: '',
            bundleId: [],
            processor: []
        };
    }
    ngOnInit() {
        super.ngOnInit();
        this.webhookCallbackConfigurationForm = this.formBuilder.group(this.defaultControls);
        this.isEditMode = this.dockedPanelContext.getData().isEditMode;
        this.rxGlobalCacheService.getBundleDescriptors().subscribe((bundleDescriptors) => {
            this.bundleIdOptions = bundleDescriptors
                .filter((bundleDescriptor) => bundleDescriptor.isApplication)
                .sort((a, b) => a.friendlyName.localeCompare(b.friendlyName))
                .map((bundleDescriptor) => ({
                displayValue: bundleDescriptor.friendlyName,
                value: bundleDescriptor.id
            }));
        });
        this.rxRecordDefinitionCacheService
            .getRecordDefinition(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name)
            .subscribe((recordDefinition) => {
            this.processorOptions = chain(recordDefinition.fieldDefinitions)
                .find({
                id: RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor
            })
                .get('optionNamesById')
                .map((optionName, optionId) => ({
                displayValue: optionName,
                value: optionId
            }))
                .value();
        });
        if (!this.isEditMode) {
            this.rxRecordInstanceService
                .getNew(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name)
                .subscribe((recordInstance) => (this.recordInstance = recordInstance));
        }
        else {
            this.rxRecordInstanceService
                .get(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name, this.dockedPanelContext.getData().recordId)
                .subscribe((recordInstance) => {
                this.recordInstance = recordInstance;
                this.setFormControlValues();
                this.callbackUrl = [
                    location.origin,
                    'api/rx/application/webhook_callback',
                    this.recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value,
                    this.rxOverlayService.getCurrentOverlayContext().tenantId
                ].join('/');
                this.metadataFields = this.rxJsonParserService.tryParseJson(this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.configMetadata].value);
                this.generateMetadataFieldFormControls();
            });
        }
    }
    isDirty() {
        return this.webhookCallbackConfigurationForm.dirty;
    }
    setFormControlValues() {
        this.webhookCallbackConfigurationForm
            .get('configurationName')
            .setValue(this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name].value);
        const bundleOption = find(this.bundleIdOptions, {
            value: this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.bundleId].value
        });
        this.webhookCallbackConfigurationForm.get('bundleId').setValue([
            {
                value: bundleOption.value,
                displayValue: bundleOption.displayValue
            }
        ]);
        const processorOption = find(this.processorOptions, {
            value: String(this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor].value)
        });
        this.webhookCallbackConfigurationForm.get('processor').setValue([
            {
                value: processorOption.value,
                displayValue: processorOption.displayValue
            }
        ]);
    }
    removeMetadataFieldFormControls() {
        Object.keys(this.webhookCallbackConfigurationForm.controls).forEach((key) => {
            if (!has(this.defaultControls, key)) {
                this.webhookCallbackConfigurationForm.removeControl(key);
            }
        });
    }
    generateMetadataFieldFormControls() {
        this.metadataFields.forEach((field) => {
            this.webhookCallbackConfigurationForm.addControl(field.name, new FormControl(field.value || ''));
        });
    }
    loadMetadataFields() {
        this.rxWebhookCallbackConfigurationService.getMetadataFields().subscribe((metadataFieldsByProcessorId) => {
            this.metadataFields =
                metadataFieldsByProcessorId[this.webhookCallbackConfigurationForm.get('processor').value[0].value];
            this.removeMetadataFieldFormControls();
            this.generateMetadataFieldFormControls();
        });
    }
    saveConfiguration() {
        this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name, this.webhookCallbackConfigurationForm.get('configurationName').value);
        this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.bundleId, this.webhookCallbackConfigurationForm.get('bundleId').value[0].value);
        this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor, this.webhookCallbackConfigurationForm.get('processor').value[0].value);
        forEach(this.metadataFields, (field) => {
            field.value = this.webhookCallbackConfigurationForm.get(field.name).value;
        });
        this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.configMetadata, JSON.stringify(this.metadataFields));
        if (this.isEditMode) {
            this.rxRecordInstanceService.save(this.recordInstance).subscribe(() => this.successCallback());
        }
        else {
            this.rxRecordInstanceService.create(this.recordInstance).subscribe(() => this.successCallback());
        }
    }
    successCallback() {
        this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configurations-saved.message'));
        this.dockedPanelContext.close(null);
    }
    optionFormatter(option) {
        return option.displayValue;
    }
    cancel() {
        this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);
    }
}
WebhookCallbackConfigurationEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationEditorComponent, deps: [{ token: i1$1.DockedPanelContext }, { token: i2.RxGlobalCacheService }, { token: i3$2.RxRecordDefinitionCacheService }, { token: i3$2.RxRecordInstanceService }, { token: RxWebhookCallbackConfigurationService }, { token: i2.RxOverlayService }, { token: i3.RxJsonParserService }, { token: i2.RxNotificationService }, { token: i1$3.FormBuilder }, { token: i4.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
WebhookCallbackConfigurationEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebhookCallbackConfigurationEditorComponent, selector: "rx-webhook-callback-configuration", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"webhookCallbackConfigurationForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"configuration-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configuration-name.label' | translate }}\"\n      formControlName=\"configurationName\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.bundle-name.label' | translate }}\"\n      rx-id=\"bundle-name\"\n      formControlName=\"bundleId\"\n      [options]=\"bundleIdOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.processor.label' | translate }}\"\n      rx-id=\"processor\"\n      formControlName=\"processor\"\n      [options]=\"processorOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n      (onSelectionChange)=\"loadMetadataFields()\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      *ngFor=\"let field of metadataFields\"\n      label=\"{{ field.name }}\"\n      [isPassword]=\"field.secure\"\n      formControlName=\"{{ field.name }}\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"form-group\">\n      <label class=\"form-control-label\">{{\n        'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.callback-url.label' | translate\n      }}</label>\n\n      <div class=\"callback-url bg-secondary p-1\" *ngIf=\"isEditMode\">\n        {{ callbackUrl }}\n      </div>\n\n      <adapt-alert\n        *ngIf=\"!isEditMode\"\n        [config]=\"{\n          content: 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.url-alert.message' | translate,\n          type: 'inline',\n          variant: 'info'\n        }\"\n      ></adapt-alert>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"webhookCallbackConfigurationForm.pristine || webhookCallbackConfigurationForm.invalid\"\n    (click)=\"saveConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [".callback-url{word-break:break-all}\n"], components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-webhook-callback-configuration',
                    templateUrl: './webhook-callback-configuration-editor.component.html',
                    styleUrls: ['./webhook-callback-configuration-editor.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DockedPanelContext }, { type: i2.RxGlobalCacheService }, { type: i3$2.RxRecordDefinitionCacheService }, { type: i3$2.RxRecordInstanceService }, { type: RxWebhookCallbackConfigurationService }, { type: i2.RxOverlayService }, { type: i3.RxJsonParserService }, { type: i2.RxNotificationService }, { type: i1$3.FormBuilder }, { type: i4.TranslateService }, { type: i0.Injector }]; } });

class WebhookCallbackConfigurationAdminComponent {
    constructor(formBuilder, rxModalService, rxNotificationService, rxRecordInstanceService, translateService) {
        this.formBuilder = formBuilder;
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.rxRecordInstanceService = rxRecordInstanceService;
        this.translateService = translateService;
    }
    ngOnInit() {
        this.gridConfig = of({
            actionButtons: [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: () => this.deleteConfigurations()
                        }
                    ]
                }
            ],
            recordDefinitionName: RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name,
            enableRowSelection: RowSelectionMode.Multiple,
            columns: this.getColumns(),
            styles: 'flex-fill'
        });
    }
    editConfiguration(selectedRecord) {
        this.openDockedPanel(true, selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id]);
    }
    createConfiguration() {
        this.openDockedPanel(false);
    }
    deleteConfigurations() {
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.delete-confirmation.message')
        })
            .then((result) => {
            if (result) {
                const deleteRequests$ = [];
                map(this.grid.api.getSelectedRows(), (record) => {
                    deleteRequests$.push(this.rxRecordInstanceService.delete(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name, record[RX_RECORD_DEFINITION.coreFieldIds.id]));
                });
                forkJoin(deleteRequests$).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configurations-deleted.message'));
                    this.grid.api.refresh().subscribe();
                });
            }
        });
    }
    getColumns() {
        return [
            {
                index: 0,
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                fieldId: String(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name),
                clickable: true,
                actions: [
                    {
                        name: (previousAction, selectedRow) => {
                            this.editConfiguration(selectedRow);
                        }
                    }
                ]
            },
            {
                index: 1,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.application.label'),
                fieldId: String(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor)
            },
            {
                index: 2,
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.created-date.label'),
                fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.createdDate)
            }
        ];
    }
    openDockedPanel(isEditMode, recordId) {
        return this.rxModalService
            .openDockedPanel({
            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.header.title'),
            content: WebhookCallbackConfigurationEditorComponent,
            data: {
                isEditMode,
                recordId
            }
        })
            .then(() => {
            this.grid.api.refresh().subscribe();
        })
            .catch(noop);
    }
}
WebhookCallbackConfigurationAdminComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationAdminComponent, deps: [{ token: i1$3.FormBuilder }, { token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i3$2.RxRecordInstanceService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
WebhookCallbackConfigurationAdminComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebhookCallbackConfigurationAdminComponent, selector: "rx-admin-webhook-callback-configuration", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.header.title' | translate }}\"\n>\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-configuration-button\"\n    (click)=\"this.createConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationAdminComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-admin-webhook-callback-configuration',
                    templateUrl: './webhook-callback-configuration.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1$3.FormBuilder }, { type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i3$2.RxRecordInstanceService }, { type: i4.TranslateService }]; }, propDecorators: { grid: [{
                type: ViewChild,
                args: ['grid', { static: true }]
            }] } });

class WebhookCallbackConfigurationRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-admin-webhook-callback-configuration',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebhookCallbackConfigurationAdminComponent),
            name: 'Webhook callback configuration',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
WebhookCallbackConfigurationRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
WebhookCallbackConfigurationRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationRegistrationModule, declarations: [WebhookCallbackConfigurationAdminComponent, WebhookCallbackConfigurationEditorComponent], imports: [CommonModule,
        AdminSettingsModule,
        RecordGridModule,
        AdaptButtonModule,
        ReactiveFormsModule,
        AdaptRxTextfieldModule,
        AdaptRxSelectModule,
        AdaptAlertModule,
        TranslateModule] });
WebhookCallbackConfigurationRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationRegistrationModule, imports: [[
            CommonModule,
            AdminSettingsModule,
            RecordGridModule,
            AdaptButtonModule,
            ReactiveFormsModule,
            AdaptRxTextfieldModule,
            AdaptRxSelectModule,
            AdaptAlertModule,
            TranslateModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: WebhookCallbackConfigurationRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [WebhookCallbackConfigurationAdminComponent, WebhookCallbackConfigurationEditorComponent],
                    imports: [
                        CommonModule,
                        AdminSettingsModule,
                        RecordGridModule,
                        AdaptButtonModule,
                        ReactiveFormsModule,
                        AdaptRxTextfieldModule,
                        AdaptRxSelectModule,
                        AdaptAlertModule,
                        TranslateModule
                    ],
                    entryComponents: [WebhookCallbackConfigurationAdminComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class RxSearchFiltersService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.apiPath = '/api/com.bmc.dsm.chatbot/comaround';
    }
    getSearchFilters() {
        return this.httpClient
            .get(`${this.apiPath}/search-filters`)
            .pipe(map$1((items) => ({ data: items, totalSize: items.length })));
    }
    deleteSearchFilters(ids) {
        return forkJoin(ids.map((id) => this.httpClient.delete(`${this.apiPath}/search-filters/${id}`)));
    }
    createSearchFilter(filter) {
        return this.httpClient.post(`${this.apiPath}/search-filters`, filter);
    }
    updateSearchFilter(filter) {
        return this.httpClient.put(`${this.apiPath}/search-filters`, filter);
    }
    getTags() {
        return this.httpClient.get(`${this.apiPath}/api/tags`);
    }
}
RxSearchFiltersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSearchFiltersService, deps: [{ token: i1$2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
RxSearchFiltersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSearchFiltersService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSearchFiltersService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }]; } });

class SearchFiltersEditorComponent extends RxModalClass {
    constructor(rxSearchFiltersService, dockedPanelContext, injector, rxNotificationService, translateService, rxModalService) {
        super(dockedPanelContext, injector);
        this.rxSearchFiltersService = rxSearchFiltersService;
        this.dockedPanelContext = dockedPanelContext;
        this.injector = injector;
        this.rxNotificationService = rxNotificationService;
        this.translateService = translateService;
        this.rxModalService = rxModalService;
        this.tagsOperators = ['OR', 'AND'];
        this.isEditMode = Boolean(this.dockedPanelContext.getData());
        this.tags$ = this.rxSearchFiltersService.getTags().pipe(shareReplay(1));
        this.searchFilterEditorFormGroup = new FormGroup({
            name: new FormControl('', AdaptValidators.required()),
            tagsOperator: new FormControl([], AdaptValidators.required()),
            tags: new FormControl([], AdaptValidators.required())
        });
        this.tagSuggestions = (text$) => text$.pipe(debounceTime(200), distinctUntilChanged(), withLatestFrom(this.tags$), map$1(([term, tags]) => tags.filter((tag) => tag.startsWith(term))));
    }
    ngOnInit() {
        if (this.isEditMode) {
            this.searchFilterEditorFormGroup.setValue({
                name: this.dockedPanelContext.getData().name,
                tagsOperator: [this.dockedPanelContext.getData().tagsOperator],
                tags: this.dockedPanelContext.getData().tags
            });
        }
    }
    save() {
        const { id } = this.dockedPanelContext.getData() || {};
        const [tagsOperator] = this.searchFilterEditorFormGroup.value.tagsOperator;
        const filter = Object.assign(Object.assign({ id }, this.searchFilterEditorFormGroup.getRawValue()), { tagsOperator });
        const operation = this.isEditMode
            ? this.rxSearchFiltersService.updateSearchFilter(filter)
            : this.rxSearchFiltersService.createSearchFilter(filter);
        operation.subscribe(() => {
            this.close();
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
        });
    }
    close() {
        this.dockedPanelContext.close(DismissReasons.CLOSE_BTN);
    }
    cancel() {
        if (this.searchFilterEditorFormGroup.dirty) {
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.common.unsaved-data.message')
            })
                .then((result) => {
                if (result) {
                    this.close();
                }
            });
        }
        else {
            this.close();
        }
    }
}
SearchFiltersEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersEditorComponent, deps: [{ token: RxSearchFiltersService }, { token: i1$1.DockedPanelContext }, { token: i0.Injector }, { token: i2.RxNotificationService }, { token: i4.TranslateService }, { token: i1.RxModalService }], target: i0.ɵɵFactoryTarget.Component });
SearchFiltersEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SearchFiltersEditorComponent, selector: "rx-search-filters-editor", usesInheritance: true, ngImport: i0, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"searchFilterEditorFormGroup\">\n    <div class=\"form-group\">\n      <adapt-rx-textfield\n        [formControlName]=\"'name'\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.name.label' | translate\"\n      ></adapt-rx-textfield>\n    </div>\n\n    <div class=\"form-group\">\n      <adapt-rx-select\n        [formControlName]=\"'tagsOperator'\"\n        [options]=\"tagsOperators\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.relationship.label' | translate\"\n        required\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"form-group\">\n      <adapt-tag-field\n        [formControlName]=\"'tags'\"\n        required\n        [suppressManual]=\"true\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.tags.label' | translate\"\n        placeholder=\"\"\n        [search]=\"tagSuggestions\"\n        [openDropdownOnFocus]=\"true\"\n      ></adapt-tag-field>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"btn btn-primary mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"this.searchFilterEditorFormGroup.invalid || !this.searchFilterEditorFormGroup.dirty\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"btn btn-secondary\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1$1.AdaptMetatagComponent, selector: "adapt-metatag, adapt-tag-field", inputs: ["prefix", "suffix", "maxTagLength", "truncateConfig", "id", "testID", "name", "ariaLabel", "search", "maxHeight", "suppressManual", "label", "placeholder", "mainErrorText", "warningStateText", "width", "errorCheck", "warningCheck", "selectItemTemplate", "tagTemplate", "replaceModelOnWrite", "delimiterSymbol", "popupClass", "disabledInput", "openDropdownOnFocus", "selectItemFormatter", "fullWidthEdit", "tagStyleFormatter"], outputs: ["focus", "blur", "removeTag", "addTag", "initTagEditing"] }], directives: [{ type: i1$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-search-filters-editor',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './search-filters-editor.component.html'
                }]
        }], ctorParameters: function () { return [{ type: RxSearchFiltersService }, { type: i1$1.DockedPanelContext }, { type: i0.Injector }, { type: i2.RxNotificationService }, { type: i4.TranslateService }, { type: i1.RxModalService }]; } });

class RxSearchFiltersComponent extends BaseViewComponent {
    constructor(rxModalService, rxNotificationService, adaptDockedPanelService, rxSearchFiltersService, translateService) {
        super();
        this.rxModalService = rxModalService;
        this.rxNotificationService = rxNotificationService;
        this.adaptDockedPanelService = adaptDockedPanelService;
        this.rxSearchFiltersService = rxSearchFiltersService;
        this.translateService = translateService;
        this.searchFilters = [];
    }
    ngOnInit() {
        this.initializeRecordGrid();
    }
    initializeRecordGrid() {
        const gridColumns = [
            {
                fieldId: 'id',
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.id.title'),
                visible: false
            },
            {
                fieldId: 'name',
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.search-filter-name.title'),
                clickable: true,
                actions: [
                    {
                        name: (previousActionResult, rowDataItem) => {
                            this.openEditor(rowDataItem);
                        }
                    }
                ]
            },
            {
                fieldId: 'tagsOperator',
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.relationship.title')
            },
            {
                fieldId: 'tags',
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.tags.title'),
                cellTemplate: this.tagsTemplate
            }
        ];
        const gridRecordDefinition = {
            fieldDefinitions: [
                {
                    id: 'id',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'name',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'tagsOperator',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                },
                {
                    id: 'tags',
                    resourceType: RX_RECORD_DEFINITION.resourceTypes.character
                }
            ]
        };
        const actionButtons = [
            {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                style: 'tertiary',
                iconCls: 'trash',
                actions: [{ name: () => this.deleteSearchFilters() }]
            }
        ];
        this.recordGridConfig$ = of({
            columns: gridColumns,
            emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.empty-state.label'),
            enableRowSelection: RowSelectionMode.Multiple,
            enableFiltering: false,
            recordIdField: 'id',
            styles: 'flex-fill',
            useExternalFiltering: false,
            getRecordDefinition: () => of(gridRecordDefinition),
            getData: () => this.rxSearchFiltersService.getSearchFilters(),
            actionButtons,
            filterMode: RecordGridFilterMode.Basic
        });
    }
    deleteSearchFilters() {
        const searchFilterIds = this.grid.api.getSelectedRows().map((row) => row.id);
        this.rxModalService
            .confirm({
            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
            modalStyle: RX_MODAL.modalStyles.warning,
            message: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.delete-confirmation.message')
        })
            .then((result) => {
            if (result) {
                this.rxSearchFiltersService.deleteSearchFilters(searchFilterIds).subscribe(() => {
                    this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.delete-success.message'));
                    this.grid.api.refresh().subscribe();
                });
            }
        });
    }
    openEditor(data) {
        this.adaptDockedPanelService
            .open({
            title: this.translateService.instant(data
                ? 'com.bmc.arsys.rx.client.admin.search-filters-editor.edit.title'
                : 'com.bmc.arsys.rx.client.admin.search-filters-editor.new.title'),
            content: SearchFiltersEditorComponent,
            data: data
        })
            .then(() => {
            this.grid.api.refresh().subscribe();
        })
            .catch(noop);
    }
}
RxSearchFiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSearchFiltersComponent, deps: [{ token: i1.RxModalService }, { token: i2.RxNotificationService }, { token: i1$1.AdaptDockedPanelService }, { token: RxSearchFiltersService }, { token: i4.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
RxSearchFiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxSearchFiltersComponent, selector: "rx-search-filters", viewQueries: [{ propertyName: "grid", first: true, predicate: RecordGridComponent, descendants: true, static: true }, { propertyName: "tagsTemplate", first: true, predicate: ["tagsTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.search-filters.header.label' | translate }}\">\n  <div>\n    <button adapt-button type=\"button\" btn-type=\"tertiary\" (click)=\"openEditor()\">\n      <span class=\"d-icon-plus_circle\"></span>\n      {{ 'com.bmc.arsys.rx.client.admin.search-filters.new-search-filter.button.label' | translate }}\n    </button>\n  </div>\n\n  <rx-record-grid class=\"mt-2 h-100\" [config]=\"recordGridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n\n<ng-template #tagsTemplate let-dataItem=\"dataItem\">\n  <div class=\"d-flex flex-row flex-wrap\">\n    <ng-container *ngFor=\"let tag of dataItem.tags\">\n      <adapt-tag [type]=\"'active'\" [removable]=\"false\">\n        {{ tag | truncate: 10 }}\n      </adapt-tag>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i4$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1$1.AdaptTagComponent, selector: "adapt-tag", inputs: ["type", "removable", "disabled"], outputs: ["remove"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4.TranslatePipe, "truncate": i1$1.AdaptTruncatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: RxSearchFiltersComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rx-search-filters',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './search-filters.component.html'
                }]
        }], ctorParameters: function () { return [{ type: i1.RxModalService }, { type: i2.RxNotificationService }, { type: i1$1.AdaptDockedPanelService }, { type: RxSearchFiltersService }, { type: i4.TranslateService }]; }, propDecorators: { grid: [{
                type: ViewChild,
                args: [RecordGridComponent, { static: true }]
            }], tagsTemplate: [{
                type: ViewChild,
                args: ['tagsTemplate', { static: true }]
            }] } });

class SearchFiltersRegistrationModule {
    constructor(componentFactoryResolver, rxViewComponentRegistryService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rxViewComponentRegistryService = rxViewComponentRegistryService;
        rxViewComponentRegistryService.register({
            type: 'rx-search-filters',
            componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxSearchFiltersComponent),
            name: 'Search filters',
            isPageComponent: true,
            availableInBundles: [RX_APPLICATION.settingsBundleId]
        });
    }
}
SearchFiltersRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersRegistrationModule, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$4.RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });
SearchFiltersRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersRegistrationModule, declarations: [RxSearchFiltersComponent, SearchFiltersEditorComponent], imports: [CommonModule,
        ReactiveFormsModule,
        TranslateModule,
        AdaptButtonModule,
        AdaptMetatagModule,
        AdaptRxFormControlModule,
        AdaptRxSelectModule,
        AdaptRxTextfieldModule,
        AdaptTagModule,
        AdaptTruncatePipeModule,
        AdminSettingsModule,
        RecordGridModule], exports: [RxSearchFiltersComponent] });
SearchFiltersRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersRegistrationModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            TranslateModule,
            AdaptButtonModule,
            AdaptMetatagModule,
            AdaptRxFormControlModule,
            AdaptRxSelectModule,
            AdaptRxTextfieldModule,
            AdaptTagModule,
            AdaptTruncatePipeModule,
            AdminSettingsModule,
            RecordGridModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: SearchFiltersRegistrationModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RxSearchFiltersComponent, SearchFiltersEditorComponent],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        TranslateModule,
                        AdaptButtonModule,
                        AdaptMetatagModule,
                        AdaptRxFormControlModule,
                        AdaptRxSelectModule,
                        AdaptRxTextfieldModule,
                        AdaptTagModule,
                        AdaptTruncatePipeModule,
                        AdminSettingsModule,
                        RecordGridModule
                    ],
                    exports: [RxSearchFiltersComponent],
                    entryComponents: [RxSearchFiltersComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$4.RxViewComponentRegistryService }]; } });

class AdminComponentsModule {
}
AdminComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AdminComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsModule, declarations: [AdminSettingsExplorerComponent,
        AdminCommonSettingsComponent,
        AdminCommonSettingsEditorComponent,
        AdminCommonSettingsBladeComponent], imports: [AdaptDockedPanelModule,
        AdaptModalModule,
        AdaptTreeModule,
        AdaptEmptyStateModule,
        AdaptSidebarModule,
        AdaptButtonModule, i1$1.AdaptBusyModule, AdaptAccordionModule,
        BmcServiceCloudAccountRegistrationModule,
        AdminComponentsRoutingModule,
        AdminSettingsModule,
        ApplicationIssuesRegistrationModule,
        ApprovalConfigurationRegistrationModule,
        ApprovalNotificationsRegistrationModule,
        ChatbotsRegistrationModule,
        CognitiveConsumptionRegistrationModule,
        CognitiveSearchRegistrationModule,
        CognitiveServiceRegistrationModule,
        CognitiveTrainingRegistrationModule,
        ComaroundKnowledgeRegistrationModule,
        CommonModule,
        ConnectorConfigurationRegistrationModule,
        ConnectorMappingRegistrationModule,
        DataSourceConnectionsRegistrationModule,
        DataSourceMappingModule,
        EmailProfilesRegistrationModule,
        FormsModule,
        FunctionalRolesRegistrationModule,
        IframeSecurityRegistrationModule,
        IssueReportingConfigurationModule,
        JitterbitApisRegistrationModule,
        JitterbitConfigurationRegistrationModule,
        ManageTenantRegistrationModule,
        MulesoftApisRegistrationModule,
        MulesoftConfigurationRegistrationModule,
        OutgoingMailboxStatusRegistrationModule,
        RecordGridModule,
        RolePermissionsRegistrationModule,
        RulePoolManagementRegistrationModule,
        RuntimeViewModule,
        RxFormBuilderModule,
        RxBusyIndicatorModule,
        ServerInformationRegistrationModule,
        ServerLogsRegistrationModule,
        ServicesProviderRegionRegistrationModule,
        SummarizationServiceRegistrationModule,
        SummarizationTestingRegistrationModule,
        RealTimeTranslationRegistrationModule,
        RssoOauthRegistrationModule,
        TranslateModule,
        VirtualChatConfigurationRegistrationModule,
        ViewActionsModule,
        ViewComponentsModule,
        WebApiMappingRegistrationModule,
        WebApiConnectionsRegistrationModule,
        WebhookCallbackConfigurationRegistrationModule,
        ToneAnalysisTestingRegistrationModule,
        PermissionsPolicyHeaderRegistrationModule,
        HkmAccessMappingRegistrationModule,
        SearchFiltersRegistrationModule] });
AdminComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsModule, providers: [RxAdminCommonSettingsService], imports: [[
            AdaptDockedPanelModule,
            AdaptModalModule,
            AdaptTreeModule,
            AdaptEmptyStateModule,
            AdaptSidebarModule,
            AdaptButtonModule,
            AdaptBusyModule.forRoot(),
            AdaptAccordionModule,
            BmcServiceCloudAccountRegistrationModule,
            AdminComponentsRoutingModule,
            AdminSettingsModule,
            ApplicationIssuesRegistrationModule,
            ApprovalConfigurationRegistrationModule,
            ApprovalNotificationsRegistrationModule,
            ChatbotsRegistrationModule,
            CognitiveConsumptionRegistrationModule,
            CognitiveSearchRegistrationModule,
            CognitiveServiceRegistrationModule,
            CognitiveTrainingRegistrationModule,
            ComaroundKnowledgeRegistrationModule,
            CommonModule,
            ConnectorConfigurationRegistrationModule,
            ConnectorMappingRegistrationModule,
            DataSourceConnectionsRegistrationModule,
            DataSourceMappingModule,
            EmailProfilesRegistrationModule,
            FormsModule,
            FunctionalRolesRegistrationModule,
            IframeSecurityRegistrationModule,
            IssueReportingConfigurationModule,
            JitterbitApisRegistrationModule,
            JitterbitConfigurationRegistrationModule,
            ManageTenantRegistrationModule,
            MulesoftApisRegistrationModule,
            MulesoftConfigurationRegistrationModule,
            OutgoingMailboxStatusRegistrationModule,
            RecordGridModule,
            RolePermissionsRegistrationModule,
            RulePoolManagementRegistrationModule,
            RuntimeViewModule,
            RxFormBuilderModule,
            RxBusyIndicatorModule,
            ServerInformationRegistrationModule,
            ServerLogsRegistrationModule,
            ServicesProviderRegionRegistrationModule,
            SummarizationServiceRegistrationModule,
            SummarizationTestingRegistrationModule,
            RealTimeTranslationRegistrationModule,
            RssoOauthRegistrationModule,
            TranslateModule,
            VirtualChatConfigurationRegistrationModule,
            ViewActionsModule,
            ViewComponentsModule,
            WebApiMappingRegistrationModule,
            WebApiConnectionsRegistrationModule,
            WebhookCallbackConfigurationRegistrationModule,
            ToneAnalysisTestingRegistrationModule,
            PermissionsPolicyHeaderRegistrationModule,
            HkmAccessMappingRegistrationModule,
            SearchFiltersRegistrationModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0, type: AdminComponentsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        AdaptDockedPanelModule,
                        AdaptModalModule,
                        AdaptTreeModule,
                        AdaptEmptyStateModule,
                        AdaptSidebarModule,
                        AdaptButtonModule,
                        AdaptBusyModule.forRoot(),
                        AdaptAccordionModule,
                        BmcServiceCloudAccountRegistrationModule,
                        AdminComponentsRoutingModule,
                        AdminSettingsModule,
                        ApplicationIssuesRegistrationModule,
                        ApprovalConfigurationRegistrationModule,
                        ApprovalNotificationsRegistrationModule,
                        ChatbotsRegistrationModule,
                        CognitiveConsumptionRegistrationModule,
                        CognitiveSearchRegistrationModule,
                        CognitiveServiceRegistrationModule,
                        CognitiveTrainingRegistrationModule,
                        ComaroundKnowledgeRegistrationModule,
                        CommonModule,
                        ConnectorConfigurationRegistrationModule,
                        ConnectorMappingRegistrationModule,
                        DataSourceConnectionsRegistrationModule,
                        DataSourceMappingModule,
                        EmailProfilesRegistrationModule,
                        FormsModule,
                        FunctionalRolesRegistrationModule,
                        IframeSecurityRegistrationModule,
                        IssueReportingConfigurationModule,
                        JitterbitApisRegistrationModule,
                        JitterbitConfigurationRegistrationModule,
                        ManageTenantRegistrationModule,
                        MulesoftApisRegistrationModule,
                        MulesoftConfigurationRegistrationModule,
                        OutgoingMailboxStatusRegistrationModule,
                        RecordGridModule,
                        RolePermissionsRegistrationModule,
                        RulePoolManagementRegistrationModule,
                        RuntimeViewModule,
                        RxFormBuilderModule,
                        RxBusyIndicatorModule,
                        ServerInformationRegistrationModule,
                        ServerLogsRegistrationModule,
                        ServicesProviderRegionRegistrationModule,
                        SummarizationServiceRegistrationModule,
                        SummarizationTestingRegistrationModule,
                        RealTimeTranslationRegistrationModule,
                        RssoOauthRegistrationModule,
                        TranslateModule,
                        VirtualChatConfigurationRegistrationModule,
                        ViewActionsModule,
                        ViewComponentsModule,
                        WebApiMappingRegistrationModule,
                        WebApiConnectionsRegistrationModule,
                        WebhookCallbackConfigurationRegistrationModule,
                        ToneAnalysisTestingRegistrationModule,
                        PermissionsPolicyHeaderRegistrationModule,
                        HkmAccessMappingRegistrationModule,
                        SearchFiltersRegistrationModule
                    ],
                    providers: [RxAdminCommonSettingsService],
                    declarations: [
                        AdminSettingsExplorerComponent,
                        AdminCommonSettingsComponent,
                        AdminCommonSettingsEditorComponent,
                        AdminCommonSettingsBladeComponent
                    ]
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AdminComponentsModule, ApplicationIssuesAdminComponent, ApplicationIssuesRegistrationModule, ApprovalConfigurationAdminComponent, ApprovalConfigurationRegistrationModule, ApprovalNotificationsComponent, ApprovalNotificationsRegistrationModule, ChatbotsAdminComponent, ChatbotsRegistrationModule, CloseDuplicateIssuesComponent, CognitiveConsumptionAdminComponent, CognitiveConsumptionRegistrationModule, CognitiveServiceAdminComponent, CognitiveServiceRegistrationModule, CognitiveTrainingAdminComponent, CognitiveTrainingRegistrationModule, ConnectorConfigurationAdminComponent, ConnectorConfigurationRegistrationModule, ConnectorMappingAdminComponent, ConnectorMappingRegistrationModule, DataSourceConnectionsAdminComponent, DataSourceConnectionsRegistrationModule, DataSourceMappingAdminComponent, DataSourceMappingModule, EmailProfilesAdminComponent, EmailProfilesRegistrationModule, FunctionalRolesAdminComponent, FunctionalRolesRegistrationModule, HkmAccessMappingAdminComponent, HkmAccessMappingRegistrationModule, IframeSecurityAdminComponent, IframeSecurityRegistrationModule, IssueDetailsComponent, IssueReportingConfigurationAdminComponent, IssueReportingConfigurationModule, JitterbitApisAdminComponent, JitterbitApisRegistrationModule, JitterbitConfigurationAdminComponent, JitterbitConfigurationRegistrationModule, ManageTenantAdminComponent, ManageTenantRegistrationModule, MulesoftApisAdminComponent, MulesoftApisRegistrationModule, MulesoftConfigurationAdminComponent, MulesoftConfigurationRegistrationModule, OutgoingMailboxStatusAdminComponent, OutgoingMailboxStatusRegistrationModule, PermissionsPolicyHeaderAdminComponent, PermissionsPolicyHeaderRegistrationModule, RealTimeTranslationAdminComponent, RealTimeTranslationRegistrationModule, RoleEditorComponent, RolePermissionsAdminComponent, RolePermissionsRegistrationModule, RssoOauthAdminComponent, RssoOauthRegistrationModule, RulePoolManagementAdminComponent, RulePoolManagementRegistrationModule, ServerInformationAdminComponent, ServerInformationRegistrationModule, ServerLogsAdminComponent, ServerLogsRegistrationModule, ServicesProviderRegionAdminComponent, ServicesProviderRegionRegistrationModule, SubmitIssueToSupportComponent, SummarizationServiceAdminComponent, SummarizationServiceRegistrationModule, SummarizationTestingAdminComponent, SummarizationTestingRegistrationModule, ToneAnalysisTestingAdminComponent, ToneAnalysisTestingRegistrationModule, VirtualChatConfigurationAdminComponent, VirtualChatConfigurationRegistrationModule, WebApiConnectionsAdminComponent, WebApiConnectionsRegistrationModule, WebApiMappingAdminComponent, WebApiMappingRegistrationModule, WebhookCallbackConfigurationAdminComponent, WebhookCallbackConfigurationRegistrationModule };
//# sourceMappingURL=helix-platform-admin-components.js.map
