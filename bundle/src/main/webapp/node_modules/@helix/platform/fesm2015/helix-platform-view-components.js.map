{"version":3,"file":"helix-platform-view-components.js","sources":["../../../../libs/platform/view/components/action-button/action-button.types.ts","../../../../libs/platform/view/components/action-button/action-button.service.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.model.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.component.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.component.html","../../../../libs/platform/view/components/action-button/action-button-adapter.service.ts","../../../../libs/platform/view/components/action-button/design/action-button-design.module.ts","../../../../libs/platform/view/components/action-button/runtime/action-button.component.ts","../../../../libs/platform/view/components/action-button/runtime/action-button.component.html","../../../../libs/platform/view/components/action-button/runtime/action-button.module.ts","../../../../libs/platform/view/components/button-bar/button-bar.types.ts","../../../../libs/platform/view/components/button-bar/button-bar.service.ts","../../../../libs/platform/view/components/button-bar/runtime/components/button-bar-dropdown-item/button-bar-dropdown-item.component.ts","../../../../libs/platform/view/components/button-bar/runtime/components/button-bar-dropdown-item/button-bar-dropdown-item.component.html","../../../../libs/platform/view/components/button-bar/runtime/button-bar.component.ts","../../../../libs/platform/view/components/button-bar/runtime/button-bar.component.html","../../../../libs/platform/view/components/button-bar/runtime/button-bar.module.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.model.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.component.ts","../../../../libs/platform/view/components/button-bar/design/button-bar-design.component.html","../../../../libs/platform/view/components/button-bar/design/button-bar-design.module.ts","../../../../libs/platform/view/components/container/runtime/container.component.ts","../../../../libs/platform/view/components/container/runtime/container.component.html","../../../../libs/platform/view/components/container/runtime/container-component-definition-adapter.service.ts","../../../../libs/platform/view/components/container/runtime/container.module.ts","../../../../libs/platform/view/components/container/design/container-canvas-item.component.ts","../../../../libs/platform/view/components/container/design/container-canvas-item.component.html","../../../../libs/platform/view/components/container/container.types.ts","../../../../libs/platform/view/components/container/container.constant.ts","../../../../libs/platform/view/components/container/design/container-design.model.ts","../../../../libs/platform/view/components/container/design/container-design.component.ts","../../../../libs/platform/view/components/container/design/container-design.component.html","../../../../libs/platform/view/components/container/design/container-design.module.ts","../../../../libs/platform/view/components/record-editor/common/record-editor.types.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/field-selector/field-selector.component.html","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.component.ts","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.component.html","../../../../libs/platform/view/components/record-editor/design/record-editor-design-helpers.service.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.model.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.component.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.component.html","../../../../libs/platform/view/components/record-editor/design/components/fields-inspector-widget/fields-inspector-widget.module.ts","../../../../libs/platform/view/components/record-editor/design/record-editor-design.module.ts","../../../../libs/platform/view/components/record-editor/runtime/association-manager.class.ts","../../../../libs/platform/view/components/record-editor/common/record-editor-utils.service.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor-form-control.class.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor-form.class.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.html","../../../../libs/platform/view/components/record-editor/runtime/record-editor-component-definition-adapter.service.ts","../../../../libs/platform/view/components/record-editor/runtime/record-editor.module.ts","../../../../libs/platform/view/components/record-editor/common/default-record-editor-input-type.service.ts","../../../../libs/platform/view/components/field-components/association/association.types.ts","../../../../libs/platform/view/components/field-components/association/runtime/record-preview-card/record-preview-card.component.ts","../../../../libs/platform/view/components/field-components/association/runtime/record-preview-card/record-preview-card.component.html","../../../../libs/platform/view/components/field-components/association/runtime/association.component.ts","../../../../libs/platform/view/components/field-components/association/runtime/association.component.html","../../../../libs/platform/view/components/field-components/association/runtime/association-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/association/runtime/association.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component.html","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.component.html","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-record-field-selector-field/association-record-field-selector-form-control.module.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-helper.service.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.model.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-container.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-design-container.component.html","../../../../libs/platform/view/components/field-components/association/design/association-design.component.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.component.html","../../../../libs/platform/view/components/field-components/association/design/association-design-adapter.service.ts","../../../../libs/platform/view/components/field-components/association/design/association-design.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/runtime/base-record-editor-field-properties.constant.ts","../../../../libs/platform/view/components/field-components/field-components.constant.ts","../../../../libs/platform/view/components/field-components/association/design/association-expression-configurator.class.ts","../../../../libs/platform/view/components/field-components/association/association-registration.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/design/base-record-editor-field-design.class.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.model.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.component.ts","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.component.html","../../../../libs/platform/view/components/field-components/attachment-field/design/attachment-field-design.module.ts","../../../../libs/platform/view/components/field-components/base-record-editor-field/runtime/base-record-editor-field-component.class.ts","../../../../libs/platform/view/components/field-components/attachment-field/attachment-field.constant.ts","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.ts","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.html","../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.module.ts","../../../../libs/platform/view/components/field-components/attachment-field/attachment-field-registration.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/boolean-field.types.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.model.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.ts","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.component.html","../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.ts","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.component.html","../../../../libs/platform/view/components/field-components/boolean-field/runtime/boolean-field.module.ts","../../../../libs/platform/view/components/field-components/boolean-field/boolean-field-registration.module.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.model.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.component.ts","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.component.html","../../../../libs/platform/view/components/field-components/date-field/design/date-field-design.module.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-adapter.class.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.component.ts","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.component.html","../../../../libs/platform/view/components/field-components/date-field/runtime/date-field.module.ts","../../../../libs/platform/view/components/field-components/date-field/date-field-registration.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.model.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.component.ts","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.component.html","../../../../libs/platform/view/components/field-components/date-time-field/design/date-time-field-design.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-adapter.class.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.component.ts","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.component.html","../../../../libs/platform/view/components/field-components/date-time-field/runtime/date-time-field.module.ts","../../../../libs/platform/view/components/field-components/date-time-field/date-time-field-registration.module.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.model.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.component.ts","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.component.html","../../../../libs/platform/view/components/field-components/decimal-field/design/decimal-field-design.module.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.html","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.component.ts","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.component.html","../../../../libs/platform/view/components/field-components/decimal-field/runtime/decimal-field.module.ts","../../../../libs/platform/view/components/field-components/decimal-field/decimal-field-registration.module.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.model.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.component.ts","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.component.html","../../../../libs/platform/view/components/field-components/integer-field/design/integer-field-design.module.ts","../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.module.ts","../../../../libs/platform/view/components/field-components/integer-field/integer-field-registration.module.ts","../../../../libs/platform/view/components/field-components/selection-field/selection-field.constant.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.model.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.component.ts","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.component.html","../../../../libs/platform/view/components/field-components/selection-field/design/selection-field-design.module.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.types.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.component.ts","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.component.html","../../../../libs/platform/view/components/field-components/selection-field/runtime/selection-field.module.ts","../../../../libs/platform/view/components/field-components/selection-field/selection-field-registration.module.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.component.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.component.html","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-field.component.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-field.component.html","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group-component-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/select-group/runtime/select-group.module.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-field.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-field.component.html","../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/field-set-form-control.component.html","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.model.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.component.ts","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.component.html","../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.module.ts","../../../../libs/platform/view/components/field-components/select-group/select-group-registration.module.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.model.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.component.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.component.html","../../../../libs/platform/view/components/field-components/text-field/design/text-field-design.module.ts","../../../../libs/platform/view/components/field-components/text-field/design/text-field-expression-configurator.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.types.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.ts","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.html","../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.module.ts","../../../../libs/platform/view/components/field-components/text-field/text-field-registration.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.model.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.component.ts","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.component.html","../../../../libs/platform/view/components/field-components/textarea-field/design/textarea-field-design.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.component.ts","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.component.html","../../../../libs/platform/view/components/field-components/textarea-field/runtime/textarea-field.module.ts","../../../../libs/platform/view/components/field-components/textarea-field/textarea-field-registration.module.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.model.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.component.ts","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.component.html","../../../../libs/platform/view/components/field-components/time-field/design/time-field-design.module.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-adapter.class.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.ts","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.html","../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.module.ts","../../../../libs/platform/view/components/field-components/time-field/time-field-registration.module.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.component.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.component.html","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-helper.service.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.html","../../../../libs/platform/view/components/field-components/extension-container/extension-container.constant.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-definition-adapter.service.ts","../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container.module.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.model.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.component.ts","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.component.html","../../../../libs/platform/view/components/field-components/extension-container/design/extension-container-design.module.ts","../../../../libs/platform/view/components/field-components/extension-container/extension-container-registration.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.model.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.component.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.component.html","../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.component.html","../../../../libs/platform/view/components/field-components/rich-textarea-field/runtime/rich-textarea-field.module.ts","../../../../libs/platform/view/components/field-components/rich-textarea-field/rich-textarea-field-registration.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.component.ts","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.component.html","../../../../libs/platform/view/components/field-components/localized-character-field/runtime/localized-character-field.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.model.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.component.ts","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.component.html","../../../../libs/platform/view/components/field-components/localized-character-field/design/localized-character-field-design.module.ts","../../../../libs/platform/view/components/field-components/localized-character-field/localized-character-field-registration.module.ts","../../../../libs/platform/view/components/field-components/field-components.module.ts","../../../../libs/platform/view/components/record-grid/runtime/types/grid-card-layout-width.enum.ts","../../../../libs/platform/view/components/record-grid/common/types/record-grid-column-alignment.enum.ts","../../../../libs/platform/view/components/record-grid/record-grid.constant.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-utils.service.ts","../../../../libs/platform/view/components/record-grid/common/types/record-grid.types.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-config-utils.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component.html","../../../../libs/platform/view/components/record-grid/common/types/cell-display-properties.types.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design.constant.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-option-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-column-editor-control/record-grid-column-editor-control.component.html","../../../../libs/platform/view/components/record-grid/runtime/types/query-filters-logic.enum.ts","../../../../libs/platform/view/components/record-grid/common/types/record-grid-advanced-filter-value.class.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-advanced-filtering.service.ts","../../../../libs/platform/view/components/record-grid/common/services/record-grid-filter-helper.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-filter-config.service.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.component.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.component.html","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/rx-adapt-datetime-moment-adapter.service.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.component.ts","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.component.html","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component.ts","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component.html","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.component.ts","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.types.ts","../../../../libs/platform/view/components/record-grid/common/components/filter-tags/filter-tags.module.ts","../../../../libs/platform/view/components/record-grid/common/components/named-filter-options-list/named-filter-options-list.module.ts","../../../../libs/platform/view/components/record-grid/common/record-grid-common.module.ts","../../../../libs/platform/view/components/record-grid/common/components/string-filter/string-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/number-filter/number-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/date-time-range-filter/date-time-range-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/selection-filter/selection-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/boolean-filter/boolean-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/string-with-type-ahead-filter/string-with-type-ahead-filter.module.ts","../../../../libs/platform/view/components/record-grid/common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-control.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-select-control/record-grid-filter-select-helper.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design.types.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.html","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design-utils.service.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.model.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.html","../../../../libs/platform/view/components/record-grid/design/record-grid-design-adapter.service.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.module.ts","../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-view-presets-widget.module.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-design.module.ts","../../../../libs/platform/view/components/page/runtime/page.component.ts","../../../../libs/platform/view/components/page/runtime/page.component.html","../../../../libs/platform/view/components/record-grid/runtime/filter-by-card-selection-dialog/filter-by-card-selection-dialog.component.ts","../../../../libs/platform/view/components/record-grid/runtime/filter-by-card-selection-dialog/filter-by-card-selection-dialog.component.html","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-configurator.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-shared-filter-presets-cache.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-user-preferences.service.ts","../../../../libs/platform/view/components/record-grid/runtime/types/row-selection-mode.enum.ts","../../../../libs/platform/view/components/record-grid/runtime/card-layout-cell-header/card-layout-cell-header.component.ts","../../../../libs/platform/view/components/record-grid/runtime/card-layout-cell-header/card-layout-cell-header.component.html","../../../../libs/platform/view/components/record-grid/runtime/record-grid-card-layout/record-grid-card-layout.directive.ts","../../../../libs/platform/view/components/record-grid/runtime/cell-display-properties/cell-display-properties.directive.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.html","../../../../libs/platform/view/components/record-grid/runtime/record-grid-definition-adapter.service.ts","../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-query-expression-evaluator.service.ts","../../../../libs/platform/view/components/record-grid/runtime/record-grid.module.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text.component.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text-expression-evaluator.service.ts","../../../../libs/platform/view/components/rich-text/rich-text-definition-adapter.service.ts","../../../../libs/platform/view/components/rich-text/runtime/rich-text.module.ts","../../../../libs/platform/view/components/rich-text/design/ckeditor-config.constant.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.model.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.component.html","../../../../libs/platform/view/components/rich-text/design/expression-editor-plugin.service.ts","../../../../libs/platform/view/components/rich-text/design/rich-text-design.module.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.component.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.component.html","../../../../libs/platform/view/components/service-list/design/service-list-design.module.ts","../../../../libs/platform/view/components/service-list/runtime/service-list.component.ts","../../../../libs/platform/view/components/service-list/runtime/service-list.component.html","../../../../libs/platform/view/components/service-list/runtime/service-list.module.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container.component.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container.component.html","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.component.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.component.html","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel-component-definition-adapter.service.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-container/tab-container-component-definition-adapter.service.ts","../../../../libs/platform/view/components/tab-panel/runtime/tab-panel.module.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.model.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.component.ts","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.component.html","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.component.ts","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.component.html","../../../../libs/platform/view/components/tab-panel/design/tab-panel-design.module.ts","../../../../libs/platform/view/components/page/design/page-design.model.ts","../../../../libs/platform/view/components/page/design/page-design.component.ts","../../../../libs/platform/view/components/page/design/page-design.component.html","../../../../libs/platform/view/components/page/design/page-design.module.ts","../../../../libs/platform/view/components/page/runtime/page-component-definition-adapter.service.ts","../../../../libs/platform/view/components/page/runtime/page.module.ts","../../../../libs/platform/view/components/image/design/image-design.component.ts","../../../../libs/platform/view/components/image/design/image-design.component.html","../../../../libs/platform/view/components/image/design/image-design.module.ts","../../../../libs/platform/view/components/image/image.types.ts","../../../../libs/platform/view/components/image/runtime/image.component.ts","../../../../libs/platform/view/components/image/runtime/image.component.html","../../../../libs/platform/view/components/image/runtime/image.module.ts","../../../../libs/platform/view/components/action-button/action-button-registration.module.ts","../../../../libs/platform/view/components/button-bar/button-bar-registration.module.ts","../../../../libs/platform/view/components/container/container-registration.module.ts","../../../../libs/platform/view/components/image/design/image-design.model.ts","../../../../libs/platform/view/components/image/image-registration.module.ts","../../../../libs/platform/view/components/page/page-registration.module.ts","../../../../libs/platform/view/components/record-editor/record-editor-registration.module.ts","../../../../libs/platform/view/components/record-grid/design/record-grid-expression-configurator.class.ts","../../../../libs/platform/view/components/record-grid/record-grid-registration.module.ts","../../../../libs/platform/view/components/rich-text/rich-text-registration.module.ts","../../../../libs/platform/view/components/tab-panel/design/tab-container-design/tab-container-design.model.ts","../../../../libs/platform/view/components/tab-panel/tab-panel-registration.module.ts","../../../../libs/platform/view/components/service-list/design/service-list-design.model.ts","../../../../libs/platform/view/components/service-list/service-list-registration.module.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.model.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.component.ts","../../../../libs/platform/view/components/unknown/design/unknown-design.component.html","../../../../libs/platform/view/components/unknown/design/unknown-design.module.ts","../../../../libs/platform/view/components/unknown/unknown-registration.module.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.constant.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.component.ts","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping.component.html","../../../../libs/platform/view/components/rx.settings/chatbot-user-mapping/chatbot-user-mapping-registration.module.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.constant.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.component.ts","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event.component.html","../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event-registration.module.ts","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector.component.ts","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector.component.html","../../../../libs/platform/view/components/rx.settings/smart-reporting-redirector/smart-reporting-redirector-registration.module.ts","../../../../libs/platform/view/components/view-preset-selector/view-preset-selector.types.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-data.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector-user-preferences.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/rename-view-preset/rename-view-preset.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/rename-view-preset/rename-view-preset.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.component.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.component.html","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector-adapter.service.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset.module.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/add-shared-view-presets/add-shared-view-presets.module.ts","../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector.module.ts","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.ts","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.html","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.model.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.component.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.component.html","../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.module.ts","../../../../libs/platform/view/components/view-preset-selector/design/view-preset-selector-design.module.ts","../../../../libs/platform/view/components/view-preset-selector/view-preset-selector-registration.module.ts","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in.component.ts","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in.component.html","../../../../libs/platform/view/components/rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in-registration.module.ts","../../../../libs/platform/view/components/view-components.module.ts","../../../../libs/platform/view/components/helix-platform-view-components.ts"],"sourcesContent":["import { IRxDisabledProp, IRxStandardProps } from '@helix/platform/view/api';\n\nexport interface IActionButtonProperties extends IRxStandardProps, IRxDisabledProp {\n  cls?: string;\n  fieldId?: string;\n  icon?: string;\n  iconAlignment?: ActionButtonIconAlignment;\n  iconCls?: string;\n  label?: string;\n  labelKey?: string;\n  recordDefinitionName?: string;\n  recordInstance?: string | any;\n  size?: ActionButtonSize;\n  style?: ActionButtonStyle;\n  // set by association view component for internal action buttons\n  action?: string;\n}\n\nexport enum ActionButtonStyle {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Tertiary = 'tertiary'\n}\n\nexport enum DeprecatedActionButtonStyle {\n  Link = 'link',\n  Clear = 'clear'\n}\n\nexport enum ActionButtonSize {\n  Small = 'small',\n  Default = 'default',\n  Large = 'large'\n}\n\nexport enum ActionButtonIconAlignment {\n  Left = 'left',\n  Right = 'right'\n}\n","import { Injectable } from '@angular/core';\nimport { AdaptButtonComponent } from '@bmc-ux/adapt-angular';\n\nimport { ActionButtonIconAlignment, ActionButtonStyle } from './action-button.types';\n\n@Injectable()\nexport class RxActionButtonService {\n  getButtonType(style: ActionButtonStyle): AdaptButtonComponent['type'] {\n    let result: AdaptButtonComponent['type'];\n\n    switch (style) {\n      case ActionButtonStyle.Secondary:\n        result = 'secondary';\n        break;\n      case ActionButtonStyle.Tertiary:\n        result = 'tertiary';\n        break;\n      default:\n        result = 'primary';\n        break;\n    }\n\n    return result;\n  }\n\n  getIconCssClass(iconClass: string, iconAlignment = ActionButtonIconAlignment.Left): string {\n    return iconClass ? `d-icon-${iconAlignment}-${iconClass}` : '';\n  }\n}\n","import { IFieldDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { IFormControlBuilderConfig, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IconPickerFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\nimport {\n  ActionListWidgetComponent,\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { TranslateService } from '@ngx-translate/core';\nimport { flatten, map as _map } from 'lodash';\nimport { combineLatest, EMPTY, of } from 'rxjs';\nimport { catchError, map, pairwise, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport {\n  ActionButtonIconAlignment,\n  ActionButtonSize,\n  ActionButtonStyle,\n  IActionButtonProperties\n} from '../action-button.types';\nimport { IActionButtonDesignProperties } from './action-button-design.types';\n\nconst ACTIONS_KEY = 'actions';\n\nexport class ActionButtonDesignModel\n  extends ViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n  implements IViewDesignerComponentModel<IActionButtonProperties, IActionButtonDesignProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private viewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private translateService = this.injector.get(TranslateService);\n\n  label$ = this.sandbox.getComponentPropertyValue('labelKey').pipe(\n    switchMap((labelKey) =>\n      labelKey ? of(this.translateService.instant(labelKey)) : this.sandbox.getComponentPropertyValue('label')\n    ),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  style$ = this.sandbox.getComponentPropertyValue('style');\n  size$ = this.sandbox.getComponentPropertyValue('size');\n  icon$ = this.sandbox.getComponentPropertyValue('icon');\n  iconAlignment$ = this.sandbox.getComponentPropertyValue('iconAlignment');\n\n  private fieldDefinitions$ = this.sandbox.getComponentPropertyValue('recordDefinitionName').pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName\n        ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n            map((recordDefinition) => recordDefinition.fieldDefinitions),\n            catchError(() => of([]))\n          )\n        : of([])\n    )\n  );\n\n  static getInitialProperties(props: IActionButtonProperties): IActionButtonDesignProperties {\n    return {\n      iconAlignment: ActionButtonIconAlignment.Left,\n      label: 'New button',\n      size: ActionButtonSize.Default,\n      icon: null,\n      style: ActionButtonStyle.Primary,\n      recordDefinitionName: null,\n      fieldId: null,\n      recordInstance: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...props\n    };\n  }\n\n  rxInit(): void {\n    // Set initial inspector config.\n    combineLatest([this.sandbox.componentProperties$, this.fieldDefinitions$])\n      .pipe(\n        map(([componentProperties, fieldDefinitions]) =>\n          this.getInspectorConfig(componentProperties, fieldDefinitions)\n        ),\n        take(1),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((inspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    const actions$ = this.sandbox.getChildComponents<IViewActionDesignProperties>();\n\n    combineLatest([\n      actions$.pipe(switchMap((actions) => this.viewActionValidatorService.validate(actions, ACTIONS_KEY))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues) => {\n        this.setValidationIssues(validationIssues);\n      });\n\n    // update field names when Record Definition Name changed\n    this.fieldDefinitions$\n      .pipe(\n        withLatestFrom(this.componentProperties$),\n        map(([fieldDefinitions, properties]: [IFieldDefinition[], IActionButtonDesignProperties]) =>\n          this.getInspectorConfig(properties, fieldDefinitions)\n        )\n      )\n      .subscribe((inspector) => this.sandbox.updateInspectorConfig(inspector));\n\n    // clear fieldId and recordInstance if recordDefinitionName changed\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(pairwise())\n      .subscribe(([oldName, newName]) => {\n        if (oldName && oldName !== newName) {\n          this.sandbox.updateComponentProperties({\n            fieldId: null,\n            recordInstance: null\n          });\n        }\n      });\n\n    this.label$.subscribe((label) => {\n      this.sandbox.setBreadcrumbs(label);\n    });\n\n    this.sandbox\n      .getComponentPropertyValue('action')\n      .pipe(\n        switchMap((action) => (action ? EMPTY : this.label$)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        // Don't build settable properties if 'action' property is not empty.\n        // In this case button threads as a child of association component only.\n        this.sandbox.setSettablePropertiesDataDictionary(label, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  setValidationIssues(issues: IViewComponentDesignValidationIssue[]): void {\n    this.sandbox.setValidationIssues(issues);\n  }\n\n  private getInspectorConfig(\n    props: IActionButtonDesignProperties,\n    fieldDefinitions: IFieldDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const securitySectionControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition name',\n          tooltip: new Tooltip(\n            'The view component will be hidden if the user has no access to the specified record definition.'\n          ),\n          definitionType: RxDefinitionPickerType.StandardDataRecord\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    if (props.recordDefinitionName) {\n      securitySectionControls.push(\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            tooltip: new Tooltip(\n              'The view component will be hidden if the user has no access to the specified field, or disabled if the user only has View permission ' +\n                'for the specified field. <br><br> Record definition name, Field name, and Record instance must all be ' +\n                'specified in order to control the disabled/hidden state of the view component using field permissions.'\n            ),\n            options: fieldDefinitions.map((definition) => ({ name: definition.name, id: String(definition.id) })),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'recordInstance',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Record instance',\n            tooltip: new Tooltip('Expression pointing to a record instance that provides the field permission details.')\n          } as IExpressionInspectorControlOptions\n        }\n      );\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'label',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Label'\n              }\n            },\n            {\n              name: 'style',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Style',\n                required: true,\n                options: _map(ActionButtonStyle, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'size',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Size',\n                options: _map(ActionButtonSize, (value, name) => ({\n                  id: value,\n                  name\n                })),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'icon',\n              component: IconPickerFormControlComponent,\n              options: {\n                label: 'Icon'\n              }\n            },\n            {\n              name: 'iconAlignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Icon alignment',\n                options: _map(ActionButtonIconAlignment, (value, name) => ({\n                  id: value,\n                  name\n                }))\n              } as ISelectFormControlOptions\n            },\n            getDisabledFieldInspectorConfig(),\n            ...getStandardPropsInspectorConfigs()\n          ]\n        },\n        {\n          label: 'Actions',\n          controls: [\n            {\n              widgetName: ACTIONS_KEY,\n              component: ActionListWidgetComponent\n            }\n          ]\n        },\n        {\n          label: 'Security',\n          controls: securitySectionControls\n        }\n      ]\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonDesignModel } from './action-button-design.model';\nimport { ActionButtonSize } from '../action-button.types';\n\n@Component({\n  selector: 'rx-action-button-design',\n  templateUrl: './action-button-design.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActionButtonDesignComponent implements OnInit {\n  @Input()\n  model: ActionButtonDesignModel;\n\n  iconCssClass$: Observable<string>;\n  // ButtonColorType must be used instead of any but it's not exported by ADAPT.\n  buttonType$: Observable<any>;\n  size$: Observable<ActionButtonSize>;\n\n  constructor(private rxActionButtonService: RxActionButtonService) {}\n\n  ngOnInit(): void {\n    this.iconCssClass$ = combineLatest([this.model.icon$, this.model.iconAlignment$]).pipe(\n      map(([iconCssName, iconAlignment]) => this.rxActionButtonService.getIconCssClass(iconCssName, iconAlignment))\n    );\n\n    this.buttonType$ = this.model.style$.pipe(map((style) => this.rxActionButtonService.getButtonType(style)));\n    this.size$ = this.model.size$.pipe(map((size) => size || ActionButtonSize.Default));\n  }\n}\n","<button adapt-button [btn-type]=\"buttonType$ | async\" [size]=\"size$ | async\" [ngClass]=\"iconCssClass$ | async\">\n  {{ model.label$ | async }}\n</button>\n","import { Injectable } from '@angular/core';\nimport { includes, get } from 'lodash';\n\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RX_LEGACY_ICONS, IContainerViewComponentDefinition, IViewDefinition } from '@helix/platform/view/api';\nimport { ActionButtonSize, ActionButtonStyle, DeprecatedActionButtonStyle } from './action-button.types';\n\n@Injectable()\nexport class ActionButtonAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  private deprecatedButtonStyles = [DeprecatedActionButtonStyle.Link, DeprecatedActionButtonStyle.Clear];\n\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition) {\n    if (includes(this.deprecatedButtonStyles, componentDefinition.propertiesByName.style)) {\n      componentDefinition.propertiesByName.style = ActionButtonStyle.Tertiary;\n    }\n\n    if (!componentDefinition.propertiesByName.size) {\n      componentDefinition.propertiesByName.size = ActionButtonSize.Small;\n    }\n\n    if (componentDefinition.propertiesByName.icon) {\n      componentDefinition.propertiesByName.icon = get(\n        RX_LEGACY_ICONS,\n        componentDefinition.propertiesByName.icon,\n        componentDefinition.propertiesByName.icon\n      );\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\n\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { IconPickerFormControlModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { ActionListWidgetModule, ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { ActionButtonAdapterService } from '../action-button-adapter.service';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonDesignComponent } from './action-button-design.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptButtonModule,\n    ViewDesignerCanvasModule,\n    ActionListWidgetModule,\n    IconPickerFormControlModule\n  ],\n  declarations: [ActionButtonDesignComponent],\n  entryComponents: [ActionButtonDesignComponent],\n  providers: [RxActionButtonService, ActionButtonAdapterService]\n})\nexport class ActionButtonDesignModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private actionButtonAdapterService: ActionButtonAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.ActionButton,\n      this.actionButtonAdapterService\n    );\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\nimport { BaseViewComponent, IViewComponentSetProperty, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, includes } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonIconAlignment } from '../action-button.types';\n\nimport { IActionButtonConfig, IActionButtonState } from './action-button.types';\n\n@Component({\n  selector: 'rx-action-button',\n  templateUrl: './action-button.component.html',\n  styleUrls: ['./action-button.component.scss']\n})\nexport class ActionButtonComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  api = {\n    click: this.click.bind(this),\n    setProperty: this.setProperty.bind(this)\n  };\n\n  state: IActionButtonState = {};\n\n  isActionInProgress = false;\n  isDisabled = false;\n  buttonType = '';\n\n  @Input()\n  guid: string;\n\n  @Input()\n  config: Observable<IActionButtonConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  @HostBinding('class')\n  get hostClass(): string {\n    const state = this.state;\n    const className = `${RxViewComponentType.ActionButton}_${state.style}`;\n\n    return state.styles ? `${className} ${state.styles}` : className;\n  }\n\n  constructor(\n    private rxLogService: RxLogService,\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxActionButtonService: RxActionButtonService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      Object.assign(this.state, config);\n\n      if (config.labelKey) {\n        this.state.buttonLabel = this.translateService.instant(config.labelKey);\n      } else {\n        this.state.buttonLabel = config.label;\n      }\n\n      this.state.icon = '';\n      this.state.cls = config.cls || '';\n\n      if (config.iconCls || config.icon) {\n        const icon = config.iconCls || config.icon;\n        const iconAlignment = ((config.label || config.labelKey) && config.iconAlignment) || 'left';\n\n        this.state.icon = this.rxActionButtonService.getIconCssClass(icon, iconAlignment as ActionButtonIconAlignment);\n      }\n\n      if (config.iconCls && config.icon) {\n        this.rxLogService.warning('iconCls option is specified, icon will be ignored.');\n      }\n\n      if (!config.cls) {\n        this.buttonType = this.rxActionButtonService.getButtonType(this.state.style);\n      }\n\n      if (config.cls && config.style) {\n        this.rxLogService.warning('cls option is specified, style will be ignored.');\n      }\n\n      this.validateRecordDefinitionName();\n      this.isHidden = this.isHiddenFunc();\n      this.isDisabled = this.isDisabledFunc();\n    });\n  }\n\n  // api\n  click(): Promise<void> {\n    if (!this.isDisabled) {\n      this.isActionInProgress = true;\n      this.isDisabled = true;\n\n      return this\n        .triggerViewActions()\n        .then((res) => {\n          this.isActionInProgress = false;\n          this.isDisabled = this.isDisabledFunc();\n        })\n        .catch((err) => {\n          this.isActionInProgress = false;\n          this.isDisabled = this.isDisabledFunc();\n        });\n    }\n  }\n\n  isDisabledFunc(): boolean {\n    return (\n      Boolean(this.state.disabled) ||\n      this.isActionInProgress ||\n      (this.state.recordInstance &&\n        this.state.fieldId &&\n        this.state.recordInstance.recordDefinitionName === this.state.recordDefinitionName &&\n        find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }) &&\n        find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) }).permissionType ===\n          RX_RECORD_DEFINITION.fieldPermissionTypes.view)\n    );\n  }\n\n  isHiddenFunc(): boolean {\n    return (this.isHidden =\n      Boolean(this.state.hidden) ||\n      (this.state.recordInstance &&\n        (this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName ||\n          (this.state.fieldId &&\n            !find(this.state.recordInstance.fieldInstances, { id: Number(this.state.fieldId) })))));\n  }\n\n  setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (includes(['hidden', 'disabled'], propertyPath)) {\n      this.state[propertyPath] = value;\n\n      this.notifyPropertyChanged(propertyPath, this.state[propertyPath]);\n    } else {\n      return throwError(`Action Button: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  private validateRecordDefinitionName(): void {\n    if (\n      this.state.recordInstance &&\n      this.state.recordInstance.recordDefinitionName !== this.state.recordDefinitionName\n    ) {\n      const buttonName = this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.action-button.component-name.label',\n        {\n          label: this.state.label\n        }\n      );\n\n      const errorMessage = this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.action-button.configuration-error.message',\n        {\n          componentName: buttonName\n        }\n      );\n\n      this.rxNotificationService.addErrorMessage(errorMessage);\n    }\n  }\n}\n","<button\n  adapt-button\n  type=\"button\"\n  class=\"mw-100 rx-ellipsis\"\n  *ngIf=\"!isHidden\"\n  [btn-type]=\"buttonType\"\n  [ngClass]=\"[state.icon, state.cls]\"\n  [disabled]=\"isDisabled\"\n  [size]=\"state.size\"\n  (click)=\"api.click($event)\"\n>\n  <span>{{ state.buttonLabel }}</span>\n</button>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptButtonModule, AdaptIconModule } from '@bmc-ux/adapt-angular';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActionButtonAdapterService } from '../action-button-adapter.service';\nimport { RxActionButtonService } from '../action-button.service';\nimport { ActionButtonComponent } from './action-button.component';\n\n@NgModule({\n  imports: [AdaptButtonModule, CommonModule, TranslateModule, AdaptIconModule],\n  exports: [ActionButtonComponent],\n  declarations: [ActionButtonComponent],\n  entryComponents: [ActionButtonComponent],\n  providers: [RxActionButtonService, ActionButtonAdapterService]\n})\nexport class ActionButtonModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private actionButtonAdapterService: ActionButtonAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.ActionButton,\n      this.actionButtonAdapterService\n    );\n  }\n}\n","export enum RxButtonBarAlignment {\n  Left = 'left',\n  Right = 'right',\n  Center = 'center'\n}\n\nexport const RX_BUTTON_BAR = {\n  alignmentOptions: {\n    left: {\n      id: RxButtonBarAlignment.Left,\n      name: 'Left',\n      cls: 'align-left'\n    },\n    center: {\n      id: RxButtonBarAlignment.Center,\n      name: 'Center',\n      cls: 'align-center'\n    },\n    right: {\n      id: RxButtonBarAlignment.Right,\n      name: 'Right',\n      cls: 'align-right'\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { RxButtonBarAlignment, RX_BUTTON_BAR } from './button-bar.types';\nimport { get } from 'lodash';\n\n@Injectable()\nexport class RxButtonBarService {\n  getAlignClass(alignment: RxButtonBarAlignment): string {\n    return get(RX_BUTTON_BAR.alignmentOptions, [alignment, 'cls'], '');\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ActionButtonComponent } from '../../../../action-button/runtime/action-button.component';\n\n@Component({\n  selector: 'rx-button-bar-dropdown-item-component',\n  templateUrl: './button-bar-dropdown-item.component.html'\n})\nexport class ButtonBarDropdownItemComponent extends ActionButtonComponent {\n  @Input() guid;\n  @Input() config;\n  @Input() runtimeViewModelApi;\n}\n","<button type=\"button\" class=\"dropdown-item\" *ngIf=\"!isHidden\" [disabled]=\"isDisabled\" (click)=\"api.click($event)\">\n  {{ state.label }}\n</button>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { BaseViewComponent, IViewComponent, RuntimeViewCanvasItemComponent } from '@helix/platform/view/runtime';\nimport { get, isEmpty, isUndefined, last, throttle } from 'lodash';\nimport { merge, Observable, Subject, throwError } from 'rxjs';\nimport { IButtonBarChildComponentData, IButtonBarConfig } from './button-bar.types';\nimport { ResizeSensor } from 'css-element-queries';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@Component({\n  selector: 'rx-button-bar',\n  templateUrl: './button-bar.component.html',\n  styleUrls: ['./button-bar.component.scss']\n})\nexport class ButtonBarComponent extends BaseViewComponent implements OnInit, OnDestroy, IViewComponent, AfterViewInit {\n  @ViewChildren('buttonItems', { read: ElementRef })\n  private buttonItemsQueryList: QueryList<ElementRef>;\n\n  @ViewChild('dropdownToggle', { read: ElementRef })\n  private dropdownToggleButton: ElementRef;\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  config: Observable<IButtonBarConfig>;\n  alignClass: string;\n  childLayouts: IButtonBarChildComponentData[] = null;\n  isDropdownVisible = false;\n\n  private resizeSensor: ResizeSensor;\n  private resize$ = new Subject();\n  private onResizeThrottled = throttle(this.onResize.bind(this), 100);\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private runtimeCanvasItemComponent: RuntimeViewCanvasItemComponent,\n    private changeDetector: ChangeDetectorRef,\n    private ngZone: NgZone,\n    private rxButtonBarService: RxButtonBarService,\n    private renderer: Renderer2\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      this.isHidden = Boolean(config.hidden);\n      this.alignClass = this.rxButtonBarService.getAlignClass(config.alignment);\n    });\n\n    this.childLayouts = get(\n      this.runtimeCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n      '[0].children'\n    );\n  }\n\n  ngAfterViewInit(): void {\n    const el = this.renderer.selectRootElement(this.elementRef.nativeElement, true);\n\n    if (!isEmpty(this.childLayouts)) {\n      const buttonConfigs = this.childLayouts.map((layout) => layout.config);\n\n      this.ngZone.runOutsideAngular(() => {\n        this.resizeSensor = new ResizeSensor(el, (size) => {\n          this.ngZone.run(() => this.resize$.next(size));\n        });\n      });\n\n      merge(...buttonConfigs, this.resize$)\n        .pipe(\n          map((size: any) => size.width || el.offsetWidth),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe((width: number) => this.onResizeThrottled(width));\n    }\n\n    this.onResize(el.offsetWidth);\n    this.changeDetector.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    if (this.resizeSensor) {\n      this.resizeSensor.detach();\n    }\n  }\n\n  onResize(containerWidth: number): void {\n    let totalButtonsWidth = 0;\n\n    const toggleButtonOffsetWidth = this.dropdownToggleButton\n      ? this.renderer.selectRootElement(this.dropdownToggleButton.nativeElement, true).offsetWidth\n      : 0;\n\n    this.buttonItemsQueryList.forEach((item: ElementRef, index: number) => {\n      totalButtonsWidth += this.renderer.selectRootElement(item.nativeElement, true).offsetWidth;\n\n      const containerFitsButton = Math.floor(containerWidth) >= Math.ceil(totalButtonsWidth) + toggleButtonOffsetWidth;\n\n      this.childLayouts[index].showInDropdown = !containerFitsButton;\n\n      if (\n        !isUndefined(this.childLayouts[index - 1]) &&\n        this.childLayouts.filter((button) => button.showInDropdown).length < 2\n      ) {\n        this.childLayouts[index - 1].showInDropdown = !containerFitsButton;\n      }\n    });\n\n    this.isDropdownVisible = isEmpty(this.childLayouts) ? false : last(this.childLayouts).showInDropdown;\n  }\n\n  trackByFn(index: number, item: IButtonBarChildComponentData): string {\n    return item.guid;\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Button Bar: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<div class=\"button-container\" [ngClass]=\"alignClass\" *ngIf=\"childLayouts && !isHidden\">\n  <div\n    *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\"\n    [ngClass]=\"{ 'nav-item--hidden': buttonLayout.showInDropdown }\"\n  >\n    <rx-runtime-view-canvas-item #buttonItems [layout]=\"buttonLayout\"></rx-runtime-view-canvas-item>\n  </div>\n\n  <div\n    *ngIf=\"isDropdownVisible\"\n    class=\"dropdown\"\n    adaptDropdown\n    [placement]=\"['bottom-right', 'bottom-left', 'bottom', 'top-right', 'top-left', 'top', 'auto']\"\n  >\n    <button\n      class=\"btn btn-secondary rx-toggle\"\n      [attr.id]=\"'rx-' + guid\"\n      type=\"button\"\n      adaptDropdownToggle\n      #dropdownToggle\n    ></button>\n    <div class=\"dropdown-menu\" [attr.aria-labelledby]=\"'rx-' + guid\" adaptDropdownMenu>\n      <ng-container *ngFor=\"let buttonLayout of childLayouts; trackBy: trackByFn\">\n        <rx-button-bar-dropdown-item-component\n          *ngIf=\"buttonLayout.showInDropdown\"\n          [config]=\"buttonLayout.config\"\n          [runtimeViewModelApi]=\"buttonLayout.runtimeViewModelApi\"\n          [guid]=\"buttonLayout.guid\"\n        ></rx-button-bar-dropdown-item-component>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule } from '@bmc-ux/adapt-angular';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ButtonBarComponent } from './button-bar.component';\nimport { ButtonBarDropdownItemComponent } from './components/button-bar-dropdown-item/button-bar-dropdown-item.component';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@NgModule({\n  declarations: [ButtonBarComponent, ButtonBarDropdownItemComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule, AdaptDropdownModule.forRoot()],\n  exports: [ButtonBarComponent],\n  entryComponents: [ButtonBarComponent],\n  providers: [RxButtonBarService]\n})\nexport class ButtonBarModule {}\n","import { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDropPredicateData,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { isEmpty, values } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { RX_BUTTON_BAR, RxButtonBarAlignment } from '../button-bar.types';\nimport { IButtonBarProperties } from './button-bar-design.types';\n\nexport class ButtonBarDesignModel\n  extends ViewDesignerComponentModel<IButtonBarProperties>\n  implements IViewDesignerComponentModel<IButtonBarProperties>\n{\n  hasChildren$: Observable<boolean> = this.sandbox.getChildComponentGuids().pipe(map((guids) => !isEmpty(guids)));\n  componentProperties$ = this.sandbox.componentProperties$;\n\n  static getInitialProperties(initialProperties?: IButtonBarProperties): IButtonBarProperties {\n    return {\n      alignment: RxButtonBarAlignment.Left,\n      name: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n\n    this.componentProperties$.subscribe((props) => {\n      this.validate(props);\n    });\n  }\n\n  dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton;\n  }\n\n  private validate(model: IButtonBarProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(model));\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Button bar.')\n              }\n            },\n            {\n              name: 'alignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Alignment',\n                options: values(RX_BUTTON_BAR.alignmentOptions),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ButtonBarDesignModel } from './button-bar-design.model';\nimport { RxButtonBarService } from '../button-bar.service';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-button-bar-design',\n  templateUrl: './button-bar-design.component.html',\n  styleUrls: ['./button-bar-design.component.scss']\n})\nexport class ButtonBarDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: ButtonBarDesignModel;\n\n  alignment = '';\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private rxButtonBarService: RxButtonBarService) {}\n\n  ngOnInit(): void {\n    this.model.componentProperties$.pipe(takeUntil(this.destroyed$)).subscribe((componentProperties) => {\n      this.alignment = this.rxButtonBarService.getAlignClass(componentProperties.alignment);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<rx-canvas-outlet\n  class=\"button-bar-design-container border\"\n  [class.border-transparent]=\"model.hasChildren$ | async\"\n  [ngClass]=\"alignment\"\n  [dropPredicate]=\"model.dropPredicate\"\n  dropListOrientation=\"horizontal\"\n></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonBarDesignComponent } from './button-bar-design.component';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxButtonBarService } from '../button-bar.service';\n\n@NgModule({\n  imports: [CommonModule, ViewDesignerCanvasModule],\n  declarations: [ButtonBarDesignComponent],\n  entryComponents: [ButtonBarDesignComponent],\n  providers: [RxButtonBarService]\n})\nexport class ButtonBarDesignModule {}\n","import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\nimport { BaseViewComponent, IViewComponentSetProperty } from '@helix/platform/view/runtime';\nimport { takeUntil } from 'rxjs/operators';\nimport { IContainerApi, IContainerConfig } from './container.types';\nimport { Observable, throwError } from 'rxjs';\n\n@Component({\n  selector: 'rx-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.scss']\n})\nexport class ContainerComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  state: IContainerConfig = {};\n\n  api: IContainerApi = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: IContainerConfig) => {\n      this.isHidden = Boolean(config.hidden);\n      this.state = { ...config };\n    });\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.state.hidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else {\n      const componentName = this.renderer.selectRootElement(this.elementRef.nativeElement, true).tagName.toLowerCase();\n\n      return throwError(`${componentName}: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContainerComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  protected componentDefinitionType = RxViewComponentType.Container;\n\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  // converting layout of old view definition into new format\n  adaptDefinition(containerComponentDefinition: IContainerViewComponentDefinition) {\n    this.viewDefinitionParserService\n      .getComponents(containerComponentDefinition)\n      .filter((componentPair) => componentPair.componentDefinition.type === this.componentDefinitionType)\n      .map((componentPair) => componentPair.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.layout) {\n          let layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n\n          if (layout && layout.componentDefinitionId) {\n            const columns = layout.columns.map((column) => {\n              const rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';\n              const columnSpan = column.span || 12;\n              const columnClass = rowWrap === 'xs' ? `col-${columnSpan}` : `col-${rowWrap}-${columnSpan}`;\n              const marginBottomClass = rowWrap !== 'xs' ? `rx-mb-${rowWrap}` : '';\n\n              return {\n                cssClass: `${columnClass} ${marginBottomClass}`,\n                children: column.children.map((child) => child.componentDefinitionId)\n              };\n            });\n\n            layout = {\n              outlets: [\n                {\n                  name: 'DEFAULT',\n                  columns: columns\n                }\n              ]\n            };\n\n            componentDefinition.layout = JSON.stringify(layout);\n          } else if (layout && layout.outlets) {\n            layout.outlets.forEach((outlet) => {\n              outlet.columns\n                .filter((column) => !column.cssClass)\n                .forEach((column) => {\n                  const rowWrap = componentDefinition.propertiesByName.rowWrap || 'sm';\n                  const columnSpan = column.span || 12;\n                  const columnClass = rowWrap === 'xs' ? `col-${columnSpan}` : `col-${rowWrap}-${columnSpan}`;\n                  const marginBottomClass = rowWrap !== 'xs' ? `rx-mb-${rowWrap}` : '';\n\n                  column.cssClass = `${columnClass} ${marginBottomClass}`;\n                });\n            });\n\n            componentDefinition.layout = JSON.stringify(layout);\n          }\n        }\n      });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ContainerComponentDefinitionAdapterService } from './container-component-definition-adapter.service';\nimport { ContainerComponent } from './container.component';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [ContainerComponent],\n  exports: [ContainerComponent],\n  entryComponents: [ContainerComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule]\n})\nexport class ContainerModule {\n  constructor(\n    private containerComponentDefinitionAdapterService: ContainerComponentDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Container,\n      this.containerComponentDefinitionAdapterService\n    );\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Inject,\n  Output,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport {\n  CanvasItemApi,\n  CanvasItemContainerComponent,\n  CanvasOutletHelperService,\n  ViewDesignerCanvasItemApiToken\n} from '@helix/platform/view/designer';\nimport { IOutputData } from 'angular-split/lib/interface';\nimport { SplitComponent } from 'angular-split';\n\n@Component({\n  selector: 'rx-container-canvas-item',\n  templateUrl: './container-canvas-item.component.html',\n  styleUrls: ['./container-canvas-item.component.scss']\n})\nexport class ContainerCanvasItemComponent extends CanvasItemContainerComponent implements AfterViewInit {\n  @ViewChild(SplitComponent, { static: true })\n  private splitComponent: SplitComponent;\n\n  private readonly maxNumberOfColumns = 12;\n  private readonly defaultGutterStep = 50;\n\n  percentSpanSize = 100 / this.maxNumberOfColumns;\n  gutterStep = this.defaultGutterStep;\n\n  @Output()\n  columnResize: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n  constructor(\n    @Inject(ViewDesignerCanvasItemApiToken) protected canvasItemApi: CanvasItemApi,\n    protected canvasOutletHelperService: CanvasOutletHelperService,\n    protected elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2\n  ) {\n    super(canvasItemApi, canvasOutletHelperService);\n  }\n\n  @HostListener('window:resize')\n  onWindowResize(): void {\n    this.setGutterStep();\n  }\n\n  ngAfterViewInit(): void {\n    const spans = this.outlet.columns.map((column) => column.span);\n    this.setSpanSizes(spans);\n    this.setGutterStep();\n  }\n\n  onDragEnd(event: IOutputData): void {\n    const spans = this.getPercentToSpanSizes(event.sizes as number[]);\n\n    this.columnResize.emit(spans);\n\n    this.setSpanSizes(spans);\n  }\n\n  getPercentToSpanSizes(percentSizes: number[]): number[] {\n    return percentSizes.map((size) => Math.round((size * this.maxNumberOfColumns) / 100));\n  }\n\n  setSpanSizes(spans: number[]): void {\n    this.splitComponent.setVisibleAreaSizes(this.getSpanToPercentSizes(spans));\n  }\n\n  private getSpanToPercentSizes(spans: number[]): number[] {\n    return spans.map((span) => span * this.percentSpanSize);\n  }\n\n  private setGutterStep(): void {\n    const element = this.renderer.selectRootElement(this.elementRef.nativeElement, true);\n\n    this.gutterStep = Math.round(element.clientWidth / this.maxNumberOfColumns) || this.defaultGutterStep;\n  }\n}\n","<as-split\n  unit=\"percent\"\n  [class.selected]=\"layout.isSelected$ | async\"\n  [class.readonly]=\"isReadOnly\"\n  [gutterStep]=\"gutterStep\"\n  gutterSize=\"1\"\n  (dragEnd)=\"onDragEnd($event)\"\n>\n  <as-split-area\n    *ngFor=\"\n      let column of outlet.columns;\n      trackBy: trackByColFn;\n      let colIndex = index;\n      let first = first;\n      let last = last\n    \"\n    minSize=\"8\"\n  >\n    <rx-canvas-item-column\n      [isReadOnly]=\"isReadOnly\"\n      [colIndex]=\"colIndex\"\n      [column]=\"column\"\n      [layout]=\"layout\"\n      (dropListDropped)=\"onDropListDropped($event)\"\n    ></rx-canvas-item-column>\n  </as-split-area>\n</as-split>\n","export enum ContainerRowWrap {\n  Xs = 'xs',\n  Sm = 'sm',\n  Md = 'md',\n  Lg = 'lg',\n  Xl = 'xl',\n  Xxl = 'xxl'\n}\n","import { ContainerRowWrap } from './container.types';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\nexport const RX_CONTAINER = {\n  type: RxViewComponentType.Container,\n  maxColumnSpan: 12,\n  rowWrapOptions: {\n    xs: {\n      id: ContainerRowWrap.Xs,\n      name: 'Extra Small (No wrapping)'\n    },\n    sm: {\n      id: ContainerRowWrap.Sm,\n      name: 'Small (576 px)'\n    },\n    md: {\n      id: ContainerRowWrap.Md,\n      name: 'Medium (768 px)'\n    },\n    lg: {\n      id: ContainerRowWrap.Lg,\n      name: 'Large (992 px)'\n    },\n    xl: {\n      id: ContainerRowWrap.Xl,\n      name: 'Extra Large (1200 px)'\n    },\n    xxl: {\n      id: ContainerRowWrap.Xxl,\n      name: 'Extra Extra Large (1600 px)'\n    }\n  }\n};\n","import { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  ITagAutocompleteValue,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getHiddenFieldInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { isEmpty, times, values } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, skip, take, takeUntil } from 'rxjs/operators';\nimport { RX_CONTAINER } from '../container.constant';\nimport { ContainerRowWrap } from '../container.types';\nimport { IContainerProperties } from './container-design.types';\n\nconst cssClassesAutocompleteValues = RX_VIEW_DEFINITION.styles.map(\n  (style): ITagAutocompleteValue => ({ text: style.name, data: { value: style.id } })\n);\n\nexport class ContainerDesignModel\n  extends ViewDesignerComponentModel<IContainerProperties>\n  implements IViewDesignerComponentModel<IContainerProperties>\n{\n  componentProperties$ = this.sandbox.componentProperties$;\n  hasChildren$: Observable<boolean> = this.sandbox.getChildComponentGuids().pipe(map((guids) => !isEmpty(guids)));\n\n  static getInitialProperties(initialProperties?: IContainerProperties): IContainerProperties {\n    return {\n      name: null,\n      rowWrap: ContainerRowWrap.Sm,\n      columnCount: '1',\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.componentProperties$.subscribe((componentProperties) => this.validate(componentProperties));\n\n    this.sandbox\n      .getComponentPropertyValue('columnCount')\n      .pipe(skip(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe((columnCount) => {\n        this.sandbox.setLayout(this.getDefaultColumnSpans(Number(columnCount)));\n      });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private validate(model: IContainerProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(model));\n  }\n\n  getPropertiesByName(properties: IContainerProperties): IContainerProperties {\n    const result = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  setContainerLayout(columnSizes: number[]): void {\n    this.sandbox.setLayout(columnSizes);\n  }\n\n  private getDefaultColumnSpans(columnCount: number): number[] {\n    const columnSpans: number[] = [];\n    const span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);\n\n    times(columnCount, () => columnSpans.push(span));\n    columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;\n\n    return columnSpans;\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Container.')\n              }\n            },\n            {\n              name: 'columnCount',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Number of columns',\n                required: true,\n                tooltip: new Tooltip(\n                  'Resize container columns on the canvas by dragging the dashed column separator line.'\n                ),\n                options: times(6, (index: number) => ({ id: (++index).toString(), name: index.toString() }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'rowWrap',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Row wrap',\n                sortAlphabetically: false,\n                options: values(RX_CONTAINER.rowWrapOptions),\n                tooltip: new Tooltip(\n                  `The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.`\n                )\n              } as ISelectFormControlOptions\n            },\n            getHiddenFieldInspectorConfig(),\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig(cssClassesAutocompleteValues)\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { AfterViewInit, Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { CanvasOutletComponent } from '@helix/platform/view/designer';\nimport { ContainerCanvasItemComponent } from './container-canvas-item.component';\nimport { ContainerDesignModel } from './container-design.model';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-container-design',\n  templateUrl: './container-design.component.html',\n  styleUrls: ['./container-design.component.scss']\n})\nexport class ContainerDesignComponent implements OnDestroy, AfterViewInit {\n  @Input()\n  model: ContainerDesignModel;\n\n  @ViewChild(CanvasOutletComponent, { static: true })\n  canvasOutletComponent: CanvasOutletComponent;\n\n  containerCanvasItemComponent = ContainerCanvasItemComponent;\n\n  protected destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  ngAfterViewInit() {\n    this.canvasOutletComponent.containerComponentInstance.columnResize\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((columnSizes) => {\n        this.model.setContainerLayout(columnSizes);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<rx-canvas-outlet\n  class=\"border d-block\"\n  [class.has-children]=\"model.hasChildren$ | async\"\n  [containerComponent]=\"containerCanvasItemComponent\"\n></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxActionButtonService } from '../../action-button/action-button.service';\nimport { ContainerDesignComponent } from './container-design.component';\nimport { ContainerCanvasItemComponent } from './container-canvas-item.component';\nimport { AngularSplitModule } from 'angular-split';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\n@NgModule({\n  imports: [CommonModule, ViewDesignerCanvasModule, AngularSplitModule, DragDropModule],\n  declarations: [ContainerDesignComponent, ContainerCanvasItemComponent],\n  entryComponents: [ContainerDesignComponent, ContainerCanvasItemComponent],\n  providers: [RxActionButtonService]\n})\nexport class ContainerDesignModule {}\n","import { RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport const RECORD_EDITOR = {\n  type: RxViewComponentType.RecordEditor,\n\n  fieldTypes: {\n    [RX_RECORD_DEFINITION.resourceTypes.character]: RxViewComponentType.Character,\n    [RX_RECORD_DEFINITION.resourceTypes.dateTime]: RxViewComponentType.DateTime,\n    [RX_RECORD_DEFINITION.resourceTypes.selection]: RxViewComponentType.Selection,\n    [RX_RECORD_DEFINITION.resourceTypes.timeOnly]: RxViewComponentType.Time,\n    [RX_RECORD_DEFINITION.resourceTypes.dateOnly]: RxViewComponentType.Date,\n    [RX_RECORD_DEFINITION.resourceTypes.boolean]: RxViewComponentType.Boolean,\n    [RX_RECORD_DEFINITION.resourceTypes.attachment]: RxViewComponentType.Attachment,\n    [RX_RECORD_DEFINITION.resourceTypes.integer]: RxViewComponentType.Integer,\n    [RX_RECORD_DEFINITION.resourceTypes.real]: RxViewComponentType.Floating,\n    [RX_RECORD_DEFINITION.resourceTypes.decimal]: RxViewComponentType.Decimal,\n    [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter]: RxViewComponentType.LocalizedCharacter\n  }\n};\n\nexport enum RecordEditorMode {\n  Create = 'CREATE',\n  Edit = 'EDIT',\n  BulkEdit = 'BULK EDIT',\n  Temporary = 'TEMPORARY'\n}\n\nexport enum RecordEditorState {\n  Read = 'READ',\n  Edit = 'EDIT'\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { groupBy, isEmpty, reduce, xor } from 'lodash';\nimport { RxStringService } from '@helix/platform/utils';\nimport { RecordFieldOption } from '@helix/platform/record/api';\nimport { IAvailableFieldsGroup, IFieldSelectorConfig } from './field-selector.types';\nimport { IRecordFieldDefinitionItem } from '../fields-inspector-widget.types';\n\ninterface ModelObject {\n  [id: string]: boolean;\n}\n\n@Component({\n  templateUrl: './field-selector.component.html',\n  styleUrls: ['./field-selector.component.scss']\n})\nexport class FieldSelectorComponent implements OnInit {\n  searchQuery: string;\n  selectedFieldIdsModel: ModelObject = {};\n  availableFieldGroups: IAvailableFieldsGroup[] = [];\n  hideSystemFields = false;\n  isApplyButtonDisabled = true;\n\n  private selectedFieldDefinitionIds: string[] = [];\n  private availableFieldDefinitions: IRecordFieldDefinitionItem[] = [];\n\n  constructor(public context: ActiveModalRef, private stringService: RxStringService) {}\n\n  ngOnInit(): void {\n    const data: IFieldSelectorConfig = this.context.getData();\n\n    this.availableFieldDefinitions = data.availableFields;\n    this.selectedFieldDefinitionIds = data.selectedFieldIds;\n    this.hideSystemFields = Boolean(data.hideSystemFields);\n\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions);\n    this.selectedFieldIdsModel = this.idsToModel(this.selectedFieldDefinitionIds);\n  }\n\n  closeModal(): void {\n    this.context.close(this.modelToIds(this.selectedFieldIdsModel));\n  }\n\n  search(searchQuery: string): void {\n    this.availableFieldGroups = this.groupFieldsByFieldOption(this.availableFieldDefinitions)\n      .map((fieldGroup) => ({\n        ...fieldGroup,\n        fields: fieldGroup.fields.filter((field) => this.stringService.caseInsensitiveSearch(field.name, searchQuery))\n      }))\n      .filter((fieldGroup) => !isEmpty(fieldGroup.fields));\n  }\n\n  select(groupName: string): void {\n    if (groupName === 'all') {\n      const ids = this.availableFieldDefinitions\n        .filter((recordField) => {\n          return recordField.fieldOption !== RecordFieldOption.System || !this.hideSystemFields;\n        })\n        .map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = this.idsToModel(ids);\n    } else {\n      const ids = this.availableFieldGroups\n        .find((group) => group.groupLabel === groupName)\n        .fields.map((recordField) => recordField.id);\n\n      this.selectedFieldIdsModel = {\n        ...this.selectedFieldIdsModel,\n        ...this.idsToModel(ids)\n      };\n    }\n\n    this.updateApplyButtonDisabledStatus();\n  }\n\n  updateApplyButtonDisabledStatus(): void {\n    this.isApplyButtonDisabled = !xor(this.selectedFieldDefinitionIds, this.modelToIds(this.selectedFieldIdsModel))\n      .length;\n  }\n\n  groupFieldsByFieldOption(availableFields: IRecordFieldDefinitionItem[]): IAvailableFieldsGroup[] {\n    const groups = groupBy(availableFields, 'fieldOption');\n    const groupTypes = [RecordFieldOption.Required, RecordFieldOption.Optional];\n\n    if (!this.hideSystemFields) {\n      groupTypes.push(RecordFieldOption.System);\n    }\n\n    return groupTypes\n      .filter((groupType) => groups[groupType])\n      .map((groupType) => ({\n        groupLabel: `${this.stringService.prettify(groupType)} fields`,\n        selectAllFieldsInGroupButtonLabel: `Select all ${groupType.toLowerCase()} fields`,\n        fields: groups[groupType].map(({ id, name }) => ({ id, name })).sort((a, b) => a.name.localeCompare(b.name))\n      }));\n  }\n\n  trackByLabel(index: number, item: IAvailableFieldsGroup): string {\n    return item.groupLabel;\n  }\n\n  trackById(index: number, item: IRecordFieldDefinitionItem): string {\n    return item.id;\n  }\n\n  private idsToModel(ids: string[], selected = true): ModelObject {\n    return ids.filter(Boolean).reduce((result, id) => {\n      result[id] = selected;\n\n      return result;\n    }, {});\n  }\n\n  private modelToIds(model: ModelObject): string[] {\n    return reduce(\n      model,\n      (result, value, id) => {\n        if (value) {\n          result.push(id);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n}\n","<div class=\"modal-header pr-0\">\n  <h5 class=\"modal-title pl-0 mr-auto\">Quick edit fields</h5>\n\n  <button\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"apply-button\"\n    (click)=\"closeModal()\"\n    [disabled]=\"isApplyButtonDisabled\"\n    class=\"mr-5\"\n  >\n    Apply\n  </button>\n\n  <button\n    class=\"close my-1\"\n    adapt-button\n    type=\"button\"\n    size=\"small\"\n    btn-type=\"tertiary\"\n    (click)=\"context.dismiss(0)\"\n    rx-id=\"x-button\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"body-controls\">\n    <adapt-button btn-type=\"tertiary\" rx-id=\"select-all-button\" class=\"pl-0\" (click)=\"select('all')\">\n      Select all\n    </adapt-button>\n\n    <adapt-rx-textfield\n      [placeholder]=\"'Search fields'\"\n      [ngModel]=\"searchQuery\"\n      [attr.rx-id]=\"'search-field'\"\n      (ngModelChange)=\"search($event)\"\n      class=\"form-group\"\n    >\n    </adapt-rx-textfield>\n  </div>\n\n  <div class=\"rx-record-definition-fields\">\n    <div\n      class=\"rx-record-definition-field-group\"\n      *ngFor=\"let availableFieldsGroup of availableFieldGroups; trackBy: trackByLabel\"\n    >\n      <div class=\"font-weight-bold\">\n        {{ availableFieldsGroup.groupLabel }}\n      </div>\n\n      <adapt-button btn-type=\"tertiary\" class=\"py-0 pl-0\" (click)=\"select(availableFieldsGroup.groupLabel)\">\n        {{ availableFieldsGroup.selectAllFieldsInGroupButtonLabel }}\n      </adapt-button>\n\n      <div class=\"checkbox\" *ngFor=\"let availableField of availableFieldsGroup.fields; trackBy: trackById\">\n        <label>\n          <input\n            type=\"checkbox\"\n            [(ngModel)]=\"selectedFieldIdsModel[availableField.id]\"\n            (ngModelChange)=\"updateApplyButtonDisabledStatus()\"\n          />\n\n          <span class=\"checkbox__item\">{{ availableField.name }}</span>\n        </label>\n      </div>\n    </div>\n\n    <div *ngIf=\"availableFieldGroups.length === 0\">No Fields Found</div>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Injector,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AdaptModalService } from '@bmc-ux/adapt-angular';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IFormFocusable } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { combineLatest } from 'rxjs';\nimport { concatMap, take } from 'rxjs/operators';\nimport { RecordEditorDesignModel } from '../../record-editor-design.model';\nimport { FieldSelectorComponent } from './field-selector/field-selector.component';\nimport { IFieldSelectorConfig } from './field-selector/field-selector.types';\nimport { IRecordEditorFieldsControlOptions } from './fields-inspector-widget.types';\n\n@Component({\n  selector: 'rx-fields-inspector-widget',\n  templateUrl: './fields-inspector-widget.component.html',\n  styleUrls: ['./fields-inspector-widget.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FieldsInspectorWidgetComponent\n  extends InspectorWidgetBase<IRecordEditorFieldsControlOptions, RecordEditorDesignModel>\n  implements IFormFocusable\n{\n  @HostBinding('class.rx-record-definition-fields')\n  encapsulateClass = true;\n\n  @ViewChild('openModalButton', { read: ElementRef, static: true })\n  openModalButton: ElementRef;\n\n  constructor(injector: Injector, private adaptModalService: AdaptModalService, private renderer: Renderer2) {\n    super(injector);\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();\n  }\n\n  openModal(): void {\n    combineLatest([\n      this.designerItemModel.childFieldIds$,\n      this.designerItemModel.recordFieldDefinitionItems$,\n      this.designerItemModel.isExtensionView$,\n      this.designerItemModel.associationDefinitionName$\n    ])\n      .pipe(\n        take(1),\n        concatMap(([selectedFieldIds, availableFields, isExtensionView, associationDefinitionName]) =>\n          this.adaptModalService.open({\n            content: FieldSelectorComponent,\n            data: {\n              selectedFieldIds,\n              availableFields:\n                isExtensionView && associationDefinitionName\n                  ? availableFields.filter(\n                      (field) => field.resourceType !== RX_RECORD_DEFINITION.resourceTypes.attachment\n                    )\n                  : availableFields,\n              hideSystemFields: this.options.hideSystemFields\n            } as IFieldSelectorConfig,\n            size: 'sm',\n            hideBackdrop: false,\n            customClass: 'rx-record-editor-field-selector-modal'\n          })\n        )\n      )\n      .subscribe((selectedFieldIds) => {\n        this.designerItemModel.updateSelectedFieldComponents(selectedFieldIds);\n      });\n  }\n\n  removeField(guid: string): void {\n    this.designerItemModel.removeComponent([guid]);\n  }\n\n  trackByGuid<T extends { guid: string }>(index: number, item: T): string {\n    return item.guid;\n  }\n}\n","<adapt-button\n  btn-type=\"tertiary\"\n  #openModalButton\n  rx-id=\"open-modal-button\"\n  class=\"px-0 py-0\"\n  (click)=\"openModal()\"\n  [hidden]=\"options.isDisabled\"\n>\n  <span class=\"d-icon-plus_circle\"></span>\n  Quick edit fields\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"(designerItemModel.selectedFieldComponents$ | async).length === 0\" class=\"text-tertiary\"\n    >No fields added.</span\n  >\n</div>\n\n<div class=\"mt-2\">\n  <div\n    class=\"rx-field-item\"\n    *ngFor=\"let field of designerItemModel.selectedFieldComponents$ | async; trackBy: trackByGuid\"\n  >\n    <div>\n      <div class=\"rx-field-name\">{{ field.label }}</div>\n\n      <div class=\"rx-field-type\">\n        <small>{{ field.componentName }}</small>\n      </div>\n    </div>\n\n    <div class=\"rx-action-button\">\n      <span\n        *ngIf=\"!options.isDisabled\"\n        (click)=\"removeField(field.guid)\"\n        class=\"d-icon-cross btn-link\"\n        rx-id=\"delete-button\"\n      >\n      </span>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { EMPTY, from, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { RECORD_EDITOR, RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps\n} from '@helix/platform/view/designer';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  OptionalExpressionInspectorControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { flow, get, inRange, isEmpty, isFinite, isNil, omit, omitBy } from 'lodash';\nimport {\n  IRecordEditorFieldsControlOptions,\n  IRecordFieldDefinitionItem\n} from './components/fields-inspector-widget/fields-inspector-widget.types';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { FieldsInspectorWidgetComponent } from './components/fields-inspector-widget/fields-inspector-widget.component';\nimport { IPlainObject, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDefinition,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RX_ASSOCIATION_DEFINITION, RxAssociationDefinitionDataPageService } from '@helix/platform/association/api';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\n\n@Injectable()\nexport class RxRecordEditorDesignHelpersService {\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  getRecordFieldDefinitionItems(recordDefinition: IRecordDefinition): IRecordFieldDefinitionItem[] {\n    return recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n      id: String(fieldDefinition.id),\n      name: fieldDefinition.name,\n      resourceType: fieldDefinition.resourceType,\n      fieldOption: fieldDefinition.fieldOption,\n      viewComponentType: this.getViewComponentType(fieldDefinition)\n    }));\n  }\n\n  getViewComponentType(fieldDefinition: IFieldDefinition): string {\n    let viewComponentType = RECORD_EDITOR.fieldTypes[fieldDefinition.resourceType];\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character) {\n      viewComponentType =\n        fieldDefinition.namedListDefinition || inRange(fieldDefinition.maxLength, 1, 255)\n          ? RxViewComponentType.Character\n          : RxViewComponentType.Textarea;\n    }\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.real) {\n      viewComponentType = RxViewComponentType.Decimal;\n    }\n\n    return viewComponentType;\n  }\n\n  getComponentProperties(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    const requiredPropertyNames = ['recordDefinitionName', 'mode', 'allowEdit'];\n\n    return flow(\n      // Remove design properties.\n      (props: IRecordEditorDesignProperties) => omit(props, 'showReadOnlyState'),\n      // Remove optional properties with empty values.\n      (props: IRecordEditorProperties) =>\n        omitBy(\n          props,\n          (propertyValue, propertyName) =>\n            !requiredPropertyNames.includes(propertyName) && (isNil(propertyValue) || propertyValue === '')\n        )\n    )(properties) as IRecordEditorProperties;\n  }\n\n  getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService\n        .getRecordDefinition(recordDefinitionName)\n        .pipe(catchError((error) => EMPTY));\n    } else {\n      return of(null);\n    }\n  }\n\n  validate(\n    sandbox: IViewComponentDesignSandbox,\n    properties: IRecordEditorProperties,\n    recordDefinition: IRecordDefinition,\n    childFieldIds: string[],\n    isAssociationRequired = false,\n    isExtensionView = false\n  ): IViewComponentDesignValidationIssue[] {\n    const validationIssues: IViewComponentDesignValidationIssue[] = [];\n\n    if (!properties.recordDefinitionName) {\n      validationIssues.push(sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName'));\n    }\n\n    if (isAssociationRequired && properties.recordDefinitionName && !properties.associationDefinitionName) {\n      validationIssues.push(sandbox.createError('Association to use cannot be blank.', 'associationDefinitionName'));\n    }\n\n    if (!isExtensionView && properties.mode === RecordEditorMode.Edit && !properties.recordInstanceId) {\n      validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordInstanceId'));\n    }\n\n    if (recordDefinition && properties.recordDefinitionName && properties.mode === RecordEditorMode.Create) {\n      // Add warning for Join Record Definition case\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) {\n        validationIssues.push(\n          sandbox.createWarning(\n            `You have configured a record editor to create join record instances.\n                        Please ensure that one or more processes or rules have been defined to perform the creation\n                        of the join record instance.`,\n            undefined,\n            true\n          )\n        );\n      }\n\n      // System fields in 'CREATE' mode cannot be chosen\n      const systemFieldNames = childFieldIds\n        .map((selectedFieldId) =>\n          recordDefinition.fieldDefinitions.find((fieldDefinition) => fieldDefinition.id === Number(selectedFieldId))\n        )\n        .filter(this.rxFieldDefinitionService.isSystemField)\n        .map((fieldDefinition) => fieldDefinition.name);\n\n      if (systemFieldNames.length) {\n        validationIssues.push(\n          sandbox.createError(\n            `System fields (${systemFieldNames.join(', ')}) cannot be present when Record editor is in Create mode.`\n          )\n        );\n      }\n\n      // Required fields without default value must be included when in 'CREATE' mode.\n      // When in extension view, this validation is only needed when the Record Editor\n      // is bound to an associated record, i.e. not the same record as the target Record Editor,\n      // which should already contain all such fields.\n      if (!isExtensionView || properties.associationDefinitionName) {\n        const requiredFieldsWithoutDefaultValues = recordDefinition.fieldDefinitions.filter((fieldDefinition) => {\n          const isLocalizedCharacterField =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter;\n\n          const hasDefaultValue =\n            fieldDefinition.defaultValue ||\n            isFinite(fieldDefinition.defaultValue) ||\n            (isLocalizedCharacterField && !isEmpty(fieldDefinition.defaultValueByLocale));\n\n          return fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required && !hasDefaultValue;\n        });\n\n        const requiredFieldNames = requiredFieldsWithoutDefaultValues\n          .filter((fieldDefinition) => !childFieldIds.includes(String(fieldDefinition.id)))\n          .map((fieldDefinition) => fieldDefinition.name);\n\n        if (requiredFieldNames.length) {\n          validationIssues.push(sandbox.createError(`Required fields are missing: ${requiredFieldNames.join(', ')}.`));\n        }\n      }\n    }\n\n    validationIssues.push(...validateStandardProps(properties));\n\n    return validationIssues;\n  }\n\n  getViewDefinition(viewDefinitionName: string): Observable<IViewDefinition> {\n    if (viewDefinitionName) {\n      return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(catchError(() => of(null)));\n    } else {\n      return of(null);\n    }\n  }\n\n  getInspector(\n    recordDefinitionName: string,\n    mode: RecordEditorMode,\n    showReadOnlyState: boolean,\n    recordFieldDefinitionItems: IRecordFieldDefinitionItem[] = [],\n    isExtensionView = false,\n    associationOptions: ISelectOption[] = [],\n    isAssociationRequired: boolean = false,\n    onBeforeModeChange: () => Promise<boolean>\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Record editor.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.StandardDataRecord,\n                required: true,\n\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue)) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'All view components will be removed from the Record editor. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                }\n              }\n            },\n            {\n              name: 'mode',\n              component: GroupButtonFormControlComponent,\n              options: {\n                label: 'Mode',\n                tooltip: new Tooltip(\n                  '<b>Record editor modes:</b><br><ul><li>Create mode is for creating new records.</li><li>Edit mode is for updating records.</li><li>Temporary mode is for holding data that does not need to be saved.</li></ul>'\n                ),\n                required: true,\n                items: [\n                  {\n                    name: 'Create',\n                    value: RecordEditorMode.Create\n                  },\n                  {\n                    name: 'Edit',\n                    value: RecordEditorMode.Edit\n                  },\n                  {\n                    name: 'Temporary',\n                    value: RecordEditorMode.Temporary\n                  }\n                ],\n                beforeValueChange: onBeforeModeChange\n              }\n            }\n          ]\n        }\n      ]\n    };\n\n    const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n    if (mode === RecordEditorMode.Edit && !isExtensionView) {\n      generalSectionControls.push({\n        name: 'recordInstanceId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Record ID',\n          tooltip: new Tooltip('Enter the record ID of the record that the users need to edit.'),\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      generalSectionControls.push({\n        name: 'showReadOnlyState',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable read state'\n        } as ISwitcherFormControlOptions\n      });\n\n      if (showReadOnlyState) {\n        generalSectionControls.push({\n          name: 'defaultState',\n          component: GroupButtonFormControlComponent,\n          options: {\n            label: 'Default state',\n            items: [\n              {\n                name: 'Read',\n                value: RecordEditorState.Read\n              },\n              {\n                name: 'Edit',\n                value: RecordEditorState.Edit\n              }\n            ]\n          } as IGroupButtonFormControlOptions\n        });\n      }\n\n      generalSectionControls.push({\n        name: 'allowEdit',\n        component: OptionalExpressionInspectorControlComponent,\n        options: {\n          label: 'Allow edit'\n        } as IOptionalExpressionInspectorControlOptions\n      });\n    }\n\n    generalSectionControls.push(getAvailableOnDevicesInspectorConfig(), getStylesFieldInspectorConfig());\n\n    if (isExtensionView) {\n      generalSectionControls.splice(1, 0, {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Display label',\n          tooltip: new Tooltip(\n            `Enter a Display label for the Record editor. When this view is injected into the view to extend,\n              the Display label will be shown above the Record editor's fields. If a Display label is not defined,\n              the name of the source application or library will be shown above the fields.`\n          )\n        }\n      });\n\n      if (recordDefinitionName) {\n        generalSectionControls.splice(3, 0, {\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: associationOptions,\n            emptyOption: !isAssociationRequired,\n            required: isAssociationRequired\n          } as ISelectFormControlOptions\n        });\n      }\n    }\n\n    const formContentsSection = {\n      label: 'Form contents',\n      controls: [\n        {\n          component: FieldsInspectorWidgetComponent,\n          options: {\n            label: 'Selected fields',\n            hideSystemFields: mode === RecordEditorMode.Create\n          } as IRecordEditorFieldsControlOptions\n        }\n      ]\n    };\n\n    if (recordDefinitionName) {\n      inspectorConfig.inspectorSectionConfigs.push(formContentsSection);\n    }\n\n    return inspectorConfig;\n  }\n\n  getAssociationOptions(\n    firstRecordDefinitionName: string,\n    secondRecordDefinitionName: string\n  ): Observable<ISelectOption[]> {\n    if (firstRecordDefinitionName && secondRecordDefinitionName) {\n      return this.getAssociations(firstRecordDefinitionName, secondRecordDefinitionName).pipe(\n        map((res) =>\n          res.data\n            .filter((association) => association.nodeAId === firstRecordDefinitionName)\n            .map((association) => ({\n              id: association.name,\n              name: this.rxDefinitionNameService.getDisplayName(association.name)\n            }))\n        )\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  getAssociations(firstRecordDefinitionName: string, secondRecordDefinitionName: string): Observable<any> {\n    return this.rxAssociationDefinitionDataPageService.get({\n      params: {\n        propertySelection: ['name', 'scope', 'nodeAId'],\n        firstRecordDefinitionName: firstRecordDefinitionName,\n        secondRecordDefinitionName: secondRecordDefinitionName,\n        cardinality: RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,\n        nodeAModality: RX_ASSOCIATION_DEFINITION.modality.required,\n        shouldCascadeDelete: true\n      },\n      headers: { 'default-bundle-scope': '' }\n    });\n  }\n\n  getTargetRecordEditorProperties(viewDefinition: IViewDefinition, targetExtensionContainerGuid: string): IPlainObject {\n    let targetRecordEditor;\n\n    if (viewDefinition && targetExtensionContainerGuid) {\n      targetRecordEditor = this.rxViewDefinitionParserService.findParentComponentDefinition(\n        viewDefinition,\n        { guid: targetExtensionContainerGuid },\n        (definition) => definition.type === RxViewComponentType.RecordEditor\n      );\n    }\n\n    return get(targetRecordEditor, 'propertiesByName', {});\n  }\n\n  confirmSystemFieldRemoval(): Observable<boolean> {\n    return from(\n      this.rxModalService.confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'System fields will be removed. Do you want to continue?'\n      })\n    );\n  }\n\n  getSystemFieldModelGuids(\n    plainFieldModels: IViewComponentDesignData<IBaseRecordEditorFieldProperties>[],\n    recordDefinition: IRecordDefinition\n  ): string[] {\n    if (!isEmpty(plainFieldModels)) {\n      return plainFieldModels.reduce(\n        (systemFieldGuids: string[], model: IViewComponentDesignData<IBaseRecordEditorFieldProperties>) => {\n          const fieldDefinition = recordDefinition.fieldDefinitions.find(\n            (definition) => String(definition.id) === model.data.fieldId\n          );\n\n          if (this.rxFieldDefinitionService.isSystemField(fieldDefinition)) {\n            systemFieldGuids.push(model.guid);\n          }\n\n          return systemFieldGuids;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  isFieldComponent(component: IViewComponentDesignData): boolean {\n    return (\n      ![\n        RxViewComponentType.Action,\n        RxViewComponentType.ActionButton,\n        RxViewComponentType.Association,\n        RxViewComponentType.AssociatedRecordField\n      ].includes(component.type as RxViewComponentType) &&\n      Boolean(\n        this.rxViewComponentRegistryService.get(component.type).properties.find((prop) => prop.name === 'fieldId')\n      )\n    );\n  }\n}\n","import {\n  ViewComponentAddComponentPayload,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDropPredicateData,\n  ViewDesignerComponentModel,\n  IViewDesignerInspectorConfig\n} from '@helix/platform/view/designer';\nimport { IDataDictionaryBranch, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { ISelectOption } from '@helix/platform/shared/components';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { combineLatest, forkJoin, Observable, of, Subject } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { flow, isEqual, map as _map, reject, uniq } from 'lodash';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxRecordEditorDesignHelpersService } from './record-editor-design-helpers.service';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { IRecordEditorSelectedFieldComponent } from './components/fields-inspector-widget/fields-inspector-widget.types';\n\nexport class RecordEditorDesignModel\n  extends ViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n  implements IViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties>\n{\n  private rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  private rxViewComponentRegistryService =\n    this.injector.get<RxViewComponentRegistryService>(RxViewComponentRegistryService);\n\n  private rxRecordEditorDesignHelpersService = this.injector.get<RxRecordEditorDesignHelpersService>(\n    RxRecordEditorDesignHelpersService\n  );\n\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  private updateInspector$ = new Subject<IViewDesignerInspectorConfig>();\n\n  private associationOptions$: Observable<ISelectOption[]>;\n  private isAssociationRequired$: Observable<boolean>;\n\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  private mode$ = this.sandbox.getComponentPropertyValue('mode');\n  private showReadOnlyState$ = this.sandbox.getComponentPropertyValue('showReadOnlyState');\n  private targetExtensionContainerGuid$ = this.sandbox.getViewPropertyValue('targetExtensionContainerGuid');\n  private targetViewDefinitionName$ = this.sandbox.getViewPropertyValue('targetViewDefinitionName');\n\n  private recordDefinition$ = this.recordDefinitionName$.pipe(\n    switchMap((name) => this.rxRecordEditorDesignHelpersService.getRecordDefinition(name)),\n    shareReplay(1)\n  );\n\n  private childComponentGuids$ = this.sandbox.getChildComponentGuids().pipe(shareReplay(1));\n\n  private allChildFieldComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => this.rxRecordEditorDesignHelpersService.isFieldComponent(component), true)\n    .pipe(distinctUntilChanged<string[]>(isEqual), shareReplay(1));\n\n  isExtensionView$ = this.targetViewDefinitionName$.pipe(map(Boolean), shareReplay(1));\n\n  childFieldIds$: Observable<string[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid)\n            )\n          ).pipe(map(uniq))\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  selectedFieldComponents$: Observable<IRecordEditorSelectedFieldComponent[]> = this.allChildFieldComponentGuids$.pipe(\n    switchMap((guids) =>\n      guids.length\n        ? combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.sandbox.getComponent(guid).pipe(\n                  take(1),\n                  map((component) => this.rxViewComponentRegistryService.get(component.type).name)\n                ),\n                this.sandbox.getComponentPropertyValue<'fieldId', IBaseRecordEditorFieldProperties>('fieldId', guid),\n                this.sandbox.getComponentPropertyValue<'label', IBaseRecordEditorFieldProperties>('label', guid)\n              ]).pipe(\n                map(\n                  ([componentName, fieldId, label]): IRecordEditorSelectedFieldComponent => ({\n                    fieldId,\n                    label: label || '<No field selected>',\n                    componentName,\n                    guid\n                  })\n                )\n              )\n            )\n          )\n        : of([])\n    ),\n    shareReplay(1)\n  );\n\n  associationComponentGuids$ = this.sandbox\n    .getChildComponentGuids((component) => component.type === RxViewComponentType.Association, true)\n    .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n\n  hasChildren$ = this.childComponentGuids$.pipe(\n    map((guids) => Boolean(guids.length)),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  readonly systemFieldComponentGuids$ = this.recordDefinition$.pipe(\n    mergeMap((recordDefinition) =>\n      recordDefinition\n        ? this.selectedFieldComponents$.pipe(\n            map((components) =>\n              components\n                .filter((component) => {\n                  const fieldDefinition = recordDefinition.fieldDefinitions.find(\n                    (definition) => String(definition.id) === component.fieldId\n                  );\n\n                  return this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n                })\n                .map((component) => component.guid)\n            ),\n            take(1)\n          )\n        : of([])\n    )\n  );\n\n  recordFieldDefinitionItems$ = this.recordDefinition$.pipe(\n    map((recordDefinition) =>\n      recordDefinition ? this.rxRecordEditorDesignHelpersService.getRecordFieldDefinitionItems(recordDefinition) : []\n    ),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProps?: IRecordEditorProperties): IRecordEditorDesignProperties {\n    const result: IRecordEditorProperties = {\n      name: null,\n      label: null,\n      mode: RecordEditorMode.Edit,\n      recordInstanceId: null,\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      defaultState: initialProps.defaultState || null,\n      allowEdit: '1',\n      styles: null,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProps\n    };\n\n    return {\n      ...result,\n      showReadOnlyState: Boolean(result.defaultState),\n      allowEdit: result.mode === RecordEditorMode.Edit ? result.allowEdit : null\n    };\n  }\n\n  rxInit(): void {\n    const targetRecordEditorProperties$ = combineLatest([\n      this.targetViewDefinitionName$.pipe(\n        switchMap((targetViewDefinitionName) =>\n          this.rxRecordEditorDesignHelpersService.getViewDefinition(targetViewDefinitionName)\n        )\n      ),\n      this.targetExtensionContainerGuid$\n    ]).pipe(\n      map(([viewDefinition, targetExtensionContainerGuid]) =>\n        this.rxRecordEditorDesignHelpersService.getTargetRecordEditorProperties(\n          viewDefinition,\n          targetExtensionContainerGuid\n        )\n      )\n    );\n\n    this.associationOptions$ = combineLatest([targetRecordEditorProperties$, this.recordDefinitionName$]).pipe(\n      switchMap(([targetRecordEditorProperties, extensionRecordDefinitionName]) =>\n        this.rxRecordEditorDesignHelpersService.getAssociationOptions(\n          targetRecordEditorProperties.recordDefinitionName,\n          extensionRecordDefinitionName\n        )\n      )\n    );\n\n    this.isAssociationRequired$ = combineLatest([\n      this.isExtensionView$,\n      this.recordDefinitionName$,\n      targetRecordEditorProperties$\n    ]).pipe(\n      map(\n        ([isExtensionView, recordDefinitionName, targetRecordEditorProperties]) =>\n          isExtensionView && recordDefinitionName !== targetRecordEditorProperties.recordDefinitionName\n      )\n    );\n\n    this.updateInspector$.pipe(takeUntil(this.sandbox.destroyed$)).subscribe((inspector) => {\n      this.sandbox.updateInspectorConfig(inspector);\n    });\n\n    // initial set of inspector\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$,\n      targetRecordEditorProperties$\n    ])\n      .pipe(first(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          { recordDefinitionName, mode, showReadOnlyState },\n          isExtensionView,\n          associationOptions,\n          isAssociationRequired,\n          targetRecordEditorProperties\n        ]) => {\n          if (isExtensionView && !recordDefinitionName) {\n            recordDefinitionName = targetRecordEditorProperties.recordDefinitionName;\n            mode = targetRecordEditorProperties.mode;\n\n            this.sandbox.updateComponentProperties({ mode, recordDefinitionName });\n          }\n\n          this.updateInspector$.next(\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              [],\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n          );\n        }\n      );\n\n    this.mode$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([mode, props]) => {\n        this.sandbox.updateComponentProperties(\n          mode === RecordEditorMode.Create || mode === RecordEditorMode.Temporary\n            ? {\n                ...props,\n                recordInstanceId: null,\n                defaultState: null,\n                allowEdit: null,\n                showReadOnlyState: null\n              }\n            : {\n                ...props,\n                defaultState: null,\n                allowEdit: '1',\n                showReadOnlyState: false\n              }\n        );\n      });\n\n    this.showReadOnlyState$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([showReadOnlyState, props]) => {\n        this.sandbox.updateComponentProperties({\n          ...props,\n          defaultState: showReadOnlyState ? RecordEditorState.Read : null\n        });\n      });\n\n    combineLatest([\n      combineLatest([\n        this.sandbox.getComponentPropertyValue('recordDefinitionName'),\n        this.sandbox.getComponentPropertyValue('mode'),\n        this.showReadOnlyState$\n      ]).pipe(skip(1)),\n      this.recordFieldDefinitionItems$,\n      this.isExtensionView$,\n      this.associationOptions$,\n      this.isAssociationRequired$\n    ])\n      .pipe(\n        map(\n          ([\n            [recordDefinitionName, mode, showReadOnlyState],\n            recordFieldDefinitionItems,\n            isExtensionView,\n            associationOptions,\n            isAssociationRequired\n          ]) =>\n            this.rxRecordEditorDesignHelpersService.getInspector(\n              recordDefinitionName,\n              mode,\n              showReadOnlyState,\n              recordFieldDefinitionItems,\n              isExtensionView,\n              associationOptions,\n              isAssociationRequired,\n              this._onBeforeModeChange.bind(this)\n            )\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(this.updateInspector$);\n\n    // clear child components after changing of record definition\n    this.recordDefinitionName$\n      .pipe(pairwise(), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([prevName, currentName]) => {\n        if (prevName) {\n          this.sandbox.setChildren([]);\n          this.sandbox.updateComponentProperties({ associationDefinitionName: null });\n        }\n      });\n\n    this.associationOptions$\n      .pipe(\n        skip(1),\n        filter((associationOptions) => associationOptions.length === 1),\n        withLatestFrom(this.isAssociationRequired$),\n        filter(([, isAssociationRequired]) => isAssociationRequired),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([[{ id: associationDefinitionName }]]) =>\n        this.sandbox.updateComponentProperties({ associationDefinitionName })\n      );\n\n    // TODO: performance\n    // validation\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.childFieldIds$,\n      this.isAssociationRequired$,\n      this.isExtensionView$\n    ])\n      .pipe(\n        map(([componentProperties, recordDefinition, childFieldIds, isAssociationRequired, isExtensionView]) => {\n          return this.rxRecordEditorDesignHelpersService.validate(\n            this.sandbox,\n            componentProperties,\n            recordDefinition,\n            childFieldIds,\n            isAssociationRequired,\n            isExtensionView\n          );\n        }),\n        distinctUntilChanged(isEqual),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.sandbox.getComponentPropertyValue('name').pipe(\n        map((name) => name || null),\n        distinctUntilChanged()\n      ),\n      this.recordDefinition$\n    ])\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(([name, recordDefinition]) => {\n        this._setSettableProperties(name, recordDefinition);\n        this._setCommonDataDictionary(name, recordDefinition);\n      });\n  }\n\n  removeComponent(guids: string[]): void {\n    this.sandbox.removeComponents(guids);\n  }\n\n  updateSelectedFieldComponents(fieldIds: string[]): void {\n    this.selectedFieldComponents$\n      .pipe(\n        take(1),\n        mergeMap((components) => {\n          const fieldIdsToAdd = fieldIds.filter(\n            (fieldId) => !components.find((component) => component.fieldId === fieldId)\n          );\n\n          const fieldComponentsToAdd$: Observable<ViewComponentAddComponentPayload[]> = fieldIdsToAdd.length\n            ? this.recordFieldDefinitionItems$.pipe(\n                map((items) =>\n                  fieldIdsToAdd.map((fieldId) => {\n                    const { viewComponentType: type, name: label } = items.find((item) => item.id === fieldId);\n\n                    return {\n                      type,\n                      propertiesByName: {\n                        fieldId,\n                        label\n                      }\n                    };\n                  })\n                ),\n                take(1)\n              )\n            : of([]);\n\n          const fieldIdsSet = new Set(fieldIds);\n\n          const componentGuidsToRemove = components\n            .filter((component) => component.fieldId)\n            .filter((component) => !fieldIdsSet.has(component.fieldId))\n            .map((component) => component.guid);\n\n          return forkJoin([fieldComponentsToAdd$, of(componentGuidsToRemove)]);\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([fieldComponentsToAdd, fieldGuidsToRemove]) => {\n        if (fieldComponentsToAdd.length) {\n          this.sandbox.addComponent(fieldComponentsToAdd);\n        }\n\n        if (fieldGuidsToRemove.length) {\n          this.sandbox.removeComponents(fieldGuidsToRemove);\n        }\n      });\n  }\n\n  getPropertiesByName(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    return this.rxRecordEditorDesignHelpersService.getComponentProperties(properties);\n  }\n\n  _dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  _onBeforeModeChange(prevMode: string, currentMode: string): Promise<boolean> {\n    if (prevMode !== RecordEditorMode.Create && currentMode === RecordEditorMode.Create) {\n      return this.systemFieldComponentGuids$\n        .pipe(\n          mergeMap((systemFieldComponentGuids) =>\n            systemFieldComponentGuids.length\n              ? this.rxRecordEditorDesignHelpersService.confirmSystemFieldRemoval().pipe(\n                  tap((isConfirmed) => {\n                    if (isConfirmed) {\n                      this.sandbox.removeComponents(systemFieldComponentGuids);\n                    }\n                  })\n                )\n              : of(true)\n          ),\n          take(1)\n        )\n        .toPromise();\n    } else {\n      return Promise.resolve(true);\n    }\n  }\n\n  dropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.options?.canBeEmbeddedInRecordEditor;\n  }\n\n  private _setCommonDataDictionary(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setCommonDataDictionary(this._getCommonProps(componentName, recordDefinition));\n  }\n\n  private _setSettableProperties(name: string, recordDefinition: IRecordDefinition): void {\n    const componentName = this._getComponentName(name, recordDefinition);\n\n    this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n      {\n        label: 'Edit state',\n        expression: this.getExpressionForProperty('editState')\n      },\n      {\n        label: 'Read state',\n        expression: this.getExpressionForProperty('readState')\n      },\n      ...(recordDefinition\n        ? [\n            {\n              label: 'Record instance',\n              children: recordDefinition.fieldDefinitions.map((definition) => ({\n                label: definition.name,\n                expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${definition.id}.value`)\n              }))\n            }\n          ]\n        : [])\n    ]);\n  }\n\n  private _getCommonProps(\n    componentName: string,\n    recordDefinition: IRecordDefinition\n  ): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: componentName,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Can save',\n          expression: this.getExpressionForProperty('canSave')\n        },\n        {\n          label: 'In read state',\n          expression: this.getExpressionForProperty('inReadState')\n        },\n        {\n          label: 'Is dirty',\n          expression: this.getExpressionForProperty('isDirty')\n        },\n        {\n          label: 'Is valid',\n          expression: this.getExpressionForProperty('isValid')\n        },\n        {\n          label: 'Record definition name',\n          expression: this.getExpressionForProperty('recordDefinitionName')\n        },\n        {\n          label: 'Record instance',\n          expression: this.getExpressionForProperty('recordInstance'),\n          children: recordDefinition ? this._getRecordInstanceChildProps(recordDefinition) : []\n        },\n        {\n          label: 'Record instance ID',\n          expression: this.getExpressionForProperty('recordInstanceId')\n        }\n      ]\n    };\n  }\n\n  private _getRecordInstanceChildProps(recordDefinition: IRecordDefinition): IViewComponentDesignCommonDataDictionary {\n    return flow(\n      (fieldDefinitions) => reject(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.attachment }),\n      (fieldDefinitions) =>\n        _map(fieldDefinitions, (fieldDefinition: IFieldDefinition) => {\n          const child: IDataDictionaryBranch = {\n            label: fieldDefinition.name,\n            expression: this.getExpressionForProperty(`recordInstance.fieldInstances.${fieldDefinition.id}.value`)\n          };\n\n          if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection) {\n            const children = (child.autocompleteOptions = _map(\n              fieldDefinition.optionNamesById,\n              (optionName, optionValue) => ({\n                label: optionName,\n                expression: this.getExpressionForProperty(\n                  `recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id`\n                )\n              })\n            ));\n\n            child.children = [\n              {\n                label: `${fieldDefinition.name} (Option name)`,\n                expression: this.getExpressionForProperty(`selectionFieldOptionNamesById.${fieldDefinition.id}`)\n              },\n              {\n                label: 'Options',\n                children\n              }\n            ];\n          }\n\n          return child;\n        })\n    )(recordDefinition.fieldDefinitions);\n  }\n\n  private _getComponentName(name: string, recordDefinition: IRecordDefinition): string {\n    let componentName = this.sandbox.descriptor.name;\n\n    const recordDefinitionName = recordDefinition\n      ? this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n      : null;\n\n    if (recordDefinitionName && name) {\n      componentName += ` (${recordDefinitionName}: ${name})`;\n    } else if (recordDefinitionName) {\n      componentName += ` (${recordDefinitionName})`;\n    } else if (name) {\n      componentName += ` (${name})`;\n    }\n\n    return componentName;\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RecordEditorDesignModel } from './record-editor-design.model';\n\n@Component({\n  selector: 'rx-record-editor-design',\n  templateUrl: './record-editor-design.component.html',\n  styleUrls: ['./record-editor-design.component.scss']\n})\nexport class RecordEditorDesignComponent implements OnInit {\n  @Input()\n  model: RecordEditorDesignModel;\n\n  public dropPredicateFn: () => boolean;\n\n  ngOnInit(): void {\n    this.dropPredicateFn = this.model._dropPredicate.bind(this.model);\n  }\n}\n","<adapt-empty-state\n  *ngIf=\"(model.hasChildren$ | async) === false\"\n  type=\"objects\"\n  label=\"Drop fields from the Palette here or select a Record definition and add fields in the Properties panel.\"\n></adapt-empty-state>\n\n<rx-canvas-outlet [dropPredicate]=\"dropPredicateFn\"></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FieldSelectorComponent } from './field-selector/field-selector.component';\nimport { FieldsInspectorWidgetComponent } from './fields-inspector-widget.component';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [FieldSelectorComponent, FieldsInspectorWidgetComponent],\n  exports: [FieldsInspectorWidgetComponent],\n  entryComponents: [FieldSelectorComponent, FieldsInspectorWidgetComponent],\n  imports: [CommonModule, FormsModule, AdaptButtonModule, AdaptRxTextfieldModule]\n})\nexport class FieldsInspectorWidgetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RecordEditorDesignComponent } from './record-editor-design.component';\nimport { RxRecordEditorDesignHelpersService } from './record-editor-design-helpers.service';\nimport { FieldsInspectorWidgetModule } from './components/fields-inspector-widget/fields-inspector-widget.module';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RxDefinitionPickerModule,\n    FormsModule,\n    FormControlsModule,\n    ViewDesignerCanvasModule,\n    FieldsInspectorWidgetModule,\n    AdaptEmptyStateModule\n  ],\n  declarations: [RecordEditorDesignComponent],\n  entryComponents: [RecordEditorDesignComponent],\n  providers: [RxRecordEditorDesignHelpersService]\n})\nexport class RecordEditorDesignModule {}\n","import { Optional } from '@angular/core';\nimport {\n  IRecordDefinition,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport { assign, clone, filter, find, forEach, get, isEmpty, map as _map, remove, uniq } from 'lodash';\nimport { BehaviorSubject, defer, forkJoin, Observable, of } from 'rxjs';\nimport { map, share, switchMap, tap } from 'rxjs/operators';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IAssociationManagerConfig } from './record-editor.types';\n\nenum CardinalityType {\n  One = 'ONE',\n  Many = 'MANY'\n}\n\nexport class RxAssociationManagerService {\n  extensions: RecordInstance[] = [];\n  existing = [];\n  pending = [];\n  deleted = [];\n\n  private existingSubject$ = new BehaviorSubject([]);\n  existing$ = this.existingSubject$.asObservable();\n\n  private pendingSubject$ = new BehaviorSubject([]);\n  pending$ = this.pendingSubject$.asObservable();\n\n  private extensionsSubject$ = new BehaviorSubject([]);\n  extensions$ = this.extensionsSubject$.asObservable();\n\n  private initialize$: Observable<any>;\n\n  cardinalityTypes = CardinalityType;\n\n  totalExistingCount = 0;\n  associationDefinition = null;\n\n  cardinalityType = null;\n\n  isDataLoading: boolean;\n\n  recordDefinition: IRecordDefinition;\n  remainingAssociatedRecordCount = 0;\n\n  // create a shared observable to eliminate duplicate API calls from multiple association components in dropdown mode\n  private getExistingAssociationInstances$ = defer(() => this.getExistingAssociationInstances()).pipe(share());\n\n  constructor(\n    @Optional() private options: IAssociationManagerConfig,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxAssociationDefinitionCacheService: RxAssociationDefinitionCacheService\n  ) {\n    assign(this.options, {\n      canLoadAssociations: Boolean(this.options.associatedRecordInstanceId),\n      pageSize: 10,\n      startIndex: 0\n    });\n\n    this.extensions = this.options.associationInstances.extensions;\n    this.existing = this.options.associationInstances.existing;\n    this.pending = this.options.associationInstances.pending;\n    this.deleted = this.options.associationInstances.deleted;\n\n    this.options.fieldIds = this.options.fieldIds || [];\n\n    // add id to core fields for tracking changes on associationInstances\n    this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n  }\n\n  initialize(): Observable<any> {\n    this.isDataLoading = true;\n\n    if (!this.initialize$) {\n      this.initialize$ = forkJoin([\n        this.rxAssociationDefinitionCacheService.getAssociationDefinition(this.options.associationDefinitionName),\n        this.rxRecordDefinitionCacheService.getRecordDefinition(this.options.recordDefinitionName)\n      ]).pipe(\n        tap(([associationDefinition, recordDefinition]) => {\n          this.isDataLoading = false;\n\n          this.associationDefinition = associationDefinition;\n          this.recordDefinition = recordDefinition;\n\n          // determine whether a single or multiple instances can be associated based on association's cardinality and record role\n          this.cardinalityType = this.getCardinalityType(\n            this.associationDefinition.cardinality,\n            this.options.associatedRecordNodeSide\n          );\n\n          // set up field ids if they are not be provided\n          if (this.options.allFieldIds) {\n            this.options.fieldIds = _map(this.recordDefinition.fieldDefinitions, 'id');\n\n            this.mergeFieldIds([RX_RECORD_DEFINITION.coreFieldIds.id]);\n          }\n        })\n      );\n    }\n\n    return this.initialize$;\n  }\n\n  loadExistingAssociations(): Observable<any> {\n    if (this.options.canLoadAssociations) {\n      return this.initialize().pipe(\n        switchMap(() => {\n          return this.getExistingAssociationInstances$.pipe(\n            tap((instances) => {\n              forEach(instances.data, (instance) => {\n                this.addToExisting(\n                  this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(instance)\n                );\n              });\n\n              this.options.startIndex += instances.data.length;\n              this.remainingAssociatedRecordCount = instances.totalSize - this.options.startIndex;\n            })\n          );\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  loadExtensions(): Observable<RecordInstance> {\n    return this.initialize().pipe(\n      switchMap(() => {\n        return this.getExtensionRecordInstance().pipe(\n          tap((extensionRecordInstance) => {\n            if (extensionRecordInstance) {\n              this.addExtension(extensionRecordInstance);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  addToExisting(association): void {\n    // Existing association can be loaded twice by parallel requests either with or without filtering by `roleName` attribute.\n    const existingAssociation = this.isInExisting(association.id);\n\n    if (existingAssociation) {\n      if (this.isDefaultNodeRoleUsed(existingAssociation) && !this.isDefaultNodeRoleUsed(this.options.rolesConfig)) {\n        // Remove and add association again instead of config update is needed to correctly observe associations collection change.\n        remove(this.existing, existingAssociation);\n        association.rolesConfig = this.options.rolesConfig;\n        this.existing.push(association);\n\n        this.existingSubject$.next(this.existing);\n      } else {\n        // Existing association already has custom roles of nodes, so newly added association instance will be skipped.\n      }\n    } else {\n      if (this.options.rolesConfig && !association.rolesConfig) {\n        association.rolesConfig = this.options.rolesConfig;\n      }\n\n      this.existing.push(association);\n      this.existingSubject$.next(this.existing);\n    }\n  }\n\n  isDefaultNodeRoleUsed(association): string {\n    return this.rxJsonParserService.tryParseJson(get(association, 'rolesConfig.useDefaultRoles', true));\n  }\n\n  addToPending(associations, rolesConfig): void {\n    if (!isEmpty(associations) && this.associationDefinition) {\n      if (this.cardinalityType === CardinalityType.Many) {\n        const associationsForAppending = filter(associations, (association) => {\n          return (\n            !this.isInExisting(association.id) && !this.isInDeleted(association.id) && !this.isInPending(association.id)\n          );\n        });\n\n        if (rolesConfig) {\n          forEach(associationsForAppending, (association) => {\n            association.rolesConfig = rolesConfig;\n          });\n        }\n\n        Array.prototype.push.apply(this.pending, associationsForAppending);\n\n        this.pendingSubject$.next(this.pending);\n\n        const previouslyDeletedAssociations = remove(this.deleted, (deletedAssociation) => {\n          return find(associations, {\n            id: deletedAssociation.id\n          });\n        });\n\n        forEach(previouslyDeletedAssociations, (deletedAssociation) => {\n          this.addToExisting(deletedAssociation);\n        });\n      } else if (this.cardinalityType === CardinalityType.One) {\n        const association = associations[0];\n\n        switch (true) {\n          case isEmpty(this.existing) && isEmpty(this.deleted):\n            this.pending.length = 0;\n            this.pending.push(association);\n\n            break;\n          case isEmpty(this.existing):\n            const deletedAssociation = this.deleted[0];\n            this.pending.length = 0;\n\n            if (deletedAssociation.id === association.id) {\n              this.addToExisting(this.deleted.splice(0, 1)[0]);\n            } else {\n              this.pending.push(association);\n            }\n\n            break;\n\n          case isEmpty(this.deleted):\n            const existingAssociation = this.existing[0];\n\n            if (existingAssociation.id !== association.id) {\n              this.deleteFromExisting(existingAssociation.id);\n\n              this.pending.length = 0;\n              this.pending.push(association);\n            }\n\n            break;\n        }\n        this.pendingSubject$.next(this.pending);\n      }\n    }\n  }\n\n  addExtension(extensionRecordInstance: RecordInstance): void {\n    this.extensions.push(extensionRecordInstance);\n    this.extensionsSubject$.next(this.extensions);\n  }\n\n  restore(): void {\n    this.extensionsSubject$.next(this.extensions);\n\n    forEach(this.deleted, (deletedAssociation) => {\n      this.addToExisting(deletedAssociation);\n    });\n\n    this.deleted.splice(0, this.deleted.length);\n    this.deleteAllPending();\n  }\n\n  reset(): void {\n    this.existing.splice(0, this.existing.length);\n    this.pending.splice(0, this.pending.length);\n    this.deleted.splice(0, this.deleted.length);\n    this.totalExistingCount = 0;\n    this.options.startIndex = 0;\n  }\n\n  delete(associationId): void {\n    if (this.isInExisting(associationId)) {\n      this.deleteFromExisting(associationId);\n    } else if (this.isInPending(associationId)) {\n      this.deleteFromPending(associationId);\n    }\n  }\n\n  deleteAllExisting(): void {\n    const associationIds = _map(this.existing, 'id');\n\n    forEach(associationIds, (associationId) => {\n      this.deleteFromExisting(associationId);\n    });\n  }\n\n  deleteAllPending(): void {\n    this.pending.splice(0, this.pending.length);\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  mergeFieldIds(fieldIds): void {\n    if (fieldIds) {\n      this.options.fieldIds = uniq(this.options.fieldIds.concat(fieldIds));\n    }\n  }\n\n  extendOptions(options): void {\n    if (options.fieldIds) {\n      this.mergeFieldIds(options.fieldIds);\n    }\n\n    this.options.allFieldIds = options.allFieldIds;\n  }\n\n  private getCardinalityType(cardinality, associatedRecordNodeSide): CardinalityType {\n    let cardinalityType;\n\n    switch (true) {\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value:\n        cardinalityType = CardinalityType.One;\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value:\n        if (associatedRecordNodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n          cardinalityType = CardinalityType.Many;\n        } else {\n          cardinalityType = CardinalityType.One;\n        }\n\n        break;\n\n      case cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value:\n        cardinalityType = CardinalityType.Many;\n\n        break;\n    }\n\n    return cardinalityType;\n  }\n\n  private getExtensionRecordInstance(loadFullInstance = true): Observable<RecordInstance> {\n    const fields = loadFullInstance ? RX_RECORD_DEFINITION.coreFieldIds.id : this.options.fieldIds.join(',');\n\n    return this.rxAssociationInstanceDataPageService\n      .post({\n        params: {\n          associationDefinition: this.options.associationDefinitionName,\n          nodeToQuery: this.options.associatedRecordNodeSide,\n          associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n          propertySelection: fields\n        }\n      })\n      .pipe(\n        map((instances) => instances.data[0]),\n        switchMap((dataPageRow) => {\n          if (dataPageRow && loadFullInstance) {\n            return this.rxRecordInstanceService.get(\n              this.options.recordDefinitionName,\n              dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id]\n            );\n          } else if (dataPageRow && !loadFullInstance) {\n            return of(this.rxRecordInstanceService.createInstanceFromDataPageRow(dataPageRow, this.recordDefinition));\n          } else {\n            return of(null);\n          }\n        })\n      );\n  }\n\n  private getExistingAssociationInstances(): Observable<IDataPageResult> {\n    const params = {\n      pageSize: this.options.pageSize,\n      startIndex: this.options.startIndex,\n      associationDefinition: this.options.associationDefinitionName,\n      nodeToQuery: this.options.associatedRecordNodeSide,\n      associatedRecordInstanceId: this.options.associatedRecordInstanceId,\n      propertySelection: this.options.fieldIds.join(','),\n      useDefaultRoleNames: false,\n      nodeARoleName: '',\n      nodeBRoleName: ''\n    };\n\n    if (this.options.rolesConfig.useDefaultRoles) {\n      params.useDefaultRoleNames = this.options.rolesConfig.useDefaultRoles;\n      delete params.nodeARoleName;\n      delete params.nodeBRoleName;\n    } else {\n      delete params.useDefaultRoleNames;\n      params.nodeARoleName = this.options.rolesConfig.nodeARole || '';\n      params.nodeBRoleName = this.options.rolesConfig.nodeBRole || '';\n    }\n\n    return this.rxAssociationInstanceDataPageService.post({ params });\n  }\n\n  private isInExisting(associationId) {\n    return find(this.existing, {\n      id: associationId\n    });\n  }\n\n  private isInPending(associationId) {\n    return find(this.pending, {\n      id: associationId\n    });\n  }\n\n  getFieldIds() {\n    return clone(this.options.fieldIds);\n  }\n\n  private isInDeleted(associationId) {\n    return find(this.deleted, {\n      id: associationId\n    });\n  }\n\n  private deleteFromExisting(associationId): void {\n    const removedAssociation = remove(this.existing, {\n      id: associationId\n    })[0];\n\n    this.deleted.push(removedAssociation);\n\n    this.existingSubject$.next(this.existing);\n  }\n\n  private deleteFromPending(associationId): void {\n    remove(this.pending, {\n      id: associationId\n    });\n\n    this.pendingSubject$.next(this.pending);\n  }\n\n  destroy(): void {\n    this.existingSubject$.complete();\n    this.pendingSubject$.complete();\n    this.extensionsSubject$.complete();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { filter, flattenDeep, get, isEmpty, isObject, transform } from 'lodash';\nimport { IFieldDefinition, IRecordDefinition, IRecordInstance, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxRecordEditorUtilsService {\n  getComponentDefinitionsAsFlatList(componentDefinitions: AnyViewComponentDefinition[]): AnyViewComponentDefinition[] {\n    return flattenDeep(\n      transform(\n        componentDefinitions,\n        (result: AnyViewComponentDefinition[], componentDefinition: AnyViewComponentDefinition) => {\n          // do not include container view components\n          if (componentDefinition.resourceType !== RX_VIEW_DEFINITION.resourceTypes.containerViewComponent) {\n            result.push(componentDefinition);\n\n            // do not look inside container view components that have their own recordDefinitionName property,\n            // e.g. Association View Component\n          } else if (!componentDefinition.propertiesByName.recordDefinitionName) {\n            result.push(\n              ...this.getComponentDefinitionsAsFlatList(\n                (componentDefinition as IContainerViewComponentDefinition).componentDefinitions\n              )\n            );\n          }\n        }\n      )\n    );\n  }\n\n  getSelectionFieldOptionNames(recordDefinition: IRecordDefinition, recordInstance: IRecordInstance): IPlainObject {\n    const selectionFieldOptionNamesById = {};\n\n    filter(recordDefinition.fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.selection }).forEach(\n      (fieldDefinition: IFieldDefinition) => {\n        const selectionFieldLocalizableStrings = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance) {\n          if (\n            isObject(fieldDefinition.optionNamesById) &&\n            selectionFieldLocalizableStrings &&\n            isEmpty(selectionFieldLocalizableStrings)\n          ) {\n            const localizableStringId = fieldDefinition.optionNamesById[fieldInstance.value];\n\n            selectionFieldOptionNamesById[fieldDefinition.id] = selectionFieldLocalizableStrings[localizableStringId];\n          } else {\n            selectionFieldOptionNamesById[fieldDefinition.id] = fieldDefinition.optionNamesById[fieldInstance.value];\n          }\n        } else {\n          // field instance is not available for system selection fields,\n          // e.g. field 16 (Notifier Listening), when the record instance\n          // is retrieved via GET recordinstance/0 API (get new record instance)\n          selectionFieldOptionNamesById[fieldDefinition.id] = '';\n        }\n      }\n    );\n\n    return selectionFieldOptionNamesById;\n  }\n}\n","import { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nexport class RecordEditorFormControl extends FormControl {\n  private _touchedSubject = new BehaviorSubject(this.touched);\n\n  readonly touched$ = this._touchedSubject.asObservable().pipe(distinctUntilChanged());\n\n  markAsTouched(opts?: { onlySelf?: boolean }): void {\n    super.markAsTouched(opts);\n\n    this._touchedSubject.next(this.touched);\n  }\n\n  markAsUntouched(opts?: { onlySelf?: boolean }): void {\n    super.markAsUntouched(opts);\n\n    this._touchedSubject.next(this.touched);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { forEach, forOwn, includes, reduce } from 'lodash';\nimport { RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\n\nexport const RecordEditorFormDelimiter = '%';\n\nconst BASE_FORM_GROUP_KEY = 'baseFormGroup';\n\n@Injectable()\nexport class RecordEditorForm extends FormGroup {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super({});\n  }\n\n  addFieldControl(\n    fieldId: string,\n    guid: string,\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const formControl = new RecordEditorFormControl('', validator, asyncValidator);\n    const formGroup = this.controls[BASE_FORM_GROUP_KEY] as FormGroup;\n\n    formControl.setValue(initialValue);\n\n    if (!formGroup) {\n      this.addControl(\n        BASE_FORM_GROUP_KEY,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      formGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  addAssociatedFieldControl(\n    fieldId: string,\n    guid: string,\n    associatedRecordPath: string[],\n    initialValue: any = null,\n    validator?: ValidatorFn | ValidatorFn[],\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ): FormControl {\n    const associatedFormGroupName = associatedRecordPath.join(RecordEditorFormDelimiter);\n    const associatedFormGroup: FormGroup = this.controls[associatedFormGroupName] as FormGroup;\n    const formControl = new RecordEditorFormControl(initialValue, validator, asyncValidator);\n\n    if (!associatedFormGroup) {\n      this.addControl(\n        associatedFormGroupName,\n        new FormGroup({\n          [this.getControlId(fieldId, guid)]: formControl\n        })\n      );\n    } else {\n      associatedFormGroup.addControl(this.getControlId(fieldId, guid), formControl);\n    }\n\n    return formControl;\n  }\n\n  resetFieldControls(formStateByFieldId?: { [fieldId: string]: any }, associatedRecordPath?: string[]): void {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formStateByFieldId) {\n      formGroup.reset(this.prepareFormGroupState(formStateByFieldId, formGroup));\n    } else {\n      formGroup.reset();\n    }\n  }\n\n  syncFormControlValues(\n    fieldId: string,\n    value: any,\n    associatedFromGroupName?: string,\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    this.getControlsBoundToRecordField(String(fieldId), associatedFromGroupName).forEach((formControl) => {\n      if (options.markAsDirty !== false) {\n        formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        formControl.markAsTouched();\n      }\n\n      if (!this.rxRecordInstanceUtilsService.isFieldValueEqual(formControl.value, value)) {\n        formControl.setValue(value);\n      }\n    });\n  }\n\n  getFieldIds(associatedRecordPath?: string[]): string[] {\n    const formGroup: FormGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      return reduce(\n        formGroup.controls,\n        (result: string[], control: AbstractControl, formControlId: string) => {\n          const fieldId = this.getFieldId(formControlId);\n\n          if (control instanceof FormControl && !includes(result, fieldId)) {\n            result.push(fieldId);\n          }\n\n          return result;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  clearAndReset(): void {\n    forOwn(this.controls, (control, name) => this.removeControl(name));\n    this.reset();\n  }\n\n  markInvalidControlsAsTouched(): void {\n    forEach(this.controls, (formGroup: FormGroup) => {\n      forEach(formGroup.controls, (control) => {\n        if (control.invalid) {\n          control.markAsTouched();\n        }\n      });\n    });\n  }\n\n  getFormControl(fieldId: string, guid: string, associatedRecordPath?: string[]): RecordEditorFormControl {\n    let control: FormControl;\n    let formGroup: FormGroup;\n\n    formGroup = this.controls[\n      associatedRecordPath ? associatedRecordPath.join(RecordEditorFormDelimiter) : BASE_FORM_GROUP_KEY\n    ] as FormGroup;\n\n    if (formGroup) {\n      control = formGroup.get(this.getControlId(fieldId, guid)) as FormControl;\n    }\n\n    return control as RecordEditorFormControl;\n  }\n\n  private getControlsBoundToRecordField(fieldId: string, associatedFormGroupName?: string): RecordEditorFormControl[] {\n    const formGroup: FormGroup = this.controls[associatedFormGroupName || BASE_FORM_GROUP_KEY] as FormGroup;\n\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        if (control instanceof FormControl && this.getFieldId(formControlId) === fieldId) {\n          result.push(control);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  private getControlId(fieldId: string, guid?: string): string {\n    return `${fieldId}:${guid || this.rxGuidService.generate()}`;\n  }\n\n  private getFieldId(formControlId: string): string {\n    return formControlId.split(':')[0];\n  }\n\n  private prepareFormGroupState(\n    formStateByFieldId: { [fieldId: string]: any },\n    formGroup: FormGroup\n  ): { [formControlId: string]: any } {\n    return reduce(\n      formGroup.controls,\n      (result, control, formControlId) => {\n        result[formControlId] = formStateByFieldId[this.getFieldId(formControlId)];\n\n        return result;\n      },\n      {}\n    );\n  }\n}\n","import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport {\n  IRecordDefinition,\n  IRxRecordInstanceAssociationInstances,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService,\n  RxRecordInstanceService,\n  RxRecordInstanceUpdateService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { RxGlobalEventsService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxStringService } from '@helix/platform/utils';\nimport { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { compact, forEach, get, includes, isEmpty, isEqual, isNil, set, values } from 'lodash';\nimport { asapScheduler, asyncScheduler, defer, EMPTY, from, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  observeOn,\n  pluck,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  takeWhile,\n  tap\n} from 'rxjs/operators';\nimport { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\nimport { RecordEditorForm, RecordEditorFormDelimiter } from './record-editor-form.class';\nimport {\n  IAssociationManagerConfig,\n  IRecordEditorApi,\n  IRecordEditorConfig,\n  IRecordEditorState,\n  IRxAssociationManagerMap\n} from './record-editor.types';\n\n@Component({\n  selector: 'rx-record-editor',\n  templateUrl: './record-editor.component.html',\n  styleUrls: ['record-editor.component.scss'],\n  providers: [RecordEditorForm]\n})\nexport class RecordEditorComponent extends BaseViewComponent implements OnInit, IRecordEditorApi {\n  @Input()\n  config: Observable<IRecordEditorConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  api: IRecordEditorApi = {\n    refresh: this.refresh.bind(this),\n    isDirty: this.isDirty.bind(this),\n    isReady: this.isReady.bind(this),\n    isValid: this.isValid.bind(this),\n    notifyComponentReady: this.notifyComponentReady.bind(this),\n    save: this.save.bind(this),\n    setProperty: this.setProperty.bind(this),\n    setFieldValue: this.setFieldValue.bind(this),\n    getFieldValue: this.getFieldValue.bind(this),\n    getAssociationManager: this.getAssociationManager.bind(this),\n    getFieldControl: this.getFieldControl.bind(this),\n    downloadAttachment: this.downloadAttachment.bind(this),\n    getAttachmentDownloadUrl: this.getAttachmentDownloadUrl.bind(this),\n    getPermissionType: this.getPermissionType.bind(this),\n    getFieldInstanceProp: this.getFieldInstanceProp.bind(this),\n    getRecordEditorMode: this.getRecordEditorMode.bind(this),\n    setFieldInstanceProp: this.setFieldInstanceProp.bind(this),\n    markAsDirty: this.markAsDirty.bind(this)\n  };\n\n  state: IRecordEditorState = {\n    recordInstanceId: '',\n    recordDefinitionName: '',\n    recordInstance: null,\n    recordDefinition: null,\n    isDataLoading: false,\n    isDirty: false,\n    isSaving: false,\n    canSave: false,\n    mode: null,\n    isReadOnlyStateAvailable: false,\n    defaultState: null,\n    currentState: RecordEditorState.Edit,\n    form: null,\n    selectionFieldOptionNamesById: {},\n    allowEdit: null\n  };\n\n  private recordInstanceChangedSubject = new Subject<void>();\n  private notReadyComponentIds = {};\n\n  associationManagers: IRxAssociationManagerMap = {};\n  associationInstances: IRxRecordInstanceAssociationInstances = {};\n\n  recordInstanceChanged$: Observable<void> = this.recordInstanceChangedSubject.asObservable();\n\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordInstanceUpdateService: RxRecordInstanceUpdateService,\n    private translateService: TranslateService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxStringService: RxStringService,\n    private rxLogService: RxLogService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    recordEditorForm: RecordEditorForm,\n    @Inject(RxAssociationManagerService) private rxAssociationManagerServiceFactory: any\n  ) {\n    super();\n\n    this.state.form = recordEditorForm;\n\n    this.state.form.statusChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe(() => {\n      this.notifyPropertyChanged('isValid', this.isValid());\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n    this.notifyPropertyChanged('isDirty', this.state.isDirty);\n    this.notifyPropertyChanged('canSave', this.state.canSave);\n\n    const config$: Observable<IRecordEditorConfig> = this.config.pipe(\n      distinctUntilChanged(isEqual),\n      tap((config) => Object.assign(this.state, config))\n    );\n\n    config$.pipe(take(1)).subscribe((config) => {\n      if (config.mode === RecordEditorMode.Create) {\n        this.notifyPropertyChanged('inReadState', false);\n      } else if (config.mode === RecordEditorMode.Temporary) {\n        this.notifyPropertyChanged('inReadState', false);\n        this.updateCanSaveProperty();\n      } else if (this.state.defaultState) {\n        this.state.isReadOnlyStateAvailable = true;\n      }\n    });\n\n    merge(\n      config$.pipe(takeWhile((config) => config.mode === RecordEditorMode.Edit)),\n      config$.pipe(\n        takeWhile((config) =>\n          includes([RecordEditorMode.Create, RecordEditorMode.BulkEdit, RecordEditorMode.Temporary], config.mode)\n        ),\n        take(1)\n      )\n    )\n      .pipe(\n        map((config) => config.recordInstanceId || null),\n        distinctUntilChanged(),\n        switchMap(() =>\n          this.initializeRecordInstance().pipe(\n            catchError((error) => {\n              if (this.rxRecordInstanceUtilsService.isNoRecordFoundError(error)) {\n                this.runtimeViewModelApi.cancel(true).subscribe();\n              }\n\n              return throwError(error);\n            })\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n\n    config$\n      .pipe(\n        takeWhile((config) => config.mode === RecordEditorMode.Edit),\n        pluck('allowEdit'),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((allowEdit) => {\n        const state = allowEdit ? this.state.defaultState || RecordEditorState.Edit : RecordEditorState.Read;\n\n        this.setRecordEditorState(state);\n      });\n  }\n\n  downloadAttachment(fieldId: number): void {\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId,\n        this.state.recordInstance.fieldInstances[fieldId].value\n      );\n    }\n  }\n\n  getAttachmentDownloadUrl(fieldId: number): string {\n    let attachmentDownloadUrl = '';\n\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      attachmentDownloadUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId\n      );\n    }\n\n    return attachmentDownloadUrl;\n  }\n\n  getAssociationManager(options: IAssociationManagerConfig): RxAssociationManagerService {\n    // Custom roles config:\n    // {\n    //   useDefaultRoles: 'false',\n    //   nodeARole: 'CustomA',\n    //   nodeBRole: 'CustomB'\n    // }\n    // will be converted to 'false_CustomA_CustomB'\n    // Default roles config (node roles are null) will be converted to 'true__'\n    // Empty roles config will be converted to an empty string\n\n    const rolesConfigValues = values(options.rolesConfig).join('_');\n\n    const associationManagerKey = compact([\n      options.associationDefinitionName,\n      rolesConfigValues,\n      options.associatedRecordNodeSide\n    ]).join(':');\n\n    let associationManager = this.associationManagers[associationManagerKey];\n\n    if (!associationManager) {\n      options.associationInstances = this.getAssociationInstances(\n        options.associationDefinitionName,\n        options.associatedRecordNodeSide,\n        rolesConfigValues\n      );\n\n      associationManager = this.rxAssociationManagerServiceFactory(options);\n\n      merge(associationManager.pending$, associationManager.existing$)\n        .pipe(\n          filter(() => associationManager.deleted.length !== 0 || associationManager.pending.length !== 0),\n          take(1)\n        )\n        .subscribe(() => this.markAsDirty());\n\n      associationManager.extensions$\n        .pipe(\n          // Extensions will be an empty array on first emit as initial value and\n          // when no extension containers are used in the record editor.\n          filter((extensions) => !isEmpty(extensions)),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe(() => {\n          this.syncRecordInstanceWithForm(options.associatedRecordPath);\n          this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n        });\n\n      this.associationManagers[associationManagerKey] = associationManager;\n    } else {\n      associationManager.extendOptions(options);\n    }\n\n    return associationManager;\n  }\n\n  markAsDirty(): void {\n    this.state.form.markAsTouched();\n    this.state.form.markAsDirty();\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n\n  refresh(): Observable<never> {\n    if (this.isInEditMode() && this.state.currentState === RecordEditorState.Read) {\n      return this.initializeRecordInstance().pipe(catchError((error) => this.handleNoRecordFoundError(error)));\n    } else {\n      return EMPTY;\n    }\n  }\n\n  isDirty(): boolean {\n    return this.isInTemporaryMode() ? false : this.state.form.dirty;\n  }\n\n  isReady(): boolean {\n    return isEmpty(this.notReadyComponentIds);\n  }\n\n  notifyComponentReady(componentId: string, isReady: boolean): void {\n    if (isReady) {\n      delete this.notReadyComponentIds[componentId];\n    } else {\n      this.notReadyComponentIds[componentId] = true;\n    }\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    const matchFieldInstanceId = propertyPath.match(/^recordInstance\\.fieldInstances\\.(\\d+)\\.value$/);\n\n    const shouldSwitchToReadState =\n      (propertyPath === 'readState' && propertyValue) || (propertyPath === 'editState' && !propertyValue);\n\n    const shouldSwitchToEditState =\n      (propertyPath === 'readState' && !propertyValue) || (propertyPath === 'editState' && propertyValue);\n\n    if (shouldSwitchToReadState) {\n      if (this.state.currentState !== RecordEditorState.Read) {\n        return this.cancel();\n      }\n    } else if (shouldSwitchToEditState) {\n      if (this.state.currentState !== RecordEditorState.Edit) {\n        this.switchToEditState();\n      }\n    } else if (matchFieldInstanceId) {\n      const fieldId = Number(matchFieldInstanceId[1]);\n\n      this.setFieldValue(fieldId, propertyValue);\n    } else {\n      return throwError(`Record editor: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  setFieldValue(\n    fieldId: number,\n    value: any,\n    associatedRecordPath?: string[],\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    if (\n      this.state.recordInstance &&\n      this.state.recordInstance.getRecordInstance(associatedRecordPath) &&\n      this.state.recordInstance.isFieldValueChanged(fieldId, value, associatedRecordPath)\n    ) {\n      this.state.recordInstance.setFieldValue(fieldId, value, associatedRecordPath);\n\n      this.state.form.syncFormControlValues(\n        String(fieldId),\n        this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath),\n        associatedRecordPath && associatedRecordPath.join(RecordEditorFormDelimiter),\n        options\n      );\n\n      this.updateSelectionFieldOptionNames(this.state.recordInstance);\n      this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n      this.updateIsDirtyProperty();\n      this.updateCanSaveProperty();\n    }\n  }\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): void {\n    return this.state.recordInstance && this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath);\n  }\n\n  save(closeViewAfterSave: boolean = false): Observable<never> {\n    if (this.isInTemporaryMode()) {\n      this.rxLogService.debug('Record Editor: skip saving record instance in Temporary mode.');\n      return EMPTY;\n    } else if (!this.isValid()) {\n      this.state.form.markInvalidControlsAsTouched();\n\n      this.rxNotificationService.addErrorMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.validation-error.message')\n      );\n\n      return throwError(null);\n    } else if (this.canSave()) {\n      let savingObservable$: Observable<never>;\n\n      this.state.isSaving = true;\n      this.updateCanSaveProperty();\n\n      if (this.isInCreateMode()) {\n        savingObservable$ = this.rxRecordInstanceService.create(this.state.recordInstance).pipe(\n          tap((recordInstance) => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n\n            if (!this.state.recordInstanceId) {\n              set(\n                this.state.recordInstance,\n                `fieldInstances[${RX_RECORD_DEFINITION.coreFieldIds.id}].value`,\n                recordInstance.id\n              );\n\n              this.state.recordInstance.id = recordInstance.id;\n              this.state.recordInstanceId = recordInstance.id;\n            }\n\n            this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n            this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n            if (!closeViewAfterSave) {\n              this.rxGlobalEventsService.viewActionsCompleted$\n                .pipe(\n                  take(1),\n                  switchMap(() => this.initializeRecordInstance()),\n                  takeUntil(this.destroyed$)\n                )\n                .subscribe();\n            }\n          }),\n          switchMapTo(EMPTY)\n        );\n      } else if (this.isInEditMode()) {\n        savingObservable$ = this.rxRecordInstanceUpdateService.execute(this.state.recordInstance).pipe(\n          tap(() => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n          }),\n          switchMap(() => {\n            return this.initializeRecordInstance().pipe(\n              catchError((error) => this.handleNoRecordFoundError(error)),\n              tap({\n                complete: () => {\n                  if (this.state.isReadOnlyStateAvailable) {\n                    this.setRecordEditorState(RecordEditorState.Read);\n                  }\n                }\n              })\n            );\n          })\n        );\n      }\n\n      return savingObservable$.pipe(\n        tap({\n          complete: () => {\n            // Mark record editor form as pristine due to:\n            // - prevent showing dirty state confirmation dialog when any action after\n            // the save will close current view e.g open view in the same window action.\n            // - we don't have to wait until all extension containers data will be loaded\n            // to reset record editor form while synchronization.\n            this.state.form.markAsPristine();\n          }\n        }),\n        finalize(() => {\n          this.state.isSaving = false;\n          this.updateCanSaveProperty();\n          this.updateIsDirtyProperty();\n        })\n      );\n    } else {\n      this.rxLogService.debug('Record Editor: cannot save unmodified record instance.');\n\n      return throwError(null);\n    }\n  }\n\n  getFieldControl(\n    fieldId: number,\n    guid: string,\n    validator: ValidatorFn | ValidatorFn[] = [],\n    associatedRecordPath?: string[]\n  ): RecordEditorFormControl {\n    const existingControl = this.state.form.getFormControl(String(fieldId), guid, associatedRecordPath);\n\n    if (existingControl) {\n      return existingControl;\n    }\n\n    const initialValue = this.state.recordInstance\n      ? this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath)\n      : null;\n    const recordInstanceValidator = this.getFieldInstanceControlValidator(fieldId, associatedRecordPath);\n\n    validator = Array.isArray(validator) ? validator : [validator];\n    validator.push(recordInstanceValidator);\n\n    let formControl;\n\n    if (associatedRecordPath) {\n      formControl = this.state.form.addAssociatedFieldControl(\n        String(fieldId),\n        guid,\n        associatedRecordPath,\n        initialValue,\n        validator\n      );\n    } else {\n      formControl = this.state.form.addFieldControl(String(fieldId), guid, initialValue, validator);\n    }\n\n    formControl.valueChanges\n      .pipe(\n        distinctUntilChanged(this.rxRecordInstanceUtilsService.isFieldValueEqual),\n        // Use asyncScheduler to allow all observers to be notified about the original (non-normalized) field value change,\n        // before the value gets normalized by `this.setFieldValue` call in the subscription below.\n        // This resolves an issue where the subscriptions were executed with the normalized value first, followed by\n        // non-normalized value.\n        // In the example below, the actual form control value is already normalized but valueChange observer\n        // receives a non-normalized value.\n        // formControl.valueChange.subscribe(nonNormalizedValue => formControl.value !== nonNormalizedValue);\n        observeOn(asyncScheduler),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        // Use formControl.value instead of the emitted value that comes asynchronously\n        // and may be different than the actual value, e.g. when user types quickly\n        this.setFieldValue(fieldId, formControl.value, associatedRecordPath, {\n          markAsDirty: formControl.dirty,\n          markAsTouched: false\n        });\n      });\n\n    return formControl;\n  }\n\n  getPermissionType(fieldId: number, associatedRecordPath?: string[]): string {\n    const fieldInstance = this.state.recordInstance\n      ? this.state.recordInstance.getFieldInstance(fieldId, associatedRecordPath)\n      : null;\n\n    if (fieldInstance) {\n      return get(fieldInstance, 'permissionType') || RX_RECORD_DEFINITION.fieldPermissionTypes.change;\n    } else {\n      return null;\n    }\n  }\n\n  getFieldInstanceProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any {\n    return this.state.recordInstance && this.state.recordInstance.getFieldProp(fieldId, prop, associatedRecordPath);\n  }\n\n  getRecordEditorMode(): RecordEditorMode {\n    return this.state.mode;\n  }\n\n  setFieldInstanceProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void {\n    if (this.state.recordInstance) {\n      this.state.recordInstance.setFieldProp(fieldId, prop, value, associatedRecordPath);\n    }\n  }\n\n  isValid(): boolean {\n    return this.state.form.valid;\n  }\n\n  switchToEditState(): void {\n    this.setRecordEditorState(RecordEditorState.Edit);\n  }\n\n  isEditStateAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable &&\n      this.state.currentState === RecordEditorState.Read &&\n      Boolean(this.state.recordInstanceId) &&\n      Boolean(this.state.allowEdit)\n    );\n  }\n\n  isSaveButtonAvailable(): boolean {\n    return this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit;\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return !this.canSave();\n  }\n\n  isCancelButtonAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit && this.isInEditMode()\n    );\n  }\n\n  private cancel(): Observable<never> {\n    if (this.state.isReadOnlyStateAvailable && this.state.recordInstance) {\n      if (this.isDirty()) {\n        return defer(() => from(this.rxUtilityModalsService.confirmUnsavedChanges())).pipe(\n          switchMap((isConfirmed) => {\n            if (isConfirmed) {\n              this.restoreRecordEditor();\n              this.setRecordEditorState(RecordEditorState.Read);\n\n              return EMPTY;\n            } else {\n              return throwError(null);\n            }\n          })\n        );\n      } else {\n        this.setRecordEditorState(RecordEditorState.Read);\n      }\n    }\n\n    return EMPTY;\n  }\n\n  canSave(): boolean {\n    return this.isInTemporaryMode() ? true : !this.state.isSaving && (this.isInCreateMode() || this.isDirty());\n  }\n\n  isConfigValid(): boolean {\n    return this.isInEditMode() ? this.rxStringService.isNonEmptyString(this.state.recordInstanceId) : true;\n  }\n\n  onSaveClick(): void {\n    this.save()\n      .pipe(\n        take(1),\n        catchError((error) => (error === null ? of(error) : throwError(error)))\n      )\n      .subscribe();\n  }\n\n  onCancelClick(): void {\n    this.cancel().subscribe();\n  }\n\n  private initializeRecordInstance(): Observable<never> {\n    let initialize$ = EMPTY;\n\n    if (this.isConfigValid()) {\n      this.state.isDataLoading = true;\n\n      initialize$ = this.getRecordInstance().pipe(\n        tap((recordInstance) => {\n          this.setRecordInstance(recordInstance);\n          this.setRecordDefinition(recordInstance.recordDefinition);\n          this.updateSelectionFieldOptionNames(recordInstance);\n        }),\n        switchMapTo(EMPTY),\n        catchError((error) => {\n          // delay record instance id update to allow throwing an error.\n          asapScheduler.schedule(() => {\n            this.setRecordInstance(null);\n            this.setRecordDefinition(null);\n          });\n\n          return throwError(error);\n        }),\n        finalize(() => {\n          this.state.isDataLoading = false;\n        })\n      );\n    } else {\n      if (this.state.recordInstanceId !== '' && !isNil(this.state.recordInstanceId)) {\n        this.rxNotificationService.addErrorMessage(\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record-instance-id.message'\n          )\n        );\n      }\n\n      if (this.state.recordInstance) {\n        this.setRecordInstance(null);\n        this.setRecordDefinition(null);\n      }\n    }\n\n    return initialize$;\n  }\n\n  private handleNoRecordFoundError(error) {\n    const isNoRecordFoundError = this.rxRecordInstanceUtilsService.isNoRecordFoundError(error);\n\n    if (isNoRecordFoundError) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-editor.no-access-to-record.message'\n        )\n      );\n\n      this.runtimeViewModelApi.cancel(true).subscribe();\n    }\n\n    return throwError(isNoRecordFoundError ? null : error);\n  }\n\n  private updateIsDirtyProperty(): void {\n    const isDirty = this.isDirty();\n\n    if (this.state.isDirty !== isDirty) {\n      this.state.isDirty = isDirty;\n      this.notifyPropertyChanged('isDirty', isDirty);\n    }\n  }\n\n  private updateCanSaveProperty(): void {\n    const canSave = this.canSave();\n\n    if (this.state.canSave !== canSave) {\n      this.state.canSave = canSave;\n      this.notifyPropertyChanged('canSave', canSave);\n    }\n  }\n\n  private setRecordInstance(recordInstance: RecordInstance): void {\n    forEach(this.associationManagers, (manager) => manager.destroy());\n\n    this.associationInstances = {};\n    this.associationManagers = {};\n\n    if (recordInstance && !recordInstance.associationInstances) {\n      recordInstance.associationInstances = {};\n\n      this.associationInstances = recordInstance.associationInstances;\n    }\n\n    this.state.recordInstance = recordInstance;\n    this.state.recordInstanceId = recordInstance && recordInstance.id;\n\n    recordInstance ? this.syncRecordInstanceWithForm() : this.state.form.clearAndReset();\n\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n    this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n\n    if (recordInstance) {\n      this.recordInstanceChangedSubject.next();\n    }\n  }\n\n  private getFieldInstanceControlValidator(fieldId: number, associatedRecordPath?: string[]): ValidatorFn {\n    return (control: RecordEditorFormControl) =>\n      this.state.recordInstance &&\n      this.state.recordInstance.validateSingleField(fieldId, control.value, associatedRecordPath);\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    if (recordDefinition) {\n      if (this.isInBulkEditMode()) {\n        recordDefinition = this.rxRecordDefinitionService.setFieldDefinitionsToOptional(recordDefinition);\n      }\n\n      recordDefinition.fieldDefinitionsById =\n        this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n    }\n\n    this.state.recordDefinition = recordDefinition;\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private getRecordInstance(): Observable<RecordInstance> {\n    if (this.isInCreateMode() || this.isInTemporaryMode()) {\n      if (this.state.recordInstance) {\n        this.state.recordInstance = this.state.recordInstance.getOriginalRecordInstance();\n\n        return of(this.state.recordInstance);\n      } else {\n        return this.rxRecordInstanceService.getNew(this.state.recordDefinitionName);\n      }\n    } else if (this.isInBulkEditMode()) {\n      return this.rxRecordInstanceService.getEmpty(this.state.recordDefinitionName);\n    } else if (this.isInEditMode()) {\n      return this.rxRecordInstanceService.get(this.state.recordDefinitionName, this.state.recordInstanceId);\n    }\n  }\n\n  private getAssociationInstances(\n    associationDefinitionName: string,\n    nodeSide: string,\n    rolesConfigKey: string\n  ): IAssociationRecords {\n    const nodeSideRolesConfigKey: string = compact([nodeSide, rolesConfigKey]).join(':');\n\n    let associationRecords: IAssociationRecords = get(this.associationInstances, [\n      associationDefinitionName,\n      nodeSideRolesConfigKey\n    ]);\n\n    if (!associationRecords) {\n      associationRecords = {\n        existing: [],\n        pending: [],\n        deleted: [],\n        extensions: []\n      };\n\n      set(this.associationInstances, [associationDefinitionName, nodeSideRolesConfigKey], associationRecords);\n    }\n\n    return associationRecords;\n  }\n\n  private setRecordEditorState(state: RecordEditorState): void {\n    this.state.currentState = state;\n    this.notifyPropertyChanged('inReadState', state === RecordEditorState.Read);\n  }\n\n  private isInCreateMode(): boolean {\n    return this.state.mode === RecordEditorMode.Create;\n  }\n\n  private isInBulkEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.BulkEdit;\n  }\n\n  private isInEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.Edit;\n  }\n\n  private isInTemporaryMode(): boolean {\n    return this.state.mode === RecordEditorMode.Temporary;\n  }\n\n  private isNewAttachment(fieldId: number): boolean {\n    return Boolean(this.state.recordInstance.fieldInstances[fieldId].file);\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (recordInstance && get(this.state.recordDefinition, 'fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        this.state.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.state.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        this.notifyPropertyChanged('selectionFieldOptionNamesById', newSelectionFieldOptionNames);\n      }\n    }\n  }\n\n  private syncRecordInstanceWithForm(associatedRecordPath?: string[]): void {\n    const fieldIds = this.state.form.getFieldIds(associatedRecordPath);\n\n    if (!isEmpty(fieldIds)) {\n      const formStateByFieldId = fieldIds.reduce((result, fieldId) => {\n        result[fieldId] = this.state.recordInstance.getFieldValue(Number(fieldId), associatedRecordPath);\n\n        return result;\n      }, {});\n\n      this.state.form.resetFieldControls(formStateByFieldId, associatedRecordPath);\n    }\n  }\n\n  private restoreRecordEditor(): void {\n    this.state.recordInstance.revertFieldInstances();\n\n    forEach(this.associationManagers, (manager) => manager.restore());\n\n    this.syncRecordInstanceWithForm();\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n}\n","<div class=\"loader-container\" *ngIf=\"state.isDataLoading && !state.recordInstance\">\n  <div class=\"loader-inline mr-1\"></div>\n  <span>{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n</div>\n\n<div *ngIf=\"!state.isDataLoading && (!isConfigValid() || !state.recordInstance)\">\n  {{ 'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record.message' | translate }}\n</div>\n\n<div *ngIf=\"state.recordInstance && isConfigValid()\" class=\"clearfix\">\n  <div class=\"d-flex justify-content-end\">\n    <button\n      *ngIf=\"isEditStateAvailable()\"\n      class=\"py-0 mb-1\"\n      adapt-button\n      size=\"small\"\n      btn-type=\"tertiary\"\n      (click)=\"switchToEditState()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n    </button>\n  </div>\n\n  <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n\n  <button\n    *ngIf=\"isSaveButtonAvailable()\"\n    class=\"mr-1 mt-3\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isCancelButtonAvailable()\"\n    class=\"mt-3\"\n    rx-id=\"cancel-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    size=\"small\"\n    (click)=\"onCancelClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { get, isUndefined } from 'lodash';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RecordEditorMode } from '../common/record-editor.types';\n\n@Injectable()\nexport class RecordEditorComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  constructor(private viewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(recordEditorComponentDefinition: IContainerViewComponentDefinition) {\n    const properties = get(recordEditorComponentDefinition, 'propertiesByName');\n\n    if (properties.mode === RecordEditorMode.Edit && isUndefined(properties.allowEdit)) {\n      properties.allowEdit = '1';\n    }\n\n    this.viewDefinitionParserService\n      .getComponents(recordEditorComponentDefinition)\n      .filter(\n        (componentPair) =>\n          componentPair.componentDefinition.type !== RxViewComponentType.ActionButton &&\n          (componentPair.componentDefinition.propertiesByName.hasOwnProperty('fieldId') ||\n            componentPair.componentDefinition.type === RxViewComponentType.Association)\n      )\n      .map((componentPair) => componentPair.componentDefinition)\n      .forEach((fieldComponentDefinition) => {\n        Object.assign(fieldComponentDefinition.propertiesByName, {\n          api: `\\${view.components.${recordEditorComponentDefinition.guid}.api}`,\n          inReadState: `\\${view.components.${recordEditorComponentDefinition.guid}.inReadState}`,\n          recordDefinition: `\\${view.components.${recordEditorComponentDefinition.guid}.recordDefinition}`,\n          recordInstance: `\\${view.components.${recordEditorComponentDefinition.guid}.recordInstance}`\n        });\n      });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptAlertModule, AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RxModalModule } from '@helix/platform/ui-kit';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RecordEditorComponentDefinitionAdapterService } from './record-editor-component-definition-adapter.service';\nimport { RecordEditorComponent } from './record-editor.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport {\n  RxAssociationDefinitionCacheService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport {\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n// AoT requires an exported function for factories\nexport function AssociationManagerFactory(\n  rxAssociationInstanceDataPageService,\n  rxRecordDefinitionCacheService,\n  rxRecordInstanceUtilsService,\n  rxRecordInstanceService,\n  rxJsonParserService,\n  rxAssociationDefinitionCacheService\n) {\n  const service = function (options) {\n    return new RxAssociationManagerService(\n      options,\n      rxAssociationInstanceDataPageService,\n      rxRecordDefinitionCacheService,\n      rxRecordInstanceUtilsService,\n      rxRecordInstanceService,\n      rxJsonParserService,\n      rxAssociationDefinitionCacheService\n    );\n  };\n\n  return service;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RuntimeViewCanvasModule,\n    ReactiveFormsModule,\n    AdaptButtonModule,\n    RxModalModule,\n    TranslateModule,\n    AdaptAlertModule.forRoot()\n  ],\n  providers: [\n    RecordEditorComponentDefinitionAdapterService,\n    RxRecordEditorUtilsService,\n    {\n      provide: RxAssociationManagerService,\n      useFactory: AssociationManagerFactory,\n      deps: [\n        RxAssociationInstanceDataPageService,\n        RxRecordDefinitionCacheService,\n        RxRecordInstanceUtilsService,\n        RxRecordInstanceService,\n        RxJsonParserService,\n        RxAssociationDefinitionCacheService\n      ]\n    }\n  ],\n  exports: [RecordEditorComponent],\n  declarations: [RecordEditorComponent],\n  entryComponents: [RecordEditorComponent]\n})\nexport class RecordEditorModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private recordEditorComponentDefinitionAdapterService: RecordEditorComponentDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.RecordEditor,\n      this.recordEditorComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { IFieldDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { inRange, isFunction } from 'lodash';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RECORD_EDITOR } from './record-editor.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDefaultRecordEditorInputType {\n  resourceTypeFieldTypeMap = {};\n\n  constructor() {\n    this.initResourceTypeFieldTypeMap();\n  }\n\n  getFieldTypeByFieldDefinition(fieldDefinition: IFieldDefinition): string {\n    if (isFunction(this.resourceTypeFieldTypeMap[fieldDefinition.resourceType])) {\n      return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType](fieldDefinition);\n    } else {\n      return this.resourceTypeFieldTypeMap[fieldDefinition.resourceType];\n    }\n  }\n\n  private initResourceTypeFieldTypeMap(): void {\n    this.resourceTypeFieldTypeMap = {\n      ...RECORD_EDITOR.fieldTypes,\n\n      [RX_RECORD_DEFINITION.resourceTypes.character]: (fieldDefinition) => {\n        return fieldDefinition.namedListDefinition || inRange(fieldDefinition.maxLength, 1, 255)\n          ? RxViewComponentType.Character\n          : RxViewComponentType.Textarea;\n      }\n    };\n  }\n}\n","export const RX_ASSOCIATION = {\n  actions: {\n    associate: 'associate',\n    createAndAssociate: 'createAndAssociate'\n  },\n\n  componentTypes: {\n    associationFilter: 'rx-association-filter',\n    associatedRecordField: 'rx-associated-record-field'\n  }\n};\n\nexport enum RxAssociationEditingMode {\n  Dropdown = 'dropdown',\n  Views = 'views'\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RecordEditorState } from '../../../../record-editor';\nimport { IRecordPreviewCardConfig } from './record-preview-card.types';\n\n@Component({\n  selector: 'rx-record-preview-card',\n  templateUrl: './record-preview-card.component.html',\n  styleUrls: ['./record-preview-card.component.scss']\n})\nexport class RxRecordPreviewCardComponent implements OnInit {\n  @Input() config: IRecordPreviewCardConfig;\n\n  private maxFieldValueLength: number;\n\n  ngOnInit() {\n    this.maxFieldValueLength = this.config.maxFieldValueLength || 200;\n  }\n\n  isEditableState() {\n    return this.config.state === RecordEditorState.Edit;\n  }\n}\n","<div class=\"rx-record-preview-card d-flex align-items-start justify-content-between w-100\">\n  <ul class=\"rx-card-fields d-flex flex-column list-unstyled focusable mb-0\" tabindex=\"0\">\n    <li class=\"d-flex rx-card-field\" *ngFor=\"let field of config.fields\">\n      <span class=\"rx-card-field-label\" *ngIf=\"field.label\">{{ field.label }}</span>\n      <span *ngIf=\"field.label\">: </span>\n      <span class=\"rx-card-field-value px-1\" [ngClass]=\"{ 'font-weight-bold': !isEditableState() }\">{{\n        field.value\n      }}</span>\n    </li>\n  </ul>\n\n  <button\n    *ngIf=\"isEditableState()\"\n    (click)=\"config.onDelete(config.id)\"\n    class=\"btn btn-link d-icon-cross p-0\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"tertiary\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.remove.label' | translate\"\n  ></button>\n</div>\n","import { DatePipe } from '@angular/common';\nimport { AfterViewInit, Component, OnInit, ViewChild, HostBinding } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  castArray,\n  find,\n  forEach,\n  get,\n  head,\n  includes,\n  isNil,\n  isString,\n  isUndefined,\n  map as _map,\n  transform,\n  isEmpty,\n  isEqual,\n  every\n} from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport {\n  delay,\n  distinctUntilChanged,\n  filter,\n  map,\n  skip,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceDataPageService\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  IRecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionInheritanceDataPageService,\n  RxRecordInstanceDataPageService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { IDataPageParams } from '@helix/platform/shared/api';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';\n\nimport { RecordEditorState, RxAssociationManagerService } from '../../../record-editor';\nimport { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';\nimport { RxAssociationEditingMode } from '../association.types';\nimport { IAssociationRecord, IRolesConfig, IRxAssociationConfig, IRxAssociationFilter } from './association.types';\nimport { IRecordPreviewCardConfig, IRecordPreviewCardField } from './record-preview-card/record-preview-card.types';\n\n@Component({\n  selector: 'rx-association',\n  templateUrl: './association.component.html',\n  styleUrls: ['./association.component.scss']\n})\nexport class RxAssociationComponent extends BaseViewComponent implements AfterViewInit, OnInit, IViewComponent {\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  @HostBinding('class.rx-field-disabled')\n  isDisabled = false;\n\n  api = {\n    associate: (associations) => {\n      this.associationManager.addToPending(associations, this.extractRolesConfig());\n    }\n  };\n\n  areActionsAvailable: boolean;\n\n  config: Observable<IRxAssociationConfig>;\n\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n  optionLoaderFunc = this.getAssociationsOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n\n  existingPreviewConfigurations = [];\n  pendingPreviewConfigurations = [];\n\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n\n  pendingPageSize = 10;\n  currentPendingCount = 10;\n  totalPendingCount = 0;\n\n  associationCandidateRecordInstances = [];\n  fieldDefinition: IFieldDefinition;\n  fieldDefinitions = {};\n\n  associationDefinitionName: string;\n  associatedRecordNodeSide: RxAssociatedRecordNodeSide;\n  associationManager: RxAssociationManagerService;\n  editingMode: RxAssociationEditingMode;\n  fieldId: string = null;\n  fields: IRecordPreviewCardField[] = [];\n  inReadState = false;\n  permissionType: string;\n  label: string = null;\n  recordDefinition: IRecordDefinition = null;\n  recordDefinitionName: string = null;\n  recordInstance: IRecordInstance;\n  recordEditorApi: IRecordEditorApi;\n  state: RecordEditorState;\n  useDefaultRoles: boolean = null;\n  nodeARole: string = null;\n  nodeBRole: string = null;\n  previewRolesConfig: IRolesConfig;\n\n  private associationFilter: IRxAssociationFilter;\n  private associationFilterNodeSide: RxAssociatedRecordNodeSide;\n\n  formControl: FormControl = new FormControl('', null);\n\n  constructor(\n    private datePipe: DatePipe,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxRecordDefinitionInheritanceDataPageService: RxRecordDefinitionInheritanceDataPageService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super();\n    this.isHidden = false;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    const config$ = this.config.pipe(\n      filter((config) => Boolean(config.api && config.recordDefinition)),\n      takeUntil(this.destroyed$)\n    );\n\n    config$.pipe(take(1)).subscribe((config) => {\n      this.onConfigInitialized(config);\n      this.onConfigUpdated(config);\n    });\n\n    config$.pipe(skip(1)).subscribe(this.onConfigUpdated.bind(this));\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.previewRolesConfig = this.extractRolesConfig();\n  }\n\n  ngAfterViewInit(): void {\n    if (this.editingMode === RxAssociationEditingMode.Dropdown) {\n      this.formControl.valueChanges\n        .pipe(distinctUntilChanged(), startWith(this.formControl.value as string), takeUntil(this.destroyed$))\n        .subscribe(() => {\n          this.updateSelectedOptions();\n        });\n    }\n  }\n\n  private onConfigInitialized(config: IRxAssociationConfig): void {\n    this.associationDefinitionName = config.associationDefinitionName;\n    this.associatedRecordNodeSide = config.associatedRecordNodeSide;\n    this.editingMode = config.editingMode || RxAssociationEditingMode.Views;\n    this.fieldId = config.fieldId;\n    this.fields = config.fields;\n    this.recordDefinition = config.recordDefinition;\n    this.recordDefinitionName = config.recordDefinitionName;\n    this.recordEditorApi = config.api;\n    this.state = config.state;\n    this.useDefaultRoles = config.useDefaultRoles;\n    this.nodeARole = config.nodeARole;\n    this.nodeBRole = config.nodeBRole;\n\n    if (this.fieldId) {\n      this.fieldDefinition = config.recordDefinition.fieldDefinitions.find(\n        (definition) => definition.id === Number(this.fieldId)\n      );\n    }\n  }\n\n  private onConfigUpdated(config: IRxAssociationConfig): void {\n    const inReadState: boolean = Boolean(config.inReadState);\n\n    const isDisabled: boolean =\n      Boolean(config.disabled) || this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view;\n\n    let forceUpdatePreviewCardConfigState = false;\n\n    this.isHidden = Boolean(config.hidden);\n    this.areActionsAvailable = !inReadState && this.editingMode === RxAssociationEditingMode.Views;\n\n    if (this.isDisabled !== isDisabled) {\n      this.isDisabled = isDisabled;\n\n      forceUpdatePreviewCardConfigState = true;\n    }\n\n    if (this.inReadState !== inReadState) {\n      this.inReadState = inReadState;\n\n      forceUpdatePreviewCardConfigState = true;\n    }\n\n    if (forceUpdatePreviewCardConfigState && this.existingPreviewConfigurations.length) {\n      this.updatePreviewCardConfigState();\n    }\n\n    this.label = isUndefined(config.label) ? this.fieldDefinition.name ?? '' : config.label;\n\n    if (\n      this.selectWithPaginationComponent &&\n      this.associationFilter &&\n      get(config, 'associationFilter[0]') &&\n      this.associationFilter.recordInstanceId !== config.associationFilter[0].recordInstanceId\n    ) {\n      // Do not delete existing association until Record editor is ready.\n      // This is needed in case when e.g. one association view component\n      // is filtered by the value selected in the other association view component.\n      // If during initialization, the value in the second view component gets loaded\n      // faster than the value in the first one, the value in the second view component\n      // would be cleared after the first component's value is loaded.\n      if (this.recordEditorApi.isReady()) {\n        this.deleteAllExisting();\n      }\n\n      this.deleteAllPending();\n\n      this.selectWithPaginationComponent.resetLoadedOptions();\n\n      this.associationCandidateRecordInstances = [];\n\n      if (!this.associationFilterNodeSide) {\n        this.rxAssociationDefinitionService\n          .get(this.associationFilter.associationDefinitionName)\n          .pipe(\n            switchMap((associationDefinition: IAssociationDefinition) => {\n              if (associationDefinition.nodeAId === this.recordDefinitionName) {\n                this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeA;\n              } else if (associationDefinition.nodeBId === this.recordDefinitionName) {\n                this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeB;\n              } else {\n                return this.rxRecordDefinitionInheritanceDataPageService\n                  .get({ params: { recorddefinition: this.recordDefinitionName } })\n                  .pipe(\n                    tap((recordDefinitionInheritanceDataPage: any) => {\n                      const recordDefinitionAncestors = recordDefinitionInheritanceDataPage.data;\n\n                      if (includes(recordDefinitionAncestors, associationDefinition.nodeAId)) {\n                        this.associationFilterNodeSide = RxAssociatedRecordNodeSide.NodeA;\n                      } else if (includes(recordDefinitionAncestors, associationDefinition.nodeBId)) {\n                        this.associatedRecordNodeSide = RxAssociatedRecordNodeSide.NodeB;\n                      } else {\n                        throw new Error(\n                          'No matches for association definition node side within inheritance ancestors.'\n                        );\n                      }\n                    })\n                  );\n              }\n\n              return EMPTY;\n            })\n          )\n          .subscribe();\n      }\n    }\n\n    this.associationFilter = head(config.associationFilter);\n\n    if (config.recordInstance && this.recordInstance !== config.recordInstance) {\n      this.recordInstance = config.recordInstance;\n      this.isDisabled = true;\n\n      this.notifyPropertyChanged('isDisabled', this.isDisabled);\n      this.recordEditorApi.notifyComponentReady(this.guid, false);\n\n      this.associationManager = this.getAssociationManager();\n\n      this.associationManager\n        .initialize()\n        .pipe(\n          delay(0),\n          switchMap(() => this.associationManager.loadExistingAssociations()),\n          tap(() => {\n            this.isDisabled =\n              Boolean(config.disabled) || this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view;\n\n            this.notifyPropertyChanged('isDisabled', this.isDisabled);\n\n            this.areActionsAvailable = !this.inReadState && this.editingMode === RxAssociationEditingMode.Views;\n\n            if (this.editingMode === RxAssociationEditingMode.Views) {\n              this.fieldDefinitions = transform(\n                this.fields,\n                (result, field: IRecordPreviewCardField) => {\n                  const fieldDefinition = find(this.associationManager.recordDefinition.fieldDefinitions, {\n                    id: Number(field.fieldId)\n                  });\n\n                  result[fieldDefinition.id] = fieldDefinition;\n                },\n                {}\n              );\n            }\n\n            this.associationManager.existing$.pipe(takeUntil(this.destroyed$)).subscribe((newValue) => {\n              this.onAssociationsChanged(newValue, 'existingPreviewConfigurations');\n              this.updateTotalExistingAssociationsCount();\n            });\n\n            this.associationManager.pending$.pipe(takeUntil(this.destroyed$)).subscribe((newValue) => {\n              this.onAssociationsChanged(newValue, 'pendingPreviewConfigurations');\n              this.totalPendingCount = this.pendingPreviewConfigurations.length;\n            });\n\n            combineLatest([this.associationManager.pending$, this.associationManager.existing$])\n              .pipe(take(1))\n              .subscribe(() => {\n                this.recordEditorApi.notifyComponentReady(this.guid, true);\n              });\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  private getAssociationManager(): RxAssociationManagerService {\n    const fieldsIds = this.fieldId\n      ? [this.fieldId, RX_RECORD_DEFINITION.coreFieldIds.id]\n      : _map(this.fields, 'fieldId');\n\n    return this.recordEditorApi.getAssociationManager({\n      associationDefinitionName: this.associationDefinitionName,\n      associatedRecordNodeSide: this.associatedRecordNodeSide || RX_ASSOCIATION_DEFINITION.roles.second.value,\n      associatedRecordInstanceId: this.recordInstance.id,\n      recordDefinitionName: this.recordDefinitionName,\n      fieldIds: fieldsIds,\n      rolesConfig: this.extractRolesConfig()\n    });\n  }\n\n  private getAssociationsOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    const params: IDataPageParams = {\n      pageSize: pageSize,\n      startIndex: startIndex,\n      recorddefinition: this.recordDefinitionName,\n      propertySelection: this.associationManager.getFieldIds()\n    };\n\n    let instanceDataPageService: RxAssociationInstanceDataPageService | RxRecordInstanceDataPageService;\n\n    if (this.associationFilter) {\n      if (this.associationFilter.recordInstanceId) {\n        params.associationDefinition = this.associationFilter.associationDefinitionName;\n        params.associatedRecordInstanceId = this.associationFilter.recordInstanceId;\n        params.nodeToQuery = this.associationFilterNodeSide;\n\n        instanceDataPageService = this.rxAssociationInstanceDataPageService;\n      }\n    } else {\n      params.sortBy = this.fieldId;\n\n      if (searchQuery) {\n        params.queryExpression = `('${this.fieldId}' LIKE \"%${this.rxRecordInstanceUtilsService.escapeTextWildcards(\n          searchQuery\n        )}%\")`;\n      }\n\n      instanceDataPageService = this.rxRecordInstanceDataPageService;\n    }\n\n    return instanceDataPageService\n      ? instanceDataPageService.post({ params: params }).pipe(\n          map((result: any) => {\n            this.associationCandidateRecordInstances.push(...result.data);\n\n            return {\n              totalSize: result.totalSize,\n              options: result.data.map((recordInstance) => ({\n                displayValue: recordInstance[this.fieldId] || '',\n                value: recordInstance[RX_RECORD_DEFINITION.coreFieldIds.id]\n              }))\n            };\n          })\n        )\n      : of({\n          options: [],\n          totalSize: 0\n        });\n  }\n\n  deleteAllExisting(): void {\n    this.associationManager.deleteAllExisting();\n  }\n\n  deleteAllPending(): void {\n    this.associationManager.deleteAllPending();\n  }\n\n  loadExistingAssociations(): void {\n    this.associationManager\n      .loadExistingAssociations()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(() => this.updateTotalExistingAssociationsCount());\n  }\n\n  isReadModeEnabled(): boolean {\n    return this.inReadState;\n  }\n\n  isEditModeEnabled(): boolean {\n    return !this.inReadState;\n  }\n\n  getAssociatedValue(): string {\n    return get(this, 'selectedOptions[0].displayValue');\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar;baz'\n  private viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    return selectedOptions.map((option) => option.value).join(';');\n  }\n\n  // 'foo;bar;baz' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]\n  private modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return modelValue ? castArray(this.selectedOptions) : [];\n  }\n\n  private resetDropdownSelection(): void {\n    this.selectedOptions = [];\n  }\n\n  private updatePreviewCardConfigState(): void {\n    forEach(this.existingPreviewConfigurations, (previewCardConfig: IRecordPreviewCardConfig) => {\n      previewCardConfig.state = this.getStateForPreviewConfiguration();\n    });\n  }\n\n  private updateSelectedOptions(): void {\n    if (this.formControl.value && !isNil(this.formControl.value)) {\n      const pendingAssociation = {\n        id: this.formControl.value,\n        fieldInstances: null\n      };\n\n      const selectedRecordInstance = find(this.associationCandidateRecordInstances, function (association) {\n        return association[RX_RECORD_DEFINITION.coreFieldIds.id] === pendingAssociation.id;\n      });\n\n      pendingAssociation.fieldInstances = transform(\n        selectedRecordInstance,\n        function (result, value, filedId) {\n          result[filedId] = { value: value };\n        },\n        {}\n      );\n\n      this.associationManager.addToPending([pendingAssociation], null);\n    } else {\n      this.deleteAllExisting();\n      this.deleteAllPending();\n    }\n  }\n\n  private buildPreviewConfig(\n    association: IAssociationRecord,\n    fields: IRecordPreviewCardField[],\n    state: string\n  ): IRecordPreviewCardConfig {\n    return {\n      id: association.id,\n      state: state,\n\n      onDelete: (associationId) => {\n        this.associationManager.delete(associationId);\n      },\n\n      fields: _map(fields, (field) => {\n        const fieldDefinition = this.fieldDefinitions[field.fieldId];\n        const fieldInstance = association.fieldInstances[field.fieldId];\n\n        let value;\n\n        if (fieldInstance) {\n          value = fieldInstance.value;\n        }\n\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n          value = fieldDefinition.optionNamesById[value];\n        }\n\n        if (\n          fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType ||\n          (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType && isString(value))\n        ) {\n          value = this.datePipe.transform(value, 'mediumDate');\n        }\n\n        return {\n          label: field.label,\n          value: value || '<unknown>',\n          index: field.index,\n          fieldId: field.fieldId\n        };\n      })\n    };\n  }\n\n  showPendingAssociations(): void {\n    this.currentPendingCount += this.pendingPageSize;\n  }\n\n  getPendingPreviewConfigurations(): IRecordPreviewCardConfig[] {\n    return this.pendingPreviewConfigurations.slice(0, this.currentPendingCount);\n  }\n\n  private extractRolesConfig(): IRolesConfig {\n    return {\n      useDefaultRoles: this.useDefaultRoles,\n      nodeARole: this.nodeARole,\n      nodeBRole: this.nodeBRole\n    };\n  }\n\n  private updateTotalExistingAssociationsCount(): void {\n    this.associationManager.totalExistingCount =\n      (this.associationManager.remainingAssociatedRecordCount || 0) + this.existingPreviewConfigurations.length;\n  }\n\n  private getStateForPreviewConfiguration(): RecordEditorState {\n    return this.areActionsAvailable && !this.isDisabled ? RecordEditorState.Edit : RecordEditorState.Read;\n  }\n\n  private getFirstAssociationRecord(): IAssociationRecord {\n    return this.associationManager.existing[0] || this.associationManager.pending[0] || {};\n  }\n\n  private onAssociationsChanged(associations: IAssociationRecord[], configName: string): void {\n    const firstAssociatedRecord = this.getFirstAssociationRecord();\n\n    this.notifyPropertyChanged('firstAssociatedRecord', { id: firstAssociatedRecord.id || '' });\n\n    if (this.editingMode === RxAssociationEditingMode.Views) {\n      const associationsToPreview = associations.filter(\n        (association) =>\n          every(this.previewRolesConfig, isEmpty) || isEqual(this.previewRolesConfig, association.rolesConfig)\n      );\n\n      this[configName] = this.rebuildPreviewConfigurations(associationsToPreview);\n    } else if (this.editingMode === RxAssociationEditingMode.Dropdown) {\n      if (firstAssociatedRecord.id) {\n        this.selectedOptions = [\n          {\n            displayValue: firstAssociatedRecord.fieldInstances[this.fieldId]?.value,\n            value: firstAssociatedRecord.id\n          }\n        ];\n      } else {\n        this.resetDropdownSelection();\n      }\n\n      this.formControl.setValue(firstAssociatedRecord.id);\n    }\n  }\n\n  private rebuildPreviewConfigurations(associations: IAssociationRecord[]): IRecordPreviewCardConfig[] {\n    const state = this.getStateForPreviewConfiguration();\n\n    return _map(associations, (association) => {\n      return this.buildPreviewConfig(association, this.fields, state);\n    });\n  }\n}\n","<rx-read-only-field\n  *ngIf=\"!isHidden && isReadModeEnabled() && (existingPreviewConfigurations.length === 0 || editingMode === 'dropdown')\"\n  [label]=\"label\"\n  [value]=\"getAssociatedValue()\"\n></rx-read-only-field>\n\n<div *ngIf=\"!isHidden\" [ngSwitch]=\"editingMode\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"label\" [ngClass]=\"{ 'read-state': isReadModeEnabled() }\">\n    <adapt-rx-control-label *ngIf=\"isEditModeEnabled() || existingPreviewConfigurations.length > 0\" [label]=\"label\">\n    </adapt-rx-control-label>\n\n    <div *ngIf=\"areActionsAvailable\">\n      <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n    </div>\n\n    <div *ngIf=\"isReadModeEnabled()\">\n      <div [ngSwitch]=\"associationManager.cardinalityType\">\n        <div *ngSwitchCase=\"associationManager.cardinalityTypes.One\">\n          <div *ngIf=\"existingPreviewConfigurations.length || pendingPreviewConfigurations.length\" class=\"list-group\">\n            <rx-record-preview-card\n              [config]=\"existingPreviewConfigurations[0] || pendingPreviewConfigurations[0]\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n        </div>\n\n        <div *ngSwitchDefault>\n          <div class=\"list-group\">\n            <rx-record-preview-card\n              *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n              [config]=\"previewCardConfig\"\n              class=\"list-group-item\"\n            ></rx-record-preview-card>\n          </div>\n\n          <button\n            *ngIf=\"\n              associationManager.totalExistingCount >\n              existingPreviewConfigurations.length + associationManager.deleted.length\n            \"\n            (click)=\"loadExistingAssociations()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"isEditModeEnabled()\">\n      <div *ngIf=\"existingPreviewConfigurations.length\" class=\"form-group\">\n        <div class=\"d-flex justify-content-end pb-1\">\n          <span class=\"preview-count\">\n            {{\n              associationManager.totalExistingCount > 1\n                ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                  | translate\n                    : {\n                        count: associationManager.totalExistingCount\n                      })\n                : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n            }}\n          </span>\n\n          <button\n            [hidden]=\"!areActionsAvailable || isDisabled\"\n            (click)=\"deleteAllExisting()\"\n            adapt-button\n            size=\"small\"\n            btn-type=\"tertiary\"\n            class=\"btn btn-link py-0\"\n            type=\"button\"\n          >\n            {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n          </button>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of existingPreviewConfigurations\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"\n            associationManager.totalExistingCount >\n            existingPreviewConfigurations.length + associationManager.deleted.length\n          \"\n          (click)=\"loadExistingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n\n      <div *ngIf=\"pendingPreviewConfigurations.length\" class=\"form-group mt-3\">\n        <div class=\"d-flex justify-content-between\">\n          <div class=\"m-0\">\n            {{\n              'com.bmc.arsys.rx.client.view-components.record-editor.association.pending-associations.label' | translate\n            }}\n            :\n          </div>\n\n          <div class=\"d-flex pb-1\">\n            <span class=\"preview-count\">\n              {{\n                totalPendingCount > 1\n                  ? ('com.bmc.arsys.rx.client.view-components.record-editor.association.total-items.label'\n                    | translate\n                      : {\n                          count: totalPendingCount\n                        })\n                  : ('com.bmc.arsys.rx.client.view-components.record-editor.association.single-item.label' | translate)\n              }}\n            </span>\n\n            <button\n              [hidden]=\"!areActionsAvailable || isDisabled\"\n              (click)=\"deleteAllPending()\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              class=\"btn btn-link py-0\"\n              type=\"button\"\n            >\n              {{\n                'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate\n              }}\n            </button>\n          </div>\n        </div>\n\n        <div class=\"list-group\">\n          <rx-record-preview-card\n            *ngFor=\"let previewCardConfig of getPendingPreviewConfigurations()\"\n            [config]=\"previewCardConfig\"\n            class=\"list-group-item\"\n          ></rx-record-preview-card>\n        </div>\n\n        <button\n          *ngIf=\"totalPendingCount > currentPendingCount\"\n          (click)=\"showPendingAssociations()\"\n          adapt-button\n          size=\"small\"\n          btn-type=\"tertiary\"\n          type=\"button\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.show-more.label' | translate }}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div *ngIf=\"isEditModeEnabled()\" [attr.aria-label]=\"label\">\n      <rx-select-with-pagination\n        [formControl]=\"formControl\"\n        [readonly]=\"isDisabled\"\n        [label]=\"label\"\n        [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n        [optionLoader]=\"optionLoaderFunc\"\n        [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n      ></rx-select-with-pagination>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { filter, flow, map, sortBy } from 'lodash';\nimport { RX_ASSOCIATION } from '../association.types';\n\n@Injectable()\nexport class RxAssociationDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(private rxViewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(associationComponentDefinition: IContainerViewComponentDefinition, viewDefinition: IViewDefinition) {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      associationComponentDefinition\n    );\n\n    const childButtons = associationComponentDefinition.componentDefinitions.filter(\n      (component) => component.type === RxViewComponentType.ActionButton\n    );\n\n    const childSortedButtons = sortBy(childButtons, (componentDefinition: IViewComponentDefinition) =>\n      componentDefinition.propertiesByName.action === RX_ASSOCIATION.actions.associate ? 0 : 1\n    );\n\n    associationComponentDefinition.propertiesByName.state = targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    associationComponentDefinition.propertiesByName.useDefaultRoles =\n      associationComponentDefinition.propertiesByName.useDefaultRoles === 'true';\n\n    associationComponentDefinition.propertiesByName.fields = flow(\n      (componentDefinitions) =>\n        filter(componentDefinitions, {\n          type: RX_ASSOCIATION.componentTypes.associatedRecordField\n        }),\n      (componentDefinitions) =>\n        map(componentDefinitions, (fieldComponentDefinition) => ({\n          fieldId: fieldComponentDefinition.propertiesByName.fieldId,\n          label: fieldComponentDefinition.propertiesByName.label,\n          index: Number(fieldComponentDefinition.propertiesByName.index)\n        })),\n      (componentDefinitions) => sortBy(componentDefinitions, 'index')\n    )(associationComponentDefinition.componentDefinitions);\n\n    associationComponentDefinition.layout = JSON.stringify({\n      outlets: [\n        {\n          name: 'DEFAULT',\n          columns: [\n            {\n              children: childSortedButtons.map((component: IViewComponentDefinition) => component.guid)\n            }\n          ]\n        }\n      ]\n    });\n\n    associationComponentDefinition.componentDefinitions\n      .filter(\n        (componentDefinition: IViewComponentDefinition) => componentDefinition.type === RxViewComponentType.ActionButton\n      )\n      .forEach((componentDefinition: IViewComponentDefinition) => {\n        componentDefinition.propertiesByName.disabled =\n          associationComponentDefinition.propertiesByName.disabled +\n          ' OR ${view.components.' +\n          associationComponentDefinition.guid +\n          '.isDisabled}';\n      });\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n}\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { RxAssociationDefinitionAdapterService } from './association-definition-adapter.service';\nimport { RxAssociationComponent } from './association.component';\nimport { RxRecordPreviewCardComponent } from './record-preview-card/record-preview-card.component';\n\n@NgModule({\n  imports: [\n    AdaptButtonModule,\n    AdaptRxFormControlModule,\n    CommonModule,\n    FormsModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    RuntimeViewCanvasModule,\n    RxSelectWithPaginationModule,\n    TranslateModule\n  ],\n  declarations: [RxAssociationComponent, RxRecordPreviewCardComponent],\n  entryComponents: [RxAssociationComponent, RxRecordPreviewCardComponent],\n  providers: [DatePipe, RxAssociationDefinitionAdapterService]\n})\nexport class AssociationModule {\n  constructor(\n    private rxAssociationDefinitionAdapterService: RxAssociationDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Association,\n      this.rxAssociationDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { ActiveModalRef, DismissReasons, TreeWrap } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { RxGuidService, RxStringService } from '@helix/platform/utils';\nimport { includes, map, pull, sortBy, transform } from 'lodash';\nimport {\n  IAssociatedRecordFieldDialog,\n  IAssociationRecordFieldSelectorEditorDialogConfig,\n  IFieldLabelsMap,\n  IViewAssociationRecordFieldSelectorEditorDialogItem\n} from './association-record-field-selector-editor-dialog.interface';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TreeNode } from 'primeng/api/treenode';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/drag-events';\n\n@Component({\n  selector: 'rx-association-record-field-selector-editor-dialog',\n  templateUrl: './association-record-field-selector-editor-dialog.component.html',\n  styleUrls: ['./association-record-field-selector-editor-dialog.component.scss']\n})\nexport class AssociationRecordFieldSelectorEditorDialogComponent extends RxModalClass implements OnInit {\n  config: IAssociationRecordFieldSelectorEditorDialogConfig;\n  fieldLabelsMap: IFieldLabelsMap;\n  filteredFieldDescriptors: IFieldDefinition[];\n  searchValue: string;\n\n  availableFieldTreeNodes: TreeNode<IFieldDefinition>[] = [];\n  canSave = false;\n  selectedFields: IViewAssociationRecordFieldSelectorEditorDialogItem[] = [];\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n\n  constructor(\n    private rxStringService: RxStringService,\n    private rxGuidService: RxGuidService,\n    public activeModalRef: ActiveModalRef,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    this.config = this.activeModalRef.getData();\n  }\n\n  isDirty(): boolean {\n    return this.canSave;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.fieldLabelsMap = transform(\n      this.config.fields,\n      (result, field) => {\n        result[field.id] = field.name;\n      },\n      {}\n    );\n\n    this.availableFieldTreeNodes = this.config.fields\n      .map((field) => ({\n        data: field,\n        label: field.name\n      }))\n      .sort((field1, field2) => field1.label.localeCompare(field2.label));\n\n    this.selectedFields = map(this.config.selectedFields, (field: IAssociatedRecordFieldDialog) => {\n      const descriptor = this.config.fields.find((fieldItem) => fieldItem.id === Number(field.data.fieldId));\n\n      return {\n        ...field,\n        labelText: field.data.label,\n        indexOrder: Number(field.data.index),\n        descriptor,\n        isOpen: field === this.config.fieldToEdit\n      };\n    });\n\n    this.refreshFieldDescriptorsList();\n  }\n\n  addField(field: IFieldDefinition): void {\n    this.canSave = true;\n\n    this.selectedFields.push({\n      guid: this.rxGuidService.generate(),\n      data: {\n        fieldId: String(field.id),\n        label: field.name,\n        index: String(this.selectedFields.length)\n      },\n      descriptor: field,\n      labelText: field.name,\n      indexOrder: this.selectedFields.length,\n      isOpen: true\n    });\n\n    this.refreshFieldDescriptorsList();\n  }\n\n  onSelectedFieldsListDrop(event: CdkDragDrop<any>): void {\n    this.addField(event.item.data);\n  }\n\n  onSave(): void {\n    const result: IAssociatedRecordFieldDialog[] = this.selectedFields.map((field) => {\n      return {\n        guid: field.guid,\n        type: 'rx-associated-record-field',\n        data: {\n          fieldId: field.data.fieldId,\n          index: String(field.indexOrder),\n          label: field.labelText\n        }\n      };\n    });\n\n    this.activeModalRef.close(result);\n  }\n\n  onRemove(field: IViewAssociationRecordFieldSelectorEditorDialogItem): void {\n    this.canSave = true;\n    pull(this.selectedFields, field);\n    this.refreshFieldDescriptorsList();\n  }\n\n  onMoveUp(field: IViewAssociationRecordFieldSelectorEditorDialogItem, index: number): void {\n    this.canSave = true;\n    const prevField = this.selectedFields[index - 1];\n\n    if (prevField) {\n      prevField.indexOrder++;\n      field.indexOrder--;\n      this.sortFields();\n    }\n  }\n\n  onMoveDown(field: IViewAssociationRecordFieldSelectorEditorDialogItem, index: number): void {\n    this.canSave = true;\n    const nextAction = this.selectedFields[index + 1];\n\n    if (nextAction) {\n      nextAction.indexOrder--;\n      field.indexOrder++;\n      this.sortFields();\n    }\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.selectedFields.forEach((field) => (field.isOpen = expandAll));\n  }\n\n  private sortFields(): void {\n    this.selectedFields = sortBy(\n      this.selectedFields,\n      (field: IViewAssociationRecordFieldSelectorEditorDialogItem) => field.indexOrder\n    );\n  }\n\n  refreshFieldDescriptorsList(): void {\n    const selectedFieldIds = this.selectedFields.map((field) => String(field.data.fieldId));\n\n    this.filteredFieldDescriptors = this.config.fields\n      .filter((fieldDescriptor) => !includes(selectedFieldIds, String(fieldDescriptor.id)))\n      .sort((field1, field2) => field1.name.localeCompare(field2.name));\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!config.isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Available fields</h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block\">\n          <div\n            *ngIf=\"availableFieldTreeNodes.length; else adaptTreeEmptyStateTemplate\"\n            cdkDropList\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selected-fields']\"\n          >\n            <adapt-tree [value]=\"availableFieldTreeNodes\" filter=\"true\" [wrap]=\"treeWrap\">\n              <ng-template let-field adaptTreeNodeTemplate>\n                <div *ngIf=\"field.data\" class=\"rx-tree-draggable-node\" cdkDrag [cdkDragData]=\"field.data\">\n                  <div (dblclick)=\"addField(field.data)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addField(field.data)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ field.data.name }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <ng-template #adaptTreeEmptyStateTemplate>\n            <div class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n              <adapt-empty-state class=\"w-100\" label=\"No fields found\" type=\"search\"></adapt-empty-state>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ config.isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">Selected fileds</h4>\n\n        <div *ngIf=\"selectedFields.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selected-fields\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedFieldsListDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let field of selectedFields; let index = index; let first = first; let last = last\"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragDisabled]=\"true\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"field.isOpen\"\n              (open)=\"field.isOpen = true\"\n              (close)=\"field.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"fieldLabelsMap[field.data.fieldId]\" rx-id=\"card-title\">\n                      {{ fieldLabelsMap[field.data.fieldId] }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); onMoveDown(field, index)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); onMoveUp(field, index)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"onRemove(field)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"text-aria-resize\"\n                label=\"Label\"\n                [(ngModel)]=\"field.labelText\"\n                (ngModelChange)=\"canSave = true\"\n              >\n              </adapt-rx-textfield>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!selectedFields.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state class=\"w-100\" label=\"No fields selected\" type=\"config\"></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!canSave\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport {\n  IAssociatedRecordField,\n  IAssociationRecordFieldSelectorFormControlOptions\n} from './association-record-field-selector-form-control.interface';\nimport { noop, sortBy } from 'lodash';\nimport { AssociationRecordFieldSelectorEditorDialogComponent } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.component';\nimport { IAssociationRecordFieldSelectorEditorDialogConfig } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.interface';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-association-record-field-selector-form-control',\n  templateUrl: './association-record-field-selector-form-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AssociationRecordFieldSelectorFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class AssociationRecordFieldSelectorFormControlComponent\n  extends ValueAccessor<IAssociatedRecordField[]>\n  implements IFormControlComponent, IFormFocusable\n{\n  @Input()\n  options: IAssociationRecordFieldSelectorFormControlOptions;\n\n  @ViewChild('openModalButton', { read: ElementRef, static: true })\n  openModalButton: ElementRef;\n\n  selectedFields: Array<IAssociatedRecordField & { label: string }> = [];\n\n  constructor(private rxModalService: RxModalService, private renderer: Renderer2) {\n    super();\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.openModalButton.nativeElement, true).click();\n  }\n\n  openFieldSelector(fieldToEdit?: IAssociatedRecordField): void {\n    this.rxModalService\n      .openModal({\n        title: this.options.label,\n        data: {\n          fields: this.options.fields,\n          selectedFields: this.value,\n          fieldToEdit: fieldToEdit,\n          isReadOnly: this.isDisabled\n        } as IAssociationRecordFieldSelectorEditorDialogConfig,\n        content: AssociationRecordFieldSelectorEditorDialogComponent\n      })\n      .then((fields) => {\n        this.value = fields;\n      })\n      .catch(noop);\n  }\n\n  onSetValue(): void {\n    this.updateSortedFieldList();\n  }\n\n  onWriteValue(value: IAssociatedRecordField[]): void {\n    this.updateSortedFieldList();\n  }\n\n  removeField(guid: string): void {\n    this.value = this.value.filter((field) => field.guid !== guid);\n  }\n\n  editField(field: IAssociatedRecordField): void {\n    this.openFieldSelector(field);\n  }\n\n  private updateSortedFieldList(): void {\n    this.selectedFields = sortBy(this.value, (field) => Number(field.data.index)).map((field) => ({\n      ...field,\n      label: this.options.fields.find((fieldDefinition) => fieldDefinition.id === Number(field.data.fieldId)).name\n    }));\n  }\n}\n","<button\n  #openModalButton\n  adapt-button\n  type=\"button\"\n  class=\"px-0 py-0\"\n  btn-type=\"tertiary\"\n  (click)=\"openFieldSelector()\"\n  [disabled]=\"isDisabled\"\n>\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  {{ options.label }}\n</button>\n\n<ul class=\"list-unstyled mb-0 mt-2\" *ngIf=\"selectedFields.length > 0\">\n  <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let field of selectedFields\">\n    <strong class=\"mr-auto\">{{ field.label }}</strong>\n\n    <button\n      class=\"d-icon-left-pencil p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"editField(field)\"\n    ></button>\n\n    <button\n      class=\"d-icon-left-cross_adapt p-1\"\n      adapt-button\n      btn-type=\"tertiary\"\n      size=\"small\"\n      type=\"button\"\n      [disabled]=\"isDisabled\"\n      (click)=\"removeField(field.guid)\"\n    ></button>\n  </li>\n</ul>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AdaptAccordionModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule,\n  AdaptRxSearchModule,\n  AdaptRxTextfieldModule,\n  AdaptTreeModule\n} from '@bmc-ux/adapt-angular';\nimport { AssociationRecordFieldSelectorEditorDialogComponent } from './association-record-field-selector-editor-dialog.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [AssociationRecordFieldSelectorEditorDialogComponent],\n  exports: [AssociationRecordFieldSelectorEditorDialogComponent],\n  entryComponents: [AssociationRecordFieldSelectorEditorDialogComponent],\n  imports: [\n    CommonModule,\n    AdaptRxSearchModule,\n    AdaptButtonModule,\n    AdaptAccordionModule,\n    FormsModule,\n    AdaptRxTextfieldModule,\n    DragDropModule,\n    AdaptTreeModule,\n    AdaptEmptyStateModule,\n    TranslateModule\n  ]\n})\nexport class AssociationRecordFieldSelectorEditorDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptIconModule } from '@bmc-ux/adapt-angular';\nimport { AssociationRecordFieldSelectorFormControlComponent } from './association-record-field-selector-form-control.component';\nimport { AssociationRecordFieldSelectorEditorDialogModule } from './association-record-field-selector-editor-dialog/association-record-field-selector-editor-dialog.module';\n\n@NgModule({\n  declarations: [AssociationRecordFieldSelectorFormControlComponent],\n  exports: [AssociationRecordFieldSelectorFormControlComponent],\n  entryComponents: [AssociationRecordFieldSelectorFormControlComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptButtonModule,\n    AdaptIconModule,\n    AssociationRecordFieldSelectorEditorDialogModule\n  ]\n})\nexport class AssociationRecordFieldSelectorFormControlModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionDataPageService\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport {\n  IExpressionConfigurator,\n  IFormControlBuilderConfig,\n  RxDefinitionNameService\n} from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxGuidService } from '@helix/platform/utils';\nimport {\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  validateStandardProps,\n  ViewComponentAddComponentPayload\n} from '@helix/platform/view/designer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_ASSOCIATION, RxAssociationEditingMode } from '../association.types';\nimport { IAssociationChildComponents, IAssociationDesignProperties } from './association-design.types';\nimport {\n  AssociationRecordFieldSelectorFormControlComponent,\n  IAssociatedRecordField\n} from './association-record-field-selector-field';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\n\n@Injectable()\nexport class AssociationDesignHelperService {\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxGuidService: RxGuidService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getDropdownModeInspectorControls(\n    recordDefinitionField: IFieldDefinition[],\n    associationDefinitionFilters: IAssociationDefinition[]\n  ): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'fieldId',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Field to display',\n          options: recordDefinitionField\n            ? recordDefinitionField\n                .filter((associationDefinitionField) =>\n                  [\n                    RX_RECORD_DEFINITION.resourceTypes.character,\n                    RX_RECORD_DEFINITION.resourceTypes.localizedCharacter\n                  ].includes(associationDefinitionField.resourceType)\n                )\n                .map((associationDefinitionField) => ({\n                  id: String(associationDefinitionField.id),\n                  name: associationDefinitionField.name\n                }))\n            : [],\n          emptyOption: true,\n          required: true\n        } as ISelectFormControlOptions\n      },\n      {\n        name: 'filterByAssociation',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Filter by association',\n          options: associationDefinitionFilters\n            ? associationDefinitionFilters.map((associationDefinition) => ({\n                id: associationDefinition.name,\n                name: this.rxDefinitionNameService.getDisplayName(associationDefinition.name)\n              }))\n            : [],\n          emptyOption: true\n        } as ISelectFormControlOptions\n      }\n    ];\n  }\n\n  getDisplayedFieldsControl(recordDefinitionFields: IFieldDefinition[]): IFormControlBuilderConfig {\n    return {\n      name: 'displayedFields',\n      component: AssociationRecordFieldSelectorFormControlComponent,\n      options: {\n        label: 'Show/Hide fields',\n        fields: recordDefinitionFields,\n        required: true\n      }\n    };\n  }\n\n  getRecordIdControl(): IFormControlBuilderConfig {\n    return {\n      name: 'recordId',\n      component: ExpressionInspectorControlComponent,\n      options: {\n        label: 'Record ID',\n        isRequired: true\n      } as IExpressionInspectorControlOptions\n    };\n  }\n\n  getUseDefaultRolesControl(): IFormControlBuilderConfig {\n    return {\n      name: 'useDefaultRoles',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Use default roles'\n      }\n    };\n  }\n\n  getNodeABRoleControls(): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'nodeARole',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'First record role'\n        } as IExpressionInspectorControlOptions\n      },\n      {\n        name: 'nodeBRole',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Second record role'\n        } as IExpressionInspectorControlOptions\n      }\n    ];\n  }\n\n  getViewModeInspectorControls(): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'viewDefinitionNameForSelect',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View for selecting associated records',\n          definitionType: RxDefinitionPickerType.View,\n          required: true\n        }\n      },\n      {\n        name: 'viewDefinitionNameForCreate',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View for creating associated records',\n          definitionType: RxDefinitionPickerType.View\n        }\n      }\n    ];\n  }\n\n  getInitialInspectorControls(expressionConfigurator: IExpressionConfigurator): IFormControlBuilderConfig[] {\n    return [\n      {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Display label'\n        }\n      },\n      getDisabledFieldInspectorConfig(),\n      ...getStandardPropsInspectorConfigs()\n    ];\n  }\n\n  getInitialProperties(): IAssociationDesignProperties {\n    return {\n      associatedRecordNodeSide: '',\n      associationDefinitionName: '',\n      displayedFields: [],\n      editingMode: RxAssociationEditingMode.Views,\n      fieldId: null,\n      filterByAssociation: '',\n      label: null,\n      nodeARole: '',\n      nodeBRole: '',\n      recordDefinition: '',\n      recordDefinitionName: '',\n      recordId: '',\n      recordInstance: '',\n      useDefaultRoles: true,\n      viewDefinitionNameForCreate: '',\n      viewDefinitionNameForSelect: '',\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES\n    };\n  }\n\n  getActionButtonDefinition(\n    componentProperties: IAssociationDesignProperties,\n    action: string,\n    parentGuid: string\n  ): ViewComponentAddComponentPayload {\n    return {\n      type: RxViewComponentType.ActionButton,\n      guid: this.rxGuidService.generate(),\n      propertiesByName: {\n        labelKey:\n          action === RX_ASSOCIATION.actions.associate\n            ? 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.associate.label'\n            : 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.create-new.label',\n        style: 'secondary',\n        action\n      },\n      children: [\n        {\n          guid: this.rxGuidService.generate(),\n          type: RxViewComponentType.Action,\n          propertiesByName: {\n            name: 'rxAvcAssociate',\n            associationViewComponent: `\\${view.components.${parentGuid}.api}`,\n            viewDefinitionName:\n              action === RX_ASSOCIATION.actions.associate\n                ? componentProperties.viewDefinitionNameForSelect\n                : componentProperties.viewDefinitionNameForCreate\n          }\n        }\n      ],\n      insertIndex: action === RX_ASSOCIATION.actions.associate ? 0 : 1\n    };\n  }\n\n  isCardinalityOne(\n    componentProperties: IAssociationDesignProperties,\n    associationDefinitions: IAssociationDefinition[]\n  ): boolean {\n    const associationDefinition: IAssociationDefinition = associationDefinitions.find(\n      (association) => association.name === componentProperties.associationDefinitionName\n    );\n\n    return Boolean(\n      associationDefinition &&\n        (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value ||\n          (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value &&\n            componentProperties.associatedRecordNodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value))\n    );\n  }\n\n  getAvailableAssociations(\n    firstRecordDefinitionName: string,\n    secondRecordDefinitionName: string\n  ): Observable<IAssociationDefinition[]> {\n    const getParametersForAssociation = {\n      headers: { 'default-bundle-scope': '' },\n      params: { firstRecordDefinitionName, secondRecordDefinitionName, requireDependent: true }\n    };\n\n    return this.rxAssociationDefinitionDataPageService\n      .get(getParametersForAssociation)\n      .pipe(map((response) => response.data));\n  }\n\n  getRecordDefinition(recordDefinitionToAssociateName: string): Observable<IRecordDefinition> {\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionToAssociateName);\n  }\n\n  getFieldsInChildComponentsWithNames(\n    components: IAssociatedRecordField[],\n    availableFields: IFieldDefinition[]\n  ): IAssociatedRecordField[] {\n    return components.reduce((acc: IAssociatedRecordField[], definition: IAssociatedRecordField) => {\n      const fieldDescriptor = availableFields.find(\n        (fieldDescriptorItem) => fieldDescriptorItem.id === Number(definition.data.fieldId)\n      );\n      acc.push({\n        ...definition,\n        data: {\n          ...definition.data,\n          name: fieldDescriptor ? fieldDescriptor.name : definition.data.label\n        }\n      });\n\n      return acc;\n    }, []);\n  }\n\n  cleanEditingModeDependentData(componentProperties: IAssociationDesignProperties): void {\n    if (componentProperties.editingMode === RxAssociationEditingMode.Dropdown) {\n      componentProperties.viewDefinitionNameForSelect = null;\n      componentProperties.viewDefinitionNameForCreate = null;\n      componentProperties.displayedFields = [];\n    } else {\n      componentProperties.filterByAssociation = null;\n      componentProperties.recordId = null;\n      componentProperties.fieldId = null;\n    }\n  }\n\n  getNodeSideOptions(associationDefinition: IAssociationDefinition): RxSelectOption[] {\n    return associationDefinition.nodeAId === associationDefinition.nodeBId\n      ? [\n          {\n            id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n            name: associationDefinition.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n          },\n          {\n            id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n            name: associationDefinition.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n          }\n        ]\n      : [];\n  }\n\n  resetRolesData(componentProperties: IAssociationDesignProperties): void {\n    componentProperties.useDefaultRoles = false;\n    componentProperties.nodeARole = null;\n    componentProperties.nodeBRole = null;\n  }\n\n  validate(\n    sandbox: IViewComponentDesignSandbox,\n    properties: IAssociationDesignProperties,\n    associationDefinition: IAssociationDefinition,\n    childComponents: IAssociationChildComponents\n  ): IViewComponentDesignValidationIssue[] {\n    const validationIssues = [];\n\n    if (!properties.recordDefinitionName) {\n      validationIssues.push(\n        sandbox.createError('Record definition to associate cannot be blank.', 'recordDefinitionName')\n      );\n    }\n\n    if (properties.recordDefinitionName && !properties.associationDefinitionName) {\n      validationIssues.push(sandbox.createError('Association to Use cannot be blank.', 'associationDefinitionName'));\n    }\n\n    if (properties.associationDefinitionName) {\n      if (associationDefinition.nodeAId === associationDefinition.nodeBId && !properties.associatedRecordNodeSide) {\n        validationIssues.push(sandbox.createError('Associated Record Node Side cannot be blank.', 'fieldId'));\n      }\n    }\n\n    if (properties.editingMode === RxAssociationEditingMode.Views || !properties.editingMode) {\n      if (properties.recordDefinitionName && childComponents.displayedFields.length === 0) {\n        validationIssues.push(sandbox.createError('Preview Fields cannot be empty.', 'displayedFields'));\n      }\n\n      if (!properties.viewDefinitionNameForSelect) {\n        validationIssues.push(\n          sandbox.createError('View for selecting associated records cannot be blank.', 'viewDefinitionNameForSelect')\n        );\n      }\n    } else if (properties.editingMode === RxAssociationEditingMode.Dropdown) {\n      if (properties.filterByAssociation && !childComponents.recordId) {\n        validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordId'));\n      }\n\n      if (!properties.fieldId) {\n        validationIssues.push(sandbox.createError('Field to display cannot be blank.', 'fieldId'));\n      }\n    }\n\n    validationIssues.push(...validateStandardProps(properties));\n\n    return validationIssues;\n  }\n}\n","import { Injector } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService\n} from '@helix/platform/association/api';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport {\n  ISelectFormControlOptions,\n  IValidationFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  ViewComponentAddComponentPayload,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { defaults, get, isEqual, isNil, isUndefined, map as _map, omit } from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport {\n  concatMap,\n  concatMapTo,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\nimport { RX_ASSOCIATION, RxAssociationEditingMode } from '../association.types';\nimport { AssociationDesignHelperService } from './association-design-helper.service';\nimport {\n  IAssociationChildComponents,\n  IAssociationDesignProperties,\n  IAssociationProperties\n} from './association-design.types';\nimport {\n  IAssociatedRecordField,\n  IAssociationChild,\n  IAssociationFilter\n} from './association-record-field-selector-field';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RecordEditorDesignModel } from '../../../record-editor/design/record-editor-design.model';\n\nexport class AssociationDesignModel extends ViewDesignerComponentModel {\n  private rxAssociationDefinitionCacheService = this.injector.get<RxAssociationDefinitionCacheService>(\n    RxAssociationDefinitionCacheService\n  );\n\n  private rxGuidService = this.injector.get<RxGuidService>(RxGuidService);\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n\n  private associationDesignHelperService =\n    this.injector.get<AssociationDesignHelperService>(AssociationDesignHelperService);\n\n  private updateInspector$: Subject<IViewDesignerInspectorConfig> = new Subject();\n  private recordEditorGuid: string;\n  private recordDefinitionNameFromHostRecordEditor$: Observable<string>;\n  private childComponents$ = this.sandbox.getChildComponentsTree();\n  private associationChildComponentsData$ = this.getChildComponentsData();\n\n  private associationDefinitions: IAssociationDefinition[] = [];\n  private associationDefinitionFilters: IAssociationDefinition[] = [];\n  private recordDefinitionFields: IFieldDefinition[] = [];\n  private associatedRecordNodeSide: IAssociationDefinition[] = [];\n  private previousDropdownFieldDefinition: IFieldDefinition;\n  private isManyToManyAssociation = false;\n\n  readonly otherAssociationRecordEditorComponentGuids$: Observable<string[]>;\n  readonly recordEditorGuid$: Observable<string>;\n  readonly editingMode$ = this.sandbox.getComponentPropertyValue('editingMode');\n  readonly label$ = this.sandbox.getComponentPropertyValue('label');\n\n  readonly displayedFields$: Observable<IAssociatedRecordField[]>;\n\n  static getInitialProperties(initialProperties: IAssociationDesignProperties): IAssociationDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, public sandbox: IViewComponentDesignSandbox<IAssociationDesignProperties>) {\n    super(injector, sandbox);\n\n    // TODO: performance\n    this.updateInspector$\n      .pipe(distinctUntilChanged(isEqual), takeUntil(this.sandbox.destroyed$))\n      .subscribe((inspector) => {\n        this.sandbox.updateInspectorConfig(inspector);\n      });\n\n    const recordDefinitionName$ = sandbox.getComponentPropertyValue('recordDefinitionName');\n\n    const recordDefinitionFields$ = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.updateRecordDefinitionFields(recordDefinitionName) : of([])\n      )\n    );\n\n    this.displayedFields$ = combineLatest([\n      this.sandbox.getChildComponents(\n        (component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n      ),\n      recordDefinitionFields$\n    ]).pipe(\n      map(([components, availableFields]: [IAssociatedRecordField[], IFieldDefinition[]]) =>\n        this.associationDesignHelperService.getFieldsInChildComponentsWithNames(components, availableFields)\n      )\n    );\n\n    this.recordEditorGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.otherAssociationRecordEditorComponentGuids$ = this.recordEditorGuid$.pipe(\n      map((guid) => this.sandbox.getComponentModel<RecordEditorDesignModel>(guid)),\n      switchMap((model) =>\n        model.associationComponentGuids$.pipe(map((guids) => guids.filter((guid) => guid !== this.sandbox.guid)))\n      ),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$ = this.recordEditorGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$\n      .pipe(\n        switchMap((recordDefinitionRecordEditorName) =>\n          recordDefinitionRecordEditorName\n            ? combineLatest([this.sandbox.componentProperties$, this.associationChildComponentsData$]).pipe(\n                switchMap(([componentProperties, associationChildComponentsData]) => {\n                  const updateParameters = recordDefinitionRecordEditorName\n                    ? this.generateInitialUpdateParameters(componentProperties)\n                    : [];\n\n                  const updateParameters$ = updateParameters.length > 0 ? combineLatest(updateParameters) : of(null);\n\n                  return updateParameters$.pipe(\n                    map(() => ({\n                      componentProperties: { ...associationChildComponentsData, ...componentProperties },\n                      recordDefinitionRecordEditorName\n                    }))\n                  );\n                }),\n                take(1)\n              )\n            : of({\n                componentProperties: null,\n                recordDefinitionRecordEditorName: null\n              })\n        ),\n        withLatestFrom(this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([{ componentProperties, recordDefinitionRecordEditorName }, recordEditorGuid]) => {\n        const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n        const properties: IAssociationDesignProperties = {\n          ...initialProperties,\n          ...componentProperties,\n          useDefaultRoles: Boolean(componentProperties?.useDefaultRoles === 'true')\n        };\n\n        this.recordEditorGuid = recordEditorGuid;\n        this.sandbox.updateComponentProperties(properties);\n\n        this.updateInspector$.next(\n          this.getInspectorConfig(properties, recordDefinitionRecordEditorName, recordEditorGuid)\n        );\n      });\n\n    const childComponentGuids$ = this.childComponents$.pipe(\n      map((components) => components.map((component) => component.guid))\n    );\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          recordDefinitionName,\n          label: null,\n          associationDefinitionName: null,\n          associatedRecordNodeSide: null,\n          editingMode: RxAssociationEditingMode.Views,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(\n        skip(1),\n        concatMapTo(this.sandbox.componentProperties$),\n        concatMap((props) =>\n          combineLatest([\n            this.updateAssociationDefinitionsOptions(props.recordDefinitionName),\n            this.updateRecordDefinitionFields(props.recordDefinitionName),\n            this.updateAssociationDefinitionsFilterOptions(props.recordDefinitionName),\n            this.updateAssociationNodeSideOptions(props.associationDefinitionName),\n            this.updatePreviousDropdownFieldDefinition(props.recordDefinitionName, props.fieldId)\n          ]).pipe(take(1), mapTo(props))\n        ),\n        withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n        this.updateInspector$.next(\n          this.getInspectorConfig(componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid)\n        );\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('editingMode')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([editingMode, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          editingMode,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        skip(1),\n        pairwise(),\n        withLatestFrom(this.childComponents$),\n        switchMap(\n          ([[previousProperties, properties], children]: [\n            [IAssociationDesignProperties, IAssociationDesignProperties],\n            IAssociationChild[]\n          ]) => {\n            const updatedProperties = { ...properties };\n            const updatedParametersStreams = [];\n\n            switch (true) {\n              case previousProperties.viewDefinitionNameForSelect !== properties.viewDefinitionNameForSelect:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.associate\n                );\n\n                break;\n\n              case previousProperties.viewDefinitionNameForCreate !== properties.viewDefinitionNameForCreate:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.createAndAssociate\n                );\n\n                break;\n\n              case previousProperties.filterByAssociation !== properties.filterByAssociation:\n              case previousProperties.recordId !== properties.recordId:\n                const filterComponent = children.find(\n                  (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n                ) as IAssociationFilter;\n\n                this.updateAssociationFilterComponent(properties, filterComponent);\n\n                break;\n\n              case !isEqual(previousProperties.displayedFields, properties.displayedFields):\n                this.updateComponentRecordFields(properties.displayedFields, children as IAssociatedRecordField[]);\n\n                break;\n\n              case previousProperties.associationDefinitionName !== properties.associationDefinitionName:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                if (properties.associationDefinitionName) {\n                  updatedParametersStreams.push(\n                    this.rxAssociationDefinitionCacheService\n                      .getAssociationDefinition(properties.associationDefinitionName)\n                      .pipe(\n                        map((associationDefinition) => {\n                          updatedProperties.associatedRecordNodeSide =\n                            associationDefinition.nodeAId === properties.recordDefinitionName\n                              ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n                              : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value;\n\n                          this.setIsManyToManyAssociation(associationDefinition);\n                          this.sandbox.updateComponentProperties(updatedProperties);\n\n                          if (this.isManyToManyAssociation) {\n                            this.associationDesignHelperService.resetRolesData(updatedProperties);\n                          }\n                        })\n                      )\n                  );\n                } else {\n                  this.isManyToManyAssociation = false;\n                }\n\n                updatedParametersStreams.push(\n                  this.updateAssociationNodeSideOptions(properties.associationDefinitionName)\n                );\n\n                break;\n\n              case previousProperties.associatedRecordNodeSide !== properties.associatedRecordNodeSide:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                break;\n\n              case previousProperties.useDefaultRoles !== properties.useDefaultRoles:\n                if (properties.useDefaultRoles === true) {\n                  updatedProperties.nodeARole = null;\n                  updatedProperties.nodeBRole = null;\n                }\n\n                break;\n\n              case previousProperties.nodeARole !== properties.nodeARole ||\n                previousProperties.nodeBRole !== properties.nodeBRole:\n                if (isUndefined(properties.useDefaultRoles)) {\n                  defaults(updatedProperties, {\n                    nodeARole: null,\n                    nodeBRole: null,\n                    useDefaultRoles: false\n                  });\n                } else {\n                  updatedProperties.useDefaultRoles = false;\n                }\n\n                break;\n            }\n\n            const updateParameters$ =\n              updatedParametersStreams.length > 0 ? combineLatest(updatedParametersStreams) : of(null);\n\n            return updateParameters$.pipe(\n              map((parameters) => ({ parameters, componentProperties: updatedProperties })),\n              withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$)\n            );\n          }\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([{ parameters, componentProperties }, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n          const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n          this.recordEditorGuid = recordEditorGuid;\n\n          this.updateInspector$.next(\n            this.getInspectorConfig(\n              { ...initialProperties, ...componentProperties },\n              recordDefinitionNameFromHostRecordEditor,\n              recordEditorGuid\n            )\n          );\n        }\n      );\n\n    this.sandbox\n      .getComponentPropertyValue('fieldId')\n      .pipe(\n        // transform initial value to null if it is undefined\n        map((value) => (isNil(value) ? null : value)),\n        distinctUntilChanged(),\n        pairwise()\n      )\n      .pipe(\n        withLatestFrom(this.sandbox.componentProperties$),\n        // Check if editing mode is dropdown to prevent label reset after change fieldId to null.\n        filter(([fieldIds, props]) => Boolean(props.editingMode === RxAssociationEditingMode.Dropdown)),\n        switchMap(([[prevFieldId, fieldId], props]) =>\n          this.associationDesignHelperService.getRecordDefinition(props.recordDefinitionName).pipe(\n            map((recordDefinition) => {\n              const prevFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(prevFieldId)\n              )?.name;\n\n              const currentFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(fieldId)\n              )?.name;\n\n              // If the label is changed by user it must not be updated after fieldId change.\n              return !props.label || prevFieldDefinitionName === props.label ? currentFieldDefinitionName : props.label;\n            })\n          )\n        ),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.associationChildComponentsData$.pipe(distinctUntilChanged(isEqual))\n    ])\n      .pipe(\n        switchMap(([componentProperties, childComponents]) => {\n          const association$: Observable<IAssociationDefinition> = componentProperties.associationDefinitionName\n            ? this.rxAssociationDefinitionCacheService.getAssociationDefinition(\n                componentProperties.associationDefinitionName\n              )\n            : of({});\n\n          return association$.pipe(\n            map((associationDefinition) => {\n              return this.associationDesignHelperService.validate(\n                this.sandbox,\n                componentProperties,\n                associationDefinition,\n                childComponents\n              );\n            })\n          );\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.label$,\n      this.sandbox\n        .getComponentPropertyValue('associationDefinitionName')\n        .pipe(\n          map((associationDefinitionName) =>\n            associationDefinitionName ? this.rxDefinitionNameService.getDisplayName(associationDefinitionName) : null\n          )\n        )\n    ])\n      .pipe(\n        map(([label, definitionDisplayName]) => {\n          let componentName = this.sandbox.descriptor.name;\n\n          if (definitionDisplayName && label) {\n            componentName += ` (${definitionDisplayName}: ${label})`;\n          } else if (definitionDisplayName || label) {\n            componentName += ` (${definitionDisplayName || label})`;\n          }\n\n          return componentName;\n        }),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  getPropertiesByName(properties: IAssociationDesignProperties): IAssociationProperties {\n    return omit(\n      {\n        ...properties,\n        recordInstance: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordInstance}`\n          : properties.recordInstance,\n        recordDefinition: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordDefinition}`\n          : properties.recordDefinition\n      },\n      [\n        'displayedFields',\n        'filterByAssociation',\n        'recordId',\n        'viewDefinitionNameForSelect',\n        'viewDefinitionNameForCreate'\n      ]\n    ) as IAssociationProperties;\n  }\n\n  private updateAssociationFilterComponent(\n    componentProperties: IAssociationDesignProperties,\n    filterComponent: IAssociationFilter\n  ): void {\n    if (filterComponent) {\n      this.sandbox.removeComponents([filterComponent.guid]);\n    }\n\n    if (componentProperties.filterByAssociation) {\n      const filterNew = {\n        guid: this.rxGuidService.generate(),\n        type: RX_ASSOCIATION.componentTypes.associationFilter,\n        propertiesByName: {\n          associationDefinitionName: componentProperties.filterByAssociation,\n          recordInstanceId: componentProperties.recordId\n        }\n      };\n\n      this.sandbox.addComponent([filterNew]);\n    }\n  }\n\n  private updateChildActionButtonDefinition(\n    properties: IAssociationDesignProperties,\n    children: IAssociatedRecordField[],\n    action: string\n  ): void {\n    const actionButtonComponent = children.find(\n      (component) => component.type === RxViewComponentType.ActionButton && component.data['action'] === action\n    );\n\n    const viewDefinitionNameToUpdate =\n      action === RX_ASSOCIATION.actions.createAndAssociate\n        ? properties.viewDefinitionNameForCreate\n        : properties.viewDefinitionNameForSelect;\n\n    if (actionButtonComponent) {\n      this.sandbox.removeComponents([actionButtonComponent.guid]);\n    }\n\n    if (viewDefinitionNameToUpdate) {\n      const button = this.associationDesignHelperService.getActionButtonDefinition(\n        properties,\n        action,\n        this.sandbox['guid']\n      );\n\n      this.sandbox.addComponent([button]);\n    }\n  }\n\n  private updateComponentRecordFields(\n    displayedFields: IAssociatedRecordField[],\n    children: IAssociatedRecordField[]\n  ): void {\n    const guids = children\n      .filter((component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField)\n      .map((component) => component.guid);\n\n    const recordFields: ViewComponentAddComponentPayload[] = displayedFields.map((field) => ({\n      type: RX_ASSOCIATION.componentTypes.associatedRecordField,\n      guid: this.rxGuidService.generate(),\n      propertiesByName: {\n        fieldId: field.data.fieldId,\n        label: field.data.label || '',\n        index: field.data.index\n      }\n    }));\n\n    if (guids.length > 0) {\n      this.sandbox.removeComponents(guids);\n    }\n\n    this.sandbox.addComponent(recordFields);\n  }\n\n  private getChildComponentsData(): Observable<IAssociationChildComponents> {\n    return this.childComponents$.pipe(\n      map((components: IViewComponentDesignData[]) => {\n        const associationChildComponentsData: IAssociationChildComponents = {};\n\n        const associationFilters = components.filter(\n          (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n        );\n\n        associationChildComponentsData.displayedFields = components.filter(\n          (definition) => definition.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n        ) as IAssociatedRecordField[];\n\n        if (associationFilters.length > 0) {\n          associationChildComponentsData.recordId = associationFilters[0].data?.recordInstanceId;\n          associationChildComponentsData.filterByAssociation = associationFilters[0].data?.associationDefinitionName;\n        }\n\n        const createAndAssociateView = this.getViewDefinitionNameForAssociation(\n          components,\n          RX_ASSOCIATION.actions.createAndAssociate\n        );\n\n        if (createAndAssociateView) {\n          associationChildComponentsData.viewDefinitionNameForCreate = createAndAssociateView;\n        }\n\n        const associateView = this.getViewDefinitionNameForAssociation(components, RX_ASSOCIATION.actions.associate);\n\n        if (associateView) {\n          associationChildComponentsData.viewDefinitionNameForSelect = associateView;\n        }\n\n        return associationChildComponentsData;\n      })\n    );\n  }\n\n  private generateInitialUpdateParameters(\n    componentProperties: IAssociationProperties\n  ): Observable<IFieldDefinition[] | IFieldDefinition | IAssociationDefinition[]>[] {\n    const updateParameters = [];\n\n    if (componentProperties.recordDefinitionName) {\n      updateParameters.push(this.updateRecordDefinitionFields(componentProperties.recordDefinitionName));\n\n      if (componentProperties.fieldId) {\n        updateParameters.push(\n          this.updatePreviousDropdownFieldDefinition(\n            componentProperties.recordDefinitionName,\n            componentProperties.fieldId\n          )\n        );\n      }\n\n      updateParameters.push(this.updateAssociationDefinitionsOptions(componentProperties.recordDefinitionName));\n    }\n\n    if (componentProperties.associationDefinitionName) {\n      updateParameters.push(this.updateAssociationDefinitionsFilterOptions(componentProperties.recordDefinitionName));\n\n      updateParameters.push(\n        this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(componentProperties.associationDefinitionName)\n          .pipe(map((associationDefinition) => this.setIsManyToManyAssociation(associationDefinition)))\n      );\n    }\n\n    if (componentProperties.associatedRecordNodeSide) {\n      updateParameters.push(this.updateAssociationNodeSideOptions(componentProperties.associationDefinitionName));\n    }\n\n    return updateParameters;\n  }\n\n  private updatePreviousDropdownFieldDefinition(\n    recordDefinitionToAssociateName: string,\n    fieldId: string\n  ): Observable<IFieldDefinition> {\n    return this.updateRecordDefinitionFields(recordDefinitionToAssociateName).pipe(\n      map((fields) => {\n        return (this.previousDropdownFieldDefinition = fields.find((field) => field.id === Number(fieldId)));\n      })\n    );\n  }\n\n  private setIsManyToManyAssociation(associationDefinition: IAssociationDefinition): void {\n    if (associationDefinition) {\n      this.isManyToManyAssociation =\n        associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n    }\n  }\n\n  private getViewDefinitionNameForAssociation(components: IViewComponentDesignData[], action: string): string | null {\n    const actionButton = components.find((definition) => definition.data?.action === action);\n\n    return actionButton && actionButton.children ? this.getViewDefinitionNameFromActionButton(actionButton) : null;\n  }\n\n  private getViewDefinitionNameFromActionButton(actionButton: IViewComponentDesignData): string | null {\n    const actionComponent = actionButton.children.find((children) => children.type === RxViewComponentType.Action);\n\n    return get(actionComponent, 'data.viewDefinitionName', null);\n  }\n\n  private updateRecordDefinitionFields(recordDefinitionToAssociateName: string): Observable<IFieldDefinition[]> {\n    return (\n      recordDefinitionToAssociateName\n        ? this.associationDesignHelperService\n            .getRecordDefinition(recordDefinitionToAssociateName)\n            .pipe(map((recordDefinition) => recordDefinition.fieldDefinitions))\n        : of([])\n    ).pipe(tap((fieldDefinitions) => (this.recordDefinitionFields = fieldDefinitions)));\n  }\n\n  private updateAssociationNodeSideOptions(associationDefinitionName: string): Observable<IAssociationDefinition[]> {\n    const associatedRecordNodeSideOptions$ = associationDefinitionName\n      ? this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(associationDefinitionName)\n          .pipe(\n            map((associationDefinition) =>\n              this.associationDesignHelperService.getNodeSideOptions(associationDefinition)\n            )\n          )\n      : of([]);\n\n    return associatedRecordNodeSideOptions$.pipe(\n      tap((associatedRecordNodeSideOptions) => (this.associatedRecordNodeSide = associatedRecordNodeSideOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.recordDefinitionNameFromHostRecordEditor$.pipe(\n      switchMap((associatedRecordName) =>\n        recordDefinitionToAssociateName && associatedRecordName\n          ? this.associationDesignHelperService.getAvailableAssociations(\n              recordDefinitionToAssociateName,\n              associatedRecordName\n            )\n          : of([])\n      ),\n      tap((associationDefinitionOptions) => (this.associationDefinitions = associationDefinitionOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsFilterOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.otherAssociationRecordEditorComponentGuids$.pipe(\n      mergeMap((guids) =>\n        guids.length\n          ? combineLatest(\n              guids.map((guid) =>\n                this.sandbox.getComponentPropertyValue<'recordDefinitionName', IAssociationDesignProperties>(\n                  'recordDefinitionName',\n                  guid\n                )\n              )\n            ).pipe(take(1))\n          : of([])\n      ),\n      switchMap((associatedRecordNames) =>\n        associatedRecordNames.length && recordDefinitionToAssociateName\n          ? merge(\n              ...associatedRecordNames.map((associatedRecordName) =>\n                this.associationDesignHelperService.getAvailableAssociations(\n                  recordDefinitionToAssociateName,\n                  associatedRecordName\n                )\n              )\n            )\n          : of([])\n      ),\n      map((associationDefinitionFilters) => (this.associationDefinitionFilters = associationDefinitionFilters))\n    );\n  }\n\n  private getInspectorConfig(\n    properties: IAssociationDesignProperties,\n    recordDefinitionNameFromHostRecordEditor: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: []\n        }\n      ]\n    };\n\n    if (recordDefinitionNameFromHostRecordEditor) {\n      const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n      generalSectionControls.push({\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        }\n      });\n\n      if (properties.recordDefinitionName) {\n        generalSectionControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: this.associationDefinitions.map((associationDefinition) => ({\n              id: associationDefinition.name,\n              name: this.rxDefinitionNameService.getDisplayName(associationDefinition.name)\n            })),\n            emptyOption: true,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (properties.recordDefinitionName && this.associatedRecordNodeSide.length > 0) {\n        generalSectionControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Associated record node Side',\n            options: this.associatedRecordNodeSide,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (\n        properties.recordDefinitionName &&\n        this.associationDesignHelperService.isCardinalityOne(properties, this.associationDefinitions)\n      ) {\n        generalSectionControls.push({\n          name: 'editingMode',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association editing mode',\n            options: _map(RxAssociationEditingMode, (id, name) => ({ id, name })),\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      // View Mode\n      if (!properties.editingMode || properties.editingMode === RxAssociationEditingMode.Views) {\n        generalSectionControls.push(...this.associationDesignHelperService.getViewModeInspectorControls());\n\n        if (this.isManyToManyAssociation && properties.associationDefinitionName) {\n          generalSectionControls.push(this.associationDesignHelperService.getUseDefaultRolesControl());\n\n          if (!properties.useDefaultRoles) {\n            generalSectionControls.push(...this.associationDesignHelperService.getNodeABRoleControls());\n          }\n        }\n\n        if (properties.recordDefinitionName) {\n          generalSectionControls.push(\n            this.associationDesignHelperService.getDisplayedFieldsControl(this.recordDefinitionFields)\n          );\n        }\n      }\n\n      // Dropdown Mode\n      if (properties.editingMode === RxAssociationEditingMode.Dropdown) {\n        generalSectionControls.push(\n          ...this.associationDesignHelperService.getDropdownModeInspectorControls(\n            this.recordDefinitionFields,\n            this.associationDefinitionFilters\n          )\n        );\n\n        if (properties.filterByAssociation) {\n          generalSectionControls.push(this.associationDesignHelperService.getRecordIdControl());\n        }\n      }\n\n      generalSectionControls.push(\n        ...this.associationDesignHelperService.getInitialInspectorControls(this.expressionConfigurator)\n      );\n    } else {\n      inspectorConfig.inspectorSectionConfigs[0].controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: recordEditorGuid,\n            propertyName: 'recordDefinitionName'\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IViewDesignerCanvasLayout, IViewDesignerCanvasOutlet } from '@helix/platform/view/designer';\n\n@Component({\n  selector: 'rx-association-design-item-container',\n  templateUrl: './association-design-container.component.html',\n  styleUrls: ['./association-design-container.component.scss']\n})\nexport class RxAssociationDesignContainerComponent {\n  @Input()\n  outlet: IViewDesignerCanvasOutlet;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @Input()\n  layout: IViewDesignerCanvasLayout;\n}\n","<rx-canvas-item\n  *ngFor=\"let layout of outlet.columns[0].children\"\n  [interactive]=\"false\"\n  [layout]=\"layout\"\n  [isReadOnly]=\"isReadOnly\"\n  class=\"mr-1\"\n>\n</rx-canvas-item>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { AssociationDesignModel } from './association-design.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { ReplaySubject } from 'rxjs';\nimport { RxAssociationDesignContainerComponent } from './association-design-container.component';\n\n@Component({\n  selector: 'rx-association-field-design',\n  templateUrl: './association-design.component.html'\n})\nexport class RxAssociationDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: AssociationDesignModel;\n\n  hidePlaceholder = false;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  containerComponent = RxAssociationDesignContainerComponent;\n\n  ngOnInit(): void {\n    this.model.displayedFields$.pipe(takeUntil(this.destroyed$)).subscribe((fields) => {\n      this.hidePlaceholder = fields.length > 0;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<div [ngSwitch]=\"model.editingMode$ | async\">\n  <div *ngSwitchCase=\"'views'\" [attr.aria-label]=\"model.label$ | async\">\n    <label class=\"d-block form-control-label\">{{ model.label$ | async }}</label>\n\n    <div class=\"d-flex flex-wrap\">\n      <rx-canvas-outlet class=\"flex-grow-1\" [containerComponent]=\"containerComponent\"></rx-canvas-outlet>\n\n      <button\n        adapt-button\n        size=\"small\"\n        btn-type=\"tertiary\"\n        class=\"btn btn-link py-0 align-right\"\n        type=\"button\"\n        [hidden]=\"!hidePlaceholder\"\n      >\n        {{ 'com.bmc.arsys.rx.client.view-components.record-editor.association.button.clear-all.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-empty-state\n      [hidden]=\"hidePlaceholder\"\n      type=\"objects\"\n      label=\"Add fields in the Properties panel.\"\n    ></adapt-empty-state>\n\n    <div class=\"form-group mt-2\" [hidden]=\"!hidePlaceholder\">\n      <div class=\"list-group\">\n        <div class=\"list-group-item\">\n          <div class=\"rx-record-preview-card w-100\">\n            <button\n              class=\"btn btn-link float-right d-icon-cross p-0\"\n              adapt-button\n              size=\"small\"\n              btn-type=\"tertiary\"\n              type=\"button\"\n            ></button>\n\n            <ul class=\"list-unstyled mb-0\">\n              <li class=\"rx-record-preview-card__field\" *ngFor=\"let field of model.displayedFields$ | async\">\n                <span class=\"rx-record-preview-card__label\" *ngIf=\"field.data.label\">{{ field.data.label }}</span>\n                <span *ngIf=\"field.data.label\">: </span>\n                <span class=\"rx-record-preview-card__value\">{{ field.data.name }}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'dropdown'\">\n    <div [attr.aria-label]=\"model.label$ | async\">\n      <adapt-rx-select [label]=\"model.label$ | async\" [disabled]=\"true\" ngModel></adapt-rx-select>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  IViewLayoutOutlet,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { IActionButtonProperties } from '../../../action-button/action-button.types';\nimport { RxAssociationEditingMode } from '../association.types';\nimport { IAssociationProperties } from './association-design.types';\n\n@Injectable()\nexport class AssociationDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition<IAssociationProperties>, IViewDefinition>\n{\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition<IAssociationProperties>): void {\n    // If a view from old view designer gets opened we have to add a layout with\n    // action button guids, so they can be rendered inside association view component.\n    if (!componentDefinition.layout) {\n      const actionButtonGuids = componentDefinition.componentDefinitions\n        .filter((definition) => definition.type === RxViewComponentType.ActionButton)\n        .map((definition: IViewComponentDefinition<IActionButtonProperties>) => definition.guid);\n\n      componentDefinition.layout = JSON.stringify({\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [\n              {\n                children: actionButtonGuids\n              }\n            ]\n          }\n        ] as IViewLayoutOutlet[]\n      });\n    }\n\n    const adaptedProperties: Partial<IAssociationProperties> = {\n      editingMode: componentDefinition.propertiesByName.editingMode ?? RxAssociationEditingMode.Views,\n      nodeARole: componentDefinition.propertiesByName.nodeARole ?? null,\n      nodeBRole: componentDefinition.propertiesByName.nodeBRole ?? null,\n      styles: componentDefinition.propertiesByName.styles ?? null,\n      useDefaultRoles: componentDefinition.propertiesByName.useDefaultRoles ?? false\n    };\n\n    Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RxAssociationDesignComponent } from './association-design.component';\nimport { AdaptButtonModule, AdaptEmptyStateModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AssociationDesignHelperService } from './association-design-helper.service';\nimport { AssociationRecordFieldSelectorFormControlModule } from './association-record-field-selector-field/association-record-field-selector-form-control.module';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { RxAssociationDesignContainerComponent } from './association-design-container.component';\nimport { AssociationDesignAdapterService } from './association-design-adapter.service';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptButtonModule,\n    TranslateModule,\n    AssociationRecordFieldSelectorFormControlModule,\n    AdaptRxSelectModule,\n    FormsModule,\n    AdaptEmptyStateModule,\n    ViewDesignerCanvasModule\n  ],\n  declarations: [RxAssociationDesignComponent, RxAssociationDesignContainerComponent],\n  entryComponents: [RxAssociationDesignComponent],\n  providers: [AssociationDesignHelperService, AssociationDesignAdapterService]\n})\nexport class AssociationDesignModule {\n  constructor(\n    associationDesignAdapterService: AssociationDesignAdapterService,\n    rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.Association,\n      associationDesignAdapterService\n    );\n  }\n}\n","import {\n  IComponentPropertyDescriptor,\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\n\nexport const RX_BASE_FIELD_PROPERTIES: IComponentPropertyDescriptor[] = [\n  'api',\n  'disabled',\n  'recordDefinition',\n  'recordInstance',\n  'hidden',\n  'inReadState',\n  'value'\n].map((propertyName) => {\n  const result: IComponentPropertyDescriptor = {\n    name: propertyName,\n    enableExpressionEvaluation: true\n  };\n\n  if (['hidden', 'disabled'].includes(propertyName)) {\n    result.type = ViewComponentPropertyType.Boolean;\n  }\n\n  return result;\n});\n\nRX_BASE_FIELD_PROPERTIES.push(\n  {\n    name: 'label',\n    localizable: true\n  },\n  {\n    name: 'fieldId'\n  },\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC\n);\n","export const RX_FIELD_COMPONENTS = {\n  stencilGroupName: 'Record editor inputs'\n};\n","import { Injector } from '@angular/core';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewComponentDesignCommonDataDictionaryBranch,\n  RxViewComponentExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { concatMap, switchMap, map } from 'rxjs/operators';\nimport { AssociationDesignModel } from './association-design.model';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { IAssociationDesignProperties } from './association-design.types';\n\nexport class AssociationExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: AssociationDesignModel\n  ) {\n    super(injector, componentGuid, componentModel);\n\n    this.configureForProperty({\n      propertyPath: 'recordId',\n      dataDictionary$: componentModel.recordEditorGuid$.pipe(\n        concatMap((recordEditorGuid) =>\n          this.getCommonDataDictionary(this.getRecordEditorBranch(recordEditorGuid), recordEditorGuid)\n        )\n      )\n    });\n  }\n\n  private getRecordEditorBranch(recordEditorGuid: string): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    const associationsBranch$: Observable<IViewComponentDesignCommonDataDictionaryBranch> =\n      this.componentModel.otherAssociationRecordEditorComponentGuids$.pipe(\n        switchMap((guids) =>\n          guids.length\n            ? combineLatest(\n                guids.map((guid) =>\n                  this.componentModel.sandbox\n                    .getComponentPropertyValue<'associationDefinitionName', IAssociationDesignProperties>(\n                      'associationDefinitionName',\n                      guid\n                    )\n                    .pipe(\n                      map(\n                        (associationDefinitionName): IViewComponentDesignCommonDataDictionaryBranch => ({\n                          label: this.rxDefinitionNameService.getDisplayName(associationDefinitionName),\n                          children: [\n                            {\n                              label: 'First associated record',\n                              children: [\n                                {\n                                  label: 'ID',\n                                  expression: `\\${view.components.${guid}.firstAssociatedRecord.id}`\n                                }\n                              ]\n                            }\n                          ]\n                        })\n                      )\n                    )\n                )\n              ).pipe(\n                map((children) => ({\n                  label: 'Associations',\n                  children\n                }))\n              )\n            : of(null)\n        )\n      );\n\n    return this.getComponentCommonDataDictionary(recordEditorGuid).pipe(\n      switchMap((recordEditorBranch) =>\n        associationsBranch$.pipe(\n          map(\n            (associationsBranch): IViewComponentDesignCommonDataDictionaryBranch =>\n              associationsBranch\n                ? {\n                    ...recordEditorBranch,\n                    children: [associationsBranch, ...recordEditorBranch.children]\n                  }\n                : recordEditorBranch\n          )\n        )\n      )\n    );\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { AssociationModule } from './runtime/association.module';\nimport { RxAssociationComponent } from './runtime/association.component';\nimport { RX_ASSOCIATION } from './association.types';\nimport { AssociationDesignModule } from './design/association-design.module';\nimport { RxAssociationDesignComponent } from './design/association-design.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { AssociationDesignModel } from './design/association-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { AssociationExpressionConfigurator } from './design/association-expression-configurator.class';\n\n@NgModule({\n  imports: [AssociationModule, AssociationDesignModule]\n})\nexport class AssociationRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.Association,\n        isContainerComponent: true,\n        designComponentModel: AssociationDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId,\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationDesignComponent),\n        expressionConfigurator: AssociationExpressionConfigurator,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxAssociationComponent),\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        name: 'Association',\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'arrow_schema',\n        properties: RX_BASE_FIELD_PROPERTIES.concat({\n          name: 'recordInstance',\n          enableExpressionEvaluation: true\n        }),\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ]\n      },\n      {\n        type: RX_ASSOCIATION.componentTypes.associationFilter,\n        configPropertyName: 'associationFilter',\n        properties: [\n          {\n            name: 'associationDefinitionName'\n          },\n          {\n            name: 'recordInstanceId',\n            enableExpressionEvaluation: true\n          }\n        ],\n        isDataComponent: true\n      },\n      {\n        type: RX_ASSOCIATION.componentTypes.associatedRecordField,\n        configPropertyName: 'associatedRecordField',\n        isDataComponent: true,\n        properties: [\n          {\n            name: 'label',\n            localizable: true\n          }\n        ]\n      }\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ITextFormControlOptions,\n  IValidationFormControlOptions,\n  SelectFormControlComponent,\n  TextFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSettablePropertiesDataDictionary,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { find, includes, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  startWith,\n  switchMap,\n  take,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IBaseRecordEditorFieldProperties } from './base-record-editor-field-design.types';\nimport {\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\n\nexport abstract class BaseRecordEditorFieldDesign extends ViewDesignerComponentModel {\n  protected rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  protected rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n  protected rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  label$: Observable<string>;\n  recordEditorMode$: Observable<RecordEditorMode>;\n  parentGuid$: Observable<string>;\n  recordDefinitionName$: Observable<string>;\n  availableFieldDefinitions$: Observable<IFieldDefinition[]>;\n  recordDefinition$: Observable<IRecordDefinition>;\n  selectedFieldDefinition$: Observable<IFieldDefinition>;\n  isRequired$: Observable<boolean>;\n  private isSystemField$: Observable<boolean>;\n\n  abstract fieldResourceTypes: string[];\n\n  static getInitialProperties(initialProperties?: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    return {\n      fieldId: null,\n      label: null,\n      value: null,\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    protected sandbox: IViewComponentDesignSandbox<IBaseRecordEditorFieldProperties>\n  ) {\n    super(injector, sandbox);\n  }\n\n  rxInit(): void {\n    this.pipeline();\n  }\n\n  private pipeline(): void {\n    this.parentGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.recordEditorMode$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n      })\n    );\n\n    this.recordDefinitionName$ = this.parentGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName: string) => {\n        if (recordDefinitionName) {\n          return this.rxRecordDefinitionCacheService\n            .getRecordDefinition(recordDefinitionName)\n            .pipe(catchError((error) => EMPTY));\n        } else {\n          return of(null);\n        }\n      }),\n      distinctUntilChanged()\n    );\n\n    this.selectedFieldDefinition$ = this.sandbox.getComponentPropertyValue('fieldId').pipe(\n      switchMap((fieldId) =>\n        this.recordDefinition$.pipe(\n          map((recordDefinition) => {\n            if (recordDefinition && fieldId) {\n              return (\n                recordDefinition.fieldDefinitions.find(\n                  (fieldDefinition: IFieldDefinition) => fieldDefinition.id === Number(fieldId)\n                ) || null\n              );\n            } else {\n              return null;\n            }\n          })\n        )\n      ),\n      shareReplay(1)\n    );\n\n    this.isRequired$ = this.selectedFieldDefinition$.pipe(\n      map(\n        (selectedFieldDefinition: IFieldDefinition) =>\n          selectedFieldDefinition && selectedFieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required\n      )\n    );\n\n    this.isSystemField$ = this.selectedFieldDefinition$.pipe(\n      startWith(false),\n      map((selectedFieldDefinition: IFieldDefinition) =>\n        this.rxFieldDefinitionService.isSystemField(selectedFieldDefinition)\n      )\n    );\n\n    // set field label\n    this.selectedFieldDefinition$\n      .pipe(\n        pairwise(),\n        withLatestFrom(this.sandbox.componentProperties$),\n        filter(\n          ([[oldField, newField], componentProperties]: [\n            [IFieldDefinition, IFieldDefinition],\n            IBaseRecordEditorFieldProperties\n          ]) => newField && ((oldField && oldField.name === componentProperties.label) || !componentProperties.label)\n        ),\n        map(\n          ([[oldField, newField]]: [[IFieldDefinition, IFieldDefinition], IBaseRecordEditorFieldProperties]) =>\n            newField.name\n        )\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    this.availableFieldDefinitions$ = combineLatest([this.recordDefinition$, this.recordEditorMode$]).pipe(\n      map(([recordDefinition, recordEditorMode]) => {\n        if (recordDefinition && recordDefinition.fieldDefinitions) {\n          return recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => includes(this.fieldResourceTypes, fieldDefinition.resourceType))\n            .filter((fieldDefinition) => {\n              const isSystemField = this.rxFieldDefinitionService.isSystemField(fieldDefinition);\n\n              return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n            });\n        } else {\n          return [];\n        }\n      }),\n      shareReplay(1)\n    );\n\n    this.label$ = this.sandbox.componentProperties$.pipe(\n      map((componentProperties: IBaseRecordEditorFieldProperties) => {\n        return componentProperties && componentProperties.fieldId ? componentProperties.label : '<No field selected>';\n      })\n    );\n\n    this.sandbox.componentProperties$\n      .pipe(\n        mergeMap((componentProperties) => this.validate(componentProperties)),\n        distinctUntilChanged(isEqual)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    this.availableFieldDefinitions$\n      .pipe(switchMap(() => this.getInspectorConfig()))\n      .subscribe((inspectorConfig: IViewDesignerInspectorConfig) => {\n        this.sandbox.updateInspectorConfig(inspectorConfig);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        switchMap(() => this.getBreadcrumb()),\n        distinctUntilChanged()\n      )\n      .subscribe((breadcrumb: string) => {\n        this.sandbox.setBreadcrumbs(breadcrumb);\n      });\n\n    combineLatest([this.sandbox.getComponentPropertyValue('label'), this.selectedFieldDefinition$])\n      .pipe(\n        map(\n          ([label, fieldDefinition]) =>\n            label || (fieldDefinition ? `[${fieldDefinition.name}]` : `[${this.sandbox.descriptor.name}]`)\n        ),\n        distinctUntilChanged()\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, this.getSettableProperties());\n      });\n  }\n\n  getPropertiesByName(properties: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    const result: IBaseRecordEditorFieldProperties = {\n      ...properties\n    };\n\n    if (!result.styles) {\n      delete result.styles;\n    }\n\n    return result;\n  }\n\n  validate(componentProperties: IBaseRecordEditorFieldProperties): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationIssues = [];\n\n    if (isEmpty(componentProperties.fieldId)) {\n      validationIssues.push(this.sandbox.createError('Field name cannot be blank.', 'fieldId'));\n    }\n\n    validationIssues.push(...validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  getBreadcrumb(): Observable<string> {\n    return of(null).pipe(\n      withLatestFrom(this.sandbox.componentProperties$),\n      map(([initial, componentProperties]) => componentProperties.label)\n    );\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return of(null).pipe(\n      withLatestFrom(\n        this.availableFieldDefinitions$,\n        this.recordDefinitionName$,\n        this.parentGuid$,\n        this.isSystemField$\n      ),\n      map(([initial, recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField]) => {\n        return this.getBaseInspectorConfig(recordFieldsSelectItems, recordDefinitionName, parentGuid, isSystemField);\n      })\n    );\n  }\n\n  getSettableProperties(): IViewComponentDesignSettablePropertiesDataDictionary {\n    const disabledPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Disabled',\n            expression: `\\${view.components.${this.sandbox.guid}.disabled}`\n          }\n        ]\n      : [];\n\n    const hiddenPropDataDictionary: IViewComponentDesignSettablePropertiesDataDictionary = find(\n      this.sandbox.descriptor.properties,\n      { name: 'disabled' }\n    )\n      ? [\n          {\n            label: 'Hidden',\n            expression: `\\${view.components.${this.sandbox.guid}.hidden}`\n          }\n        ]\n      : [];\n\n    return [...disabledPropDataDictionary, ...hiddenPropDataDictionary];\n  }\n\n  private getBaseInspectorFields(selectedFieldDefinitions: IFieldDefinition[], isSystemField: boolean) {\n    return [].concat(\n      [\n        {\n          name: 'fieldId',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Field name',\n            required: true,\n            options: selectedFieldDefinitions.map((definition) => ({\n              name: definition.name,\n              id: String(definition.id)\n            }))\n          } as ISelectFormControlOptions\n        },\n        {\n          name: 'label',\n          component: TextFormControlComponent,\n          options: {\n            label: 'Display label'\n          } as ITextFormControlOptions\n        }\n      ],\n      isSystemField\n        ? []\n        : [\n            {\n              name: 'value',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Value'\n              } as IExpressionInspectorControlOptions\n            },\n            getDisabledFieldInspectorConfig()\n          ],\n      getStandardPropsInspectorConfigs()\n    );\n  }\n\n  private getBaseInspectorConfig(\n    recordFieldsSelectItems: IFieldDefinition[],\n    recordDefinitionName: string,\n    parentGuid: string,\n    isSystemField: boolean\n  ): IViewDesignerInspectorConfig {\n    const displayName = this.rxDefinitionNameService.getDisplayName(recordDefinitionName || '');\n\n    let controls;\n\n    if (recordDefinitionName) {\n      if (recordFieldsSelectItems.length) {\n        controls = this.getBaseInspectorFields(recordFieldsSelectItems, isSystemField);\n      } else {\n        controls = [\n          {\n            component: ValidationFormControlComponent,\n            options: {\n              text: `${displayName} does not have fields that can be bound to this field type.`,\n              componentGuid: parentGuid,\n              propertyName: 'recordDefinitionName'\n            } as IValidationFormControlOptions\n          }\n        ];\n      }\n    } else {\n      controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: parentGuid,\n            propertyName: 'recordDefinitionName' // todo remove that hardcode\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls\n        }\n      ]\n    };\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { IBaseRecordEditorFieldProperties } from '../../base-record-editor-field/design/base-record-editor-field-design.types';\n\nexport class AttachmentFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.attachment];\n\n  static getInitialProperties(initialProperties?: IBaseRecordEditorFieldProperties): IBaseRecordEditorFieldProperties {\n    const result = BaseRecordEditorFieldDesign.getInitialProperties(initialProperties);\n\n    delete result.value;\n\n    return result;\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super.getInspectorConfig().pipe(\n      map((inspectorConfig: IViewDesignerInspectorConfig) => {\n        inspectorConfig.inspectorSectionConfigs[0].controls =\n          inspectorConfig.inspectorSectionConfigs[0].controls.filter((field) => field.name !== 'value');\n\n        return inspectorConfig;\n      })\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { AttachmentFieldDesignModel } from './attachment-field-design.model';\n\n@Component({\n  selector: 'rx-attachment-field-design',\n  templateUrl: './attachment-field-design.component.html',\n  styleUrls: ['./attachment-field-design.component.scss']\n})\nexport class AttachmentFieldDesignComponent {\n  @Input()\n  model: AttachmentFieldDesignModel;\n}\n","<adapt-rx-uploader\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [ngModel]=\"[]\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-uploader>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxUploaderModule } from '@bmc-ux/adapt-angular';\nimport { AttachmentFieldDesignComponent } from './attachment-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxUploaderModule],\n  declarations: [AttachmentFieldDesignComponent],\n  entryComponents: [AttachmentFieldDesignComponent]\n})\nexport class AttachmentFieldDesignModule {}\n","import { HostBinding, Injector, Input, OnInit, Directive } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport {\n  IFieldDefinition,\n  IRecordInstance,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService\n} from '@helix/platform/record/api';\nimport { RX_ADMINISTRATION, RxSystemConfigurationService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, includes, isEqual, isNull, isUndefined, values } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { distinctUntilChanged, filter, pluck, skip, startWith, take, takeUntil } from 'rxjs/operators';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';\nimport { IBaseRecordEditorFieldComponentConfig } from './base-record-editor-field-component.types';\nimport { RecordEditorFormControl } from '../../../record-editor/runtime/record-editor-form-control.class';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class BaseRecordEditorFieldComponent extends BaseViewComponent implements OnInit {\n  @HostBinding('class.rx-field-required')\n  isRequired = false;\n\n  @HostBinding('class.rx-field-disabled')\n  isDisabled = false;\n\n  translateService = this.injector.get(TranslateService);\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  @Input()\n  config: Observable<IBaseRecordEditorFieldComponentConfig>;\n\n  private configReady$: Observable<IBaseRecordEditorFieldComponentConfig>;\n  protected recordInstance$: Observable<IRecordInstance>;\n  private isAlwaysDisabled;\n  private isAlwaysHidden;\n\n  inReadState = false;\n  fieldDefinition: IFieldDefinition;\n\n  fieldId: number;\n  label: string;\n  recordEditorApi: IRecordEditorApi;\n  isLoading = true;\n  validationErrorMessage: string = null;\n  permissionType: string;\n  associatedRecordPath: string[];\n\n  formControl: RecordEditorFormControl;\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.configReady$ = this.config.pipe(\n      filter((config) => Boolean(config.api && config.recordDefinition)),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$ = this.configReady$.pipe(\n      pluck<IBaseRecordEditorFieldComponentConfig, IRecordInstance>('recordInstance'),\n      distinctUntilChanged(),\n      skip(1),\n      takeUntil(this.destroyed$)\n    );\n\n    this.recordInstance$.subscribe(this.subscribeOnConfigValueChange.bind(this));\n\n    this.configReady$.pipe(take(1)).subscribe((config) => {\n      this.isLoading = false;\n\n      this.onConfigInitialized(config);\n      this.onConfigUpdated(config);\n    });\n\n    this.configReady$\n      .pipe(\n        skip(1),\n        filter((config) => Boolean(config.recordInstance)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(this.onConfigUpdated.bind(this));\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    if (!isEqual(value, this.formControl.value)) {\n      if (options.markAsDirty !== false) {\n        this.formControl.markAsDirty();\n      }\n\n      if (options.markAsTouched !== false) {\n        this.formControl.markAsTouched();\n      }\n\n      this.formControl.setValue(value);\n    }\n  }\n\n  getFieldValue(): any {\n    return this.formControl?.value;\n  }\n\n  getDisplayValue(): any {\n    return this.getFieldValue();\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    this.fieldId = Number(config.fieldId);\n\n    this.fieldDefinition = find(config.recordDefinition.fieldDefinitions, { id: this.fieldId });\n\n    this.isRequired = this.fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n    this.recordEditorApi = config.api;\n\n    this.formControl = this.recordEditorApi.getFieldControl(\n      this.fieldId,\n      this.guid,\n      this.getFieldValidators(),\n      config.associatedRecordPath\n    );\n\n    this.associatedRecordPath = config.associatedRecordPath;\n    this.permissionType = this.recordEditorApi.getPermissionType(this.fieldId, this.associatedRecordPath);\n\n    this.subscribeOnConfigValueChange();\n\n    this.formControl.valueChanges.pipe(startWith(this.formControl.value), takeUntil(this.destroyed$)).subscribe(() => {\n      this.checkValidation();\n      this.updateValidationMessage();\n    });\n\n    this.isAlwaysDisabled =\n      this.permissionType === RX_RECORD_DEFINITION.fieldPermissionTypes.view ||\n      this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService).isSystemField(this.fieldDefinition);\n\n    this.isAlwaysHidden = !this.permissionType;\n\n    const recordEditorMode = config.api.getRecordEditorMode();\n\n    if (Number(config.fieldId) === RX_RECORD_DEFINITION.coreFieldIds.createdBy) {\n      const submitterMode = this.injector\n        .get<RxSystemConfigurationService>(RxSystemConfigurationService)\n        .getConfigurationSync('Submitter-Mode');\n\n      this.isAlwaysDisabled =\n        this.isAlwaysDisabled ||\n        (recordEditorMode === RecordEditorMode.Edit && submitterMode === RX_ADMINISTRATION.submitterModes.locked);\n    }\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    const isDisabled = this.isAlwaysDisabled || Boolean(config.disabled);\n\n    if (this.isDisabled !== isDisabled) {\n      // In order to support accessibility for fields, \"disabled\" control status will be always \"false\" and will not\n      // be synced with \"isDisabled\" component property. Field might not be focusable when control is disabled.\n      this.isDisabled = isDisabled;\n\n      if (!this.isDisabled) {\n        // Update validation status of the control after change \"isDisabled\" status to false.\n        this.formControl.updateValueAndValidity();\n      }\n\n      this.checkValidation();\n    }\n\n    this.isHidden = this.isAlwaysHidden || Boolean(config.hidden);\n\n    this.label = isUndefined(config.label) ? this.fieldDefinition.name : config.label;\n    this.inReadState = Boolean(config.inReadState);\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    return [];\n  }\n\n  getRequiredFieldValidationError(): string {\n    return this.translateService.instant('com.bmc.arsys.rx.client.view-components.validation.required.message');\n  }\n\n  getFieldInstanceProp(\n    prop: string,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): any {\n    return this.recordEditorApi.getFieldInstanceProp(fieldId, prop, associatedRecordPath);\n  }\n\n  setFieldInstanceProp(\n    prop: string,\n    value: any,\n    fieldId: number = this.fieldId,\n    associatedRecordPath: string[] = this.associatedRecordPath\n  ): void {\n    this.recordEditorApi.setFieldInstanceProp(fieldId, prop, value, associatedRecordPath);\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (includes(['hidden', 'disabled'], propertyPath)) {\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else {\n      return throwError(`Field property ${propertyPath} is not settable.`);\n    }\n  }\n\n  private subscribeOnConfigValueChange() {\n    const value$ = this.configReady$.pipe(\n      pluck('value'),\n      // Do not update field value if expression gets evaluated to undefined, e.g when:\n      // - expression references a removed view component, or\n      // - view component hasn't loaded the data yet\n      filter((val) => !isUndefined(val)),\n      distinctUntilChanged(),\n      takeUntil(this.recordInstance$),\n      takeUntil(this.destroyed$)\n    );\n\n    value$.pipe(take(1)).subscribe((val) => {\n      // Only update field with non empty value on first expression change.\n      // At this time we don't know if null is a default value or it was evaluated from expression.\n      if (!isNull(val)) {\n        this.setFieldValue(val, { markAsTouched: false, markAsDirty: false });\n      }\n    });\n\n    value$.pipe(skip(1)).subscribe((val) => this.setFieldValue(val));\n  }\n\n  private checkValidation() {\n    if (this.isDisabled && this.formControl.invalid) {\n      // Remove errors to make control valid when \"isDisabled\" status is true.\n      this.formControl.setErrors(null);\n      this.updateValidationMessage();\n    }\n  }\n\n  private updateValidationMessage() {\n    if (this.formControl.errors) {\n      if (this.formControl.errors.required) {\n        this.formControl.errors.required = this.getRequiredFieldValidationError();\n      }\n\n      this.validationErrorMessage = values(this.formControl.errors).join(', ');\n    } else {\n      this.validationErrorMessage = null;\n    }\n  }\n}\n","import { UploaderMode, UploaderSelectionMode } from '@bmc-ux/adapt-angular';\n\nexport const RX_ATTACHMENT_FIELD = {\n  defaultOptions: {\n    filesCount: 1,\n    mode: UploaderMode.Manual,\n    selectionMode: UploaderSelectionMode.File,\n    chunkSize: '100KB',\n    maxFileSize: '2GB' // Default is 20 MB\n  }\n};\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { DownloadConfig, FileObj, UploaderTexts } from '@bmc-ux/adapt-angular';\nimport { RX_ATTACHMENT_FIELD } from '../attachment-field.constant';\nimport { first, has, toString } from 'lodash';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { FormControl } from '@angular/forms';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-attachment-field',\n  styleUrls: ['./attachment-field.scss'],\n  templateUrl: './attachment-field.component.html'\n})\nexport class AttachmentFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  fieldDefinition: IFieldDefinition;\n  attachment: File;\n  attachmentFormControl: FormControl;\n\n  // Uploader options\n  filesCount = RX_ATTACHMENT_FIELD.defaultOptions.filesCount;\n  mode = RX_ATTACHMENT_FIELD.defaultOptions.mode;\n  selectionMode = RX_ATTACHMENT_FIELD.defaultOptions.selectionMode;\n  chunkSize = RX_ATTACHMENT_FIELD.defaultOptions.chunkSize;\n  maxFileSize = RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n  showFiles: FileObj[] = [];\n  texts: UploaderTexts = {};\n\n  readStateConfig: DownloadConfig = {\n    fileName: null,\n    downloadURL: null\n  };\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    this.attachmentFormControl = new FormControl(this.showFiles);\n\n    this.maxFileSize = this.fieldDefinition.maxSize\n      ? toString(this.fieldDefinition.maxSize)\n      : RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n\n    this.formControl.valueChanges\n      .pipe(\n        startWith(this.formControl.value as string),\n        // Update ADAPT component only when formControl value will be a file name string.\n        // When value comes as a File, it means this file is already attached to ADAPT component.\n        filter((value) => !(value instanceof File)),\n        distinctUntilChanged((previous, next) => {\n          return (\n            previous === next &&\n            // After uploading a file, adapt-rx-uploader component has to be updated with the URL to download the file.\n            // This happens when the record editor updates the entire form with values from the saved record instance.\n            // valueChange will emit the same value as before, but adapt-rx-uploader will not have a downloadURL yet.\n            has(this.attachmentFormControl.value, '[0].downloadURL')\n          );\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.attachmentFormControl.reset();\n        this.addAttachedFileToAttachmentList(this.getFieldValue());\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.attachmentFormControl.markAsTouched() : this.attachmentFormControl.markAsUntouched();\n    });\n  }\n\n  addAttachedFileToAttachmentList(fileName?: string): void {\n    if (fileName) {\n      const downloadAttachmentUrl = this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId);\n      let attachment;\n\n      attachment = {\n        data: {\n          name: fileName\n        },\n        isUploading: true\n      };\n\n      if (downloadAttachmentUrl) {\n        attachment.downloadURL = downloadAttachmentUrl;\n      }\n\n      this.showFiles = [attachment];\n    } else {\n      this.showFiles = [];\n    }\n\n    this.attachmentFormControl.setValue(this.showFiles);\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigUpdated(config);\n\n    if (this.inReadState) {\n      this.readStateConfig = {\n        fileName: this.getDisplayValue(),\n        downloadURL: this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId)\n      };\n    }\n  }\n\n  removeAttachment(attachment: any): void {\n    if (attachment) {\n      this.attachment = null;\n    }\n\n    this.addAttachedFileToAttachmentList();\n    this.setFieldValue(this.attachment);\n  }\n\n  addAttachment(attachments: FileObj[]): void {\n    const attachment = first(attachments);\n\n    if (attachment) {\n      this.attachment = attachment.data;\n      this.setFieldValue(this.attachment);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <ng-container *ngIf=\"inReadState; else editStateElementRef\">\n    <div *ngIf=\"getDisplayValue(); else emptyReadonlyField\" [attr.aria-label]=\"label\">\n      <label aria-hidden=\"true\">{{ label }}</label>\n\n      <adapt-downloader class=\"d-block\" *ngIf=\"getDisplayValue()\" [config]=\"readStateConfig\"></adapt-downloader>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-uploader\n    [ngClass]=\"{ 'attachment-disabled': isDisabled }\"\n    [reusable]=\"true\"\n    [label]=\"label\"\n    [readonly]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [allowDeletion]=\"false\"\n    [uploadMode]=\"mode\"\n    [selectionMode]=\"selectionMode\"\n    [filesCount]=\"filesCount\"\n    [maxFileSize]=\"maxFileSize\"\n    [chunkSize]=\"chunkSize\"\n    [texts]=\"texts\"\n    (removedFileFromQueue)=\"removeAttachment($event)\"\n    (deletedFile)=\"removeAttachment($event)\"\n    (afterFilesAdded)=\"addAttachment($event)\"\n    [formControl]=\"attachmentFormControl\"\n    (onBlur)=\"onBlur()\"\n  >\n  </adapt-rx-uploader>\n</ng-template>\n\n<ng-template #emptyReadonlyField>\n  <rx-read-only-field [label]=\"label\" [value]=\"'-'\"></rx-read-only-field>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptDownloadModule, AdaptRxUploaderModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { AttachmentFieldComponent } from './attachment-field.component';\nimport { UploaderService } from '@helix/platform/record/api';\nimport { TranslateModule } from '@ngx-translate/core';\n\nexport function UploaderFactory() {\n  return new UploaderService();\n}\n\n@NgModule({\n  imports: [\n    AdaptRxUploaderModule.forRoot({\n      uploader: {\n        provide: 'UploaderService',\n        useFactory: UploaderFactory,\n        deps: []\n      }\n    }),\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    AdaptDownloadModule\n  ],\n  declarations: [AttachmentFieldComponent],\n  entryComponents: [AttachmentFieldComponent]\n})\nexport class AttachmentFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { AttachmentFieldModule } from './runtime/attachment-field.module';\nimport { AttachmentFieldComponent } from './runtime/attachment-field.component';\nimport { AttachmentFieldDesignModule } from './design/attachment-field-design.module';\nimport { AttachmentFieldDesignComponent } from './design/attachment-field-design.component';\nimport { AttachmentFieldDesignModel } from './design/attachment-field-design.model';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\n\n@NgModule({\n  imports: [AttachmentFieldModule, AttachmentFieldDesignModule]\n})\nexport class AttachmentFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Attachment,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n      name: 'Attachment',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'paperclip',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(AttachmentFieldDesignComponent),\n      designComponentModel: AttachmentFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { IBaseRecordEditorFieldComponentConfig } from '../base-record-editor-field/runtime';\n\nexport interface IBooleanFieldConfig extends IBaseRecordEditorFieldComponentConfig {\n  editingMode?: BooleanFieldEditingMode;\n}\n\nexport enum BooleanFieldEditingMode {\n  Checkbox = 'checkbox',\n  Switch = 'switch'\n}\n\nexport enum BooleanFieldModelValue {\n  True = 1,\n  False = 0\n}\n","import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewComponentDesignSandbox, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { findIndex, map as _map } from 'lodash';\nimport { Injector } from '@angular/core';\nimport { IBooleanFieldProperties } from './boolean-field-design.types';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class BooleanFieldDesignModel extends BaseRecordEditorFieldDesign {\n  componentProperties$: Observable<IBooleanFieldProperties> = this.sandbox.componentProperties$;\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.boolean];\n\n  static getInitialProperties(initialProperties?: IBooleanFieldProperties): IBooleanFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      editingMode: BooleanFieldEditingMode.Switch,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<IBooleanFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super\n      .getInspectorConfig()\n      .pipe(map((inspectorConfig: IViewDesignerInspectorConfig) => this.editInspectorConfig(inspectorConfig)));\n  }\n\n  private editInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): IViewDesignerInspectorConfig {\n    const valueControlIndex = findIndex(\n      inspectorConfig.inspectorSectionConfigs[0].controls,\n      (item) => item.name === 'value'\n    );\n\n    const editingModeControl = {\n      name: 'editingMode',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Editing mode',\n        tooltip: new Tooltip('An optional Boolean field will always be displayed as a Switch.'),\n        required: false,\n        options: _map(BooleanFieldEditingMode, (value, name) => ({\n          id: value,\n          name\n        }))\n      } as ISelectFormControlOptions\n    };\n\n    if (valueControlIndex !== -1) {\n      inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { BooleanFieldDesignModel } from './boolean-field-design.model';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { combineLatest, ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'rx-boolean-field-design',\n  templateUrl: './boolean-field-design.component.html'\n})\nexport class BooleanFieldDesignComponent implements OnInit, OnDestroy {\n  @Input()\n  model: BooleanFieldDesignModel;\n\n  booleanValue: boolean; // need this, because new adapt-switcher don't work without ngModel\n  shouldDisplayAsCheckbox = false;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  ngOnInit(): void {\n    const editingMode$ = this.model.componentProperties$.pipe(\n      map((componentProperties) => componentProperties.editingMode || BooleanFieldEditingMode.Switch)\n    );\n\n    combineLatest([editingMode$, this.model.isRequired$])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([editingMode, isRequired]) => {\n        this.shouldDisplayAsCheckbox = isRequired && editingMode === BooleanFieldEditingMode.Checkbox;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","<ng-container *ngIf=\"!shouldDisplayAsCheckbox\">\n  <div>\n    <strong>\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </strong>\n  </div>\n  <adapt-rx-switch [(ngModel)]=\"booleanValue\" [disabled]=\"true\"></adapt-rx-switch>\n</ng-container>\n\n<ng-container *ngIf=\"shouldDisplayAsCheckbox\">\n  <adapt-rx-checkbox\n    [(ngModel)]=\"booleanValue\"\n    [label]=\"model.label$ | async\"\n    [required]=\"model.isRequired$ | async\"\n    [disabled]=\"true\"\n  >\n  </adapt-rx-checkbox>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxCheckboxModule, AdaptRxSwitchModule } from '@bmc-ux/adapt-angular';\nimport { BooleanFieldDesignComponent } from './boolean-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxSwitchModule, AdaptRxCheckboxModule],\n  declarations: [BooleanFieldDesignComponent],\n  exports: [BooleanFieldDesignComponent],\n  entryComponents: [BooleanFieldDesignComponent]\n})\nexport class BooleanFieldDesignModule {}\n","import { AfterViewInit, Component, Injector, ViewChild } from '@angular/core';\nimport { isNil, isNull } from 'lodash';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { RxBooleanPipe } from '@helix/platform/shared/api';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { BooleanFieldEditingMode, BooleanFieldModelValue, IBooleanFieldConfig } from '../boolean-field.types';\nimport { NgModel } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-boolean-field',\n  templateUrl: './boolean-field.component.html'\n})\nexport class BooleanFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, AfterViewInit {\n  editingMode: BooleanFieldEditingMode;\n\n  get booleanValue(): boolean | null {\n    const value = this.getFieldValue();\n\n    return isNull(value) ? null : Boolean(value);\n  }\n\n  set booleanValue(value: boolean | null) {\n    if (isNull(value)) {\n      this.setFieldValue(null);\n    } else {\n      this.setFieldValue(Number(value));\n    }\n  }\n\n  @ViewChild('booleanComponent', { read: NgModel })\n  ngModel: NgModel;\n\n  constructor(injector: Injector, private rxBooleanPipe: RxBooleanPipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (!isNil(displayValue)) {\n      return this.rxBooleanPipe.transform(displayValue);\n    } else {\n      return '-';\n    }\n  }\n\n  onConfigInitialized(config: IBooleanFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.editingMode = config.editingMode;\n  }\n\n  onConfigUpdated(config: IBooleanFieldConfig): void {\n    super.onConfigUpdated(config);\n\n    // Set 0 as a default value for checkbox, e.g. scenario in the create record editor mode\n    if (this.shouldDisplayAsCheckbox && this.getFieldValue() === null) {\n      this.setFieldValue(BooleanFieldModelValue.False, { markAsDirty: false, markAsTouched: false });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.formControl.touched$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((touched) =>\n        touched ? this.ngModel?.control.markAsTouched() : this.ngModel?.control.markAsUntouched()\n      );\n  }\n\n  get shouldDisplayAsCheckbox(): boolean {\n    return this.editingMode === BooleanFieldEditingMode.Checkbox && this.isRequired;\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-boolean\n    #booleanComponent\n    [hidden]=\"isHidden\"\n    [label]=\"label\"\n    [isDisabled]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [shouldDisplayAsCheckbox]=\"shouldDisplayAsCheckbox\"\n    [(ngModel)]=\"booleanValue\"\n    (rxBlur)=\"onBlur()\"\n  >\n  </rx-boolean>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptButtonModule, AdaptRxCheckboxModule, AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { RxBooleanModule } from '@helix/platform/shared/components';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { BooleanFieldComponent } from './boolean-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptRxFormControlModule,\n    ReadOnlyFieldModule,\n    AdaptButtonModule,\n    AdaptRxCheckboxModule,\n    TranslateModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RxBooleanModule\n  ],\n  declarations: [BooleanFieldComponent],\n  entryComponents: [BooleanFieldComponent]\n})\nexport class BooleanFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { BooleanFieldModule } from './runtime/boolean-field.module';\nimport { BooleanFieldComponent } from './runtime/boolean-field.component';\nimport { BooleanFieldDesignModule } from './design/boolean-field-design.module';\nimport { BooleanFieldDesignModel } from './design/boolean-field-design.model';\nimport { BooleanFieldDesignComponent } from './design/boolean-field-design.component';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\n\n@NgModule({\n  imports: [BooleanFieldModule, BooleanFieldDesignModule]\n})\nexport class BooleanFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Boolean,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Boolean',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'switcher_check',\n      designComponentModel: BooleanFieldDesignModel,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(BooleanFieldDesignComponent),\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DateFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.dateOnly];\n}\n","import { Component, Input } from '@angular/core';\nimport { DateFieldDesignModel } from './date-field-design.model';\n\n@Component({\n  selector: 'rx-date-field-design',\n  templateUrl: './date-field-design.component.html'\n})\nexport class DateFieldDesignComponent {\n  @Input()\n  model: DateFieldDesignModel;\n\n  dateValue: Date;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateValue\"\n  [disabled]=\"true\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { DateFieldDesignComponent } from './date-field-design.component';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [DateFieldDesignComponent],\n  entryComponents: [DateFieldDesignComponent]\n})\nexport class DateFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class DateAdapter extends AdaptRxDatetimeAdapter<string> {\n  private storeDateFormat = 'YYYY-MM-DD'; // AR server only accepts this format for Date.\n\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment([date.year || 0, date.month || 0, date.date || 0]).format(this.storeDateFormat)\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport moment from 'moment-es6';\nimport { DateAdapter } from './date-adapter.class';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\n\n@Component({\n  selector: 'rx-date-field',\n  templateUrl: './date-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: DateAdapter }]\n})\nexport class DateFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (displayValue) {\n      return this.datePipe.transform(displayValue, 'mediumDate');\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors => {\n      const date = control.value ? moment(control.value) : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: RxDatetimePickerMode.Date } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DateFieldComponent } from './date-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    AdaptRxDatetimeModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DateFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [DateFieldComponent]\n})\nexport class DateFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DateFieldComponent } from './runtime/date-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DateFieldDesignComponent } from './design/date-field-design.component';\nimport { DateFieldDesignModel } from './design/date-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DateFieldModule } from './runtime/date-field.module';\nimport { DateFieldDesignModule } from './design/date-field-design.module';\n\n@NgModule({\n  imports: [DateFieldModule, DateFieldDesignModule]\n})\nexport class DateFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Date,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Date',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'calendar',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateFieldDesignComponent),\n      designComponentModel: DateFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DateTimeFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.dateTime];\n}\n","import { Component, Input } from '@angular/core';\nimport { DateTimeFieldDesignModel } from './date-time-field-design.model';\nimport { RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-date-time-field-design',\n  templateUrl: './date-time-field-design.component.html'\n})\nexport class DateTimeFieldDesignComponent {\n  @Input()\n  model: DateTimeFieldDesignModel;\n\n  dateTimeValue: Date;\n  pickerMode = RxDatetimePickerMode.DateTime;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [(ngModel)]=\"dateTimeValue\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n>\n</adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { DateTimeFieldDesignComponent } from './date-time-field-design.component';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [DateTimeFieldDesignComponent],\n  entryComponents: [DateTimeFieldDesignComponent]\n})\nexport class DateTimeFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class DateTimeAdapter extends AdaptRxDatetimeAdapter<string> {\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment([\n            date.year || 0,\n            date.month || 0,\n            date.date || 0,\n            date.hours || 0,\n            date.minutes || 0,\n            date.seconds || 0\n          ]).toISOString()\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { DateTimeAdapter } from './date-time-adapter.class';\n\n@Component({\n  selector: 'rx-date-time-field',\n  templateUrl: './date-time-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: DateTimeAdapter }]\n})\nexport class DateTimeFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  pickerMode = RxDatetimePickerMode.DateTime;\n\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue = super.getDisplayValue();\n\n    if (displayValue) {\n      return this.datePipe.transform(displayValue, 'medium');\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors => {\n      const date = control.value ? moment(control.value) : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: this.pickerMode, hasSeconds: true } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DateTimeFieldComponent } from './date-time-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    AdaptRxDatetimeModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DateTimeFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [DateTimeFieldComponent]\n})\nexport class DateTimeFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DateTimeFieldComponent } from './runtime/date-time-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DateTimeFieldDesignComponent } from './design';\nimport { DateTimeFieldDesignModel } from './design/date-time-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DateTimeFieldModule } from './runtime/date-time-field.module';\nimport { DateTimeFieldDesignModule } from './design/date-time-field-design.module';\n\n@NgModule({\n  imports: [DateTimeFieldModule, DateTimeFieldDesignModule]\n})\nexport class DateTimeFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.DateTime,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Date/Time',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'calendar_clock_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DateTimeFieldDesignComponent),\n      designComponentModel: DateTimeFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class DecimalFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.decimal, RX_RECORD_DEFINITION.resourceTypes.real];\n}\n","import { Component, Input } from '@angular/core';\nimport { DecimalFieldDesignModel } from './decimal-field-design.model';\n\n@Component({\n  selector: 'rx-decimal-field-design',\n  templateUrl: './decimal-field-design.component.html'\n})\nexport class DecimalFieldDesignComponent {\n  @Input()\n  model: DecimalFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { DecimalFieldDesignComponent } from './decimal-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [DecimalFieldDesignComponent],\n  entryComponents: [DecimalFieldDesignComponent]\n})\nexport class DecimalFieldDesignModule {}\n","import { DecimalPipe } from '@angular/common';\nimport { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport BigNumber from 'bignumber.js';\nimport { isEqual, isFinite, isNil, isNull } from 'lodash';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\n\n@Component({\n  selector: 'rx-integer-field',\n  templateUrl: './integer-field.component.html'\n})\nexport class IntegerFieldComponent extends BaseRecordEditorFieldComponent implements OnInit, IViewComponent {\n  fieldDefinition: IFieldDefinition;\n  decimalPipe: DecimalPipe;\n  counterFormControl: FormControl;\n\n  private hasFocus = false;\n\n  @ViewChild('counterComponent')\n  counterComponent;\n\n  constructor(injector: Injector) {\n    super(injector);\n\n    this.decimalPipe = injector.get(DecimalPipe);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    // A separate formControl is used to handle the scenario when invalid number typed to the counter component.\n    this.counterFormControl = new FormControl(this.formControl.value, this.formControl.validator);\n\n    this.counterFormControl.valueChanges\n      .pipe(\n        filter((value) => !isEqual(this.formControl.value, value)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((value) => {\n        this.setFieldValue(value);\n      });\n\n    this.formControl.valueChanges\n      .pipe(startWith(this.formControl.value as number), distinctUntilChanged(isEqual), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        // To prevent reset the counter invalid value (e.g '-', 'e') during the typing,\n        // in this case counterFormControl value is NaN and formControl value is null,\n        // counter must be updated only when it doesn't have a focus\n        if (!this.hasFocus) {\n          this.counterFormControl.setValue(this.formControl.value);\n        }\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.counterFormControl.markAsTouched() : this.counterFormControl.markAsUntouched();\n    });\n  }\n\n  onBlur(): void {\n    this.hasFocus = false;\n    this.formControl.markAsTouched();\n  }\n\n  onFocus(): void {\n    this.hasFocus = true;\n  }\n\n  getDisplayValue(): string {\n    const fieldValue = this.getFieldValue();\n\n    return isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue));\n  }\n\n  setFieldValue(value: any): void {\n    if (!isNull(value) && isFinite(value)) {\n      const bigNumberVal = new BigNumber(value);\n\n      if (!bigNumberVal.eq(this.formControl.value)) {\n        this.formControl.markAsDirty();\n        this.formControl.setValue(bigNumberVal);\n      }\n    } else {\n      super.setFieldValue(value);\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    #counterComponent\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    adaptIntegerNumber\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n  ></adapt-rx-counter>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { IntegerFieldComponent } from '../../integer-field/runtime/integer-field.component';\nimport { isNil } from 'lodash';\n\n@Component({\n  selector: 'rx-decimal-field',\n  templateUrl: './decimal-field.component.html'\n})\nexport class DecimalFieldComponent extends IntegerFieldComponent implements OnInit, IViewComponent {\n  getDisplayValue(): string {\n    const fieldValue = this.getFieldValue();\n    const precision = this.fieldDefinition.precision;\n    const digitsInfo = precision === -1 ? null : `1.${precision}-${precision}`;\n\n    return isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue), digitsInfo);\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-counter>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxCounterModule, AdaptRxValidatorsModule } from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldFormBuilderModule } from '@bmc-ux/obsolete';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { DecimalFieldComponent } from './decimal-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    AdaptTextFieldFormBuilderModule,\n    AdaptRxCounterModule,\n    AdaptRxValidatorsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ReadOnlyFieldModule,\n    TranslateModule\n  ],\n  declarations: [DecimalFieldComponent],\n  entryComponents: [DecimalFieldComponent]\n})\nexport class DecimalFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { DecimalFieldComponent } from './runtime/decimal-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { DecimalFieldDesignComponent } from './design';\nimport { DecimalFieldDesignModel } from './design/decimal-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { DecimalFieldModule } from './runtime/decimal-field.module';\nimport { DecimalFieldDesignModule } from './design/decimal-field-design.module';\n\n@NgModule({\n  imports: [DecimalFieldModule, DecimalFieldDesignModule]\n})\nexport class DecimalFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    const decimalFieldComponentFactory = this.componentFactoryResolver.resolveComponentFactory(DecimalFieldComponent);\n\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Decimal,\n      aliases: [RxViewComponentType.Floating],\n      componentFactory: decimalFieldComponentFactory,\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Decimal',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_decimal_number',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(DecimalFieldDesignComponent),\n      designComponentModel: DecimalFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class IntegerFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.integer];\n}\n","import { Component, Input } from '@angular/core';\nimport { IntegerFieldDesignModel } from './integer-field-design.model';\n\n@Component({\n  selector: 'rx-integer-field-design',\n  templateUrl: './integer-field-design.component.html'\n})\nexport class IntegerFieldDesignComponent {\n  @Input()\n  model: IntegerFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { IntegerFieldDesignComponent } from './integer-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [IntegerFieldDesignComponent],\n  entryComponents: [IntegerFieldDesignComponent]\n})\nexport class IntegerFieldDesignModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxCounterModule, AdaptRxValidatorsModule } from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldFormBuilderModule } from '@bmc-ux/obsolete';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { IntegerFieldComponent } from './integer-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    AdaptTextFieldFormBuilderModule,\n    AdaptRxCounterModule,\n    AdaptRxValidatorsModule,\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule\n  ],\n  declarations: [IntegerFieldComponent],\n  entryComponents: [IntegerFieldComponent]\n})\nexport class IntegerFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { IntegerFieldComponent } from './runtime/integer-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { IntegerFieldDesignComponent } from './design';\nimport { IntegerFieldDesignModel } from './design/integer-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { IntegerFieldModule } from './runtime/integer-field.module';\nimport { IntegerFieldDesignModule } from './design/integer-field-design.module';\n\n@NgModule({\n  imports: [IntegerFieldModule, IntegerFieldDesignModule]\n})\nexport class IntegerFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Integer,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Integer',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_integer_number',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(IntegerFieldDesignComponent),\n      designComponentModel: IntegerFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","export const RX_SELECTION_FIELD = {\n  emptyOption: {\n    id: null,\n    name: 'None'\n  },\n\n  editingMode: {\n    radioButtons: 'Radio Buttons',\n    dropdown: 'Dropdown'\n  },\n\n  editingModeValue: {\n    radioButtons: 'radio-buttons',\n    dropdown: 'dropdown'\n  }\n};\n","import { Injector } from '@angular/core';\nimport { findIndex } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewComponentDesignSandbox, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\nimport { ISelectionFieldProperties } from './selection-field-design.types';\n\nexport class SelectionFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.selection];\n\n  editingMode$: Observable<string> = this.sandbox.componentProperties$.pipe(\n    map((componentProperties) => componentProperties.editingMode)\n  );\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<ISelectionFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  static getInitialProperties(initialProperties?: ISelectionFieldProperties): ISelectionFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      editingMode: RX_SELECTION_FIELD.editingModeValue.dropdown,\n      ...initialProperties\n    };\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super\n      .getInspectorConfig()\n      .pipe(map((inspectorConfig: IViewDesignerInspectorConfig) => this.editInspectorConfig(inspectorConfig)));\n  }\n\n  private editInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): IViewDesignerInspectorConfig {\n    const valueControlIndex = findIndex(\n      inspectorConfig.inspectorSectionConfigs[0].controls,\n      (item) => item.name === 'value'\n    );\n\n    const editingModeControl = {\n      name: 'editingMode',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Editing mode',\n        required: false,\n        options: [\n          {\n            id: RX_SELECTION_FIELD.editingModeValue.dropdown,\n            name: RX_SELECTION_FIELD.editingMode.dropdown\n          },\n          {\n            id: RX_SELECTION_FIELD.editingModeValue.radioButtons,\n            name: RX_SELECTION_FIELD.editingMode.radioButtons\n          }\n        ]\n      } as ISelectFormControlOptions\n    };\n\n    if (valueControlIndex !== -1) {\n      inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);\n    }\n\n    return inspectorConfig;\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { SelectionFieldDesignModel } from './selection-field-design.model';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\n\n@Component({\n  selector: 'rx-selection-field-design',\n  templateUrl: './selection-field-design.component.html',\n  styleUrls: ['./selection-field-design.component.scss']\n})\nexport class SelectionFieldDesignComponent implements OnInit {\n  @Input()\n  model: SelectionFieldDesignModel;\n\n  isRadioButtonMode: boolean;\n\n  ngOnInit() {\n    this.model.editingMode$.subscribe((mode) => {\n      this.setMode(mode);\n    });\n  }\n\n  setMode(mode: string): void {\n    this.isRadioButtonMode = mode === RX_SELECTION_FIELD.editingModeValue.radioButtons;\n  }\n}\n","<adapt-rx-select\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [options]=\"[]\"\n  [disabled]=\"true\"\n  *ngIf=\"!isRadioButtonMode\"\n  [required]=\"model.isRequired$ | async\"\n  ngModel\n>\n</adapt-rx-select>\n\n<ng-container *ngIf=\"isRadioButtonMode\">\n  <div class=\"form-group\">\n    <label class=\"form-control-label\">\n      {{ model.label$ | async }}\n      <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n    </label>\n\n    <adapt-rx-radiobutton-group [(ngModel)]=\"isRadioButtonMode\" [disabled]=\"true\">\n      <adapt-rx-radiobutton *ngIf=\"!(model.isRequired$ | async)\" value=\"None\" label=\"None\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 1\"></adapt-rx-radiobutton>\n      <adapt-rx-radiobutton label=\"Option 2\"></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptRxRadiobuttonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { SelectionFieldDesignComponent } from './selection-field-design.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxRadiobuttonModule, FormsModule, AdaptRxSelectModule],\n  declarations: [SelectionFieldDesignComponent],\n  entryComponents: [SelectionFieldDesignComponent]\n})\nexport class SelectionFieldDesignModule {}\n","import { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime';\n\nexport interface ISelectionFieldConfig extends IBaseRecordEditorFieldComponentConfig {\n  editingMode?: string;\n}\n\nexport enum SelectionFieldMode {\n  RadioButton = 'radio-buttons',\n  Dropdown = 'dropdown'\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { ISelectionFieldDefinition } from '@helix/platform/record/api';\nimport { compact, get, isNil, map } from 'lodash';\nimport { distinctUntilChanged, startWith, takeUntil } from 'rxjs/operators';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { RX_SELECTION_FIELD } from '../selection-field.constant';\nimport { ISelectionFieldConfig, SelectionFieldMode } from './selection-field.types';\n\n@Component({\n  selector: 'rx-selection-field',\n  templateUrl: './selection-field.component.html'\n})\nexport class SelectionFieldComponent extends BaseRecordEditorFieldComponent {\n  fieldDefinition: ISelectionFieldDefinition;\n  selectOptions: RxSelectOption[];\n  isRadioButtonMode: boolean;\n  selectFormControl: FormControl;\n\n  getSelectValue(): RxSelectOption[] {\n    return isNil(this.formControl.value)\n      ? []\n      : compact([this.selectOptions.find((option) => option.id === Number(this.formControl.value))]);\n  }\n\n  onConfigInitialized(config: ISelectionFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.isRadioButtonMode = config.editingMode === SelectionFieldMode.RadioButton;\n\n    this.generateControlOptions(this.fieldDefinition);\n\n    this.selectFormControl = new FormControl(this.getSelectValue());\n\n    this.selectFormControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((value: RxSelectOption[]) => {\n      this.setFieldValue(get(value, '[0].id', null));\n    });\n\n    this.formControl.valueChanges\n      .pipe(startWith(this.formControl.value as number), distinctUntilChanged(), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        this.selectFormControl.setValue(this.getSelectValue());\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.selectFormControl.markAsTouched() : this.selectFormControl.markAsUntouched();\n    });\n  }\n\n  generateControlOptions(fieldDefinition: ISelectionFieldDefinition): void {\n    this.selectOptions = map(fieldDefinition.optionLabelsById, (label, optionId) => ({\n      name: label,\n      id: Number(optionId)\n    }));\n\n    if (!this.isRequired && this.isRadioButtonMode) {\n      this.selectOptions.unshift(RX_SELECTION_FIELD.emptyOption);\n    }\n  }\n\n  getDisplayValue(): string {\n    return this.fieldDefinition.optionLabelsById[this.formControl.value];\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  onPopupStatusChange(isOpen: boolean): void {\n    if (!isOpen) {\n      this.formControl.markAsTouched();\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-radiobutton-group\n    *ngIf=\"isRadioButtonMode\"\n    [name]=\"guid\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [label]=\"label\"\n  >\n    <adapt-rx-radiobutton\n      *ngFor=\"let item of selectOptions; last as isLast\"\n      [value]=\"item.id\"\n      [label]=\"item.name\"\n      class=\"mt-0 {{ isLast ? 'mb-1' : '' }}\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n\n  <adapt-rx-select\n    *ngIf=\"!isRadioButtonMode\"\n    [options]=\"selectOptions\"\n    [required]=\"isRequired\"\n    [label]=\"label\"\n    [formControl]=\"selectFormControl\"\n    [readonly]=\"isDisabled\"\n    [optionFormatter]=\"optionFormatter\"\n    [enableFilter]=\"true\"\n    [emptyOption]=\"!isRequired\"\n    (onPopupOpenChange)=\"onPopupStatusChange($event)\"\n  >\n  </adapt-rx-select>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptRxRadiobuttonModule, AdaptRxFormControlModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { SelectionFieldComponent } from './selection-field.component';\nimport { AdaptRxLabelModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [\n    AdaptRxFormControlModule,\n    AdaptRxRadiobuttonModule,\n    CommonModule,\n    ReadOnlyFieldModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    AdaptRxLabelModule,\n    AdaptRxSelectModule\n  ],\n  declarations: [SelectionFieldComponent],\n  entryComponents: [SelectionFieldComponent]\n})\nexport class SelectionFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { SelectionFieldComponent } from './runtime/selection-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { SelectionFieldDesignComponent } from './design';\nimport { SelectionFieldDesignModel } from './design/selection-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SelectionFieldModule } from './runtime/selection-field.module';\nimport { SelectionFieldDesignModule } from './design/selection-field-design.module';\n\n@NgModule({\n  imports: [SelectionFieldModule, SelectionFieldDesignModule]\n})\nexport class SelectionFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Selection,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Select',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_dropdown',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectionFieldDesignComponent),\n      designComponentModel: SelectionFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\nimport { ISelectGroupConfig } from './select-group.types';\n\n@Component({\n  selector: 'rx-select-group',\n  templateUrl: './select-group.component.html'\n})\nexport class SelectGroupComponent extends BaseViewComponent {\n  @Input()\n  config: Observable<ISelectGroupConfig>;\n\n  private fieldComponents: Map<number, SelectGroupFieldComponent> = new Map();\n\n  registerFieldComponent(fieldIndex: number, component: SelectGroupFieldComponent): void {\n    this.fieldComponents.set(fieldIndex, component);\n  }\n\n  getValueForPreviousField(currentFieldIndex: number): any {\n    const component = this.fieldComponents.get(currentFieldIndex - 1);\n\n    return component ? component.getFieldValue() : null;\n  }\n\n  resetValueForNextFields(currentFieldIndex: number): void {\n    const nextFieldIndex = currentFieldIndex + 1;\n    const component = this.fieldComponents.get(nextFieldIndex);\n\n    if (component) {\n      component.resetFieldValue();\n\n      this.resetValueForNextFields(nextFieldIndex);\n    }\n  }\n}\n","<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n","import { Component, Injector, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, startWith, take, takeUntil } from 'rxjs/operators';\nimport { find, get, isEmpty, isEqual, isNil } from 'lodash';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { INamedListDefinition, RxNamedListDefinitionService, RxNamedListService } from '@helix/platform/named-list/api';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { SelectGroupComponent } from './select-group.component';\n\n@Component({\n  selector: 'rx-select-group-field',\n  templateUrl: './select-group-field.component.html'\n})\nexport class SelectGroupFieldComponent extends BaseRecordEditorFieldComponent {\n  optionLoaderFunc = this.getNamedListOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n  showDefaultTitle: boolean;\n\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  private readOnlyValue: string;\n  private namedListDefinitionName: string;\n  private fieldIdToFilterBy: number;\n  private namedListDefinition: INamedListDefinition;\n  private fieldIndex: number;\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n\n  constructor(\n    injector: Injector,\n    private selectGroupComponent: SelectGroupComponent,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxNamedListService: RxNamedListService\n  ) {\n    super(injector);\n  }\n\n  onConfigInitialized(config): void {\n    super.onConfigInitialized(config);\n\n    this.fieldIndex = Number(config.index);\n    this.namedListDefinitionName = config.namedListDefinitionName;\n\n    this.selectGroupComponent.registerFieldComponent(this.fieldIndex, this);\n\n    const namedListDefinition$ = this.rxNamedListDefinitionService.get(this.namedListDefinitionName).pipe(take(1));\n\n    const valueChanges$ = this.formControl.valueChanges.pipe(\n      distinctUntilChanged(isEqual),\n      startWith(this.formControl.value as string),\n      takeUntil(this.destroyed$)\n    );\n\n    combineLatest([namedListDefinition$, valueChanges$]).subscribe(([namedListDefinition]) => {\n      this.namedListDefinition = namedListDefinition;\n      this.fieldIdToFilterBy = config.optionFilterFieldId || namedListDefinition.valueFieldId;\n\n      this.updateSelectedOption();\n\n      // do not reset value for next fields after record instance id change,\n      // in this case formControl is pristine and untouched\n      if (this.formControl.dirty) {\n        this.selectGroupComponent.resetValueForNextFields(this.fieldIndex);\n      } else {\n        this.resetLoadedOptions();\n      }\n    });\n  }\n\n  resetFieldValue(): void {\n    super.setFieldValue(null);\n    this.resetLoadedOptions();\n  }\n\n  getDisplayValue(): string {\n    return this.readOnlyValue;\n  }\n\n  private getNamedListOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery?: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    return this.rxNamedListService.getOptionPage(\n      this.namedListDefinition,\n      searchQuery,\n      this.getSelectionQueryCriteria(),\n      startIndex,\n      pageSize\n    );\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}] -> 'foo'\n  viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    return get(selectedOptions, '[0].value', '');\n  }\n\n  // 'foo' -> [{displayValue: 'FOO', value: 'foo'}]\n  modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return isNil(modelValue) ? [] : this.selectedOptions;\n  }\n\n  private updateSelectedOption(): void {\n    this.showDefaultTitle = false;\n\n    let namedListOptions$: Observable<IRxSelectWithPaginationOption[]>;\n\n    if (isEmpty(this.formControl.value)) {\n      namedListOptions$ = of([]);\n    } else {\n      // Select with pagination component is not available in the record editor READ mode.\n      const loadedOptions = get(this.selectWithPaginationComponent, 'options', []);\n      const namedListOptionCandidate = find(loadedOptions, { value: this.formControl.value });\n\n      namedListOptions$ = namedListOptionCandidate\n        ? of([namedListOptionCandidate])\n        : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, [this.formControl.value]);\n    }\n\n    namedListOptions$.pipe(take(1)).subscribe((options) => {\n      this.showDefaultTitle = true;\n      this.selectedOptions = options;\n\n      if (isEmpty(options) && this.formControl.value) {\n        // Selected option might be removed from the named list,\n        // in this case we have to show an empty display value.\n        this.selectedOptions = [\n          {\n            displayValue: null,\n            value: this.formControl.value\n          }\n        ];\n      }\n\n      if (this.formControl.dirty) {\n        this.formControl.markAsTouched();\n      }\n\n      this.triggerModelToViewValueUpdate();\n      this.updateReadOnlyValue();\n    });\n  }\n\n  private resetLoadedOptions(): void {\n    if (this.selectWithPaginationComponent) {\n      this.selectWithPaginationComponent.resetLoadedOptions();\n    }\n  }\n\n  private getSelectionQueryCriteria(): string {\n    let queryCriteria = null;\n\n    if (this.fieldIndex > 0) {\n      const previousFieldValue = this.selectGroupComponent.getValueForPreviousField(this.fieldIndex);\n\n      if (previousFieldValue) {\n        queryCriteria = `('${this.fieldIdToFilterBy}' = \"${previousFieldValue}\")`;\n      }\n    }\n\n    return queryCriteria;\n  }\n\n  private updateReadOnlyValue(): void {\n    this.readOnlyValue = get(this.selectedOptions, '[0].displayValue', null);\n  }\n\n  private triggerModelToViewValueUpdate(): void {\n    // trigger writeValue function in the control value accessor\n    this.formControl.setValue(this.formControl.value, { emitEvent: false });\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <rx-select-with-pagination\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n  ></rx-select-with-pagination>\n</ng-template>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition, IViewDefinition, RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { assign, omit, sortBy } from 'lodash';\n\n@Injectable()\nexport class SelectGroupComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  adaptDefinition(componentDefinition) {\n    componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n      assign(childComponentDefinition.propertiesByName, {\n        disabled: componentDefinition.propertiesByName.disabled,\n        hidden: componentDefinition.propertiesByName.hidden,\n        index: Number(childComponentDefinition.propertiesByName.index)\n      });\n\n      delete childComponentDefinition.propertiesByName.labelId;\n    });\n\n    const layout = {\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [\n            {\n              children: sortBy(componentDefinition.componentDefinitions, 'propertiesByName.index').map(\n                (component) => component.guid\n              )\n            }\n          ]\n        }\n      ]\n    };\n\n    componentDefinition.propertiesByName = omit(componentDefinition.propertiesByName, [\n      'disabled',\n      'hidden',\n      'recordInstance',\n      'recordDefinition'\n    ]);\n\n    componentDefinition.layout = JSON.stringify(layout);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { SelectGroupComponentDefinitionAdapterService } from './select-group-component-definition-adapter.service';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\nimport { SelectGroupComponent } from './select-group.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RuntimeViewCanvasModule,\n    ReactiveFormsModule,\n    RxSelectWithPaginationModule,\n    ReadOnlyFieldModule\n  ],\n  declarations: [SelectGroupComponent, SelectGroupFieldComponent],\n  providers: [SelectGroupComponentDefinitionAdapterService],\n  entryComponents: [SelectGroupComponent, SelectGroupFieldComponent]\n})\nexport class SelectGroupModule {\n  constructor(\n    private viewComponentDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private selectGroupComponentDefinitionAdapterService: SelectGroupComponentDefinitionAdapterService\n  ) {\n    viewComponentDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.SelectGroup,\n      this.selectGroupComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { INamedListDefinition, RxNamedListDefinitionCacheService } from '@helix/platform/named-list/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IDefinitionPickerComponentOptions, RxDefinitionPickerType } from '@helix/platform/shared/components';\nimport { head, isEmpty } from 'lodash';\nimport { of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-select-group-field',\n  templateUrl: './select-group-field.component.html'\n})\nexport class SelectGroupFieldComponent implements OnInit {\n  @Input()\n  fieldformGroup: AbstractControl;\n\n  @Input()\n  index: number;\n\n  @Input()\n  targetFieldOptions: RxSelectOption[];\n\n  definitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: 'Named list for options',\n    definitionType: RxDefinitionPickerType.NamedList,\n    required: true\n  };\n\n  filterField: RxSelectOption[] = [];\n  filterFieldIdOptions: RxSelectOption[] = [];\n  sourceRecordDefinitionDisplayName = '';\n  fieldId: RxSelectOption[] = [];\n\n  constructor(\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxNamedListDefinitionCacheService: RxNamedListDefinitionCacheService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService\n  ) {}\n\n  ngOnInit(): void {\n    this.onNamedListDefinitionNameChange(false);\n  }\n\n  onNamedListDefinitionNameChange(emitEvent: boolean = true): void {\n    of(this.fieldformGroup.get('namedListDefinitionName').value)\n      .pipe(\n        switchMap((namedListDefinitionName) => {\n          if (namedListDefinitionName) {\n            return this.rxNamedListDefinitionCacheService\n              .getNamedListDefinition(namedListDefinitionName)\n              .pipe(map((namedListDefinition: INamedListDefinition) => namedListDefinition.recordDefinitionName));\n          } else {\n            return of(null);\n          }\n        }),\n        take(1)\n      )\n      .subscribe((sourceRecordDefinitionName) => {\n        this.fieldformGroup.get('sourceRecordDefinitionName').setValue(sourceRecordDefinitionName, { emitEvent });\n\n        this.filterFieldIdOptions = [];\n\n        this.setFilterId();\n\n        if (this.index > 0) {\n          this.setOptionFilterFieldIdOptions();\n          this.setSourceRecordDefinitionDisplayName();\n        }\n      });\n  }\n\n  setFilterId(): void {\n    const fieldId = this.fieldformGroup.get('fieldId').value;\n\n    this.fieldId = isEmpty(fieldId) ? [] : [this.targetFieldOptions.find((option) => option.id === fieldId)];\n  }\n\n  setSourceRecordDefinitionDisplayName(): void {\n    const recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;\n\n    this.sourceRecordDefinitionDisplayName =\n      recordDefinitionName && this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n  }\n\n  setOptionFilterFieldIdOptions(): void {\n    const recordDefinitionName = this.fieldformGroup.get('sourceRecordDefinitionName').value;\n\n    this.filterField = [];\n\n    if (recordDefinitionName) {\n      this.rxRecordDefinitionCacheService\n        .getRecordDefinition(recordDefinitionName)\n        .pipe(\n          map((recordDefinition: IRecordDefinition) => {\n            return recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n              name: fieldDefinition.name,\n              id: String(fieldDefinition.id)\n            }));\n          })\n        )\n        .subscribe((fieldIdOptions: RxSelectOption[]) => {\n          const filterFieldId = this.fieldformGroup.get('optionFilterFieldId').value;\n\n          this.filterFieldIdOptions = fieldIdOptions;\n\n          this.filterField = isEmpty(filterFieldId)\n            ? []\n            : [this.filterFieldIdOptions.find((option) => option.id === filterFieldId)];\n        });\n    }\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  onSelectFilterField(filterField: RxSelectOption[]): void {\n    this.fieldformGroup.get('optionFilterFieldId').setValue(head(filterField).id);\n  }\n\n  onSelectField(field: RxSelectOption[]): void {\n    this.fieldformGroup.get('fieldId').setValue(head(field).id);\n  }\n}\n","<div>\n  <adapt-rx-textfield\n    label=\"Display label\"\n    required=\"true\"\n    rx-id=\"display-label-field\"\n    [formControl]=\"fieldformGroup.get('label')\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n\n  <rx-definition-picker\n    [options]=\"definitionPickerOptions\"\n    [formControl]=\"fieldformGroup.get('namedListDefinitionName')\"\n    (ngModelChange)=\"onNamedListDefinitionNameChange()\"\n    required=\"true\"\n    rx-id=\"named-list-definition-name-field\"\n    class=\"form-group d-block\"\n  ></rx-definition-picker>\n\n  <adapt-rx-select\n    label=\"Field for storing selected option value\"\n    rx-id=\"selected-option-value-target-field\"\n    [ngModel]=\"fieldId\"\n    (ngModelChange)=\"onSelectField($event)\"\n    [options]=\"targetFieldOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [required]=\"true\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [ngClass]=\"{ 'form-group d-block': index > 0 }\"\n  ></adapt-rx-select>\n\n  <adapt-rx-textfield\n    label=\"Source record definition\"\n    *ngIf=\"index > 0\"\n    class=\"form-group d-block\"\n    [ngModel]=\"sourceRecordDefinitionDisplayName\"\n    disabled\n    rx-id=\"source-record-definition-name-field\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'This is the record definition that provides the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-textfield>\n\n  <adapt-rx-select\n    *ngIf=\"index > 0\"\n    label=\"Field for filtering option values\"\n    rx-id=\"option-values-filter-field\"\n    [ngModel]=\"filterField\"\n    (ngModelChange)=\"onSelectFilterField($event)\"\n    [options]=\"filterFieldIdOptions\"\n    [optionFormatter]=\"optionFormatter\"\n    [disabled]=\"fieldformGroup.disabled\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: 'Select the field in the source record definition that filters the option values for this named list.',\n      placement: 'top',\n      popoverMode: true\n    }\"\n  ></adapt-rx-select>\n</div>\n","import { Component, Injector, Input, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { IFormWidgetComponent } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { omit } from 'lodash';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectGroupFieldProperties, ISelectGroupFormControlOptions } from './select-group-design.types';\nimport { SelectGroupDesignModel } from './select-group-design.model';\n\ninterface IFieldFormGroup extends ISelectGroupFieldProperties {\n  optionFilterFieldId: string;\n  sourceRecordDefinitionName: string;\n}\n\n@Component({\n  selector: 'rx-field-set-form-control',\n  templateUrl: './field-set-form-control.component.html',\n  styleUrls: ['./field-set-form-control.component.scss']\n})\nexport class FieldSetFormControlComponent\n  extends InspectorWidgetBase<ISelectGroupFormControlOptions, SelectGroupDesignModel>\n  implements OnDestroy, OnInit, IFormWidgetComponent\n{\n  @Input()\n  options: ISelectGroupFormControlOptions;\n\n  @Input()\n  isDisabled: boolean;\n\n  formArray = this.formBuilder.array([]);\n  valueChangeSubscription: Subscription;\n\n  private maxSelectGroupFieldCount = 6;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxGuidService: RxGuidService,\n    private rxModalService: RxModalService,\n    injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.fieldProperties$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((fieldModels) => this.onWriteValue(fieldModels));\n\n    this.setDisabledState(this.isDisabled);\n  }\n\n  onWriteValue(fieldModels: ISelectGroupFieldProperties[]): void {\n    this.valueChangeSubscription?.unsubscribe();\n\n    const formGroups = fieldModels\n      .sort((a, b) => Number(a.index) - Number(b.index))\n      .map((model) =>\n        this.formBuilder.group({\n          ...omit(model, 'index'),\n          sourceRecordDefinitionName: { value: null, disabled: true }\n        })\n      );\n\n    this.formArray = this.formBuilder.array(formGroups);\n\n    this.valueChangeSubscription = this.formArray.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(this.onFormValueChange.bind(this));\n  }\n\n  private onFormValueChange(formValue: IFieldFormGroup[]): void {\n    const value = formValue.map((formGroup, index) => {\n      const inspectorFieldModel: ISelectGroupFieldProperties = {\n        ...omit(formGroup, ['sourceRecordDefinitionName', 'optionFilterFieldId']),\n        index: String(index),\n        fieldId: formGroup.namedListDefinitionName ? formGroup.fieldId : null\n      };\n\n      if (index > 0) {\n        inspectorFieldModel.optionFilterFieldId = formGroup.namedListDefinitionName\n          ? formGroup.optionFilterFieldId\n          : null;\n      }\n\n      return inspectorFieldModel;\n    });\n\n    this.designerItemModel.onFieldPropertiesChange(value);\n  }\n\n  addField(): void {\n    this.formArray.push(this.getFieldFormGroup());\n  }\n\n  removeField(index: number): void {\n    this.rxModalService\n      .confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'Are you sure you want to delete this field?'\n      })\n      .then((response) => {\n        if (response) {\n          this.formArray.removeAt(index);\n        }\n      });\n  }\n\n  isAddFieldButtonDisabled(): boolean {\n    return this.isDisabled || this.formArray.length >= this.maxSelectGroupFieldCount;\n  }\n\n  trackByFn(index: number, control: AbstractControl): string {\n    return control.get('guid').value;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getFieldFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      guid: this.rxGuidService.generate(),\n      label: null,\n      namedListDefinitionName: null,\n      fieldId: null,\n      sourceRecordDefinitionName: null,\n      optionFilterFieldId: null\n    });\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    isDisabled ? this.formArray.disable() : this.formArray.enable();\n  }\n}\n","<adapt-button\n  btn-type=\"tertiary\"\n  rx-id=\"add-field-button\"\n  class=\"d-icon-plus_circle px-0 py-0\"\n  (click)=\"addField()\"\n  [disabled]=\"isAddFieldButtonDisabled()\"\n>\n  Add dependent field\n</adapt-button>\n\n<div\n  class=\"card mt-2\"\n  *ngFor=\"let formGroupControl of formArray.controls; trackBy: trackByFn; let index = index\"\n  rx-id=\"select-group-field-card\"\n>\n  <div class=\"card-block p-2\">\n    <button\n      (click)=\"removeField(index)\"\n      class=\"close position-relative\"\n      type=\"button\"\n      aria-label=\"Remove\"\n      rx-id=\"remove-field-button\"\n      *ngIf=\"!isDisabled\"\n    ></button>\n\n    <rx-select-group-field\n      [fieldformGroup]=\"formGroupControl\"\n      [index]=\"index\"\n      [targetFieldOptions]=\"options.targetFieldOptions\"\n    ></rx-select-group-field>\n  </div>\n</div>\n","import {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { IValidationFormControlOptions, ValidationFormControlComponent } from '@helix/platform/shared/components';\nimport { Injector } from '@angular/core';\nimport { catchError, distinctUntilChanged, map, shareReplay, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { filter as _filter, find, flow, isEmpty, map as _map, omit, pick, reject, sortBy, uniqBy } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { FieldSetFormControlComponent } from './field-set-form-control.component';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ISelectGroupFieldProperties,\n  ISelectGroupFormControlOptions,\n  ISelectGroupProperties\n} from './select-group-design.types';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\n\nexport class SelectGroupDesignModel extends ViewDesignerComponentModel {\n  rxRecordDefinitionCacheService = this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n  rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  recordEditorGuid$ = this.sandbox\n    .getParentComponentGuid(RxViewComponentType.RecordEditor)\n    .pipe(take(1), shareReplay(1));\n\n  recordEditorMode$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n    })\n  );\n\n  recordDefinitionName$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n        'recordDefinitionName',\n        recordEditorGuid\n      );\n    }),\n    shareReplay(1)\n  );\n\n  fieldDefinitions$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName: string) => {\n      if (recordDefinitionName) {\n        return this.rxRecordDefinitionCacheService\n          .getRecordDefinition(recordDefinitionName)\n          .pipe(catchError((error) => EMPTY));\n      } else {\n        return of(null);\n      }\n    }),\n    distinctUntilChanged(),\n    map<IRecordDefinition, IFieldDefinition[]>((recordDefinition: IRecordDefinition) => {\n      if (recordDefinition && recordDefinition.fieldDefinitions) {\n        return _filter(recordDefinition.fieldDefinitions, {\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        });\n      } else {\n        return [];\n      }\n    }),\n    shareReplay(1)\n  );\n\n  inspectorTargetFieldOptions$ = combineLatest([this.fieldDefinitions$, this.recordEditorMode$]).pipe(\n    map(([fieldDefinitions, recordEditorMode]) => [\n      _filter(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.character }),\n      recordEditorMode\n    ]),\n    map<[IFieldDefinition[], RecordEditorMode], RxSelectOption[]>(([characterFieldDefinitions, recordEditorMode]) =>\n      flow(\n        (fieldDefinitions) =>\n          _filter(fieldDefinitions, (definition) => {\n            const isSystemField = this.rxFieldDefinitionService.isSystemField(definition);\n\n            return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n          }),\n        (fieldDefinitions) =>\n          _map(fieldDefinitions, (definition) => ({\n            name: definition.name,\n            id: String(definition.id)\n          })),\n        (options) => sortBy(options, 'name')\n      )(characterFieldDefinitions)\n    ),\n    shareReplay(1)\n  );\n\n  fieldsDesignData$ = this.sandbox.getChildComponents<ISelectGroupFieldProperties>();\n\n  fieldProperties$: Observable<ISelectGroupFieldProperties[]> = this.fieldsDesignData$.pipe(\n    map((fieldComponentsDesignData) =>\n      _map(fieldComponentsDesignData, (field) => ({\n        ...field.data,\n        guid: field.guid\n      }))\n    )\n  );\n\n  static getInitialProperties(initialProperties?: ISelectGroupProperties): ISelectGroupProperties {\n    return {\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, protected sandbox: IViewComponentDesignSandbox<ISelectGroupProperties>) {\n    super(injector, sandbox);\n\n    // initial inspector configuration and component properties set\n    combineLatest([this.recordDefinitionName$, this.inspectorTargetFieldOptions$, this.recordEditorGuid$])\n      .pipe(take(1))\n      .subscribe(([recordDefinitionName, inspectorTargetFieldOptions, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    this.inspectorTargetFieldOptions$\n      .pipe(withLatestFrom(this.recordDefinitionName$, this.recordEditorGuid$))\n      .subscribe(([inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    combineLatest([this.sandbox.componentProperties$, this.fieldProperties$])\n      .pipe(switchMap(([componentProperties, fieldProperties]) => this.validate(componentProperties, fieldProperties)))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  onFieldPropertiesChange(fieldProperties: ISelectGroupFieldProperties[]): void {\n    const fieldComponentPayloads = this.getFieldComponentPayloads(fieldProperties);\n\n    this.sandbox.setChildren(fieldComponentPayloads);\n  }\n\n  isFieldRequired(field: IViewComponentDesignData<ISelectGroupFieldProperties>): Observable<boolean> {\n    return this.fieldDefinitions$.pipe(\n      map((fieldDefinitions) => {\n        const fieldDefinition = field.data.fieldId && find(fieldDefinitions, { id: Number(field.data.fieldId) });\n\n        return Boolean(fieldDefinition) && fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n      })\n    );\n  }\n\n  getPropertiesByName(properties) {\n    return pick(properties, ['disabled', 'hidden', 'styles', RX_AVAILABLE_ON_DEVICES_PROP_NAME]);\n  }\n\n  private validate(\n    componentProperties: ISelectGroupProperties,\n    fieldProperties: ISelectGroupFieldProperties[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationErrorMessages: string[] = [];\n\n    if (isEmpty(fieldProperties)) {\n      validationErrorMessages.push('Field set cannot be empty.');\n    } else {\n      const fieldsWithLabel = _filter(fieldProperties, (model) => model.label);\n\n      if (fieldsWithLabel.length !== fieldProperties.length) {\n        validationErrorMessages.push('Display label cannot be blank.');\n      }\n\n      if (uniqBy(fieldsWithLabel, 'label').length !== fieldsWithLabel.length) {\n        validationErrorMessages.push('Display labels must be unique.');\n      }\n\n      if (reject(fieldProperties, (model) => model.namedListDefinitionName).length) {\n        validationErrorMessages.push('Named list for options cannot be blank.');\n      }\n\n      if (reject(fieldProperties, (model) => model.fieldId).length) {\n        validationErrorMessages.push('Field for storing selected option value cannot be blank.');\n      }\n    }\n\n    const validationIssues = validationErrorMessages\n      .map((message) => this.sandbox.createError(message))\n      .concat(validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  private getFieldComponentPayloads(fieldProperties: ISelectGroupFieldProperties[]): IViewComponentDesignSetPayload[] {\n    return _map(fieldProperties, (model) => ({\n      type: RxViewComponentType.SelectGroupField,\n      guid: model.guid,\n      data: omit(model, 'guid')\n    }));\n  }\n\n  private getBaseInspectorConfig(\n    targetFieldOptions: RxSelectOption[],\n    recordDefinitionName: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const generalGroup = {\n      label: 'General',\n      controls: []\n    };\n\n    if (recordDefinitionName) {\n      generalGroup.controls = [getDisabledFieldInspectorConfig(), ...getStandardPropsInspectorConfigs()];\n    } else {\n      generalGroup.controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            propertyName: 'recordDefinitionName',\n            componentGuid: recordEditorGuid\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: recordDefinitionName\n        ? [\n            generalGroup,\n            {\n              label: 'Field set',\n              controls: [\n                {\n                  component: FieldSetFormControlComponent,\n                  options: {\n                    targetFieldOptions: targetFieldOptions\n                  } as ISelectGroupFormControlOptions\n                }\n              ]\n            }\n          ]\n        : [generalGroup]\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { SelectGroupDesignModel } from './select-group-design.model';\n\n@Component({\n  selector: 'rx-select-group-design',\n  templateUrl: './select-group-design.component.html'\n})\nexport class SelectGroupDesignComponent {\n  @Input()\n  model: SelectGroupDesignModel;\n\n  trackByFn(index, item) {\n    return item.data.guid;\n  }\n}\n","<ng-template [ngIf]=\"(model.fieldsDesignData$ | async).length\" [ngIfElse]=\"placeholderTemplate\">\n  <adapt-rx-textfield\n    *ngFor=\"let field of model.fieldsDesignData$ | async; trackBy: trackByFn\"\n    [label]=\"field.data.label || '<No Label>'\"\n    [required]=\"model.isFieldRequired(field) | async\"\n    [disabled]=\"true\"\n    ngModel\n    rx-id=\"select-group-field\"\n    class=\"form-group d-block\"\n  ></adapt-rx-textfield>\n</ng-template>\n\n<ng-template #placeholderTemplate>\n  <adapt-empty-state type=\"objects\" label=\"Add dependent fields in the Properties panel.\"></adapt-empty-state>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { SelectGroupDesignComponent } from './select-group-design.component';\nimport { FieldSetFormControlComponent } from './field-set-form-control.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport {\n  AdaptButtonModule,\n  AdaptRxSelectModule,\n  AdaptRxTextfieldModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { SelectGroupFieldComponent } from './select-group-field.component';\n\n@NgModule({\n  declarations: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],\n  imports: [\n    FormsModule,\n    CommonModule,\n    AdaptButtonModule,\n    ReactiveFormsModule,\n    RxDefinitionPickerModule,\n    AdaptRxTextfieldModule,\n    AdaptRxSelectModule,\n    AdaptEmptyStateModule\n  ],\n  exports: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent],\n  entryComponents: [SelectGroupDesignComponent, FieldSetFormControlComponent, SelectGroupFieldComponent]\n})\nexport class SelectGroupDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { SelectGroupComponent } from './runtime/select-group.component';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { SelectGroupFieldComponent } from './runtime/select-group-field.component';\nimport { SelectGroupDesignComponent } from './design/select-group-design.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { SelectGroupDesignModel } from './design/select-group-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SelectGroupModule } from './runtime/select-group.module';\nimport { SelectGroupDesignModule } from './design/select-group-design.module';\n\n@NgModule({\n  imports: [SelectGroupModule, SelectGroupDesignModule]\n})\nexport class SelectGroupRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.SelectGroup,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupComponent),\n        properties: [RX_AVAILABLE_ON_DEVICES_PROP_DESC],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Select group',\n        designComponentFactory: componentFactoryResolver.resolveComponentFactory(SelectGroupDesignComponent),\n        designComponentModel: SelectGroupDesignModel,\n        isContainerComponent: true,\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'field_dropdowns',\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.SelectGroupField,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(SelectGroupFieldComponent),\n        properties: RX_BASE_FIELD_PROPERTIES,\n\n        isDataComponent: true\n      }\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { IFieldDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISwitcherFormControlOptions,\n  RxDefinitionPickerComponent,\n  RX_DEFINITION_PICKER,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  NamedListFilterExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\nimport { ITextFieldProperties } from './text-field-design.types';\nimport { omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class TextFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(initialProperties?: ITextFieldProperties): ITextFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      enableMultiSelection: null,\n      additionalQueryCriteria: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<ITextFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return this.selectedFieldDefinition$.pipe(\n      switchMap((fieldDefinition) =>\n        super\n          .getInspectorConfig()\n          .pipe(\n            map((inspectorConfig) =>\n              fieldDefinition?.namedListDefinition\n                ? this.getNamedListInspectorConfig(inspectorConfig, fieldDefinition)\n                : inspectorConfig\n            )\n          )\n      )\n    );\n  }\n\n  private getNamedListInspectorConfig(\n    inspectorConfig: IViewDesignerInspectorConfig,\n    fieldDefinition: IFieldDefinition\n  ): IViewDesignerInspectorConfig {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      fieldDefinition,\n      this.injector\n    );\n\n    const enableMultiSelectionControl = {\n      name: 'enableMultiSelection',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Enable multi-selection'\n      } as ISwitcherFormControlOptions\n    };\n\n    const additionalQueryCriteriaControls = [\n      {\n        name: 'namedListDefinitionName',\n        component: RxDefinitionPickerComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.named-list.label'),\n          definitionType: RX_DEFINITION_PICKER.definitionTypes.namedList.type\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'additionalQueryCriteria',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Additional named list filter',\n          tooltip: new Tooltip(\n            'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n          ),\n          dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n          operators: namedListFilterExpressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      }\n    ];\n\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(enableMultiSelectionControl);\n    inspectorConfig.inspectorSectionConfigs[0].controls.push(...additionalQueryCriteriaControls);\n\n    // update the named list name for named list inspector control\n    this.sandbox.updateComponentProperties({ namedListDefinitionName: fieldDefinition.namedListDefinition });\n\n    return inspectorConfig;\n  }\n\n  getPropertiesByName(properties: ITextFieldProperties): ITextFieldProperties {\n    return omit(super.getPropertiesByName(properties) as ITextFieldProperties, 'namedListDefinitionName');\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { TextFieldDesignModel } from './text-field-design.model';\n\n@Component({\n  selector: 'rx-character-field-design',\n  templateUrl: 'text-field-design.component.html'\n})\nexport class TextFieldDesignComponent {\n  @Input()\n  model: TextFieldDesignModel;\n}\n","<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [required]=\"model.isRequired$ | async\"\n  [label]=\"model.label$ | async\"\n  [disabled]=\"true\"\n  ngModel\n></adapt-rx-textfield>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { TextFieldDesignComponent } from './text-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule],\n  declarations: [TextFieldDesignComponent],\n  entryComponents: [TextFieldDesignComponent]\n})\nexport class TextFieldDesignModule {}\n","import { Injector } from '@angular/core';\nimport { TextFieldDesignModel } from './text-field-design.model';\nimport {\n  NamedListFilterExpressionConfigurator,\n  RxViewComponentExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { ExpressionOperatorGroup, ExpressionOperatorRowsByGroup } from '@helix/platform/shared/api';\n\nexport class TextFieldExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: TextFieldDesignModel\n  ) {\n    super(injector, componentGuid, componentModel);\n\n    const dataDictionary$ = this.componentModel.selectedFieldDefinition$.pipe(\n      filter((fieldDefinition) => Boolean(fieldDefinition.namedListDefinition)),\n      switchMap((fieldDefinition) => {\n        const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n          fieldDefinition,\n          this.injector\n        );\n\n        return namedListFilterExpressionConfigurator.getDataDictionary();\n      })\n    );\n\n    this.configureForProperty({\n      propertyPath: 'additionalQueryCriteria',\n      dataDictionary$,\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllServer)\n    });\n  }\n}\n","export enum TextFieldMultiSelectionType {\n  Enabled = 'true',\n  Disabled = 'false'\n}\n","import { Component, Injector, ViewChild } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { compact, find, first, get, includes, isEqual, isNil } from 'lodash';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { TextFieldMultiSelectionType } from './text-field.types';\nimport { INamedListDefinition, RxNamedListDefinitionService, RxNamedListService } from '@helix/platform/named-list/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  startWith,\n  take,\n  takeUntil\n} from 'rxjs/operators';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { IRxTextFieldConfig } from './text-field-config.interface';\n\n@Component({\n  selector: 'rx-text-field',\n  templateUrl: './text-field.component.html'\n})\nexport class TextFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  isPasswordField: boolean;\n  isNamedListAttached: boolean;\n  isMultipleSelectionEnabled: boolean;\n  maxLength: number;\n  showDefaultTitle: boolean;\n\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  optionLoaderFunc = this.getNamedListOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n\n  private displayValue: string;\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n  private namedListDefinition: INamedListDefinition;\n  private namedListDefinitionName: string;\n  private namedListFormattedValue: string;\n  private multiSelectDelimiter = ';';\n  private isDropdownOpen = false;\n  private additionalQueryCriteria: string;\n\n  constructor(\n    injector: Injector,\n    private fieldDefinitionService: RxFieldDefinitionService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxNamedListService: RxNamedListService\n  ) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IRxTextFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.isPasswordField =\n      includes(RX_RECORD_DEFINITION.passwordFieldIds, this.fieldId) || this.fieldDefinition.shouldPersistHashed;\n\n    this.namedListDefinitionName = this.fieldDefinition.namedListDefinition;\n    this.isNamedListAttached = Boolean(this.namedListDefinitionName);\n    this.isMultipleSelectionEnabled = config.enableMultiSelection === TextFieldMultiSelectionType.Enabled;\n\n    if (this.fieldDefinition.maxLength && !this.fieldDefinitionService.isSystemField(this.fieldDefinition)) {\n      this.maxLength = this.fieldDefinition.maxLength;\n    }\n\n    if (this.isNamedListAttached) {\n      const namedListDefinition$ = this.rxNamedListDefinitionService\n        .get(this.namedListDefinitionName)\n        .pipe(shareReplay(1), take(1));\n\n      const valueChanges$ = this.formControl.valueChanges.pipe(\n        distinctUntilChanged(isEqual),\n        startWith(this.formControl.value as string),\n        filter(() => !this.isDropdownOpen),\n        takeUntil(this.destroyed$)\n      );\n\n      this.config\n        .pipe(debounceTime(250), pluck('additionalQueryCriteria'), distinctUntilChanged(), takeUntil(this.destroyed$))\n        .subscribe((additionalQueryCriteria: string) => {\n          if (!isNil(this.additionalQueryCriteria)) {\n            this.selectWithPaginationComponent.resetLoadedOptions();\n            this.setFieldValue(null);\n          }\n\n          this.additionalQueryCriteria = additionalQueryCriteria;\n        });\n\n      combineLatest([namedListDefinition$, valueChanges$]).subscribe(([namedListDefinition]) => {\n        this.namedListDefinition = namedListDefinition;\n\n        this.updateSelection();\n      });\n    }\n  }\n\n  getDisplayValue(): string {\n    let displayValue = super.getDisplayValue();\n\n    if (this.isPasswordField) {\n      displayValue = '********';\n    } else if (this.isNamedListAttached) {\n      displayValue = this.namedListFormattedValue;\n    }\n\n    return displayValue;\n  }\n\n  getNamedListOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery?: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    return this.rxNamedListService.getOptionPage(\n      this.namedListDefinition,\n      searchQuery,\n      this.additionalQueryCriteria,\n      startIndex,\n      pageSize\n    );\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar'\n  viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    this.selectedOptions = selectedOptions;\n\n    this.updateNamedListFormattedValue();\n\n    return selectedOptions.map((option) => option.value).join(this.multiSelectDelimiter);\n  }\n\n  // 'foo;bar' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]\n  modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return modelValue ? this.selectedOptions : [];\n  }\n\n  onToggleDropdown(isOpen: boolean): void {\n    this.isDropdownOpen = isOpen;\n  }\n\n  private getOptionValues(modelValue: string): string[] {\n    return modelValue ? compact(modelValue.split(this.multiSelectDelimiter)) : [];\n  }\n\n  // Update selection by form control value.\n  // Usually, this needs to be done when form control value changes programmatically, e.g:\n  // - in initialization text field component phase\n  // - by set property action\n  // - after record editor record instance id change\n  private updateSelection(): void {\n    this.showDefaultTitle = false;\n\n    const selectedOptionValues = this.getOptionValues(this.formControl.value);\n\n    if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n      // If the field instance contains multiple values but the component doesn't have multiple selection enabled\n      // e.g. when field was edited in the data editor, the display value will be blank (null).\n      this.selectedOptions = [\n        {\n          displayValue: null,\n          value: this.formControl.value\n        }\n      ];\n\n      this.triggerModelToViewValueUpdate();\n      this.updateNamedListFormattedValue();\n    } else {\n      // Select with pagination component is not available in the record editor READ mode.\n      const loadedOptions = get(this.selectWithPaginationComponent, 'options', []);\n      // Check if all options for selected values are already loaded.\n      (selectedOptionValues.every((selectedValue) => loadedOptions.find((option) => option.value === selectedValue))\n        ? of(loadedOptions)\n        : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, selectedOptionValues)\n      ).subscribe((options) => {\n        this.showDefaultTitle = true;\n\n        if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n          // If the field instance contains multiple values but the component doesn't have multiple selection\n          // enabled e.g. when field was edited in the data editor, the display value will be blank (null).\n          this.selectedOptions = [\n            {\n              displayValue: null,\n              value: this.formControl.value\n            }\n          ];\n        } else {\n          // If the record instance with a given value is not found e.g. referenced record\n          // was deleted, the display value for such record instance will be blank (null).\n          this.selectedOptions = selectedOptionValues.map(\n            (optionValue) =>\n              find(options, { value: optionValue }) || {\n                displayValue: null,\n                value: optionValue\n              }\n          );\n        }\n\n        if (this.formControl.dirty) {\n          this.formControl.markAsTouched();\n        }\n\n        this.triggerModelToViewValueUpdate();\n        this.updateNamedListFormattedValue();\n      });\n    }\n  }\n\n  private updateNamedListFormattedValue(): void {\n    if (this.isMultipleSelectionEnabled) {\n      const visibleOptionsCount = 50;\n\n      this.namedListFormattedValue =\n        this.selectedOptions\n          .slice(0, visibleOptionsCount)\n          .map((option) => option.displayValue)\n          .filter(Boolean)\n          .join(', ') || null;\n\n      if (this.selectedOptions.length >= visibleOptionsCount) {\n        this.namedListFormattedValue += '...';\n      }\n    } else {\n      this.namedListFormattedValue = this.selectedOptions.length ? first(this.selectedOptions).displayValue : null;\n    }\n  }\n\n  private triggerModelToViewValueUpdate(): void {\n    // trigger writeValue function in the control value accessor\n    this.formControl.setValue(this.formControl.value, { emitEvent: false });\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textfield\n    *ngIf=\"!isNamedListAttached\"\n    [label]=\"label\"\n    [isPassword]=\"isPasswordField\"\n    [formControl]=\"formControl\"\n    [maxlength]=\"maxLength\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [autocomplete]=\"!isPasswordField\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-textfield>\n\n  <rx-select-with-pagination\n    *ngIf=\"isNamedListAttached\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [required]=\"isRequired\"\n    [isMultiSelectionMode]=\"isMultipleSelectionEnabled\"\n    (toggleDropdown)=\"onToggleDropdown($event)\"\n    [template]=\"namedListOptionTemplate\"\n  ></rx-select-with-pagination>\n</ng-template>\n\n<ng-template #namedListOptionTemplate let-option>\n  {{ option.displayValue }}\n  <div *ngIf=\"option.contextualFields\" class=\"text-secondary text-truncate\" [title]=\"option.title\">\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of option.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxSelectWithPaginationModule } from '@helix/platform/shared/components';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TextFieldComponent } from './text-field.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReadOnlyFieldModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    RxSelectWithPaginationModule,\n    AdaptRxTextfieldModule\n  ],\n  declarations: [TextFieldComponent],\n  exports: [TextFieldComponent],\n  entryComponents: [TextFieldComponent]\n})\nexport class TextFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\n\nimport {\n  RxRecordQueryExpressionEvaluatorService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TextFieldComponent } from './runtime/text-field.component';\nimport { TextFieldDesignComponent, TextFieldExpressionConfigurator } from './design';\nimport { TextFieldDesignModel } from './design/text-field-design.model';\nimport { TextFieldModule } from './runtime/text-field.module';\nimport { TextFieldDesignModule } from './design/text-field-design.module';\n\n@NgModule({\n  imports: [TextFieldModule, TextFieldDesignModule]\n})\nexport class TextFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxRecordQueryExpressionEvaluatorService: RxRecordQueryExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Character,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldComponent),\n      properties: [\n        ...RX_BASE_FIELD_PROPERTIES,\n        {\n          name: 'enableMultiSelection',\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'namedListDefinitionName',\n          designType: ViewComponentPropertyType.String\n        },\n        {\n          name: 'additionalQueryCriteria',\n          designType: ViewComponentPropertyType.String,\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxRecordQueryExpressionEvaluatorService\n        }\n      ],\n      name: 'Text',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'field_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextFieldDesignComponent),\n      designComponentModel: TextFieldDesignModel,\n      expressionConfigurator: TextFieldExpressionConfigurator,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class TextareaFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n}\n","import { Component, Input } from '@angular/core';\nimport { TextareaFieldDesignModel } from './textarea-field-design.model';\n\n@Component({\n  selector: 'rx-textarea-field-design',\n  templateUrl: './textarea-field-design.component.html'\n})\nexport class TextareaFieldDesignComponent {\n  @Input()\n  model: TextareaFieldDesignModel;\n}\n","<adapt-rx-textarea\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n  rows=\"3\"\n></adapt-rx-textarea>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TextareaFieldDesignComponent } from './textarea-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxTextareaModule, FormsModule],\n  declarations: [TextareaFieldDesignComponent],\n  entryComponents: [TextareaFieldDesignComponent]\n})\nexport class TextareaFieldDesignModule {}\n","import { Component, Injector } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { RxFieldDefinitionService } from '@helix/platform/record/api';\n\n@Component({\n  selector: 'rx-textarea-field',\n  templateUrl: './textarea-field.component.html',\n  styleUrls: ['./textarea-field.component.scss']\n})\nexport class TextareaFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  maxLength: number;\n\n  constructor(injector: Injector, private rxFieldDefinitionService: RxFieldDefinitionService) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    if (this.fieldDefinition.maxLength && !this.rxFieldDefinitionService.isSystemField(this.fieldDefinition)) {\n      this.maxLength = this.fieldDefinition.maxLength;\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textarea\n    [formControl]=\"formControl\"\n    [required]=\"isRequired\"\n    [maxlength]=\"maxLength\"\n    [rows]=\"3\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [label]=\"label\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  >\n  </adapt-rx-textarea>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TextareaFieldComponent } from './textarea-field.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, ReadOnlyFieldModule, TranslateModule, AdaptRxTextareaModule],\n  declarations: [TextareaFieldComponent],\n  entryComponents: [TextareaFieldComponent]\n})\nexport class TextareaFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { TextareaFieldComponent } from './runtime/textarea-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TextareaFieldDesignComponent } from './design';\nimport { TextareaFieldDesignModel } from './design/textarea-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TextareaFieldModule } from './runtime/textarea-field.module';\nimport { TextareaFieldDesignModule } from './design/textarea-field-design.module';\n\n@NgModule({\n  imports: [TextareaFieldModule, TextareaFieldDesignModule]\n})\nexport class TextareaFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Textarea,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Textarea',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'area_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TextareaFieldDesignComponent),\n      designComponentModel: TextareaFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class TimeFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.timeOnly];\n}\n","import { Component, Input } from '@angular/core';\nimport { TimeFieldDesignModel } from './time-field-design.model';\nimport { RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-time-field-design',\n  templateUrl: './time-field-design.component.html'\n})\nexport class TimeFieldDesignComponent {\n  @Input()\n  model: TimeFieldDesignModel;\n\n  timeValue: Date;\n  pickerMode = RxDatetimePickerMode.Time;\n}\n","<adapt-rx-datetime\n  class=\"rx-pointer-events-none\"\n  [(ngModel)]=\"timeValue\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  [mode]=\"pickerMode\"\n  [label]=\"model.label$ | async\"\n></adapt-rx-datetime>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { TimeFieldDesignComponent } from './time-field-design.component';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, FormsModule],\n  declarations: [TimeFieldDesignComponent],\n  entryComponents: [TimeFieldDesignComponent]\n})\nexport class TimeFieldDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { cloneDeep, isString } from 'lodash';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n\n@Injectable()\nexport class TimeAdapter extends AdaptRxDatetimeAdapter<string> {\n  private storeTimeFormat = 'HH:mm:ss';\n\n  fromModel(dateString: string): RxDatetimeStruct {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateString, 'LTS');\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  toModel(date: RxDatetimeStruct): string {\n    return date\n      ? date.parseError\n        ? moment.invalid().toString()\n        : moment({\n            hour: date.hours || 0,\n            minute: date.minutes || 0,\n            seconds: date.seconds || 0\n          }).format(this.storeTimeFormat)\n      : null;\n  }\n}\n","import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport moment from 'moment-es6';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { TimeAdapter } from './time-adapter.class';\nimport { AbstractControl, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\n\n@Component({\n  selector: 'rx-time-field',\n  templateUrl: './time-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: TimeAdapter }]\n})\nexport class TimeFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  pickerMode = RxDatetimePickerMode.Time;\n\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue: string = super.getDisplayValue();\n\n    if (!displayValue) {\n      return '-';\n    } else {\n      const readOnlyTimeValue = moment(displayValue, 'LTS').toDate();\n\n      return this.datePipe.transform(readOnlyTimeValue, 'mediumTime') ?? '-';\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors | null => {\n      const date = control.value ? moment(control.value, 'LTS') : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: this.pickerMode, hasSeconds: true } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n","import { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { ReadOnlyFieldModule } from '@helix/platform/ui-kit';\nimport { TimeFieldComponent } from './time-field.component';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [AdaptRxDatetimeModule, CommonModule, ReadOnlyFieldModule, TranslateModule, ReactiveFormsModule],\n  declarations: [TimeFieldComponent],\n  providers: [DatePipe],\n  entryComponents: [TimeFieldComponent]\n})\nexport class TimeFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { TimeFieldComponent } from './runtime/time-field.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { TimeFieldDesignComponent } from './design';\nimport { TimeFieldDesignModel } from './design/time-field-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TimeFieldModule } from './runtime/time-field.module';\nimport { TimeFieldDesignModule } from './design/time-field-design.module';\n\n@NgModule({\n  imports: [TimeFieldModule, TimeFieldDesignModule]\n})\nexport class TimeFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Time,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Time',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      icon: 'clock_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TimeFieldDesignComponent),\n      designComponentModel: TimeFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport {\n  IRecordDefinition,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { takeUntil } from 'rxjs/operators';\nimport { IRxExtensionContainerConfig } from './extension-container.types';\n\n@Component({\n  selector: 'rx-extension-container',\n  templateUrl: './extension-container.component.html'\n})\nexport class RxExtensionContainerComponent extends BaseViewComponent implements OnInit {\n  recordDefinitions: { [name: string]: IRecordDefinition } = {};\n  state: IRxExtensionContainerConfig;\n\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordDefinitionService: RxRecordDefinitionService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: IRxExtensionContainerConfig) => {\n      this.state = config;\n    });\n  }\n\n  loadRecordDefinition(name: string): void {\n    this.rxRecordDefinitionCacheService.getRecordDefinition(name).subscribe((recordDefinition) => {\n      recordDefinition.fieldDefinitionsById =\n        this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n\n      this.recordDefinitions[name] = recordDefinition;\n\n      this.notifyPropertyChanged('recordDefinitions', this.recordDefinitions);\n    });\n  }\n}\n","<rx-runtime-view-canvas-outlet [hidden]=\"state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RxExtensionContainerHelperService {\n  // generate unique expression for 'selectionFieldOptionNamesById' property depending on extension Record editor guid\n  getSelectionFieldOptionNamesByIdExpression(guid: string): string {\n    return `${guid}:selectionFieldOptionNamesById`;\n  }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';\nimport { RX_ASSOCIATION_DEFINITION } from '@helix/platform/association/api';\nimport { RecordInstance, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxExtensionContainerComponent } from '../extension-container.component';\nimport { map, shareReplay, startWith, switchMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\nimport { RecordEditorMode, RxAssociationManagerService } from '../../../../record-editor';\nimport { RecordEditorComponent } from '../../../../record-editor/runtime/record-editor.component';\nimport { RxRecordEditorUtilsService } from '../../../../record-editor/common/record-editor-utils.service';\nimport { get, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { IRxExtensionContainerSectionConfig } from '../extension-container.types';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxExtensionContainerHelperService } from '../extension-container-helper.service';\n\n@Component({\n  selector: 'rx-extension-container-section',\n  templateUrl: './extension-container-section.component.html'\n})\nexport class ExtensionContainerSectionComponent extends BaseViewComponent implements IViewComponent, OnInit {\n  config: Observable<IRxExtensionContainerSectionConfig>;\n  isInitialized = false;\n  selectionFieldOptionNamesById: IPlainObject = null;\n\n  constructor(\n    private rxExtensionContainerComponent: RxExtensionContainerComponent,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private recordEditorComponent: RecordEditorComponent\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    // will close once officially fixed : https://github.com/ReactiveX/rxjs/issues/4772\n    combineLatest([this.config, this.recordEditorComponent.recordInstanceChanged$.pipe(startWith(null))])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([config, recordInstanceUpdated]) => {\n        if (config.recordDefinitionName) {\n          this.rxExtensionContainerComponent.loadRecordDefinition(config.recordDefinitionName);\n        }\n\n        if (!config.associationDefinitionName) {\n          return (this.isInitialized = true);\n        }\n\n        if (config.api) {\n          let associatedRecordInstanceId = null;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            associatedRecordInstanceId = this.recordEditorComponent.state.recordInstance.id;\n          }\n\n          const associationManager: RxAssociationManagerService = config.api.getAssociationManager({\n            associationDefinitionName: config.associationDefinitionName,\n            associatedRecordNodeSide: RX_ASSOCIATION_DEFINITION.roles.second.value,\n            associatedRecordInstanceId: associatedRecordInstanceId,\n            recordDefinitionName: config.recordDefinitionName,\n            allFieldIds: true,\n            associatedRecordPath: config.associatedRecordPath\n          });\n\n          let initialize$: Observable<any>;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            initialize$ = associationManager.loadExtensions().pipe(\n              switchMap((recordInstance) => {\n                if (isEmpty(associationManager.extensions)) {\n                  return this.addNewRecordInstanceToExtension(associationManager);\n                } else {\n                  return of(recordInstance);\n                }\n              })\n            );\n          } else if (\n            this.recordEditorComponent.state.mode === RecordEditorMode.Create ||\n            this.recordEditorComponent.state.mode === RecordEditorMode.Temporary\n          ) {\n            initialize$ = forkJoin([\n              associationManager.initialize(),\n              this.addNewRecordInstanceToExtension(associationManager)\n            ]);\n          }\n\n          initialize$\n            .pipe(\n              tap(() => {\n                this.isInitialized = true;\n              }),\n              switchMap(() => {\n                const recordInstance$ = associationManager.extensions$.pipe(\n                  map((arr) => arr[0]),\n                  tap((recordInstance) => this.updateSelectionFieldOptionNames(recordInstance)),\n                  shareReplay(1)\n                );\n\n                return recordInstance$.pipe(\n                  switchMap((inst) => inst.fieldValueChanged$),\n                  withLatestFrom(recordInstance$)\n                );\n              }),\n              takeUntil(this.destroyed$)\n            )\n            .subscribe(([change, recordInstance]) => {\n              this.updateSelectionFieldOptionNames(recordInstance);\n            });\n        }\n      });\n  }\n\n  addNewRecordInstanceToExtension(associationManager): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.getNew(associationManager.options.recordDefinitionName).pipe(\n      tap((recordInstance: any) => {\n        recordInstance.isNewInstance = true;\n\n        associationManager.addExtension(recordInstance);\n      })\n    );\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (get(recordInstance, 'recordDefinition.fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        recordInstance.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        const propName = this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(this.guid);\n\n        this.rxExtensionContainerComponent.notifyPropertyChanged(propName, newSelectionFieldOptionNames);\n      }\n    }\n  }\n}\n","<h5>{{ (config | async)?.label }}</h5>\n<rx-runtime-view-canvas-outlet *ngIf=\"isInitialized\"></rx-runtime-view-canvas-outlet>\n","import { RxViewComponentType } from '@helix/platform/view/api';\n\nexport const RX_EXTENSION_CONTAINER = {\n  type: RxViewComponentType.ExtensionContainer,\n  recordDefinitionsReferencingExpression: 'recordDefinitions',\n  extensionContainerSectionComponent: 'rx-extension-container-section'\n};\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport {\n  IDefinitionAdapter,\n  RxDefinitionNameService,\n  RxGlobalCacheService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxTreeService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType,\n  RxViewDefinitionDataPageService,\n  RxViewDefinitionLocalizationService,\n  RxViewDefinitionParserService,\n  ViewDefinitionType\n} from '@helix/platform/view/api';\nimport { RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { filter, forEach, isString, map as _map, reduce, values } from 'lodash';\nimport moment from 'moment-es6';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RX_EXTENSION_CONTAINER } from '../extension-container.constant';\nimport { RxExtensionContainerHelperService } from './extension-container-helper.service';\nimport { IRxViewDefinitionMap } from './extension-container.types';\n\n@Injectable()\nexport class RxExtensionContainerDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxViewDefinitionDataPageService: RxViewDefinitionDataPageService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxTreeService: RxTreeService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private rxNotificationService: RxNotificationService,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewDefinitionLocalizationService: RxViewDefinitionLocalizationService,\n    private translateService: TranslateService\n  ) {}\n\n  adaptDefinition(\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): Observable<any> {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition\n    );\n\n    extensionContainerComponentDefinition.propertiesByName.mode =\n      targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    return this.getExtensionViewDefinitions(extensionContainerComponentDefinition.guid).pipe(\n      map(this.getViewDefinitionMap.bind(this)),\n      map(this.filterDuplicatedRecordEditorComponentDefinitions.bind(this)),\n      map((viewDefinitionMaps: IRxViewDefinitionMap[]) =>\n        this.filterIncompatibleRecordEditorComponentDefinitions(\n          viewDefinitionMaps,\n          targetRecordEditorComponentDefinition\n        )\n      ),\n      switchMap(this.setRecordEditorLabels.bind(this)),\n      map(this.getExtensionRecordEditorComponentDefinitions.bind(this)),\n      switchMap((extensionRecordEditorComponentDefinitions: IContainerViewComponentDefinition[]) => {\n        const processAndAddChildrenToExtensionContainer = () => {\n          extensionContainerComponentDefinition.componentDefinitions = [];\n          (extensionContainerComponentDefinition.resourceType as any) =\n            RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n\n          forEach(extensionRecordEditorComponentDefinitions, (extensionRecordEditorComponentDefinition) => {\n            // re-assign expression for child Record editor component definitions\n            this.processRecordEditorComponentDefinition(\n              extensionRecordEditorComponentDefinition,\n              targetRecordEditorComponentDefinition,\n              extensionContainerComponentDefinition\n            );\n\n            extensionContainerComponentDefinition.componentDefinitions.push(\n              this.getExtensionContainerSectionViewComponentDefinition(\n                extensionRecordEditorComponentDefinition,\n                targetRecordEditorComponentDefinition\n              )\n            );\n          });\n\n          const children = extensionContainerComponentDefinition.componentDefinitions.map(\n            (component) => component.guid\n          );\n\n          extensionContainerComponentDefinition.layout = JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children\n                  }\n                ]\n              }\n            ]\n          });\n\n          return extensionRecordEditorComponentDefinitions;\n        };\n\n        // run adapters for all Record editors and it's children\n        const adapters$ = extensionRecordEditorComponentDefinitions.map(\n          (recordEditorComponent: IContainerViewComponentDefinition) => {\n            return combineLatest([\n              ...this.rxRuntimeViewUtilsService.runAdaptersForComponents(viewDefinition, recordEditorComponent)\n            ]);\n          }\n        );\n\n        return combineLatest(adapters$).pipe(\n          tap({\n            complete: () => processAndAddChildrenToExtensionContainer()\n          })\n        );\n      })\n    );\n  }\n\n  getExtensionViewDefinitions(extensionContainerGuid: string): Observable<IViewDefinition[]> {\n    return this.rxViewDefinitionDataPageService\n      .get({\n        params: {\n          propertySelection: [\n            'name',\n            'targetExtensionContainerGuid',\n            'targetViewDefinitionName',\n            'componentDefinitions',\n            'localizableStringsByComponentId',\n            'lastUpdateTime'\n          ],\n          viewType: ViewDefinitionType.Regular,\n          targetExtensionContainerGuid: extensionContainerGuid,\n          excludeExtensionViews: false\n        },\n        headers: {\n          'default-bundle-scope': ''\n        }\n      })\n      .pipe(\n        map((response) => {\n          const associationsInExtensionContainer = [];\n\n          forEach(response.data, (viewDefinition: IViewDefinition) => {\n            this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition);\n\n            const associationDefinitionName =\n              viewDefinition.componentDefinitions[0]?.propertiesByName.associationDefinitionName;\n\n            if (isString(associationDefinitionName)) {\n              if (associationsInExtensionContainer.includes(associationDefinitionName)) {\n                this.rxNotificationService.addWarningMessage(\n                  this.translateService.instant(\n                    'com.bmc.arsys.rx.client.view-components.record-editor.extension-container.duplicate-extensions.warning'\n                  )\n                );\n              } else {\n                associationsInExtensionContainer.push(associationDefinitionName);\n              }\n            }\n          });\n\n          return response.data as IViewDefinition[];\n        })\n      );\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n\n  getViewDefinitionMap(viewDefinitions: IViewDefinition[]): IRxViewDefinitionMap[] {\n    return reduce(\n      viewDefinitions,\n      (result, viewDefinition) => {\n        const recordEditorComponentDefinition = viewDefinition.componentDefinitions[0];\n\n        // View may not contain Record editor component definition because of permission restrictions\n        if (recordEditorComponentDefinition) {\n          result.push({\n            viewDefinition,\n            recordEditorComponentDefinition\n          });\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  filterDuplicatedRecordEditorComponentDefinitions(viewDefinitionMaps: IRxViewDefinitionMap[]): IRxViewDefinitionMap[] {\n    return values(\n      reduce(\n        viewDefinitionMaps,\n        (result, viewDefinitionMap) => {\n          // Allow multiple record editors to be displayed in the extension container if they are bound\n          // to the same parent record instance. In this case they have no associationDefinitionName.\n          if (!viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n            result[viewDefinitionMap.recordEditorComponentDefinition.guid] = viewDefinitionMap;\n\n            return result;\n          }\n\n          const key = [\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName\n          ].join('');\n\n          if (!result[key]) {\n            result[key] = viewDefinitionMap;\n          } else if (\n            moment(viewDefinitionMap.viewDefinition.lastUpdateTime) < moment(result[key].viewDefinition.lastUpdateTime)\n          ) {\n            result[key] = viewDefinitionMap;\n          }\n\n          return result;\n        },\n        {}\n      )\n    );\n  }\n\n  filterIncompatibleRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[],\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IRxViewDefinitionMap[] {\n    return filter(viewDefinitionMaps, (viewDefinitionMap) => {\n      const hasSameMode =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.mode ===\n        targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n      const hasSameRecordDefinitionName =\n        targetRecordEditorComponentDefinition.propertiesByName.recordDefinitionName ===\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName;\n\n      const hasAssociation =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName;\n\n      const validExtensionWithoutAssociation = hasSameRecordDefinitionName && !hasAssociation && hasSameMode;\n      const validExtensionWithAssociation = hasAssociation && hasSameMode;\n\n      return validExtensionWithoutAssociation || validExtensionWithAssociation;\n    });\n  }\n\n  setRecordEditorLabels(viewDefinitionMaps: IRxViewDefinitionMap[]): Observable<IRxViewDefinitionMap[]> {\n    return forkJoin<IRxViewDefinitionMap>([\n      ...viewDefinitionMaps.map((viewDefinitionMap) => {\n        let label$;\n\n        if (viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label) {\n          label$ = of(viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label);\n        } else {\n          label$ = this.rxGlobalCacheService.getBundleFriendlyName(\n            this.rxDefinitionNameService.getBundleId(viewDefinitionMap.viewDefinition.name)\n          );\n        }\n\n        return label$.pipe(\n          map((label) => {\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label = label;\n\n            return viewDefinitionMap;\n          })\n        );\n      })\n    ]);\n  }\n\n  getExtensionRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[]\n  ): IContainerViewComponentDefinition[] {\n    return _map(viewDefinitionMaps, 'recordEditorComponentDefinition');\n  }\n\n  processRecordEditorComponentDefinition(\n    extensionRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    this.rxTreeService\n      .flattenTree(extensionRecordEditorComponentDefinition, 'componentDefinitions')\n      .forEach((componentDefinition) => {\n        this.patchFieldComponentExpressions(\n          componentDefinition,\n          extensionRecordEditorComponentDefinition,\n          targetRecordEditorComponentDefinition,\n          extensionContainerComponentDefinition\n        );\n      });\n\n    return extensionRecordEditorComponentDefinition;\n  }\n\n  // re-assign all expressions from extension Record editor to target Record editor\n  // old path: ${view.components.<extension-record-editor-guid>.recordInstance}\n  // new path: ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n  patchFieldComponentExpressions(\n    componentDefinition,\n    extensionRecordEditorComponentDefinition,\n    targetRecordEditorComponentDefinition,\n    targetExtensionContainerComponentDefinition\n  ) {\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n    const recordInstanceReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetRecordEditorComponentDefinition.guid,\n          '.',\n          \"recordInstance.associationInstances['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          \"'].\",\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          '.extensions[0]'\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordInstance'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].recordDefinitionName}\n    const recordDefinitionNameReferencingExpression = [\n      recordInstanceReferencingExpression,\n      '.recordDefinitionName'\n    ].join('');\n\n    // ${view.components.<target-extension-container-guid>.recordDefinitions.<extension-record-definition-name>}\n    const recordDefinitionReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetExtensionContainerComponentDefinition.guid,\n          '.',\n          RX_EXTENSION_CONTAINER.recordDefinitionsReferencingExpression,\n          \"['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n          \"']\"\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordDefinition'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].id}\n    const recordInstanceIdReferencingExpression = [recordInstanceReferencingExpression, '.id'].join('');\n\n    let selectionFieldOptionNamesByIdReferencingExpression;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      // ${view.components.<target-extension-container-guid>.<extension-record-editor-guid>:selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = [\n        targetExtensionContainerComponentDefinition.guid,\n        '.',\n        this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(\n          extensionRecordEditorComponentDefinition.guid\n        )\n      ].join('');\n    } else {\n      // ${view.components.<targetRecordEditorComponentDefinition>.selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = `${targetRecordEditorComponentDefinition.guid}.selectionFieldOptionNamesById`;\n    }\n\n    /*\n     * {\n     *   regExp - determines the part of the old expression\n     *   expression - determines new value which should replace <regExp> match\n     * }\n     * */\n    const expressionMap = [\n      // patch record instance id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstanceId', 'g'),\n        expression: recordInstanceIdReferencingExpression\n      },\n      // patch record instance expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstance', 'g'),\n        expression: recordInstanceReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinitionName', 'g'),\n        expression: recordDefinitionNameReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinition', 'g'),\n        expression: recordDefinitionReferencingExpression\n      },\n      // patch selection field option names by id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.selectionFieldOptionNamesById', 'g'),\n        expression: selectionFieldOptionNamesByIdReferencingExpression\n      },\n      // patch record editor properties like 'canSave', 'inReadState', 'isValid', 'isDirty'\n      // ${view.components.<target-record-editor-guid>.canSave}\n      // ${view.components.<target-record-editor-guid>.inReadState} ...\n      {\n        regExp: new RegExp(`${extensionRecordEditorComponentDefinition.guid}\\\\.(\\\\w+)}`, 'g'),\n        expression: `${targetRecordEditorComponentDefinition.guid}.$1}`\n      }\n    ];\n\n    const propertiesToPatch = ['disabled', 'hidden', 'value', 'html'];\n\n    propertiesToPatch\n      .filter((propertyName) => isString(componentDefinition.propertiesByName[propertyName]))\n      .forEach((propertyName) => {\n        forEach(expressionMap, (expressionConfig) => {\n          componentDefinition.propertiesByName[propertyName] = componentDefinition.propertiesByName[\n            propertyName\n          ].replace(expressionConfig.regExp, expressionConfig.expression);\n        });\n      });\n\n    componentDefinition.propertiesByName.api = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`;\n    componentDefinition.propertiesByName.inReadState = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.inReadState}`;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      componentDefinition.propertiesByName.associatedRecordPath = [\n        extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n        'extensions',\n        0\n      ];\n    }\n\n    if (componentDefinition.propertiesByName.recordInstance) {\n      componentDefinition.propertiesByName.recordInstance = [\n        '${view.components.',\n        recordInstanceReferencingExpression,\n        '}'\n      ].join('');\n    }\n\n    if (componentDefinition.propertiesByName.recordDefinition) {\n      componentDefinition.propertiesByName.recordDefinition = [\n        '${view.components.',\n        recordDefinitionReferencingExpression,\n        '}'\n      ].join('');\n    }\n  }\n\n  getExtensionContainerSectionViewComponentDefinition(\n    recordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return {\n      guid: recordEditorComponentDefinition.guid,\n      type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,\n      layout: recordEditorComponentDefinition.layout,\n      resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n      componentDefinitions: recordEditorComponentDefinition.componentDefinitions,\n      propertiesByName: {\n        label: recordEditorComponentDefinition.propertiesByName.label,\n        styles: recordEditorComponentDefinition.propertiesByName.styles,\n        recordDefinitionName: recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n        associationDefinitionName: recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        [RX_AVAILABLE_ON_DEVICES_PROP_NAME]:\n          recordEditorComponentDefinition.propertiesByName[RX_AVAILABLE_ON_DEVICES_PROP_NAME],\n        api: `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`,\n        associatedRecordPath: [\n          recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          'extensions',\n          0\n        ]\n      }\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxExtensionContainerComponent } from './extension-container.component';\nimport { RX_EXTENSION_CONTAINER } from '../extension-container.constant';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RxExtensionContainerDefinitionAdapterService } from './extension-container-definition-adapter.service';\nimport { RxExtensionContainerHelperService } from './extension-container-helper.service';\nimport { ExtensionContainerSectionComponent } from './extension-container-section/extension-container-section.component';\n\n@NgModule({\n  providers: [RxExtensionContainerDefinitionAdapterService, RxExtensionContainerHelperService],\n  declarations: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],\n  exports: [RxExtensionContainerComponent],\n  entryComponents: [RxExtensionContainerComponent, ExtensionContainerSectionComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule]\n})\nexport class RxExtensionContainerModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxExtensionContainerDefinitionAdapterService: RxExtensionContainerDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_EXTENSION_CONTAINER.type,\n      this.rxExtensionContainerDefinitionAdapterService\n    );\n  }\n}\n","import {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { ITextFormControlOptions, TextFormControlComponent } from '@helix/platform/shared/components';\nimport { Injector } from '@angular/core';\nimport { first, map, take, takeUntil } from 'rxjs/operators';\nimport { IExtensionContainerProperties } from './extension-container-design.types';\nimport { combineLatest } from 'rxjs';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { compact, flatten, isEmpty } from 'lodash';\n\nexport class ExtensionContainerDesignModel extends ViewDesignerComponentModel {\n  componentProperties$ = this.sandbox.componentProperties$;\n  parentGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n  initialProperties: IExtensionContainerProperties = {\n    name: '',\n    recordDefinition: '',\n    recordInstance: '',\n    ...RX_STANDARD_PROPS_DEFAULT_VALUES\n  };\n\n  constructor(\n    protected injector: Injector,\n    protected sandbox: IViewComponentDesignSandbox<IExtensionContainerProperties>\n  ) {\n    super(injector, sandbox);\n\n    combineLatest([this.parentGuid$, this.componentProperties$])\n      .pipe(first())\n      .subscribe(([parentGuid, componentProperties]) => {\n        const properties = {\n          ...this.initialProperties,\n          ...componentProperties,\n          recordInstance: `\\${view.components.${parentGuid}.recordInstance}`,\n          recordDefinition: `\\${view.components.${parentGuid}.recordDefinition}`\n        };\n\n        this.sandbox.updateComponentProperties(properties);\n        this.sandbox.updateInspectorConfig(this.getInspectorConfig());\n      });\n\n    combineLatest([\n      this.sandbox.getComponentPropertyValue('name').pipe(\n        map((value) => {\n          if (isEmpty(value)) {\n            return this.sandbox.createError('Name cannot be blank.', 'name');\n          }\n        })\n      ),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues) => this.sandbox.setValidationIssues(validationIssues));\n  }\n\n  private getInspectorConfig(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                required: true,\n                tooltip: new Tooltip('Enter a name to uniquely identify the Extension container')\n              } as ITextFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ExtensionContainerDesignModel } from './extension-container-design.model';\n\n@Component({\n  selector: 'rx-extension-container-design',\n  templateUrl: './extension-container-design.component.html'\n})\nexport class ExtensionContainerDesignComponent {\n  @Input()\n  model: ExtensionContainerDesignModel;\n}\n","<adapt-empty-state type=\"objects\" label=\"Contains fields from extensions of the record definition.\"></adapt-empty-state>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExtensionContainerDesignComponent } from './extension-container-design.component';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [ExtensionContainerDesignComponent],\n  entryComponents: [ExtensionContainerDesignComponent]\n})\nexport class ExtensionContainerDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxExtensionContainerComponent } from './runtime/extension-container.component';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_EXTENSION_CONTAINER } from './extension-container.constant';\nimport { ExtensionContainerSectionComponent } from './runtime/extension-container-section/extension-container-section.component';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { ExtensionContainerDesignComponent } from './design';\nimport { ExtensionContainerDesignModel } from './design/extension-container-design.model';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxExtensionContainerModule } from './runtime/extension-container.module';\nimport { ExtensionContainerDesignModule } from './design/extension-container-design.module';\n\n@NgModule({\n  imports: [RxExtensionContainerModule, ExtensionContainerDesignModule]\n})\nexport class ExtensionContainerRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register(\n      {\n        type: RX_EXTENSION_CONTAINER.type,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxExtensionContainerComponent),\n        properties: RX_STANDARD_PROPS_DESC,\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Extension container',\n        group: RX_FIELD_COMPONENTS.stencilGroupName,\n        icon: 'widget',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n          ExtensionContainerDesignComponent\n        ),\n        designComponentModel: ExtensionContainerDesignModel,\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n        canBeInsertedInto(componentTypes: string[]): boolean {\n          return componentTypes.includes(RxViewComponentType.RecordEditor);\n        },\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(ExtensionContainerSectionComponent),\n        properties: [\n          {\n            name: 'api',\n            enableExpressionEvaluation: true\n          }\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ]\n      }\n    );\n  }\n}\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class RichTextareaFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super.getInspectorConfig().pipe(\n      withLatestFrom(this.availableFieldDefinitions$),\n      map(([inspectorConfig, recordFieldsSelectItems]) => {\n        const availableFields = recordFieldsSelectItems\n          .filter((field) => !field.maxLength)\n          .map((field) => ({\n            id: String(field.id),\n            name: field.name\n          }));\n\n        const newInspectorConfig: IViewDesignerInspectorConfig = cloneDeep(inspectorConfig);\n\n        newInspectorConfig.inspectorSectionConfigs[0].controls[0].options.options = [...availableFields];\n\n        return newInspectorConfig;\n      })\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { CKEditor4 } from 'ckeditor4-angular';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\nimport { RichTextareaFieldDesignModel } from './rich-textarea-field-design.model';\n\n@Component({\n  selector: 'rx-rich-textarea-field-design',\n  templateUrl: './rich-textarea-field-design.component.html',\n  styleUrls: ['./rich-textarea-field-design.component.scss']\n})\nexport class RichTextareaFieldDesignComponent {\n  @Input()\n  model: RichTextareaFieldDesignModel;\n\n  ckEditorType = CKEditor4.EditorType.DIVAREA;\n  ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();\n\n  constructor(private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {}\n}\n","<div>\n  <strong>\n    {{ model.label$ | async }}\n    <span *ngIf=\"model.isRequired$ | async\" class=\"form-control-required\">(required)</span>\n  </strong>\n</div>\n\n<div class=\"mt-1\">\n  <ckeditor [type]=\"ckEditorType\" [config]=\"ckEditorConfig\" [readOnly]=\"true\"></ckeditor>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RichTextareaFieldDesignComponent } from './rich-textarea-field-design.component';\n\n@NgModule({\n  imports: [CommonModule, CKEditorModule],\n  declarations: [RichTextareaFieldDesignComponent],\n  entryComponents: [RichTextareaFieldDesignComponent]\n})\nexport class RichTextareaFieldDesignModule {}\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { CKEditor4 } from 'ckeditor4-angular';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\n\n@Component({\n  selector: 'rx-rich-textarea-field',\n  templateUrl: './rich-textarea-field.component.html',\n  styleUrls: ['./rich-textarea-field.component.scss']\n})\nexport class RichTextareaFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  ckEditorType = CKEditor4.EditorType.DIVAREA;\n  ckEditorConfig = this.rxCkEditorConfiguratorService.getCKEditorConfig();\n\n  constructor(injector: Injector, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super(injector);\n  }\n\n  setFieldValue(value: any, options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}): void {\n    // When pressing a toolbar button, e.g. Bold, while the field is blank, ckeditor triggers\n    // a `dataChange` event with an empty string as data. If we allow this value to be set,\n    // it will be converted back to null and result in all toolbar buttons being reset,\n    // e.g. the Bold button will be unpressed.\n    // As a workaround, we do not accept empty string if the current field value is null.\n    if (!(this.formControl.value === null && value === '')) {\n      super.setFieldValue(value);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <div class=\"read-only-content-wrapper focusable\" *ngIf=\"inReadState; else editStateElementRef\" tabindex=\"0\">\n    <label>{{ label }}</label>\n\n    <ckeditor\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"true\"\n      [ngModel]=\"getDisplayValue()\"\n    ></ckeditor>\n  </div>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <div [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\">\n    <adapt-rx-control-label [label]=\"label\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <ckeditor\n      (dataChange)=\"setFieldValue($event)\"\n      [data]=\"formControl.value\"\n      [config]=\"ckEditorConfig\"\n      [type]=\"ckEditorType\"\n      [readOnly]=\"isDisabled\"\n      (blur)=\"onBlur()\"\n    ></ckeditor>\n\n    <adapt-rx-feedback\n      #adaptRxFeedbackRef\n      [errors]=\"formControl.errors\"\n      [controlTouched]=\"formControl.touched\"\n    ></adapt-rx-feedback>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdaptRxFormControlModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RichTextareaFieldComponent } from './rich-textarea-field.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AdaptRxFormControlModule, TranslateModule, ReactiveFormsModule, CKEditorModule],\n  declarations: [RichTextareaFieldComponent],\n  entryComponents: [RichTextareaFieldComponent]\n})\nexport class RichTextareaFieldModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime/base-record-editor-field-properties.constant';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { RichTextareaFieldDesignComponent } from './design/rich-textarea-field-design.component';\nimport { RichTextareaFieldDesignModule } from './design/rich-textarea-field-design.module';\nimport { RichTextareaFieldDesignModel } from './design/rich-textarea-field-design.model';\nimport { RichTextareaFieldComponent } from './runtime/rich-textarea-field.component';\nimport { RichTextareaFieldModule } from './runtime/rich-textarea-field.module';\n\n@NgModule({\n  imports: [RichTextareaFieldDesignModule, RichTextareaFieldModule]\n})\nexport class RichTextareaFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RichTextarea,\n      properties: RX_BASE_FIELD_PROPERTIES,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldComponent),\n\n      name: 'Rich text area',\n      icon: 'text_colorpicker_adapt',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextareaFieldDesignComponent),\n      designComponentModel: RichTextareaFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Component, Injector } from '@angular/core';\nimport { IPlainObject, RxLocalizationService } from '@helix/platform/shared/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { cloneDeep, isEqual, noop } from 'lodash';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { LocalizedCharacterFieldValueModalComponent } from '@helix/platform/shared/components';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-localized-character-field',\n  templateUrl: './localized-character-field.component.html',\n  styleUrls: ['./localized-character-field.component.scss']\n})\nexport class LocalizedCharacterFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  private hideCurrentLocale: boolean;\n\n  constructor(\n    injector: Injector,\n    private rxModalService: RxModalService,\n    private rxLocalizationService: RxLocalizationService\n  ) {\n    super(injector);\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigUpdated(config);\n\n    const fieldValue = this.getFieldValue();\n\n    this.hideCurrentLocale = this.getFieldInstanceProp('hideCurrentLocale');\n\n    if (config.value === fieldValue) {\n      const valueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n      valueByLocale[this.rxLocalizationService.currentLocale] = fieldValue;\n      this.setFieldInstanceProp('valueByLocale', valueByLocale);\n    }\n  }\n\n  shouldShowValidationError(): boolean {\n    return this.isRequired && !this.formControl.value && (this.formControl.touched || this.formControl.dirty);\n  }\n\n  selectLocalizedValue(): void {\n    const valueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n    this.rxModalService\n      .openModal({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.localized-character-field.dialog.title'\n        ),\n        data: {\n          fieldDefinition: this.fieldDefinition,\n          valueByLocale: cloneDeep(valueByLocale),\n          hideCurrentLocale: this.hideCurrentLocale\n        },\n        size: 'sm',\n        content: LocalizedCharacterFieldValueModalComponent\n      })\n      .then((data) => {\n        if (data) {\n          this.setLocalizedFieldValue(data.valueByLocale, data.currentLocaleValue);\n        }\n      })\n      .catch(noop);\n  }\n\n  private setLocalizedFieldValue(valueByLocale: IPlainObject, currentLocaleValue: string): void {\n    const currentLocaleCode = this.rxLocalizationService.currentLocale;\n    const defaultLocaleCode = 'en-US';\n    const fieldValue = currentLocaleValue || valueByLocale[currentLocaleCode] || valueByLocale[defaultLocaleCode];\n    const currentValueByLocale = this.getFieldInstanceProp('valueByLocale');\n\n    if (!isEqual(valueByLocale, currentValueByLocale)) {\n      this.setFieldInstanceProp('valueByLocale', valueByLocale);\n      this.formControl.markAsDirty();\n      this.recordEditorApi.markAsDirty();\n    }\n\n    this.setFieldValue(fieldValue);\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <span class=\"d-flex justify-content-between\" [class.has-danger]=\"formControl.errors && formControl.touched\">\n    <adapt-rx-control-label [label]=\"label\" [id]=\"guid\" [showRequiredLabel]=\"isRequired\"></adapt-rx-control-label>\n\n    <button\n      type=\"button\"\n      class=\"localize-button btn btn-link focusable d-icon-left-pencil p-0\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-describedby]=\"guid\"\n      (click)=\"selectLocalizedValue()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.view-components.localized-character-field.button.localize.label' | translate }}\n    </button>\n  </span>\n\n  <adapt-rx-textfield\n    class=\"mb-0\"\n    [readonly]=\"true\"\n    [formControl]=\"formControl\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [attr.aria-describedby]=\"guid\"\n  >\n  </adapt-rx-textfield>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AdaptBusyModule,\n  AdaptButtonModule,\n  AdaptRxFormControlModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule\n} from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ReadOnlyFieldModule, RxBusyIndicatorModule } from '@helix/platform/ui-kit';\nimport { LocalizedCharacterFieldComponent } from './localized-character-field.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptRxFormControlModule,\n    ReadOnlyFieldModule,\n    AdaptTooltipModule,\n    AdaptButtonModule,\n    TranslateModule,\n    AdaptBusyModule.forRoot(),\n    RxBusyIndicatorModule,\n    AdaptRxTextfieldModule,\n    ReactiveFormsModule\n  ],\n  declarations: [LocalizedCharacterFieldComponent],\n  entryComponents: [LocalizedCharacterFieldComponent]\n})\nexport class RxLocalizedCharacterFieldModule {}\n","import { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport class LocalizedCharacterFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter];\n}\n","import { Component, Input } from '@angular/core';\nimport { LocalizedCharacterFieldDesignModel } from './localized-character-field-design.model';\n\n@Component({\n  selector: 'rx-localized-character-field-design',\n  templateUrl: './localized-character-field-design.component.html'\n})\nexport class LocalizedCharacterFieldDesignComponent {\n  @Input()\n  model: LocalizedCharacterFieldDesignModel;\n}\n","<button type=\"button\" class=\"btn float-end p-0 btn-link d-icon-left-pencil\">Localize</button>\n\n<adapt-rx-textfield\n  class=\"rx-pointer-events-none\"\n  [label]=\"model.label$ | async\"\n  [required]=\"model.isRequired$ | async\"\n  [disabled]=\"true\"\n  ngModel\n>\n</adapt-rx-textfield>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { LocalizedCharacterFieldDesignComponent } from './localized-character-field-design.component';\nimport { AdaptRxTextfieldModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [LocalizedCharacterFieldDesignComponent],\n  entryComponents: [LocalizedCharacterFieldDesignComponent],\n  imports: [CommonModule, AdaptRxTextfieldModule, FormsModule]\n})\nexport class RxLocalizedCharacterFieldDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_BASE_FIELD_PROPERTIES } from '../base-record-editor-field/runtime';\nimport { LocalizedCharacterFieldComponent } from './runtime/localized-character-field.component';\nimport { RxLocalizedCharacterFieldModule } from './runtime/localized-character-field.module';\nimport { RxLocalizedCharacterFieldDesignModule } from './design/localized-character-field-design.module';\nimport { RX_FIELD_COMPONENTS } from '../field-components.constant';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { LocalizedCharacterFieldDesignComponent } from './design/localized-character-field-design.component';\nimport { LocalizedCharacterFieldDesignModel } from './design/localized-character-field-design.model';\n\n@NgModule({\n  imports: [RxLocalizedCharacterFieldModule, RxLocalizedCharacterFieldDesignModule]\n})\nexport class LocalizedCharacterFieldRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.LocalizedCharacter,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(LocalizedCharacterFieldComponent),\n      properties: RX_BASE_FIELD_PROPERTIES,\n\n      name: 'Localized text',\n      icon: 'field_text_mapmarker',\n      group: RX_FIELD_COMPONENTS.stencilGroupName,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n        LocalizedCharacterFieldDesignComponent\n      ),\n      designComponentModel: LocalizedCharacterFieldDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AssociationRegistrationModule } from './association/association-registration.module';\nimport { AttachmentFieldRegistrationModule } from './attachment-field/attachment-field-registration.module';\nimport { BooleanFieldRegistrationModule } from './boolean-field/boolean-field-registration.module';\nimport { DateFieldRegistrationModule } from './date-field/date-field-registration.module';\nimport { DateTimeFieldRegistrationModule } from './date-time-field/date-time-field-registration.module';\nimport { DecimalFieldRegistrationModule } from './decimal-field/decimal-field-registration.module';\nimport { ExtensionContainerRegistrationModule } from './extension-container/extension-container-registration.module';\nimport { IntegerFieldRegistrationModule } from './integer-field/integer-field-registration.module';\nimport { RichTextareaFieldRegistrationModule } from './rich-textarea-field/rich-textarea-field-registration.module';\nimport { SelectionFieldRegistrationModule } from './selection-field/selection-field-registration.module';\nimport { TextareaFieldRegistrationModule } from './textarea-field/textarea-field-registration.module';\nimport { SelectGroupRegistrationModule } from './select-group/select-group-registration.module';\nimport { TextFieldRegistrationModule } from './text-field/text-field-registration.module';\nimport { TimeFieldRegistrationModule } from './time-field/time-field-registration.module';\nimport { LocalizedCharacterFieldRegistrationModule } from './localized-character-field/localized-character-field-registration.module';\n\n@NgModule({\n  imports: [\n    AssociationRegistrationModule,\n    AttachmentFieldRegistrationModule,\n    BooleanFieldRegistrationModule,\n    DateFieldRegistrationModule,\n    DateTimeFieldRegistrationModule,\n    DecimalFieldRegistrationModule,\n    IntegerFieldRegistrationModule,\n    SelectionFieldRegistrationModule,\n    TextareaFieldRegistrationModule,\n    SelectGroupRegistrationModule,\n    TextFieldRegistrationModule,\n    TimeFieldRegistrationModule,\n    ExtensionContainerRegistrationModule,\n    LocalizedCharacterFieldRegistrationModule,\n    RichTextareaFieldRegistrationModule\n  ],\n  exports: [\n    AssociationRegistrationModule,\n    AttachmentFieldRegistrationModule,\n    BooleanFieldRegistrationModule,\n    DateFieldRegistrationModule,\n    DateTimeFieldRegistrationModule,\n    DecimalFieldRegistrationModule,\n    IntegerFieldRegistrationModule,\n    SelectionFieldRegistrationModule,\n    TextareaFieldRegistrationModule,\n    SelectGroupRegistrationModule,\n    TextFieldRegistrationModule,\n    TimeFieldRegistrationModule,\n    ExtensionContainerRegistrationModule,\n    LocalizedCharacterFieldRegistrationModule,\n    RichTextareaFieldRegistrationModule\n  ]\n})\nexport class FieldComponentsModule {}\n","export enum GridCardLayoutWidth {\n  Xsmall = '450',\n  Small = '650',\n  Medium = '800',\n  Large = '1024',\n  Xlarge = '1200',\n  Xxlarge = '1600'\n}\n","export enum RecordGridColumnAlignment {\n  Default = 'false',\n  Left = 'Left',\n  Right = 'Right',\n  Center = 'Center'\n}\n","import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { GridCardLayoutWidth } from './runtime/types/grid-card-layout-width.enum';\nimport { RecordGridColumnAlignment } from './common/types/record-grid-column-alignment.enum';\nimport { IColumnEditorProperty } from './design/editors/record-grid-column-editor-control/record-grid-column-editor-modal/types/column-editor-property.types';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { RX_EXPRESSION_EVALUATOR } from '@helix/platform/view/api';\n\nconst defaultTypeaheadKeystrokeCount = 1;\n\nconst columnProperties: IColumnEditorProperty[] = [\n  {\n    name: 'visible',\n    defaultValue: true,\n    label: 'Visible'\n  },\n  {\n    name: 'sortable',\n    defaultValue: true,\n    label: 'Sortable',\n    tooltip: new Tooltip('Sorting will be disabled for character fields longer than 4000 characters.')\n  },\n  {\n    name: 'filterable',\n    defaultValue: true,\n    label: 'Filterable'\n  },\n  {\n    name: 'searchable',\n    label: 'Searchable',\n    defaultValue: true\n  },\n  {\n    name: 'width',\n    label: '',\n    defaultValue: null,\n    options: {\n      label: 'Width',\n      defaultUnit: 'px',\n      units: [\n        {\n          name: 'pixels',\n          id: 'px'\n        },\n        {\n          name: 'percent',\n          id: '%'\n        }\n      ],\n      stepperOptionByUnits: {\n        px: {\n          minValue: 1\n        },\n        '%': {\n          minValue: 1,\n          maxValue: 100\n        }\n      }\n    }\n  },\n  {\n    name: 'wrapText',\n    defaultValue: false,\n    label: 'Wrap text'\n  },\n  {\n    name: 'alignment',\n    defaultValue: false,\n    label: 'Alignment',\n    selectionValues: [\n      {\n        name: 'Align left',\n        value: RecordGridColumnAlignment.Left,\n        icon: 'd-icon-align_left_adapt'\n      },\n      {\n        name: 'Center',\n        value: RecordGridColumnAlignment.Center,\n        icon: 'd-icon-align_center_adapt'\n      },\n      {\n        name: 'Align right',\n        value: RecordGridColumnAlignment.Right,\n        icon: 'd-icon-align_right_adapt'\n      }\n    ]\n  },\n  {\n    name: 'typeaheadKeystrokeCount',\n    label: '',\n    defaultValue: defaultTypeaheadKeystrokeCount,\n    options: {\n      label: 'Typeahead keystroke count',\n      options: [\n        {\n          id: 0,\n          name: '0'\n        },\n        {\n          id: 1,\n          name: '1'\n        },\n        {\n          id: 2,\n          name: '2'\n        },\n        {\n          id: 3,\n          name: '3'\n        },\n        {\n          id: 4,\n          name: '4'\n        },\n        {\n          id: 5,\n          name: '5'\n        }\n      ] as RxSelectOption[],\n      emptyOption: false\n    }\n  }\n];\n\nexport const RX_RECORD_GRID = {\n  type: 'rx-record-grid',\n  version: '1.0',\n  defaultColumnMinWidth: 45,\n  defaultRowHeight: 37,\n\n  components: {\n    filter: 'rx-record-grid-filter',\n    column: 'rx-record-grid-column',\n    filterPreset: 'rx-record-grid-filter-preset',\n    viewPreset: 'rx-record-grid-view-preset',\n    columnViewPreset: 'rx-record-grid-column-view-preset'\n  },\n\n  columnAlignment: {\n    left: 'Left',\n    right: 'Right',\n    center: 'Center'\n  },\n\n  selectionTypes: {\n    multiple: 'multiple',\n    single: 'single'\n  },\n\n  userPreferences: {\n    filters: 'filters',\n    columns: 'columns'\n  },\n\n  cardLayoutWidthOptions: [\n    {\n      id: GridCardLayoutWidth.Xsmall,\n      name: 'Extra Small (450px)'\n    },\n    {\n      id: GridCardLayoutWidth.Small,\n      name: 'Small (650px)'\n    },\n    {\n      id: GridCardLayoutWidth.Medium,\n      name: 'Medium (800px)'\n    },\n    {\n      id: GridCardLayoutWidth.Large,\n      name: 'Large (1024px)'\n    },\n    {\n      id: GridCardLayoutWidth.Xlarge,\n      name: 'Extra Large (1200px)'\n    },\n    {\n      id: GridCardLayoutWidth.Xxlarge,\n      name: 'Extra Extra Large (1600px)'\n    }\n  ] as RxSelectOption[],\n\n  actionsColumnProperties: [\n    {\n      name: 'visible',\n      defaultValue: true,\n      label: 'Visible'\n    }\n  ],\n\n  columnProperties,\n\n  sharedFilterPresets: {\n    recordDefinitionName: 'Record Grid Filter Presets',\n\n    fields: {\n      recordGridGuid: 300000001,\n      name: 300000002,\n      filterExpression: 300000003,\n      sortOrder: 300000004,\n      isDefault: 300000005\n    }\n  },\n\n  defaultFilter: '{}',\n  associatedFieldIdPrefixPattern: RX_EXPRESSION_EVALUATOR.associatedFieldIdPrefixPattern,\n\n  defaultPageSize: 50,\n\n  rowActionsOutletName: 'ROW_ACTIONS',\n\n  actionsColumnFieldDefinition: {\n    name: 'Actions',\n    id: '$ACTIONS$'\n  },\n\n  numberOfFiltersOptions: [\n    {\n      id: 0,\n      name: 'None'\n    },\n    {\n      id: 1,\n      name: '1'\n    },\n    {\n      id: 2,\n      name: '2'\n    },\n    {\n      id: 3,\n      name: '3'\n    },\n    {\n      id: 4,\n      name: '4'\n    },\n    {\n      id: 5,\n      name: '5'\n    }\n  ] as RxSelectOption[],\n\n  defaultTypeaheadKeystrokeCount,\n\n  externalPresetFilterOptionId: '$EXTERNAL_PRESET$'\n};\n","import { Injectable } from '@angular/core';\nimport { IRecordGridColumnPublicProperties, IRxRecordGridApi, RecordsSource } from '@helix/platform/view/api';\nimport { constant, forEach, find, get, includes, isFunction, isUndefined, some, sortBy } from 'lodash';\nimport { AsyncSubject, forkJoin, Observable, of } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport {\n  IAssociationDefinition,\n  IAssociationDescriptor,\n  IAssociationNode,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxDefinitionNameService, RxLogService } from '@helix/platform/shared/api';\nimport { RxStringService } from '@helix/platform/utils';\n\nimport { IColumnDescriptor } from '../types/column-descriptor.interface';\nimport { IFieldLocator } from '../types/field-locator.interface';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IRecordGridFilterTag, ISharedFilterPresetTagModel } from '../types/record-grid-filter.types';\nimport { TagModel } from '@bmc-ux/adapt-angular';\nimport { RxFieldDefinitionService } from '@helix/platform/record/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridUtilsService {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private stringService: RxStringService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFieldDefinitionService: RxFieldDefinitionService\n  ) {}\n\n  getColumnDescriptors(recordDefinitionName: string, source: RecordsSource): Promise<IColumnDescriptor[]> {\n    return this.rxRecordDefinitionCacheService\n      .getRecordDefinition(recordDefinitionName)\n      .toPromise()\n      .then((recordDefinition: IRecordDefinition) => {\n        if (isFunction((<IRxRecordGridApi>source).getColumns)) {\n          const columns: IColumnDescriptor[] = (<IRxRecordGridApi>source)\n            .getColumns()\n            .map((column: IRecordGridColumnPublicProperties, index) => ({\n              fieldId: column.field,\n              index,\n              title: column.header,\n              fieldDefinition: column.fieldDefinition\n            }));\n\n          return Promise.all(\n            columns\n              .filter((column) => this.isAssociatedRecordFieldId(column.fieldId))\n              .map((column) =>\n                this.getAssociationDescriptor(column.fieldId, recordDefinition)\n                  .toPromise()\n                  .then((associationDescriptor) => {\n                    column.associationDescriptor = associationDescriptor;\n                  })\n              )\n          ).then(constant(columns));\n        } else {\n          return recordDefinition.fieldDefinitions.map<IColumnDescriptor>(\n            (fieldDefinition: IFieldDefinition, index: number) => ({\n              fieldId: <string>fieldDefinition.id,\n              index,\n              title: fieldDefinition.name,\n              fieldDefinition: fieldDefinition\n            })\n          );\n        }\n      });\n  }\n\n  getAssociationDescriptors(recordDefinitionName: string): Observable<IAssociationDescriptor[]> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName),\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)\n    ]).pipe(\n      map(([associations, recordDefinition]) => {\n        const associationDescriptors = [];\n\n        forEach(associations[recordDefinitionName], (associationDefinition) => {\n          const isOneToMany =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value;\n\n          const isManyToManyAssociation =\n            associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n\n          if (!isManyToManyAssociation) {\n            if (this.isNeedSide(associationDefinition.nodeBId, recordDefinitionName, recordDefinition)) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeAId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA)\n              });\n            }\n\n            if (\n              this.isNeedSide(associationDefinition.nodeAId, recordDefinitionName, recordDefinition) &&\n              !isOneToMany\n            ) {\n              associationDescriptors.push({\n                associationDefinition: associationDefinition,\n                recordDefinitionName: associationDefinition.nodeBId,\n                nodeSide: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                label: this.getAssociationLabel(associationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB)\n              });\n            }\n          }\n        });\n\n        return sortBy(associationDescriptors, 'label');\n      })\n    );\n  }\n\n  getFieldDefinition(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IFieldDefinition> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    const fieldDefinition$ = new AsyncSubject<IFieldDefinition>();\n    let recordDefinitionPromise: Promise<IRecordDefinition>;\n\n    if (locator.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n      return of(RX_RECORD_GRID.actionsColumnFieldDefinition);\n    } else {\n      if (locator.associationGuid) {\n        recordDefinitionPromise = this.getAssociationDescriptors(primaryRecordDefinition.name)\n          .pipe(\n            map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator)),\n            filter((associationDescriptor) => Boolean(associationDescriptor)),\n            map(\n              (associationDescriptor) =>\n                associationDescriptor.associationDefinition[\n                  RX_ASSOCIATED_RECORD_NODE_SIDES[associationDescriptor.nodeSide].recordDefinitionNameKey\n                ]\n            ),\n            switchMap((recordDefinitionName) => {\n              return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName);\n            })\n          )\n          .toPromise();\n      } else {\n        recordDefinitionPromise = Promise.resolve(primaryRecordDefinition);\n      }\n\n      recordDefinitionPromise.then((recordDefinition) => {\n        let fieldDefinition: IFieldDefinition;\n\n        if (recordDefinition) {\n          fieldDefinition = find(recordDefinition.fieldDefinitions, {\n            id: Number(locator.fieldId) || locator.fieldId\n          });\n        }\n\n        fieldDefinition$.next(fieldDefinition);\n        fieldDefinition$.complete();\n      });\n\n      return fieldDefinition$;\n    }\n  }\n\n  isAssociatedRecordFieldId(fieldId: string): boolean {\n    return !some(this.getFieldLocator(fieldId), isUndefined);\n  }\n\n  getFieldIdForGridColumn(fieldId: string | number, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor\n      ? `recordContext._associations.${associationDescriptor.associationDefinition.guid}.${associationDescriptor.nodeSide}[0].${fieldId}`\n      : String(fieldId);\n  }\n\n  getAssociationDescriptor(\n    gridColumnFieldId: string,\n    primaryRecordDefinition: IRecordDefinition\n  ): Observable<IAssociationDescriptor> {\n    const locator = this.getFieldLocator(gridColumnFieldId);\n    let associationDescriptor = of(null);\n\n    if (locator.associationGuid) {\n      associationDescriptor = this.getAssociationDescriptors(primaryRecordDefinition.name).pipe(\n        map((associationDescriptors) => this.findAssociationDescriptor(associationDescriptors, locator))\n      );\n    }\n\n    return associationDescriptor;\n  }\n\n  getDisplayFieldDescriptor(\n    fieldId: string,\n    primaryRecordDefinition: IRecordDefinition,\n    associatedRecordDefinitionName: string\n  ): Observable<IFieldDefinition> {\n    const fieldLocator = this.getFieldLocator(fieldId);\n\n    const fieldDefinition$ = this.isAssociatedRecordFieldId(fieldId)\n      ? this.rxRecordDefinitionCacheService.getRecordDefinition(associatedRecordDefinitionName).pipe(\n          map((associatedRecordDefinition) => {\n            const isCoreIdField = fieldLocator.fieldId === String(RX_RECORD_DEFINITION.coreFieldIds.id);\n\n            const displayFieldId = String(\n              (isCoreIdField && associatedRecordDefinition.displayFieldIdInAssociation) || fieldLocator.fieldId\n            );\n\n            return find(\n              associatedRecordDefinition.fieldDefinitions,\n              (fieldDefinition) => String(fieldDefinition.id) === displayFieldId\n            );\n          })\n        )\n      : of(find(primaryRecordDefinition.fieldDefinitions, (fieldDefinition) => String(fieldDefinition.id) === fieldId));\n\n    return fieldDefinition$;\n  }\n\n  getColumnLabel(fieldDefinition: IFieldDefinition, associationDescriptor?: IAssociationDescriptor): string {\n    return associationDescriptor ? `${associationDescriptor.label} > ${fieldDefinition.name}` : fieldDefinition.name;\n  }\n\n  findAssociationDescriptor(\n    associationDescriptors: IAssociationDescriptor[],\n    locator: IFieldLocator\n  ): IAssociationDescriptor {\n    return find(associationDescriptors, (associationDescriptor: IAssociationDescriptor) => {\n      return (\n        associationDescriptor.associationDefinition.guid === locator.associationGuid &&\n        associationDescriptor.nodeSide === locator.associationNodeSide\n      );\n    });\n  }\n\n  getFieldLocator(gridColumnFieldId: string): IFieldLocator {\n    const match = new RegExp('(?:' + RX_RECORD_GRID.associatedFieldIdPrefixPattern + ')?(.+)').exec(gridColumnFieldId);\n\n    return {\n      associationGuid: match[1],\n      associationNodeSide: match[2],\n      fieldId: match[3]\n    };\n  }\n\n  private isNeedSide(sideName: string, recordDefinitionName: string, recordDefinition: IRecordDefinition): boolean {\n    return includes([recordDefinitionName, get(recordDefinition, 'inheritanceDescriptor.inheritingFrom')], sideName);\n  }\n\n  private getAssociationLabel(associationDefinition: IAssociationDefinition, nodeSide: IAssociationNode): string {\n    let nodeSideName: string;\n    let label = this.rxDefinitionNameService.getDisplayName(associationDefinition.name);\n\n    if (associationDefinition.nodeAId === associationDefinition.nodeBId) {\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA) {\n        nodeSideName = associationDefinition.nodeAName;\n      }\n\n      if (nodeSide === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB) {\n        nodeSideName = associationDefinition.nodeBName;\n      }\n\n      nodeSideName = nodeSideName || nodeSide.defaultName;\n\n      label += ' (' + nodeSideName + ')';\n    }\n\n    return label;\n  }\n\n  isSharedFilterPresetTag(tag: IRecordGridFilterTag): tag is TagModel<ISharedFilterPresetTagModel> {\n    return (tag.data as ISharedFilterPresetTagModel).isSharedFilterPreset;\n  }\n\n  getTestIdForGridColumn(fieldId: string): string {\n    if (this.isAssociatedRecordFieldId(fieldId)) {\n      const fieldLocator = this.getFieldLocator(fieldId);\n      return `field-id-${fieldLocator.associationGuid}-${fieldLocator.fieldId}`;\n    } else {\n      return `field-id-${fieldId}`;\n    }\n  }\n\n  isSearchable(fieldDefinition: IFieldDefinition, recordDefinition?: IRecordDefinition): boolean {\n    return (\n      includes(\n        [\n          RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ],\n        fieldDefinition.resourceType\n      ) &&\n      !this.rxFieldDefinitionService.isPassword(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isSecured(fieldDefinition) &&\n      !this.rxFieldDefinitionService.isDataProviderIdField(fieldDefinition, recordDefinition)\n    );\n  }\n}\n","export interface IRecordGridColumnNamedFilterOptionDesign {\n  filterExpression: string;\n  index: number;\n  title: string;\n}\n\nexport interface IRecordGridColumnNamedFilterOption extends IRecordGridColumnNamedFilterOptionDesign {\n  guid: string;\n}\n\nexport interface IRecordGridNamedFilterOptionsMap {\n  [fieldId: string]: IRecordGridColumnNamedFilterOption[];\n}\n\n// Adapt dropped moment and changed the signature of AdvancedFilterTimeDataType from [moment.Moment, moment.Moment] to [RxDatetimeStruct, RxDatetimeStruct].\n// We need to reinstate the [moment.Moment, moment.Moment] signature since we rely on many moment methods in our code.\nexport type RxAdvancedFilterDateDataType = [moment.Moment, moment.Moment];\n\nexport interface IGridViewPresetProperties {\n  viewPresetGuid: string;\n  filters: string;\n}\n\nexport interface IGridViewColumnProperties {\n  fieldId: string;\n  index: number;\n  visible: boolean;\n  sortable: IRecordGridSortableObject | null;\n  width?: string;\n}\n\nexport interface IRecordGridSortableObject {\n  direction: ColumnSortDirection;\n}\n\nexport enum ColumnSortDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n","import { Injectable } from '@angular/core';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { SortOrder } from '@bmc-ux/adapt-table';\n\nimport { BooleanLike } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { assign, cloneDeep, includes, isBoolean, isObject, isString, map, omit } from 'lodash';\nimport { IRecordGridColumn } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { ColumnSortDirection } from '../../common/types/record-grid.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfigUtilsService {\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  parseConfigString(str: BooleanLike | KeyValueObject | string): boolean | KeyValueObject {\n    if (!str) {\n      return false;\n    }\n\n    if (includes(['1', 'true'], str)) {\n      return true;\n    }\n\n    if (includes(['0', 'false'], str)) {\n      return false;\n    }\n\n    if (isString(str)) {\n      return this.rxJsonParserService.tryParseJson(str, false);\n    }\n\n    if (isObject(str)) {\n      return str;\n    }\n\n    return isBoolean(str) ? str : false;\n  }\n\n  getBooleanValue(str: BooleanLike): boolean {\n    return this.parseConfigString(str) as boolean;\n  }\n\n  getColumnSortOrder(direction: ColumnSortDirection): SortOrder {\n    return direction === ColumnSortDirection.Asc ? SortOrder.Asc : SortOrder.Desc;\n  }\n\n  getColumnSortDirection(sortOrder: SortOrder): ColumnSortDirection {\n    return sortOrder === SortOrder.Asc ? ColumnSortDirection.Asc : ColumnSortDirection.Desc;\n  }\n\n  configDeepClone(configuration: IRecordGridConfig): IRecordGridConfig {\n    const configClone = cloneDeep(omit(configuration, ['columns']));\n    const columns = this.columnsDeepClone(configuration.columns);\n\n    return assign(configClone, { columns });\n  }\n\n  columnsDeepClone(columns: IRecordGridColumn[]): IRecordGridColumn[] {\n    return map(columns, this.columnDeepClone);\n  }\n\n  private columnDeepClone(column: IRecordGridColumn): IRecordGridColumn {\n    const columnClone = cloneDeep(omit(column, ['cellTemplate']));\n\n    return assign(columnClone, { cellTemplate: column.cellTemplate });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { IRecordGridDesignColumnData } from '../../record-grid-column-editor.types';\nimport { RecordGridColumnAlignment } from '../../../../../common/types/record-grid-column-alignment.enum';\nimport { IColumnEditorProperty } from '../types/column-editor-property.types';\n\n@Component({\n  selector: 'rx-column-editor-alignment',\n  templateUrl: './column-editor-alignment.component.html',\n  styleUrls: ['./column-editor-alignment.component.scss']\n})\nexport class ColumnEditorAlignmentComponent {\n  @Input()\n  column: IRecordGridDesignColumnData;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @Input()\n  columnProperty: IColumnEditorProperty;\n\n  trackByForAlignmentOptions(index: number, alignment: RecordGridColumnAlignment): string | number {\n    return alignment || index;\n  }\n}\n","<div class=\"btn-group py-2 btn-group-toggle\" data-toggle=\"buttons\">\n  <label\n    class=\"btn btn-sm rounded btn-secondary {{ selectionValue.icon }}\"\n    *ngFor=\"let selectionValue of columnProperty.selectionValues; trackBy: trackByForAlignmentOptions\"\n    [class.active]=\"column.alignment === selectionValue.value\"\n    [class.disabled]=\"isReadOnly\"\n    [adaptTooltip]=\"selectionValue.name\"\n    [attr.rx-id]=\"selectionValue.name\"\n  >\n    <input\n      size=\"small\"\n      type=\"radio\"\n      name=\"selectionValue.name\"\n      [attr.rx-id]=\"selectionValue.value\"\n      [value]=\"selectionValue.value\"\n      [(ngModel)]=\"column.alignment\"\n      [disabled]=\"isReadOnly\"\n    />\n  </label>\n</div>\n","import { IColumnEditorColumnData } from '../../design/editors/record-grid-column-editor-control/record-grid-column-editor.types';\n\nexport interface ICellDisplayPropertiesEditorConfig {\n  cellDisplayProperties: ICellDisplayProperties[];\n  isReadOnly: boolean;\n  columns: IColumnEditorColumnData[];\n}\n\nexport interface ICellDisplayProperties {\n  fieldValueCondition: string;\n  displayAsBadge: boolean;\n  badgeColor: string;\n  icon: string;\n  iconPosition: RxGridCellIconPosition;\n  textColor: RxGridCellColor;\n  backgroundColor: RxGridCellColor;\n  fontSize: RxGridCellFontSize;\n  bold: boolean;\n  italic: boolean;\n  isOpen?: boolean;\n}\n\nexport enum RxGridCellFontSize {\n  Small = 'small',\n  Large = 'large'\n}\n\nexport enum RxGridCellColor {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Light = 'light',\n  Active = 'active',\n  Info = 'info',\n  Success = 'success',\n  Warning = 'warning',\n  Danger = 'danger'\n}\n\nexport enum RxGridCellIconPosition {\n  Left = 'left',\n  Right = 'right',\n  ReplaceText = 'replaceText'\n}\n\nexport const RxGridCellFontColorCssMap = {\n  [RxGridCellColor.Primary]: 'text-primary',\n  [RxGridCellColor.Secondary]: 'text-secondary',\n  [RxGridCellColor.Light]: 'text-white',\n  [RxGridCellColor.Active]: 'text-active',\n  [RxGridCellColor.Info]: 'text-info',\n  [RxGridCellColor.Success]: 'text-success',\n  [RxGridCellColor.Warning]: 'text-warning',\n  [RxGridCellColor.Danger]: 'text-danger'\n};\n\nexport const RxGridCellBgColorCssMap = {\n  [RxGridCellColor.Primary]: 'bg-primary',\n  [RxGridCellColor.Secondary]: 'bg-secondary',\n  [RxGridCellColor.Active]: 'bg-active',\n  [RxGridCellColor.Info]: 'bg-info',\n  [RxGridCellColor.Success]: 'bg-success',\n  [RxGridCellColor.Warning]: 'bg-warning',\n  [RxGridCellColor.Danger]: 'bg-danger'\n};\n\nexport const RX_CELL_PROPERTIES = {\n  colorsList: [\n    {\n      label: 'Default',\n      value: null\n    },\n    {\n      label: 'Primary',\n      value: RxGridCellColor.Primary\n    },\n    {\n      label: 'Secondary',\n      value: RxGridCellColor.Secondary\n    },\n    {\n      label: 'Light',\n      value: RxGridCellColor.Light\n    },\n    {\n      label: 'Active',\n      value: RxGridCellColor.Active\n    },\n    {\n      label: 'Information',\n      value: RxGridCellColor.Info\n    },\n    {\n      label: 'Success',\n      value: RxGridCellColor.Success\n    },\n    {\n      label: 'Warning',\n      value: RxGridCellColor.Warning\n    },\n    {\n      label: 'Danger',\n      value: RxGridCellColor.Danger\n    }\n  ],\n\n  iconPositions: [\n    {\n      label: 'Left',\n      value: RxGridCellIconPosition.Left\n    },\n    {\n      label: 'Right',\n      value: RxGridCellIconPosition.Right\n    },\n    {\n      label: 'Replace text',\n      value: RxGridCellIconPosition.ReplaceText\n    }\n  ],\n\n  fontSizes: [\n    {\n      label: 'Default',\n      value: null\n    },\n    {\n      label: 'Small',\n      value: RxGridCellFontSize.Small\n    },\n    {\n      label: 'Large',\n      value: RxGridCellFontSize.Large\n    }\n  ]\n};\n","import { IDataDictionary, IExpressionConfigurator, RxExpressionConfigurator } from '@helix/platform/shared/api';\nimport { Observable, of } from 'rxjs';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\n\nexport class RecordGridCellDisplayPropertiesExpressionConfigurator\n  extends RxExpressionConfigurator\n  implements IExpressionConfigurator {\n  commonDataDictionary$: Observable<IDataDictionary>;\n\n  cellDisplayExpressionDataDictionary(columns: IColumnEditorColumnData[]): Observable<IDataDictionary> {\n    if (columns.length) {\n      return of(\n        columns.map((column: IColumnEditorColumnData) => ({\n          label: column.label,\n          icon: 'd-icon-field_text',\n          expression: `\\${view.components.grid.clickableRow.${column.fieldId}}`,\n          resourceType: column.fieldDefinition.resourceType\n        }))\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Component, ElementRef, Injector, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ICellDisplayProperties,\n  ICellDisplayPropertiesEditorConfig,\n  RX_CELL_PROPERTIES,\n  RxGridCellBgColorCssMap,\n  RxGridCellColor,\n  RxGridCellIconPosition\n} from '../../../../../common/types/cell-display-properties.types';\nimport {\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  IIconPickerFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ExpressionOperatorGroup, IPlainObject } from '@helix/platform/shared/api';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { forEach, get, omit } from 'lodash';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RecordGridCellDisplayPropertiesExpressionConfigurator } from './cell-display-properties-expression-configurator.class';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cell-display-properties-editor',\n  templateUrl: './cell-display-properties-editor.component.html',\n  styleUrls: ['./cell-display-properties-editor.component.scss']\n})\nexport class RecordGridCellDisplayPropertiesEditorComponent extends RxModalClass implements OnInit, OnDestroy {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  private expressionConfigurator: RecordGridCellDisplayPropertiesExpressionConfigurator;\n\n  config: ICellDisplayPropertiesEditorConfig = this.activeModalRef.getData();\n  queryExpressionOptions: IExpressionFormControlOptions;\n  propsFormArray: FormArray = this.formBuilder.array([]);\n  iconPositions: RxSelectOption[] = RX_CELL_PROPERTIES.iconPositions;\n  textColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList;\n  fontSizes: RxSelectOption[] = RX_CELL_PROPERTIES.fontSizes;\n  colorsList: IPlainObject = RxGridCellBgColorCssMap;\n\n  backgroundColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => color.value !== RxGridCellColor.Light\n  );\n\n  badgeColors: RxSelectOption[] = RX_CELL_PROPERTIES.colorsList.filter(\n    (color) => ![RxGridCellColor.Light, RxGridCellColor.Active, null].includes(color.value)\n  );\n\n  iconPickerOptions: IIconPickerFormControlOptions = {\n    label: 'Icon',\n    appendToBody: true,\n    required: false\n  };\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.expressionConfigurator = new RecordGridCellDisplayPropertiesExpressionConfigurator();\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'cellDisplayProperties',\n      dataDictionary$: this.expressionConfigurator.cellDisplayExpressionDataDictionary(this.config.columns),\n      operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.AllClient)\n    });\n\n    this.queryExpressionOptions = {\n      label: 'Field value condition',\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('cellDisplayProperties'),\n      operators: this.expressionConfigurator.getOperators('cellDisplayProperties'),\n      isRequired: true\n    };\n\n    forEach(this.config.cellDisplayProperties, (props) => this.propsFormArray.push(this.getFormGroup(props)));\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  addCellProperties(): void {\n    this.markAsDirty();\n\n    this.propsFormArray.push(\n      this.getFormGroup({\n        fieldValueCondition: '',\n        displayAsBadge: false,\n        badgeColor: null,\n        icon: null,\n        iconPosition: null,\n        textColor: null,\n        backgroundColor: null,\n        fontSize: null,\n        bold: false,\n        italic: false,\n        isOpen: true\n      })\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeCellProperties(index: number): void {\n    this.propsFormArray.removeAt(index);\n    this.markAsDirty();\n  }\n\n  optionFormatter(selectOption: RxSelectOption): string {\n    return selectOption.label;\n  }\n\n  private getFormGroup(properties: ICellDisplayProperties): FormGroup {\n    const formGroup = this.formBuilder.group({\n      fieldValueCondition: [properties.fieldValueCondition, Validators.required],\n      displayAsBadge: [properties.displayAsBadge],\n      badgeColor: {\n        value: this.getSelectValue(this.badgeColors, 'value', properties.badgeColor),\n        disabled: !properties.displayAsBadge\n      },\n      icon: {\n        value: properties.icon,\n        disabled: properties.displayAsBadge\n      },\n      iconPosition: {\n        value: this.getSelectValue(this.iconPositions, 'value', properties.iconPosition),\n        disabled: !properties.icon\n      },\n      textColor: {\n        value: this.getSelectValue(this.textColors, 'value', properties.textColor),\n        disabled: properties.displayAsBadge\n      },\n      backgroundColor: {\n        value: this.getSelectValue(this.backgroundColors, 'value', properties.backgroundColor),\n        disabled: properties.displayAsBadge\n      },\n      fontSize: {\n        value: this.getSelectValue(this.fontSizes, 'value', properties.fontSize),\n        disabled: properties.displayAsBadge\n      },\n      bold: [properties.bold],\n      italic: [properties.italic],\n      isOpen: [properties.isOpen ?? false]\n    });\n\n    formGroup.controls.displayAsBadge.valueChanges\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((displayAsBadge: boolean) => {\n        if (displayAsBadge && formGroup.controls.badgeColor.disabled) {\n          formGroup.controls.badgeColor.reset({ value: [this.badgeColors[0]], disabled: false });\n        }\n\n        if (!displayAsBadge && formGroup.controls.badgeColor.enabled) {\n          formGroup.controls.badgeColor.reset({ value: [], disabled: true });\n        }\n      });\n\n    formGroup.controls.icon.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((iconName: string) => {\n      if (iconName && formGroup.controls.iconPosition.disabled) {\n        formGroup.controls.iconPosition.reset({ value: [this.iconPositions[0]], disabled: false });\n      }\n\n      if (!iconName && formGroup.controls.iconPosition.enabled) {\n        formGroup.controls.iconPosition.reset({ value: [], disabled: true });\n      }\n    });\n\n    return formGroup;\n  }\n\n  private getSelectValue(optionsList: RxSelectOption[], key: string, value: string): RxSelectOption[] {\n    const item = optionsList.find((option) => option[key] === value);\n\n    return item ? [item] : [];\n  }\n\n  openExpressionEditor(control: AbstractControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'cellDisplayProperties',\n          value: control.value,\n          label: 'Cell display properties'\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.column.label'),\n            icon: 'd-icon-field_text'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        control.setValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  moveCellProperties(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.propsFormArray.controls, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onSelectedCellPropertyDrop(event: CdkDragDrop<any[], any>): void {\n    moveItemInArray(this.propsFormArray.controls, event.previousIndex, event.currentIndex);\n\n    this.markAsDirty();\n  }\n\n  toggleProp(control: AbstractControl): void {\n    control.setValue(!control.value);\n    this.markAsDirty();\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.propsFormArray.controls.forEach((control) => {\n      control.get('isOpen').setValue(expandAll);\n    });\n  }\n\n  resetIconAndTextProps(props: AbstractControl): void {\n    const isDisplayAsBadge: boolean = props.get('displayAsBadge').value;\n\n    props.get('icon').reset({ value: null, disabled: isDisplayAsBadge });\n    props.get('textColor').reset({ value: [this.textColors[0]], disabled: isDisplayAsBadge });\n    props.get('backgroundColor').reset({ value: [this.backgroundColors[0]], disabled: isDisplayAsBadge });\n    props.get('fontSize').reset({ value: [this.fontSizes[0]], disabled: isDisplayAsBadge });\n    props.get('bold').reset({ value: false, disabled: isDisplayAsBadge });\n    props.get('italic').reset({ value: false, disabled: isDisplayAsBadge });\n  }\n\n  onSave(): void {\n    const formValues: ICellDisplayProperties[] = this.propsFormArray.getRawValue().map((value) => ({\n      ...value,\n      icon: get(value, 'icon', null),\n      badgeColor: get(value, 'badgeColor[0].value', null),\n      iconPosition: get(value, 'iconPosition[0].value', null),\n      textColor: get(value, 'textColor[0].value', null),\n      backgroundColor: get(value, 'backgroundColor[0].value', null),\n      fontSize: get(value, 'fontSize[0].value', null)\n    }));\n\n    const cellProps: ICellDisplayProperties[] = formValues.map((value) => ({\n      ...omit(value, 'isOpen')\n    }));\n\n    this.activeModalRef.close(cellProps);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <div>\n          <button\n            *ngIf=\"!config.isReadOnly\"\n            class=\"pl-0 pr-0\"\n            rx-id=\"add-button\"\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            (click)=\"addCellProperties()\"\n          >\n            <span class=\"d-icon-left-plus_circle\"></span>\n\n            {{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.add-cell-display-property.button.label' | translate }}\n          </button>\n\n          <span\n            class=\"d-icon-right-question_circle_o ml-1 mt-1\"\n            adaptPopover=\"Cell display properties will be applied based on the first field value condition evaluating to true.\"\n            placement=\"bottom\"\n            appendToBody=\"true\"\n          ></span>\n        </div>\n\n        <div *ngIf=\"propsFormArray.controls.length\" class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"toggleOpen(true)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"propsFormArray.controls.length\"\n        id=\"selected-cell-property\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedCellPropertyDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let props of propsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last;\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"props\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"props\"\n              [isOpen]=\"props.get('isOpen').value\"\n              (open)=\"props.get('isOpen').setValue(true)\"\n              (close)=\"props.get('isOpen').setValue(false)\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"'Cell display properties ' + (index + 1)\" rx-id=\"card-title\">\n                      Cell display properties {{ index + 1 }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveCellProperties(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeCellProperties(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <rx-expression-form-control\n                  formControlName=\"fieldValueCondition\"\n                  class=\"form-group d-block col-12\"\n                  rx-id=\"query-expression-field\"\n                  [options]=\"queryExpressionOptions\"\n                  (events)=\"openExpressionEditor(props.get('fieldValueCondition'))\"\n                ></rx-expression-form-control>\n              </div>\n\n              <div class=\"row form-group\">\n                <div class=\"col-3\">\n                  <adapt-rx-control-label\n                    label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.display-as-badge-field.label' | translate }}\"\n                  ></adapt-rx-control-label>\n\n                  <adapt-rx-switch\n                    [disabled]=\"config.isReadOnly\"\n                    formControlName=\"displayAsBadge\"\n                    (ngModelChange)=\"markAsDirty(); resetIconAndTextProps(props)\"\n                  ></adapt-rx-switch>\n                </div>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.badge-color-field.label' | translate }}\"\n                  formControlName=\"badgeColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"badgeColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <rx-icon-picker-form-control\n                  class=\"d-block col-3\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPickerOptions\"\n                  formControlName=\"icon\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-icon-picker-form-control>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.icon-position-field.label' | translate }}\"\n                  formControlName=\"iconPosition\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"iconPositions\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n              </div>\n\n              <div class=\"row\">\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.text-color-field.label' | translate }}\"\n                  formControlName=\"textColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"textColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.background-color-field.label' | translate }}\"\n                  formControlName=\"backgroundColor\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"backgroundColors\"\n                  [optionFormatter]=\"optionFormatter\"\n                  [optionContentTemplate]=\"optionTemplate\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <adapt-rx-select\n                  class=\"d-block col-3\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.font-size-field.label' | translate }}\"\n                  formControlName=\"fontSize\"\n                  [disabled]=\"config.isReadOnly\"\n                  [options]=\"fontSizes\"\n                  [optionFormatter]=\"optionFormatter\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-select>\n\n                <div class=\"col-3 pt-4 d-flex align-item-center\">\n                  <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label\n                      class=\"btn btn-secondary d-icon-bold_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('bold').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('bold'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n\n                    <label\n                      class=\"btn btn-secondary ml-2 d-icon-italic_adapt\"\n                      [ngClass]=\"{\n                        active: props.get('italic').value,\n                        'disabled not-allowed': (props.get('displayAsBadge').value || config.isReadOnly)\n                      }\"\n                    >\n                      <input\n                        (click)=\"toggleProp(props.get('italic'))\"\n                        type=\"checkbox\"\n                        name=\"fontStyle\"\n                        [disabled]=\"props.get('displayAsBadge').value || config.isReadOnly\"\n                      />\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!propsFormArray.controls.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.cell-display-properties.empty-state.message' | translate }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"propsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ config.isReadOnly ? ('com.bmc.arsys.rx.client.common.close.label' | translate) : ('com.bmc.arsys.rx.client.common.cancel.label' | translate) }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <div class=\"d-flex align-items-center\">\n    <div [ngClass]=\"option.value ? 'color-option-box rounded mr-2 ' + colorsList[option.value] : ''\"></div>\n    {{ option.label }}\n  </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { cloneDeep, noop } from 'lodash';\nimport { RecordGridCellDisplayPropertiesEditorComponent } from './cell-display-properties-editor.component';\nimport {\n  ICellDisplayProperties,\n  ICellDisplayPropertiesEditorConfig\n} from '../../../../../common/types/cell-display-properties.types';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-cell-display-properties',\n  templateUrl: './cell-display-properties.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridCellDisplayPropertiesComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridCellDisplayPropertiesComponent extends ValueAccessor<ICellDisplayProperties[]> {\n  @Input()\n  columnName: string;\n\n  @Input()\n  columns: IColumnEditorColumnData[];\n\n  constructor(private rxModalService: RxModalService) {\n    super();\n  }\n\n  openPropertiesEditor(): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit cell display properties for ${this.columnName}`,\n        data: {\n          cellDisplayProperties: this.value ? cloneDeep(this.value) : [],\n          isReadOnly: this.isDisabled,\n          columns: this.columns\n        } as ICellDisplayPropertiesEditorConfig,\n        content: RecordGridCellDisplayPropertiesEditorComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-cell-display-properties'\n      })\n      .then((properties: ICellDisplayProperties[]) => {\n        this.value = properties;\n      })\n      .catch(noop);\n  }\n}\n","<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0\" (click)=\"openPropertiesEditor()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit cell display properties\n</adapt-button>\n\n<div rx-id=\"columns\">\n  <span *ngIf=\"!value?.length\" class=\"text-tertiary\">No cell display properties added.</span>\n  <span *ngIf=\"value?.length > 0\" class=\"text-tertiary\">Cell display properties added.</span>\n</div>\n","export const RX_RECORD_GRID_DESIGN = {\n  keywords: {\n    label: 'Keywords',\n    children: [\n      {\n        label: 'Current user',\n        icon: 'd-icon-dollar',\n        expression: '$USER$'\n      },\n      {\n        label: 'Current date',\n        icon: 'd-icon-dollar',\n        expression: '$DATE$'\n      },\n      {\n        label: 'Current time',\n        icon: 'd-icon-dollar',\n        expression: '$TIME$'\n      },\n      {\n        label: 'Current date and time',\n        icon: 'd-icon-dollar',\n        expression: '$TIMESTAMP$'\n      },\n      {\n        label: 'Current week day',\n        icon: 'd-icon-dollar',\n        expression: '$WEEKDAY$'\n      },\n      {\n        label: 'Current groups',\n        icon: 'd-icon-dollar',\n        expression: '$GROUPS$'\n      },\n      {\n        label: 'Current group IDs',\n        icon: 'd-icon-dollar',\n        expression: '$GROUPIDS$'\n      },\n      {\n        label: 'Current roles',\n        icon: 'd-icon-dollar',\n        expression: '$ROLES$'\n      },\n      {\n        label: 'Current user locale',\n        icon: 'd-icon-dollar',\n        expression: '$LOCALE$'\n      },\n      {\n        label: 'Current server URL',\n        icon: 'd-icon-dollar',\n        expression: '$SERVERURL$'\n      },\n      {\n        label: 'NULL',\n        icon: 'd-icon-dollar',\n        expression: '$NULL$',\n        hidden: true\n      }]\n  }\n};\n","import { Injectable, Injector } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { RxViewDataDictionaryService, RxViewExpressionConfigurator } from '@helix/platform/view/designer';\nimport { map } from 'rxjs/operators';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { RX_RECORD_GRID_DESIGN } from '../../../../../record-grid-design.constant';\n\n@Injectable()\nexport class NamedFilterOptionExpressionConfigurator extends RxViewExpressionConfigurator {\n  readonly commonDataDictionary$ = this.rxViewDataDictionaryService.commonDataDictionary$.pipe(\n    map((dataDictionary) => [\n      {\n        expression: `'${this.activeModalRef.getData().column.fieldId}'`,\n        icon: 'd-icon-file_o_gear',\n        label: this.activeModalRef.getData().column.title\n      },\n      RX_RECORD_GRID_DESIGN.keywords,\n      // removing 'General' and 'Functions' groups from data dictionary.\n      ...dataDictionary.slice(2)\n    ])\n  );\n\n  constructor(\n    protected injector: Injector,\n    private activeModalRef: ActiveModalRef,\n    private rxViewDataDictionaryService: RxViewDataDictionaryService,\n    private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService\n  ) {\n    super(injector);\n  }\n\n  getExpressionEvaluator(): IExpressionEvaluator {\n    return this.rxDefaultExpressionEvaluatorService;\n  }\n}\n","import { AfterViewInit, Component, ElementRef, Injector, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { forEach, includes, map } from 'lodash';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { INamedFilterOptionDesignData, INamedFilterOptionsEditorConfig } from '../named-filter-options.types';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { NamedFilterOptionExpressionConfigurator } from './named-filter-option-expression-configurator.class';\nimport { ExpressionOperatorGroup, ExpressionOperatorRowsByGroup } from '@helix/platform/shared/api';\n\ninterface IAccordionTabs {\n  [id: string]: boolean;\n}\n\n@Component({\n  selector: 'rx-named-filter-options-editor-modal',\n  templateUrl: './named-filter-options-editor-modal.component.html',\n  styleUrls: ['./named-filter-options-editor-modal.component.scss'],\n  providers: [NamedFilterOptionExpressionConfigurator]\n})\nexport class RecordGridNamedFilterOptionsEditorModalComponent extends RxModalClass implements OnInit, AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  config: INamedFilterOptionsEditorConfig = this.activeModalRef.getData();\n  queryExpressionOptions: IExpressionFormControlOptions;\n  namedFilterOptionsFormArray: FormArray = this.formBuilder.array([]);\n\n  accordionTabs: IAccordionTabs = {};\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private rxGuidService: RxGuidService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    private expressionConfigurator: NamedFilterOptionExpressionConfigurator,\n    injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'namedFilterOptions',\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.All)\n    });\n\n    this.queryExpressionOptions = {\n      label: 'Filter',\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('namedFilterOptions'),\n      operators: this.expressionConfigurator.getOperators('namedFilterOptions'),\n      isRequired: true\n    };\n\n    forEach(this.config.namedFilterOptions, (props, index) => {\n      this.accordionTabs[props.guid] = index === this.config.activeIndex;\n\n      this.namedFilterOptionsFormArray.push(this.getFormGroup(props));\n    });\n\n    if (this.config.isReadOnly) {\n      this.namedFilterOptionsFormArray.disable();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.config.activeIndex) {\n      this.accordionTabEls.toArray()[this.config.activeIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  addNamedFilterOption(): void {\n    this.markAsDirty();\n\n    const guid = this.rxGuidService.generate();\n\n    this.accordionTabs[guid] = true;\n\n    let title = 'New filter option';\n    let counter = 0;\n    let titleAlreadyExists = false;\n    const titles = map(this.namedFilterOptionsFormArray.getRawValue(), 'title');\n\n    do {\n      title = counter === 0 ? title : `New filter option ${counter}`;\n      counter++;\n      titleAlreadyExists = includes(titles, title);\n    } while (titleAlreadyExists);\n\n    this.namedFilterOptionsFormArray.push(\n      this.getFormGroup({\n        data: {\n          title,\n          filterExpression: '',\n          index: this.namedFilterOptionsFormArray.length\n        },\n        guid\n      })\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeNamedFilterOption(index: number): void {\n    this.namedFilterOptionsFormArray.removeAt(index);\n    this.markAsDirty();\n  }\n\n  openExpressionEditor(title: AbstractControl, filterExpression: AbstractControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'namedFilterOptions',\n          value: filterExpression.value,\n          label: title.value\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        filterExpression.setValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  moveNamedFilterOption(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.namedFilterOptionsFormArray.controls, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onSelectedNamedFilterOptionDrop(event: CdkDragDrop<any[], any>): void {\n    moveItemInArray(this.namedFilterOptionsFormArray.controls, event.previousIndex, event.currentIndex);\n    this.markAsDirty();\n  }\n\n  onSave(): void {\n    const formValues = this.namedFilterOptionsFormArray.getRawValue();\n\n    const namedFilterOptions: INamedFilterOptionDesignData[] = formValues.map(\n      ({ guid, title, filterExpression }, index) => ({\n        guid,\n        data: {\n          title,\n          filterExpression,\n          index\n        }\n      })\n    );\n\n    this.activeModalRef.close(namedFilterOptions);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    forEach(this.accordionTabs, (val, key) => {\n      this.accordionTabs[key] = expandAll;\n    });\n  }\n\n  private getCheckTitleDuplicateValidator(currentNamedFilterOption: INamedFilterOptionDesignData): ValidatorFn {\n    return (control: AbstractControl) => {\n      const title = control.value;\n\n      if (\n        title &&\n        this.namedFilterOptionsFormArray.controls.some(\n          (namedFilterOption) =>\n            namedFilterOption.value.title === title && namedFilterOption.value.guid !== currentNamedFilterOption.guid\n        )\n      ) {\n        return { duplicateFilterOptionName: { message: 'Filter option with this name already exists.' } };\n      }\n\n      return null;\n    };\n  }\n\n  private getFormGroup(properties: INamedFilterOptionDesignData): FormGroup {\n    return this.formBuilder.group({\n      guid: properties.guid,\n      title: [\n        properties.data.title,\n        [\n          Validators.required,\n          this.getCheckTitleDuplicateValidator(properties).bind(this),\n          (control: AbstractControl) =>\n            control?.value?.includes(';')\n              ? { invalidName: { message: 'A filter option name cannot contain any of the following characters: ;' } }\n              : null\n        ]\n      ],\n      filterExpression: [properties.data.filterExpression, Validators.required]\n    });\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!config.isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addNamedFilterOption()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.named-filter-options.add-named-filter-option.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"namedFilterOptionsFormArray.controls.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        *ngIf=\"namedFilterOptionsFormArray.controls.length\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedNamedFilterOptionDrop($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let namedFilterOption of namedFilterOptionsFormArray.controls;\n              let index = index;\n              let first = first;\n              let last = last\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"namedFilterOption\"\n            [cdkDragDisabled]=\"config.isReadOnly\"\n          >\n            <div *ngIf=\"!config.isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [formGroup]=\"namedFilterOption\"\n              [isOpen]=\"accordionTabs[namedFilterOption.get('guid').value]\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"config.isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"namedFilterOption.get('title').value\" rx-id=\"card-title\">\n                      {{ namedFilterOption.get('title').value }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!config.isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveNamedFilterOption(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeNamedFilterOption(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                rx-id=\"filter-option-name-field\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.view-components.named-filter-options.name-field.label' | translate\n                }}\"\n                formControlName=\"title\"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n                rxNoWhitespace\n              ></adapt-rx-textfield>\n\n              <rx-expression-form-control\n                formControlName=\"filterExpression\"\n                rx-id=\"query-expression-field\"\n                [options]=\"queryExpressionOptions\"\n                (events)=\"\n                  openExpressionEditor(namedFilterOption.get('title'), namedFilterOption.get('filterExpression'))\n                \"\n                [required]=\"true\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-expression-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div\n        *ngIf=\"!namedFilterOptionsFormArray.controls.length\"\n        class=\"d-flex justify-content-center h-100 align-items-center mt-2\"\n      >\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{ 'com.bmc.arsys.rx.client.view-components.named-filter-options.empty-state.message' | translate }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!config.isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"this.namedFilterOptionsFormArray.invalid || !isDirty()\"\n    (click)=\"onSave()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      config.isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { cloneDeep, noop, without } from 'lodash';\nimport { IColumnEditorColumnData } from '../../record-grid-column-editor.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { RecordGridNamedFilterOptionsEditorModalComponent } from './named-filter-options-editor/named-filter-options-editor-modal.component';\nimport { INamedFilterOptionsEditorConfig, INamedFilterOptionDesignData } from './named-filter-options.types';\n\n@Component({\n  selector: 'rx-named-filter-options',\n  templateUrl: './named-filter-options.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridNamedFilterOptionsComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridNamedFilterOptionsComponent extends ValueAccessor<INamedFilterOptionDesignData[]> {\n  @Input()\n  column: IColumnEditorColumnData;\n\n  @Input()\n  tooltip: string;\n\n  constructor(private rxModalService: RxModalService) {\n    super();\n  }\n\n  openNamedFilterOptions(activeIndex?: number): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit named filter options for ${this.column.title}`,\n        data: {\n          namedFilterOptions: this.value ? cloneDeep(this.value) : [],\n          isReadOnly: this.isDisabled,\n          activeIndex,\n          column: this.column\n        } as INamedFilterOptionsEditorConfig,\n        content: RecordGridNamedFilterOptionsEditorModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-named-filter-options'\n      })\n      .then((namedFilterOptions: INamedFilterOptionDesignData[]) => {\n        this.value = namedFilterOptions;\n      })\n      .catch(noop);\n  }\n\n  editNamedFilterOption(activeIndex: number): void {\n    this.openNamedFilterOptions(activeIndex);\n  }\n\n  removeFilterOption(namedFilterOption: INamedFilterOptionDesignData): void {\n    this.value = without(this.value, namedFilterOption);\n  }\n}\n","<adapt-button rx-id=\"open-modal-button\" btn-type=\"tertiary\" class=\"px-0 py-0 pb-1\" (click)=\"openNamedFilterOptions()\">\n  <adapt-icon name=\"plus_circle\" class=\"mr-1\"></adapt-icon>\n  Edit named filter options\n</adapt-button>\n\n<span *ngIf=\"tooltip\" class=\"align-middle\">\n  <span class=\"letter-space\"></span>\n  <adapt-icon [name]=\"'question_circle_o'\" [adaptPopover]=\"tooltip\" appendToBody=\"true\"></adapt-icon>\n</span>\n\n<div rx-id=\"named-filter-options\">\n  <div *ngIf=\"!value?.length\" class=\"text-tertiary\">No named filter options added.</div>\n  <ul class=\"list-unstyled mb-0\" *ngIf=\"value?.length > 0\">\n    <li class=\"border px-2 py-1 mb-1 d-flex align-items-center\" *ngFor=\"let option of value; let index = index\">\n      <strong class=\"mr-auto text-break\">{{ option.data.title }}</strong>\n\n      <button\n        class=\"d-icon-left-pencil p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        (click)=\"editNamedFilterOption(index)\"\n        rx-id=\"edit-button\"\n      ></button>\n\n      <button\n        class=\"d-icon-left-cross_adapt p-1\"\n        adapt-button\n        btn-type=\"tertiary\"\n        size=\"small\"\n        type=\"button\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterOption(option)\"\n        rx-id=\"remove-button\"\n      ></button>\n    </li>\n  </ul>\n</div>\n","import { CdkDrag, CdkDragDrop, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Injector,\n  NgZone,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  ActiveModalRef,\n  AdaptAccordionTabComponent,\n  AdaptTreeNodeTyped,\n  DismissReasons,\n  TreeWrap\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RX_RECORD_DEFINITION\n} from '@helix/platform/record/api';\nimport { IExpressionConfigurator, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { ActionListControlComponent, NamedListFilterExpressionConfigurator } from '@helix/platform/view/designer';\nimport { every, find, findIndex, forEach, get, isEmpty, isNil, remove } from 'lodash';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport {\n  IColumnEditorAvailableColumn,\n  IColumnEditorColumnData,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData\n} from '../record-grid-column-editor.types';\nimport { IAvailableColumnTreeData } from './types/available-column-tree-data.interface';\nimport { IColumnEditorProperty } from './types/column-editor-property.types';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  templateUrl: './record-grid-column-editor-modal.component.html',\n  styleUrls: ['./record-grid-column-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridColumnEditorModalComponent extends RxModalClass implements AfterViewInit {\n  columns: IColumnEditorColumnData[];\n  recordDefinition: IRecordDefinition;\n  columnProperties = RX_RECORD_GRID.columnProperties;\n  actionsColumnProperties = RX_RECORD_GRID.actionsColumnProperties;\n  filteredColumns: IColumnEditorAvailableColumn[] = [];\n  availableColumnsTree: AdaptTreeNodeTyped<IAvailableColumnTreeData>[] = [];\n  startedLoadingAssociationDescriptors = false;\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n  expressionConfigurator: IExpressionConfigurator;\n  isReadOnly: boolean;\n\n  columnWidthPropertyOptions: IStepperWithUnitsFormControlOptions = this.columnProperties.find(\n    ({ name }) => name === 'width'\n  ).options as IStepperWithUnitsFormControlOptions;\n\n  typeaheadKeystrokeCountOptions: ISelectFormControlOptions = {\n    ...this.columnProperties.find(({ name }) => name === 'typeaheadKeystrokeCount').options,\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-column.keystroke-count.tooltip'\n      )\n    )\n  } as ISelectFormControlOptions;\n\n  @ViewChildren('draggableSelectedColumn', { read: CdkDrag })\n  draggableSelectedColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChild('selectedColumnsDropList', { read: CdkDropList })\n  selectedColumnsDropList: CdkDropList;\n\n  @ViewChildren('draggableAssociatedAvailableColumn', { read: CdkDrag })\n  draggableAssociatedAvailableColumns: QueryList<CdkDrag<IColumnEditorColumnData>>;\n\n  @ViewChildren(ActionListControlComponent)\n  actionListControlComponents: QueryList<ActionListControlComponent>;\n\n  @ViewChild('associatedAvailableColumnsDropList', { read: CdkDropList })\n  associatedAvailableColumnsDropList: CdkDropList;\n\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  private readonly activeColumn: IRecordGridDesignColumnData;\n  private readonly activeActionIndex: number;\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private definitionNameService: RxDefinitionNameService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxGuidService: RxGuidService,\n    private ngZone: NgZone,\n    protected injector: Injector,\n    private translateService: TranslateService,\n    private rxExpressionEditorService: RxExpressionEditorService\n  ) {\n    super(activeModalRef, injector);\n    const params = this.activeModalRef.getData().columnParams as IRecordGridColumnEditorModalParams;\n\n    this.activeColumn = params.activeColumn;\n    this.activeActionIndex = params.activeActionIndex;\n    this.recordDefinition = params.recordDefinition;\n    this.isReadOnly = params.isReadOnly;\n\n    this.columns = params.columns\n      .map((column): IColumnEditorColumnData => {\n        const additionalQueryCriteriaExpressionOptions = column.fieldDefinition.namedListDefinition\n          ? this.getAdditionalQueryCriteriaExpressionOptions(column)\n          : null;\n\n        return {\n          ...column,\n          isOpen: column === this.activeColumn,\n          label: this.rxRecordGridUtilsService.getColumnLabel(column.fieldDefinition, column.associationDescriptor),\n          clickable: !isEmpty(column.actions),\n          additionalQueryCriteriaExpressionOptions\n        };\n      })\n      .sort((a, b) => a.index - b.index);\n\n    this.getAvailableColumnsTree();\n  }\n\n  ngAfterViewInit(): void {\n    this.updateSelectedColumnsDropList();\n    this.openActiveAction();\n\n    const openGridColumnIndex = findIndex(this.columns, 'isOpen');\n\n    if (openGridColumnIndex !== -1) {\n      this.accordionTabEls.toArray()[openGridColumnIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  updateSelectedColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableSelectedColumns, this.selectedColumnsDropList);\n  }\n\n  updateAssociatedAvailableColumnsDropList(): void {\n    this.updateColumnsDropList(this.draggableAssociatedAvailableColumns, this.associatedAvailableColumnsDropList);\n  }\n\n  updateColumnsDropList(\n    draggableColumnsList: QueryList<CdkDrag<IColumnEditorColumnData>>,\n    dropList: CdkDropList<IColumnEditorColumnData[]>\n  ): void {\n    // Workaround: update due to injection bug with the adapt-accordion and adapt-tree\n    const draggableColumns = draggableColumnsList.toArray();\n    const columns = this.columns;\n\n    draggableColumns.sort((column1, column2) => {\n      return columns.indexOf(column1.data) - columns.indexOf(column2.data);\n    });\n\n    dropList._dropListRef.withItems(\n      draggableColumns.map((drag) => {\n        const dragRef = drag._dragRef as any;\n\n        if (!dragRef._initialContainer) {\n          dragRef._initialContainer = dropList._dropListRef;\n        }\n\n        return drag._dragRef;\n      })\n    );\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onDropInSelectedColumnsContainer(event: CdkDragDrop<IColumnEditorColumnData[]>) {\n    if (event.previousContainer !== event.container && this.isColumnEditorAvailableColumn(event.item.data)) {\n      this.addColumn(event.item.data, event.currentIndex);\n    } else if (event.previousIndex !== event.currentIndex) {\n      this.moveColumn(event.previousIndex, event.currentIndex);\n    }\n  }\n\n  onColumnCheckboxPropertyChange(\n    value: boolean,\n    column: IColumnEditorColumnData,\n    columnProperty: IColumnEditorProperty\n  ) {\n    if (columnProperty.name === 'filterable' && column.fieldDefinition.namedListDefinition) {\n      if (value) {\n        column.typeaheadKeystrokeCount = RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;\n      } else {\n        column.typeaheadKeystrokeCount = null;\n        column.additionalQueryCriteria = null;\n      }\n    }\n\n    this.markAsDirty();\n  }\n\n  onColumnDragStarted(): void {\n    this.updateSelectedColumnsDropList();\n  }\n\n  onAssociatedAvailableColumnsDragStarted(): void {\n    this.onColumnDragStarted();\n    this.updateAssociatedAvailableColumnsDropList();\n  }\n\n  isColumnEditorAvailableColumn(\n    column: IColumnEditorAvailableColumn | IColumnEditorColumnData\n  ): column is IColumnEditorAvailableColumn {\n    return Boolean((column as IColumnEditorAvailableColumn).fieldDefinitionName);\n  }\n\n  moveColumn(fromIndex: number, toIndex: number): void {\n    this.markAsDirty();\n    moveItemInArray(this.columns, fromIndex, toIndex);\n    this.updateColumnIndexes();\n  }\n\n  removeColumn(index: number): void {\n    this.markAsDirty();\n    const column = this.columns[index];\n\n    this.columns.splice(index, 1);\n\n    const associatedAvailableColumnsNode = column.associationDescriptor\n      ? this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label)\n      : this.availableColumnsTree[0];\n\n    // variable can be null when we want remove column, but associations are not loaded yet\n    if (associatedAvailableColumnsNode && associatedAvailableColumnsNode.data.allAvailableColumns) {\n      associatedAvailableColumnsNode.data.allAvailableColumns.push(\n        this.getColumnMetadata(column.fieldDefinition, column.associationDescriptor)\n      );\n\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  private getAssociatedAvailableColumnsNode(\n    associationDescriptorLabel: string\n  ): AdaptTreeNodeTyped<IAvailableColumnTreeData> {\n    return this.availableColumnsTree.find(\n      (associatedAvailableColumn) =>\n        associatedAvailableColumn.data.associationDescriptor &&\n        associatedAvailableColumn.data.associationDescriptor.label === associationDescriptorLabel\n    );\n  }\n\n  getAvailableColumnsTree(): void {\n    const recordNode = {\n      children: null,\n      leaf: false,\n      expanded: true,\n      expandedIcon: 'd-icon-file_text',\n      collapsedIcon: 'd-icon-file_text',\n      label: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      key: this.definitionNameService.getDisplayName(this.recordDefinition.name),\n      data: {\n        allAvailableColumns: null\n      }\n    };\n\n    if (!this.startedLoadingAssociationDescriptors) {\n      this.startedLoadingAssociationDescriptors = true;\n\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.recordDefinition.name)\n        .subscribe((associationDescriptors) => {\n          associationDescriptors = associationDescriptors.slice();\n          associationDescriptors.sort((descriptor1, descriptor2) => descriptor1.label.localeCompare(descriptor2.label));\n\n          this.availableColumnsTree = associationDescriptors.map((associationDescriptor) => {\n            return {\n              children: null,\n              leaf: false,\n              expandedIcon: 'd-icon-arrow_schema',\n              collapsedIcon: 'd-icon-arrow_schema',\n              label: associationDescriptor.label,\n              key: associationDescriptor.associationDefinition.name,\n              data: {\n                associationDescriptor,\n                allAvailableColumns: null\n              }\n            };\n          });\n\n          this.availableColumnsTree.unshift(recordNode);\n\n          this.availableColumnsTree.forEach((node) => {\n            this.onNodeExpand({ node });\n          });\n        });\n    }\n  }\n\n  updateAvailableColumnsTree(): void {\n    this.availableColumnsTree.forEach((node) => {\n      const allAvailableColumns = node.data.allAvailableColumns;\n\n      if (allAvailableColumns) {\n        const availableColumns = this.sortAvailableColumns(allAvailableColumns);\n        const definitionName = node.data.associationDescriptor\n          ? node.data.associationDescriptor.associationDefinition.name\n          : this.recordDefinition.name;\n\n        node.children = availableColumns.map((availableColumn): AdaptTreeNodeTyped<IAvailableColumnTreeData> => {\n          return {\n            children: null,\n            leaf: true,\n            label: availableColumn.fieldDefinitionName,\n            key: `${definitionName}-${availableColumn.fieldDefinition.id}`,\n            data: {\n              availableColumn\n            }\n          };\n        });\n      }\n    });\n  }\n\n  onNodeExpand({ node }: { node: AdaptTreeNodeTyped<IAvailableColumnTreeData> }): void {\n    const associationDescriptor = node.data.associationDescriptor;\n\n    if (associationDescriptor && !node.data.allAvailableColumns) {\n      node.data.allAvailableColumns = [];\n\n      this.rxRecordDefinitionCacheService\n        .getRecordDefinition(associationDescriptor.recordDefinitionName)\n        .subscribe((recordDefinition) => {\n          node.data.allAvailableColumns = this.getAvailableColumns(recordDefinition, associationDescriptor);\n          this.updateAvailableColumnsTree();\n        });\n    } else if (!associationDescriptor) {\n      node.data.allAvailableColumns = this.getAvailableColumns(this.recordDefinition);\n      this.updateAvailableColumnsTree();\n    }\n  }\n\n  addColumn(availableColumn: IColumnEditorAvailableColumn, insertIndex?: number) {\n    this.markAsDirty();\n\n    if (!find(this.columns, (column) => column.fieldId === availableColumn.fieldId)) {\n      const additionalQueryCriteriaExpressionOptions = availableColumn.fieldDefinition.namedListDefinition\n        ? this.getAdditionalQueryCriteriaExpressionOptions(availableColumn)\n        : null;\n\n      const newColumn = {\n        ...this.getColumnEditorColumnData(availableColumn),\n        additionalQueryCriteriaExpressionOptions\n      };\n\n      if (isNil(insertIndex)) {\n        this.columns.push(newColumn);\n      } else {\n        this.columns.splice(insertIndex, 0, newColumn);\n      }\n\n      this.updateColumnIndexes();\n      this.removeFromAvailableColumns(availableColumn);\n\n      setTimeout(() => {\n        this.accordionTabEls.toArray()[insertIndex ?? this.columns.length - 1].nativeElement.scrollIntoView();\n      });\n    }\n  }\n\n  getColumnEditorColumnData(availableColumn: IColumnEditorAvailableColumn): IColumnEditorColumnData {\n    const column: IColumnEditorColumnData = {\n      guid: this.rxGuidService.generate(),\n      label: availableColumn.label,\n      fieldId: availableColumn.fieldId,\n      associationDescriptor: availableColumn.associationDescriptor,\n      fieldDefinition: availableColumn.fieldDefinition,\n      actions: [],\n      title: availableColumn.fieldDefinitionName,\n      isOpen: true\n    };\n\n    forEach(RX_RECORD_GRID.columnProperties, (columnProperty) => {\n      if (columnProperty.name === 'sortable') {\n        column.sortable = availableColumn.isSortable;\n      } else if (columnProperty.name === 'searchable') {\n        column.searchable = this.rxRecordGridUtilsService.isSearchable(\n          availableColumn.fieldDefinition,\n          this.recordDefinition\n        );\n      } else {\n        column[columnProperty.name] = columnProperty.defaultValue;\n      }\n    });\n\n    return column;\n  }\n\n  removeFromAvailableColumns(column: IColumnEditorAvailableColumn): void {\n    if (column.associationDescriptor) {\n      const associatedAvailableColumnsNode = this.getAssociatedAvailableColumnsNode(column.associationDescriptor.label);\n\n      remove(associatedAvailableColumnsNode.data.allAvailableColumns, column);\n    } else {\n      remove(this.availableColumnsTree[0].data.allAvailableColumns, column);\n    }\n\n    this.updateAvailableColumnsTree();\n  }\n\n  sortAvailableColumns(availableColumns: IColumnEditorAvailableColumn[]): IColumnEditorAvailableColumn[] {\n    this.filteredColumns = availableColumns.sort((column1, column2) =>\n      column1.fieldDefinitionName.localeCompare(column2.fieldDefinitionName)\n    );\n\n    return this.filteredColumns;\n  }\n\n  getAvailableColumns(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn[] {\n    return recordDefinition.fieldDefinitions\n      .map((fieldDefinition) => this.getColumnMetadata(fieldDefinition, associationDescriptor))\n      .filter((availableColumn) => !find(this.columns, (column) => column.fieldId === availableColumn.fieldId));\n  }\n\n  getColumnMetadata(\n    fieldDefinition: IFieldDefinition,\n    associationDescriptor?: IAssociationDescriptor\n  ): IColumnEditorAvailableColumn {\n    return {\n      fieldDefinitionName: fieldDefinition.name,\n      label: this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n      fieldId: this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor),\n      isSortable: this.rxFieldDefinitionService.isSortable(fieldDefinition),\n      associationDescriptor,\n      fieldDefinition\n    };\n  }\n\n  saveChanges(): void {\n    const result: IRecordGridColumnEditorModalResult = {\n      columns: this.columns.map((column): IRecordGridDesignColumnData => {\n        const isFilterableColumnWithNamedList = column.filterable && column.fieldDefinition.namedListDefinition;\n\n        return {\n          actions: column.actions,\n          alignment: column.alignment,\n          fieldId: column.fieldId,\n          filterable: column.filterable,\n          filterType: column.filterType,\n          guid: column.guid,\n          index: column.index,\n          sortable: column.sortable,\n          searchable: column.searchable,\n          title: column.title,\n          visible: column.visible,\n          associationDescriptor: column.associationDescriptor,\n          fieldDefinition: column.fieldDefinition,\n          cellDisplayProperties: column.cellDisplayProperties,\n          namedFilterOptions: column.namedFilterOptions,\n          width: column.width,\n          wrapText: column.wrapText,\n          typeaheadKeystrokeCount: isFilterableColumnWithNamedList ? column.typeaheadKeystrokeCount : null,\n          additionalQueryCriteria: isFilterableColumnWithNamedList ? column.additionalQueryCriteria : null\n        };\n      })\n    };\n\n    this.activeModalRef.close(result);\n  }\n\n  trackByForColumns(index: number, column: IColumnEditorColumnData): string {\n    return column.fieldId;\n  }\n\n  trackByForColumnProperties(index: number, columnProperty: IColumnEditorProperty): string {\n    return columnProperty.name;\n  }\n\n  isPropertyEditable(column: IColumnEditorColumnData, propertyName: string) {\n    if (propertyName === 'searchable') {\n      return (\n        !this.isReadOnly && this.rxRecordGridUtilsService.isSearchable(column.fieldDefinition, this.recordDefinition)\n      );\n    } else {\n      return !this.isReadOnly;\n    }\n  }\n\n  private updateColumnIndexes(): void {\n    this.columns.forEach((column, index) => {\n      column.index = index;\n    });\n  }\n\n  private openActiveAction(): void {\n    if (this.activeColumn && this.activeActionIndex >= 0) {\n      this.ngZone.runOutsideAngular(() => {\n        // timeout is required to let control set initial value\n        setTimeout(() => {\n          const listControl = this.actionListControlComponents.find(\n            (control) => control.value === this.activeColumn.actions\n          );\n\n          if (listControl) {\n            listControl.focus({ actionIndex: this.activeActionIndex });\n          }\n        });\n      });\n    }\n  }\n\n  isTreeEmpty(): boolean {\n    return every(this.availableColumnsTree, (node) => node.data.allAvailableColumns.length === 0);\n  }\n\n  openAdditionalQueryCriteriaExpressionEditor(\n    column: IColumnEditorColumnData,\n    control: ExpressionFormControlComponent\n  ): void {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: 'additionalQueryCriteria',\n          value: column.additionalQueryCriteria,\n          label: 'Additional named list filter'\n        },\n        isReadOnly: this.isReadOnly,\n        expressionConfigurator: namedListFilterExpressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),\n            icon: 'd-icon-mathematical_function'\n          },\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'\n            ),\n            icon: 'd-icon-file_o'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'\n            ),\n            icon: 'd-icon-arrow_right_square_input'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        column.additionalQueryCriteria = expression.value;\n        control.value = expression.value;\n        control.onWriteValue(expression.value);\n        this.markAsDirty();\n      });\n  }\n\n  getAdditionalQueryCriteriaExpressionOptions(column: IRecordGridDesignColumnData): IExpressionFormControlOptions {\n    const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n      column.fieldDefinition,\n      this.injector\n    );\n\n    return {\n      label: 'Additional named list filter',\n      tooltip: new Tooltip(\n        'Build a filter to apply at runtime in addition to the filter, if any, specified in the named list definition.'\n      ),\n      dataDictionary$: namedListFilterExpressionConfigurator.getDataDictionary(),\n      operators: namedListFilterExpressionConfigurator.getOperators()\n    };\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div *ngIf=\"!isReadOnly\" class=\"col-4 border-right d-flex flex-column mh-100\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div class=\"rx-card card flex-grow-1 mt-2\">\n        <div class=\"card-block d-flex flex-column\">\n          <div\n            *ngIf=\"!isTreeEmpty()\"\n            #associatedAvailableColumnsDropList=\"cdkDropList\"\n            cdkDropList\n            [cdkDropListData]=\"filteredColumns\"\n            cdkDropListSortingDisabled\n            [cdkDropListConnectedTo]=\"['selectedColumnsDropList']\"\n          >\n            <adapt-tree\n              [value]=\"availableColumnsTree\"\n              (onNodeExpand)=\"onNodeExpand($event)\"\n              filter=\"true\"\n              [wrap]=\"treeWrap\"\n            >\n              <ng-template let-node adaptTreeNodeTemplate>\n                <span *ngIf=\"!node.data.availableColumn\" [title]=\"node.label\">\n                  {{ node.label }}\n                </span>\n\n                <div\n                  *ngIf=\"node.data.availableColumn\"\n                  class=\"rx-tree-draggable-node\"\n                  #draggableAssociatedAvailableColumn\n                  cdkDrag\n                  [cdkDragData]=\"node.data.availableColumn\"\n                  (cdkDragStarted)=\"onAssociatedAvailableColumnsDragStarted()\"\n                >\n                  <div (dblclick)=\"addColumn(node.data.availableColumn)\">\n                    <button\n                      type=\"button\"\n                      class=\"rx-button-unstyled d-icon-plus_circle\"\n                      (click)=\"addColumn(node.data.availableColumn)\"\n                    ></button>\n\n                    <span class=\"rx-tree-node-label ml-3\">{{ node.label }}</span>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-tree>\n          </div>\n\n          <div *ngIf=\"isTreeEmpty()\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n            <adapt-empty-state\n              class=\"w-100\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.view-components.record-grid-column.available-columns.empty-state.message'\n                  | translate\n              }}\"\n              type=\"search\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex flex-column mh-100 {{ isReadOnly ? 'col' : 'col-8' }}\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <h4 class=\"mt-2\">\n          {{ 'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.title' | translate }}\n        </h4>\n      </div>\n\n      <div\n        id=\"selectedColumnsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"columns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n        #selectedColumnsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"false\" *ngIf=\"columns.length\">\n          <div\n            *ngFor=\"\n              let column of columns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByForColumns\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"column\"\n            [cdkDragDisabled]=\"isReadOnly\"\n            (cdkDragStarted)=\"onColumnDragStarted()\"\n            #draggableSelectedColumn\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.label\" rx-id=\"card-title\">\n                      {{ column.label }}\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n\n                    <button\n                      *ngIf=\"!isActionsColumn(column.fieldId)\"\n                      class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                      adapt-button\n                      size=\"small\"\n                      type=\"button\"\n                      (click)=\"$event.stopPropagation(); removeColumn(index)\"\n                      rx-id=\"remove-button\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <ng-container *ngIf=\"column.isOpen\">\n                <div\n                  *ngIf=\"\n                    isActionsColumn(column.fieldId);\n                    then actionsColumnEditorTemplate;\n                    else dataColumnEditorTemplate\n                  \"\n                ></div>\n              </ng-container>\n\n              <ng-template #dataColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <div class=\"d-flex flex-wrap\">\n                  <ng-container *ngFor=\"let columnProperty of columnProperties; trackBy: trackByForColumnProperties\">\n                    <div\n                      class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                      *ngIf=\"\n                        ['visible', 'sortable', 'filterable', 'searchable', 'wrapText'].includes(columnProperty.name)\n                      \"\n                    >\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          [(ngModel)]=\"column[columnProperty.name]\"\n                          (ngModelChange)=\"onColumnCheckboxPropertyChange($event, column, columnProperty)\"\n                          [disabled]=\"!isPropertyEditable(column, columnProperty.name)\"\n                        />\n\n                        <span class=\"checkbox__item\">{{ columnProperty.label }}</span>\n                      </label>\n\n                      <span class=\"ml-1\" *ngIf=\"columnProperty.tooltip\">\n                        <span class=\"letter-space\"></span>\n                        <adapt-icon\n                          [name]=\"'question_circle_o'\"\n                          [adaptPopover]=\"columnProperty.tooltip.content\"\n                          appendToBody=\"true\"\n                        >\n                        </adapt-icon>\n                      </span>\n                    </div>\n                    <rx-column-editor-alignment\n                      *ngIf=\"columnProperty.name === 'alignment'\"\n                      [isReadOnly]=\"isReadOnly\"\n                      [column]=\"column\"\n                      [columnProperty]=\"columnProperty\"\n                      class=\"flex-fill\"\n                      [ngModel]=\"column.alignment\"\n                      (ngModelChange)=\"markAsDirty()\"\n                      ngDefaultControl\n                    ></rx-column-editor-alignment>\n                  </ng-container>\n                </div>\n\n                <div class=\"d-flex flex-row\">\n                  <rx-stepper-with-units-form-control\n                    class=\"d-block col-5 p-0\"\n                    [options]=\"columnWidthPropertyOptions\"\n                    [(ngModel)]=\"column.width\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-stepper-with-units-form-control>\n\n                  <rx-select-form-control\n                    *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                    class=\"d-block col-5 p-0 pb-2 pl-5\"\n                    [options]=\"typeaheadKeystrokeCountOptions\"\n                    [(ngModel)]=\"column.typeaheadKeystrokeCount\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [disabled]=\"isReadOnly\"\n                  ></rx-select-form-control>\n                </div>\n\n                <rx-expression-form-control\n                  #additionalQueryCriteriaExpression\n                  *ngIf=\"column.filterable && column.fieldDefinition.namedListDefinition\"\n                  rx-id=\"additional-query-criteria-expression\"\n                  class=\"d-block p-0 pb-2\"\n                  [options]=\"column.additionalQueryCriteriaExpressionOptions\"\n                  [(ngModel)]=\"column.additionalQueryCriteria\"\n                  (events)=\"openAdditionalQueryCriteriaExpressionEditor(column, additionalQueryCriteriaExpression)\"\n                  [disabled]=\"isReadOnly\"\n                ></rx-expression-form-control>\n\n                <rx-cell-display-properties\n                  class=\"d-block pb-2\"\n                  [columns]=\"columns\"\n                  [columnName]=\"column.title\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.cellDisplayProperties\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-cell-display-properties>\n\n                <rx-named-filter-options\n                  class=\"d-block pb-2\"\n                  [column]=\"column\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.namedFilterOptions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.named-filter-options-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-named-filter-options>\n\n                <rx-action-list-control\n                  class=\"d-block\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.actions\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  tooltip=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-actions-field.tooltip'\n                      | translate\n                  }}\"\n                ></rx-action-list-control>\n              </ng-template>\n\n              <ng-template #actionsColumnEditorTemplate>\n                <adapt-rx-textfield\n                  class=\"rx-record-grid-column-editor-text-field d-block form-group\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-column.column-header-field.label' | translate\n                  }}\"\n                  [disabled]=\"isReadOnly\"\n                  [(ngModel)]=\"column.title\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></adapt-rx-textfield>\n\n                <rx-stepper-with-units-form-control\n                  class=\"d-block col-5 p-0\"\n                  [options]=\"columnWidthPropertyOptions\"\n                  [(ngModel)]=\"column.width\"\n                  (ngModelChange)=\"markAsDirty()\"\n                ></rx-stepper-with-units-form-control>\n\n                <div class=\"d-flex flex-wrap\">\n                  <div\n                    class=\"checkbox rx-record-grid-column-editor__checkbox-field\"\n                    *ngFor=\"let actionsColumnProperty of actionsColumnProperties; trackBy: trackByForColumnProperties\"\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        [(ngModel)]=\"column[actionsColumnProperty.name]\"\n                        (ngModelChange)=\"markAsDirty()\"\n                        [disabled]=\"!isPropertyEditable(column, actionsColumnProperty.name)\"\n                      />\n\n                      <span class=\"checkbox__item\">{{ actionsColumnProperty.label }}</span>\n                    </label>\n                  </div>\n                </div>\n              </ng-template>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!columns.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-column.selected-columns.empty-state.message'\n              | translate\n          }}\"\n          type=\"grid\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { get, has, noop } from 'lodash';\nimport { BehaviorSubject, forkJoin } from 'rxjs';\nimport { defaultIfEmpty, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../../../runtime/services/record-grid-config-utils.service';\nimport { RecordGridDesignValidationIssue } from '../../record-grid-design.types';\nimport { RecordGridColumnEditorModalComponent } from './record-grid-column-editor-modal/record-grid-column-editor-modal.component';\nimport {\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridColumnEditorModalParams,\n  IRecordGridColumnEditorModalResult,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './record-grid-column-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-column-editor',\n  templateUrl: './record-grid-column-editor-control.component.html',\n  styleUrls: ['./record-grid-column-editor-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridColumnEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridColumnEditorControlComponent\n  extends ValueAccessor<IRecordGridDesignInspectorColumnConfig[]>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridColumnEditorControlOptions;\n\n  private updateColumnsSubject = new BehaviorSubject<IRecordGridDesignInspectorColumnConfig[]>([]);\n\n  columns$ = this.updateColumnsSubject.pipe(\n    switchMap((inspectorColumns) =>\n      forkJoin(\n        inspectorColumns.map((inspectorColumn) =>\n          forkJoin([\n            this.rxRecordGridUtilsService.getAssociationDescriptor(\n              inspectorColumn.fieldId,\n              this.options.recordDefinition\n            ),\n            this.rxRecordGridUtilsService.getFieldDefinition(inspectorColumn.fieldId, this.options.recordDefinition)\n          ]).pipe(\n            map(([associationDescriptor, fieldDefinition]) => ({\n              associationDescriptor,\n              fieldDefinition,\n              inspectorColumn\n            }))\n          )\n        )\n      ).pipe(\n        defaultIfEmpty([]),\n        map((columnsData) =>\n          columnsData.map((columnData): IRecordGridDesignColumnData => {\n            return {\n              ...columnData.inspectorColumn,\n              fieldDefinition: columnData.fieldDefinition,\n              associationDescriptor: columnData.associationDescriptor,\n              title: columnData.inspectorColumn.title?.trim(),\n              searchable: has(columnData.inspectorColumn, 'searchable')\n                ? this.rxRecordGridConfigUtilsService.getBooleanValue(columnData.inspectorColumn.searchable)\n                : columnData.inspectorColumn.filterable &&\n                  this.rxRecordGridUtilsService.isSearchable(columnData.fieldDefinition, this.options.recordDefinition),\n              fallbackTitle: `[${columnData.fieldDefinition.name}]`\n            };\n          })\n        ),\n        shareReplay(1)\n      )\n    )\n  );\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (changes.options.currentValue as IRecordGridColumnEditorControlOptions).recordDefinition.name !==\n        (changes.options.previousValue as IRecordGridColumnEditorControlOptions).recordDefinition.name\n    ) {\n      this.updateColumnsSubject.next(this.value);\n    }\n  }\n\n  onWriteValue(inspectorColumns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.updateColumnsSubject.next(inspectorColumns);\n  }\n\n  removeColumn(columnData: IRecordGridDesignColumnData): void {\n    this.updateValue(this.value.filter((column) => column.fieldId !== columnData.fieldId));\n  }\n\n  updateValue(columns: IRecordGridDesignInspectorColumnConfig[]): void {\n    this.value = columns;\n    this.onWriteValue(columns);\n  }\n\n  openEditor(columnGuid?: string, activeActionIndex?: number): void {\n    this.columns$.pipe(take(1)).subscribe((columns) => {\n      const data: IRecordGridColumnEditorModalParams = {\n        isReadOnly: this.isDisabled,\n        columns,\n        activeColumn: columns.find((item) => item.guid === columnGuid),\n        recordDefinition: this.options.recordDefinition,\n        activeActionIndex\n      };\n\n      this.rxModalService\n        .openModal({\n          title: 'Edit grid columns',\n          content: RecordGridColumnEditorModalComponent,\n          data: {\n            columnParams: data\n          },\n          size: OpenViewActionModalSize.Large as any,\n          testID: 'edit-grid-columns'\n        })\n        .then((result: IRecordGridColumnEditorModalResult) => {\n          if (result && result.columns) {\n            this.updateValue(result.columns);\n          }\n        })\n        .catch(noop);\n    });\n  }\n\n  focus(data: RecordGridDesignValidationIssue['data']): void {\n    this.openEditor(data?.columnGuid, data?.actionIndex);\n  }\n\n  getColumnResourceTypeName(column: IRecordGridDesignColumnData): string {\n    const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[column.fieldDefinition.resourceType];\n\n    return get(RX_RECORD_DEFINITION.dataTypes[resourceType], 'displayName', '');\n  }\n\n  getSortedColumns(columns: IRecordGridDesignColumnData[]): IRecordGridDesignColumnData[] {\n    return columns.sort((column1, column2) => column1.index - column2.index);\n  }\n\n  trackByForColumns(index: number, column: IRecordGridDesignColumnData): string {\n    return column.fieldId;\n  }\n\n  isActionsColumn(fieldId: string): boolean {\n    return fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id;\n  }\n\n  ngOnDestroy(): void {\n    this.updateColumnsSubject.complete();\n  }\n}\n","<adapt-button btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit grid columns\n</adapt-button>\n\n<div *ngIf=\"columns$ | async as columns\">\n  <div rx-id=\"columns\">\n    <span *ngIf=\"columns.length === 0\" class=\"text-tertiary\"> No grid columns added. </span>\n  </div>\n\n  <div class=\"rx-selected-column\" *ngFor=\"let column of getSortedColumns(columns); trackBy: trackByForColumns\">\n    <div class=\"rx-selected-column__header-container\">\n      <span\n        class=\"rx-selected-column__header-title\"\n        rx-id=\"card-title\"\n        [ngClass]=\"{ 'd-icon-left-arrow_schema': column.associationDescriptor }\"\n        [title]=\"column.title\"\n      >\n        {{ column.title || column.fallbackTitle }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        (click)=\"openEditor(column.guid)\"\n        *ngIf=\"!isDisabled\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-column\"\n        (click)=\"removeColumn(column)\"\n        *ngIf=\"!isActionsColumn(column.fieldId) && !isDisabled\"\n      ></button>\n    </div>\n\n    <div class=\"rx-column-type\" rx-id=\"column-type\">\n      {{ getColumnResourceTypeName(column) }}\n      <span *ngIf=\"column.associationDescriptor\">– {{ column.associationDescriptor.label }}</span>\n    </div>\n  </div>\n</div>\n","export enum QueryFiltersLogic {\n  And = 'AND',\n  Or = 'OR'\n}\n","import { isNil } from 'lodash';\nimport { AdvancedFilterDataTypesConfigsService } from '@bmc-ux/adapt-angular';\n\nexport class RxRecordGridAdvancedFilterValue<T = any> {\n  constructor(value?: T, namedOptions: string[] = []) {\n    this.filterValue = value;\n\n    if (Array.isArray(namedOptions)) {\n      this.namedOptions = namedOptions;\n    }\n  }\n\n  get length(): number {\n    return (\n      (Array.isArray(this.filterValue) ? this.filterValue.length : isNil(this.filterValue) ? 0 : 1) +\n      this.namedOptions.length\n    );\n  }\n\n  namedOptions: string[] = [];\n  filterValue: T;\n  title: string;\n\n  static isEmpty(item: RxRecordGridAdvancedFilterValue | any): boolean {\n    return item instanceof RxRecordGridAdvancedFilterValue && !item.length;\n  }\n\n  static isEmptyWithRange(item: RxRecordGridAdvancedFilterValue | any): boolean {\n    return (\n      item instanceof RxRecordGridAdvancedFilterValue &&\n      !item.namedOptions.length &&\n      AdvancedFilterDataTypesConfigsService.isEmptyOnEmptyValues(item.filterValue)\n    );\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport {\n  AdaptTranslateService,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterDataTypesConfigsService,\n  AdvancedFilterExpressionTip,\n  AdvancedFilterOption,\n  AdvancedFilterOptionConfig,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionTypeData,\n  formatAdvancedFilterTagText,\n  isEmptyOrWhitespace,\n  ParsedTagFieldExpressionResult,\n  TagModel\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RecordFieldOption,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport { get, isArray, isEmpty, isFunction, isNil, isString, uniq } from 'lodash';\nimport { IRecordGridFilterConfig } from '../types/record-grid-filter-config.interfaces';\nimport { RxRecordGridUtilsService } from './record-grid-utils.service';\nimport moment from 'moment-es6';\nimport { IRecordGridColumnNamedFilterOption } from '../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridAdvancedFilteringService {\n  translation = this.adaptTranslateService.getCurrentLanguage();\n\n  adaptTexts = {\n    fromLabel: this.translation['adapt.advancedFilter.configsTexts.fromLabel'],\n    toLabel: this.translation['adapt.advancedFilter.configsTexts.toLabel'],\n    trueLabel: this.translation['adapt.advancedFilter.configsTexts.trueLabel'],\n    falseLabel: this.translation['adapt.advancedFilter.configsTexts.falseLabel'],\n    blankLabel: this.translation['adapt.advancedFilter.configsTexts.blankLabel'],\n    validationErrors: {\n      invalidRangeName: this.translation['adapt.advancedFilter.validationErrors.invalidRangeName'],\n      invalidRangeText: this.translation['adapt.advancedFilter.validationErrors.invalidRangeText'],\n      numberTypeTexts: {\n        fromValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.fromValueMustBeNumber'],\n        toValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.toValueMustBeNumber'],\n        invalidBetweenMinAndMax:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidBetweenMinAndMax'],\n        invalidMinValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMinValue'],\n        invalidMaxValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMaxValue']\n      }\n    }\n  };\n\n  defaultConfig = this.advancedFilterDataTypesConfigsService.getConfigs(this.adaptTexts);\n\n  constructor(\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private advancedFilterDataTypesConfigsService: AdvancedFilterDataTypesConfigsService,\n    private adaptTranslateService: AdaptTranslateService\n  ) {}\n\n  addAssociationFieldsToFieldDefinitionsById(\n    fieldDefinitionsById: IFieldDefinitionsById,\n    associationDescriptors: IAssociationDescriptor[],\n    associatedRecordDefinitions: IRecordDefinition[]\n  ): IFieldDefinitionsById {\n    associationDescriptors.forEach((associationDescriptor) => {\n      const associatedRecordDefinition = associatedRecordDefinitions.find(\n        (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n      );\n\n      associatedRecordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n        const field = this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor);\n\n        if (!fieldDefinitionsById[field]) {\n          this.rxRecordDefinitionService.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field);\n        }\n      });\n    });\n\n    fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    return fieldDefinitionsById;\n  }\n\n  getAdvancedFilterOption(\n    fieldId: string,\n    header: string,\n    fieldDefinition: IFieldDefinition,\n    filterConfig: IRecordGridFilterConfig,\n    isHidden?: boolean,\n    customFilterTemplates?: { [key: string]: TemplateRef<any> },\n    prefixLabel?: string,\n    namedFilterOptions?: IRecordGridColumnNamedFilterOption[],\n    typeaheadKeystrokeCount?: number,\n    additionalQueryCriteria?: string\n  ): AdvancedFilterOption {\n    const config: AdvancedFilterOption = {\n      id: fieldId,\n      label: header,\n      dataType: filterConfig.filterOptionDataType,\n      isHidden,\n      data: isFunction(filterConfig.getDataForAdvancedFilter)\n        ? filterConfig.getDataForAdvancedFilter(fieldDefinition, fieldId)\n        : null\n    };\n\n    namedFilterOptions = namedFilterOptions ?? [];\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.boolean) {\n      config.inputsTemplate =\n        fieldDefinition.fieldOption !== RecordFieldOption.Required\n          ? customFilterTemplates.optionalBooleanFilter\n          : customFilterTemplates.requiredBooleanFilter;\n\n      config.customConfig = <\n        AdvancedFilterOptionConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        getExpressionFieldTips: (filterOption: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const namedFilterOptionTips = this.getNamedFilterOptionTips(\n            namedFilterOptions,\n            filterOption,\n            config.customConfig\n          );\n\n          return namedFilterOptionTips.concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        formatValueForTag: (value, option: AdvancedFilterOption): string => {\n          const data = option.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const filterValueLabels = value.filterValue.map(\n            (id) => selectOptions.find((selectOption) => selectOption.id === id).name\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        needRemoveTagValue: (value) => RxRecordGridAdvancedFilterValue.isEmpty(value),\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue, filterOption.data.isRequired),\n        parseTagFieldExpression: (\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          searchTerm: string\n        ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>> | null => {\n          const rawValues = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n          const value = this.getFilterValueFromString(namedFilterOptions, rawValues);\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          value.filterValue =\n            value.filterValue\n              .map((optionLabel: string) => {\n                optionLabel = optionLabel.trim().toLowerCase();\n                const selectOption = selectOptions.find((option) => option.name.toLowerCase() === optionLabel);\n\n                return selectOption?.id ?? null;\n              })\n              .filter((val) => !isNil(val)) || [];\n\n          return value.length ? { value } : null;\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.string) {\n      if (fieldDefinition.namedListDefinition) {\n        config.inputsTemplate = customFilterTemplates.inputsForStringWithTypeAheadTemplate;\n        config.data = { ...config.data, typeaheadKeystrokeCount, additionalQueryCriteria };\n      } else {\n        config.inputsTemplate = customFilterTemplates.inputsForStringTypeTemplate;\n      }\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, filterOption: AdvancedFilterOption): string =>\n          this.buildTagLabel(value.filterValue, this.getNamedOptionTitles(value, namedFilterOptions)),\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return [\n            ...this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n              new RxRecordGridAdvancedFilterValue(),\n              option,\n              config.customConfig,\n              true,\n              formatAdvancedFilterTagText(option, '')\n            )\n          ];\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.selection) {\n      config.inputsTemplate = customFilterTemplates.inputsForSelectionTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, option: AdvancedFilterOption): string => {\n          const filterValueLabels = this.defaultConfig[filterConfig.filterOptionDataType].formatValueForTag(\n            value.filterValue,\n            option\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        getExpressionFieldTips: (filterOption, searchTerm: string) => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = (data && data.selectOptions) || [];\n\n          return this.getNamedFilterOptionTips(namedFilterOptions, filterOption, config.customConfig).concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.datetime) {\n      config.inputsTemplate = customFilterTemplates.inputsForDatetimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.datetime,\n        'll LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.date) {\n      config.inputsTemplate = customFilterTemplates.inputsForDateTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.date,\n        'll'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.time) {\n      config.inputsTemplate = customFilterTemplates.inputsForTimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.time,\n        'LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.number) {\n      config.inputsTemplate = customFilterTemplates.inputsForNumberTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n        },\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig, [null, null]).concat(\n            this.defaultConfig[filterConfig.filterOptionDataType].getExpressionFieldTips(option, searchTerm)\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => {\n          newValue.filterValue = this.defaultConfig[filterConfig.filterOptionDataType].updateFilterValue(\n            newValue.filterValue,\n            oldValue.filterValue,\n            filterOption\n          );\n\n          newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n          return newValue;\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue) => {\n          const formattedValue = value.filterValue.filter((val) => val != null).join(' - ');\n\n          return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          const { value: valuesStr, label } = this.getExpressionRawValues(filterOption, searchTerm);\n\n          if (!valuesStr) {\n            return null;\n          }\n\n          const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n          value.filterValue =\n            this.defaultConfig[filterConfig.filterOptionDataType].parseTagFieldExpression(\n              filterOption,\n              `${label} ${value.filterValue[0]}`\n            )?.value ?? [];\n\n          return value.length ? { value } : null;\n        },\n        validateValue: (\n          value: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n        ) => this.defaultConfig[filterConfig.filterOptionDataType].validateValue(value.filterValue, filterOption)\n      };\n    }\n\n    if (prefixLabel) {\n      const prefixConfig = {\n        getTagText(value: string, option: AdvancedFilterOption, formattedValue: string): string {\n          return `${prefixLabel}: ${formattedValue}`;\n        }\n      };\n\n      config.customConfig = { ...config.customConfig, ...prefixConfig };\n    }\n\n    return config;\n  }\n\n  private parseStringTagFieldExpression(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string,\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[]\n  ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue> {\n    const valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n    if (!valuesStr) {\n      return null;\n    }\n\n    const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n    return value.length ? { value } : null;\n  }\n\n  private updateFilterValue(\n    oldValue: RxRecordGridAdvancedFilterValue,\n    newValue: RxRecordGridAdvancedFilterValue,\n    replaceFilterValue = false\n  ): RxRecordGridAdvancedFilterValue {\n    if (!replaceFilterValue) {\n      newValue.filterValue = uniq(oldValue.filterValue.concat(newValue.filterValue));\n    }\n\n    newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n    return newValue;\n  }\n\n  private buildTagLabel(\n    filterValueLabels: string | string[] | INamedListOption[],\n    namedOptionTitles: string[],\n    filterValueSeparator = ', ',\n    namedOptionsSeparator = '; '\n  ): string {\n    return [\n      isString(filterValueLabels)\n        ? filterValueLabels\n        : isArray(filterValueLabels) && !isEmpty(filterValueLabels)\n        ? this.rxNamedListService.isNamedListOption(filterValueLabels[0])\n          ? filterValueLabels.map((value) => value.displayValue ?? value.value).join(filterValueSeparator)\n          : filterValueLabels.join(filterValueSeparator)\n        : '',\n      ...namedOptionTitles\n    ]\n      .filter(Boolean)\n      .join(namedOptionsSeparator);\n  }\n\n  private getNamedOptionTitles(\n    value: RxRecordGridAdvancedFilterValue,\n    options: IRecordGridColumnNamedFilterOption[]\n  ): string[] {\n    const optionGuids = options.map((option) => option.guid);\n\n    return value.namedOptions\n      .sort((option1, option2) => optionGuids.indexOf(option1) - optionGuids.indexOf(option2))\n      .map((guid) => options.find((option) => option.guid === guid)?.title);\n  }\n\n  private getDatetimeCustomConfig(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    config: AdvancedFilterOption,\n    fieldType: AdvancedFilterOptionDataType,\n    tagValueFormat: string\n  ): AdvancedFilterOptionConfig {\n    return {\n      getExpressionFieldTips: (\n        option: AdvancedFilterOption,\n        searchTerm: string\n      ): TagModel<AdvancedFilterExpressionTip>[] => {\n        return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig).concat(\n          this.defaultConfig[fieldType].getExpressionFieldTips(option, searchTerm)\n        );\n      },\n      needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n        return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n      },\n      formatValueForTag: (value: RxRecordGridAdvancedFilterValue): string => {\n        const formattedValue = value.filterValue\n          .filter((val) => val)\n          .map((date) => moment(date).format(tagValueFormat))\n          .join(' - ');\n\n        return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n      },\n      updateFilterValue: (\n        newValue: RxRecordGridAdvancedFilterValue,\n        oldValue: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption\n      ) => {\n        newValue.filterValue = this.defaultConfig[fieldType].updateFilterValue(\n          newValue.filterValue,\n          oldValue.filterValue,\n          filterOption\n        );\n\n        newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n        return newValue;\n      },\n      parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n        const { value: valuesStr } = this.getExpressionRawValues(filterOption, searchTerm);\n\n        if (!valuesStr) {\n          return null;\n        }\n\n        const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n        const [dateStr] = searchTerm.split('; ');\n\n        value.filterValue = this.defaultConfig[fieldType].parseTagFieldExpression(filterOption, dateStr)?.value ?? [];\n\n        return value.length ? { value } : null;\n      },\n      validateValue: (\n        value: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n      ) => this.defaultConfig[fieldType].validateValue(value.filterValue, filterOption)\n    };\n  }\n\n  private getExpressionRawValues(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string\n  ): { label: string; value: string } {\n    return [\n      `${filterOption.label}:`,\n      `${filterOption.label} ${this.adaptTexts.fromLabel}`,\n      `${filterOption.label} ${this.adaptTexts.toLabel}`\n    ].reduce(\n      (result, mask) => {\n        if (searchTerm.startsWith(mask)) {\n          result.label = mask;\n          result.value = searchTerm.replace(mask, '').trim();\n        }\n\n        return result;\n      },\n      { label: null, value: null }\n    );\n  }\n\n  private getFilterValueFromString(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    valuesStr: string\n  ): RxRecordGridAdvancedFilterValue {\n    const values = (valuesStr ?? '')\n      .trim()\n      .split(';')\n      .filter((str) => !isEmptyOrWhitespace(str))\n      .map((str) => str.trim());\n\n    const value = new RxRecordGridAdvancedFilterValue([]);\n\n    values.forEach((val) => {\n      const namedOptionGuid = namedFilterOptions.find((item) => item.title === val)?.guid;\n\n      if (namedOptionGuid) {\n        value.namedOptions.push(namedOptionGuid);\n      } else {\n        value.filterValue.push(\n          ...val\n            .split(',')\n            .map((str) => str.trim())\n            .filter(Boolean)\n        );\n      }\n    });\n\n    value.namedOptions = uniq(value.namedOptions);\n\n    return value;\n  }\n\n  private getNamedFilterOptionTips(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    option: AdvancedFilterOption,\n    filterOptionConfig: AdvancedFilterOptionConfig,\n    value = []\n  ): TagModel<AdvancedFilterExpressionTip>[] {\n    return (namedFilterOptions ?? []).map((item) =>\n      AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n        new RxRecordGridAdvancedFilterValue(value, [item.guid]),\n        option,\n        filterOptionConfig,\n        false,\n        formatAdvancedFilterTagText(option, item.title)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forEach, includes, isEmpty, isEqual, isString, keys, reduce } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IFilterExpression, IRxRecordGridFilter } from '../types/record-grid-filter.types';\nimport { IRecordGridFilterData, RecordGridFilterOperator } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridFilterHelperService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  // Convert predefined filter data from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // {\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\n  //\n  getRecordGridFilterDataFromPredefinedFilter(\n    filterJson: string,\n    recordGridFilters: IRxRecordGridFilter[]\n  ): IRecordGridFilterData {\n    if (!isEmpty(recordGridFilters) && filterJson) {\n      filterJson = this.normalizeFilterString(filterJson, recordGridFilters);\n    }\n\n    return this.clearFilterData(this.rxJsonParserService.tryParseJson<IRecordGridFilterData>(filterJson));\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  normalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      filterString = filterString.replace(`\"${filterComponent.guid}\"`, JSON.stringify(filterExpression));\n    });\n\n    return filterString;\n  }\n\n  // Convert predefined filter string from:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": {\n  //           \"1\": \"bar\"\n  //         }\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  //\n  // to:\n  // \"{\n  //   and: [\n  //     \"or\": [\n  //       {\n  //         \"eq\": \"36dfbd6f-7a19-4b4a-81bf-431fe41f6862\"\n  //       }\n  //     ]\n  //   ]\n  // }\"\n  //\n  denormalizeFilterString(filterString: string, filterComponents: IRxRecordGridFilter[]): string {\n    forEach(filterComponents, (filterComponent: IRxRecordGridFilter) => {\n      const filterExpression: IFilterExpression = {\n        [filterComponent.fieldId]: filterComponent.value,\n        ...(filterComponent.$DISPLAYVALUE$ && { $DISPLAYVALUE$: filterComponent.$DISPLAYVALUE$ })\n      };\n\n      if (filterExpression.$DISPLAYVALUE$) {\n        filterString = JSON.stringify(\n          JSON.parse(filterString),\n          this.replacer(this.denormalize(filterComponent.guid, filterExpression))\n        );\n      } else {\n        filterString = filterString.replace(JSON.stringify(filterExpression), `\"${filterComponent.guid}\"`);\n      }\n    });\n\n    return filterString;\n  }\n\n  // e.g.\n  // fn = denormalize(guid, {\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"foo\"});\n  //\n  // var filterExpression = {\n  //   \"and\": [\n  //     {\n  //       \"or\": [\n  //         {\n  //           \"eq\": {\n  //             \"536870913\": \"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\n  //             \"$DISPLAYVALUE$\": \"foo\"\n  //           }\n  //         }\n  //       ]\n  //     }\n  //   ]\n  // };\n  //\n  // JSON.stringify(filterExpression,replacer(fn));\n  // Here the filterExpression's keys are \"add\", “0”, “or”, “0”, “eq”\n  //\n  private replacer(fn: (guid: string, filterExpression: IFilterExpression) => any): any {\n    return (key: any, value: any) => (typeof key === 'string' && fn[key] ? fn[key](value) : value);\n  }\n\n  // This method declares, how object's value of an operator key should denormalize.\n  //\n  // Converts the Enum RecordGridFilterOperator\n  // to\n  // \"\n  // {\n  //   \"eq\": fn(),\n  //   \"gte\": fn(),\n  //   \"lte\": fn(),\n  //   \"like\": fn(),\n  //   \"ne\": fn(),\n  //   \"lt\": fn(),\n  //   \"gt\": fn(),\n  //   \"in\": fn()\n  // }\n  // \"\n  //  Note : fn() defines, how the value should be updated.\n  //\n  // e.g.\n  // Converts predefined filter string from:\n  //  {\"and\":[{\"or\":[{\"eq\":{\"Foo\":\"Bar\",\"$DISPLAYVALUE$\":\"Baz\"}}]}]}\n  // to:\n  //  {“and\":[{\"or\":[{\"eq\":\"aa88747c-8b8e-4dee-abf2-556b84b7d28e\"}]}]}\n  private denormalize(guid: string, filterExpression: IFilterExpression): any {\n    return reduce(\n      RecordGridFilterOperator,\n      (result, operator) => {\n        result[operator] = (value) => (isEqual(value, filterExpression) ? guid : value);\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AdvancedFilterOption, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { RowDataItem } from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxJsonParserService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  IRecordGridFilterColumnValue,\n  IRecordGridFilterData,\n  IRecordGridFilterDataOrOperator,\n  IRecordGridFilterOperator,\n  IRowDataItem,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport {\n  every,\n  filter as _filter,\n  find,\n  findKey,\n  get,\n  has,\n  includes,\n  intersection,\n  isEmpty,\n  isString,\n  keys,\n  map as _map,\n  reduce,\n  some,\n  values\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { defaultIfEmpty, filter, map } from 'rxjs/operators';\nimport { RxRecordGridAdvancedFilteringService } from '../../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport { IAdaptTableColumnConfig, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRxRecordGridFilter } from '../../common/types/record-grid-filter.types';\nimport { IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxRecordGridFilterService {\n  filtersKeywords = ['$NULL$', '$TIME$', '$DATE$', '$TIMESTAMP$', '$USER$'];\n\n  constructor(\n    public rxStringService: RxStringService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {}\n\n  clearFilterData(node: IPlainObject): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator].map(this.clearFilterData.bind(this)).filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case isString(node[operator]): {\n          result = null;\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getFilterForAvailableColumns(node: IPlainObject, filterableColumns: IRecordGridColumnWithMetadata[]): IPlainObject {\n    const nodeKeys = keys(node);\n    let result = node;\n\n    if (!isEmpty(nodeKeys)) {\n      const operator = nodeKeys[0];\n      const fieldId = Object.keys(node[operator])[0];\n\n      switch (true) {\n        case includes(['or', 'and'], operator): {\n          const children = node[operator]\n            .map((nodeChild) => this.getFilterForAvailableColumns(nodeChild, filterableColumns))\n            .filter((child) => Boolean(child));\n\n          if (!isEmpty(children)) {\n            node[operator] = children;\n          } else {\n            result = null;\n          }\n\n          break;\n        }\n        case !some(filterableColumns, { fieldId }): {\n          result = null;\n\n          break;\n        }\n        case includes(['eq'], operator): {\n          const fieldDefinition = find(filterableColumns, { fieldId }).fieldDefinition;\n\n          // remove selection field filter option that is not available\n          if (\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection &&\n            !has(fieldDefinition.optionNamesById, node[operator][fieldId])\n          ) {\n            result = null;\n          }\n\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  replaceKeywords(query: string): string {\n    const singleQuoteRegexTemplate = '([^|^\"])\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"(?!\")';\n\n    const tripleQuoteRegexTemplate =\n      '([^|^\"])\"\"\"(' + this.filtersKeywords.join('|').replace(/\\$/g, '\\\\$') + ')\"\"\"(?!\")';\n\n    const singleQuoteRegex = new RegExp(singleQuoteRegexTemplate, 'g');\n    const tripleQuoteRegex = new RegExp(tripleQuoteRegexTemplate, 'g');\n\n    return query.replace(singleQuoteRegex, '$1$2').replace(tripleQuoteRegex, '$1\"$2\"');\n  }\n\n  generateTextFilterQuery(text: string, columns: IAdaptTableColumnConfig[]): string {\n    let filterQuery = null;\n\n    if (text) {\n      const query = columns\n        .filter((column) => !column.hidden && column.searchable)\n        .map((column) => {\n          const fieldId = this.getQueryFilterField(column.field);\n          let queryString = '';\n\n          if (\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.character.shortName ||\n            column.filterType === RX_RECORD_DEFINITION.dataTypes.localizedCharacter.shortName\n          ) {\n            queryString = `${fieldId} LIKE \"%${this.escapeDoubleQuotes(text).replace(/[%_]/g, '\\\\$&')}%\"`;\n          } else {\n            if (!isNaN(text as any)) {\n              queryString = `${fieldId} = \"${this.escapeDoubleQuotes(text)}\"`;\n            }\n          }\n\n          return queryString;\n        })\n        .filter(Boolean)\n        .join(' OR ');\n\n      filterQuery = query ? `(${query})` : '';\n    }\n\n    return filterQuery;\n  }\n\n  addQueries(...queries: string[]): string {\n    return _filter(queries, Boolean).join(' AND ');\n  }\n\n  joinQueryFilters(queries: string[], logic: QueryFiltersLogic): string {\n    const query = queries.join(logic === QueryFiltersLogic.And ? ' AND ' : ' OR ');\n\n    return query ? `(${query})` : '';\n  }\n\n  /**\n   * Convert saved filter preset data from:\n   * {\n   *   and: {\n   *     \"or\": [\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"bar\"\n   *         }\n   *       },\n   *       {\n   *         \"eq\": {\n   *           \"1\": \"foo\"\n   *         }\n   *       }\n   *     ]\n   *   }\n   * }\n   *\n   *\n   * to:\n   * [{\n   *   filterOptionId: '1',\n   *   value: ['bar', 'foo']\n   * }]\n   */\n  getAdvancedFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    return forkJoin(\n      filterData && filterData.and\n        ? filterData.and.map((gridFilterData: IRecordGridFilterData): Observable<SelectedAdvancedFilter> => {\n            const filterLogic = Object.keys(gridFilterData)[0] as RecordGridFilterDataLogic;\n            const filterOperators = gridFilterData[filterLogic] as IRecordGridFilterOperator[];\n            const firstFilterOperator = values(filterOperators[0])[0];\n            const columnField = String(Object.keys(firstFilterOperator)[0]);\n            let fieldDefinition = fieldDefinitionsById[columnField];\n\n            const fieldDefinition$ = fieldDefinition\n              ? of(fieldDefinition)\n              : this.rxRecordGridUtilsService.getFieldDefinition(columnField, primaryRecordDefinition);\n\n            return fieldDefinition$.pipe(\n              filter<IFieldDefinition>(Boolean),\n              map((newFieldDefinition) => {\n                fieldDefinition = newFieldDefinition;\n\n                const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n                if (!fieldDefinitionsById[columnField]) {\n                  this.rxRecordDefinitionService.addFieldDefinitionToMap(\n                    fieldDefinition,\n                    fieldDefinitionsById,\n                    columnField\n                  );\n\n                  fieldDefinitionsById = primaryRecordDefinition.fieldDefinitionsById = {\n                    ...fieldDefinitionsById,\n                    ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n                  };\n\n                  const associationDescriptor = this.rxRecordGridUtilsService.findAssociationDescriptor(\n                    associationDescriptors,\n                    this.rxRecordGridUtilsService.getFieldLocator(columnField)\n                  );\n\n                  filterOptions.push(\n                    this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                      columnField,\n                      this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, associationDescriptor),\n                      fieldDefinition,\n                      filterConfig,\n                      true\n                    )\n                  );\n                }\n\n                return filterConfig.getSelectedAdvancedFilterData(\n                  filterLogic,\n                  filterOperators,\n                  fieldDefinition,\n                  columnField\n                );\n              })\n            );\n          })\n        : []\n    ).pipe(\n      defaultIfEmpty([]),\n      map((advancedFiltersData) => advancedFiltersData.filter(Boolean))\n    );\n  }\n\n  getQueryFromRecordGridFilterData(\n    filterData: IRecordGridFilterData,\n    fieldDefinitionsById: IFieldDefinitionsById\n  ): string {\n    const primitiveOperators = [\n      RecordGridFilterOperator.Eq,\n      RecordGridFilterOperator.Like,\n      RecordGridFilterOperator.Ne,\n      RecordGridFilterOperator.Lt,\n      RecordGridFilterOperator.Lte,\n      RecordGridFilterOperator.Gt,\n      RecordGridFilterOperator.Gte,\n      RecordGridFilterOperator.In,\n      'regex'\n    ];\n\n    const isPrimitive = (expression: IRecordGridFilterDataOrOperator): expression is IRecordGridFilterOperator => {\n      return intersection(primitiveOperators.slice(), keys(expression)).length > 0;\n    };\n\n    const evaluatePrimitive = (expression: IRecordGridFilterOperator) => {\n      return reduce(\n        expression,\n        (operatorsResult, condition, operator: RecordGridFilterOperator) => {\n          return (\n            operatorsResult +\n            reduce(\n              condition as IRecordGridFilterColumnValue,\n              (operatorValuesResult, conditionValue, conditionId) => {\n                const fieldDefinition = fieldDefinitionsById[conditionId];\n                let filterOperator = operator;\n                let value = conditionValue;\n\n                const isTextField =\n                  !!fieldDefinition &&\n                  includes(\n                    [\n                      RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n                      RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType\n                    ],\n                    fieldDefinition.resourceType\n                  );\n\n                if (isTextField) {\n                  const { isLikeOperation, filterValue } = this.getStringDataTypeFilterData(\n                    conditionValue,\n                    fieldDefinition\n                  );\n\n                  filterOperator = isLikeOperation ? RecordGridFilterOperator.Like : filterOperator;\n                  value = filterValue;\n                }\n                // following code removes the $DISPLAYVALUE$ from the filter expression\n                // e.g.  {\"and\":[{\"or\":[{\"eq\":{\"536870913\":\"AGGADG1AAXPMRARKA0FGRKA0FG6I01\",\"$DISPLAYVALUE$\":\"Alex\"}}]}]}\n                if (conditionId === '$DISPLAYVALUE$') {\n                  return operatorValuesResult;\n                }\n\n                return operatorValuesResult + this.getQueryExpression(value, conditionId, filterOperator);\n              },\n              ''\n            )\n          );\n        },\n        ''\n      );\n    };\n\n    let evaluateExpression = (expression: IRecordGridFilterDataOrOperator): string => {\n      if (isPrimitive(expression)) {\n        return evaluatePrimitive(expression);\n      }\n\n      return reduce(\n        expression,\n        (result, childExpression, operator) => {\n          const childExpressionResult = _map(childExpression, evaluateExpression);\n\n          switch (operator) {\n            case RecordGridFilterDataLogic.And:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n            case RecordGridFilterDataLogic.Or:\n              return result + `(${childExpressionResult.join(' OR ')})`;\n            default:\n              return result + `(${childExpressionResult.join(' AND ')})`;\n          }\n        },\n        ''\n      );\n    };\n\n    evaluateExpression = evaluateExpression.bind(this);\n\n    return evaluateExpression(filterData);\n  }\n\n  getSelectedFiltersFromPredefinedFilter(\n    filters: string,\n    recordGridFilters: IRxRecordGridFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    primaryRecordDefinition: IRecordDefinition,\n    filterOptions: AdvancedFilterOption[],\n    associationDescriptors: IAssociationDescriptor[]\n  ): Observable<SelectedAdvancedFilter[]> {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      filters,\n      this.deserializeNamedOptions(recordGridFilters)\n    );\n\n    const selectedFilters$ = this.getAdvancedFilterData(\n      recordGridFilterData,\n      fieldDefinitionsById,\n      recordGridFilterConfigs,\n      primaryRecordDefinition,\n      filterOptions,\n      associationDescriptors\n    );\n\n    return selectedFilters$;\n  }\n\n  getRecordGridFilterDataFromAdvancedFilter(\n    filters: SelectedAdvancedFilter[],\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap\n  ): IRecordGridFilterData {\n    const mappedFilters = filters.map((filterData): IRecordGridFilterDataOrOperator => {\n      let mappedFilter = null;\n      const fieldId = String(filterData.filterOptionId);\n      const fieldDefinition = fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        mappedFilter = filterConfig.getRecordGridFilterData(\n          filterData.value,\n          fieldDefinition,\n          fieldId,\n          namedFilterOptions && namedFilterOptions[fieldId]\n        );\n      }\n\n      return mappedFilter;\n    });\n\n    return mappedFilters.length\n      ? {\n          and: mappedFilters\n        }\n      : {};\n  }\n\n  getQueryFilterField(fieldId: string): string {\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(fieldId)) {\n      return `\\${${fieldId}}`;\n    } else {\n      return `'${fieldId}'`;\n    }\n  }\n\n  buildQueryFilter(fieldId: string, operator: string, value: string | number): string {\n    const needQuotes = isString(value) && !this.filtersKeywords.includes(value);\n    const result = isString(value) ? (needQuotes ? `\"${this.escapeDoubleQuotes(value)}\"` : value) : String(value);\n\n    return `${this.getQueryFilterField(fieldId)} ${operator} ${result}`;\n  }\n\n  filterRows(\n    rows: IRowDataItem[],\n    filters: SelectedAdvancedFilter[],\n    recordDefinition: IRecordDefinition,\n    filterConfigs: IRecordGridFilterConfigs\n  ): IRowDataItem[] {\n    const filterData = this.getRecordGridFilterDataFromAdvancedFilter(\n      filters,\n      recordDefinition.fieldDefinitionsById,\n      filterConfigs\n    );\n\n    return rows.filter((row: IRowDataItem) => {\n      if (row.groupField) {\n        row.items = this.getFilteredItems(row.items, filterData, recordDefinition);\n\n        return row.items.length;\n      } else {\n        return every(filterData.and, (filterExpression) => this.matchRow(row, filterExpression, recordDefinition));\n      }\n    });\n  }\n\n  private getFilteredItems(\n    rowDataItems: RowDataItem[],\n    filterData: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): RowDataItem[] {\n    return reduce(\n      rowDataItems,\n      (filteredItems, itemsRow) => {\n        let { items = [] } = itemsRow;\n\n        if (\n          !itemsRow.items &&\n          every(filterData.and, (filterExpression) => this.matchRow(itemsRow, filterExpression, recordDefinition))\n        ) {\n          filteredItems.push(itemsRow);\n        } else {\n          items = this.getFilteredItems(items, filterData, recordDefinition);\n\n          if (items.length) {\n            filteredItems.push({ ...itemsRow, items });\n          }\n        }\n\n        return filteredItems;\n      },\n      []\n    );\n  }\n\n  private matchRow(\n    row: IRowDataItem | RowDataItem,\n    filterExpression: IRecordGridFilterData,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(filterExpression);\n\n    switch (operator) {\n      case 'and':\n        return every(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      case 'or':\n        return some(filterExpression[operator], (childExpression) =>\n          this.checkCondition(row, childExpression, recordDefinition)\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  private checkCondition(\n    row: IRowDataItem | RowDataItem,\n    childExpression: IRecordGridFilterDataOrOperator,\n    recordDefinition: IRecordDefinition\n  ): boolean {\n    const operator = findKey(childExpression);\n    const fieldId = findKey(childExpression[operator]);\n    const filterValue = childExpression[operator][fieldId];\n    const rowValue = row[fieldId];\n\n    if (\n      recordDefinition.fieldDefinitionsById[fieldId].resourceType ===\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType\n    ) {\n      switch (operator) {\n        case 'eq':\n          return moment(rowValue).isSame(filterValue);\n        case 'lte':\n          return moment(rowValue).isSameOrBefore(filterValue);\n        case 'lt':\n          return moment(rowValue).isBefore(filterValue);\n        case 'gte':\n          return moment(rowValue).isSameOrAfter(filterValue);\n        case 'gt':\n          return moment(rowValue).isAfter(filterValue);\n\n        default:\n          return false;\n      }\n    } else {\n      return operator === 'eq' ? this.rxStringService.caseInsensitiveIsEqual(rowValue, filterValue) : false;\n    }\n  }\n\n  private escapeDoubleQuotes(text: string): string {\n    return text.replace(/\"/g, '\"\"');\n  }\n\n  private getQueryExpression(conditionValue: any, conditionId: string, operator: RecordGridFilterOperator): string {\n    const value = isString(conditionValue) ? '\"' + conditionValue + '\"' : conditionValue;\n\n    conditionId = this.getQueryFilterField(conditionId);\n\n    switch (operator) {\n      case RecordGridFilterOperator.Eq:\n        return conditionId + '=' + value;\n      case RecordGridFilterOperator.Like:\n        return conditionId + ' LIKE ' + value;\n      case RecordGridFilterOperator.Ne:\n        return conditionId + '!=' + value;\n      case RecordGridFilterOperator.Lt:\n        return conditionId + '<' + value;\n      case RecordGridFilterOperator.Lte:\n        return conditionId + '<=' + value;\n      case RecordGridFilterOperator.Gt:\n        return conditionId + '>' + value;\n      case RecordGridFilterOperator.Gte:\n        return conditionId + '>=' + value;\n      case RecordGridFilterOperator.In:\n        return conditionId + ' IN ' + value;\n      default:\n        return conditionId + '=' + value;\n    }\n  }\n\n  getStringDataTypeFilterData(\n    filterValue: string,\n    fieldDefinition: IFieldDefinition\n  ): { isLikeOperation: boolean; filterValue: string } {\n    let isLikeOperation = false;\n\n    if (!get(fieldDefinition.searchDefinition, 'enableFTSSearch')) {\n      if (includes(filterValue, '%')) {\n        const filterValueSplitData = filterValue.split(/\\\\\\\\/);\n\n        isLikeOperation = some(filterValueSplitData, (value) => value.replace(/\\\\%/g, '').match('%'));\n\n        if (!isLikeOperation) {\n          filterValue = _map(filterValueSplitData, (value) => value.replace(/\\\\%/g, '%')).join('\\\\');\n        }\n      } else {\n        filterValue = filterValue.replace('\\\\\\\\', '\\\\');\n      }\n    }\n\n    return { isLikeOperation, filterValue };\n  }\n\n  clearRemovedNamedFilterOptions(\n    selectedFilters: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[],\n    namedFilterOptions: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return selectedFilters.reduce((result, filter) => {\n      const namedFilterOptionsGuids = namedFilterOptions[filter.filterOptionId]?.map((option) => option.guid) ?? [];\n\n      filter.value.namedOptions = filter.value.namedOptions.filter((option) =>\n        namedFilterOptionsGuids.includes(option)\n      );\n\n      if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(filter.value)) {\n        result.push(filter);\n      }\n\n      return result;\n    }, []);\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterNumberDataType,\n  AdvancedFilterNumberTypeParams,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionDataType,\n  AdvancedFilterSelectionTypeData,\n  AdvancedFilterStringDataType,\n  booleanDataTypeBlankValue,\n  NumberOrBigNumber,\n  RxSelectOption,\n  SelectedAdvancedFilter\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  ISelectionFieldDefinition,\n  RecordFieldOption,\n  RX_RECORD_DEFINITION,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { IPlainObject, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RxNumberUtilsService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { castArray, chain, compact, find, get, isEmpty, isString, map as _map } from 'lodash';\nimport moment from 'moment-es6';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { QueryFiltersLogic } from '../types/query-filters-logic.enum';\nimport {\n  ITagInfo,\n  IRecordGridFilterConfig,\n  IRecordGridFilterConfigs\n} from '../../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterData,\n  IRecordGridFilterOperator,\n  IRecordGridNamedFilterOption,\n  RecordGridFilterDataLogic,\n  RecordGridFilterOperator,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { IRecordGridColumnNamedFilterOption, RxAdvancedFilterDateDataType } from '../../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, NamedListTypeAheadOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridFilterConfigService {\n  private associatedFieldIdPatternRegExp: RegExp = new RegExp(\n    `'(${RX_RECORD_GRID.associatedFieldIdPrefixPattern}\\\\d+)'`,\n    'g'\n  );\n\n  constructor(\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxNumberUtilsService: RxNumberUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private translateService: TranslateService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {}\n\n  getConfigs(): IRecordGridFilterConfigs {\n    const textColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.string,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n        const builtQuery = chain(filterTag.value.filterValue)\n          .filter(Boolean)\n          .map((optionValue: NamedListTypeAheadOption) => {\n            const { isLikeOperation, filterValue } = this.rxRecordGridFilterService.getStringDataTypeFilterData(\n              get(optionValue, 'value', optionValue),\n              fieldDefinition\n            );\n\n            return this.rxRecordGridFilterService.buildQueryFilter(\n              fieldId,\n              isLikeOperation ? 'like' : '=',\n              filterValue.trim()\n            );\n          })\n          .concat(selectedNamedOptionExpressions)\n          .value();\n\n        return this.rxRecordGridFilterService.joinQueryFilters(builtQuery, QueryFiltersLogic.Or);\n      },\n      getRecordGridFilterData: (value, fieldDefinition, fieldId, namedFilterOptions) => {\n        const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n        const filterOperators = value.filterValue.map(\n          (filterValue: NamedListTypeAheadOption): IRecordGridFilterOperator => {\n            const operators = this.getRecordGridFilterOperator(\n              RecordGridFilterOperator.Eq,\n              fieldId,\n              get(filterValue, 'value', filterValue).trim()\n            );\n\n            const displayValue = get(filterValue, 'displayValue');\n\n            if (fieldDefinition.namedListDefinition && displayValue) {\n              operators.eq['$DISPLAYVALUE$'] = displayValue;\n            }\n\n            return operators;\n          }\n        );\n\n        return {\n          or: filterOperators.concat(namedFilterOptionOperators)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        const filterValues: string[] = [];\n        const namedListFilterValues: INamedListOption[] = [];\n        const namedFilterOptionsGuids = [];\n\n        if (filterLogic === RecordGridFilterDataLogic.Or) {\n          filterOperators.forEach((filterOperator: IRecordGridFilterOperator) => {\n            const operator = Object.keys(filterOperator)[0];\n            const value = filterOperator[operator][fieldId];\n\n            if (isString(value)) {\n              if (fieldDefinition.namedListDefinition) {\n                const displayValue = filterOperator[operator]['$DISPLAYVALUE$'];\n\n                namedListFilterValues.push({ displayValue, value, title: '', contextualFields: [] });\n              } else {\n                filterValues.push(value);\n              }\n            } else if (value[RecordGridNamedFilterOptionKey]) {\n              namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n            }\n          });\n        }\n\n        const rxRecordGridAdvancedFilterValue = isEmpty(namedListFilterValues)\n          ? new RxRecordGridAdvancedFilterValue(filterValues, namedFilterOptionsGuids)\n          : new RxRecordGridAdvancedFilterValue(namedListFilterValues, namedFilterOptionsGuids);\n\n        return {\n          filterOptionId: fieldId,\n          value: rxRecordGridAdvancedFilterValue\n        };\n      },\n      getToolbarTagInfo: ({ primaryRecordDefinition, value, tag, fieldId, namedFilterOptions }) => {\n        const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(fieldId);\n        let associationDescriptor: IAssociationDescriptor;\n\n        return this.rxRecordGridUtilsService.getAssociationDescriptor(fieldId, primaryRecordDefinition).pipe(\n          mergeMap((loadedAssociationDescriptor) => {\n            associationDescriptor = loadedAssociationDescriptor;\n\n            return this.rxRecordGridUtilsService.getDisplayFieldDescriptor(\n              fieldId,\n              primaryRecordDefinition,\n              associationDescriptor && associationDescriptor.recordDefinitionName\n            );\n          }),\n          mergeMap((displayFieldDefinition) => {\n            const isRecordDisplayField = fieldLocator.fieldId !== String(displayFieldDefinition.id);\n\n            let displayValuesData$: Observable<{\n              displayValues: RxRecordGridAdvancedFilterValue<AdvancedFilterStringDataType | INamedListOption[]>;\n              label: string;\n            }>;\n\n            if (isRecordDisplayField) {\n              const filterValues = this.rxNamedListService.getNamesFromTypeAheadOptions(value.filterValue);\n\n              displayValuesData$ = this.rxRecordInstanceUtilsService\n                .getFieldValues(associationDescriptor.recordDefinitionName, filterValues, [\n                  String(RX_RECORD_DEFINITION.coreFieldIds.id),\n                  String(displayFieldDefinition.id)\n                ])\n                .pipe(\n                  map((displayValueRows) => {\n                    const nameWithAssociationLabel = compact([\n                      this.rxDefinitionNameService.getDisplayName(associationDescriptor.associationDefinition.name),\n                      displayFieldDefinition.name\n                    ]).join(' > ');\n\n                    const displayValues = value.filterValue.map((strFilterValue) => {\n                      const row = find(\n                        displayValueRows,\n                        (displayValueRow) => displayValueRow[RX_RECORD_DEFINITION.coreFieldIds.id] === strFilterValue\n                      );\n\n                      return row ? row[displayFieldDefinition.id] : strFilterValue;\n                    });\n\n                    return {\n                      displayValues: new RxRecordGridAdvancedFilterValue(displayValues),\n                      label: nameWithAssociationLabel\n                    };\n                  })\n                );\n            } else {\n              displayValuesData$ = of({ displayValues: value, label: tag.data.filterOption.label });\n            }\n\n            return displayValuesData$.pipe(\n              map(({ displayValues, label }) => {\n                const displayTagValue = displayValues.filterValue\n                  .map((filterValue) => {\n                    const filterValueExpression: string = get(filterValue, 'value', filterValue);\n\n                    const filterDisplayText: string =\n                      get(filterValue, 'displayValue') ?? get(filterValue, 'value', filterValue);\n\n                    const text =\n                      filterValueExpression === '$USER$'\n                        ? this.translateService.instant(\n                            'com.bmc.arsys.rx.client.view-components.record-grid.filters.me.label'\n                          )\n                        : filterDisplayText;\n\n                    const tooltip = filterValue?.displayValue\n                      ? `${filterValue.displayValue} (${filterValue.value})`\n                      : filterValue?.value ?? filterValue;\n\n                    return { tooltip, text } as ITagInfo;\n                  })\n                  .concat(\n                    displayValues.namedOptions.map((namedOption: string) => {\n                      const namedFilterOption =\n                        namedFilterOptions.find((option) => option.guid === namedOption)?.title || namedOption;\n\n                      return { text: namedFilterOption, tooltip: namedFilterOption } as ITagInfo;\n                    })\n                  );\n\n                const displayText = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.text).join(', ');\n                const tooltip = displayTagValue.map((tagInfo: ITagInfo) => tagInfo.tooltip).join(', ');\n\n                return {\n                  text: `${label}: ${displayText}`,\n                  tooltip: `${label}: ${tooltip}`\n                };\n              })\n            );\n          })\n        );\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => fieldDefinition\n    };\n\n    const numericColumnFilterConfig: IRecordGridFilterConfig<\n      RxRecordGridAdvancedFilterValue<AdvancedFilterNumberDataType>\n    > = {\n      filterOptionDataType: AdvancedFilterOptionDataType.number,\n      getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n        const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n        const [fromValue, toValue] = filterTag.value.filterValue;\n        const queries: string[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', String(toValue)));\n        }\n\n        const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n        return this.rxRecordGridFilterService.joinQueryFilters(\n          valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n          QueryFiltersLogic.Or\n        );\n      },\n      getRecordGridFilterData: (value, fieldDefinition: IFieldDefinition, fieldId) => {\n        const [fromValue, toValue] = value.filterValue;\n        const queries: IRecordGridFilterOperator[] = [];\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, String(fromValue)));\n        }\n\n        if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n          queries.push(this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, String(toValue)));\n        }\n\n        return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n      },\n      getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): AdvancedFilterNumberTypeParams => {\n        return {\n          minValue: <NumberOrBigNumber>(<unknown>fieldDefinition.minValue),\n          maxValue: <NumberOrBigNumber>(<unknown>fieldDefinition.maxValue)\n        };\n      },\n      getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n        /**\n         * Convert from:\n         *\n         *  \"and\": [\n         *    {\n         *      \"gte\": {\n         *        \"536870917\": -5\n         *      }\n         *    },\n         *    {\n         *      \"lte\": {\n         *        \"536870917\": -1 // or \"-1\"\n         *      }\n         *    }\n         *  ]\n         *\n         * to:\n         *\n         * {\n         *   filterOptionId: '536870917',\n         *   value: [-5, -1]\n         * }\n         *\n         */\n        let filterValue: AdvancedFilterNumberDataType = [null, null];\n\n        const processRange = (operators: IRecordGridFilterOperator[]) => {\n          const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n          if (gteOperator) {\n            const fromValue = parseFloat(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(fromValue)) {\n              filterValue[0] = fromValue;\n            }\n          }\n\n          const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n          if (lteOperator) {\n            const toValue = parseFloat(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(toValue)) {\n              filterValue[1] = toValue;\n            }\n          }\n        };\n\n        if (filterLogic === RecordGridFilterDataLogic.And) {\n          processRange(filterOperators);\n        } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n          const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n          if (andOperator) {\n            processRange(andOperator[RecordGridFilterDataLogic.And]);\n          } else if (filterOperators.length === 1) {\n            let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n            if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n              eqValue = parseFloat(eqValue);\n\n              filterValue = [eqValue, eqValue];\n            }\n          }\n        }\n\n        const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n        return {\n          filterOptionId: fieldId,\n          value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n        };\n      }\n    };\n\n    return {\n      [RX_RECORD_DEFINITION.resourceTypes.character]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedCharacter]: textColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.attachment]: textColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.integer]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.decimal]: numericColumnFilterConfig,\n      [RX_RECORD_DEFINITION.resourceTypes.real]: numericColumnFilterConfig,\n\n      [RX_RECORD_DEFINITION.resourceTypes.selection]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterSelectionDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.selection,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            filterTag.value.filterValue\n              .map((filterValue) => this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', filterValue))\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getDataForAdvancedFilter: (fieldDefinition: ISelectionFieldDefinition): AdvancedFilterSelectionTypeData => {\n          const selectOptions: RxSelectOption[] = _map(\n            fieldDefinition.optionLabelsById,\n            (label, optionId): RxSelectOption => ({\n              id: optionId,\n              name: label\n            })\n          );\n\n          if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.optional) {\n            selectOptions.unshift({\n              id: '$NULL$',\n              name: this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n              )\n            });\n          }\n\n          return {\n            selectOptions,\n            selectTexts: null\n          };\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const namedFilterOptionOperators = this.getNamedFilterOptionsOperators(value, fieldId);\n\n          return {\n            or: value.filterValue\n              .map((optionId): IRecordGridFilterOperator => {\n                return this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, optionId);\n              })\n              .concat(namedFilterOptionOperators)\n          };\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          const filterValue: string[] = [];\n          const namedFilterOptionsGuids = [];\n\n          if (filterLogic === RecordGridFilterDataLogic.Or) {\n            filterOperators.forEach((filterOperator) => {\n              const operator = Object.keys(filterOperator)[0];\n\n              if (operator === RecordGridFilterOperator.Eq) {\n                const value = filterOperator[operator][fieldId];\n\n                if (isString(value)) {\n                  filterValue.push(value);\n                } else if (value[RecordGridNamedFilterOptionKey]) {\n                  namedFilterOptionsGuids.push(value[RecordGridNamedFilterOptionKey]);\n                }\n              }\n            });\n          }\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionsGuids)\n          };\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.timeOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.time,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('HH:mm:ss')));\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('HH:mm:ss')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('HH:mm:ss') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n          const processRange = (operators: IRecordGridFilterOperator[]) => {\n            const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n            if (gteOperator) {\n              const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId], 'LTS');\n\n              if (fromValue.isValid()) {\n                filterValue[0] = fromValue;\n              }\n            }\n\n            const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n            if (lteOperator) {\n              const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId], 'LTS');\n\n              if (toValue.isValid()) {\n                filterValue[1] = toValue;\n              }\n            }\n          };\n\n          if (filterLogic === RecordGridFilterDataLogic.And) {\n            processRange(filterOperators);\n          } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n            const andOperator = find(\n              filterOperators,\n              (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]\n            );\n\n            if (andOperator) {\n              processRange(andOperator[RecordGridFilterDataLogic.And]);\n            } else if (filterOperators.length === 1) {\n              let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n              if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n                eqValue = moment(eqValue, 'LTS');\n\n                filterValue = [eqValue, eqValue];\n              }\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return {\n            filterOptionId: fieldId,\n            value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n          };\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateOnly]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.date,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue && fromValue.isValid()) {\n            queries.push(\n              this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.format('YYYY-MM-DD'))\n            );\n          }\n\n          if (toValue && toValue.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.format('YYYY-MM-DD')));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Gte,\n                fieldId,\n                fromValue && fromValue.isValid() ? fromValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          if (toValue) {\n            queries.push(\n              this.getRecordGridFilterOperator(\n                RecordGridFilterOperator.Lte,\n                fieldId,\n                toValue && toValue.isValid() ? toValue.format('YYYY-MM-DD') : ''\n              )\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n      [RX_RECORD_DEFINITION.resourceTypes.dateTime]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<RxAdvancedFilterDateDataType>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.datetime,\n        getQueryFilter: (filterTag, fieldDefinition, fieldId, namedFilterOptions) => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n          const [fromValue, toValue] = filterTag.value.filterValue.map((value) => moment(value));\n          const queries: string[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '>=', fromValue.toISOString()));\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(this.rxRecordGridFilterService.buildQueryFilter(fieldId, '<=', toValue.toISOString()));\n          }\n\n          const valueQuery = this.rxRecordGridFilterService.joinQueryFilters(queries, QueryFiltersLogic.And);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            valueQuery ? [valueQuery, ...selectedNamedOptionExpressions] : selectedNamedOptionExpressions,\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (value, fieldDefinition, fieldId) => {\n          const [fromValue, toValue] = value.filterValue.map((value) => moment(value));\n          const queries: IRecordGridFilterOperator[] = [];\n\n          if (fromValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Gte, fieldId, fromValue.toISOString())\n            );\n          }\n\n          if (toValue?.isValid()) {\n            queries.push(\n              this.getRecordGridFilterOperator(RecordGridFilterOperator.Lte, fieldId, toValue.toISOString())\n            );\n          }\n\n          return this.getFilterRangeDataOperator(queries, this.getNamedFilterOptionsOperators(value, fieldId));\n        },\n        getSelectedAdvancedFilterData: (filterLogic, filterOperators, fieldDefinition, fieldId) => {\n          return this.getDateSelectedAdvancedFilterData(fieldId, filterLogic, filterOperators);\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.boolean]: <\n        IRecordGridFilterConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        filterOptionDataType: AdvancedFilterOptionDataType.boolean,\n        getQueryFilter: (\n          filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string,\n          namedFilterOptions\n        ): string => {\n          const selectedNamedOptionExpressions = this.getSelectedNamedOptionExpressions(namedFilterOptions, filterTag);\n\n          return this.rxRecordGridFilterService.joinQueryFilters(\n            castArray(filterTag.value.filterValue)\n              .map((filterValue) =>\n                this.rxRecordGridFilterService.buildQueryFilter(fieldId, '=', this.getBooleanFilterValue(filterValue))\n              )\n              .concat(selectedNamedOptionExpressions),\n            QueryFiltersLogic.Or\n          );\n        },\n        getRecordGridFilterData: (\n          value: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>,\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ): IRecordGridFilterData => {\n          return {\n            or: castArray(value.filterValue)\n              .map(\n                (filterValue): IRecordGridFilterOperator =>\n                  this.getRecordGridFilterOperator(\n                    RecordGridFilterOperator.Eq,\n                    fieldId,\n                    this.getBooleanFilterValue(filterValue)\n                  )\n              )\n              .concat(this.getNamedFilterOptionsOperators(value, fieldId))\n          };\n        },\n        getDataForAdvancedFilter: (fieldDefinition: IFieldDefinition): IPlainObject => {\n          return {\n            selectOptions: [\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.true'),\n                id: true\n              },\n              {\n                name: this.translateService.instant('com.bmc.arsys.rx.client.common.false'),\n                id: false\n              },\n              {\n                name: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.view-components.record-grid.filters.blank.label'\n                ),\n                id: 'blank'\n              }\n            ],\n            isRequired: fieldDefinition.fieldOption === RecordFieldOption.Required\n          };\n        },\n        getSelectedAdvancedFilterData: (\n          filterLogic: RecordGridFilterDataLogic,\n          filterOperators: IRecordGridFilterOperator[],\n          fieldDefinition: IFieldDefinition,\n          fieldId: string\n        ) => {\n          let filterValue;\n\n          if (fieldDefinition.fieldOption === RecordFieldOption.Required) {\n            if (filterOperators.length === 1) {\n              const eqOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterOperator.Eq]);\n\n              if (eqOperator) {\n                const savedFilterValue = eqOperator[RecordGridFilterOperator.Eq][fieldId];\n\n                if (savedFilterValue === '$NULL$') {\n                  filterValue = null;\n                } else {\n                  filterValue = [savedFilterValue === 'true'];\n                }\n              }\n            } else {\n              filterValue = null;\n            }\n          } else {\n            filterValue = [];\n\n            if (filterLogic === RecordGridFilterDataLogic.Or) {\n              filterOperators.forEach((filterOperator) => {\n                const operator = Object.keys(filterOperator)[0];\n\n                if (operator === RecordGridFilterOperator.Eq) {\n                  const value = filterOperator[operator][fieldId];\n\n                  if (!value[RecordGridNamedFilterOptionKey]) {\n                    switch (value) {\n                      case 'true':\n                        filterValue.push(true);\n                        break;\n                      case '$NULL$':\n                        filterValue.push(booleanDataTypeBlankValue);\n                        break;\n                      default:\n                        filterValue.push(false);\n                        break;\n                    }\n                  }\n                }\n              });\n            }\n          }\n\n          const namedFilterOptionGuids: string[] = this.getNamedFilterOptionGuids(filterOperators, fieldId);\n\n          return filterValue\n            ? {\n                filterOptionId: fieldId,\n                value: new RxRecordGridAdvancedFilterValue(filterValue, namedFilterOptionGuids)\n              }\n            : null;\n        }\n      },\n\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstance]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.object]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.recordInstanceProcessVariable]: null,\n      [RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance]: null\n    };\n  }\n\n  private getDateSelectedAdvancedFilterData(\n    fieldId: string,\n    filterLogic: RecordGridFilterDataLogic,\n    filterOperators: IRecordGridFilterOperator[]\n  ): SelectedAdvancedFilter {\n    let filterValue: [moment.Moment, moment.Moment] = [null, null];\n\n    const processRange = (operators: IRecordGridFilterOperator[]) => {\n      const gteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Gte]);\n\n      if (gteOperator) {\n        const fromValue = moment(gteOperator[RecordGridFilterOperator.Gte][fieldId]);\n\n        if (fromValue.isValid()) {\n          filterValue[0] = fromValue;\n        }\n      }\n\n      const lteOperator = find(operators, (filterOperator) => filterOperator[RecordGridFilterOperator.Lte]);\n\n      if (lteOperator) {\n        const toValue = moment(lteOperator[RecordGridFilterOperator.Lte][fieldId]);\n\n        if (toValue.isValid()) {\n          filterValue[1] = toValue;\n        }\n      }\n    };\n\n    if (filterLogic === RecordGridFilterDataLogic.And) {\n      processRange(filterOperators);\n    } else if (filterLogic === RecordGridFilterDataLogic.Or) {\n      const andOperator = find(filterOperators, (filterOperator) => filterOperator[RecordGridFilterDataLogic.And]);\n\n      if (andOperator) {\n        processRange(andOperator[RecordGridFilterDataLogic.And]);\n      } else if (filterOperators.length === 1) {\n        let eqValue = filterOperators[0][RecordGridFilterOperator.Eq][fieldId];\n\n        if (eqValue !== '$NULL$' && !eqValue[RecordGridNamedFilterOptionKey]) {\n          eqValue = moment(eqValue);\n\n          filterValue = [eqValue, eqValue];\n        }\n      }\n    }\n\n    return {\n      filterOptionId: fieldId,\n      value: new RxRecordGridAdvancedFilterValue(filterValue, this.getNamedFilterOptionGuids(filterOperators, fieldId))\n    };\n  }\n\n  private getFilterRangeDataOperator(\n    queries: IRecordGridFilterOperator[],\n    namedFilterOptionOperators: IRecordGridFilterOperator[]\n  ): IRecordGridFilterData {\n    const andOperator = {\n      and: queries\n    };\n\n    if (namedFilterOptionOperators.length) {\n      return {\n        or: queries.length ? namedFilterOptionOperators.concat(andOperator) : namedFilterOptionOperators\n      };\n    } else {\n      return andOperator;\n    }\n  }\n\n  private getNamedFilterOptionGuids(filterOperators: IRecordGridFilterOperator[], fieldId: string): string[] {\n    return filterOperators\n      .filter((filterOperator) => filterOperator[RecordGridFilterOperator.Eq])\n      .map((operator) => {\n        const operatorElementElement = operator[RecordGridFilterOperator.Eq][fieldId];\n\n        return operatorElementElement ? operatorElementElement[RecordGridNamedFilterOptionKey] : null;\n      })\n      .filter((guid) => Boolean(guid));\n  }\n\n  private getSelectedNamedOptionExpressions(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    filterTag: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>\n  ): string[] {\n    return namedFilterOptions\n      .filter((option) => filterTag.value.namedOptions.includes(option.guid))\n      .map((option) => option.filterExpression.replace(this.associatedFieldIdPatternRegExp, '${$1}'));\n  }\n\n  private getNamedFilterOptionsOperators(\n    value: RxRecordGridAdvancedFilterValue,\n    fieldId: string\n  ): IRecordGridFilterOperator[] {\n    return value.namedOptions.map((guid) =>\n      this.getRecordGridFilterOperator(RecordGridFilterOperator.Eq, fieldId, {\n        [RecordGridNamedFilterOptionKey]: guid\n      } as IRecordGridNamedFilterOption)\n    );\n  }\n\n  private getRecordGridFilterOperator(operator: string, fieldId: string, value: any): IRecordGridFilterOperator {\n    return { [operator]: { [fieldId]: value } };\n  }\n\n  private getBooleanFilterValue(filterValue: boolean | string): string {\n    return filterValue ? (filterValue === booleanDataTypeBlankValue ? '$NULL$' : 'true') : 'false';\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport { reduce } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-named-filter-options-list',\n  templateUrl: './named-filter-options-list.component.html',\n  styleUrls: ['./named-filter-options-list.component.scss']\n})\nexport class RxNamedFilterOptionsListComponent {\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue) {\n    const ids = values?.namedOptions;\n\n    this._filterValue = values;\n    Object.keys(this.namedFilterOptionsModel).forEach((key) => (this.namedFilterOptionsModel[key] = false));\n    ids?.forEach((id) => (this.namedFilterOptionsModel[id] = true));\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue {\n    return this._filterValue;\n  }\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  defaultFilterValue: any = [];\n\n  @Output()\n  readonly namedFilterOptionsChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  private _filterValue: RxRecordGridAdvancedFilterValue;\n  namedFilterOptionsModel: { [id: string]: boolean } = {};\n\n  trackByOptionGuid(index: number, option: IRecordGridColumnNamedFilterOption): string {\n    return option['guid'];\n  }\n\n  onNamedFilterOptionChange(): void {\n    const selectedGuids = this.getSelectedNamedOptionsIds();\n    this.namedFilterOptionsChange.emit(selectedGuids);\n\n    const value = new RxRecordGridAdvancedFilterValue(\n      this.filterValue?.filterValue ?? this.defaultFilterValue,\n      selectedGuids\n    );\n\n    this.filterControlsComponent.onFilterOptionModelChange(value);\n  }\n\n  private getSelectedNamedOptionsIds(): string[] {\n    return reduce(\n      this.namedFilterOptionsModel,\n      (result, value, id) => {\n        if (value) {\n          result.push(id);\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n}\n","<div class=\"options-wrapper\" *ngIf=\"namedFilterOptions?.length\">\n  <adapt-rx-checkbox\n    class=\"dropdown-item p-0 text-break\"\n    *ngFor=\"let option of namedFilterOptions; trackBy: trackByOptionGuid\"\n    [label]=\"option.title\"\n    [(ngModel)]=\"namedFilterOptionsModel[option.guid]\"\n    (ngModelChange)=\"onNamedFilterOptionChange()\"\n  ></adapt-rx-checkbox>\n</div>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterOption\n} from '@bmc-ux/adapt-angular';\nimport { SelectOption } from '@bmc-ux/obsolete';\nimport { find } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-boolean-filter',\n  templateUrl: './boolean-filter.component.html'\n})\nexport class RxBooleanFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>) {\n    const selectOptions = this.getSelectOptions();\n\n    this._filterValue = values;\n\n    this.selectedValues = values?.filterValue\n      ? values.filterValue.map((value) => find(selectOptions, { id: value }))\n      : [];\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  @Input()\n  isRequired = false;\n\n  selectedValues: SelectOption[];\n  private _filterValue: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>;\n\n  selectOptionFormatter(option: SelectOption): string {\n    return option.name;\n  }\n\n  onValueChange(values: SelectOption[]): void {\n    const filterValue = values.map((value) => value.id);\n\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(filterValue, this.filterValue?.namedOptions)\n    );\n  }\n\n  getSelectOptions(): SelectOption[] {\n    return this.filterOption.data?.selectOptions || [];\n  }\n\n  onValueChangeRequired(model: AdvancedFilterBooleanDataType): void {\n    const oldModelValue = Array.isArray(this.filterValue?.filterValue)\n      ? this.filterValue.filterValue[0]\n      : this.filterValue?.filterValue;\n\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(model === oldModelValue ? null : [model], this.filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  *ngIf=\"!isRequired; else inputsForBooleanTypeTemplate\"\n  class=\"advanced-filter__rx-select advanced-filter__rx-select_simple\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [optionFormatter]=\"selectOptionFormatter\"\n  [options]=\"getSelectOptions()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectedValues\"\n  (ngModelChange)=\"onValueChange($event)\"\n>\n</adapt-rx-select>\n\n<ng-template #inputsForBooleanTypeTemplate>\n  <adapt-rx-radiobutton-group\n    class=\"advanced-filter__radiobutton-group\"\n    [ngModel]=\"filterValue ? filterValue.filterValue[0] : null\"\n    (ngModelChange)=\"onValueChangeRequired($event)\"\n  >\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"false\"\n      [label]=\"filterControlsComponent.texts.configsTexts.falseLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_false'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(false)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"true\"\n      [label]=\"filterControlsComponent.texts.configsTexts.trueLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_true'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(true)\"\n    >\n    </adapt-rx-radiobutton>\n    <adapt-rx-radiobutton\n      *ngIf=\"filterControlsComponent.getBooleanTypeOptionParams().hasBlankValue\"\n      name=\"booleanTypeGroup\"\n      class=\"advanced-filter__radiobutton\"\n      [value]=\"filterControlsComponent.getBooleanTypeBlankValue()\"\n      [label]=\"filterControlsComponent.texts.configsTexts.blankLabel\"\n      [testID]=\"filterControlsComponent.testID + '_radio_blank'\"\n      [disabled]=\"filterControlsComponent.isInputDisabled(filterControlsComponent.getBooleanTypeBlankValue())\"\n    >\n    </adapt-rx-radiobutton>\n  </adapt-rx-radiobutton-group>\n</ng-template>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport {\n  INamedListDefinition,\n  INamedListOption,\n  INamedListOptionPage,\n  RxNamedListDefinitionService,\n  RxNamedListService,\n  NamedListTypeAheadOption\n} from '@helix/platform/named-list/api';\nimport { RxFeatureService } from '@helix/platform/shared/api';\nimport { Observable, of, OperatorFunction } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, finalize, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\n\n@Component({\n  selector: 'rx-string-with-type-ahead-filter',\n  templateUrl: './string-with-type-ahead-filter.component.html',\n  styleUrls: ['./string-with-type-ahead-filter.component.scss']\n})\nexport class RxStringWithTypeAheadFilterComponent implements OnInit {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<INamedListOption[]>) {\n    this._filterValue = values;\n    this.selectedValues = values?.filterValue || [];\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<INamedListOption[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  selectedValues: INamedListOption[] = [];\n  isSearchInProgress = false;\n  typeaheadKeystrokeCount: number;\n  private namedListDefinition$: Observable<INamedListDefinition>;\n  private _filterValue: RxRecordGridAdvancedFilterValue<INamedListOption[]>;\n\n  search: OperatorFunction<string, INamedListOption[]> = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      tap(() => {\n        this.isSearchInProgress = true;\n      }),\n      switchMap((term) => this.getSelectOptions(term)),\n      finalize(() => {\n        this.isSearchInProgress = false;\n      })\n    );\n\n  constructor(\n    private rxNamedListService: RxNamedListService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxFeatureService: RxFeatureService\n  ) {}\n\n  ngOnInit(): void {\n    this.namedListDefinition$ = this.rxNamedListDefinitionService\n      .get(this.filterOption.data.namedListDefinition)\n      .pipe(shareReplay(1));\n\n    this.typeaheadKeystrokeCount =\n      this.filterOption.data.typeaheadKeystrokeCount ?? RX_RECORD_GRID.defaultTypeaheadKeystrokeCount;\n  }\n\n  onValueChange(selectedValues: NamedListTypeAheadOption[]): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(\n        selectedValues.map(\n          (selectedValue: NamedListTypeAheadOption): INamedListOption =>\n            this.rxNamedListService.isNamedListOption(selectedValue)\n              ? (selectedValue as INamedListOption)\n              : ({ displayValue: undefined, value: selectedValue, title: '', contextualFields: [] } as INamedListOption)\n        ),\n        this.filterValue?.namedOptions\n      )\n    );\n  }\n\n  private getSelectOptions(term: string): Observable<INamedListOption[]> {\n    return term.length >= this.typeaheadKeystrokeCount\n      ? this.namedListDefinition$.pipe(\n          switchMap((namedListDefinition: INamedListDefinition) =>\n            this.rxNamedListService\n              .getOptionPageByLabelOrValue(namedListDefinition, term, this.filterOption.data.additionalQueryCriteria)\n              .pipe(map((optionPage: INamedListOptionPage): INamedListOption[] => optionPage.options))\n          )\n        )\n      : of([]);\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div style=\"position: relative\">\n  <adapt-tag-field\n    [search]=\"search\"\n    [ngModel]=\"selectedValues\"\n    (ngModelChange)=\"onValueChange($event)\"\n    [replaceModelOnWrite]=\"true\"\n    [selectItemTemplate]=\"selectItemTemplate\"\n    [tagTemplate]=\"tagTemplate\"\n    [openDropdownOnFocus]=\"typeaheadKeystrokeCount === 0\"\n    [placeholder]=\"'com.bmc.arsys.rx.client.view-components.record-grid.filters.typeahead.placeholder' | translate\"\n  ></adapt-tag-field>\n  <div *ngIf=\"isSearchInProgress\" class=\"position-absolute text-info inline-loader\">\n    <div class=\"d-icon-circle_75_o animated infinite spin-360 transition-out slow\"></div>\n  </div>\n</div>\n\n<ng-template #tagTemplate let-tag=\"tag\">\n  {{ tag.displayValue ?? tag.value }}\n</ng-template>\n\n<ng-template #selectItemTemplate let-result=\"result\">\n  {{ result.displayValue ?? result.value }}\n\n  <div\n    *ngIf=\"result.contextualFields\"\n    class=\"text-secondary selection-item-contextual-fields text-truncate\"\n    [title]=\"result.title\"\n  >\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of result.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdaptMetatagComponent,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterOption,\n  getTagText,\n  isEmptyOrWhitespace,\n  TagType\n} from '@bmc-ux/adapt-angular';\nimport { isEqual } from 'lodash';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-string-filter',\n  templateUrl: './string-filter.component.html'\n})\nexport class RxStringFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[] = [];\n\n  onStringTypeFilterOptionModelChange(model: TagType[], tagField: AdaptMetatagComponent) {\n    const newModel = model.filter((tag) => !isEmptyOrWhitespace(getTagText(tag)));\n\n    if (newModel.length < model.length && isEqual(newModel, this.filterValue?.filterValue || [])) {\n      tagField.writeValue(newModel);\n    } else {\n      this.filterControlsComponent.onFilterOptionModelChange(\n        new RxRecordGridAdvancedFilterValue(newModel, this.filterValue?.namedOptions)\n      );\n    }\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-tag-field\n  #stringDataTypeTagField\n  mainCls=\"advanced-filter__string-tag-field\"\n  [ngModel]=\"filterValue?.filterValue || []\"\n  popupClass=\"advanced-filter__typeahead-window\"\n  [testID]=\"filterControlsComponent.testID\"\n  (ngModelChange)=\"onStringTypeFilterOptionModelChange($event, stringDataTypeTagField)\"\n  [delimiterSymbol]=\"null\"\n  [placeholder]=\"filterControlsComponent.texts.stringTypeTagFieldPlaceholder\"\n  [replaceModelOnWrite]=\"true\"\n  [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  [hideLabel]=\"true\"\n>\n</adapt-tag-field>\n","import { Component, Input } from '@angular/core';\nimport { AdaptFilterControlsComponent, AdvancedFilterOption } from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-number-filter',\n  templateUrl: './number-filter.component.html'\n})\nexport class RxNumberFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  getNumberDataTypeModel(value: RxRecordGridAdvancedFilterValue, indexOfCounter: number): number {\n    return value && value.filterValue ? value.filterValue[indexOfCounter] : null;\n  }\n\n  onNumberTypeFilterOptionModelChange(\n    filterValue: RxRecordGridAdvancedFilterValue,\n    controlComponent: AdaptFilterControlsComponent,\n    newValue: [number, number]\n  ): void {\n    controlComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(newValue, filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<div class=\"d-flex\" [class.has-danger]=\"filterControlsComponent.hasValidationErrors\">\n  <div class=\"advanced-filter__counter-from-wrap\">\n    <adapt-rx-counter\n      #counterFrom\n      class=\"advanced-filter__counter-from\"\n      [label]=\"filterControlsComponent.texts.counterFromLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 0)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          $event,\n          counterTo ? getNumberDataTypeModel(filterValue, 1) : null\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_from'\"\n    >\n    </adapt-rx-counter>\n  </div>\n  <div class=\"advanced-filter__counter-to-wrap\">\n    <adapt-rx-counter\n      #counterTo\n      class=\"advanced-filter__counter-to\"\n      [label]=\"filterControlsComponent.texts.counterToLabel\"\n      [ngModel]=\"getNumberDataTypeModel(filterValue, 1)\"\n      (ngModelChange)=\"\n        onNumberTypeFilterOptionModelChange(filterValue, filterControlsComponent, [\n          counterFrom ? getNumberDataTypeModel(filterValue, 0) : null,\n          $event\n        ])\n      \"\n      [min]=\"filterControlsComponent.getNumberDataTypeMinAllowedValue()\"\n      [max]=\"filterControlsComponent.getNumberDataTypeMaxAllowedValue()\"\n      [disabled]=\"filterControlsComponent.isInputDisabled()\"\n      [testID]=\"filterControlsComponent.testID + '_to'\"\n    >\n    </adapt-rx-counter>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { AdaptRxDatetimeAdapter, RxDatetimeStruct } from '@bmc-ux/adapt-angular';\nimport moment from 'moment-es6';\n// Adapt dropped moment and changed the signature of AdvancedFilterTimeDataType from [moment.Moment, moment.Moment] to [RxDatetimeStruct, RxDatetimeStruct].\n// We need to extend the AdaptRxDatetimeAdapter class to implement the missing moment methods that we rely on.\n@Injectable()\nexport class RxAdaptDatetimeMomentAdapter extends AdaptRxDatetimeAdapter<moment.Moment> {\n  /**\n   * Converts moment.Moment => RxDatetimeStruct\n   */\n  fromModel(dateValue: moment.Moment | null): RxDatetimeStruct | null {\n    let adaptedValue: RxDatetimeStruct = null;\n    const date = moment(dateValue);\n\n    if (date && date.isValid()) {\n      adaptedValue = {\n        year: date.year(),\n        month: date.month(),\n        date: date.date(),\n        hours: date.hours(),\n        minutes: date.minutes(),\n        seconds: date.seconds()\n      };\n    }\n\n    return adaptedValue;\n  }\n\n  /**\n   * Converts RxDatetimeStruct => moment.Moment\n   */\n  toModel(date: RxDatetimeStruct | null): moment.Moment | null {\n    let adaptedValue: moment.Moment = null;\n\n    if (date) {\n      const currentDateTime = moment();\n\n      adaptedValue = date.parseError\n        ? moment.invalid({\n            invalidFormat: true,\n            parsedDateParts: [date.parseError.query],\n            meridiem: date.parseError.use12HoursTime ? '12' : '24'\n          })\n        : moment([\n            date.year ?? currentDateTime.year(),\n            date.month ?? currentDateTime.month(),\n            date.date ?? currentDateTime.date(),\n            date.hours ?? 0,\n            date.minutes ?? 0,\n            date.seconds ?? 0\n          ]);\n    }\n\n    return adaptedValue;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdaptRxDatetimeAdapter,\n  AdvancedFilterOption,\n  RxDatetimePickerMode\n} from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption, RxAdvancedFilterDateDataType } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\nimport { RxAdaptDatetimeMomentAdapter } from './rx-adapt-datetime-moment-adapter.service';\n\n@Component({\n  selector: 'rx-date-time-range-filter',\n  templateUrl: './date-time-range-filter.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: RxAdaptDatetimeMomentAdapter }]\n})\nexport class RxDateTimeRangeFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  filterValue: RxRecordGridAdvancedFilterValue;\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  @Input()\n  mode: RxDatetimePickerMode;\n\n  rxDatetimePickerMode = RxDatetimePickerMode;\n\n  onTimeTypeFilterOptionModelChange(model: RxAdvancedFilterDateDataType): void {\n    this.onDateTimeTypeFilterOptionModelChange(model);\n  }\n\n  onDateTypeFilterOptionModelChange(model: RxAdvancedFilterDateDataType): void {\n    if (model[0] && model[0].isValid()) {\n      model[0] = model[0].startOf('day');\n    }\n\n    if (model[1] && model[1].isValid()) {\n      model[1] = model[1].startOf('day');\n    }\n\n    this.onDateTimeTypeFilterOptionModelChange(model);\n  }\n\n  onDateTimeTypeFilterOptionModelChange(newValue: RxAdvancedFilterDateDataType): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(newValue, this.filterValue?.namedOptions)\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<ng-container [ngSwitch]=\"mode\">\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Time\" [ngTemplateOutlet]=\"inputsForTimeTypeTemplate\"></ng-container>\n  <ng-container *ngSwitchCase=\"rxDatetimePickerMode.Date\" [ngTemplateOutlet]=\"inputsForDateTypeTemplate\"></ng-container>\n  <ng-container\n    *ngSwitchCase=\"rxDatetimePickerMode.DateTime\"\n    [ngTemplateOutlet]=\"inputsForDatetimeTypeTemplate\"\n  ></ng-container>\n</ng-container>\n\n<ng-template #inputsForTimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDateTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n\n<ng-template #inputsForDatetimeTypeTemplate>\n  <adapt-rx-datetime-range\n    class=\"advanced-filter__datetime\"\n    [ngModel]=\"filterValue?.filterValue\"\n    (ngModelChange)=\"onDateTimeTypeFilterOptionModelChange($event)\"\n    [testID]=\"filterControlsComponent.testID\"\n    [mode]=\"mode\"\n    [hasSeconds]=\"true\"\n    [inline]=\"true\"\n    [inlineLight]=\"true\"\n    [texts]=\"filterControlsComponent.texts.datetimeTexts\"\n    [disabled]=\"filterControlsComponent.isInputDisabled()\"\n  >\n  </adapt-rx-datetime-range>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport {\n  AdaptFilterControlsComponent,\n  AdvancedFilterOption,\n  AdvancedFilterSelectionTypeData\n} from '@bmc-ux/adapt-angular';\nimport { SelectOption } from '@bmc-ux/obsolete';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../../types/record-grid-advanced-filter-value.class';\n\n@Component({\n  selector: 'rx-selection-filter',\n  templateUrl: './selection-filter.component.html'\n})\nexport class RxSelectionFilterComponent {\n  @Input()\n  filterOption: AdvancedFilterOption;\n\n  @Input()\n  filterControlsComponent: AdaptFilterControlsComponent;\n\n  @Input()\n  set filterValue(values: RxRecordGridAdvancedFilterValue<string[]>) {\n    this._filterValue = values;\n\n    const options = this.getSelectionTypeOptions();\n\n    this.selectionTypeModel =\n      options.length && values?.filterValue\n        ? values.filterValue.map((id) => options.find((option) => option.id === id))\n        : null;\n  }\n\n  get filterValue(): RxRecordGridAdvancedFilterValue<string[]> {\n    return this._filterValue;\n  }\n\n  @Input()\n  namedFilterOptions: IRecordGridColumnNamedFilterOption[];\n\n  selectionTypeModel: any[];\n  private _filterValue: RxRecordGridAdvancedFilterValue<string[]>;\n\n  getSelectionTypeOptions(): SelectOption[] {\n    const data = this.filterOption.data as AdvancedFilterSelectionTypeData;\n\n    return data?.selectOptions ?? [];\n  }\n\n  onSelectionTypeFilterOptionModelChange(value: SelectOption[]): void {\n    this.filterControlsComponent.onFilterOptionModelChange(\n      new RxRecordGridAdvancedFilterValue(\n        value.map((val) => val.id),\n        this.filterValue?.namedOptions\n      )\n    );\n  }\n}\n","<rx-named-filter-options-list\n  *ngIf=\"namedFilterOptions?.length\"\n  [namedFilterOptions]=\"namedFilterOptions\"\n  [filterOption]=\"filterOption\"\n  [filterValue]=\"filterValue\"\n  [filterControlsComponent]=\"filterControlsComponent\"\n></rx-named-filter-options-list>\n\n<adapt-rx-select\n  class=\"advanced-filter__rx-select\"\n  [class.advanced-filter__rx-select_simple]=\"filterControlsComponent.canShowSimpleInlineSelect()\"\n  [inline]=\"true\"\n  [multiple]=\"true\"\n  [selectAllButton]=\"true\"\n  [deselectAllButton]=\"true\"\n  [enableFilter]=\"!filterControlsComponent.canShowSimpleInlineSelect()\"\n  [optionFormatter]=\"filterControlsComponent.selectOptionFormatter\"\n  [options]=\"filterControlsComponent.getSelectionTypeOptions()\"\n  [texts]=\"filterControlsComponent.getSelectionTypeTexts()\"\n  [popupMaxHeight]=\"null\"\n  [ngModel]=\"selectionTypeModel\"\n  (ngModelChange)=\"onSelectionTypeFilterOptionModelChange($event)\"\n  [disabledOptionResolver]=\"filterControlsComponent.disabledSelectInputResolverBind\"\n>\n</adapt-rx-select>\n","import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { AdvancedFilterOption, FilterOptionTemplateParams, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { IRecordGridColumnNamedFilterOption } from '../../types/record-grid.types';\n\n@Component({\n  selector: 'rx-advanced-filtering-fields-provider',\n  templateUrl: './advanced-filtering-fields-provider.component.html'\n})\nexport class RxAdvancedFilteringFieldsProviderComponent {\n  @ViewChild('optionalBooleanFilter', { static: true })\n  optionalBooleanFilter: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('requiredBooleanFilter', { static: true })\n  requiredBooleanFilter: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForStringWithTypeAheadTemplate', { static: true })\n  inputsForStringWithTypeAheadTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForStringTypeTemplate', { static: true })\n  inputsForStringTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForNumberTypeTemplate', { static: true })\n  inputsForNumberTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForTimeTypeTemplate', { static: true })\n  inputsForTimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForDateTypeTemplate', { static: true })\n  inputsForDateTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForDatetimeTypeTemplate', { static: true })\n  inputsForDatetimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  @ViewChild('inputsForSelectionTypeTemplate', { static: true })\n  inputsForSelectionTypeTemplate: TemplateRef<FilterOptionTemplateParams>;\n\n  rxDatetimePickerMode = RxDatetimePickerMode;\n\n  @Input()\n  namedFilterOptionsGetter = (filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] => [];\n}\n","<ng-template\n  #optionalBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"false\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #requiredBooleanFilter\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-boolean-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [isRequired]=\"true\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-boolean-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringWithTypeAheadTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-with-type-ahead-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-with-type-ahead-filter>\n</ng-template>\n\n<ng-template\n  #inputsForStringTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-string-filter\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-string-filter>\n</ng-template>\n\n<ng-template\n  #inputsForNumberTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-number-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-number-filter>\n</ng-template>\n\n<ng-template\n  #inputsForTimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Time\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDateTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.Date\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForDatetimeTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-date-time-range-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [mode]=\"rxDatetimePickerMode.DateTime\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-date-time-range-filter>\n</ng-template>\n\n<ng-template\n  #inputsForSelectionTypeTemplate\n  let-filterOption=\"filterOption\"\n  let-filterValue=\"value\"\n  let-filterControlsComponent=\"filterControlsComponent\"\n>\n  <rx-selection-filter\n    [filterOption]=\"filterOption\"\n    [filterValue]=\"filterValue\"\n    [filterControlsComponent]=\"filterControlsComponent\"\n    [namedFilterOptions]=\"namedFilterOptionsGetter(filterOption)\"\n  ></rx-selection-filter>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { RxRecordGridUtilsService } from '../../services/record-grid-utils.service';\nimport { IRecordGridFilterTag } from '../../types/record-grid-filter.types';\nimport { clone, findIndex, get, isNull } from 'lodash';\nimport { IRemoveFilterTagEvent } from './filter-tags.types';\nimport { Placement } from '@bmc-ux/adapt-angular';\n\n@Component({\n  selector: 'rx-filter-tags',\n  templateUrl: './filter-tags.component.html',\n  styleUrls: ['./filter-tags.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FilterTagsComponent {\n  @Input()\n  tags: IRecordGridFilterTag[];\n\n  @Input()\n  isDisabled: boolean;\n\n  @Input()\n  tagsLimit: number;\n\n  @Input()\n  restTagsDropdownPlacement: Placement[] = ['bottom', 'bottom-right', 'auto'];\n\n  @Output()\n  removeTag = new EventEmitter<IRemoveFilterTagEvent>();\n\n  constructor(private rxRecordGridUtilsService: RxRecordGridUtilsService) {\n    this.trackByForFilterTags = this.trackByForFilterTags.bind(this);\n  }\n\n  getTranslateParams(): { count: number } {\n    return { count: this.getRestTagsCount() };\n  }\n\n  getRestTagsCount(): number {\n    return this.tagsLimit && this.tags ? this.tags.length - this.tagsLimit : 0;\n  }\n\n  onRemoveFilterTag(tag: IRecordGridFilterTag): void {\n    const filterOption = tag.data.filterOption;\n    const tags = clone(this.tags);\n\n    let index: number;\n\n    if (isNull(filterOption)) {\n      index = findIndex(tags, (toolbarTag) => this.rxRecordGridUtilsService.isSharedFilterPresetTag(toolbarTag));\n    } else {\n      const filterOptionId = tag.data.filterOption.id;\n\n      index = findIndex(tags, (toolbarTag) => get(toolbarTag.data.filterOption, 'id') === filterOptionId);\n    }\n\n    if (index > -1) {\n      tags.splice(index, 1);\n    }\n\n    this.removeTag.emit({ removedTag: tag, newTags: tags });\n  }\n\n  trackByForFilterTags(index: number, tag: IRecordGridFilterTag): number | string {\n    return this.rxRecordGridUtilsService.isSharedFilterPresetTag(tag) ? index : tag.data.filterOption.id || index;\n  }\n}\n","<div>\n  <adapt-tag\n    class=\"mr-1\"\n    [removable]=\"!isDisabled\"\n    [disabled]=\"isDisabled\"\n    *ngFor=\"\n      let tag of tags | slice: 0:(tagsLimit ? tagsLimit : tags?.length);\n      let index = index;\n      trackBy: trackByForFilterTags\n    \"\n    type=\"active\"\n    (remove)=\"onRemoveFilterTag(tag)\"\n  >\n    <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n  </adapt-tag>\n\n  <span adaptDropdown *ngIf=\"getRestTagsCount() > 0\" [appendToBody]=\"true\" [placement]=\"restTagsDropdownPlacement\">\n    <button adaptDropdownToggle type=\"button\" class=\"filter-tags__dropdown-toggle btn btn-link p-0 ml-1\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.filters.show-more-filters.label'\n          | translate: getTranslateParams()\n      }}\n    </button>\n\n    <div adaptDropdownMenu class=\"dropdown-menu filter-tags__dropdown-menu p-2\">\n      <div *ngFor=\"let tag of tags | slice: -getRestTagsCount(); let index = index; trackBy: trackByForFilterTags\">\n        <adapt-tag type=\"active\" [removable]=\"!isDisabled\" (remove)=\"onRemoveFilterTag(tag)\">\n          <span class=\"filter-tags__tag-text\" [title]=\"tag.data.value?.title ?? tag.text\">{{ tag.text }}</span>\n        </adapt-tag>\n      </div>\n    </div>\n  </span>\n</div>\n","import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent, RxDefinitionNameService, RxGlobalCacheService } from '@helix/platform/shared/api';\nimport {\n  IRecordGridFilterModel,\n  IRecordGridFilterSelectAdvancedFiltering,\n  IRecordGridFilterSelectControlOptions\n} from './record-grid-filter-select-control.types';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { cloneDeep, every, find, findIndex, isEmpty, isEqual, isFunction, reduce, uniq, values } from 'lodash';\nimport { AdvancedFilterOption, AdvancedFilterTag, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { combineLatest, forkJoin, Observable, of, Subject, Subscription } from 'rxjs';\nimport {\n  IRecordDefinition,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { RxRecordGridFilterConfigService } from '../../../runtime/services/record-grid-filter-config.service';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { RxRecordGridFilterService } from '../../../runtime/services/record-grid-filter.service';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterOperator } from '@helix/platform/view/api';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RxRecordGridAdvancedFilteringService } from '../../../common/services/record-grid-advanced-filtering.service';\nimport { IRemoveFilterTagEvent } from '../../../common/components/filter-tags/filter-tags.types';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../../../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRecordGridColumnNamedFilterOption } from '../../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { ITagInfo } from '../../../common/types/record-grid-filter-config.interfaces';\n\n@Component({\n  selector: 'rx-record-grid-filter-select-control',\n  templateUrl: './record-grid-filter-select-control.component.html',\n  styleUrls: ['./record-grid-filter-select-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridFilterSelectControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridFilterSelectControlComponent\n  extends ValueAccessor<IRecordGridFilterModel>\n  implements IFormControlComponent, OnInit, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridFilterSelectControlOptions;\n  groupFilterValue: string;\n  groupFilterItems: { name: string; value: string }[];\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  advancedFilterData: IRecordGridFilterSelectAdvancedFiltering = {\n    filterOptions: [],\n    selectedFilters: [],\n    filterTexts: {\n      initialDropdownAnchorLabel: 'Filter'\n    },\n    recordGridFilterConfigs: null,\n    fieldDefinitionsById: {},\n    fieldDefinitionsInitialized$: new Subject(),\n    filterValueInitialized$: new Subject(),\n    associationDescriptors: []\n  };\n\n  private subscription = new Subscription();\n  private filtersModel: IRecordGridFilterModel;\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n    this.initEmptyValue();\n\n    this.advancedFilterData.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n\n    this.subscription.add(\n      combineLatest([\n        this.advancedFilterData.filterValueInitialized$,\n        this.advancedFilterData.fieldDefinitionsInitialized$\n      ]).subscribe(() => {\n        this.initSelectedAdvancedFilters(this.value);\n      })\n    );\n  }\n\n  getGroupFilterName(model: string): string {\n    return this.groupFilterItems.find((item) => item.value === model)?.name;\n  }\n\n  onGroupFilterValueModelChange(model: string): void {\n    this.groupFilterValue = model;\n  }\n\n  ngOnInit(): void {\n    this.initFilterOptions();\n  }\n\n  initEmptyValue(): void {\n    this.innerValue = {\n      basicFilters: null,\n      filtersJson: null\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options &&\n      changes.options.previousValue &&\n      (changes.options.currentValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name !==\n        (changes.options.previousValue as IRecordGridFilterSelectControlOptions).primaryRecordDefinition?.name\n    ) {\n      this.initEmptyValue();\n      this.advancedFilterData.selectedFilters = [];\n      this.advancedFilterData.filterOptions = [];\n      this.initFilterOptions();\n    }\n  }\n\n  initFilterOptions(): void {\n    this.groupFilterItems = [];\n\n    if (this.options.primaryRecordDefinition) {\n      this.rxRecordGridUtilsService\n        .getAssociationDescriptors(this.options.primaryRecordDefinition.name)\n        .pipe(\n          switchMap((associationDescriptors) => {\n            this.advancedFilterData.associationDescriptors = associationDescriptors;\n\n            const recordDefinitionNames = uniq(\n              associationDescriptors.map((associationDescriptor) => associationDescriptor.recordDefinitionName)\n            );\n\n            const recordDefinitions$ = recordDefinitionNames.length\n              ? forkJoin(\n                  recordDefinitionNames.map((name) => this.rxRecordDefinitionCacheService.getRecordDefinition(name))\n                )\n              : of([] as IRecordDefinition[]);\n\n            return recordDefinitions$.pipe(map((recordDefinitions) => ({ recordDefinitions, associationDescriptors })));\n          }),\n          take(1)\n        )\n        .subscribe(({ recordDefinitions, associationDescriptors }) => {\n          const primaryRecordDefinition = cloneDeep(this.options.primaryRecordDefinition);\n\n          [primaryRecordDefinition, ...recordDefinitions].forEach((recordDefinition) => {\n            if (!recordDefinition.fieldDefinitionsById) {\n              recordDefinition.fieldDefinitionsById =\n                this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n            }\n          });\n\n          this.groupFilterValue = primaryRecordDefinition.name;\n\n          this.advancedFilterData.fieldDefinitionsById =\n            this.rxRecordGridAdvancedFilteringService.addAssociationFieldsToFieldDefinitionsById(\n              primaryRecordDefinition.fieldDefinitionsById,\n              associationDescriptors,\n              recordDefinitions\n            );\n\n          associationDescriptors.forEach((associationDescriptor) => {\n            const currentRecordDefinition = find(\n              recordDefinitions,\n              (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n            );\n\n            this.groupFilterItems.push({\n              name: associationDescriptor.label,\n              value: associationDescriptor.label\n            });\n\n            this.advancedFilterData.filterOptions.push(\n              ...this.getFilterOptions(currentRecordDefinition, associationDescriptor, associationDescriptor.label)\n            );\n          });\n\n          this.groupFilterItems = this.groupFilterItems.sort((gropFilter, gropFilterToCompare) =>\n            gropFilter.name.localeCompare(gropFilterToCompare.name)\n          );\n\n          const mainRecordDefinitionName = this.rxDefinitionNameService.getDisplayName(primaryRecordDefinition.name);\n\n          this.advancedFilterData.filterOptions.push(...this.getFilterOptions(primaryRecordDefinition, null, null));\n\n          this.groupFilterItems.unshift({\n            name: mainRecordDefinitionName,\n            value: primaryRecordDefinition.name\n          });\n\n          this.advancedFilterData.fieldDefinitionsInitialized$.next();\n        });\n    }\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    const selectedFilters = this.advancedFilterData.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n  }\n\n  getFilterOptions(\n    recordDefinition: IRecordDefinition,\n    associationDescriptor: IAssociationDescriptor,\n    prefix?: string\n  ): AdvancedFilterOption[] {\n    const fieldDefinitions = recordDefinition.fieldDefinitions;\n\n    return fieldDefinitions\n      .map((fieldDefinition): AdvancedFilterOption => {\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n        const label = this.rxRecordGridUtilsService.getColumnLabel(fieldDefinition, null);\n\n        const fieldId = this.rxRecordGridUtilsService.getFieldIdForGridColumn(\n          fieldDefinition.id,\n          associationDescriptor\n        );\n\n        const filterOption = this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n          fieldId,\n          label,\n          fieldDefinition,\n          filterConfig,\n          false,\n          {\n            optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n            requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n            inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n            inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n            inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n            inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n            inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n            inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n            inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n          },\n          prefix ? `${prefix} > ${label}` : null,\n          this.options.namedFilterOptions ? this.options.namedFilterOptions[fieldId] : []\n        );\n\n        const recordDefinitionName = associationDescriptor\n          ? associationDescriptor.label\n          : this.options.primaryRecordDefinition.name;\n\n        filterOption.isHidden = () =>\n          this.groupFilterValue !== recordDefinitionName || this.options.selectedFieldIds?.includes(fieldId) === false;\n\n        return filterOption;\n      })\n      .sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  onAdvancedFiltersChange(selectedFilters: SelectedAdvancedFilter[]): void {\n    this.advancedFilterData.selectedFilters = selectedFilters;\n\n    const oldBasicFilters = this.value.basicFilters || [];\n\n    const basicFilters = reduce(\n      selectedFilters,\n      (recordGridFilters, selectedFilter) => {\n        const fieldId = selectedFilter.filterOptionId;\n        const fieldDefinition = this.advancedFilterData.fieldDefinitionsById[fieldId];\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        const columnRecordGridFilterData = filterConfig.getRecordGridFilterData(\n          selectedFilter.value,\n          fieldDefinition,\n          fieldId\n        );\n\n        (columnRecordGridFilterData.or || columnRecordGridFilterData.and).forEach(\n          (recordGridFilterOperator: IRecordGridFilterOperator) => {\n            const gridFilterValue = values(recordGridFilterOperator)[0][fieldId];\n            const gridFilterDisplayValue = values(recordGridFilterOperator)[0]['$DISPLAYVALUE$'];\n\n            const columnOldBasicFilter = find(\n              oldBasicFilters,\n              (oldBasicFilter) =>\n                oldBasicFilter.fieldId === fieldId &&\n                oldBasicFilter.value === gridFilterValue &&\n                every(recordGridFilters, (gridFilter) => gridFilter.guid !== oldBasicFilter.guid)\n            );\n\n            const recordGridFilter: IRxRecordGridFilter = {\n              fieldId,\n              value: gridFilterValue,\n              $DISPLAYVALUE$: gridFilterDisplayValue,\n              guid: (columnOldBasicFilter && columnOldBasicFilter.guid) || this.rxGuidService.generate()\n            };\n\n            recordGridFilters.push(recordGridFilter);\n          }\n        );\n\n        return recordGridFilters;\n      },\n      [] as IRxRecordGridFilter[]\n    );\n\n    const recordGridFilterData = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      selectedFilters,\n      this.advancedFilterData.fieldDefinitionsById,\n      this.advancedFilterData.recordGridFilterConfigs\n    );\n\n    let filtersJson = isEmpty(recordGridFilterData) ? null : JSON.stringify(recordGridFilterData);\n\n    if (filtersJson) {\n      filtersJson = this.rxRecordGridFilterHelperService.denormalizeFilterString(filtersJson, basicFilters);\n    }\n\n    this.filtersModel = {\n      basicFilters,\n      filtersJson\n    };\n\n    this.value = {\n      basicFilters,\n      filtersJson\n    };\n  }\n\n  onWriteValue(value: IRecordGridFilterModel): void {\n    if (!isEqual(this.filtersModel, value)) {\n      this.advancedFilterData.filterValueInitialized$.next();\n    }\n  }\n\n  initSelectedAdvancedFilters(value: IRecordGridFilterModel) {\n    if (value?.filtersJson && !isEmpty(value.basicFilters)) {\n      this.rxRecordGridFilterService\n        .getSelectedFiltersFromPredefinedFilter(\n          value.filtersJson,\n          value.basicFilters,\n          this.advancedFilterData.fieldDefinitionsById,\n          this.advancedFilterData.recordGridFilterConfigs,\n          this.options.primaryRecordDefinition,\n          this.advancedFilterData.filterOptions,\n          this.advancedFilterData.associationDescriptors\n        )\n        .pipe(\n          map((selectedFilters) =>\n            this.options.namedFilterOptions\n              ? this.rxRecordGridFilterService.clearRemovedNamedFilterOptions(\n                  selectedFilters,\n                  this.options.namedFilterOptions\n                )\n              : selectedFilters\n          )\n        )\n        .subscribe((selectedFilters) => {\n          this.advancedFilterData.selectedFilters = selectedFilters;\n        });\n    }\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.options.namedFilterOptions ? this.options.namedFilterOptions[filterOptionConfig.id] : [];\n  }\n\n  getTags(filtersExpressionsTags: AdvancedFilterTag[]): Observable<AdvancedFilterTag[]> {\n    const tags =\n      filtersExpressionsTags?.filter((filterTag: AdvancedFilterTag) => isEmpty(filterTag.data.validationErrors)) ?? [];\n\n    const tags$ = tags.map((tag: AdvancedFilterTag): Observable<AdvancedFilterTag> => {\n      if (tag.data.filterOption) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = tag.data.filterOption.data;\n        const filterConfig = this.advancedFilterData.recordGridFilterConfigs[fieldDefinition?.resourceType];\n\n        if (isFunction(filterConfig?.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.options.primaryRecordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.options.namedFilterOptions?.[fieldId] ?? []\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return tags$.length ? forkJoin(tags$) : of([]);\n  }\n}\n","<ng-container *ngIf=\"advancedFilterData.filterOptions\">\n  <adapt-advanced-filter\n    #advancedFilter\n    [hidden]=\"isDisabled\"\n    [appendDropdownToBody]=\"true\"\n    [enableSavedFilters]=\"false\"\n    [filterOptions]=\"advancedFilterData.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"advancedFilterData.selectedFilters\"\n    [texts]=\"advancedFilterData.filterTexts\"\n    [applyFiltersByUserAction]=\"true\"\n    [filterOptionsCustomAreaTemplate]=\"filterOptionsCustomAreaTemplate\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    [anchorDisabled]=\"options.anchorDisabled\"\n  ></adapt-advanced-filter>\n\n  <rx-filter-tags\n    [isDisabled]=\"isDisabled\"\n    [tags]=\"getTags(advancedFilter.filtersExpressionsTags) | async\"\n    [tagsLimit]=\"options.tagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n    [restTagsDropdownPlacement]=\"['right', 'bottom', 'bottom-right', 'auto']\"\n  ></rx-filter-tags>\n</ng-container>\n\n<ng-template #filterOptionsCustomAreaTemplate>\n  <div class=\"p-3 pt-4 pb-4\" *ngIf=\"this.groupFilterItems.length > 1\">\n    <adapt-accordion>\n      <adapt-accordion-tab [title]=\"'Show filters for: ' + getGroupFilterName(groupFilterValue)\" [multiline]=\"true\">\n        <adapt-rx-radiobutton-group\n          class=\"advanced-filter__radiobutton-group\"\n          [ngModel]=\"groupFilterValue\"\n          (ngModelChange)=\"onGroupFilterValueModelChange($event)\"\n        >\n          <adapt-rx-radiobutton\n            name=\"booleanTypeGroup\"\n            class=\"advanced-filter__radiobutton\"\n            *ngFor=\"let groupItem of groupFilterItems\"\n            [value]=\"groupItem.value\"\n            [label]=\"groupItem.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n","import { AdvancedFilterOption, AdvancedFilterTexts, SelectedAdvancedFilter } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinitionsById, IRecordDefinition } from '@helix/platform/record/api';\nimport { IRecordGridFilterConfigs } from '../../../common/types/record-grid-filter-config.interfaces';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\nimport { Subject } from 'rxjs';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { IRecordGridNamedFilterOptionsMap } from '../../../common/types/record-grid.types';\n\nexport interface IRecordGridFilterSelectControlOptions {\n  primaryRecordDefinition: IRecordDefinition;\n  selectedFieldIds?: string[];\n  tagsLimit?: number;\n  namedFilterOptions?: IRecordGridNamedFilterOptionsMap;\n  anchorDisabled?: boolean;\n}\n\nexport interface IRecordGridFilterModel {\n  filtersJson: string;\n  basicFilters: IRxRecordGridFilter[];\n}\n\nexport interface IRecordGridFilterSelectAdvancedFiltering {\n  filterOptions: AdvancedFilterOption[];\n  associationDescriptors: IAssociationDescriptor[];\n  selectedFilters: SelectedAdvancedFilter[];\n  filterTexts: AdvancedFilterTexts;\n  recordGridFilterConfigs: IRecordGridFilterConfigs;\n  fieldDefinitionsById: IFieldDefinitionsById;\n  fieldDefinitionsInitialized$: Subject<any>;\n  filterValueInitialized$: Subject<any>;\n}\n\nexport enum RecordGridFilterMode {\n  Basic = 'basic',\n  Expression = 'expression'\n}\n\nexport interface IRecordGridFilterDescriptorModel {\n  value: string;\n  fieldId: string;\n  $DISPLAYVALUE$?: string;\n}\n","import { NgModule } from '@angular/core';\nimport { FilterTagsComponent } from './filter-tags.component';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule, AdaptTagModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [CommonModule, AdaptTagModule, AdaptDropdownModule, TranslateModule],\n  declarations: [FilterTagsComponent],\n  exports: [FilterTagsComponent]\n})\nexport class RxFilterTagsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNamedFilterOptionsListComponent } from './named-filter-options-list.component';\nimport { AdaptRxCheckboxModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxNamedFilterOptionsListComponent],\n  exports: [RxNamedFilterOptionsListComponent],\n  imports: [CommonModule, AdaptRxCheckboxModule, FormsModule]\n})\nexport class RxNamedFilterOptionsListModule {}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n  AdaptDropdownModule,\n  AdaptMetatagModule,\n  AdaptRxRadiobuttonModule,\n  AdaptRxSelectModule,\n  AdaptTagModule\n} from '@bmc-ux/adapt-angular';\nimport { CommonModule } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RxFilterTagsModule } from './components/filter-tags/filter-tags.module';\nimport { RxNamedFilterOptionsListModule } from './components/named-filter-options-list/named-filter-options-list.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdaptRxRadiobuttonModule,\n    AdaptRxSelectModule,\n    TranslateModule,\n    AdaptTagModule,\n    FormsModule,\n    AdaptDropdownModule.forRoot(),\n    AdaptMetatagModule,\n    RxNamedFilterOptionsListModule,\n    RxFilterTagsModule\n  ],\n  exports: [RxFilterTagsModule, RxNamedFilterOptionsListModule]\n})\nexport class RecordGridCommonModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { FormsModule } from '@angular/forms';\nimport { RxStringFilterComponent } from './string-filter.component';\nimport { AdaptMetatagModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RxStringFilterComponent],\n  exports: [RxStringFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptMetatagModule]\n})\nexport class RxStringFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxNumberFilterComponent } from './number-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxCounterModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxNumberFilterComponent],\n  exports: [RxNumberFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxCounterModule]\n})\nexport class RxNumberFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxDateTimeRangeFilterComponent } from './date-time-range-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxDatetimeModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxDateTimeRangeFilterComponent],\n  exports: [RxDateTimeRangeFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxDatetimeModule]\n})\nexport class RxDateTimeRangeFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxSelectionFilterComponent } from './selection-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxSelectionFilterComponent],\n  exports: [RxSelectionFilterComponent],\n  imports: [CommonModule, FormsModule, RxNamedFilterOptionsListModule, AdaptRxSelectModule]\n})\nexport class RxSelectionFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxBooleanFilterComponent } from './boolean-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptRxRadiobuttonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RxBooleanFilterComponent],\n  exports: [RxBooleanFilterComponent],\n  imports: [CommonModule, RxNamedFilterOptionsListModule, AdaptRxRadiobuttonModule, AdaptRxSelectModule, FormsModule]\n})\nexport class RxBooleanFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxStringWithTypeAheadFilterComponent } from './string-with-type-ahead-filter.component';\nimport { RxNamedFilterOptionsListModule } from '../named-filter-options-list/named-filter-options-list.module';\nimport { AdaptMetatagModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  declarations: [RxStringWithTypeAheadFilterComponent],\n  exports: [RxStringWithTypeAheadFilterComponent],\n  imports: [CommonModule, RxNamedFilterOptionsListModule, AdaptMetatagModule, FormsModule, TranslateModule]\n})\nexport class RxStringWithTypeAheadFilterModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RxAdvancedFilteringFieldsProviderComponent } from './advanced-filtering-fields-provider.component';\nimport { RxStringFilterModule } from '../string-filter/string-filter.module';\nimport { RxNumberFilterModule } from '../number-filter/number-filter.module';\nimport { RxDateTimeRangeFilterModule } from '../date-time-range-filter/date-time-range-filter.module';\nimport { RxSelectionFilterModule } from '../selection-filter/selection-filter.module';\nimport { RxBooleanFilterModule } from '../boolean-filter/boolean-filter.module';\nimport { RxStringWithTypeAheadFilterModule } from '../string-with-type-ahead-filter/string-with-type-ahead-filter.module';\n\n@NgModule({\n  declarations: [RxAdvancedFilteringFieldsProviderComponent],\n  exports: [RxAdvancedFilteringFieldsProviderComponent],\n  imports: [\n    CommonModule,\n    RxStringFilterModule,\n    RxNumberFilterModule,\n    RxDateTimeRangeFilterModule,\n    RxSelectionFilterModule,\n    RxBooleanFilterModule,\n    RxStringWithTypeAheadFilterModule\n  ]\n})\nexport class RxAdvancedFilteringFieldsProviderModule {}\n","import { NgModule } from '@angular/core';\nimport { RecordGridFilterSelectControlComponent } from './record-grid-filter-select-control.component';\nimport { AdaptAccordionModule, AdaptAdvancedFilteringModule, AdaptRxRadiobuttonModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridCommonModule } from '../../../common/record-grid-common.module';\nimport { FormsModule } from '@angular/forms';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../../../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [RecordGridFilterSelectControlComponent],\n  exports: [RecordGridFilterSelectControlComponent],\n  entryComponents: [RecordGridFilterSelectControlComponent],\n  imports: [\n    CommonModule,\n    AdaptAdvancedFilteringModule,\n    RecordGridCommonModule,\n    AdaptAccordionModule,\n    AdaptRxRadiobuttonModule,\n    FormsModule,\n    RxAdvancedFilteringFieldsProviderModule\n  ]\n})\nexport class RecordGridFilterSelectControlModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  IRecordGridColumnNamedFilterOption,\n  IRecordGridNamedFilterOptionsMap\n} from '../../../common/types/record-grid.types';\nimport { IRecordGridDesignInspectorColumnConfig } from '../record-grid-column-editor-control/record-grid-column-editor.types';\nimport { toNumber } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridFilterSelectHelperService {\n  getNamedFilterOptionsFromColumns(\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IRecordGridNamedFilterOptionsMap {\n    return columns.reduce((result: IRecordGridNamedFilterOptionsMap, col) => {\n      if (col.namedFilterOptions?.length) {\n        result[col.fieldId] = col.namedFilterOptions\n          .map(\n            (column) =>\n              ({\n                guid: column.guid,\n                ...column.data,\n                index: toNumber(column.data.index)\n              } as IRecordGridColumnNamedFilterOption)\n          )\n          .sort((a, b) => a.index - b.index);\n      }\n\n      return result;\n    }, {});\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';\nimport { findIndex, isEmpty, map, some } from 'lodash';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { RX_MODAL, RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IRecordGridPredefinedFilterPreset } from '../../../../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IPredefinedFilterPresetEditorPresetData,\n  IRecordGridFilterPresetEditorModalParams,\n  IRecordGridFilterPresetEditorModalResult\n} from '../record-grid-filter-preset-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-filter-preset-editor-modal',\n  templateUrl: './record-grid-filter-preset-editor-modal.component.html',\n  styleUrls: ['./record-grid-filter-preset-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RecordGridFilterPresetEditorModalComponent extends RxModalClass implements AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  @ViewChild('filterPresetsForm', { read: NgForm, static: true })\n  filterPresetsForm: NgForm;\n\n  isReadOnly: boolean;\n  recordDefinition: IRecordDefinition;\n  selectedFieldIds: string[];\n  filterPresets: IPredefinedFilterPresetEditorPresetData[] = [];\n  params: IRecordGridFilterPresetEditorModalParams = this.activeModalRef.getData();\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private rxGuidService: RxGuidService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    const activeFilterPreset = this.params.activeFilterPreset;\n\n    this.recordDefinition = this.params.primaryRecordDefinition;\n    this.selectedFieldIds = this.params.selectedFieldIds;\n    this.isReadOnly = this.params.isReadOnly;\n\n    this.filterPresets = map(\n      this.params.filterPresets,\n      (filterPreset): IPredefinedFilterPresetEditorPresetData =>\n        this.createFilterPresetEditorData(filterPreset, filterPreset === activeFilterPreset)\n    );\n  }\n\n  ngAfterViewInit(): void {\n    const openFilterPresetIndex = findIndex(this.filterPresets, 'isOpen');\n\n    if (openFilterPresetIndex !== -1) {\n      this.accordionTabEls.toArray()[openFilterPresetIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  addFilterPreset(): void {\n    this.markAsDirty();\n\n    this.filterPresets.push(\n      this.createFilterPresetEditorData(\n        {\n          guid: this.rxGuidService.generate(),\n          title: 'New preset' + (this.filterPresets.length === 0 ? '' : ' ' + this.filterPresets.length),\n          filters: '',\n          recordGridFilters: []\n        },\n        true\n      )\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeFilterPreset(index: number): void {\n    this.markAsDirty();\n\n    this.filterPresets.splice(index, 1);\n  }\n\n  createFilterPresetEditorData(\n    filterPreset: IRecordGridPredefinedFilterPreset,\n    isOpen: boolean\n  ): IPredefinedFilterPresetEditorPresetData {\n    return {\n      ...filterPreset,\n      isOpen,\n      filterSelectOptions: {\n        primaryRecordDefinition: this.recordDefinition,\n        tagsLimit: 2,\n        namedFilterOptions: this.params.namedFilterOptions,\n        selectedFieldIds: this.selectedFieldIds\n      },\n      filterSelect: {\n        basicFilters: filterPreset.recordGridFilters,\n        filtersJson: filterPreset.filters\n      }\n    };\n  }\n\n  getCheckPresetTitleDuplicateValidator(\n    currentFilterPreset: IPredefinedFilterPresetEditorPresetData\n  ): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl) => {\n      const title = control.value;\n\n      if (\n        title &&\n        this.filterPresets.some(\n          (filterPreset) => filterPreset.title === title && filterPreset.guid !== currentFilterPreset.guid\n        )\n      ) {\n        return { duplicatePresetName: { message: 'Duplicate Name' } };\n      }\n\n      return null;\n    };\n  }\n\n  trackByForFilterPresets(index: number, filterPreset: IPredefinedFilterPresetEditorPresetData): string {\n    return filterPreset.guid;\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.filterPresets.forEach((action) => (action.isOpen = expandAll));\n  }\n\n  onSaveChangesClick(): void {\n    const result: IRecordGridFilterPresetEditorModalResult = {\n      filterPresets: this.filterPresets.map(\n        (filterPreset): IRecordGridPredefinedFilterPreset => ({\n          filters: filterPreset.filterSelect.filtersJson,\n          recordGridFilters: filterPreset.filterSelect.basicFilters,\n          guid: filterPreset.guid,\n          title: filterPreset.title\n        })\n      )\n    };\n\n    const hasEmptyFilterPreset = some(result.filterPresets, (filterPreset) => isEmpty(filterPreset.recordGridFilters));\n\n    if (hasEmptyFilterPreset) {\n      this.rxModalService\n        .confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message:\n            'The filter preset will not filter records because no filters have been specified. Do you want to continue?'\n        })\n        .then((confirmResult) => {\n          if (confirmResult) {\n            this.activeModalRef.close(result);\n          }\n        });\n    } else {\n      this.activeModalRef.close(result);\n    }\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addFilterPreset()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.add-filter-preset.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"filterPresets.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <form #filterPresetsForm=\"ngForm\">\n            <div\n              *ngFor=\"let filterPreset of filterPresets; let index = index; trackBy: trackByForFilterPresets\"\n              class=\"designer-modal-accordion-content\"\n            >\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"filterPreset.isOpen\"\n                (open)=\"filterPreset.isOpen = true\"\n                (close)=\"filterPreset.isOpen = false\"\n                #accordionTab\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block pl-0\">\n                      <div class=\"rx-ellipsis\" [title]=\"filterPreset.title\" rx-id=\"card-title\">\n                        {{ filterPreset.title }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"$event.stopPropagation(); removeFilterPreset(index)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-rx-textfield\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.name-field.label' | translate\n                  }}\"\n                  [name]=\"'filterPresetTitle-' + filterPreset.guid\"\n                  [required]=\"true\"\n                  [disabled]=\"isReadOnly\"\n                  [rxCustomValidators]=\"getCheckPresetTitleDuplicateValidator(filterPreset)\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  [(ngModel)]=\"filterPreset.title\"\n                  rxNoWhitespace\n                ></adapt-rx-textfield>\n\n                <div *ngIf=\"accordionTab.isOpenOrCloseAnimationProcessing\">\n                  <rx-record-grid-filter-select-control\n                    [name]=\"'filterPresetFilterSelect-' + filterPreset.guid\"\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"filterPreset.filterSelectOptions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [(ngModel)]=\"filterPreset.filterSelect\"\n                  ></rx-record-grid-filter-select-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!filterPresets.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.empty-state.message' | translate\n          }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"filterPresetsForm.form.invalid || !isDirty()\"\n    (click)=\"onSaveChangesClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { cloneDeep, noop } from 'lodash';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { IFormControlComponent } from '@helix/platform/shared/api';\nimport {\n  IRecordGridFilterPresetEditorControlOptions,\n  IRecordGridFilterPresetEditorModalParams,\n  IRecordGridFilterPresetEditorModalResult\n} from './record-grid-filter-preset-editor.types';\nimport { IRecordGridPredefinedFilterPreset } from '../../../runtime/types/record-grid-predefined-filter-preset.interface';\nimport { RecordGridFilterPresetEditorModalComponent } from './record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { IRecordGridNamedFilterOptionsMap } from '../../../common/types/record-grid.types';\nimport { RxRecordGridFilterSelectHelperService } from '../record-grid-filter-select-control/record-grid-filter-select-helper.service';\n\n@Component({\n  selector: 'rx-record-grid-filter-preset-editor',\n  templateUrl: './record-grid-filter-preset-editor-control.component.html',\n  styleUrls: ['./record-grid-filter-preset-editor-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridFilterPresetEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridFilterPresetEditorControlComponent\n  extends ValueAccessor<IRecordGridPredefinedFilterPreset[]>\n  implements IFormControlComponent\n{\n  @Input()\n  options: IRecordGridFilterPresetEditorControlOptions;\n\n  filterPresets: IRecordGridPredefinedFilterPreset[] = [];\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxRecordGridFilterSelectHelperService: RxRecordGridFilterSelectHelperService\n  ) {\n    super();\n  }\n\n  onWriteValue(filterPresets: IRecordGridPredefinedFilterPreset[]): void {\n    this.filterPresets = filterPresets.slice();\n\n    this.filterPresets.sort((filterPreset1, filterPreset2) => filterPreset1.title.localeCompare(filterPreset2.title));\n  }\n\n  removeFilterPreset(filterPresetToRemove: IRecordGridPredefinedFilterPreset): void {\n    this.updateValue(this.filterPresets.filter((filterPreset) => filterPreset.guid !== filterPresetToRemove.guid));\n  }\n\n  updateValue(filterPresets: IRecordGridPredefinedFilterPreset[]): void {\n    this.value = filterPresets;\n    this.onWriteValue(filterPresets);\n  }\n\n  openEditor(filterPreset?: IRecordGridPredefinedFilterPreset): void {\n    const selectedFieldIds = this.options.columns.map((column) => column.fieldId);\n\n    const selectedFieldDefinitions = this.options.primaryRecordDefinition.fieldDefinitions.filter((fieldDefinition) =>\n      selectedFieldIds.includes(fieldDefinition.id.toString())\n    );\n\n    const namedFilterOptions = this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(\n      this.options.columns\n    );\n\n    const data: IRecordGridFilterPresetEditorModalParams = {\n      filterPresets: this.filterPresets,\n      activeFilterPreset: filterPreset,\n      isReadOnly: this.isDisabled,\n      namedFilterOptions,\n      primaryRecordDefinition: cloneDeep({\n        ...this.options.primaryRecordDefinition,\n        fieldDefinitions: selectedFieldDefinitions\n      }),\n      selectedFieldIds\n    };\n\n    this.rxModalService\n      .openModal({\n        title: 'Edit filter presets',\n        content: RecordGridFilterPresetEditorModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        testID: 'edit-filter-presets',\n        data\n      })\n      .then((result: IRecordGridFilterPresetEditorModalResult) => {\n        if (result && result.filterPresets) {\n          this.updateValue(result.filterPresets);\n        }\n      })\n      .catch(noop);\n  }\n\n  trackByForFilterPresets(index: number, filterPreset: IRecordGridPredefinedFilterPreset): string {\n    return filterPreset.guid;\n  }\n}\n","<adapt-rx-control-label *ngIf=\"options.label\" [label]=\"options.label\" [tooltip]=\"options?.tooltip\">\n</adapt-rx-control-label>\n\n<adapt-button *ngIf=\"!isDisabled\" btn-type=\"tertiary\" rx-id=\"open-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit filter presets\n</adapt-button>\n\n<div>\n  <div class=\"rx-selected-filter-preset\" *ngFor=\"let filterPreset of filterPresets; trackBy: trackByForFilterPresets\">\n    <div class=\"rx-selected-filter-preset__header-container\">\n      <span class=\"rx-selected-filter-preset__header-title\" rx-id=\"card-title\" [title]=\"filterPreset.title\">\n        {{ filterPreset.title }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"open-editor\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"openEditor(filterPreset)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-filter-preset\"\n        *ngIf=\"!isDisabled\"\n        (click)=\"removeFilterPreset(filterPreset)\"\n      ></button>\n    </div>\n\n    <div rx-id=\"filter-count\" class=\"rx-filter-count\">Filters: {{ filterPreset.recordGridFilters.length }}</div>\n  </div>\n  <span class=\"text-tertiary\" *ngIf=\"filterPresets.length === 0\"> No filter presets added. </span>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  NgZone,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport { ActiveModalRef, AdaptAccordionTabComponent, AdaptModalService, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { ActionListControlComponent, getAvailableOnDevicesInspectorConfig } from '@helix/platform/view/designer';\nimport { IRowAction, IRowActionData } from '../record-grid-row-action-editor-widget.types';\nimport { cloneDeep, isEqual, omit } from 'lodash';\nimport {\n  IDefinitionPickerComponentOptions,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  IIconPickerFormControlOptions,\n  ISelectFormControlOptions,\n  RxDefinitionPickerType,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { IExpressionConfigurator, IPlainObject, Tooltip } from '@helix/platform/shared/api';\nimport { CdkDrag, CdkDropList, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/';\nimport { TranslateService } from '@ngx-translate/core';\nimport { map } from 'rxjs/operators';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { of } from 'rxjs';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { NgForm } from '@angular/forms';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE } from '@helix/platform/view/api';\n\n@Component({\n  selector: 'rx-record-grid-row-action-editor-modal',\n  templateUrl: './record-grid-row-action-editor-modal.component.html',\n  styleUrls: ['./record-grid-row-action-editor-modal.component.scss']\n})\nexport class RecordGridRowActionEditorModalComponent extends RxModalClass implements OnInit, AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  @ViewChild('rowActionsForm', { static: true, read: NgForm })\n  rowActionsForm: NgForm;\n\n  expressionConfigurator: IExpressionConfigurator;\n  isReadOnly: boolean;\n  rowActions: IRowActionData[] = [];\n\n  selectFormControlOptions: ISelectFormControlOptions = {\n    label: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.label'\n    ),\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.field-name.tooltip'\n      )\n    ),\n    options: [],\n    emptyOption: true\n  } as ISelectFormControlOptions;\n\n  availableOnDevicesFormControlOptions: ISelectFormControlOptions = getAvailableOnDevicesInspectorConfig().options;\n\n  recordDefinitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.label'\n    ),\n    tooltip: new Tooltip(\n      this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.security-definition-name.tooltip'\n      )\n    ),\n    definitionType: RxDefinitionPickerType.StandardDataRecord,\n    required: false\n  };\n\n  iconPickerOptions: IIconPickerFormControlOptions = {\n    label: this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid-row-actions.icon.label'),\n    appendToBody: true,\n    required: false\n  };\n\n  @ViewChildren('draggableSelectedRowAction', { read: CdkDrag })\n  draggableSelectedRowAction: QueryList<CdkDrag<IRowActionData>>;\n\n  @ViewChild('selectedRowActionsDropList', { read: CdkDropList })\n  selectedRowActionsDropList: CdkDropList;\n\n  @ViewChildren(ActionListControlComponent)\n  actionListControlComponents: QueryList<ActionListControlComponent>;\n\n  expressionFormControlOptions: IExpressionFormControlOptions;\n\n  private activeActionIndex: number;\n  private rowActionIndex: number;\n\n  constructor(\n    public context: ActiveModalRef,\n    private adaptModalService: AdaptModalService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private translateService: TranslateService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private ngZone: NgZone,\n    private rxGuidService: RxGuidService,\n    protected injector: Injector\n  ) {\n    super(context, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    const params = this.context.getData();\n\n    this.expressionConfigurator = params.expressionConfigurator;\n    this.rowActionIndex = params.rowActionIndex;\n    this.activeActionIndex = params.activeActionIndex;\n    this.isReadOnly = params.isReadOnly;\n\n    this.rowActions = cloneDeep(params.rowActions).map((rowAction, index) => {\n      this.setSecurityFieldDefinitions(rowAction);\n\n      return {\n        ...rowAction,\n        isOpen: index === this.rowActionIndex\n      };\n    });\n  }\n\n  ngAfterViewInit() {\n    this.openActiveAction();\n\n    if (this.rowActionIndex) {\n      this.accordionTabEls.toArray()[this.rowActionIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  cancel(): void {\n    this.context.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  trackByGuid(index: number, rowAction: IRowActionData): string {\n    return rowAction.guid;\n  }\n\n  addRowAction(): void {\n    this.markAsDirty();\n\n    this.rowActions.push({\n      guid: this.rxGuidService.generate(),\n      label: 'New row action' + (this.rowActions.length === 0 ? '' : ' ' + this.rowActions.length),\n      icon: '',\n      recordDefinitionName: null,\n      fieldId: null,\n      recordInstance: null,\n      disabled: null,\n      hidden: null,\n      actions: [],\n      isOpen: true,\n      securityFieldDefinitions$: of(this.getSelectFormControlOptions()),\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE\n    });\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeRowAction(index: number, $event: MouseEvent): void {\n    $event.stopPropagation();\n    this.markAsDirty();\n    this.rowActions.splice(index, 1);\n  }\n\n  openExpressionEditor(event: IPlainObject, rowAction, propertyPath: string): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        property: {\n          path: propertyPath,\n          value: rowAction[propertyPath],\n          label: this.getRowActionLabel(propertyPath)\n        },\n        isReadOnly: false,\n        expressionConfigurator: this.expressionConfigurator,\n        legend: [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.function.label'),\n            icon: 'd-icon-mathematical_function'\n          },\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n            icon: 'd-icon-dollar'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component.label'\n            ),\n            icon: 'd-icon-file_o'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-component-property.label'\n            ),\n            icon: 'd-icon-file_o_gear'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.expression-editor.legend.view-input-parameter.label'\n            ),\n            icon: 'd-icon-arrow_right_square_input'\n          }\n        ]\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        this.markAsDirty();\n\n        rowAction[propertyPath] = expression.value;\n      });\n  }\n\n  getExpressionFormControlOptions(propertyPath: string): IExpressionFormControlOptions {\n    return {\n      label: this.getRowActionLabel(propertyPath),\n      tooltip:\n        propertyPath === 'recordInstance'\n          ? new Tooltip(\n              this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.tooltip'\n              )\n            )\n          : null,\n      dataDictionary$: this.context.getData().expressionConfigurator.getDataDictionary(propertyPath),\n      operators: this.context.getData().expressionConfigurator.getOperators(propertyPath)\n    };\n  }\n\n  saveActions(): void {\n    const rowActions: IRowAction[] = this.rowActions.map((rowAction) => ({\n      ...omit(rowAction, ['isOpen', 'securityFieldDefinitions$']),\n      action: 'rowAction'\n    }));\n\n    this.context.close(rowActions);\n  }\n\n  moveRowAction(fromIndex: number, toIndex: number): void {\n    moveItemInArray(this.rowActions, fromIndex, toIndex);\n    this.markAsDirty();\n  }\n\n  onDropInSelectedRowActionsContainer($event: CdkDragDrop<IRowActionData[], any>): void {\n    moveItemInArray(this.rowActions, $event.previousIndex, $event.currentIndex);\n    this.markAsDirty();\n  }\n\n  onRecordDefinitionChange(rowAction: IRowActionData): void {\n    this.markAsDirty();\n\n    rowAction.fieldId = null;\n\n    this.setSecurityFieldDefinitions(rowAction);\n  }\n\n  setSecurityFieldDefinitions(rowAction: IRowActionData): void {\n    rowAction.securityFieldDefinitions$ = rowAction.recordDefinitionName\n      ? this.rxRecordDefinitionCacheService\n          .getRecordDefinition(rowAction.recordDefinitionName)\n          .pipe(map((recordDefinition) => this.getSelectFormControlOptions(recordDefinition)))\n      : of(this.getSelectFormControlOptions());\n  }\n\n  private getRowActionLabel(key: string): string {\n    let rowActionLabel;\n\n    switch (key) {\n      case 'disabled':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.disabled.label';\n        break;\n      case 'hidden':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.hidden.label';\n        break;\n      case 'recordInstance':\n        rowActionLabel = 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.recordInstance.label';\n        break;\n    }\n\n    return this.translateService.instant(rowActionLabel);\n  }\n\n  private getSelectFormControlOptions(recordDefinition: IRecordDefinition = null): ISelectFormControlOptions {\n    return {\n      ...this.selectFormControlOptions,\n      options: recordDefinition\n        ? recordDefinition.fieldDefinitions.map((definition) => ({\n            name: definition.name,\n            id: String(definition.id)\n          }))\n        : []\n    } as ISelectFormControlOptions;\n  }\n\n  private openActiveAction(): void {\n    if (this.activeActionIndex >= 0 && this.rowActionIndex >= 0) {\n      this.ngZone.runOutsideAngular(() => {\n        // timeout is required to let control set initial value\n        setTimeout(() => {\n          const listControl = this.actionListControlComponents.find((control) =>\n            isEqual(control.value, this.rowActions[this.rowActionIndex]?.actions)\n          );\n\n          if (listControl) {\n            listControl.focus({ actionIndex: this.activeActionIndex });\n          }\n        });\n      });\n    }\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.rowActions.forEach((action) => (action.isOpen = expandAll));\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addRowAction()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.add-row-action.button.label' | translate\n          }}\n        </button>\n\n        <div *ngIf=\"rowActions.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        id=\"selectedRowActionsDropList\"\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"rowActions\"\n        (cdkDropListDropped)=\"onDropInSelectedRowActionsContainer($event)\"\n        #selectedRowActionsDropList=\"cdkDropList\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <form #rowActionsForm=\"ngForm\">\n            <div\n              *ngFor=\"\n                let rowAction of rowActions;\n                let index = index;\n                let first = first;\n                let last = last;\n                trackBy: trackByGuid\n              \"\n              class=\"designer-modal-accordion-content\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"rowAction\"\n              [cdkDragDisabled]=\"isReadOnly\"\n              #draggableSelectedRowAction\n            >\n              <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"rowAction.isOpen\"\n                (open)=\"rowAction.isOpen = true\"\n                (close)=\"rowAction.isOpen = false\"\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                      <div class=\"rx-ellipsis\" [title]=\"rowAction.label\" rx-id=\"card-title\">\n                        {{ rowAction.label }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <div class=\"designer-modal-card-title-index-buttons\">\n                        <button\n                          class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"last\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index + 1)\"\n                          rx-id=\"move-down-button\"\n                        ></button>\n\n                        <button\n                          class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                          type=\"button\"\n                          [disabled]=\"first\"\n                          (click)=\"$event.stopPropagation(); moveRowAction(index, index - 1)\"\n                          rx-id=\"move-up-button\"\n                        ></button>\n                      </div>\n\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"removeRowAction(index, $event)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <adapt-rx-textfield\n                    class=\"form-group d-block col-4\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.label-field.label' | translate\n                    }}\"\n                    [disabled]=\"isReadOnly\"\n                    [required]=\"true\"\n                    [name]=\"'label_' + rowAction.guid\"\n                    rx-id=\"label\"\n                    [(ngModel)]=\"rowAction.label\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    rxNoWhitespace\n                  >\n                  </adapt-rx-textfield>\n\n                  <rx-icon-picker-form-control\n                    [disabled]=\"isReadOnly\"\n                    class=\"form-group d-block col-4 px-2\"\n                    [options]=\"iconPickerOptions\"\n                    [name]=\"'icon_' + rowAction.guid\"\n                    rx-id=\"icon\"\n                    [(ngModel)]=\"rowAction.icon\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  ></rx-icon-picker-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-definition-picker\n                    [isDisabled]=\"isReadOnly\"\n                    [options]=\"recordDefinitionPickerOptions\"\n                    [(ngModel)]=\"rowAction.recordDefinitionName\"\n                    [name]=\"'recordDefinition_' + rowAction.guid\"\n                    rx-id=\"recordDefinition\"\n                    (ngModelChange)=\"onRecordDefinitionChange(rowAction)\"\n                    class=\"form-group d-block col-4\"\n                  >\n                  </rx-definition-picker>\n\n                  <rx-select-form-control\n                    [options]=\"(rowAction.securityFieldDefinitions$ | async) || selectFormControlOptions\"\n                    [(ngModel)]=\"rowAction.fieldId\"\n                    [name]=\"'fieldId_' + rowAction.guid\"\n                    rx-id=\"fieldId\"\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                  >\n                  </rx-select-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"!rowAction.recordDefinitionName || isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('recordInstance')\"\n                    propertyPath=\"recordInstance\"\n                    [ngModel]=\"rowAction.recordInstance\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'recordInstance')\"\n                    [name]=\"'recordInstance_' + rowAction.guid\"\n                    rx-id=\"recordInstance\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('disabled')\"\n                    propertyPath=\"disabled\"\n                    [ngModel]=\"rowAction.disabled\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'disabled')\"\n                    [name]=\"'disabled_' + rowAction.guid\"\n                    rx-id=\"disabled\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-expression-form-control\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"getExpressionFormControlOptions('hidden')\"\n                    propertyPath=\"hidden\"\n                    [ngModel]=\"rowAction.hidden\"\n                    (events)=\"openExpressionEditor($event, rowAction, 'hidden')\"\n                    [name]=\"'hidden_' + rowAction.guid\"\n                    rx-id=\"hidden\"\n                    class=\"col-4\"\n                  >\n                  </rx-expression-form-control>\n\n                  <rx-select-form-control\n                    [options]=\"availableOnDevicesFormControlOptions\"\n                    [(ngModel)]=\"rowAction.availableOnDevices\"\n                    [name]=\"'availableOnDevices_' + rowAction.guid\"\n                    rx-id=\"availableOnDevices\"\n                    [disabled]=\"isReadOnly\"\n                    [appendToBody]=\"true\"\n                    class=\"col-4 px-2\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    required\n                  >\n                  </rx-select-form-control>\n                </div>\n\n                <div class=\"d-flex row\">\n                  <rx-action-list-control\n                    class=\"d-inline-block col-4 mt-2\"\n                    [(ngModel)]=\"rowAction.actions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [name]=\"'action_' + rowAction.guid\"\n                  ></rx-action-list-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!rowActions.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.empty-state.message' | translate\n          }}\"\n          type=\"config\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"rowActionsForm.invalid || !isDirty()\"\n    (click)=\"saveActions()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Injector } from '@angular/core';\nimport { IFormFocusable, IPlainObject } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize, RX_AVAILABLE_ON_DEVICES_PROP_NAME } from '@helix/platform/view/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { noop, omit, pick } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { RecordGridDesignModel } from '../../record-grid-design.model';\nimport { RecordGridRowActionValidationIssue } from '../../record-grid-design.types';\nimport { RecordGridRowActionEditorModalComponent } from './record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component';\nimport { IRowAction } from './record-grid-row-action-editor-widget.types';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'rx-record-grid-row-action-editor-widget',\n  templateUrl: './record-grid-row-action-editor-widget.component.html',\n  styleUrls: ['./record-grid-row-action-editor-widget.component.scss']\n})\nexport class RxRecordGridRowActionEditorWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel>\n  implements IFormFocusable\n{\n  isDisabled: boolean;\n\n  rowActions$: Observable<IRowAction[]> = this.designerItemModel.rowActionButtonComponents$.pipe(\n    map((rowActionButtons) => {\n      return rowActionButtons.map((rowActionButtonComponent) => {\n        const actions = rowActionButtonComponent.children.map((action) => omit(action, 'type', 'children'));\n\n        return {\n          ...pick(rowActionButtonComponent.data, [\n            'recordDefinitionName',\n            'recordInstance',\n            'fieldId',\n            'icon',\n            'disabled',\n            'hidden',\n            'label',\n            RX_AVAILABLE_ON_DEVICES_PROP_NAME\n          ]),\n          guid: rowActionButtonComponent.guid,\n          actions\n        } as IRowAction;\n      });\n    }),\n    shareReplay(1)\n  );\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService\n  ) {\n    super(injector);\n  }\n\n  openEditor(rowActionIndex?: number, activeActionIndex?: number): void {\n    this.rowActions$\n      .pipe(\n        take(1),\n        switchMap((rowActions) =>\n          from(\n            this.rxModalService.openModal({\n              content: RecordGridRowActionEditorModalComponent,\n              title: this.translateService.instant(\n                'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.modal.title'\n              ),\n              size: OpenViewActionModalSize.Large as any,\n              testID: 'edit-row-actions',\n              data: {\n                expressionConfigurator: this.designerItemModel.expressionConfigurator,\n                isReadOnly: this.isDisabled,\n                rowActionIndex,\n                rowActions,\n                activeActionIndex\n              }\n            })\n          )\n        )\n      )\n      .subscribe({\n        next: (newRowActions) => this.designerItemModel.setRowActions(newRowActions),\n        error: noop\n      });\n  }\n\n  trackByForRowActions(index: number, rowAction: IRowAction): string {\n    return rowAction.label;\n  }\n\n  removeRowAction(index: number, rowActions: IRowAction[]): void {\n    this.rxModalService\n      .confirm({\n        title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.row-action-delete.warning',\n          { name: rowActions[index].label }\n        )\n      })\n      .then((response) => {\n        if (response) {\n          rowActions.splice(index, 1);\n          this.designerItemModel.setRowActions(rowActions);\n        }\n      });\n  }\n\n  focus(data: RecordGridRowActionValidationIssue['data']): void {\n    this.openEditor(data.rowActionIndex, data.actionIndex);\n  }\n}\n","<adapt-button btn-type=\"tertiary\" rx-id=\"open-row-action-editor-modal-button\" class=\"p-0 pb-1\" (click)=\"openEditor()\">\n  <span class=\"d-icon-plus_circle\"></span>\n  Edit row actions\n</adapt-button>\n\n<div *ngIf=\"rowActions$ | async as rowActions\">\n  <span rx-id=\"no-row-actions\" *ngIf=\"rowActions.length === 0\" class=\"text-tertiary\"> No row actions added. </span>\n  <div\n    rx-id=\"row-actions-list\"\n    class=\"rx-selected-row-action\"\n    *ngFor=\"let rowAction of rowActions; let index = index; trackBy: trackByForRowActions\"\n  >\n    <div class=\"rx-selected-row-action__header-container\">\n      <span rx-id=\"row-action\" class=\"rx-selected-row-action__header-title\" [title]=\"rowAction.label\">\n        {{ rowAction.label }}\n      </span>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-left-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(index)\"\n      ></button>\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-cross btn-link\"\n        rx-id=\"remove-button\"\n        (click)=\"removeRowAction(index, rowActions)\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnChanges, OnDestroy, Renderer2, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { head, isEmpty, isEqual } from 'lodash';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './record-grid-sort-editor-control.types';\nimport { AdaptRxSelectComponent } from '@bmc-ux/adapt-angular';\nimport { IFormFocusable, IFormControlComponent } from '@helix/platform/shared/api';\nimport { ValueAccessor, ISelectOption } from '@helix/platform/shared/components';\nimport { ColumnSortDirection } from '../../../common/types/record-grid.types';\nimport { BehaviorSubject, forkJoin, of } from 'rxjs';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { defaultIfEmpty, map, switchMap, take } from 'rxjs/operators';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-sort-editor-control',\n  templateUrl: './record-grid-sort-editor-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridSortEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridSortEditorControlComponent\n  extends ValueAccessor<IRecordGridSortEditorModel>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridSortEditorControlOptions;\n\n  @ViewChild('adaptRxSelect', { static: true })\n  adaptRxSelect: AdaptRxSelectComponent;\n\n  ColumnSortDirection = ColumnSortDirection;\n  updateOptionsSubject = new BehaviorSubject<void>(null);\n\n  columnOptions$ = this.updateOptionsSubject.pipe(\n    switchMap(() =>\n      this.options.gridColumns && this.options.recordDefinition\n        ? forkJoin(\n            this.options.gridColumns\n              .filter((gridColumn) => gridColumn.sortable)\n              .map((gridColumn) => {\n                if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n                  return this.rxRecordGridUtilsService\n                    .getFieldDefinition(gridColumn.fieldId, this.options.recordDefinition)\n                    .pipe(map((fieldDefinition) => ({ id: gridColumn.fieldId, name: `[${fieldDefinition.name}]` })));\n                }\n\n                return of({ id: gridColumn.fieldId, name: gridColumn.title });\n              })\n          ).pipe(defaultIfEmpty([]))\n        : of([])\n    )\n  );\n\n  selectedColumnOption: ISelectOption[] = [];\n\n  get selectedSortDirection(): ColumnSortDirection {\n    return this.value ? this.value.direction : null;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (!isEqual(\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).gridColumns,\n        (changes.options.previousValue as IRecordGridSortEditorControlOptions).gridColumns\n      ) ||\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).recordDefinition?.name !==\n          (changes.options.previousValue as IRecordGridSortEditorControlOptions).recordDefinition?.name)\n    ) {\n      this.updateOptionsSubject.next();\n    }\n  }\n\n  onWriteValue(value: IRecordGridSortEditorModel) {\n    this.columnOptions$.pipe(take(1)).subscribe((columnOptions) => {\n      this.selectedColumnOption = value ? [columnOptions.find((option) => option.id === value.fieldId)] : [];\n    });\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.adaptRxSelect.selectButtonRef.nativeElement, true).focus();\n  }\n\n  onSelectModelChange(value: ISelectOption[]): void {\n    this.selectedColumnOption = value;\n\n    this.value = isEmpty(value) ? null : { fieldId: head(value).id, direction: ColumnSortDirection.Asc };\n  }\n\n  setSortDirection(sortDirection: ColumnSortDirection): void {\n    this.value = { ...this.value, direction: sortDirection };\n  }\n\n  optionFormatter(option: ISelectOption): string {\n    return option.name;\n  }\n\n  ngOnDestroy(): void {\n    this.updateOptionsSubject.complete();\n  }\n}\n","<div class=\"form-group\" [ngClass]=\"{ 'is-required': options.required }\">\n  <label class=\"form-control-label\" *ngIf=\"options.label\">{{ options.label }}</label>\n\n  <div class=\"d-flex\">\n    <adapt-rx-select\n      #adaptRxSelect\n      class=\"pr-1 w-100\"\n      *ngIf=\"columnOptions$ | async as columnOptions\"\n      [options]=\"columnOptions\"\n      [required]=\"options.required\"\n      [disabled]=\"isDisabled\"\n      [ngModel]=\"selectedColumnOption\"\n      (ngModelChange)=\"onSelectModelChange($event)\"\n      [optionFormatter]=\"optionFormatter\"\n      [emptyOption]=\"true\"\n    ></adapt-rx-select>\n\n    <div class=\"btn-group\" data-toggle=\"buttons\" *ngIf=\"selectedColumnOption.length\">\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_up\"\n        (click)=\"setSortDirection(ColumnSortDirection.Asc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Asc\"\n      ></button>\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_down\"\n        (click)=\"setSortDirection(ColumnSortDirection.Desc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Desc\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { ToolbarConfig } from '@bmc-ux/adapt-table';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { SortMeta } from 'primeng/api';\nimport { IAdaptTableColumnConfig } from '../runtime/types/record-grid-column.types';\nimport { IRecordGridPredefinedFilterPreset } from '../runtime/types/record-grid-predefined-filter-preset.interface';\nimport { IRecordGridDesignInspectorColumnConfig } from './editors/record-grid-column-editor-control';\nimport { IRecordGridFilterModel, RecordGridFilterMode } from './editors/record-grid-filter-select-control';\nimport { IRecordGridSortEditorModel } from './editors/record-grid-sort-editor-control';\nimport { IRxAvailableOnDevicesProp } from '@helix/platform/view/api';\n\nexport interface IRecordGridProperties extends IRxAvailableOnDevicesProp {\n  bordered?: boolean;\n  expandable: boolean;\n  name?: string;\n  recordDefinitionName: string;\n  showDataForAllLocales: boolean;\n  associationDefinitionName: string;\n  associatedRecordNodeSide: string;\n  associatedRecordId: string;\n  associatedRoleName: string;\n  enableRowSelection: string;\n  styles: string;\n  cardLayoutWidth: string;\n  filterExpression: string;\n  enableFiltering: boolean;\n  requiredFilters: number;\n  getDataForHiddenColumns: boolean;\n  enableFilterPresets: boolean;\n  filters: string;\n  defaultFilterPreset: string;\n  striped?: boolean;\n  viewPresetSelector?: string;\n}\n\nexport interface IRecordGridDesignProperties extends IRxAvailableOnDevicesProp {\n  name?: string;\n  mode: RecordGridDesignDefinitionMode;\n  recordDefinitionName: string;\n  associationDefinitionName: string;\n  showDataForAllLocales: boolean;\n  associatedRecordId: string;\n  associatedRoleName: string;\n  bordered?: boolean;\n  enableRowSelection: string;\n  expandable: boolean;\n  initialSortColumn: IRecordGridSortEditorModel;\n  columns: IRecordGridDesignInspectorColumnConfig[];\n  styles: string;\n  cardLayoutWidth: string;\n  enableFiltering: boolean;\n  getDataForHiddenColumns: boolean;\n  requiredFilters: number;\n  enableFilterPresets: boolean;\n  filterMode: RecordGridFilterMode;\n  filters: IRecordGridFilterModel;\n  filterExpression: string;\n  filterPresets: IRecordGridPredefinedFilterPreset[];\n  defaultFilterPreset: string;\n  striped?: boolean;\n  associatedRecordNodeSide?: string;\n  viewPresetSelector?: string;\n}\n\nexport enum RecordGridDesignDefinitionMode {\n  Record = 'record',\n  Association = 'association'\n}\n\nexport interface IRecordGridDesignAdaptTableConfig {\n  columns: IAdaptTableColumnConfig[];\n  sortMeta: SortMeta;\n  toolbarConfig: ToolbarConfig;\n}\n\nexport type RecordGridDesignValidationIssue = IViewComponentDesignValidationIssue<{\n  columnGuid?: string;\n  actionIndex?: number;\n}>;\n\nexport type RecordGridRowActionValidationIssue = IViewComponentDesignValidationIssue<{\n  rowActionIndex: number;\n  actionIndex: number;\n}>;\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport {\n  IRecordGridViewPresetColumn,\n  IRecordGridViewPresetColumnsModalOptions,\n  IRecordGridViewPresetColumnsModalResult\n} from './record-grid-view-preset-columns-modal.types';\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { cloneDeep, omit } from 'lodash';\nimport { IStepperWithUnitsFormControlOptions } from '@helix/platform/shared/components';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\n\n@Component({\n  selector: 'rx-record-grid-view-preset-columns-modal',\n  templateUrl: './record-grid-view-preset-columns-modal.component.html',\n  styleUrls: ['./record-grid-view-preset-columns-modal.component.scss']\n})\nexport class RecordGridViewPresetColumnsModalComponent extends RxModalClass implements OnInit {\n  params: IRecordGridViewPresetColumnsModalOptions = this.activeModalRef.getData();\n\n  presetColumns: IRecordGridViewPresetColumn[] = this.params.presetColumns.map((column, index) => {\n    const gridColumn = this.params.gridColumns.find((col) => col.fieldId === column.data.fieldId);\n\n    return {\n      ...cloneDeep(column),\n      isOpen: index === 0,\n      title: gridColumn.title,\n      fallbackTitle: gridColumn.fallbackTitle\n    };\n  });\n\n  isReadOnly = this.params.isReadOnly;\n\n  columnWidthPropertyOptions: IStepperWithUnitsFormControlOptions = RX_RECORD_GRID.columnProperties.find(\n    ({ name }) => name === 'width'\n  ).options as IStepperWithUnitsFormControlOptions;\n\n  constructor(private activeModalRef: ActiveModalRef, protected injector: Injector) {\n    super(activeModalRef, injector);\n\n    this.presetColumns.sort((a, b) => a.data.index - b.data.index);\n  }\n\n  expandAllColumns(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presetColumns.forEach((column) => (column.isOpen = true));\n  }\n\n  collapseAllColumns(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presetColumns.forEach((column) => (column.isOpen = false));\n  }\n\n  saveChanges(): void {\n    this.activeModalRef.close({\n      presetColumns: this.presetColumns.map((column) => omit(column, ['isOpen', 'title']))\n    } as IRecordGridViewPresetColumnsModalResult);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  moveColumn(fromIndex: number, toIndex: number): void {\n    this.markAsDirty();\n    moveItemInArray(this.presetColumns, fromIndex, toIndex);\n    this.updateColumnIndexes();\n  }\n\n  onDropInSelectedColumnsContainer(event: CdkDragDrop<IRecordGridViewPresetColumn[]>) {\n    this.moveColumn(event.previousIndex, event.currentIndex);\n  }\n\n  trackByGuid(index: number, column: IRecordGridViewPresetColumn): string {\n    return column.guid;\n  }\n\n  private updateColumnIndexes(): void {\n    this.presetColumns.forEach((column, index) => {\n      column.data.index = index;\n    });\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"expand-all-button\"\n            (click)=\"expandAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAllColumns($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div\n        class=\"designer-modal-accordion-wrapper\"\n        cdkDropList\n        [cdkDropListData]=\"presetColumns\"\n        (cdkDropListDropped)=\"onDropInSelectedColumnsContainer($event)\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"\n              let column of presetColumns;\n              let index = index;\n              let first = first;\n              let last = last;\n              trackBy: trackByGuid\n            \"\n            class=\"designer-modal-accordion-content\"\n            cdkDrag\n            [cdkDragDisabled]=\"isReadOnly\"\n            [cdkDragData]=\"column\"\n            cdkDragLockAxis=\"y\"\n          >\n            <div *ngIf=\"!isReadOnly\" class=\"designer-modal-drag-handle d-icon-left-dots\" cdkDragHandle></div>\n\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"column.isOpen\"\n              (open)=\"column.isOpen = true\"\n              (close)=\"column.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block\" [class.pl-0]=\"isReadOnly\">\n                    <div class=\"rx-ellipsis\" [title]=\"column.title\">\n                      {{ column.title || column.fallbackTitle }}\n                    </div>\n\n                    <div *ngIf=\"column.data.visible\" class=\"designer-modal-card-sub-title ml-2\" [title]=\"column.title\">\n                      visible\n                    </div>\n                  </div>\n\n                  <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                    <div class=\"designer-modal-card-title-index-buttons\">\n                      <button\n                        class=\"d-icon-left-triangle_down rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"last\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index + 1)\"\n                        rx-id=\"move-down-button\"\n                      ></button>\n\n                      <button\n                        class=\"d-icon-left-triangle_up rx-button-unstyled\"\n                        type=\"button\"\n                        [disabled]=\"first\"\n                        (click)=\"$event.stopPropagation(); moveColumn(index, index - 1)\"\n                        rx-id=\"move-up-button\"\n                      ></button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-rx-textfield\n                label=\"Column header\"\n                [disabled]=\"true\"\n                [(ngModel)]=\"column.title\"\n              ></adapt-rx-textfield>\n\n              <adapt-rx-checkbox\n                label=\"Visible\"\n                [(ngModel)]=\"column.data.visible\"\n                [disabled]=\"isReadOnly\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></adapt-rx-checkbox>\n\n              <rx-stepper-with-units-form-control\n                class=\"d-block col-5 p-0\"\n                [options]=\"columnWidthPropertyOptions\"\n                [(ngModel)]=\"column.data.width\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-stepper-with-units-form-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Injector, OnInit } from '@angular/core';\nimport { cloneDeep, isObject, noop, pick, sortBy } from 'lodash';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { RecordGridViewPresetColumnsModalComponent } from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component';\nimport {\n  IRecordGridEditViewPresetsModalData,\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult,\n  IRecordGridEditViewPresetsModalTags\n} from './record-grid-edit-view-presets-modal.types';\nimport { IRecordGridViewPresetColumnData } from '../record-grid-view-presets-widget.types';\nimport {\n  IRecordGridViewPresetColumnsModalOptions,\n  IRecordGridViewPresetColumnsModalResult\n} from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.types';\nimport { IRecordGridSortEditorModel } from '../../record-grid-sort-editor-control';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport { RxRecordGridDesignUtilsService } from '../../../record-grid-design-utils.service';\nimport {\n  IRecordGridNamedFilterOptionsMap,\n  IRecordGridSortableObject\n} from '../../../../common/types/record-grid.types';\nimport { RxRecordGridFilterSelectHelperService } from '../../record-grid-filter-select-control/record-grid-filter-select-helper.service';\nimport { forkJoin, of } from 'rxjs';\nimport { defaultIfEmpty, map, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-edit-view-presets-modal',\n  templateUrl: './record-grid-edit-view-presets-modal.component.html',\n  styleUrls: ['./record-grid-edit-view-presets-modal.component.scss']\n})\nexport class RecordGridEditViewPresetsModalComponent extends RxModalClass implements OnInit {\n  params: IRecordGridEditViewPresetsModalOptions = this.activeModalRef.getData();\n  presets: IRecordGridEditViewPresetsModalData[] = [];\n  isReadOnly = this.params.isReadOnly;\n  private namedFilterOptions: IRecordGridNamedFilterOptionsMap;\n\n  private gridColumns$ =\n    this.params.gridColumns && this.params.recordDefinition\n      ? forkJoin(\n          this.params.gridColumns.map((gridColumn) => {\n            if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n              return this.rxRecordGridUtilsService\n                .getFieldDefinition(gridColumn.fieldId, this.params.recordDefinition)\n                .pipe(map((fieldDefinition) => ({ ...gridColumn, fallbackTitle: `[${fieldDefinition.name}]` })));\n            }\n\n            return of({ ...gridColumn, fallbackTitle: `[${gridColumn.title}]` });\n          })\n        ).pipe(defaultIfEmpty([]))\n      : of([]);\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterSelectHelperService: RxRecordGridFilterSelectHelperService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.gridColumns$.pipe(take(1)).subscribe((gridColumns) => {\n      this.namedFilterOptions =\n        this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(gridColumns);\n\n      this.presets = this.params.presetsList.map(({ guid, name }, index) => {\n        const presetComponent = this.params.viewPresets.find(({ data }) => data.viewPresetGuid === guid);\n        const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n        const viewPresetGuid = presetComponent.data.viewPresetGuid;\n\n        const presetColumns: IRecordGridViewPresetColumnData[] = cloneDeep(\n          presetComponent.children.filter((col) => col.type === RX_RECORD_GRID.components.columnViewPreset)\n        );\n\n        const sortedColumn = presetColumns.find((col) => isObject(col.data.sortable));\n\n        const sortModel: IRecordGridSortEditorModel = sortedColumn\n          ? {\n              fieldId: sortedColumn.data.fieldId,\n              direction: (sortedColumn.data.sortable as IRecordGridSortableObject).direction\n            }\n          : null;\n\n        return {\n          presetName: name,\n          gridColumns,\n          presetColumns,\n          guid: viewPresetGuid,\n          tags: this.getTags(presetColumns, gridColumns),\n          isOpen: this.params.activePreset ? this.params.activePreset === viewPresetGuid : index === 0,\n          sortModel,\n          filters: {\n            basicFilters: this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(\n              presetComponent.children\n            ),\n            filtersJson: presetComponent.data.filters\n          },\n          filterSelectControlOptions: {\n            primaryRecordDefinition: {\n              ...this.params.recordDefinition,\n              fieldDefinitions: this.params.recordDefinition.fieldDefinitions.filter((definition) =>\n                gridColumnsIds.includes(String(definition.id))\n              )\n            },\n            selectedFieldIds: gridColumns.map((column) => column.fieldId),\n            namedFilterOptions: this.namedFilterOptions\n          },\n          sortEditorControlOptions: {\n            label: 'Initial column sort',\n            gridColumns: sortBy(gridColumns, 'title'),\n            recordDefinition: this.params.recordDefinition\n          }\n        };\n      });\n    });\n  }\n\n  saveChanges(): void {\n    this.activeModalRef.close({\n      presets: this.presets\n    } as IRecordGridEditViewPresetsModalResult);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  expandAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = true));\n  }\n\n  collapseAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = false));\n  }\n\n  openPresetColumnsModal(preset: IRecordGridEditViewPresetsModalData): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit grid columns for ${preset.presetName}`,\n        content: RecordGridViewPresetColumnsModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        data: {\n          gridColumns: preset.gridColumns,\n          presetColumns: preset.presetColumns,\n          isReadOnly: this.isReadOnly\n        } as IRecordGridViewPresetColumnsModalOptions,\n        testID: 'edit-grid-columns-for-view-preset'\n      })\n      .then((result: IRecordGridViewPresetColumnsModalResult) => {\n        if (result?.presetColumns) {\n          preset.presetColumns = result.presetColumns;\n          preset.tags = this.getTags(preset.presetColumns, preset.gridColumns);\n          this.markAsDirty();\n        }\n      })\n      .catch(noop);\n  }\n\n  trackByPreset(index: number, item: IRecordGridEditViewPresetsModalData): string {\n    return item.guid;\n  }\n\n  private getTags(\n    presetColumns: IRecordGridViewPresetColumnData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IRecordGridEditViewPresetsModalTags {\n    const allColumnTitles = presetColumns\n      .filter((column) => column.data.visible)\n      .map((column) => {\n        const gridColumn = gridColumns.find((col) => col.fieldId === column.data.fieldId);\n        return gridColumn.title || gridColumn.fallbackTitle;\n      });\n\n    const displayedColumnTitles = allColumnTitles.slice(0, 5);\n\n    return {\n      items: displayedColumnTitles,\n      restCount: allColumnTitles.length - displayedColumnTitles.length\n    };\n  }\n\n  onSortChange(sortModel: IRecordGridSortEditorModel, preset: IRecordGridEditViewPresetsModalData): void {\n    preset.presetColumns.forEach((column) => {\n      column.data.sortable = column.data.fieldId === sortModel?.fieldId ? pick(sortModel, 'direction') : null;\n    });\n\n    this.markAsDirty();\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"expandAll($event)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAll($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let preset of presets; let index = index; trackBy: trackByPreset\"\n            class=\"designer-modal-accordion-content\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"preset.isOpen\"\n              (open)=\"preset.isOpen = true\"\n              (close)=\"preset.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"preset.presetName\" rx-id=\"card-title\">\n                      {{ preset.presetName }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                rx-id=\"open-grid-preset-columns-modal-button\"\n                class=\"p-0 pb-1\"\n                (click)=\"openPresetColumnsModal(preset)\"\n              >\n                <span class=\"d-icon-plus_circle\"></span>\n\n                Edit grid columns\n              </adapt-button>\n\n              <div class=\"mb-3\">\n                <adapt-tag type=\"active\" *ngFor=\"let tag of preset.tags.items\">{{ tag }}</adapt-tag>\n\n                <button\n                  *ngIf=\"preset.tags.restCount\"\n                  class=\"btn-link rx-button-unstyled ml-1\"\n                  type=\"button\"\n                  (click)=\"openPresetColumnsModal(preset)\"\n                >\n                  +{{ preset.tags.restCount }} more\n                </button>\n              </div>\n\n              <rx-record-grid-sort-editor-control\n                class=\"d-block w-50\"\n                [options]=\"preset.sortEditorControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.sortModel\"\n                (ngModelChange)=\"onSortChange($event, preset)\"\n              ></rx-record-grid-sort-editor-control>\n\n              <rx-record-grid-filter-select-control\n                [options]=\"preset.filterSelectControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.filters\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-record-grid-filter-select-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n","import { Component, Injector, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { cloneDeep, isEqual, noop } from 'lodash';\nimport { IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { InspectorWidgetBase, ISelectFormControlOptions, ISelectOption } from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport { OpenViewActionModalSize, RecordGridNamedFilterOptionKey, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { RecordGridDesignModel } from '../../record-grid-design.model';\nimport { RX_RECORD_GRID } from '../../../record-grid.constant';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridEditViewPresetsModalComponent } from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetColumnData,\n  IRecordGridViewPresetsWidgetOptions\n} from './record-grid-view-presets-widget.types';\nimport {\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult\n} from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.types';\nimport { RxRecordGridDesignUtilsService } from '../../record-grid-design-utils.service';\nimport { IViewPresetSelectorDesignProperties } from '../../../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IRecordGridFilterDescriptorModel } from '../record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetProperties } from '../../../common/types/record-grid.types';\nimport { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';\n\n@Component({\n  selector: 'rx-record-grid-view-presets-widget',\n  templateUrl: './record-grid-view-presets-widget.component.html',\n  styleUrls: ['./record-grid-view-presets-widget.component.scss']\n})\nexport class RecordGridViewPresetsWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel>\n  implements OnInit, OnChanges, OnDestroy, IFormWidgetComponent\n{\n  @Input()\n  options: IRecordGridViewPresetsWidgetOptions;\n\n  currentPresetSelectorGuid: string;\n  currentPresetSelectorGuid$ = new ReplaySubject<string>(1);\n  isDisabled: boolean;\n\n  presetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.viewDesignerFacade.getComponentsByType<IViewPresetSelectorDesignProperties>(\n      RxViewComponentType.ViewPresetSelector\n    );\n\n  presetSelectorOptions$: Observable<ISelectOption[]> = this.presetSelectors$.pipe(\n    map((items) => items.map(({ guid, data }) => ({ id: guid, name: data.name })))\n  );\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.currentPresetSelectorGuid$.pipe(\n    tap((guid) => this.updateViewPresetSelectorProp(guid)),\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    shareReplay({ refCount: true, bufferSize: 1 }),\n    takeUntil(this.destroyed$)\n  );\n\n  viewPresetSelectorProp$ = this.designerItemModel.sandbox.getComponentPropertyValue('viewPresetSelector');\n\n  gridColumnGuids$ = this.designerItemModel.sandbox.getChildComponentGuids(\n    (component) => component.type === RX_RECORD_GRID.components.column\n  );\n\n  selectOptions: ISelectFormControlOptions = {\n    options: [],\n    emptyOption: true,\n    label: 'View preset selector',\n    beforeValueChange: (oldValue, newValue) => {\n      if (oldValue && oldValue !== newValue) {\n        return this.rxModalService.confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message: 'All record grid view presets will be cleared. Do you want to continue?'\n        });\n      } else {\n        return Promise.resolve(true);\n      }\n    }\n  };\n\n  constructor(\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxGuidService: RxGuidService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxJsonParserService: RxJsonParserService\n  ) {\n    super(injector);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options.currentValue.recordDefinition?.name !== changes.options.previousValue.recordDefinition?.name) {\n      this.currentPresetSelectorGuid = null;\n      this.currentPresetSelectorGuid$.next(null);\n    }\n  }\n\n  ngOnInit(): void {\n    this.presetSelectorOptions$.pipe(takeUntil(this.destroyed$)).subscribe((options) => {\n      this.selectOptions.options = options;\n    });\n\n    // select current preset selector item\n    this.viewPresetSelectorProp$\n      .pipe(\n        first(),\n        map((val) => this.designerItemModel.extractViewPresetSelectorGuid(val)),\n        withLatestFrom(this.presetSelectorOptions$),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([guid, presetSelectorOptions]) => {\n        const selectedOption = presetSelectorOptions.find((item) => item.id === guid)?.id;\n\n        if (selectedOption) {\n          this.currentPresetSelectorGuid = selectedOption;\n          this.currentPresetSelectorGuid$.next(this.currentPresetSelectorGuid);\n        }\n      });\n\n    this.gridColumnGuids$\n      .pipe(\n        filter(() => !!this.currentPresetSelectorGuid),\n        switchMap((guids) =>\n          combineLatest(\n            guids.map((guid) =>\n              combineLatest([\n                this.designerItemModel.sandbox.getComponentPropertyValue('sortable', guid),\n                this.designerItemModel.sandbox.getComponentPropertyValue('filterable', guid),\n                this.viewDesignerFacade.getChildComponents(\n                  guid,\n                  (c) => c.type === RX_RECORD_GRID.components.filterPreset\n                )\n              ])\n            )\n          )\n        ),\n        distinctUntilChanged(isEqual),\n        // in case of removing and adding columns at a same time from columns modal\n        // stream updated several times with according to adding/removing columns\n        // we need it to be stabilized to proceed with column presets updating\n        debounceTime(100),\n        switchMap(() => this.designerItemModel.columns$.pipe(first())),\n        withLatestFrom(this.designerItemModel.childComponentsTree$.pipe(map((components) => cloneDeep(components)))),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([gridColumns, allComponents]) => {\n        this.updateColumnPresets(allComponents, gridColumns);\n      });\n  }\n\n  private updateColumnPresets(\n    allComponents: IViewComponentDesignData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const viewPresetsPayload = allComponents\n      .filter((component) => component.type === RX_RECORD_GRID.components.viewPreset)\n      .map((component) => {\n        const presetColumnComponents: IRecordGridViewPresetColumnData[] = component.children.filter(\n          (item) => item.type === RX_RECORD_GRID.components.columnViewPreset\n        );\n\n        const presetFilterComponents = this.getPresetFilterComponentsForColumns(\n          component as IViewComponentDesignData<IGridViewPresetProperties>,\n          gridColumns\n        );\n\n        const updatedPresetColumns = gridColumns\n          .map((gridColumn) => {\n            const existingPresetColumn = presetColumnComponents.find(\n              (presetColumn) => presetColumn.data.fieldId === gridColumn.fieldId\n            );\n\n            if (existingPresetColumn) {\n              if (!gridColumn.sortable) {\n                existingPresetColumn.data.sortable = null;\n              }\n\n              return existingPresetColumn;\n            } else {\n              const columnPresetPayload = this.rxRecordGridDesignUtilsService.getColumnPresetPayload(gridColumn);\n              columnPresetPayload.data.visible = false;\n              columnPresetPayload.data.index = null;\n              columnPresetPayload.data.width = null;\n\n              return columnPresetPayload;\n            }\n          })\n          .map((presetCol, i, array) => {\n            if (presetCol.data.index === null) {\n              presetCol.data.index = Math.max(...array.map((col) => col.data.index)) + 1;\n            }\n\n            return presetCol;\n          });\n\n        (component as IViewComponentDesignSetPayload).children = [...updatedPresetColumns, ...presetFilterComponents];\n\n        return component;\n      });\n\n    this.designerItemModel.sandbox.setChildrenByType(viewPresetsPayload, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getPresetFilterComponentsForColumns(\n    presetComponent: IViewComponentDesignData<IGridViewPresetProperties>,\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload[] {\n    const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n    const presetFilterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[] =\n      presetComponent.children.filter((item) => item.type !== RX_RECORD_GRID.components.columnViewPreset);\n\n    // removing filter presets for removed columns or ones that have removed named filter option reference\n    const filteredPresetFilterComponents = presetFilterComponents.reduce((result, presetFilterComponent) => {\n      // checking if column still can be used for filtering\n      if (gridColumnsIds.includes(presetFilterComponent.data.fieldId)) {\n        const namedFilterOptions =\n          gridColumns.find((col) => col.fieldId === presetFilterComponent.data.fieldId)?.namedFilterOptions ?? [];\n        const namedFilterOptionsGuids = namedFilterOptions.map((option) => option.guid);\n\n        let presetFiltersObj = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData([\n          presetFilterComponent\n        ]);\n\n        presetFiltersObj = this.deserializeNamedOptions(presetFiltersObj);\n        const namedFilterOptionGuid = presetFiltersObj[0].value?.[RecordGridNamedFilterOptionKey];\n\n        // if named filter option selected then check if it's still available\n        if (namedFilterOptionGuid) {\n          if (namedFilterOptionsGuids.includes(namedFilterOptionGuid)) {\n            result.push(presetFilterComponent);\n          }\n        } else {\n          result.push(presetFilterComponent);\n        }\n      }\n\n      return result;\n    }, []);\n\n    if (presetFilterComponents.length) {\n      if (filteredPresetFilterComponents.length < presetFilterComponents.length) {\n        const presetFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filteredPresetFilterComponents);\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          presetComponent.data.filters,\n          presetFilters\n        );\n\n        // updating filters JSON after column remove\n        presetComponent.data.filters = newFilterData\n          ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), presetFilters)\n          : null;\n      }\n\n      return filteredPresetFilterComponents;\n    }\n\n    return presetFilterComponents;\n  }\n\n  deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[] {\n    return recordGridFilters.map((filter) => {\n      const value = this.rxJsonParserService.tryParseJson(filter.value);\n\n      if (value && value[RecordGridNamedFilterOptionKey]) {\n        return {\n          ...filter,\n          value\n        };\n      }\n\n      return filter;\n    });\n  }\n\n  openEditor(preset?: IPresetItem) {\n    combineLatest([\n      this.designerItemModel.gridViewPresets$,\n      this.selectedPresetsList$,\n      this.designerItemModel.columns$,\n      this.designerItemModel.recordDefinition$\n    ])\n      .pipe(first(), takeUntil(this.destroyed$))\n      .subscribe(([viewPresets, presetsList, columns, recordDefinition]) => {\n        this.rxModalService\n          .openModal({\n            title: 'Edit view presets',\n            content: RecordGridEditViewPresetsModalComponent,\n            size: OpenViewActionModalSize.Large as any,\n            data: {\n              viewPresets,\n              presetsList,\n              gridColumns: columns,\n              recordDefinition,\n              activePreset: preset?.guid,\n              isReadOnly: this.isDisabled\n            } as IRecordGridEditViewPresetsModalOptions\n          })\n          .then((result: IRecordGridEditViewPresetsModalResult) => {\n            this.onPresetModalClose(result);\n          })\n          .catch(noop);\n      });\n  }\n\n  trackByGuid(index: number, item: IPresetItem): string {\n    return item.name;\n  }\n\n  private onPresetModalClose(result: IRecordGridEditViewPresetsModalResult): void {\n    if (result && result.presets) {\n      this.designerItemModel.childComponentsTree$\n        .pipe(\n          first(),\n          map((components) => cloneDeep(components) as IViewComponentDesignSetPayload[]),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe((components) => {\n          result.presets.forEach((preset) => {\n            const presetComponent = components.find(\n              (c) => c.type === RX_RECORD_GRID.components.viewPreset && c.data.viewPresetGuid === preset.guid\n            );\n\n            if (presetComponent) {\n              const columnPayloads = preset.presetColumns.map((column) =>\n                this.rxRecordGridDesignUtilsService.getColumnPresetPayload(column.data)\n              );\n\n              const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                preset.filters.basicFilters\n              );\n\n              presetComponent.data = {\n                viewPresetGuid: preset.guid,\n                filters: preset.filters.filtersJson\n              };\n\n              presetComponent.children = [...columnPayloads, ...filterPayloads];\n            }\n          });\n\n          this.designerItemModel.sandbox.setChildren(components);\n        });\n    }\n  }\n\n  private updateViewPresetSelectorProp(guid: string): void {\n    this.designerItemModel.sandbox.updateComponentProperties({\n      viewPresetSelector: guid ? `\\${view.components.${guid}.api}` : null\n    });\n  }\n}\n","<rx-select-form-control\n  class=\"d-block mb-3\"\n  rx-id=\"preset-selector\"\n  [options]=\"selectOptions\"\n  [(ngModel)]=\"currentPresetSelectorGuid\"\n  (ngModelChange)=\"currentPresetSelectorGuid$.next($event)\"\n  [disabled]=\"isDisabled\"\n>\n</rx-select-form-control>\n\n<div [hidden]=\"!options.recordDefinition\" *ngIf=\"selectedPresetsList$ | async as presetsList\">\n  <adapt-button\n    *ngIf=\"presetsList.length\"\n    btn-type=\"tertiary\"\n    rx-id=\"edit-view-presets-button\"\n    class=\"p-0 pb-1\"\n    (click)=\"openEditor()\"\n  >\n    <span class=\"d-icon-left-plus_circle\"></span>\n    Edit view presets\n  </adapt-button>\n\n  <span rx-id=\"no-presets\" *ngIf=\"currentPresetSelectorGuid && presetsList.length === 0\" class=\"text-tertiary\">\n    No presets added.\n  </span>\n\n  <div rx-id=\"presets-list\">\n    <div\n      class=\"border mb-1 pr-2 d-flex justify-content-between text-break\"\n      *ngFor=\"let preset of presetsList; let index = index; trackBy: trackByGuid\"\n    >\n      <strong class=\"preset-name\" rx-id=\"preset-name\" [title]=\"preset.name\">\n        {{ preset.name }}\n      </strong>\n\n      <button\n        type=\"button\"\n        class=\"rx-button-unstyled d-icon-pencil btn-link\"\n        rx-id=\"edit-button\"\n        (click)=\"openEditor(preset)\"\n      ></button>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION\n} from '@helix/platform/association/api';\nimport { IFieldDefinition, IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  IFormControlBuilderConfig,\n  IPlainObject,\n  RxDefinitionNameService,\n  RxFeatureService,\n  Tooltip\n} from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalSelectFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  ITextFormControlOptions,\n  OptionalSelectFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IViewActionDesignProperties,\n  RecordGridNamedFilterOptionKey,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewActionListItem,\n  IViewComponentDesignCommonDataDictionary,\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignData,\n  IViewComponentDesignSetPayload,\n  IViewDesignerInspectorConfig,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport {\n  defaults,\n  filter as _filter,\n  find,\n  forEach,\n  isEmpty,\n  isObject,\n  isUndefined,\n  map as _map,\n  omit,\n  pick,\n  reduce,\n  sortBy\n} from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { debounceTime, filter, map, switchMap, take } from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IRecordGridSortable } from '../runtime/types/record-grid-column.types';\nimport { IRxRecordGridFilter } from '../common/types/record-grid-filter.types';\nimport { IRecordGridPredefinedFilterPreset } from '../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IRecordGridColumnDesignModel,\n  IRecordGridColumnEditorControlOptions,\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridColumnEditorControlComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-control.component';\nimport {\n  IRecordGridFilterPresetDescriptorModel,\n  IRecordGridFilterPresetEditorControlOptions\n} from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor.types';\nimport { RecordGridFilterPresetEditorControlComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component';\nimport {\n  IRecordGridFilterDescriptorModel,\n  IRecordGridFilterSelectControlOptions,\n  RecordGridFilterMode\n} from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { RecordGridFilterSelectControlComponent } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.component';\nimport { RxRecordGridRowActionEditorWidgetComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.types';\nimport { RecordGridSortEditorControlComponent } from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { INamedFilterOptionDesignData } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.types';\nimport { RecordGridViewPresetsWidgetComponent } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.component';\nimport {\n  IPresetItem,\n  IRecordGridViewPresetsWidgetOptions\n} from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  IGridViewColumnProperties,\n  IGridViewPresetProperties,\n  IRecordGridColumnNamedFilterOptionDesign,\n  IRecordGridSortableObject\n} from '../common/types/record-grid.types';\nimport { IViewPresetProperties } from '../../view-preset-selector/view-preset-selector.types';\n\ntype ColumnsDataDictionaryBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionary;\ntype ColumnDataDictionaryBranchBuilder = (gridPropertyName: string) => IViewComponentDesignCommonDataDictionaryBranch;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignUtilsService {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxFeatureService: RxFeatureService,\n    private rxModalService: RxModalService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private translateService: TranslateService,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  private getColumnActionComponentPayloads(\n    actions: IViewActionListItem[]\n  ): IViewComponentDesignSetPayload<IViewActionDesignProperties>[] {\n    return _map(\n      actions,\n      (action): IViewComponentDesignSetPayload<IViewActionDesignProperties> => ({\n        ...action,\n        type: RxViewComponentType.Action\n      })\n    );\n  }\n\n  private getNamedFilterOptionPayloads(\n    namedFilterOptions: INamedFilterOptionDesignData[]\n  ): IViewComponentDesignSetPayload<IRecordGridColumnNamedFilterOptionDesign>[] {\n    return _map(namedFilterOptions, (namedFilterOption) => ({\n      ...namedFilterOption,\n      type: RX_RECORD_GRID.components.filterPreset\n    }));\n  }\n\n  getGridFilterComponentPayloads(\n    gridFilters: IRxRecordGridFilter[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel>[] {\n    return _map(\n      gridFilters,\n      (gridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n        guid: gridFilter.guid,\n        type: RX_RECORD_GRID.components.filter,\n        data: {\n          fieldId: gridFilter.fieldId,\n          value: gridFilter.value,\n          ...(gridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: gridFilter.$DISPLAYVALUE$ })\n        }\n      })\n    );\n  }\n\n  getColumnComponentPayloads(\n    columns: IRecordGridDesignInspectorColumnConfig[],\n    initialSortColumn: IRecordGridSortEditorModel\n  ): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel>[] {\n    return _map(columns, (inspectorColumn, index): IViewComponentDesignSetPayload<IRecordGridColumnDesignModel> => {\n      let sortable: IRecordGridSortable = 'false';\n\n      if (initialSortColumn?.fieldId === inspectorColumn.fieldId && inspectorColumn.sortable !== false) {\n        sortable = JSON.stringify({\n          direction: initialSortColumn.direction\n        } as IRecordGridSortableObject) as IRecordGridSortable;\n      } else if (isObject(inspectorColumn.sortable) || inspectorColumn.sortable === true) {\n        sortable = 'true';\n      }\n\n      const columnDesignModel: IRecordGridColumnDesignModel = {\n        alignment: inspectorColumn.alignment,\n        fieldId: inspectorColumn.fieldId,\n        filterable: inspectorColumn.filterable,\n        filterType: inspectorColumn.filterType,\n        index: String(inspectorColumn.index),\n        sortable,\n        title: inspectorColumn.title,\n        searchable: inspectorColumn.searchable,\n        visible: inspectorColumn.visible,\n        cellDisplayProperties: inspectorColumn.cellDisplayProperties,\n        width: inspectorColumn.width,\n        wrapText: inspectorColumn.wrapText,\n        typeaheadKeystrokeCount: inspectorColumn.typeaheadKeystrokeCount,\n        additionalQueryCriteria: inspectorColumn.additionalQueryCriteria\n      };\n\n      return {\n        type: RX_RECORD_GRID.components.column,\n        guid: inspectorColumn.guid,\n        insertIndex: index,\n        outletName: RX_VIEW_DEFINITION.defaultOutletName,\n        data: columnDesignModel,\n        children: [\n          ...this.getColumnActionComponentPayloads(inspectorColumn.actions),\n          ...this.getNamedFilterOptionPayloads(inspectorColumn.namedFilterOptions)\n        ]\n      };\n    });\n  }\n\n  getGridFilterPresetComponentPayloads(\n    filterPresets: IRecordGridPredefinedFilterPreset[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel>[] {\n    const namedFilterGuids = columns.reduce(\n      (result, column) => result.concat(...column.namedFilterOptions.map((namedFilter) => namedFilter.guid)),\n      []\n    );\n\n    const selectedFieldIds = columns.map((column) => column.fieldId);\n\n    return _map(\n      filterPresets,\n      (filterPreset): IViewComponentDesignSetPayload<IRecordGridFilterPresetDescriptorModel> => {\n        const newRecordGridFilters = filterPreset.recordGridFilters\n          .filter((filter) => selectedFieldIds.includes(filter.fieldId))\n          .filter((filter) => {\n            const value = isObject(filter.value) ? filter.value : this.rxJsonParserService.tryParseJson(filter.value);\n\n            return (\n              !value?.[RecordGridNamedFilterOptionKey] ||\n              namedFilterGuids.includes(value[RecordGridNamedFilterOptionKey])\n            );\n          });\n\n        const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          filterPreset.filters,\n          newRecordGridFilters\n        );\n\n        return {\n          guid: filterPreset.guid,\n          type: RX_RECORD_GRID.components.filterPreset,\n          data: {\n            title: filterPreset.title,\n            filters: newFilterData\n              ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n                  JSON.stringify(newFilterData),\n                  newRecordGridFilters\n                )\n              : null\n          },\n          children: _map(\n            newRecordGridFilters,\n            (recordGridFilter): IViewComponentDesignSetPayload<IRecordGridFilterDescriptorModel> => ({\n              guid: recordGridFilter.guid,\n              type: RX_RECORD_GRID.components.filter,\n              data: {\n                fieldId: recordGridFilter.fieldId,\n                value: recordGridFilter.value,\n                ...(recordGridFilter.$DISPLAYVALUE$ && { $DISPLAYVALUE$: recordGridFilter.$DISPLAYVALUE$ })\n              }\n            })\n          )\n        };\n      }\n    );\n  }\n\n  getFilterPresetDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IRecordGridPredefinedFilterPreset[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset),\n      (\n        filterPresetsDescriptor: IViewComponentDesignData<IRecordGridFilterPresetDescriptorModel>\n      ): IRecordGridPredefinedFilterPreset => ({\n        filters: filterPresetsDescriptor.data.filters,\n        recordGridFilters: _map(\n          _filter(\n            filterPresetsDescriptor.children,\n            (definition) => definition.type === RX_RECORD_GRID.components.filter\n          ),\n          (presetFilter: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n            fieldId: presetFilter.data.fieldId,\n            value: presetFilter.data.value,\n            guid: presetFilter.guid,\n            $DISPLAYVALUE$: presetFilter.data.$DISPLAYVALUE$\n          })\n        ),\n        title: filterPresetsDescriptor.data.title,\n        guid: filterPresetsDescriptor.guid\n      })\n    ).filter((filterPreset) => filterPreset.recordGridFilters?.length > 0);\n  }\n\n  private getActionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): IViewComponentDesignData<IViewActionDesignProperties>[] {\n    return _map(\n      _filter(\n        componentDesignData.children,\n        (definition) => definition.type === RxViewComponentType.Action\n      ) as IViewComponentDesignData<IViewActionDesignProperties>[],\n      (columnAction) => ({\n        ...columnAction,\n        data: { ...columnAction.data }\n      })\n    );\n  }\n\n  private getNamedFilterOptionsFromComponent(\n    componentDesignData: IViewComponentDesignData\n  ): INamedFilterOptionDesignData[] {\n    return componentDesignData.children\n      .filter((definition) => definition.type === RX_RECORD_GRID.components.filterPreset)\n      .map((namedFilterOptionData: IViewComponentDesignData<IRecordGridColumnNamedFilterOptionDesign>) => ({\n        ...namedFilterOptionData,\n        data: { ...namedFilterOptionData.data }\n      }));\n  }\n\n  getDefaultColumns(recordDefinition: IRecordDefinition): IRecordGridDesignInspectorColumnConfig[] {\n    let columns: IRecordGridDesignInspectorColumnConfig[] = [];\n\n    if (recordDefinition) {\n      const fieldDefinitions = recordDefinition.fieldDefinitions;\n      const coreFieldIds = RX_RECORD_DEFINITION.coreFieldIds;\n\n      columns = [\n        {\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.displayId).name,\n          fieldId: String(coreFieldIds.displayId),\n          searchable: true\n        }\n      ];\n\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType) {\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.modifiedDate).name,\n          fieldId: String(coreFieldIds.modifiedDate),\n          searchable: false\n        });\n\n        columns.push({\n          title: find(fieldDefinitions, (fieldDefinition) => fieldDefinition.id === coreFieldIds.description).name,\n          fieldId: String(coreFieldIds.description),\n          searchable: true\n        });\n      }\n\n      const defaultValues = reduce(\n        RX_RECORD_GRID.columnProperties,\n        (result, columnProperty) => {\n          result[columnProperty.name] = columnProperty.defaultValue;\n\n          return result;\n        },\n        {} as IPlainObject\n      );\n\n      forEach(columns, (column, index) =>\n        defaults(column, defaultValues, {\n          index,\n          guid: this.rxGuidService.generate()\n        } as IRecordGridDesignInspectorColumnConfig)\n      );\n    }\n\n    return columns;\n  }\n\n  getInitialSortColumnModel(columns: IRecordGridDesignInspectorColumnConfig[]): IRecordGridSortEditorModel {\n    const selectedSortColumn = find(columns, (column) => isObject(column.sortable));\n\n    return selectedSortColumn\n      ? {\n          direction: (selectedSortColumn.sortable as IRecordGridSortableObject).direction,\n          fieldId: selectedSortColumn.fieldId\n        }\n      : null;\n  }\n\n  getInspectorColumnsFromDesignData(\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): IRecordGridDesignInspectorColumnConfig[] {\n    return columnsDesignModel.map((columnDescriptor): IRecordGridDesignInspectorColumnConfig => {\n      const column = columnDescriptor.data;\n\n      return {\n        ...pick(column, [\n          'alignment',\n          'fieldId',\n          'filterType',\n          'searchable',\n          'title',\n          'cellDisplayProperties',\n          'width',\n          'typeaheadKeystrokeCount',\n          'additionalQueryCriteria'\n        ]),\n        actions: this.getActionsFromComponent(columnDescriptor),\n        namedFilterOptions: this.getNamedFilterOptionsFromComponent(columnDescriptor),\n        guid: columnDescriptor.guid,\n        filterable:\n          this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable),\n        sortable:\n          (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable as boolean) as any) ||\n          isUndefined(column.sortable),\n        visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n        wrapText: this.rxRecordGridConfigUtilsService.getBooleanValue(column.wrapText),\n        index: Number(column.index)\n      };\n    });\n  }\n\n  getComponentProperties(componentDesignProperties: IRecordGridDesignProperties): IRecordGridProperties {\n    return {\n      bordered: componentDesignProperties.bordered ?? true,\n      expandable: componentDesignProperties.expandable,\n      name: componentDesignProperties.name,\n      recordDefinitionName: componentDesignProperties.recordDefinitionName,\n      showDataForAllLocales: componentDesignProperties.showDataForAllLocales,\n      associationDefinitionName: componentDesignProperties.associationDefinitionName,\n      associatedRecordNodeSide: componentDesignProperties.associatedRecordNodeSide,\n      associatedRecordId: componentDesignProperties.associatedRecordId,\n      associatedRoleName: componentDesignProperties.associatedRoleName,\n      filterExpression: componentDesignProperties.filterExpression,\n      filters: isObject(componentDesignProperties.filters)\n        ? componentDesignProperties.filters.filtersJson\n        : componentDesignProperties.filters,\n      defaultFilterPreset: this.getDefaultFilterPreset(componentDesignProperties),\n      cardLayoutWidth: componentDesignProperties.cardLayoutWidth,\n      enableFiltering: componentDesignProperties.enableFiltering,\n      requiredFilters: componentDesignProperties.requiredFilters ?? 0,\n      getDataForHiddenColumns: componentDesignProperties.getDataForHiddenColumns ?? true,\n      enableFilterPresets: componentDesignProperties.enableFilterPresets,\n      enableRowSelection: componentDesignProperties.enableRowSelection,\n      styles: componentDesignProperties.styles,\n      striped: !!componentDesignProperties.striped,\n      viewPresetSelector: componentDesignProperties.viewPresetSelector,\n      [RX_AVAILABLE_ON_DEVICES_PROP_NAME]: componentDesignProperties[RX_AVAILABLE_ON_DEVICES_PROP_NAME]\n    };\n  }\n\n  private getDefaultFilterPreset(componentDesignProperties: IRecordGridDesignProperties): string {\n    if (componentDesignProperties.defaultFilterPreset && componentDesignProperties.filterPresets) {\n      return componentDesignProperties.filterPresets.some(\n        (filterPreset) => filterPreset.guid === componentDesignProperties.defaultFilterPreset\n      )\n        ? componentDesignProperties.defaultFilterPreset\n        : null;\n    } else if (componentDesignProperties.defaultFilterPreset && !componentDesignProperties.filterPresets) {\n      return componentDesignProperties.defaultFilterPreset;\n    }\n\n    return null;\n  }\n\n  getComponentDesignProperties(\n    componentProperties: IRecordGridProperties,\n    initialComponentProperties: IRecordGridDesignProperties,\n    columnsDesignModel: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    basicRecordGridFilters: IRxRecordGridFilter[],\n    filterPresets: IRecordGridPredefinedFilterPreset[]\n  ): IRecordGridDesignProperties {\n    const columns = this.getInspectorColumnsFromDesignData(columnsDesignModel);\n\n    componentProperties = {\n      ...initialComponentProperties,\n      ...componentProperties\n    };\n\n    return {\n      ...componentProperties,\n      mode: componentProperties.associationDefinitionName\n        ? RecordGridDesignDefinitionMode.Association\n        : RecordGridDesignDefinitionMode.Record,\n      filters: {\n        basicFilters: basicRecordGridFilters,\n        filtersJson: componentProperties.filters\n      },\n      filterMode: componentProperties.filterExpression ? RecordGridFilterMode.Expression : RecordGridFilterMode.Basic,\n      filterPresets,\n      initialSortColumn: this.getInitialSortColumnModel(columns),\n      columns\n    };\n  }\n\n  getActionButtonDescriptorsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IActionButtonProperties>[] {\n    return definitions.filter((definition) => definition.type === RxViewComponentType.ActionButton);\n  }\n\n  getGridViewPresetsFromChildData(\n    definitions: IViewComponentDesignData[]\n  ): IViewComponentDesignData<IGridViewPresetProperties>[] {\n    return definitions.filter(\n      (definition) => definition.type === RX_RECORD_GRID.components.viewPreset\n    ) as IViewComponentDesignData<IGridViewPresetProperties>[];\n  }\n\n  getBasicRecordGridFiltersFromChildData(definitions: IViewComponentDesignData[]): IRxRecordGridFilter[] {\n    return _map(\n      definitions.filter((definition) => definition.type === RX_RECORD_GRID.components.filter),\n      (basicFilterDescriptor: IViewComponentDesignData<IRecordGridFilterDescriptorModel>): IRxRecordGridFilter => ({\n        fieldId: basicFilterDescriptor.data.fieldId,\n        value: basicFilterDescriptor.data.value,\n        guid: basicFilterDescriptor.guid,\n        $DISPLAYVALUE$: basicFilterDescriptor.data.$DISPLAYVALUE$\n      })\n    );\n  }\n\n  getRowActionButtonPayloads(rowActions: IRowAction[]): IViewComponentDesignSetPayload<IActionButtonProperties>[] {\n    return rowActions.map((rowAction) => ({\n      type: RxViewComponentType.ActionButton,\n      guid: rowAction.guid,\n      data: omit(rowAction, 'actions', 'guid'),\n      outletName: RX_RECORD_GRID.rowActionsOutletName,\n      children: this.getColumnActionComponentPayloads(rowAction.actions)\n    }));\n  }\n\n  getInspector(\n    model: IRecordGridDesignProperties,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): IViewDesignerInspectorConfig {\n    const hasRecordDefinition = Boolean(model.recordDefinitionName && recordDefinition);\n\n    const generalControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'name',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Name',\n          tooltip: new Tooltip('Enter a name to uniquely identify the Record grid.')\n        } as ITextFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          required: false,\n          label: 'Mode',\n          items: [\n            {\n              value: RecordGridDesignDefinitionMode.Record,\n              name: 'Record'\n            },\n            {\n              value: RecordGridDesignDefinitionMode.Association,\n              name: 'Association'\n            }\n          ]\n        } as IGroupButtonFormControlOptions\n      },\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? 'Record definition to show'\n              : 'Record definition name',\n          definitionType:\n            model.mode === RecordGridDesignDefinitionMode.Association\n              ? RxDefinitionPickerType.RegularDataRecord\n              : RxDefinitionPickerType.Record,\n          required: true,\n\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (!isEmpty(model.columns) && Boolean(oldValue)) {\n              return this.rxModalService.confirm({\n                title: 'Warning',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message:\n                  'Initial column sort, initial filters, and added grid columns will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IDefinitionPickerComponentOptions\n      }\n    ];\n\n    const presentationControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'cardLayoutWidth',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Card layout width',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.cardLayoutWidthOptions,\n          emptyOption: true,\n          tooltip: new Tooltip('The width of the Record grid view component at which it will switch to card layout.')\n        } as ISelectFormControlOptions\n      },\n      {\n        name: 'initialSortColumn',\n        component: RecordGridSortEditorControlComponent,\n        options: {\n          label: 'Initial column sort',\n          gridColumns: sortBy(model.columns, 'title'),\n          recordDefinition\n        } as IRecordGridSortEditorControlOptions\n      },\n      {\n        name: 'enableRowSelection',\n        component: OptionalSelectFormControlComponent,\n        options: {\n          label: 'Enable row selection',\n          options: [\n            {\n              id: RX_RECORD_GRID.selectionTypes.multiple,\n              name: 'Multiple rows'\n            },\n            {\n              id: RX_RECORD_GRID.selectionTypes.single,\n              name: 'Single row'\n            }\n          ]\n        } as IOptionalSelectFormControlOptions\n      },\n      {\n        name: 'expandable',\n        component: SwitchFormControlComponent,\n        hidden: !this.rxFeatureService.isFeatureEnabled('DRD21-44922'),\n        options: {\n          label: 'Enable grid width expansion',\n          tooltip: new Tooltip(\n            'If enabled, the grid will expand in width to accommodate wider columns. If one or more columns extend beyond the right border of the grid, a horizontal scroll bar will appear.<br>Column width will be converted to pixels if grid width expansion mode is enabled.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'bordered',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show border lines'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'striped',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show striped rows'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'showDataForAllLocales',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Show data for all locales',\n          tooltip: new Tooltip(\n            'If enabled, data for all locales will be displayed in the grid at runtime. If disabled, only data for current locale will be displayed.'\n          )\n        } as ISwitcherFormControlOptions\n      },\n      getAvailableOnDevicesInspectorConfig(),\n      getStylesFieldInspectorConfig()\n    ];\n\n    if (model.mode === RecordGridDesignDefinitionMode.Association) {\n      if (hasRecordDefinition) {\n        generalControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Association to use',\n            options: _map(\n              recordAssociationDefinitions,\n              (associationDescriptor): ISelectOption => ({\n                id: associationDescriptor.name,\n                name: this.rxDefinitionNameService.getDisplayName(associationDescriptor.name)\n              })\n            ),\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      const selectedAssociationDefinition = find(\n        recordAssociationDefinitions,\n        (definition) => definition.name === model.associationDefinitionName\n      );\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.nodeAId === selectedAssociationDefinition.nodeBId\n      ) {\n        generalControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            required: true,\n            label: 'Associated record node side',\n            options: [\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value,\n                name: selectedAssociationDefinition.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n                name: selectedAssociationDefinition.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ],\n            emptyOption: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      generalControls.push({\n        name: 'associatedRecordId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Associated record ID',\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      if (\n        selectedAssociationDefinition &&\n        selectedAssociationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value\n      ) {\n        generalControls.push({\n          name: 'associatedRoleName',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Associated role name'\n          } as IExpressionInspectorControlOptions\n        });\n      }\n    }\n\n    if (hasRecordDefinition) {\n      generalControls.push({\n        name: 'columns',\n        component: RecordGridColumnEditorControlComponent,\n        options: {\n          recordDefinition\n        } as IRecordGridColumnEditorControlOptions\n      });\n\n      generalControls.push({\n        name: 'getDataForHiddenColumns',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Get data for hidden columns',\n          tooltip: new Tooltip(\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.record-grid.get-data-for-hidden-columns.tooltip'\n            )\n          )\n        } as ISwitcherFormControlOptions\n      });\n\n      generalControls.push({\n        widgetName: 'rowActions',\n        component: RxRecordGridRowActionEditorWidgetComponent\n      });\n    }\n\n    const filtersControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'enableFiltering',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable filtering'\n        } as ISwitcherFormControlOptions\n      },\n      {\n        name: 'requiredFilters',\n        component: SelectFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Required number of filters',\n          sortAlphabetically: false,\n          options: RX_RECORD_GRID.numberOfFiltersOptions,\n          emptyOption: false,\n          tooltip: new Tooltip(\n            'Data will be displayed in the grid only if a) the number of applied filters is greater than or equal to the required number of filters, or b) a search is performed.'\n          )\n        } as ISelectFormControlOptions\n      }\n    ];\n\n    if (hasRecordDefinition) {\n      filtersControls.push({\n        name: 'filterMode',\n        component: GroupButtonFormControlComponent,\n        options: {\n          label: 'Initial filters',\n          items: [\n            {\n              name: 'Basic',\n              value: RecordGridFilterMode.Basic\n            },\n            {\n              name: 'Expression',\n              value: RecordGridFilterMode.Expression\n            }\n          ],\n          tooltip: new Tooltip(\n            'Select the records that should be displayed on the deployed application UI. Application users can add filters in the deployed application.'\n          ),\n          beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n            if (\n              (newValue === RecordGridFilterMode.Expression && model.filters.filtersJson) ||\n              (newValue === RecordGridFilterMode.Basic && model.filterExpression)\n            ) {\n              return this.rxModalService.confirm({\n                title: 'Change filter type',\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: 'Current filter will be cleared. Do you want to continue?'\n              });\n            } else {\n              return Promise.resolve(true);\n            }\n          }\n        } as IGroupButtonFormControlOptions\n      });\n\n      if (model.filterMode === RecordGridFilterMode.Basic) {\n        filtersControls.push({\n          name: 'filters',\n          component: RecordGridFilterSelectControlComponent,\n          options: {\n            primaryRecordDefinition: recordDefinition\n          } as IRecordGridFilterSelectControlOptions\n        });\n      } else {\n        filtersControls.push({\n          name: 'filterExpression',\n          component: ExpressionInspectorControlComponent,\n          options: {\n            label: 'Initial filters',\n            isLabelHidden: true\n          } as IExpressionInspectorControlOptions\n        });\n      }\n\n      filtersControls.push({\n        name: 'enableFilterPresets',\n        component: SwitchFormControlComponent,\n        isDisabled: !model.enableFiltering,\n        options: {\n          label: 'Enable filter presets'\n        } as ISwitcherFormControlOptions\n      });\n\n      filtersControls.push({\n        name: 'filterPresets',\n        component: RecordGridFilterPresetEditorControlComponent,\n        options: {\n          label: 'Filter presets',\n          tooltip: new Tooltip('Predefine sets of record grid filters users can apply.'),\n          primaryRecordDefinition: recordDefinition,\n          columns: model.columns.filter((column) => column.filterable)\n        } as IRecordGridFilterPresetEditorControlOptions\n      });\n    }\n\n    if (!isEmpty(model.filterPresets)) {\n      filtersControls.push({\n        name: 'defaultFilterPreset',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Default filter preset',\n          tooltip: new Tooltip('Select a filter preset to be applied when a user opens this view for the first time.'),\n          options: _map(\n            model.filterPresets,\n            (filterPreset): ISelectOption => ({ id: filterPreset.guid, name: filterPreset.title })\n          ),\n          emptyOption: true\n        } as ISelectFormControlOptions\n      });\n    }\n\n    const inspectorSectionConfigs = [\n      {\n        label: 'General',\n        controls: generalControls\n      },\n      {\n        label: 'Filters',\n        controls: filtersControls\n      },\n      {\n        label: 'Presentation',\n        controls: presentationControls\n      },\n      {\n        label: 'View presets',\n        controls: [\n          {\n            component: RecordGridViewPresetsWidgetComponent,\n            options: {\n              recordDefinition: recordDefinition\n            } as IRecordGridViewPresetsWidgetOptions\n          }\n        ]\n      }\n    ];\n\n    return { inspectorSectionConfigs };\n  }\n\n  getColumnDataDictionaryBranch(\n    recordGridGuid: string,\n    componentDescriptorName: string,\n    componentName$: Observable<string>,\n    columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]>,\n    recordDefinition$: Observable<IRecordDefinition>,\n    associationDefinitionDisplayName$: Observable<string>\n  ): Observable<IViewComponentDesignCommonDataDictionaryBranch> {\n    const columnDataDictionaryBranch$ = combineLatest([columnComponents$, recordDefinition$]).pipe(\n      switchMap(([columnComponents, recordDefinition]) =>\n        recordDefinition\n          ? this.getColumnsDataDictionaryBuilder(recordGridGuid, columnComponents, recordDefinition).pipe(\n              map(\n                (buildColumnDataDictionary): IViewComponentDesignCommonDataDictionaryBranch => ({\n                  label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                  expression: `\\${view.components.${recordGridGuid}.api}`,\n                  children: [\n                    {\n                      label: 'First selected row',\n                      expression: `\\${view.components.${recordGridGuid}.firstSelectedRow}`,\n                      children: buildColumnDataDictionary('firstSelectedRow')\n                    },\n                    {\n                      label: 'Is user allowed to delete records',\n                      expression: `\\${view.components.${recordGridGuid}.isUserAllowedToDeleteRecords}`\n                    },\n                    {\n                      label: 'Last action row',\n                      expression: `\\${view.components.${recordGridGuid}.clickableRow}`,\n                      children: buildColumnDataDictionary('clickableRow')\n                    },\n                    {\n                      label: 'Selected rows',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRows}`,\n                      children: buildColumnDataDictionary('fieldValuesByFieldId')\n                    },\n                    {\n                      label: 'Selected row count',\n                      expression: `\\${view.components.${recordGridGuid}.selectedRowCount}`\n                    },\n                    {\n                      label: 'Total row count',\n                      expression: `\\${view.components.${recordGridGuid}.totalRowCount}`\n                    },\n                    {\n                      label: 'Query expression',\n                      expression: `\\${view.components.${recordGridGuid}.queryExpression}`\n                    },\n                    {\n                      label: 'Last refresh time',\n                      expression: `\\${view.components.${recordGridGuid}.lastRefreshTime}`\n                    }\n                  ]\n                })\n              ),\n              take(1)\n            )\n          : of(null)\n      )\n    );\n\n    return combineLatest([componentName$, columnDataDictionaryBranch$, associationDefinitionDisplayName$]).pipe(\n      map(([label, dataDictionaryBranch, associationDefinitionDisplayName]) =>\n        dataDictionaryBranch\n          ? ({\n              ...dataDictionaryBranch,\n              label: this.getComponentName(\n                componentDescriptorName,\n                dataDictionaryBranch.label,\n                associationDefinitionDisplayName,\n                label\n              )\n            } as IViewComponentDesignCommonDataDictionaryBranch)\n          : null\n      )\n    );\n  }\n\n  private getColumnsDataDictionaryBuilder(\n    recordGridGuid: string,\n    columnComponents: IViewComponentDesignData<IRecordGridDesignColumnData>[],\n    recordDefinition: IRecordDefinition\n  ): Observable<ColumnsDataDictionaryBuilder> {\n    return (\n      columnComponents.length\n        ? forkJoin(\n            columnComponents.map((component) =>\n              this.rxRecordGridUtilsService.getFieldDefinition(component.data.fieldId, recordDefinition).pipe(\n                filter((fieldDefinition) => !!fieldDefinition),\n                map((fieldDefinition) =>\n                  this.getColumnDataDictionaryBranchBuilder(recordGridGuid, component, fieldDefinition)\n                )\n              )\n            ) as Observable<ColumnDataDictionaryBranchBuilder>[]\n          )\n        : of([])\n    ).pipe(\n      map(\n        (builders) => (gridPropertyName: string) =>\n          builders.map((buildColumnDataDictionaryBranch) =>\n            buildColumnDataDictionaryBranch.call(this, gridPropertyName)\n          )\n      )\n    );\n  }\n\n  private getColumnDataDictionaryBranchBuilder(\n    recordGridGuid: string,\n    columnComponent: IViewComponentDesignData<IRecordGridDesignColumnData>,\n    fieldDefinition: IFieldDefinition\n  ): ColumnDataDictionaryBranchBuilder {\n    const selectionList =\n      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n        ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n            label: optionName,\n            expression: `\\${view.components.${recordGridGuid}.recordDefinition.fieldDefinitionsById[${columnComponent.data.fieldId}].optionsById[${optionValue}].id}`\n          }))\n        : undefined;\n\n    return (propertyName: string): IViewComponentDesignCommonDataDictionaryBranch => ({\n      label: columnComponent.data.title?.trim() || `[${fieldDefinition.name}]`,\n      expression: `\\${view.components.${recordGridGuid}.${propertyName}.${columnComponent.data.fieldId}}`,\n      autocompleteOptions: selectionList,\n      children:\n        fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n          ? [\n              {\n                label: `${columnComponent.data.title} (Option name)`,\n                expression: `\\${view.components.${recordGridGuid}.${propertyName}.selectionFieldOptionNamesById.${columnComponent.data.fieldId}}`\n              },\n              {\n                label: 'Options',\n                children: selectionList\n              }\n            ]\n          : null\n    });\n  }\n\n  getComponentName(\n    componentDescriptorName: string,\n    recordDefinitionDisplayName?: string,\n    associationDefinitionDisplayName?: string,\n    name?: string\n  ): string {\n    const additionalLabels = [recordDefinitionDisplayName, associationDefinitionDisplayName, name].filter(Boolean);\n\n    return additionalLabels.length\n      ? `${componentDescriptorName} (${additionalLabels.join(': ')})`\n      : componentDescriptorName;\n  }\n\n  getGridViewPresetPayload(\n    viewPresetGuid: string,\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewComponentDesignSetPayload {\n    return {\n      type: RX_RECORD_GRID.components.viewPreset,\n      guid: this.rxGuidService.generate(),\n      data: {\n        viewPresetGuid,\n        filters: null\n      },\n      children: columns.map((column) => this.getColumnPresetPayload(column))\n    };\n  }\n\n  getColumnPresetPayload(\n    column: IRecordGridDesignInspectorColumnConfig\n  ): IViewComponentDesignSetPayload<IGridViewColumnProperties> {\n    return {\n      type: RX_RECORD_GRID.components.columnViewPreset,\n      data: {\n        fieldId: column.fieldId,\n        index: column.index,\n        visible: column.visible,\n        sortable: isObject(column.sortable) ? column.sortable : null,\n        width: column.width\n      }\n    };\n  }\n\n  getPresetsList(guid: string): Observable<IPresetItem[]> {\n    return guid\n      ? this.viewDesignerFacade.getChildComponents<IViewPresetProperties>(guid).pipe(\n          map((res) => res.sort((a, b) => a.data.index - b.data.index)),\n          map((res) => res.map((item) => ({ guid: item.guid, name: item.data.label }))),\n          debounceTime(50) // used to let store be `stabilized` when indexes are updating for each preset\n        )\n      : of([]);\n  }\n}\n","import { IAssociationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  IViewLayout,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewComponentDropPredicateData,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  cloneDeep,\n  compact,\n  filter as _filter,\n  find,\n  flatten,\n  head,\n  includes,\n  isEmpty,\n  isEqual,\n  pick,\n  pull\n} from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject, zip } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  skip,\n  skipWhile,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { ActionButtonDesignModel } from '../../action-button/design/action-button-design.model';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport {\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridFilterMode } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport { RxRecordGridDesignUtilsService } from './record-grid-design-utils.service';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IViewPresetSelectorDesignProperties } from '../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IGridViewPresetProperties } from '../common/types/record-grid.types';\nimport { IPresetItem } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\n\nexport class RecordGridDesignModel\n  extends ViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n  implements IViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n{\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxViewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxGuidService = this.injector.get(RxGuidService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private preservedRecordDefinition: IRecordDefinition = null;\n  private preservedRecordAssociationDefinitions: IAssociationDefinition[] = [];\n  sandbox: IViewComponentDesignSandbox<IRecordGridDesignProperties>;\n\n  currentGridDesignProperties: IRecordGridDesignProperties = null;\n  actionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  rowActionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  componentPropertiesChangeFromCanvas$ = new Subject<IRecordGridDesignProperties>();\n  recordDefinition$: Observable<IRecordDefinition>;\n  recordAssociationDefinitions$: Observable<IAssociationDefinition[]>;\n  columns$ = this.sandbox.getComponentPropertyValue('columns');\n  enableFiltering$ = this.sandbox.getComponentPropertyValue('enableFiltering');\n  recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n  associatedRecordNodeSide$ = this.sandbox.getComponentPropertyValue('associatedRecordNodeSide');\n  childComponentsTree$ = this.sandbox.getChildComponentsTree();\n\n  viewPresetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.sandbox.getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector);\n\n  gridViewPresets$: Observable<IViewComponentDesignData<IGridViewPresetProperties>[]> = this.childComponentsTree$.pipe(\n    map((components) => this.rxRecordGridDesignUtilsService.getGridViewPresetsFromChildData(components))\n  );\n\n  viewPresetSelectorGuid$ = this.sandbox.getComponentPropertyValue('viewPresetSelector').pipe(\n    map((val) => this.extractViewPresetSelectorGuid(val)),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.viewPresetSelectorGuid$.pipe(\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    distinctUntilChanged(isEqual),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  rowActionButtonGuids$ = this.sandbox.getLayout(this.sandbox.guid).pipe(\n    filter<IViewLayout>(Boolean),\n    map((layout) => {\n      const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n      return head(rowActionsOutlet.columns).children;\n    }),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProperties: IRecordGridDesignProperties): IRecordGridDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    const initialProps: IRecordGridDesignProperties = {\n      bordered: true,\n      expandable: false,\n      name: null,\n      mode: RecordGridDesignDefinitionMode.Record,\n      recordDefinitionName: null,\n      showDataForAllLocales: false,\n      associationDefinitionName: null,\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      styles: null,\n      cardLayoutWidth: null,\n      enableFiltering: true,\n      getDataForHiddenColumns: true,\n      requiredFilters: 0,\n      enableFilterPresets: true,\n      defaultFilterPreset: null,\n      initialSortColumn: null,\n      columns: [],\n      filterMode: RecordGridFilterMode.Basic,\n      filters: { basicFilters: [], filtersJson: null },\n      filterExpression: null,\n      filterPresets: [],\n      striped: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE\n    };\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    this.recordAssociationDefinitions$ = this.recordDefinitionName$.pipe(\n      mergeMap((recordDefinitionName) => this.getRecordAssociationDefinitions(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    const columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]> =\n      this.childComponentsTree$.pipe(\n        map((components) => components.filter((component) => component.type === RX_RECORD_GRID.components.column)),\n        // ignore child action button component updates\n        distinctUntilChanged(isEqual)\n      );\n\n    const basicRecordGridFilters$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    const filterPresets$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    this.actionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => !includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    this.rowActionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    // remove grid view presets in case if bound preset selector is removed\n    this.viewPresetSelectors$\n      .pipe(\n        map((viewPresetSelectors) => viewPresetSelectors.map((selector) => selector.guid).sort()),\n        distinctUntilChanged<string[]>(isEqual),\n        withLatestFrom(this.viewPresetSelectorGuid$),\n        filter(\n          ([viewPresetSelectors, viewPresetSelectorGuid]) =>\n            viewPresetSelectorGuid && !viewPresetSelectors.includes(viewPresetSelectorGuid)\n        ),\n        switchMap(() => this.childComponentsTree$.pipe(take(1))),\n        map((components) => components.filter((comp) => comp.type !== RX_RECORD_GRID.components.viewPreset)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((components) => {\n        this.sandbox.setChildren(components);\n        this.sandbox.updateComponentProperties({ viewPresetSelector: null });\n      });\n\n    this.sandbox.viewModelsInitialized$\n      .pipe(\n        withLatestFrom(this.rowActionButtonComponents$),\n        map(([viewModelsInitialized, rowActionButtons]) => rowActionButtons),\n        filter((rowActionButtons) => !!rowActionButtons.length)\n      )\n      .subscribe((rowActionButtons) => {\n        rowActionButtons.forEach((rowActionButton) => {\n          const model = this.sandbox.getComponentModel<ActionButtonDesignModel>(rowActionButton.guid);\n\n          model.setValidationIssues([]);\n        });\n      });\n\n    merge(this.sandbox.componentProperties$.pipe(skip(1)), this.componentPropertiesChangeFromCanvas$)\n      .pipe(\n        distinctUntilChanged((oldValue, newValue) => isEqual(this.currentGridDesignProperties, newValue)),\n        mergeMap(\n          (\n            componentDesignProperties: IRecordGridDesignProperties\n          ): Observable<[IRecordGridDesignProperties, IRecordGridDesignProperties]> => {\n            const previousComponentDesignProperties = this.currentGridDesignProperties;\n\n            if (\n              previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n            ) {\n              return zip(\n                this.getRecordDefinition(componentDesignProperties.recordDefinitionName),\n                this.getRecordAssociationDefinitions(componentDesignProperties.recordDefinitionName)\n              ).pipe(map(() => [previousComponentDesignProperties, componentDesignProperties]));\n            } else {\n              return of([previousComponentDesignProperties, componentDesignProperties]);\n            }\n          }\n        ),\n        withLatestFrom(this.actionButtonComponents$, this.rowActionButtonComponents$, this.gridViewPresets$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([\n          [previousComponentDesignProperties, componentDesignProperties],\n          actionButtonComponents,\n          rowActionButtonComponents,\n          gridViewPresets\n        ]) => {\n          const recordDefinition = this.preservedRecordDefinition;\n          const recordAssociationDefinitions = this.preservedRecordAssociationDefinitions;\n\n          let propertiesToUpdate: Partial<IRecordGridDesignProperties>;\n\n          if (!componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: false\n            };\n          } else if (!previousComponentDesignProperties.enableFiltering && componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: true\n            };\n          }\n\n          if (\n            previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n          ) {\n            propertiesToUpdate = {\n              filterPresets: [],\n              filters: { basicFilters: [], filtersJson: null },\n              initialSortColumn: null,\n              associationDefinitionName: null,\n              filterExpression: null\n            };\n\n            if (recordDefinition) {\n              const columns = this.rxRecordGridDesignUtilsService.getDefaultColumns(recordDefinition);\n\n              const payloads: IViewComponentDesignSetPayload[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(columns, null);\n\n              payloads.push(...actionButtonComponents);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate.columns = columns;\n            } else {\n              this.sandbox.setChildren(actionButtonComponents);\n\n              propertiesToUpdate.columns = [];\n            }\n          } else {\n            const childrenModels = pick(\n              componentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            const previousChildrenModels = pick(\n              previousComponentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            if (!isEqual(previousChildrenModels, childrenModels)) {\n              const payloads: IViewComponentDesignSetPayload<any>[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(\n                  childrenModels.columns,\n                  childrenModels.initialSortColumn\n                );\n\n              const newInspectorColumns = this.rxRecordGridDesignUtilsService.getInspectorColumnsFromDesignData(\n                payloads as IViewComponentDesignData<IRecordGridDesignColumnData>[]\n              );\n\n              payloads.push(\n                ...this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                  childrenModels.filters.basicFilters || []\n                )\n              );\n\n              const filterPresetComponentPayloads =\n                this.rxRecordGridDesignUtilsService.getGridFilterPresetComponentPayloads(\n                  childrenModels.filterPresets,\n                  newInspectorColumns.filter((column) => column.filterable)\n                );\n\n              payloads.push(...filterPresetComponentPayloads);\n\n              childrenModels.filterPresets =\n                this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(\n                  filterPresetComponentPayloads as IViewComponentDesignData[]\n                );\n\n              payloads.push(...actionButtonComponents, ...rowActionButtonComponents, ...gridViewPresets);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate = {\n                columns: newInspectorColumns,\n                initialSortColumn: this.rxRecordGridDesignUtilsService.getInitialSortColumnModel(newInspectorColumns),\n                filterPresets: childrenModels.filterPresets\n              };\n            }\n          }\n\n          if (previousComponentDesignProperties.filterMode !== componentDesignProperties.filterMode) {\n            if (componentDesignProperties.filterMode === RecordGridFilterMode.Basic) {\n              propertiesToUpdate = {\n                filterExpression: null\n              };\n            } else {\n              propertiesToUpdate = {\n                filters: { basicFilters: [], filtersJson: null }\n              };\n            }\n          }\n\n          if (\n            previousComponentDesignProperties.associationDefinitionName !==\n            componentDesignProperties.associationDefinitionName\n          ) {\n            propertiesToUpdate = {\n              ...(propertiesToUpdate || {}),\n              associatedRecordNodeSide: this.getAssociatedRecordNodeSide(\n                componentDesignProperties,\n                recordAssociationDefinitions\n              )\n            };\n          }\n\n          if (previousComponentDesignProperties.mode !== componentDesignProperties.mode) {\n            propertiesToUpdate = {\n              associationDefinitionName: null,\n              associatedRecordId: null,\n              associatedRoleName: null,\n              associatedRecordNodeSide: null\n            };\n          }\n\n          componentDesignProperties = {\n            ...componentDesignProperties,\n            ...propertiesToUpdate\n          };\n\n          if (previousComponentDesignProperties.enableFiltering && !componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              ...propertiesToUpdate,\n              requiredFilters: 0\n            };\n          }\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            propertiesToUpdate,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(\n        map((recordDefinitionName) =>\n          recordDefinitionName\n            ? null\n            : this.sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName')\n        )\n      ),\n      columnComponents$.pipe(switchMap((columns) => this.validateColumns(columns))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue('mode')\n        .pipe(\n          switchMap((mode) =>\n            mode === RecordGridDesignDefinitionMode.Association\n              ? this.validateAssociationModeProps()\n              : this.actionButtonComponents$.pipe(switchMap((components) => this.validateActionButtons(components)))\n          )\n        ),\n      this.rowActionButtonComponents$.pipe(switchMap((rowActionButtons) => this.validateRowActions(rowActionButtons))),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(compact), map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((issues) => {\n        this.sandbox.setValidationIssues(issues);\n      });\n\n    // set initial properties and inspector config\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.recordAssociationDefinitions$,\n      columnComponents$,\n      basicRecordGridFilters$,\n      filterPresets$\n    ])\n      .pipe(take(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          componentProperties,\n          recordDefinition,\n          recordAssociationDefinitions,\n          columnComponents,\n          basicRecordGridFilters,\n          filterPresets\n        ]) => {\n          const componentDesignProperties = this.rxRecordGridDesignUtilsService.getComponentDesignProperties(\n            componentProperties as unknown as IRecordGridProperties,\n            initialProps,\n            columnComponents,\n            basicRecordGridFilters,\n            filterPresets\n          );\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            componentDesignProperties,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    const name$ = this.sandbox\n      .getComponentPropertyValue('name')\n      .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n    const associationDefinitionDisplayName$ = this.associationDefinitionName$.pipe(\n      map((name) => this.rxDefinitionNameService.getDisplayName(name)),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.rxRecordGridDesignUtilsService\n      .getColumnDataDictionaryBranch(\n        this.sandbox.guid,\n        this.sandbox.descriptor.name,\n        name$,\n        columnComponents$,\n        this.recordDefinition$,\n        associationDefinitionDisplayName$\n      )\n      .pipe(skipWhile(isEmpty), takeUntil(this.sandbox.destroyed$))\n      .subscribe((dataDictionaryBranch) => {\n        this.sandbox.setCommonDataDictionary(dataDictionaryBranch);\n      });\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(map((name) => this.rxDefinitionNameService.getDisplayName(name))),\n      associationDefinitionDisplayName$,\n      name$\n    ])\n      .pipe(\n        map((names) => this.rxRecordGridDesignUtilsService.getComponentName(this.sandbox.descriptor.name, ...names)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((name) => {\n        // Set name to be used in the data dictionary for set property action if record grid will have child action buttons.\n        this.sandbox.setSettablePropertiesDataDictionary(name, []);\n      });\n\n    // updates grid view presets when view preset changes\n    this.selectedPresetsList$\n      .pipe(skip(1), withLatestFrom(this.childComponentsTree$, this.columns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([selectedPresetsList, childComponents, columns]) => {\n        this.updatePresetViewComponents(childComponents, selectedPresetsList, columns);\n      });\n  }\n\n  private updatePresetViewComponents(\n    childComponents: IViewComponentDesignData[],\n    selectedPresetsList: IPresetItem[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const gridViewPresetComponents = childComponents.filter((c) => c.type === RX_RECORD_GRID.components.viewPreset);\n\n    const gridViewPresetPayloads = selectedPresetsList.map(({ guid }) => {\n      const existing = gridViewPresetComponents.find((c) => c.data.viewPresetGuid === guid);\n\n      return existing ?? this.rxRecordGridDesignUtilsService.getGridViewPresetPayload(guid, columns);\n    });\n\n    this.sandbox.setChildrenByType(gridViewPresetPayloads, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  private getAssociatedRecordNodeSide(\n    componentDesignProperties: IRecordGridDesignProperties,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): string {\n    const selectedAssociationDefinition = componentDesignProperties.associationDefinitionName\n      ? recordAssociationDefinitions.find(({ name }) => name === componentDesignProperties.associationDefinitionName)\n      : null;\n\n    return selectedAssociationDefinition\n      ? selectedAssociationDefinition.nodeAId === componentDesignProperties.recordDefinitionName\n        ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n        : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value\n      : null;\n  }\n\n  actionButtonDropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton;\n  }\n\n  getPropertiesByName(properties: IRecordGridDesignProperties): IRecordGridProperties {\n    return this.rxRecordGridDesignUtilsService.getComponentProperties(properties);\n  }\n\n  setRowActions(rowActions: IRowAction[]): void {\n    this.rowActionButtonGuids$\n      .pipe(take(1), withLatestFrom(this.childComponentsTree$))\n      .subscribe(([rowActionButtonGuids, childComponentsTree]) => {\n        const childComponentPayloads: IViewComponentDesignSetPayload<any>[] = childComponentsTree.filter(\n          (childComponent) => !includes(rowActionButtonGuids, childComponent.guid)\n        );\n\n        childComponentPayloads.push(...this.rxRecordGridDesignUtilsService.getRowActionButtonPayloads(rowActions));\n\n        this.sandbox.setChildren(childComponentPayloads);\n\n        this.toggleActionsColumn(rowActions.length > 0);\n      });\n  }\n\n  extractViewPresetSelectorGuid(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n\n  private toggleActionsColumn(showActionsColumn: boolean): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties) => {\n      const columns = cloneDeep(componentProperties.columns);\n\n      const actionsColumn = find(columns, { fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id });\n\n      if (showActionsColumn && !actionsColumn) {\n        columns.push({\n          fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n          guid: this.rxGuidService.generate(),\n          title: RX_RECORD_GRID.actionsColumnFieldDefinition.name,\n          visible: true,\n          index: columns.length,\n          filterable: false,\n          sortable: false,\n          searchable: false\n        });\n      } else if (!showActionsColumn) {\n        pull(columns, actionsColumn);\n\n        columns.forEach((column, index) => {\n          column.index = index;\n        });\n      }\n\n      this.updateComponentPropertiesAndConfig(\n        componentProperties,\n        {\n          columns\n        },\n        this.preservedRecordDefinition,\n        this.preservedRecordAssociationDefinitions\n      );\n    });\n  }\n\n  private updateComponentPropertiesAndConfig(\n    componentDesignProperties: IRecordGridDesignProperties,\n    propertiesToUpdate: Partial<IRecordGridDesignProperties>,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): void {\n    this.currentGridDesignProperties = componentDesignProperties;\n\n    if (propertiesToUpdate) {\n      this.sandbox.updateComponentProperties(propertiesToUpdate);\n    }\n\n    this.sandbox.updateInspectorConfig(\n      this.rxRecordGridDesignUtilsService.getInspector(\n        componentDesignProperties,\n        recordDefinition,\n        recordAssociationDefinitions\n      )\n    );\n  }\n\n  private getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n        catchError((error) => of(null)),\n        tap((recordDefinition) => (this.preservedRecordDefinition = recordDefinition))\n      );\n    } else {\n      this.preservedRecordDefinition = null;\n\n      return of(null);\n    }\n  }\n\n  private getRecordAssociationDefinitions(recordDefinitionName: string): Observable<IAssociationDefinition[]> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n        map((result) => result[recordDefinitionName] || []),\n        catchError((error) => of([])),\n        tap(\n          (recordAssociationDefinitions) => (this.preservedRecordAssociationDefinitions = recordAssociationDefinitions)\n        )\n      );\n    } else {\n      this.preservedRecordAssociationDefinitions = [];\n\n      return of([]);\n    }\n  }\n\n  private validateColumns(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return columns.length\n      ? this.validateColumnActions(columns)\n      : of([this.sandbox.createError('Record grid must have at least one column.', 'columns')]);\n  }\n\n  private validateColumnActions(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest(\n      columns.map((column) => {\n        const actionViewComponents = _filter(column.children, { type: RxViewComponentType.Action });\n\n        return this.rxViewActionValidatorService.validate(actionViewComponents, 'columns').pipe(\n          map((issues) =>\n            issues.map((issue) => ({\n              ...issue,\n              data: {\n                ...issue.data,\n                columnGuid: column.guid\n              }\n            }))\n          )\n        );\n      })\n    ).pipe(map(flatten));\n  }\n\n  private validateRowActions(\n    rowActionButtons: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return rowActionButtons.length\n      ? combineLatest(\n          rowActionButtons.map((rowActionButton, index) =>\n            this.rxViewActionValidatorService.validate(rowActionButton.children, 'rowActions').pipe(\n              map((issues) =>\n                issues.map((issue) => ({\n                  ...issue,\n                  data: {\n                    ...issue.data,\n                    rowActionIndex: index\n                  }\n                }))\n              )\n            )\n          )\n        ).pipe(map(flatten))\n      : of([]);\n  }\n\n  private validateAssociationModeProps(): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest([\n      combineLatest([this.associationDefinitionName$, this.associatedRecordNodeSide$]).pipe(\n        map(([associationDefinitionName, associatedRecordNodeSide]) => {\n          if (associationDefinitionName) {\n            return associatedRecordNodeSide\n              ? null\n              : this.sandbox.createError('Associated record node side cannot be blank.', 'associatedRecordNodeSide');\n          } else {\n            return this.sandbox.createError(\n              'Association definition name cannot be blank.',\n              'associationDefinitionName'\n            );\n          }\n        })\n      ),\n      this.sandbox\n        .getComponentPropertyValue('associatedRecordId')\n        .pipe(\n          map((associatedRecordId) =>\n            associatedRecordId\n              ? null\n              : this.sandbox.createError('Associated record ID cannot be blank.', 'associatedRecordId')\n          )\n        )\n    ]).pipe(map(compact));\n  }\n\n  private validateActionButtons(\n    components: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const deleteActions = flatten(components.map((component) => component.children)).filter(\n      ({ data }: IViewComponentDesignData<IViewActionDesignProperties & { recordDefinitionName: string }>) =>\n        data.name === 'rxDeleteRecordsAction' && data.recordDefinitionName\n    );\n\n    return deleteActions.length\n      ? combineLatest(\n          deleteActions.map(({ data }) =>\n            this.rxRecordDefinitionCacheService\n              .getRecordDefinition(data.recordDefinitionName)\n              .pipe(\n                map(({ resourceType }) =>\n                  resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType\n                    ? this.sandbox.createWarning(\n                        'You have configured a Record grid action to delete Join records. Please ensure that one or more processes or rules have been defined to perform the deletion of the selected Join record instances.'\n                      )\n                    : null\n                )\n              )\n          )\n        ).pipe(map(compact))\n      : of([]);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDropData } from '@helix/platform/view/designer';\nimport { isEqual, isObject, sortBy } from 'lodash';\nimport { SortEvent } from 'primeng/api';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { ActionButtonStyle, IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IAdaptTableColumnConfig } from '../runtime/types/record-grid-column.types';\nimport { ColumnSortDirection, IRecordGridSortableObject } from '../common/types/record-grid.types';\nimport { IRecordGridSortEditorModel } from './editors/record-grid-sort-editor-control';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { IRecordGridDesignAdaptTableConfig } from './record-grid-design.types';\n\n@Component({\n  selector: 'rx-record-grid-design',\n  templateUrl: './record-grid-design.component.html',\n  styleUrls: ['./record-grid-design.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridDesignComponent implements OnInit {\n  @Input()\n  model: RecordGridDesignModel;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @Input()\n  isReadOnly: boolean;\n\n  adaptTableConfig$: Observable<IRecordGridDesignAdaptTableConfig>;\n  hasRecordDefinitionName$: Observable<boolean>;\n\n  constructor(\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.adaptTableConfig$ = this.model.columns$.pipe(\n      map((columns) => {\n        const gridColumns = sortBy(columns, (column) => column.index);\n        const initialSortGridColumn = gridColumns.find((gridColumn) => isObject(gridColumn.sortable));\n\n        let sortMeta = {\n          field: null,\n          order: null\n        };\n\n        if (initialSortGridColumn) {\n          const gridSortableObject = initialSortGridColumn.sortable as IRecordGridSortableObject;\n\n          sortMeta = {\n            field: String(initialSortGridColumn.fieldId),\n            order: this.rxRecordGridConfigUtilsService.getColumnSortOrder(gridSortableObject.direction)\n          };\n        }\n\n        return {\n          columns: gridColumns.map(\n            (gridColumn): IAdaptTableColumnConfig => ({\n              field: gridColumn.fieldId,\n              header: gridColumn.title,\n              sortable: Boolean(gridColumn.sortable),\n              hidden: !gridColumn.visible,\n              testId: this.rxRecordGridUtilsService.getTestIdForGridColumn(gridColumn.fieldId)\n            })\n          ),\n          sortMeta,\n          toolbarConfig: {\n            counter: false,\n            quickFilter: true,\n            filter: true,\n            filterTemplate: this.filterTemplate,\n            filterResults: false,\n            visibleColumnsMenu: true,\n            visibleColumnsMenuTemplate: this.visibleColumnsMenuTemplate,\n            quickFilterTriggerable: true\n          }\n        };\n      }),\n      shareReplay(1)\n    );\n\n    this.hasRecordDefinitionName$ = this.model.recordDefinition$.pipe(map(Boolean), shareReplay(1));\n  }\n\n  onSort(event: SortEvent): void {\n    this.adaptTableConfig$.pipe(take(1)).subscribe((adaptTableConfig) => {\n      if (!isEqual(event, adaptTableConfig.sortMeta)) {\n        let initialSortColumn: IRecordGridSortEditorModel;\n\n        const column = this.model.currentGridDesignProperties.columns.find(\n          (gridColumn) => gridColumn.fieldId === event.field\n        );\n\n        if (isObject(column.sortable)) {\n          if (column.sortable.direction === ColumnSortDirection.Desc) {\n            initialSortColumn = null;\n          } else {\n            initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Desc };\n          }\n        } else {\n          initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Asc };\n        }\n\n        this.model.componentPropertiesChangeFromCanvas$.next({\n          ...this.model.currentGridDesignProperties,\n          initialSortColumn\n        });\n      }\n    });\n  }\n\n  onBeforeViewComponentDrop(data: IViewComponentDropData): void {\n    if (\n      data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton &&\n      !data.draggedViewComponentGuid\n    ) {\n      data.initialPropertiesByName = {\n        ...data.initialPropertiesByName,\n        style: ActionButtonStyle.Tertiary\n      } as IActionButtonProperties;\n    }\n  }\n}\n","<div class=\"rx-record-grid-design\" [class.border]=\"!(hasRecordDefinitionName$ | async)\">\n  <adapt-empty-state\n    *ngIf=\"!(hasRecordDefinitionName$ | async); else gridTemplate\"\n    type=\"objects\"\n    label=\"Select a record definition and edit grid columns in the Properties panel.\"\n  ></adapt-empty-state>\n\n  <ng-template #gridTemplate>\n    <rx-canvas-outlet\n      [dropListOrientation]=\"'horizontal'\"\n      class=\"rx-record-grid-design__action-buttons-canvas\"\n      (beforeViewComponentDrop)=\"onBeforeViewComponentDrop($event)\"\n      [dropPredicate]=\"model.actionButtonDropPredicate\"\n    ></rx-canvas-outlet>\n\n    <adapt-table\n      #adaptTable\n      class=\"rx-record-grid-design__table\"\n      [columns]=\"(adaptTableConfig$ | async).columns\"\n      [sortable]=\"!isReadOnly\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'80px'\"\n      [rowExpandMode]=\"\"\n      [sortMode]=\"'single'\"\n      [toolbarConfig]=\"(adaptTableConfig$ | async).toolbarConfig\"\n      [filterable]=\"false\"\n      [sortField]=\"(adaptTableConfig$ | async).sortMeta.field\"\n      [sortOrder]=\"(adaptTableConfig$ | async).sortMeta.order\"\n      [bordered]=\"true\"\n      [totalRecords]=\"0\"\n      (onSort)=\"onSort($event)\"\n      [hasEmptyState]=\"false\"\n      [dontEmitLazyLoadOnInputChange]=\"false\"\n    ></adapt-table>\n  </ng-template>\n</div>\n\n<ng-template #filterTemplate let-context>\n  <span class=\"rx-record-grid-design__toolbar-item btn-link d-icon-refresh grid-toolbar-icon mx-2 p-1\"></span>\n  <div class=\"btn-link px-0 d-icon-left-filter d-icon-right-triangle_down\" *ngIf=\"model.enableFiltering$ | async\">\n    Filter\n  </div>\n</ng-template>\n\n<ng-template #visibleColumnsMenuTemplate></ng-template>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewDefinitionParserService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport { find, forEach, pull } from 'lodash';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  adaptDefinition(elementDefinition: IContainerViewComponentDefinition): void {\n    const layout: IViewLayout = this.rxJsonParserService.tryParseJson(elementDefinition.layout);\n    const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n    elementDefinition.propertiesByName.enableFilterPresets =\n      elementDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n    if (!rowActionsOutlet) {\n      layout.outlets.push(RxViewLayout.getOutlet(RX_RECORD_GRID.rowActionsOutletName));\n    } else {\n      // move row actions to the end to make sure they are in the same order as in layout outlet\n      forEach(rowActionsOutlet.columns[0]?.children, (rowActionGuid) => {\n        const rowAction = find(elementDefinition.componentDefinitions, { guid: rowActionGuid });\n\n        pull(elementDefinition.componentDefinitions, rowAction).push(rowAction);\n      });\n    }\n\n    elementDefinition.layout = JSON.stringify(layout);\n\n    Object.assign(elementDefinition.propertiesByName, {\n      expandable: elementDefinition.propertiesByName.expandable ?? false,\n      showDataForAllLocales: elementDefinition.propertiesByName.showDataForAllLocales ?? false,\n      requiredFilters:\n        elementDefinition.propertiesByName.requiredFilters ??\n        (elementDefinition.propertiesByName.requireFiltering === 'true' ? 1 : 0)\n    });\n\n    delete elementDefinition.propertiesByName.requireFiltering;\n\n    this.rxViewDefinitionParserService\n      .getComponents(elementDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.type === RX_RECORD_GRID.components.column) {\n          Object.assign(componentDefinition.propertiesByName, {\n            wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n            typeaheadKeystrokeCount: Number(\n              componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            )\n          });\n        }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RecordGridSortEditorControlComponent } from './record-grid-sort-editor-control.component';\nimport { AdaptButtonModule, AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RecordGridSortEditorControlComponent],\n  exports: [RecordGridSortEditorControlComponent],\n  entryComponents: [RecordGridSortEditorControlComponent],\n  imports: [CommonModule, FormsModule, AdaptButtonModule, AdaptRxSelectModule]\n})\nexport class RecordGridSortEditorControlModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { StepperWithUnitsFormControlModule } from '@helix/platform/shared/components';\nimport { RecordGridViewPresetColumnsModalComponent } from './record-grid-view-preset-columns-modal.component';\nimport {\n  AdaptAccordionModule,\n  AdaptButtonModule,\n  AdaptRxCheckboxModule,\n  AdaptRxTextfieldModule\n} from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  declarations: [RecordGridViewPresetColumnsModalComponent],\n  exports: [RecordGridViewPresetColumnsModalComponent],\n  imports: [\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptRxCheckboxModule,\n    AdaptRxTextfieldModule,\n    CommonModule,\n    DragDropModule,\n    FormsModule,\n    StepperWithUnitsFormControlModule,\n    TranslateModule\n  ]\n})\nexport class RecordGridViewPresetColumnsModalModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptAccordionModule, AdaptButtonModule, AdaptTagModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridEditViewPresetsModalComponent } from './record-grid-edit-view-presets-modal.component';\nimport { RecordGridViewPresetColumnsModalModule } from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.module';\nimport { RecordGridSortEditorControlModule } from '../../record-grid-sort-editor-control/record-grid-sort-editor-control.module';\nimport { RecordGridFilterSelectControlModule } from '../../record-grid-filter-select-control/record-grid-filter-select-control.module';\n\n@NgModule({\n  declarations: [RecordGridEditViewPresetsModalComponent],\n  exports: [RecordGridEditViewPresetsModalComponent],\n  imports: [\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptTagModule,\n    CommonModule,\n    FormsModule,\n    RecordGridFilterSelectControlModule,\n    RecordGridSortEditorControlModule,\n    RecordGridViewPresetColumnsModalModule,\n    TranslateModule\n  ]\n})\nexport class RecordGridEditViewPresetsModalModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RecordGridViewPresetsWidgetComponent } from './record-grid-view-presets-widget.component';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { RecordGridEditViewPresetsModalModule } from './record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.module';\nimport { SelectFormControlModule } from '@helix/platform/shared/components';\n\n@NgModule({\n  declarations: [RecordGridViewPresetsWidgetComponent],\n  exports: [RecordGridViewPresetsWidgetComponent],\n  imports: [CommonModule, AdaptButtonModule, FormsModule, RecordGridEditViewPresetsModalModule, SelectFormControlModule]\n})\nexport class RecordGridViewPresetsWidgetModule {}\n","import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxRecordGridDesignAdapterService } from './record-grid-design-adapter.service';\nimport { RecordGridDesignComponent } from './record-grid-design.component';\nimport { RecordGridSortEditorControlModule } from './editors/record-grid-sort-editor-control/record-grid-sort-editor-control.module';\nimport { RecordGridColumnEditorControlComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-control.component';\nimport {\n  AdaptAccordionModule,\n  AdaptAdvancedFilteringModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule,\n  AdaptIconModule,\n  AdaptPopoverModule,\n  AdaptRxCheckboxModule,\n  AdaptRxLabelModule,\n  AdaptRxRadiobuttonModule,\n  AdaptRxSearchModule,\n  AdaptRxSelectModule,\n  AdaptRxSwitchModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule,\n  AdaptTreeModule\n} from '@bmc-ux/adapt-angular';\nimport { AdaptTextFieldModule } from '@bmc-ux/obsolete';\nimport { RecordGridColumnEditorModalComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/record-grid-column-editor-modal.component';\nimport {\n  ExpressionEditorModule,\n  ExpressionFormControlModule,\n  GroupButtonFormControlModule,\n  IconPickerFormControlModule,\n  RxDefinitionPickerModule,\n  SelectFormControlModule,\n  StepperWithUnitsFormControlModule\n} from '@helix/platform/shared/components';\nimport { ColumnEditorAlignmentComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/column-editor-alignment/column-editor-alignment.component';\nimport { RecordGridFilterPresetEditorControlComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-control.component';\nimport { RecordGridFilterPresetEditorModalComponent } from './editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component';\nimport { RxDirectivesModule } from '@helix/platform/ui-kit';\nimport { RecordGridCommonModule } from '../common/record-grid-common.module';\nimport { ActionListControlModule, ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { AdaptTableModule } from '@bmc-ux/adapt-table';\nimport { RxDefinitionAdapterRegistryService, RxDefinitionModule } from '@helix/platform/shared/api';\nimport { RxRecordGridRowActionEditorWidgetComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.component';\nimport { RecordGridRowActionEditorModalComponent } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-modal/record-grid-row-action-editor-modal.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RecordGridCellDisplayPropertiesComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties.component';\nimport { RecordGridCellDisplayPropertiesEditorComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/cell-display-properties/cell-display-properties-editor.component';\nimport { RxNoWhitespaceValidatorModule, RxUniqueValidatorModule } from '@helix/platform/utils';\nimport { RecordGridNamedFilterOptionsComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options.component';\nimport { RecordGridNamedFilterOptionsEditorModalComponent } from './editors/record-grid-column-editor-control/record-grid-column-editor-modal/named-filter-options/named-filter-options-editor/named-filter-options-editor-modal.component';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\nimport { RecordGridViewPresetsWidgetModule } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.module';\nimport { RecordGridFilterSelectControlModule } from './editors/record-grid-filter-select-control';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RecordGridSortEditorControlModule,\n    AdaptButtonModule,\n    AdaptTooltipModule,\n    AdaptAccordionModule,\n    AdaptTextFieldModule,\n    AdaptRxSearchModule,\n    AdaptTreeModule,\n    AdaptRxCheckboxModule,\n    AdaptRxRadiobuttonModule,\n    ActionListControlModule,\n    GroupButtonFormControlModule,\n    DragDropModule,\n    ExpressionEditorModule,\n    AdaptAdvancedFilteringModule,\n    AdaptRxTextfieldModule,\n    RxDirectivesModule,\n    AdaptRxLabelModule,\n    RecordGridCommonModule,\n    ViewDesignerCanvasModule,\n    AdaptTableModule,\n    AdaptEmptyStateModule,\n    RxDefinitionModule,\n    AdaptRxSelectModule,\n    RxDefinitionPickerModule,\n    ExpressionFormControlModule,\n    AdaptIconModule,\n    TranslateModule,\n    SelectFormControlModule,\n    RxUniqueValidatorModule,\n    AdaptRxSwitchModule,\n    IconPickerFormControlModule,\n    AdaptPopoverModule,\n    RxAdvancedFilteringFieldsProviderModule,\n    RecordGridViewPresetsWidgetModule,\n    RecordGridFilterSelectControlModule,\n    StepperWithUnitsFormControlModule,\n    RxNoWhitespaceValidatorModule\n  ],\n  declarations: [\n    RecordGridDesignComponent,\n    RecordGridColumnEditorControlComponent,\n    RecordGridColumnEditorModalComponent,\n    ColumnEditorAlignmentComponent,\n    RecordGridFilterPresetEditorControlComponent,\n    RecordGridFilterPresetEditorModalComponent,\n    RxRecordGridRowActionEditorWidgetComponent,\n    RecordGridRowActionEditorModalComponent,\n    RecordGridCellDisplayPropertiesComponent,\n    RecordGridCellDisplayPropertiesEditorComponent,\n    RecordGridNamedFilterOptionsComponent,\n    RecordGridNamedFilterOptionsEditorModalComponent\n  ],\n  entryComponents: [\n    RecordGridDesignComponent,\n    RecordGridColumnEditorControlComponent,\n    RecordGridColumnEditorModalComponent,\n    RecordGridFilterPresetEditorControlComponent,\n    RecordGridFilterPresetEditorModalComponent\n  ]\n})\nexport class RecordGridDesignModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxRecordGridDesignAdapterService: RxRecordGridDesignAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RX_RECORD_GRID.type,\n      this.rxRecordGridDesignAdapterService\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\n\n@Component({\n  selector: 'rx-page',\n  templateUrl: './page.component.html'\n})\nexport class PageComponent extends BaseViewComponent implements OnInit {\n  constructor() {\n    super();\n  }\n}\n","<rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n","import { Component } from '@angular/core';\nimport { ActiveModalRef, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-filter-by-card-selection',\n  templateUrl: './filter-by-card-selection-dialog.component.html'\n})\nexport class RxFilterByCardSelectionDialogComponent {\n  options: RxSelectOption[];\n  field: RxSelectOption;\n\n  alertConfig = {\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.info.message'\n    ),\n    type: 'section',\n    dismissible: false,\n    variant: 'info',\n    icon: true\n  };\n\n  constructor(public context: ActiveModalRef, private translateService: TranslateService) {\n    this.options = this.context.getData().filterableFields;\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  apply(): void {\n    this.context.close(this.field[0].id);\n  }\n}\n","<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<div class=\"modal-body pt-0\">\n  <adapt-rx-select\n    [label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.filter-by-selection.dialog.field.label' | translate\n    \"\n    [options]=\"options\"\n    [(ngModel)]=\"field\"\n    [required]=\"true\"\n    [optionFormatter]=\"optionFormatter\"\n    [popupClass]=\"'rx-filter-by-card-selection-field-dropdown'\"\n  >\n  </adapt-rx-select>\n</div>\n\n<div class=\"modal-footer\">\n  <button adapt-button type=\"button\" btn-type=\"primary\" rx-id=\"apply-button\" [disabled]=\"!field\" (click)=\"apply()\">\n    {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"context.dismiss()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxError, RxGuidService } from '@helix/platform/utils';\nimport {\n  IViewInputParams,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionType,\n  RX_VIEW_ACTION\n} from '@helix/platform/view/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { defaults, every, has, isUndefined, reduce } from 'lodash';\nimport { forkJoin, Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IColumnSortInfo, IRecordGridColumn, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfiguratorService {\n  private allowedOpenViewActionExpressionsForHrefRegex: RegExp;\n\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private translateService: TranslateService\n  ) {}\n\n  getGridConfig(rxConfiguration: IRecordGridConfig): IRecordGridConfig {\n    const config = defaults(this.rxRecordGridConfigUtilsService.configDeepClone(rxConfiguration), {\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableColumnSelection: true,\n      enableFiltering: true,\n      expandable: false,\n      useExternalFiltering: true,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      filterExpression: null,\n      filters: RX_RECORD_GRID.defaultFilter,\n      filterTagsLimit: 3,\n      recordIdField: RX_RECORD_DEFINITION.coreFieldIds.id.toString(),\n      emptyStateLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      emptyStateWithFilterLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n      styles: ''\n    } as IRecordGridConfig);\n\n    if (!config.recordDefinitionName) {\n      if (!rxConfiguration.getRecordDefinition) {\n        throwError(new RxError('getRecordDefinition function must be defined if recordDefinitionName is not set.'));\n      }\n      if (!rxConfiguration.getData) {\n        throwError(new RxError('getData function must be defined if recordDefinitionName is not set.'));\n      }\n    }\n\n    config.enableFiltering = Boolean(config.enableFiltering);\n    config.cardLayoutWidth = parseFloat(config.cardLayoutWidth as string) || null;\n\n    return config;\n  }\n\n  getColumnsWithMetadata(\n    recordGridGuid: string,\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): Observable<IRecordGridColumnWithMetadata[]> {\n    const columnsClone = this.rxRecordGridConfigUtilsService.columnsDeepClone(columns);\n\n    this.allowedOpenViewActionExpressionsForHrefRegex = new RegExp(\n      `^\\\\$\\\\{view\\\\.components\\\\.${recordGridGuid}\\\\.(clickableRow|recordDefinition)\\\\.|^\\\\$\\\\{view\\\\.inputParams\\\\.`\n    );\n\n    const columnsDefinitions$ = columnsClone.map((column) => {\n      return this.rxRecordGridUtilsService.getFieldDefinition(column.fieldId, recordDefinition).pipe(\n        map((fieldDefinition) => {\n          let filterType = fieldDefinition.resourceType\n            ? this.getFieldDefinitionResourceTypeShortName(fieldDefinition.resourceType)\n            : null;\n\n          if (filterType === RX_RECORD_DEFINITION.dataTypes.attachment.shortName) {\n            filterType = RX_RECORD_DEFINITION.dataTypes.character.shortName;\n          }\n\n          const filterable =\n            this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable);\n\n          const searchable = has(column, 'searchable')\n            ? this.rxRecordGridConfigUtilsService.getBooleanValue(column.searchable)\n            : filterable && this.rxRecordGridUtilsService.isSearchable(fieldDefinition, recordDefinition);\n\n          const columnWithMetadata: IRecordGridColumnWithMetadata = {\n            ...column,\n            clickable: this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable),\n            filterable,\n            sortable:\n              (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable) as IColumnSortInfo | boolean) ||\n              isUndefined(column.sortable),\n            visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n            searchable,\n            fieldDefinition,\n            filterType,\n            clickableWithHref: this.isColumnClickableWithHref(column),\n            title: column.title?.trim(),\n            fallbackTitle: `[${fieldDefinition.name}]`\n          };\n\n          return columnWithMetadata;\n        })\n      );\n    });\n\n    return forkJoin(columnsDefinitions$);\n  }\n\n  getSelectionFieldOptionLabelsByFieldId(\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): IPlainObject {\n    return reduce(\n      columns,\n      (result, column) => {\n        const fieldDefinition = recordDefinition.fieldDefinitionsById[column.fieldId];\n\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n          result[column.fieldId] = fieldDefinition.optionLabelsById;\n        }\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private getFieldDefinitionResourceTypeShortName(resourceType) {\n    return resourceType\n      .split('.')\n      .pop()\n      .replace(/fieldDefinition/i, '');\n  }\n\n  private isColumnClickableWithHref(column: IRecordGridColumn): boolean {\n    let clickableWithHref = false;\n\n    if (this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable)) {\n      clickableWithHref = column.actions.every((action) => {\n        return (\n          (action.name === RX_VIEW_ACTION.viewActionNames.launchUrl ||\n            (action.name === RX_VIEW_ACTION.viewActionNames.openView &&\n              action.presentation.launchBehavior === OpenViewActionLaunchBehavior.SameWindow &&\n              action.presentation.type === OpenViewActionType.FullWidth &&\n              this.canViewParamsBeEvaluatedForHref(action.viewParams))) &&\n          this.canExpressionBeEvaluatedForHref(action.$condition$)\n        );\n      });\n    }\n\n    return clickableWithHref;\n  }\n\n  private canViewParamsBeEvaluatedForHref(viewParams: IViewInputParams): boolean {\n    return every(viewParams, (viewParamValue) => this.canExpressionBeEvaluatedForHref(viewParamValue));\n  }\n\n  private canExpressionBeEvaluatedForHref(expression: string): boolean {\n    return every(expression?.match(/\\$\\{[^{]*\\}/g), (expressionToken) =>\n      this.allowedOpenViewActionExpressionsForHrefRegex.test(expressionToken)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport { IDataPageParams } from '@helix/platform/shared/api';\nimport { map as _map } from 'lodash';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { Observable, of } from 'rxjs';\nimport { IRxRecordGridSharedFilterPreset } from '../../common/types/record-grid-filter.types';\n\n@Injectable()\nexport class RxRecordGridSharedFilterPresetsCacheService {\n  private cache: { [guid: string]: IRxRecordGridSharedFilterPreset[] } = {};\n\n  constructor(private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService) {}\n\n  // return preset from \"Record Grid Filter Presets\"\n  getSharedFilterPresets(recordGridGuid: string): Observable<IRxRecordGridSharedFilterPreset[]> {\n    if (!this.cache[recordGridGuid]) {\n      const params = this.getQueryParams(recordGridGuid);\n\n      return this.rxRecordInstanceDataPageService.post({ params }).pipe(\n        map((sharedFilterPresets) => {\n          return (this.cache[recordGridGuid] = _map(\n            sharedFilterPresets.data,\n            (sharedFilterPreset): IRxRecordGridSharedFilterPreset => ({\n              id: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id],\n              name: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.name],\n              filters: [\n                {\n                  filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n                  value: sharedFilterPreset[RX_RECORD_DEFINITION.coreFieldIds.id]\n                }\n              ],\n              isCreatedByOtherUsers: true,\n              filterExpression: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression],\n              isDefault: sharedFilterPreset[RX_RECORD_GRID.sharedFilterPresets.fields.isDefault]\n            })\n          ));\n        })\n      );\n    }\n\n    return of(this.cache[recordGridGuid]);\n  }\n\n  private getQueryParams(recordGridGuid: string): IDataPageParams {\n    const queryExpression = `('${RX_RECORD_GRID.sharedFilterPresets.fields.recordGridGuid}'=\"${recordGridGuid}\")`;\n\n    const propertySelection = [\n      RX_RECORD_DEFINITION.coreFieldIds.id,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name,\n      RX_RECORD_GRID.sharedFilterPresets.fields.filterExpression,\n      RX_RECORD_GRID.sharedFilterPresets.fields.isDefault\n    ].join(',');\n\n    const sortBy = [\n      RX_RECORD_GRID.sharedFilterPresets.fields.sortOrder,\n      RX_RECORD_GRID.sharedFilterPresets.fields.name\n    ].join(',');\n\n    return {\n      pageSize: -1,\n      startIndex: 0,\n      queryExpression: queryExpression,\n      propertySelection: propertySelection,\n      shouldIncludeTotalSize: false,\n      recorddefinition: RX_RECORD_GRID.sharedFilterPresets.recordDefinitionName,\n      sortBy\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ColumnConfig, ResizeMode } from '@bmc-ux/adapt-table';\nimport { SelectedAdvancedFilter, ValueOrFunc1 } from '@bmc-ux/adapt-angular';\nimport { IFieldDefinitionsById } from '@helix/platform/record/api';\nimport { RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  assign,\n  cloneDeep,\n  endsWith,\n  filter,\n  find,\n  flow,\n  has,\n  isEmpty,\n  isEqual,\n  isNull,\n  isString,\n  map as _map,\n  omit,\n  reduce,\n  remove,\n  some,\n  sortBy\n} from 'lodash';\nimport { SortMeta } from 'primeng/api';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IAdaptTableConfig } from '../types/adapt-table-config.interface';\nimport { IRecordGridColumnUserPreferences, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridFilterConfigs } from '../../common/types/record-grid-filter-config.interfaces';\nimport { IRecordGridFilterPreset } from '../types/record-grid-filter-preset.interface';\nimport {\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../../common/types/record-grid-filter.types';\nimport { IRecordGridFilterData } from '@helix/platform/view/api';\nimport { IRecordGridState } from '../types/record-grid-state.interface';\nimport {\n  IRecordGridSharedViewPreset,\n  IRecordGridUserPreferences,\n  IRecordGridViewPreset\n} from '../types/record-grid-user-preferences.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\nimport { RxRecordGridFilterService } from './record-grid-filter.service';\nimport { RxRecordGridAdvancedFilterValue } from '../../common/types/record-grid-advanced-filter-value.class';\nimport { IGridViewColumnProperties, IRecordGridNamedFilterOptionsMap } from '../../common/types/record-grid.types';\nimport { RxRecordGridFilterHelperService } from '../../common/services/record-grid-filter-helper.service';\nimport { IGridViewPresetConfigData } from '../types/record-grid-config.interface';\n\n@Injectable()\nexport class RxRecordGridUserPreferencesService {\n  private initialPreferences: IRecordGridUserPreferences = {\n    columns: [],\n    filterPresets: [],\n    filters: null,\n    visibleCardFieldIds: [],\n    appliedExternalFilterPresetGuid: null,\n    viewPresets: {}\n  };\n\n  private preferences = { ...this.initialPreferences };\n  private selectedViewPresetGuid: string;\n\n  constructor(\n    private recordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  saveUserPreferences(guid: string, adaptTableConfig: IAdaptTableConfig, state: IRecordGridState): void {\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.preferences.visibleCardFieldIds = this.getVisibleCardFieldIds(adaptTableConfig);\n    } else {\n      this.preferences.columns = this.getColumnsPreferences(adaptTableConfig);\n    }\n\n    this.preferences.filterPresets = state.advancedFiltering.savedFilters\n      .filter((savedFilter) => !savedFilter.isCreatedByOtherUsers)\n      .map((savedFilter) =>\n        this.getPreferencesFilterPresets(\n          savedFilter,\n          state.recordDefinition.fieldDefinitionsById,\n          state.advancedFiltering.recordGridFilterConfigs\n        )\n      );\n\n    const currentFilters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n      state.advancedFiltering.selectedFilters,\n      state.recordDefinition.fieldDefinitionsById,\n      state.advancedFiltering.recordGridFilterConfigs\n    );\n\n    this.preferences.filters = currentFilters;\n\n    const appliedSharedFilterPreset = state.advancedFiltering.appliedSharedFilterPreset;\n\n    this.preferences.appliedExternalFilterPresetGuid = appliedSharedFilterPreset && appliedSharedFilterPreset.id;\n\n    if (this.selectedViewPresetGuid) {\n      const selectedPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      const newPreset: IRecordGridViewPreset = {\n        viewPresetGuid: this.selectedViewPresetGuid,\n        columns: this.getColumnsPreferences(adaptTableConfig),\n        filters: isEmpty(currentFilters) ? null : currentFilters\n      };\n\n      if (isEqual(selectedPreset.initial, newPreset)) {\n        this.discardViewPresetChanges(this.selectedViewPresetGuid);\n      } else {\n        selectedPreset.edited = newPreset;\n      }\n    }\n\n    this.save(guid, this.preferences);\n  }\n\n  get(guid: string): Observable<IRecordGridUserPreferences> {\n    this.preferences = { ...this.initialPreferences };\n\n    return this.rxUserPreferencesService\n      .getUiComponentPreferences<IRecordGridUserPreferences>(guid)\n      .pipe(map((preferences) => assign(this.preferences, preferences)));\n  }\n\n  getAppliedSharedFilterPresetGuid(): string {\n    return this.preferences.appliedExternalFilterPresetGuid;\n  }\n\n  applyUserPreferencesForColumns(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    gridGuid: string\n  ): void {\n    const isColumnPreferencesUpdated = this.reviseColumnPreferences(this.preferences.columns, adaptTableConfig);\n\n    if (isColumnPreferencesUpdated) {\n      this.save(gridGuid, this.preferences);\n    }\n\n    let columnSortMeta = this.getColumnSortMeta(this.preferences.columns);\n\n    this.sortColumnsConfigs(adaptTableConfig.columns);\n\n    this.setColumnsWidths(adaptTableConfig.columns, this.preferences.columns, adaptTableConfig.columnResizeMode);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.field === sortMeta.field)\n    );\n\n    if (this.preferences.columns.length) {\n      adaptTableConfig.multiSortMeta = columnSortMeta;\n    }\n\n    if (adaptTableConfig.cardLayoutColumns) {\n      this.setCardFieldsVisibility(adaptTableConfig.columns);\n    } else {\n      this.setColumnsVisibility(adaptTableConfig.columns, columnsWithMetadata);\n    }\n  }\n\n  private reviseColumnPreferences(\n    columnPreferences: IRecordGridColumnUserPreferences[],\n    { columns }: IAdaptTableConfig\n  ): boolean {\n    let isColumnPreferencesChanged = false;\n\n    if (columnPreferences.length) {\n      const existingAdaptColumnIds = _map(columns, 'field');\n      const removedReferences = remove(columnPreferences, ({ fieldId }) => !existingAdaptColumnIds.includes(fieldId));\n      let isSortingPreferencesChanged = removedReferences.some(({ sort }) => Boolean(sort));\n\n      const preferencesSize = columnPreferences.length;\n      const sortableColumnPreferences = [];\n\n      columns.forEach((tableColumn, index) => {\n        const columnPreference = find(columnPreferences, { fieldId: tableColumn.field });\n\n        if (columnPreference) {\n          // Nullish width can be saved to preferences for column without width customization or without resizing.\n          // Non-empty value appearing means the width is customized after previous preferences saving.\n          columnPreference.width ??= tableColumn.width;\n\n          if (tableColumn.sortable) {\n            sortableColumnPreferences.push(columnPreference);\n          } else if (columnPreference.sort) {\n            isSortingPreferencesChanged = true;\n          }\n        } else {\n          columnPreferences.splice(index, 0, {\n            fieldId: tableColumn.field,\n            index: index,\n            visible: !tableColumn.hidden,\n            width: tableColumn.width\n          });\n        }\n      });\n\n      if (isSortingPreferencesChanged) {\n        const sortMetaForSortableColumns = this.getColumnSortMeta(sortableColumnPreferences);\n\n        this.updateColumnSortPreferences(columnPreferences, sortMetaForSortableColumns);\n      }\n\n      isColumnPreferencesChanged =\n        !isEmpty(removedReferences) || preferencesSize < columnPreferences.length || isSortingPreferencesChanged;\n    }\n\n    return isColumnPreferencesChanged;\n  }\n\n  applyUserPreferences(\n    adaptTableConfig: IAdaptTableConfig,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[],\n    state: IRecordGridState,\n    sharedFilterPresets?: IRxRecordGridSharedFilterPreset[]\n  ): Observable<any> {\n    if (!state.viewPresetSelector) {\n      this.applyUserPreferencesForColumns(adaptTableConfig, columnsWithMetadata, state.guid);\n    }\n\n    let observable$: Observable<any>;\n\n    if (state?.enableFiltering) {\n      let isFilterPresetDataChanged = false;\n      // Remove filter presets that do not have any filters left.\n      // These filters could have been removed as a result of removing a column,\n      // used by the filter, from the grid.\n      this.preferences.filterPresets.forEach((filterPreset) => {\n        const prevFilterDataLength = filterPreset.filterData?.and?.length;\n\n        filterPreset.filterData = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n          filterPreset.filterData,\n          columnsWithMetadata.filter((column) => column.filterable)\n        );\n\n        if (prevFilterDataLength !== filterPreset.filterData?.and?.length) {\n          isFilterPresetDataChanged = true;\n        }\n      });\n\n      this.preferences.filterPresets = this.preferences.filterPresets.filter(\n        (filterPreset) => !isEmpty(filterPreset.filterData)\n      );\n\n      const prevFilters = cloneDeep(this.preferences.filters?.and);\n\n      this.preferences.filters = this.rxRecordGridFilterService.getFilterForAvailableColumns(\n        this.preferences.filters,\n        columnsWithMetadata.filter((column) => column.filterable)\n      );\n\n      if (\n        isFilterPresetDataChanged ||\n        this.preferences.filters?.and?.length !== prevFilters?.length ||\n        !isEqual(prevFilters, this.preferences.filters?.and)\n      ) {\n        this.save(state.guid, this.preferences);\n      }\n\n      state.advancedFiltering.savedFilters = this.getAdvancedFilterPresets(this.preferences.filterPresets, false);\n\n      state.predefinedFilterPresets = state.predefinedFilterPresets.filter(\n        (filterPreset) => !isNull(filterPreset.filters)\n      );\n\n      const predefinedFilterPresets: IRecordGridFilterPreset[] = state.predefinedFilterPresets\n        .map(\n          (predefinedFilterPreset): IRecordGridFilterPreset => ({\n            title: predefinedFilterPreset.title,\n            guid: predefinedFilterPreset.guid,\n            filterData: this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n              predefinedFilterPreset.filters,\n              this.rxRecordGridFilterService.deserializeNamedOptions(predefinedFilterPreset.recordGridFilters ?? [])\n            )\n          })\n        )\n        .filter((preset) => preset.filterData);\n\n      const builtInPresets = this.getAdvancedFilterPresets(predefinedFilterPresets, true);\n\n      state.advancedFiltering.savedFilters.push(...builtInPresets);\n\n      if (sharedFilterPresets) {\n        if (this.getAppliedSharedFilterPresetGuid()) {\n          const appliedSharedFilterPreset = find(sharedFilterPresets, { id: this.getAppliedSharedFilterPresetGuid() });\n\n          state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = appliedSharedFilterPreset;\n        }\n\n        state.advancedFiltering.savedFilters.push(...sharedFilterPresets);\n      }\n\n      const defaultBuiltInFilterPreset = isString(state.defaultFilterPreset)\n        ? find(builtInPresets, (builtInPreset) => builtInPreset.id === state.defaultFilterPreset)\n        : state.defaultFilterPreset;\n\n      const defaultSharedFilterPreset = find(sharedFilterPresets, (sharedFilterPreset) => sharedFilterPreset.isDefault);\n\n      if (!isEmpty(this.preferences.filters)) {\n        observable$ = this.rxRecordGridFilterService\n          .getAdvancedFilterData(\n            this.preferences.filters,\n            state.recordDefinition.fieldDefinitionsById,\n            state.advancedFiltering.recordGridFilterConfigs,\n            state.recordDefinition,\n            state.advancedFiltering.filterOptions,\n            state.associationDescriptors\n          )\n          .pipe(\n            tap((selectedAdvancedFilters) => {\n              // Remove named filter options that do not have any filters left.\n              // These filters could have been removed as a result of removing named filter option,\n              // used by the filter, from the grid.\n              const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n                selectedAdvancedFilters,\n                state.namedFilterOptions\n              );\n\n              state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                newSelectedAdvancedFilters,\n                adaptTableConfig.columns.filter((column) => column.filterable)\n              );\n\n              this.preferences.filters = this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n                state.advancedFiltering.selectedFilters,\n                state.recordDefinition.fieldDefinitionsById,\n                state.advancedFiltering.recordGridFilterConfigs\n              );\n\n              if (state.advancedFiltering.appliedSharedFilterPreset) {\n                this.addExternalPresetToSelectedFilters(state);\n              }\n            })\n          );\n      } else if (\n        this.rxObjectUtilsService.isEmptyObject(this.preferences.filters) &&\n        !state.advancedFiltering.appliedSharedFilterPreset\n      ) {\n        if (defaultSharedFilterPreset && !defaultBuiltInFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      } else if (isNull(this.preferences.filters) && !state.advancedFiltering.appliedSharedFilterPreset) {\n        if (defaultBuiltInFilterPreset) {\n          const defaultBuildInPresetFilterData: IRecordGridFilterData = isString(state.defaultFilterPreset)\n            ? (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filterData\n            : (defaultBuiltInFilterPreset as IRecordGridFilterData);\n\n          observable$ = this.rxRecordGridFilterService\n            .getAdvancedFilterData(\n              defaultBuildInPresetFilterData,\n              state.recordDefinition.fieldDefinitionsById,\n              state.advancedFiltering.recordGridFilterConfigs,\n              state.recordDefinition,\n              state.advancedFiltering.filterOptions,\n              state.associationDescriptors\n            )\n            .pipe(\n              tap((selectedAdvancedFilters) => {\n                state.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n                  selectedAdvancedFilters,\n                  adaptTableConfig.columns\n                );\n\n                if (isString(state.defaultFilterPreset)) {\n                  (defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter).filters =\n                    state.advancedFiltering.selectedFilters;\n                  state.advancedFiltering.activeSavedFilter =\n                    defaultBuiltInFilterPreset as IRxRecordGridSavedAdvancedFilter;\n                }\n              })\n            );\n        } else if (defaultSharedFilterPreset) {\n          state.advancedFiltering.appliedSharedFilterPreset = defaultSharedFilterPreset;\n          state.advancedFiltering.activeSavedFilter = defaultSharedFilterPreset;\n        }\n      }\n\n      if (state.advancedFiltering.appliedSharedFilterPreset) {\n        this.addExternalPresetToSelectedFilters(state);\n      }\n    }\n\n    return observable$ || of(null);\n  }\n\n  applySharedViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string,\n    viewPresetData: IRecordGridSharedViewPreset\n  ) {\n    if (!this.preferences.viewPresets[viewPresetGuid]) {\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...viewPresetData,\n          viewPresetGuid\n        }\n      };\n    } else {\n      // updating initial and keeping user changes\n      this.preferences.viewPresets[viewPresetGuid].initial = {\n        ...viewPresetData,\n        viewPresetGuid\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  applyViewPreset(\n    gridState: IRecordGridState,\n    adaptTableConfig: IAdaptTableConfig,\n    viewPresetGuid: string\n  ): Observable<any> {\n    const systemViewPreset = gridState.viewPresets.find((preset) => preset.viewPresetGuid === viewPresetGuid);\n\n    if (systemViewPreset && !has(this.preferences.viewPresets, [viewPresetGuid, 'edited'])) {\n      // create/update the initial system view preset preferences\n      const newViewPresetPreferences = this.createSystemViewPresetPreferences(\n        systemViewPreset,\n        gridState.columnsWithMetadata\n      );\n\n      this.preferences.viewPresets[viewPresetGuid] = { initial: newViewPresetPreferences };\n    } else if (!this.preferences.viewPresets[viewPresetGuid] && this.selectedViewPresetGuid) {\n      // save existing view preset preferences as new custom view preset preferences\n      const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n\n      this.preferences.viewPresets[viewPresetGuid] = {\n        initial: {\n          ...cloneDeep(selectedViewPreset.edited || selectedViewPreset.initial),\n          viewPresetGuid\n        }\n      };\n    }\n\n    return this.applyViewPresetInner(viewPresetGuid, adaptTableConfig, gridState);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    adaptTableConfig: IAdaptTableConfig,\n    gridState: IRecordGridState\n  ) {\n    const viewPresetPreferences = this.preferences.viewPresets[viewPresetGuid];\n    const presetToApply: IRecordGridViewPreset = viewPresetPreferences?.edited || viewPresetPreferences?.initial;\n    let observable$: Observable<any> = of(null);\n\n    if (presetToApply) {\n      this.selectedViewPresetGuid = presetToApply.viewPresetGuid;\n      this.updateColumnsOrder(adaptTableConfig.columns, presetToApply.columns);\n      this.updateColumnsVisibility(adaptTableConfig.columns, presetToApply.columns);\n      this.setColumnsWidths(adaptTableConfig.columns, presetToApply.columns, adaptTableConfig.columnResizeMode);\n      this.updateGridSorting(presetToApply, adaptTableConfig);\n\n      observable$ = this.rxRecordGridFilterService\n        .getAdvancedFilterData(\n          presetToApply.filters,\n          gridState.recordDefinition.fieldDefinitionsById,\n          gridState.advancedFiltering.recordGridFilterConfigs,\n          gridState.recordDefinition,\n          gridState.advancedFiltering.filterOptions,\n          gridState.associationDescriptors\n        )\n        .pipe(\n          tap((selectedAdvancedFilters) => {\n            const newSelectedAdvancedFilters = this.getFilterForAvailableNamedFilterOptions(\n              selectedAdvancedFilters,\n              gridState.namedFilterOptions\n            );\n\n            gridState.advancedFiltering.selectedFilters = this.getFiltersForSelectedColumns(\n              newSelectedAdvancedFilters,\n              adaptTableConfig.columns.filter((column) => column.filterable)\n            );\n          })\n        );\n    }\n\n    return observable$;\n  }\n\n  isCurrentViewPresetEdited(): boolean {\n    return Boolean(this.preferences.viewPresets[this.selectedViewPresetGuid]?.edited);\n  }\n\n  private addExternalPresetToSelectedFilters(state: IRecordGridState): void {\n    const selectedFilter = cloneDeep(state.advancedFiltering.selectedFilters);\n\n    selectedFilter.push({\n      filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n      value: state.advancedFiltering.appliedSharedFilterPreset.id as unknown as RxRecordGridAdvancedFilterValue\n    });\n\n    state.advancedFiltering.selectedFilters = selectedFilter;\n  }\n\n  private createSystemViewPresetPreferences(\n    sharedViewPreset: IGridViewPresetConfigData,\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): IRecordGridViewPreset {\n    const recordGridFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      sharedViewPreset.filters,\n      sharedViewPreset.recordGridFilters\n        ? this.rxRecordGridFilterService.deserializeNamedOptions(sharedViewPreset.recordGridFilters)\n        : []\n    );\n\n    const columns = sharedViewPreset.columnViewPresets\n      .sort((a, b) => a.index - b.index)\n      .map((columnViewPreset: IGridViewColumnProperties, index) => {\n        const width = has(columnViewPreset, 'width')\n          ? columnViewPreset.width\n          : find(columnsWithMetadata, { fieldId: columnViewPreset.fieldId })?.width ?? null;\n\n        const result: IRecordGridColumnUserPreferences = {\n          ...omit(columnViewPreset, 'sortable'),\n          index,\n          width\n        };\n\n        if (columnViewPreset.sortable) {\n          result.sort = {\n            priority: 0,\n            direction: columnViewPreset.sortable.direction\n          };\n        }\n\n        return result;\n      });\n\n    return cloneDeep({\n      columns,\n      filters: recordGridFilterData,\n      viewPresetGuid: sharedViewPreset.viewPresetGuid\n    } as IRecordGridViewPreset);\n  }\n\n  deleteViewPreset(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid];\n  }\n\n  isExistingViewPreset(viewPresetGuid: string): boolean {\n    return has(this.preferences.viewPresets, viewPresetGuid);\n  }\n\n  discardViewPresetChanges(viewPresetGuid: string): void {\n    delete this.preferences.viewPresets[viewPresetGuid]?.edited;\n  }\n\n  private updateGridSorting(presetPreferences: IRecordGridViewPreset, adaptTableConfig: IAdaptTableConfig): void {\n    let columnSortMeta = this.getColumnSortMeta(presetPreferences.columns);\n\n    columnSortMeta = filter(columnSortMeta, (sortMeta) =>\n      some(adaptTableConfig.columns, (tableColumn) => tableColumn.sortable && tableColumn.field === sortMeta.field)\n    );\n\n    adaptTableConfig.multiSortMeta = columnSortMeta;\n  }\n\n  private getAdvancedFilterPresets(\n    filterPresets: IRecordGridFilterPreset[],\n    isCreatedByOtherUsers: boolean\n  ): IRxRecordGridSavedAdvancedFilter[] {\n    return filterPresets\n      .map((filterPreset): IRxRecordGridSavedAdvancedFilter => {\n        const advancedFilterPreset: IRxRecordGridSavedAdvancedFilter = {\n          id: filterPreset.guid,\n          name: filterPreset.title,\n          filters: null,\n          filterData: filterPreset.filterData,\n          isCreatedByOtherUsers\n        };\n\n        if (filterPreset.appliedSharedFilterPresetGuid) {\n          advancedFilterPreset.appliedSharedFilterPresetGuid = filterPreset.appliedSharedFilterPresetGuid;\n\n          advancedFilterPreset.filters = [\n            {\n              filterOptionId: RX_RECORD_GRID.externalPresetFilterOptionId,\n              value: filterPreset.appliedSharedFilterPresetGuid\n            }\n          ];\n        }\n\n        return advancedFilterPreset;\n      })\n      .sort((savedFilter1, savedFilter2) => savedFilter1.name.localeCompare(savedFilter2.name));\n  }\n\n  private getColumnsPreferences({ columns, multiSortMeta }: IAdaptTableConfig): IRecordGridColumnUserPreferences[] {\n    const columnPreferences = columns.map(({ field, hidden, width }, index) => {\n      const column: IRecordGridColumnUserPreferences = {\n        fieldId: field,\n        index,\n        visible: !hidden,\n        width\n      };\n\n      return column;\n    });\n\n    this.updateColumnSortPreferences(columnPreferences, multiSortMeta);\n\n    return columnPreferences;\n  }\n\n  private getPreferencesFilterPresets(\n    savedFilter: IRxRecordGridSavedAdvancedFilter,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    recordGridFilterConfigs: IRecordGridFilterConfigs\n  ): IRecordGridFilterPreset {\n    const filterPreset: IRecordGridFilterPreset = {\n      guid: savedFilter.id,\n      title: savedFilter.name,\n      filterData: savedFilter.filters\n        ? this.rxRecordGridFilterService.getRecordGridFilterDataFromAdvancedFilter(\n            savedFilter.filters,\n            fieldDefinitionsById,\n            recordGridFilterConfigs\n          )\n        : savedFilter.filterData\n    };\n\n    if (savedFilter.appliedSharedFilterPresetGuid) {\n      filterPreset.appliedSharedFilterPresetGuid = savedFilter.appliedSharedFilterPresetGuid;\n    }\n\n    return filterPreset;\n  }\n\n  private getVisibleCardFieldIds({ columns, multiSortMeta }: IAdaptTableConfig): (number | string)[] {\n    this.updateColumnSortPreferences(this.preferences.columns, multiSortMeta);\n\n    return columns.filter((column) => !column.hidden).map((column) => parseInt(column.field, 10) || column.field);\n  }\n\n  private updateColumnSortPreferences(columns: IRecordGridColumnUserPreferences[], sortMeta: SortMeta[]): void {\n    if (sortMeta) {\n      columns.forEach((column) => {\n        delete column.sort;\n      });\n\n      sortMeta.forEach(({ field, order }, index) => {\n        const sortedColumn = columns.find((column) => column.fieldId === field);\n\n        if (sortedColumn) {\n          sortedColumn.sort = {\n            priority: index,\n            direction: this.recordGridConfigUtilsService.getColumnSortDirection(order)\n          };\n        }\n      });\n    }\n  }\n\n  private save(guid: string, preferences: IRecordGridUserPreferences): void {\n    if (guid) {\n      const data = {\n        preferences: JSON.stringify(preferences),\n        componentTypeName: RX_RECORD_GRID.type,\n        version: RX_RECORD_GRID.version,\n        componentId: guid\n      };\n\n      this.rxUserPreferencesService.setUiComponentPreferences(data, guid).subscribe();\n    }\n  }\n\n  private sortColumnsConfigs(gridColumns: ColumnConfig[]): void {\n    this.updateColumnsOrder(gridColumns, this.preferences.columns);\n  }\n\n  private updateColumnsOrder(gridColumns: ColumnConfig[], columnsPreferences: { fieldId: string; index: number }[]) {\n    const columnIndexesMap = reduce(\n      gridColumns,\n      (result: { [field: string]: number }, column, columnIndex) => {\n        const columnSavedPreferences = find(\n          columnsPreferences,\n          (columnPreferences) => columnPreferences.fieldId === column.field\n        );\n\n        if (columnSavedPreferences) {\n          result[column.field] = columnSavedPreferences.index;\n        } else {\n          result[column.field] = columnIndex;\n        }\n\n        return result;\n      },\n      {}\n    );\n\n    gridColumns.sort((column1, column2) => columnIndexesMap[column1.field] - columnIndexesMap[column2.field]);\n  }\n\n  private setColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsWithMetadata: IRecordGridColumnWithMetadata[]\n  ): void {\n    const columnsPreferences = this.preferences.columns;\n\n    if (isEmpty(columnsPreferences)) {\n      gridColumns.forEach((gridColumn) => {\n        const columnWithMetadata = find(columnsWithMetadata, (column) => column.fieldId === gridColumn.field);\n\n        gridColumn.hidden = columnWithMetadata ? !columnWithMetadata.visible : false;\n      });\n    } else {\n      this.updateColumnsVisibility(gridColumns, columnsPreferences);\n    }\n  }\n\n  private updateColumnsVisibility(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean }[]\n  ): void {\n    gridColumns.forEach((column) => {\n      const preferences = find(columnsPreferences, (columnPreferences) => columnPreferences.fieldId === column.field);\n\n      if (preferences) {\n        column.hidden = !preferences.visible;\n      }\n    });\n  }\n\n  private setColumnsWidths(\n    gridColumns: ColumnConfig[],\n    columnsPreferences: { fieldId: string; visible: boolean; width?: string }[],\n    columnResizeMode: ResizeMode\n  ): void {\n    if (columnsPreferences.length) {\n      gridColumns.forEach((column) => {\n        const preferences = find(columnsPreferences, { fieldId: column.field });\n\n        // Default measure unit of native html table is px, but outdated user preferences use %.\n        // Only px units are supported in Expand mode.\n        if (preferences) {\n          const isColumnWidthInPixels = endsWith(preferences.width, 'px');\n\n          if (columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels) {\n            column.width = null;\n            column.minWidth = null;\n          } else {\n            column.width = /[0-9]+$/.test(preferences.width) ? `${preferences.width}%` : preferences.width;\n\n            if (isColumnWidthInPixels && parseInt(column.width) < 45) {\n              column.minWidth = column.width as ValueOrFunc1<`${number}px`>;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  private setCardFieldsVisibility(gridColumns: ColumnConfig[]): void {\n    const visibleCardFieldIds = this.preferences.visibleCardFieldIds;\n\n    if (isEmpty(visibleCardFieldIds)) {\n      const defaultVisibleColumnsCount = 5;\n      let visibleColumnsCount = 0;\n\n      gridColumns.forEach((column) => {\n        if (visibleColumnsCount >= defaultVisibleColumnsCount) {\n          column.hidden = true;\n\n          return;\n        }\n\n        if (!column.hidden) {\n          visibleColumnsCount++;\n        }\n      });\n    } else {\n      gridColumns.forEach(\n        (column) => (column.hidden = !some(visibleCardFieldIds, (field) => String(field) === column.field))\n      );\n    }\n  }\n\n  private getColumnSortMeta(columnPreferences: IRecordGridColumnUserPreferences[]): SortMeta[] {\n    return flow(\n      (columns: IRecordGridColumnUserPreferences[]) => filter(columns, 'sort'),\n      (columns) => sortBy(columns, 'sort.priority'),\n      (columns) =>\n        _map(columns, (column) => ({\n          field: column.fieldId,\n          order: this.recordGridConfigUtilsService.getColumnSortOrder(column.sort.direction)\n        }))\n    )(columnPreferences);\n  }\n\n  private getFiltersForSelectedColumns(\n    advancedFilters: SelectedAdvancedFilter[],\n    gridColumns: ColumnConfig[]\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters.filter((advancedFilter) => some(gridColumns, { field: advancedFilter.filterOptionId }));\n  }\n\n  private getFilterForAvailableNamedFilterOptions(\n    advancedFilters: SelectedAdvancedFilter[],\n    availableNamedFilters: IRecordGridNamedFilterOptionsMap\n  ): SelectedAdvancedFilter[] {\n    return advancedFilters\n      .map((advancedFilter: SelectedAdvancedFilter) => {\n        advancedFilter.value.namedOptions = !isEmpty(availableNamedFilters)\n          ? advancedFilter.value.namedOptions.filter((namedFilterOptionGuid) =>\n              some(availableNamedFilters[Number(advancedFilter.filterOptionId)], { guid: namedFilterOptionGuid })\n            )\n          : [];\n\n        return advancedFilter;\n      })\n      .filter((advancedFilter) => !RxRecordGridAdvancedFilterValue.isEmptyWithRange(advancedFilter.value));\n  }\n\n  saveViewPreset(viewPresetGuid: string): void {\n    const preset = this.preferences.viewPresets[viewPresetGuid];\n\n    if (preset?.edited) {\n      preset.initial = cloneDeep(preset.edited);\n      delete preset.edited;\n    }\n  }\n\n  getSharedViewPresetData(): IRecordGridSharedViewPreset {\n    const selectedViewPreset = this.preferences.viewPresets[this.selectedViewPresetGuid];\n    const presetData = selectedViewPreset.edited || selectedViewPreset.initial;\n\n    return {\n      columns: presetData.columns,\n      filters: presetData.filters\n    };\n  }\n}\n","export enum RowSelectionMode {\n  Multiple = 'multiple',\n  Single = 'single'\n}\n","import { Component, Input, HostBinding, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { AdaptModalService } from '@bmc-ux/adapt-angular';\nimport { ColumnConfig, AdaptTableComponent, SortOrder } from '@bmc-ux/adapt-table';\nimport { SortMeta } from 'primeng/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { ISortButtonClass } from './sort-button-class.interface';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-card-layout-cell-header',\n  templateUrl: './card-layout-cell-header.component.html',\n  styleUrls: ['card-layout-cell-header.component.scss']\n})\nexport class CardLayoutCellHeaderComponent {\n  @Input() title: string;\n  @Input() columns: ColumnConfig[];\n  @Input() adaptTable: AdaptTableComponent;\n  @Input() openDialog: (config: any) => Promise<any>;\n\n  @Output() sort = new EventEmitter<SortMeta[]>();\n\n  @ViewChild('cardLayoutSortModalTemplate') cardLayoutSortModalTemplate: TemplateRef<any>;\n\n  multiSortMeta: SortMeta[];\n\n  constructor(private modalService: AdaptModalService, private translateService: TranslateService) {}\n\n  onSortMenuItemClick(): void {\n    this.multiSortMeta = this.adaptTable.multiSortMeta || [];\n\n    this.openDialog({\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.title'\n      ),\n      content: this.cardLayoutSortModalTemplate\n    }).catch(() => {});\n  }\n\n  getSortableColumns() {\n    return this.columns\n      .filter((column) => this.adaptTable.isSortableColumn(column))\n      .sort((column1, column2) => column1.header.localeCompare(column2.header));\n  }\n\n  onSortAscClick(column: ColumnConfig): void {\n    this.changeSort(column, SortOrder.Asc);\n  }\n\n  onSortDescClick(column: ColumnConfig): void {\n    this.changeSort(column, SortOrder.Desc);\n  }\n\n  changeSort(column: ColumnConfig, order: SortOrder): void {\n    const sortIndex = this.getColumnSortIndex(column);\n    const sort = this.multiSortMeta[sortIndex];\n\n    if (sort) {\n      if (sort.order === order) {\n        this.multiSortMeta.splice(sortIndex, 1);\n      } else {\n        sort.order = order;\n      }\n    } else {\n      this.multiSortMeta.push({\n        field: column.field,\n        order\n      });\n    }\n  }\n\n  getColumnSort(column: ColumnConfig): SortMeta {\n    return this.multiSortMeta[this.getColumnSortIndex(column)];\n  }\n\n  getColumnSortIndex(column: ColumnConfig): number {\n    return this.multiSortMeta.findIndex((sort) => sort.field === column.field);\n  }\n\n  hasColumnSortOrder(column: ColumnConfig, order: SortOrder): boolean {\n    const sort = this.getColumnSort(column);\n\n    return sort ? sort.order === order : false;\n  }\n\n  getSortAscBtnClass(column: ColumnConfig): IPlainObject {\n    return this.getSortBtnClass(column, SortOrder.Asc);\n  }\n\n  getSortDescBtnClass(column: ColumnConfig): IPlainObject {\n    return this.getSortBtnClass(column, SortOrder.Desc);\n  }\n\n  getSortBtnClass(column: ColumnConfig, order: SortOrder): ISortButtonClass {\n    const isActiveSortDesc = this.hasColumnSortOrder(column, order);\n\n    return { 'btn-success': isActiveSortDesc, 'btn-secondary': !isActiveSortDesc };\n  }\n\n  clearAllSorting(): void {\n    this.multiSortMeta = [];\n  }\n\n  applySorting(): void {\n    this.sort.emit(this.multiSortMeta);\n  }\n\n  getCurrentSortingSummary(): string {\n    const ordersTitles = {\n      [SortOrder.Asc]: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.ascending'\n      ),\n      [SortOrder.Desc]: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.sort.descending'\n      )\n    };\n\n    return this.multiSortMeta\n      .map((sortMeta, index): string => {\n        const column = this.columns.find((c) => c.field === sortMeta.field);\n\n        return `${index + 1}. ${column.header} (${ordersTitles[sortMeta.order]})`;\n      })\n      .join('\\n');\n  }\n}\n","{{ title }}\n\n<div class=\"dropdown header-cell-menu-btn\" adaptDropdown [appendToBody]=\"true\" [restoreFocusAfterClose]=\"true\">\n  <button\n    id=\"card-column-menu-dropdown-toggle\"\n    class=\"d-icon-ellipsis adapt-table-sort-menu__kebab py-2 btn btn-link\"\n    type=\"button\"\n    adaptDropdownToggle\n    [showCaret]=\"false\"\n  ></button>\n\n  <div class=\"dropdown-menu\" aria-labelledby=\"card-column-menu-dropdown-toggle\" adaptDropdownMenu tabindex=\"0\">\n    <button class=\"dropdown-item\" type=\"button\" (click)=\"onSortMenuItemClick()\">\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid.card-column-menu.items.sort-by.label' | translate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #cardLayoutSortModalTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-grid-sort-by-dialog\">\n    <div class=\"rx-card-fields\">\n      <div class=\"rx-card-fields__headers\">\n        <div class=\"rx-card-fields__headers-field\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.column.title' | translate\n          }}\n        </div>\n        <div class=\"rx-card-fields__headers-order\">\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.order.column.title' | translate\n          }}\n        </div>\n      </div>\n      <div class=\"rx-card-field\" *ngFor=\"let column of getSortableColumns()\">\n        <div class=\"rx-card-field__name\">{{ column.header }}</div>\n        <div class=\"rx-card-field__order\">\n          <div class=\"btn-group\">\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortDescBtnClass(column)\" (click)=\"onSortDescClick(column)\">\n              <span class=\"d-icon-arrow_down\"></span>\n            </button>\n            <button class=\"btn btn-xs\" [ngClass]=\"getSortAscBtnClass(column)\" (click)=\"onSortAscClick(column)\">\n              <span class=\"d-icon-arrow_up\"></span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div>\n      <textarea\n        rows=\"4\"\n        disabled\n        class=\"form-control rx-sort-summary\"\n        title=\"summary\"\n        [value]=\"getCurrentSortingSummary()\"\n        [placeholder]=\"\n          'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.field.summary.empty.title'\n            | translate\n        \"\n      ></textarea>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"clearAllSorting()\">\n      {{\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.sort-by.dialog.clear-all.button.label' | translate\n      }}\n    </button>\n    <button class=\"btn btn-primary btn-sm\" (click)=\"applySorting(); close()\">\n      {{ 'com.bmc.arsys.rx.client.common.apply.label' | translate }}\n    </button>\n    <button class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Host,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport {\n  AdaptTableComponent,\n  ColumnConfig,\n  ColumnHeaderTemplateParams,\n  DataCellTemplateParams\n} from '@bmc-ux/adapt-table';\nimport { IRowDataItem } from '@helix/platform/view/api';\nimport { ResizeSensor } from 'css-element-queries';\nimport { take } from 'rxjs/operators';\nimport { IChangedCardLayoutEvent } from './changed-card-layout-event.interface';\n\n@Directive({\n  selector: '[rxCardLayout]'\n})\nexport class GridCardLayoutDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  cardLayoutFieldsHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutValuesHeaderTemplate: TemplateRef<ColumnHeaderTemplateParams>;\n\n  @Input()\n  cardLayoutFieldsDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input()\n  cardLayoutValuesDataCellTemplate: TemplateRef<DataCellTemplateParams<IRowDataItem>>;\n\n  @Input('cardLayoutGetDataCellClass')\n  recordGridGetDataCellClass: () => string;\n\n  @Input('cardLayoutRecordGridElementRef')\n  recordGridElementRef: ElementRef;\n\n  @Input()\n  set cardLayoutWidth(value: number) {\n    this._cardLayoutWidth = value;\n\n    if (this._hasViewInitialized) {\n      const { offsetWidth } = this.renderer.selectRootElement(\n        this.adaptTable.el.nativeElement,\n        true\n      );\n\n      this.changeTableCardLayout(offsetWidth);\n    }\n  }\n\n  get cardLayoutWidth(): number {\n    return this._cardLayoutWidth;\n  }\n\n  @Output()\n  changedCardLayout = new EventEmitter<IChangedCardLayoutEvent>();\n\n  hasCardLayout = false;\n  resizeSensor: ResizeSensor;\n\n  private _cardLayoutWidth: number;\n  private _hasViewInitialized = false;\n\n  constructor(\n    @Host() private adaptTable: AdaptTableComponent,\n    private ngZone: NgZone,\n    private renderer: Renderer2\n  ) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      const recordGrid = this.renderer.selectRootElement(this.recordGridElementRef.nativeElement, true);\n\n      this.changeTableCardLayout(recordGrid.offsetWidth);\n    });\n\n    this.ngZone.runOutsideAngular(() => {\n      this.resizeSensor = new ResizeSensor(\n        this.recordGridElementRef.nativeElement,\n        (size: { width: number; height: number }) => {\n          this.ngZone.run(() => {\n            this.changeTableCardLayout(size.width);\n          });\n        }\n      );\n    });\n\n    this._hasViewInitialized = true;\n  }\n\n  private changeTableCardLayout(gridWidth: number): void {\n    const hasCardLayout = gridWidth <= this.cardLayoutWidth;\n\n    if (this.hasCardLayout === hasCardLayout || !gridWidth) {\n      return;\n    }\n\n    this.hasCardLayout = hasCardLayout;\n    const adaptTable = this.adaptTable;\n\n    this.scrollToFirstVisibleRow();\n\n    if (hasCardLayout) {\n      this.renderer.addClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    } else {\n      this.renderer.removeClass(adaptTable.el.nativeElement, 'rx-table-card-layout');\n    }\n\n    // fix for updating margin in header. Just primeng flaw\n    adaptTable.tableService.onValueChange(adaptTable.value);\n\n    this.changedCardLayout.emit({\n      cardLayoutColumns: hasCardLayout ? this.getCardLayoutColumns() : null\n    });\n  }\n\n  getCardLayoutColumns(): ColumnConfig[] {\n    return [\n      {\n        field: 'fields',\n        header: 'Fields',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutFieldsHeaderTemplate,\n        width: '35%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutFieldsDataCellTemplate,\n        testId: 'fields-column'\n      },\n      {\n        field: 'fields',\n        header: 'Values',\n        filterable: false,\n        sortable: false,\n        headerTitleTemplate: this.cardLayoutValuesHeaderTemplate,\n        width: '65%',\n        dataCellClass: this.getDataCellClass.bind(this),\n        cellTemplate: this.cardLayoutValuesDataCellTemplate,\n        testId: 'values-column'\n      }\n    ];\n  }\n\n  private getDataCellClass(): string {\n    return `${this.recordGridGetDataCellClass()} rx-card-layout-data-cell`;\n  }\n\n  scrollToFirstVisibleRow(): void {\n    const adaptTable = this.adaptTable;\n\n    if (adaptTable.scrollable) {\n      const scrollableBody = this.renderer\n        .selectRootElement(adaptTable.el.nativeElement, true)\n        .querySelector('.ui-table-scrollable-body') as HTMLDivElement;\n\n      const scrollableBodyScrollTop = scrollableBody && scrollableBody.scrollTop;\n\n      if (scrollableBodyScrollTop) {\n        const firstVisibleRow = adaptTable.dataRows.find((dataRow) => {\n          const rowEl = dataRow.element.nativeElement;\n\n          return rowEl.offsetTop + rowEl.offsetHeight >= scrollableBodyScrollTop;\n        });\n\n        if (firstVisibleRow) {\n          let rowEl = firstVisibleRow.element.nativeElement;\n          const scrollRowProportion = (scrollableBodyScrollTop - rowEl.offsetTop) / rowEl.offsetHeight;\n\n          this.ngZone.onStable.pipe(take(1)).subscribe(() => {\n            rowEl = firstVisibleRow.element.nativeElement;\n            scrollableBody.scrollTop = rowEl.offsetTop + rowEl.offsetHeight * scrollRowProportion;\n          });\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.resizeSensor.detach();\n  }\n}\n","import { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  ICellDisplayProperties,\n  RxGridCellBgColorCssMap,\n  RxGridCellFontColorCssMap,\n  RxGridCellFontSize,\n  RxGridCellIconPosition\n} from '../../common/types/cell-display-properties.types';\nimport { RxExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { set } from 'lodash';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\n\n@Directive({\n  selector: '[rxCellDisplayProps]'\n})\nexport class CellDisplayPropertiesDirective implements OnInit, OnChanges {\n  @Input()\n  rxCellDisplayProps: ICellDisplayProperties[];\n\n  @Input()\n  rxCellDisplayPropsBadgeElem: HTMLElement;\n\n  @Input()\n  rxCellDisplayPropsDataItem: IPlainObject;\n\n  @HostBinding('class')\n  cssClasses: string;\n\n  private evaluationData: IPlainObject = {};\n\n  constructor(\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxObjectUtilsService: RxObjectUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.updateCellClasses();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      !changes.rxCellDisplayPropsDataItem.firstChange &&\n      changes.rxCellDisplayPropsDataItem.currentValue !== changes.rxCellDisplayPropsDataItem.previousValue\n    ) {\n      this.updateCellClasses();\n    }\n  }\n\n  private getActiveProps(items: ICellDisplayProperties[]): ICellDisplayProperties {\n    return (\n      items.find((props) =>\n        this.rxExpressionEvaluatorService.tryEvaluate(props.fieldValueCondition, this.evaluationData)\n      ) || null\n    );\n  }\n\n  private getCellCssClasses(props: ICellDisplayProperties): string[] {\n    const result = [];\n\n    if (!props.displayAsBadge) {\n      if (props.bold) {\n        result.push('font-weight-bold');\n      }\n\n      if (props.italic) {\n        result.push('font-italic');\n      }\n\n      if (props.fontSize === RxGridCellFontSize.Small) {\n        result.push('small');\n      } else if (props.fontSize === RxGridCellFontSize.Large) {\n        result.push('large');\n      }\n\n      if (props.textColor) {\n        result.push(RxGridCellFontColorCssMap[props.textColor]);\n      }\n\n      if (props.backgroundColor) {\n        result.push(RxGridCellBgColorCssMap[props.backgroundColor]);\n      }\n\n      if (props.icon) {\n        if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n          result.push(`d-icon-${props.icon}`);\n        } else {\n          result.push(`d-icon-${props.iconPosition}-${props.icon}`);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private getSpanCssClasses(props: ICellDisplayProperties): string[] {\n    if (props.displayAsBadge) {\n      return ['badge', `badge-${props.badgeColor}`];\n    } else if (props.iconPosition === RxGridCellIconPosition.ReplaceText) {\n      return ['hidden'];\n    } else {\n      return [];\n    }\n  }\n\n  private updateCellClasses(): void {\n    if (this.rxCellDisplayProps?.length) {\n      let cssClasses = '';\n\n      const expandedRxCellDisplayPropsDataItem = {\n        ...this.rxCellDisplayPropsDataItem,\n        ...this.rxObjectUtilsService.expandProperties(this.rxCellDisplayPropsDataItem)\n      };\n\n      set(this.evaluationData, `view.components.grid.clickableRow`, expandedRxCellDisplayPropsDataItem);\n\n      const activeProps = this.getActiveProps(this.rxCellDisplayProps);\n\n      if (activeProps) {\n        const cellClasses = this.getCellCssClasses(activeProps);\n\n        cssClasses = cellClasses.join(' ');\n      }\n\n      if (this.rxCellDisplayPropsBadgeElem) {\n        const spanClasses: string[] = activeProps ? this.getSpanCssClasses(activeProps) : [];\n\n        this.rxCellDisplayPropsBadgeElem.classList.value = '';\n        this.rxCellDisplayPropsBadgeElem.classList.add(...spanClasses);\n      }\n\n      this.cssClasses = cssClasses;\n    }\n  }\n}\n","import { DatePipe, DecimalPipe } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {\n  AdaptAdvancedFilterComponent,\n  AdaptDeviceDetectionService,\n  AdaptModalService,\n  AdaptPopoverDirective,\n  AdvancedFilterOption,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterTag,\n  AdvancedFilterTagsChangedEvent,\n  BeforeActiveSavedFilterChangeEvent,\n  CreateAdvancedFilterEvent,\n  EditSavedFilterClickEvent,\n  getValueOrFunc,\n  KeyValueObject,\n  ModalDeferred,\n  SelectedAdvancedFilter,\n  UpdateSavedFilterEvent,\n  ValueOrFunc1\n} from '@bmc-ux/adapt-angular';\nimport {\n  AdaptLazyLoadEvent,\n  AdaptTableComponent,\n  AdaptTableEventSource,\n  AdaptTableHeaderSelectionMode,\n  AdaptTableToolbarComponent,\n  ColumnConfig,\n  DataCellTemplateParams,\n  DataCellTooltipParams,\n  ExportEvent,\n  ExportType,\n  ResizeMode,\n  RowDataItem,\n  SortOrder,\n  ToolbarItemsByPriority\n} from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor, RxAssociationInstanceDataPageService } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService,\n  RxRecordInstanceDataPageService,\n  RxRecordInstanceService\n} from '@helix/platform/record/api';\nimport {\n  DataPage,\n  IDataPageResult,\n  IPlainObject,\n  RxBooleanPipe,\n  RxCurrentUserService,\n  RxGlobalEventsService,\n  RxLogService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxGuidService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  ApplyGridFilterMode,\n  IRecordGridColumnPublicProperties,\n  IRecordGridFilterData,\n  IRowDataItem,\n  IViewPresetsByViewComponentGuid,\n  IRxRecordGridApi,\n  IViewInputParams,\n  RowDataItemIdFieldName,\n  RX_EXPRESSION_EVALUATOR,\n  RX_LAUNCH_BEHAVIOR,\n  RX_VIEW_ACTION,\n  RX_VIEW_DEFINITION,\n  RxExpressionEvaluatorService,\n  RxViewActionService,\n  RxViewActionUtilsService\n} from '@helix/platform/view/api';\nimport {\n  BaseViewComponent,\n  IChildComponentData,\n  IViewComponentPropertyChanged,\n  RuntimeViewCanvasItemComponent,\n  RuntimeViewModelApi,\n  VIEW_COMPONENT_DEFAULT_EVENT_NAME\n} from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { saveAs } from 'file-saver';\nimport {\n  castArray,\n  chain,\n  cloneDeep,\n  differenceBy,\n  endsWith,\n  find,\n  findIndex,\n  findLast,\n  forEach,\n  get,\n  includes,\n  intersectionBy,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  last,\n  map as _map,\n  max,\n  min,\n  noop,\n  reduce,\n  remove,\n  round,\n  set,\n  some,\n  sortBy,\n  toString as _toString,\n  transform,\n  uniq\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { SortEvent, SortMeta } from 'primeng/api';\nimport { BehaviorSubject, combineLatest, EMPTY, forkJoin, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { ActionButtonComponent } from '../../action-button/runtime/action-button.component';\nimport { IActionButtonConfig } from '../../action-button/runtime/action-button.types';\nimport { PageComponent } from '../../page/runtime/page.component';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRemoveFilterTagEvent } from '../common/components/filter-tags/filter-tags.types';\nimport { RxRecordGridAdvancedFilteringService } from '../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridAdvancedFilterValue } from '../common/types/record-grid-advanced-filter-value.class';\nimport { ITagInfo } from '../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterTag,\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../common/types/record-grid-filter.types';\nimport {\n  IRecordGridColumnNamedFilterOption,\n  IRecordGridNamedFilterOptionsMap\n} from '../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxFilterByCardSelectionDialogComponent } from './filter-by-card-selection-dialog/filter-by-card-selection-dialog.component';\nimport { IChangedCardLayoutEvent } from './record-grid-card-layout/changed-card-layout-event.interface';\nimport { RxRecordGridConfigUtilsService } from './services/record-grid-config-utils.service';\nimport { RxRecordGridConfiguratorService } from './services/record-grid-configurator.service';\nimport { RxRecordGridFilterConfigService } from './services/record-grid-filter-config.service';\nimport { RxRecordGridFilterService } from './services/record-grid-filter.service';\nimport { RxRecordGridSharedFilterPresetsCacheService } from './services/record-grid-shared-filter-presets-cache.service';\nimport { RxRecordGridUserPreferencesService } from './services/record-grid-user-preferences.service';\nimport { IAdaptTableConfig } from './types/adapt-table-config.interface';\nimport { IRecordGridActionButton } from './types/record-grid-action-button.interface';\nimport { IRxRecordGridAction, RxRecordGridActionFunction } from './types/record-grid-action.types';\nimport {\n  IAdaptTableColumnConfig,\n  IColumnSortInfo,\n  IRecordGridColumnWithMetadata\n} from './types/record-grid-column.types';\nimport { IRecordGridConfig } from './types/record-grid-config.interface';\nimport { IRecordGridDataLoadContext } from './types/record-grid-data-load-context.interface';\nimport { IRecordGridDataPageRequestParams } from './types/record-grid-data-page-params.interface';\nimport { IRecordGridState } from './types/record-grid-state.interface';\nimport { RowSelectionMode } from './types/row-selection-mode.enum';\nimport { IRecordGridSharedViewPreset } from './types/record-grid-user-preferences.interface';\n\n@Component({\n  selector: 'rx-record-grid',\n  templateUrl: './record-grid.component.html',\n  styleUrls: ['record-grid.component.scss'],\n  providers: [RxRecordGridUserPreferencesService]\n})\nexport class RecordGridComponent extends BaseViewComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input()\n  config: Observable<IRecordGridConfig>;\n\n  @Output()\n  dataLoaded: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('adaptTable', { static: true })\n  adaptTable: AdaptTableComponent;\n\n  @ViewChild('adaptAdvancedFilter')\n  adaptAdvancedFilter: AdaptAdvancedFilterComponent;\n\n  @ViewChild('cardLayoutRowDetailsTemplate', { static: true })\n  cardLayoutRowDetailsTemplate: TemplateRef<any>;\n\n  @ViewChild('cellTemplate', { static: true })\n  cellTemplate: TemplateRef<DataCellTemplateParams>;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('leftCustomSectionTemplate', { static: true })\n  leftCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rightCustomSectionTemplate', { static: true })\n  rightCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rowActionButtonsTemplate', { static: true })\n  rowActionButtonsTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  @ViewChildren(ActionButtonComponent)\n  private actionButtonComponents: QueryList<ActionButtonComponent>;\n\n  // Check if user clicked on a cell, filter popover,\n  // filter by selection dialog, or filter by selection dropdown.\n  // If not, then clear the selected cell.\n  @HostListener('document:click', ['$event'])\n  private onClickOutside(event: MouseEvent): void {\n    const isClickOutside = !(\n      (event.target as HTMLElement).closest('.ui-table-tbody') ||\n      (event.target as HTMLElement).closest('.popover.table-filtering') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-dialog') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-field-dropdown')\n    );\n\n    if (isClickOutside) {\n      this.clearSelectedCells();\n    }\n  }\n\n  get isTotalRecordCountKnown(): boolean {\n    return !isNull(this.adaptTableConfig.totalRecords);\n  }\n\n  private isExportInProgress = false;\n  cardLayoutOpenedModal: ModalDeferred;\n  columnSearchText: string;\n  lastQueryExpression: string;\n  lastPropertySelection: string[] = [];\n\n  adaptTableConfig: IAdaptTableConfig = {\n    data: [],\n    columns: [],\n    columnResizeMode: ResizeMode.Fit,\n    cardLayoutColumns: null,\n    bordered: true,\n    scrollable: true,\n    striped: false,\n    toolbarConfig: {\n      counter: false,\n      quickFilter: true,\n      leftCustomSection: true,\n      leftCustomSectionTemplate: null,\n      filter: true,\n      filterTemplate: null,\n      filterResults: false,\n      filterResultsTemplate: null,\n      rightCustomSection: false,\n      rightCustomSectionTemplate: null,\n      visibleColumnsMenu: true,\n      visibleColumnsMenuTemplate: null,\n      quickFilterTriggerable: true,\n      export: {\n        exportTypes: [{ type: ExportType.CSV }],\n        showExportForSelected: true\n      }\n    },\n    filterable: false,\n    selectedItems: [],\n    filters: {},\n    rows: 50,\n    first: 0,\n    multiSortMeta: null,\n    rowSelectionMode: null,\n    isLoadingData: false,\n    totalRecords: null,\n    primaryKey: null,\n    isLoadingMoreData: false,\n    texts: null,\n    expandedGroupsKeys: {},\n    virtualScroll: true,\n    virtualRowHeight: RX_RECORD_GRID.defaultRowHeight\n  };\n\n  actionButtons: IChildComponentData[] = null;\n  adaptTableHeaderSelectionMode = AdaptTableHeaderSelectionMode.Chunk;\n\n  api: IRxRecordGridApi = {\n    applyViewPreset: this.applyViewPreset.bind(this),\n    shareViewPreset: this.shareViewPreset.bind(this),\n    refresh: this.refresh.bind(this),\n    setFilter: this.setFilter.bind(this),\n    deleteViewPreset: this.deleteViewPreset.bind(this),\n    discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n    getColumns: this.getColumns.bind(this),\n    getRecordDefinitionName: this.getRecordDefinitionName.bind(this),\n    getSelectedRows: this.getSelectedRows.bind(this),\n    getFirstSelectedRow: this.getFirstSelectedRow.bind(this),\n    getSelectedRowCount: this.getSelectedRowCount.bind(this),\n    setSelectedRows: this.onRowsSelectionChange.bind(this),\n    getVisibleRows: this.getVisibleRows.bind(this),\n    saveViewPreset: this.saveViewPreset.bind(this),\n    applyFilters: this.applyFilters.bind(this)\n  };\n\n  filteredVisibleColumns: IAdaptTableColumnConfig[] = [];\n  getDataCellClassBind = this.getDataCellClass.bind(this);\n\n  gridEvents = {\n    cellClick: (gridRow: IRowDataItem, columnId: string) => {\n      const columnWithActions = this.state.columnsWithMetadata.find((column) => column.fieldId === columnId);\n\n      this.addSelectionFieldOptionNames(gridRow);\n\n      gridRow = this.expandRowProperties(gridRow);\n\n      this.state.lastActionRow = gridRow;\n\n      this.notifyPropertyChanged('clickableRow', gridRow, null);\n\n      this.executeViewActions(columnWithActions.guid, get(columnWithActions, 'actions'), gridRow).catch(noop);\n    },\n\n    cellKeyDown: (event: KeyboardEvent, gridRow: IRowDataItem, columnId: string) => {\n      if (includes(['Space', 'Enter'], event.code)) {\n        this.gridEvents.cellClick(gridRow, columnId);\n        event.preventDefault();\n      }\n    }\n  };\n\n  isFilterBySelectionButtonVisible = false;\n  isUserAllowedToDeleteRecords = false;\n  openSortByDialog = this.openSortByDialogFn.bind(this);\n  rowActionButtons: IChildComponentData[] = null;\n  rowSelectionChanged = new BehaviorSubject<IRowDataItem[]>([]);\n  selectedFilteredRowsCount = 0;\n  shouldDisplayActionButtons = false;\n  showCellTooltip = false;\n  sortedColumnsByTitle: IAdaptTableColumnConfig[] = [];\n\n  state: IRecordGridState = {\n    actionButtons: [],\n    rowActionButtons: [],\n    lastActionRow: null,\n    associatedRecordId: null,\n    associatedRoleName: null,\n    associatedRecordNodeSide: null,\n    associationDefinitionName: null,\n    bordered: true,\n    cardLayoutWidth: null,\n    columns: [],\n    columnsWithMetadata: [],\n    defaultFilterPreset: null,\n    enableFiltering: false,\n    requiredFilters: 0,\n    getDataForHiddenColumns: true,\n    enableFilterPresets: true,\n    enableRowSelection: RowSelectionMode.Multiple,\n    expandable: false,\n    filterExpression: null,\n    filters: null,\n    filterTagsLimit: null,\n    getData: null,\n    recordDefinition: null,\n    associationDescriptors: [],\n    recordDefinitionName: null,\n    recordGridFilters: [],\n    recordIdField: null,\n    showDataForAllLocales: null,\n    striped: false,\n    styles: null,\n    initialFilters: null,\n    expandGroups: false,\n    advancedFiltering: {\n      activeSavedFilter: null,\n      savedFilters: [],\n      filterOptions: [],\n      selectedFilters: [],\n      recordGridFilterConfigs: null,\n      filterTexts: null,\n      hasLoadedSharedFilterPresets: false,\n      isLoading: false,\n      appliedSharedFilterPreset: null,\n      toolbarTags: [],\n      pendingSelectedFilters: [],\n      selectedCardValues: {}\n    },\n    emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),\n    emptyStateWithFilterLabelText: this.translateService.instant(\n      'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n    ),\n    searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n    enableColumnSelection: true,\n    namedFilterOptions: null,\n    predefinedFilterPresets: [],\n    viewPresetSelector: null,\n    virtualScroll: true\n  };\n\n  visibleColumns: IAdaptTableColumnConfig[] = [];\n\n  private clickableWithHrefActionExpressionEvaluationData: IPlainObject;\n  private cursor: string;\n  private initializationCompleted$: Observable<boolean>;\n  private isProgrammaticUse: boolean;\n  private selectionFieldOptionLabelsByFieldId: IPlainObject;\n\n  private cellValueFormatters: { [name: string]: (...args: any[]) => string } = {};\n  private clickableWithHrefColumnActions: { [columnId: string]: IRxRecordGridAction[] } = {};\n  private dataLoadContextSubject: Subject<IRecordGridDataLoadContext> = new Subject();\n  private popovers: AdaptPopoverDirective[] = [];\n  private userPreferencesChanged$: Subject<void> = new Subject<void>();\n\n  private readonly exportSelectedRowText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-row.label'\n  );\n\n  private readonly exportSelectedRowsText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n  );\n\n  constructor(\n    private adaptDeviceDetectionService: AdaptDeviceDetectionService,\n    private adaptModalService: AdaptModalService,\n    private changeDetector: ChangeDetectorRef,\n    private datePipe: DatePipe,\n    private decimalPipe: DecimalPipe,\n    private ngZone: NgZone,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxBooleanPipe: RxBooleanPipe,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxGridConfiguratorService: RxRecordGridConfiguratorService,\n    private rxGuidService: RxGuidService,\n    private rxLogService: RxLogService,\n    private rxNotificationService: RxNotificationService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordGridSharedFilterPresetsCacheService: RxRecordGridSharedFilterPresetsCacheService,\n    private rxRecordGridUserPreferencesService: RxRecordGridUserPreferencesService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxViewActionService: RxViewActionService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private translateService: TranslateService,\n    public elementRef: ElementRef,\n    public rxStringService: RxStringService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    @Optional() private pageComponent: PageComponent,\n    @Optional() private runtimeViewCanvasItemComponent: RuntimeViewCanvasItemComponent\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n\n    this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.isProgrammaticUse = Boolean(this.pageComponent) || !this.runtimeViewCanvasItemComponent;\n\n    if (this.isProgrammaticUse) {\n      this.adaptTableConfig.toolbarConfig.export = null;\n    }\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.initializationCompleted$ = this.config.pipe(\n      take(1),\n      map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n      tap((gridConfig) => {\n        Object.assign(this.state, gridConfig);\n      }),\n      switchMap(() => {\n        if (this.state.guid) {\n          this.guid = this.state.guid;\n        }\n\n        const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n        if (this.guid) {\n          this.userPreferencesChanged$.pipe(debounceTime(1000), takeUntil(this.destroyed$)).subscribe(() => {\n            this.rxRecordGridUserPreferencesService.saveUserPreferences(this.guid, this.adaptTableConfig, this.state);\n            this.checkIfViewPresetEdited();\n          });\n\n          requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n        }\n\n        return forkJoin(requests$);\n      }),\n      switchMap(() => this.initGrid()),\n      shareReplay(1)\n    );\n\n    this.initializationCompleted$.subscribe();\n\n    const configChanged$ = combineLatest([\n      this.initializationCompleted$,\n      this.dataLoaded,\n      this.config.pipe(\n        skip(1),\n        debounceTime(250),\n        map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n        takeUntil(this.destroyed$)\n      )\n    ]).pipe(map(([initializationCompleted, dataLoaded, configChanged]) => configChanged));\n\n    // updates named list column filter options after additional query expression evaluation\n    configChanged$\n      .pipe(\n        map((config) => differenceBy(config.columns, this.state.columns, 'additionalQueryCriteria')),\n        filter((changedColumns) => changedColumns.length > 0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((namedListColumns) => {\n        namedListColumns.forEach((column) => {\n          const namedListColumnFilterOption = this.state.advancedFiltering.filterOptions.find(\n            (filterOption) => filterOption.id === column.fieldId\n          );\n\n          namedListColumnFilterOption.data.additionalQueryCriteria = column.additionalQueryCriteria;\n\n          const existingColumnIndex = this.state.columns.findIndex(\n            (existingColumn) => existingColumn.fieldId === column.fieldId\n          );\n\n          this.state.columns[existingColumnIndex].additionalQueryCriteria = column.additionalQueryCriteria;\n        });\n      });\n\n    const namedFilterOptionCache = new Map<string, IRecordGridColumnNamedFilterOption>();\n\n    // updates namedFilterOptions after expression evaluation and triggers data load if expression value is changed\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        map((config) => this.getNamedFilterOptionsState(config.columns)),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([namedFilterOptionsMap, dataLoadContext]) =>\n            !isEqual(namedFilterOptionsMap, dataLoadContext.namedFilterOptions)\n        ),\n        tap(([namedFilterOptionsMap]) => {\n          this.state.namedFilterOptions = namedFilterOptionsMap;\n        }),\n        map(([namedFilterOptionsMap]) =>\n          Object.values(namedFilterOptionsMap).reduce((res, options) => res.concat(options), [])\n        ),\n        map((namedFilterOptionsList) => {\n          const selectedNamedFilterOptionsGuids = this.state.advancedFiltering.selectedFilters.reduce(\n            (res: string[], filterValue) => res.concat(filterValue.value.namedOptions),\n            []\n          );\n\n          return namedFilterOptionsList.some((option) => {\n            const isOptionCached = Boolean(namedFilterOptionCache.get(option.guid));\n\n            if (!isOptionCached) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            const isFilterValueChanged =\n              option.filterExpression !== namedFilterOptionCache.get(option.guid).filterExpression;\n\n            const shouldLoadData =\n              selectedNamedFilterOptionsGuids.includes(option.guid) && (isFilterValueChanged || !isOptionCached);\n\n            if (isFilterValueChanged) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            return shouldLoadData;\n          });\n        }),\n        filter((v) => v),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([config, dataLoadContext]) =>\n            config.associatedRecordId !== dataLoadContext.associatedRecordId ||\n            config.associatedRoleName !== dataLoadContext.associatedRoleName ||\n            config.filterExpression !== dataLoadContext.filterExpression\n        ),\n        tap(([config]) => {\n          Object.assign(this.state, config);\n        })\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    this.config\n      .pipe(\n        map((cfg) => cfg.viewPresetSelector),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((viewPresetSelector) => {\n        this.state.viewPresetSelector = viewPresetSelector;\n      });\n\n    if (this.isProgrammaticUse) {\n      configChanged$\n        .pipe(\n          map((config) => ({\n            actionButtons: config.actionButtons,\n            rowActionButtons: config.rowActionButtons\n          })),\n          distinctUntilChanged(isEqual)\n        )\n        .subscribe(({ actionButtons, rowActionButtons }) => {\n          this.state.actionButtons = actionButtons;\n          this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n\n          this.state.rowActionButtons = rowActionButtons;\n          this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n        });\n\n      configChanged$\n        .pipe(\n          distinctUntilChanged(isEqual),\n          map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n          tap((gridConfig) => {\n            Object.assign(this.state, gridConfig);\n            this.state.advancedFiltering.selectedFilters = [];\n            this.adaptTableConfig.multiSortMeta = [];\n          }),\n          switchMap(() => {\n            if (this.state.guid) {\n              this.guid = this.state.guid;\n            }\n\n            const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n            if (this.guid) {\n              requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n            }\n\n            return forkJoin(requests$);\n          }),\n          switchMap(() => this.initGrid())\n        )\n        .subscribe();\n    }\n\n    this.adaptTableConfig.virtualScroll = this.state.virtualScroll;\n\n    const toolbarConfig = this.adaptTableConfig.toolbarConfig;\n\n    toolbarConfig.visibleColumnsMenu = this.state.enableColumnSelection;\n    toolbarConfig.visibleColumnsMenuTemplate = this.visibleColumnsMenuTemplate;\n    toolbarConfig.rightCustomSectionTemplate = this.rightCustomSectionTemplate;\n    toolbarConfig.leftCustomSectionTemplate = this.leftCustomSectionTemplate;\n    toolbarConfig.filterTemplate = this.filterTemplate;\n\n    this.notifyPropertyChanged('totalRowCount', 0);\n    this.notifyPropertyChanged('selectedRows', []);\n    this.notifyPropertyChanged('selectedRowCount', 0);\n    this.notifyPropertyChanged('fieldValuesByFieldId', {});\n    this.notifyPropertyChanged('firstSelectedRow', null);\n    this.notifyPropertyChanged('queryExpression', '');\n    this.notifyPropertyChanged('lastRefreshTime', '');\n\n    this.initAdvancedFilterTexts();\n    this.initCustomTexts();\n\n    this.rxGlobalEventsService.viewActionsCompleted$.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      if (!isEmpty(this.pendingFiltersToApply)) {\n        this.onAdvancedFiltersChange(this.pendingFiltersToApply);\n      }\n\n      this.pendingFiltersToApply = null;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // The action buttons are rendered by the record grid component,\n    // hence we have to handle their property changes here.\n    this.actionButtonComponents.changes\n      .pipe(\n        switchMap((buttons) =>\n          merge<IViewComponentPropertyChanged>(\n            // Emit \"api\" change because native action button's property change happens later and we cannot catch it.\n            ...buttons.map((button) =>\n              of({\n                guid: button.guid,\n                propertyName: 'api',\n                newValue: button.api,\n                oldValue: null\n              })\n            ),\n            // Handle other property changes, e.g \"hidden\", or \"disabled\".\n            ...buttons.map((button) => button.propertyChanged.asObservable())\n          )\n        )\n      )\n      .subscribe((event) => this.propertyChanged.emit(event));\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    this.dataLoadContextSubject.complete();\n    this.userPreferencesChanged$.complete();\n  }\n\n  applyFilterBySelection(): void {\n    if (isEmpty(this.state.advancedFiltering.selectedCardValues)) {\n      this.applyPendingSelectedFilters();\n    } else {\n      this.cardLayoutOpenedModal = this.adaptModalService.open({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.filter-by-selection.title'\n        ),\n        content: RxFilterByCardSelectionDialogComponent,\n        data: {\n          filterableFields: this.visibleColumns\n            .filter((column) => {\n              if (column.filterable) {\n                const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n                const isRequiredBooleanFilter =\n                  fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n                  this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n                return !isRequiredBooleanFilter;\n              } else {\n                return false;\n              }\n            })\n            .map((column) => ({\n              id: column.field,\n              name: column.header || column.fallbackTitle\n            }))\n        },\n        customClass: 'rx-filter-by-card-selection-dialog'\n      });\n\n      this.cardLayoutOpenedModal\n        .then((fieldId) => {\n          this.state.advancedFiltering.pendingSelectedFilters = [\n            {\n              filterOptionId: fieldId,\n              value: this.state.advancedFiltering.selectedCardValues[fieldId]\n            }\n          ];\n\n          this.applyPendingSelectedFilters();\n        })\n        .catch(noop);\n    }\n  }\n\n  buildQueryByAdvancedFilters(advancedFilters: SelectedAdvancedFilter[]): string {\n    const queryFilters = advancedFilters.map((filter) => {\n      let queryFilter = null;\n      const fieldId = filter.filterOptionId;\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        queryFilter = filterConfig.getQueryFilter(\n          filter,\n          fieldDefinition,\n          fieldId,\n          this.state.namedFilterOptions[fieldId] ?? []\n        );\n      }\n\n      return queryFilter;\n    });\n\n    return this.rxRecordGridFilterService.addQueries(...queryFilters);\n  }\n\n  downloadAttachment(row: IPlainObject, col: ColumnConfig, fileName: string, event?: KeyboardEvent): void {\n    if (event && !includes(['Space', 'Enter'], event.code)) {\n      return;\n    }\n\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(col.field)) {\n      const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(col.field);\n\n      const associationDescriptor = find(this.state.associationDescriptors, {\n        associationDefinition: { guid: fieldLocator.associationGuid }\n      });\n\n      this.rxAssociationInstanceDataPageService\n        .post({\n          params: {\n            pageSize: 1,\n            startIndex: 0,\n            associationDefinition: associationDescriptor.associationDefinition.name,\n            nodeToQuery: fieldLocator.associationNodeSide,\n            associatedRecordInstanceId: row[RX_RECORD_DEFINITION.coreFieldIds.id],\n            propertySelection: RX_RECORD_DEFINITION.coreFieldIds.id\n          }\n        })\n        .pipe(take(1))\n        .subscribe((dataPageResult: IDataPageResult) => {\n          const recordInstanceId = dataPageResult.data[0][RX_RECORD_DEFINITION.coreFieldIds.id];\n\n          this.rxRecordInstanceService.downloadAttachment(\n            associationDescriptor.recordDefinitionName,\n            Number(fieldLocator.fieldId),\n            recordInstanceId,\n            fileName\n          );\n        });\n    } else {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        Number(col.field),\n        row[RX_RECORD_DEFINITION.coreFieldIds.id],\n        fileName\n      );\n    }\n  }\n\n  executeViewActions(guid: string, actions: IRxRecordGridAction[], lastActionRow?: IRowDataItem): Promise<any> {\n    if (this.isProgrammaticUse) {\n      const sortedActions = sortBy(actions, 'index');\n\n      return sortedActions.reduce((promise, action) => {\n        return isFunction(action.name)\n          ? promise.then((result) => (action.name as RxRecordGridActionFunction)(result, lastActionRow))\n          : isString(action.name)\n          ? promise.then((result) =>\n              (\n                (() => {\n                  this.rxViewActionService.execute(action.name.toString(), action.params).subscribe();\n                }) as RxRecordGridActionFunction\n              )(result, lastActionRow)\n            )\n          : promise;\n      }, Promise.resolve());\n    }\n\n    return this.runtimeViewModelApi.triggerViewActions(guid, VIEW_COMPONENT_DEFAULT_EVENT_NAME);\n  }\n\n  getActionButtonConfig(\n    isHidden: boolean,\n    actionButtonConfig: Observable<IActionButtonConfig | IRecordGridActionButton>\n  ) {\n    return isHidden\n      ? actionButtonConfig.pipe(map((config) => ({ ...config, cls: 'dropdown-item' })))\n      : actionButtonConfig;\n  }\n\n  getCellValue(row: IRowDataItem, col: ColumnConfig): string {\n    const cellValueFormatter = this.cellValueFormatters[col.field];\n\n    return cellValueFormatter(row[col.field]);\n  }\n\n  getDataCellClass(): string {\n    return this.popovers.length ? 'rx-cell-selection-mode' : '';\n  }\n\n  getLoadRecordCountLinkText(): string {\n    return `${this.adaptTableConfig.data.length}+`;\n  }\n\n  getMultipleRowsSelectedText(): string {\n    return this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid.multiple-rows-selected.label',\n      {\n        count: this.adaptTableConfig.selectedItems.length,\n        total: this.isTotalRecordCountKnown ? this.adaptTableConfig.totalRecords : this.getLoadRecordCountLinkText()\n      }\n    );\n  }\n\n  getMultipleRowsSelectedTextFirstPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n\n    return text.substring(0, text.indexOf(this.getLoadRecordCountLinkText()));\n  }\n\n  getMultipleRowsSelectedTextSecondPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n    const totalParameterForTranslate = this.getLoadRecordCountLinkText();\n\n    return text.substring(text.indexOf(totalParameterForTranslate) + totalParameterForTranslate.length);\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.state.namedFilterOptions[filterOptionConfig.id];\n  }\n\n  getSharedFilterPresets(): Observable<IRxRecordGridSharedFilterPreset[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    const onLoadingEnd = () => {\n      this.state.advancedFiltering.isLoading = false;\n      this.state.advancedFiltering.hasLoadedSharedFilterPresets = true;\n    };\n\n    return this.rxRecordGridSharedFilterPresetsCacheService.getSharedFilterPresets(this.guid).pipe(\n      catchError((err) => {\n        onLoadingEnd();\n\n        return throwError(err);\n      }),\n      tap(() => {\n        onLoadingEnd();\n      })\n    );\n  }\n\n  getSortedColumnsByTitle(): ColumnConfig[] {\n    return this.adaptTableConfig.columns\n      .slice()\n      .sort((column1, column2) => column1.header.localeCompare(column2.header));\n  }\n\n  getToolbarTags(filterTags: IRecordGridFilterTag[]): Observable<IRecordGridFilterTag[]> {\n    const toolbarTags$ = (filterTags || []).map((tag): Observable<IRecordGridFilterTag> => {\n      if (tag.data.filterOption && tag.data.filterOption.id !== RX_RECORD_GRID.externalPresetFilterOptionId) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        if (isFunction(filterConfig.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.state.recordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.state.namedFilterOptions[fieldId]\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return toolbarTags$.length ? forkJoin(toolbarTags$) : of([]);\n  }\n\n  getVisibleColumns(): IAdaptTableColumnConfig[] {\n    return this.adaptTable.getVisibleColumns(this.adaptTableConfig.columns);\n  }\n\n  getVisibleRows(): IRowDataItem[] {\n    return this.adaptTableConfig.data;\n  }\n\n  handleHeaderCheckboxToggle(event): void {\n    this.setSelectedFilteredRowsCount();\n  }\n\n  isCellSelected(cellPopover: AdaptPopoverDirective): boolean {\n    return some(this.popovers, (popover) => popover === cellPopover);\n  }\n\n  loadSavedFilterPresetFilters(savedFilter: IRxRecordGridSavedAdvancedFilter): Observable<SelectedAdvancedFilter[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    return this.rxRecordGridFilterService\n      .getAdvancedFilterData(\n        savedFilter.filterData,\n        this.state.recordDefinition.fieldDefinitionsById,\n        this.state.advancedFiltering.recordGridFilterConfigs,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.filterOptions,\n        this.state.associationDescriptors\n      )\n      .pipe(\n        tap((filters) => {\n          // combined fake preset filters with actual filters.\n          savedFilter.filters = (savedFilter.filters || []).concat(filters);\n\n          this.state.advancedFiltering.isLoading = false;\n        })\n      );\n  }\n\n  loadTotalRowCount(): void {\n    this.getTotalRowCount().subscribe((result: IDataPageResult) => {\n      this.adaptTableConfig.totalRecords = result.totalSize;\n    });\n  }\n\n  onActiveSavedAdvancedFilterChange(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): void {\n    this.state.advancedFiltering.activeSavedFilter = savedFilter;\n  }\n\n  onAdvancedFilterExpressionTagsChanged(event: AdvancedFilterTagsChangedEvent): void {\n    const hasAllValidTags = event.filterExpressionTags.every((filterTag) => isEmpty(filterTag.data.validationErrors));\n\n    if (hasAllValidTags) {\n      const oldToolbarTags = this.state.advancedFiltering.toolbarTags;\n\n      this.updateToolbarTags(event.filterExpressionTags);\n\n      // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n      if (oldToolbarTags !== this.state.advancedFiltering.toolbarTags) {\n        this.changeDetector.detectChanges();\n      }\n    }\n  }\n\n  onAdvancedFiltersChange(filters: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.appliedSharedFilterPreset = null;\n\n    const appliedExternalPresetFilter = this.getAppliedExternalPresetFilter(filters);\n\n    if (appliedExternalPresetFilter) {\n      const filterPresetData = this.state.advancedFiltering.savedFilters.find(\n        (savedFilter) => savedFilter.id === appliedExternalPresetFilter.value\n      );\n\n      if (this.isSharedFilterPreset(filterPresetData)) {\n        this.state.advancedFiltering.appliedSharedFilterPreset = filterPresetData;\n      } else {\n        if (filterPresetData.appliedSharedFilterPresetGuid) {\n          const appliedSharedFilterPreset = find(this.state.advancedFiltering.savedFilters, {\n            id: filterPresetData.appliedSharedFilterPresetGuid\n          }) as IRxRecordGridSharedFilterPreset;\n\n          this.state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n        }\n      }\n    }\n\n    this.adaptTableConfig.first = 0;\n    this.state.advancedFiltering.selectedFilters = filters;\n    this.adaptTableConfig.isLoadingMoreData = false;\n\n    this.updateAdaptTableFilters();\n\n    this.userPreferencesChanged$.next();\n\n    this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n\n    if (this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    } else {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n    }\n  }\n\n  onBeforeActiveSavedFilterChange(event: BeforeActiveSavedFilterChangeEvent): void {\n    const savedFilterToSelect = event.savedFilterToSelect as\n      | IRxRecordGridSavedAdvancedFilter\n      | IRxRecordGridSharedFilterPreset;\n\n    if (savedFilterToSelect) {\n      if (!savedFilterToSelect.filters || !this.areNonExternalPresetFiltersApplied(savedFilterToSelect.filters)) {\n        this.loadSavedFilterPresetFilters(savedFilterToSelect).subscribe();\n      }\n    }\n  }\n\n  onCellClick(\n    event: MouseEvent,\n    columns?: IAdaptTableColumnConfig[],\n    rowItem?: IRowDataItem,\n    popover?: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    const isLinkClicked = !!(event.target as HTMLElement).closest('a');\n\n    if (isLinkClicked) {\n      this.clearSelectedCells();\n    } else {\n      if (this.popovers.length) {\n        if (!(event.metaKey || event.ctrlKey)) {\n          this.clearSelectedCells();\n        }\n      }\n\n      if (columns) {\n        this.toggleCellSelection(\n          columns.filter((col) => !col.isRowActionsColumn),\n          rowItem,\n          popover,\n          isCardLayout\n        );\n      }\n    }\n  }\n\n  onFilterBySelection(event: MouseEvent, columns?: IAdaptTableColumnConfig[], rowItem?: IRowDataItem): void {\n    this.onCellClick(event, columns, rowItem, null, true);\n    this.applyFilterBySelection();\n  }\n\n  onCellMouseOver($event: MouseEvent): void {\n    const element = $event.currentTarget as HTMLElement;\n    this.showCellTooltip = element.offsetWidth < element.scrollWidth;\n  }\n\n  onChangedCardLayout(event: IChangedCardLayoutEvent): void {\n    this.adaptTableConfig.cardLayoutColumns = event.cardLayoutColumns;\n    this.clearSelectedCells();\n\n    if (this.cardLayoutOpenedModal) {\n      this.cardLayoutOpenedModal.reject();\n      this.cardLayoutOpenedModal = null;\n    }\n\n    if (this.guid) {\n      this.rxRecordGridUserPreferencesService.applyUserPreferencesForColumns(\n        this.adaptTableConfig,\n        this.state.columnsWithMetadata,\n        this.guid\n      );\n    }\n\n    this.visibleColumns = this.getVisibleColumns();\n    this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n  }\n\n  onColReorder(colReorderEvent: ColumnConfig[]): void {\n    this.visibleColumns = this.getVisibleColumns();\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnResize(): void {\n    const adaptTableRectData = this.adaptTable.el.nativeElement.getBoundingClientRect();\n\n    const tableWidth = adaptTableRectData?.width;\n\n    const availableColumnWidth = this.adaptTable.dataHeaderCells.reduce(\n      (accum, cell) => accum + cell.element.nativeElement.offsetWidth,\n      0\n    );\n\n    const defaultColumnWidth = `${(availableColumnWidth * 100) / (tableWidth * this.getVisibleColumns().length)}%`;\n\n    const visibleColumnWidthMap = reduce(\n      this.adaptTable.dataHeaderCells.toArray(),\n      (result, cell) => {\n        const renderingColumnConfig = cell.data.renderingColumn.columnsConfigs[0];\n        let width = null;\n\n        if (availableColumnWidth) {\n          width =\n            endsWith(renderingColumnConfig.width, 'px') || this.state.expandable\n              ? `${cell.element.nativeElement.offsetWidth}px`\n              : `${round((cell.element.nativeElement.offsetWidth / availableColumnWidth) * 100, 2)}%`;\n        }\n\n        result[renderingColumnConfig.field] = width;\n\n        return result;\n      },\n      {}\n    );\n\n    this.adaptTableConfig.columns.forEach((column: IAdaptTableColumnConfig) => {\n      if (!column.hidden) {\n        column.width = visibleColumnWidthMap[column.field] ?? defaultColumnWidth;\n      }\n    });\n\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnVisibilityChange(isVisible: boolean, column: IAdaptTableColumnConfig): void {\n    if (column.hidden === isVisible) {\n      column.hidden = !isVisible;\n\n      this.userPreferencesChanged$.next();\n\n      this.visibleColumns = this.getVisibleColumns();\n      this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n\n      if (isVisible) {\n        if (!this.lastPropertySelection.includes(column.field)) {\n          this.loadRowData();\n        }\n      } else {\n        // #ADAPT-8052 workaround.\n        this.avoidSystemColumnExpansion();\n      }\n    }\n  }\n\n  onCreateNewFilterPreset(event: CreateAdvancedFilterEvent): void {\n    const newFilter: IRxRecordGridSavedAdvancedFilter = {\n      filters: event.filters,\n      name: event.name,\n      id: this.rxGuidService.generate()\n    };\n\n    const appliedSharedPreset = this.getAppliedExternalPresetFilter(event.filters);\n\n    if (appliedSharedPreset) {\n      newFilter.appliedSharedFilterPresetGuid = appliedSharedPreset.value;\n    }\n\n    this.state.advancedFiltering.savedFilters.push(newFilter);\n    this.state.advancedFiltering.activeSavedFilter = newFilter;\n    this.userPreferencesChanged$.next();\n  }\n\n  onDeleteSavedFilterPreset(filterPresetToDelete: IRxRecordGridSavedAdvancedFilter): void {\n    remove(this.state.advancedFiltering.savedFilters, (filterPreset) => filterPreset.id === filterPresetToDelete.id);\n    this.userPreferencesChanged$.next();\n  }\n\n  onEditSavedFilterClick(event: EditSavedFilterClickEvent): void {\n    let editCustomTagsFn = null;\n\n    if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      editCustomTagsFn = (tags: IRecordGridFilterTag[]) => tags;\n    }\n\n    if (!event.savedFilter.filters || !this.areNonExternalPresetFiltersApplied(event.savedFilter.filters)) {\n      event.preventDefault();\n\n      this.loadSavedFilterPresetFilters(event.savedFilter).subscribe(() => {\n        event.initSavedFilterEditing(editCustomTagsFn && editCustomTagsFn.bind(this));\n      });\n    } else if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      event.preventDefault();\n\n      event.initSavedFilterEditing(editCustomTagsFn.bind(this));\n    }\n  }\n\n  onExport(options: ExportEvent): void {\n    if (this.isExportInProgress) {\n      this.rxNotificationService.addInfoMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-in-progress.message')\n      );\n\n      return;\n    }\n\n    const visibleColumns = this.getVisibleColumns().filter((column) => !column.isRowActionsColumn);\n\n    if (!visibleColumns.length) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.no-data-to-export.message')\n      );\n\n      return;\n    }\n\n    const columnHeaders: string[] = visibleColumns.map((column) => column.header || column.fallbackTitle);\n\n    let rows$: Observable<KeyValueObject[]>;\n\n    if (options.selectionOnly) {\n      rows$ = of(intersectionBy(this.adaptTableConfig.data, this.getSelectedRows(), RowDataItemIdFieldName));\n    } else {\n      const headers = this.getHeaders();\n      const params = this.prepareQueryParamsAndQueryArgs(false);\n\n      params.pageSize = -1;\n      params.propertySelection = visibleColumns.map((column) => column.field);\n\n      delete params.cursor;\n\n      this.isExportInProgress = true;\n\n      rows$ = this.getDataPageService()\n        .post({ params, headers })\n        .pipe(\n          map((dataPage) => dataPage.data),\n          finalize(() => {\n            this.isExportInProgress = false;\n          })\n        );\n    }\n\n    rows$.subscribe((rows) => {\n      const cellValues = this.getCellValues(rows, visibleColumns);\n\n      this.exportDataToCsv(cellValues, columnHeaders);\n    });\n  }\n\n  onLazyLoad(event: AdaptLazyLoadEvent): void {\n    if (this.state.useExternalFiltering) {\n      if (event.loadMore || event.eventSource !== AdaptTableEventSource.LoadMore) {\n        this.adaptTableConfig.multiSortMeta = event.multiSortMeta;\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.isLoadingMoreData = event.loadMore;\n\n        this.loadRowData(event.loadMore);\n      }\n    } else {\n      if (event.eventSource === AdaptTableEventSource.FilterChange) {\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n      }\n    }\n  }\n\n  onRefreshClick(): void {\n    if (!this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    }\n\n    const searchText = this.adaptTable.toolbarComponent.getQuickFilterInputValue();\n\n    // this will trigger onLazyLoad event\n    this.adaptTable.setQuickFilter(searchText);\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    this.state.advancedFiltering.activeSavedFilter = null;\n\n    const selectedFilters = this.state.advancedFiltering.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n\n    this.setToolbarTags(event.newTags);\n  }\n\n  onRowsSelectionChange(rowDataItems: IRowDataItem[] | IRowDataItem): void {\n    const selectedItems = rowDataItems ? castArray(rowDataItems) : [];\n    const oldSelectedItems = this.adaptTableConfig.selectedItems;\n\n    this.shouldDisplayActionButtons = !isEmpty(selectedItems) && !isEmpty(this.actionButtons);\n\n    this.expandSelectedRowsProperties(selectedItems);\n\n    this.adaptTableConfig.selectedItems = selectedItems;\n\n    this.adaptTableConfig.toolbarConfig = {\n      ...this.adaptTableConfig.toolbarConfig,\n      quickFilter: !this.shouldDisplayActionButtons,\n      leftCustomSectionFixed: this.shouldDisplayActionButtons,\n      rightCustomSectionFixed: this.shouldDisplayActionButtons,\n      leftCustomSection: this.shouldDisplayActionButtons,\n      filter: !this.shouldDisplayActionButtons,\n      ...this.state.toolbarConfig\n    };\n\n    this.adaptTableConfig.texts = {\n      ...this.adaptTableConfig.texts,\n      exportSelected: this.getExportSelectedText(selectedItems)\n    };\n\n    this.addSelectionFieldOptionNames(selectedItems[0]);\n\n    this.notifyPropertyChanged('selectedRows', selectedItems, oldSelectedItems);\n    this.notifyPropertyChanged('selectedRowCount', selectedItems.length, oldSelectedItems.length);\n    this.notifyPropertyChanged('firstSelectedRow', selectedItems[0], oldSelectedItems[0]);\n    this.notifyPropertyChanged('fieldValuesByFieldId', this.prepareFieldsValueByFieldIdData(selectedItems), {});\n\n    this.rowSelectionChanged.next(selectedItems);\n  }\n\n  onSearchColumns(): void {\n    this.filteredVisibleColumns = this.sortedColumnsByTitle.filter((column) =>\n      this.rxStringService.caseInsensitiveSearch(column.header, this.columnSearchText)\n    );\n  }\n\n  onSort(sortEvent: SortEvent): void {\n    this.applySorting((sortEvent as any).multisortmeta);\n  }\n\n  onSortCards(multiSortMeta: SortMeta[]): void {\n    this.applySorting(multiSortMeta);\n    this.loadRowData();\n  }\n\n  onRowActionOpen(row: IRowDataItem): void {\n    last(this.popovers)?.close();\n\n    this.addSelectionFieldOptionNames(row);\n\n    const gridRow = this.expandRowProperties(row);\n\n    this.state.lastActionRow = gridRow;\n\n    this.notifyPropertyChanged('clickableRow', gridRow, null);\n  }\n\n  onUpdateSavedFilterPreset(event: UpdateSavedFilterEvent): void {\n    const savedFilter = find(\n      this.state.advancedFiltering.savedFilters,\n      (filterPreset) => filterPreset.id === event.oldSavedFilter.id\n    );\n\n    if (savedFilter) {\n      if (\n        savedFilter.appliedSharedFilterPresetGuid &&\n        !find(\n          event.newSavedFilter.filters,\n          (filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId\n        )\n      ) {\n        delete savedFilter.appliedSharedFilterPresetGuid;\n      }\n\n      Object.assign(savedFilter, event.newSavedFilter);\n\n      this.userPreferencesChanged$.next();\n    }\n  }\n\n  openRowDetails(columns: IAdaptTableColumnConfig[], rowDataItem: IRowDataItem) {\n    last(this.popovers)?.close();\n\n    this.cardLayoutOpenedModal = this.adaptModalService.open({\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.dialog.title'\n      ),\n      content: this.cardLayoutRowDetailsTemplate,\n      data: {\n        columns,\n        rowDataItem\n      }\n    });\n\n    this.cardLayoutOpenedModal.catch(noop);\n  }\n\n  setToolbarTags(toolbarTags: IRecordGridFilterTag[]): void {\n    this.state.advancedFiltering.toolbarTags = toolbarTags;\n    this.updateToolbarItems();\n  }\n\n  trackByColumnField(index: number, column: IAdaptTableColumnConfig): string {\n    return column.field;\n  }\n\n  updateToolbarTags(filterTags: IRecordGridFilterTag[]): void {\n    this.getToolbarTags(filterTags).subscribe((toolbarTags) => {\n      this.setToolbarTags(toolbarTags);\n    });\n  }\n\n  private addAssociationFieldsToRecordDefinition(columnsWithMetadata: IRecordGridColumnWithMetadata[]): void {\n    const fieldDefinitionsById = this.state.recordDefinition.fieldDefinitionsById;\n\n    columnsWithMetadata.forEach((columnWithMetadata) => {\n      if (!fieldDefinitionsById[columnWithMetadata.fieldId]) {\n        this.rxRecordDefinitionService.addFieldDefinitionToMap(\n          columnWithMetadata.fieldDefinition,\n          fieldDefinitionsById,\n          columnWithMetadata.fieldId\n        );\n      }\n    });\n\n    this.state.recordDefinition.fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private areNonExternalPresetFiltersApplied(filters: SelectedAdvancedFilter[]): boolean {\n    return filters.some((filter) => filter.filterOptionId !== RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private getAppliedExternalPresetFilter(filters: SelectedAdvancedFilter[]): SelectedAdvancedFilter {\n    return filters.find((filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private prepareFieldsValueByFieldIdData(selectedData: IRowDataItem[]): { [id: number]: string[] } {\n    const columnIds = _map(this.adaptTableConfig.columns, 'field');\n\n    return reduce(\n      selectedData,\n      (result, row, index) => {\n        columnIds.forEach(function (id) {\n          result[id] = result[id] || [];\n          result[id][index] = row[id];\n        });\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private addSelectionFieldOptionNames(row: IRowDataItem): void {\n    if (row) {\n      row.selectionFieldOptionNamesById = transform(\n        this.selectionFieldOptionLabelsByFieldId,\n        (result, value, fieldId) => {\n          result[fieldId] = value[row[fieldId]];\n        },\n        {}\n      );\n    }\n  }\n\n  pendingFiltersToApply = null;\n\n  private applyFilters(filters: IRecordGridFilterData, mode: ApplyGridFilterMode): void {\n    this.initializationCompleted$\n      .pipe(\n        switchMap(() =>\n          this.rxRecordGridFilterService.getAdvancedFilterData(\n            filters,\n            this.state.recordDefinition.fieldDefinitionsById,\n            this.state.advancedFiltering.recordGridFilterConfigs,\n            this.state.recordDefinition,\n            this.state.advancedFiltering.filterOptions,\n            this.state.associationDescriptors\n          )\n        ),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((filtersToApply: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[]) => {\n        let currentFilters = !isEmpty(this.pendingFiltersToApply)\n          ? this.pendingFiltersToApply\n          : cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n        let resultingFilters;\n\n        switch (mode) {\n          case ApplyGridFilterMode.Begin:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n            } else {\n              this.pendingFiltersToApply = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.Append:\n            // filters that will not be affected\n            const remainingFilters = currentFilters.filter(\n              (currentFilter) =>\n                !filtersToApply.find((filter) => filter.filterOptionId === currentFilter.filterOptionId)\n            );\n\n            resultingFilters = [...remainingFilters, ...filtersToApply];\n            break;\n          case ApplyGridFilterMode.Remove:\n            resultingFilters = currentFilters.reduce(\n              (result, currentFilter: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>) => {\n                const filterToApply = filtersToApply.find(\n                  (filter) => filter.filterOptionId === currentFilter.filterOptionId\n                );\n\n                if (filterToApply) {\n                  if (this.isRangeFilter(currentFilter.filterOptionId)) {\n                    if (isEqual(currentFilter.value.filterValue, filterToApply.value.filterValue)) {\n                      currentFilter.value.filterValue = [null, null];\n                    }\n                  } else {\n                    currentFilter.value.filterValue = currentFilter.value.filterValue.filter(\n                      (val) => !filterToApply.value.filterValue.includes(val)\n                    );\n                  }\n\n                  currentFilter.value.namedOptions = currentFilter.value.namedOptions.filter(\n                    (val) => !filterToApply.value.namedOptions.includes(val)\n                  );\n\n                  if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(currentFilter.value)) {\n                    result.push(currentFilter);\n                  }\n                } else {\n                  result.push(currentFilter);\n                }\n\n                return result;\n              },\n              []\n            );\n\n            break;\n          case ApplyGridFilterMode.Merge:\n            resultingFilters = [...currentFilters, ...filtersToApply].reduce((result, filter) => {\n              const existingFilter = result.find((f) => f.filterOptionId === filter.filterOptionId);\n\n              if (!existingFilter) {\n                result.push(filter);\n              } else {\n                if (this.isRangeFilter(filter.filterOptionId)) {\n                  existingFilter.value.filterValue = [...filter.value.filterValue];\n                } else {\n                  existingFilter.value.filterValue = uniq(\n                    existingFilter.value.filterValue.concat(filter.value.filterValue)\n                  );\n                }\n\n                existingFilter.value.namedOptions = uniq(\n                  existingFilter.value.namedOptions.concat(filter.value.namedOptions)\n                );\n              }\n\n              return result;\n            }, []);\n\n            break;\n          case ApplyGridFilterMode.Overwrite:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = filtersToApply;\n            break;\n          case ApplyGridFilterMode.Clear:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = [];\n\n            if (this.pendingFiltersToApply) {\n              this.state.advancedFiltering.selectedFilters = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.End:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n\n              this.pendingFiltersToApply = null;\n            }\n\n            break;\n        }\n\n        if (this.pendingFiltersToApply) {\n          this.pendingFiltersToApply = resultingFilters || [];\n        } else if (resultingFilters) {\n          this.onAdvancedFiltersChange(resultingFilters);\n        }\n      });\n  }\n\n  private applyPendingSelectedFilters(): void {\n    const existingFilters = cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n    forEach(this.state.advancedFiltering.pendingSelectedFilters, (pendingSelectedFilter) => {\n      const existingFilter = find(existingFilters, { filterOptionId: pendingSelectedFilter.filterOptionId });\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[pendingSelectedFilter.filterOptionId];\n\n      let filterValues = [];\n\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue, 'LTS'));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n          filterValues = [min(pendingSelectedFilter.value), max(pendingSelectedFilter.value)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) =>\n            filterValue === '$NULL$' ? 'blank' : filterValue === 1\n          );\n\n          break;\n        }\n\n        default: {\n          filterValues = uniq(pendingSelectedFilter.value.map((filterValue) => String(filterValue)));\n\n          break;\n        }\n      }\n\n      if (existingFilter) {\n        existingFilter.value.filterValue = filterValues;\n      } else {\n        pendingSelectedFilter.value = new RxRecordGridAdvancedFilterValue(filterValues);\n        existingFilters.push(pendingSelectedFilter);\n      }\n    });\n\n    this.onAdvancedFiltersChange(existingFilters);\n    this.clearSelectedCells();\n  }\n\n  private applySorting(multiSortMeta: SortMeta[]): void {\n    this.adaptTableConfig.multiSortMeta = multiSortMeta;\n    this.userPreferencesChanged$.next();\n\n    if (!this.state.useExternalFiltering) {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.data);\n    }\n  }\n\n  private applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    }\n\n    return EMPTY;\n  }\n\n  private shareViewPreset(viewPresetSelectorGuid: string): Observable<IRecordGridSharedViewPreset> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return of(this.rxRecordGridUserPreferencesService.getSharedViewPresetData());\n    }\n\n    return of(null);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => {\n        const viewPresetData = sharedViewPresets && (sharedViewPresets[this.guid] as IRecordGridSharedViewPreset);\n\n        if (viewPresetData) {\n          return this.rxRecordGridUserPreferencesService.applySharedViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid,\n            viewPresetData\n          );\n        } else {\n          return this.rxRecordGridUserPreferencesService.applyViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid\n          );\n        }\n      }),\n      take(1),\n      tap(() => {\n        this.loadRowData();\n        this.userPreferencesChanged$.next();\n        this.checkIfViewPresetEdited();\n      })\n    );\n  }\n\n  private areUserFiltersApplied(): boolean {\n    return (\n      this.isSearchApplied() ||\n      Boolean(this.state.advancedFiltering.appliedSharedFilterPreset) ||\n      !isEmpty(this.state.advancedFiltering.selectedFilters)\n    );\n  }\n\n  private isSearchApplied(): boolean {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    return Boolean(searchText);\n  }\n\n  private checkIfViewPresetEdited(): void {\n    if (this.state.viewPresetSelector && this.rxRecordGridUserPreferencesService.isCurrentViewPresetEdited()) {\n      this.state.viewPresetSelector.markAppliedViewPresetAsEdited();\n    }\n  }\n\n  private clearSelectedCells(): void {\n    last(this.popovers)?.close();\n\n    this.popovers = [];\n    this.state.advancedFiltering.pendingSelectedFilters = [];\n    this.state.advancedFiltering.selectedCardValues = {};\n  }\n\n  private compareRows(firstRow: IRowDataItem | RowDataItem, secondRow: IRowDataItem | RowDataItem): number {\n    const sortMetas = this.adaptTableConfig.multiSortMeta;\n\n    return reduce(\n      sortMetas,\n      (sortRank, sortMeta) => {\n        let firstValue;\n        let secondValue;\n\n        if (firstRow.groupField && secondRow.groupField) {\n          firstValue = firstRow.groupField === sortMeta.field ? firstRow.groupValue : null;\n          secondValue = secondRow.groupField === sortMeta.field ? secondRow.groupValue : null;\n        } else {\n          firstValue = firstRow[sortMeta.field];\n          secondValue = secondRow[sortMeta.field];\n        }\n\n        // TODO: this is a naive implementation that needs to be improved to\n        // take into account the type of data.\n        // For example, this implementation will sort dates as strings.\n        if (!isNaN(firstValue) && !isNaN(secondValue)) {\n          const firstValueNum = Number(firstValue);\n          const secondValueNum = Number(secondValue);\n\n          sortRank =\n            sortRank || sortMeta.order * (firstValueNum < secondValueNum ? -1 : firstValueNum > secondValueNum ? 1 : 0);\n        } else {\n          // toString will convert null to '' to allow comparison with strings using localeCompare\n          sortRank = sortRank || sortMeta.order * _toString(firstValue).localeCompare(_toString(secondValue));\n        }\n\n        return sortRank;\n      },\n      0\n    );\n  }\n\n  private createCsvExportFile(csvData: string): void {\n    const byteOrderMark = '\\uFEFF';\n\n    // Prepend byte order mark to indicate that csvData may contain unicode characters\n    const file = new Blob([`${byteOrderMark}${csvData}`], { type: 'text/csv;charset=utf-8' });\n\n    this.ngZone.runOutsideAngular(() => {\n      saveAs(file, `${this.getExportFileName()}.csv`);\n    });\n  }\n\n  private deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.deleteViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<void> {\n    if (this.rxRecordGridUserPreferencesService.isExistingViewPreset(viewPresetGuid)) {\n      this.rxRecordGridUserPreferencesService.discardViewPresetChanges(viewPresetGuid);\n\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    } else {\n      return EMPTY;\n    }\n  }\n\n  private enrichRowEntity(gridRowDataItem: IRowDataItem): IRowDataItem {\n    let hrefParams = {};\n\n    if (!isEmpty(this.clickableWithHrefColumnActions)) {\n      this.addSelectionFieldOptionNames(gridRowDataItem);\n\n      const expandedGridRowData: IRowDataItem = this.expandRowProperties(gridRowDataItem);\n\n      set(\n        this.clickableWithHrefActionExpressionEvaluationData,\n        `view.components.${this.guid}.clickableRow`,\n        expandedGridRowData\n      );\n\n      hrefParams = reduce(\n        this.clickableWithHrefColumnActions,\n        (result, gridActions, columnId) => {\n          const gridAction = this.findEnabledGridAction(gridActions);\n\n          if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.openView) {\n            result[`${columnId}$ROUTER_LINK$`] = this.rxViewActionUtilsService.generateViewUrl(\n              gridAction.viewDefinitionName\n            );\n\n            result[`${columnId}$QUERY_PARAMS$`] = this.evaluateViewInputParameters(gridAction.viewParams);\n          } else if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.launchUrl) {\n            result[`${columnId}$LAUNCH_URL$`] = this.rxExpressionEvaluatorService.tryEvaluate(\n              gridAction.url,\n              this.clickableWithHrefActionExpressionEvaluationData\n            );\n\n            result[`${columnId}$TARGET$`] = RX_LAUNCH_BEHAVIOR[gridAction.launchBehavior].target;\n          } else {\n            result[`${columnId}$LAUNCH_URL$`] = null;\n            result[`${columnId}$ROUTER_LINK$`] = null;\n          }\n\n          return result;\n        },\n        {}\n      );\n    }\n\n    return Object.assign(\n      {},\n      gridRowDataItem,\n      {\n        [RowDataItemIdFieldName]: gridRowDataItem[this.adaptTableConfig.primaryKey]\n      },\n      hrefParams\n    );\n  }\n\n  private expandRowProperties(rowDataItem: IRowDataItem): IRowDataItem {\n    return {\n      ...rowDataItem,\n      ...this.rxObjectUtilsService.expandProperties(rowDataItem)\n    };\n  }\n\n  private expandSelectedRowsProperties(rowDataItems: IRowDataItem[]): void {\n    forEach(rowDataItems, (rowDataItem, index) => {\n      rowDataItems[index] = this.expandRowProperties(rowDataItem);\n    });\n  }\n\n  private exportDataToCsv(cellValues: string[][], columnHeaders: string[]): void {\n    const csvSeparator = '\",\"';\n    const newLineSymbol = '\\n';\n\n    const columnHeadersString = `\"${columnHeaders.join(csvSeparator)}\"${newLineSymbol}`;\n\n    const rowsString = cellValues.map((row) => `\"${row.join(csvSeparator)}\"${newLineSymbol}`).join('');\n\n    const csvData = `${columnHeadersString}${rowsString}`;\n\n    this.createCsvExportFile(csvData);\n  }\n\n  private evaluateViewInputParameters(viewInputParams: IViewInputParams): IViewInputParams {\n    const evaluatedViewInputParams: IViewInputParams = {};\n\n    forEach(viewInputParams, (expression: string, parameterName: string) => {\n      const evaluatedExpression = this.rxExpressionEvaluatorService.tryEvaluate(\n        expression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      evaluatedViewInputParams[parameterName] = evaluatedExpression || '';\n    });\n\n    return evaluatedViewInputParams;\n  }\n\n  private filterRows(rows: IRowDataItem[]): IRowDataItem[] {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    let filteredRows = cloneDeep(rows);\n\n    if (searchText) {\n      const visibleColumns = this.getVisibleColumns();\n\n      filteredRows = filteredRows.filter((row: IRowDataItem) =>\n        some(visibleColumns, (column) => {\n          if (row.groupField) {\n            if (this.rxStringService.caseInsensitiveSearch(row.groupValue, searchText)) {\n              return true;\n            } else {\n              row.items = this.getFilteredItems(row.items, visibleColumns, searchText);\n\n              return row.items.length;\n            }\n          } else {\n            return this.rxStringService.caseInsensitiveSearch(this.getCellValue(row, column), searchText);\n          }\n        })\n      );\n    }\n\n    if (!isEmpty(this.state.advancedFiltering.selectedFilters)) {\n      filteredRows = this.rxRecordGridFilterService.filterRows(\n        filteredRows,\n        this.state.advancedFiltering.selectedFilters,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.recordGridFilterConfigs\n      );\n    }\n\n    if (this.adaptTableConfig.multiSortMeta) {\n      if (this.state.expandGroups) {\n        this.sortRows(filteredRows);\n      } else {\n        filteredRows.sort((firstRow, secondRow) => this.compareRows(firstRow, secondRow));\n      }\n    }\n\n    if (this.state.expandGroups) {\n      const getGroupItemsCount = (rowsWithGroups) => {\n        const groups = rowsWithGroups.filter((row) => row.items);\n        let count = rowsWithGroups.length - groups.length;\n\n        groups?.forEach((group) => (count += getGroupItemsCount(group.items)));\n\n        return count;\n      };\n\n      this.adaptTableConfig.totalRecords = getGroupItemsCount(filteredRows);\n    } else {\n      this.adaptTableConfig.totalRecords = filteredRows.length;\n    }\n\n    return filteredRows;\n  }\n\n  private findEnabledGridAction(gridActions: IRxRecordGridAction[]): IRxRecordGridAction {\n    return gridActions.find((gridAction: IRxRecordGridAction) => {\n      const conditionExpression = gridAction['$condition$'];\n\n      const condition = this.rxExpressionEvaluatorService.tryEvaluate(\n        conditionExpression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      return condition !== false;\n    });\n  }\n\n  private getAdvancedFilterOptions(): AdvancedFilterOption[] {\n    return reduce(\n      this.state.recordDefinition.fieldDefinitionsById,\n      (filterOptions, fieldDefinition, field) => {\n        // Due to nested structure need to check if it is a fieldDefinition\n        if (!isUndefined(fieldDefinition.id)) {\n          const gridColumn = this.adaptTableConfig.columns.find((column) => column.field === field);\n          const isHidden = !gridColumn || !gridColumn.filterable;\n          const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n          const additionalQueryCriteria = gridColumn?.additionalQueryCriteria;\n\n          if (filterConfig) {\n            filterOptions.push(\n              this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                field,\n                gridColumn ? gridColumn.header || gridColumn.fallbackTitle : fieldDefinition.name,\n                fieldDefinition,\n                filterConfig,\n                isHidden,\n                {\n                  optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n                  requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n                  inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n                  inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n                  inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n                  inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n                  inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n                  inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n                  inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n                },\n                null,\n                this.state.namedFilterOptions[field],\n                gridColumn?.typeaheadKeystrokeCount ?? null,\n                gridColumn?.filterable ? additionalQueryCriteria : null\n              )\n            );\n          }\n        }\n\n        return filterOptions;\n      },\n      [] as AdvancedFilterOption[]\n    ).sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  private getAssociationDescriptors(): Observable<IAssociationDescriptor[]> {\n    const recordDefinitionName = this.getRecordDefinitionName();\n\n    return recordDefinitionName\n      ? this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName)\n      : of([]);\n  }\n\n  private getBaseDataPageParams(): IRecordGridDataPageRequestParams {\n    const state = this.state;\n\n    const params = {\n      recorddefinition: state.recordDefinitionName\n    } as IRecordGridDataPageRequestParams;\n\n    if (Boolean(state.associationDefinitionName)) {\n      Object.assign(params, {\n        associatedRecordInstanceId: state.associatedRecordId,\n        associationDefinition: state.associationDefinitionName,\n        nodeToQuery: state.associatedRecordNodeSide,\n        recordDefinitionToQuery: state.recordDefinitionName\n      } as IRecordGridDataPageRequestParams);\n    }\n\n    if (state.associatedRoleName) {\n      params.roleName = state.associatedRoleName;\n    }\n\n    return params;\n  }\n\n  private getCellValueFormatter(column: IRecordGridColumnWithMetadata): (...args: any[]) => string {\n    const fieldDefinition = column.fieldDefinition;\n    let cellValueFormatter = (value) => value;\n\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n        cellValueFormatter = (value) => this.rxBooleanPipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.selection.resourceType: {\n        // column.fieldId should be used here because fieldId uniquely identifies the field,\n        // while fieldDefinition.id may be the same for core and associated fields\n        cellValueFormatter = (value: string) => this.selectionFieldOptionLabelsByFieldId[column.fieldId][value];\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value, 'medium');\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n        cellValueFormatter = (value) =>\n          value ? this.datePipe.transform(new Date(`2000-01-01T${value}`), 'mediumTime') : value;\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType: {\n        cellValueFormatter = (value) => {\n          const attachmentName = get(value, 'name');\n\n          return isString(attachmentName) ? attachmentName : value;\n        };\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n        const precision = (fieldDefinition as IFieldDefinition).precision;\n        const digitsInfo = isNil(precision) || precision === -1 ? null : `1.${precision}-${precision}`;\n\n        cellValueFormatter = (value) => this.decimalPipe.transform(value, digitsInfo);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType: {\n        cellValueFormatter = (value) => this.decimalPipe.transform(value);\n\n        break;\n      }\n    }\n\n    return cellValueFormatter;\n  }\n\n  private getCellValues(rows: KeyValueObject[], visibleColumns: IAdaptTableColumnConfig[]): string[][] {\n    return rows.map((row) =>\n      visibleColumns.map((visibleColumnConfig) => this.getCellValue(row as IRowDataItem, visibleColumnConfig))\n    );\n  }\n\n  private getColumns(): IRecordGridColumnPublicProperties[] {\n    return this.adaptTableConfig.columns.map((column: IAdaptTableColumnConfig) => {\n      const columnMetadata: IRecordGridColumnWithMetadata = find(this.state.columnsWithMetadata, {\n        fieldId: column.field\n      });\n\n      return {\n        field: column.field,\n        header: column.header,\n        hidden: getValueOrFunc(column.hidden),\n        fieldDefinition: columnMetadata.fieldDefinition\n      };\n    });\n  }\n\n  private getData(startIndex: number): Observable<IDataPageResult> {\n    return this.getDataBase(startIndex, false).pipe(\n      tap((dataPage: IDataPageResult) => {\n        this.cursor = dataPage.cursor || undefined;\n      })\n    );\n  }\n\n  private getDataBase(startIndex: number, onlyForTotalCount: boolean): Observable<IDataPageResult> {\n    let data$: Observable<IDataPageResult>;\n    const params = this.prepareQueryParamsAndQueryArgs(onlyForTotalCount);\n\n    if (params.queryExpression?.includes(RX_EXPRESSION_EVALUATOR.operands.undefined)) {\n      this.rxLogService.debug(`Query expression contains undefined operands: ${params.queryExpression}`);\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (\n      this.state.enableFiltering &&\n      !this.isSearchApplied() &&\n      this.state.requiredFilters > this.state.advancedFiltering.selectedFilters.length\n    ) {\n      this.rxNotificationService.addWarningMessage(\n        this.getFiltersRequiredMessage(this.state.requiredFilters),\n        this.translateService.instant('com.bmc.arsys.rx.client.common.alert.label')\n      );\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (isNumber(startIndex)) {\n      params.startIndex = startIndex;\n    }\n\n    if (startIndex === 0) {\n      delete params.cursor;\n    }\n\n    this.lastQueryExpression = params.queryExpression ?? '';\n\n    if (!onlyForTotalCount) {\n      this.lastPropertySelection = params.propertySelection;\n    }\n\n    if (this.state.getData) {\n      data$ = this.state.getData({\n        ...params,\n        searchText: get(this.adaptTableConfig.filters, 'global.value', '').toString().trim()\n      });\n    } else if (this.hasAssociationAndEmptyRecordId()) {\n      data$ = this.rxAssociationInstanceDataPageService.getEmptyDataPage();\n    } else {\n      const dataPageService = this.getDataPageService();\n\n      data$ = dataPageService.post({ params, headers: this.getHeaders() });\n    }\n\n    return data$;\n  }\n\n  private getDataCellStyle(column: IRecordGridColumnWithMetadata): IPlainObject {\n    let textAlign = '';\n\n    switch (column.alignment) {\n      case RX_RECORD_GRID.columnAlignment.left:\n        textAlign = 'left';\n        break;\n      case RX_RECORD_GRID.columnAlignment.right:\n        textAlign = 'right';\n        break;\n      case RX_RECORD_GRID.columnAlignment.center:\n        textAlign = 'center';\n        break;\n      default:\n        const rightAlignmentTypes = [\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ];\n\n        if (column.fieldDefinition.resourceType.search(rightAlignmentTypes.join('|')) !== -1) {\n          textAlign = 'right';\n        }\n\n        break;\n    }\n\n    return {\n      'text-align': textAlign\n    };\n  }\n\n  private getDataPageService(): DataPage {\n    return Boolean(this.state.associationDefinitionName)\n      ? this.rxAssociationInstanceDataPageService\n      : this.rxRecordInstanceDataPageService;\n  }\n\n  private getExportFileName(): string {\n    const date = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n\n    return `${date} Grid Data`;\n  }\n\n  private getFilteredItems(\n    items: RowDataItem,\n    visibleColumns: IAdaptTableColumnConfig[],\n    searchText: string\n  ): RowDataItem {\n    return items.filter((item: IRowDataItem) => {\n      let result;\n\n      if (item.groupField) {\n        if (this.rxStringService.caseInsensitiveSearch(item.groupValue, searchText)) {\n          result = true;\n        } else {\n          item.items = this.getFilteredItems(item.items, visibleColumns, searchText);\n\n          result = item.items.length;\n        }\n      } else {\n        result = some(visibleColumns, (visibleColumn) =>\n          this.rxStringService.caseInsensitiveSearch(this.getCellValue(item, visibleColumn), searchText)\n        );\n      }\n\n      return result;\n    });\n  }\n\n  private getFirstSelectedRow(): IRowDataItem {\n    return get(this.adaptTableConfig.selectedItems, '0', null);\n  }\n\n  private getGridColumnDefinitions(columnsWithMetadata: IRecordGridColumnWithMetadata[]): IAdaptTableColumnConfig[] {\n    const columnsConfig: IAdaptTableColumnConfig[] = [];\n\n    columnsWithMetadata\n      .slice()\n      .sort((a, b) => a.index - b.index)\n      .map((column) => {\n        let sortable: boolean;\n        const sortConfig = this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable);\n        const testId = this.rxRecordGridUtilsService.getTestIdForGridColumn(column.fieldId);\n\n        if (isObject(sortConfig)) {\n          sortable = true;\n\n          if (this.adaptTableConfig.multiSortMeta) {\n            this.adaptTableConfig.multiSortMeta.splice(sortConfig.priority, 0, {\n              field: column.fieldId,\n              order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n            });\n          } else {\n            this.adaptTableConfig.multiSortMeta = [\n              {\n                field: column.fieldId,\n                order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n              }\n            ];\n          }\n        } else {\n          sortable = sortConfig;\n        }\n\n        const isColumnWidthInPixels = endsWith(column.width, 'px');\n\n        const columnWidth =\n          this.adaptTableConfig.columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels ? null : column.width;\n\n        const columnMinWidth = (\n          isColumnWidthInPixels && parseInt(columnWidth) < RX_RECORD_GRID.defaultColumnMinWidth ? columnWidth : null\n        ) as ValueOrFunc1<`${number}px`>;\n\n        if (column.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.rowActionButtonsTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: null,\n            headerTooltip: null,\n            headerClass: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            sortable,\n            editable: false,\n            customTemplate: this.rowActionButtonsTemplate,\n            clickable: false,\n            dataCellClass: 'rx-row-action-cell',\n            isRowActionsColumn: true,\n            testId\n          });\n        } else {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.cellTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: (params: DataCellTooltipParams<IRowDataItem>) => {\n              return (this.showCellTooltip && this.getCellValue(params.dataItem, params.column)) || null;\n            },\n            headerTooltip: column.headerTooltip,\n            dataCellClass: this.getDataCellClass.bind(this),\n            dataCellStyle: this.getDataCellStyle(column),\n            headerClass: null,\n            sortable,\n            editable: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            filterName: null,\n            filterParams: null,\n            clickable: column.clickable,\n            filterType: column.filterType,\n            isDownloadableAttachment: this.isDownloadableAttachmentColumn(column),\n            clickableWithHref: column.clickableWithHref,\n            customTemplate: column.cellTemplate,\n            wrapText: column.wrapText,\n            referenced: column.referenced,\n            cellDisplayProperties: column.cellDisplayProperties,\n            typeaheadKeystrokeCount: column.typeaheadKeystrokeCount,\n            additionalQueryCriteria: column.additionalQueryCriteria,\n            testId\n          });\n\n          this.cellValueFormatters[column.fieldId] = this.getCellValueFormatter(column);\n        }\n      });\n\n    return columnsConfig;\n  }\n\n  private getGridData(loadMore?: boolean): Observable<IDataPageResult> {\n    const onRequestEnd = () => {\n      this.adaptTableConfig.isLoadingData = false;\n      this.adaptTableConfig.isLoadingMoreData = false;\n    };\n\n    this.adaptTableConfig.isLoadingData = true;\n\n    return this.getData(loadMore ? this.adaptTableConfig.data.length : 0).pipe(\n      tap((res) => {\n        onRequestEnd();\n\n        const mappedData: IRowDataItem[] = res.data.map(this.enrichRowEntity.bind(this));\n\n        if (this.state.useExternalFiltering) {\n          if (loadMore) {\n            this.adaptTableConfig.data = this.adaptTableConfig.data.concat(mappedData);\n\n            if (mappedData.length === 0 || mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = this.adaptTableConfig.data.length;\n            }\n          } else {\n            this.adaptTableConfig.data = mappedData;\n\n            if (mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = mappedData.length;\n            } else {\n              this.adaptTableConfig.totalRecords = null;\n            }\n          }\n        } else {\n          this.adaptTableConfig.originalRows = mappedData;\n          this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n        }\n\n        if (this.state.expandGroups) {\n          this.adaptTableConfig.expandedGroupsKeys = {};\n\n          const expandGroupsDeep = (rows) => {\n            rows.forEach((row) => {\n              if (row.items) {\n                const expandedGroupKey = this.adaptTableConfig.expandedGroupsKeys[row.groupField];\n\n                if (expandedGroupKey) {\n                  expandedGroupKey[row.groupValue] = true;\n                } else {\n                  this.adaptTableConfig.expandedGroupsKeys[row.groupField] = { [row.groupValue]: true };\n                }\n\n                expandGroupsDeep(row.items);\n              }\n            });\n          };\n\n          expandGroupsDeep(this.adaptTableConfig.data);\n        }\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.notifyPropertyChanged('totalRowCount', this.adaptTableConfig.data.length);\n        this.notifyPropertyChanged('queryExpression', this.lastQueryExpression);\n        this.notifyPropertyChanged('lastRefreshTime', new Date().toISOString());\n\n        if (!loadMore) {\n          this.onRowsSelectionChange([]);\n          this.scrollToTop();\n        }\n\n        this.setSelectedFilteredRowsCount();\n\n        this.dataLoaded.emit();\n\n        this.dataLoadContextSubject.next({\n          associatedRecordId: this.state.associatedRecordId,\n          associatedRoleName: this.state.associatedRoleName,\n          filterExpression: this.state.filterExpression,\n          namedFilterOptions: this.state.namedFilterOptions\n        });\n\n        this.changeDetector.markForCheck();\n      }),\n      catchError((err) => {\n        onRequestEnd();\n\n        return throwError(err);\n      })\n    );\n  }\n\n  private getHeaders(): IPlainObject {\n    return {\n      'Should-Query-All-Locales': this.state.showDataForAllLocales ? 'true' : []\n    };\n  }\n\n  private getNamedFilterOptionsState(\n    columns: { predefinedFilterPresets?: IRecordGridColumnNamedFilterOption[]; fieldId: string }[]\n  ): IRecordGridNamedFilterOptionsMap {\n    return columns.reduce((result, col) => {\n      if (col.predefinedFilterPresets) {\n        result[col.fieldId] = col.predefinedFilterPresets.sort((a, b) => a.index - b.index);\n      }\n\n      return result;\n    }, {});\n  }\n\n  private getProgrammaticActionButtons(\n    recordGridActionButtons: IRecordGridActionButton[]\n  ): IChildComponentData<IRecordGridActionButton>[] {\n    return recordGridActionButtons.map((actionButton): IChildComponentData<IRecordGridActionButton> => {\n      let actionButtonConfig: Observable<IRecordGridActionButton>;\n\n      if (isFunction(actionButton.disabled) || isFunction(actionButton.hidden)) {\n        actionButtonConfig = this.rowSelectionChanged.pipe(\n          map((selectedItems) => {\n            return {\n              ...actionButton,\n              disabled: isFunction(actionButton.disabled)\n                ? actionButton.disabled(selectedItems)\n                : actionButton.disabled,\n              hidden: isFunction(actionButton.hidden) ? actionButton.hidden(selectedItems) : actionButton.hidden\n            };\n          })\n        );\n      } else {\n        actionButtonConfig = of(actionButton);\n      }\n\n      return {\n        guid: actionButton.guid,\n        config: actionButtonConfig,\n        runtimeViewModelApi: {\n          triggerViewActions: (guid, viewActionTriggerEventName) =>\n            this.executeViewActions(actionButton.guid, get(actionButton, 'actions'), this.state.lastActionRow)\n        } as RuntimeViewModelApi,\n        factory: null,\n        outlets: null\n      };\n    });\n  }\n\n  private getRecordDefinition(): Observable<IRecordDefinition> {\n    if (this.state.getRecordDefinition) {\n      return this.state\n        .getRecordDefinition()\n        .pipe(\n          tap((recordDefinition: IRecordDefinition) =>\n            this.rxRecordDefinitionService.applyLocalization(recordDefinition)\n          )\n        );\n    }\n\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(this.state.recordDefinitionName);\n  }\n\n  private getRecordDefinitionName(): string {\n    return this.state.recordDefinitionName;\n  }\n\n  private getSelectedRowCount(): number {\n    return this.adaptTableConfig.selectedItems.length;\n  }\n\n  private getSelectedRows(inSortOrder = false): IRowDataItem[] {\n    if (inSortOrder) {\n      // returns selected rows in order of sorting applied to grid\n      return intersectionBy(this.adaptTableConfig.data, this.adaptTableConfig.selectedItems, RowDataItemIdFieldName);\n    } else {\n      // returns selected rows in order of selection\n      return this.adaptTableConfig.selectedItems;\n    }\n  }\n\n  private getTotalRowCount(): Observable<IDataPageResult> {\n    return this.getDataBase(null, true);\n  }\n\n  private getVirtualRowHeight(): number {\n    if (!this.adaptTableConfig.cardLayoutColumns?.length) {\n      return RX_RECORD_GRID.defaultRowHeight;\n    }\n\n    const singleRowHeight = 32;\n    const padding = 3;\n\n    return singleRowHeight * this.visibleColumns.length + 2 * padding;\n  }\n\n  private hasAssociationAndEmptyRecordId() {\n    return Boolean(this.state.associationDefinitionName) && !this.state.associatedRecordId;\n  }\n\n  private initActionButtons() {\n    if (this.isProgrammaticUse) {\n      this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n    } else {\n      this.actionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private initAdvancedFilterTexts(): void {\n    this.state.advancedFiltering.filterTexts = {\n      initialDropdownAnchorLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.filter-data.label')\n    };\n  }\n\n  private initCustomTexts(): void {\n    this.adaptTableConfig.texts = {\n      searchPlaceholder: this.state.searchFieldPlaceholderText,\n      emptyStateLabelText: this.state.emptyStateLabelText,\n      emptyStateWithFilterLabelText: this.state.emptyStateWithFilterLabelText,\n      exportEntireDocument: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-all-rows.label'\n      ),\n      exportSelected: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n      )\n    };\n  }\n\n  private initGrid(): Observable<any> {\n    this.state.guid = this.guid;\n\n    return forkJoin([\n      this.rxGridConfiguratorService.getColumnsWithMetadata(this.guid, this.state.columns, this.state.recordDefinition),\n      this.guid && this.state.enableFiltering ? this.getSharedFilterPresets() : of(null)\n    ]).pipe(\n      switchMap(([columnsWithMetadata, sharedFilterPresets]) => {\n        this.state.columnsWithMetadata = columnsWithMetadata;\n        this.state.namedFilterOptions = this.getNamedFilterOptionsState(columnsWithMetadata);\n\n        this.isUserAllowedToDeleteRecords = this.state.recordDefinition\n          ? this.state.recordDefinition.allowNonAdminToDeleteRecordInstances !== false ||\n            this.rxCurrentUserService.isAdministrator()\n          : false;\n\n        this.notifyPropertyChanged('isUserAllowedToDeleteRecords', this.isUserAllowedToDeleteRecords);\n\n        this.addAssociationFieldsToRecordDefinition(columnsWithMetadata);\n\n        // this has to be set prior to calling getGridColumnDefinitions\n        this.selectionFieldOptionLabelsByFieldId =\n          this.rxGridConfiguratorService.getSelectionFieldOptionLabelsByFieldId(\n            this.state.columns,\n            this.state.recordDefinition\n          );\n\n        this.adaptTableConfig.columnResizeMode = this.state.expandable ? ResizeMode.Expand : ResizeMode.Fit;\n        this.adaptTableConfig.columns = this.getGridColumnDefinitions(columnsWithMetadata);\n        this.state.advancedFiltering.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n        this.state.advancedFiltering.filterOptions = this.getAdvancedFilterOptions();\n\n        this.state.advancedFiltering.filterOptions.push({\n          id: RX_RECORD_GRID.externalPresetFilterOptionId,\n          label: RX_RECORD_GRID.externalPresetFilterOptionId,\n          dataType: AdvancedFilterOptionDataType.custom,\n          isHidden: true,\n          customConfig: {\n            getTagText: (value) =>\n              this.state.advancedFiltering.savedFilters.find((savedFilter) => savedFilter.id === value)?.name\n          }\n        });\n\n        this.adaptTableConfig.rowSelectionMode = this.state.enableRowSelection;\n        this.adaptTableConfig.primaryKey = this.state.recordIdField;\n        this.adaptTableConfig.bordered = this.state.bordered;\n        this.adaptTableConfig.striped = this.state.striped;\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.state.initialFilters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          this.state.filters,\n          this.state.recordGridFilters\n        );\n\n        this.clickableWithHrefColumnActions = reduce(\n          columnsWithMetadata,\n          (result, column: IRecordGridColumnWithMetadata) => {\n            if (column.clickableWithHref) {\n              result[column.fieldId] = column.actions;\n            }\n\n            return result;\n          },\n          {}\n        );\n\n        if (!isEmpty(this.clickableWithHrefColumnActions)) {\n          this.clickableWithHrefActionExpressionEvaluationData = {\n            view: {\n              components: {\n                [this.guid]: {\n                  recordDefinition: this.state.recordDefinition\n                }\n              },\n\n              inputParams: this.runtimeViewModelApi.getViewInputParameters()\n            }\n          };\n        }\n\n        if (this.guid) {\n          return this.rxRecordGridUserPreferencesService.applyUserPreferences(\n            this.adaptTableConfig,\n            this.state.columnsWithMetadata,\n            this.state,\n            sharedFilterPresets\n          );\n        }\n\n        return of(null);\n      }),\n      tap(() => {\n        this.sortedColumnsByTitle = this.getSortedColumnsByTitle();\n        this.filteredVisibleColumns = this.sortedColumnsByTitle;\n        this.visibleColumns = this.getVisibleColumns();\n        this.isFilterBySelectionButtonVisible = this.state.enableFiltering && some(this.visibleColumns, 'filterable');\n        this.initActionButtons();\n        this.initRowActionButtons();\n\n        if (!this.state.viewPresetSelector) {\n          // #ADAPT-8052 workaround.\n          this.avoidSystemColumnExpansion();\n\n          this.loadRowData();\n        }\n\n        this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n        this.updateAdaptTableFilters();\n      })\n    );\n  }\n\n  // #ADAPT-8052 workaround. System column width changes when removing a column from the grid.\n  // If all columns have custom width in percents, proportionally increase the width of all columns.\n  // If all columns have custom width in pixels, change the largest column width property to auto-expandable (width = null).\n  // If % and px are both used, change the largest column width in % to auto-expandable (width= null).\n  // If Actions column has customized width, avoid width change when possible. Preserving width in pixels is in priority.\n  // Note:\n  // Those column width modifications applied during initial rendering of the grid are not saved to User preferences,\n  // because it is not the user intention but a workaround.\n  private avoidSystemColumnExpansion() {\n    if (this.adaptTableConfig.cardLayoutColumns) {\n      this.avoidSystemCardColumnExpansion();\n\n      return;\n    }\n\n    const columnsWithWidthInPixels: IAdaptTableColumnConfig[] = [];\n    const columnsWithWidthInPercent: IAdaptTableColumnConfig[] = [];\n\n    const visibleActionsColumn: IAdaptTableColumnConfig = find(this.adaptTableConfig.columns, {\n      field: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n      hidden: false\n    });\n\n    let maxWidthInPixels = 0;\n    let maxWidthInPercent = 0;\n    let totalWidthInPercent = 0;\n\n    const isEveryVisibleColumnWithCustomWidth = this.adaptTableConfig.columns.every(\n      (column: IAdaptTableColumnConfig) => {\n        if (!column.hidden) {\n          if (isNil(column.width)) {\n            return false;\n          }\n\n          const columnWidth = parseFloat(column.width);\n\n          if (column.width.endsWith('px')) {\n            columnsWithWidthInPixels.push(column);\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPixels = Math.max(maxWidthInPixels, columnWidth);\n            }\n          } else {\n            columnsWithWidthInPercent.push(column);\n            totalWidthInPercent += columnWidth;\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPercent = Math.max(maxWidthInPercent, columnWidth);\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (isEveryVisibleColumnWithCustomWidth && totalWidthInPercent < 100) {\n      const hasColumnsWithWidthInPercent = Boolean(columnsWithWidthInPercent.length);\n      const hasColumnsWithWidthInPixels = Boolean(columnsWithWidthInPixels.length);\n\n      if (hasColumnsWithWidthInPercent && !hasColumnsWithWidthInPixels) {\n        columnsWithWidthInPercent.forEach((column) => {\n          column.width = `${((parseFloat(column.width) / totalWidthInPercent) * 100).toFixed(4)}%`;\n        });\n      }\n\n      if (!hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPixels.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPixels, (column) => {\n            if (parseInt(column.width) === maxWidthInPixels && column !== visibleActionsColumn) {\n              column.width = null;\n              column.minWidth = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n\n      if (hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPercent.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPercent, (column) => {\n            if (parseFloat(column.width) === maxWidthInPercent && column !== visibleActionsColumn) {\n              column.width = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n    }\n  }\n\n  // This is a workaround for Adapt defect on System column (checkbox)\n  // when the user is using an Ios device and the grid is in card mode.\n  // It seems setting the columns in % does not work correctly, in the case of\n  // card display we have only two columns with 35% and 65%, however\n  // the Adapt grid tries to display the cards around 50% each.\n  // For example for an Iphone 14 Pro on Xcode simulator the grid total size is 359px:\n  // -> 96.31px for the system column (instead of 33px),\n  // -> 130.34px for the second column,\n  // -> 131.34px for the third column,\n  // In order to \"fix\" the issue, the user has to \"tap\" on the separator\n  // between columns 2 and 3, which then seems to \"redraw\" the grid.\n  // Workaround:\n  // Setting the values of both columns in px instead of % solves the problem.\n  // For now, we only apply this workaround on ios platform.\n  private avoidSystemCardColumnExpansion() {\n    if (!this.adaptDeviceDetectionService.iosPlatform()) {\n      return;\n    }\n\n    const adaptSystemColumnWidth = 33;\n\n    const availableColumnWidth =\n      this.adaptTable.dataHeaderCells.reduce((accum, cell) => accum + cell.element.nativeElement.offsetWidth, 0) -\n      adaptSystemColumnWidth;\n\n    this.adaptTableConfig.cardLayoutColumns.forEach((column: IAdaptTableColumnConfig) => {\n      column.width = `${((parseFloat(column.width) * availableColumnWidth) / 100).toFixed(4)}px`;\n    });\n  }\n\n  private initRecordDefinitions(): Observable<IRecordDefinition> {\n    this.setRecordDefinition(null);\n    this.state.associationDescriptors = [];\n\n    const hasAssociatedRecordFieldColumns = some(this.state.columns, (column) =>\n      this.rxRecordGridUtilsService.isAssociatedRecordFieldId(column.fieldId)\n    );\n\n    return forkJoin([\n      this.getRecordDefinition(),\n      hasAssociatedRecordFieldColumns ? this.getAssociationDescriptors() : of([])\n    ]).pipe(\n      tap(([recordDefinition, associationDescriptors]) => {\n        this.setRecordDefinition(recordDefinition);\n        this.state.associationDescriptors = associationDescriptors;\n      }),\n      map(([recordDefinition]) => recordDefinition)\n    );\n  }\n\n  private initRowActionButtons(): void {\n    if (this.isProgrammaticUse) {\n      this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n    } else {\n      this.rowActionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_RECORD_GRID.rowActionsOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private isDownloadableAttachmentColumn(column: IRecordGridColumnWithMetadata): boolean {\n    const recordDefinitionType = get(this.state.recordDefinition, 'resourceType');\n    const fieldDefinitionType = get(column, 'fieldDefinition.resourceType');\n\n    return (\n      !this.isProgrammaticUse &&\n      (recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType ||\n        recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) &&\n      fieldDefinitionType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType\n    );\n  }\n\n  private isRangeFilter(fieldId: string): boolean {\n    const rangeFields = [\n      RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.real.resourceType\n    ];\n\n    const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n    return includes(rangeFields, fieldDefinition.resourceType);\n  }\n\n  private isSharedFilterPreset(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): savedFilter is IRxRecordGridSharedFilterPreset {\n    return Boolean((savedFilter as IRxRecordGridSharedFilterPreset).filterExpression);\n  }\n\n  private loadRowData(loadMore?: boolean): void {\n    this.getGridData(loadMore).subscribe();\n  }\n\n  private openSortByDialogFn(config: any): Promise<any> {\n    this.cardLayoutOpenedModal = this.adaptModalService.open(config);\n\n    return this.cardLayoutOpenedModal;\n  }\n\n  private prepareQueryParamsAndQueryArgs(onlyForTotalCount: boolean): IRecordGridDataPageRequestParams {\n    const primaryKey = this.adaptTableConfig.primaryKey;\n\n    const queryParams: IRecordGridDataPageRequestParams = {\n      ...this.getBaseDataPageParams(),\n      shouldIncludeTotalSize: onlyForTotalCount,\n      pageSize: onlyForTotalCount ? 0 : this.adaptTableConfig.rows,\n      startIndex: onlyForTotalCount ? 0 : this.adaptTableConfig.first\n    };\n\n    if (this.cursor && !onlyForTotalCount) {\n      queryParams.cursor = this.cursor;\n    }\n\n    if (!onlyForTotalCount) {\n      queryParams.propertySelection = chain(\n        this.adaptTableConfig.columns\n          .filter(\n            (col) => !col.isRowActionsColumn && (this.state.getDataForHiddenColumns || !col.hidden || col.referenced)\n          )\n          .map((col) => col.field)\n      )\n        .union([primaryKey])\n        .value();\n    }\n\n    const multiSortMeta = this.adaptTableConfig.multiSortMeta;\n\n    if (!onlyForTotalCount && multiSortMeta && multiSortMeta.length) {\n      queryParams.sortBy = multiSortMeta.map((metaItem) =>\n        metaItem.order === SortOrder.Asc ? `${metaItem.field}` : `-${metaItem.field}`\n      );\n    }\n\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    const textSearchQuery = this.rxRecordGridFilterService.generateTextFilterQuery(\n      searchText,\n      this.adaptTableConfig.columns\n    );\n\n    const appliedSharedFilterPreset = this.state.advancedFiltering.appliedSharedFilterPreset;\n\n    const sharedFilterPresetExpression =\n      appliedSharedFilterPreset && appliedSharedFilterPreset.filterExpression\n        ? `(${appliedSharedFilterPreset.filterExpression})`\n        : null;\n\n    const resultingQuery = this.rxRecordGridFilterService.addQueries(\n      this.rxRecordGridFilterService.getQueryFromRecordGridFilterData(\n        this.state.initialFilters,\n        this.state.recordDefinition.fieldDefinitionsById\n      ),\n      this.buildQueryByAdvancedFilters(this.state.advancedFiltering.selectedFilters),\n      textSearchQuery,\n      this.state.filterExpression,\n      sharedFilterPresetExpression\n    );\n\n    if (resultingQuery) {\n      queryParams.queryExpression = resultingQuery;\n    }\n\n    return queryParams;\n  }\n\n  private refresh(): Observable<never> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => this.getGridData()),\n      switchMapTo(EMPTY)\n    );\n  }\n\n  private saveViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.saveViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private scrollToTop(): void {\n    if (this.adaptTable) {\n      const scrollableBodyElement = this.adaptTable.getScrollableBodyElement();\n\n      if (scrollableBodyElement) {\n        scrollableBodyElement.scrollTop = 0;\n      }\n    }\n  }\n\n  private setFilter(newFilter: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.selectedFilters = newFilter;\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    this.state.recordDefinition = cloneDeep(recordDefinition);\n\n    if (recordDefinition) {\n      this.state.recordDefinition.fieldDefinitionsById = this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(\n        this.state.recordDefinition\n      );\n    }\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private setSelectedFilteredRowsCount(): void {\n    this.selectedFilteredRowsCount = this.adaptTable.hasFilter() ? this.getSelectedRows().length : 0;\n  }\n\n  private sortRows(rows: RowDataItem[]): void {\n    rows.sort((firstRow: RowDataItem, secondRow: RowDataItem) => this.compareRows(firstRow, secondRow));\n\n    forEach(rows, (row) => {\n      if (row.items?.length) {\n        this.sortRows(row.items);\n      }\n    });\n  }\n\n  private toggleCellSelection(\n    columns: IAdaptTableColumnConfig[],\n    rowItem: IRowDataItem,\n    popover: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    if (this.state.enableFiltering) {\n      if (!isCardLayout) {\n        const column = columns[0];\n\n        if (column.filterable) {\n          const existingPendingFilter = find(this.state.advancedFiltering.pendingSelectedFilters, {\n            filterOptionId: column.field\n          });\n\n          const filterValue = !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n          const isRangeFilter = this.isRangeFilter(column.field);\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          const isFilterAvailable = !(\n            (isRangeFilter && existingPendingFilter && existingPendingFilter.value.length === 2) ||\n            (isRequiredBooleanFilter && existingPendingFilter) ||\n            (filterValue === '$NULL$' && (isRangeFilter || isRequiredBooleanFilter))\n          );\n\n          if (existingPendingFilter) {\n            if (this.isCellSelected(popover)) {\n              const elementIndex = findIndex(existingPendingFilter.value, filterValue);\n\n              existingPendingFilter.value.splice(elementIndex, 1);\n              this.trackPopoverAnchor(popover);\n\n              if (!existingPendingFilter.value.length) {\n                remove(this.state.advancedFiltering.pendingSelectedFilters, existingPendingFilter);\n              }\n            } else if (isFilterAvailable) {\n              existingPendingFilter.value.push(filterValue);\n              this.trackPopoverAnchor(popover);\n            }\n          } else if (isFilterAvailable) {\n            const selectedFilter = {\n              filterOptionId: column.field,\n              value: [filterValue]\n            };\n\n            this.state.advancedFiltering.pendingSelectedFilters.push(selectedFilter);\n            this.trackPopoverAnchor(popover);\n          }\n        }\n      } else {\n        const filterableColumns = columns.filter((column) => {\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          return column.filterable && !isRequiredBooleanFilter;\n        });\n\n        const isCellSelected = this.isCellSelected(popover);\n\n        forEach(filterableColumns, (column) => {\n          if (column.filterable) {\n            const filterValue =\n              !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n\n            if (!this.state.advancedFiltering.selectedCardValues[column.field]) {\n              this.state.advancedFiltering.selectedCardValues[column.field] = [filterValue];\n            } else if (isCellSelected) {\n              remove(this.state.advancedFiltering.selectedCardValues[column.field], filterValue);\n            } else {\n              this.state.advancedFiltering.selectedCardValues[column.field].push(filterValue);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  private trackPopoverAnchor(cellPopover: AdaptPopoverDirective): void {\n    if (this.isCellSelected(cellPopover)) {\n      const isCurrentPopoverLast = cellPopover === last(this.popovers);\n\n      remove(this.popovers, cellPopover);\n\n      if (isCurrentPopoverLast) {\n        cellPopover.close();\n\n        last(this.popovers)?.open();\n      }\n    } else {\n      last(this.popovers)?.close();\n\n      this.popovers.push(cellPopover);\n      cellPopover.open();\n    }\n  }\n\n  private updateAdaptTableFilters(): void {\n    const globalFilter = this.adaptTable.filters.global;\n\n    this.adaptTable.filters = this.areUserFiltersApplied() ? { dummyFilter: {} } : {};\n\n    if (globalFilter) {\n      this.adaptTable.filters.global = globalFilter;\n    }\n  }\n\n  private updateToolbarItems(): void {\n    if (this.adaptTable) {\n      const toolbarComponent = this.adaptTable.toolbarComponent as AdaptTableToolbarComponent;\n\n      const filterSection = toolbarComponent.toolbarContentItems.find(\n        (toolbarContentItem) => toolbarContentItem.adaptToolbarItem === ToolbarItemsByPriority.FILTER\n      );\n\n      setTimeout(() => {\n        // don't update toolbar items when filter is hidden\n        if (filterSection && !filterSection.itemContext.hidden) {\n          toolbarComponent.updateToolbarItems();\n        }\n      });\n    }\n  }\n\n  private getExportSelectedText(selectedItems: IRowDataItem[]): string {\n    return selectedItems.length > 1 ? this.exportSelectedRowsText : this.exportSelectedRowText;\n  }\n\n  private getFiltersRequiredMessage(requiredFiltersCount: number): string {\n    return requiredFiltersCount > 1\n      ? this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filters-warning.message',\n          {\n            requiredFiltersCount: requiredFiltersCount\n          }\n        )\n      : this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filter-warning.message'\n        );\n  }\n}\n","<adapt-table\n  #adaptTable\n  rxCardLayout\n  scrollHeight=\"flex\"\n  (changedCardLayout)=\"onChangedCardLayout($event)\"\n  [cardLayoutWidth]=\"state.cardLayoutWidth\"\n  [cardLayoutFieldsHeaderTemplate]=\"cardLayoutFieldsHeaderTemplate\"\n  [cardLayoutFieldsDataCellTemplate]=\"cardLayoutFieldsDataCellTemplate\"\n  [cardLayoutValuesDataCellTemplate]=\"cardLayoutValuesDataCellTemplate\"\n  [cardLayoutValuesHeaderTemplate]=\"cardLayoutValuesHeaderTemplate\"\n  [cardLayoutRecordGridElementRef]=\"elementRef\"\n  [cardLayoutGetDataCellClass]=\"getDataCellClassBind\"\n  [value]=\"adaptTableConfig.data\"\n  [columns]=\"adaptTableConfig.cardLayoutColumns || adaptTableConfig.columns\"\n  [rows]=\"adaptTableConfig.rows\"\n  [first]=\"adaptTableConfig.first\"\n  [scrollable]=\"adaptTableConfig.scrollable\"\n  [sortable]=\"true\"\n  [rowExpandMode]=\"\"\n  [sortMode]=\"'multiple'\"\n  [resizableColumns]=\"true\"\n  [columnResizeMode]=\"adaptTableConfig.columnResizeMode\"\n  [selectionMode]=\"adaptTableConfig.rowSelectionMode\"\n  [selection]=\"adaptTableConfig.selectedItems\"\n  [toolbarConfig]=\"adaptTableConfig.toolbarConfig\"\n  [filterable]=\"adaptTableConfig.filterable\"\n  [filters]=\"adaptTableConfig.filters\"\n  [multiSortMeta]=\"adaptTableConfig.multiSortMeta\"\n  [dataKey]=\"adaptTableConfig.primaryKey\"\n  [bordered]=\"adaptTableConfig.bordered\"\n  [totalRecords]=\"adaptTableConfig.totalRecords\"\n  [totalRecordsInGroup]=\"state.expandGroups ? adaptTableConfig.totalRecords : 0\"\n  [lazy]=\"true\"\n  [lazyLoadOnInit]=\"false\"\n  [loading]=\"adaptTableConfig.isLoadingData\"\n  [enableInfiniteScrolling]=\"true\"\n  [expandedGroupsKeys]=\"adaptTableConfig.expandedGroupsKeys\"\n  [loadingMore]=\"adaptTableConfig.isLoadingMoreData\"\n  [suppressTooltip]=\"false\"\n  [virtualScroll]=\"adaptTableConfig.virtualScroll\"\n  [virtualRowHeight]=\"adaptTableConfig.virtualRowHeight\"\n  (selectionChange)=\"onRowsSelectionChange($event)\"\n  (onSort)=\"onSort($event)\"\n  (onLazyLoad)=\"onLazyLoad($event)\"\n  (onColReorder)=\"onColReorder($event)\"\n  [striped]=\"adaptTableConfig.striped\"\n  [texts]=\"adaptTableConfig.texts\"\n  (onColResize)=\"onColumnResize()\"\n  (export)=\"onExport($event)\"\n  [selectedFilteredRowsCount]=\"selectedFilteredRowsCount\"\n  [headerSelectionMode]=\"adaptTableHeaderSelectionMode\"\n  (onHeaderCheckboxToggle)=\"handleHeaderCheckboxToggle($event)\"\n></adapt-table>\n\n<ng-template #visibleColumnsMenuTemplate>\n  <adapt-rx-search\n    [(ngModel)]=\"columnSearchText\"\n    [placeholder]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.search.placeholder' | translate\n    \"\n    [autofocus]=\"true\"\n    (ngModelChange)=\"onSearchColumns()\"\n  >\n  </adapt-rx-search>\n  <div\n    class=\"dropdown-item visible-columns-item px-3\"\n    *ngFor=\"let column of filteredVisibleColumns; trackBy: trackByColumnField\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <adapt-rx-checkbox\n      class=\"m-0 adapt-table-toolbar__column-visibility-control\"\n      [label]=\"column.header || column.fallbackTitle\"\n      [ngModel]=\"!column.hidden\"\n      (ngModelChange)=\"onColumnVisibilityChange($event, column)\"\n    ></adapt-rx-checkbox>\n  </div>\n  <adapt-empty-state\n    *ngIf=\"!filteredVisibleColumns.length\"\n    [type]=\"'search'\"\n    [label]=\"'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.empty.label' | translate\"\n  >\n  </adapt-empty-state>\n</ng-template>\n\n<ng-template #rightCustomSectionTemplate>\n  <div class=\"px-2\" rx-id=\"selected-row-count\">\n    <ng-container *ngIf=\"isTotalRecordCountKnown\">\n      {{ getMultipleRowsSelectedText() }}\n    </ng-container>\n\n    <ng-container *ngIf=\"!isTotalRecordCountKnown\">\n      <div class=\"d-flex align-items-center\">\n        {{ getMultipleRowsSelectedTextFirstPart() }}\n        <button type=\"button\" class=\"btn btn-link p-0 mx-1\" (click)=\"loadTotalRowCount()\">\n          {{ getLoadRecordCountLinkText() }}\n        </button>\n        {{ getMultipleRowsSelectedTextSecondPart() }}\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #leftCustomSectionTemplate>\n  <div [adaptSubnav] *ngIf=\"shouldDisplayActionButtons\" class=\"pl-1 w-100 align-items-center\">\n    <div [adaptSubnavItem]=\"actionButtonTemplate\" *ngFor=\"let actionButton of actionButtons\">\n      <ng-template #actionButtonTemplate let-hidden>\n        <rx-action-button\n          class=\"m-1\"\n          [guid]=\"actionButton.guid\"\n          [config]=\"getActionButtonConfig(hidden, actionButton.config)\"\n          [runtimeViewModelApi]=\"actionButton.runtimeViewModelApi\"\n        ></rx-action-button>\n      </ng-template>\n    </div>\n\n    <div [adaptSubnavDropdown]>\n      <button type=\"button\" class=\"btn btn-secondary btn-xs d-icon-triangle_down ml-1\"></button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #filterTemplate let-context>\n  <button\n    type=\"button\"\n    class=\"btn btn-link d-icon-refresh grid-toolbar-icon ml-2 p-1\"\n    [ngClass]=\"{ 'd-block': context.hidden }\"\n    rx-id=\"refresh-button\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.refresh.label' | translate\"\n    (click)=\"onRefreshClick()\"\n  ></button>\n\n  <adapt-advanced-filter\n    #adaptAdvancedFilter\n    *ngIf=\"state.enableFiltering\"\n    class=\"ml-2\"\n    [ngClass]=\"{ 'd-inline-block': context.hidden, 'd-block': !context.hidden }\"\n    [appendDropdownToBody]=\"true\"\n    [texts]=\"state.advancedFiltering.filterTexts\"\n    [showAnchorButtonLabel]=\"!context.collapsed\"\n    [filterOptions]=\"state.advancedFiltering.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"state.advancedFiltering.selectedFilters\"\n    [savedFilters]=\"state.advancedFiltering.savedFilters\"\n    [enableSavedFilters]=\"!!guid && state.enableFilterPresets\"\n    (deleteSavedFilter)=\"onDeleteSavedFilterPreset($event)\"\n    (createNewFilter)=\"onCreateNewFilterPreset($event)\"\n    (updateSavedFilter)=\"onUpdateSavedFilterPreset($event)\"\n    [activeSavedFilter]=\"state.advancedFiltering.activeSavedFilter\"\n    (activeSavedFilterChange)=\"onActiveSavedAdvancedFilterChange($event)\"\n    (beforeActiveSavedFilterChange)=\"onBeforeActiveSavedFilterChange($event)\"\n    (editSavedFilterClick)=\"onEditSavedFilterClick($event)\"\n    [isLoading]=\"state.advancedFiltering.isLoading\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    (filterExpressionTagsChanged)=\"onAdvancedFilterExpressionTagsChanged($event)\"\n    [applyFiltersByUserAction]=\"true\"\n  ></adapt-advanced-filter>\n\n  <span\n    *ngIf=\"(context.collapsed || context.hidden) && state.advancedFiltering.toolbarTags.length\"\n    class=\"btn-link ml-1\"\n    >{{\n      'com.bmc.arsys.rx.client.view-components.record-grid.filters.number-of-active-filters.label'\n        | translate: { count: state.advancedFiltering.toolbarTags.length }\n    }}</span\n  >\n\n  <rx-filter-tags\n    class=\"ml-2\"\n    [hidden]=\"context.collapsed || context.hidden\"\n    [tags]=\"state.advancedFiltering.toolbarTags\"\n    [tagsLimit]=\"state.filterTagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n  ></rx-filter-tags>\n</ng-template>\n\n<ng-template #cellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div\n    *ngIf=\"column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    [rxCellDisplayProps]=\"column.cellDisplayProperties\"\n    [rxCellDisplayPropsBadgeElem]=\"badgeElem\"\n    [rxCellDisplayPropsDataItem]=\"dataItem\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span #badgeElem (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n\n  <div\n    *ngIf=\"!column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #defaultCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container\n    *ngIf=\"\n      (!column.clickable ||\n        (column.clickableWithHref &&\n          !dataItem[column.field + '$ROUTER_LINK$'] &&\n          !dataItem[column.field + '$LAUNCH_URL$'])) &&\n      !column.isDownloadableAttachment\n    \"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\"> {{ getCellValue(dataItem, column) }}</span>\n  </ng-container>\n\n  <a\n    tabindex=\"0\"\n    class=\"attachment-link\"\n    *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n    (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n    (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    tabindex=\"0\"\n    class=\"no-href-link\"\n    *ngIf=\"column.clickable && !column.clickableWithHref\"\n    (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n    (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n    [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n    [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n    [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n    [target]=\"dataItem[column.field + '$TARGET$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n</ng-template>\n\n<ng-template #cardLayoutFieldsHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutValuesHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutFieldsDataCellTemplate>\n  <div class=\"rx-card-layout-cell\" (click)=\"onCellClick($event)\">\n    <div\n      class=\"rx-card-layout-cell-item\"\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      [attr.data-testid]=\"column.testId + '-name'\"\n    >\n      {{ column.header || column.fallbackTitle }}:\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutValuesDataCellTemplate let-dataItem=\"dataItem\">\n  <div class=\"rx-card-layout-cell-values rx-card-layout-cell\">\n    <div\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      class=\"rx-card-layout-cell-item\"\n      [attr.data-testid]=\"column.testId + '-value'\"\n    >\n      <div *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: dataItem }\"\n        ></ng-container>\n      </div>\n      <div\n        *ngIf=\"\n          (!column.clickable ||\n            (column.clickableWithHref &&\n              !dataItem[column.field + '$ROUTER_LINK$'] &&\n              !dataItem[column.field + '$LAUNCH_URL$'])) &&\n          !column.isDownloadableAttachment &&\n          !column.isRowActionsColumn\n        \"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </div>\n      <a\n        *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n        tabindex=\"0\"\n        class=\"attachment-link\"\n        (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n        (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        tabindex=\"0\"\n        *ngIf=\"column.clickable && !column.clickableWithHref\"\n        class=\"no-href-link\"\n        (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n        (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n        [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n        [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n        [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n        [target]=\"dataItem[column.field + '$TARGET$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n    </div>\n  </div>\n\n  <button\n    *ngIf=\"isFilterBySelectionButtonVisible\"\n    adapt-button\n    rx-id=\"filter-by-selection-button\"\n    class=\"btn btn-link d-icon-filter_adapt filter-by-selection-icon\"\n    (click)=\"onFilterBySelection($event, visibleColumns, dataItem)\"\n  ></button>\n\n  <button\n    class=\"btn btn-link d-icon-pop_up record-details-icon\"\n    rx-id=\"show-record-details-button\"\n    [attr.aria-label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.button.label' | translate\n    \"\n    (click)=\"openRowDetails(adaptTableConfig.columns, dataItem)\"\n  ></button>\n</ng-template>\n\n<ng-template #cardLayoutRowDetailsTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-details\">\n    <div class=\"row mb-3\" *ngFor=\"let column of getData().columns\">\n      <div class=\"col-sm-4 font-weight-bold rx-text-break\">{{ column.header || column.fallbackTitle }}:</div>\n\n      <div class=\"col-sm-8 rx-text-break\" *ngIf=\"!column.isDownloadableAttachment && !column.isRowActionsColumn\">\n        {{ getCellValue(getData().rowDataItem, column) }}\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isDownloadableAttachment\">\n        <a\n          tabindex=\"0\"\n          class=\"row-details-attachment-link\"\n          (click)=\"downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column))\"\n          (keydown)=\"\n            downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column), $event)\n          \"\n        >\n          {{ getCellValue(getData().rowDataItem, column) }}</a\n        >\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: getData().rowDataItem }\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #filterButton>\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    size=\"small\"\n    class=\"d-icon-filter_adapt p-0\"\n    (click)=\"applyFilterBySelection()\"\n  ></button>\n</ng-template>\n\n<ng-template #rowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div class=\"dropdown dropdown-kabob\" adaptDropdown appendToBody=\"true\" (onOpen)=\"onRowActionOpen(dataItem)\">\n    <button id=\"row-actions-dropdown-button\" class=\"dropdown-kabob-btn\" adaptDropdownToggle></button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"row-actions-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"action-button-list\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n\n      <div class=\"empty-list-label pl-3\">\n        {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.no-actions-available.label' | translate }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutRowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div\n    class=\"dropdown mb-1\"\n    adaptDropdown\n    appendToBody=\"true\"\n    (click)=\"$event.stopPropagation()\"\n    (onOpen)=\"onRowActionOpen(dataItem)\"\n  >\n    <button id=\"card-layout-dropdown-button\" class=\"btn btn-secondary btn-xs\" size=\"xtra-small\" adaptDropdownToggle>\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.dropdown.label' | translate }}\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"card-layout-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"row-actions-dropdown-item\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n    </div>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n","import { Injectable } from '@angular/core';\nimport { chain, filter, without } from 'lodash';\n\nimport { IDefinitionAdapter, IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { ActionButtonSize, ActionButtonStyle } from '../../action-button/action-button.types';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\n\n@Injectable()\nexport class RxRecordGridDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService\n  ) {}\n\n  adaptDefinition(\n    recordGridContainerViewComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): void {\n    const cellDisplayPropertiesList = recordGridContainerViewComponentDefinition.componentDefinitions\n      .filter(({ type }) => type === RX_RECORD_GRID.components.column)\n      .map(({ propertiesByName }) => propertiesByName.cellDisplayProperties)\n      .filter(Boolean);\n\n    this.viewDefinitionParserService\n      .getComponents(recordGridContainerViewComponentDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        switch (componentDefinition.type) {\n          case RX_RECORD_GRID.type: {\n            componentDefinition.propertiesByName.enableFilterPresets =\n              componentDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n            componentDefinition.propertiesByName.requiredFilters =\n              componentDefinition.propertiesByName.requiredFilters ??\n              (componentDefinition.propertiesByName['requireFiltering'] === 'true' ? 1 : 0);\n\n            const layout = this.rxJsonParserService.tryParseJson<IViewLayout>(componentDefinition.layout);\n\n            const actionButtons = filter(componentDefinition.componentDefinitions, {\n              type: RxViewComponentType.ActionButton\n            });\n\n            const rowActionButtons = this.getActionButtonsForOutlet(\n              layout,\n              RX_RECORD_GRID.rowActionsOutletName,\n              actionButtons\n            );\n\n            rowActionButtons.forEach((action) => {\n              action.propertiesByName = { ...action.propertiesByName, cls: 'dropdown-item', styles: 'p-0' };\n            });\n\n            without(actionButtons, ...rowActionButtons).forEach((actionButton) => {\n              if (\n                [ActionButtonStyle.Primary, ActionButtonStyle.Secondary].includes(actionButton.propertiesByName.style)\n              ) {\n                actionButton.propertiesByName.size = ActionButtonSize.Small;\n              }\n            });\n\n            break;\n          }\n          case RX_RECORD_GRID.components.column: {\n            let isReferenced = null;\n\n            if (\n              !this.rxRecordGridConfigUtilsService.getBooleanValue(\n                recordGridContainerViewComponentDefinition.propertiesByName.getDataForHiddenColumns\n              )\n            ) {\n              const recordGridGuid = recordGridContainerViewComponentDefinition.guid;\n              const columnFieldId = componentDefinition.propertiesByName.fieldId;\n\n              const isReferencedInExpression = viewDefinition.viewComponentExpressions.some(\n                (expression) =>\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.firstSelectedRow.${columnFieldId}`) ||\n                  expression.includes(`\\$\\{view.components.${recordGridGuid}.clickableRow.${columnFieldId}`)\n              );\n\n              const isReferencedInCellDisplayProperties = cellDisplayPropertiesList.some((cellDisplayProperties) =>\n                cellDisplayProperties.includes(`\\$\\{view.components.grid.clickableRow.${columnFieldId}`)\n              );\n\n              isReferenced = isReferencedInExpression || isReferencedInCellDisplayProperties;\n            }\n\n            const adaptedProperties = {\n              actions: [],\n              clickable: false,\n              guid: componentDefinition.guid,\n              wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n              referenced: isReferenced,\n              typeaheadKeystrokeCount:\n                componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            };\n\n            const actions = filter(componentDefinition.componentDefinitions, {\n              type: 'rx-action'\n            }).map((action) => action.propertiesByName);\n\n            if (actions.length) {\n              adaptedProperties.clickable = true;\n              adaptedProperties.actions = actions;\n            }\n\n            Object.assign(componentDefinition.propertiesByName, adaptedProperties);\n            break;\n          }\n          case RX_RECORD_GRID.components.filterPreset:\n          case RX_RECORD_GRID.components.filter: {\n            Object.assign(componentDefinition.propertiesByName, {\n              guid: componentDefinition.guid\n            });\n            break;\n          }\n        }\n      });\n  }\n\n  private getActionButtonsForOutlet(\n    layout: IViewLayout,\n    outletName: string,\n    actionButtons: AnyViewComponentDefinition<IPlainObject>[]\n  ): AnyViewComponentDefinition<IPlainObject>[] {\n    const actionButtonsGuids: string[] = chain(layout.outlets)\n      .filter({\n        name: outletName\n      })\n      .head()\n      .get('columns[0].children', [])\n      .value();\n\n    return filter(actionButtons, (actionButton) => actionButtonsGuids.includes(actionButton.guid));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxRecordQueryExpressionEvaluatorService } from '@helix/platform/view/api';\n\n// @deprecated\n@Injectable()\nexport class RxRecordGridQueryExpressionEvaluatorService extends RxRecordQueryExpressionEvaluatorService {}\n","import { CommonModule, DatePipe, DecimalPipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AdaptAccordionModule,\n  AdaptAdvancedFilteringModule,\n  AdaptAlertModule,\n  AdaptButtonModule,\n  AdaptDropdownModule,\n  AdaptPopoverModule,\n  AdaptRxCheckboxModule,\n  AdaptRxSelectModule,\n  AdaptSubnavModule,\n  AdaptRxSearchModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { AdaptSelectModule } from '@bmc-ux/obsolete';\nimport { AdaptTableModule } from '@bmc-ux/adapt-table';\nimport { RxBooleanPipe, RxDefinitionAdapterRegistryService, RxDefinitionModule } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ActionButtonModule } from '../../action-button/runtime/action-button.module';\nimport { RecordGridCommonModule } from '../common/record-grid-common.module';\nimport { RxRecordGridAdvancedFilteringService } from '../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { CardLayoutCellHeaderComponent } from './card-layout-cell-header/card-layout-cell-header.component';\nimport { RxFilterByCardSelectionDialogComponent } from './filter-by-card-selection-dialog/filter-by-card-selection-dialog.component';\nimport { GridCardLayoutDirective } from './record-grid-card-layout/record-grid-card-layout.directive';\nimport { RxRecordGridDefinitionAdapterService } from './record-grid-definition-adapter.service';\nimport { RecordGridComponent } from './record-grid.component';\nimport { RxRecordGridConfigUtilsService } from './services/record-grid-config-utils.service';\nimport { RxRecordGridConfiguratorService } from './services/record-grid-configurator.service';\nimport { RxRecordGridFilterConfigService } from './services/record-grid-filter-config.service';\nimport { RxRecordGridFilterService } from './services/record-grid-filter.service';\nimport { RxRecordGridQueryExpressionEvaluatorService } from './services/record-grid-query-expression-evaluator.service';\nimport { RxRecordGridSharedFilterPresetsCacheService } from './services/record-grid-shared-filter-presets-cache.service';\nimport { CellDisplayPropertiesDirective } from './cell-display-properties/cell-display-properties.directive';\nimport { RxAdvancedFilteringFieldsProviderModule } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.module';\n\n@NgModule({\n  imports: [\n    RxDefinitionModule,\n    CommonModule,\n    RuntimeViewCanvasModule,\n    AdaptTableModule.forRoot(),\n    AdaptSelectModule,\n    FormsModule,\n    AdaptRxCheckboxModule,\n    AdaptRxSelectModule,\n    AdaptAlertModule.forRoot(),\n    AdaptPopoverModule.forRoot(),\n    AdaptAccordionModule,\n    AdaptButtonModule,\n    AdaptDropdownModule,\n    TranslateModule,\n    ActionButtonModule,\n    AdaptSubnavModule,\n    AdaptAdvancedFilteringModule,\n    RecordGridCommonModule,\n    RouterModule,\n    RxAdvancedFilteringFieldsProviderModule,\n    AdaptRxSearchModule,\n    AdaptEmptyStateModule\n  ],\n  providers: [\n    DatePipe,\n    DecimalPipe,\n    RxBooleanPipe,\n    RxRecordGridConfiguratorService,\n    RxRecordGridConfigUtilsService,\n    RxRecordGridDefinitionAdapterService,\n    RxRecordGridFilterService,\n    RxRecordGridUtilsService,\n    RxRecordGridFilterConfigService,\n    RxRecordGridQueryExpressionEvaluatorService,\n    RxRecordGridSharedFilterPresetsCacheService,\n    RxRecordGridAdvancedFilteringService\n  ],\n  exports: [RecordGridComponent],\n  declarations: [\n    RecordGridComponent,\n    GridCardLayoutDirective,\n    CardLayoutCellHeaderComponent,\n    RxFilterByCardSelectionDialogComponent,\n    CellDisplayPropertiesDirective\n  ],\n  entryComponents: [RecordGridComponent]\n})\nexport class RecordGridModule {\n  constructor(\n    private rxRecordGridDefinitionAdapterService: RxRecordGridDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_RECORD_GRID.type,\n      this.rxRecordGridDefinitionAdapterService\n    );\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Observable, throwError } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { BaseViewComponent, IViewComponentSetProperty } from '@helix/platform/view/runtime';\nimport { IRichTextConfig } from './rich-text.types';\nimport { RxCkEditorConfiguratorService } from '@helix/platform/view/api';\n\n@Component({\n  selector: 'rx-rich-text',\n  template: `\n    <div\n      class=\"text-container focusable\"\n      [hidden]=\"isHidden\"\n      tabindex=\"0\"\n      [innerHTML]=\"html\"\n      [attr.aria-hidden]=\"isHidden\"\n    ></div>\n  `,\n  styleUrls: ['./rich-text.component.scss']\n})\nexport class RichTextComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  @Input()\n  config: Observable<IRichTextConfig>;\n\n  html: SafeHtml;\n  filter = new CKEDITOR.filter('');\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private sanitizer: DomSanitizer, private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    super();\n\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config) => {\n      this.isHidden = Boolean(config.hidden);\n      this.html = this.updateHtml(config.html);\n    });\n  }\n\n  updateHtml(value: string): SafeHtml {\n    if (value) {\n      value = value.replace(/\\n/g, '<br>');\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(value);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n      value = writer.getHtml(true);\n    } else {\n      value = '';\n    }\n\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n\n  setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = value;\n\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Rich text: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { isNil } from 'lodash';\n\n@Injectable()\nexport class RxRichTextExpressionEvaluatorService implements IExpressionEvaluator {\n  constructor(private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService) {}\n\n  evaluate(expression: string, data: object): string {\n    const tempElement = document.createElement('div');\n    tempElement.innerHTML = expression;\n\n    tempElement.querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`).forEach((span) => {\n      const evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(\n        span.getAttribute(RX_RICH_TEXT.expressionAttributeName),\n        data\n      );\n\n      const textNode = document.createTextNode(isNil(evaluatedExpression) ? '' : evaluatedExpression);\n\n      span.parentElement.replaceChild(textNode, span);\n    });\n\n    return tempElement.innerHTML;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\n\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxCkEditorConfiguratorService\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RichTextDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  private filter = new CKEDITOR.filter('');\n\n  constructor(private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  adaptDefinition(definition: IContainerViewComponentDefinition): void {\n    if (definition.propertiesByName.html) {\n      const initialValue = CKEDITOR.dtd.$removeEmpty['span'];\n\n      // Allow empty span tags, used for holding the expressions in rx-expression attributes,\n      // to be parsed by CKEDITOR.htmlParser.fragment.fromHtml\n      // https://stackoverflow.com/questions/18250404/ckeditor-strips-i-tag\n      // @ts-ignore\n      CKEDITOR.dtd.$removeEmpty['span'] = 0;\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(definition.propertiesByName.html);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      // sanitize HTML\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n\n      definition.propertiesByName.html = writer.getHtml(true);\n\n      CKEDITOR.dtd.$removeEmpty['span'] = initialValue;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextComponent } from './rich-text.component';\nimport { RxRichTextExpressionEvaluatorService } from './rich-text-expression-evaluator.service';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RichTextDefinitionAdapterService } from '../rich-text-definition-adapter.service';\n\n@NgModule({\n  declarations: [RichTextComponent],\n  imports: [CommonModule, CKEditorModule],\n  exports: [RichTextComponent],\n  entryComponents: [RichTextComponent],\n  providers: [RxRichTextExpressionEvaluatorService]\n})\nexport class RichTextModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private richTextDefinitionAdapterService: RichTextDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.RichText,\n      this.richTextDefinitionAdapterService\n    );\n  }\n}\n","export const RX_CKEDITOR_CONFIG = {\n  title: false,\n  skin: 'rich-text,skins/rich-text/',\n  toolbar: [\n    [\n      'Bold',\n      'Italic',\n      'Strike',\n      'Underline',\n      '-',\n      'Link',\n      'Unlink',\n      '-',\n      'NumberedList',\n      'BulletedList',\n      'Outdent',\n      'Indent',\n      '-',\n      'JustifyLeft',\n      'JustifyCenter',\n      'JustifyRight',\n      '-',\n      'ExpressionEditor'\n    ],\n    '/',\n    ['Format', 'Styles', 'Font', 'FontSize', 'TextColor']\n  ],\n  stylesSet: [\n    {\n      name: 'Italic Title',\n      element: 'h2',\n      attributes: {\n        class: 'italic-title'\n      }\n    },\n    {\n      name: 'Subtitle',\n      element: 'h3',\n      attributes: {\n        class: 'subtitle'\n      }\n    },\n    {\n      name: 'Special Container',\n      element: 'div',\n      attributes: {\n        class: 'special-containers'\n      }\n    },\n    {\n      name: 'Marker',\n      element: 'span',\n      attributes: {\n        class: 'marker'\n      }\n    },\n    {\n      name: 'Small',\n      element: 'small'\n    },\n    {\n      name: 'Computer Code',\n      element: 'code'\n    },\n    {\n      name: 'Keyboard Phrase',\n      element: 'kbd'\n    },\n    {\n      name: 'Sample Text',\n      element: 'samp'\n    },\n    {\n      name: 'Variable',\n      element: 'var'\n    },\n    {\n      name: 'Deleted Text',\n      element: 'del'\n    },\n    {\n      name: 'Inserted Text',\n      element: 'ins'\n    },\n    {\n      name: 'Cited Work',\n      element: 'cite'\n    },\n    {\n      name: 'Inline Quotation',\n      element: 'q'\n    },\n    {\n      name: 'Compact Table',\n      element: 'table',\n      attributes: {\n        cellpadding: '5',\n        cellspacing: '0',\n        class: 'compact-table'\n      }\n    },\n    {\n      name: 'Borderless Table',\n      element: 'table',\n      attributes: {\n        class: 'borderless-table'\n      }\n    },\n    {\n      name: 'Square Bulleted List',\n      element: 'ul',\n      attributes: {\n        class: 'square-bulleted-list'\n      }\n    }\n  ],\n  format_tags: 'p;h1;h2;h3;pre',\n  extraPlugins: 'expression-editor, colordialog',\n  extraAllowedContent: 'span [rx-expression, contenteditable, title] (rx-expression)'\n};\n","import { Tooltip } from '@helix/platform/shared/api';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { take } from 'rxjs/operators';\nimport { IRichTextProperties } from './rich-text-design.types';\nimport { IViewDesignerComponentModel, RX_STANDARD_PROPS_DEFAULT_VALUES } from '@helix/platform/view/api';\n\nexport class RichTextDesignModel\n  extends ViewDesignerComponentModel<IRichTextProperties>\n  implements IViewDesignerComponentModel<IRichTextProperties>\n{\n  html$ = this.sandbox.getComponentPropertyValue('html');\n\n  static getInitialProperties(initialProperties: IRichTextProperties): IRichTextProperties {\n    return {\n      name: null,\n      html: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.componentProperties$.subscribe((properties) => {\n      const validationIssues = properties.html ? [] : [this.sandbox.createError('Rich text value cannot be blank.')];\n\n      validationIssues.push(...validateStandardProps(properties));\n\n      this.sandbox.setValidationIssues(validationIssues);\n    });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Rich text component')\n              }\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  updateComponentProperties(props: Partial<IRichTextProperties>): void {\n    this.sandbox.updateComponentProperties(props);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  ExpressionParserToken,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  RxExpressionParserService\n} from '@helix/platform/shared/api';\nimport { RxExpressionEditorService } from '@helix/platform/shared/components';\nimport { RxTreeService } from '@helix/platform/utils';\nimport { CKEditor4, CKEditorComponent } from 'ckeditor4-angular';\nimport { escape } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, skip, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { RX_RICH_TEXT } from '@helix/platform/view/api';\nimport { RX_CKEDITOR_CONFIG } from './ckeditor-config.constant';\nimport { RichTextDesignModel } from './rich-text-design.model';\n\n@Component({\n  selector: 'rx-rich-text-design',\n  templateUrl: './rich-text-design.component.html',\n  styleUrls: ['./rich-text-design.component.scss']\n})\nexport class RichTextDesignComponent implements OnInit, OnDestroy {\n  constructor(\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxTreeService: RxTreeService,\n    private rxExpressionParserService: RxExpressionParserService,\n    private renderer2: Renderer2,\n    @Inject(DOCUMENT) private document,\n    private ngZone: NgZone\n  ) {}\n\n  @Input()\n  model: RichTextDesignModel;\n\n  @Input()\n  isReadOnly: boolean;\n\n  type = CKEditor4.EditorType.INLINE;\n  ckConfig: CKEditor4.Config = RX_CKEDITOR_CONFIG;\n  formControl = new FormControl(null);\n\n  @ViewChild(CKEditorComponent, { static: true })\n  ckEditor: CKEditorComponent;\n\n  private flatDataDictionary: IDataDictionary;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  // remove inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\"\n  private removeExpressionLabels = this.setExpressionLabelHtml.bind(this, null);\n\n  // set inner span with expression title and content value, e.g.:\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"></span></p>\" ->\n  // \"<p>text<span contenteditable=\"false\" rx-expression=\"${foo}\"><span title=\"Foo\">Foo</span></span></p>\"\n  private addExpressionLabels = this.setExpressionLabelHtml.bind(this, this.getExpressionWithLabels.bind(this));\n\n  ngOnInit(): void {\n    const dataDictionary$ = this.model.expressionConfigurator.getDataDictionary();\n\n    dataDictionary$\n      .pipe(withLatestFrom(this.model.html$), takeUntil(this.destroyed$))\n      .subscribe(([dataDictionary, html]) => {\n        this.flatDataDictionary = this.rxTreeService.flatten({\n          children: dataDictionary\n        });\n\n        this.formControl.setValue(this.addExpressionLabels(html));\n      });\n\n    this.formControl.valueChanges\n      .pipe(\n        map((value) => this.removeExpressionLabels(value)),\n        distinctUntilChanged(),\n        skip(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((html) => {\n        this.model.updateComponentProperties({ html });\n      });\n\n    // set initial value\n    this.model.html$.pipe(take(1), takeUntil(this.destroyed$)).subscribe((html) => {\n      this.formControl.setValue(this.addExpressionLabels(html));\n    });\n  }\n\n  onEditorReady(event: CKEditor4.EventInfo): void {\n    if (this.isReadOnly) {\n      this.ckConfig.toolbar = [];\n      this.document.getElementById(`${event.editor.id}_top`).style.display = 'none';\n    }\n\n    this.ckEditor.instance.on('openExpressionEditor', (evt: CKEDITOR.eventInfo) => {\n      const initialValue = evt.data && evt.data.getAttribute(RX_RICH_TEXT.expressionAttributeName);\n\n      this.ngZone.runTask(() =>\n        this.rxExpressionEditorService\n          .openEditor({\n            property: {\n              path: 'html',\n              value: initialValue,\n              label: 'Rich Text'\n            },\n            expressionConfigurator: this.model.expressionConfigurator\n          })\n          .pipe(takeUntil(this.destroyed$))\n          .subscribe({\n            next: ({ path, value }) => {\n              if (value) {\n                const labelHtmlString = this.getExpressionWithLabels(value);\n\n                if (initialValue) {\n                  evt.data.setAttribute(RX_RICH_TEXT.expressionAttributeName, value);\n                  evt.data.setHtml(labelHtmlString);\n\n                  // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                  this.ckEditor.instance.fire('saveSnapshot');\n                } else {\n                  this.ckEditor.instance.insertHtml(\n                    `<span contenteditable=\"false\" ${RX_RICH_TEXT.expressionAttributeName}=\"${escape(\n                      value\n                    )}\">${labelHtmlString}</span>`\n                  );\n                }\n              } else {\n                evt.data.remove();\n\n                // trigger change event in CKEDITOR, ref: https://stackoverflow.com/a/24599219/4449154\n                this.ckEditor.instance.fire('saveSnapshot');\n              }\n\n              this.moveCursorToEnd();\n            },\n            error: () => {\n              this.moveCursorToEnd();\n            }\n          })\n      );\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getExpressionWithLabels(expressionValue: string): string {\n    return this.rxExpressionParserService.parse(expressionValue, (token, expression) => {\n      if (token !== ExpressionParserToken.RxStringExpression) {\n        const node = this.flatDataDictionary.find((item) => item.expression === expression);\n        const label = node && node.label ? escape(node.label) : expression;\n\n        return `<span title=\"${label}\">${label}</span>`;\n      }\n\n      return expression;\n    });\n  }\n\n  private moveCursorToEnd(): void {\n    const range = this.ckEditor.instance.createRange();\n\n    range.moveToElementEditEnd(range.root);\n    this.ckEditor.instance.getSelection().selectRanges([range]);\n  }\n\n  private setExpressionLabelHtml(predicate: (expression) => string, htmlString: string): string {\n    const tempElement = this.renderer2.createElement('div');\n\n    tempElement.innerHTML = htmlString;\n\n    tempElement\n      .querySelectorAll(`span[${RX_RICH_TEXT.expressionAttributeName}]`)\n      .forEach(\n        (el) => (el.innerHTML = predicate ? predicate(el.getAttribute(RX_RICH_TEXT.expressionAttributeName)) : null)\n      );\n\n    return tempElement.innerHTML.replace(/<br>/g, '<br />');\n  }\n}\n","<ckeditor\n  class=\"border\"\n  [class.border-transparent]=\"formControl.value\"\n  [formControl]=\"formControl\"\n  [config]=\"ckConfig\"\n  [type]=\"type\"\n  (ready)=\"onEditorReady($event)\"\n  [readOnly]=\"isReadOnly\"\n></ckeditor>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionEditorPluginService {\n  constructor() {\n    const me = this;\n\n    CKEDITOR.plugins.add('expression-editor', {\n      init(editor) {\n        editor.addCommand('insertExpression', {\n          exec() {\n            editor.fire('openExpressionEditor', null);\n\n            return true;\n          }\n        });\n\n        editor.on(\n          'doubleclick',\n          (evt) => {\n            const element = me.getSelectedExpressionElement(evt.data.element);\n\n            if (element) {\n              editor.fire('openExpressionEditor', element);\n            }\n          },\n          null,\n          null,\n          0\n        );\n\n        editor.ui.addButton('ExpressionEditor', {\n          label: 'Insert Expression',\n          command: 'insertExpression',\n          toolbar: '',\n          icon: CKEDITOR.plugins.getPath('expression-editor') + 'toolbar.png'\n        });\n      }\n    });\n  }\n\n  private getSelectedExpressionElement(element: CKEDITOR.dom.element): CKEDITOR.dom.element | void {\n    if (element.is('span') && element.hasAttribute('rx-expression')) {\n      return element;\n    } else {\n      const parentElement = element.getParent();\n\n      if (parentElement.is('span') && parentElement.hasAttribute('rx-expression')) {\n        return parentElement;\n      }\n    }\n  }\n\n  private clearSelection(editor: CKEDITOR.editor): void {\n    const selection = editor.getSelection();\n\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RichTextDesignComponent } from './rich-text-design.component';\nimport { CKEditorModule } from 'ckeditor4-angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RxExpressionEditorPluginService } from './expression-editor-plugin.service';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RichTextDefinitionAdapterService } from '../rich-text-definition-adapter.service';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [RichTextDesignComponent],\n  entryComponents: [RichTextDesignComponent],\n  imports: [CommonModule, CKEditorModule, ReactiveFormsModule]\n})\nexport class RichTextDesignModule {\n  constructor(\n    private rxExpressionEditorPluginService: RxExpressionEditorPluginService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private richTextDefinitionAdapterService: RichTextDefinitionAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerDesignAdapter(\n      RxViewComponentType.RichText,\n      this.richTextDefinitionAdapterService\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'rx-service-list-design',\n  templateUrl: './service-list-design.component.html'\n})\nexport class ServiceListDesignComponent {}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <adapt-rx-select label=\"Service list\" required=\"true\" disabled=\"true\" ngModel> </adapt-rx-select>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ServiceListDesignComponent } from './service-list-design.component';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, RxDefinitionPickerModule, FormControlsModule, AdaptRxSelectModule, FormsModule],\n  declarations: [ServiceListDesignComponent],\n  entryComponents: [ServiceListDesignComponent]\n})\nexport class ServiceListDesignModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { find, flow, forEach, groupBy, map } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, finalize, pluck, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { RxSelectionChangeEvent, RxSelectOption, RxSelectOptionsGroup } from '@bmc-ux/adapt-angular';\nimport { ICatalog, ICatalogItem } from './service-list.interface';\nimport { IServiceListProperties } from '../service-list.types';\n\n@Component({\n  selector: 'rx-service-list',\n  templateUrl: './service-list.component.html'\n})\nexport class ServiceListComponent extends BaseViewComponent implements OnInit {\n  @Input()\n  config: Observable<IServiceListProperties>;\n\n  isDisabled = true;\n  serviceListOptions: RxSelectOptionsGroup[] = [];\n\n  service: RxSelectOption = {\n    id: null,\n    name: null,\n    guid: null\n  };\n\n  constructor(private httpClient: HttpClient) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    const serviceRequestId$ = this.config.pipe(\n      pluck('serviceRequestId'),\n      distinctUntilChanged(),\n      takeUntil(this.destroyed$)\n    );\n\n    this.httpClient\n      .get<ICatalog>('/api/com.bmc.dsm.chatbot/rx/application/chatbot/services')\n      .pipe(\n        withLatestFrom(serviceRequestId$),\n        finalize(() => {\n          this.isDisabled = false;\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([chatbotServices, serviceRequestId]) => {\n        this.serviceListOptions = flow(\n          (catalogs: ICatalogItem[]) => groupBy(catalogs, 'groupName'),\n          (catalogsByGroup) =>\n            map(catalogsByGroup, (catalogs: ICatalogItem[], groupName: string) => ({\n              name: groupName,\n              children: map(catalogs, (catalog: ICatalogItem) => ({\n                id: catalog.id,\n                name: catalog.name,\n                guid: catalog.guid\n              }))\n            }))\n        )(chatbotServices?.catalogDetailsList || []);\n\n        this.selectServiceRequest(serviceRequestId);\n      });\n\n    serviceRequestId$.pipe(takeUntil(this.destroyed$)).subscribe((requestId: string) => {\n      this.selectServiceRequest(requestId);\n    });\n  }\n\n  private selectServiceRequest(serviceRequestId): void {\n    let service;\n\n    forEach(this.serviceListOptions, (item: RxSelectOptionsGroup) => {\n      if (service) {\n        return false;\n      }\n\n      service = find(item.children, {\n        id: serviceRequestId\n      });\n    });\n\n    this.service = service\n      ? [\n          {\n            id: service.id,\n            name: service.name,\n            guid: service.guid\n          }\n        ]\n      : [];\n  }\n\n  public onSelectionChange(event: RxSelectionChangeEvent): void {\n    const service: ICatalogItem = event.options[0];\n\n    this.notifyPropertyChanged('serviceRequestId', service.id);\n    this.notifyPropertyChanged('serviceRequestName', service.name);\n    this.notifyPropertyChanged('serviceRequestGuid', service.guid);\n  }\n\n  public optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n}\n","<adapt-rx-select\n  label=\"Service name\"\n  required=\"true\"\n  [options]=\"serviceListOptions\"\n  [disabled]=\"isDisabled\"\n  (onSelectionChange)=\"onSelectionChange($event)\"\n  [ngModel]=\"service\"\n  [optionFormatter]=\"optionFormatter\"\n  enableFilter=\"true\"\n>\n</adapt-rx-select>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ServiceListComponent } from './service-list.component';\nimport { AdaptRxSelectModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, AdaptRxSelectModule, FormsModule],\n  declarations: [ServiceListComponent],\n  entryComponents: [ServiceListComponent],\n  exports: [ServiceListComponent]\n})\nexport class ServiceListModule {}\n","import { Component } from '@angular/core';\nimport { ContainerComponent } from '../../../container';\nimport { ITabContainerConfig } from './tab-container.types';\n\n@Component({\n  selector: 'rx-tab-container',\n  templateUrl: './tab-container.component.html',\n  styleUrls: ['./tab-container.component.scss']\n})\nexport class RxTabContainerComponent extends ContainerComponent {\n  state: ITabContainerConfig = {\n    enableLazyLoading: false,\n    label: ''\n  };\n}\n","<rx-runtime-view-canvas-outlet *ngIf=\"!state.hidden\"></rx-runtime-view-canvas-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport {\n  BaseViewComponent,\n  IViewComponentSetProperty,\n  RuntimeViewCanvasItemComponent\n} from '@helix/platform/view/runtime';\nimport { distinctUntilChanged, pluck, skip, takeUntil, tap } from 'rxjs/operators';\nimport {\n  ITabPanelApi,\n  ITabPanelChildComponentData,\n  ITabPanelComponentData,\n  ITabPanelConfig,\n  ITabPanelState\n} from './tab-panel.types';\nimport { every, findIndex, get, isNil, isNull } from 'lodash';\nimport { RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { Observable, throwError } from 'rxjs';\n\n@Component({\n  selector: 'rx-tab-panel',\n  templateUrl: './tab-panel.component.html'\n})\nexport class RxTabPanelComponent extends BaseViewComponent implements OnInit, IViewComponentSetProperty {\n  childLayouts: ITabPanelChildComponentData[] = [];\n\n  state: ITabPanelState = {\n    activeTabIndex: null\n  };\n\n  api: ITabPanelApi = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  constructor(private runtimeCanvasItemComponent: RuntimeViewCanvasItemComponent) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config.pipe(takeUntil(this.destroyed$)).subscribe((config: ITabPanelConfig) => {\n      this.state = { ...this.state, ...config };\n      this.isHidden = Boolean(this.state.hidden);\n    });\n\n    this.childLayouts = get(\n      this.runtimeCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n      '[0].children'\n    );\n\n    this.childLayouts.forEach((childLayout) => {\n      childLayout.state = {\n        enableLazyLoading: false,\n        label: '',\n        isRendered: false,\n        hidden: 0\n      };\n\n      childLayout.config\n        .pipe(\n          tap((childLayoutConfig) => {\n            childLayout.state = { ...childLayout.state, ...childLayoutConfig };\n          }),\n          pluck('hidden'),\n          distinctUntilChanged(),\n          skip(1),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe(() => {\n          this.ensureActiveTabIsSet();\n        });\n    });\n\n    this.trySetFirstVisibleTab();\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.state.hidden = propertyValue;\n      this.notifyPropertyChanged(propertyPath, propertyValue);\n    } else if (propertyPath === 'activeTabIndex') {\n      this.setActiveTabIndex(parseInt(propertyValue, 10));\n    } else {\n      return throwError(`Tab panel: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  trackByForTabs(index: number, item: ITabPanelChildComponentData): string {\n    return item.guid;\n  }\n\n  canRenderContentForTab(tab: ITabPanelChildComponentData): boolean {\n    return !tab.state.enableLazyLoading || tab.state.isRendered;\n  }\n\n  private getAllTabsData(): ITabPanelComponentData[] {\n    let adaptTabsetIndex = 0;\n\n    return this.childLayouts.map((tab): ITabPanelComponentData => {\n      return {\n        adaptTabsetIndex: this.isHiddenTab(tab) ? null : adaptTabsetIndex++,\n        tab\n      };\n    });\n  }\n\n  isHiddenTab(tab: ITabPanelChildComponentData): boolean {\n    return Boolean(tab.state.hidden);\n  }\n\n  getActiveTabIndexForAdaptTabset() {\n    return isNull(this.state.activeTabIndex) ? 0 : this.getAllTabsData()[this.state.activeTabIndex].adaptTabsetIndex;\n  }\n\n  onActiveTabChanged(adaptTabsetIndex: number): void {\n    const activeTabIndexForAllTabs = findIndex(\n      this.getAllTabsData(),\n      (tab) => tab.adaptTabsetIndex === adaptTabsetIndex\n    );\n\n    this.activateTab(activeTabIndexForAllTabs);\n  }\n\n  private setActiveTabIndex(index: number): void {\n    const tab = this.childLayouts[index];\n\n    if (tab && !this.isHiddenTab(tab)) {\n      this.activateTab(index);\n    }\n  }\n\n  private activateTab(index: number | null): void {\n    this.state.activeTabIndex = index;\n\n    if (!isNil(index)) {\n      this.childLayouts[index].state.isRendered = true;\n    }\n\n    this.notifyPropertyChanged('activeTabIndex', index);\n  }\n\n  private ensureActiveTabIsSet(): void {\n    const allTabs = this.childLayouts;\n    const isAllTabsHidden = every(allTabs, (tab) => this.isHiddenTab(tab));\n\n    if (isAllTabsHidden) {\n      this.activateTab(null);\n    } else if (!isNull(this.state.activeTabIndex) && this.isHiddenTab(allTabs[this.state.activeTabIndex])) {\n      this.trySetFirstVisibleTab();\n    } else if (isNull(this.state.activeTabIndex)) {\n      this.trySetFirstVisibleTab();\n    }\n  }\n\n  private trySetFirstVisibleTab() {\n    const firstVisibleTab = findIndex(this.childLayouts, (tab) => !this.isHiddenTab(tab));\n\n    if (firstVisibleTab !== -1) {\n      this.activateTab(firstVisibleTab);\n    }\n  }\n}\n","<adapt-tabset\n  *ngIf=\"!isHidden\"\n  [fullHeight]=\"true\"\n  (tab-active-changed)=\"onActiveTabChanged($event.index)\"\n  [tab-active]=\"getActiveTabIndexForAdaptTabset()\"\n>\n  <ng-template ngFor let-tab [ngForOf]=\"childLayouts\" [ngForTrackBy]=\"trackByForTabs\" let-index=\"index\">\n    <adapt-tab-panel [adapt-tab-title]=\"tab.state.label\" *ngIf=\"!isHiddenTab(tab)\">\n      <rx-runtime-view-canvas-item *ngIf=\"canRenderContentForTab(tab)\" [layout]=\"tab\"> </rx-runtime-view-canvas-item>\n    </adapt-tab-panel>\n\n    <!-- Hidden tab should have instance for using API  -->\n    <rx-runtime-view-canvas-item *ngIf=\"isHiddenTab(tab) && canRenderContentForTab(tab)\" [layout]=\"tab\">\n    </rx-runtime-view-canvas-item>\n  </ng-template>\n</adapt-tabset>\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxTabPanelComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  constructor(\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  adaptDefinition(tabPanelViewComponentDefinition: IContainerViewComponentDefinition) {\n    this.viewDefinitionParserService\n      .getComponents(tabPanelViewComponentDefinition)\n      .filter((componentPair) => componentPair.componentDefinition.type === RxViewComponentType.TabPanel)\n      .map((componentPair) => componentPair.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.layout) {\n          let layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n\n          if (layout && layout.componentDefinitionId) {\n            const columns = layout.columns.map((column) => {\n              return {\n                children: column.children.map((child) => child.columns[0].children[0].componentDefinitionId)\n              };\n            });\n\n            layout = {\n              outlets: [\n                {\n                  name: 'DEFAULT',\n                  columns: columns\n                }\n              ]\n            };\n\n            componentDefinition.layout = JSON.stringify(layout);\n          }\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ContainerComponentDefinitionAdapterService } from '../../../container/runtime/container-component-definition-adapter.service';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RxViewComponentType, RxViewDefinitionParserService } from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxTabContainerComponentDefinitionAdapterService extends ContainerComponentDefinitionAdapterService {\n  constructor(viewDefinitionParserService: RxViewDefinitionParserService, rxJsonParserService: RxJsonParserService) {\n    super(viewDefinitionParserService, rxJsonParserService);\n\n    this.componentDefinitionType = RxViewComponentType.TabContainer;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { RxTabPanelComponentDefinitionAdapterService } from './tab-panel-component-definition-adapter.service';\nimport { RxTabPanelComponent } from './tab-panel.component';\nimport { RxTabContainerComponent } from './tab-container/tab-container.component';\nimport { AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport { RxTabContainerComponentDefinitionAdapterService } from './tab-container/tab-container-component-definition-adapter.service';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  declarations: [RxTabPanelComponent, RxTabContainerComponent],\n  exports: [RxTabPanelComponent, RxTabContainerComponent],\n  entryComponents: [RxTabPanelComponent, RxTabContainerComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule, AdaptTabsModule.forRoot()],\n  providers: [RxTabPanelComponentDefinitionAdapterService, RxTabContainerComponentDefinitionAdapterService]\n})\nexport class RxTabPanelModule {\n  constructor(\n    private rxTabPanelComponentDefinitionAdapterService: RxTabPanelComponentDefinitionAdapterService,\n    private rxTabContainerComponentDefinitionAdapterService: RxTabContainerComponentDefinitionAdapterService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.TabPanel,\n      rxTabPanelComponentDefinitionAdapterService\n    );\n\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.TabContainer,\n      rxTabContainerComponentDefinitionAdapterService\n    );\n  }\n}\n","import { map, shareReplay, take, takeUntil } from 'rxjs/operators';\nimport { isEmpty } from 'lodash';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDesignerComponentModel,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { ITabPanelProperties } from './tab-panel-design.types';\nimport { ITabContainerProperties } from './tab-container-design/tab-container-design.types';\nimport { combineLatest, ReplaySubject } from 'rxjs';\n\nexport class TabPanelDesignModel\n  extends ViewDesignerComponentModel<ITabPanelProperties>\n  implements IViewDesignerComponentModel<ITabPanelProperties>\n{\n  tabContainerGuids$ = this.sandbox.getChildComponentGuids().pipe(shareReplay(1));\n\n  tabContainerComponents$ = this.sandbox\n    .getChildComponents<ITabContainerProperties>((component) => component.type === RxViewComponentType.TabContainer)\n    .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n  selectedTabGuid$ = new ReplaySubject<string>(null);\n\n  static getInitialProperties(initialProperties?: ITabPanelProperties): ITabPanelProperties {\n    return {\n      name: null,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    this.sandbox.componentProperties$.subscribe((componentProperties) => this.validate(componentProperties));\n\n    this.tabContainerGuids$\n      .pipe(\n        map((guids) => !isEmpty(guids)),\n        take(1)\n      )\n      .subscribe((hasChildComponents) => {\n        if (!hasChildComponents) {\n          this.sandbox.setChildren([\n            {\n              type: RxViewComponentType.TabContainer,\n              data: {\n                label: 'Tab 1'\n              }\n            },\n            {\n              type: RxViewComponentType.TabContainer,\n              data: {\n                label: 'Tab 2'\n              }\n            }\n          ]);\n        }\n      });\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        },\n        {\n          label: 'Active Tab Index',\n          expression: this.getExpressionForProperty('activeTabIndex')\n        }\n      ]);\n    });\n  }\n\n  addTab(): void {\n    this.sandbox.addComponent({\n      type: RxViewComponentType.TabContainer,\n\n      propertiesByName: {\n        label: 'New tab'\n      }\n    });\n  }\n\n  removeTab(guid: string): void {\n    this.sandbox.removeComponents([guid]);\n\n    combineLatest([this.selectedTabGuid$, this.tabContainerGuids$])\n      .pipe(take(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([selectedTabGuid, tabContainerGuids]) => {\n        if (guid === selectedTabGuid) {\n          this.selectTab(tabContainerGuids[0]);\n        }\n      });\n  }\n\n  selectTab(guid: string, skipSelectComponent: boolean = false): void {\n    this.selectedTabGuid$.next(guid);\n\n    if (!skipSelectComponent) {\n      setTimeout(() => {\n        this.sandbox.selectComponent(guid);\n      });\n    }\n  }\n\n  dropPredicate(): boolean {\n    return false;\n  }\n\n  moveComponent(guid: string, insertIndex: number): void {\n    this.sandbox.moveComponent(guid, insertIndex, this.sandbox.guid);\n  }\n\n  private validate(properties: ITabPanelProperties): void {\n    this.sandbox.setValidationIssues(validateStandardProps(properties));\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Tab panel')\n              }\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { TabEvent } from '@bmc-ux/adapt-angular';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { findIndex, first } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { TabPanelDesignModel } from './tab-panel-design.model';\n\n@Component({\n  selector: 'rx-tab-panel-design',\n  templateUrl: './tab-panel-design.component.html',\n  styleUrls: ['./tab-panel-design.component.scss']\n})\nexport class TabPanelDesignComponent implements OnInit {\n  @Input()\n  model: TabPanelDesignModel;\n\n  @Input()\n  isReadOnly: boolean;\n\n  @ViewChild('adaptTabset', { static: true })\n  adaptTabset;\n\n  components = [];\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private rxUtilityModalsService: RxUtilityModalsService) {}\n\n  ngOnInit(): void {\n    this.model.tabContainerComponents$.pipe(takeUntil(this.destroyed$)).subscribe((components) => {\n      this.components = components;\n\n      this.adaptTabset.checkActiveIndex();\n    });\n\n    this.model.tabContainerComponents$.pipe(take(1)).subscribe((components) => {\n      this.model.selectTab(first(components).guid, true);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  trackByForTabs<T extends { guid: string }>(index: number, item: T): string {\n    return item.guid;\n  }\n\n  onTabClicked(event: TabEvent): void {\n    this.activeTabChanged(event);\n  }\n\n  onTabAdded(e: Event) {\n    e.stopPropagation();\n\n    this.model.addTab();\n\n    setTimeout(() => {\n      this.adaptTabset.setActiveTab(this.components.length - 1, true, new MouseEvent('click'));\n    });\n  }\n\n  activeTabChanged({ index, event }) {\n    event.stopPropagation();\n\n    this.model.tabContainerGuids$.pipe(take(1)).subscribe((guids) => {\n      this.model.selectTab(guids[index]);\n    });\n  }\n\n  onTabDropped(tabs) {\n    for (let i = 0; i < this.components.length; i++) {\n      if (this.components[i].guid !== tabs[i].id) {\n        if (this.components[i].guid === tabs[i + 1].id) {\n          this.model.moveComponent(tabs[i].id, i);\n          break;\n        } else {\n          this.model.moveComponent(this.components[i].guid, findIndex(tabs, { id: this.components[i].guid }));\n          break;\n        }\n      }\n    }\n  }\n\n  removeTab({ index }: TabEvent): void {\n    this.rxUtilityModalsService\n      .confirm('Are you sure you want to delete this view component?')\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          this.model.tabContainerGuids$.pipe(take(1)).subscribe((guids) => {\n            this.model.removeTab(guids[index]);\n          });\n        }\n      });\n  }\n}\n","<adapt-tabset\n  #adaptTabset\n  (tab-index-closed)=\"removeTab($event)\"\n  (tab-active-changed)=\"activeTabChanged($event)\"\n  (tabClicked)=\"onTabClicked($event)\"\n  (tabDropped)=\"onTabDropped($event)\"\n  (add-tab-clicked)=\"onTabAdded($event)\"\n  [allow-tabs-adding]=\"!isReadOnly\"\n  [enableDnD]=\"true\"\n>\n  <adapt-tab-panel\n    *ngFor=\"\n      let component of components;\n      let index = index;\n      trackBy: trackByForTabs\n    \"\n    [adapt-tab-title]=\"component.data.label\"\n    [icon-close]=\"!isReadOnly && components.length && components.length > 1\"\n    [id]=\"component.guid\"\n  >\n  </adapt-tab-panel>\n</adapt-tabset>\n\n<rx-canvas-outlet [dropPredicate]=\"model.dropPredicate\"></rx-canvas-outlet>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ContainerDesignComponent } from '../../../container/design/container-design.component';\nimport { TabPanelDesignComponent } from '../tab-panel-design.component';\nimport { TabContainerDesignModel } from './tab-container-design.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-tab-container-design',\n  templateUrl: './tab-container-design.component.html'\n})\nexport class TabContainerDesignComponent extends ContainerDesignComponent implements OnInit {\n  @Input()\n  model: any;\n\n  constructor(private tabPanelDesignComponent: TabPanelDesignComponent) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.tabPanelDesignComponent.model.selectedTabGuid$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((this.model as TabContainerDesignModel).selectedTabGuid$);\n  }\n}\n","<rx-canvas-outlet [skipParentPredicate]=\"true\" [containerComponent]=\"containerCanvasItemComponent\"></rx-canvas-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TabPanelDesignComponent } from './tab-panel-design.component';\nimport { ViewDesignerCanvasModule } from '@helix/platform/view/designer';\nimport { AdaptButtonModule, AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport { TabContainerDesignComponent } from './tab-container-design/tab-container-design.component';\n\n@NgModule({\n  declarations: [TabPanelDesignComponent, TabContainerDesignComponent],\n  entryComponents: [TabPanelDesignComponent, TabContainerDesignComponent],\n  imports: [CommonModule, AdaptButtonModule, AdaptTabsModule, ViewDesignerCanvasModule]\n})\nexport class TabPanelDesignModule {}\n","import {\n  IViewDesignerComponentModel,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService\n} from '@helix/platform/view/api';\nimport { ViewDesignerComponentModel } from '@helix/platform/view/designer';\nimport { filter, map } from 'rxjs/operators';\n\nexport class PageDesignModel extends ViewDesignerComponentModel implements IViewDesignerComponentModel {\n  private rxViewComponentRegistryService: RxViewComponentRegistryService = this.injector.get<\n    RxViewComponentRegistryService\n  >(RxViewComponentRegistryService);\n\n  componentName$ = this.sandbox.getChildComponents().pipe(\n    filter((childComponents) => childComponents.length > 0),\n    map((childComponents) => {\n      const pageComponentType = childComponents[0].type;\n      const descriptor = this.rxViewComponentRegistryService.get(pageComponentType);\n\n      return descriptor?.name || RX_VIEW_DEFINITION.unknownPageComponent.name;\n    })\n  );\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { PageDesignModel } from './page-design.model';\n\n@Component({\n  selector: 'rx-page-design',\n  templateUrl: './page-design.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PageDesignComponent {\n  @Input()\n  model: PageDesignModel;\n}\n","<adapt-empty-state type=\"objects\" [label]=\"model.componentName$ | async\"></adapt-empty-state>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageDesignComponent } from './page-design.component';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [PageDesignComponent],\n  entryComponents: [PageDesignComponent]\n})\nexport class PageDesignModule {}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition, IViewDefinition, RX_VIEW_DEFINITION } from '@helix/platform/view/api';\n\n@Injectable()\nexport class PageComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  adaptDefinition(componentDefinition: IContainerViewComponentDefinition): void {\n    componentDefinition.layout = JSON.stringify({\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [\n            {\n              children: componentDefinition.componentDefinitions[0].guid\n            }\n          ]\n        }\n      ]\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RuntimeViewCanvasModule } from '@helix/platform/view/runtime';\nimport { PageComponentDefinitionAdapterService } from './page-component-definition-adapter.service';\nimport { PageComponent } from './page.component';\nimport { RxViewComponentType } from '@helix/platform/view/api';\n\n@NgModule({\n  imports: [CommonModule, RuntimeViewCanvasModule],\n  providers: [PageComponentDefinitionAdapterService],\n  declarations: [PageComponent],\n  exports: [PageComponent],\n  entryComponents: [PageComponent]\n})\nexport class PageModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private pageComponentDefinitionAdapterService: PageComponentDefinitionAdapterService\n  ) {\n    this.rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.Page,\n      this.pageComponentDefinitionAdapterService\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'rx-image-design',\n  templateUrl: './image-design.component.html',\n  styleUrls: ['./image-design.component.scss']\n})\nexport class ImageDesignComponent {}\n","<div class=\"placeholder d-flex justify-content-center align-items-center\">\n  <span class=\"component-icon d-icon-attachment_image_adapt\"></span>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormControlsModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\nimport { ImageDesignComponent } from './image-design.component';\n\n@NgModule({\n  imports: [CommonModule, RxDefinitionPickerModule, FormControlsModule],\n  declarations: [ImageDesignComponent],\n  entryComponents: [ImageDesignComponent]\n})\nexport class ImageDesignModule {}\n","export enum ImageAlignment {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right'\n}\n\nexport const RX_IMAGE_ALIGNMENT_OPTIONS = [\n  {\n    id: ImageAlignment.Left,\n    name: 'Left'\n  },\n  {\n    id: ImageAlignment.Center,\n    name: 'Center'\n  },\n  {\n    id: ImageAlignment.Right,\n    name: 'Right'\n  }\n];\n\nexport const RX_IMAGE_ALIGNMENT_STYLES = {\n  [ImageAlignment.Left]: 'justify-content-start',\n  [ImageAlignment.Center]: 'justify-content-center',\n  [ImageAlignment.Right]: 'justify-content-end'\n};\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { RxRecordInstanceService, RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEqual } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { distinctUntilChanged, filter, map, shareReplay, takeUntil, tap } from 'rxjs/operators';\nimport { ImageAlignment, RX_IMAGE_ALIGNMENT_STYLES } from '../image.types';\nimport { IImageConfig } from './image.types';\n\n@Component({\n  selector: 'rx-image',\n  templateUrl: './image.component.html',\n  styleUrls: ['./image.component.scss']\n})\nexport class ImageComponent extends BaseViewComponent implements OnInit, OnDestroy {\n  @Input()\n  config: Observable<IImageConfig>;\n\n  state = {\n    recordDefinitionName: '',\n    recordInstanceId: '',\n    fieldId: '',\n    maxWidth: '',\n    imageUrl: null,\n    isImageBroken: false,\n    alignmentStyle: '',\n    altText: ''\n  };\n\n  api = {\n    setProperty: this.setProperty.bind(this)\n  };\n\n  fileName = '';\n\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxLogService: RxLogService,\n    private httpClient: HttpClient,\n    private domSanitizer: DomSanitizer,\n    private translateService: TranslateService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    const config$ = this.config.pipe(\n      distinctUntilChanged(isEqual),\n      tap((config) => {\n        const newState = {\n          ...config\n        };\n\n        this.isHidden = newState.hidden;\n\n        if (!this.state.alignmentStyle && newState.alignment) {\n          newState.alignmentStyle = this.getAlignmentStyle(newState.alignment);\n        }\n\n        delete newState.alignment;\n\n        this.state = { ...this.state, ...newState };\n      }),\n      shareReplay(1)\n    );\n\n    config$\n      .pipe(\n        map(() => (this.state.recordInstanceId ? this.state.recordInstanceId : null)),\n        filter((recordInstanceId) => Boolean(recordInstanceId)),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((recordInstanceId) => {\n        const imageUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(\n          this.state.recordDefinitionName,\n          Number(this.state.fieldId),\n          recordInstanceId\n        );\n\n        this.httpClient.get(imageUrl, { responseType: 'blob', observe: 'response' }).subscribe({\n          next: (response) => {\n            const fileStream = response.body;\n\n            this.fileName = this.rxRecordInstanceUtilsService.tryParseContentDisposition(\n              response.headers.get('content-disposition')\n            );\n\n            if (fileStream && fileStream.type.split('/')[0] === 'image') {\n              const fileReader = new FileReader();\n\n              fileReader.onloadend = () => {\n                this.state.imageUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(fileReader.result as string);\n                this.state.isImageBroken = false;\n                this.state.altText = this.fileName;\n              };\n\n              fileReader.onerror = this.onImageLoadFailed.bind(this);\n\n              fileReader.readAsDataURL(fileStream);\n            } else {\n              this.rxLogService.warning(`rx-image: attachment is not a valid image.`);\n              this.onImageLoadFailed();\n            }\n          },\n          error: (err: HttpErrorResponse) => {\n            this.state.imageUrl = null;\n            this.state.isImageBroken = false;\n            this.state.altText = '';\n          }\n        });\n      });\n  }\n\n  private onImageLoadFailed(): void {\n    this.state.imageUrl = null;\n    this.state.isImageBroken = true;\n\n    this.state.altText = this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.image.invalid-image.label',\n      { imageName: this.fileName }\n    );\n  }\n\n  private getAlignmentStyle(alignment: ImageAlignment): string {\n    return RX_IMAGE_ALIGNMENT_STYLES[alignment];\n  }\n\n  private setProperty(propertyPath: string, value: any): void | Observable<never> {\n    if (propertyPath === 'hidden') {\n      this.isHidden = value;\n\n      this.notifyPropertyChanged(propertyPath, this.isHidden);\n    } else {\n      return throwError(`Image: property ${propertyPath} is not settable.`);\n    }\n  }\n}\n","<div *ngIf=\"!isHidden\" class=\"d-flex {{ state.alignmentStyle }} image-container\">\n  <img\n    class=\"image\"\n    *ngIf=\"state.imageUrl\"\n    [src]=\"state.imageUrl\"\n    [attr.alt]=\"state.altText\"\n    [style.max-width]=\"state.maxWidth\"\n  />\n\n  <span\n    *ngIf=\"state.isImageBroken\"\n    role=\"img\"\n    [attr.aria-label]=\"state.altText\"\n    class=\"broken-image d-icon-broken_image\"\n  ></span>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ImageComponent } from './image.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ImageComponent],\n  entryComponents: [ImageComponent],\n  exports: [ImageComponent]\n})\nexport class ImageModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_DISABLED_PROP_DESC,\n  RX_STANDARD_PROPS_DESC,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ActionButtonDesignModel } from './design/action-button-design.model';\nimport { ActionButtonDesignModule } from './design/action-button-design.module';\nimport { ActionButtonDesignComponent } from './design/action-button-design.component';\nimport { ActionButtonModule } from './runtime/action-button.module';\nimport { ActionButtonComponent } from './runtime/action-button.component';\n\n@NgModule({\n  imports: [ActionButtonDesignModule, ActionButtonModule]\n})\nexport class ActionButtonRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ActionButton,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonComponent),\n      properties: [\n        {\n          name: 'recordDefinitionName'\n        },\n        {\n          name: 'fieldId'\n        },\n        {\n          name: 'recordInstance',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'label',\n          localizable: true\n        },\n        RX_DISABLED_PROP_DESC,\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      name: 'Action button',\n      isContainerComponent: true,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'action_button_cursor',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ActionButtonDesignComponent),\n      designComponentModel: ActionButtonDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ButtonBarComponent } from './runtime/button-bar.component';\nimport { ButtonBarModule } from './runtime/button-bar.module';\nimport { ButtonBarDesignComponent } from './design/button-bar-design.component';\nimport { ButtonBarDesignModel } from './design/button-bar-design.model';\nimport { ButtonBarDesignModule } from './design/button-bar-design.module';\n\n@NgModule({\n  imports: [ButtonBarModule, ButtonBarDesignModule]\n})\nexport class ButtonBarRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ButtonBar,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarComponent),\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n      properties: RX_STANDARD_PROPS_DESC,\n      name: 'Button bar',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'button_panel_o',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ButtonBarDesignComponent),\n      designComponentModel: ButtonBarDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ContainerModule } from './runtime/container.module';\nimport { ContainerComponent } from './runtime/container.component';\nimport { ContainerDesignModel } from './design/container-design.model';\nimport { ContainerDesignModule } from './design/container-design.module';\nimport { ContainerDesignComponent } from './design/container-design.component';\n\n@NgModule({\n  imports: [ContainerModule, ContainerDesignModule]\n})\nexport class ContainerRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Container,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerComponent),\n      properties: RX_STANDARD_PROPS_DESC,\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n      name: 'Container',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'layout',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ContainerDesignComponent),\n      designComponentModel: ContainerDesignModel,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  StepperWithUnitsFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { compact, flatten } from 'lodash';\nimport { map, skip, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { ImageAlignment, RX_IMAGE_ALIGNMENT_OPTIONS } from '../image.types';\nimport { IImageProperties } from './image-design.types';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\n\nexport class ImageDesignModel\n  extends ViewDesignerComponentModel<IImageProperties>\n  implements IViewDesignerComponentModel<IImageProperties>\n{\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n\n  private attachmentFields$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName ? this.getAttachmentFieldsFromRecordDefinition(recordDefinitionName) : of([])\n    )\n  );\n\n  private rxModalService = this.injector.get(RxModalService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  private maxWidthUnits = [\n    {\n      name: 'pixels',\n      id: 'px'\n    },\n    {\n      name: '%',\n      id: '%'\n    }\n  ];\n\n  static getInitialProperties(initialProperties?: IImageProperties): IImageProperties {\n    return {\n      name: null,\n      recordDefinitionName: null,\n      recordInstanceId: null,\n      fieldId: null,\n      maxWidth: null,\n      alignment: ImageAlignment.Left,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties: IImageProperties) => {\n      this.sandbox.updateInspectorConfig(this.getInspector(componentProperties));\n    });\n\n    this.recordDefinitionName$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, properties]) => {\n        const newProperties = {\n          ...properties,\n          recordInstanceId: null,\n          fieldId: null\n        };\n\n        this.sandbox.updateComponentProperties(newProperties);\n        this.sandbox.updateInspectorConfig(this.getInspector(newProperties));\n      });\n\n    this.attachmentFields$\n      .pipe(withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([attachmentFields, properties]) => {\n        this.sandbox.updateInspectorConfig(this.getInspector(properties, attachmentFields));\n      });\n\n    combineLatest([\n      this.validateEmptyProp('recordDefinitionName', 'Record definition name cannot be blank.'),\n      this.validateEmptyProp('recordInstanceId', 'Record instance ID cannot be blank.'),\n      this.validateEmptyProp('fieldId', 'Field ID cannot be blank.'),\n      this.sandbox.getComponentPropertyValue('maxWidth').pipe(map((value) => this.validateMaxWidth(value))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getAttachmentFieldsFromRecordDefinition(recordDefinitionName: string): Observable<RxSelectOption[]> {\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n      map((recordDefinition: IRecordDefinition) =>\n        recordDefinition.fieldDefinitions\n          .filter((definition) => definition.resourceType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType)\n          .map(({ id, name }) => ({\n            id: id.toString(),\n            name\n          }))\n      )\n    );\n  }\n\n  private getInspector(props: IImageProperties, attachmentFields: RxSelectOption[] = []) {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Image view component.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.RegularRecord,\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue) && props.recordInstanceId && props.fieldId) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'Record Instance ID and Field ID will be cleared. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                },\n                required: true\n              } as IDefinitionPickerComponentOptions\n            },\n            {\n              name: 'fieldId',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Field name',\n                options: attachmentFields,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'recordInstanceId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Record ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n            {\n              name: 'alignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Horizontal alignment',\n                options: RX_IMAGE_ALIGNMENT_OPTIONS\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'maxWidth',\n              component: StepperWithUnitsFormControlComponent,\n              options: {\n                label: 'Maximum width',\n                defaultUnit: 'px',\n                units: this.maxWidthUnits,\n                stepperOptionByUnits: {\n                  px: {\n                    minValue: 0\n                  },\n                  '%': {\n                    minValue: 0,\n                    maxValue: 100,\n                    defaultValue: 100\n                  }\n                }\n              } as IStepperWithUnitsFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  private validateEmptyProp<K extends keyof IImageProperties>(\n    propertyName: K,\n    description: string\n  ): Observable<IViewComponentDesignValidationIssue> {\n    return this.sandbox\n      .getComponentPropertyValue(propertyName)\n      .pipe(map((value) => (value ? null : this.sandbox.createError(description, propertyName))));\n  }\n\n  private validateMaxWidth(maxWidth: string): IViewComponentDesignValidationIssue {\n    if (maxWidth) {\n      const matches = maxWidth.match(/^([+-]?\\d+(?:\\.\\d+)?)(.*)/);\n\n      if (matches) {\n        const numberValue = Number(matches[1]);\n        const unitValue = matches[2];\n\n        if (unitValue === '%' && numberValue > 100) {\n          return this.sandbox.createError('Maximum width cannot be greater than 100%.');\n        } else if (numberValue < 0) {\n          return this.sandbox.createError('Maximum width should be a positive number.');\n        }\n      }\n    }\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_STANDARD_PROPS_DESC, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { ImageDesignComponent } from './design/image-design.component';\nimport { ImageDesignModule } from './design/image-design.module';\nimport { ImageDesignModel } from './design/image-design.model';\nimport { ImageComponent } from './runtime/image.component';\nimport { ImageModule } from './runtime/image.module';\n\n@NgModule({\n  imports: [ImageModule, ImageDesignModule]\n})\nexport class ImageRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Image,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageComponent),\n      name: 'Image',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      properties: [\n        {\n          name: 'recordInstanceId',\n          enableExpressionEvaluation: true\n        },\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ImageDesignComponent),\n      designComponentModel: ImageDesignModel,\n      icon: 'attachment_image_adapt',\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { PageModule } from './runtime/page.module';\nimport { PageComponent } from './runtime/page.component';\nimport { PageDesignModule } from './design/page-design.module';\nimport { PageDesignComponent } from './design/page-design.component';\nimport { PageDesignModel } from './design/page-design.model';\n\n@NgModule({\n  imports: [PageModule, PageDesignModule]\n})\nexport class PageRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Page,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(PageComponent),\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Page',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(PageDesignComponent),\n      designComponentModel: PageDesignModel,\n      hidden: true,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RecordEditorModule } from './runtime/record-editor.module';\nimport { RecordEditorComponent } from './runtime/record-editor.component';\nimport { RecordEditorDesignModule } from './design/record-editor-design.module';\nimport { RecordEditorDesignComponent } from './design/record-editor-design.component';\nimport { RecordEditorDesignModel } from './design/record-editor-design.model';\n\n@NgModule({\n  imports: [RecordEditorModule, RecordEditorDesignModule]\n})\nexport class RecordEditorRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RecordEditor,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorComponent),\n      properties: [\n        {\n          name: 'recordInstanceId',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'allowEdit',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'label',\n          localizable: true\n        },\n        RX_AVAILABLE_ON_DEVICES_PROP_DESC\n      ],\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Record editor',\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'file_text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordEditorDesignComponent),\n      designComponentModel: RecordEditorDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewComponentExpressionConfigurator } from '@helix/platform/view/designer';\nimport { ExpressionOperatorGroup, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { forkJoin, of } from 'rxjs';\nimport { concatMap, map, switchMap } from 'rxjs/operators';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { map as _map } from 'lodash';\nimport { RX_RECORD_GRID_DESIGN } from './record-grid-design.constant';\n\nexport class RecordGridExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxRecordGridUtilsService = this.injector.get(RxRecordGridUtilsService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  constructor(injector: Injector, protected componentGuid: string, protected componentModel: RecordGridDesignModel) {\n    super(injector, componentGuid, componentModel);\n\n    const filterExpressionBranch$ = this.getComponentCommonDataDictionary().pipe(\n      switchMap((componentCommonBranch) =>\n        componentCommonBranch\n          ? componentModel.recordDefinition$.pipe(\n              concatMap((recordDefinition) =>\n                this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(\n                  concatMap((associationDescriptors) =>\n                    associationDescriptors.length\n                      ? forkJoin(\n                          associationDescriptors.map((associationDescriptor) =>\n                            this.rxRecordDefinitionCacheService\n                              .getRecordDefinition(associationDescriptor.recordDefinitionName)\n                              .pipe(\n                                map((associationRecordDefinition) => ({\n                                  ...associationDescriptor,\n                                  recordDefinition: associationRecordDefinition\n                                }))\n                              )\n                          )\n                        )\n                      : of([])\n                  ),\n                  map(\n                    (\n                      associationDescriptors: Array<\n                        IAssociationDescriptor & {\n                          recordDefinition: IRecordDefinition;\n                        }\n                      >\n                    ) =>\n                      recordDefinition\n                        ? {\n                            label: 'Filter by',\n                            children: [\n                              {\n                                label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                                icon: 'd-icon-file_o_gear',\n                                children: recordDefinition.fieldDefinitions.map((fieldDefinition) => {\n                                  const selectionList =\n                                    fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                      ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n                                          label: optionName,\n                                          expression: `\\${view.components.${componentGuid}.recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id}`\n                                        }))\n                                      : undefined;\n\n                                  return {\n                                    label: fieldDefinition.name,\n                                    icon: 'd-icon-file_o_gear',\n                                    expression: `'${fieldDefinition.id}'`,\n                                    children:\n                                      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                        ? [\n                                            {\n                                              label: 'Options',\n                                              children: selectionList\n                                            }\n                                          ]\n                                        : null,\n                                    autocompleteOptions: selectionList\n                                  };\n                                })\n                              },\n                              ...(associationDescriptors\n                                ? associationDescriptors.map((descriptor) => ({\n                                    label: this.rxDefinitionNameService.getDisplayName(\n                                      descriptor.associationDefinition.name\n                                    ),\n                                    icon: 'd-icon-file_o_gear',\n                                    children: descriptor.recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n                                      label: fieldDefinition.name,\n                                      icon: 'd-icon-file_o_gear',\n                                      expression: `'\\${recordContext._associations.${descriptor.associationDefinition.guid}.${descriptor.nodeSide}[0].${fieldDefinition.id}}'`\n                                    }))\n                                  }))\n                                : [])\n                            ]\n                          }\n                        : []\n                  )\n                )\n              ),\n              map((filterByBranch) => ({\n                ...componentCommonBranch,\n                children: [filterByBranch, ...componentCommonBranch.children]\n              }))\n            )\n          : of(null)\n      )\n    );\n\n    this.configureForProperty({\n      propertyPath: 'filterExpression',\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.AllServer),\n      dataDictionary$: this.getCommonDataDictionary(filterExpressionBranch$).pipe(\n        map((dataDictionary) => [\n          RX_RECORD_GRID_DESIGN.keywords,\n          ...(dataDictionary.filter(\n            (dataDictionaryBranch) =>\n              dataDictionaryBranch.label !== 'General' && dataDictionaryBranch.label !== 'Functions'\n          ) || [])\n        ])\n      )\n    });\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  ViewComponentPropertyType,\n  RxRecordQueryExpressionEvaluatorService\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RecordGridModule } from './runtime/record-grid.module';\nimport { RecordGridComponent } from './runtime/record-grid.component';\nimport { RecordGridDesignModule } from './design/record-grid-design.module';\nimport { RecordGridDesignModel } from './design/record-grid-design.model';\nimport { RecordGridDesignComponent } from './design/record-grid-design.component';\nimport { RxRecordGridQueryExpressionEvaluatorService } from './runtime/services/record-grid-query-expression-evaluator.service';\nimport { RX_RECORD_GRID } from './record-grid.constant';\nimport { RecordGridExpressionConfigurator } from './design/record-grid-expression-configurator.class';\n\n@NgModule({\n  imports: [RecordGridModule, RecordGridDesignModule]\n})\nexport class RecordGridRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxRecordGridQueryExpressionEvaluatorService: RxRecordGridQueryExpressionEvaluatorService,\n    private rxRecordQueryExpressionEvaluatorService: RxRecordQueryExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RX_RECORD_GRID.type,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridComponent),\n        properties: [\n          {\n            name: 'recordDefinitionName',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'enableRowSelection',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'enableFiltering',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'getDataForHiddenColumns',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'requiredFilters',\n            type: ViewComponentPropertyType.Number,\n            designType: ViewComponentPropertyType.Number,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'showDataForAllLocales',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'expandable',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'bordered',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'striped',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'defaultFilterPreset',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterExpression',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService\n          },\n          {\n            name: 'selectedRows',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'firstSelectedRow',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'clickableRow',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'selectedRowCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'totalRowCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'isUserAllowedToDeleteRecords',\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'associationDefinitionName',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'associatedRecordNodeSide',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'associatedRecordId',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'associatedRoleName',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'enableFilterPresets',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'queryExpression',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'lastRefreshTime',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'viewPresetSelector',\n            enableExpressionEvaluation: true\n          },\n          RX_AVAILABLE_ON_DEVICES_PROP_DESC\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          },\n          {\n            name: RX_RECORD_GRID.rowActionsOutletName\n          }\n        ],\n\n        name: 'Record grid',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'table',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RecordGridDesignComponent),\n        designComponentModel: RecordGridDesignModel,\n        expressionConfigurator: RecordGridExpressionConfigurator,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RX_RECORD_GRID.components.column,\n        configPropertyName: 'columns',\n        properties: [\n          {\n            name: 'title',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'visible',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'sortable',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterable',\n            type: ViewComponentPropertyType.String,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'clickable',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true\n          },\n          {\n            name: 'index',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'alignment',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'cellDisplayProperties',\n            designType: ViewComponentPropertyType.Array,\n            type: ViewComponentPropertyType.Array\n          },\n          {\n            name: 'wrapText',\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'typeaheadKeystrokeCount',\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'additionalQueryCriteria',\n            type: ViewComponentPropertyType.String,\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordQueryExpressionEvaluatorService\n          }\n        ],\n\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.filter,\n        configPropertyName: 'recordGridFilters',\n        properties: [\n          {\n            name: 'value',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: '$DISPLAYVALUE$',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'label',\n            localizable: true\n          }\n        ],\n        isDataComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.filterPreset,\n        configPropertyName: 'predefinedFilterPresets',\n        properties: [\n          {\n            name: 'title',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filterExpression',\n            enableExpressionEvaluation: true,\n            evaluatorService: this.rxRecordGridQueryExpressionEvaluatorService\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.viewPreset,\n        configPropertyName: 'viewPresets',\n        properties: [\n          {\n            name: 'viewPresetGuid',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'filters',\n            type: ViewComponentPropertyType.String\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      },\n      {\n        type: RX_RECORD_GRID.components.columnViewPreset,\n        configPropertyName: 'columnViewPresets',\n        properties: [\n          {\n            name: 'fieldId',\n            type: ViewComponentPropertyType.String\n          },\n          {\n            name: 'index',\n            designType: ViewComponentPropertyType.Number,\n            type: ViewComponentPropertyType.Number\n          },\n          {\n            name: 'visible',\n            designType: ViewComponentPropertyType.Boolean,\n            type: ViewComponentPropertyType.Boolean\n          },\n          {\n            name: 'sortable',\n            designType: ViewComponentPropertyType.Object,\n            type: ViewComponentPropertyType.Object\n          }\n        ],\n        isDataComponent: true,\n        isContainerComponent: true\n      }\n    );\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_STANDARD_PROPS_DESC, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RichTextModule } from './runtime/rich-text.module';\nimport { RichTextComponent } from './runtime/rich-text.component';\nimport { RxRichTextExpressionEvaluatorService } from './runtime/rich-text-expression-evaluator.service';\nimport { RichTextDesignModule } from './design/rich-text-design.module';\nimport { RichTextDesignComponent } from './design/rich-text-design.component';\nimport { RichTextDesignModel } from './design/rich-text-design.model';\nimport { RichTextDefinitionAdapterService } from './rich-text-definition-adapter.service';\n\n@NgModule({\n  imports: [RichTextModule, RichTextDesignModule],\n  providers: [RichTextDefinitionAdapterService]\n})\nexport class RichTextRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxRichTextExpressionEvaluatorService: RxRichTextExpressionEvaluatorService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.RichText,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextComponent),\n      properties: [\n        {\n          name: 'html',\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxRichTextExpressionEvaluatorService,\n          localizable: true\n        },\n        ...RX_STANDARD_PROPS_DESC\n      ],\n      name: 'Rich text',\n      isContainerComponent: true,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n      icon: 'text',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(RichTextDesignComponent),\n      designComponentModel: RichTextDesignModel,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","import { Injector } from '@angular/core';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ISelectFormControlOptions,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { compact, flatten, times, values } from 'lodash';\nimport { BehaviorSubject, combineLatest, Observable, Subject } from 'rxjs';\nimport { map, skip, take, takeUntil } from 'rxjs/operators';\nimport { ITabContainerDesignProperties, ITabContainerProperties } from './tab-container-design.types';\nimport { RX_CONTAINER } from '../../../container/container.constant';\nimport { ContainerRowWrap } from '../../../container/container.types';\nimport { RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_STANDARD_PROPS_DEFAULT_VALUES } from '@helix/platform/view/api';\n\nexport class TabContainerDesignModel extends ViewDesignerComponentModel {\n  componentProperties$: Observable<ITabContainerProperties> = this.sandbox.componentProperties$;\n\n  hiddenOnCanvas$ = new BehaviorSubject<boolean>(false);\n  selectedTabGuid$ = new Subject<string>();\n\n  static getInitialProperties(initialProperties?: ITabContainerProperties): ITabContainerDesignProperties {\n    return {\n      columnCount: '1',\n      enableLazyLoading: false,\n      label: '',\n      rowWrap: ContainerRowWrap.Sm,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, protected sandbox: IViewComponentDesignSandbox<ITabContainerProperties>) {\n    super(injector, sandbox);\n\n    this.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n    });\n\n    combineLatest([\n      this.sandbox\n        .getComponentPropertyValue('label')\n        .pipe(map((value) => (value ? null : this.sandbox.createError('Label cannot be blank.', 'label')))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.selectedTabGuid$.pipe(takeUntil(this.sandbox.destroyed$)).subscribe((selectedTabGuid) => {\n      this.hiddenOnCanvas$.next(this.sandbox.guid !== selectedTabGuid);\n    });\n\n    this.sandbox\n      .getComponentPropertyValue('columnCount')\n      .pipe(skip(1))\n      .subscribe((columnCount) => {\n        this.sandbox.setLayout(this.getDefaultColumnSpans(Number(columnCount)));\n      });\n\n    this.sandbox.getComponentPropertyValue('label').subscribe((label) => {\n      const componentName = label ? `${this.sandbox.descriptor.name} (${label})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n\n      this.sandbox.setBreadcrumbs(label);\n    });\n  }\n\n  setContainerLayout(columnSizes: number[]): void {\n    this.sandbox.setLayout(columnSizes);\n  }\n\n  private getDefaultColumnSpans(columnCount: number): number[] {\n    const columnSpans: number[] = [];\n    const span = Math.floor(RX_CONTAINER.maxColumnSpan / columnCount);\n\n    times(columnCount, () => columnSpans.push(span));\n    columnSpans[columnSpans.length - 1] = (RX_CONTAINER.maxColumnSpan % columnCount) + span;\n\n    return columnSpans;\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'label',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Label',\n                required: true\n              }\n            },\n            {\n              name: 'enableLazyLoading',\n              component: SwitchFormControlComponent,\n              options: {\n                label: 'Enable lazy loading'\n              }\n            },\n            {\n              name: 'columnCount',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Number of columns',\n                required: true,\n                tooltip: new Tooltip(\n                  'Resize container columns on the canvas by dragging the dashed column separator line.'\n                ),\n                options: times(6, (index: number) => ({ id: (++index).toString(), name: index.toString() }))\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'rowWrap',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Row wrap',\n                sortAlphabetically: false,\n                options: values(RX_CONTAINER.rowWrapOptions),\n                tooltip: new Tooltip(\n                  `The Row wrap property controls the layout of multi-column containers based on\n                    the width of the view. When the width of the view is decreased to a width less\n                    than the selected Row wrap value, each container column after the first one\n                    wraps onto a new line.`\n                )\n              } as ISelectFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_STANDARD_PROPS_DESC,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxTabPanelModule } from './runtime/tab-panel.module';\nimport { RxTabPanelComponent } from './runtime/tab-panel.component';\nimport { RxTabContainerComponent } from './runtime/tab-container/tab-container.component';\nimport { TabPanelDesignModule } from './design/tab-panel-design.module';\nimport { TabPanelDesignComponent } from './design/tab-panel-design.component';\nimport { TabContainerDesignComponent } from './design/tab-container-design/tab-container-design.component';\nimport { TabPanelDesignModel } from './design/tab-panel-design.model';\nimport { TabContainerDesignModel } from './design/tab-container-design/tab-container-design.model';\n\n@NgModule({\n  imports: [RxTabPanelModule, TabPanelDesignModule]\n})\nexport class TabPanelRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.TabPanel,\n        componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabPanelComponent),\n        properties: RX_STANDARD_PROPS_DESC,\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n        options: {\n          canBeEmbeddedInRecordEditor: true\n        },\n\n        name: 'Tab panel',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'app_tab',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(TabPanelDesignComponent),\n        designComponentModel: TabPanelDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.TabContainer,\n        componentFactory: componentFactoryResolver.resolveComponentFactory(RxTabContainerComponent),\n        properties: [\n          ...RX_STANDARD_PROPS_DESC,\n          {\n            name: 'label',\n            type: ViewComponentPropertyType.String,\n            localizable: true\n          },\n          {\n            name: 'enableLazyLoading',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean,\n            enableExpressionEvaluation: true\n          }\n        ],\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName\n          }\n        ],\n\n        name: 'Tab',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        hidden: true,\n        icon: 'app_tab',\n        designComponentFactory: componentFactoryResolver.resolveComponentFactory(TabContainerDesignComponent),\n        designComponentModel: TabContainerDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      }\n    );\n  }\n}\n","import {\n  IViewComponentDesignCommonDataDictionaryBranch,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { IServiceListProperties } from '../service-list.types';\nimport {\n  ExpressionInspectorControlComponent,\n  IExpressionInspectorControlOptions\n} from '@helix/platform/shared/components';\n\nexport class ServiceListDesignModel extends ViewDesignerComponentModel<IServiceListProperties> {\n  static getInitialProperties(initialProperties?: IServiceListProperties): IServiceListProperties {\n    return {\n      serviceRequestId: null,\n      serviceRequestName: null,\n      serviceRequestGuid: null,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox\n      .getComponentPropertyValue('serviceRequestId')\n      .pipe(\n        map((value) =>\n          value ? [] : [this.sandbox.createError('Selected service request ID cannot be blank.', 'serviceRequestId')]\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.updateInspectorConfig(this.getInspector());\n      this.sandbox.setCommonDataDictionary(this.getCommonProps());\n    });\n  }\n\n  private getCommonProps(): IViewComponentDesignCommonDataDictionaryBranch {\n    return {\n      label: this.sandbox.descriptor.name,\n      expression: this.getExpressionForProperty('api'),\n      children: [\n        {\n          label: 'Service request ID',\n          expression: this.getExpressionForProperty('serviceRequestId')\n        },\n        {\n          label: 'Service request name',\n          expression: this.getExpressionForProperty('serviceRequestName')\n        },\n        {\n          label: 'Service request GUID',\n          expression: this.getExpressionForProperty('serviceRequestGuid')\n        }\n      ]\n    };\n  }\n\n  private getInspector(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'serviceRequestId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestName',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request name'\n              } as IExpressionInspectorControlOptions\n            },\n\n            {\n              name: 'serviceRequestGuid',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Service request GUID'\n              } as IExpressionInspectorControlOptions\n            }\n          ]\n        }\n      ]\n    };\n  }\n}\n","import {\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\n\nimport { ServiceListDesignComponent } from './design/service-list-design.component';\nimport { ServiceListDesignModule } from './design/service-list-design.module';\nimport { ServiceListDesignModel } from './design/service-list-design.model';\nimport { ServiceListComponent } from './runtime/service-list.component';\nimport { ServiceListModule } from './runtime/service-list.module';\n\n@NgModule({\n  imports: [ServiceListModule, ServiceListDesignModule]\n})\nexport class ServiceListRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    this.rxViewComponentRegistryService.register({\n      type: RxViewComponentType.ServiceList,\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListComponent),\n      name: 'Service list',\n      group: RX_VIEW_DESIGNER.stencilGroups.chatbotComponents.label,\n      options: {\n        canBeEmbeddedInRecordEditor: true\n      },\n      canBeInsertedInto(componentTypes: string[]): boolean {\n        return componentTypes.includes(RxViewComponentType.RecordEditor);\n      },\n      properties: [\n        {\n          name: 'serviceRequestId',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'serviceRequestName',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'serviceRequestGuid',\n          enableExpressionEvaluation: true,\n          type: ViewComponentPropertyType.String\n        }\n      ],\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(ServiceListDesignComponent),\n      designComponentModel: ServiceListDesignModel,\n      icon: 'field_dropdown',\n      bundleId: RX_APPLICATION.chatbotBundleId,\n      availableInBundles: [RX_APPLICATION.chatbotBundleId]\n    });\n  }\n}\n","import { IPlainObject } from '@helix/platform/shared/api';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewDesignerComponentModel } from '@helix/platform/view/api';\nimport { IViewDesignerInspectorConfig, ViewDesignerComponentModel } from '@helix/platform/view/designer';\nimport { keys } from 'lodash';\nimport { take } from 'rxjs/operators';\n\nexport class UnknownDesignModel extends ViewDesignerComponentModel implements IViewDesignerComponentModel {\n  label = `Unknown component: ${this.sandbox.componentType}`;\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties) => {\n      this.sandbox.updateInspectorConfig(this.getInspector(componentProperties));\n      this.sandbox.setValidationIssues([this.sandbox.createError(this.label)]);\n    });\n  }\n\n  private getInspector(componentProperties: IPlainObject): IViewDesignerInspectorConfig {\n    const controls = keys(componentProperties).map((propertyName) => ({\n      name: propertyName,\n      component: TextFormControlComponent,\n      options: {\n        label: propertyName\n      },\n      isDisabled: true\n    }));\n\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls\n        }\n      ]\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { UnknownDesignModel } from './unknown-design.model';\n\n@Component({\n  selector: 'rx-unknown',\n  templateUrl: 'unknown-design.component.html',\n  styleUrls: ['./unknown-design.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UnknownDesignComponent {\n  @Input()\n  model: UnknownDesignModel;\n}\n","<adapt-empty-state type=\"objects\" [label]=\"model.label\"></adapt-empty-state>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptEmptyStateModule } from '@bmc-ux/adapt-angular';\nimport { UnknownDesignComponent } from './unknown-design.component';\n\n@NgModule({\n  imports: [CommonModule, AdaptEmptyStateModule],\n  declarations: [UnknownDesignComponent]\n})\nexport class UnknownDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DEFINITION, RxViewComponentRegistryService, RxViewComponentType } from '@helix/platform/view/api';\nimport { UnknownDesignComponent } from './design/unknown-design.component';\nimport { UnknownDesignModel } from './design/unknown-design.model';\nimport { UnknownDesignModule } from './design/unknown-design.module';\n\n@NgModule({\n  imports: [UnknownDesignModule]\n})\nexport class UnknownRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Unknown,\n      outlets: [\n        {\n          name: RX_VIEW_DEFINITION.defaultOutletName\n        }\n      ],\n\n      name: 'Unknown',\n      designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(UnknownDesignComponent),\n      designComponentModel: UnknownDesignModel,\n      hidden: true,\n      bundleId: RX_APPLICATION.platformBundleId\n    });\n  }\n}\n","export const RX_CHATBOT_USER_MAPPING = {\n  commands: {\n    createUserMapping: 'com.bmc.arsys.rx.application.chat.command.CreateChatUserMappingCommand'\n  },\n\n  mappingStatus: {\n    check: 'check',\n    failed: 'failed',\n    inProgress: 'inProgress',\n    missingParameters: 'missingParameters',\n    pending: 'pending',\n    success: 'success'\n  },\n\n  messages: {\n    check: 'com.bmc.arsys.rx.settings.check',\n    failed: 'com.bmc.arsys.rx.settings.failed',\n    inProgress: 'com.bmc.arsys.rx.settings.inProgress',\n    missingParameters: 'com.bmc.arsys.rx.settings.missingParameters',\n    pending: 'com.bmc.arsys.rx.settings.pending',\n    success: 'com.bmc.arsys.rx.settings.success'\n  }\n};\n","import { Component, OnInit } from '@angular/core';\nimport { RxCommandFactoryService, RxNotificationService } from '@helix/platform/shared/api';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { IRxChatbotUserMappingParameters } from './chatbot-user-mapping.interface';\nimport { catchError, take } from 'rxjs/operators';\nimport { RX_CHATBOT_USER_MAPPING } from './chatbot-user-mapping.constant';\nimport { TranslateService } from '@ngx-translate/core';\nimport { throwError } from 'rxjs';\n\n@Component({\n  // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCCloudVerification\".\n  // tslint:disable-next-line:component-selector\n  selector: 'com-bmc-arsys-rx-user-mapping',\n  templateUrl: './chatbot-user-mapping.component.html',\n  styleUrls: ['./chatbot-user-mapping.component.scss']\n})\nexport class ChatbotUserMappingComponent extends BaseViewComponent implements OnInit {\n  private encryptedChatUserAndChatId: string = null;\n  private chatbotProvider: string = null;\n\n  isMappingInProgress = false;\n  message = '';\n  mappingStatus = '';\n\n  constructor(\n    private translateService: TranslateService,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxNotificationService: RxNotificationService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.isMappingInProgress = false;\n\n    this.config.pipe(take(1)).subscribe((config: IRxChatbotUserMappingParameters) => {\n      this.encryptedChatUserAndChatId = config.encryptedChatUserAndChatId;\n      this.chatbotProvider = config.chatbotProvider;\n\n      if (!this.encryptedChatUserAndChatId) {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.missingParameters;\n\n        this.rxNotificationService.addErrorMessage(\n          this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages.missingParameters)\n        );\n      } else {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.pending;\n      }\n\n      this.updateMessage();\n    });\n  }\n\n  isMappingButtonVisible(): boolean {\n    return this.mappingStatus === RX_CHATBOT_USER_MAPPING.mappingStatus.pending;\n  }\n\n  mapUser(): void {\n    this.isMappingInProgress = true;\n    this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.inProgress;\n    this.updateMessage();\n\n    const commandPayload: IRxChatbotUserMappingParameters = {\n      encryptedChatUserAndChatId: this.encryptedChatUserAndChatId,\n      chatbotProvider: this.chatbotProvider\n    };\n\n    this.rxCommandFactoryService\n      .forResourceType(RX_CHATBOT_USER_MAPPING.commands.createUserMapping)\n      .execute(commandPayload)\n      .pipe(\n        catchError((error) => {\n          this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.failed;\n          this.updateMessage();\n          this.isMappingInProgress = false;\n\n          return throwError(error);\n        })\n      )\n      .subscribe(() => {\n        this.mappingStatus = RX_CHATBOT_USER_MAPPING.mappingStatus.success;\n        this.updateMessage();\n        this.isMappingInProgress = false;\n      });\n  }\n\n  private updateMessage(): void {\n    this.message = this.translateService.instant(RX_CHATBOT_USER_MAPPING.messages[this.mappingStatus]);\n  }\n}\n","<div class=\"text-center mt-1 container\">\n  <div>\n    <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.settings.title' | translate }}</span>\n  </div>\n  <div class=\"mt-4\">{{ message }}</div>\n  <div>\n    <button\n      rx-id=\"verify-bmc-cloud-account\"\n      class=\"mt-4\"\n      adapt-button\n      btn-type=\"primary\"\n      size=\"large\"\n      type=\"button\"\n      [disabled]=\"isMappingInProgress\"\n      (click)=\"mapUser()\"\n      [hidden]=\"!isMappingButtonVisible()\"\n    >\n      {{ 'com.bmc.arsys.rx.settings.verify-cloud-account' | translate }}\n    </button>\n  </div>\n</div>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ChatbotUserMappingComponent } from './chatbot-user-mapping.component';\n\n/**\n * This component is used by Chatbot to map users from a third party channel\n * as Slack, Skype for Enterprise to their Innovation Studio account.\n * Backend sends a link in Slack for example and when the user clicks on it,\n * a page on the rx.settings bundle will be displayed, leveraging this view component:\n * http://localhost:4200/helix/index.html#/com.bmc.arsys.rx.settings/view/com.bmc.arsys.rx.settings:BMCCloudVerification?encryptedChatUserAndChatId=12345&chatbotProvider=slack\n */\n@NgModule({\n  declarations: [ChatbotUserMappingComponent],\n  imports: [AdaptButtonModule, CommonModule, FormsModule, TranslateModule],\n  entryComponents: [ChatbotUserMappingComponent]\n})\nexport class ChatbotUserMappingRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCCloudVerification\".\n      type: 'com-bmc-arsys-rx-user-mapping',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotUserMappingComponent),\n      name: 'Chatbot User Mapping',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true,\n      properties: [\n        {\n          name: 'encryptedChatUserAndChatId',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'chatbotProvider',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","export const RX_IFRAME_LOGIN_EVENT = {\n  eventMessage: 'LOGIN_SUCCESSFUL'\n};\n","import { Component, OnInit } from '@angular/core';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { RX_IFRAME_LOGIN_EVENT } from './iframe-login-event.constant';\n\n@Component({\n  // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCLoginVerification\".\n  // tslint:disable-next-line:component-selector\n  selector: 'com-bmc-arsys-rx-settings-iframe-login-event',\n  templateUrl: './iframe-login-event.component.html',\n  styleUrls: ['./iframe-login-event.component.scss']\n})\nexport class IframeLoginEventComponent extends BaseViewComponent implements OnInit {\n  ngOnInit() {\n    window.opener?.postMessage(RX_IFRAME_LOGIN_EVENT.eventMessage, '*');\n  }\n}\n","<img\n  src=\"/com.bmc.arsys.rx.settings/resources/images/login-successful.gif\"\n  alt=\"Login successful\"\n  class=\"login-verification\"\n/>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { IframeLoginEventComponent } from './iframe-login-event.component';\n\n/**\n * This component is used by view-loader.js script when the login cannot be achieved\n * in an iFrame (for example with Microsoft IDP).\n * In this case view-loader.js loads a view in a window popup that will require the user\n * to log in. Once the user is logged in, this View Component will send a PostMessage to\n * view-loader.js that will close the popup.\n */\n@NgModule({\n  declarations: [IframeLoginEventComponent],\n  imports: [CommonModule],\n  entryComponents: [IframeLoginEventComponent]\n})\nexport class IframeLoginEventRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCLoginVerification\".\n      type: 'com-bmc-arsys-rx-settings-iframe-login-event',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeLoginEventComponent),\n      name: 'IFrame Login Event',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true\n    });\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { RxSmartReportingService } from '@helix/platform/shared/api';\n\n@Component({\n  selector: 'rx-smart-reporting-redirector',\n  templateUrl: './smart-reporting-redirector.component.html'\n})\nexport class SmartReportingRedirectorComponent implements OnInit {\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  constructor(private rxSmartReportingService: RxSmartReportingService) {}\n\n  ngOnInit(): void {\n    this.rxSmartReportingService\n      .openSmartReporting('_self', {\n        query: this.runtimeViewModelApi.getViewInputParameters().param\n      })\n      .subscribe();\n  }\n}\n","<div class=\"p-3\">{{ 'com.bmc.arsys.rx.client.smart-reporting-redirector.message' | translate }}</div>\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\r\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\r\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\r\nimport { SmartReportingRedirectorComponent } from './smart-reporting-redirector.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  declarations: [SmartReportingRedirectorComponent],\r\n  imports: [TranslateModule],\r\n  entryComponents: [SmartReportingRedirectorComponent]\r\n})\r\nexport class SmartReportingRedirectorRegistrationModule {\r\n  constructor(\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\r\n  ) {\r\n    rxViewComponentRegistryService.register({\r\n      type: 'rx-smart-reporting-redirector',\r\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(SmartReportingRedirectorComponent),\r\n      name: 'Smart reporting redirector',\r\n      isPageComponent: true,\r\n      hidden: true,\r\n      availableInBundles: [RX_APPLICATION.settingsBundleId]\r\n    });\r\n  }\r\n}\r\n","import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\nexport interface IViewPresetProperties {\n  label: string;\n  index: number;\n}\n\nexport const RX_SHARABLE_VIEW_RESETS_FEATURE_NAME = '23503_SHARABLE_VIEW_PRESET';\n\nexport const RX_VIEW_PRESET = {\n  user: {\n    recordDefinitionName: 'CTM:People',\n    fields: {\n      fullName: 1000000017,\n      lastName: 1000000018,\n      firstName: 1000000019,\n      loginId: RX_RECORD_DEFINITION.coreFieldIds.assignee,\n      recordId: RX_RECORD_DEFINITION.coreFieldIds.id,\n      email: 1000000048\n    }\n  },\n  sharedViewPreset: {\n    recordDefinitionName: 'com.bmc.arsys.rx.settings:SharedViewPreset',\n    fields: {\n      viewPresetName: 58200,\n      viewName: 58201,\n      viewPresetInfo: 58202,\n      viewPresetSelectorGuid: 58203,\n      sharedUsers: 58204,\n      id: RX_RECORD_DEFINITION.coreFieldIds.id,\n      ownerFullName: 58205\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RecordInstance, RxRecordInstanceDataPageService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { HttpClient } from '@angular/common/http';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { IShareViewPresetPayload } from './share-view-preset.types';\nimport { RX_DATA_PAGE } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetDataService {\n  constructor(\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private httpClient: HttpClient,\n    private rxJsonParserService: RxJsonParserService\n  ) {}\n\n  searchUsers(query: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.user.recordDefinitionName,\n          propertySelection: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ],\n          pageSize: RX_DATA_PAGE.defaultPageSize,\n          queryExpression: [\n            RX_VIEW_PRESET.user.fields.fullName,\n            RX_VIEW_PRESET.user.fields.email,\n            RX_VIEW_PRESET.user.fields.loginId\n          ]\n            .map((fieldId) => `('${fieldId}' LIKE \"%${query}%\")`)\n            .join(' OR ')\n        }\n      })\n      .pipe(map((result) => result.data));\n  }\n\n  getSharedViewPresets(viewPresetSelectorGuid: string, loginId: string): Observable<KeyValueObject[]> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName,\n          queryExpression: [\n            `'${RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetSelectorGuid}' = \"${viewPresetSelectorGuid}\"`\n          ].join(' AND '),\n          propertySelection: [\n            RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.id,\n            RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName,\n            RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers\n          ]\n        }\n      })\n      .pipe(\n        map((dataPageResult) =>\n          dataPageResult.data.filter((sharedViewPreset) => {\n            const users = this.rxJsonParserService.tryParseJson(\n              sharedViewPreset[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers],\n              []\n            );\n\n            return users.find((user) => user.loginId === loginId);\n          })\n        )\n      );\n  }\n\n  getSharedViewPreset(guid: string): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.get(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  createSharedViewPreset(payload: IShareViewPresetPayload): Observable<string> {\n    return this.httpClient.post(this.getUrl(), payload, {\n      responseType: 'text'\n    });\n  }\n\n  updateSharedViewPreset(guid: string, payload: IShareViewPresetPayload): Observable<any> {\n    return this.httpClient.put(this.getUrl(guid), payload);\n  }\n\n  deleteSharedViewPreset(guid: string): Observable<any> {\n    return this.rxRecordInstanceService.delete(RX_VIEW_PRESET.sharedViewPreset.recordDefinitionName, guid);\n  }\n\n  private getUrl(guid?: string): string {\n    return guid\n      ? `/api/rx/application/configuration/viewpreset/${guid}`\n      : `/api/rx/application/configuration/viewpreset`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { RxShareViewPresetDataService } from './share-view-preset-data.service';\nimport { RxJsonParserService, RxStringService } from '@helix/platform/utils';\nimport { RX_VIEW_PRESET } from '../../view-preset-selector.types';\nimport { RxCurrentUserService } from '@helix/platform/shared/api';\nimport {\n  ISaveSharedViewPresetPayload,\n  ISharedViewPresetItem,\n  IShareViewPresetPayload,\n  IShareViewPresetUserPayload,\n  ITagUserAutocompleteValue\n} from './share-view-preset.types';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxShareViewPresetService {\n  constructor(\n    private rxShareViewPresetDataService: RxShareViewPresetDataService,\n    private rxStringService: RxStringService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  getAutocompleteSearch(text$: Observable<string>): Observable<ITagUserAutocompleteValue[]> {\n    return text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      switchMap((searchTerm) => {\n        const trimmedValue = searchTerm.trim();\n\n        if (trimmedValue.length > 0) {\n          return this.rxShareViewPresetDataService.searchUsers(trimmedValue);\n        } else {\n          return of([]);\n        }\n      }),\n      map((users) =>\n        users.map((user) => ({\n          text: user[RX_VIEW_PRESET.user.fields.fullName],\n          data: {\n            loginId: user[RX_VIEW_PRESET.user.fields.loginId],\n            fullName: user[RX_VIEW_PRESET.user.fields.fullName],\n            emailAddress: user[RX_VIEW_PRESET.user.fields.email]\n          }\n        }))\n      )\n    );\n  }\n\n  getSharedViewPresetUsers(guid: string): Observable<IShareViewPresetUserPayload[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPreset(guid)\n      .pipe(\n        map((sharedViewPreset) =>\n          this.rxJsonParserService.tryParseJson(\n            sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.sharedUsers].value,\n            []\n          )\n        )\n      );\n  }\n\n  getSharedViewPresetData(\n    guid: string\n  ): Observable<{ viewPresetName: string; sharedViewPresets: IViewPresetsByViewComponentGuid }> {\n    return this.rxShareViewPresetDataService.getSharedViewPreset(guid).pipe(\n      map((sharedViewPreset) => ({\n        viewPresetName: sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName].value,\n        sharedViewPresets: this.rxJsonParserService.tryParseJson(\n          sharedViewPreset?.fieldInstances[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetInfo].value,\n          null\n        )\n      }))\n    );\n  }\n\n  private createUpdateSharedViewPreset(payload: IShareViewPresetPayload, presetGuid?: string): Observable<string> {\n    if (presetGuid) {\n      return this.rxShareViewPresetDataService.updateSharedViewPreset(presetGuid, payload).pipe(map(() => presetGuid));\n    } else {\n      return this.rxShareViewPresetDataService.createSharedViewPreset(payload);\n    }\n  }\n\n  saveSharedViewPreset(data: ISaveSharedViewPresetPayload, presetGuid?: string): Observable<string> {\n    const sharedUsers$ = data.sharedUsers ? of(data.sharedUsers) : this.getSharedViewPresetUsers(presetGuid);\n\n    return combineLatest([data.runtimeViewModelApi.shareViewPreset(data.presetSelectorGuid), sharedUsers$]).pipe(\n      map(([sharedViewPresets, sharedUsers]: [IViewPresetsByViewComponentGuid, IShareViewPresetUserPayload[]]) => ({\n        viewPresetName: data.currentViewPreset.label,\n        viewName: '',\n        viewPresetGuid: data.presetSelectorGuid,\n        submitter: this.rxCurrentUserService.get().fullName,\n        sharedUsers,\n        presetInformation: JSON.stringify(sharedViewPresets)\n      })),\n      switchMap((payload: IShareViewPresetPayload) => this.createUpdateSharedViewPreset(payload, presetGuid))\n    );\n  }\n\n  deleteSharedViewPreset(sharedViewPresetInstanceGuid: string): Observable<any> {\n    return this.rxShareViewPresetDataService.deleteSharedViewPreset(sharedViewPresetInstanceGuid);\n  }\n\n  getSharedViewPresetsForCurrentUser(presetSelectorGuid: string): Observable<ISharedViewPresetItem[]> {\n    return this.rxShareViewPresetDataService\n      .getSharedViewPresets(presetSelectorGuid, this.rxCurrentUserService.getName())\n      .pipe(\n        map((presets) =>\n          presets.map((preset) => ({\n            label: preset[RX_VIEW_PRESET.sharedViewPreset.fields.viewPresetName],\n            guid: preset[RX_VIEW_PRESET.sharedViewPreset.fields.id],\n            ownerFullName: preset[RX_VIEW_PRESET.sharedViewPreset.fields.ownerFullName]\n          }))\n        )\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { find, pick } from 'lodash';\nimport { IUserPreferencesData, RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewPresetSelectorState,\n  IViewPresetSelectorUserPreferences,\n  IViewPresetSelectorUserPreferencesApplyResult\n} from './view-preset-selector.types';\nimport { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';\n\n@Injectable()\nexport class RxViewPresetSelectorUserPreferencesService {\n  private viewPresetSelectorGuid: string;\n\n  constructor(\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxShareViewPresetService: RxShareViewPresetService\n  ) {}\n\n  save(viewPresetSelectorState: IViewPresetSelectorState): Observable<any> {\n    const customViewPresets = viewPresetSelectorState.customViewPresetOptions.map((customViewPresetOption) =>\n      pick(customViewPresetOption, ['guid', 'label', 'userSharedViewPresetGuid'])\n    );\n\n    const sharedViewPresets = viewPresetSelectorState.sharedViewPresetOptions.map((sharedViewPresetOption) =>\n      pick(sharedViewPresetOption, ['guid', 'label'])\n    );\n\n    const data: IUserPreferencesData = {\n      preferences: JSON.stringify({\n        customViewPresets,\n        sharedViewPresets,\n        viewPresetGuid: viewPresetSelectorState.appliedViewPresetOption.guid\n      }),\n      componentTypeName: RxViewComponentType.ViewPresetSelector,\n      version: '1.0',\n      componentId: this.viewPresetSelectorGuid\n    };\n\n    return this.rxUserPreferencesService.setUiComponentPreferences(data, this.viewPresetSelectorGuid);\n  }\n\n  applyUserPreferences(\n    viewPresetSelectorGuid: string,\n    viewPresetSelectorState: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    this.viewPresetSelectorGuid = viewPresetSelectorGuid;\n\n    return this.get(viewPresetSelectorGuid).pipe(\n      map((preferences) => {\n        viewPresetSelectorState.customViewPresetOptions = preferences.customViewPresets;\n\n        if (preferences.sharedViewPresets) {\n          viewPresetSelectorState.sharedViewPresetOptions = preferences.sharedViewPresets.map((preset) => ({\n            ...preset,\n            isShared: true\n          }));\n        }\n\n        viewPresetSelectorState.appliedViewPresetOption =\n          find(viewPresetSelectorState.customViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.systemViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.sharedViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          viewPresetSelectorState.systemViewPresetOptions[0];\n\n        return viewPresetSelectorState;\n      }),\n      switchMap((state) => this.checkSharedViewPresets(state))\n    );\n  }\n\n  private get(guid: string): Observable<IViewPresetSelectorUserPreferences> {\n    return this.rxUserPreferencesService.getUiComponentPreferences<IViewPresetSelectorUserPreferences>(guid).pipe(\n      map(\n        (preferences) =>\n          preferences ?? {\n            customViewPresets: [],\n            sharedViewPresets: [],\n            viewPresetGuid: null\n          }\n      )\n    );\n  }\n\n  private checkSharedViewPresets(\n    state: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    if (state.sharedViewPresetOptions.length) {\n      return this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.viewPresetSelectorGuid).pipe(\n        map((sharedPresets) => {\n          let shouldUpdatePreferences = false;\n          let removedPresetGuid = null;\n\n          // checking if already added shared presets are still available\n          // and updating preset names in case of renaming\n          state.sharedViewPresetOptions = state.sharedViewPresetOptions.reduce((result, presetOption) => {\n            const existingPreset = sharedPresets.find((sharedPreset) => sharedPreset.guid === presetOption.guid);\n\n            if (existingPreset) {\n              if (presetOption.label !== existingPreset.label) {\n                presetOption.label = existingPreset.label;\n                shouldUpdatePreferences = true;\n              }\n\n              result.push(presetOption);\n            } else {\n              shouldUpdatePreferences = true;\n            }\n\n            return result;\n          }, []);\n\n          // checking if current selected preset is still available\n          // and if not - switching to first system preset\n          if (state.appliedViewPresetOption.isShared) {\n            const isOptionStillAvailable = state.sharedViewPresetOptions.find(\n              (option) => option.guid === state.appliedViewPresetOption.guid\n            );\n\n            // if preset it not available anymore or sharing was disabled\n            if (!isOptionStillAvailable || !state.isSharingEnabled) {\n              if (!isOptionStillAvailable) {\n                removedPresetGuid = state.appliedViewPresetOption.guid;\n              }\n\n              state.appliedViewPresetOption = state.systemViewPresetOptions[0];\n            }\n          }\n\n          return { state, shouldUpdatePreferences, removedPresetGuid };\n        })\n      );\n    } else {\n      return of({ state, shouldUpdatePreferences: false, removedPresetGuid: null });\n    }\n  }\n}\n","import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-rename-view-preset',\n  templateUrl: './rename-view-preset.component.html'\n})\nexport class RenameViewPresetComponent extends RxModalClass implements OnInit, OnDestroy {\n  modalData: any;\n  viewPresetNameFormControl: FormControl = new FormControl('');\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private activeModalRef: ActiveModalRef, protected injector: Injector) {\n    super(activeModalRef, injector);\n\n    this.modalData = this.activeModalRef.getData();\n    this.viewPresetNameFormControl.setValue(this.modalData.viewPresetName);\n\n    this.viewPresetNameFormControl.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      if (this.viewPresetNameFormControl.dirty && value === this.modalData.viewPresetName) {\n        this.viewPresetNameFormControl.reset(this.modalData.viewPresetName);\n      }\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  save(): void {\n    this.activeModalRef.close(this.generateUniqueViewPresetName(this.viewPresetNameFormControl.value));\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  isViewPresetNameUnique(viewPresetName: string): boolean {\n    const trimmedViewPresetName = viewPresetName.trim();\n\n    return !this.modalData.existingViewPresetNames.some(\n      (existingViewPresetName) => existingViewPresetName === trimmedViewPresetName\n    );\n  }\n\n  private generateUniqueViewPresetName(viewPresetName: string): string {\n    const trimmedViewPresetName = viewPresetName.trim();\n\n    let uniqueViewPresetName = trimmedViewPresetName;\n    let suffix = 1;\n\n    while (!this.isViewPresetNameUnique(uniqueViewPresetName)) {\n      uniqueViewPresetName = `${trimmedViewPresetName}-${suffix++}`;\n    }\n\n    return uniqueViewPresetName;\n  }\n}\n","<div class=\"modal-body\">\n  <adapt-rx-textfield\n    [formControl]=\"viewPresetNameFormControl\"\n    [label]=\"modalData.fieldLabel\"\n    name=\"viewPresetName\"\n    rx-id=\"view-preset-name-field\"\n    [maxlength]=\"254\"\n    required=\"true\"\n    rxNoWhitespace\n    [autofocus]=\"true\"\n  >\n  </adapt-rx-textfield>\n\n  <p *ngIf=\"!isViewPresetNameUnique(viewPresetNameFormControl.value)\" class=\"text-info m-0 pt-1\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.view-preset-already-exists.error.message'\n        | translate\n    }}\n  </p>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [disabled]=\"viewPresetNameFormControl.invalid || viewPresetNameFormControl.pristine\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { IRecordGridColumn } from '../../../../record-grid/runtime/types/record-grid-column.types';\nimport { IRecordGridConfig } from '../../../../record-grid/runtime/types/record-grid-config.interface';\nimport { RecordGridComponent } from '../../../../record-grid/runtime/record-grid.component';\nimport { RowSelectionMode } from '../../../../record-grid/runtime/types/row-selection-mode.enum';\nimport { IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IShareViewPresetUserPayload } from '../share-view-preset.types';\n\n@Component({\n  selector: 'rx-share-view-preset-users-grid',\n  templateUrl: './share-view-preset-users-grid.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareViewPresetUsersGridComponent implements OnChanges {\n  @ViewChild(RecordGridComponent, { static: true })\n  recordGrid: RecordGridComponent;\n\n  @Input()\n  users: IShareViewPresetUserPayload[] = [];\n\n  @Output()\n  remove = new EventEmitter<string[]>();\n\n  recordGridConfig$: Observable<IRecordGridConfig> = this.getRecordGridConfig();\n\n  constructor(private translateService: TranslateService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.users.currentValue && !changes.users.firstChange) {\n      this.recordGrid.api.refresh().subscribe();\n    }\n  }\n\n  private getRecordGridConfig(): Observable<IRecordGridConfig> {\n    const gridColumns: IRecordGridColumn[] = [\n      {\n        fieldId: 'fullName',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.name.title'\n        )\n      },\n      {\n        fieldId: 'emailAddress',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.email.title'\n        )\n      }\n    ];\n\n    const gridRecordDefinition: IRecordDefinition = {\n      fieldDefinitions: [\n        {\n          id: 'fullName',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: 'emailAddress',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        }\n      ]\n    };\n\n    return of({\n      columns: gridColumns,\n      enableFiltering: false,\n      enableRowSelection: RowSelectionMode.Multiple,\n      recordIdField: 'loginId',\n      styles: 'flex-fill',\n      toolbarConfig: {\n        filter: false,\n        visibleColumnsMenu: false\n      },\n      useExternalFiltering: false,\n      actionButtons: [\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.remove.label'),\n          style: 'tertiary',\n          iconCls: 'minus_circle_o',\n          disabled: () => this.recordGrid.api.getSelectedRows().length === 0,\n          actions: [\n            {\n              name: () => {\n                const selectedUserLoginIds = this.recordGrid.api.getSelectedRows().map((row) => row.loginId);\n\n                this.remove.emit(selectedUserLoginIds);\n              }\n            }\n          ]\n        }\n      ],\n      getRecordDefinition: () => of(gridRecordDefinition),\n      getData: (): Observable<IDataPageResult> =>\n        of({\n          data: this.users,\n          totalSize: this.users.length\n        })\n    });\n  }\n}\n","<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n","import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport {\n  IShareViewPresetModalData,\n  IShareViewPresetUserPayload,\n  ITagUserAutocompleteValue\n} from './share-view-preset.types';\nimport { RxCurrentUserService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxShareViewPresetService } from './share-view-preset.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-share-view-preset',\n  templateUrl: './share-view-preset.component.html',\n  styleUrls: ['./share-view-preset.component.scss']\n})\nexport class ShareViewPresetComponent extends RxModalClass implements OnInit, OnDestroy {\n  private maxRecipients = 100;\n\n  strings = {\n    users: {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.label'\n      ),\n      placeholder: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.users-control.placeholder'\n      )\n    },\n    addButton: this.translateService.instant('com.bmc.arsys.rx.client.common.add.label'),\n    notifyRecipients: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.notify-recipients.label'\n    ),\n    recipients: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.recipients.label'\n    ),\n    savedNotification: {\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.title'\n      ),\n      message: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.saved-notification.message'\n      )\n    },\n    removedNotification: {\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.title'\n      ),\n      message: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.removed-notification.message'\n      )\n    },\n    maxRecipientsWarning: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.max-users-warning.message',\n      {\n        maxUserCount: this.maxRecipients\n      }\n    )\n  };\n\n  form = this.formBuilder.group({\n    users: this.formBuilder.control([]),\n    notifyRecipients: this.formBuilder.control(false)\n  });\n\n  modalData: IShareViewPresetModalData = this.activeModalRef.getData();\n  runtimeViewModelApi: RuntimeViewModelApi = this.modalData.runtimeViewModelApi;\n  selectedUsers: IShareViewPresetUserPayload[] = [];\n\n  get isRecipientsLimitReached(): boolean {\n    return this.form.get('users').value.length + this.selectedUsers.length > this.maxRecipients;\n  }\n\n  private destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private currentUserLoginName = this.rxCurrentUserService.getName();\n  private sharedViewPresetInstanceGuid: string;\n  private isSelectedUsersChanged = false;\n\n  search: (text$: Observable<string>) => Observable<ITagUserAutocompleteValue[]> = (text$: Observable<string>) => {\n    return this.rxShareViewPresetService.getAutocompleteSearch(text$).pipe(\n      map((tags) => {\n        const selectedUsersLoginIDs = this.selectedUsers.map((user) => user.loginId);\n        const tagsInputLoginIDs = this.form.get('users').value.map(({ data }) => data.loginId);\n\n        // exclude current user and users that have already been added\n        return tags.filter(\n          (item) =>\n            item.data.loginId !== this.currentUserLoginName &&\n            !selectedUsersLoginIDs.includes(item.data.loginId) &&\n            !tagsInputLoginIDs.includes(item.data.loginId)\n        );\n      })\n    );\n  };\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private formBuilder: FormBuilder,\n    private translateService: TranslateService,\n    private rxShareViewPresetService: RxShareViewPresetService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxNotificationService: RxNotificationService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.loadExistingSharedViewPresetUsers();\n  }\n\n  private loadExistingSharedViewPresetUsers(): void {\n    if (this.modalData.currentViewPreset.userSharedViewPresetGuid) {\n      this.sharedViewPresetInstanceGuid = this.modalData.currentViewPreset.userSharedViewPresetGuid;\n\n      this.rxShareViewPresetService.getSharedViewPresetUsers(this.sharedViewPresetInstanceGuid).subscribe((users) => {\n        this.selectedUsers = users;\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  save(): void {\n    if (this.selectedUsers.length) {\n      this.saveViewPreset();\n    } else {\n      this.removeViewPreset();\n    }\n  }\n\n  private removeViewPreset(): void {\n    this.rxShareViewPresetService.deleteSharedViewPreset(this.sharedViewPresetInstanceGuid).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.strings.removedNotification.message,\n        this.strings.removedNotification.title\n      );\n\n      this.activeModalRef.close(null);\n    });\n  }\n\n  private saveViewPreset(): void {\n    this.rxShareViewPresetService\n      .saveSharedViewPreset(\n        {\n          runtimeViewModelApi: this.runtimeViewModelApi,\n          currentViewPreset: this.modalData.currentViewPreset,\n          presetSelectorGuid: this.modalData.presetSelectorGuid,\n          sharedUsers: this.selectedUsers\n        },\n        this.sharedViewPresetInstanceGuid\n      )\n      .subscribe((sharedViewPresetInstanceGuid) => {\n        this.rxNotificationService.addSuccessMessage(\n          this.strings.savedNotification.message,\n          this.strings.savedNotification.title\n        );\n\n        this.activeModalRef.close(sharedViewPresetInstanceGuid);\n      });\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onAdd(): void {\n    const usersToAdd = this.form.get('users').value.map((tag: ITagUserAutocompleteValue) => ({\n      ...tag.data\n    }));\n\n    this.selectedUsers = this.selectedUsers.concat(usersToAdd);\n    this.form.get('users').setValue([]);\n    this.isSelectedUsersChanged = true;\n  }\n\n  removeSelectedUsers(selectedUserLoginIds: string[]): void {\n    this.selectedUsers = this.selectedUsers.filter((user) => !selectedUserLoginIds.includes(user.loginId));\n    this.isSelectedUsersChanged = true;\n    this.markAsDirty();\n  }\n\n  // saving is allowed when changing users of existing preset\n  // or creating new preset with at least one user selected\n  isSaveButtonDisabled(): boolean {\n    return !(\n      (this.sharedViewPresetInstanceGuid && this.isSelectedUsersChanged) ||\n      (!this.sharedViewPresetInstanceGuid && this.selectedUsers.length > 0)\n    );\n  }\n}\n","<div class=\"modal-body\">\n  <form [formGroup]=\"form\">\n    <div class=\"row row-no-gutters\">\n      <div class=\"col\">\n        <adapt-tag-field\n          formControlName=\"users\"\n          rx-id=\"users-input\"\n          [label]=\"strings.users.label\"\n          [placeholder]=\"strings.users.placeholder\"\n          [replaceModelOnWrite]=\"true\"\n          [suppressManual]=\"true\"\n          [search]=\"search\"\n          [selectItemTemplate]=\"selectItemTemplate\"\n          (ngModelChange)=\"markAsDirty()\"\n        >\n        </adapt-tag-field>\n        <div class=\"warning mb-3\" *ngIf=\"isRecipientsLimitReached\">\n          <adapt-icon name=\"exclamation_triangle\" class=\"text-warning\"></adapt-icon>\n          {{ strings.maxRecipientsWarning }}\n        </div>\n      </div>\n      <div class=\"col-auto pl-0\">\n        <button\n          class=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"secondary\"\n          rx-id=\"add-button\"\n          [disabled]=\"!form.get('users').value.length || isRecipientsLimitReached\"\n          (click)=\"onAdd()\"\n        >\n          <span>{{ strings.addButton }}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n\n  <adapt-rx-control-label [label]=\"strings.recipients\"></adapt-rx-control-label>\n\n  <rx-share-view-preset-users-grid\n    [users]=\"selectedUsers\"\n    (remove)=\"removeSelectedUsers($event)\"\n  ></rx-share-view-preset-users-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n\n<ng-template #selectItemTemplate let-result=\"result\" let-term=\"term\">\n  <strong>{{ result.text }}</strong>\n  <div>{{ result.data.emailAddress }}</div>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { Observable, of } from 'rxjs';\nimport { IRecordGridConfig } from '../../../record-grid/runtime/types/record-grid-config.interface';\nimport { RecordGridComponent } from '../../../record-grid/runtime/record-grid.component';\nimport { RowSelectionMode } from '../../../record-grid/runtime/types/row-selection-mode.enum';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IAddSharedViewPresetsModalData, ISharedViewPresetDescriptor } from './add-shared-view-presets.types';\nimport { map } from 'rxjs/operators';\nimport { ISharedViewPresetItem } from '../share-view-preset/share-view-preset.types';\nimport { isEmpty } from 'lodash';\n\n@Component({\n  selector: 'rx-add-shared-view-presets',\n  templateUrl: './add-shared-view-presets.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddSharedViewPresetsComponent extends RxModalClass implements OnInit {\n  @ViewChild(RecordGridComponent, { static: true })\n  recordGrid: RecordGridComponent;\n\n  recordGridConfig$: Observable<IRecordGridConfig> = of({\n    columns: [\n      {\n        fieldId: 'label',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.preset-name.title'\n        )\n      },\n      {\n        fieldId: 'ownerFullName',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.grid.column.shared-by.title'\n        )\n      }\n    ],\n    enableFiltering: false,\n    enableRowSelection: RowSelectionMode.Multiple,\n    recordIdField: 'guid',\n    styles: 'flex-fill',\n    toolbarConfig: {\n      filter: false,\n      visibleColumnsMenu: false\n    },\n    useExternalFiltering: false,\n    getRecordDefinition: () =>\n      of({\n        fieldDefinitions: [\n          {\n            id: 'label',\n            resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n          },\n          {\n            id: 'ownerFullName',\n            resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n          }\n        ]\n      }),\n    getData: (): Observable<IDataPageResult> =>\n      of({\n        data: this.presets,\n        totalSize: this.presets.length\n      })\n  });\n\n  modalData: IAddSharedViewPresetsModalData = this.activeModalRef.getData();\n  private presets: ISharedViewPresetItem[] = this.modalData.newPresets;\n  isAddButtonDisabled$: Observable<boolean>;\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private translateService: TranslateService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.isAddButtonDisabled$ = this.recordGrid.rowSelectionChanged.pipe(map(isEmpty));\n  }\n\n  add(): void {\n    const result: ISharedViewPresetDescriptor[] = this.recordGrid.api.getSelectedRows().map(({ label, guid }) => ({\n      label,\n      guid\n    }));\n\n    this.activeModalRef.close(result);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"modal-body\">\n  <div class=\"mb-4\" style=\"white-space: pre-line\">\n    {{\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.description.label'\n        | translate\n    }}\n  </div>\n\n  <rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"add-button\"\n    (click)=\"add()\"\n    [disabled]=\"isAddButtonDisabled$ | async\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, combineLatest, EMPTY, iif, Observable, of, Subject, throwError } from 'rxjs';\nimport { catchError, finalize, map, switchMap, take, takeUntil, tap } from 'rxjs/operators';\nimport { noop, reject, sortBy } from 'lodash';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RxModalService, RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport {\n  IViewPresetSelectorConfig,\n  IViewPresetSelectorDropdownOption,\n  IViewPresetSelectorState\n} from './view-preset-selector.types';\nimport { RxViewPresetSelectorUserPreferencesService } from './view-preset-selector-user-preferences.service';\nimport { IViewPresetSelectorApi } from './view-preset-selector-api.interface';\nimport { RenameViewPresetComponent } from './rename-view-preset/rename-view-preset.component';\nimport { ShareViewPresetComponent } from './share-view-preset/share-view-preset.component';\nimport { RxFeatureService, RxNotificationService } from '@helix/platform/shared/api';\nimport { ISharedViewPresetItem, IShareViewPresetModalData } from './share-view-preset/share-view-preset.types';\nimport { RX_SHARABLE_VIEW_RESETS_FEATURE_NAME } from '../view-preset-selector.types';\nimport { AddSharedViewPresetsComponent } from './add-shared-view-presets/add-shared-view-presets.component';\nimport {\n  IAddSharedViewPresetsModalData,\n  ISharedViewPresetDescriptor\n} from './add-shared-view-presets/add-shared-view-presets.types';\nimport { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';\nimport { IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'rx-view-preset-selector',\n  templateUrl: './view-preset-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [RxViewPresetSelectorUserPreferencesService],\n  styleUrls: ['./view-preset-selector.component.scss']\n})\nexport class ViewPresetSelectorComponent extends BaseViewComponent implements OnInit, OnDestroy {\n  @Input()\n  config: Observable<IViewPresetSelectorConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  api: IViewPresetSelectorApi = {\n    getGuid: () => this.guid,\n    markAppliedViewPresetAsEdited: this.markAppliedViewPresetAsEdited.bind(this)\n  };\n\n  private isOperationInProgressSubject = new BehaviorSubject<boolean>(false);\n  private isViewPresetEditedSubject = new BehaviorSubject<boolean>(false);\n\n  viewPresetSelectorModel$: Observable<{\n    isOperationInProgress: boolean;\n    isViewPresetEdited: boolean;\n  }> = combineLatest([this.isOperationInProgressSubject, this.isViewPresetEditedSubject]).pipe(\n    map(([isOperationInProgress, isViewPresetEdited]) => ({\n      isOperationInProgress,\n      isViewPresetEdited\n    }))\n  );\n\n  state: IViewPresetSelectorState;\n\n  strings = {\n    deleteLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),\n    discardChangesButtonLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes.button.label'\n    ),\n    editedViewPresetTagLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.edited-view-preset-tag.label'\n    ),\n    renameLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.rename.label'),\n    saveLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n    saveAsLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save-as.label'),\n    shareLabel: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.share.button.label'\n    ),\n    systemPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.system.label'\n    ),\n    sharedPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.shared-with-me.label'\n    ),\n    customPresetsTitle: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.preset-type.created-by-me.label'\n    ),\n    sharedTooltip: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.shared-preset.tooltip'\n    ),\n    addSharedViewPresets: this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.title'\n    )\n  };\n\n  private userPreferencesChangedSubject = new Subject<void>();\n  isSharingFeatureEnabled = this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME);\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    private rxGuidService: RxGuidService,\n    private rxModalService: RxModalService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private rxViewPresetSelectorUserPreferencesService: RxViewPresetSelectorUserPreferencesService,\n    private translateService: TranslateService,\n    private rxFeatureService: RxFeatureService,\n    private rxNotificationService: RxNotificationService,\n    private rxShareViewPresetService: RxShareViewPresetService\n  ) {\n    super();\n\n    this.userPreferencesChangedSubject\n      .pipe(\n        switchMap(() => this.rxViewPresetSelectorUserPreferencesService.save(this.state)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.config\n      .pipe(\n        take(1),\n        map((config: IViewPresetSelectorConfig) => ({\n          systemViewPresetOptions: config.viewPresets,\n          customViewPresetOptions: [],\n          sharedViewPresetOptions: [],\n          appliedViewPresetOption: null,\n          isSharingEnabled: config.enableSharing && this.isSharingFeatureEnabled\n        })),\n        switchMap((state: IViewPresetSelectorState) =>\n          this.rxViewPresetSelectorUserPreferencesService.applyUserPreferences(this.guid, state)\n        ),\n        tap(({ state, shouldUpdatePreferences, removedPresetGuid }) => {\n          this.state = state;\n          this.changeDetectorRef.detectChanges();\n          this.isOperationInProgressSubject.next(true);\n\n          if (removedPresetGuid) {\n            this.runtimeViewModelApi.deleteViewPreset(removedPresetGuid).subscribe();\n          }\n\n          if (shouldUpdatePreferences) {\n            this.userPreferencesChangedSubject.next();\n          }\n        }),\n        switchMap(() => this.applyViewPreset(this.state.appliedViewPresetOption)),\n        finalize(() => this.isOperationInProgressSubject.next(false))\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.isOperationInProgressSubject.complete();\n    this.isViewPresetEditedSubject.complete();\n    this.userPreferencesChangedSubject.complete();\n  }\n\n  deleteViewPreset(viewPresetOptionToRemove: IViewPresetSelectorDropdownOption): void {\n    this.rxUtilityModalsService\n      .confirm(\n        this.translateService.instant(\n          viewPresetOptionToRemove.userSharedViewPresetGuid\n            ? 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-shared-view-preset-confirmation.message'\n            : 'com.bmc.arsys.rx.client.view-components.view-preset-selector.delete-view-preset-confirmation.message'\n        )\n      )\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          const viewPresetGuidToDelete = this.state.appliedViewPresetOption.guid;\n\n          this.state.appliedViewPresetOption = this.state.systemViewPresetOptions[0];\n          this.isViewPresetEditedSubject.next(false);\n\n          this.state.customViewPresetOptions = reject(this.state.customViewPresetOptions, {\n            guid: viewPresetGuidToDelete\n          });\n\n          this.state.sharedViewPresetOptions = reject(this.state.sharedViewPresetOptions, {\n            guid: viewPresetGuidToDelete\n          });\n\n          this.userPreferencesChangedSubject.next();\n          this.isOperationInProgressSubject.next(true);\n\n          this.runtimeViewModelApi\n            .applyViewPreset(this.guid, this.state.appliedViewPresetOption.guid)\n            .pipe(\n              finalize(() => {\n                const deleteSharedViewPreset$ = viewPresetOptionToRemove.userSharedViewPresetGuid\n                  ? this.rxShareViewPresetService.deleteSharedViewPreset(\n                      viewPresetOptionToRemove.userSharedViewPresetGuid\n                    )\n                  : of(null);\n\n                deleteSharedViewPreset$\n                  .pipe(\n                    switchMap(() => this.runtimeViewModelApi.deleteViewPreset(viewPresetGuidToDelete)),\n                    finalize(() => this.isOperationInProgressSubject.next(false))\n                  )\n                  .subscribe();\n              })\n            )\n            .subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  discardViewPresetChanges(): void {\n    this.rxUtilityModalsService\n      .confirm(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.discard-changes-confirmation.message'\n        )\n      )\n      .then((isConfirmed: boolean) => {\n        if (isConfirmed) {\n          this.isViewPresetEditedSubject.next(false);\n          this.isOperationInProgressSubject.next(true);\n\n          const appliedViewPresetOption = this.state.appliedViewPresetOption;\n\n          iif(\n            () => appliedViewPresetOption.isShared,\n            this.getSharedViewPresetData(appliedViewPresetOption).pipe(\n              switchMap((sharedViewPresets) =>\n                this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption.guid, sharedViewPresets)\n              )\n            ),\n            this.runtimeViewModelApi.discardViewPresetChanges(appliedViewPresetOption.guid)\n          )\n            .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n            .subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  renameViewPreset(): void {\n    this.openRenamingModal(this.strings.renameLabel, true)\n      .then((viewPresetName: string) => {\n        this.state.appliedViewPresetOption.label = viewPresetName;\n        this.state.customViewPresetOptions = sortBy(this.state.customViewPresetOptions, 'label');\n        this.userPreferencesChangedSubject.next();\n        this.changeDetectorRef.detectChanges();\n\n        // if preset is shared with others - updating with new name\n        if (this.state.appliedViewPresetOption.userSharedViewPresetGuid) {\n          this.saveSharedViewPreset().subscribe();\n        }\n      })\n      .catch(noop);\n  }\n\n  selectPreset(viewPresetOption: IViewPresetSelectorDropdownOption): void {\n    this.state.appliedViewPresetOption = viewPresetOption;\n    this.isViewPresetEditedSubject.next(false);\n    this.userPreferencesChangedSubject.next();\n    this.isOperationInProgressSubject.next(true);\n\n    this.applyViewPreset(viewPresetOption)\n      .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n      .subscribe();\n  }\n\n  saveAsViewPreset(): void {\n    this.openRenamingModal(this.strings.saveAsLabel)\n      .then((viewPresetName: string) => {\n        const viewPreset = {\n          guid: this.rxGuidService.generate(),\n          label: viewPresetName\n        };\n\n        this.state.customViewPresetOptions.push(viewPreset);\n        this.state.customViewPresetOptions = sortBy(this.state.customViewPresetOptions, 'label');\n        this.state.appliedViewPresetOption = viewPreset;\n\n        this.isViewPresetEditedSubject.next(false);\n        this.userPreferencesChangedSubject.next();\n        this.isOperationInProgressSubject.next(true);\n\n        this.runtimeViewModelApi\n          .applyViewPreset(this.guid, this.state.appliedViewPresetOption.guid)\n          .pipe(finalize(() => this.isOperationInProgressSubject.next(false)))\n          .subscribe();\n      })\n      .catch(noop);\n  }\n\n  saveViewPreset(): void {\n    this.isViewPresetEditedSubject.next(false);\n    this.isOperationInProgressSubject.next(true);\n\n    const saveSharedViewPreset$ = this.state.appliedViewPresetOption.userSharedViewPresetGuid\n      ? this.saveSharedViewPreset()\n      : of(null);\n\n    saveSharedViewPreset$\n      .pipe(\n        switchMap(() => this.runtimeViewModelApi.saveViewPreset(this.state.appliedViewPresetOption.guid)),\n        finalize(() => this.isOperationInProgressSubject.next(false))\n      )\n      .subscribe();\n  }\n\n  shareViewPreset(): void {\n    this.rxModalService\n      .openModal({\n        content: ShareViewPresetComponent,\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.title'\n        ),\n        data: {\n          runtimeViewModelApi: this.runtimeViewModelApi,\n          currentViewPreset: this.state.appliedViewPresetOption,\n          presetSelectorGuid: this.guid\n        } as IShareViewPresetModalData,\n        size: 'sm'\n      })\n      .then((sharedViewPresetGuid) => {\n        this.state.appliedViewPresetOption.userSharedViewPresetGuid = sharedViewPresetGuid;\n        this.userPreferencesChangedSubject.next();\n      })\n      .catch(noop);\n  }\n\n  onAddSharedPresetsClick(): void {\n    this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.guid).subscribe((presets) => {\n      const existingSharedPresetsGuids = this.state.sharedViewPresetOptions.map((option) => option.guid);\n      const newPresets = presets.filter((preset) => !existingSharedPresetsGuids.includes(preset.guid));\n\n      if (newPresets.length) {\n        this.openAddSharedPresetsModal(newPresets);\n      } else {\n        this.rxNotificationService.addInfoMessage(\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.message'\n          ),\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.no-new-presets.title'\n          )\n        );\n      }\n    });\n  }\n\n  private openAddSharedPresetsModal(newPresets: ISharedViewPresetItem[]) {\n    this.rxModalService\n      .openModal({\n        content: AddSharedViewPresetsComponent,\n        title: this.strings.addSharedViewPresets,\n        data: {\n          presetSelectorGuid: this.guid,\n          newPresets\n        } as IAddSharedViewPresetsModalData,\n        size: 'sm'\n      })\n      .then((addedPresets: ISharedViewPresetDescriptor[]) => {\n        this.state.sharedViewPresetOptions = this.state.sharedViewPresetOptions.concat(\n          addedPresets.map((preset) => ({ ...preset, isShared: true }))\n        );\n        this.userPreferencesChangedSubject.next();\n\n        if (addedPresets.length) {\n          this.rxNotificationService.addSuccessMessage(\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.message'\n            ),\n            this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-components.view-preset-selector.add-shared-view-preset.notification.presets-added.title'\n            )\n          );\n        }\n      })\n      .catch(noop);\n  }\n\n  private markAppliedViewPresetAsEdited(): void {\n    this.isViewPresetEditedSubject.next(true);\n  }\n\n  private openRenamingModal(fieldLabel: string, isEdit?: boolean): Promise<string> {\n    let existingViewPresets = [...this.state.customViewPresetOptions, ...this.state.systemViewPresetOptions];\n\n    if (isEdit) {\n      existingViewPresets = existingViewPresets.filter(\n        (viewPreset) => viewPreset.guid !== this.state.appliedViewPresetOption.guid\n      );\n    }\n\n    return this.rxModalService.openModal({\n      content: RenameViewPresetComponent,\n      data: {\n        fieldLabel,\n        existingViewPresetNames: existingViewPresets.map(({ label }) => label),\n        viewPresetName: this.state.appliedViewPresetOption.label\n      },\n      size: 'sm'\n    });\n  }\n\n  private applyViewPreset(viewPresetOption: IViewPresetSelectorDropdownOption): Observable<never> {\n    if (viewPresetOption.isShared) {\n      return this.getSharedViewPresetData(viewPresetOption).pipe(\n        switchMap((sharedViewPresets) =>\n          this.runtimeViewModelApi.applyViewPreset(this.guid, viewPresetOption.guid, sharedViewPresets)\n        ),\n        catchError((error) => this.handleSharedViewPresetLoadError(error, viewPresetOption))\n      );\n    } else {\n      return this.runtimeViewModelApi.applyViewPreset(this.guid, viewPresetOption.guid);\n    }\n  }\n\n  private saveSharedViewPreset(): Observable<string> {\n    return this.rxShareViewPresetService.saveSharedViewPreset(\n      {\n        runtimeViewModelApi: this.runtimeViewModelApi,\n        currentViewPreset: this.state.appliedViewPresetOption,\n        presetSelectorGuid: this.guid\n      },\n      this.state.appliedViewPresetOption.userSharedViewPresetGuid\n    );\n  }\n\n  private getSharedViewPresetData(\n    viewPresetOption: IViewPresetSelectorDropdownOption\n  ): Observable<IViewPresetsByViewComponentGuid> {\n    return this.rxShareViewPresetService.getSharedViewPresetData(viewPresetOption.guid).pipe(\n      map(({ viewPresetName, sharedViewPresets }) => {\n        viewPresetOption.label = viewPresetName;\n\n        return sharedViewPresets;\n      })\n    );\n  }\n\n  private handleSharedViewPresetLoadError(\n    error: HttpErrorResponse,\n    viewPresetOption: IViewPresetSelectorDropdownOption\n  ): Observable<never> {\n    if (error.status === 404) {\n      this.state.sharedViewPresetOptions = this.state.sharedViewPresetOptions.filter(\n        (option) => option.guid !== viewPresetOption.guid\n      );\n\n      this.runtimeViewModelApi.deleteViewPreset(viewPresetOption.guid).subscribe();\n\n      // if preset was removed - selecting first system preset instead\n      this.selectPreset(this.state.systemViewPresetOptions[0]);\n\n      return EMPTY;\n    } else {\n      return throwError(error);\n    }\n  }\n}\n","<ng-container *ngIf=\"viewPresetSelectorModel$ | async as viewPresetSelectorModel\">\n  <div class=\"btn-group align-items-center\" *ngIf=\"state\">\n    <div adaptDropdown>\n      <button\n        adapt-button\n        adaptDropdownToggle\n        type=\"button\"\n        btn-type=\"tertiary\"\n        class=\"text-default font-weight-bold text-left\"\n        rx-id=\"toggle-button\"\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      >\n        {{ state.appliedViewPresetOption.label }}\n      </button>\n\n      <div class=\"dropdown-menu {{ isSharingFeatureEnabled ? 'preset-selector' : '' }}\" adaptDropdownMenu tabindex=\"0\">\n        <ng-container *ngIf=\"state.customViewPresetOptions.length\">\n          <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.customPresetsTitle }}</div>\n          <button\n            *ngFor=\"let customViewPresetOption of state.customViewPresetOptions\"\n            [class.active]=\"customViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            class=\"dropdown-item\"\n            type=\"button\"\n            (click)=\"selectPreset(customViewPresetOption)\"\n            rx-id=\"custom-view-preset\"\n          >\n            {{ customViewPresetOption.label }}\n\n            <adapt-icon\n              *ngIf=\"customViewPresetOption.userSharedViewPresetGuid && isSharingFeatureEnabled\"\n              name=\"users\"\n              [adaptTooltip]=\"strings.sharedTooltip\"\n              class=\"btn-link float-end ml-2\"\n            ></adapt-icon>\n          </button>\n\n          <div *ngIf=\"!isSharingFeatureEnabled\" class=\"dropdown-divider\"></div>\n        </ng-container>\n\n        <ng-container *ngIf=\"state.isSharingEnabled\">\n          <div class=\"dropdown-heading\">\n            {{ strings.sharedPresetsTitle }}\n\n            <button\n              type=\"button\"\n              class=\"btn btn-link float-end p-0 pl-1 btn-add-shared\"\n              rx-id=\"add-preset-button\"\n              [adaptTooltip]=\"strings.addSharedViewPresets\"\n              (click)=\"onAddSharedPresetsClick()\"\n            >\n              <adapt-icon name=\"plus\"></adapt-icon>\n            </button>\n          </div>\n\n          <button\n            *ngFor=\"let sharedViewPresetOption of state.sharedViewPresetOptions\"\n            class=\"dropdown-item\"\n            [class.active]=\"sharedViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n            type=\"button\"\n            (click)=\"selectPreset(sharedViewPresetOption)\"\n            rx-id=\"shared-view-preset\"\n          >\n            {{ sharedViewPresetOption.label }}\n          </button>\n        </ng-container>\n\n        <div class=\"dropdown-heading\" *ngIf=\"isSharingFeatureEnabled\">{{ strings.systemPresetsTitle }}</div>\n\n        <button\n          *ngFor=\"let systemViewPresetOption of state.systemViewPresetOptions\"\n          class=\"dropdown-item\"\n          [class.active]=\"systemViewPresetOption.guid === state.appliedViewPresetOption.guid\"\n          type=\"button\"\n          (click)=\"selectPreset(systemViewPresetOption)\"\n          rx-id=\"system-view-preset\"\n        >\n          {{ systemViewPresetOption.label }}\n        </button>\n      </div>\n    </div>\n\n    <span class=\"badge badge-secondary extra-small mx-2\" *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\">\n      {{ strings.editedViewPresetTagLabel }}\n    </span>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      *ngIf=\"\n        !state.appliedViewPresetOption.isSystem &&\n        !state.appliedViewPresetOption.isShared &&\n        viewPresetSelectorModel.isViewPresetEdited\n      \"\n      class=\"d-icon-left-floppy p-2\"\n      rx-id=\"save-button\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveViewPreset()\"\n    >\n      {{ strings.saveLabel }}\n    </adapt-button>\n\n    <adapt-button\n      btn-type=\"tertiary\"\n      [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n      (click)=\"saveAsViewPreset()\"\n      class=\"d-icon-left-save_all_o\"\n      rx-id=\"save-as-button\"\n      *ngIf=\"\n        state.appliedViewPresetOption.isSystem ||\n        state.appliedViewPresetOption.isShared ||\n        !viewPresetSelectorModel.isViewPresetEdited\n      \"\n    >\n      {{ strings.saveAsLabel }}\n    </adapt-button>\n\n    <div\n      class=\"dropdown header-cell-menu-btn\"\n      adaptDropdown\n      *ngIf=\"viewPresetSelectorModel.isViewPresetEdited || !state.appliedViewPresetOption.isSystem\"\n    >\n      <button\n        rx-id=\"more-actions-toggle-button\"\n        class=\"d-icon-ellipsis btn btn-link px-0\"\n        type=\"button\"\n        adaptDropdownToggle\n        [disabled]=\"viewPresetSelectorModel.isOperationInProgress\"\n        [showCaret]=\"false\"\n      ></button>\n\n      <div class=\"dropdown-menu\" adaptDropdownMenu tabindex=\"0\">\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"viewPresetSelectorModel.isViewPresetEdited\"\n          class=\"d-icon-left-undo_adapt dropdown-item\"\n          rx-id=\"discard-changes-button\"\n          (click)=\"discardViewPresetChanges()\"\n        >\n          {{ strings.discardChangesButtonLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          (click)=\"saveAsViewPreset()\"\n          class=\"d-icon-left-save_all_o dropdown-item\"\n          rx-id=\"save-as-button\"\n          *ngIf=\"\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            viewPresetSelectorModel.isViewPresetEdited\n          \"\n        >\n          {{ strings.saveAsLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem && !state.appliedViewPresetOption.isShared\"\n          class=\"d-icon-left-field_text dropdown-item\"\n          rx-id=\"rename-selected-view-preset-button\"\n          (click)=\"renameViewPreset()\"\n        >\n          {{ strings.renameLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"!state.appliedViewPresetOption.isSystem\"\n          class=\"d-icon-left-trash_adapt dropdown-item\"\n          rx-id=\"remove-selected-view-preset-button\"\n          (click)=\"deleteViewPreset(state.appliedViewPresetOption)\"\n        >\n          {{ strings.deleteLabel }}\n        </adapt-button>\n\n        <adapt-button\n          btn-type=\"tertiary\"\n          *ngIf=\"\n            state.isSharingEnabled &&\n            !state.appliedViewPresetOption.isSystem &&\n            !state.appliedViewPresetOption.isShared &&\n            !viewPresetSelectorModel.isViewPresetEdited\n          \"\n          class=\"d-icon-left-share dropdown-item\"\n          rx-id=\"share-view-preset-button\"\n          (click)=\"shareViewPreset()\"\n        >\n          {{ strings.shareLabel }}\n        </adapt-button>\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import { Injectable } from '@angular/core';\n\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IContainerViewComponentDefinition } from '@helix/platform/view/api';\n\n@Injectable()\nexport class ViewPresetSelectorAdapterService implements IDefinitionAdapter<IContainerViewComponentDefinition> {\n  adaptDefinition(viewPresetSelectorComponentDefinition: IContainerViewComponentDefinition): void {\n    viewPresetSelectorComponentDefinition.componentDefinitions\n      .sort((a, b) => a.propertiesByName.index - b.propertiesByName.index)\n      .forEach((componentDefinition) => {\n        Object.assign(componentDefinition.propertiesByName, {\n          guid: componentDefinition.guid,\n          isSystem: true\n        });\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ShareViewPresetComponent } from './share-view-preset.component';\nimport { AdaptButtonModule, AdaptIconModule, AdaptMetatagModule, AdaptRxLabelModule } from '@bmc-ux/adapt-angular';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { RecordGridModule } from '../../../record-grid/runtime/record-grid.module';\nimport { CommonModule } from '@angular/common';\nimport { ShareViewPresetUsersGridComponent } from './share-view-preset-users-grid/share-view-preset-users-grid.component';\n\n@NgModule({\n  imports: [\n    AdaptMetatagModule,\n    AdaptButtonModule,\n    ReactiveFormsModule,\n    TranslateModule,\n    RecordGridModule,\n    CommonModule,\n    AdaptIconModule,\n    AdaptRxLabelModule\n  ],\n  declarations: [ShareViewPresetComponent, ShareViewPresetUsersGridComponent]\n})\nexport class ShareViewPresetModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddSharedViewPresetsComponent } from './add-shared-view-presets.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\nimport { RecordGridModule } from '../../../record-grid/runtime/record-grid.module';\n\n@NgModule({\n  declarations: [AddSharedViewPresetsComponent],\n  imports: [CommonModule, TranslateModule, AdaptButtonModule, RecordGridModule]\n})\nexport class AddSharedViewPresetsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport {\n  AdaptButtonModule,\n  AdaptDropdownModule,\n  AdaptIconModule,\n  AdaptRxTextfieldModule,\n  AdaptTooltipModule\n} from '@bmc-ux/adapt-angular';\nimport { RxNoWhitespaceValidatorModule, RxUniqueValidatorModule } from '@helix/platform/utils';\nimport { RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { ViewPresetSelectorComponent } from './view-preset-selector.component';\nimport { ViewPresetSelectorAdapterService } from './view-preset-selector-adapter.service';\nimport { RenameViewPresetComponent } from './rename-view-preset/rename-view-preset.component';\nimport { ShareViewPresetModule } from './share-view-preset/share-view-preset.module';\nimport { AddSharedViewPresetsModule } from './add-shared-view-presets/add-shared-view-presets.module';\n\n@NgModule({\n  imports: [\n    AdaptButtonModule,\n    AdaptDropdownModule,\n    AdaptRxTextfieldModule,\n    AdaptTooltipModule,\n    CommonModule,\n    ReactiveFormsModule,\n    RxUniqueValidatorModule,\n    TranslateModule,\n    RxNoWhitespaceValidatorModule,\n    ShareViewPresetModule,\n    AddSharedViewPresetsModule,\n    AdaptIconModule\n  ],\n  exports: [ViewPresetSelectorComponent],\n  declarations: [RenameViewPresetComponent, ViewPresetSelectorComponent],\n  entryComponents: [ViewPresetSelectorComponent],\n  providers: [ViewPresetSelectorAdapterService]\n})\nexport class ViewPresetSelectorModule {\n  constructor(\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private viewPresetSelectorAdapterService: ViewPresetSelectorAdapterService\n  ) {\n    rxDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxViewComponentType.ViewPresetSelector,\n      this.viewPresetSelectorAdapterService\n    );\n  }\n}\n","import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { AdaptRxListBuilderComponent, RxListBuilderItem } from '@bmc-ux/adapt-angular';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { ViewPresetSelectorDesignModel } from '../view-preset-selector-design.model';\nimport { IFormFocusable, IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDesignSetPayload } from '@helix/platform/view/designer';\nimport { IViewPresetProperties } from '../../view-preset-selector.types';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { chain, cloneDeep, trim } from 'lodash';\n\n@Component({\n  selector: 'rx-presets-list-widget',\n  templateUrl: './presets-list-widget.component.html',\n  styleUrls: ['./presets-list-widget.component.scss']\n})\nexport class PresetsListWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, ViewPresetSelectorDesignModel>\n  implements OnInit, IFormWidgetComponent, IFormFocusable\n{\n  private editedPreset: RxListBuilderItem = null;\n\n  presets: RxListBuilderItem[] = [];\n\n  isDisabled: boolean;\n\n  @ViewChild(AdaptRxListBuilderComponent)\n  adaptRxListBuilderComponent: AdaptRxListBuilderComponent;\n\n  private strings = {\n    cannotBeBlank: this.translateService.instant(\n      'com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message',\n      {\n        propertyName: 'View preset name'\n      }\n    ),\n    duplicateValue: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message')\n  };\n\n  itemValidationFn = this.itemValidation.bind(this);\n\n  constructor(protected injector: Injector, private translateService: TranslateService) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.sandbox\n      .getChildComponents()\n      .pipe(first(), takeUntil(this.designerItemModel.sandbox.destroyed$))\n      .subscribe((res) => {\n        res.sort((a, b) => a.data.index - b.data.index);\n\n        this.presets = res.map((component) => ({\n          name: component.data.label,\n          id: component.guid\n        }));\n      });\n  }\n\n  onPresetsListChange(items: RxListBuilderItem[]) {\n    items.forEach((item) => {\n      item.name = trim(item.name);\n    });\n\n    this.presets = cloneDeep(items);\n\n    const payload: IViewComponentDesignSetPayload<IViewPresetProperties>[] = items.map(({ name, id }, index) => ({\n      type: RxViewComponentType.ViewPreset,\n      guid: String(id),\n      data: {\n        label: name,\n        index\n      }\n    }));\n\n    this.designerItemModel.sandbox.setChildren(payload);\n  }\n\n  onListItemAdd(): void {\n    this.presets.push(this.presets.shift());\n  }\n\n  onListItemEdit(preset: RxListBuilderItem): void {\n    this.editedPreset = preset;\n  }\n\n  onListItemUpdate(): void {\n    this.editedPreset = null;\n  }\n\n  focus(): void {\n    this.adaptRxListBuilderComponent.inputEl.nativeElement.focus();\n  }\n\n  private itemValidation(value: string, items: RxListBuilderItem[], isEdit: boolean): string {\n    let errorMessage: string = null;\n\n    const otherItemNames = chain(items)\n      .reject((item) => isEdit && item.id === this.editedPreset.id)\n      .map('name')\n      .value();\n\n    const trimmedValue = trim(value);\n\n    if (trimmedValue.length === 0) {\n      errorMessage = this.strings.cannotBeBlank;\n    } else if (otherItemNames.includes(trimmedValue)) {\n      errorMessage = this.strings.duplicateValue;\n    }\n\n    return errorMessage;\n  }\n}\n","<adapt-rx-list-builder\n  [label]=\"'View preset names'\"\n  [(ngModel)]=\"presets\"\n  (ngModelChange)=\"onPresetsListChange($event)\"\n  [hideListAreaLabel]=\"true\"\n  [texts]=\"options.texts\"\n  [readonly]=\"isDisabled\"\n  (listItemAdd)=\"onListItemAdd()\"\n  (listItemEdit)=\"onListItemEdit($event)\"\n  (listItemUpdate)=\"onListItemUpdate()\"\n  [itemValidation]=\"itemValidationFn\"\n>\n</adapt-rx-list-builder>\n","import {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  ISwitcherFormControlOptions,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { IViewPresetSelectorDesignProperties } from './view-preset-selector-design.types';\nimport { PresetsListWidgetComponent } from './presets-list-widget/presets-list-widget.component';\nimport { RxFeatureService } from '@helix/platform/shared/api';\nimport { RX_SHARABLE_VIEW_RESETS_FEATURE_NAME } from '../view-preset-selector.types';\n\nexport class ViewPresetSelectorDesignModel\n  extends ViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n  implements IViewDesignerComponentModel<IViewPresetSelectorDesignProperties>\n{\n  sandbox: IViewComponentDesignSandbox<IViewPresetSelectorDesignProperties>;\n  presetComponentGuids$ = this.sandbox.getChildComponentGuids();\n\n  otherPresetSelectorsNames$: Observable<string[]> = this.sandbox\n    .getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector)\n    .pipe(\n      map((selectors) =>\n        selectors\n          .filter((component) => component.guid !== this.sandbox.guid)\n          .map((component) => component.data.name.trim())\n      )\n    );\n\n  label$: Observable<string> = this.sandbox.getChildComponents().pipe(\n    map((components) => components.sort((a, b) => a.data.index - b.data.index)),\n    map((components) => (components[0] ? components[0].data.label : 'No view presets added')),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  private rxFeatureService = this.injector.get(RxFeatureService);\n\n  static getInitialProperties(\n    initialProperties?: IViewPresetSelectorDesignProperties\n  ): IViewPresetSelectorDesignProperties {\n    return {\n      name: 'View preset selector',\n      styles: null,\n      enableSharing: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.updateInspectorConfig(this.setInspectorConfig());\n\n    combineLatest([this.sandbox.componentProperties$, this.presetComponentGuids$])\n      .pipe(\n        withLatestFrom(this.otherPresetSelectorsNames$),\n        map(([[componentProperties, presetGuids], otherPresetSelectorsNames]) =>\n          this.validate(componentProperties, presetGuids, otherPresetSelectorsNames)\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  private setInspectorConfig(): IViewDesignerInspectorConfig {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                required: true\n              }\n            },\n            {\n              component: PresetsListWidgetComponent,\n              widgetName: 'presetsList'\n            },\n            this.rxFeatureService.isFeatureEnabled(RX_SHARABLE_VIEW_RESETS_FEATURE_NAME)\n              ? {\n                  name: 'enableSharing',\n                  component: SwitchFormControlComponent,\n                  options: {\n                    label: 'Enable sharing'\n                  } as ISwitcherFormControlOptions\n                }\n              : null,\n            getAvailableOnDevicesInspectorConfig(),\n            getStylesFieldInspectorConfig()\n          ].filter(Boolean)\n        }\n      ]\n    };\n  }\n\n  private validate(\n    model: IViewPresetSelectorDesignProperties,\n    presetGuids: string[],\n    otherPresetSelectorsNames: string[]\n  ): IViewComponentDesignValidationIssue[] {\n    let validationIssues = [];\n\n    const trimmedModelName = model.name.trim();\n\n    if (!trimmedModelName) {\n      validationIssues.push(this.sandbox.createError('Name cannot be blank.', 'name'));\n    } else if (otherPresetSelectorsNames.includes(trimmedModelName)) {\n      validationIssues.push(this.sandbox.createError('Name must be unique.', 'name'));\n    }\n\n    if (!presetGuids.length) {\n      validationIssues.push(this.sandbox.createError('At least one view preset must be added.', 'presetsList'));\n    }\n\n    validationIssues = validationIssues.concat(validateStandardProps(model));\n\n    return validationIssues;\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { ViewPresetSelectorDesignModel } from './view-preset-selector-design.model';\n\n@Component({\n  selector: 'rx-view-preset-selector-design',\n  templateUrl: './view-preset-selector-design.component.html',\n  styleUrls: ['./view-preset-selector-design.component.scss']\n})\nexport class ViewPresetSelectorDesignComponent {\n  @Input()\n  model: ViewPresetSelectorDesignModel;\n}\n","<button\n  class=\"dropdown-toggle text-default font-weight-bold text-left\"\n  adapt-button\n  btn-type=\"tertiary\"\n  type=\"button\"\n  readonly\n>\n  {{ model.label$ | async }}\n</button>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PresetsListWidgetComponent } from './presets-list-widget.component';\nimport { AdaptRxListBuilderModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [PresetsListWidgetComponent],\n  exports: [PresetsListWidgetComponent],\n  imports: [CommonModule, AdaptRxListBuilderModule, FormsModule]\n})\nexport class PresetsListWidgetModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ViewPresetSelectorDesignComponent } from './view-preset-selector-design.component';\nimport { PresetsListWidgetModule } from './presets-list-widget/presets-list-widget.module';\nimport { AdaptButtonModule } from '@bmc-ux/adapt-angular';\n\n@NgModule({\n  imports: [CommonModule, PresetsListWidgetModule, AdaptButtonModule],\n  declarations: [ViewPresetSelectorDesignComponent],\n  entryComponents: [ViewPresetSelectorDesignComponent]\n})\nexport class ViewPresetSelectorDesignModule {}\n","import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_DESC,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RX_VIEW_DESIGNER } from '@helix/platform/view/designer';\nimport { ViewPresetSelectorComponent } from './runtime/view-preset-selector.component';\nimport { ViewPresetSelectorModule } from './runtime/view-preset-selector.module';\nimport { ViewPresetSelectorDesignComponent } from './design/view-preset-selector-design.component';\nimport { ViewPresetSelectorDesignModel } from './design/view-preset-selector-design.model';\nimport { ViewPresetSelectorDesignModule } from './design/view-preset-selector-design.module';\n\n@NgModule({\n  imports: [ViewPresetSelectorDesignModule, ViewPresetSelectorModule]\n})\nexport class ViewPresetSelectorRegistrationModule {\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    rxViewComponentRegistryService.register(\n      {\n        type: RxViewComponentType.ViewPresetSelector,\n        componentFactory: this.componentFactoryResolver.resolveComponentFactory(ViewPresetSelectorComponent),\n        properties: [\n          {\n            name: 'styles'\n          },\n          {\n            name: 'enableSharing',\n            type: ViewComponentPropertyType.Boolean,\n            designType: ViewComponentPropertyType.Boolean\n          },\n          RX_AVAILABLE_ON_DEVICES_PROP_DESC\n        ],\n        isContainerComponent: true,\n        name: 'View preset selector',\n        group: RX_VIEW_DESIGNER.stencilGroups.basicComponents.label,\n        icon: 'screens_triangle_down_circle',\n        designComponentFactory: this.componentFactoryResolver.resolveComponentFactory(\n          ViewPresetSelectorDesignComponent\n        ),\n        designComponentModel: ViewPresetSelectorDesignModel,\n        bundleId: RX_APPLICATION.platformBundleId\n      },\n      {\n        type: RxViewComponentType.ViewPreset,\n        configPropertyName: 'viewPresets',\n        isDataComponent: true,\n        properties: [\n          {\n            name: 'label',\n            localizable: true\n          },\n          {\n            name: 'index',\n            designType: ViewComponentPropertyType.Number,\n            type: ViewComponentPropertyType.Number\n          }\n        ]\n      }\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { RX_APPLICATION, RxNotificationService } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_GAINSIGHT, RxGainsightConfiguratorService } from '@helix/platform/shared/components';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { map, take, shareReplay, switchMap, filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-gainsight-admin-opt-in',\n  templateUrl: './gainsight-admin-opt-in.component.html',\n  styleUrls: ['./gainsight-admin-opt-in.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GainsightAdminOptInComponent extends BaseViewComponent implements OnInit {\n  deploymentTypeOptions: RxSelectOption[] = RX_GAINSIGHT.deploymentTypes;\n  environmentTypeOptions: string[] = RX_GAINSIGHT.environmentTypes;\n  deploymentType: string[];\n  environmentType: string[];\n\n  vm$ = this.rxGainsightConfiguratorService.getGainsightConfiguration(RX_APPLICATION.innovationStudioBundleId).pipe(\n    take(1),\n    filter((config) => Boolean(config)),\n    map((config) => config.settings),\n    map((settings) => ({\n      deploymentTypeOptions: this.deploymentTypeOptions.filter(\n        (deploymentType) => deploymentType.name === settings.deploymentType\n      ),\n      environmentTypeOptions: [settings.environmentType],\n      useAdaptRadar: settings.useAdaptRadar,\n      loadGainsightFromBmcIt: settings.loadGainsightFromBmcIt,\n      adaptAgreementState: {\n        organizationPerformance: settings.enableGainsight,\n        accountMarketing: false,\n        accountPerformance: false,\n        organizationMarketing: false\n      }\n    })),\n    shareReplay(1)\n  );\n\n  constructor(\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxGainsightConfiguratorService: RxGainsightConfiguratorService\n  ) {\n    super();\n  }\n\n  optionFormatter(deploymentType: RxSelectOption): string {\n    return deploymentType.name;\n  }\n\n  save(): void {\n    this.vm$\n      .pipe(\n        take(1),\n        map((vm) => ({\n          ...vm,\n          deploymentType: vm.deploymentTypeOptions[0].id,\n          environmentType: vm.environmentTypeOptions[0],\n          enableGainsight: vm.adaptAgreementState.organizationPerformance\n        })),\n        switchMap((gainsightSettings) =>\n          this.rxGainsightConfiguratorService.saveGainsightConfiguration(gainsightSettings)\n        )\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.gainsight.gainsight-settings-saved.success.message')\n        );\n      });\n  }\n}\n","<ng-container class=\"p-0\" *ngIf=\"vm$ | async as vm; else emptyStateTemplate\">\n  <div class=\"mt-1 container\">\n    <h1>\n      <span class=\"text-logo\">{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.title' | translate }}</span>\n    </h1>\n\n    <div>\n      <adapt-agreement-card\n        [showOrganizationSettings]=\"true\"\n        [showMarketingSection]=\"false\"\n        [multiProductUsage]=\"false\"\n        [showShadow]=\"false\"\n        rx-id=\"enable-gainsight\"\n        [(state)]=\"vm.adaptAgreementState\"\n      >\n      </adapt-agreement-card>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\" [hidden]=\"true\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"Use ADAPT Radar\"\n        [(ngModel)]=\"vm.useAdaptRadar\"\n        name=\"useAdaptRadar\"\n        rx-id=\"use-adapt-radar\"\n      ></adapt-rx-switch>\n    </div>\n\n    <div class=\"pt-4 pl-0 col-md-4\">\n      <adapt-rx-switch\n        [isLabelBefore]=\"true\"\n        [size]=\"'lg'\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.gainsight.gainsight-settings.load-gainsight-script-from-bmc-it.label' | translate\n        }}\"\n        [(ngModel)]=\"vm.loadGainsightFromBmcIt\"\n        name=\"loadGainsightFromBmcIt\"\n        rx-id=\"load-gainsight-from-bmc\"\n      ></adapt-rx-switch>\n    </div>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.deployment-type.label' | translate }}\"\n      [options]=\"deploymentTypeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"vm.deploymentTypeOptions\"\n      name=\"deploymentType\"\n      rx-id=\"deployment-type\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"col-md-3 pt-4 pl-0\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.gainsight-settings.environment-type.label' | translate }}\"\n      [options]=\"environmentTypeOptions\"\n      [(ngModel)]=\"vm.environmentTypeOptions\"\n      name=\"environmentType\"\n      rx-id=\"environment-type\"\n    >\n    </adapt-rx-select>\n\n    <div class=\"modal-footer mt-4\">\n      <button rx-id=\"save-button\" adapt-button btn-type=\"primary\" type=\"button\" (click)=\"save()\" rx-id=\"save-button\">\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #emptyStateTemplate>\n  <div class=\"d-flex align-items-center justify-content-center h-100\">\n    <adapt-empty-state\n      class=\"w-100\"\n      label=\"{{ 'com.bmc.arsys.rx.client.gainsight.feature-is-disabled.label' | translate }}\"\n      type=\"config\"\n    ></adapt-empty-state>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GainsightAdminOptInComponent } from './gainsight-admin-opt-in.component';\nimport {\n  AdaptAgreementModule,\n  AdaptRxSelectModule,\n  AdaptRxSwitchModule,\n  AdaptButtonModule,\n  AdaptEmptyStateModule\n} from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [GainsightAdminOptInComponent],\n  imports: [\n    TranslateModule,\n    AdaptAgreementModule,\n    AdaptRxSelectModule,\n    FormsModule,\n    AdaptRxSwitchModule,\n    CommonModule,\n    AdaptButtonModule,\n    AdaptEmptyStateModule\n  ],\n  entryComponents: [GainsightAdminOptInComponent]\n})\nexport class GainsightAdminOptInRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      type: 'rx-gainsight-admin-opt-in',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(GainsightAdminOptInComponent),\n      name: 'Gainsight Admin Opt In',\n      hidden: true,\n      availableInBundles: [RX_APPLICATION.settingsBundleId]\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ActionButtonRegistrationModule } from './action-button/action-button-registration.module';\nimport { ButtonBarRegistrationModule } from './button-bar/button-bar-registration.module';\nimport { ContainerRegistrationModule } from './container/container-registration.module';\nimport { FieldComponentsModule } from './field-components/field-components.module';\nimport { ImageRegistrationModule } from './image/image-registration.module';\nimport { PageRegistrationModule } from './page/page-registration.module';\nimport { RecordEditorRegistrationModule } from './record-editor/record-editor-registration.module';\nimport { RecordGridRegistrationModule } from './record-grid/record-grid-registration.module';\nimport { RichTextRegistrationModule } from './rich-text/rich-text-registration.module';\nimport { TabPanelRegistrationModule } from './tab-panel/tab-panel-registration.module';\nimport { ServiceListRegistrationModule } from './service-list/service-list-registration.module';\nimport { UnknownRegistrationModule } from './unknown/unknown-registration.module';\nimport { ChatbotUserMappingRegistrationModule } from './rx.settings/chatbot-user-mapping/chatbot-user-mapping-registration.module';\nimport { IframeLoginEventRegistrationModule } from './rx.settings/iframe-login-event/iframe-login-event-registration.module';\nimport { SmartReportingRedirectorRegistrationModule } from './rx.settings/smart-reporting-redirector/smart-reporting-redirector-registration.module';\nimport { ViewPresetSelectorRegistrationModule } from './view-preset-selector/view-preset-selector-registration.module';\nimport { GainsightAdminOptInRegistrationModule } from './rx.settings/gainsight/gainsight-admin-opt-in/gainsight-admin-opt-in-registration.module';\n@NgModule({\n  imports: [\n    ActionButtonRegistrationModule,\n    ButtonBarRegistrationModule,\n    ChatbotUserMappingRegistrationModule,\n    ContainerRegistrationModule,\n    RecordEditorRegistrationModule,\n    FieldComponentsModule,\n    IframeLoginEventRegistrationModule,\n    RecordGridRegistrationModule,\n    RichTextRegistrationModule,\n    TabPanelRegistrationModule,\n    PageRegistrationModule,\n    ImageRegistrationModule,\n    ServiceListRegistrationModule,\n    SmartReportingRedirectorRegistrationModule,\n    UnknownRegistrationModule,\n    ViewPresetSelectorRegistrationModule,\n    GainsightAdminOptInRegistrationModule\n  ]\n})\nexport class ViewComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map","filter","map","first","SelectGroupFieldComponent","_filter","_toString"],"mappings":"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"}