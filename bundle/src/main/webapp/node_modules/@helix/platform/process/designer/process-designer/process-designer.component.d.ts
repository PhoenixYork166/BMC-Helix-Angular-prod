import { EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { CdkDragDrop } from '@angular/cdk/drag-drop/drag-events';
import { TranslateService } from '@ngx-translate/core';
import { AdaptSidebarComponent } from '@bmc-ux/adapt-angular';
import { Observable } from 'rxjs';
import { IValidationIssue } from '@helix/platform/ui-kit';
import { RxGuidService, RxIdService } from '@helix/platform/utils';
import { IDesignerConfiguration, IPlainObject, RxBundleCacheService, RxCommandManagerService, RxDesignerCacheService, RxGlobalCacheService, RxOverlayService } from '@helix/platform/shared/api';
import { RxProcessDataDictionaryService, RxProcessDefinitionService, RxProcessElementRegistryService, RxProcessElementSearchService } from '@helix/platform/process/api';
import { IProcessDefinitionModel, RxProcessService } from '@helix/platform/process/elements';
import { RxProcessDesignerService } from './process-designer.service';
import { RxProcessDesignerGraph } from './process-designer-graph.class';
import * as i0 from "@angular/core";
export declare class ProcessDesignerComponent implements OnInit, OnChanges, OnDestroy {
    private readonly injector;
    private readonly rxBundleCacheService;
    private readonly rxCommandManagerService;
    private readonly rxDesignerCacheService;
    private readonly rxGlobalCacheService;
    private readonly rxGuidService;
    private readonly rxIdService;
    private readonly rxOverlayService;
    private readonly rxProcessDataDictionaryService;
    private readonly rxProcessDefinitionService;
    private readonly rxProcessDesignerService;
    private readonly rxProcessElementRegistryService;
    private readonly rxProcessElementSearchService;
    private readonly rxProcessService;
    private readonly translateService;
    configuration: IDesignerConfiguration;
    closeDesigner: EventEmitter<void>;
    definitionErrorLoading: EventEmitter<void>;
    definitionSaved: EventEmitter<string>;
    inspectorSidebar: AdaptSidebarComponent;
    droppedElement: CdkDragDrop<any>;
    private bundleIdSubject;
    private definitionModelChangeSubject;
    private selectedElementModelChangeSubject;
    private definitionNameSubject;
    private destroyed$;
    private focusDefinitionInspectorSubject;
    private focusSelectedElementInspectorSubject;
    private graph;
    private graphChangeSubject;
    private graphChange$;
    private isDesignModeSubject;
    private selectedElementGuidSubject;
    private selectedElementGuid$;
    private paletteElementsTree$;
    private definition$;
    private isReadOnly$;
    private definitionModelFromDefinition$;
    private graph$;
    private definitionModelFromGraph$;
    private definitionModel$;
    private definitionInspectorConfig$;
    private selectedElementModelFromDefinition$;
    private selectedElementModelFromGraph$;
    private selectedElementModel$;
    private selectedElementInspectorConfig$;
    private definitionForCodeViewer$;
    private bundleFriendlyName$;
    private canvasConfiguration$;
    private breadcrumbItems$;
    private elementValidationIssueSections$;
    private processValidationIssueSection$;
    private validationIssueSections$;
    private hasValidationErrors$;
    private isSaveButtonDisabled$;
    selectedElementInspectorDesignerItemModel$: Observable<{
        elementModel: any;
        graph: RxProcessDesignerGraph;
    }>;
    focusDefinitionInspector$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    focusSelectedElementInspector$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    vm$: Observable<{
        breadcrumbItems: any;
        bundleFriendlyName: any;
        canvasConfiguration: any;
        definitionForCodeViewer: any;
        definitionInspectorConfig: any;
        definitionModel: any;
        graph: any;
        hasValidationErrors: any;
        isReadOnly: any;
        isSaveButtonDisabled: any;
        paletteElementsTree: any;
        selectedElementInspectorConfig: any;
        selectedElementModel: any;
        validationIssueSections: any;
    }>;
    constructor(injector: Injector, rxBundleCacheService: RxBundleCacheService, rxCommandManagerService: RxCommandManagerService, rxDesignerCacheService: RxDesignerCacheService, rxGlobalCacheService: RxGlobalCacheService, rxGuidService: RxGuidService, rxIdService: RxIdService, rxOverlayService: RxOverlayService, rxProcessDataDictionaryService: RxProcessDataDictionaryService, rxProcessDefinitionService: RxProcessDefinitionService, rxProcessDesignerService: RxProcessDesignerService, rxProcessElementRegistryService: RxProcessElementRegistryService, rxProcessElementSearchService: RxProcessElementSearchService, rxProcessService: RxProcessService, translateService: TranslateService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    canDeactivate(): boolean;
    onBreadcrumbSelected(guid: string): void;
    onCanvasElementSelected(guid: string): void;
    onCorrectIssue(validationIssue: IValidationIssue): void;
    onDefinitionInspectorInitialized(): void;
    onDefinitionModelChange(definitionModel: IProcessDefinitionModel): void;
    onPaletteElementDropped(dropData: CdkDragDrop<any>): void;
    onSelectedElementModelChange(selectedElementModel: any): void;
    saveDefinition(): void;
    toggleDesignMode(): void;
    private openInspectorSidebarPanel;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProcessDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProcessDesignerComponent, "rx-process-designer", never, { "configuration": "configuration"; }, { "closeDesigner": "closeDesigner"; "definitionErrorLoading": "definitionErrorLoading"; "definitionSaved": "definitionSaved"; }, never, never>;
}
