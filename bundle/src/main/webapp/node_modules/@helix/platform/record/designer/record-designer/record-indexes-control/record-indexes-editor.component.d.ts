import { AfterViewInit, Injector, OnInit } from '@angular/core';
import { ActiveModalRef, RxSelectOption } from '@bmc-ux/adapt-angular';
import { RxModalClass } from '@helix/platform/ui-kit';
import { RecordIndexesEditorStore } from './record-indexes-editor.store';
import { RxGuidService } from '@helix/platform/utils';
import { IFieldState, IIndexEditorState, IIndexesEditorOptions, IIndexState } from './record-indexes-control.types';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class RecordIndexesEditorComponent extends RxModalClass implements OnInit, AfterViewInit {
    private recordIndexesEditorStore;
    private rxGuidService;
    private activeModalRef;
    protected injector: Injector;
    private accordionTabEls;
    isReadOnly: any;
    indexesEditorOptions: IIndexesEditorOptions;
    vm$: Observable<IIndexEditorState>;
    constructor(recordIndexesEditorStore: RecordIndexesEditorStore, rxGuidService: RxGuidService, activeModalRef: ActiveModalRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    cancel(): void;
    addIndex(): void;
    updateIndexUniqueValue(index: IIndexState, unique: boolean): void;
    updateIndexIgnoreBlankValue(index: IIndexState, ignoreBlankValues: boolean): void;
    removeIndex(guid: string): void;
    moveToSelected(index: IIndexState): void;
    moveToAvailable(index: IIndexState): void;
    onAvailableFieldsChange(checkedFields: IFieldState[], index: IIndexState): void;
    onSelectedFieldsChange(fields: IFieldState[], index: IIndexState): void;
    onDragEnd(): void;
    onFieldRemove(removedField: IFieldState, index: IIndexState): void;
    save(): void;
    expandAll(): void;
    collapseAll(): void;
    trackByIndex($index: number): number;
    optionFormatter(field: RxSelectOption): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RecordIndexesEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RecordIndexesEditorComponent, "rx-record-indexes-editor", never, {}, {}, never, never>;
}
