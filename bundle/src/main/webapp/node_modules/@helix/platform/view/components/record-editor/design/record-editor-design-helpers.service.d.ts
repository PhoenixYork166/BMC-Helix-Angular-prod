import { IFieldDefinition, IRecordDefinition, RxFieldDefinitionService, RxRecordDefinitionCacheService } from '@helix/platform/record/api';
import { Observable } from 'rxjs';
import { RecordEditorMode } from '../common/record-editor.types';
import { IViewComponentDesignData, IViewComponentDesignSandbox, IViewComponentDesignValidationIssue, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';
import { ISelectOption } from '@helix/platform/shared/components';
import { RxModalService } from '@helix/platform/ui-kit';
import { IRecordFieldDefinitionItem } from './components/fields-inspector-widget/fields-inspector-widget.types';
import { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';
import { IPlainObject, RxDefinitionNameService } from '@helix/platform/shared/api';
import { IViewDefinition, RxViewComponentRegistryService, RxViewDefinitionCacheService, RxViewDefinitionParserService } from '@helix/platform/view/api';
import { RxAssociationDefinitionDataPageService } from '@helix/platform/association/api';
import { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';
import * as i0 from "@angular/core";
export declare class RxRecordEditorDesignHelpersService {
    private rxRecordDefinitionCacheService;
    private rxModalService;
    private rxFieldDefinitionService;
    private rxViewDefinitionCacheService;
    private rxAssociationDefinitionDataPageService;
    private rxDefinitionNameService;
    private rxViewComponentRegistryService;
    private rxViewDefinitionParserService;
    constructor(rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxModalService: RxModalService, rxFieldDefinitionService: RxFieldDefinitionService, rxViewDefinitionCacheService: RxViewDefinitionCacheService, rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService, rxDefinitionNameService: RxDefinitionNameService, rxViewComponentRegistryService: RxViewComponentRegistryService, rxViewDefinitionParserService: RxViewDefinitionParserService);
    getRecordFieldDefinitionItems(recordDefinition: IRecordDefinition): IRecordFieldDefinitionItem[];
    getViewComponentType(fieldDefinition: IFieldDefinition): string;
    getComponentProperties(properties: IRecordEditorDesignProperties): IRecordEditorProperties;
    getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition>;
    validate(sandbox: IViewComponentDesignSandbox, properties: IRecordEditorProperties, recordDefinition: IRecordDefinition, childFieldIds: string[], isAssociationRequired?: boolean, isExtensionView?: boolean): IViewComponentDesignValidationIssue[];
    getViewDefinition(viewDefinitionName: string): Observable<IViewDefinition>;
    getInspector(recordDefinitionName: string, mode: RecordEditorMode, showReadOnlyState: boolean, recordFieldDefinitionItems: IRecordFieldDefinitionItem[], isExtensionView: boolean, associationOptions: ISelectOption[], isAssociationRequired: boolean, onBeforeModeChange: () => Promise<boolean>): IViewDesignerInspectorConfig;
    getAssociationOptions(firstRecordDefinitionName: string, secondRecordDefinitionName: string): Observable<ISelectOption[]>;
    getAssociations(firstRecordDefinitionName: string, secondRecordDefinitionName: string): Observable<any>;
    getTargetRecordEditorProperties(viewDefinition: IViewDefinition, targetExtensionContainerGuid: string): IPlainObject;
    confirmSystemFieldRemoval(): Observable<boolean>;
    getSystemFieldModelGuids(plainFieldModels: IViewComponentDesignData<IBaseRecordEditorFieldProperties>[], recordDefinition: IRecordDefinition): string[];
    isFieldComponent(component: IViewComponentDesignData): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxRecordEditorDesignHelpersService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RxRecordEditorDesignHelpersService>;
}
