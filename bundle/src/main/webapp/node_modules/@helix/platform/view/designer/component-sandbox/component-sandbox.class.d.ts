import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { IPlainObject } from '@helix/platform/shared/api';
import { IViewDesignModel } from '../interfaces/view-design-model.interface';
import { IViewComponentDesignCommonDataDictionaryBranch, IViewComponentDesignSetPayload, IViewComponentDesignValidationIssue, IViewDesignerInspectorConfig, ViewComponentAddComponentPayload } from '../public-interfaces';
import { IViewComponentDesignData } from '../public-interfaces/view-component-design.types';
import { IViewComponentDesignSandbox } from '../public-interfaces/view-component-design-sandbox.interface';
import { IViewComponentDesignSettablePropertiesDataDictionary } from '../public-interfaces/view-component-design-settable-properties-data-dictionary.interfaces';
import { IViewComponentDescriptor, IViewDesignerComponentModel, IViewLayout } from '@helix/platform/view/api';
export declare class ComponentSandbox implements IViewComponentDesignSandbox {
    private injector;
    guid: string;
    readonly descriptor: IViewComponentDescriptor;
    componentProperties$: Observable<IPlainObject>;
    isComponentSelected$: Observable<boolean>;
    destroyed$: Observable<boolean>;
    viewModelsInitialized$: Observable<any>;
    isViewReadOnly$: Observable<boolean>;
    componentType: string;
    private viewDesignerFacade;
    private systemActions$;
    private viewDesignerDispatcher;
    private rxViewDesignerModels;
    private childModelsInitialized$;
    private dispatcher$;
    private breadcrumbs$;
    constructor(injector: Injector, guid: string, descriptor: IViewComponentDescriptor);
    createError(description: string, propertyName?: string, disableCorrection?: boolean): IViewComponentDesignValidationIssue;
    createWarning(description: string, propertyName?: string, disableCorrection?: boolean): IViewComponentDesignValidationIssue;
    getComponent<TChildComponentDesignProperties = IPlainObject>(guid: string): Observable<IViewComponentDesignData<TChildComponentDesignProperties>>;
    getChildComponents<T = IPlainObject>(filterPredicate?: (component: IViewComponentDesignData) => boolean): Observable<Omit<IViewComponentDesignData<T>, 'children'>[]>;
    getChildComponentsTree(): Observable<IViewComponentDesignData[]>;
    getChildComponentGuids(filterPredicate?: (component: IViewComponentDesignData) => boolean, recursive?: boolean): Observable<string[]>;
    setChildren(data: IViewComponentDesignSetPayload[], parentGuid?: string): void;
    setChildrenByType(data: IViewComponentDesignSetPayload[], types: string[]): void;
    getParentComponentGuid(componentType?: string): Observable<string>;
    setValidationIssues(issues: IViewComponentDesignValidationIssue[]): void;
    updateComponentProperties(properties: IPlainObject): void;
    getComponentPropertyValue<TPropertyName extends keyof IPlainObject>(propertyName: TPropertyName, componentGuid?: string): Observable<any>;
    getViewPropertyValue<T extends keyof IViewDesignModel>(propertyName: T): Observable<IViewDesignModel[T]>;
    updateInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): void;
    setBreadcrumbs(label: string): void;
    addComponent(data: ViewComponentAddComponentPayload | ViewComponentAddComponentPayload[]): void;
    selectComponent(guid: string): void;
    removeComponents(guids: string[], selectParent?: boolean): void;
    moveComponent(guid: string, insertIndex: number, targetGuid?: string): void;
    setLayout(cols: number[]): void;
    getLayout(guid: string): Observable<IViewLayout>;
    setCommonDataDictionary(dataDictionaryBranch: IViewComponentDesignCommonDataDictionaryBranch): void;
    setSettablePropertiesDataDictionary(componentName: string, dataDictionary: IViewComponentDesignSettablePropertiesDataDictionary): void;
    getComponentModel<T extends IViewDesignerComponentModel>(guid: string): T;
    getComponentsByType<TComponentDesignProperties>(type: string): Observable<IViewComponentDesignData<TComponentDesignProperties>[]>;
    private setUpPublicStreams;
}
