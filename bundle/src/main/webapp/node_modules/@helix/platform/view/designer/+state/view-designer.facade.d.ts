import { IDataDictionaryBranch, IPlainObject, RxOverlayService } from '@helix/platform/shared/api';
import { RxGuidService } from '@helix/platform/utils';
import { IViewActionOutputDataDictionary, IViewDefinitionPermission, IViewLayout } from '@helix/platform/view/api';
import { Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { IViewComponentDropData } from '../components/view-designer-canvas';
import { RxViewDataDictionaryBuilderService } from '../core/view-data-dictionary-builder.service';
import { RxViewDataDictionaryStoreService } from '../core/view-data-dictionary-store.service';
import { RxViewDesignerInspectorService } from '../core/view-designer-inspector.service';
import { IViewComponentDesignModel } from '../interfaces/view-component-design-model.interface';
import { IViewComponentDesignModels } from '../interfaces/view-component-design-models.interface';
import { IViewDesignModel } from '../interfaces/view-design-model.interface';
import { IViewComponentDesignData, IViewComponentDesignSetPayload, IViewComponentDesignValidationIssue, IViewDesignerInspectorConfig } from '../public-interfaces';
import { IViewComponentDesignSettablePropertiesDataDictionary } from '../public-interfaces/view-component-design-settable-properties-data-dictionary.interfaces';
import { ViewDesignerDispatcher } from './view-designer-dispatcher.service';
import { IInitViewDesignerActionPayload } from './view-designer.types';
import * as i0 from "@angular/core";
export declare class ViewDesignerFacade {
    private dispatcher;
    private store$;
    private actions$;
    private rxViewDesignerInspectorService;
    private rxGuidService;
    private rxViewDataDictionaryBuilderService;
    private rxViewDataDictionaryService;
    private rxOverlayService;
    viewDefinition$: Observable<import("@helix/platform/view/api").IViewDefinition>;
    validationIssues$: Observable<import("./view-designer-validation.reducer").IViewDesignerValidationState>;
    breadcrumbs$: Observable<import("./view-designer-breadcrumbs.reducer").IViewDesignerBreadcrumbsState>;
    viewDesignerModelState$: Observable<import("../interfaces/view-design-model-state.interface").IViewDesignModelState>;
    viewModel$: Observable<IViewDesignModel>;
    viewModelGuid$: Observable<string>;
    viewComponentModels$: Observable<IViewComponentDesignModels>;
    firstViewComponentModelType$: Observable<string>;
    isExtensionView$: Observable<boolean>;
    isExtensionContainerSet$: Observable<boolean>;
    allComponentGuids$: Observable<Set<string>>;
    selectedComponentGuid$: Observable<string>;
    selectedComponentProperties$: Observable<IViewComponentDesignModel['propertiesByName']>;
    isViewDefinitionLoading$: Observable<boolean>;
    selectedInspectorTabId$: Observable<number>;
    bundleFriendlyName$: Observable<string>;
    currentBundleId$: Observable<string>;
    viewInspectorLayout$: Observable<IViewDesignerInspectorConfig['inspectorSectionConfigs']>;
    selectedComponentInspectorLayout$: Observable<IViewDesignerInspectorConfig['inspectorSectionConfigs']>;
    isViewReadOnly$: Observable<boolean>;
    viewDefinitionLoadError$: Observable<import("@ngrx/store/src/models").TypedAction<"[View Designer] View Definition Load Error">>;
    viewDefinitionSaveSuccess$: Observable<{
        viewDefinitionName: string;
    } & import("@ngrx/store/src/models").TypedAction<"[View Designer] View Definition Save Success">>;
    initViewDesigner$: Observable<{
        payload: IInitViewDesignerActionPayload;
    } & import("@ngrx/store/src/models").TypedAction<"[View Designer] Init">>;
    private destroyViewDesignerSubject;
    destroyViewDesigner$: Observable<unknown>;
    viewModelsInitialized$: Observable<import("@ngrx/store/src/models").TypedAction<"[View Designer] View Models Initialized">>;
    areViewModelsReady$: Observable<boolean>;
    viewCommonDataDictionaryState$: Observable<import("../interfaces/view-designer-view-data-dictionary-state.interface").IViewDesignerViewCommonDataDictionaryState>;
    componentsCommonDataDictionaryState$: Observable<import("../interfaces/view-designer-components-data-dictionary-state.interface").IViewDesignerComponentsCommonDataDictionaryState>;
    actionsDataDictionaryState$: Observable<import("../interfaces/view-designer-action-output-data-dictionary-state.interface").IViewDesignerActionOutputDataDictionaryState[]>;
    settablePropertiesDataDictionaryState$: Observable<import("../interfaces/view-designer-settable-properties-data-dictionary.state").IViewDesignerSettablePropertiesDataDictionaryState>;
    private settablePropertiesDataDictionarySubject;
    constructor(dispatcher: ViewDesignerDispatcher, store$: Store<any>, actions$: Actions, rxViewDesignerInspectorService: RxViewDesignerInspectorService, rxGuidService: RxGuidService, rxViewDataDictionaryBuilderService: RxViewDataDictionaryBuilderService, rxViewDataDictionaryService: RxViewDataDictionaryStoreService, rxOverlayService: RxOverlayService);
    getComponentModel<TPropertiesByName>(guid: string): Observable<IViewComponentDesignModel<TPropertiesByName>>;
    initViewDesigner(payload: IInitViewDesignerActionPayload): void;
    destroyViewDesigner(): void;
    selectComponent(guid: string): void;
    insertComponent(payload: {
        data: IViewComponentDropData;
        insertIndex: number;
        outletName: string;
        targetGuid: string;
    }): void;
    selectInspectorTab(payload: {
        tabId: number;
    }): void;
    generateViewDefinition(payload?: any): void;
    updateComponentProperties(guid: string, componentProperties: IPlainObject): void;
    updateComponentModel(guid: string, payload: Partial<IViewComponentDesignModel>): void;
    getComponentProperties<TPropertiesByName = IPlainObject>(guid: string): Observable<TPropertiesByName & {
        name?: string;
    }>;
    getComponentPropertyValue<TPropertyName extends keyof TPropertiesByName, TPropertiesByName = IPlainObject>(guid: string, propertyName: TPropertyName): Observable<TPropertiesByName[TPropertyName]>;
    getComponentType(guid: string): Observable<string>;
    getComponentPermissions(guid: string): Observable<IViewDefinitionPermission[]>;
    getComponentLayout(guid: string): Observable<IViewLayout>;
    updateSelectedComponentProperties(properties: IPlainObject): void;
    saveViewDefinition(payload?: any): void;
    updateViewProperties(properties: Partial<IViewDesignModel>): void;
    setViewProperties(properties: IViewDesignModel): void;
    getViewPropertyValue<T extends keyof IViewDesignModel>(propertyName: T): Observable<IViewDesignModel[T]>;
    runPreview(): void;
    clearCanvas(): void;
    setComponentInspector(guid: string, inspectorConfig: IViewDesignerInspectorConfig): void;
    setValidationIssues(guid: string, issues: IViewComponentDesignValidationIssue[]): void;
    setExpressionValidationIssues(issues: {
        [guid: string]: IViewComponentDesignValidationIssue[];
    }): void;
    setViewInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): void;
    removeViewComponents(guids: string[], selectParent?: boolean): void;
    setComponentSettablePropertiesDataDictionary(guid: string, componentName: string, properties: IViewComponentDesignSettablePropertiesDataDictionary): void;
    setComponentCommonDataDictionaryBranch(guid: string, dataDictionaryBranch: IDataDictionaryBranch): void;
    setViewCommonDataDictionaryBranch(dataDictionaryBranch: IDataDictionaryBranch): void;
    removeAllActionDataDictionaryBranches(): void;
    removeActionDataDictionaryBranch(actionGuid: string): void;
    setActionDataDictionaryBranch(actionGuid: string, index: number, actionName: string, dataDictionary?: IViewActionOutputDataDictionary): void;
    updateActionDataDictionaryBranchOrder(actions: {
        [guid: string]: number;
    }): void;
    getChildComponentGuids(parentComponentGuid: any, recursive?: boolean, filterPredicate?: (component: IViewComponentDesignData) => boolean): Observable<string[]>;
    getChildComponents<TPropertiesByName = IPlainObject>(parentComponentGuid: string, filterPredicate?: (component: IViewComponentDesignData) => boolean): Observable<IViewComponentDesignData<TPropertiesByName>[]>;
    getComponent<TChildComponentDesignProperties>(guid: string): Observable<IViewComponentDesignData<TChildComponentDesignProperties>>;
    getComponentsByType<TComponentDesignProperties>(type: string): Observable<IViewComponentDesignData<TComponentDesignProperties>[]>;
    getChildComponentTree(parentComponentGuid: string): Observable<IViewComponentDesignData[]>;
    getParentComponentGuid(guid: string, componentType?: string): Observable<string>;
    setChildren(guid: string, data: IViewComponentDesignSetPayload[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ViewDesignerFacade, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ViewDesignerFacade>;
}
