import { OnInit } from '@angular/core';
import { ValidatorFn } from '@angular/forms';
import { IRxRecordInstanceAssociationInstances, RxRecordDefinitionService, RxRecordInstanceService, RxRecordInstanceUpdateService, RxRecordInstanceUtilsService } from '@helix/platform/record/api';
import { RxGlobalEventsService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';
import { RxUtilityModalsService } from '@helix/platform/ui-kit';
import { RxStringService } from '@helix/platform/utils';
import { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';
import { RecordEditorMode } from '../common/record-editor.types';
import { RxAssociationManagerService } from './association-manager.class';
import { RecordEditorFormControl } from './record-editor-form-control.class';
import { RecordEditorForm } from './record-editor-form.class';
import { IAssociationManagerConfig, IRecordEditorApi, IRecordEditorConfig, IRecordEditorState, IRxAssociationManagerMap } from './record-editor.types';
import * as i0 from "@angular/core";
export declare class RecordEditorComponent extends BaseViewComponent implements OnInit, IRecordEditorApi {
    private rxRecordInstanceService;
    private rxRecordInstanceUpdateService;
    private translateService;
    private rxGlobalEventsService;
    private rxNotificationService;
    private rxRecordDefinitionService;
    private rxRecordEditorUtilsService;
    private rxRecordInstanceUtilsService;
    private rxStringService;
    private rxLogService;
    private rxUtilityModalsService;
    private rxAssociationManagerServiceFactory;
    config: Observable<IRecordEditorConfig>;
    runtimeViewModelApi: RuntimeViewModelApi;
    api: IRecordEditorApi;
    state: IRecordEditorState;
    private recordInstanceChangedSubject;
    private notReadyComponentIds;
    associationManagers: IRxAssociationManagerMap;
    associationInstances: IRxRecordInstanceAssociationInstances;
    recordInstanceChanged$: Observable<void>;
    constructor(rxRecordInstanceService: RxRecordInstanceService, rxRecordInstanceUpdateService: RxRecordInstanceUpdateService, translateService: TranslateService, rxGlobalEventsService: RxGlobalEventsService, rxNotificationService: RxNotificationService, rxRecordDefinitionService: RxRecordDefinitionService, rxRecordEditorUtilsService: RxRecordEditorUtilsService, rxRecordInstanceUtilsService: RxRecordInstanceUtilsService, rxStringService: RxStringService, rxLogService: RxLogService, rxUtilityModalsService: RxUtilityModalsService, recordEditorForm: RecordEditorForm, rxAssociationManagerServiceFactory: any);
    ngOnInit(): void;
    downloadAttachment(fieldId: number): void;
    getAttachmentDownloadUrl(fieldId: number): string;
    getAssociationManager(options: IAssociationManagerConfig): RxAssociationManagerService;
    markAsDirty(): void;
    refresh(): Observable<never>;
    isDirty(): boolean;
    isReady(): boolean;
    notifyComponentReady(componentId: string, isReady: boolean): void;
    setProperty(propertyPath: string, propertyValue: any): void | Observable<never>;
    setFieldValue(fieldId: number, value: any, associatedRecordPath?: string[], options?: {
        markAsDirty?: boolean;
        markAsTouched?: boolean;
    }): void;
    getFieldValue(fieldId: number, associatedRecordPath?: string[]): void;
    save(closeViewAfterSave?: boolean): Observable<never>;
    getFieldControl(fieldId: number, guid: string, validator?: ValidatorFn | ValidatorFn[], associatedRecordPath?: string[]): RecordEditorFormControl;
    getPermissionType(fieldId: number, associatedRecordPath?: string[]): string;
    getFieldInstanceProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any;
    getRecordEditorMode(): RecordEditorMode;
    setFieldInstanceProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void;
    isValid(): boolean;
    switchToEditState(): void;
    isEditStateAvailable(): boolean;
    isSaveButtonAvailable(): boolean;
    isSaveButtonDisabled(): boolean;
    isCancelButtonAvailable(): boolean;
    private cancel;
    canSave(): boolean;
    isConfigValid(): boolean;
    onSaveClick(): void;
    onCancelClick(): void;
    private initializeRecordInstance;
    private handleNoRecordFoundError;
    private updateIsDirtyProperty;
    private updateCanSaveProperty;
    private setRecordInstance;
    private getFieldInstanceControlValidator;
    private setRecordDefinition;
    private getRecordInstance;
    private getAssociationInstances;
    private setRecordEditorState;
    private isInCreateMode;
    private isInBulkEditMode;
    private isInEditMode;
    private isInTemporaryMode;
    private isNewAttachment;
    private updateSelectionFieldOptionNames;
    private syncRecordInstanceWithForm;
    private restoreRecordEditor;
    static ɵfac: i0.ɵɵFactoryDeclaration<RecordEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RecordEditorComponent, "rx-record-editor", never, { "config": "config"; "runtimeViewModelApi": "runtimeViewModelApi"; }, {}, never, never>;
}
