import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { RxGuidService } from '@helix/platform/utils';
import { RxModalService, RxUtilityModalsService } from '@helix/platform/ui-kit';
import { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';
import { IViewPresetSelectorConfig, IViewPresetSelectorDropdownOption, IViewPresetSelectorState } from './view-preset-selector.types';
import { RxViewPresetSelectorUserPreferencesService } from './view-preset-selector-user-preferences.service';
import { IViewPresetSelectorApi } from './view-preset-selector-api.interface';
import { RxFeatureService, RxNotificationService } from '@helix/platform/shared/api';
import { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';
import * as i0 from "@angular/core";
export declare class ViewPresetSelectorComponent extends BaseViewComponent implements OnInit, OnDestroy {
    private changeDetectorRef;
    private rxGuidService;
    private rxModalService;
    private rxUtilityModalsService;
    private rxViewPresetSelectorUserPreferencesService;
    private translateService;
    private rxFeatureService;
    private rxNotificationService;
    private rxShareViewPresetService;
    config: Observable<IViewPresetSelectorConfig>;
    runtimeViewModelApi: RuntimeViewModelApi;
    api: IViewPresetSelectorApi;
    private isOperationInProgressSubject;
    private isViewPresetEditedSubject;
    viewPresetSelectorModel$: Observable<{
        isOperationInProgress: boolean;
        isViewPresetEdited: boolean;
    }>;
    state: IViewPresetSelectorState;
    strings: {
        deleteLabel: any;
        discardChangesButtonLabel: any;
        editedViewPresetTagLabel: any;
        renameLabel: any;
        saveLabel: any;
        saveAsLabel: any;
        shareLabel: any;
        systemPresetsTitle: any;
        sharedPresetsTitle: any;
        customPresetsTitle: any;
        sharedTooltip: any;
        addSharedViewPresets: any;
    };
    private userPreferencesChangedSubject;
    isSharingFeatureEnabled: boolean;
    constructor(changeDetectorRef: ChangeDetectorRef, rxGuidService: RxGuidService, rxModalService: RxModalService, rxUtilityModalsService: RxUtilityModalsService, rxViewPresetSelectorUserPreferencesService: RxViewPresetSelectorUserPreferencesService, translateService: TranslateService, rxFeatureService: RxFeatureService, rxNotificationService: RxNotificationService, rxShareViewPresetService: RxShareViewPresetService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    deleteViewPreset(viewPresetOptionToRemove: IViewPresetSelectorDropdownOption): void;
    discardViewPresetChanges(): void;
    renameViewPreset(): void;
    selectPreset(viewPresetOption: IViewPresetSelectorDropdownOption): void;
    saveAsViewPreset(): void;
    saveViewPreset(): void;
    shareViewPreset(): void;
    onAddSharedPresetsClick(): void;
    private openAddSharedPresetsModal;
    private markAppliedViewPresetAsEdited;
    private openRenamingModal;
    private applyViewPreset;
    private saveSharedViewPreset;
    private getSharedViewPresetData;
    private handleSharedViewPresetLoadError;
    static ɵfac: i0.ɵɵFactoryDeclaration<ViewPresetSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ViewPresetSelectorComponent, "rx-view-preset-selector", never, { "config": "config"; "runtimeViewModelApi": "runtimeViewModelApi"; }, {}, never, never>;
}
