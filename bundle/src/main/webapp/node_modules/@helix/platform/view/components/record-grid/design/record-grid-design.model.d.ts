import { IAssociationDefinition } from '@helix/platform/association/api';
import { IRecordDefinition } from '@helix/platform/record/api';
import { IViewDesignerComponentModel } from '@helix/platform/view/api';
import { IViewComponentDesignData, IViewComponentDesignSandbox, IViewComponentDropPredicateData, ViewDesignerComponentModel } from '@helix/platform/view/designer';
import { Observable, Subject } from 'rxjs';
import { IActionButtonProperties } from '../../action-button/action-button.types';
import { IRecordGridDesignInspectorColumnConfig } from './editors/record-grid-column-editor-control/record-grid-column-editor.types';
import { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';
import { IRecordGridDesignProperties, IRecordGridProperties } from './record-grid-design.types';
import { IViewPresetSelectorDesignProperties } from '../../view-preset-selector/design/view-preset-selector-design.types';
import { IGridViewPresetProperties } from '../common/types/record-grid.types';
import { IPresetItem } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';
export declare class RecordGridDesignModel extends ViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties> implements IViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties> {
    private rxRecordDefinitionCacheService;
    private rxViewActionValidatorService;
    private rxRecordGridDesignUtilsService;
    private rxGuidService;
    private rxDefinitionNameService;
    private preservedRecordDefinition;
    private preservedRecordAssociationDefinitions;
    sandbox: IViewComponentDesignSandbox<IRecordGridDesignProperties>;
    currentGridDesignProperties: IRecordGridDesignProperties;
    actionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;
    rowActionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;
    componentPropertiesChangeFromCanvas$: Subject<IRecordGridDesignProperties>;
    recordDefinition$: Observable<IRecordDefinition>;
    recordAssociationDefinitions$: Observable<IAssociationDefinition[]>;
    columns$: Observable<IRecordGridDesignInspectorColumnConfig[]>;
    enableFiltering$: Observable<boolean>;
    recordDefinitionName$: Observable<string>;
    associationDefinitionName$: Observable<string>;
    associatedRecordNodeSide$: Observable<string>;
    childComponentsTree$: Observable<IViewComponentDesignData<import("@helix/platform/shared/api").IPlainObject>[]>;
    viewPresetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]>;
    gridViewPresets$: Observable<IViewComponentDesignData<IGridViewPresetProperties>[]>;
    viewPresetSelectorGuid$: Observable<string>;
    selectedPresetsList$: Observable<IPresetItem[]>;
    rowActionButtonGuids$: Observable<string[]>;
    static getInitialProperties(initialProperties: IRecordGridDesignProperties): IRecordGridDesignProperties;
    rxInit(): void;
    private updatePresetViewComponents;
    private getAssociatedRecordNodeSide;
    actionButtonDropPredicate(data: IViewComponentDropPredicateData): boolean;
    getPropertiesByName(properties: IRecordGridDesignProperties): IRecordGridProperties;
    setRowActions(rowActions: IRowAction[]): void;
    extractViewPresetSelectorGuid(val: string): string;
    private toggleActionsColumn;
    private updateComponentPropertiesAndConfig;
    private getRecordDefinition;
    private getRecordAssociationDefinitions;
    private validateColumns;
    private validateColumnActions;
    private validateRowActions;
    private validateAssociationModeProps;
    private validateActionButtons;
}
