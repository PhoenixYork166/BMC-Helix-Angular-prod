import { RxBundleService, RxCurrentUserService, RxGlobalCacheService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';
import { RxUtilityModalsService } from '@helix/platform/ui-kit';
import { RxJsonParserService, RxObjectUtilsService } from '@helix/platform/utils';
import { IViewComponentDescriptor, IViewDefinition, IViewInputParams, IViewPresetsByViewComponentGuid, RxExpressionEvaluatorService, RxViewActionRegistryService, RxViewComponentRegistryService, RxViewDefinitionCacheService, RxViewDefinitionParserService, RxViewDefinitionService } from '@helix/platform/view/api';
import { Observable } from 'rxjs';
import { ViewComponentEventManager } from './event-manager/view-component-event-manager.class';
import { IRuntimeViewApi } from './interfaces/runtime-view-api.interface';
import { IViewComponentState } from './interfaces/runtime-view-component-state.interface';
import { IRuntimeViewConfiguration } from './interfaces/runtime-view-configuration.interface';
import { IRuntimeViewOutputParameter } from './interfaces/runtime-view-output-parameter.interface';
import { IViewComponentPropertyChanged } from './interfaces/view-component-property-changed.interface';
import { RxRuntimeViewUtilsService } from './runtime-view-utils.service';
import { RxViewDefinitionAdapterService } from './view-definition-adapter.service';
import * as i0 from "@angular/core";
export declare class RuntimeViewModel {
    private rxBundleService;
    private rxGlobalCacheService;
    private rxViewComponentRegistryService;
    private rxViewDefinitionAdapterService;
    private rxViewDefinitionParserService;
    private rxViewDefinitionService;
    private rxRuntimeViewUtilsService;
    private rxExpressionEvaluatorService;
    private rxNotificationService;
    private rxViewActionRegistryService;
    private rxLogService;
    private viewComponentEventManager;
    private rxUtilityModalsService;
    private rxViewDefinitionCacheService;
    private rxObjectUtilsService;
    private rxJsonParserService;
    private rxCurrentUserService;
    api: IRuntimeViewApi;
    private saveSubject;
    private closeSubject;
    private cancelSubject;
    save$: Observable<void>;
    close$: Observable<IRuntimeViewOutputParameter>;
    cancel$: Observable<void>;
    viewDefinition: IViewDefinition;
    isUserInteractionDetected: boolean;
    private dependentOnViewIsValidPropViewComponentGuids;
    viewComponentStates: Map<string, IViewComponentState>;
    private configuration;
    private evaluationData;
    constructor(rxBundleService: RxBundleService, rxGlobalCacheService: RxGlobalCacheService, rxViewComponentRegistryService: RxViewComponentRegistryService, rxViewDefinitionAdapterService: RxViewDefinitionAdapterService, rxViewDefinitionParserService: RxViewDefinitionParserService, rxViewDefinitionService: RxViewDefinitionService, rxRuntimeViewUtilsService: RxRuntimeViewUtilsService, rxExpressionEvaluatorService: RxExpressionEvaluatorService, rxNotificationService: RxNotificationService, rxViewActionRegistryService: RxViewActionRegistryService, rxLogService: RxLogService, viewComponentEventManager: ViewComponentEventManager, rxUtilityModalsService: RxUtilityModalsService, rxViewDefinitionCacheService: RxViewDefinitionCacheService, rxObjectUtilsService: RxObjectUtilsService, rxJsonParserService: RxJsonParserService, rxCurrentUserService: RxCurrentUserService);
    init(configuration: IRuntimeViewConfiguration): Observable<never>;
    clear(): void;
    save(closeViewAfterSave?: boolean): Observable<never>;
    close(): Observable<IRuntimeViewOutputParameter>;
    cancel(skipDirtyCheck?: boolean): Observable<never>;
    refresh(): Observable<never>;
    canClose(): boolean;
    applyViewPreset(viewPresetSelectorGuid: string, viewPresetGuid: string, sharedViewPresets: IViewPresetsByViewComponentGuid): Observable<never>;
    deleteViewPreset(viewPresetGuid: string): Observable<never>;
    discardViewPresetChanges(viewPresetGuid: string, sharedViewPresets: IViewPresetsByViewComponentGuid): Observable<never>;
    saveViewPreset(viewPresetGuid: string): Observable<never>;
    shareViewPreset(viewPresetSelectorGuid: string): Observable<IViewPresetsByViewComponentGuid>;
    triggerViewActions(componentGuid: string, viewActionTriggerEventName: string): Promise<void>;
    onViewComponentPropertyChanged({ guid, propertyName, newValue }: IViewComponentPropertyChanged): void;
    isDataViewComponentDefinition(componentDescriptor: IViewComponentDescriptor): boolean;
    getViewInputParameters(): IViewInputParams;
    private isDirtyView;
    private triggerViewValidation;
    private getParentViewComponent;
    private getDependentViewComponentStates;
    private updateViewComponentConfig;
    private buildComponentConfig;
    private buildComponentChildDataConfig;
    private onViewComponentActionOutputChanged;
    private evaluateViewOutputParams;
    private processViewDefinition;
    private processComponentDefinition;
    private buildViewComponentState;
    private buildViewComponentActionState;
    private initializeActionExpressionForProperty;
    private callRuntimeComponentsApi;
    private evaluateComponentExpressions;
    private evaluateDependentProperties;
    private evaluateExpression;
    private updateComponentConfigProperty;
    private updateActionConfigProperty;
    private updateEvaluationData;
    private processPropertyValue;
    private isContainerComponentDefinition;
    static ɵfac: i0.ɵɵFactoryDeclaration<RuntimeViewModel, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RuntimeViewModel>;
}
