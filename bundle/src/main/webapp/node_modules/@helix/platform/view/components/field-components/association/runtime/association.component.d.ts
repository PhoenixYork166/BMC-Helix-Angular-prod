import { DatePipe } from '@angular/common';
import { AfterViewInit, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { RxAssociatedRecordNodeSide, RxAssociationDefinitionService, RxAssociationInstanceDataPageService } from '@helix/platform/association/api';
import { IFieldDefinition, IRecordDefinition, IRecordInstance, RxRecordDefinitionInheritanceDataPageService, RxRecordInstanceDataPageService, RxRecordInstanceUtilsService } from '@helix/platform/record/api';
import { RxSelectWithPaginationComponent } from '@helix/platform/shared/components';
import { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';
import { RecordEditorState, RxAssociationManagerService } from '../../../record-editor';
import { IRecordEditorApi } from '../../../record-editor/runtime/record-editor.types';
import { RxAssociationEditingMode } from '../association.types';
import { IRolesConfig, IRxAssociationConfig } from './association.types';
import { IRecordPreviewCardConfig, IRecordPreviewCardField } from './record-preview-card/record-preview-card.types';
import * as i0 from "@angular/core";
export declare class RxAssociationComponent extends BaseViewComponent implements AfterViewInit, OnInit, IViewComponent {
    private datePipe;
    private rxAssociationDefinitionService;
    private rxAssociationInstanceDataPageService;
    private rxRecordDefinitionInheritanceDataPageService;
    private rxRecordInstanceDataPageService;
    private rxRecordInstanceUtilsService;
    selectWithPaginationComponent: RxSelectWithPaginationComponent;
    isDisabled: boolean;
    api: {
        associate: (associations: any) => void;
    };
    areActionsAvailable: boolean;
    config: Observable<IRxAssociationConfig>;
    modelToViewValueAdapterFunc: any;
    optionLoaderFunc: any;
    viewToModelValueAdapterFunc: any;
    existingPreviewConfigurations: any[];
    pendingPreviewConfigurations: any[];
    private selectedOptions;
    pendingPageSize: number;
    currentPendingCount: number;
    totalPendingCount: number;
    associationCandidateRecordInstances: any[];
    fieldDefinition: IFieldDefinition;
    fieldDefinitions: {};
    associationDefinitionName: string;
    associatedRecordNodeSide: RxAssociatedRecordNodeSide;
    associationManager: RxAssociationManagerService;
    editingMode: RxAssociationEditingMode;
    fieldId: string;
    fields: IRecordPreviewCardField[];
    inReadState: boolean;
    permissionType: string;
    label: string;
    recordDefinition: IRecordDefinition;
    recordDefinitionName: string;
    recordInstance: IRecordInstance;
    recordEditorApi: IRecordEditorApi;
    state: RecordEditorState;
    useDefaultRoles: boolean;
    nodeARole: string;
    nodeBRole: string;
    previewRolesConfig: IRolesConfig;
    private associationFilter;
    private associationFilterNodeSide;
    formControl: FormControl;
    constructor(datePipe: DatePipe, rxAssociationDefinitionService: RxAssociationDefinitionService, rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService, rxRecordDefinitionInheritanceDataPageService: RxRecordDefinitionInheritanceDataPageService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService, rxRecordInstanceUtilsService: RxRecordInstanceUtilsService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private onConfigInitialized;
    private onConfigUpdated;
    private getAssociationManager;
    private getAssociationsOptionPage;
    deleteAllExisting(): void;
    deleteAllPending(): void;
    loadExistingAssociations(): void;
    isReadModeEnabled(): boolean;
    isEditModeEnabled(): boolean;
    getAssociatedValue(): string;
    private viewToModelValueAdapter;
    private modelToViewValueAdapter;
    private resetDropdownSelection;
    private updatePreviewCardConfigState;
    private updateSelectedOptions;
    private buildPreviewConfig;
    showPendingAssociations(): void;
    getPendingPreviewConfigurations(): IRecordPreviewCardConfig[];
    private extractRolesConfig;
    private updateTotalExistingAssociationsCount;
    private getStateForPreviewConfiguration;
    private getFirstAssociationRecord;
    private onAssociationsChanged;
    private rebuildPreviewConfigurations;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxAssociationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RxAssociationComponent, "rx-association", never, {}, {}, never, never>;
}
