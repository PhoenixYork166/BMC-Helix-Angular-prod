import { DoCheck, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor, NgControl, NgModel } from '@angular/forms';
import { AdaptRxSelectComponent, RxSelectOption } from '@bmc-ux/adapt-angular';
import { SelectSettings } from '@bmc-ux/obsolete';
import { Observable } from 'rxjs';
import { IRxSelectWithPaginationOption, IRxSelectWithPaginationOptionsPage } from './select-with-pagination.interfaces';
import * as i0 from "@angular/core";
export declare class RxSelectWithPaginationComponent implements ControlValueAccessor, OnInit, DoCheck, OnChanges, OnDestroy {
    private injector;
    loadMoreCallbackFunc: any;
    selectedValue: IRxSelectWithPaginationOption[];
    isOptionLoadingInProgress: boolean;
    isFirstOptionPageLoaded: boolean;
    showLoadMoreButton: boolean;
    formControl: NgControl;
    adaptSelectSettings: SelectSettings;
    private onFirstTimeDropdownOpen;
    private onViewValueChange;
    private onTouched;
    private lastFilterValue;
    private startIndex;
    private adaptSelectDefaultTitle;
    private adaptSelectOptions;
    private filterValue$;
    options$: Observable<any[] | IRxSelectWithPaginationOption[]>;
    ngModel: NgModel;
    adaptSelectComponent: AdaptRxSelectComponent;
    label: string;
    required: boolean;
    isMultiSelectionMode: boolean;
    optionLoader: (startIndex: number, pageSize: number, searchQuery: string) => Observable<IRxSelectWithPaginationOptionsPage>;
    pageSize: number;
    showDefaultTitle: boolean;
    showUncheckAll: boolean;
    readonly: boolean;
    template: TemplateRef<any>;
    toggleDropdown: EventEmitter<boolean>;
    selectionChange: EventEmitter<RxSelectOption>;
    viewToModelValueAdapter: (viewValue: IRxSelectWithPaginationOption[]) => any;
    modelToViewValueAdapter: (modelValue: any) => IRxSelectWithPaginationOption[];
    optionFormatter: (option: IRxSelectWithPaginationOption) => string;
    constructor(injector: Injector);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    resetLoadedOptions(): void;
    onFilterValueChange(filterValue?: string): void;
    private loadOptions;
    writeValue(selectedValue: any): void;
    onSelectedValueChange(selectedValue: any): void;
    ngDoCheck(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onDropdownToggle(isOpen: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxSelectWithPaginationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RxSelectWithPaginationComponent, "rx-select-with-pagination", never, { "label": "label"; "required": "required"; "isMultiSelectionMode": "isMultiSelectionMode"; "optionLoader": "optionLoader"; "pageSize": "pageSize"; "showDefaultTitle": "showDefaultTitle"; "showUncheckAll": "showUncheckAll"; "readonly": "readonly"; "template": "template"; "viewToModelValueAdapter": "viewToModelValueAdapter"; "modelToViewValueAdapter": "modelToViewValueAdapter"; "optionFormatter": "optionFormatter"; }, { "toggleDropdown": "toggleDropdown"; "selectionChange": "selectionChange"; }, never, never>;
}
