import { NgModule } from '@angular/core';
import { RxViewActionRegistryService } from '@helix/platform/view/api';
import { <%= classify(actionName) %>ActionService } from './<%= dasherize(actionName) %>-action.service';
import { <%= classify(actionName) %>ActionDesignManagerService } from'./<%= dasherize(actionName) %>-action-design-manager.service';
import { <%= classify(actionName) %>ActionDesignModel } from './<%= dasherize(actionName) %>-action-design-model.class';

@NgModule({
  providers: [<%= classify(actionName) %>ActionService, <%= classify(actionName) %>ActionDesignManagerService]
})
export class <%= classify(actionName) %>ActionModule {
  constructor(
    private rxViewActionRegistryService: RxViewActionRegistryService,
    private <%= camelize(actionName) %>ActionService: <%= classify(actionName) %>ActionService,
    private <%= camelize(actionName) %>ActionDesignManagerService: <%= classify(actionName) %>ActionDesignManagerService
  ) {
    this.rxViewActionRegistryService.register({
      name: '<%= camelize(actionSelector) %>',
      label: '<%= classify(actionName).replace((/([a-z\d])([A-Z])/g), '$1 $2') %>',
      bundleId: '<%= bundleId %>',
      // Service that will be executed at runtime.
      service: this.<%= camelize(actionName) %>ActionService,
      // The design manager will validate the input parameters at design time.
      designManager: this.<%= camelize(actionName) %>ActionDesignManagerService,
      // The output parameters are not defined in this file but
      // in the design model via the data dictionary.
      designModel: <%= classify(actionName) %>ActionDesignModel,
      // The input parameters will be defined in more details in the design-model file.
      parameters: [
        {
          name: 'message',
          label: 'Message',
          isRequired: true,
          enableExpressionEvaluation: true
        }
      ]
    })
  }
}
