{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, ElementRef, Component, ViewChild } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport * as i1$2 from '@helix/platform/shared/api';\nimport { RxRootInjector, RxCommandManagerService, RX_DESIGNER, Tooltip, RxServerActionExpressionConfigurator, RxServerActionService, RxActionTypeUtilsService, RxServerActionMixin, RxServerActionViewMixin, RX_DESIGNER_ELEMENT_SHAPE, RxOverlayModule } from '@helix/platform/shared/api';\nimport * as i1$1 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION, RxProcessDataDictionaryService, RxProcessElementRegistryService, RxProcessDefinitionCacheService, RxProcessElementSearchService } from '@helix/platform/process/api';\nimport { of, ReplaySubject } from 'rxjs';\nimport { isEmpty, some, chain, omit, truncate, escape, isFunction, filter, min, map, max, isEqual, isArray, transform, reduce, startsWith, size, reject, isUndefined, sortBy, forEach, cloneDeep, defaults, extend, result, assign, compact, includes, find, debounce } from 'lodash';\nimport { ValidationIssueType } from '@helix/platform/ui-kit';\nimport * as i1 from '@helix/platform/utils';\nimport { RxIdService, RX_GUID } from '@helix/platform/utils';\nimport * as i2 from '@helix/platform/shared/components';\nimport { TextFormControlComponent, TextareaFormControlComponent, RxRevertCustomizationComponent, CustomizationOptionsComponent, SwitchFormControlComponent, SelectFormControlComponent, RxPermissionEditorComponent, InspectorWidgetBase, LabelFormControlComponent, AssignmentExpressionListFormControlComponent, AssignmentExpressionListTargetFieldType, ExpressionFormControlModule, RxFormBuilderModule, RxInspectorModule } from '@helix/platform/shared/components';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { pluck, takeUntil, take, map as map$1 } from 'rxjs/operators';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as Backbone from 'backbone';\nconst _c0 = [\"expressionInputMapInspector\"];\nfunction RxExpressionInputMapInspectorWidgetComponent_div_0_rx_expression_form_control_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"rx-expression-form-control\", 3);\n    i0.ɵɵlistener(\"events\", function RxExpressionInputMapInspectorWidgetComponent_div_0_rx_expression_form_control_2_Template_rx_expression_form_control_events_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const section_r4 = restoredCtx.$implicit;\n      const elementModel_r1 = i0.ɵɵnextContext().ngIf;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.openExpressionEditor(section_r4, elementModel_r1, ctx_r5.expressionInputMapInspectorElementRef);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const section_r4 = ctx.$implicit;\n    const elementModel_r1 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵproperty(\"options\", section_r4.options)(\"propertyPath\", section_r4.name)(\"ngModel\", elementModel_r1.inputMap[section_r4.name]);\n  }\n}\nfunction RxExpressionInputMapInspectorWidgetComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", null, 1);\n    i0.ɵɵtemplate(2, RxExpressionInputMapInspectorWidgetComponent_div_0_rx_expression_form_control_2_Template, 1, 3, \"rx-expression-form-control\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.config);\n  }\n}\nclass RxEndEventService {\n  constructor(rxStringService, translateService) {\n    this.rxStringService = rxStringService;\n    this.translateService = translateService;\n  }\n  getDefinitionFromModel(model) {\n    return {\n      description: model.description,\n      guid: model.guid,\n      name: model.name,\n      resourceType: model.resourceType\n    };\n  }\n  // TODO-VS: add position and size inspector groups\n  getInspectorConfig() {\n    return [{\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      controls: [{\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n        }\n      }, {\n        name: 'description',\n        component: TextareaFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n          rows: 3\n        }\n      }, {\n        name: 'guid',\n        component: TextFormControlComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n        }\n      }]\n    }];\n  }\n  // TODO-VS: update logic and types\n  getModelFromDefinition(definition) {\n    let elementModel = {\n      description: '',\n      guid: null,\n      label: '',\n      name: RX_PROCESS_DEFINITION.processElementDisplayNames.endEvent,\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent,\n      type: RX_PROCESS_DEFINITION.processElementTypes.endEvent\n    };\n    if (definition) {\n      elementModel = Object.assign(Object.assign({}, elementModel), {\n        description: definition.description,\n        guid: definition.guid,\n        label: definition.name,\n        name: definition.name,\n        resourceType: definition.resourceType\n      });\n    }\n    return elementModel;\n  }\n  getShape(options) {\n    return new joint.shapes.rx.EndEvent({\n      elementModel: this.getModelFromDefinition(),\n      position: options.position\n    });\n  }\n  setCommonDataDictionaryBranch(guid, dataDictionaryBranch) {}\n  validate(model, availableCells) {\n    const validationIssues = [];\n    const inboundLinks = availableCells.filter(cell => cell.prop('targetNode') === model.guid);\n    if (inboundLinks.length < 1) {\n      validationIssues.push({\n        type: ValidationIssueType.Warning,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n          propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.inbound-sequence-flow.label')\n        }),\n        data: {\n          guid: model.guid,\n          inspectorTabIndex: 1\n        }\n      });\n    }\n    const outboundLinks = availableCells.filter(cell => cell.prop('sourceNode') === model.guid);\n    if (!isEmpty(outboundLinks)) {\n      validationIssues.push({\n        type: ValidationIssueType.Warning,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.end-event.validation.outbound-sequence-flow.message'),\n        data: {\n          guid: model.guid,\n          inspectorTabIndex: 1\n        }\n      });\n    }\n    if (this.rxStringService.isEmptySafe(model.label)) {\n      if (some(availableCells, cell => cell.prop('label') === model.label)) {\n        validationIssues.push({\n          type: ValidationIssueType.Error,\n          description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.must-be-unique.message', {\n            propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n          }),\n          data: {\n            guid: model.guid,\n            inspectorTabIndex: 1,\n            propertyName: 'label'\n          }\n        });\n      }\n    }\n    return of(validationIssues);\n  }\n}\nRxEndEventService.ɵfac = function RxEndEventService_Factory(t) {\n  return new (t || RxEndEventService)(i0.ɵɵinject(i1.RxStringService), i0.ɵɵinject(i3.TranslateService));\n};\nRxEndEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxEndEventService,\n  factory: RxEndEventService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxEndEventService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxStringService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nfunction RxProcessShapeMixin(Base) {\n  return class RxProcessShape extends Base {\n    constructor() {\n      super(...arguments);\n      this.labelPath = 'content';\n    }\n    initialize(config) {\n      // @ts-ignore\n      super.initialize(config);\n      // @ts-ignore\n      this.on('change:size', this.onSizeChange);\n      // @ts-ignore\n      this.on('change:position', this.onPositionChange);\n      // @ts-ignore\n      this.on('change:id', this.onIdChange);\n      // @ts-ignore\n      this.on('change:elementModel', this.onElementModelChange);\n      // @ts-ignore\n      this.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(this.get('id')));\n      // @ts-ignore\n      const labelPath = this.get('labelPath') || 'content';\n      // @ts-ignore\n      this.prop('elementModel/label', this.prop(labelPath));\n    }\n    getCommandManager() {\n      return RxRootInjector.injector.get(RxCommandManagerService).get();\n    }\n    canBeEmbedded(parentView, paper) {\n      const hasNeighbors = !isEmpty(paper.model.getNeighbors(this));\n      // @ts-ignore\n      const hasBoundaryElementsWithNeighbors = chain(this.getEmbeddedCells()).filter({\n        isBoundaryEvent: true\n      }).some(embeddedCell => !isEmpty(paper.model.getNeighbors(embeddedCell)));\n      return !hasNeighbors && !hasBoundaryElementsWithNeighbors;\n    }\n    canEmbedElement(childView, paper) {\n      return false;\n    }\n    getLabel() {\n      // @ts-ignore\n      return this.prop('elementModel/label');\n    }\n    getLayout() {\n      // @ts-ignore\n      return omit(this.toJSON(), ['elementModel', 'embeds', 'layout', 'parentProcessDefinition', 'ownerProcessDefinitionName', 'localizableProperties', 'inputMapFields']);\n    }\n    getParentId() {\n      // @ts-ignore\n      return this.get('parent');\n    }\n    onActivityTypeChange(element, type) {\n      switch (type) {\n        case 'task':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 2,\n              'stroke-dasharray': 'none'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n          break;\n        case 'event-sub-process':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 2,\n              'stroke-dasharray': '1,2'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n          break;\n        case 'call-activity':\n          element.attr({\n            '.inner': {\n              visibility: 'hidden'\n            },\n            '.outer': {\n              'stroke-width': 4,\n              'stroke-dasharray': 'none'\n            },\n            path: {\n              ref: '.outer'\n            },\n            image: {\n              ref: '.outer'\n            },\n            rect: {\n              rx: 4,\n              ry: 4\n            }\n          });\n          break;\n      }\n    }\n    updateContent() {\n      // @ts-ignore\n      const content = this.get('content');\n      // @ts-ignore\n      const label = this.id ? content : truncate(content, {\n        length: 20\n      });\n      const tooltip = label === content ? '' : content;\n      if (joint.env.test('svgforeignobject')) {\n        // Content element is a <div> element.\n        // @ts-ignore\n        this.attr({\n          '.content': {\n            // escape the label to patch XSS vulnerability (http://clientio.freshdesk.com/helpdesk/tickets/522)\n            html: escape(label),\n            title: tooltip\n          }\n        });\n      } else {\n        // Content element is a <text> element.\n        // SVG elements don't have innerHTML attribute.\n        // @ts-ignore\n        this.attr({\n          '.content': {\n            text: label,\n            title: tooltip\n          }\n        });\n      }\n    }\n    updateName() {\n      // @ts-ignore\n      this.prop('elementModel/name', this.getLabel() || this.get('defaultName'));\n    }\n    onIdChange(element, id) {\n      const guid = element.prop('elementModel/guid');\n      if (guid) {\n        element.prop('lastId', RxRootInjector.injector.get(RxIdService).getBase(guid), {\n          silent: true\n        });\n      }\n      element.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(id), {\n        silent: true\n      });\n    }\n    onElementModelChange(element, elementModel, options) {\n      if (options.propertyPath === 'elementModel/label') {\n        // @ts-ignore\n        const labelPath = this.get('labelPath') || 'content';\n        if (labelPath) {\n          element.prop(labelPath, this.getLabel());\n        }\n      }\n      this.updateName();\n    }\n    onPositionChange(element, position, options) {\n      if (!options.translateBy && options.propertyValue) {\n        // @ts-ignore\n        const previousPosition = this.previous('position');\n        const parentMovedBy = {\n          cx: previousPosition.x - position.x,\n          cy: previousPosition.y - position.y\n        };\n        // @ts-ignore\n        this.getEmbeddedCells().forEach(embeddedCell => {\n          if (embeddedCell._snapToParentBorder) {\n            embeddedCell._snapToParentBorder(this, parentMovedBy);\n          }\n        });\n      }\n    }\n    onSizeChange(element) {\n      element.getEmbeddedCells().forEach(embeddedCell => {\n        if (embeddedCell.isBoundaryEvent && embeddedCell._snapToParentBorder) {\n          embeddedCell._snapToParentBorder(embeddedCell);\n        }\n      });\n    }\n  };\n}\nclass RxEndEvent extends RxProcessShapeMixin(joint.shapes.bpmn.Event) {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n  defaults() {\n    return joint.util.deepSupplement({\n      attrs: {\n        '.label': {\n          fill: 'gray'\n        }\n      },\n      defaultName: RX_PROCESS_DEFINITION.processElementDisplayNames.endEvent,\n      eventType: 'end',\n      icon: 'transparent',\n      labelPath: 'attrs/.label/text',\n      size: {\n        width: 30,\n        height: 30\n      },\n      type: RX_PROCESS_DEFINITION.processElementTypes.endEvent\n    }, joint.shapes.bpmn.Event.prototype.defaults);\n  }\n}\nfunction RxProcessShapeViewMixin(Base) {\n  return class RxProcessShapeView extends Base {\n    initialize(config) {\n      // @ts-ignore\n      super.initialize(config);\n    }\n    canInteract() {\n      // @ts-ignore\n      return isFunction(this.paper.options.interactive) ?\n      // @ts-ignore\n      this.paper.options.interactive(this) :\n      // @ts-ignore\n      this.paper.options.interactive;\n    }\n    prepareEmbedding() {\n      // @ts-ignore\n      const hasNeighbors = !isEmpty(this.paper.model.getNeighbors(this.model));\n      // @ts-ignore\n      const hasBoundaryElementsWithNeighbors = chain(this.model.getEmbeddedCells()).filter({\n        isBoundaryEvent: true\n      }).some(function (embeddedCell) {\n        return !isEmpty(this.paper.model.getNeighbors(embeddedCell));\n      });\n      // @ts-ignore\n      if (this.model.get('parent') && !hasNeighbors && !hasBoundaryElementsWithNeighbors) {\n        joint.dia.ElementView.prototype.prepareEmbedding.apply(this, arguments);\n      }\n    }\n    getEmbeddedBBox() {\n      let result;\n      // @ts-ignore\n      const embeddedCellModels = filter(this.model.getEmbeddedCells(), cellModel => {\n        return cellModel && cellModel.get('type') !== 'rx.SequenceFlow' && !cellModel.isBoundaryEvent;\n      });\n      if (embeddedCellModels.length) {\n        const bboxes = chain(embeddedCellModels).map(cellModel => {\n          // @ts-ignore\n          var view = this.paper.findViewByModel(cellModel);\n          // @ts-ignore\n          return new joint.V(view.el).bbox(false, this.paper.viewport);\n        }).value();\n        const minX = min(map(bboxes, bbox => bbox.x));\n        const minY = min(map(bboxes, bbox => bbox.y));\n        const maxX = max(map(bboxes, bbox => bbox.x + bbox.width));\n        const maxY = max(map(bboxes, bbox => bbox.y + bbox.height));\n        result = joint.g.rect(minX, minY, maxX - minX, maxY - minY);\n      } else {\n        result = joint.g.rect(0, 0, 0, 0);\n      }\n      return result;\n    }\n  };\n}\nclass RxEndEventView extends RxProcessShapeViewMixin(joint.dia.ElementView) {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n  // TODO-VS: remove\n  sgResize(opt) {\n    // @ts-ignore\n    const scalable = this.scalableNode;\n    scalable.attr('transform', `scale(${0.5},${0.5})`);\n    // @ts-ignore\n    super.update();\n    // // @ts-ignore\n    // var model = this.model;\n    // var angle = model.angle();\n    // var size = model.size();\n    // // @ts-ignore\n    // var scalable = this.scalableNode;\n    //\n    // var recursive = false;\n    // if (scalable.node.getElementsByTagName('path').length > 0) {\n    //   // If scalable has at least one descendant that is a path, we need to switch to recursive bbox calculation.\n    //   // If there are no path descendants, group bbox calculation works and so we can use the (faster) native function directly.\n    //   recursive = true;\n    // }\n    //\n    // var scalableBBox = scalable.getBBox({ recursive: recursive });\n    //\n    // var sx = size.width / (60 || 1);\n    // var sy = size.height / (60 || 1);\n    //\n    // scalable.attr('transform', 'scale(' + sx + ',' + sy + ')');\n    //\n    // // @ts-ignore\n    // super.update();\n  }\n}\nclass RxEndEventRegistrationModule {\n  constructor(rxEndEventService, rxProcessElementRegistryService, translateService) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.end-event.display-name.label'),\n      elementService: rxEndEventService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.events.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.bold,\n        label: RX_DESIGNER.paletteItemLabel.outer,\n        shape: RX_DESIGNER.paletteItemShape.circle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent,\n      shapeClass: RxEndEvent,\n      shapeType: 'EndEvent',\n      type: RX_PROCESS_DEFINITION.processElementTypes.endEvent,\n      viewShapeClass: RxEndEventView,\n      viewShapeType: 'EndEventView'\n    });\n  }\n}\nRxEndEventRegistrationModule.ɵfac = function RxEndEventRegistrationModule_Factory(t) {\n  return new (t || RxEndEventRegistrationModule)(i0.ɵɵinject(RxEndEventService), i0.ɵɵinject(i1$1.RxProcessElementRegistryService), i0.ɵɵinject(i3.TranslateService));\n};\nRxEndEventRegistrationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxEndEventRegistrationModule\n});\nRxEndEventRegistrationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxEndEventRegistrationModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: RxEndEventService\n    }, {\n      type: i1$1.RxProcessElementRegistryService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nclass RxProcess extends joint.dia.Element {\n  constructor(options) {\n    super(options);\n    this.markup = '<g></g>';\n  }\n  defaults() {\n    return joint.util.defaultsDeep({\n      position: {\n        x: 0,\n        y: 0\n      },\n      size: {\n        width: 1,\n        height: 1\n      },\n      type: 'rx.Process'\n    }, super.defaults);\n  }\n}\nclass RxProcessService {\n  constructor(rxDefinitionNameService, rxStringService, translateService) {\n    this.rxDefinitionNameService = rxDefinitionNameService;\n    this.rxStringService = rxStringService;\n    this.translateService = translateService;\n  }\n  // TODO-VS: update when variable editor is implemented\n  getDefinitionFromModel(definitionModel) {\n    return {\n      allowOverlay: definitionModel.customizationOptions.allowOverlay,\n      contextKeyParam: definitionModel.contextKeyParam,\n      description: definitionModel.description,\n      guid: definitionModel.guid,\n      inputParams: definitionModel.inputParams,\n      isEnabled: definitionModel.isEnabled,\n      localVariables: definitionModel.localVariables,\n      name: this.rxDefinitionNameService.getDefinitionName(definitionModel.bundleId, definitionModel.name),\n      outputParams: definitionModel.outputParams,\n      overlayDescriptor: definitionModel.overlayDescriptor,\n      overlayGroupId: definitionModel.overlayGroupId,\n      permissions: definitionModel.permissions,\n      runAsUser: RX_PROCESS_DEFINITION.runAsUser[definitionModel.runAsUser].definitionValue,\n      scope: definitionModel.customizationOptions.scope\n    };\n  }\n  getInspectorConfig(definitionModel) {\n    return [{\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      controls: [{\n        name: 'name',\n        component: TextFormControlComponent,\n        isDisabled: Boolean(definitionModel.lastUpdateTime),\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),\n          required: true\n        }\n      }, {\n        name: 'description',\n        component: TextareaFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n          rows: 3\n        }\n      }, {\n        name: 'guid',\n        component: TextFormControlComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n        }\n      }, {\n        name: 'owner',\n        component: TextFormControlComponent,\n        hidden: !Boolean(definitionModel.owner),\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.owner.label')\n        }\n      }, {\n        name: 'lastUpdateTime',\n        component: TextFormControlComponent,\n        hidden: !Boolean(definitionModel.lastUpdateTime),\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.modified-date.label')\n        }\n      }, {\n        name: 'lastChangedBy',\n        component: TextFormControlComponent,\n        hidden: !Boolean(definitionModel.lastChangedBy),\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.modified-by.label')\n        }\n      }, {\n        component: RxRevertCustomizationComponent,\n        options: {\n          overlayGroupId: definitionModel.overlayGroupId,\n          overlayDescriptor: definitionModel.overlayDescriptor\n        }\n      }, {\n        name: 'customizationOptions',\n        component: CustomizationOptionsComponent,\n        options: {\n          definitionTypeDisplayName: this.translateService.instant('com.bmc.arsys.rx.client.process-definition.label').toLowerCase(),\n          allowOverlay: definitionModel.customizationOptions.allowOverlay,\n          scope: definitionModel.customizationOptions.scope,\n          overlayGroupId: definitionModel.overlayGroupId,\n          overlayDescriptor: definitionModel.overlayDescriptor\n        }\n      }, {\n        name: 'isEnabled',\n        component: SwitchFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.process-enabled.label')\n        }\n      }, {\n        name: 'runAsUser',\n        component: SelectFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.label'),\n          tooltip: new Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.tooltip')),\n          options: [{\n            name: this.translateService.instant('com.bmc.arsys.rx.client.common.administrator.label'),\n            id: RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n          }, {\n            name: this.translateService.instant('com.bmc.arsys.rx.client.common.current-user.label'),\n            id: RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n          }]\n        }\n      }]\n    }, {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.variables.label'),\n      controls: [\n        // TODO-VS: add variables editor\n      ]\n    }, {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.permissions.label'),\n      controls: [{\n        name: 'permissions',\n        component: RxPermissionEditorComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.permissions.label'),\n          type: 'process'\n        }\n      }]\n    }];\n  }\n  // TODO-VS: update when variable editor is implemented\n  getModelFromDefinition(definition, bundleId) {\n    return {\n      bundleId,\n      contextKeyParam: definition.contextKeyParam,\n      customizationOptions: {\n        allowOverlay: definition.allowOverlay,\n        scope: definition.scope\n      },\n      description: definition.description,\n      guid: definition.guid,\n      inputParams: definition.inputParams,\n      isEnabled: definition.isEnabled,\n      lastChangedBy: definition.lastChangedBy,\n      lastUpdateTime: definition.lastUpdateTime,\n      localVariables: definition.localVariables,\n      name: Boolean(definition.lastUpdateTime) ? this.rxDefinitionNameService.getDisplayName(definition.name) : definition.name,\n      outputParams: definition.outputParams,\n      overlayDescriptor: null,\n      overlayGroupId: definition.overlayGroupId,\n      owner: definition.owner,\n      permissions: definition.permissions,\n      runAsUser: definition.runAsUser ? RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue : RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n    };\n  }\n  getShape(options) {\n    return new RxProcess(options);\n  }\n  validate(definitionModel, availableCells) {\n    const validationIssues = [];\n    if (this.rxStringService.isEmptySafe(definitionModel.name)) {\n      validationIssues.push({\n        type: ValidationIssueType.Error,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message', {\n          propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label')\n        }),\n        data: {\n          propertyName: 'name',\n          inspectorTabIndex: 0\n        }\n      });\n    }\n    if (definitionModel.name && !RX_RECORD_DEFINITION.validDefinitionNameRegex.test(definitionModel.name)) {\n      validationIssues.push({\n        type: ValidationIssueType.Error,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.invalid-definition-name.message', {\n          propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label')\n        }),\n        data: {\n          propertyName: 'name',\n          inspectorTabIndex: 0\n        }\n      });\n    }\n    const startEvents = availableCells.filter(cell => cell.prop('type') === RX_PROCESS_DEFINITION.processElementTypes.startEvent);\n    if (startEvents.length != 1) {\n      validationIssues.push({\n        type: ValidationIssueType.Error,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.validation.single-start-event.message'),\n        data: {\n          inspectorTabIndex: 0\n        }\n      });\n    }\n    const endEvents = availableCells.filter(cell => cell.prop('type') === RX_PROCESS_DEFINITION.processElementTypes.endEvent);\n    if (isEmpty(endEvents)) {\n      validationIssues.push({\n        type: ValidationIssueType.Error,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.validation.no-end-event.label'),\n        data: {\n          inspectorTabIndex: 0\n        }\n      });\n    }\n    return of(validationIssues);\n  }\n}\nRxProcessService.ɵfac = function RxProcessService_Factory(t) {\n  return new (t || RxProcessService)(i0.ɵɵinject(i1$2.RxDefinitionNameService), i0.ɵɵinject(i1.RxStringService), i0.ɵɵinject(i3.TranslateService));\n};\nRxProcessService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessService,\n  factory: RxProcessService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.RxDefinitionNameService\n    }, {\n      type: i1.RxStringService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nclass RxExpressionInputMapInspectorWidgetComponent extends InspectorWidgetBase {\n  constructor(renderer, rxDesignerCacheService, rxExpressionEditorService, rxIdService, injector) {\n    super(injector);\n    this.renderer = renderer;\n    this.rxDesignerCacheService = rxDesignerCacheService;\n    this.rxExpressionEditorService = rxExpressionEditorService;\n    this.rxIdService = rxIdService;\n    this.injector = injector;\n    this.destroyed$ = new ReplaySubject(1);\n  }\n  ngOnInit() {\n    this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n    this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n    this.patchConfig(this.options);\n  }\n  ngOnChanges(changes) {\n    if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this.patchConfig(changes.options.currentValue);\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n  openExpressionEditor(section, elementModel, inspectorElementRef) {\n    this.graph$.pipe(take(1)).subscribe(graph => {\n      this.rxExpressionEditorService.openEditor({\n        expressionConfigurator: this.options.expressionConfigurator,\n        expressionPropertyNavigator: {\n          getProperties: this.getExpressionProperties.bind(this, elementModel, inspectorElementRef)\n        },\n        isReadOnly: false,\n        property: {\n          path: `inputMap/${section.name}`,\n          value: elementModel.inputMap[section.name],\n          label: section.options.label\n        }\n      }).pipe(takeUntil(this.destroyed$)).subscribe(expression => {\n        const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n        selectedElementCell.prop(`elementModel/${expression.path}`, expression.value);\n      });\n    });\n  }\n  getExpressionProperties(elementModel, inspectorElementRef) {\n    return of(elementModel.inputMap).pipe(map$1(modelProperties => Array.from(this.renderer.selectRootElement(inspectorElementRef.nativeElement, true).querySelectorAll('rx-expression-form-control')).map(element => {\n      const propertyPath = element.getAttribute('property-path');\n      return {\n        path: `inputMap/${propertyPath}`,\n        value: modelProperties[propertyPath],\n        label: element.getAttribute('property-label')\n      };\n    })));\n  }\n  patchConfig(options) {\n    this.config = options.expressionInputMapInspectorOptions.map(expressionInputMapInspectorOption => ({\n      name: expressionInputMapInspectorOption.name,\n      options: {\n        label: expressionInputMapInspectorOption.label,\n        dataDictionary$: options.expressionConfigurator.getDataDictionary(`inputMap/${expressionInputMapInspectorOption.name}`),\n        operators: options.expressionConfigurator.getOperators(`inputMap/${expressionInputMapInspectorOption.name}`)\n      }\n    }));\n  }\n}\nRxExpressionInputMapInspectorWidgetComponent.ɵfac = function RxExpressionInputMapInspectorWidgetComponent_Factory(t) {\n  return new (t || RxExpressionInputMapInspectorWidgetComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1$2.RxDesignerCacheService), i0.ɵɵdirectiveInject(i2.RxExpressionEditorService), i0.ɵɵdirectiveInject(i1.RxIdService), i0.ɵɵdirectiveInject(i0.Injector));\n};\nRxExpressionInputMapInspectorWidgetComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RxExpressionInputMapInspectorWidgetComponent,\n  selectors: [[\"rx-expression-input-map-inspector-widget\"]],\n  viewQuery: function RxExpressionInputMapInspectorWidgetComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.expressionInputMapInspectorElementRef = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"expressionInputMapInspector\", \"\"], [3, \"options\", \"propertyPath\", \"ngModel\", \"events\", 4, \"ngFor\", \"ngForOf\"], [3, \"options\", \"propertyPath\", \"ngModel\", \"events\"]],\n  template: function RxExpressionInputMapInspectorWidgetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RxExpressionInputMapInspectorWidgetComponent_div_0_Template, 3, 1, \"div\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.elementModel$));\n    }\n  },\n  directives: [i4.NgIf, i4.NgForOf, i2.ExpressionFormControlComponent, i5.NgControlStatus, i5.NgModel],\n  pipes: [i4.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]     rx-expression-form-control:not(:last-child) button{margin-bottom:5px}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxExpressionInputMapInspectorWidgetComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-expression-input-map-inspector-widget',\n      templateUrl: './expression-input-map-inspector-widget.component.html',\n      styleUrls: ['./expression-input-map-inspector-widget.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1$2.RxDesignerCacheService\n    }, {\n      type: i2.RxExpressionEditorService\n    }, {\n      type: i1.RxIdService\n    }, {\n      type: i0.Injector\n    }];\n  }, {\n    expressionInputMapInspectorElementRef: [{\n      type: ViewChild,\n      args: ['expressionInputMapInspector', {\n        read: ElementRef\n      }]\n    }]\n  });\n})();\nclass RxProcessActionExpressionConfigurator extends RxServerActionExpressionConfigurator {\n  constructor(injector) {\n    super(injector);\n    this.injector = injector;\n    this.configureForProperty({\n      propertyPath: /outputMap\\/.*/,\n      dataDictionary$: this.getOutputMapDataDictionary()\n    });\n  }\n  getDataDictionaryService() {\n    return this.injector.get(RxProcessDataDictionaryService);\n  }\n  getOutputMapDataDictionary() {\n    return this.commonDataDictionary$;\n  }\n}\nclass RxProcessActionService extends RxServerActionService {\n  constructor(injector) {\n    super(injector);\n    this.injector = injector;\n    this.rxActionTypeUtilsService = injector.get(RxActionTypeUtilsService);\n    this.rxProcessDataDictionaryService = injector.get(RxProcessDataDictionaryService);\n  }\n  // PUBLIC\n  // TODO-VS: eliminate Partial (new IProcessDefinitionLight to eliminate overlayDescriptor form IDefinitionLight?)\n  getDefinitionFromModel(model) {\n    return {\n      actionTypeName: model.actionTypeName,\n      description: model.description,\n      guid: model.guid,\n      inputMap: this.getInputMapFromModel(model),\n      multiInstanceLoopDefinition: model.multiInstanceLoopDefinition,\n      name: model.name,\n      outputMap: model.outputMap,\n      resourceType: model.resourceType,\n      runAsUser: RX_PROCESS_DEFINITION.runAsUser[model.runAsUser].definitionValue\n    };\n  }\n  getExpressionConfigurator() {\n    var _a;\n    return (_a = this.expressionConfigurator) !== null && _a !== void 0 ? _a : this.expressionConfigurator = new (this.getExpressionConfiguratorClass())(this.injector);\n  }\n  getInspectorConfig(model, options) {\n    const generalConfigControls = [{\n      name: 'actionTypeName',\n      component: TextFormControlComponent,\n      isDisabled: true,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-action-properties.action-type-name.label')\n      }\n    }, {\n      name: 'label',\n      component: TextFormControlComponent,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label'),\n        required: true\n      }\n    }, {\n      name: 'description',\n      component: TextareaFormControlComponent,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n        rows: 3\n      }\n    }, {\n      name: 'guid',\n      component: TextFormControlComponent,\n      isDisabled: true,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n      }\n    }, {\n      name: 'runAsUser',\n      component: SelectFormControlComponent,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.label'),\n        tooltip: new Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.inspector.run-as.tooltip')),\n        options: [{\n          name: this.translateService.instant('com.bmc.arsys.rx.client.common.administrator.label'),\n          id: RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n        }, {\n          name: this.translateService.instant('com.bmc.arsys.rx.client.common.current-user.label'),\n          id: RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n        }, {\n          name: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.process-action.inherit-from-process.label'),\n          id: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue\n        }]\n      }\n    }];\n    if (model.isDeprecated) {\n      generalConfigControls.unshift({\n        name: 'isDeprecated',\n        component: LabelFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-action-properties.deprecated.label', {\n            definitionType: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.process.label')\n          })\n        }\n      });\n    }\n    return [{\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      controls: generalConfigControls\n    }, {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.input-map.label'),\n      controls: [this.getInputMapInspectorWidgetConfig(model)]\n    }, {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.output-map.label'),\n      controls: [{\n        name: 'outputMap',\n        component: AssignmentExpressionListFormControlComponent,\n        options: {\n          confirmationMessage: 'com.bmc.arsys.rx.client.designer.inspector.delete-output-map-item-confirmation.message',\n          sourceFieldOptions: {\n            expressionConfigurator: this.getExpressionConfigurator(),\n            options: {\n              dataDictionary$: this.getExpressionConfigurator().getDataDictionary('outputMap'),\n              operators: this.getExpressionConfigurator().getOperators('outputMap')\n            }\n          },\n          targetFieldOptions: {\n            type: AssignmentExpressionListTargetFieldType.Select,\n            options: {\n              options: chain([...options.processDefinitionModel.inputParams, ...options.processDefinitionModel.outputParams, ...options.processDefinitionModel.localVariables]).map('name').uniq().map(name => ({\n                name,\n                id: name\n              })).value()\n            }\n          }\n        }\n      }]\n    }];\n  }\n  getModelFromDefinition(definition) {\n    const actionType = super.getActionTypeByName(definition.actionTypeName);\n    const name = actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName);\n    return definition.guid ? {\n      actionTypeName: definition.actionTypeName,\n      deprecatedText: actionType.deprecatedText,\n      description: definition.description,\n      guid: definition.guid,\n      inputMap: this.getInputMapFromDefinition(definition),\n      isDeprecated: actionType.isDeprecated,\n      label: definition.name,\n      multiInstanceLoopDefinition: definition.multiInstanceLoopDefinition,\n      name: definition.name,\n      outputMap: definition.outputMap,\n      resourceType: definition.resourceType,\n      runAsUser: this.getRunAsUserFromDefinition(definition),\n      type: this.getElementType(actionType.actionTypeName)\n    } : {\n      actionTypeName: actionType.actionTypeName,\n      deprecatedText: actionType.deprecatedText,\n      description: '',\n      guid: '',\n      inputMap: {},\n      isDeprecated: actionType.isDeprecated,\n      label: name,\n      multiInstanceLoopDefinition: null,\n      name,\n      outputMap: [],\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      runAsUser: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue,\n      type: this.getElementType(actionType.actionTypeName)\n    };\n  }\n  // TODO-VS: update types\n  getShape(options) {\n    const ProcessActionClass = this.getClass();\n    const classConfig = super.getClassConfig(options);\n    return new ProcessActionClass(classConfig);\n  }\n  setCommonDataDictionaryBranch(guid, dataDictionaryBranch) {\n    this.rxProcessDataDictionaryService.setCommonActivitiesDataDictionaryBranch(guid, dataDictionaryBranch);\n  }\n  // TODO-VS: update types\n  validate(model, availableCells) {\n    return super.validateServerAction(model, availableCells).pipe(map$1(serverActionValidationIssues => {\n      const validationIssues = [...serverActionValidationIssues];\n      const inboundLinks = availableCells.filter(cell => cell.prop('targetNode') === model.guid);\n      const outboundLinks = availableCells.filter(cell => cell.prop('sourceNode') === model.guid);\n      if (isEmpty(inboundLinks)) {\n        validationIssues.push({\n          type: ValidationIssueType.Warning,\n          description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n            propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.inbound-sequence-flow.label')\n          }),\n          data: {\n            guid: model.guid,\n            inspectorTabIndex: 1\n          }\n        });\n      }\n      if (outboundLinks.length !== 1) {\n        validationIssues.push({\n          type: ValidationIssueType.Warning,\n          description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n            propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.outbound-sequence-flow.label')\n          }),\n          data: {\n            guid: model.guid,\n            inspectorTabIndex: 1\n          }\n        });\n      }\n      return validationIssues;\n    }));\n  }\n  // OVERRIDES\n  buildDataDictionaryBranch(model) {\n    const outputParams = super.getActionTypeByName(model.actionTypeName).outputParams;\n    return isEmpty(outputParams) ? of(null) : this.buildOutputDataDictionaryBranch(model, outputParams).pipe(map$1(outputDataDictionaryBranch => {\n      const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParams[0]);\n      if (isArray(outputDataDictionaryBranch)) {\n        let children = outputDataDictionaryBranch;\n        if (isEmpty(outputDataDictionaryBranch)) {\n          children = this.buildDefaultOutputDataDictionaryBranch(outputParams[0].dataTypeDetail);\n        }\n        return {\n          label: model.label,\n          icon: 'd-icon-arrow_chart',\n          children: [{\n            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.output.label'),\n            icon: 'd-icon-arrow_chart',\n            expression: '${activityResults.' + model.guid + '.output' + (isArrayOrListDataType ? '[0]}' : '}'),\n            children: this.updateOutputDataDictionaryBranch(children, model.guid, isArrayOrListDataType)\n          }]\n        };\n      } else {\n        return null;\n      }\n    }));\n  }\n  buildOutputDataDictionaryBranch(model, outputParams) {\n    return of([]);\n  }\n  getClass() {\n    return joint.shapes.rx.ProcessAction;\n  }\n  getDefinitionInputMapParam(inputParamName, inputParamValue) {\n    return {\n      assignTarget: inputParamName,\n      expression: inputParamValue\n    };\n  }\n  getElementType(actionTypeName) {\n    return RX_PROCESS_DEFINITION.processElementTypes.processAction;\n  }\n  getExpressionConfiguratorClass() {\n    return RxProcessActionExpressionConfigurator;\n  }\n  getInputMapInspectorWidgetConfig(model) {\n    const actionType = this.getActionTypeByName(model.actionTypeName);\n    return {\n      component: RxExpressionInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator(),\n        expressionInputMapInspectorOptions: actionType.inputParams.map(inputParam => ({\n          name: inputParam.name,\n          label: inputParam.displayName || this.rxStringService.prettify(inputParam.name)\n        }))\n      }\n    };\n  }\n  getInputMapFromDefinition(definition) {\n    const actionType = super.getActionTypeByName(definition.actionTypeName);\n    const initialInputMap = actionType ? transform(actionType.inputParams, (inputMap, inputParam) => inputMap[inputParam.name] = '', {}) : {};\n    return transform((definition === null || definition === void 0 ? void 0 : definition.inputMap) || [], (inputMap, inputMapField) => inputMap[inputMapField.assignTarget] = inputMapField.expression, initialInputMap);\n  }\n  // HELPERS\n  buildDefaultOutputDataDictionaryBranch(outputParams, outputPropertyPathOpener) {\n    return isEmpty(outputParams) ? null : outputParams.map(outputParam => {\n      const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParam);\n      const outputPropertyPath = (outputPropertyPathOpener ? outputPropertyPathOpener + '.' + outputParam.name : outputParam.name) + (isArrayOrListDataType ? '[0]' : '');\n      return {\n        label: this.rxStringService.prettify(outputParam.name),\n        outputPropertyPath: outputPropertyPath,\n        children: this.buildDefaultOutputDataDictionaryBranch(outputParam.dataTypeDetail, outputPropertyPath)\n      };\n    });\n  }\n  getInputMapFromModel(model) {\n    return reduce(model.inputMap, (inputMap, propertyValue, propertyName) => {\n      let inputMapParam;\n      if (!isEmpty(propertyValue)) {\n        inputMapParam = this.getDefinitionInputMapParam(propertyName, propertyValue);\n        if (inputMapParam) {\n          inputMap.push(inputMapParam);\n        }\n      }\n      return inputMap;\n    }, []);\n  }\n  getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, outputPropertyPath) {\n    return '${activityResults.' + flowElementGuid + '.output' + (isArrayOrListDataType ? '[0].' : '.') + outputPropertyPath + '}';\n  }\n  getRunAsUserFromDefinition(definition) {\n    let runAsUser;\n    switch (definition.runAsUser) {\n      case true:\n        {\n          runAsUser = RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue;\n          break;\n        }\n      case false:\n        {\n          runAsUser = RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue;\n          break;\n        }\n      default:\n        {\n          runAsUser = RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue;\n          break;\n        }\n    }\n    return runAsUser;\n  }\n  updateOutputDataDictionaryBranch(children, flowElementGuid, isArrayOrListDataType) {\n    return isEmpty(children) ? null : children.map(child => {\n      let expression = child.expression;\n      if (child.outputPropertyPath) {\n        if (isArray(child.outputPropertyPath)) {\n          expression = child.outputPropertyPath.map(outputPropertyPath => this.getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, outputPropertyPath));\n        } else {\n          expression = this.getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, child.outputPropertyPath);\n        }\n      }\n      return {\n        label: child.label,\n        icon: expression ? 'd-icon-arrow_chart' : null,\n        expression,\n        children: this.updateOutputDataDictionaryBranch(child.children, flowElementGuid, isArrayOrListDataType)\n      };\n    });\n  }\n}\nRxProcessActionService.ɵfac = function RxProcessActionService_Factory(t) {\n  return new (t || RxProcessActionService)(i0.ɵɵinject(i0.Injector));\n};\nRxProcessActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessActionService,\n  factory: RxProcessActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxProcessAction extends RxServerActionMixin(RxProcessShapeMixin(joint.shapes.bpmn.Activity)) {\n  defaults() {\n    return joint.util.deepSupplement({\n      attrs: {\n        '.icon': {\n          width: 12,\n          height: 12,\n          'ref-x': 3,\n          'ref-y': 3\n        },\n        rect: {\n          rx: 4,\n          ry: 4\n        }\n      },\n      icon: 'gear',\n      size: {\n        width: 90,\n        height: 60\n      },\n      type: RX_PROCESS_DEFINITION.processElementTypes.processAction\n    },\n    // @ts-ignore\n    super.defaults);\n  }\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n  getElementService(type) {\n    return RxRootInjector.injector.get(RxProcessElementRegistryService).get(type).elementService;\n  }\n}\nclass RxProcessActionView extends RxServerActionViewMixin(RxProcessShapeViewMixin(joint.shapes.bpmn.ActivityView)) {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\nclass RxProcessActionRegistrationModule {\n  constructor(rxProcessElementRegistryService, rxProcessActionService) {\n    rxProcessElementRegistryService.register({\n      elementService: rxProcessActionService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.bold,\n        icon: {\n          path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n          position: RX_DESIGNER.paletteIconPosition.top\n        },\n        label: RX_DESIGNER.paletteItemLabel.outer,\n        shape: RX_DESIGNER.paletteItemShape.rectangle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      shapeClass: RxProcessAction,\n      shapeType: 'ProcessAction',\n      type: RX_PROCESS_DEFINITION.processElementTypes.processAction,\n      viewShapeClass: RxProcessActionView,\n      viewShapeType: 'ProcessActionView'\n    });\n  }\n}\nRxProcessActionRegistrationModule.ɵfac = function RxProcessActionRegistrationModule_Factory(t) {\n  return new (t || RxProcessActionRegistrationModule)(i0.ɵɵinject(i1$1.RxProcessElementRegistryService), i0.ɵɵinject(RxProcessActionService));\n};\nRxProcessActionRegistrationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxProcessActionRegistrationModule\n});\nRxProcessActionRegistrationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessActionRegistrationModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxProcessElementRegistryService\n    }, {\n      type: RxProcessActionService\n    }];\n  }, null);\n})();\n\n// TODO-VS: move to \"@helix/platform/process/components\"\nclass RxExpressionInputMapInspectorWidgetModule {}\nRxExpressionInputMapInspectorWidgetModule.ɵfac = function RxExpressionInputMapInspectorWidgetModule_Factory(t) {\n  return new (t || RxExpressionInputMapInspectorWidgetModule)();\n};\nRxExpressionInputMapInspectorWidgetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxExpressionInputMapInspectorWidgetModule,\n  declarations: [RxExpressionInputMapInspectorWidgetComponent],\n  imports: [CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule],\n  exports: [RxExpressionInputMapInspectorWidgetComponent]\n});\nRxExpressionInputMapInspectorWidgetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxExpressionInputMapInspectorWidgetModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxExpressionInputMapInspectorWidgetComponent],\n      imports: [CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule],\n      exports: [RxExpressionInputMapInspectorWidgetComponent]\n    }]\n  }], null, null);\n})();\nclass RxStartEventService {\n  constructor(rxStringService, translateService) {\n    this.rxStringService = rxStringService;\n    this.translateService = translateService;\n  }\n  getDefinitionFromModel(model) {\n    return {\n      description: model.description,\n      guid: model.guid,\n      name: model.name,\n      resourceType: model.resourceType\n    };\n  }\n  // TODO-VS: add position and size inspector groups\n  getInspectorConfig() {\n    return [{\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      controls: [{\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n        }\n      }, {\n        name: 'description',\n        component: TextareaFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n          rows: 3\n        }\n      }, {\n        name: 'guid',\n        component: TextFormControlComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n        }\n      }]\n    }];\n  }\n  getModelFromDefinition(definition) {\n    let elementModel = {\n      description: '',\n      guid: null,\n      label: '',\n      name: RX_PROCESS_DEFINITION.processElementDisplayNames.startEvent,\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.startEvent,\n      type: RX_PROCESS_DEFINITION.processElementTypes.startEvent\n    };\n    if (definition) {\n      elementModel = Object.assign(Object.assign({}, elementModel), {\n        description: definition.description,\n        guid: definition.guid,\n        label: definition.name,\n        name: definition.name,\n        resourceType: definition.resourceType\n      });\n    }\n    return elementModel;\n  }\n  getShape(options) {\n    return new joint.shapes.rx.StartEvent({\n      elementModel: this.getModelFromDefinition(),\n      position: options.position\n    });\n  }\n  setCommonDataDictionaryBranch(guid, dataDictionaryBranch) {}\n  validate(model, availableCells) {\n    const validationIssues = [];\n    const inboundLinks = availableCells.filter(cell => cell.prop('targetNode') === model.guid);\n    if (!isEmpty(inboundLinks)) {\n      validationIssues.push({\n        type: ValidationIssueType.Error,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.validation.inbound-sequence-flow.message'),\n        data: {\n          guid: model.guid,\n          inspectorTabIndex: 1\n        }\n      });\n    }\n    const outboundLinks = availableCells.filter(cell => cell.prop('sourceNode') === model.guid);\n    if (outboundLinks.length != 1) {\n      validationIssues.push({\n        type: ValidationIssueType.Warning,\n        description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.validation.single-outbound-sequence-flow.message'),\n        data: {\n          guid: model.guid,\n          inspectorTabIndex: 1\n        }\n      });\n    }\n    if (this.rxStringService.isEmptySafe(model.label)) {\n      if (some(availableCells, cell => cell.prop('label') === model.label)) {\n        validationIssues.push({\n          type: ValidationIssueType.Error,\n          description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.must-be-unique.message', {\n            propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n          }),\n          data: {\n            guid: model.guid,\n            inspectorTabIndex: 1,\n            propertyName: 'label'\n          }\n        });\n      }\n    }\n    return of(validationIssues);\n  }\n}\nRxStartEventService.ɵfac = function RxStartEventService_Factory(t) {\n  return new (t || RxStartEventService)(i0.ɵɵinject(i1.RxStringService), i0.ɵɵinject(i3.TranslateService));\n};\nRxStartEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxStartEventService,\n  factory: RxStartEventService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxStartEventService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxStringService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nclass RxStartEvent extends RxProcessShapeMixin(joint.shapes.bpmn.Event) {\n  defaults() {\n    return joint.util.deepSupplement({\n      attrs: {\n        '.label': {\n          fill: 'gray'\n        }\n      },\n      defaultName: RX_PROCESS_DEFINITION.processElementDisplayNames.startEvent,\n      eventType: 'start',\n      icon: 'transparent',\n      labelPath: 'attrs/.label/text',\n      size: {\n        width: 30,\n        height: 30\n      },\n      type: RX_PROCESS_DEFINITION.processElementTypes.startEvent\n    },\n    // @ts-ignore\n    super.defaults);\n  }\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\nclass RxStartEventView extends RxProcessShapeViewMixin(joint.dia.ElementView) {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n  // TODO-VS: remove\n  sgResize(opt) {\n    // @ts-ignore\n    const scalable = this.scalableNode;\n    scalable.attr('transform', `scale(${0.5},${0.5})`);\n    // @ts-ignore\n    super.update();\n  }\n}\nclass RxStartEventRegistrationModule {\n  constructor(rxProcessElementRegistryService, rxStartEventService, translateService) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.display-name.label'),\n      elementService: rxStartEventService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.events.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.solid,\n        label: RX_DESIGNER.paletteItemLabel.outer,\n        shape: RX_DESIGNER.paletteItemShape.circle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.startEvent,\n      shapeClass: RxStartEvent,\n      shapeType: 'StartEvent',\n      type: RX_PROCESS_DEFINITION.processElementTypes.startEvent,\n      viewShapeClass: RxStartEventView,\n      viewShapeType: 'StartEventView'\n    });\n  }\n}\nRxStartEventRegistrationModule.ɵfac = function RxStartEventRegistrationModule_Factory(t) {\n  return new (t || RxStartEventRegistrationModule)(i0.ɵɵinject(i1$1.RxProcessElementRegistryService), i0.ɵɵinject(RxStartEventService), i0.ɵɵinject(i3.TranslateService));\n};\nRxStartEventRegistrationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxStartEventRegistrationModule\n});\nRxStartEventRegistrationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxStartEventRegistrationModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxProcessElementRegistryService\n    }, {\n      type: RxStartEventService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nclass RxProcessElementService {\n  constructor(rxIdService, rxJsonParserService, rxProcessElementSearchService) {\n    this.rxIdService = rxIdService;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxProcessElementSearchService = rxProcessElementSearchService;\n  }\n  // TODO-VS: remove in favour of getJsonObject\n  getGraph(definition) {\n    const graph = this.rxJsonParserService.tryParseJson(definition.layout, {\n      cells: []\n    });\n    graph.cells.forEach(cell => {\n      const embeddedElementIds = map(filter(graph.cells, {\n        parent: cell.id\n      }), 'id');\n      if (startsWith(cell.type, 'rx.CallActivity')) {\n        cell.type = 'rx.CallActivity';\n      }\n      if (startsWith(cell.type, 'rx.ProcessActions')) {\n        cell.type = 'rx.ProcessAction';\n      }\n      if (embeddedElementIds.length) {\n        cell.embeds = embeddedElementIds;\n      }\n      cell.processDefinitionName = definition.name;\n      const flowElement = this.rxProcessElementSearchService.find(definition, {\n        guid: this.rxIdService.get(cell.id)\n      });\n      if (flowElement === null || flowElement === void 0 ? void 0 : flowElement.multiInstanceLoopDefinition) {\n        cell.multiInstanceLoopDefinition = flowElement.multiInstanceLoopDefinition;\n      }\n    });\n    return graph;\n  }\n}\nRxProcessElementService.ɵfac = function RxProcessElementService_Factory(t) {\n  return new (t || RxProcessElementService)(i0.ɵɵinject(i1.RxIdService), i0.ɵɵinject(i1.RxJsonParserService), i0.ɵɵinject(i1$1.RxProcessElementSearchService));\n};\nRxProcessElementService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessElementService,\n  factory: RxProcessElementService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessElementService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxIdService\n    }, {\n      type: i1.RxJsonParserService\n    }, {\n      type: i1$1.RxProcessElementSearchService\n    }];\n  }, null);\n})();\nclass RxProcessElementsModule {}\nRxProcessElementsModule.ɵfac = function RxProcessElementsModule_Factory(t) {\n  return new (t || RxProcessElementsModule)();\n};\nRxProcessElementsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxProcessElementsModule,\n  imports: [CommonModule, RxEndEventRegistrationModule, RxExpressionInputMapInspectorWidgetModule, RxOverlayModule, RxProcessActionRegistrationModule, RxStartEventRegistrationModule]\n});\nRxProcessElementsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RxEndEventRegistrationModule, RxExpressionInputMapInspectorWidgetModule, RxOverlayModule, RxProcessActionRegistrationModule, RxStartEventRegistrationModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessElementsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RxEndEventRegistrationModule, RxExpressionInputMapInspectorWidgetModule, RxOverlayModule, RxProcessActionRegistrationModule, RxStartEventRegistrationModule]\n    }]\n  }], null, null);\n})();\n\n// https://github.com/clientIO/joint/issues/817\n// When the size of shape is changed, JointJS resizes shape`s body via scaling.\n// IE11 & MS-Edge do not support `vector-effect`, which results in changing stroke-width.\n// `refHeight` & `refWidth` attributes allow resizing rectangular sub-elements relative to the referenced element without scaling.\njoint.util.deepSupplement(joint.shapes.bpmn.Activity.prototype.defaults, {\n  attrs: {\n    '.body': {\n      refWidth: 1,\n      refHeight: 1\n    }\n  },\n  // 1. Removed scalable group (<g class=\"scalable\">) from the original template of Activity element\n  // to resolve the issue of restoring the element size after undo/redo operations.\n  // http://clientio.freshdesk.com/support/tickets/560\n  // https://jira.bmc.com/browse/DRIST-8990\n  // 2. Added multi instance icons\n  markup: ['<g class=\"rotatable\">', '<rect class=\"body outer\"/>', '<rect class=\"body inner\"/>', joint.env.test('svgforeignobject') ? '<foreignObject class=\"fobj\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"content\"/></body></foreignObject>' : '<text class=\"content\"/>', '<g class=\"rx-icon-container\">', '<image class=\"icon-multi-instance-sequential\"/>', '<image class=\"icon-multi-instance-parallel\"/>', '<path class=\"sub-process\"/>', '</g>', '<image class=\"icon\"/>', '</g>'].join('')\n});\nvar rx;\n(function (rx) {\n  class BaseExpandableProcessShape extends joint.shapes.bpmn.Activity {\n    initialize(options) {\n      super.initialize(options);\n      const embeddedCells = this.getEmbeddedCells();\n      const embedsWithoutBoundaryEventLength = size(reject(embeddedCells, 'isBoundaryEvent'));\n      let modelEmbeds;\n      if (embedsWithoutBoundaryEventLength === embeddedCells.length) {\n        modelEmbeds = this.get('embeds');\n      }\n      if (this.collection && this.get('expanded') && !embedsWithoutBoundaryEventLength && isUndefined(modelEmbeds)) {\n        RxRootInjector.injector.get(RxProcessDefinitionCacheService).getProcessDefinition(this.get('processDefinitionName')).subscribe(processDefinition => {\n          const flowElement = RxRootInjector.injector.get(RxProcessElementSearchService).findByGuid(processDefinition, `rx-${this.get('id')}`) || {};\n          this.expand(processDefinition, RxRootInjector.injector.get(RxProcessElementService).getGraph(flowElement));\n        });\n      }\n    }\n    expand(definition, graph) {\n      graph.cells = sortBy(graph.cells, cell => cell.type === 'rx.SequenceFlow' || cell.type === 'rx.TextAnnotationAssociation');\n      const cellModels = [];\n      forEach(graph.cells, cell => {\n        const CellModel = joint.util.getByPath(this.collection.cellNamespace, cell.type, '.');\n        const cellModel = new CellModel(cell);\n        if (cellModel.get('expanded')) {\n          const flowElement = RxRootInjector.injector.get(RxProcessElementSearchService).findByGuid(definition, `rx-${cellModel.get('id')}`) || {};\n          cellModel.expand.call(this, definition, RxRootInjector.injector.get(RxProcessElementService).getGraph(flowElement));\n        }\n        cellModels.push(cellModel);\n      });\n      this.collection.add(cellModels);\n      this.attr({\n        '.sub-process': {\n          display: 'none',\n          visibility: 'hidden'\n        }\n      });\n    }\n  }\n  rx.BaseExpandableProcessShape = BaseExpandableProcessShape;\n  class BaseCallActivity extends BaseExpandableProcessShape {\n    defaults() {\n      return joint.util.deepSupplement({\n        activityType: 'call-activity',\n        expanded: false,\n        subProcess: true,\n        attrs: {\n          path: {\n            transform: 'scale(0.3, 0.3)',\n            'ref-dy': -15\n          },\n          rect: {\n            rx: 2,\n            ry: 2\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.BaseCallActivity = BaseCallActivity;\n  class BaseStaticMultiInstance extends joint.shapes.bpmn.Activity {\n    static initMultiInstanceIcons(model) {\n      const attrs = cloneDeep(model.get('attrs'));\n      const iconAttr = {\n        width: 10,\n        height: 10,\n        y: 1\n      };\n      attrs['.sub-process'] = {\n        d: 'M 0 0 L 30 0 30 30 0 30 z M 15 4 L 15 26 M 4 15 L 26 15',\n        stroke: '#000000',\n        fill: 'transparent',\n        transform: 'scale(0.3, 0.3) translate(0, 6)'\n      };\n      attrs['.sub-process'].display = model.prop('subProcess') ? '' : 'none';\n      attrs['.icon-multi-instance-sequential'] = cloneDeep(iconAttr);\n      attrs['.icon-multi-instance-parallel'] = cloneDeep(iconAttr);\n      attrs['.icon-multi-instance-sequential']['xlink:href'] = RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.multiInstanceSequential;\n      attrs['.icon-multi-instance-parallel']['xlink:href'] = RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.multiInstanceParallel;\n      attrs['.rx-icon-container'] = {\n        ref: '.body',\n        'x-alignment': 'middle',\n        'ref-x': 0.5,\n        'ref-dy': -15\n      };\n      defaults(attrs['.icon'], attrs.image);\n      delete attrs.image;\n      delete attrs.path;\n      model.unset('attrs', {\n        silent: true\n      });\n      model.set('attrs', attrs);\n    }\n    static updateMultiInstanceIcons(model) {\n      const loopType = model.prop('loopType');\n      const attrs = cloneDeep(model.get('attrs'));\n      attrs['.icon-multi-instance-sequential'].display = loopType === 'true' ? '' : 'none';\n      attrs['.icon-multi-instance-parallel'].display = loopType === 'false' ? '' : 'none';\n      if (model.prop('subProcess')) {\n        attrs['.sub-process'].transform = loopType ? 'scale(0.3, 0.3) translate(50, 6)' : 'scale(0.3, 0.3) translate(0, 6)';\n      }\n      model.unset('attrs', {\n        silent: true\n      });\n      model.set('attrs', attrs, {\n        rxSilent: true\n      });\n    }\n  }\n  rx.BaseStaticMultiInstance = BaseStaticMultiInstance;\n  class BaseMultiInstance extends joint.shapes.bpmn.Activity {\n    initialize(options) {\n      super.initialize(options);\n      if (options.multiInstanceLoopDefinition) {\n        this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), {\n          silent: true\n        });\n      }\n      BaseStaticMultiInstance.initMultiInstanceIcons(this);\n      BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n    }\n  }\n  rx.BaseMultiInstance = BaseMultiInstance;\n  class CallActivity extends BaseCallActivity {\n    initialize(options) {\n      super.initialize(options);\n      if (options.multiInstanceLoopDefinition) {\n        this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), {\n          silent: true\n        });\n      }\n      BaseStaticMultiInstance.initMultiInstanceIcons(this);\n      BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n    }\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.CallActivity'\n      }, BaseCallActivity.prototype.defaults());\n    }\n  }\n  rx.CallActivity = CallActivity;\n  class Connector extends BaseMultiInstance {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.Connector',\n        icon: 'connector',\n        attrs: {\n          '.icon': {\n            width: 12,\n            height: 12,\n            'ref-x': 3,\n            'ref-y': 3\n          },\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.Connector = Connector;\n  class EndEvent extends joint.shapes.bpmn.Event {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.EndEvent',\n        eventType: 'end',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n  }\n  rx.EndEvent = EndEvent;\n  class ErrorBoundaryEvent extends joint.shapes.bpmn.Event {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ErrorBoundaryEvent',\n        eventType: 'intermediate',\n        icon: 'errorBoundary',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n  }\n  rx.ErrorBoundaryEvent = ErrorBoundaryEvent;\n  class ErrorEndEvent extends joint.shapes.bpmn.Event {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ErrorEndEvent',\n        eventType: 'end',\n        icon: 'errorEnd',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n  }\n  rx.ErrorEndEvent = ErrorEndEvent;\n  class ExclusiveGateway extends joint.shapes.bpmn.Gateway {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ExclusiveGateway',\n        icon: 'cross',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Gateway.prototype.defaults);\n    }\n  }\n  rx.ExclusiveGateway = ExclusiveGateway;\n  class ParallelGateway extends joint.shapes.bpmn.Gateway {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ParallelGateway',\n        icon: 'plus',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Gateway.prototype.defaults);\n    }\n  }\n  rx.ParallelGateway = ParallelGateway;\n  class ProcessAction extends joint.shapes.bpmn.Activity {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ProcessAction',\n        icon: 'gear',\n        attrs: {\n          '.icon': {\n            width: 12,\n            height: 12,\n            'ref-x': 3,\n            'ref-y': 3\n          },\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        },\n        size: {\n          width: 70,\n          height: 60\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.ProcessAction = ProcessAction;\n  class ReceiveTask extends BaseMultiInstance {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.ReceiveTask',\n        icon: 'message',\n        attrs: {\n          '.icon': {\n            width: 12,\n            height: 12,\n            'ref-x': 3,\n            'ref-y': 3\n          },\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.ReceiveTask = ReceiveTask;\n  class SequenceFlow extends joint.shapes.bpmn.Flow {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.SequenceFlow',\n        router: {\n          name: 'manhattan',\n          args: {\n            step: 5\n          }\n        }\n      }, joint.shapes.bpmn.Flow.prototype.defaults);\n    }\n  }\n  rx.SequenceFlow = SequenceFlow;\n  class StartEvent extends joint.shapes.bpmn.Event {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.StartEvent',\n        eventType: 'start',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n  }\n  rx.StartEvent = StartEvent;\n  class SubProcess extends BaseExpandableProcessShape {\n    initialize(options) {\n      super.initialize(options);\n      if (options.multiInstanceLoopDefinition) {\n        this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), {\n          silent: true\n        });\n      }\n      BaseStaticMultiInstance.initMultiInstanceIcons(this);\n      BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n    }\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.SubProcess',\n        activityType: 'event-sub-process',\n        expanded: false,\n        subProcess: true,\n        attrs: {\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.SubProcess = SubProcess;\n  class TextAnnotation extends joint.shapes.bpmn.Annotation {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.TextAnnotation',\n        attrs: {\n          rect: {\n            rx: 2,\n            ry: 2\n          }\n        }\n      }, joint.shapes.bpmn.Annotation.prototype.defaults);\n    }\n  }\n  rx.TextAnnotation = TextAnnotation;\n  class TextAnnotationAssociation extends joint.shapes.bpmn.Flow {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.TextAnnotationAssociation',\n        flowType: 'association'\n      }, joint.shapes.bpmn.Flow.prototype.defaults);\n    }\n  }\n  rx.TextAnnotationAssociation = TextAnnotationAssociation;\n  class TimerEvent extends joint.shapes.bpmn.Event {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.TimerEvent',\n        eventType: 'intermediate',\n        icon: 'clock',\n        attrs: {\n          '.label': {\n            fill: 'gray'\n          }\n        }\n      }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n  }\n  rx.TimerEvent = TimerEvent;\n  class UserTask extends BaseMultiInstance {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.UserTask',\n        icon: 'user',\n        attrs: {\n          '.icon': {\n            width: 12,\n            height: 12,\n            'ref-x': 3,\n            'ref-y': 3\n          },\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.UserTask = UserTask;\n  class WebRequest extends joint.shapes.bpmn.Activity {\n    defaults() {\n      return joint.util.deepSupplement({\n        type: 'rx.WebRequest',\n        icon: 'webRequest',\n        attrs: {\n          '.icon': {\n            width: 12,\n            height: 12,\n            'ref-x': 3,\n            'ref-y': 3\n          },\n          rect: {\n            rx: 4,\n            ry: 4\n          }\n        }\n      }, joint.shapes.bpmn.Activity.prototype.defaults);\n    }\n  }\n  rx.WebRequest = WebRequest;\n})(rx || (rx = {}));\nvar processShapes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get rx() {\n    return rx;\n  }\n});\nclass RxDesignerCellHighlighter extends Backbone.View {\n  constructor(cellView) {\n    super();\n    this.selectors = {\n      bpmn: {\n        'bpmn.Event': '.scalable circle.outer',\n        'bpmn.Annotation': '.rotatable path.stroke',\n        link: 'path.connection',\n        'bpmn.Flow': 'path.connection',\n        'bpmn.Gateway': '.scalable polygon.body',\n        'bpmn.Activity': '.scalable rect.outer',\n        'basic.Rect': '.scalable rect'\n      },\n      rx: {\n        'rx.TextAnnotation': '.rotatable path.stroke',\n        'rx.TextAnnotationAssociation': 'path.connection',\n        'rx.SequenceFlow': 'path.connection',\n        'rx.ParallelGateway': '.scalable polygon.body',\n        'rx.ExclusiveGateway': '.scalable polygon.body',\n        'rx.StartEvent': '.scalable circle.outer',\n        'rx.EndEvent': '.scalable circle.outer',\n        'rx.SubProcess': '.rotatable rect.outer',\n        'rx.ReceiveTask': '.rotatable rect.outer',\n        'rx.UserTask': '.rotatable rect.outer',\n        'rx.Connector': '.rotatable rect.outer',\n        'rx.TimerEvent': '.scalable circle.outer',\n        'rx.WebRequest': '.rotatable rect.outer'\n      }\n    };\n    this.cellView = cellView;\n    this.listenTo(this.cellView.paper, 'scale translate', this.update);\n    this.$el = this.cellView.$el;\n  }\n  init(options) {\n    this.options = extend({}, result(this, 'options'), options || {});\n    this.cellView.model.on('remove', this.eraseHighlightAndRemove);\n    this.update();\n  }\n  update() {\n    this.eraseHighlight();\n    this.drawHighlight();\n  }\n  eraseHighlightAndRemove(evt) {\n    this.eraseHighlight();\n    Backbone.View.prototype.remove.apply(this, arguments);\n  }\n  eraseHighlight() {\n    if (this.cellViewHighlighter) {\n      this.cellViewHighlighter.remove();\n    }\n  }\n  drawHighlight() {\n    let selector;\n    switch (true) {\n      case this.cellView.model instanceof rx.ProcessAction:\n      case this.cellView.model instanceof rx.BaseCallActivity:\n        selector = '.rotatable rect.outer';\n        break;\n      default:\n        selector = this.selectors.rx[this.cellView.model.prop('type')] || this.selectors.bpmn[this.cellView.model.prop('type')];\n    }\n    const shape = this.cellView.$el.find(selector).first();\n    const highlight = shape[0] ? V(shape[0]).clone() : undefined;\n    if (highlight) {\n      highlight.attr({\n        stroke: this.options.color,\n        'stroke-width': this.options.strokeWidth\n      });\n      if (highlight.node.tagName === 'circle') {\n        highlight.attr({\n          r: this.options.circleRadius\n        });\n      }\n      this.cellViewHighlighter = highlight;\n      shape.closest('g').prepend(highlight.node);\n    }\n  }\n}\nclass RxRappidPaperService {\n  constructor(rxIdService, rxProcessElementService, rxProcessElementSearchService, rxTreeService) {\n    this.rxIdService = rxIdService;\n    this.rxProcessElementService = rxProcessElementService;\n    this.rxProcessElementSearchService = rxProcessElementSearchService;\n    this.rxTreeService = rxTreeService;\n    this.green = '#89c341';\n    this.gray = '#999999';\n    this.red = '#f83200';\n    assign(joint.shapes.bpmn.icons, RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons);\n  }\n  init(element, graph, shouldZoomToFit = false) {\n    // : PaperScroller\n    // Do not instantiate paper with width or height parameters equal to 0, (e.g element is hidden in the DOM),\n    // otherwise it will cause RappidJS issue in the Firefox Browser. See DRIST-18107 for more details.\n    const paper = new joint.dia.Paper({\n      width: element.width || 1,\n      height: element.height || 1,\n      model: new joint.dia.Graph({}, {\n        cellNamespace: processShapes\n      }),\n      cellViewNamespace: processShapes,\n      interactive: false,\n      // specifying a non-existent theme to prevent rappid from overriding our styles\n      // due to 'default' theme being applied\n      theme: 'rx'\n    });\n    const paperScroller = new joint.ui.PaperScroller({\n      autoResizePaper: true,\n      paper: paper,\n      padding: {\n        padding: 10\n      }\n    });\n    element.appendChild(paperScroller.render().el);\n    paperScroller.options.paper.on('blank:pointerdown', paperScroller.startPanning);\n    this.resetScroll(paperScroller);\n    if (graph) {\n      paperScroller.options.paper.model.fromJSON(graph);\n      if (shouldZoomToFit) {\n        this.zoomToFit(paperScroller);\n      }\n    }\n    return paperScroller;\n  }\n  setGraph(paperScroller, processDefinition, processInstance, shouldZoomToFit = false) {\n    const graph = this.rxProcessElementService.getGraph(processDefinition);\n    const paper = paperScroller.options.paper;\n    paper.model.fromJSON(graph);\n    if (shouldZoomToFit) {\n      this.zoomToFit(paperScroller);\n    }\n    forEach(processInstance.activities, activity => {\n      const activityId = this.rxIdService.getBase(activity.activityId);\n      const cell = paper.findViewByModel(activityId);\n      if (cell) {\n        if (activity.activities.length && cell.model.get('expanded')) {\n          const subProcessActivities = this.rxTreeService.flattenTree(activity, 'activities');\n          const elements = paper.model.getElements();\n          const graphIds = map(elements, 'id');\n          const originalGraphIds = compact(map(elements, element => element.get('originalGuid')));\n          forEach(subProcessActivities, subProcessActivity => {\n            // we need to do this check in order to filter inner elements that are in process\n            // instance json but are not present in graph as their parent is not expanded\n            if (includes(graphIds, this.rxIdService.getBase(subProcessActivity.activityId))) {\n              this.highlightActivity(subProcessActivity, paper, processDefinition);\n            } else if (originalGraphIds && includes(originalGraphIds, subProcessActivity.activityId)) {\n              this.highlightActivity(subProcessActivity, paper, processDefinition);\n            }\n          });\n          this.highlightActivity(activity, paper, processDefinition);\n        } else {\n          this.highlightActivity(activity, paper, processDefinition);\n        }\n      }\n    });\n    if (processInstance.exceptionMessage) {\n      // exceptionMessage will be like <activityName>(<acitivityGuid>) - [<errorMessage>]\n      // RegExp - find guid from exceptionMessage\n      const guidPattern = new RegExp('\\\\((' + RX_GUID.baseIdPattern + ')\\\\)', 'i');\n      const activityId = guidPattern.exec(processInstance.exceptionMessage);\n      if (activityId[0]) {\n        const activityBaseId = this.rxIdService.getBase(activityId[1]);\n        this.highlightCell(activityBaseId, paper, this.red, processDefinition);\n      }\n    }\n    this.resetScroll(paperScroller);\n  }\n  highlight(cellView, color) {\n    if (cellView instanceof joint.dia.CellView) {\n      const cellHighlighter = new RxDesignerCellHighlighter(cellView);\n      cellHighlighter.init({\n        strokeWidth: 10,\n        color: color\n      });\n    }\n  }\n  highlightActivity(activity, paper, plainProcessDefinition) {\n    const activityId = this.rxIdService.getBase(activity.activityId);\n    const color = activity.endTime ? this.gray : this.green;\n    this.highlightCell(activityId, paper, color, plainProcessDefinition);\n  }\n  highlightCell(cellId, paper, color, plainProcessDefinition) {\n    const elements = paper.model.getElements();\n    let cell;\n    let cellView;\n    if (!includes(map(elements, 'id'), cellId)) {\n      cell = find(elements, element => element.get('originalGuid') === this.rxIdService.get(cellId));\n      cellId = cell ? cell.id : cellId;\n    }\n    cellView = paper.findViewByModel(cellId);\n    if (cellView) {\n      this.highlight(cellView, color);\n    } else {\n      this.highlightVisibleErroredCell(cellId, false, paper, plainProcessDefinition);\n      // Used to highlight errored cell inside expanded sub-processes\n      paper.model.on('change', debounce(() => {\n        this.highlightVisibleErroredCell(cellId, true, paper, plainProcessDefinition);\n      }, 100));\n    }\n  }\n  highlightVisibleErroredCell(cellId, isFirstEntry, paper, plainProcessDefinition) {\n    const owner = this.rxProcessElementSearchService.findOwner(plainProcessDefinition, this.rxIdService.get(cellId));\n    let cellView;\n    let erroredElement;\n    if (isFirstEntry) {\n      erroredElement = find(owner.flowElements, {\n        guid: this.rxIdService.get(cellId)\n      });\n      cellView = paper.findViewByModel(this.rxIdService.getBase(erroredElement.guid));\n    }\n    if (!cellView) {\n      cellView = paper.findViewByModel(this.rxIdService.getBase(owner.guid));\n    }\n    if (cellView) {\n      this.highlight(cellView, this.red);\n    } else {\n      this.highlightVisibleErroredCell(owner.guid, false, paper, plainProcessDefinition);\n    }\n  }\n  resetScroll(paperScroller) {\n    paperScroller.el.scrollTop = 0;\n    paperScroller.el.scrollLeft = 0;\n  }\n  zoomToFit(paperScroller) {\n    setTimeout(() => {\n      paperScroller.zoomToFit({\n        padding: 10\n      });\n    });\n  }\n}\nRxRappidPaperService.ɵfac = function RxRappidPaperService_Factory(t) {\n  return new (t || RxRappidPaperService)(i0.ɵɵinject(i1.RxIdService), i0.ɵɵinject(RxProcessElementService), i0.ɵɵinject(i1$1.RxProcessElementSearchService), i0.ɵɵinject(i1.RxTreeService));\n};\nRxRappidPaperService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRappidPaperService,\n  factory: RxRappidPaperService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRappidPaperService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxIdService\n    }, {\n      type: RxProcessElementService\n    }, {\n      type: i1$1.RxProcessElementSearchService\n    }, {\n      type: i1.RxTreeService\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RxEndEventRegistrationModule, RxEndEventService, RxExpressionInputMapInspectorWidgetComponent, RxExpressionInputMapInspectorWidgetModule, RxProcessAction, RxProcessActionExpressionConfigurator, RxProcessActionRegistrationModule, RxProcessActionService, RxProcessActionView, RxProcessElementService, RxProcessElementsModule, RxProcessService, RxProcessShapeMixin, RxProcessShapeViewMixin, RxRappidPaperService, RxStartEventRegistrationModule, RxStartEventService, rx };\n//# sourceMappingURL=helix-platform-process-elements.js.map","map":{"version":3,"names":["i0","Injectable","NgModule","ElementRef","Component","ViewChild","i3","i1$2","RxRootInjector","RxCommandManagerService","RX_DESIGNER","Tooltip","RxServerActionExpressionConfigurator","RxServerActionService","RxActionTypeUtilsService","RxServerActionMixin","RxServerActionViewMixin","RX_DESIGNER_ELEMENT_SHAPE","RxOverlayModule","i1$1","RX_PROCESS_DEFINITION","RxProcessDataDictionaryService","RxProcessElementRegistryService","RxProcessDefinitionCacheService","RxProcessElementSearchService","of","ReplaySubject","isEmpty","some","chain","omit","truncate","escape","isFunction","filter","min","map","max","isEqual","isArray","transform","reduce","startsWith","size","reject","isUndefined","sortBy","forEach","cloneDeep","defaults","extend","result","assign","compact","includes","find","debounce","ValidationIssueType","i1","RxIdService","RX_GUID","i2","TextFormControlComponent","TextareaFormControlComponent","RxRevertCustomizationComponent","CustomizationOptionsComponent","SwitchFormControlComponent","SelectFormControlComponent","RxPermissionEditorComponent","InspectorWidgetBase","LabelFormControlComponent","AssignmentExpressionListFormControlComponent","AssignmentExpressionListTargetFieldType","ExpressionFormControlModule","RxFormBuilderModule","RxInspectorModule","RX_RECORD_DEFINITION","pluck","takeUntil","take","map$1","i4","CommonModule","i5","FormsModule","Backbone","_c0","RxExpressionInputMapInspectorWidgetComponent_div_0_rx_expression_form_control_2_Template","rf","ctx","_r6","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","RxExpressionInputMapInspectorWidgetComponent_div_0_rx_expression_form_control_2_Template_rx_expression_form_control_events_0_listener","restoredCtx","ɵɵrestoreView","section_r4","$implicit","elementModel_r1","ɵɵnextContext","ngIf","ctx_r5","openExpressionEditor","expressionInputMapInspectorElementRef","ɵɵelementEnd","ɵɵproperty","options","name","inputMap","RxExpressionInputMapInspectorWidgetComponent_div_0_Template","ɵɵtemplate","ctx_r0","ɵɵadvance","config","RxEndEventService","constructor","rxStringService","translateService","getDefinitionFromModel","model","description","guid","resourceType","getInspectorConfig","label","instant","controls","component","rows","isDisabled","getModelFromDefinition","definition","elementModel","processElementDisplayNames","endEvent","processElementResourceTypes","type","processElementTypes","Object","getShape","joint","shapes","rx","EndEvent","position","setCommonDataDictionaryBranch","dataDictionaryBranch","validate","availableCells","validationIssues","inboundLinks","cell","prop","length","push","Warning","propertyName","data","inspectorTabIndex","outboundLinks","isEmptySafe","Error","ɵfac","RxEndEventService_Factory","t","ɵɵinject","RxStringService","TranslateService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","args","RxProcessShapeMixin","Base","RxProcessShape","arguments","labelPath","initialize","on","onSizeChange","onPositionChange","onIdChange","onElementModelChange","injector","get","getCommandManager","canBeEmbedded","parentView","paper","hasNeighbors","getNeighbors","hasBoundaryElementsWithNeighbors","getEmbeddedCells","isBoundaryEvent","embeddedCell","canEmbedElement","childView","getLabel","getLayout","toJSON","getParentId","onActivityTypeChange","element","attr","visibility","path","ref","image","rect","ry","updateContent","content","id","tooltip","env","test","html","title","text","updateName","getBase","silent","propertyPath","translateBy","propertyValue","previousPosition","previous","parentMovedBy","cx","x","cy","y","_snapToParentBorder","RxEndEvent","bpmn","Event","util","deepSupplement","attrs","fill","defaultName","eventType","icon","width","height","prototype","RxProcessShapeViewMixin","RxProcessShapeView","canInteract","interactive","prepareEmbedding","dia","ElementView","apply","getEmbeddedBBox","embeddedCellModels","cellModel","bboxes","view","findViewByModel","V","el","bbox","viewport","value","minX","minY","maxX","maxY","g","RxEndEventView","sgResize","opt","scalable","scalableNode","update","RxEndEventRegistrationModule","rxEndEventService","rxProcessElementRegistryService","register","displayName","elementService","group","standardProcessElementGroups","events","paletteItem","border","paletteItemBorder","bold","paletteItemLabel","outer","shape","paletteItemShape","circle","shapeClass","shapeType","viewShapeClass","viewShapeType","RxEndEventRegistrationModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","RxProcess","Element","markup","defaultsDeep","RxProcessService","rxDefinitionNameService","definitionModel","allowOverlay","customizationOptions","contextKeyParam","inputParams","isEnabled","localVariables","getDefinitionName","bundleId","outputParams","overlayDescriptor","overlayGroupId","permissions","runAsUser","definitionValue","scope","Boolean","lastUpdateTime","required","hidden","owner","lastChangedBy","definitionTypeDisplayName","toLowerCase","administrator","modelValue","currentUser","getDisplayName","validDefinitionNameRegex","startEvents","startEvent","endEvents","RxProcessService_Factory","RxDefinitionNameService","RxExpressionInputMapInspectorWidgetComponent","renderer","rxDesignerCacheService","rxExpressionEditorService","rxIdService","destroyed$","ngOnInit","elementModel$","designerItemModel","pipe","graph$","patchConfig","ngOnChanges","changes","currentValue","previousValue","ngOnDestroy","next","complete","section","inspectorElementRef","subscribe","graph","openEditor","expressionConfigurator","expressionPropertyNavigator","getProperties","getExpressionProperties","bind","isReadOnly","property","expression","selectedElementCell","getCell","modelProperties","Array","from","selectRootElement","nativeElement","querySelectorAll","getAttribute","expressionInputMapInspectorOptions","expressionInputMapInspectorOption","dataDictionary$","getDataDictionary","operators","getOperators","RxExpressionInputMapInspectorWidgetComponent_Factory","ɵɵdirectiveInject","Renderer2","RxDesignerCacheService","RxExpressionEditorService","Injector","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","RxExpressionInputMapInspectorWidgetComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","decls","vars","consts","template","RxExpressionInputMapInspectorWidgetComponent_Template","ɵɵpipe","ɵɵpipeBind1","directives","NgIf","NgForOf","ExpressionFormControlComponent","NgControlStatus","NgModel","pipes","AsyncPipe","styles","selector","templateUrl","styleUrls","read","RxProcessActionExpressionConfigurator","configureForProperty","getOutputMapDataDictionary","getDataDictionaryService","commonDataDictionary$","RxProcessActionService","rxActionTypeUtilsService","rxProcessDataDictionaryService","actionTypeName","getInputMapFromModel","multiInstanceLoopDefinition","outputMap","getExpressionConfigurator","_a","getExpressionConfiguratorClass","generalConfigControls","inheritFromProcess","isDeprecated","unshift","definitionType","getInputMapInspectorWidgetConfig","confirmationMessage","sourceFieldOptions","targetFieldOptions","Select","processDefinitionModel","uniq","actionType","getActionTypeByName","prettifyActionTypeName","deprecatedText","getInputMapFromDefinition","getRunAsUserFromDefinition","getElementType","processAction","ProcessActionClass","getClass","classConfig","getClassConfig","setCommonActivitiesDataDictionaryBranch","validateServerAction","serverActionValidationIssues","buildDataDictionaryBranch","buildOutputDataDictionaryBranch","outputDataDictionaryBranch","isArrayOrListDataType","isActionParameterArrayOrList","children","buildDefaultOutputDataDictionaryBranch","dataTypeDetail","updateOutputDataDictionaryBranch","ProcessAction","getDefinitionInputMapParam","inputParamName","inputParamValue","assignTarget","inputParam","prettify","initialInputMap","inputMapField","outputPropertyPathOpener","outputParam","outputPropertyPath","inputMapParam","getOutputDataDictionaryExpression","flowElementGuid","child","RxProcessActionService_Factory","RxProcessAction","Activity","getElementService","RxProcessActionView","ActivityView","RxProcessActionRegistrationModule","rxProcessActionService","platformActions","bpmnIcons","gear","paletteIconPosition","top","rectangle","RxProcessActionRegistrationModule_Factory","RxExpressionInputMapInspectorWidgetModule","RxExpressionInputMapInspectorWidgetModule_Factory","declarations","imports","exports","RxStartEventService","StartEvent","RxStartEventService_Factory","RxStartEvent","RxStartEventView","RxStartEventRegistrationModule","rxStartEventService","solid","RxStartEventRegistrationModule_Factory","RxProcessElementService","rxJsonParserService","rxProcessElementSearchService","getGraph","tryParseJson","layout","cells","embeddedElementIds","parent","embeds","processDefinitionName","flowElement","RxProcessElementService_Factory","RxJsonParserService","RxProcessElementsModule","RxProcessElementsModule_Factory","refWidth","refHeight","join","BaseExpandableProcessShape","embeddedCells","embedsWithoutBoundaryEventLength","modelEmbeds","collection","getProcessDefinition","processDefinition","findByGuid","expand","cellModels","CellModel","getByPath","cellNamespace","call","add","display","BaseCallActivity","activityType","expanded","subProcess","BaseStaticMultiInstance","initMultiInstanceIcons","iconAttr","d","stroke","multiInstanceSequential","multiInstanceParallel","unset","set","updateMultiInstanceIcons","loopType","rxSilent","BaseMultiInstance","String","isSequential","CallActivity","Connector","ErrorBoundaryEvent","ErrorEndEvent","ExclusiveGateway","Gateway","ParallelGateway","ReceiveTask","SequenceFlow","Flow","router","step","SubProcess","TextAnnotation","Annotation","TextAnnotationAssociation","flowType","TimerEvent","UserTask","WebRequest","processShapes","freeze","__proto__","RxDesignerCellHighlighter","View","cellView","link","listenTo","$el","init","eraseHighlightAndRemove","eraseHighlight","drawHighlight","evt","remove","cellViewHighlighter","highlight","clone","undefined","color","strokeWidth","node","tagName","r","circleRadius","closest","prepend","RxRappidPaperService","rxProcessElementService","rxTreeService","green","gray","red","icons","shouldZoomToFit","Paper","Graph","cellViewNamespace","theme","paperScroller","ui","PaperScroller","autoResizePaper","padding","appendChild","render","startPanning","resetScroll","fromJSON","zoomToFit","setGraph","processInstance","activities","activity","activityId","subProcessActivities","flattenTree","elements","getElements","graphIds","originalGraphIds","subProcessActivity","highlightActivity","exceptionMessage","guidPattern","RegExp","baseIdPattern","exec","activityBaseId","highlightCell","CellView","cellHighlighter","plainProcessDefinition","endTime","cellId","highlightVisibleErroredCell","isFirstEntry","findOwner","erroredElement","flowElements","scrollTop","scrollLeft","setTimeout","RxRappidPaperService_Factory","RxTreeService"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-process-elements.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule, ElementRef, Component, ViewChild } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport * as i1$2 from '@helix/platform/shared/api';\nimport { RxRootInjector, RxCommandManagerService, RX_DESIGNER, Tooltip, RxServerActionExpressionConfigurator, RxServerActionService, RxActionTypeUtilsService, RxServerActionMixin, RxServerActionViewMixin, RX_DESIGNER_ELEMENT_SHAPE, RxOverlayModule } from '@helix/platform/shared/api';\nimport * as i1$1 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION, RxProcessDataDictionaryService, RxProcessElementRegistryService, RxProcessDefinitionCacheService, RxProcessElementSearchService } from '@helix/platform/process/api';\nimport { of, ReplaySubject } from 'rxjs';\nimport { isEmpty, some, chain, omit, truncate, escape, isFunction, filter, min, map, max, isEqual, isArray, transform, reduce, startsWith, size, reject, isUndefined, sortBy, forEach, cloneDeep, defaults, extend, result, assign, compact, includes, find, debounce } from 'lodash';\nimport { ValidationIssueType } from '@helix/platform/ui-kit';\nimport * as i1 from '@helix/platform/utils';\nimport { RxIdService, RX_GUID } from '@helix/platform/utils';\nimport * as i2 from '@helix/platform/shared/components';\nimport { TextFormControlComponent, TextareaFormControlComponent, RxRevertCustomizationComponent, CustomizationOptionsComponent, SwitchFormControlComponent, SelectFormControlComponent, RxPermissionEditorComponent, InspectorWidgetBase, LabelFormControlComponent, AssignmentExpressionListFormControlComponent, AssignmentExpressionListTargetFieldType, ExpressionFormControlModule, RxFormBuilderModule, RxInspectorModule } from '@helix/platform/shared/components';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { pluck, takeUntil, take, map as map$1 } from 'rxjs/operators';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as Backbone from 'backbone';\n\nclass RxEndEventService {\n    constructor(rxStringService, translateService) {\n        this.rxStringService = rxStringService;\n        this.translateService = translateService;\n    }\n    getDefinitionFromModel(model) {\n        return {\n            description: model.description,\n            guid: model.guid,\n            name: model.name,\n            resourceType: model.resourceType\n        };\n    }\n    // TODO-VS: add position and size inspector groups\n    getInspectorConfig() {\n        return [\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n                controls: [\n                    {\n                        name: 'label',\n                        component: TextFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n                        }\n                    },\n                    {\n                        name: 'description',\n                        component: TextareaFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n                            rows: 3\n                        }\n                    },\n                    {\n                        name: 'guid',\n                        component: TextFormControlComponent,\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n    // TODO-VS: update logic and types\n    getModelFromDefinition(definition) {\n        let elementModel = {\n            description: '',\n            guid: null,\n            label: '',\n            name: RX_PROCESS_DEFINITION.processElementDisplayNames.endEvent,\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent,\n            type: RX_PROCESS_DEFINITION.processElementTypes.endEvent\n        };\n        if (definition) {\n            elementModel = Object.assign(Object.assign({}, elementModel), { description: definition.description, guid: definition.guid, label: definition.name, name: definition.name, resourceType: definition.resourceType });\n        }\n        return elementModel;\n    }\n    getShape(options) {\n        return new joint.shapes.rx.EndEvent({\n            elementModel: this.getModelFromDefinition(),\n            position: options.position\n        });\n    }\n    setCommonDataDictionaryBranch(guid, dataDictionaryBranch) { }\n    validate(model, availableCells) {\n        const validationIssues = [];\n        const inboundLinks = availableCells.filter((cell) => cell.prop('targetNode') === model.guid);\n        if (inboundLinks.length < 1) {\n            validationIssues.push({\n                type: ValidationIssueType.Warning,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n                    propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.inbound-sequence-flow.label')\n                }),\n                data: {\n                    guid: model.guid,\n                    inspectorTabIndex: 1\n                }\n            });\n        }\n        const outboundLinks = availableCells.filter((cell) => cell.prop('sourceNode') === model.guid);\n        if (!isEmpty(outboundLinks)) {\n            validationIssues.push({\n                type: ValidationIssueType.Warning,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.end-event.validation.outbound-sequence-flow.message'),\n                data: {\n                    guid: model.guid,\n                    inspectorTabIndex: 1\n                }\n            });\n        }\n        if (this.rxStringService.isEmptySafe(model.label)) {\n            if (some(availableCells, (cell) => cell.prop('label') === model.label)) {\n                validationIssues.push({\n                    type: ValidationIssueType.Error,\n                    description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.must-be-unique.message', {\n                        propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n                    }),\n                    data: {\n                        guid: model.guid,\n                        inspectorTabIndex: 1,\n                        propertyName: 'label'\n                    }\n                });\n            }\n        }\n        return of(validationIssues);\n    }\n}\nRxEndEventService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventService, deps: [{ token: i1.RxStringService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxEndEventService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxStringService }, { type: i3.TranslateService }]; } });\n\nfunction RxProcessShapeMixin(Base) {\n    return class RxProcessShape extends Base {\n        constructor() {\n            super(...arguments);\n            this.labelPath = 'content';\n        }\n        initialize(config) {\n            // @ts-ignore\n            super.initialize(config);\n            // @ts-ignore\n            this.on('change:size', this.onSizeChange);\n            // @ts-ignore\n            this.on('change:position', this.onPositionChange);\n            // @ts-ignore\n            this.on('change:id', this.onIdChange);\n            // @ts-ignore\n            this.on('change:elementModel', this.onElementModelChange);\n            // @ts-ignore\n            this.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(this.get('id')));\n            // @ts-ignore\n            const labelPath = this.get('labelPath') || 'content';\n            // @ts-ignore\n            this.prop('elementModel/label', this.prop(labelPath));\n        }\n        getCommandManager() {\n            return RxRootInjector.injector.get(RxCommandManagerService).get();\n        }\n        canBeEmbedded(parentView, paper) {\n            const hasNeighbors = !isEmpty(paper.model.getNeighbors(this));\n            // @ts-ignore\n            const hasBoundaryElementsWithNeighbors = chain(this.getEmbeddedCells())\n                .filter({ isBoundaryEvent: true })\n                .some((embeddedCell) => !isEmpty(paper.model.getNeighbors(embeddedCell)));\n            return !hasNeighbors && !hasBoundaryElementsWithNeighbors;\n        }\n        canEmbedElement(childView, paper) {\n            return false;\n        }\n        getLabel() {\n            // @ts-ignore\n            return this.prop('elementModel/label');\n        }\n        getLayout() {\n            // @ts-ignore\n            return omit(this.toJSON(), [\n                'elementModel',\n                'embeds',\n                'layout',\n                'parentProcessDefinition',\n                'ownerProcessDefinitionName',\n                'localizableProperties',\n                'inputMapFields'\n            ]);\n        }\n        getParentId() {\n            // @ts-ignore\n            return this.get('parent');\n        }\n        onActivityTypeChange(element, type) {\n            switch (type) {\n                case 'task':\n                    element.attr({\n                        '.inner': {\n                            visibility: 'hidden'\n                        },\n                        '.outer': {\n                            'stroke-width': 2,\n                            'stroke-dasharray': 'none'\n                        },\n                        path: {\n                            ref: '.outer'\n                        },\n                        image: {\n                            ref: '.outer'\n                        },\n                        rect: {\n                            rx: 4,\n                            ry: 4\n                        }\n                    });\n                    break;\n                case 'event-sub-process':\n                    element.attr({\n                        '.inner': {\n                            visibility: 'hidden'\n                        },\n                        '.outer': {\n                            'stroke-width': 2,\n                            'stroke-dasharray': '1,2'\n                        },\n                        path: {\n                            ref: '.outer'\n                        },\n                        image: {\n                            ref: '.outer'\n                        },\n                        rect: {\n                            rx: 4,\n                            ry: 4\n                        }\n                    });\n                    break;\n                case 'call-activity':\n                    element.attr({\n                        '.inner': {\n                            visibility: 'hidden'\n                        },\n                        '.outer': {\n                            'stroke-width': 4,\n                            'stroke-dasharray': 'none'\n                        },\n                        path: {\n                            ref: '.outer'\n                        },\n                        image: {\n                            ref: '.outer'\n                        },\n                        rect: {\n                            rx: 4,\n                            ry: 4\n                        }\n                    });\n                    break;\n            }\n        }\n        updateContent() {\n            // @ts-ignore\n            const content = this.get('content');\n            // @ts-ignore\n            const label = this.id ? content : truncate(content, { length: 20 });\n            const tooltip = label === content ? '' : content;\n            if (joint.env.test('svgforeignobject')) {\n                // Content element is a <div> element.\n                // @ts-ignore\n                this.attr({\n                    '.content': {\n                        // escape the label to patch XSS vulnerability (http://clientio.freshdesk.com/helpdesk/tickets/522)\n                        html: escape(label),\n                        title: tooltip\n                    }\n                });\n            }\n            else {\n                // Content element is a <text> element.\n                // SVG elements don't have innerHTML attribute.\n                // @ts-ignore\n                this.attr({\n                    '.content': {\n                        text: label,\n                        title: tooltip\n                    }\n                });\n            }\n        }\n        updateName() {\n            // @ts-ignore\n            this.prop('elementModel/name', this.getLabel() || this.get('defaultName'));\n        }\n        onIdChange(element, id) {\n            const guid = element.prop('elementModel/guid');\n            if (guid) {\n                element.prop('lastId', RxRootInjector.injector.get(RxIdService).getBase(guid), { silent: true });\n            }\n            element.prop('elementModel/guid', RxRootInjector.injector.get(RxIdService).get(id), { silent: true });\n        }\n        onElementModelChange(element, elementModel, options) {\n            if (options.propertyPath === 'elementModel/label') {\n                // @ts-ignore\n                const labelPath = this.get('labelPath') || 'content';\n                if (labelPath) {\n                    element.prop(labelPath, this.getLabel());\n                }\n            }\n            this.updateName();\n        }\n        onPositionChange(element, position, options) {\n            if (!options.translateBy && options.propertyValue) {\n                // @ts-ignore\n                const previousPosition = this.previous('position');\n                const parentMovedBy = {\n                    cx: previousPosition.x - position.x,\n                    cy: previousPosition.y - position.y\n                };\n                // @ts-ignore\n                this.getEmbeddedCells().forEach((embeddedCell) => {\n                    if (embeddedCell._snapToParentBorder) {\n                        embeddedCell._snapToParentBorder(this, parentMovedBy);\n                    }\n                });\n            }\n        }\n        onSizeChange(element) {\n            element.getEmbeddedCells().forEach((embeddedCell) => {\n                if (embeddedCell.isBoundaryEvent && embeddedCell._snapToParentBorder) {\n                    embeddedCell._snapToParentBorder(embeddedCell);\n                }\n            });\n        }\n    };\n}\n\nclass RxEndEvent extends RxProcessShapeMixin(joint.shapes.bpmn.Event) {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n    defaults() {\n        return joint.util.deepSupplement({\n            attrs: {\n                '.label': {\n                    fill: 'gray'\n                }\n            },\n            defaultName: RX_PROCESS_DEFINITION.processElementDisplayNames.endEvent,\n            eventType: 'end',\n            icon: 'transparent',\n            labelPath: 'attrs/.label/text',\n            size: {\n                width: 30,\n                height: 30\n            },\n            type: RX_PROCESS_DEFINITION.processElementTypes.endEvent\n        }, joint.shapes.bpmn.Event.prototype.defaults);\n    }\n}\n\nfunction RxProcessShapeViewMixin(Base) {\n    return class RxProcessShapeView extends Base {\n        initialize(config) {\n            // @ts-ignore\n            super.initialize(config);\n        }\n        canInteract() {\n            // @ts-ignore\n            return isFunction(this.paper.options.interactive)\n                ? // @ts-ignore\n                    this.paper.options.interactive(this)\n                : // @ts-ignore\n                    this.paper.options.interactive;\n        }\n        prepareEmbedding() {\n            // @ts-ignore\n            const hasNeighbors = !isEmpty(this.paper.model.getNeighbors(this.model));\n            // @ts-ignore\n            const hasBoundaryElementsWithNeighbors = chain(this.model.getEmbeddedCells())\n                .filter({ isBoundaryEvent: true })\n                .some(function (embeddedCell) {\n                return !isEmpty(this.paper.model.getNeighbors(embeddedCell));\n            });\n            // @ts-ignore\n            if (this.model.get('parent') && !hasNeighbors && !hasBoundaryElementsWithNeighbors) {\n                joint.dia.ElementView.prototype.prepareEmbedding.apply(this, arguments);\n            }\n        }\n        getEmbeddedBBox() {\n            let result;\n            // @ts-ignore\n            const embeddedCellModels = filter(this.model.getEmbeddedCells(), (cellModel) => {\n                return cellModel && cellModel.get('type') !== 'rx.SequenceFlow' && !cellModel.isBoundaryEvent;\n            });\n            if (embeddedCellModels.length) {\n                const bboxes = chain(embeddedCellModels)\n                    .map((cellModel) => {\n                    // @ts-ignore\n                    var view = this.paper.findViewByModel(cellModel);\n                    // @ts-ignore\n                    return new joint.V(view.el).bbox(false, this.paper.viewport);\n                })\n                    .value();\n                const minX = min(map(bboxes, (bbox) => bbox.x));\n                const minY = min(map(bboxes, (bbox) => bbox.y));\n                const maxX = max(map(bboxes, (bbox) => bbox.x + bbox.width));\n                const maxY = max(map(bboxes, (bbox) => bbox.y + bbox.height));\n                result = joint.g.rect(minX, minY, maxX - minX, maxY - minY);\n            }\n            else {\n                result = joint.g.rect(0, 0, 0, 0);\n            }\n            return result;\n        }\n    };\n}\n\nclass RxEndEventView extends RxProcessShapeViewMixin(joint.dia.ElementView) {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n    // TODO-VS: remove\n    sgResize(opt) {\n        // @ts-ignore\n        const scalable = this.scalableNode;\n        scalable.attr('transform', `scale(${0.5},${0.5})`);\n        // @ts-ignore\n        super.update();\n        // // @ts-ignore\n        // var model = this.model;\n        // var angle = model.angle();\n        // var size = model.size();\n        // // @ts-ignore\n        // var scalable = this.scalableNode;\n        //\n        // var recursive = false;\n        // if (scalable.node.getElementsByTagName('path').length > 0) {\n        //   // If scalable has at least one descendant that is a path, we need to switch to recursive bbox calculation.\n        //   // If there are no path descendants, group bbox calculation works and so we can use the (faster) native function directly.\n        //   recursive = true;\n        // }\n        //\n        // var scalableBBox = scalable.getBBox({ recursive: recursive });\n        //\n        // var sx = size.width / (60 || 1);\n        // var sy = size.height / (60 || 1);\n        //\n        // scalable.attr('transform', 'scale(' + sx + ',' + sy + ')');\n        //\n        // // @ts-ignore\n        // super.update();\n    }\n}\n\nclass RxEndEventRegistrationModule {\n    constructor(rxEndEventService, rxProcessElementRegistryService, translateService) {\n        rxProcessElementRegistryService.register({\n            displayName: translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.end-event.display-name.label'),\n            elementService: rxEndEventService,\n            group: RX_PROCESS_DEFINITION.standardProcessElementGroups.events.name,\n            paletteItem: {\n                border: RX_DESIGNER.paletteItemBorder.bold,\n                label: RX_DESIGNER.paletteItemLabel.outer,\n                shape: RX_DESIGNER.paletteItemShape.circle\n            },\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent,\n            shapeClass: RxEndEvent,\n            shapeType: 'EndEvent',\n            type: RX_PROCESS_DEFINITION.processElementTypes.endEvent,\n            viewShapeClass: RxEndEventView,\n            viewShapeType: 'EndEventView'\n        });\n    }\n}\nRxEndEventRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventRegistrationModule, deps: [{ token: RxEndEventService }, { token: i1$1.RxProcessElementRegistryService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxEndEventRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventRegistrationModule });\nRxEndEventRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventRegistrationModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEndEventRegistrationModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: RxEndEventService }, { type: i1$1.RxProcessElementRegistryService }, { type: i3.TranslateService }]; } });\n\nclass RxProcess extends joint.dia.Element {\n    constructor(options) {\n        super(options);\n        this.markup = '<g></g>';\n    }\n    defaults() {\n        return joint.util.defaultsDeep({\n            position: { x: 0, y: 0 },\n            size: { width: 1, height: 1 },\n            type: 'rx.Process'\n        }, super.defaults);\n    }\n}\n\nclass RxProcessService {\n    constructor(rxDefinitionNameService, rxStringService, translateService) {\n        this.rxDefinitionNameService = rxDefinitionNameService;\n        this.rxStringService = rxStringService;\n        this.translateService = translateService;\n    }\n    // TODO-VS: update when variable editor is implemented\n    getDefinitionFromModel(definitionModel) {\n        return {\n            allowOverlay: definitionModel.customizationOptions.allowOverlay,\n            contextKeyParam: definitionModel.contextKeyParam,\n            description: definitionModel.description,\n            guid: definitionModel.guid,\n            inputParams: definitionModel.inputParams,\n            isEnabled: definitionModel.isEnabled,\n            localVariables: definitionModel.localVariables,\n            name: this.rxDefinitionNameService.getDefinitionName(definitionModel.bundleId, definitionModel.name),\n            outputParams: definitionModel.outputParams,\n            overlayDescriptor: definitionModel.overlayDescriptor,\n            overlayGroupId: definitionModel.overlayGroupId,\n            permissions: definitionModel.permissions,\n            runAsUser: RX_PROCESS_DEFINITION.runAsUser[definitionModel.runAsUser].definitionValue,\n            scope: definitionModel.customizationOptions.scope\n        };\n    }\n    getInspectorConfig(definitionModel) {\n        return [\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n                controls: [\n                    {\n                        name: 'name',\n                        component: TextFormControlComponent,\n                        isDisabled: Boolean(definitionModel.lastUpdateTime),\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),\n                            required: true\n                        }\n                    },\n                    {\n                        name: 'description',\n                        component: TextareaFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n                            rows: 3\n                        }\n                    },\n                    {\n                        name: 'guid',\n                        component: TextFormControlComponent,\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n                        }\n                    },\n                    {\n                        name: 'owner',\n                        component: TextFormControlComponent,\n                        hidden: !Boolean(definitionModel.owner),\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.owner.label')\n                        }\n                    },\n                    {\n                        name: 'lastUpdateTime',\n                        component: TextFormControlComponent,\n                        hidden: !Boolean(definitionModel.lastUpdateTime),\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.modified-date.label')\n                        }\n                    },\n                    {\n                        name: 'lastChangedBy',\n                        component: TextFormControlComponent,\n                        hidden: !Boolean(definitionModel.lastChangedBy),\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.modified-by.label')\n                        }\n                    },\n                    {\n                        component: RxRevertCustomizationComponent,\n                        options: {\n                            overlayGroupId: definitionModel.overlayGroupId,\n                            overlayDescriptor: definitionModel.overlayDescriptor\n                        }\n                    },\n                    {\n                        name: 'customizationOptions',\n                        component: CustomizationOptionsComponent,\n                        options: {\n                            definitionTypeDisplayName: this.translateService\n                                .instant('com.bmc.arsys.rx.client.process-definition.label')\n                                .toLowerCase(),\n                            allowOverlay: definitionModel.customizationOptions.allowOverlay,\n                            scope: definitionModel.customizationOptions.scope,\n                            overlayGroupId: definitionModel.overlayGroupId,\n                            overlayDescriptor: definitionModel.overlayDescriptor\n                        }\n                    },\n                    {\n                        name: 'isEnabled',\n                        component: SwitchFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.process-enabled.label')\n                        }\n                    },\n                    {\n                        name: 'runAsUser',\n                        component: SelectFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.label'),\n                            tooltip: new Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.tooltip')),\n                            options: [\n                                {\n                                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.administrator.label'),\n                                    id: RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n                                },\n                                {\n                                    name: this.translateService.instant('com.bmc.arsys.rx.client.common.current-user.label'),\n                                    id: RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n                                }\n                            ]\n                        }\n                    }\n                ]\n            },\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.variables.label'),\n                controls: [\n                // TODO-VS: add variables editor\n                ]\n            },\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.permissions.label'),\n                controls: [\n                    {\n                        name: 'permissions',\n                        component: RxPermissionEditorComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.permissions.label'),\n                            type: 'process'\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n    // TODO-VS: update when variable editor is implemented\n    getModelFromDefinition(definition, bundleId) {\n        return {\n            bundleId,\n            contextKeyParam: definition.contextKeyParam,\n            customizationOptions: {\n                allowOverlay: definition.allowOverlay,\n                scope: definition.scope\n            },\n            description: definition.description,\n            guid: definition.guid,\n            inputParams: definition.inputParams,\n            isEnabled: definition.isEnabled,\n            lastChangedBy: definition.lastChangedBy,\n            lastUpdateTime: definition.lastUpdateTime,\n            localVariables: definition.localVariables,\n            name: Boolean(definition.lastUpdateTime)\n                ? this.rxDefinitionNameService.getDisplayName(definition.name)\n                : definition.name,\n            outputParams: definition.outputParams,\n            overlayDescriptor: null,\n            overlayGroupId: definition.overlayGroupId,\n            owner: definition.owner,\n            permissions: definition.permissions,\n            runAsUser: definition.runAsUser\n                ? RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n                : RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n        };\n    }\n    getShape(options) {\n        return new RxProcess(options);\n    }\n    validate(definitionModel, availableCells) {\n        const validationIssues = [];\n        if (this.rxStringService.isEmptySafe(definitionModel.name)) {\n            validationIssues.push({\n                type: ValidationIssueType.Error,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message', {\n                    propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label')\n                }),\n                data: {\n                    propertyName: 'name',\n                    inspectorTabIndex: 0\n                }\n            });\n        }\n        if (definitionModel.name && !RX_RECORD_DEFINITION.validDefinitionNameRegex.test(definitionModel.name)) {\n            validationIssues.push({\n                type: ValidationIssueType.Error,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.invalid-definition-name.message', {\n                    propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label')\n                }),\n                data: {\n                    propertyName: 'name',\n                    inspectorTabIndex: 0\n                }\n            });\n        }\n        const startEvents = availableCells.filter((cell) => cell.prop('type') === RX_PROCESS_DEFINITION.processElementTypes.startEvent);\n        if (startEvents.length != 1) {\n            validationIssues.push({\n                type: ValidationIssueType.Error,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.validation.single-start-event.message'),\n                data: {\n                    inspectorTabIndex: 0\n                }\n            });\n        }\n        const endEvents = availableCells.filter((cell) => cell.prop('type') === RX_PROCESS_DEFINITION.processElementTypes.endEvent);\n        if (isEmpty(endEvents)) {\n            validationIssues.push({\n                type: ValidationIssueType.Error,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.validation.no-end-event.label'),\n                data: {\n                    inspectorTabIndex: 0\n                }\n            });\n        }\n        return of(validationIssues);\n    }\n}\nRxProcessService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessService, deps: [{ token: i1$2.RxDefinitionNameService }, { token: i1.RxStringService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.RxDefinitionNameService }, { type: i1.RxStringService }, { type: i3.TranslateService }]; } });\n\nclass RxExpressionInputMapInspectorWidgetComponent extends InspectorWidgetBase {\n    constructor(renderer, rxDesignerCacheService, rxExpressionEditorService, rxIdService, injector) {\n        super(injector);\n        this.renderer = renderer;\n        this.rxDesignerCacheService = rxDesignerCacheService;\n        this.rxExpressionEditorService = rxExpressionEditorService;\n        this.rxIdService = rxIdService;\n        this.injector = injector;\n        this.destroyed$ = new ReplaySubject(1);\n    }\n    ngOnInit() {\n        this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n        this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n        this.patchConfig(this.options);\n    }\n    ngOnChanges(changes) {\n        if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n            this.patchConfig(changes.options.currentValue);\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n    openExpressionEditor(section, elementModel, inspectorElementRef) {\n        this.graph$.pipe(take(1)).subscribe((graph) => {\n            this.rxExpressionEditorService\n                .openEditor({\n                expressionConfigurator: this.options.expressionConfigurator,\n                expressionPropertyNavigator: {\n                    getProperties: this.getExpressionProperties.bind(this, elementModel, inspectorElementRef)\n                },\n                isReadOnly: false,\n                property: {\n                    path: `inputMap/${section.name}`,\n                    value: elementModel.inputMap[section.name],\n                    label: section.options.label\n                }\n            })\n                .pipe(takeUntil(this.destroyed$))\n                .subscribe((expression) => {\n                const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n                selectedElementCell.prop(`elementModel/${expression.path}`, expression.value);\n            });\n        });\n    }\n    getExpressionProperties(elementModel, inspectorElementRef) {\n        return of(elementModel.inputMap).pipe(map$1((modelProperties) => Array.from(this.renderer\n            .selectRootElement(inspectorElementRef.nativeElement, true)\n            .querySelectorAll('rx-expression-form-control')).map((element) => {\n            const propertyPath = element.getAttribute('property-path');\n            return {\n                path: `inputMap/${propertyPath}`,\n                value: modelProperties[propertyPath],\n                label: element.getAttribute('property-label')\n            };\n        })));\n    }\n    patchConfig(options) {\n        this.config = options.expressionInputMapInspectorOptions.map((expressionInputMapInspectorOption) => ({\n            name: expressionInputMapInspectorOption.name,\n            options: {\n                label: expressionInputMapInspectorOption.label,\n                dataDictionary$: options.expressionConfigurator.getDataDictionary(`inputMap/${expressionInputMapInspectorOption.name}`),\n                operators: options.expressionConfigurator.getOperators(`inputMap/${expressionInputMapInspectorOption.name}`)\n            }\n        }));\n    }\n}\nRxExpressionInputMapInspectorWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetComponent, deps: [{ token: i0.Renderer2 }, { token: i1$2.RxDesignerCacheService }, { token: i2.RxExpressionEditorService }, { token: i1.RxIdService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });\nRxExpressionInputMapInspectorWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RxExpressionInputMapInspectorWidgetComponent, selector: \"rx-expression-input-map-inspector-widget\", viewQueries: [{ propertyName: \"expressionInputMapInspectorElementRef\", first: true, predicate: [\"expressionInputMapInspector\"], descendants: true, read: ElementRef }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<div *ngIf=\\\"elementModel$ | async as elementModel\\\" #expressionInputMapInspector>\\n  <rx-expression-form-control\\n    *ngFor=\\\"let section of config\\\"\\n    [options]=\\\"section.options\\\"\\n    [propertyPath]=\\\"section.name\\\"\\n    [ngModel]=\\\"elementModel.inputMap[section.name]\\\"\\n    (events)=\\\"openExpressionEditor(section, elementModel, expressionInputMapInspectorElementRef)\\\"\\n  >\\n  </rx-expression-form-control>\\n</div>\\n\", styles: [\":host ::ng-deep rx-expression-form-control:not(:last-child) button{margin-bottom:5px}\\n\"], components: [{ type: i2.ExpressionFormControlComponent, selector: \"rx-expression-form-control\", inputs: [\"options\", \"isDisabled\", \"propertyPath\"], outputs: [\"events\"] }], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i5.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], pipes: { \"async\": i4.AsyncPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-expression-input-map-inspector-widget',\n                    templateUrl: './expression-input-map-inspector-widget.component.html',\n                    styleUrls: ['./expression-input-map-inspector-widget.component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1$2.RxDesignerCacheService }, { type: i2.RxExpressionEditorService }, { type: i1.RxIdService }, { type: i0.Injector }]; }, propDecorators: { expressionInputMapInspectorElementRef: [{\n                type: ViewChild,\n                args: ['expressionInputMapInspector', { read: ElementRef }]\n            }] } });\n\nclass RxProcessActionExpressionConfigurator extends RxServerActionExpressionConfigurator {\n    constructor(injector) {\n        super(injector);\n        this.injector = injector;\n        this.configureForProperty({\n            propertyPath: /outputMap\\/.*/,\n            dataDictionary$: this.getOutputMapDataDictionary()\n        });\n    }\n    getDataDictionaryService() {\n        return this.injector.get(RxProcessDataDictionaryService);\n    }\n    getOutputMapDataDictionary() {\n        return this.commonDataDictionary$;\n    }\n}\n\nclass RxProcessActionService extends RxServerActionService {\n    constructor(injector) {\n        super(injector);\n        this.injector = injector;\n        this.rxActionTypeUtilsService = injector.get(RxActionTypeUtilsService);\n        this.rxProcessDataDictionaryService = injector.get(RxProcessDataDictionaryService);\n    }\n    // PUBLIC\n    // TODO-VS: eliminate Partial (new IProcessDefinitionLight to eliminate overlayDescriptor form IDefinitionLight?)\n    getDefinitionFromModel(model) {\n        return {\n            actionTypeName: model.actionTypeName,\n            description: model.description,\n            guid: model.guid,\n            inputMap: this.getInputMapFromModel(model),\n            multiInstanceLoopDefinition: model.multiInstanceLoopDefinition,\n            name: model.name,\n            outputMap: model.outputMap,\n            resourceType: model.resourceType,\n            runAsUser: RX_PROCESS_DEFINITION.runAsUser[model.runAsUser].definitionValue\n        };\n    }\n    getExpressionConfigurator() {\n        var _a;\n        return ((_a = this.expressionConfigurator) !== null && _a !== void 0 ? _a : (this.expressionConfigurator = new (this.getExpressionConfiguratorClass())(this.injector)));\n    }\n    getInspectorConfig(model, options) {\n        const generalConfigControls = [\n            {\n                name: 'actionTypeName',\n                component: TextFormControlComponent,\n                isDisabled: true,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-action-properties.action-type-name.label')\n                }\n            },\n            {\n                name: 'label',\n                component: TextFormControlComponent,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label'),\n                    required: true\n                }\n            },\n            {\n                name: 'description',\n                component: TextareaFormControlComponent,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n                    rows: 3\n                }\n            },\n            {\n                name: 'guid',\n                component: TextFormControlComponent,\n                isDisabled: true,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n                }\n            },\n            {\n                name: 'runAsUser',\n                component: SelectFormControlComponent,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.process.run-as.label'),\n                    tooltip: new Tooltip(this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.inspector.run-as.tooltip')),\n                    options: [\n                        {\n                            name: this.translateService.instant('com.bmc.arsys.rx.client.common.administrator.label'),\n                            id: RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n                        },\n                        {\n                            name: this.translateService.instant('com.bmc.arsys.rx.client.common.current-user.label'),\n                            id: RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n                        },\n                        {\n                            name: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.process-action.inherit-from-process.label'),\n                            id: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue\n                        }\n                    ]\n                }\n            }\n        ];\n        if (model.isDeprecated) {\n            generalConfigControls.unshift({\n                name: 'isDeprecated',\n                component: LabelFormControlComponent,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-action-properties.deprecated.label', {\n                        definitionType: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.process.label')\n                    })\n                }\n            });\n        }\n        return [\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n                controls: generalConfigControls\n            },\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.input-map.label'),\n                controls: [this.getInputMapInspectorWidgetConfig(model)]\n            },\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.output-map.label'),\n                controls: [\n                    {\n                        name: 'outputMap',\n                        component: AssignmentExpressionListFormControlComponent,\n                        options: {\n                            confirmationMessage: 'com.bmc.arsys.rx.client.designer.inspector.delete-output-map-item-confirmation.message',\n                            sourceFieldOptions: {\n                                expressionConfigurator: this.getExpressionConfigurator(),\n                                options: {\n                                    dataDictionary$: this.getExpressionConfigurator().getDataDictionary('outputMap'),\n                                    operators: this.getExpressionConfigurator().getOperators('outputMap')\n                                }\n                            },\n                            targetFieldOptions: {\n                                type: AssignmentExpressionListTargetFieldType.Select,\n                                options: {\n                                    options: chain([\n                                        ...options.processDefinitionModel.inputParams,\n                                        ...options.processDefinitionModel.outputParams,\n                                        ...options.processDefinitionModel.localVariables\n                                    ])\n                                        .map('name')\n                                        .uniq()\n                                        .map((name) => ({\n                                        name,\n                                        id: name\n                                    }))\n                                        .value()\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n    getModelFromDefinition(definition) {\n        const actionType = super.getActionTypeByName(definition.actionTypeName);\n        const name = actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName);\n        return definition.guid\n            ? {\n                actionTypeName: definition.actionTypeName,\n                deprecatedText: actionType.deprecatedText,\n                description: definition.description,\n                guid: definition.guid,\n                inputMap: this.getInputMapFromDefinition(definition),\n                isDeprecated: actionType.isDeprecated,\n                label: definition.name,\n                multiInstanceLoopDefinition: definition.multiInstanceLoopDefinition,\n                name: definition.name,\n                outputMap: definition.outputMap,\n                resourceType: definition.resourceType,\n                runAsUser: this.getRunAsUserFromDefinition(definition),\n                type: this.getElementType(actionType.actionTypeName)\n            }\n            : {\n                actionTypeName: actionType.actionTypeName,\n                deprecatedText: actionType.deprecatedText,\n                description: '',\n                guid: '',\n                inputMap: {},\n                isDeprecated: actionType.isDeprecated,\n                label: name,\n                multiInstanceLoopDefinition: null,\n                name,\n                outputMap: [],\n                resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n                runAsUser: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue,\n                type: this.getElementType(actionType.actionTypeName)\n            };\n    }\n    // TODO-VS: update types\n    getShape(options) {\n        const ProcessActionClass = this.getClass();\n        const classConfig = super.getClassConfig(options);\n        return new ProcessActionClass(classConfig);\n    }\n    setCommonDataDictionaryBranch(guid, dataDictionaryBranch) {\n        this.rxProcessDataDictionaryService.setCommonActivitiesDataDictionaryBranch(guid, dataDictionaryBranch);\n    }\n    // TODO-VS: update types\n    validate(model, availableCells) {\n        return super.validateServerAction(model, availableCells).pipe(map$1((serverActionValidationIssues) => {\n            const validationIssues = [...serverActionValidationIssues];\n            const inboundLinks = availableCells.filter((cell) => cell.prop('targetNode') === model.guid);\n            const outboundLinks = availableCells.filter((cell) => cell.prop('sourceNode') === model.guid);\n            if (isEmpty(inboundLinks)) {\n                validationIssues.push({\n                    type: ValidationIssueType.Warning,\n                    description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n                        propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.inbound-sequence-flow.label')\n                    }),\n                    data: {\n                        guid: model.guid,\n                        inspectorTabIndex: 1\n                    }\n                });\n            }\n            if (outboundLinks.length !== 1) {\n                validationIssues.push({\n                    type: ValidationIssueType.Warning,\n                    description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.is-required.message', {\n                        propertyName: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.outbound-sequence-flow.label')\n                    }),\n                    data: {\n                        guid: model.guid,\n                        inspectorTabIndex: 1\n                    }\n                });\n            }\n            return validationIssues;\n        }));\n    }\n    // OVERRIDES\n    buildDataDictionaryBranch(model) {\n        const outputParams = super.getActionTypeByName(model.actionTypeName).outputParams;\n        return isEmpty(outputParams)\n            ? of(null)\n            : this.buildOutputDataDictionaryBranch(model, outputParams).pipe(map$1((outputDataDictionaryBranch) => {\n                const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParams[0]);\n                if (isArray(outputDataDictionaryBranch)) {\n                    let children = outputDataDictionaryBranch;\n                    if (isEmpty(outputDataDictionaryBranch)) {\n                        children = this.buildDefaultOutputDataDictionaryBranch(outputParams[0].dataTypeDetail);\n                    }\n                    return {\n                        label: model.label,\n                        icon: 'd-icon-arrow_chart',\n                        children: [\n                            {\n                                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.output.label'),\n                                icon: 'd-icon-arrow_chart',\n                                expression: '${activityResults.' + model.guid + '.output' + (isArrayOrListDataType ? '[0]}' : '}'),\n                                children: this.updateOutputDataDictionaryBranch(children, model.guid, isArrayOrListDataType)\n                            }\n                        ]\n                    };\n                }\n                else {\n                    return null;\n                }\n            }));\n    }\n    buildOutputDataDictionaryBranch(model, outputParams) {\n        return of([]);\n    }\n    getClass() {\n        return joint.shapes.rx.ProcessAction;\n    }\n    getDefinitionInputMapParam(inputParamName, inputParamValue) {\n        return {\n            assignTarget: inputParamName,\n            expression: inputParamValue\n        };\n    }\n    getElementType(actionTypeName) {\n        return RX_PROCESS_DEFINITION.processElementTypes.processAction;\n    }\n    getExpressionConfiguratorClass() {\n        return RxProcessActionExpressionConfigurator;\n    }\n    getInputMapInspectorWidgetConfig(model) {\n        const actionType = this.getActionTypeByName(model.actionTypeName);\n        return {\n            component: RxExpressionInputMapInspectorWidgetComponent,\n            options: {\n                expressionConfigurator: this.getExpressionConfigurator(),\n                expressionInputMapInspectorOptions: actionType.inputParams.map((inputParam) => ({\n                    name: inputParam.name,\n                    label: inputParam.displayName || this.rxStringService.prettify(inputParam.name)\n                }))\n            }\n        };\n    }\n    getInputMapFromDefinition(definition) {\n        const actionType = super.getActionTypeByName(definition.actionTypeName);\n        const initialInputMap = actionType\n            ? transform(actionType.inputParams, (inputMap, inputParam) => (inputMap[inputParam.name] = ''), {})\n            : {};\n        return transform((definition === null || definition === void 0 ? void 0 : definition.inputMap) || [], (inputMap, inputMapField) => (inputMap[inputMapField.assignTarget] = inputMapField.expression), initialInputMap);\n    }\n    // HELPERS\n    buildDefaultOutputDataDictionaryBranch(outputParams, outputPropertyPathOpener) {\n        return isEmpty(outputParams)\n            ? null\n            : outputParams.map((outputParam) => {\n                const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParam);\n                const outputPropertyPath = (outputPropertyPathOpener ? outputPropertyPathOpener + '.' + outputParam.name : outputParam.name) +\n                    (isArrayOrListDataType ? '[0]' : '');\n                return {\n                    label: this.rxStringService.prettify(outputParam.name),\n                    outputPropertyPath: outputPropertyPath,\n                    children: this.buildDefaultOutputDataDictionaryBranch(outputParam.dataTypeDetail, outputPropertyPath)\n                };\n            });\n    }\n    getInputMapFromModel(model) {\n        return reduce(model.inputMap, (inputMap, propertyValue, propertyName) => {\n            let inputMapParam;\n            if (!isEmpty(propertyValue)) {\n                inputMapParam = this.getDefinitionInputMapParam(propertyName, propertyValue);\n                if (inputMapParam) {\n                    inputMap.push(inputMapParam);\n                }\n            }\n            return inputMap;\n        }, []);\n    }\n    getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, outputPropertyPath) {\n        return ('${activityResults.' +\n            flowElementGuid +\n            '.output' +\n            (isArrayOrListDataType ? '[0].' : '.') +\n            outputPropertyPath +\n            '}');\n    }\n    getRunAsUserFromDefinition(definition) {\n        let runAsUser;\n        switch (definition.runAsUser) {\n            case true: {\n                runAsUser = RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue;\n                break;\n            }\n            case false: {\n                runAsUser = RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue;\n                break;\n            }\n            default: {\n                runAsUser = RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue;\n                break;\n            }\n        }\n        return runAsUser;\n    }\n    updateOutputDataDictionaryBranch(children, flowElementGuid, isArrayOrListDataType) {\n        return isEmpty(children)\n            ? null\n            : children.map((child) => {\n                let expression = child.expression;\n                if (child.outputPropertyPath) {\n                    if (isArray(child.outputPropertyPath)) {\n                        expression = child.outputPropertyPath.map((outputPropertyPath) => this.getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, outputPropertyPath));\n                    }\n                    else {\n                        expression = this.getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, child.outputPropertyPath);\n                    }\n                }\n                return {\n                    label: child.label,\n                    icon: expression ? 'd-icon-arrow_chart' : null,\n                    expression,\n                    children: this.updateOutputDataDictionaryBranch(child.children, flowElementGuid, isArrayOrListDataType)\n                };\n            });\n    }\n}\nRxProcessActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxProcessAction extends RxServerActionMixin(RxProcessShapeMixin(joint.shapes.bpmn.Activity)) {\n    defaults() {\n        return joint.util.deepSupplement({\n            attrs: {\n                '.icon': {\n                    width: 12,\n                    height: 12,\n                    'ref-x': 3,\n                    'ref-y': 3\n                },\n                rect: {\n                    rx: 4,\n                    ry: 4\n                }\n            },\n            icon: 'gear',\n            size: {\n                width: 90,\n                height: 60\n            },\n            type: RX_PROCESS_DEFINITION.processElementTypes.processAction\n        }, \n        // @ts-ignore\n        super.defaults);\n    }\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n    getElementService(type) {\n        return RxRootInjector.injector.get(RxProcessElementRegistryService).get(type).elementService;\n    }\n}\n\nclass RxProcessActionView extends RxServerActionViewMixin(RxProcessShapeViewMixin(joint.shapes.bpmn.ActivityView)) {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n}\n\nclass RxProcessActionRegistrationModule {\n    constructor(rxProcessElementRegistryService, rxProcessActionService) {\n        rxProcessElementRegistryService.register({\n            elementService: rxProcessActionService,\n            group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n            paletteItem: {\n                border: RX_DESIGNER.paletteItemBorder.bold,\n                icon: {\n                    path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n                    position: RX_DESIGNER.paletteIconPosition.top\n                },\n                label: RX_DESIGNER.paletteItemLabel.outer,\n                shape: RX_DESIGNER.paletteItemShape.rectangle\n            },\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n            shapeClass: RxProcessAction,\n            shapeType: 'ProcessAction',\n            type: RX_PROCESS_DEFINITION.processElementTypes.processAction,\n            viewShapeClass: RxProcessActionView,\n            viewShapeType: 'ProcessActionView'\n        });\n    }\n}\nRxProcessActionRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionRegistrationModule, deps: [{ token: i1$1.RxProcessElementRegistryService }, { token: RxProcessActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxProcessActionRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionRegistrationModule });\nRxProcessActionRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionRegistrationModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessActionRegistrationModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxProcessElementRegistryService }, { type: RxProcessActionService }]; } });\n\n// TODO-VS: move to \"@helix/platform/process/components\"\nclass RxExpressionInputMapInspectorWidgetModule {\n}\nRxExpressionInputMapInspectorWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxExpressionInputMapInspectorWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetModule, declarations: [RxExpressionInputMapInspectorWidgetComponent], imports: [CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule], exports: [RxExpressionInputMapInspectorWidgetComponent] });\nRxExpressionInputMapInspectorWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetModule, imports: [[CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionInputMapInspectorWidgetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxExpressionInputMapInspectorWidgetComponent],\n                    imports: [CommonModule, ExpressionFormControlModule, FormsModule, RxFormBuilderModule, RxInspectorModule],\n                    exports: [RxExpressionInputMapInspectorWidgetComponent]\n                }]\n        }] });\n\nclass RxStartEventService {\n    constructor(rxStringService, translateService) {\n        this.rxStringService = rxStringService;\n        this.translateService = translateService;\n    }\n    getDefinitionFromModel(model) {\n        return {\n            description: model.description,\n            guid: model.guid,\n            name: model.name,\n            resourceType: model.resourceType\n        };\n    }\n    // TODO-VS: add position and size inspector groups\n    getInspectorConfig() {\n        return [\n            {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n                controls: [\n                    {\n                        name: 'label',\n                        component: TextFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n                        }\n                    },\n                    {\n                        name: 'description',\n                        component: TextareaFormControlComponent,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n                            rows: 3\n                        }\n                    },\n                    {\n                        name: 'guid',\n                        component: TextFormControlComponent,\n                        isDisabled: true,\n                        options: {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n    getModelFromDefinition(definition) {\n        let elementModel = {\n            description: '',\n            guid: null,\n            label: '',\n            name: RX_PROCESS_DEFINITION.processElementDisplayNames.startEvent,\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.startEvent,\n            type: RX_PROCESS_DEFINITION.processElementTypes.startEvent\n        };\n        if (definition) {\n            elementModel = Object.assign(Object.assign({}, elementModel), { description: definition.description, guid: definition.guid, label: definition.name, name: definition.name, resourceType: definition.resourceType });\n        }\n        return elementModel;\n    }\n    getShape(options) {\n        return new joint.shapes.rx.StartEvent({\n            elementModel: this.getModelFromDefinition(),\n            position: options.position\n        });\n    }\n    setCommonDataDictionaryBranch(guid, dataDictionaryBranch) { }\n    validate(model, availableCells) {\n        const validationIssues = [];\n        const inboundLinks = availableCells.filter((cell) => cell.prop('targetNode') === model.guid);\n        if (!isEmpty(inboundLinks)) {\n            validationIssues.push({\n                type: ValidationIssueType.Error,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.validation.inbound-sequence-flow.message'),\n                data: {\n                    guid: model.guid,\n                    inspectorTabIndex: 1\n                }\n            });\n        }\n        const outboundLinks = availableCells.filter((cell) => cell.prop('sourceNode') === model.guid);\n        if (outboundLinks.length != 1) {\n            validationIssues.push({\n                type: ValidationIssueType.Warning,\n                description: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.validation.single-outbound-sequence-flow.message'),\n                data: {\n                    guid: model.guid,\n                    inspectorTabIndex: 1\n                }\n            });\n        }\n        if (this.rxStringService.isEmptySafe(model.label)) {\n            if (some(availableCells, (cell) => cell.prop('label') === model.label)) {\n                validationIssues.push({\n                    type: ValidationIssueType.Error,\n                    description: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.must-be-unique.message', {\n                        propertyName: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label')\n                    }),\n                    data: {\n                        guid: model.guid,\n                        inspectorTabIndex: 1,\n                        propertyName: 'label'\n                    }\n                });\n            }\n        }\n        return of(validationIssues);\n    }\n}\nRxStartEventService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventService, deps: [{ token: i1.RxStringService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxStartEventService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxStringService }, { type: i3.TranslateService }]; } });\n\nclass RxStartEvent extends RxProcessShapeMixin(joint.shapes.bpmn.Event) {\n    defaults() {\n        return joint.util.deepSupplement({\n            attrs: {\n                '.label': {\n                    fill: 'gray'\n                }\n            },\n            defaultName: RX_PROCESS_DEFINITION.processElementDisplayNames.startEvent,\n            eventType: 'start',\n            icon: 'transparent',\n            labelPath: 'attrs/.label/text',\n            size: {\n                width: 30,\n                height: 30\n            },\n            type: RX_PROCESS_DEFINITION.processElementTypes.startEvent\n        }, \n        // @ts-ignore\n        super.defaults);\n    }\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n}\n\nclass RxStartEventView extends RxProcessShapeViewMixin(joint.dia.ElementView) {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n    // TODO-VS: remove\n    sgResize(opt) {\n        // @ts-ignore\n        const scalable = this.scalableNode;\n        scalable.attr('transform', `scale(${0.5},${0.5})`);\n        // @ts-ignore\n        super.update();\n    }\n}\n\nclass RxStartEventRegistrationModule {\n    constructor(rxProcessElementRegistryService, rxStartEventService, translateService) {\n        rxProcessElementRegistryService.register({\n            displayName: translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.start-event.display-name.label'),\n            elementService: rxStartEventService,\n            group: RX_PROCESS_DEFINITION.standardProcessElementGroups.events.name,\n            paletteItem: {\n                border: RX_DESIGNER.paletteItemBorder.solid,\n                label: RX_DESIGNER.paletteItemLabel.outer,\n                shape: RX_DESIGNER.paletteItemShape.circle\n            },\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.startEvent,\n            shapeClass: RxStartEvent,\n            shapeType: 'StartEvent',\n            type: RX_PROCESS_DEFINITION.processElementTypes.startEvent,\n            viewShapeClass: RxStartEventView,\n            viewShapeType: 'StartEventView'\n        });\n    }\n}\nRxStartEventRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventRegistrationModule, deps: [{ token: i1$1.RxProcessElementRegistryService }, { token: RxStartEventService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxStartEventRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventRegistrationModule });\nRxStartEventRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventRegistrationModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxStartEventRegistrationModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxProcessElementRegistryService }, { type: RxStartEventService }, { type: i3.TranslateService }]; } });\n\nclass RxProcessElementService {\n    constructor(rxIdService, rxJsonParserService, rxProcessElementSearchService) {\n        this.rxIdService = rxIdService;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxProcessElementSearchService = rxProcessElementSearchService;\n    }\n    // TODO-VS: remove in favour of getJsonObject\n    getGraph(definition) {\n        const graph = this.rxJsonParserService.tryParseJson(definition.layout, { cells: [] });\n        graph.cells.forEach((cell) => {\n            const embeddedElementIds = map(filter(graph.cells, { parent: cell.id }), 'id');\n            if (startsWith(cell.type, 'rx.CallActivity')) {\n                cell.type = 'rx.CallActivity';\n            }\n            if (startsWith(cell.type, 'rx.ProcessActions')) {\n                cell.type = 'rx.ProcessAction';\n            }\n            if (embeddedElementIds.length) {\n                cell.embeds = embeddedElementIds;\n            }\n            cell.processDefinitionName = definition.name;\n            const flowElement = this.rxProcessElementSearchService.find(definition, {\n                guid: this.rxIdService.get(cell.id)\n            });\n            if (flowElement === null || flowElement === void 0 ? void 0 : flowElement.multiInstanceLoopDefinition) {\n                cell.multiInstanceLoopDefinition = flowElement.multiInstanceLoopDefinition;\n            }\n        });\n        return graph;\n    }\n}\nRxProcessElementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementService, deps: [{ token: i1.RxIdService }, { token: i1.RxJsonParserService }, { token: i1$1.RxProcessElementSearchService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessElementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxIdService }, { type: i1.RxJsonParserService }, { type: i1$1.RxProcessElementSearchService }]; } });\n\nclass RxProcessElementsModule {\n}\nRxProcessElementsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxProcessElementsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsModule, imports: [CommonModule,\n        RxEndEventRegistrationModule,\n        RxExpressionInputMapInspectorWidgetModule,\n        RxOverlayModule,\n        RxProcessActionRegistrationModule,\n        RxStartEventRegistrationModule] });\nRxProcessElementsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsModule, imports: [[\n            CommonModule,\n            RxEndEventRegistrationModule,\n            RxExpressionInputMapInspectorWidgetModule,\n            RxOverlayModule,\n            RxProcessActionRegistrationModule,\n            RxStartEventRegistrationModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        RxEndEventRegistrationModule,\n                        RxExpressionInputMapInspectorWidgetModule,\n                        RxOverlayModule,\n                        RxProcessActionRegistrationModule,\n                        RxStartEventRegistrationModule\n                    ]\n                }]\n        }] });\n\n// https://github.com/clientIO/joint/issues/817\n// When the size of shape is changed, JointJS resizes shape`s body via scaling.\n// IE11 & MS-Edge do not support `vector-effect`, which results in changing stroke-width.\n// `refHeight` & `refWidth` attributes allow resizing rectangular sub-elements relative to the referenced element without scaling.\njoint.util.deepSupplement(joint.shapes.bpmn.Activity.prototype.defaults, {\n    attrs: {\n        '.body': {\n            refWidth: 1,\n            refHeight: 1\n        }\n    },\n    // 1. Removed scalable group (<g class=\"scalable\">) from the original template of Activity element\n    // to resolve the issue of restoring the element size after undo/redo operations.\n    // http://clientio.freshdesk.com/support/tickets/560\n    // https://jira.bmc.com/browse/DRIST-8990\n    // 2. Added multi instance icons\n    markup: [\n        '<g class=\"rotatable\">',\n        '<rect class=\"body outer\"/>',\n        '<rect class=\"body inner\"/>',\n        joint.env.test('svgforeignobject')\n            ? '<foreignObject class=\"fobj\"><body xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"content\"/></body></foreignObject>'\n            : '<text class=\"content\"/>',\n        '<g class=\"rx-icon-container\">',\n        '<image class=\"icon-multi-instance-sequential\"/>',\n        '<image class=\"icon-multi-instance-parallel\"/>',\n        '<path class=\"sub-process\"/>',\n        '</g>',\n        '<image class=\"icon\"/>',\n        '</g>'\n    ].join('')\n});\nvar rx;\n(function (rx) {\n    class BaseExpandableProcessShape extends joint.shapes.bpmn.Activity {\n        initialize(options) {\n            super.initialize(options);\n            const embeddedCells = this.getEmbeddedCells();\n            const embedsWithoutBoundaryEventLength = size(reject(embeddedCells, 'isBoundaryEvent'));\n            let modelEmbeds;\n            if (embedsWithoutBoundaryEventLength === embeddedCells.length) {\n                modelEmbeds = this.get('embeds');\n            }\n            if (this.collection && this.get('expanded') && !embedsWithoutBoundaryEventLength && isUndefined(modelEmbeds)) {\n                RxRootInjector.injector\n                    .get(RxProcessDefinitionCacheService)\n                    .getProcessDefinition(this.get('processDefinitionName'))\n                    .subscribe((processDefinition) => {\n                    const flowElement = RxRootInjector.injector\n                        .get(RxProcessElementSearchService)\n                        .findByGuid(processDefinition, `rx-${this.get('id')}`) || {};\n                    this.expand(processDefinition, RxRootInjector.injector.get(RxProcessElementService).getGraph(flowElement));\n                });\n            }\n        }\n        expand(definition, graph) {\n            graph.cells = sortBy(graph.cells, (cell) => cell.type === 'rx.SequenceFlow' || cell.type === 'rx.TextAnnotationAssociation');\n            const cellModels = [];\n            forEach(graph.cells, (cell) => {\n                const CellModel = joint.util.getByPath(this.collection.cellNamespace, cell.type, '.');\n                const cellModel = new CellModel(cell);\n                if (cellModel.get('expanded')) {\n                    const flowElement = RxRootInjector.injector\n                        .get(RxProcessElementSearchService)\n                        .findByGuid(definition, `rx-${cellModel.get('id')}`) || {};\n                    cellModel.expand.call(this, definition, RxRootInjector.injector.get(RxProcessElementService).getGraph(flowElement));\n                }\n                cellModels.push(cellModel);\n            });\n            this.collection.add(cellModels);\n            this.attr({\n                '.sub-process': {\n                    display: 'none',\n                    visibility: 'hidden'\n                }\n            });\n        }\n    }\n    rx.BaseExpandableProcessShape = BaseExpandableProcessShape;\n    class BaseCallActivity extends BaseExpandableProcessShape {\n        defaults() {\n            return joint.util.deepSupplement({\n                activityType: 'call-activity',\n                expanded: false,\n                subProcess: true,\n                attrs: {\n                    path: {\n                        transform: 'scale(0.3, 0.3)',\n                        'ref-dy': -15\n                    },\n                    rect: {\n                        rx: 2,\n                        ry: 2\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.BaseCallActivity = BaseCallActivity;\n    class BaseStaticMultiInstance extends joint.shapes.bpmn.Activity {\n        static initMultiInstanceIcons(model) {\n            const attrs = cloneDeep(model.get('attrs'));\n            const iconAttr = {\n                width: 10,\n                height: 10,\n                y: 1\n            };\n            attrs['.sub-process'] = {\n                d: 'M 0 0 L 30 0 30 30 0 30 z M 15 4 L 15 26 M 4 15 L 26 15',\n                stroke: '#000000',\n                fill: 'transparent',\n                transform: 'scale(0.3, 0.3) translate(0, 6)'\n            };\n            attrs['.sub-process'].display = model.prop('subProcess') ? '' : 'none';\n            attrs['.icon-multi-instance-sequential'] = cloneDeep(iconAttr);\n            attrs['.icon-multi-instance-parallel'] = cloneDeep(iconAttr);\n            attrs['.icon-multi-instance-sequential']['xlink:href'] =\n                RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.multiInstanceSequential;\n            attrs['.icon-multi-instance-parallel']['xlink:href'] = RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.multiInstanceParallel;\n            attrs['.rx-icon-container'] = {\n                ref: '.body',\n                'x-alignment': 'middle',\n                'ref-x': 0.5,\n                'ref-dy': -15\n            };\n            defaults(attrs['.icon'], attrs.image);\n            delete attrs.image;\n            delete attrs.path;\n            model.unset('attrs', { silent: true });\n            model.set('attrs', attrs);\n        }\n        static updateMultiInstanceIcons(model) {\n            const loopType = model.prop('loopType');\n            const attrs = cloneDeep(model.get('attrs'));\n            attrs['.icon-multi-instance-sequential'].display = loopType === 'true' ? '' : 'none';\n            attrs['.icon-multi-instance-parallel'].display = loopType === 'false' ? '' : 'none';\n            if (model.prop('subProcess')) {\n                attrs['.sub-process'].transform = loopType\n                    ? 'scale(0.3, 0.3) translate(50, 6)'\n                    : 'scale(0.3, 0.3) translate(0, 6)';\n            }\n            model.unset('attrs', { silent: true });\n            model.set('attrs', attrs, { rxSilent: true });\n        }\n    }\n    rx.BaseStaticMultiInstance = BaseStaticMultiInstance;\n    class BaseMultiInstance extends joint.shapes.bpmn.Activity {\n        initialize(options) {\n            super.initialize(options);\n            if (options.multiInstanceLoopDefinition) {\n                this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), { silent: true });\n            }\n            BaseStaticMultiInstance.initMultiInstanceIcons(this);\n            BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n        }\n    }\n    rx.BaseMultiInstance = BaseMultiInstance;\n    class CallActivity extends BaseCallActivity {\n        initialize(options) {\n            super.initialize(options);\n            if (options.multiInstanceLoopDefinition) {\n                this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), { silent: true });\n            }\n            BaseStaticMultiInstance.initMultiInstanceIcons(this);\n            BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n        }\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.CallActivity'\n            }, BaseCallActivity.prototype.defaults());\n        }\n    }\n    rx.CallActivity = CallActivity;\n    class Connector extends BaseMultiInstance {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.Connector',\n                icon: 'connector',\n                attrs: {\n                    '.icon': {\n                        width: 12,\n                        height: 12,\n                        'ref-x': 3,\n                        'ref-y': 3\n                    },\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.Connector = Connector;\n    class EndEvent extends joint.shapes.bpmn.Event {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.EndEvent',\n                eventType: 'end',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Event.prototype.defaults);\n        }\n    }\n    rx.EndEvent = EndEvent;\n    class ErrorBoundaryEvent extends joint.shapes.bpmn.Event {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ErrorBoundaryEvent',\n                eventType: 'intermediate',\n                icon: 'errorBoundary',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Event.prototype.defaults);\n        }\n    }\n    rx.ErrorBoundaryEvent = ErrorBoundaryEvent;\n    class ErrorEndEvent extends joint.shapes.bpmn.Event {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ErrorEndEvent',\n                eventType: 'end',\n                icon: 'errorEnd',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Event.prototype.defaults);\n        }\n    }\n    rx.ErrorEndEvent = ErrorEndEvent;\n    class ExclusiveGateway extends joint.shapes.bpmn.Gateway {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ExclusiveGateway',\n                icon: 'cross',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Gateway.prototype.defaults);\n        }\n    }\n    rx.ExclusiveGateway = ExclusiveGateway;\n    class ParallelGateway extends joint.shapes.bpmn.Gateway {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ParallelGateway',\n                icon: 'plus',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Gateway.prototype.defaults);\n        }\n    }\n    rx.ParallelGateway = ParallelGateway;\n    class ProcessAction extends joint.shapes.bpmn.Activity {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ProcessAction',\n                icon: 'gear',\n                attrs: {\n                    '.icon': {\n                        width: 12,\n                        height: 12,\n                        'ref-x': 3,\n                        'ref-y': 3\n                    },\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                },\n                size: {\n                    width: 70,\n                    height: 60\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.ProcessAction = ProcessAction;\n    class ReceiveTask extends BaseMultiInstance {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.ReceiveTask',\n                icon: 'message',\n                attrs: {\n                    '.icon': {\n                        width: 12,\n                        height: 12,\n                        'ref-x': 3,\n                        'ref-y': 3\n                    },\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.ReceiveTask = ReceiveTask;\n    class SequenceFlow extends joint.shapes.bpmn.Flow {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.SequenceFlow',\n                router: {\n                    name: 'manhattan',\n                    args: {\n                        step: 5\n                    }\n                }\n            }, joint.shapes.bpmn.Flow.prototype.defaults);\n        }\n    }\n    rx.SequenceFlow = SequenceFlow;\n    class StartEvent extends joint.shapes.bpmn.Event {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.StartEvent',\n                eventType: 'start',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Event.prototype.defaults);\n        }\n    }\n    rx.StartEvent = StartEvent;\n    class SubProcess extends BaseExpandableProcessShape {\n        initialize(options) {\n            super.initialize(options);\n            if (options.multiInstanceLoopDefinition) {\n                this.prop('loopType', String(options.multiInstanceLoopDefinition.isSequential), { silent: true });\n            }\n            BaseStaticMultiInstance.initMultiInstanceIcons(this);\n            BaseStaticMultiInstance.updateMultiInstanceIcons(this);\n        }\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.SubProcess',\n                activityType: 'event-sub-process',\n                expanded: false,\n                subProcess: true,\n                attrs: {\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.SubProcess = SubProcess;\n    class TextAnnotation extends joint.shapes.bpmn.Annotation {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.TextAnnotation',\n                attrs: {\n                    rect: {\n                        rx: 2,\n                        ry: 2\n                    }\n                }\n            }, joint.shapes.bpmn.Annotation.prototype.defaults);\n        }\n    }\n    rx.TextAnnotation = TextAnnotation;\n    class TextAnnotationAssociation extends joint.shapes.bpmn.Flow {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.TextAnnotationAssociation',\n                flowType: 'association'\n            }, joint.shapes.bpmn.Flow.prototype.defaults);\n        }\n    }\n    rx.TextAnnotationAssociation = TextAnnotationAssociation;\n    class TimerEvent extends joint.shapes.bpmn.Event {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.TimerEvent',\n                eventType: 'intermediate',\n                icon: 'clock',\n                attrs: {\n                    '.label': {\n                        fill: 'gray'\n                    }\n                }\n            }, joint.shapes.bpmn.Event.prototype.defaults);\n        }\n    }\n    rx.TimerEvent = TimerEvent;\n    class UserTask extends BaseMultiInstance {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.UserTask',\n                icon: 'user',\n                attrs: {\n                    '.icon': {\n                        width: 12,\n                        height: 12,\n                        'ref-x': 3,\n                        'ref-y': 3\n                    },\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.UserTask = UserTask;\n    class WebRequest extends joint.shapes.bpmn.Activity {\n        defaults() {\n            return joint.util.deepSupplement({\n                type: 'rx.WebRequest',\n                icon: 'webRequest',\n                attrs: {\n                    '.icon': {\n                        width: 12,\n                        height: 12,\n                        'ref-x': 3,\n                        'ref-y': 3\n                    },\n                    rect: {\n                        rx: 4,\n                        ry: 4\n                    }\n                }\n            }, joint.shapes.bpmn.Activity.prototype.defaults);\n        }\n    }\n    rx.WebRequest = WebRequest;\n})(rx || (rx = {}));\n\nvar processShapes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    get rx () { return rx; }\n});\n\nclass RxDesignerCellHighlighter extends Backbone.View {\n    constructor(cellView) {\n        super();\n        this.selectors = {\n            bpmn: {\n                'bpmn.Event': '.scalable circle.outer',\n                'bpmn.Annotation': '.rotatable path.stroke',\n                link: 'path.connection',\n                'bpmn.Flow': 'path.connection',\n                'bpmn.Gateway': '.scalable polygon.body',\n                'bpmn.Activity': '.scalable rect.outer',\n                'basic.Rect': '.scalable rect'\n            },\n            rx: {\n                'rx.TextAnnotation': '.rotatable path.stroke',\n                'rx.TextAnnotationAssociation': 'path.connection',\n                'rx.SequenceFlow': 'path.connection',\n                'rx.ParallelGateway': '.scalable polygon.body',\n                'rx.ExclusiveGateway': '.scalable polygon.body',\n                'rx.StartEvent': '.scalable circle.outer',\n                'rx.EndEvent': '.scalable circle.outer',\n                'rx.SubProcess': '.rotatable rect.outer',\n                'rx.ReceiveTask': '.rotatable rect.outer',\n                'rx.UserTask': '.rotatable rect.outer',\n                'rx.Connector': '.rotatable rect.outer',\n                'rx.TimerEvent': '.scalable circle.outer',\n                'rx.WebRequest': '.rotatable rect.outer'\n            }\n        };\n        this.cellView = cellView;\n        this.listenTo(this.cellView.paper, 'scale translate', this.update);\n        this.$el = this.cellView.$el;\n    }\n    init(options) {\n        this.options = extend({}, result(this, 'options'), options || {});\n        this.cellView.model.on('remove', this.eraseHighlightAndRemove);\n        this.update();\n    }\n    update() {\n        this.eraseHighlight();\n        this.drawHighlight();\n    }\n    eraseHighlightAndRemove(evt) {\n        this.eraseHighlight();\n        Backbone.View.prototype.remove.apply(this, arguments);\n    }\n    eraseHighlight() {\n        if (this.cellViewHighlighter) {\n            this.cellViewHighlighter.remove();\n        }\n    }\n    drawHighlight() {\n        let selector;\n        switch (true) {\n            case this.cellView.model instanceof rx.ProcessAction:\n            case this.cellView.model instanceof rx.BaseCallActivity:\n                selector = '.rotatable rect.outer';\n                break;\n            default:\n                selector =\n                    this.selectors.rx[this.cellView.model.prop('type')] || this.selectors.bpmn[this.cellView.model.prop('type')];\n        }\n        const shape = this.cellView.$el.find(selector).first();\n        const highlight = shape[0] ? V(shape[0]).clone() : undefined;\n        if (highlight) {\n            highlight.attr({\n                stroke: this.options.color,\n                'stroke-width': this.options.strokeWidth\n            });\n            if (highlight.node.tagName === 'circle') {\n                highlight.attr({\n                    r: this.options.circleRadius\n                });\n            }\n            this.cellViewHighlighter = highlight;\n            shape.closest('g').prepend(highlight.node);\n        }\n    }\n}\n\nclass RxRappidPaperService {\n    constructor(rxIdService, rxProcessElementService, rxProcessElementSearchService, rxTreeService) {\n        this.rxIdService = rxIdService;\n        this.rxProcessElementService = rxProcessElementService;\n        this.rxProcessElementSearchService = rxProcessElementSearchService;\n        this.rxTreeService = rxTreeService;\n        this.green = '#89c341';\n        this.gray = '#999999';\n        this.red = '#f83200';\n        assign(joint.shapes.bpmn.icons, RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons);\n    }\n    init(element, graph, shouldZoomToFit = false) {\n        // : PaperScroller\n        // Do not instantiate paper with width or height parameters equal to 0, (e.g element is hidden in the DOM),\n        // otherwise it will cause RappidJS issue in the Firefox Browser. See DRIST-18107 for more details.\n        const paper = new joint.dia.Paper({\n            width: element.width || 1,\n            height: element.height || 1,\n            model: new joint.dia.Graph({}, {\n                cellNamespace: processShapes\n            }),\n            cellViewNamespace: processShapes,\n            interactive: false,\n            // specifying a non-existent theme to prevent rappid from overriding our styles\n            // due to 'default' theme being applied\n            theme: 'rx'\n        });\n        const paperScroller = new joint.ui.PaperScroller({\n            autoResizePaper: true,\n            paper: paper,\n            padding: {\n                padding: 10\n            }\n        });\n        element.appendChild(paperScroller.render().el);\n        paperScroller.options.paper.on('blank:pointerdown', paperScroller.startPanning);\n        this.resetScroll(paperScroller);\n        if (graph) {\n            paperScroller.options.paper.model.fromJSON(graph);\n            if (shouldZoomToFit) {\n                this.zoomToFit(paperScroller);\n            }\n        }\n        return paperScroller;\n    }\n    setGraph(paperScroller, processDefinition, processInstance, shouldZoomToFit = false) {\n        const graph = this.rxProcessElementService.getGraph(processDefinition);\n        const paper = paperScroller.options.paper;\n        paper.model.fromJSON(graph);\n        if (shouldZoomToFit) {\n            this.zoomToFit(paperScroller);\n        }\n        forEach(processInstance.activities, (activity) => {\n            const activityId = this.rxIdService.getBase(activity.activityId);\n            const cell = paper.findViewByModel(activityId);\n            if (cell) {\n                if (activity.activities.length && cell.model.get('expanded')) {\n                    const subProcessActivities = this.rxTreeService.flattenTree(activity, 'activities');\n                    const elements = paper.model.getElements();\n                    const graphIds = map(elements, 'id');\n                    const originalGraphIds = compact(map(elements, (element) => element.get('originalGuid')));\n                    forEach(subProcessActivities, (subProcessActivity) => {\n                        // we need to do this check in order to filter inner elements that are in process\n                        // instance json but are not present in graph as their parent is not expanded\n                        if (includes(graphIds, this.rxIdService.getBase(subProcessActivity.activityId))) {\n                            this.highlightActivity(subProcessActivity, paper, processDefinition);\n                        }\n                        else if (originalGraphIds && includes(originalGraphIds, subProcessActivity.activityId)) {\n                            this.highlightActivity(subProcessActivity, paper, processDefinition);\n                        }\n                    });\n                    this.highlightActivity(activity, paper, processDefinition);\n                }\n                else {\n                    this.highlightActivity(activity, paper, processDefinition);\n                }\n            }\n        });\n        if (processInstance.exceptionMessage) {\n            // exceptionMessage will be like <activityName>(<acitivityGuid>) - [<errorMessage>]\n            // RegExp - find guid from exceptionMessage\n            const guidPattern = new RegExp('\\\\((' + RX_GUID.baseIdPattern + ')\\\\)', 'i');\n            const activityId = guidPattern.exec(processInstance.exceptionMessage);\n            if (activityId[0]) {\n                const activityBaseId = this.rxIdService.getBase(activityId[1]);\n                this.highlightCell(activityBaseId, paper, this.red, processDefinition);\n            }\n        }\n        this.resetScroll(paperScroller);\n    }\n    highlight(cellView, color) {\n        if (cellView instanceof joint.dia.CellView) {\n            const cellHighlighter = new RxDesignerCellHighlighter(cellView);\n            cellHighlighter.init({\n                strokeWidth: 10,\n                color: color\n            });\n        }\n    }\n    highlightActivity(activity, paper, plainProcessDefinition) {\n        const activityId = this.rxIdService.getBase(activity.activityId);\n        const color = activity.endTime ? this.gray : this.green;\n        this.highlightCell(activityId, paper, color, plainProcessDefinition);\n    }\n    highlightCell(cellId, paper, color, plainProcessDefinition) {\n        const elements = paper.model.getElements();\n        let cell;\n        let cellView;\n        if (!includes(map(elements, 'id'), cellId)) {\n            cell = find(elements, (element) => element.get('originalGuid') === this.rxIdService.get(cellId));\n            cellId = cell ? cell.id : cellId;\n        }\n        cellView = paper.findViewByModel(cellId);\n        if (cellView) {\n            this.highlight(cellView, color);\n        }\n        else {\n            this.highlightVisibleErroredCell(cellId, false, paper, plainProcessDefinition);\n            // Used to highlight errored cell inside expanded sub-processes\n            paper.model.on('change', debounce(() => {\n                this.highlightVisibleErroredCell(cellId, true, paper, plainProcessDefinition);\n            }, 100));\n        }\n    }\n    highlightVisibleErroredCell(cellId, isFirstEntry, paper, plainProcessDefinition) {\n        const owner = this.rxProcessElementSearchService.findOwner(plainProcessDefinition, this.rxIdService.get(cellId));\n        let cellView;\n        let erroredElement;\n        if (isFirstEntry) {\n            erroredElement = find(owner.flowElements, { guid: this.rxIdService.get(cellId) });\n            cellView = paper.findViewByModel(this.rxIdService.getBase(erroredElement.guid));\n        }\n        if (!cellView) {\n            cellView = paper.findViewByModel(this.rxIdService.getBase(owner.guid));\n        }\n        if (cellView) {\n            this.highlight(cellView, this.red);\n        }\n        else {\n            this.highlightVisibleErroredCell(owner.guid, false, paper, plainProcessDefinition);\n        }\n    }\n    resetScroll(paperScroller) {\n        paperScroller.el.scrollTop = 0;\n        paperScroller.el.scrollLeft = 0;\n    }\n    zoomToFit(paperScroller) {\n        setTimeout(() => {\n            paperScroller.zoomToFit({\n                padding: 10\n            });\n        });\n    }\n}\nRxRappidPaperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRappidPaperService, deps: [{ token: i1.RxIdService }, { token: RxProcessElementService }, { token: i1$1.RxProcessElementSearchService }, { token: i1.RxTreeService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRappidPaperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRappidPaperService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRappidPaperService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxIdService }, { type: RxProcessElementService }, { type: i1$1.RxProcessElementSearchService }, { type: i1.RxTreeService }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RxEndEventRegistrationModule, RxEndEventService, RxExpressionInputMapInspectorWidgetComponent, RxExpressionInputMapInspectorWidgetModule, RxProcessAction, RxProcessActionExpressionConfigurator, RxProcessActionRegistrationModule, RxProcessActionService, RxProcessActionView, RxProcessElementService, RxProcessElementsModule, RxProcessService, RxProcessShapeMixin, RxProcessShapeViewMixin, RxRappidPaperService, RxStartEventRegistrationModule, RxStartEventService, rx };\n//# sourceMappingURL=helix-platform-process-elements.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}