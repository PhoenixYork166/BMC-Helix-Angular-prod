{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport * as i1 from '@helix/platform/record/api';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { forkJoin } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { map } from 'lodash';\nconst RX_CHATBOTS = {\n  chatbotSettings: {\n    defaultBotId: 'AGGADGG8ECDC0AP0PA6EPJSIGS75QX',\n    recordDefinitionName: 'Chatbot Configuration',\n    recordFieldIds: {\n      name: 1770,\n      bundleId: 61001\n    }\n  },\n  componentSettings: {\n    componentName: 'Global Chatbot Configuration Settings',\n    settingNames: {\n      displayChatbotsDropdown: 'DisplayChatbotsDropdown'\n    }\n  },\n  sections: {\n    chatbotConfigurations: {\n      title: 'com.bmc.arsys.rx.client.admin.chatbots.chatbot-configurations.title',\n      isExpanded: true\n    },\n    globalChatbotSettings: {\n      title: 'com.bmc.arsys.rx.client.admin.chatbots.global-chatbot-settings.title',\n      displayChatbotsDropdown: false,\n      isExpanded: false\n    }\n  }\n};\nclass RxChatbotDefinitionService {\n  constructor(rxRecordInstanceService, rxRecordInstanceUpdateService) {\n    this.rxRecordInstanceService = rxRecordInstanceService;\n    this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;\n  }\n  delete(recordInstanceIds) {\n    return forkJoin(map(recordInstanceIds, id => {\n      return this.rxRecordInstanceService.delete(RX_CHATBOTS.chatbotSettings.recordDefinitionName, id);\n    }));\n  }\n  create(chatbotName, bundleDescriptor) {\n    return this.rxRecordInstanceService.getNew(RX_CHATBOTS.chatbotSettings.recordDefinitionName).pipe(switchMap(recordInstance => {\n      recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, chatbotName);\n      recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId, bundleDescriptor.id);\n      recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, `${bundleDescriptor.friendlyName} Chatbot configuration`);\n      return this.rxRecordInstanceService.create(recordInstance);\n    }));\n  }\n  rename(recordInstanceId, newChatbotName) {\n    return this.rxRecordInstanceService.get(RX_CHATBOTS.chatbotSettings.recordDefinitionName, recordInstanceId).pipe(switchMap(recordInstance => {\n      recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, newChatbotName);\n      return this.rxRecordInstanceUpdateService.execute(recordInstance);\n    }));\n  }\n}\nRxChatbotDefinitionService.ɵfac = function RxChatbotDefinitionService_Factory(t) {\n  return new (t || RxChatbotDefinitionService)(i0.ɵɵinject(i1.RxRecordInstanceService), i0.ɵɵinject(i1.RxRecordInstanceUpdateService));\n};\nRxChatbotDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxChatbotDefinitionService,\n  factory: RxChatbotDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxChatbotDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxRecordInstanceService\n    }, {\n      type: i1.RxRecordInstanceUpdateService\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_CHATBOTS, RxChatbotDefinitionService };\n//# sourceMappingURL=helix-platform-chatbot-api.js.map","map":{"version":3,"names":["i0","Injectable","i1","RX_RECORD_DEFINITION","forkJoin","switchMap","map","RX_CHATBOTS","chatbotSettings","defaultBotId","recordDefinitionName","recordFieldIds","name","bundleId","componentSettings","componentName","settingNames","displayChatbotsDropdown","sections","chatbotConfigurations","title","isExpanded","globalChatbotSettings","RxChatbotDefinitionService","constructor","rxRecordInstanceService","rxRecordInstanceUpdateService","delete","recordInstanceIds","id","create","chatbotName","bundleDescriptor","getNew","pipe","recordInstance","setFieldValue","coreFieldIds","description","friendlyName","rename","recordInstanceId","newChatbotName","get","execute","ɵfac","RxChatbotDefinitionService_Factory","t","ɵɵinject","RxRecordInstanceService","RxRecordInstanceUpdateService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-chatbot-api.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport * as i1 from '@helix/platform/record/api';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { forkJoin } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { map } from 'lodash';\n\nconst RX_CHATBOTS = {\n    chatbotSettings: {\n        defaultBotId: 'AGGADGG8ECDC0AP0PA6EPJSIGS75QX',\n        recordDefinitionName: 'Chatbot Configuration',\n        recordFieldIds: {\n            name: 1770,\n            bundleId: 61001\n        }\n    },\n    componentSettings: {\n        componentName: 'Global Chatbot Configuration Settings',\n        settingNames: {\n            displayChatbotsDropdown: 'DisplayChatbotsDropdown'\n        }\n    },\n    sections: {\n        chatbotConfigurations: {\n            title: 'com.bmc.arsys.rx.client.admin.chatbots.chatbot-configurations.title',\n            isExpanded: true\n        },\n        globalChatbotSettings: {\n            title: 'com.bmc.arsys.rx.client.admin.chatbots.global-chatbot-settings.title',\n            displayChatbotsDropdown: false,\n            isExpanded: false\n        }\n    }\n};\n\nclass RxChatbotDefinitionService {\n    constructor(rxRecordInstanceService, rxRecordInstanceUpdateService) {\n        this.rxRecordInstanceService = rxRecordInstanceService;\n        this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;\n    }\n    delete(recordInstanceIds) {\n        return forkJoin(map(recordInstanceIds, (id) => {\n            return this.rxRecordInstanceService.delete(RX_CHATBOTS.chatbotSettings.recordDefinitionName, id);\n        }));\n    }\n    create(chatbotName, bundleDescriptor) {\n        return this.rxRecordInstanceService.getNew(RX_CHATBOTS.chatbotSettings.recordDefinitionName).pipe(switchMap((recordInstance) => {\n            recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, chatbotName);\n            recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId, bundleDescriptor.id);\n            recordInstance.setFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description, `${bundleDescriptor.friendlyName} Chatbot configuration`);\n            return this.rxRecordInstanceService.create(recordInstance);\n        }));\n    }\n    rename(recordInstanceId, newChatbotName) {\n        return this.rxRecordInstanceService.get(RX_CHATBOTS.chatbotSettings.recordDefinitionName, recordInstanceId).pipe(switchMap((recordInstance) => {\n            recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, newChatbotName);\n            return this.rxRecordInstanceUpdateService.execute(recordInstance);\n        }));\n    }\n}\nRxChatbotDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxChatbotDefinitionService, deps: [{ token: i1.RxRecordInstanceService }, { token: i1.RxRecordInstanceUpdateService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxChatbotDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxChatbotDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxChatbotDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxRecordInstanceService }, { type: i1.RxRecordInstanceUpdateService }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_CHATBOTS, RxChatbotDefinitionService };\n//# sourceMappingURL=helix-platform-chatbot-api.js.map\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAO,KAAKC,EAAE,MAAM,4BAA4B;AAChD,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,GAAG,QAAQ,QAAQ;AAE5B,MAAMC,WAAW,GAAG;EAChBC,eAAe,EAAE;IACbC,YAAY,EAAE,gCAAgC;IAC9CC,oBAAoB,EAAE,uBAAuB;IAC7CC,cAAc,EAAE;MACZC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,iBAAiB,EAAE;IACfC,aAAa,EAAE,uCAAuC;IACtDC,YAAY,EAAE;MACVC,uBAAuB,EAAE;IAC7B;EACJ,CAAC;EACDC,QAAQ,EAAE;IACNC,qBAAqB,EAAE;MACnBC,KAAK,EAAE,qEAAqE;MAC5EC,UAAU,EAAE;IAChB,CAAC;IACDC,qBAAqB,EAAE;MACnBF,KAAK,EAAE,sEAAsE;MAC7EH,uBAAuB,EAAE,KAAK;MAC9BI,UAAU,EAAE;IAChB;EACJ;AACJ,CAAC;AAED,MAAME,0BAA0B,CAAC;EAC7BC,WAAWA,CAACC,uBAAuB,EAAEC,6BAA6B,EAAE;IAChE,IAAI,CAACD,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACC,6BAA6B,GAAGA,6BAA6B;EACtE;EACAC,MAAMA,CAACC,iBAAiB,EAAE;IACtB,OAAOxB,QAAQ,CAACE,GAAG,CAACsB,iBAAiB,EAAGC,EAAE,IAAK;MAC3C,OAAO,IAAI,CAACJ,uBAAuB,CAACE,MAAM,CAACpB,WAAW,CAACC,eAAe,CAACE,oBAAoB,EAAEmB,EAAE,CAAC;IACpG,CAAC,CAAC,CAAC;EACP;EACAC,MAAMA,CAACC,WAAW,EAAEC,gBAAgB,EAAE;IAClC,OAAO,IAAI,CAACP,uBAAuB,CAACQ,MAAM,CAAC1B,WAAW,CAACC,eAAe,CAACE,oBAAoB,CAAC,CAACwB,IAAI,CAAC7B,SAAS,CAAE8B,cAAc,IAAK;MAC5HA,cAAc,CAACC,aAAa,CAAC7B,WAAW,CAACC,eAAe,CAACG,cAAc,CAACC,IAAI,EAAEmB,WAAW,CAAC;MAC1FI,cAAc,CAACC,aAAa,CAAC7B,WAAW,CAACC,eAAe,CAACG,cAAc,CAACE,QAAQ,EAAEmB,gBAAgB,CAACH,EAAE,CAAC;MACtGM,cAAc,CAACC,aAAa,CAACjC,oBAAoB,CAACkC,YAAY,CAACC,WAAW,EAAG,GAAEN,gBAAgB,CAACO,YAAa,wBAAuB,CAAC;MACrI,OAAO,IAAI,CAACd,uBAAuB,CAACK,MAAM,CAACK,cAAc,CAAC;IAC9D,CAAC,CAAC,CAAC;EACP;EACAK,MAAMA,CAACC,gBAAgB,EAAEC,cAAc,EAAE;IACrC,OAAO,IAAI,CAACjB,uBAAuB,CAACkB,GAAG,CAACpC,WAAW,CAACC,eAAe,CAACE,oBAAoB,EAAE+B,gBAAgB,CAAC,CAACP,IAAI,CAAC7B,SAAS,CAAE8B,cAAc,IAAK;MAC3IA,cAAc,CAACC,aAAa,CAAC7B,WAAW,CAACC,eAAe,CAACG,cAAc,CAACC,IAAI,EAAE8B,cAAc,CAAC;MAC7F,OAAO,IAAI,CAAChB,6BAA6B,CAACkB,OAAO,CAACT,cAAc,CAAC;IACrE,CAAC,CAAC,CAAC;EACP;AACJ;AACAZ,0BAA0B,CAACsB,IAAI,YAAAC,mCAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFxB,0BAA0B,EAApCvB,EAAE,CAAAgD,QAAA,CAAoD9C,EAAE,CAAC+C,uBAAuB,GAAhFjD,EAAE,CAAAgD,QAAA,CAA2F9C,EAAE,CAACgD,6BAA6B;AAAA,CAA6C;AACvR3B,0BAA0B,CAAC4B,KAAK,kBAD6EnD,EAAE,CAAAoD,kBAAA;EAAAC,KAAA,EACY9B,0BAA0B;EAAA+B,OAAA,EAA1B/B,0BAA0B,CAAAsB,IAAA;EAAAU,UAAA,EAAc;AAAM,EAAG;AAC5K;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAF6GxD,EAAE,CAAAyD,iBAAA,CAEpBlC,0BAA0B,EAAc,CAAC;IACxHmC,IAAI,EAAEzD,UAAU;IAChB0D,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAExD,EAAE,CAAC+C;IAAwB,CAAC,EAAE;MAAES,IAAI,EAAExD,EAAE,CAACgD;IAA8B,CAAC,CAAC;EAAE,CAAC;AAAA;;AAEtI;AACA;AACA;;AAEA,SAAS3C,WAAW,EAAEgB,0BAA0B;AAChD"},"metadata":{},"sourceType":"module"}