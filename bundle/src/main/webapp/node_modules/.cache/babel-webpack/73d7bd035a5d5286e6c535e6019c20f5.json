{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i10 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@ngx-translate/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { reduce, some, chain, find, isFunction, has, clone, pick, isEqual, isEmpty, reject, forEach, assign } from 'lodash';\nimport * as i8 from '@bmc-ux/adapt-angular';\nimport { AdaptAlertModule, AdaptCodeViewerModule, AdaptSidebarModule, AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport * as i9 from '@helix/platform/ui-kit';\nimport { ValidationIssueType, RxBladeModule, RxJsonViewerModule, RxValidationIssuesModule } from '@helix/platform/ui-kit';\nimport * as i1 from '@helix/platform/shared/api';\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE, RX_APPLICATION } from '@helix/platform/shared/api';\nimport * as i7 from '@helix/platform/shared/components';\nimport { RX_DESIGNER_CANVAS, RxDesignerCanvasModule, RxDesignerHeaderModule, RxDesignerPaletteModule, RxFormBuilderModule, RxInspectorModule } from '@helix/platform/shared/components';\nimport * as i5 from '@helix/platform/process/elements';\nimport { RxEndEventService, RxProcessService, RxStartEventService, RxProcessElementsModule } from '@helix/platform/process/elements';\nimport { RxServerActionsModule } from '@helix/platform/process/server-actions';\nimport { BehaviorSubject, Subject, ReplaySubject, forkJoin, combineLatest, merge, of } from 'rxjs';\nimport { shareReplay, distinctUntilChanged, tap, map, switchMap, take, startWith, debounceTime, withLatestFrom, takeUntil } from 'rxjs/operators';\nimport * as i2 from '@helix/platform/utils';\nimport { RxIdService, RxJsonParserService } from '@helix/platform/utils';\nimport * as i3 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION, RxProcessElementRegistryService, RxProcessElementSearchService } from '@helix/platform/process/api';\nimport * as i1$1 from '@angular/router';\nconst _c0 = [\"inspectorSidebar\"];\nfunction ProcessDesignerComponent_ng_container_0_rx_form_builder_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"rx-form-builder\", 17);\n    i0.ɵɵlistener(\"modelChange\", function ProcessDesignerComponent_ng_container_0_rx_form_builder_12_Template_rx_form_builder_modelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onSelectedElementModelChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const vm_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"config\", vm_r1.selectedElementInspectorConfig)(\"model\", vm_r1.selectedElementModel)(\"designerItemModel\", ctx_r3.selectedElementInspectorDesignerItemModel$)(\"focusEditor$\", ctx_r3.focusSelectedElementInspector$)(\"isReadOnly\", vm_r1.isReadOnly);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    content: a0,\n    variant: \"info\",\n    type: \"inline\"\n  };\n};\nfunction ProcessDesignerComponent_ng_container_0_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"adapt-alert\", 18);\n    i0.ɵɵpipe(1, \"translate\");\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"config\", i0.ɵɵpureFunction1(3, _c1, i0.ɵɵpipeBind1(1, 1, \"com.bmc.arsys.rx.client.process-designer.inspector.missing-element.label\")));\n  }\n}\nfunction ProcessDesignerComponent_ng_container_0_adapt_code_viewer_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"adapt-code-viewer\", 19);\n    i0.ɵɵpipe(1, \"json\");\n  }\n  if (rf & 2) {\n    const vm_r1 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵproperty(\"hasToolbar\", false)(\"code\", i0.ɵɵpipeBind1(1, 2, vm_r1.definitionForCodeViewer));\n  }\n}\nfunction ProcessDesignerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"rx-designer-header\", 1);\n    i0.ɵɵlistener(\"breadcrumbSelected\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_breadcrumbSelected_1_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onBreadcrumbSelected($event.data.guid);\n    })(\"toggleDesignMode\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_toggleDesignMode_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.toggleDesignMode();\n    })(\"closeDesigner\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_closeDesigner_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.closeDesigner.emit();\n    })(\"save\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_save_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.saveDefinition();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 2);\n    i0.ɵɵelementStart(3, \"adapt-sidebar\", 3, 4);\n    i0.ɵɵelementStart(5, \"adapt-sidebar-item\", 5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementStart(8, \"rx-form-builder\", 6);\n    i0.ɵɵlistener(\"formInitialized\", function ProcessDesignerComponent_ng_container_0_Template_rx_form_builder_formInitialized_8_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.onDefinitionInspectorInitialized();\n    })(\"modelChange\", function ProcessDesignerComponent_ng_container_0_Template_rx_form_builder_modelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onDefinitionModelChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"adapt-sidebar-item\", 7);\n    i0.ɵɵpipe(10, \"translate\");\n    i0.ɵɵpipe(11, \"translate\");\n    i0.ɵɵtemplate(12, ProcessDesignerComponent_ng_container_0_rx_form_builder_12_Template, 1, 5, \"rx-form-builder\", 8);\n    i0.ɵɵtemplate(13, ProcessDesignerComponent_ng_container_0_ng_template_13_Template, 2, 5, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"adapt-sidebar-item\", 10);\n    i0.ɵɵpipe(16, \"translate\");\n    i0.ɵɵpipe(17, \"translate\");\n    i0.ɵɵelementStart(18, \"rx-validation-issues\", 11);\n    i0.ɵɵlistener(\"correctIssue\", function ProcessDesignerComponent_ng_container_0_Template_rx_validation_issues_correctIssue_18_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.onCorrectIssue($event);\n    });\n    i0.ɵɵpipe(19, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 12);\n    i0.ɵɵelementStart(21, \"rx-blade\", 13);\n    i0.ɵɵelementStart(22, \"rx-designer-palette\", 14);\n    i0.ɵɵlistener(\"elementDropped\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_palette_elementDropped_22_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.onPaletteElementDropped($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"rx-designer-canvas\", 15);\n    i0.ɵɵlistener(\"elementSelected\", function ProcessDesignerComponent_ng_container_0_Template_rx_designer_canvas_elementSelected_23_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.onCanvasElementSelected($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, ProcessDesignerComponent_ng_container_0_adapt_code_viewer_24_Template, 2, 4, \"adapt-code-viewer\", 16);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const vm_r1 = ctx.ngIf;\n    const _r4 = i0.ɵɵreference(14);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"bundleName\", vm_r1.bundleFriendlyName)(\"breadcrumbItems\", vm_r1.breadcrumbItems)(\"isSaveButtonDisabled\", vm_r1.isSaveButtonDisabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", vm_r1.definitionForCodeViewer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"openedId\", 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"headerTitle\", i0.ɵɵpipeBind1(6, 27, \"com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title\"));\n    i0.ɵɵpropertyInterpolate(\"tooltipText\", i0.ɵɵpipeBind1(7, 29, \"com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"config\", vm_r1.definitionInspectorConfig)(\"model\", vm_r1.definitionModel)(\"focusEditor$\", ctx_r0.focusDefinitionInspector$)(\"isReadOnly\", vm_r1.isReadOnly);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"headerTitle\", i0.ɵɵpipeBind1(10, 31, \"com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title\"));\n    i0.ɵɵpropertyInterpolate(\"tooltipText\", i0.ɵɵpipeBind1(11, 33, \"com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", vm_r1.selectedElementInspectorConfig)(\"ngIfElse\", _r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"headerTitle\", i0.ɵɵpipeBind1(16, 35, \"com.bmc.arsys.rx.client.designer.validation-issues.label\"));\n    i0.ɵɵpropertyInterpolate(\"tooltipText\", i0.ɵɵpipeBind1(17, 37, \"com.bmc.arsys.rx.client.designer.validation-issues.label\"));\n    i0.ɵɵproperty(\"iconClass\", vm_r1.hasValidationErrors ? \"d-icon-exclamation_triangle text-danger\" : \"d-icon-exclamation_triangle\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"issueSections\", vm_r1.validationIssueSections)(\"definitionTypeDisplayName\", i0.ɵɵpipeBind1(19, 39, \"com.bmc.arsys.rx.client.common.process-definition.label\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"title\", \"Palette\")(\"isExpanded\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tree\", vm_r1.paletteElementsTree);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"configuration\", vm_r1.canvasConfiguration)(\"graph\", vm_r1.graph)(\"droppedElement\", ctx_r0.droppedElement);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", vm_r1.definitionForCodeViewer);\n  }\n}\nfunction ProcessDesignerPageComponent_rx_process_designer_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"rx-process-designer\", 1);\n    i0.ɵɵlistener(\"closeDesigner\", function ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_closeDesigner_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.onCloseDesigner();\n    })(\"definitionErrorLoading\", function ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_definitionErrorLoading_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onDefinitionErrorLoading();\n    })(\"definitionSaved\", function ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_definitionSaved_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onDefinitionSaved($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"configuration\", ctx_r0.configuration);\n  }\n}\nclass RxProcessDesignerService {\n  constructor(rxActionTypeUtilsService, rxBundleCacheService, rxDesignerCacheService, rxGlobalCacheService, rxProcessDefinitionService, rxProcessElementRegistryService) {\n    this.rxActionTypeUtilsService = rxActionTypeUtilsService;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxDesignerCacheService = rxDesignerCacheService;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.rxProcessElementRegistryService = rxProcessElementRegistryService;\n  }\n  buildPalette(actionTypes, bundleDescriptors) {\n    const registeredElementNodes = reduce(this.rxProcessElementRegistryService.getAll(), (nodes, registeredElement) => {\n      if (registeredElement.displayName) {\n        nodes.push({\n          group: registeredElement.group,\n          label: registeredElement.displayName,\n          paletteItem: registeredElement.paletteItem,\n          value: {\n            actionTypeName: this.rxProcessDefinitionService.getServerActionTypeName(registeredElement.type),\n            resourceType: registeredElement.resourceType,\n            type: registeredElement.type\n          }\n        });\n      }\n      return nodes;\n    }, []);\n    const serverActionNodes = reduce(actionTypes, (nodes, actionType) => {\n      const isActionRegistered = some(registeredElementNodes, registeredElementNode => registeredElementNode.value.actionTypeName === actionType.actionTypeName);\n      if (!isActionRegistered) {\n        nodes.push({\n          group: this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) || RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n          label: actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n          paletteItem: {\n            border: RX_DESIGNER.paletteItemBorder.solid,\n            icon: {\n              path: actionType.isDeprecated ? RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.info : RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n              position: RX_DESIGNER.paletteIconPosition.top\n            },\n            label: RX_DESIGNER.paletteItemLabel.inner,\n            shape: RX_DESIGNER.paletteItemShape.rectangle\n          },\n          value: {\n            actionTypeName: actionType.actionTypeName,\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n            type: this.rxProcessDefinitionService.getServerActionModelType(actionType.actionTypeName)\n          }\n        });\n      }\n      return nodes;\n    }, []);\n    return chain([...registeredElementNodes, ...serverActionNodes]).sortBy('label').reduce((tree, element) => {\n      const group = find(tree, {\n        label: element.group\n      });\n      if (group) {\n        group.children.push(element);\n      } else {\n        tree.push({\n          label: element.group,\n          children: [element]\n        });\n      }\n      return tree;\n    }, []).sortBy('label').sortBy(node => {\n      var _a;\n      const group = find(RX_PROCESS_DEFINITION.processElementGroups, {\n        name: node.label\n      });\n      return (_a = group === null || group === void 0 ? void 0 : group.priority) !== null && _a !== void 0 ? _a : RX_PROCESS_DEFINITION.standardProcessElementGroups.default.priority;\n    }).value();\n  }\n}\nRxProcessDesignerService.ɵfac = function RxProcessDesignerService_Factory(t) {\n  return new (t || RxProcessDesignerService)(i0.ɵɵinject(i1.RxActionTypeUtilsService), i0.ɵɵinject(i1.RxBundleCacheService), i0.ɵɵinject(i1.RxDesignerCacheService), i0.ɵɵinject(i1.RxGlobalCacheService), i0.ɵɵinject(i3.RxProcessDefinitionService), i0.ɵɵinject(i3.RxProcessElementRegistryService));\n};\nRxProcessDesignerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessDesignerService,\n  factory: RxProcessDesignerService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDesignerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxActionTypeUtilsService\n    }, {\n      type: i1.RxBundleCacheService\n    }, {\n      type: i1.RxDesignerCacheService\n    }, {\n      type: i1.RxGlobalCacheService\n    }, {\n      type: i3.RxProcessDefinitionService\n    }, {\n      type: i3.RxProcessElementRegistryService\n    }];\n  }, null);\n})();\nclass RxProcessDesignerGraph extends joint.dia.Graph {\n  constructor(config) {\n    super(config.options);\n    this.rxEndEventService = config.injector.get(RxEndEventService);\n    this.rxIdService = config.injector.get(RxIdService);\n    this.rxJsonParserService = config.injector.get(RxJsonParserService);\n    this.rxProcessElementRegistryService = config.injector.get(RxProcessElementRegistryService);\n    this.rxProcessElementSearchService = config.injector.get(RxProcessElementSearchService);\n    this.rxProcessService = config.injector.get(RxProcessService);\n    this.rxStartEventService = config.injector.get(RxStartEventService);\n  }\n  // joint.dia.Graph methods\n  reset() {\n    this.off('add');\n    this.off('change');\n    this.clear();\n  }\n  // Custom methods\n  addDefaultElements(definitionModel) {\n    this.addCell(this.rxProcessService.getShape({\n      definitionModel,\n      id: this.get('processId')\n    }));\n    const isGraphEmpty = chain(this.getCells()).reject({\n      id: this.get('processId')\n    }).isEmpty().value();\n    if (isGraphEmpty) {\n      const elementSize = 30;\n      this.addCells([this.rxStartEventService.getShape({\n        position: {\n          x: elementSize,\n          y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n        }\n      }), this.rxEndEventService.getShape({\n        position: {\n          x: RX_DESIGNER_CANVAS.paperOptions.width - 2 * elementSize,\n          y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n        }\n      })]);\n    }\n  }\n  // TODO-VS: update when element shapes logic is implemented\n  getDefinitionFromGraph() {\n    return Object.assign(Object.assign({}, this.getDefinitionBase(this.getCell(this.get('processId')))), {\n      flowElements: this.getFlowElements(this.getCells()),\n      layout: this.getLayout(this.get('cells').models)\n    });\n  }\n  // TODO-VS: update types\n  loadGraphFromDefinition(definition) {\n    return this.fromJSON(this.getJsonObject(definition));\n  }\n  // TODO-VS: update types\n  getDefinitionBase(processCell) {\n    return this.rxProcessService.getDefinitionFromModel(processCell.prop('definitionModel'));\n  }\n  // TODO-VS: update types\n  getFlowElements(cells) {\n    return chain(cells).reject({\n      id: this.get('processId')\n    }).map(cell => {\n      const elementModel = cell.prop('elementModel');\n      const elementService = this.rxProcessElementRegistryService.get(elementModel.type).elementService;\n      return elementService.getDefinitionFromModel(elementModel);\n    }).value();\n  }\n  // TODO-VS: update types\n  getJsonObject(definition) {\n    const jsonObject = this.rxJsonParserService.tryParseJson(definition.layout, {\n      cells: []\n    });\n    jsonObject.cells.forEach(cell => {\n      const embeddedElementIds = chain(jsonObject.cells).filter({\n        parent: cell.id\n      }).map('id').value();\n      if (embeddedElementIds.length) {\n        cell.embeds = embeddedElementIds;\n      }\n      cell.ownerProcessDefinitionName = definition.lastUpdateTime ? definition.name : definition.guid;\n      const flowElement = this.rxProcessElementSearchService.findByGuid(definition, this.rxIdService.get(cell.id));\n      const elementService = this.rxProcessElementRegistryService.get(cell.type).elementService;\n      cell.elementModel = elementService.getModelFromDefinition(flowElement);\n    });\n    return jsonObject;\n  }\n  // TODO-VS: update types\n  getLayout(models) {\n    const cells = chain(models).reject({\n      id: this.get('processId')\n    }).map(cell => {\n      if (isFunction(cell.getLayout)) {\n        return this.adaptCell(cell.getLayout());\n      }\n    }).value();\n    return cells.length ? JSON.stringify({\n      cells: cells\n    }) : null;\n  }\n  // TODO-VS: update types\n  adaptCell(cell) {\n    return this.removeRedundantProperties(cell);\n  }\n  // remove properties from the process and sub-process layouts\n  // that are set programmatically and don't have to be persisted\n  // TODO-VS: update types\n  removeRedundantProperties(cell) {\n    let attrs;\n    if (has(cell, 'attrs[\".label\"]')) {\n      attrs = {\n        '.label': clone(cell.attrs['.label'])\n      };\n    }\n    // list of properties that must be kept in the layout, all others will be set programmatically\n    let adaptedCell = pick(cell, ['collapsedSize', 'content', 'expanded', 'flowType', 'id', 'labels', 'parent', 'position', 'size', 'source', 'target', 'type', 'vertices', 'z']);\n    if (attrs) {\n      adaptedCell.attrs = attrs;\n    }\n    return adaptedCell;\n  }\n}\nclass ProcessDesignerComponent {\n  constructor(injector, rxBundleCacheService, rxCommandManagerService, rxDesignerCacheService, rxGlobalCacheService, rxGuidService, rxIdService, rxOverlayService, rxProcessDataDictionaryService, rxProcessDefinitionService, rxProcessDesignerService, rxProcessElementRegistryService, rxProcessElementSearchService, rxProcessService, translateService) {\n    this.injector = injector;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxCommandManagerService = rxCommandManagerService;\n    this.rxDesignerCacheService = rxDesignerCacheService;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxGuidService = rxGuidService;\n    this.rxIdService = rxIdService;\n    this.rxOverlayService = rxOverlayService;\n    this.rxProcessDataDictionaryService = rxProcessDataDictionaryService;\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.rxProcessDesignerService = rxProcessDesignerService;\n    this.rxProcessElementRegistryService = rxProcessElementRegistryService;\n    this.rxProcessElementSearchService = rxProcessElementSearchService;\n    this.rxProcessService = rxProcessService;\n    this.translateService = translateService;\n    this.closeDesigner = new EventEmitter();\n    this.definitionErrorLoading = new EventEmitter();\n    this.definitionSaved = new EventEmitter();\n    this.bundleIdSubject = new BehaviorSubject(null);\n    this.definitionModelChangeSubject = new Subject();\n    this.selectedElementModelChangeSubject = new Subject();\n    this.definitionNameSubject = new BehaviorSubject(null);\n    this.destroyed$ = new ReplaySubject(1);\n    this.focusDefinitionInspectorSubject = new BehaviorSubject(null);\n    this.focusSelectedElementInspectorSubject = new BehaviorSubject(null);\n    this.graph = new RxProcessDesignerGraph({\n      injector: this.injector,\n      options: {\n        processId: this.rxGuidService.generate()\n      }\n    });\n    this.graphChangeSubject = new Subject();\n    this.graphChange$ = this.graphChangeSubject.pipe(shareReplay(1));\n    this.isDesignModeSubject = new BehaviorSubject(true);\n    this.selectedElementGuidSubject = new BehaviorSubject(null);\n    this.selectedElementGuid$ = this.selectedElementGuidSubject.pipe(distinctUntilChanged(isEqual), shareReplay(1));\n    this.paletteElementsTree$ = forkJoin([this.rxBundleCacheService.getActionTypes(), this.rxGlobalCacheService.getBundleDescriptors(), this.rxGlobalCacheService.getFunctionDescriptors()]).pipe(tap(([actionTypes, bundleDescriptors, functionDescriptors]) => {\n      this.rxDesignerCacheService.setActionTypes(actionTypes);\n      this.rxDesignerCacheService.setFunctionDescriptors(functionDescriptors);\n    }), map(([actionTypes, bundleDescriptors]) => this.rxProcessDesignerService.buildPalette(actionTypes, bundleDescriptors)), shareReplay(1));\n    this.definition$ = combineLatest([this.definitionNameSubject, this.paletteElementsTree$]).pipe(switchMap(([definitionName]) => definitionName ? this.rxProcessDefinitionService.get(definitionName) : this.rxProcessDefinitionService.getNew()), shareReplay(1));\n    this.isReadOnly$ = combineLatest([this.definition$, this.bundleIdSubject.pipe(switchMap(bundleId => this.rxOverlayService.areNewDefinitionsAllowed(bundleId)))]).pipe(map(([definition, areNewDefinitionsAllowed]) => !areNewDefinitionsAllowed || !this.rxOverlayService.isCustomizationEnabled('allowOverlay', definition)), distinctUntilChanged(), shareReplay(1));\n    this.definitionModelFromDefinition$ = this.definition$.pipe(map(definition => this.rxProcessService.getModelFromDefinition(definition, this.configuration.bundleId)));\n    this.graph$ = combineLatest([this.definition$, this.definitionModelFromDefinition$, this.isReadOnly$]).pipe(tap(([definition, definitionModelFromDefinition, isReadOnly]) => {\n      if (!isReadOnly) {\n        this.graph.on('add', (element, elements, options) => {\n          this.graphChangeSubject.next(this.graph);\n        });\n        this.graph.on('change', (element, elementModel, changedProperty) => {\n          if (!element.changed.position) {\n            this.graphChangeSubject.next(this.graph);\n          }\n        });\n      }\n      this.graph.loadGraphFromDefinition(definition);\n      this.graph.addDefaultElements(definitionModelFromDefinition);\n    }), map(() => this.graph), shareReplay(1));\n    this.definitionModelFromGraph$ = this.graphChange$.pipe(map(graph => graph.getCell(graph.get('processId')).prop('definitionModel')), distinctUntilChanged(isEqual));\n    this.definitionModel$ = merge(this.definitionModelFromDefinition$, this.definitionModelFromGraph$).pipe(shareReplay(1));\n    this.definitionInspectorConfig$ = this.definitionModel$.pipe(map(definitionModel => this.rxProcessService.getInspectorConfig(definitionModel)));\n    this.selectedElementModelFromDefinition$ = combineLatest([this.definition$, this.selectedElementGuid$]).pipe(map(([definition, selectedElementGuid]) => {\n      let selectedElementModel = null;\n      if (selectedElementGuid) {\n        const flowElement = this.rxProcessElementSearchService.find(definition, {\n          guid: selectedElementGuid\n        });\n        if (flowElement) {\n          const selectedElement = find(JSON.parse(definition.layout).cells, {\n            id: this.rxIdService.getBase(selectedElementGuid)\n          });\n          const elementService = this.rxProcessElementRegistryService.get(selectedElement.type).elementService;\n          selectedElementModel = elementService.getModelFromDefinition(flowElement);\n        }\n      }\n      return selectedElementModel;\n    }));\n    this.selectedElementModelFromGraph$ = combineLatest([this.graphChange$, this.selectedElementGuid$]).pipe(map(([graph, selectedElementGuid]) => {\n      let selectedElementModel = null;\n      if (selectedElementGuid) {\n        const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementGuid));\n        selectedElementModel = selectedElementCell.prop('elementModel');\n      }\n      return selectedElementModel;\n    }));\n    this.selectedElementModel$ = merge(this.selectedElementModelFromDefinition$, this.selectedElementModelFromGraph$).pipe(tap(selectedElementModel => {\n      var _a;\n      if ((_a = this.inspectorSidebar) === null || _a === void 0 ? void 0 : _a.isPanelOpened) {\n        if (isEmpty(selectedElementModel)) {\n          this.openInspectorSidebarPanel(0);\n        } else {\n          this.openInspectorSidebarPanel(1);\n        }\n      }\n    }), shareReplay(1));\n    this.selectedElementInspectorConfig$ = combineLatest([this.selectedElementModel$, this.definitionModel$]).pipe(map(([selectedElementModel, definitionModel]) => {\n      let selectedElementInspectorConfig = null;\n      if (selectedElementModel) {\n        const elementService = this.rxProcessElementRegistryService.get(selectedElementModel.type).elementService;\n        selectedElementInspectorConfig = elementService.getInspectorConfig(selectedElementModel, {\n          processDefinitionModel: definitionModel\n        });\n      }\n      return selectedElementInspectorConfig;\n    }));\n    this.definitionForCodeViewer$ = this.isDesignModeSubject.pipe(switchMap(isDesignMode => {\n      return isDesignMode ? of(null) : this.graph$.pipe(take(1), map(graph => graph.getDefinitionFromGraph()));\n    }));\n    this.bundleFriendlyName$ = this.bundleIdSubject.pipe(switchMap(bundleId => this.rxGlobalCacheService.getBundleFriendlyName(bundleId)));\n    // TODO-VS: update canvas configuration (interactive property)\n    this.canvasConfiguration$ = this.isReadOnly$.pipe(map(isReadOnly => {\n      return {\n        elementRegistry: this.rxProcessElementRegistryService,\n        enableMultiSelection: true,\n        interactive: !isReadOnly,\n        isReadOnly,\n        showToolbar: true\n      };\n    }));\n    this.breadcrumbItems$ = combineLatest([this.definitionModel$, this.selectedElementModel$]).pipe(map(([definitionModel, selectedElementModel]) => {\n      const breadcrumbItems = [{\n        label: definitionModel.name || `<${this.translateService.instant('com.bmc.arsys.rx.client.process-designer.new-process.label')}>`,\n        data: {}\n      }];\n      if (selectedElementModel) {\n        breadcrumbItems.push({\n          label: selectedElementModel.label,\n          data: {}\n        });\n      }\n      return breadcrumbItems;\n    }));\n    this.elementValidationIssueSections$ = this.graphChange$.pipe(switchMap(graph => {\n      const cells = reject(graph.getCells(), {\n        id: graph.get('processId')\n      });\n      return forkJoin(cells.map(cell => {\n        const elementModel = cell.prop('elementModel');\n        const cellType = cell.prop('type');\n        const elementRegistry = this.rxProcessElementRegistryService.get(cellType);\n        return elementRegistry.elementService.validate(elementModel, reject(cells, {\n          id: elementModel.id\n        })).pipe(map(elementValidationIssues => ({\n          title: cell.prop('elementModel').label || this.translateService.instant(elementRegistry.displayName),\n          issues: elementValidationIssues\n        })));\n      }));\n    }));\n    this.processValidationIssueSection$ = this.graphChange$.pipe(switchMap(graph => {\n      const processCell = graph.getCell(graph.get('processId'));\n      return this.rxProcessService.validate(processCell.prop('definitionModel'), reject(graph.getCells(), {\n        id: processCell.id\n      }));\n    }), map(processValidationIssues => ({\n      title: this.translateService.instant('com.bmc.arsys.rx.client.process-definition.label'),\n      issues: processValidationIssues\n    })));\n    this.validationIssueSections$ = combineLatest([this.processValidationIssueSection$, this.elementValidationIssueSections$]).pipe(map(([processValidationIssueSection, elementValidationIssueSections]) => {\n      const validationIssueSections = [];\n      if (!isEmpty(processValidationIssueSection.issues)) {\n        validationIssueSections.push(processValidationIssueSection);\n      }\n      elementValidationIssueSections.forEach(elementValidationIssueSection => {\n        if (!isEmpty(elementValidationIssueSection.issues)) {\n          validationIssueSections.push(elementValidationIssueSection);\n        }\n      });\n      return validationIssueSections;\n    }), shareReplay(1));\n    this.hasValidationErrors$ = this.validationIssueSections$.pipe(map(sections => some(sections, section => find(section.issues, {\n      type: ValidationIssueType.Error\n    }))), distinctUntilChanged(), shareReplay(1));\n    // TODO-VS: update the logic to rely on command manager\n    this.isSaveButtonDisabled$ = combineLatest([this.hasValidationErrors$, this.isReadOnly$]).pipe(map(([hasValidationErrors, isReadOnly]) => hasValidationErrors || isReadOnly), startWith(true));\n    this.selectedElementInspectorDesignerItemModel$ = combineLatest([this.selectedElementModel$, this.graph$]).pipe(map(([selectedElementModel, graph]) => ({\n      elementModel: selectedElementModel,\n      graph\n    })));\n    this.focusDefinitionInspector$ = this.focusDefinitionInspectorSubject.asObservable();\n    this.focusSelectedElementInspector$ = this.focusSelectedElementInspectorSubject.asObservable();\n    this.vm$ = combineLatest([this.breadcrumbItems$, this.bundleFriendlyName$, this.canvasConfiguration$, this.definitionForCodeViewer$, this.definitionInspectorConfig$, this.definitionModel$, this.graph$, this.hasValidationErrors$, this.isReadOnly$, this.isSaveButtonDisabled$, this.paletteElementsTree$, this.selectedElementInspectorConfig$, this.selectedElementModel$, this.validationIssueSections$]).pipe(map(([breadcrumbItems, bundleFriendlyName, canvasConfiguration, definitionForCodeViewer, definitionInspectorConfig, definitionModel, graph, hasValidationErrors, isReadOnly, isSaveButtonDisabled, paletteElementsTree, selectedElementInspectorConfig, selectedElementModel, validationIssueSections]) => ({\n      breadcrumbItems,\n      bundleFriendlyName,\n      canvasConfiguration,\n      definitionForCodeViewer,\n      definitionInspectorConfig,\n      definitionModel,\n      graph,\n      hasValidationErrors,\n      isReadOnly,\n      isSaveButtonDisabled,\n      paletteElementsTree,\n      selectedElementInspectorConfig,\n      selectedElementModel,\n      validationIssueSections\n    })));\n  }\n  ngOnInit() {\n    // TODO-VS: update logic not to debounce model change here\n    this.definitionModelChangeSubject.pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$)).subscribe(([definitionModel, graph]) => {\n      const processCell = graph.getCell(graph.get('processId'));\n      const commandManager = this.rxCommandManagerService.get();\n      commandManager.initBatchCommand();\n      forEach(definitionModel, (propertyValue, propertyName) => {\n        processCell.prop(`definitionModel/${propertyName}`, propertyValue);\n      });\n      commandManager.storeBatchCommand();\n    });\n    // TODO-VS: update logic not to debounce model change here\n    this.selectedElementModelChangeSubject.pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$)).subscribe(([selectedElementModel, graph]) => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementModel.guid));\n      const commandManager = this.rxCommandManagerService.get();\n      commandManager.initBatchCommand();\n      forEach(selectedElementModel, (propertyValue, propertyName) => {\n        selectedElementCell.prop(`elementModel/${propertyName}`, propertyValue);\n      });\n      commandManager.storeBatchCommand();\n    });\n  }\n  ngOnChanges(changes) {\n    if (changes.configuration.currentValue.definitionName) {\n      this.graph.reset();\n      this.rxProcessDataDictionaryService.clear();\n      this.isDesignModeSubject.next(true);\n      this.definitionNameSubject.next(changes.configuration.currentValue.definitionName);\n    }\n    if (changes.configuration.currentValue.bundleId) {\n      this.bundleIdSubject.next(changes.configuration.currentValue.bundleId);\n    }\n  }\n  ngOnDestroy() {\n    this.rxProcessDataDictionaryService.clear();\n    this.bundleIdSubject.complete();\n    this.definitionModelChangeSubject.complete();\n    this.definitionNameSubject.complete();\n    this.focusDefinitionInspectorSubject.complete();\n    this.focusSelectedElementInspectorSubject.complete();\n    this.graphChangeSubject.complete();\n    this.isDesignModeSubject.complete();\n    this.selectedElementGuidSubject.complete();\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n  canDeactivate() {\n    return true;\n  }\n  onBreadcrumbSelected(guid) {\n    if (guid) {\n      this.openInspectorSidebarPanel(1);\n    } else {\n      this.openInspectorSidebarPanel(0);\n    }\n  }\n  onCanvasElementSelected(guid) {\n    if (!guid) {\n      this.openInspectorSidebarPanel(0);\n    }\n    this.selectedElementGuidSubject.next(guid);\n  }\n  onCorrectIssue(validationIssue) {\n    this.openInspectorSidebarPanel(validationIssue.data.inspectorTabIndex);\n    if (validationIssue.data.inspectorTabIndex === 0) {\n      setTimeout(() => this.focusDefinitionInspectorSubject.next({\n        editorName: validationIssue.data.propertyName,\n        data: validationIssue.data\n      }), 10);\n    } else if (validationIssue.data.inspectorTabIndex === 1) {\n      this.selectedElementGuidSubject.next(validationIssue.data.guid);\n      setTimeout(() => this.focusSelectedElementInspectorSubject.next({\n        editorName: validationIssue.data.propertyName,\n        data: validationIssue.data\n      }), 10);\n    }\n  }\n  onDefinitionInspectorInitialized() {\n    this.focusDefinitionInspectorSubject.next({\n      editorName: 'name',\n      data: {}\n    });\n  }\n  onDefinitionModelChange(definitionModel) {\n    this.definitionModelChangeSubject.next(definitionModel);\n  }\n  // TODO-VS: update types\n  onPaletteElementDropped(dropData) {\n    this.droppedElement = dropData;\n  }\n  onSelectedElementModelChange(selectedElementModel) {\n    this.selectedElementModelChangeSubject.next(selectedElementModel);\n  }\n  saveDefinition() {\n    this.graph$.pipe(take(1), map(graph => graph.getDefinitionFromGraph())).subscribe();\n  }\n  toggleDesignMode() {\n    this.isDesignModeSubject.next(!this.isDesignModeSubject.value);\n  }\n  openInspectorSidebarPanel(id) {\n    this.inspectorSidebar.openPanel(id);\n  }\n}\nProcessDesignerComponent.ɵfac = function ProcessDesignerComponent_Factory(t) {\n  return new (t || ProcessDesignerComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.RxBundleCacheService), i0.ɵɵdirectiveInject(i1.RxCommandManagerService), i0.ɵɵdirectiveInject(i1.RxDesignerCacheService), i0.ɵɵdirectiveInject(i1.RxGlobalCacheService), i0.ɵɵdirectiveInject(i2.RxGuidService), i0.ɵɵdirectiveInject(i2.RxIdService), i0.ɵɵdirectiveInject(i1.RxOverlayService), i0.ɵɵdirectiveInject(i3.RxProcessDataDictionaryService), i0.ɵɵdirectiveInject(i3.RxProcessDefinitionService), i0.ɵɵdirectiveInject(RxProcessDesignerService), i0.ɵɵdirectiveInject(i3.RxProcessElementRegistryService), i0.ɵɵdirectiveInject(i3.RxProcessElementSearchService), i0.ɵɵdirectiveInject(i5.RxProcessService), i0.ɵɵdirectiveInject(i6.TranslateService));\n};\nProcessDesignerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ProcessDesignerComponent,\n  selectors: [[\"rx-process-designer\"]],\n  viewQuery: function ProcessDesignerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inspectorSidebar = _t.first);\n    }\n  },\n  inputs: {\n    configuration: \"configuration\"\n  },\n  outputs: {\n    closeDesigner: \"closeDesigner\",\n    definitionErrorLoading: \"definitionErrorLoading\",\n    definitionSaved: \"definitionSaved\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [3, \"bundleName\", \"breadcrumbItems\", \"isSaveButtonDisabled\", \"breadcrumbSelected\", \"toggleDesignMode\", \"closeDesigner\", \"save\"], [1, \"rx-designer-component\", 3, \"hidden\"], [\"position\", \"right\", \"panelWidth\", \"280px\", 3, \"openedId\"], [\"inspectorSidebar\", \"\"], [\"iconClass\", \"d-icon-pencil\", 3, \"headerTitle\", \"tooltipText\"], [3, \"config\", \"model\", \"focusEditor$\", \"isReadOnly\", \"formInitialized\", \"modelChange\"], [\"iconClass\", \"d-icon-gear\", 3, \"headerTitle\", \"tooltipText\"], [\"rxInspector\", \"\", 3, \"config\", \"model\", \"designerItemModel\", \"focusEditor$\", \"isReadOnly\", \"modelChange\", 4, \"ngIf\", \"ngIfElse\"], [\"missingElementAlert\", \"\"], [3, \"headerTitle\", \"tooltipText\", \"iconClass\"], [3, \"issueSections\", \"definitionTypeDisplayName\", \"correctIssue\"], [1, \"main\"], [\"rx-id\", \"palette\", 3, \"title\", \"isExpanded\"], [3, \"tree\", \"elementDropped\"], [3, \"configuration\", \"graph\", \"droppedElement\", \"elementSelected\"], [\"class\", \"full-size\", \"theme\", \"light\", \"lang\", \"javascript\", 3, \"hasToolbar\", \"code\", 4, \"ngIf\"], [\"rxInspector\", \"\", 3, \"config\", \"model\", \"designerItemModel\", \"focusEditor$\", \"isReadOnly\", \"modelChange\"], [1, \"p-3\", \"definition-valid-message\", 3, \"config\"], [\"theme\", \"light\", \"lang\", \"javascript\", 1, \"full-size\", 3, \"hasToolbar\", \"code\"]],\n  template: function ProcessDesignerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ProcessDesignerComponent_ng_container_0_Template, 25, 41, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.vm$));\n    }\n  },\n  directives: [i10.NgIf, i7.RxDesignerHeaderComponent, i8.AdaptSidebarComponent, i8.AdaptSidebarItemComponent, i7.FormBuilderComponent, i9.RxValidationIssuesComponent, i9.RxBladeComponent, i7.RxDesignerPaletteComponent, i7.RxDesignerCanvasComponent, i7.InspectorDirective, i8.AdaptAlertComponent, i8.AdaptCodeViewerComponent],\n  pipes: [i10.AsyncPipe, i6.TranslatePipe, i10.JsonPipe],\n  styles: [\"[_ngcontent-%COMP%]:root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}[_nghost-%COMP%]{display:flex;flex-direction:column;height:100%;width:100%}[_nghost-%COMP%]     rx-blade .content{z-index:100}[_nghost-%COMP%]     .adapt-sidebar-main{padding:0}[_nghost-%COMP%]     .adapt-sidebar-main .main{height:100%}[_nghost-%COMP%]     adapt-sidebar .adapt-sidebar-panel-content{padding:0}[_nghost-%COMP%]     adapt-accordion-tab>.card:first-child{border:0}[_nghost-%COMP%]     .joint-element .body{stroke:#626668}[_nghost-%COMP%]     .joint-element polygon{stroke-width:2}[_nghost-%COMP%]     .joint-element path{stroke:#626668}.rx-designer-component[_ngcontent-%COMP%]{height:calc(100% - 50px)}.rx-designer-component[_ngcontent-%COMP%]   rx-designer-canvas[_ngcontent-%COMP%]{position:absolute;top:0;right:0;bottom:0;left:0}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-process-designer',\n      templateUrl: './process-designer.component.html',\n      styleUrls: ['./process-designer.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: i1.RxBundleCacheService\n    }, {\n      type: i1.RxCommandManagerService\n    }, {\n      type: i1.RxDesignerCacheService\n    }, {\n      type: i1.RxGlobalCacheService\n    }, {\n      type: i2.RxGuidService\n    }, {\n      type: i2.RxIdService\n    }, {\n      type: i1.RxOverlayService\n    }, {\n      type: i3.RxProcessDataDictionaryService\n    }, {\n      type: i3.RxProcessDefinitionService\n    }, {\n      type: RxProcessDesignerService\n    }, {\n      type: i3.RxProcessElementRegistryService\n    }, {\n      type: i3.RxProcessElementSearchService\n    }, {\n      type: i5.RxProcessService\n    }, {\n      type: i6.TranslateService\n    }];\n  }, {\n    configuration: [{\n      type: Input\n    }],\n    closeDesigner: [{\n      type: Output\n    }],\n    definitionErrorLoading: [{\n      type: Output\n    }],\n    definitionSaved: [{\n      type: Output\n    }],\n    inspectorSidebar: [{\n      type: ViewChild,\n      args: ['inspectorSidebar', {\n        static: false\n      }]\n    }]\n  });\n})();\njoint.shapes.rx = joint.shapes.rx || {};\nclass ProcessDesignerModule {\n  constructor() {\n    assign(joint.shapes.bpmn.icons, RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons);\n  }\n}\nProcessDesignerModule.ɵfac = function ProcessDesignerModule_Factory(t) {\n  return new (t || ProcessDesignerModule)();\n};\nProcessDesignerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ProcessDesignerModule,\n  declarations: [ProcessDesignerComponent],\n  imports: [AdaptAlertModule, AdaptCodeViewerModule, AdaptSidebarModule, AdaptTabsModule, CommonModule, RxBladeModule, RxDesignerCanvasModule, RxDesignerHeaderModule, RxDesignerPaletteModule, RxFormBuilderModule, RxInspectorModule, RxJsonViewerModule, RxProcessElementsModule, RxServerActionsModule, RxValidationIssuesModule, TranslateModule],\n  exports: [ProcessDesignerComponent]\n});\nProcessDesignerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[AdaptAlertModule, AdaptCodeViewerModule, AdaptSidebarModule, AdaptTabsModule, CommonModule, RxBladeModule, RxDesignerCanvasModule, RxDesignerHeaderModule, RxDesignerPaletteModule, RxFormBuilderModule, RxInspectorModule, RxJsonViewerModule, RxProcessElementsModule, RxServerActionsModule, RxValidationIssuesModule, TranslateModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ProcessDesignerComponent],\n      imports: [AdaptAlertModule, AdaptCodeViewerModule, AdaptSidebarModule, AdaptTabsModule, CommonModule, RxBladeModule, RxDesignerCanvasModule, RxDesignerHeaderModule, RxDesignerPaletteModule, RxFormBuilderModule, RxInspectorModule, RxJsonViewerModule, RxProcessElementsModule, RxServerActionsModule, RxValidationIssuesModule, TranslateModule],\n      exports: [ProcessDesignerComponent]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass ProcessDesignerPageComponent {\n  constructor(activatedRoute, router, rxBundleCacheService, rxComponentCanDeactivateGuard, rxDefinitionNameService, rxPageTitleService, rxUtilityModalsService, translateService) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;\n    this.rxDefinitionNameService = rxDefinitionNameService;\n    this.rxPageTitleService = rxPageTitleService;\n    this.rxUtilityModalsService = rxUtilityModalsService;\n    this.translateService = translateService;\n    this.isInitialized = false;\n  }\n  ngOnInit() {\n    this.rxComponentCanDeactivateGuard.setPageComponent(this);\n    this.subscription = this.activatedRoute.params.subscribe(({\n      definitionName,\n      bundleId\n    }) => {\n      this.rxBundleCacheService.bundleId = bundleId || this.rxDefinitionNameService.getBundleId(definitionName);\n      this.isInitialized = true;\n      this.isNewProcess = !definitionName;\n      this.rxPageTitleService.set([this.rxDefinitionNameService.getDisplayName(definitionName), this.translateService.instant('com.bmc.arsys.rx.client.process-designer.title')]);\n      this.configuration = Object.assign(Object.assign({}, this.configuration), {\n        bundleId: this.rxBundleCacheService.bundleId,\n        definitionName\n      });\n    });\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.rxComponentCanDeactivateGuard.setPageComponent(null);\n  }\n  canDeactivate() {\n    var _a, _b;\n    return (_b = (_a = this.processDesignerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate()) !== null && _b !== void 0 ? _b : true;\n  }\n  confirmDeactivation() {\n    return this.rxUtilityModalsService.confirmUnsavedChanges();\n  }\n  onCloseDesigner() {\n    this.router.navigate([RX_APPLICATION.innovationStudioBundleId, this.rxBundleCacheService.bundleId, 'process-definitions']);\n  }\n  onDefinitionErrorLoading() {\n    this.router.navigate(['new2', this.rxBundleCacheService.bundleId], {\n      relativeTo: this.activatedRoute.parent\n    });\n  }\n  onDefinitionSaved(processDefinitionName) {\n    if (this.isNewProcess) {\n      this.router.navigate(['edit2', processDefinitionName], {\n        relativeTo: this.activatedRoute.parent\n      });\n    }\n  }\n}\nProcessDesignerPageComponent.ɵfac = function ProcessDesignerPageComponent_Factory(t) {\n  return new (t || ProcessDesignerPageComponent)(i0.ɵɵdirectiveInject(i1$1.ActivatedRoute), i0.ɵɵdirectiveInject(i1$1.Router), i0.ɵɵdirectiveInject(i1.RxBundleCacheService), i0.ɵɵdirectiveInject(i1.RxComponentCanDeactivateGuard), i0.ɵɵdirectiveInject(i1.RxDefinitionNameService), i0.ɵɵdirectiveInject(i1.RxPageTitleService), i0.ɵɵdirectiveInject(i9.RxUtilityModalsService), i0.ɵɵdirectiveInject(i6.TranslateService));\n};\nProcessDesignerPageComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ProcessDesignerPageComponent,\n  selectors: [[\"rx-process-designer-page\"]],\n  viewQuery: function ProcessDesignerPageComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ProcessDesignerComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.processDesignerComponent = _t.first);\n    }\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"configuration\", \"closeDesigner\", \"definitionErrorLoading\", \"definitionSaved\", 4, \"ngIf\"], [3, \"configuration\", \"closeDesigner\", \"definitionErrorLoading\", \"definitionSaved\"]],\n  template: function ProcessDesignerPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ProcessDesignerPageComponent_rx_process_designer_0_Template, 1, 1, \"rx-process-designer\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isInitialized);\n    }\n  },\n  directives: [i10.NgIf, ProcessDesignerComponent],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerPageComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-process-designer-page',\n      templateUrl: './process-designer-page.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.ActivatedRoute\n    }, {\n      type: i1$1.Router\n    }, {\n      type: i1.RxBundleCacheService\n    }, {\n      type: i1.RxComponentCanDeactivateGuard\n    }, {\n      type: i1.RxDefinitionNameService\n    }, {\n      type: i1.RxPageTitleService\n    }, {\n      type: i9.RxUtilityModalsService\n    }, {\n      type: i6.TranslateService\n    }];\n  }, {\n    processDesignerComponent: [{\n      type: ViewChild,\n      args: [ProcessDesignerComponent]\n    }]\n  });\n})();\nclass ProcessDesignerPageModule {}\nProcessDesignerPageModule.ɵfac = function ProcessDesignerPageModule_Factory(t) {\n  return new (t || ProcessDesignerPageModule)();\n};\nProcessDesignerPageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ProcessDesignerPageModule,\n  declarations: [ProcessDesignerPageComponent],\n  imports: [CommonModule, ProcessDesignerModule],\n  exports: [ProcessDesignerPageComponent]\n});\nProcessDesignerPageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, ProcessDesignerModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerPageModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ProcessDesignerPageComponent],\n      imports: [CommonModule, ProcessDesignerModule],\n      exports: [ProcessDesignerPageComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ProcessDesignerComponent, ProcessDesignerModule, ProcessDesignerPageComponent, ProcessDesignerPageModule, RxProcessDesignerService };\n//# sourceMappingURL=helix-platform-process-designer.js.map","map":{"version":3,"names":["i0","Injectable","EventEmitter","Component","Input","Output","ViewChild","NgModule","i10","CommonModule","i6","TranslateModule","reduce","some","chain","find","isFunction","has","clone","pick","isEqual","isEmpty","reject","forEach","assign","i8","AdaptAlertModule","AdaptCodeViewerModule","AdaptSidebarModule","AdaptTabsModule","i9","ValidationIssueType","RxBladeModule","RxJsonViewerModule","RxValidationIssuesModule","i1","RX_DESIGNER","RX_DESIGNER_ELEMENT_SHAPE","RX_APPLICATION","i7","RX_DESIGNER_CANVAS","RxDesignerCanvasModule","RxDesignerHeaderModule","RxDesignerPaletteModule","RxFormBuilderModule","RxInspectorModule","i5","RxEndEventService","RxProcessService","RxStartEventService","RxProcessElementsModule","RxServerActionsModule","BehaviorSubject","Subject","ReplaySubject","forkJoin","combineLatest","merge","of","shareReplay","distinctUntilChanged","tap","map","switchMap","take","startWith","debounceTime","withLatestFrom","takeUntil","i2","RxIdService","RxJsonParserService","i3","RX_PROCESS_DEFINITION","RxProcessElementRegistryService","RxProcessElementSearchService","i1$1","_c0","ProcessDesignerComponent_ng_container_0_rx_form_builder_12_Template","rf","ctx","_r8","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","ProcessDesignerComponent_ng_container_0_rx_form_builder_12_Template_rx_form_builder_modelChange_0_listener","$event","ɵɵrestoreView","ctx_r7","ɵɵnextContext","onSelectedElementModelChange","ɵɵelementEnd","vm_r1","ngIf","ctx_r3","ɵɵproperty","selectedElementInspectorConfig","selectedElementModel","selectedElementInspectorDesignerItemModel$","focusSelectedElementInspector$","isReadOnly","_c1","a0","content","variant","type","ProcessDesignerComponent_ng_container_0_ng_template_13_Template","ɵɵelement","ɵɵpipe","ɵɵpureFunction1","ɵɵpipeBind1","ProcessDesignerComponent_ng_container_0_adapt_code_viewer_24_Template","definitionForCodeViewer","ProcessDesignerComponent_ng_container_0_Template","_r12","ɵɵelementContainerStart","ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_breadcrumbSelected_1_listener","ctx_r11","onBreadcrumbSelected","data","guid","ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_toggleDesignMode_1_listener","ctx_r13","toggleDesignMode","ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_closeDesigner_1_listener","ctx_r14","closeDesigner","emit","ProcessDesignerComponent_ng_container_0_Template_rx_designer_header_save_1_listener","ctx_r15","saveDefinition","ProcessDesignerComponent_ng_container_0_Template_rx_form_builder_formInitialized_8_listener","ctx_r16","onDefinitionInspectorInitialized","ProcessDesignerComponent_ng_container_0_Template_rx_form_builder_modelChange_8_listener","ctx_r17","onDefinitionModelChange","ɵɵtemplate","ɵɵtemplateRefExtractor","ProcessDesignerComponent_ng_container_0_Template_rx_validation_issues_correctIssue_18_listener","ctx_r18","onCorrectIssue","ProcessDesignerComponent_ng_container_0_Template_rx_designer_palette_elementDropped_22_listener","ctx_r19","onPaletteElementDropped","ProcessDesignerComponent_ng_container_0_Template_rx_designer_canvas_elementSelected_23_listener","ctx_r20","onCanvasElementSelected","ɵɵelementContainerEnd","_r4","ɵɵreference","ctx_r0","ɵɵadvance","bundleFriendlyName","breadcrumbItems","isSaveButtonDisabled","ɵɵpropertyInterpolate","definitionInspectorConfig","definitionModel","focusDefinitionInspector$","hasValidationErrors","validationIssueSections","paletteElementsTree","canvasConfiguration","graph","droppedElement","ProcessDesignerPageComponent_rx_process_designer_0_Template","_r2","ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_closeDesigner_0_listener","ctx_r1","onCloseDesigner","ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_definitionErrorLoading_0_listener","onDefinitionErrorLoading","ProcessDesignerPageComponent_rx_process_designer_0_Template_rx_process_designer_definitionSaved_0_listener","ctx_r4","onDefinitionSaved","configuration","RxProcessDesignerService","constructor","rxActionTypeUtilsService","rxBundleCacheService","rxDesignerCacheService","rxGlobalCacheService","rxProcessDefinitionService","rxProcessElementRegistryService","buildPalette","actionTypes","bundleDescriptors","registeredElementNodes","getAll","nodes","registeredElement","displayName","push","group","label","paletteItem","value","actionTypeName","getServerActionTypeName","resourceType","serverActionNodes","actionType","isActionRegistered","registeredElementNode","getActionTypeBundleFriendlyName","standardProcessElementGroups","platformActions","name","prettifyActionTypeName","border","paletteItemBorder","solid","icon","path","isDeprecated","bpmnIcons","info","gear","position","paletteIconPosition","top","paletteItemLabel","inner","shape","paletteItemShape","rectangle","processElementResourceTypes","processAction","getServerActionModelType","sortBy","tree","element","children","node","_a","processElementGroups","priority","default","ɵfac","RxProcessDesignerService_Factory","t","ɵɵinject","RxActionTypeUtilsService","RxBundleCacheService","RxDesignerCacheService","RxGlobalCacheService","RxProcessDefinitionService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","args","RxProcessDesignerGraph","joint","dia","Graph","config","options","rxEndEventService","injector","get","rxIdService","rxJsonParserService","rxProcessElementSearchService","rxProcessService","rxStartEventService","reset","off","clear","addDefaultElements","addCell","getShape","id","isGraphEmpty","getCells","elementSize","addCells","x","y","paperOptions","height","width","getDefinitionFromGraph","Object","getDefinitionBase","getCell","flowElements","getFlowElements","layout","getLayout","models","loadGraphFromDefinition","definition","fromJSON","getJsonObject","processCell","getDefinitionFromModel","prop","cells","cell","elementModel","elementService","jsonObject","tryParseJson","embeddedElementIds","filter","parent","length","embeds","ownerProcessDefinitionName","lastUpdateTime","flowElement","findByGuid","getModelFromDefinition","adaptCell","JSON","stringify","removeRedundantProperties","attrs","adaptedCell","ProcessDesignerComponent","rxCommandManagerService","rxGuidService","rxOverlayService","rxProcessDataDictionaryService","rxProcessDesignerService","translateService","definitionErrorLoading","definitionSaved","bundleIdSubject","definitionModelChangeSubject","selectedElementModelChangeSubject","definitionNameSubject","destroyed$","focusDefinitionInspectorSubject","focusSelectedElementInspectorSubject","processId","generate","graphChangeSubject","graphChange$","pipe","isDesignModeSubject","selectedElementGuidSubject","selectedElementGuid$","paletteElementsTree$","getActionTypes","getBundleDescriptors","getFunctionDescriptors","functionDescriptors","setActionTypes","setFunctionDescriptors","definition$","definitionName","getNew","isReadOnly$","bundleId","areNewDefinitionsAllowed","isCustomizationEnabled","definitionModelFromDefinition$","graph$","definitionModelFromDefinition","on","elements","next","changedProperty","changed","definitionModelFromGraph$","definitionModel$","definitionInspectorConfig$","getInspectorConfig","selectedElementModelFromDefinition$","selectedElementGuid","selectedElement","parse","getBase","selectedElementModelFromGraph$","selectedElementCell","selectedElementModel$","inspectorSidebar","isPanelOpened","openInspectorSidebarPanel","selectedElementInspectorConfig$","processDefinitionModel","definitionForCodeViewer$","isDesignMode","bundleFriendlyName$","getBundleFriendlyName","canvasConfiguration$","elementRegistry","enableMultiSelection","interactive","showToolbar","breadcrumbItems$","instant","elementValidationIssueSections$","cellType","validate","elementValidationIssues","title","issues","processValidationIssueSection$","processValidationIssues","validationIssueSections$","processValidationIssueSection","elementValidationIssueSections","elementValidationIssueSection","hasValidationErrors$","sections","section","Error","isSaveButtonDisabled$","asObservable","vm$","ngOnInit","subscribe","commandManager","initBatchCommand","propertyValue","propertyName","storeBatchCommand","ngOnChanges","changes","currentValue","ngOnDestroy","complete","canDeactivate","validationIssue","inspectorTabIndex","setTimeout","editorName","dropData","openPanel","ProcessDesignerComponent_Factory","ɵɵdirectiveInject","Injector","RxCommandManagerService","RxGuidService","RxOverlayService","RxProcessDataDictionaryService","TranslateService","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","ProcessDesignerComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","ProcessDesignerComponent_Template","directives","NgIf","RxDesignerHeaderComponent","AdaptSidebarComponent","AdaptSidebarItemComponent","FormBuilderComponent","RxValidationIssuesComponent","RxBladeComponent","RxDesignerPaletteComponent","RxDesignerCanvasComponent","InspectorDirective","AdaptAlertComponent","AdaptCodeViewerComponent","pipes","AsyncPipe","TranslatePipe","JsonPipe","styles","selector","templateUrl","styleUrls","static","shapes","rx","ProcessDesignerModule","bpmn","icons","ProcessDesignerModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","imports","exports","ɵinj","ɵɵdefineInjector","ProcessDesignerPageComponent","activatedRoute","router","rxComponentCanDeactivateGuard","rxDefinitionNameService","rxPageTitleService","rxUtilityModalsService","isInitialized","setPageComponent","subscription","params","getBundleId","isNewProcess","set","getDisplayName","unsubscribe","_b","processDesignerComponent","confirmDeactivation","confirmUnsavedChanges","navigate","innovationStudioBundleId","relativeTo","processDefinitionName","ProcessDesignerPageComponent_Factory","ActivatedRoute","Router","RxComponentCanDeactivateGuard","RxDefinitionNameService","RxPageTitleService","RxUtilityModalsService","ProcessDesignerPageComponent_Query","ProcessDesignerPageComponent_Template","encapsulation","ProcessDesignerPageModule","ProcessDesignerPageModule_Factory"],"sources":["C:/projects/BMC-Helix-Angular-prod/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-process-designer.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i10 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i6 from '@ngx-translate/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { reduce, some, chain, find, isFunction, has, clone, pick, isEqual, isEmpty, reject, forEach, assign } from 'lodash';\nimport * as i8 from '@bmc-ux/adapt-angular';\nimport { AdaptAlertModule, AdaptCodeViewerModule, AdaptSidebarModule, AdaptTabsModule } from '@bmc-ux/adapt-angular';\nimport * as i9 from '@helix/platform/ui-kit';\nimport { ValidationIssueType, RxBladeModule, RxJsonViewerModule, RxValidationIssuesModule } from '@helix/platform/ui-kit';\nimport * as i1 from '@helix/platform/shared/api';\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE, RX_APPLICATION } from '@helix/platform/shared/api';\nimport * as i7 from '@helix/platform/shared/components';\nimport { RX_DESIGNER_CANVAS, RxDesignerCanvasModule, RxDesignerHeaderModule, RxDesignerPaletteModule, RxFormBuilderModule, RxInspectorModule } from '@helix/platform/shared/components';\nimport * as i5 from '@helix/platform/process/elements';\nimport { RxEndEventService, RxProcessService, RxStartEventService, RxProcessElementsModule } from '@helix/platform/process/elements';\nimport { RxServerActionsModule } from '@helix/platform/process/server-actions';\nimport { BehaviorSubject, Subject, ReplaySubject, forkJoin, combineLatest, merge, of } from 'rxjs';\nimport { shareReplay, distinctUntilChanged, tap, map, switchMap, take, startWith, debounceTime, withLatestFrom, takeUntil } from 'rxjs/operators';\nimport * as i2 from '@helix/platform/utils';\nimport { RxIdService, RxJsonParserService } from '@helix/platform/utils';\nimport * as i3 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION, RxProcessElementRegistryService, RxProcessElementSearchService } from '@helix/platform/process/api';\nimport * as i1$1 from '@angular/router';\n\nclass RxProcessDesignerService {\n    constructor(rxActionTypeUtilsService, rxBundleCacheService, rxDesignerCacheService, rxGlobalCacheService, rxProcessDefinitionService, rxProcessElementRegistryService) {\n        this.rxActionTypeUtilsService = rxActionTypeUtilsService;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxDesignerCacheService = rxDesignerCacheService;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.rxProcessElementRegistryService = rxProcessElementRegistryService;\n    }\n    buildPalette(actionTypes, bundleDescriptors) {\n        const registeredElementNodes = reduce(this.rxProcessElementRegistryService.getAll(), (nodes, registeredElement) => {\n            if (registeredElement.displayName) {\n                nodes.push({\n                    group: registeredElement.group,\n                    label: registeredElement.displayName,\n                    paletteItem: registeredElement.paletteItem,\n                    value: {\n                        actionTypeName: this.rxProcessDefinitionService.getServerActionTypeName(registeredElement.type),\n                        resourceType: registeredElement.resourceType,\n                        type: registeredElement.type\n                    }\n                });\n            }\n            return nodes;\n        }, []);\n        const serverActionNodes = reduce(actionTypes, (nodes, actionType) => {\n            const isActionRegistered = some(registeredElementNodes, (registeredElementNode) => registeredElementNode.value.actionTypeName === actionType.actionTypeName);\n            if (!isActionRegistered) {\n                nodes.push({\n                    group: this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) ||\n                        RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n                    label: actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n                    paletteItem: {\n                        border: RX_DESIGNER.paletteItemBorder.solid,\n                        icon: {\n                            path: actionType.isDeprecated\n                                ? RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.info\n                                : RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n                            position: RX_DESIGNER.paletteIconPosition.top\n                        },\n                        label: RX_DESIGNER.paletteItemLabel.inner,\n                        shape: RX_DESIGNER.paletteItemShape.rectangle\n                    },\n                    value: {\n                        actionTypeName: actionType.actionTypeName,\n                        resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n                        type: this.rxProcessDefinitionService.getServerActionModelType(actionType.actionTypeName)\n                    }\n                });\n            }\n            return nodes;\n        }, []);\n        return chain([...registeredElementNodes, ...serverActionNodes])\n            .sortBy('label')\n            .reduce((tree, element) => {\n            const group = find(tree, { label: element.group });\n            if (group) {\n                group.children.push(element);\n            }\n            else {\n                tree.push({\n                    label: element.group,\n                    children: [element]\n                });\n            }\n            return tree;\n        }, [])\n            .sortBy('label')\n            .sortBy((node) => {\n            var _a;\n            const group = find(RX_PROCESS_DEFINITION.processElementGroups, { name: node.label });\n            return (_a = group === null || group === void 0 ? void 0 : group.priority) !== null && _a !== void 0 ? _a : RX_PROCESS_DEFINITION.standardProcessElementGroups.default.priority;\n        })\n            .value();\n    }\n}\nRxProcessDesignerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDesignerService, deps: [{ token: i1.RxActionTypeUtilsService }, { token: i1.RxBundleCacheService }, { token: i1.RxDesignerCacheService }, { token: i1.RxGlobalCacheService }, { token: i3.RxProcessDefinitionService }, { token: i3.RxProcessElementRegistryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessDesignerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDesignerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDesignerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxActionTypeUtilsService }, { type: i1.RxBundleCacheService }, { type: i1.RxDesignerCacheService }, { type: i1.RxGlobalCacheService }, { type: i3.RxProcessDefinitionService }, { type: i3.RxProcessElementRegistryService }]; } });\n\nclass RxProcessDesignerGraph extends joint.dia.Graph {\n    constructor(config) {\n        super(config.options);\n        this.rxEndEventService = config.injector.get(RxEndEventService);\n        this.rxIdService = config.injector.get(RxIdService);\n        this.rxJsonParserService = config.injector.get(RxJsonParserService);\n        this.rxProcessElementRegistryService = config.injector.get(RxProcessElementRegistryService);\n        this.rxProcessElementSearchService = config.injector.get(RxProcessElementSearchService);\n        this.rxProcessService = config.injector.get(RxProcessService);\n        this.rxStartEventService = config.injector.get(RxStartEventService);\n    }\n    // joint.dia.Graph methods\n    reset() {\n        this.off('add');\n        this.off('change');\n        this.clear();\n    }\n    // Custom methods\n    addDefaultElements(definitionModel) {\n        this.addCell(this.rxProcessService.getShape({\n            definitionModel,\n            id: this.get('processId')\n        }));\n        const isGraphEmpty = chain(this.getCells())\n            .reject({ id: this.get('processId') })\n            .isEmpty()\n            .value();\n        if (isGraphEmpty) {\n            const elementSize = 30;\n            this.addCells([\n                this.rxStartEventService.getShape({\n                    position: {\n                        x: elementSize,\n                        y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n                    }\n                }),\n                this.rxEndEventService.getShape({\n                    position: {\n                        x: RX_DESIGNER_CANVAS.paperOptions.width - 2 * elementSize,\n                        y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n                    }\n                })\n            ]);\n        }\n    }\n    // TODO-VS: update when element shapes logic is implemented\n    getDefinitionFromGraph() {\n        return Object.assign(Object.assign({}, this.getDefinitionBase(this.getCell(this.get('processId')))), { flowElements: this.getFlowElements(this.getCells()), layout: this.getLayout(this.get('cells').models) });\n    }\n    // TODO-VS: update types\n    loadGraphFromDefinition(definition) {\n        return this.fromJSON(this.getJsonObject(definition));\n    }\n    // TODO-VS: update types\n    getDefinitionBase(processCell) {\n        return this.rxProcessService.getDefinitionFromModel(processCell.prop('definitionModel'));\n    }\n    // TODO-VS: update types\n    getFlowElements(cells) {\n        return chain(cells)\n            .reject({ id: this.get('processId') })\n            .map((cell) => {\n            const elementModel = cell.prop('elementModel');\n            const elementService = this.rxProcessElementRegistryService.get(elementModel.type).elementService;\n            return elementService.getDefinitionFromModel(elementModel);\n        })\n            .value();\n    }\n    // TODO-VS: update types\n    getJsonObject(definition) {\n        const jsonObject = this.rxJsonParserService.tryParseJson(definition.layout, { cells: [] });\n        jsonObject.cells.forEach((cell) => {\n            const embeddedElementIds = chain(jsonObject.cells).filter({ parent: cell.id }).map('id').value();\n            if (embeddedElementIds.length) {\n                cell.embeds = embeddedElementIds;\n            }\n            cell.ownerProcessDefinitionName = definition.lastUpdateTime ? definition.name : definition.guid;\n            const flowElement = this.rxProcessElementSearchService.findByGuid(definition, this.rxIdService.get(cell.id));\n            const elementService = this.rxProcessElementRegistryService.get(cell.type).elementService;\n            cell.elementModel = elementService.getModelFromDefinition(flowElement);\n        });\n        return jsonObject;\n    }\n    // TODO-VS: update types\n    getLayout(models) {\n        const cells = chain(models)\n            .reject({ id: this.get('processId') })\n            .map((cell) => {\n            if (isFunction(cell.getLayout)) {\n                return this.adaptCell(cell.getLayout());\n            }\n        })\n            .value();\n        return cells.length ? JSON.stringify({ cells: cells }) : null;\n    }\n    // TODO-VS: update types\n    adaptCell(cell) {\n        return this.removeRedundantProperties(cell);\n    }\n    // remove properties from the process and sub-process layouts\n    // that are set programmatically and don't have to be persisted\n    // TODO-VS: update types\n    removeRedundantProperties(cell) {\n        let attrs;\n        if (has(cell, 'attrs[\".label\"]')) {\n            attrs = {\n                '.label': clone(cell.attrs['.label'])\n            };\n        }\n        // list of properties that must be kept in the layout, all others will be set programmatically\n        let adaptedCell = pick(cell, [\n            'collapsedSize',\n            'content',\n            'expanded',\n            'flowType',\n            'id',\n            'labels',\n            'parent',\n            'position',\n            'size',\n            'source',\n            'target',\n            'type',\n            'vertices',\n            'z'\n        ]);\n        if (attrs) {\n            adaptedCell.attrs = attrs;\n        }\n        return adaptedCell;\n    }\n}\n\nclass ProcessDesignerComponent {\n    constructor(injector, rxBundleCacheService, rxCommandManagerService, rxDesignerCacheService, rxGlobalCacheService, rxGuidService, rxIdService, rxOverlayService, rxProcessDataDictionaryService, rxProcessDefinitionService, rxProcessDesignerService, rxProcessElementRegistryService, rxProcessElementSearchService, rxProcessService, translateService) {\n        this.injector = injector;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxCommandManagerService = rxCommandManagerService;\n        this.rxDesignerCacheService = rxDesignerCacheService;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxGuidService = rxGuidService;\n        this.rxIdService = rxIdService;\n        this.rxOverlayService = rxOverlayService;\n        this.rxProcessDataDictionaryService = rxProcessDataDictionaryService;\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.rxProcessDesignerService = rxProcessDesignerService;\n        this.rxProcessElementRegistryService = rxProcessElementRegistryService;\n        this.rxProcessElementSearchService = rxProcessElementSearchService;\n        this.rxProcessService = rxProcessService;\n        this.translateService = translateService;\n        this.closeDesigner = new EventEmitter();\n        this.definitionErrorLoading = new EventEmitter();\n        this.definitionSaved = new EventEmitter();\n        this.bundleIdSubject = new BehaviorSubject(null);\n        this.definitionModelChangeSubject = new Subject();\n        this.selectedElementModelChangeSubject = new Subject();\n        this.definitionNameSubject = new BehaviorSubject(null);\n        this.destroyed$ = new ReplaySubject(1);\n        this.focusDefinitionInspectorSubject = new BehaviorSubject(null);\n        this.focusSelectedElementInspectorSubject = new BehaviorSubject(null);\n        this.graph = new RxProcessDesignerGraph({\n            injector: this.injector,\n            options: {\n                processId: this.rxGuidService.generate()\n            }\n        });\n        this.graphChangeSubject = new Subject();\n        this.graphChange$ = this.graphChangeSubject.pipe(shareReplay(1));\n        this.isDesignModeSubject = new BehaviorSubject(true);\n        this.selectedElementGuidSubject = new BehaviorSubject(null);\n        this.selectedElementGuid$ = this.selectedElementGuidSubject.pipe(distinctUntilChanged(isEqual), shareReplay(1));\n        this.paletteElementsTree$ = forkJoin([\n            this.rxBundleCacheService.getActionTypes(),\n            this.rxGlobalCacheService.getBundleDescriptors(),\n            this.rxGlobalCacheService.getFunctionDescriptors()\n        ]).pipe(tap(([actionTypes, bundleDescriptors, functionDescriptors]) => {\n            this.rxDesignerCacheService.setActionTypes(actionTypes);\n            this.rxDesignerCacheService.setFunctionDescriptors(functionDescriptors);\n        }), map(([actionTypes, bundleDescriptors]) => this.rxProcessDesignerService.buildPalette(actionTypes, bundleDescriptors)), shareReplay(1));\n        this.definition$ = combineLatest([this.definitionNameSubject, this.paletteElementsTree$]).pipe(switchMap(([definitionName]) => definitionName ? this.rxProcessDefinitionService.get(definitionName) : this.rxProcessDefinitionService.getNew()), shareReplay(1));\n        this.isReadOnly$ = combineLatest([\n            this.definition$,\n            this.bundleIdSubject.pipe(switchMap((bundleId) => this.rxOverlayService.areNewDefinitionsAllowed(bundleId)))\n        ]).pipe(map(([definition, areNewDefinitionsAllowed]) => !areNewDefinitionsAllowed || !this.rxOverlayService.isCustomizationEnabled('allowOverlay', definition)), distinctUntilChanged(), shareReplay(1));\n        this.definitionModelFromDefinition$ = this.definition$.pipe(map((definition) => this.rxProcessService.getModelFromDefinition(definition, this.configuration.bundleId)));\n        this.graph$ = combineLatest([this.definition$, this.definitionModelFromDefinition$, this.isReadOnly$]).pipe(tap(([definition, definitionModelFromDefinition, isReadOnly]) => {\n            if (!isReadOnly) {\n                this.graph.on('add', (element, elements, options) => {\n                    this.graphChangeSubject.next(this.graph);\n                });\n                this.graph.on('change', (element, elementModel, changedProperty) => {\n                    if (!element.changed.position) {\n                        this.graphChangeSubject.next(this.graph);\n                    }\n                });\n            }\n            this.graph.loadGraphFromDefinition(definition);\n            this.graph.addDefaultElements(definitionModelFromDefinition);\n        }), map(() => this.graph), shareReplay(1));\n        this.definitionModelFromGraph$ = this.graphChange$.pipe(map((graph) => graph.getCell(graph.get('processId')).prop('definitionModel')), distinctUntilChanged(isEqual));\n        this.definitionModel$ = merge(this.definitionModelFromDefinition$, this.definitionModelFromGraph$).pipe(shareReplay(1));\n        this.definitionInspectorConfig$ = this.definitionModel$.pipe(map((definitionModel) => this.rxProcessService.getInspectorConfig(definitionModel)));\n        this.selectedElementModelFromDefinition$ = combineLatest([this.definition$, this.selectedElementGuid$]).pipe(map(([definition, selectedElementGuid]) => {\n            let selectedElementModel = null;\n            if (selectedElementGuid) {\n                const flowElement = this.rxProcessElementSearchService.find(definition, {\n                    guid: selectedElementGuid\n                });\n                if (flowElement) {\n                    const selectedElement = find(JSON.parse(definition.layout).cells, {\n                        id: this.rxIdService.getBase(selectedElementGuid)\n                    });\n                    const elementService = this.rxProcessElementRegistryService.get(selectedElement.type).elementService;\n                    selectedElementModel = elementService.getModelFromDefinition(flowElement);\n                }\n            }\n            return selectedElementModel;\n        }));\n        this.selectedElementModelFromGraph$ = combineLatest([this.graphChange$, this.selectedElementGuid$]).pipe(map(([graph, selectedElementGuid]) => {\n            let selectedElementModel = null;\n            if (selectedElementGuid) {\n                const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementGuid));\n                selectedElementModel = selectedElementCell.prop('elementModel');\n            }\n            return selectedElementModel;\n        }));\n        this.selectedElementModel$ = merge(this.selectedElementModelFromDefinition$, this.selectedElementModelFromGraph$).pipe(tap((selectedElementModel) => {\n            var _a;\n            if ((_a = this.inspectorSidebar) === null || _a === void 0 ? void 0 : _a.isPanelOpened) {\n                if (isEmpty(selectedElementModel)) {\n                    this.openInspectorSidebarPanel(0);\n                }\n                else {\n                    this.openInspectorSidebarPanel(1);\n                }\n            }\n        }), shareReplay(1));\n        this.selectedElementInspectorConfig$ = combineLatest([this.selectedElementModel$, this.definitionModel$]).pipe(map(([selectedElementModel, definitionModel]) => {\n            let selectedElementInspectorConfig = null;\n            if (selectedElementModel) {\n                const elementService = this.rxProcessElementRegistryService.get(selectedElementModel.type).elementService;\n                selectedElementInspectorConfig = elementService.getInspectorConfig(selectedElementModel, {\n                    processDefinitionModel: definitionModel\n                });\n            }\n            return selectedElementInspectorConfig;\n        }));\n        this.definitionForCodeViewer$ = this.isDesignModeSubject.pipe(switchMap((isDesignMode) => {\n            return isDesignMode\n                ? of(null)\n                : this.graph$.pipe(take(1), map((graph) => graph.getDefinitionFromGraph()));\n        }));\n        this.bundleFriendlyName$ = this.bundleIdSubject.pipe(switchMap((bundleId) => this.rxGlobalCacheService.getBundleFriendlyName(bundleId)));\n        // TODO-VS: update canvas configuration (interactive property)\n        this.canvasConfiguration$ = this.isReadOnly$.pipe(map((isReadOnly) => {\n            return {\n                elementRegistry: this.rxProcessElementRegistryService,\n                enableMultiSelection: true,\n                interactive: !isReadOnly,\n                isReadOnly,\n                showToolbar: true\n            };\n        }));\n        this.breadcrumbItems$ = combineLatest([this.definitionModel$, this.selectedElementModel$]).pipe(map(([definitionModel, selectedElementModel]) => {\n            const breadcrumbItems = [\n                {\n                    label: definitionModel.name ||\n                        `<${this.translateService.instant('com.bmc.arsys.rx.client.process-designer.new-process.label')}>`,\n                    data: {}\n                }\n            ];\n            if (selectedElementModel) {\n                breadcrumbItems.push({\n                    label: selectedElementModel.label,\n                    data: {}\n                });\n            }\n            return breadcrumbItems;\n        }));\n        this.elementValidationIssueSections$ = this.graphChange$.pipe(switchMap((graph) => {\n            const cells = reject(graph.getCells(), { id: graph.get('processId') });\n            return forkJoin(cells.map((cell) => {\n                const elementModel = cell.prop('elementModel');\n                const cellType = cell.prop('type');\n                const elementRegistry = this.rxProcessElementRegistryService.get(cellType);\n                return elementRegistry.elementService.validate(elementModel, reject(cells, { id: elementModel.id })).pipe(map((elementValidationIssues) => ({\n                    title: cell.prop('elementModel').label || this.translateService.instant(elementRegistry.displayName),\n                    issues: elementValidationIssues\n                })));\n            }));\n        }));\n        this.processValidationIssueSection$ = this.graphChange$.pipe(switchMap((graph) => {\n            const processCell = graph.getCell(graph.get('processId'));\n            return this.rxProcessService.validate(processCell.prop('definitionModel'), reject(graph.getCells(), { id: processCell.id }));\n        }), map((processValidationIssues) => ({\n            title: this.translateService.instant('com.bmc.arsys.rx.client.process-definition.label'),\n            issues: processValidationIssues\n        })));\n        this.validationIssueSections$ = combineLatest([\n            this.processValidationIssueSection$,\n            this.elementValidationIssueSections$\n        ]).pipe(map(([processValidationIssueSection, elementValidationIssueSections]) => {\n            const validationIssueSections = [];\n            if (!isEmpty(processValidationIssueSection.issues)) {\n                validationIssueSections.push(processValidationIssueSection);\n            }\n            elementValidationIssueSections.forEach((elementValidationIssueSection) => {\n                if (!isEmpty(elementValidationIssueSection.issues)) {\n                    validationIssueSections.push(elementValidationIssueSection);\n                }\n            });\n            return validationIssueSections;\n        }), shareReplay(1));\n        this.hasValidationErrors$ = this.validationIssueSections$.pipe(map((sections) => some(sections, (section) => find(section.issues, { type: ValidationIssueType.Error }))), distinctUntilChanged(), shareReplay(1));\n        // TODO-VS: update the logic to rely on command manager\n        this.isSaveButtonDisabled$ = combineLatest([this.hasValidationErrors$, this.isReadOnly$]).pipe(map(([hasValidationErrors, isReadOnly]) => hasValidationErrors || isReadOnly), startWith(true));\n        this.selectedElementInspectorDesignerItemModel$ = combineLatest([this.selectedElementModel$, this.graph$]).pipe(map(([selectedElementModel, graph]) => ({\n            elementModel: selectedElementModel,\n            graph\n        })));\n        this.focusDefinitionInspector$ = this.focusDefinitionInspectorSubject.asObservable();\n        this.focusSelectedElementInspector$ = this.focusSelectedElementInspectorSubject.asObservable();\n        this.vm$ = combineLatest([\n            this.breadcrumbItems$,\n            this.bundleFriendlyName$,\n            this.canvasConfiguration$,\n            this.definitionForCodeViewer$,\n            this.definitionInspectorConfig$,\n            this.definitionModel$,\n            this.graph$,\n            this.hasValidationErrors$,\n            this.isReadOnly$,\n            this.isSaveButtonDisabled$,\n            this.paletteElementsTree$,\n            this.selectedElementInspectorConfig$,\n            this.selectedElementModel$,\n            this.validationIssueSections$\n        ]).pipe(map(([breadcrumbItems, bundleFriendlyName, canvasConfiguration, definitionForCodeViewer, definitionInspectorConfig, definitionModel, graph, hasValidationErrors, isReadOnly, isSaveButtonDisabled, paletteElementsTree, selectedElementInspectorConfig, selectedElementModel, validationIssueSections]) => ({\n            breadcrumbItems,\n            bundleFriendlyName,\n            canvasConfiguration,\n            definitionForCodeViewer,\n            definitionInspectorConfig,\n            definitionModel,\n            graph,\n            hasValidationErrors,\n            isReadOnly,\n            isSaveButtonDisabled,\n            paletteElementsTree,\n            selectedElementInspectorConfig,\n            selectedElementModel,\n            validationIssueSections\n        })));\n    }\n    ngOnInit() {\n        // TODO-VS: update logic not to debounce model change here\n        this.definitionModelChangeSubject\n            .pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$))\n            .subscribe(([definitionModel, graph]) => {\n            const processCell = graph.getCell(graph.get('processId'));\n            const commandManager = this.rxCommandManagerService.get();\n            commandManager.initBatchCommand();\n            forEach(definitionModel, (propertyValue, propertyName) => {\n                processCell.prop(`definitionModel/${propertyName}`, propertyValue);\n            });\n            commandManager.storeBatchCommand();\n        });\n        // TODO-VS: update logic not to debounce model change here\n        this.selectedElementModelChangeSubject\n            .pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$))\n            .subscribe(([selectedElementModel, graph]) => {\n            const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementModel.guid));\n            const commandManager = this.rxCommandManagerService.get();\n            commandManager.initBatchCommand();\n            forEach(selectedElementModel, (propertyValue, propertyName) => {\n                selectedElementCell.prop(`elementModel/${propertyName}`, propertyValue);\n            });\n            commandManager.storeBatchCommand();\n        });\n    }\n    ngOnChanges(changes) {\n        if (changes.configuration.currentValue.definitionName) {\n            this.graph.reset();\n            this.rxProcessDataDictionaryService.clear();\n            this.isDesignModeSubject.next(true);\n            this.definitionNameSubject.next(changes.configuration.currentValue.definitionName);\n        }\n        if (changes.configuration.currentValue.bundleId) {\n            this.bundleIdSubject.next(changes.configuration.currentValue.bundleId);\n        }\n    }\n    ngOnDestroy() {\n        this.rxProcessDataDictionaryService.clear();\n        this.bundleIdSubject.complete();\n        this.definitionModelChangeSubject.complete();\n        this.definitionNameSubject.complete();\n        this.focusDefinitionInspectorSubject.complete();\n        this.focusSelectedElementInspectorSubject.complete();\n        this.graphChangeSubject.complete();\n        this.isDesignModeSubject.complete();\n        this.selectedElementGuidSubject.complete();\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n    canDeactivate() {\n        return true;\n    }\n    onBreadcrumbSelected(guid) {\n        if (guid) {\n            this.openInspectorSidebarPanel(1);\n        }\n        else {\n            this.openInspectorSidebarPanel(0);\n        }\n    }\n    onCanvasElementSelected(guid) {\n        if (!guid) {\n            this.openInspectorSidebarPanel(0);\n        }\n        this.selectedElementGuidSubject.next(guid);\n    }\n    onCorrectIssue(validationIssue) {\n        this.openInspectorSidebarPanel(validationIssue.data.inspectorTabIndex);\n        if (validationIssue.data.inspectorTabIndex === 0) {\n            setTimeout(() => this.focusDefinitionInspectorSubject.next({\n                editorName: validationIssue.data.propertyName,\n                data: validationIssue.data\n            }), 10);\n        }\n        else if (validationIssue.data.inspectorTabIndex === 1) {\n            this.selectedElementGuidSubject.next(validationIssue.data.guid);\n            setTimeout(() => this.focusSelectedElementInspectorSubject.next({\n                editorName: validationIssue.data.propertyName,\n                data: validationIssue.data\n            }), 10);\n        }\n    }\n    onDefinitionInspectorInitialized() {\n        this.focusDefinitionInspectorSubject.next({\n            editorName: 'name',\n            data: {}\n        });\n    }\n    onDefinitionModelChange(definitionModel) {\n        this.definitionModelChangeSubject.next(definitionModel);\n    }\n    // TODO-VS: update types\n    onPaletteElementDropped(dropData) {\n        this.droppedElement = dropData;\n    }\n    onSelectedElementModelChange(selectedElementModel) {\n        this.selectedElementModelChangeSubject.next(selectedElementModel);\n    }\n    saveDefinition() {\n        this.graph$\n            .pipe(take(1), map((graph) => graph.getDefinitionFromGraph()))\n            .subscribe();\n    }\n    toggleDesignMode() {\n        this.isDesignModeSubject.next(!this.isDesignModeSubject.value);\n    }\n    openInspectorSidebarPanel(id) {\n        this.inspectorSidebar.openPanel(id);\n    }\n}\nProcessDesignerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerComponent, deps: [{ token: i0.Injector }, { token: i1.RxBundleCacheService }, { token: i1.RxCommandManagerService }, { token: i1.RxDesignerCacheService }, { token: i1.RxGlobalCacheService }, { token: i2.RxGuidService }, { token: i2.RxIdService }, { token: i1.RxOverlayService }, { token: i3.RxProcessDataDictionaryService }, { token: i3.RxProcessDefinitionService }, { token: RxProcessDesignerService }, { token: i3.RxProcessElementRegistryService }, { token: i3.RxProcessElementSearchService }, { token: i5.RxProcessService }, { token: i6.TranslateService }], target: i0.ɵɵFactoryTarget.Component });\nProcessDesignerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: ProcessDesignerComponent, selector: \"rx-process-designer\", inputs: { configuration: \"configuration\" }, outputs: { closeDesigner: \"closeDesigner\", definitionErrorLoading: \"definitionErrorLoading\", definitionSaved: \"definitionSaved\" }, viewQueries: [{ propertyName: \"inspectorSidebar\", first: true, predicate: [\"inspectorSidebar\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<ng-container *ngIf=\\\"vm$ | async as vm\\\">\\n  <rx-designer-header\\n    [bundleName]=\\\"vm.bundleFriendlyName\\\"\\n    [breadcrumbItems]=\\\"vm.breadcrumbItems\\\"\\n    [isSaveButtonDisabled]=\\\"vm.isSaveButtonDisabled\\\"\\n    (breadcrumbSelected)=\\\"onBreadcrumbSelected($event.data.guid)\\\"\\n    (toggleDesignMode)=\\\"toggleDesignMode()\\\"\\n    (closeDesigner)=\\\"closeDesigner.emit()\\\"\\n    (save)=\\\"saveDefinition()\\\"\\n  ></rx-designer-header>\\n\\n  <div class=\\\"rx-designer-component\\\" [hidden]=\\\"vm.definitionForCodeViewer\\\">\\n    <adapt-sidebar position=\\\"right\\\" panelWidth=\\\"280px\\\" [openedId]=\\\"0\\\" #inspectorSidebar>\\n      <adapt-sidebar-item\\n        headerTitle=\\\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title' | translate }}\\\"\\n        tooltipText=\\\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title' | translate }}\\\"\\n        iconClass=\\\"d-icon-pencil\\\"\\n      >\\n        <rx-form-builder\\n          [config]=\\\"vm.definitionInspectorConfig\\\"\\n          [model]=\\\"vm.definitionModel\\\"\\n          [focusEditor$]=\\\"focusDefinitionInspector$\\\"\\n          (formInitialized)=\\\"onDefinitionInspectorInitialized()\\\"\\n          [isReadOnly]=\\\"vm.isReadOnly\\\"\\n          (modelChange)=\\\"onDefinitionModelChange($event)\\\"\\n        ></rx-form-builder>\\n      </adapt-sidebar-item>\\n\\n      <adapt-sidebar-item\\n        headerTitle=\\\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title' | translate }}\\\"\\n        tooltipText=\\\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title' | translate }}\\\"\\n        iconClass=\\\"d-icon-gear\\\"\\n      >\\n        <rx-form-builder\\n          *ngIf=\\\"vm.selectedElementInspectorConfig; else missingElementAlert\\\"\\n          rxInspector\\n          [config]=\\\"vm.selectedElementInspectorConfig\\\"\\n          [model]=\\\"vm.selectedElementModel\\\"\\n          [designerItemModel]=\\\"selectedElementInspectorDesignerItemModel$\\\"\\n          [focusEditor$]=\\\"focusSelectedElementInspector$\\\"\\n          [isReadOnly]=\\\"vm.isReadOnly\\\"\\n          (modelChange)=\\\"onSelectedElementModelChange($event)\\\"\\n        ></rx-form-builder>\\n\\n        <ng-template #missingElementAlert>\\n          <adapt-alert\\n            class=\\\"p-3 definition-valid-message\\\"\\n            [config]=\\\"{\\n              content: 'com.bmc.arsys.rx.client.process-designer.inspector.missing-element.label' | translate,\\n              variant: 'info',\\n              type: 'inline'\\n            }\\\"\\n          ></adapt-alert>\\n        </ng-template>\\n      </adapt-sidebar-item>\\n\\n      <adapt-sidebar-item\\n        headerTitle=\\\"{{ 'com.bmc.arsys.rx.client.designer.validation-issues.label' | translate }}\\\"\\n        tooltipText=\\\"{{ 'com.bmc.arsys.rx.client.designer.validation-issues.label' | translate }}\\\"\\n        [iconClass]=\\\"vm.hasValidationErrors ? 'd-icon-exclamation_triangle text-danger' : 'd-icon-exclamation_triangle'\\\"\\n      >\\n        <rx-validation-issues\\n          [issueSections]=\\\"vm.validationIssueSections\\\"\\n          [definitionTypeDisplayName]=\\\"'com.bmc.arsys.rx.client.common.process-definition.label' | translate\\\"\\n          (correctIssue)=\\\"onCorrectIssue($event)\\\"\\n        ></rx-validation-issues>\\n      </adapt-sidebar-item>\\n\\n      <div class=\\\"main\\\">\\n        <!-- TODO-VS: remove blade in favour of adapt sidebar -->\\n        <rx-blade [title]=\\\"'Palette'\\\" rx-id=\\\"palette\\\" [isExpanded]=\\\"true\\\">\\n          <rx-designer-palette\\n            [tree]=\\\"vm.paletteElementsTree\\\"\\n            (elementDropped)=\\\"onPaletteElementDropped($event)\\\"\\n          ></rx-designer-palette>\\n        </rx-blade>\\n\\n        <rx-designer-canvas\\n          [configuration]=\\\"vm.canvasConfiguration\\\"\\n          [graph]=\\\"vm.graph\\\"\\n          [droppedElement]=\\\"droppedElement\\\"\\n          (elementSelected)=\\\"onCanvasElementSelected($event)\\\"\\n        ></rx-designer-canvas>\\n      </div>\\n    </adapt-sidebar>\\n  </div>\\n\\n  <adapt-code-viewer\\n    *ngIf=\\\"vm.definitionForCodeViewer\\\"\\n    class=\\\"full-size\\\"\\n    theme=\\\"light\\\"\\n    lang=\\\"javascript\\\"\\n    [hasToolbar]=\\\"false\\\"\\n    [code]=\\\"vm.definitionForCodeViewer | json\\\"\\n  ></adapt-code-viewer>\\n</ng-container>\\n\", styles: [\":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host{display:flex;flex-direction:column;height:100%;width:100%}:host ::ng-deep rx-blade .content{z-index:100}:host ::ng-deep .adapt-sidebar-main{padding:0}:host ::ng-deep .adapt-sidebar-main .main{height:100%}:host ::ng-deep adapt-sidebar .adapt-sidebar-panel-content{padding:0}:host ::ng-deep adapt-accordion-tab>.card:first-child{border:0}:host ::ng-deep .joint-element .body{stroke:#626668}:host ::ng-deep .joint-element polygon{stroke-width:2}:host ::ng-deep .joint-element path{stroke:#626668}.rx-designer-component{height:calc(100% - 50px)}.rx-designer-component rx-designer-canvas{position:absolute;top:0;right:0;bottom:0;left:0}\\n\"], components: [{ type: i7.RxDesignerHeaderComponent, selector: \"rx-designer-header\", inputs: [\"bundleName\", \"breadcrumbItems\", \"isDesignMode\", \"isPreviewAvailable\", \"isSaveButtonDisabled\"], outputs: [\"breadcrumbSelected\", \"toggleDesignMode\", \"showPreview\", \"save\", \"closeDesigner\"] }, { type: i8.AdaptSidebarComponent, selector: \"adapt-sidebar\", inputs: [\"className\", \"navClassName\", \"panelWidth\", \"panel2Width\", \"position\", \"theme\", \"widthLimit\", \"openedId\", \"adjustMainContainerWidth\"], outputs: [\"openedIdChange\", \"isPanelOpenedCurrently\"], exportAs: [\"adaptSidebar\"] }, { type: i8.AdaptSidebarItemComponent, selector: \"adapt-sidebar-item\", inputs: [\"iconClass\", \"headerTitle\", \"tooltipText\", \"aria-label\"] }, { type: i7.FormBuilderComponent, selector: \"rx-form-builder\", inputs: [\"config\", \"model\", \"guid\", \"isReadOnly\", \"focusEditor$\"], outputs: [\"modelChange\", \"editorEvent\", \"formInitialized\"] }, { type: i8.AdaptAlertComponent, selector: \"adapt-alert\", inputs: [\"config\"], outputs: [\"onClose\"] }, { type: i9.RxValidationIssuesComponent, selector: \"rx-validation-issues\", inputs: [\"definitionTypeDisplayName\", \"issueSections\"], outputs: [\"correctIssue\"] }, { type: i9.RxBladeComponent, selector: \"rx-blade\", inputs: [\"title\", \"isExpanded\", \"dockTo\"], outputs: [\"toggle\"] }, { type: i7.RxDesignerPaletteComponent, selector: \"rx-designer-palette\", inputs: [\"tree\"], outputs: [\"elementDropped\"] }, { type: i7.RxDesignerCanvasComponent, selector: \"rx-designer-canvas\", inputs: [\"configuration\", \"graph\", \"droppedElement\"], outputs: [\"elementSelected\"] }, { type: i8.AdaptCodeViewerComponent, selector: \"adapt-code-viewer\", inputs: [\"code\", \"theme\", \"lang\", \"texts\", \"hasToolbar\"] }], directives: [{ type: i10.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i7.InspectorDirective, selector: \"[rxInspector]\", inputs: [\"designerItemModel\"] }], pipes: { \"async\": i10.AsyncPipe, \"translate\": i6.TranslatePipe, \"json\": i10.JsonPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-process-designer',\n                    templateUrl: './process-designer.component.html',\n                    styleUrls: ['./process-designer.component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.RxBundleCacheService }, { type: i1.RxCommandManagerService }, { type: i1.RxDesignerCacheService }, { type: i1.RxGlobalCacheService }, { type: i2.RxGuidService }, { type: i2.RxIdService }, { type: i1.RxOverlayService }, { type: i3.RxProcessDataDictionaryService }, { type: i3.RxProcessDefinitionService }, { type: RxProcessDesignerService }, { type: i3.RxProcessElementRegistryService }, { type: i3.RxProcessElementSearchService }, { type: i5.RxProcessService }, { type: i6.TranslateService }]; }, propDecorators: { configuration: [{\n                type: Input\n            }], closeDesigner: [{\n                type: Output\n            }], definitionErrorLoading: [{\n                type: Output\n            }], definitionSaved: [{\n                type: Output\n            }], inspectorSidebar: [{\n                type: ViewChild,\n                args: ['inspectorSidebar', { static: false }]\n            }] } });\n\njoint.shapes.rx = joint.shapes.rx || {};\nclass ProcessDesignerModule {\n    constructor() {\n        assign(joint.shapes.bpmn.icons, RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons);\n    }\n}\nProcessDesignerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nProcessDesignerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerModule, declarations: [ProcessDesignerComponent], imports: [AdaptAlertModule,\n        AdaptCodeViewerModule,\n        AdaptSidebarModule,\n        AdaptTabsModule,\n        CommonModule,\n        RxBladeModule,\n        RxDesignerCanvasModule,\n        RxDesignerHeaderModule,\n        RxDesignerPaletteModule,\n        RxFormBuilderModule,\n        RxInspectorModule,\n        RxJsonViewerModule,\n        RxProcessElementsModule,\n        RxServerActionsModule,\n        RxValidationIssuesModule,\n        TranslateModule], exports: [ProcessDesignerComponent] });\nProcessDesignerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerModule, imports: [[\n            AdaptAlertModule,\n            AdaptCodeViewerModule,\n            AdaptSidebarModule,\n            AdaptTabsModule,\n            CommonModule,\n            RxBladeModule,\n            RxDesignerCanvasModule,\n            RxDesignerHeaderModule,\n            RxDesignerPaletteModule,\n            RxFormBuilderModule,\n            RxInspectorModule,\n            RxJsonViewerModule,\n            RxProcessElementsModule,\n            RxServerActionsModule,\n            RxValidationIssuesModule,\n            TranslateModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ProcessDesignerComponent],\n                    imports: [\n                        AdaptAlertModule,\n                        AdaptCodeViewerModule,\n                        AdaptSidebarModule,\n                        AdaptTabsModule,\n                        CommonModule,\n                        RxBladeModule,\n                        RxDesignerCanvasModule,\n                        RxDesignerHeaderModule,\n                        RxDesignerPaletteModule,\n                        RxFormBuilderModule,\n                        RxInspectorModule,\n                        RxJsonViewerModule,\n                        RxProcessElementsModule,\n                        RxServerActionsModule,\n                        RxValidationIssuesModule,\n                        TranslateModule\n                    ],\n                    exports: [ProcessDesignerComponent]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass ProcessDesignerPageComponent {\n    constructor(activatedRoute, router, rxBundleCacheService, rxComponentCanDeactivateGuard, rxDefinitionNameService, rxPageTitleService, rxUtilityModalsService, translateService) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;\n        this.rxDefinitionNameService = rxDefinitionNameService;\n        this.rxPageTitleService = rxPageTitleService;\n        this.rxUtilityModalsService = rxUtilityModalsService;\n        this.translateService = translateService;\n        this.isInitialized = false;\n    }\n    ngOnInit() {\n        this.rxComponentCanDeactivateGuard.setPageComponent(this);\n        this.subscription = this.activatedRoute.params.subscribe(({ definitionName, bundleId }) => {\n            this.rxBundleCacheService.bundleId = bundleId || this.rxDefinitionNameService.getBundleId(definitionName);\n            this.isInitialized = true;\n            this.isNewProcess = !definitionName;\n            this.rxPageTitleService.set([\n                this.rxDefinitionNameService.getDisplayName(definitionName),\n                this.translateService.instant('com.bmc.arsys.rx.client.process-designer.title')\n            ]);\n            this.configuration = Object.assign(Object.assign({}, this.configuration), { bundleId: this.rxBundleCacheService.bundleId, definitionName });\n        });\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n        this.rxComponentCanDeactivateGuard.setPageComponent(null);\n    }\n    canDeactivate() {\n        var _a, _b;\n        return (_b = (_a = this.processDesignerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate()) !== null && _b !== void 0 ? _b : true;\n    }\n    confirmDeactivation() {\n        return this.rxUtilityModalsService.confirmUnsavedChanges();\n    }\n    onCloseDesigner() {\n        this.router.navigate([\n            RX_APPLICATION.innovationStudioBundleId,\n            this.rxBundleCacheService.bundleId,\n            'process-definitions'\n        ]);\n    }\n    onDefinitionErrorLoading() {\n        this.router.navigate(['new2', this.rxBundleCacheService.bundleId], { relativeTo: this.activatedRoute.parent });\n    }\n    onDefinitionSaved(processDefinitionName) {\n        if (this.isNewProcess) {\n            this.router.navigate(['edit2', processDefinitionName], { relativeTo: this.activatedRoute.parent });\n        }\n    }\n}\nProcessDesignerPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageComponent, deps: [{ token: i1$1.ActivatedRoute }, { token: i1$1.Router }, { token: i1.RxBundleCacheService }, { token: i1.RxComponentCanDeactivateGuard }, { token: i1.RxDefinitionNameService }, { token: i1.RxPageTitleService }, { token: i9.RxUtilityModalsService }, { token: i6.TranslateService }], target: i0.ɵɵFactoryTarget.Component });\nProcessDesignerPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: ProcessDesignerPageComponent, selector: \"rx-process-designer-page\", viewQueries: [{ propertyName: \"processDesignerComponent\", first: true, predicate: ProcessDesignerComponent, descendants: true }], ngImport: i0, template: \"<rx-process-designer\\n  *ngIf=\\\"isInitialized\\\"\\n  [configuration]=\\\"configuration\\\"\\n  (closeDesigner)=\\\"onCloseDesigner()\\\"\\n  (definitionErrorLoading)=\\\"onDefinitionErrorLoading()\\\"\\n  (definitionSaved)=\\\"onDefinitionSaved($event)\\\"\\n></rx-process-designer>\\n\", components: [{ type: ProcessDesignerComponent, selector: \"rx-process-designer\", inputs: [\"configuration\"], outputs: [\"closeDesigner\", \"definitionErrorLoading\", \"definitionSaved\"] }], directives: [{ type: i10.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-process-designer-page',\n                    templateUrl: './process-designer-page.component.html'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.ActivatedRoute }, { type: i1$1.Router }, { type: i1.RxBundleCacheService }, { type: i1.RxComponentCanDeactivateGuard }, { type: i1.RxDefinitionNameService }, { type: i1.RxPageTitleService }, { type: i9.RxUtilityModalsService }, { type: i6.TranslateService }]; }, propDecorators: { processDesignerComponent: [{\n                type: ViewChild,\n                args: [ProcessDesignerComponent]\n            }] } });\n\nclass ProcessDesignerPageModule {\n}\nProcessDesignerPageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nProcessDesignerPageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageModule, declarations: [ProcessDesignerPageComponent], imports: [CommonModule, ProcessDesignerModule], exports: [ProcessDesignerPageComponent] });\nProcessDesignerPageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageModule, imports: [[CommonModule, ProcessDesignerModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerPageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ProcessDesignerPageComponent],\n                    imports: [CommonModule, ProcessDesignerModule],\n                    exports: [ProcessDesignerPageComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ProcessDesignerComponent, ProcessDesignerModule, ProcessDesignerPageComponent, ProcessDesignerPageModule, RxProcessDesignerService };\n//# sourceMappingURL=helix-platform-process-designer.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}