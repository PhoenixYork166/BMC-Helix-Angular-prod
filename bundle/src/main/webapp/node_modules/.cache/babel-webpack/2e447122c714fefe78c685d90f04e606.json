{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, NgModule } from '@angular/core';\nimport { of, forkJoin, Subject, BehaviorSubject, from, throwError } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i2 from '@helix/platform/shared/api';\nimport { RX_BUNDLE, DataPage, RxLogService, RxLocalizationService, RX_ERROR_HANDLING, RX_OVERLAY } from '@helix/platform/shared/api';\nimport { tap, map as map$1, shareReplay, catchError, switchMap } from 'rxjs/operators';\nimport { map, assign, range, cloneDeep, mapValues, reduce, get, defaults, size, castArray, fromPairs, isEmpty, isNil, isNaN, isFinite as isFinite$1, isString, includes, toNumber, find, isUndefined, set, isNull, forEach, some, forOwn, transform, isEqual, filter, has, trim, isNumber, remove, values, groupBy, pick, sortBy, inRange } from 'lodash';\nimport * as i3 from '@helix/platform/utils';\nimport { RxStringService, RxNumberUtilsService } from '@helix/platform/utils';\nimport * as i1$1 from '@helix/platform/association/api';\nimport { saveAs } from 'file-saver';\nimport BigNumber from 'bignumber.js';\nimport * as i2$1 from '@helix/platform/ui-kit';\nimport * as i1$2 from '@ngx-translate/core';\n\n// LMA:: This Service is necessary to override the default UploaderService from\n// the Adapt Uploader Component.\nclass UploaderService {\n  deleteFile(file, url) {\n    return of(null);\n  }\n  responseCallback(response) {}\n  sendChunk(requestBody, uploadAsOneChunk, url) {\n    return undefined;\n  }\n  sendFile(file) {\n    return of(null);\n  }\n}\nUploaderService.ɵfac = function UploaderService_Factory(t) {\n  return new (t || UploaderService)();\n};\nUploaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UploaderService,\n  factory: UploaderService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UploaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst coreFieldIds = {\n  displayId: 1,\n  createdBy: 2,\n  createdDate: 3,\n  assignee: 4,\n  modifiedBy: 5,\n  modifiedDate: 6,\n  status: 7,\n  description: 8,\n  notifierListening: 16,\n  id: 379\n};\nconst specialFieldIds = {\n  dataProviderId: 380\n};\nconst resourceTypes = {\n  character: 'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition',\n  localizedCharacter: 'com.bmc.arsys.rx.standardlib.record.LocalizedCharacterFieldDefinition',\n  dateTime: 'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition',\n  selection: 'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition',\n  integer: 'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition',\n  decimal: 'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition',\n  real: 'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition',\n  timeOnly: 'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition',\n  dateOnly: 'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition',\n  attachment: 'com.bmc.arsys.rx.standardlib.record.AttachmentFieldDefinition',\n  boolean: 'com.bmc.arsys.rx.standardlib.record.BooleanFieldDefinition',\n  recordInstance: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldDefinition',\n  object: 'com.bmc.arsys.rx.services.process.domain.record.ObjectFieldDefinition',\n  recordInstanceProcessVariable: 'com.bmc.arsys.rx.services.record.domain.RecordInstance',\n  localizedFieldInstance: 'com.bmc.arsys.rx.services.record.domain.LocalizedFieldInstance',\n  list: 'com.bmc.arsys.rx.standardlib.record.ListFieldDefinition'\n};\nconst resourceTypesByFullName = Object.keys(resourceTypes).reduce((currentValue, resourceType) => {\n  currentValue[resourceTypes[resourceType]] = resourceType;\n  return currentValue;\n}, {});\nconst validBundleIdRegExpString = '[a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z0-9_]+)*(\\\\.([a-zA-Z0-9_]+|[a-zA-Z0-9_][a-zA-Z0-9_-]*[a-zA-Z0-9_]))';\nconst validDefinitionNameRegExpString = `[\n  'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A\n\n  'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\n\n  '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\n\n  0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\n\n  \\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\n\n  \\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D\n\n  \\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F\n  ]*`;\nvar RecordFieldOption;\n(function (RecordFieldOption) {\n  RecordFieldOption[\"System\"] = \"SYSTEM\";\n  RecordFieldOption[\"Required\"] = \"REQUIRED\";\n  RecordFieldOption[\"Optional\"] = \"OPTIONAL\";\n})(RecordFieldOption || (RecordFieldOption = {}));\nconst fieldOptions = {\n  system: RecordFieldOption.System,\n  required: RecordFieldOption.Required,\n  optional: RecordFieldOption.Optional\n};\nconst coreDisplayIdField = {\n  resourceType: resourceTypes.character,\n  name: 'Display ID',\n  description: null,\n  id: coreFieldIds.displayId,\n  fieldOption: RecordFieldOption.System,\n  maxLength: 15,\n  defaultValue: null,\n  anyUserAllowedToSubmit: false,\n  allowPermissionsOverlay: false,\n  allowOtherPropertiesOverlay: false\n};\nconst coreIdField = {\n  resourceType: resourceTypes.character,\n  name: 'ID',\n  description: null,\n  id: coreFieldIds.id,\n  fieldOption: RecordFieldOption.System,\n  maxLength: 128,\n  defaultValue: null,\n  anyUserAllowedToSubmit: true,\n  allowPermissionsOverlay: false,\n  allowOtherPropertiesOverlay: false\n};\nconst joinFieldMapping = 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinitionFieldMapping';\nconst externalFieldMapping = 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinitionFieldMapping';\nconst sourceRecordTypes = {\n  primary: 'PRIMARY_RECORD_DEFINITION',\n  secondary: 'SECONDARY_RECORD_DEFINITION'\n};\nconst joinRecordDefinitionCoreFields = map([coreDisplayIdField, coreIdField], coreField => assign({}, coreField, {\n  maxLength: 255,\n  fieldMapping: {\n    resourceType: joinFieldMapping,\n    sourceFieldId: coreField.id,\n    source: sourceRecordTypes.primary\n  }\n}));\nconst maxReservedFieldId = 536870912;\nconst RX_RECORD_DEFINITION = {\n  coreFieldIds,\n  specialFieldIds,\n  alwaysRequiredNonSystemFieldIds: [coreFieldIds.createdBy, coreFieldIds.status, coreFieldIds.description],\n  AR_AUDIT_FIELD_IDS: range(450, 465),\n  AR_MAX_RESERVED_FIELD_ID: maxReservedFieldId,\n  AR_MIN_CUSTOM_FIELD_ID: maxReservedFieldId + 1,\n  AR_CORE_FIELD_IDS: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n  keyFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n  coreFields: [coreDisplayIdField, {\n    resourceType: resourceTypes.character,\n    name: 'Created By',\n    description: null,\n    id: coreFieldIds.createdBy,\n    fieldOption: fieldOptions.required,\n    maxLength: 254,\n    defaultValue: '$USER$',\n    anyUserAllowedToSubmit: true,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.dateTime,\n    name: 'Created Date',\n    description: null,\n    id: coreFieldIds.createdDate,\n    fieldOption: fieldOptions.system,\n    defaultValue: null,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.character,\n    name: 'Assignee',\n    description: null,\n    id: coreFieldIds.assignee,\n    fieldOption: fieldOptions.optional,\n    maxLength: 254,\n    defaultValue: null,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.character,\n    name: 'Modified By',\n    description: null,\n    id: coreFieldIds.modifiedBy,\n    fieldOption: fieldOptions.system,\n    maxLength: 254,\n    defaultValue: null,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.dateTime,\n    name: 'Modified Date',\n    description: null,\n    id: coreFieldIds.modifiedDate,\n    fieldOption: fieldOptions.system,\n    defaultValue: null,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.selection,\n    name: 'Status',\n    description: null,\n    id: coreFieldIds.status,\n    fieldOption: fieldOptions.required,\n    optionNamesById: {\n      0: 'New',\n      1: 'Assigned',\n      2: 'Fixed',\n      3: 'Rejected',\n      4: 'Closed'\n    },\n    displayType: null,\n    defaultValue: 0,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.character,\n    name: 'Description',\n    description: null,\n    id: coreFieldIds.description,\n    fieldOption: fieldOptions.required,\n    maxLength: 254,\n    defaultValue: null,\n    anyUserAllowedToSubmit: true,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, {\n    resourceType: resourceTypes.selection,\n    name: 'Notifier Listening',\n    description: null,\n    id: coreFieldIds.notifierListening,\n    fieldOption: fieldOptions.system,\n    optionNamesById: {\n      0: 'Not Listening',\n      1: 'Listening'\n    },\n    displayType: null,\n    defaultValue: 0,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n  }, coreIdField],\n  sortableCharacterFieldMaxLength: 4000,\n  fieldOptions,\n  resourceTypes,\n  resourceTypesByFullName,\n  dataTypes: {\n    character: {\n      displayName: 'Text',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.character.label',\n      resourceType: resourceTypes.character,\n      shortName: 'Character'\n    },\n    localizedCharacter: {\n      displayName: 'Localized text',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.localized-character.label',\n      resourceType: resourceTypes.localizedCharacter,\n      shortName: 'LocalizedCharacter'\n    },\n    integer: {\n      displayName: 'Integer',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.integer.label',\n      resourceType: resourceTypes.integer,\n      shortName: 'Integer'\n    },\n    dateTime: {\n      displayName: 'Date/Time',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-time.label',\n      resourceType: resourceTypes.dateTime,\n      shortName: 'DateTime'\n    },\n    selection: {\n      displayName: 'Selection',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.selection.label',\n      resourceType: resourceTypes.selection,\n      shortName: 'Selection'\n    },\n    decimal: {\n      displayName: 'Decimal',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.decimal.label',\n      resourceType: resourceTypes.decimal,\n      shortName: 'Decimal'\n    },\n    real: {\n      displayName: 'Floating',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.real.label',\n      resourceType: resourceTypes.real,\n      shortName: 'Real'\n    },\n    timeOnly: {\n      displayName: 'Time',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.time-only.label',\n      resourceType: resourceTypes.timeOnly,\n      shortName: 'TimeOnly'\n    },\n    dateOnly: {\n      displayName: 'Date',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-only.label',\n      resourceType: resourceTypes.dateOnly,\n      shortName: 'DateOnly'\n    },\n    attachment: {\n      displayName: 'Attachment',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.attachment.label',\n      resourceType: resourceTypes.attachment,\n      shortName: 'Attachment'\n    },\n    boolean: {\n      displayName: 'Boolean',\n      labelKey: 'com.bmc.arsys.rx.client.common.data-types.boolean.label',\n      resourceType: resourceTypes.boolean,\n      shortName: 'Boolean',\n      options: [{\n        value: '',\n        content: ''\n      }, {\n        value: '1',\n        content: 'True'\n      }, {\n        value: '0',\n        content: 'False'\n      }]\n    },\n    recordInstance: {\n      displayName: 'Record',\n      resourceType: resourceTypes.recordInstance,\n      skipDefaultValue: true\n    },\n    object: {\n      displayName: 'Object',\n      resourceType: resourceTypes.object,\n      skipDefaultValue: true\n    }\n  },\n  recordDefinitionTypes: {\n    regular: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.RegularRecordDefinition',\n      displayName: 'Regular'\n    },\n    join: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinition',\n      displayName: 'Join'\n    },\n    external: {\n      recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinition',\n      displayName: 'External'\n    }\n  },\n  externalRecordDefinitionDataSourceTypes: {\n    webApi: 'Web Api'\n  },\n  externalRecordDefinitionTypes: {\n    custom: 'Custom'\n  },\n  passwordFieldIds: range(50, 71).concat([102, 123, 143]),\n  arCoreFieldIds: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n  recordInstanceAttachment: '/api/rx/application/record/attachment',\n  supportedSystemLocales: {\n    recordDefinitionName: 'Supported System Locales',\n    nameFieldId: 56100,\n    codeFieldId: 56101\n  },\n  fieldPermissionTypes: {\n    view: 'VIEW',\n    change: 'CHANGE'\n  },\n  groupIds: {\n    assigneeGroup: 7\n  },\n  securityLabelIds: {\n    assigneeGroup: 112\n  },\n  joinTypes: {\n    inner: {\n      value: 'INNER',\n      displayName: 'Inner join'\n    },\n    outer: {\n      value: 'OUTER',\n      displayName: 'Outer join'\n    }\n  },\n  joinRecordDefinitionCoreFieldIds: map(joinRecordDefinitionCoreFields, 'id'),\n  sourceRecordTypes,\n  joinRecordDefinitionCoreFields,\n  joinFieldMapping,\n  externalFieldMapping,\n  externalRecordDefinitionCoreFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n  validDefinitionNameRegExpString: validDefinitionNameRegExpString,\n  validDefinitionNameRegex: new RegExp('^' + validDefinitionNameRegExpString + '$'),\n  validFullDefinitionName: new RegExp('^' + validBundleIdRegExpString + '\\\\:' + validDefinitionNameRegExpString + '$')\n};\nvar ArchiveType;\n(function (ArchiveType) {\n  ArchiveType[\"CopyToArchiveAndDeleteFromSource\"] = \"COPY_TO_ARCHIVE_AND_DELETE_FROM_SOURCE\";\n  ArchiveType[\"DeleteFromSource\"] = \"DELETE_FROM_SOURCE\";\n  ArchiveType[\"None\"] = \"NONE\";\n})(ArchiveType || (ArchiveType = {}));\nvar AssociationSelectionType;\n(function (AssociationSelectionType) {\n  AssociationSelectionType[\"FollowParent\"] = \"FOLLOW_PARENT\";\n  AssociationSelectionType[\"Selected\"] = \"SPECIFIC_ONLY\";\n  AssociationSelectionType[\"AllEnforced\"] = \"ALL_ENFORCED\";\n  AssociationSelectionType[\"All\"] = \"ALL\";\n})(AssociationSelectionType || (AssociationSelectionType = {}));\nclass RxRecordDefinitionService {\n  constructor(httpClient, rxCommandFactoryService, rxGuidService) {\n    this.httpClient = httpClient;\n    this.rxCommandFactoryService = rxCommandFactoryService;\n    this.rxGuidService = rxGuidService;\n    this.renameCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.record.command.RenameRecordDefinitionCommand');\n    this.revertCustomizationCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.record.command.RevertRecordDefinitionCommand');\n  }\n  get(recordDefinitionName, options = {}, skipLocalization = false) {\n    return this.httpClient.get(this.getUrl(recordDefinitionName), options).pipe(tap(recordDefinition => {\n      if (!skipLocalization) {\n        this.applyLocalization(recordDefinition);\n      }\n    }));\n  }\n  getNew() {\n    const definition = {\n      name: '',\n      description: null,\n      resourceType: RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType,\n      fieldDefinitions: cloneDeep(RX_RECORD_DEFINITION.coreFields),\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false,\n      allowNonAdminToDeleteRecordInstances: false,\n      allowIndexesOverlay: false,\n      allowFieldsOverlay: false,\n      archiveDescriptor: {\n        ageQualifierFieldId: RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n        ageQualifierInDays: 365,\n        archiveDataCriteria: null,\n        archiveRecordDefinitionName: null,\n        archiveType: ArchiveType.None,\n        description: null,\n        includeAttachments: false,\n        isEnabled: false\n      },\n      associationsToFollowForArchive: {\n        specificAssociationNames: [],\n        selectionType: AssociationSelectionType.AllEnforced\n      },\n      enableCognitiveSearch: false,\n      indexDefinitions: [],\n      scope: RX_BUNDLE.definitionScopeTypes.bundle\n    };\n    definition.fieldDefinitions.filter(this.isSelectionFieldDefinition).forEach(selectionFieldDefinition => {\n      selectionFieldDefinition.optionLabelsById = mapValues(selectionFieldDefinition.optionNamesById, () => this.rxGuidService.generate());\n    });\n    return of(definition);\n  }\n  create(recordDefinition) {\n    return this.httpClient.post(this.getUrl(), recordDefinition);\n  }\n  update(recordDefinition, options) {\n    return this.httpClient.put(this.getUrl(recordDefinition.name), recordDefinition, options);\n  }\n  delete(recordDefinitionName) {\n    return this.httpClient.delete(this.getUrl(recordDefinitionName));\n  }\n  rename(oldRecordDefinitionName, newRecordDefinitionName) {\n    return this.renameCommand.execute({\n      name: oldRecordDefinitionName,\n      newName: newRecordDefinitionName\n    });\n  }\n  revertCustomization(recordDefinitionName) {\n    return this.revertCustomizationCommand.execute({\n      recordDefinitionName\n    });\n  }\n  getUrl(recordDefinitionName) {\n    return recordDefinitionName ? `/api/rx/application/record/recorddefinition/${encodeURIComponent(recordDefinitionName)}` : '/api/rx/application/record/recorddefinition';\n  }\n  setOptionsByIdProperty(fieldDefinition) {\n    fieldDefinition.optionsById = reduce(fieldDefinition.optionNamesById, (optionsById, optionName, optionId) => {\n      optionsById[optionId] = {\n        id: optionId,\n        label: optionName\n      };\n      return optionsById;\n    }, {});\n  }\n  buildFieldDefinitionsByIdMap(recordDefinition) {\n    return reduce(recordDefinition.fieldDefinitions, (fieldDefinitionsById, fieldDefinition) => {\n      this.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, fieldDefinition.id);\n      return fieldDefinitionsById;\n    }, {});\n  }\n  addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field) {\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n      this.setOptionsByIdProperty(fieldDefinition);\n    }\n    fieldDefinitionsById[field] = fieldDefinition;\n  }\n  setFieldDefinitionsToOptional(recordDefinition) {\n    recordDefinition.fieldDefinitions.forEach(fieldDefinition => {\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        fieldDefinition.fieldOption = RX_RECORD_DEFINITION.fieldOptions.optional;\n      }\n    });\n    return recordDefinition;\n  }\n  isSelectionFieldDefinition(fieldDefinition) {\n    return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.resourceType) === RX_RECORD_DEFINITION.resourceTypes.selection;\n  }\n  applyLocalization(recordDefinition) {\n    recordDefinition.fieldDefinitions.filter(this.isSelectionFieldDefinition).forEach(fieldDefinition => {\n      const localizableStringsForField = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n      fieldDefinition.optionLabelsById = mapValues(defaults(fieldDefinition.optionLabelsById, fieldDefinition.optionNamesById), (stringGuid, optionId) => get(localizableStringsForField, stringGuid, fieldDefinition.optionNamesById[optionId]));\n    });\n  }\n  isRegularRecord(recordDefinition) {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType;\n  }\n  isExternalRecord(recordDefinition) {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType && !this.isCustomRecord(recordDefinition);\n  }\n  isJoinRecord(recordDefinition) {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType;\n  }\n  isCustomRecord(recordDefinition) {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType && recordDefinition.type === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom;\n  }\n  isAutomaticIndex(index) {\n    return index.unique && size(index.indexFieldIds) === 1 && index.indexFieldIds[0] === RX_RECORD_DEFINITION.coreFieldIds.id;\n  }\n}\nRxRecordDefinitionService.ɵfac = function RxRecordDefinitionService_Factory(t) {\n  return new (t || RxRecordDefinitionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RxCommandFactoryService), i0.ɵɵinject(i3.RxGuidService));\n};\nRxRecordDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordDefinitionService,\n  factory: RxRecordDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: i2.RxCommandFactoryService\n    }, {\n      type: i3.RxGuidService\n    }];\n  }, null);\n})();\nconst recordDefinitionDataPageQuery$1 = 'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionDataPageQuery';\nclass RxRecordDefinitionDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, recordDefinitionDataPageQuery$1);\n    this.injector = injector;\n  }\n}\nRxRecordDefinitionDataPageService.ɵfac = function RxRecordDefinitionDataPageService_Factory(t) {\n  return new (t || RxRecordDefinitionDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxRecordDefinitionDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordDefinitionDataPageService,\n  factory: RxRecordDefinitionDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxRecordDefinitionCacheService {\n  constructor(rxAssociationDefinitionDataPageService, rxAssociationNodeTreeDataPageService, rxRecordDefinitionService) {\n    this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;\n    this.rxAssociationNodeTreeDataPageService = rxAssociationNodeTreeDataPageService;\n    this.rxRecordDefinitionService = rxRecordDefinitionService;\n    this.consumers = new Set();\n    this.recordDefinitions = new Map();\n    this.recordAssociationDefinitions = new Map();\n    this.recordAssociationTrees = new Map();\n  }\n  getRecordAssociationDefinitions(recordDefinitionNames) {\n    recordDefinitionNames = castArray(recordDefinitionNames);\n    const requestedAssociationDefinitions = [];\n    recordDefinitionNames.forEach(recordDefinitionName => {\n      if (!this.recordAssociationDefinitions.has(recordDefinitionName)) {\n        const recordAssociationDefinition$ = this.rxAssociationDefinitionDataPageService.getRecordAssociationDefinitions(recordDefinitionName).pipe(map$1(result => fromPairs([[recordDefinitionName, result[0].data]])), shareReplay(1));\n        this.recordAssociationDefinitions.set(recordDefinitionName, recordAssociationDefinition$);\n      }\n      requestedAssociationDefinitions.push(this.recordAssociationDefinitions.get(recordDefinitionName));\n    });\n    return forkJoin(requestedAssociationDefinitions).pipe(map$1(recordAssociationDefinitionData => {\n      return assign({}, ...recordAssociationDefinitionData);\n    }));\n  }\n  getRecordAssociationTree(recordDefinitionName) {\n    if (!this.recordAssociationTrees.has(recordDefinitionName)) {\n      this.recordAssociationTrees.set(recordDefinitionName, this.rxAssociationNodeTreeDataPageService.get({\n        params: {\n          startIndex: 0,\n          pageSize: -1,\n          depth: 2,\n          recorddefinition: recordDefinitionName\n        }\n      }).pipe(map$1(dataPage => dataPage.data), shareReplay(1)));\n    }\n    return this.recordAssociationTrees.get(recordDefinitionName);\n  }\n  getRecordAssociationTrees(recordDefinitionNames) {\n    return forkJoin(recordDefinitionNames.map(recordDefinitionName => this.getRecordAssociationTree(recordDefinitionName)));\n  }\n  getRecordDefinition(recordDefinitionName, options) {\n    if (!this.recordDefinitions.has(recordDefinitionName)) {\n      const recordDefinition$ = this.rxRecordDefinitionService.get(recordDefinitionName, options).pipe(shareReplay(1));\n      this.recordDefinitions.set(recordDefinitionName, recordDefinition$);\n    }\n    return this.recordDefinitions.get(recordDefinitionName);\n  }\n  getRecordDefinitions(recordDefinitionNames, options) {\n    return forkJoin(recordDefinitionNames.map(recordDefinitionName => this.getRecordDefinition(recordDefinitionName, options)));\n  }\n  registerConsumer(consumerDestroy$) {\n    this.consumers.add(consumerDestroy$);\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n  clearCache() {\n    this.recordDefinitions.clear();\n    this.recordAssociationDefinitions.clear();\n  }\n}\nRxRecordDefinitionCacheService.ɵfac = function RxRecordDefinitionCacheService_Factory(t) {\n  return new (t || RxRecordDefinitionCacheService)(i0.ɵɵinject(i1$1.RxAssociationDefinitionDataPageService), i0.ɵɵinject(i1$1.RxAssociationNodeTreeDataPageService), i0.ɵɵinject(RxRecordDefinitionService));\n};\nRxRecordDefinitionCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordDefinitionCacheService,\n  factory: RxRecordDefinitionCacheService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxAssociationDefinitionDataPageService\n    }, {\n      type: i1$1.RxAssociationNodeTreeDataPageService\n    }, {\n      type: RxRecordDefinitionService\n    }];\n  }, null);\n})();\nconst recordDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionInheritanceDataPageQuery';\nclass RxRecordDefinitionInheritanceDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, recordDefinitionDataPageQuery);\n    this.injector = injector;\n  }\n}\nRxRecordDefinitionInheritanceDataPageService.ɵfac = function RxRecordDefinitionInheritanceDataPageService_Factory(t) {\n  return new (t || RxRecordDefinitionInheritanceDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxRecordDefinitionInheritanceDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordDefinitionInheritanceDataPageService,\n  factory: RxRecordDefinitionInheritanceDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionInheritanceDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RecordInstanceValidation {\n  constructor() {\n    this.fieldValidatorsByType = {\n      'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition': null,\n      'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition': [this.minValidator, this.maxValidator, this.isNaNValidator],\n      'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition': null,\n      'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition': null,\n      'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition': [this.minValidator, this.maxValidator, this.isNaNValidator],\n      'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition': [this.minValidator, this.maxValidator, this.isNaNValidator],\n      'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition': null,\n      'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition': null\n    };\n  }\n  validate(recordInstance, recordDefinition) {\n    this.fieldDefinitions = recordDefinition.fieldDefinitions;\n    this.fieldInstances = recordInstance.fieldInstances;\n    const errors = Object.keys(this.fieldInstances).reduce((result, fieldId) => {\n      const fieldErrors = this.validateFieldInstance(this.fieldInstances[fieldId], this.fieldInstances[fieldId].value);\n      if (fieldErrors) {\n        result[fieldId] = fieldErrors;\n      }\n      return result;\n    }, {});\n    return isEmpty(errors) ? null : errors;\n  }\n  validateSingleField(fieldId, value) {\n    return this.validateFieldInstance(this.fieldInstances[fieldId], value);\n  }\n  validateFieldInstance(fieldInstance, value) {\n    let errors = {};\n    if (fieldInstance) {\n      const fieldValidators = this.getValidatorsForFieldInstance(fieldInstance);\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n      errors = fieldValidators.reduce((result, validator) => {\n        const validatorResponse = validator.call(this, value, fieldDefinition);\n        if (validatorResponse) {\n          result = Object.assign(Object.assign({}, result), validatorResponse);\n        }\n        return result;\n      }, {});\n    }\n    return errors;\n  }\n  getValidatorsForFieldInstance(fieldInstance) {\n    const validators = [];\n    if (fieldInstance) {\n      const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n      const fieldType = fieldDefinition.resourceType;\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        validators.push(this.isRequired);\n      }\n      if (this.fieldValidatorsByType[fieldType]) {\n        validators.push(...this.fieldValidatorsByType[fieldType]);\n      }\n    }\n    return validators;\n  }\n  getFieldDefinition(fieldId) {\n    return this.fieldDefinitions.find(definition => definition.id === fieldId);\n  }\n  isRequired(value) {\n    if (isNil(value) || value === '') {\n      return {\n        required: 'Value is required'\n      };\n    } else {\n      return null;\n    }\n  }\n  isNaNValidator(value) {\n    return isNaN(value) ? {\n      nan: `Value cannot be NaN`\n    } : null;\n  }\n  minValidator(value, fieldDefinition) {\n    const minError = {\n      min: `Minimum value is ${fieldDefinition.minValue}`\n    };\n    if (BigNumber.isBigNumber(value) || isFinite$1(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isLessThan(fieldDefinition.minValue) ? minError : null;\n    } else {\n      return null;\n    }\n  }\n  maxValidator(value, fieldDefinition) {\n    const maxError = {\n      max: `Maximum value is ${fieldDefinition.maxValue}`\n    };\n    if (BigNumber.isBigNumber(value) || isFinite$1(value) || this.isFiniteNumberString(value)) {\n      return new BigNumber(value).isGreaterThan(fieldDefinition.maxValue) ? maxError : null;\n    } else {\n      return null;\n    }\n  }\n  isFiniteNumberString(value) {\n    return isString(value) && value.trim() !== '' && isFinite$1(Number(value));\n  }\n}\nclass RecordInstance {\n  constructor(recordDefinition, recordInstance, injector) {\n    this.recordDefinition = recordDefinition;\n    this.injector = injector;\n    this.fieldValueChangedSubject = new Subject();\n    this.validation$ = new BehaviorSubject(null);\n    this.fieldValueChanged$ = this.fieldValueChangedSubject.asObservable();\n    this.rxLogService = this.injector.get(RxLogService);\n    this.rxLocalizationService = this.injector.get(RxLocalizationService);\n    this.rxStringService = this.injector.get(RxStringService);\n    this.rxNumberUtilsService = this.injector.get(RxNumberUtilsService);\n    this.validationService = new RecordInstanceValidation();\n    this.prepareRecordInstance(recordInstance);\n    this.originalData = cloneDeep(recordInstance);\n    Object.assign(this, recordInstance);\n    this.validate();\n  }\n  prepareRecordInstance(recordInstance) {\n    // convert numeric field instance values from string to BigNumber instance\n    this.recordDefinition.fieldDefinitions.filter(fieldDefinition => includes([RX_RECORD_DEFINITION.dataTypes.integer.resourceType, RX_RECORD_DEFINITION.dataTypes.decimal.resourceType, RX_RECORD_DEFINITION.dataTypes.real.resourceType], fieldDefinition.resourceType)).forEach(fieldDefinition => {\n      const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n      if (fieldInstance && fieldInstance.value) {\n        fieldInstance.value = new BigNumber(fieldInstance.value);\n      }\n    });\n    // update decimal field definition min and max numbers based on the precision\n    this.recordDefinition.fieldDefinitions.filter(fieldDefinition => fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.decimal.resourceType).forEach(fieldDefinition => {\n      // According to the backend side, min and max number must be based on the precision. E.g when:\n      // - precision is 1, safe number will be 1e27 - 0.1 = 99999999999999999999999999.9\n      // - precision is 3, safe number will be 1e25 - 0.001 = 999999999999999999999999.999\n      const base = new BigNumber(0.1).pow(fieldDefinition.precision);\n      const safeRangeNumber = new BigNumber(1e28).multipliedBy(base).minus(base);\n      fieldDefinition.maxValue = new BigNumber(fieldDefinition.maxValue);\n      fieldDefinition.minValue = new BigNumber(fieldDefinition.minValue);\n      if (fieldDefinition.maxValue.isGreaterThanOrEqualTo(safeRangeNumber)) {\n        fieldDefinition.maxValue = safeRangeNumber;\n      }\n      if (fieldDefinition.minValue.isLessThanOrEqualTo(safeRangeNumber.negated())) {\n        fieldDefinition.minValue = safeRangeNumber.negated();\n      }\n    });\n    // convert boolean and selection field instance values from string to number\n    this.recordDefinition.fieldDefinitions.filter(fieldDefinition => includes([RX_RECORD_DEFINITION.dataTypes.boolean.resourceType, RX_RECORD_DEFINITION.dataTypes.selection.resourceType], fieldDefinition.resourceType)).forEach(fieldDefinition => {\n      const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n      if (fieldInstance && fieldInstance.value) {\n        fieldInstance.value = toNumber(fieldInstance.value);\n      }\n    });\n    // add default value for localized character field component\n    this.recordDefinition.fieldDefinitions.filter(fieldDefinition => RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType === fieldDefinition.resourceType).forEach(fieldDefinition => {\n      const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n      const currentLocaleCode = this.rxLocalizationService.currentLocale;\n      const defaultLocaleCode = 'en-US';\n      if (fieldInstance && !fieldInstance.value && fieldInstance.valueByLocale) {\n        fieldInstance.value = fieldInstance.valueByLocale[currentLocaleCode] || fieldInstance.valueByLocale[defaultLocaleCode];\n      }\n    });\n    // set placeholder value for password fields\n    RX_RECORD_DEFINITION.passwordFieldIds.forEach(passwordFieldId => {\n      const passwordFieldInstance = recordInstance.fieldInstances[passwordFieldId];\n      if (passwordFieldInstance) {\n        passwordFieldInstance.value = '********';\n      }\n    });\n  }\n  getFieldValue(fieldId, associatedRecordPath) {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    return get(fieldInstance, 'value', null);\n  }\n  setFieldValue(fieldId, value, associatedRecordPath) {\n    const recordInstance = this.getRecordInstance(associatedRecordPath);\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    const fieldDefinition = find(recordInstance.recordDefinition.fieldDefinitions, {\n      id: fieldId\n    });\n    let newValue = isUndefined(value) ? null : value;\n    if (fieldInstance) {\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.character.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType:\n          if (!isNull(newValue)) {\n            if (!isString(newValue)) {\n              newValue = String(newValue);\n            } else if (this.rxStringService.isEmptySafe(newValue)) {\n              newValue = null;\n            }\n          }\n          break;\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n          if (!isNull(newValue)) {\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(newValue)) {\n              newValue = new BigNumber(value);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = isNaN(value) ? value : null;\n            }\n          }\n          break;\n        case RX_RECORD_DEFINITION.dataTypes.selection.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType:\n          if (!isNull(newValue)) {\n            if (!this.rxStringService.isEmptySafe(newValue) && isFinite(Number(newValue))) {\n              newValue = Number(newValue);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = null;\n            }\n          }\n          break;\n        case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n          if (value instanceof File) {\n            newValue = value.name;\n            set(fieldInstance, 'file', value);\n          } else {\n            if (!isNull(newValue)) {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n            }\n            newValue = null;\n            delete fieldInstance.file;\n          }\n          break;\n      }\n      set(fieldInstance, 'value', newValue);\n      this.validate();\n      recordInstance.fieldValueChangedSubject.next({\n        fieldId,\n        value: fieldInstance.value\n      });\n    }\n  }\n  getFieldProp(fieldId, prop, associatedRecordPath) {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    return get(fieldInstance, prop);\n  }\n  setFieldProp(fieldId, prop, value, associatedRecordPath) {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    set(fieldInstance, prop, value);\n  }\n  getFieldInstance(fieldId, associatedRecordPath) {\n    if (associatedRecordPath) {\n      return get(this.getRecordInstance(associatedRecordPath), ['fieldInstances', fieldId]);\n    } else {\n      return this.fieldInstances[fieldId];\n    }\n  }\n  getRecordInstance(associatedRecordPath) {\n    return associatedRecordPath ? get(this, ['associationInstances', ...associatedRecordPath]) : this;\n  }\n  isFieldValueChanged(fieldId, newValue, associatedRecordPath) {\n    const fieldDefinition = find(this.getRecordInstance(associatedRecordPath).recordDefinition.fieldDefinitions, {\n      id: fieldId\n    });\n    const value = this.getFieldValue(fieldId, associatedRecordPath);\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n        return value !== (newValue instanceof File ? newValue.name : newValue);\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        return !new BigNumber(value).eq(newValue);\n      default:\n        return value !== newValue;\n    }\n  }\n  revertFieldInstances() {\n    this.fieldInstances = cloneDeep(this.originalData.fieldInstances);\n    this.validate();\n    forEach(this.getExtensionRecords(), recordInstance => recordInstance.revertFieldInstances());\n  }\n  reset() {\n    Object.assign(this, cloneDeep(this.originalData));\n    this.associationInstances = null;\n    this.validate();\n  }\n  getOriginalRecordInstance() {\n    return new RecordInstance(this.recordDefinition, this.originalData, this.injector);\n  }\n  validate() {\n    const errors = this.validationService.validate(this, this.recordDefinition);\n    this.validation$.next(errors);\n  }\n  validateSingleField(fieldId, value, associatedRecordPath) {\n    let result = {};\n    if (associatedRecordPath) {\n      const associatedRecordInstance = this.getRecordInstance(associatedRecordPath);\n      if (associatedRecordInstance) {\n        result = associatedRecordInstance.validationService.validateSingleField(fieldId, value);\n      }\n    } else {\n      result = this.validationService.validateSingleField(fieldId, value);\n    }\n    return result;\n  }\n  getExtensionRecords() {\n    return reduce(this.associationInstances, (result, value, key) => {\n      forEach(value, (associationRecords, nodeSide) => {\n        result.push(...associationRecords.extensions);\n      });\n      return result;\n    }, []);\n  }\n  isDeletedOrPendingAssociations() {\n    return some(this.associationInstances, value => {\n      return some(value, (associationRecords, nodeSide) => {\n        return Boolean(associationRecords.deleted.length || associationRecords.pending.length);\n      });\n    });\n  }\n  logIncorrectFieldValueWarning(value, fieldDefinition) {\n    const fieldTypeName = find(RX_RECORD_DEFINITION.dataTypes, {\n      resourceType: fieldDefinition.resourceType\n    }).displayName;\n    this.rxLogService.warning(`${value} cannot be assigned to ${fieldTypeName} field.`);\n  }\n  prepareForBulkEdit() {\n    forEach(this.fieldInstances, fieldInstance => {\n      fieldInstance.value = null;\n      if (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance) {\n        forOwn(fieldInstance.valueByLocale, (value, key) => {\n          fieldInstance.valueByLocale[key] = null;\n        });\n      }\n    });\n    this.originalData.fieldInstances = cloneDeep(this.fieldInstances);\n    this.validate();\n  }\n}\nconst RX_RECORD_INSTANCE = {\n  association: {\n    operationResourceTypes: {\n      associate: 'com.bmc.arsys.rx.services.association.domain.AssociateOperation',\n      disassociate: 'com.bmc.arsys.rx.services.association.domain.DisassociateOperation',\n      createAndAssociate: 'com.bmc.arsys.rx.services.association.domain.CreateAndAssociateOperation',\n      update: 'com.bmc.arsys.rx.services.association.domain.UpdateOperation'\n    }\n  },\n  dataPageQuery: 'com.bmc.arsys.rx.application.record.datapage.RecordInstanceDataPageQuery'\n};\nclass RxRecordInstanceDataPageService extends DataPage {\n  constructor(injector, rxLogService) {\n    super(injector, RX_RECORD_INSTANCE.dataPageQuery);\n    this.injector = injector;\n    this.rxLogService = rxLogService;\n  }\n  get(dataPageRequestConfiguration = {}) {\n    this.rxLogService.warning('RxRecordInstanceDataPageService: The get() method is deprecated. Use post() instead.');\n    return super.get(dataPageRequestConfiguration);\n  }\n}\nRxRecordInstanceDataPageService.ɵfac = function RxRecordInstanceDataPageService_Factory(t) {\n  return new (t || RxRecordInstanceDataPageService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.RxLogService));\n};\nRxRecordInstanceDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordInstanceDataPageService,\n  factory: RxRecordInstanceDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordInstanceDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: i2.RxLogService\n    }];\n  }, null);\n})();\nclass RxRecordInstanceUtilsService {\n  constructor(rxRecordInstanceDataPageService, rxLogService) {\n    this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;\n    this.rxLogService = rxLogService;\n    this.displayFieldsCache = {};\n  }\n  convertFromDataPageRowToPlainRecordInstance(dataPageRow) {\n    return {\n      id: dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id],\n      fieldInstances: transform(dataPageRow, (result, value, key) => {\n        result[key] = {\n          id: toNumber(key),\n          value: value\n        };\n      }, {})\n    };\n  }\n  escapeTextWildcards(value) {\n    // escape double quotes with double quotes, e.g. replace \"textInQuotes\" with \"\"textInQuotes\"\"\n    // escape wildcards with backslash, e.g. replace `search%And_` with `search\\%And\\_`\n    return value.replace(/\"/g, '\"\"').replace(/[%_]/g, '\\\\$&');\n  }\n  isFieldValueEqual(value, other) {\n    if (value instanceof BigNumber || other instanceof BigNumber) {\n      return new BigNumber(value).eq(new BigNumber(other));\n    } else {\n      return isEqual(value, other);\n    }\n  }\n  isNoRecordFoundError(error) {\n    return error instanceof HttpErrorResponse && get(error, 'error[0].messageNumber') === 302;\n  }\n  getFieldValues(recordDefinitionName, recordInstanceIds, fieldIds) {\n    const queryExpression = map(recordInstanceIds, recordInstanceId => `'${RX_RECORD_DEFINITION.coreFieldIds.id}'=\"${recordInstanceId}\"`).join(' OR ');\n    const params = {\n      recorddefinition: recordDefinitionName,\n      propertySelection: fieldIds.join(','),\n      queryExpression,\n      pageSize: -1,\n      startIndex: 0\n    };\n    const serializedParams = JSON.stringify(params);\n    if (this.displayFieldsCache[serializedParams]) {\n      return of(this.displayFieldsCache[serializedParams]);\n    }\n    return this.rxRecordInstanceDataPageService.post({\n      params\n    }).pipe(shareReplay(1), map$1(result => {\n      this.displayFieldsCache[serializedParams] = result.data;\n      return result.data;\n    }));\n  }\n  // This method parses content-disposition header and returns decoded file name, for example:\n  // 'attachment; filename*=UTF-8\\'\\'foo+bar.jpg' will become 'foo bar.jpg'\n  // Additional notes:\n  // 1. returns empty string if failed to parse content-disposition\n  // 2. '+'  symbols will be replaced with '%20' which will then be evaluated to spaces after decoding\n  tryParseContentDisposition(contentDisposition) {\n    try {\n      let fileName = contentDisposition.match(/(?:attachment; filename\\*=UTF-8'')(.*)/)[1];\n      fileName = fileName.replace(/\\+/g, '%20');\n      return decodeURIComponent(fileName);\n    } catch (e) {\n      this.rxLogService.warning(`Cannot parse content-disposition response header: ${contentDisposition}`);\n      return '';\n    }\n  }\n}\nRxRecordInstanceUtilsService.ɵfac = function RxRecordInstanceUtilsService_Factory(t) {\n  return new (t || RxRecordInstanceUtilsService)(i0.ɵɵinject(RxRecordInstanceDataPageService), i0.ɵɵinject(i2.RxLogService));\n};\nRxRecordInstanceUtilsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordInstanceUtilsService,\n  factory: RxRecordInstanceUtilsService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordInstanceUtilsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxRecordInstanceDataPageService\n    }, {\n      type: i2.RxLogService\n    }];\n  }, null);\n})();\nclass RxRecordInstanceService {\n  constructor(httpClient, rxRecordDefinitionCacheService, rxRecordInstanceUtilsService, injector, ngZone) {\n    this.httpClient = httpClient;\n    this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n    this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n    this.injector = injector;\n    this.ngZone = ngZone;\n    this.path = '/api/rx/application/record/recordinstance';\n  }\n  get(recordDefinitionName, recordInstanceId) {\n    return this.getRecordInstance(recordDefinitionName, recordInstanceId);\n  }\n  getNew(recordDefinitionName) {\n    return this.getRecordInstance(recordDefinitionName, '0');\n  }\n  getEmpty(recordDefinitionName) {\n    return this.getNew(recordDefinitionName).pipe(tap(recordInstance => recordInstance.prepareForBulkEdit()));\n  }\n  save(recordInstance, options) {\n    return this.httpClient.put(`${this.path}/${encodeURIComponent(recordInstance.recordDefinitionName)}/${encodeURIComponent(recordInstance.id)}`, this.prepareRecordInstance(recordInstance), options);\n  }\n  delete(recordDefinitionName, recordInstanceId) {\n    return this.httpClient.delete(`${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`);\n  }\n  prepareAttachments(fieldInstances, isAssociation = false) {\n    const attachedFiles = filter(fieldInstances, fieldInstance => Boolean(fieldInstance.file)).map(attachment => {\n      const keyPrefix = isAssociation ? `${fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value}/` : '';\n      return {\n        key: `${keyPrefix}${attachment.id}`,\n        file: attachment.file\n      };\n    });\n    this.cleanAttachmentFiles(fieldInstances);\n    return attachedFiles;\n  }\n  // There should not be any files in record instance JSON so we are cleaning it\n  cleanAttachmentFiles(fieldInstances) {\n    filter(fieldInstances, fieldInstance => has(fieldInstance, 'file')).forEach(fieldInstanceWithFile => {\n      if (fieldInstanceWithFile.file) {\n        delete fieldInstances[fieldInstanceWithFile.id];\n      } else {\n        delete fieldInstances[fieldInstanceWithFile.id].file;\n      }\n    });\n  }\n  create(recordInstance) {\n    return this.httpClient.post(this.path, this.prepareRecordInstance(recordInstance), {\n      observe: 'response',\n      responseType: 'text'\n    }).pipe(map$1(res => {\n      let result = {};\n      const locationHeader = res.headers.get('location');\n      if (locationHeader) {\n        result = {\n          id: locationHeader.substr(locationHeader.lastIndexOf('/') + 1),\n          url: locationHeader\n        };\n      }\n      return result;\n    }));\n  }\n  getRecordInstance(recordDefinitionName, recordInstanceId) {\n    return forkJoin([this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName), this.getRecordInstanceData(recordDefinitionName, recordInstanceId)]).pipe(map$1(([recordDefinition, recordInstanceData]) => new RecordInstance(recordDefinition, recordInstanceData, this.injector)));\n  }\n  getRecordInstanceData(recordDefinitionName, recordInstanceId) {\n    return this.httpClient.get(`${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`);\n  }\n  prepareRecordInstance(recordInstance) {\n    const modifiedFieldInstances = {};\n    const recordInstanceFormData = new FormData();\n    Object.keys(recordInstance.originalData.fieldInstances).forEach(fieldIdKey => {\n      const fieldId = Number(fieldIdKey);\n      const fieldInstance = recordInstance.fieldInstances[fieldId];\n      const originalFieldInstance = recordInstance.originalData.fieldInstances[fieldId];\n      if (isString(fieldInstance.value)) {\n        fieldInstance.value = trim(fieldInstance.value);\n      }\n      if (isUndefined(originalFieldInstance) || fieldInstance.value === null && originalFieldInstance.value !== null || fieldInstance.value !== null && originalFieldInstance.value === null || fieldInstance.value !== null && originalFieldInstance.value !== null && !(isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) && String(fieldInstance.value) !== originalFieldInstance.value || (isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) && !new BigNumber(fieldInstance.value).isEqualTo(originalFieldInstance.value) || fieldId === RX_RECORD_DEFINITION.coreFieldIds.modifiedDate && fieldInstance.value !== null || fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance && !isEqual(originalFieldInstance.valueByLocale, fieldInstance.valueByLocale)) {\n        modifiedFieldInstances[fieldId] = fieldInstance;\n      }\n    });\n    const preparedRecordInstance = {\n      id: recordInstance.id,\n      resourceType: recordInstance.resourceType,\n      displayId: recordInstance.displayId,\n      recordDefinitionName: recordInstance.recordDefinitionName,\n      permittedGroupsBySecurityLabels: recordInstance.permittedGroupsBySecurityLabels,\n      permittedUsersBySecurityLabels: recordInstance.permittedUsersBySecurityLabels,\n      permittedRolesBySecurityLabels: recordInstance.permittedRolesBySecurityLabels,\n      fieldInstances: modifiedFieldInstances\n    };\n    let attachedFiles = this.prepareAttachments(preparedRecordInstance.fieldInstances);\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n    // We have to use FormData if we have attachments or associated data\n    if (!isEmpty(attachedFiles) || !isEmpty(associationInstances)) {\n      recordInstanceFormData.append('recordInstance', JSON.stringify(preparedRecordInstance));\n      if (!isEmpty(associationInstances)) {\n        filter(associationInstances, 'recordInstances').forEach(associationConfig => {\n          forEach(associationConfig.recordInstances, instance => {\n            attachedFiles = attachedFiles.concat(this.prepareAttachments(instance.fieldInstances, true));\n          });\n        });\n        recordInstanceFormData.append('associationOperations', JSON.stringify(associationInstances));\n      }\n      attachedFiles.forEach(attachment => {\n        recordInstanceFormData.append(attachment.key, attachment.file, attachment.file.name);\n      });\n      return recordInstanceFormData;\n    } else {\n      return preparedRecordInstance;\n    }\n  }\n  getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId) {\n    return `${RX_RECORD_DEFINITION.recordInstanceAttachment}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}/${fieldId}`;\n  }\n  downloadAttachment(recordDefinitionName, fieldId, recordInstanceId, fileName) {\n    this.httpClient.get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), {\n      responseType: 'blob'\n    }).subscribe(fileStream => {\n      if (fileStream) {\n        const file = new Blob([fileStream], {\n          type: fileStream.type\n        });\n        this.ngZone.runOutsideAngular(() => {\n          saveAs(file, fileName);\n        });\n      }\n    });\n  }\n  getAttachment(recordDefinitionName, fieldId, recordInstanceId) {\n    return this.httpClient.get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), {\n      responseType: 'blob'\n    }).pipe(map$1(fileStream => {\n      return new Blob([fileStream], {\n        type: fileStream.type\n      });\n    }));\n  }\n  prepareAssociationInstancesForSaving(associationInstances) {\n    const associationPayload = transform(associationInstances, (result, associationInstance, associationDefinitionName) => {\n      forEach(associationInstance, (associationGroups, key) => {\n        const nodeSide = key.split(':')[0];\n        const newAssociations = remove(associationGroups.pending, 'isNewInstance');\n        if (!isEmpty(associationGroups.pending)) {\n          values(groupBy(associationGroups.pending, instance => JSON.stringify(instance.rolesConfig))).forEach(instancesGroup => {\n            result.push(assign({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: map(instancesGroup, 'id'),\n              nodeSide,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n            }, instancesGroup[0].rolesConfig));\n          });\n        }\n        if (!isEmpty(newAssociations)) {\n          values(groupBy(newAssociations, instance => JSON.stringify(instance.rolesConfig))).forEach(instancesGroup => {\n            result.push(assign({\n              associationDefinitionName: associationDefinitionName,\n              recordInstances: map(newAssociations, newAssociation => pick(newAssociation, ['fieldInstances', 'recordDefinitionName'])),\n              nodeSide,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n            }, instancesGroup[0].rolesConfig));\n          });\n        }\n        if (!isEmpty(associationGroups.deleted)) {\n          result.push({\n            associationDefinitionName: associationDefinitionName,\n            recordInstanceIds: map(associationGroups.deleted, 'id'),\n            nodeSide,\n            resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.disassociate\n          });\n        }\n        if (!isEmpty(associationGroups.extensions)) {\n          const extensionRecordInstance = associationGroups.extensions[0];\n          result.push({\n            associationDefinitionName: associationDefinitionName,\n            recordInstances: [this.prepareAssociatedRecordInstanceForSaving(extensionRecordInstance)],\n            nodeSide,\n            resourceType: extensionRecordInstance.isNewInstance ? RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate : RX_RECORD_INSTANCE.association.operationResourceTypes.update\n          });\n        }\n      });\n    }, []);\n    return sortBy(associationPayload, associationData => {\n      // DISASSOCIATE operations must be at the beginning\n      return associationData.operation === 'ASSOCIATE';\n    });\n  }\n  prepareAssociatedRecordInstanceForSaving(recordInstance) {\n    const recordInstanceClone = this.prepareRecordInstance(recordInstance);\n    recordInstanceClone.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id] = recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id];\n    // todo ychubar fix typings\n    delete recordInstanceClone.isNewInstance;\n    return recordInstanceClone;\n  }\n  createInstanceFromDataPageRow(dataPageRow, recordDefinition) {\n    const plainRecordInstance = this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(dataPageRow);\n    plainRecordInstance.recordDefinitionName = recordDefinition.name;\n    forEach(plainRecordInstance.fieldInstances, (fieldInstance, fieldId) => {\n      const fieldDefinition = find(recordDefinition.fieldDefinitions, {\n        id: Number(fieldId)\n      }) || {};\n      if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) {\n        fieldInstance.resourceType = RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance;\n      }\n      // normalize record instance fields\n      if (!isNull(fieldInstance.value)) {\n        if (isNumber(fieldInstance.value) && includes([RX_RECORD_DEFINITION.resourceTypes.boolean, RX_RECORD_DEFINITION.resourceTypes.selection], fieldDefinition.resourceType)) {\n          fieldInstance.value = String(fieldInstance.value);\n        }\n      }\n    });\n    return new RecordInstance(recordDefinition, plainRecordInstance, this.injector);\n  }\n}\nRxRecordInstanceService.ɵfac = function RxRecordInstanceService_Factory(t) {\n  return new (t || RxRecordInstanceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(RxRecordDefinitionCacheService), i0.ɵɵinject(RxRecordInstanceUtilsService), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.NgZone));\n};\nRxRecordInstanceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordInstanceService,\n  factory: RxRecordInstanceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordInstanceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: RxRecordDefinitionCacheService\n    }, {\n      type: RxRecordInstanceUtilsService\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass RxRecordInstanceUpdateService {\n  constructor(rxRecordInstanceService, rxUtilityModalsService) {\n    this.rxRecordInstanceService = rxRecordInstanceService;\n    this.rxUtilityModalsService = rxUtilityModalsService;\n  }\n  execute(recordInstance) {\n    return this.rxRecordInstanceService.save(recordInstance).pipe(catchError(error => this.handleModifiedInstanceError(error, recordInstance)));\n  }\n  handleModifiedInstanceError(error, recordInstance) {\n    if (error.status === RX_ERROR_HANDLING.optimisticLockErrorHttpStatus) {\n      return from(this.rxUtilityModalsService.confirmExternalChange(error.error[0].messageText)).pipe(switchMap(isConfirmed => {\n        if (isConfirmed) {\n          return this.rxRecordInstanceService.save(recordInstance, {\n            headers: {\n              'Override-Optimistic-Lock': 'true'\n            }\n          });\n        } else {\n          return throwError(error);\n        }\n      }));\n    } else {\n      return throwError(error);\n    }\n  }\n}\nRxRecordInstanceUpdateService.ɵfac = function RxRecordInstanceUpdateService_Factory(t) {\n  return new (t || RxRecordInstanceUpdateService)(i0.ɵɵinject(RxRecordInstanceService), i0.ɵɵinject(i2$1.RxUtilityModalsService));\n};\nRxRecordInstanceUpdateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordInstanceUpdateService,\n  factory: RxRecordInstanceUpdateService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordInstanceUpdateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxRecordInstanceService\n    }, {\n      type: i2$1.RxUtilityModalsService\n    }];\n  }, null);\n})();\nclass RxFieldDefinitionService {\n  constructor(rxOverlayService) {\n    this.rxOverlayService = rxOverlayService;\n  }\n  isSystemField(fieldDefinition) {\n    return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.fieldOption) === RX_RECORD_DEFINITION.fieldOptions.system;\n  }\n  isRequiredField(fieldDefinition) {\n    return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.fieldOption) === RX_RECORD_DEFINITION.fieldOptions.required;\n  }\n  isPassword(fieldDefinition) {\n    return includes(RX_RECORD_DEFINITION.passwordFieldIds, fieldDefinition.id);\n  }\n  isSecured(fieldDefinition) {\n    return fieldDefinition.shouldPersistHashed || fieldDefinition.shouldPersistEncrypted;\n  }\n  isReadOnly(fieldDefinition) {\n    return this.isSystemField(fieldDefinition) || this.isInheritedField(fieldDefinition);\n  }\n  isInheritedField(fieldDefinition) {\n    return fieldDefinition.hasOwnProperty('isInherited') && fieldDefinition.isInherited;\n  }\n  isPropertiesCustomizationEnabled(fieldDefinition) {\n    return this.isTransient(fieldDefinition) || this.rxOverlayService.isCustomizationEnabled('allowOtherPropertiesOverlay', fieldDefinition);\n  }\n  isTransient(fieldDefinition) {\n    return isUndefined(fieldDefinition.lastUpdateTime);\n  }\n  isOverlayMode(fieldDefinition) {\n    const overlayGroupId = fieldDefinition.overlayGroupId;\n    const overlayDescriptor = fieldDefinition.overlayDescriptor || {\n      parentOverlayGroupId: null\n    };\n    return this.rxOverlayService.getOverlayOperation(overlayGroupId, overlayDescriptor.parentOverlayGroupId) !== RX_OVERLAY.operationTypes.createdInThisOverlayGroup;\n  }\n  // Is field ID in a range reserved by BMC\n  isReservedField(fieldDefinition, skipValidate = false) {\n    // if (isNumber(fieldDefinition.id)) {\n    if (!skipValidate) {\n      return this.isExternalRecordField(fieldDefinition) ? includes(RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds, fieldDefinition.id) : fieldDefinition.id <= RX_RECORD_DEFINITION.AR_MAX_RESERVED_FIELD_ID;\n    } else {\n      return false;\n    }\n  }\n  isPermissionsCustomizationEnabled(fieldDefinition) {\n    return this.isTransient(fieldDefinition) || this.rxOverlayService.isCustomizationEnabled('allowPermissionsOverlay', fieldDefinition);\n  }\n  isSortable(fieldDefinition) {\n    // Records cannot be sorted by a field with unlimited length (maxLength = 0), or by a field longer than 1000 characters.\n    // This applies to character and localized character fields.\n    // Sorting is allowed for fields with unspecified length.\n    return !isNumber(fieldDefinition.maxLength) || inRange(fieldDefinition.maxLength, 1, RX_RECORD_DEFINITION.sortableCharacterFieldMaxLength + 1);\n  }\n  isSearchable(fieldDefinition, recordDefinition) {\n    return includes([RX_RECORD_DEFINITION.dataTypes.character.resourceType, RX_RECORD_DEFINITION.dataTypes.attachment.resourceType], fieldDefinition.resourceType) && !this.isPassword(fieldDefinition) && !this.isSecured(fieldDefinition) && !this.isReadOnly(fieldDefinition) && this.isPropertiesCustomizationEnabled(fieldDefinition);\n  }\n  isJoinedField(fieldDefinition) {\n    return this.isJoinRecordField(fieldDefinition) && !this.isCoreField(fieldDefinition);\n  }\n  isCoreField(fieldDefinition) {\n    let coreFieldIds = RX_RECORD_DEFINITION.arCoreFieldIds;\n    if (this.isJoinRecordField(fieldDefinition)) {\n      coreFieldIds = RX_RECORD_DEFINITION.joinRecordDefinitionCoreFieldIds;\n    } else if (this.isExternalRecordField(fieldDefinition)) {\n      coreFieldIds = RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds;\n    }\n    return includes(coreFieldIds, fieldDefinition.id);\n  }\n  isExternalRecordField(fieldDefinition) {\n    return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.externalFieldMapping;\n  }\n  canBeAssociatedDisplayField(fieldDefinition) {\n    return (this.isReservedField(fieldDefinition) || !this.isTransient(fieldDefinition)) && (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character || fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) && RX_RECORD_DEFINITION.coreFieldIds.id !== fieldDefinition.id;\n  }\n  isJoinRecordField(fieldDefinition) {\n    return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.joinFieldMapping;\n  }\n  isDataProviderIdField(fieldDefinition, recordDefinition) {\n    const isCustomRecordDefinition = (recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.type) === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom;\n    return isCustomRecordDefinition && fieldDefinition.id === RX_RECORD_DEFINITION.specialFieldIds.dataProviderId;\n  }\n  isFieldInUserOverlay(fieldDefinition) {\n    return !fieldDefinition.lastUpdateTime || this.rxOverlayService.getUserDefaultOverlayGroupId() === fieldDefinition.overlayGroupId;\n  }\n}\nRxFieldDefinitionService.ɵfac = function RxFieldDefinitionService_Factory(t) {\n  return new (t || RxFieldDefinitionService)(i0.ɵɵinject(i2.RxOverlayService));\n};\nRxFieldDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxFieldDefinitionService,\n  factory: RxFieldDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxFieldDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i2.RxOverlayService\n    }];\n  }, null);\n})();\nclass RxLocaleService {\n  constructor(rxRecordInstanceDataPageService) {\n    this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;\n  }\n  getLocales() {\n    if (!this.locales) {\n      this.locales = this.rxRecordInstanceDataPageService.post({\n        params: {\n          recorddefinition: RX_RECORD_DEFINITION.supportedSystemLocales.recordDefinitionName,\n          propertySelection: [RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId, RX_RECORD_DEFINITION.supportedSystemLocales.codeFieldId].join(','),\n          sortBy: RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId\n        }\n      }).pipe(shareReplay(1));\n    }\n    return this.locales;\n  }\n}\nRxLocaleService.ɵfac = function RxLocaleService_Factory(t) {\n  return new (t || RxLocaleService)(i0.ɵɵinject(RxRecordInstanceDataPageService));\n};\nRxLocaleService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLocaleService,\n  factory: RxLocaleService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLocaleService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxRecordInstanceDataPageService\n    }];\n  }, null);\n})();\nclass RxRecordDefinitionResourceTypePipe {\n  transform(value) {\n    var _a;\n    const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[value];\n    return ((_a = RX_RECORD_DEFINITION.dataTypes[resourceType]) === null || _a === void 0 ? void 0 : _a.displayName) || '';\n  }\n}\nRxRecordDefinitionResourceTypePipe.ɵfac = function RxRecordDefinitionResourceTypePipe_Factory(t) {\n  return new (t || RxRecordDefinitionResourceTypePipe)();\n};\nRxRecordDefinitionResourceTypePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"rxRecordDefinitionResourceType\",\n  type: RxRecordDefinitionResourceTypePipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionResourceTypePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rxRecordDefinitionResourceType'\n    }]\n  }], null, null);\n})();\nclass RxRecordDefinitionResourceTypePipeModule {}\nRxRecordDefinitionResourceTypePipeModule.ɵfac = function RxRecordDefinitionResourceTypePipeModule_Factory(t) {\n  return new (t || RxRecordDefinitionResourceTypePipeModule)();\n};\nRxRecordDefinitionResourceTypePipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxRecordDefinitionResourceTypePipeModule,\n  declarations: [RxRecordDefinitionResourceTypePipe],\n  exports: [RxRecordDefinitionResourceTypePipe]\n});\nRxRecordDefinitionResourceTypePipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionResourceTypePipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxRecordDefinitionResourceTypePipe],\n      exports: [RxRecordDefinitionResourceTypePipe]\n    }]\n  }], null, null);\n})();\nclass RxRecordDefinitionFieldOptionPipe {\n  constructor(translateService) {\n    this.translateService = translateService;\n  }\n  transform(value) {\n    let fieldOption;\n    if (value === RX_RECORD_DEFINITION.fieldOptions.required) {\n      fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label');\n    } else if (value === RX_RECORD_DEFINITION.fieldOptions.optional) {\n      fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.no.label');\n    } else if (value === RX_RECORD_DEFINITION.fieldOptions.system) {\n      fieldOption = `${this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label')} (${this.translateService.instant('com.bmc.arsys.rx.client.field-definition.type.system.label')})`;\n    }\n    return fieldOption;\n  }\n}\nRxRecordDefinitionFieldOptionPipe.ɵfac = function RxRecordDefinitionFieldOptionPipe_Factory(t) {\n  return new (t || RxRecordDefinitionFieldOptionPipe)(i0.ɵɵdirectiveInject(i1$2.TranslateService, 16));\n};\nRxRecordDefinitionFieldOptionPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"rxRecordDefinitionFieldOption\",\n  type: RxRecordDefinitionFieldOptionPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionFieldOptionPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rxRecordDefinitionFieldOption'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.TranslateService\n    }];\n  }, null);\n})();\nclass RxRecordDefinitionFieldOptionPipeModule {}\nRxRecordDefinitionFieldOptionPipeModule.ɵfac = function RxRecordDefinitionFieldOptionPipeModule_Factory(t) {\n  return new (t || RxRecordDefinitionFieldOptionPipeModule)();\n};\nRxRecordDefinitionFieldOptionPipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxRecordDefinitionFieldOptionPipeModule,\n  declarations: [RxRecordDefinitionFieldOptionPipe],\n  exports: [RxRecordDefinitionFieldOptionPipe]\n});\nRxRecordDefinitionFieldOptionPipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordDefinitionFieldOptionPipeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxRecordDefinitionFieldOptionPipe],\n      exports: [RxRecordDefinitionFieldOptionPipe]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchiveType, AssociationSelectionType, RX_RECORD_DEFINITION, RX_RECORD_INSTANCE, RecordFieldOption, RecordInstance, RxFieldDefinitionService, RxLocaleService, RxRecordDefinitionCacheService, RxRecordDefinitionDataPageService, RxRecordDefinitionFieldOptionPipe, RxRecordDefinitionFieldOptionPipeModule, RxRecordDefinitionInheritanceDataPageService, RxRecordDefinitionResourceTypePipe, RxRecordDefinitionResourceTypePipeModule, RxRecordDefinitionService, RxRecordInstanceDataPageService, RxRecordInstanceService, RxRecordInstanceUpdateService, RxRecordInstanceUtilsService, UploaderService };\n//# sourceMappingURL=helix-platform-record-api.js.map","map":{"version":3,"names":["i0","Injectable","Pipe","NgModule","of","forkJoin","Subject","BehaviorSubject","from","throwError","i1","HttpErrorResponse","i2","RX_BUNDLE","DataPage","RxLogService","RxLocalizationService","RX_ERROR_HANDLING","RX_OVERLAY","tap","map","map$1","shareReplay","catchError","switchMap","assign","range","cloneDeep","mapValues","reduce","get","defaults","size","castArray","fromPairs","isEmpty","isNil","isNaN","isFinite","isFinite$1","isString","includes","toNumber","find","isUndefined","set","isNull","forEach","some","forOwn","transform","isEqual","filter","has","trim","isNumber","remove","values","groupBy","pick","sortBy","inRange","i3","RxStringService","RxNumberUtilsService","i1$1","saveAs","BigNumber","i2$1","i1$2","UploaderService","deleteFile","file","url","responseCallback","response","sendChunk","requestBody","uploadAsOneChunk","undefined","sendFile","ɵfac","UploaderService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","coreFieldIds","displayId","createdBy","createdDate","assignee","modifiedBy","modifiedDate","status","description","notifierListening","id","specialFieldIds","dataProviderId","resourceTypes","character","localizedCharacter","dateTime","selection","integer","decimal","real","timeOnly","dateOnly","attachment","boolean","recordInstance","object","recordInstanceProcessVariable","localizedFieldInstance","list","resourceTypesByFullName","Object","keys","currentValue","resourceType","validBundleIdRegExpString","validDefinitionNameRegExpString","RecordFieldOption","fieldOptions","system","System","required","Required","optional","Optional","coreDisplayIdField","name","fieldOption","maxLength","defaultValue","anyUserAllowedToSubmit","allowPermissionsOverlay","allowOtherPropertiesOverlay","coreIdField","joinFieldMapping","externalFieldMapping","sourceRecordTypes","primary","secondary","joinRecordDefinitionCoreFields","coreField","fieldMapping","sourceFieldId","source","maxReservedFieldId","RX_RECORD_DEFINITION","alwaysRequiredNonSystemFieldIds","AR_AUDIT_FIELD_IDS","AR_MAX_RESERVED_FIELD_ID","AR_MIN_CUSTOM_FIELD_ID","AR_CORE_FIELD_IDS","concat","keyFieldIds","coreFields","optionNamesById","displayType","sortableCharacterFieldMaxLength","dataTypes","displayName","labelKey","shortName","options","value","content","skipDefaultValue","recordDefinitionTypes","regular","recordDefinitionType","join","external","externalRecordDefinitionDataSourceTypes","webApi","externalRecordDefinitionTypes","custom","passwordFieldIds","arCoreFieldIds","recordInstanceAttachment","supportedSystemLocales","recordDefinitionName","nameFieldId","codeFieldId","fieldPermissionTypes","view","change","groupIds","assigneeGroup","securityLabelIds","joinTypes","inner","outer","joinRecordDefinitionCoreFieldIds","externalRecordDefinitionCoreFieldIds","validDefinitionNameRegex","RegExp","validFullDefinitionName","ArchiveType","AssociationSelectionType","RxRecordDefinitionService","constructor","httpClient","rxCommandFactoryService","rxGuidService","renameCommand","forResourceType","revertCustomizationCommand","skipLocalization","getUrl","pipe","recordDefinition","applyLocalization","getNew","definition","fieldDefinitions","allowNonAdminToDeleteRecordInstances","allowIndexesOverlay","allowFieldsOverlay","archiveDescriptor","ageQualifierFieldId","ageQualifierInDays","archiveDataCriteria","archiveRecordDefinitionName","archiveType","None","includeAttachments","isEnabled","associationsToFollowForArchive","specificAssociationNames","selectionType","AllEnforced","enableCognitiveSearch","indexDefinitions","scope","definitionScopeTypes","bundle","isSelectionFieldDefinition","selectionFieldDefinition","optionLabelsById","generate","create","post","update","put","delete","rename","oldRecordDefinitionName","newRecordDefinitionName","execute","newName","revertCustomization","encodeURIComponent","setOptionsByIdProperty","fieldDefinition","optionsById","optionName","optionId","label","buildFieldDefinitionsByIdMap","fieldDefinitionsById","addFieldDefinitionToMap","field","setFieldDefinitionsToOptional","localizableStringsForField","localizableStringsByFieldId","stringGuid","isRegularRecord","isExternalRecord","isCustomRecord","isJoinRecord","isAutomaticIndex","index","unique","indexFieldIds","RxRecordDefinitionService_Factory","ɵɵinject","HttpClient","RxCommandFactoryService","RxGuidService","recordDefinitionDataPageQuery$1","RxRecordDefinitionDataPageService","injector","RxRecordDefinitionDataPageService_Factory","Injector","RxRecordDefinitionCacheService","rxAssociationDefinitionDataPageService","rxAssociationNodeTreeDataPageService","rxRecordDefinitionService","consumers","Set","recordDefinitions","Map","recordAssociationDefinitions","recordAssociationTrees","getRecordAssociationDefinitions","recordDefinitionNames","requestedAssociationDefinitions","recordAssociationDefinition$","result","data","push","recordAssociationDefinitionData","getRecordAssociationTree","params","startIndex","pageSize","depth","recorddefinition","dataPage","getRecordAssociationTrees","getRecordDefinition","recordDefinition$","getRecordDefinitions","registerConsumer","consumerDestroy$","add","subscribe","clearCache","clear","RxRecordDefinitionCacheService_Factory","RxAssociationDefinitionDataPageService","RxAssociationNodeTreeDataPageService","recordDefinitionDataPageQuery","RxRecordDefinitionInheritanceDataPageService","RxRecordDefinitionInheritanceDataPageService_Factory","RecordInstanceValidation","fieldValidatorsByType","minValidator","maxValidator","isNaNValidator","validate","fieldInstances","errors","fieldId","fieldErrors","validateFieldInstance","validateSingleField","fieldInstance","fieldValidators","getValidatorsForFieldInstance","getFieldDefinition","validator","validatorResponse","call","validators","fieldType","isRequired","nan","minError","min","minValue","isBigNumber","isFiniteNumberString","isLessThan","maxError","max","maxValue","isGreaterThan","Number","RecordInstance","fieldValueChangedSubject","validation$","fieldValueChanged$","asObservable","rxLogService","rxLocalizationService","rxStringService","rxNumberUtilsService","validationService","prepareRecordInstance","originalData","base","pow","precision","safeRangeNumber","multipliedBy","minus","isGreaterThanOrEqualTo","isLessThanOrEqualTo","negated","currentLocaleCode","currentLocale","defaultLocaleCode","valueByLocale","passwordFieldId","passwordFieldInstance","getFieldValue","associatedRecordPath","getFieldInstance","setFieldValue","getRecordInstance","newValue","String","isEmptySafe","isFiniteOrNumberString","logIncorrectFieldValueWarning","File","next","getFieldProp","prop","setFieldProp","isFieldValueChanged","eq","revertFieldInstances","getExtensionRecords","reset","associationInstances","getOriginalRecordInstance","associatedRecordInstance","key","associationRecords","nodeSide","extensions","isDeletedOrPendingAssociations","Boolean","deleted","length","pending","fieldTypeName","warning","prepareForBulkEdit","RX_RECORD_INSTANCE","association","operationResourceTypes","associate","disassociate","createAndAssociate","dataPageQuery","RxRecordInstanceDataPageService","dataPageRequestConfiguration","RxRecordInstanceDataPageService_Factory","RxRecordInstanceUtilsService","rxRecordInstanceDataPageService","displayFieldsCache","convertFromDataPageRowToPlainRecordInstance","dataPageRow","escapeTextWildcards","replace","isFieldValueEqual","other","isNoRecordFoundError","error","getFieldValues","recordInstanceIds","fieldIds","queryExpression","recordInstanceId","propertySelection","serializedParams","JSON","stringify","tryParseContentDisposition","contentDisposition","fileName","match","decodeURIComponent","e","RxRecordInstanceUtilsService_Factory","RxRecordInstanceService","rxRecordDefinitionCacheService","rxRecordInstanceUtilsService","ngZone","path","getEmpty","save","prepareAttachments","isAssociation","attachedFiles","keyPrefix","cleanAttachmentFiles","fieldInstanceWithFile","observe","responseType","res","locationHeader","headers","substr","lastIndexOf","getRecordInstanceData","recordInstanceData","modifiedFieldInstances","recordInstanceFormData","FormData","fieldIdKey","originalFieldInstance","isEqualTo","preparedRecordInstance","permittedGroupsBySecurityLabels","permittedUsersBySecurityLabels","permittedRolesBySecurityLabels","prepareAssociationInstancesForSaving","append","associationConfig","recordInstances","instance","getAttachmentDownloadUrl","downloadAttachment","fileStream","Blob","runOutsideAngular","getAttachment","associationPayload","associationInstance","associationDefinitionName","associationGroups","split","newAssociations","rolesConfig","instancesGroup","newAssociation","extensionRecordInstance","prepareAssociatedRecordInstanceForSaving","isNewInstance","associationData","operation","recordInstanceClone","createInstanceFromDataPageRow","plainRecordInstance","RxRecordInstanceService_Factory","NgZone","RxRecordInstanceUpdateService","rxRecordInstanceService","rxUtilityModalsService","handleModifiedInstanceError","optimisticLockErrorHttpStatus","confirmExternalChange","messageText","isConfirmed","RxRecordInstanceUpdateService_Factory","RxUtilityModalsService","RxFieldDefinitionService","rxOverlayService","isSystemField","isRequiredField","isPassword","isSecured","shouldPersistHashed","shouldPersistEncrypted","isReadOnly","isInheritedField","hasOwnProperty","isInherited","isPropertiesCustomizationEnabled","isTransient","isCustomizationEnabled","lastUpdateTime","isOverlayMode","overlayGroupId","overlayDescriptor","parentOverlayGroupId","getOverlayOperation","operationTypes","createdInThisOverlayGroup","isReservedField","skipValidate","isExternalRecordField","isPermissionsCustomizationEnabled","isSortable","isSearchable","isJoinedField","isJoinRecordField","isCoreField","canBeAssociatedDisplayField","isDataProviderIdField","isCustomRecordDefinition","isFieldInUserOverlay","getUserDefaultOverlayGroupId","RxFieldDefinitionService_Factory","RxOverlayService","RxLocaleService","getLocales","locales","RxLocaleService_Factory","RxRecordDefinitionResourceTypePipe","_a","RxRecordDefinitionResourceTypePipe_Factory","ɵpipe","ɵɵdefinePipe","pure","RxRecordDefinitionResourceTypePipeModule","RxRecordDefinitionResourceTypePipeModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","exports","ɵinj","ɵɵdefineInjector","RxRecordDefinitionFieldOptionPipe","translateService","instant","RxRecordDefinitionFieldOptionPipe_Factory","ɵɵdirectiveInject","TranslateService","RxRecordDefinitionFieldOptionPipeModule","RxRecordDefinitionFieldOptionPipeModule_Factory"],"sources":["C:/projects/BMC-Helix-Angular-prod/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-record-api.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Pipe, NgModule } from '@angular/core';\nimport { of, forkJoin, Subject, BehaviorSubject, from, throwError } from 'rxjs';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i2 from '@helix/platform/shared/api';\nimport { RX_BUNDLE, DataPage, RxLogService, RxLocalizationService, RX_ERROR_HANDLING, RX_OVERLAY } from '@helix/platform/shared/api';\nimport { tap, map as map$1, shareReplay, catchError, switchMap } from 'rxjs/operators';\nimport { map, assign, range, cloneDeep, mapValues, reduce, get, defaults, size, castArray, fromPairs, isEmpty, isNil, isNaN, isFinite as isFinite$1, isString, includes, toNumber, find, isUndefined, set, isNull, forEach, some, forOwn, transform, isEqual, filter, has, trim, isNumber, remove, values, groupBy, pick, sortBy, inRange } from 'lodash';\nimport * as i3 from '@helix/platform/utils';\nimport { RxStringService, RxNumberUtilsService } from '@helix/platform/utils';\nimport * as i1$1 from '@helix/platform/association/api';\nimport { saveAs } from 'file-saver';\nimport BigNumber from 'bignumber.js';\nimport * as i2$1 from '@helix/platform/ui-kit';\nimport * as i1$2 from '@ngx-translate/core';\n\n// LMA:: This Service is necessary to override the default UploaderService from\n// the Adapt Uploader Component.\nclass UploaderService {\n    deleteFile(file, url) {\n        return of(null);\n    }\n    responseCallback(response) { }\n    sendChunk(requestBody, uploadAsOneChunk, url) {\n        return undefined;\n    }\n    sendFile(file) {\n        return of(null);\n    }\n}\nUploaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UploaderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nUploaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UploaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UploaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nconst coreFieldIds = {\n    displayId: 1,\n    createdBy: 2,\n    createdDate: 3,\n    assignee: 4,\n    modifiedBy: 5,\n    modifiedDate: 6,\n    status: 7,\n    description: 8,\n    notifierListening: 16,\n    id: 379\n};\nconst specialFieldIds = {\n    dataProviderId: 380\n};\nconst resourceTypes = {\n    character: 'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition',\n    localizedCharacter: 'com.bmc.arsys.rx.standardlib.record.LocalizedCharacterFieldDefinition',\n    dateTime: 'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition',\n    selection: 'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition',\n    integer: 'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition',\n    decimal: 'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition',\n    real: 'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition',\n    timeOnly: 'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition',\n    dateOnly: 'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition',\n    attachment: 'com.bmc.arsys.rx.standardlib.record.AttachmentFieldDefinition',\n    boolean: 'com.bmc.arsys.rx.standardlib.record.BooleanFieldDefinition',\n    recordInstance: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldDefinition',\n    object: 'com.bmc.arsys.rx.services.process.domain.record.ObjectFieldDefinition',\n    recordInstanceProcessVariable: 'com.bmc.arsys.rx.services.record.domain.RecordInstance',\n    localizedFieldInstance: 'com.bmc.arsys.rx.services.record.domain.LocalizedFieldInstance',\n    list: 'com.bmc.arsys.rx.standardlib.record.ListFieldDefinition'\n};\nconst resourceTypesByFullName = Object.keys(resourceTypes).reduce((currentValue, resourceType) => {\n    currentValue[resourceTypes[resourceType]] = resourceType;\n    return currentValue;\n}, {});\nconst validBundleIdRegExpString = '[a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z0-9_]+)*(\\\\.([a-zA-Z0-9_]+|[a-zA-Z0-9_][a-zA-Z0-9_-]*[a-zA-Z0-9_]))';\nconst validDefinitionNameRegExpString = `[\n  'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A\n\n  'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\n\n  '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\n\n  0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\n\n  \\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\n\n  \\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D\n\n  \\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F\n  ]*`;\nvar RecordFieldOption;\n(function (RecordFieldOption) {\n    RecordFieldOption[\"System\"] = \"SYSTEM\";\n    RecordFieldOption[\"Required\"] = \"REQUIRED\";\n    RecordFieldOption[\"Optional\"] = \"OPTIONAL\";\n})(RecordFieldOption || (RecordFieldOption = {}));\nconst fieldOptions = {\n    system: RecordFieldOption.System,\n    required: RecordFieldOption.Required,\n    optional: RecordFieldOption.Optional\n};\nconst coreDisplayIdField = {\n    resourceType: resourceTypes.character,\n    name: 'Display ID',\n    description: null,\n    id: coreFieldIds.displayId,\n    fieldOption: RecordFieldOption.System,\n    maxLength: 15,\n    defaultValue: null,\n    anyUserAllowedToSubmit: false,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n};\nconst coreIdField = {\n    resourceType: resourceTypes.character,\n    name: 'ID',\n    description: null,\n    id: coreFieldIds.id,\n    fieldOption: RecordFieldOption.System,\n    maxLength: 128,\n    defaultValue: null,\n    anyUserAllowedToSubmit: true,\n    allowPermissionsOverlay: false,\n    allowOtherPropertiesOverlay: false\n};\nconst joinFieldMapping = 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinitionFieldMapping';\nconst externalFieldMapping = 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinitionFieldMapping';\nconst sourceRecordTypes = {\n    primary: 'PRIMARY_RECORD_DEFINITION',\n    secondary: 'SECONDARY_RECORD_DEFINITION'\n};\nconst joinRecordDefinitionCoreFields = map([coreDisplayIdField, coreIdField], (coreField) => assign({}, coreField, {\n    maxLength: 255,\n    fieldMapping: {\n        resourceType: joinFieldMapping,\n        sourceFieldId: coreField.id,\n        source: sourceRecordTypes.primary\n    }\n}));\nconst maxReservedFieldId = 536870912;\nconst RX_RECORD_DEFINITION = {\n    coreFieldIds,\n    specialFieldIds,\n    alwaysRequiredNonSystemFieldIds: [coreFieldIds.createdBy, coreFieldIds.status, coreFieldIds.description],\n    AR_AUDIT_FIELD_IDS: range(450, 465),\n    AR_MAX_RESERVED_FIELD_ID: maxReservedFieldId,\n    AR_MIN_CUSTOM_FIELD_ID: maxReservedFieldId + 1,\n    AR_CORE_FIELD_IDS: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n    keyFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n    coreFields: [\n        coreDisplayIdField,\n        {\n            resourceType: resourceTypes.character,\n            name: 'Created By',\n            description: null,\n            id: coreFieldIds.createdBy,\n            fieldOption: fieldOptions.required,\n            maxLength: 254,\n            defaultValue: '$USER$',\n            anyUserAllowedToSubmit: true,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.dateTime,\n            name: 'Created Date',\n            description: null,\n            id: coreFieldIds.createdDate,\n            fieldOption: fieldOptions.system,\n            defaultValue: null,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.character,\n            name: 'Assignee',\n            description: null,\n            id: coreFieldIds.assignee,\n            fieldOption: fieldOptions.optional,\n            maxLength: 254,\n            defaultValue: null,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.character,\n            name: 'Modified By',\n            description: null,\n            id: coreFieldIds.modifiedBy,\n            fieldOption: fieldOptions.system,\n            maxLength: 254,\n            defaultValue: null,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.dateTime,\n            name: 'Modified Date',\n            description: null,\n            id: coreFieldIds.modifiedDate,\n            fieldOption: fieldOptions.system,\n            defaultValue: null,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.selection,\n            name: 'Status',\n            description: null,\n            id: coreFieldIds.status,\n            fieldOption: fieldOptions.required,\n            optionNamesById: {\n                0: 'New',\n                1: 'Assigned',\n                2: 'Fixed',\n                3: 'Rejected',\n                4: 'Closed'\n            },\n            displayType: null,\n            defaultValue: 0,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.character,\n            name: 'Description',\n            description: null,\n            id: coreFieldIds.description,\n            fieldOption: fieldOptions.required,\n            maxLength: 254,\n            defaultValue: null,\n            anyUserAllowedToSubmit: true,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        {\n            resourceType: resourceTypes.selection,\n            name: 'Notifier Listening',\n            description: null,\n            id: coreFieldIds.notifierListening,\n            fieldOption: fieldOptions.system,\n            optionNamesById: {\n                0: 'Not Listening',\n                1: 'Listening'\n            },\n            displayType: null,\n            defaultValue: 0,\n            anyUserAllowedToSubmit: false,\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false\n        },\n        coreIdField\n    ],\n    sortableCharacterFieldMaxLength: 4000,\n    fieldOptions,\n    resourceTypes,\n    resourceTypesByFullName,\n    dataTypes: {\n        character: {\n            displayName: 'Text',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.character.label',\n            resourceType: resourceTypes.character,\n            shortName: 'Character'\n        },\n        localizedCharacter: {\n            displayName: 'Localized text',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.localized-character.label',\n            resourceType: resourceTypes.localizedCharacter,\n            shortName: 'LocalizedCharacter'\n        },\n        integer: {\n            displayName: 'Integer',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.integer.label',\n            resourceType: resourceTypes.integer,\n            shortName: 'Integer'\n        },\n        dateTime: {\n            displayName: 'Date/Time',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-time.label',\n            resourceType: resourceTypes.dateTime,\n            shortName: 'DateTime'\n        },\n        selection: {\n            displayName: 'Selection',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.selection.label',\n            resourceType: resourceTypes.selection,\n            shortName: 'Selection'\n        },\n        decimal: {\n            displayName: 'Decimal',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.decimal.label',\n            resourceType: resourceTypes.decimal,\n            shortName: 'Decimal'\n        },\n        real: {\n            displayName: 'Floating',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.real.label',\n            resourceType: resourceTypes.real,\n            shortName: 'Real'\n        },\n        timeOnly: {\n            displayName: 'Time',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.time-only.label',\n            resourceType: resourceTypes.timeOnly,\n            shortName: 'TimeOnly'\n        },\n        dateOnly: {\n            displayName: 'Date',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.date-only.label',\n            resourceType: resourceTypes.dateOnly,\n            shortName: 'DateOnly'\n        },\n        attachment: {\n            displayName: 'Attachment',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.attachment.label',\n            resourceType: resourceTypes.attachment,\n            shortName: 'Attachment'\n        },\n        boolean: {\n            displayName: 'Boolean',\n            labelKey: 'com.bmc.arsys.rx.client.common.data-types.boolean.label',\n            resourceType: resourceTypes.boolean,\n            shortName: 'Boolean',\n            options: [\n                {\n                    value: '',\n                    content: ''\n                },\n                {\n                    value: '1',\n                    content: 'True'\n                },\n                {\n                    value: '0',\n                    content: 'False'\n                }\n            ]\n        },\n        recordInstance: {\n            displayName: 'Record',\n            resourceType: resourceTypes.recordInstance,\n            skipDefaultValue: true\n        },\n        object: {\n            displayName: 'Object',\n            resourceType: resourceTypes.object,\n            skipDefaultValue: true\n        }\n    },\n    recordDefinitionTypes: {\n        regular: {\n            recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.RegularRecordDefinition',\n            displayName: 'Regular'\n        },\n        join: {\n            recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.JoinRecordDefinition',\n            displayName: 'Join'\n        },\n        external: {\n            recordDefinitionType: 'com.bmc.arsys.rx.services.record.domain.ExternalRecordDefinition',\n            displayName: 'External'\n        }\n    },\n    externalRecordDefinitionDataSourceTypes: {\n        webApi: 'Web Api'\n    },\n    externalRecordDefinitionTypes: {\n        custom: 'Custom'\n    },\n    passwordFieldIds: range(50, 71).concat([102, 123, 143]),\n    arCoreFieldIds: range(1, 50).concat(range(71, 100)).concat([coreFieldIds.id, 399]),\n    recordInstanceAttachment: '/api/rx/application/record/attachment',\n    supportedSystemLocales: {\n        recordDefinitionName: 'Supported System Locales',\n        nameFieldId: 56100,\n        codeFieldId: 56101\n    },\n    fieldPermissionTypes: {\n        view: 'VIEW',\n        change: 'CHANGE'\n    },\n    groupIds: {\n        assigneeGroup: 7\n    },\n    securityLabelIds: {\n        assigneeGroup: 112\n    },\n    joinTypes: {\n        inner: {\n            value: 'INNER',\n            displayName: 'Inner join'\n        },\n        outer: {\n            value: 'OUTER',\n            displayName: 'Outer join'\n        }\n    },\n    joinRecordDefinitionCoreFieldIds: map(joinRecordDefinitionCoreFields, 'id'),\n    sourceRecordTypes,\n    joinRecordDefinitionCoreFields,\n    joinFieldMapping,\n    externalFieldMapping,\n    externalRecordDefinitionCoreFieldIds: [coreFieldIds.displayId, coreFieldIds.id],\n    validDefinitionNameRegExpString: validDefinitionNameRegExpString,\n    validDefinitionNameRegex: new RegExp('^' + validDefinitionNameRegExpString + '$'),\n    validFullDefinitionName: new RegExp('^' + validBundleIdRegExpString + '\\\\:' + validDefinitionNameRegExpString + '$')\n};\n\nvar ArchiveType;\n(function (ArchiveType) {\n    ArchiveType[\"CopyToArchiveAndDeleteFromSource\"] = \"COPY_TO_ARCHIVE_AND_DELETE_FROM_SOURCE\";\n    ArchiveType[\"DeleteFromSource\"] = \"DELETE_FROM_SOURCE\";\n    ArchiveType[\"None\"] = \"NONE\";\n})(ArchiveType || (ArchiveType = {}));\nvar AssociationSelectionType;\n(function (AssociationSelectionType) {\n    AssociationSelectionType[\"FollowParent\"] = \"FOLLOW_PARENT\";\n    AssociationSelectionType[\"Selected\"] = \"SPECIFIC_ONLY\";\n    AssociationSelectionType[\"AllEnforced\"] = \"ALL_ENFORCED\";\n    AssociationSelectionType[\"All\"] = \"ALL\";\n})(AssociationSelectionType || (AssociationSelectionType = {}));\n\nclass RxRecordDefinitionService {\n    constructor(httpClient, rxCommandFactoryService, rxGuidService) {\n        this.httpClient = httpClient;\n        this.rxCommandFactoryService = rxCommandFactoryService;\n        this.rxGuidService = rxGuidService;\n        this.renameCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.record.command.RenameRecordDefinitionCommand');\n        this.revertCustomizationCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.record.command.RevertRecordDefinitionCommand');\n    }\n    get(recordDefinitionName, options = {}, skipLocalization = false) {\n        return this.httpClient.get(this.getUrl(recordDefinitionName), options).pipe(tap((recordDefinition) => {\n            if (!skipLocalization) {\n                this.applyLocalization(recordDefinition);\n            }\n        }));\n    }\n    getNew() {\n        const definition = {\n            name: '',\n            description: null,\n            resourceType: RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType,\n            fieldDefinitions: cloneDeep(RX_RECORD_DEFINITION.coreFields),\n            allowPermissionsOverlay: false,\n            allowOtherPropertiesOverlay: false,\n            allowNonAdminToDeleteRecordInstances: false,\n            allowIndexesOverlay: false,\n            allowFieldsOverlay: false,\n            archiveDescriptor: {\n                ageQualifierFieldId: RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n                ageQualifierInDays: 365,\n                archiveDataCriteria: null,\n                archiveRecordDefinitionName: null,\n                archiveType: ArchiveType.None,\n                description: null,\n                includeAttachments: false,\n                isEnabled: false\n            },\n            associationsToFollowForArchive: {\n                specificAssociationNames: [],\n                selectionType: AssociationSelectionType.AllEnforced\n            },\n            enableCognitiveSearch: false,\n            indexDefinitions: [],\n            scope: RX_BUNDLE.definitionScopeTypes.bundle\n        };\n        definition.fieldDefinitions.filter(this.isSelectionFieldDefinition).forEach((selectionFieldDefinition) => {\n            selectionFieldDefinition.optionLabelsById = mapValues(selectionFieldDefinition.optionNamesById, () => this.rxGuidService.generate());\n        });\n        return of(definition);\n    }\n    create(recordDefinition) {\n        return this.httpClient.post(this.getUrl(), recordDefinition);\n    }\n    update(recordDefinition, options) {\n        return this.httpClient.put(this.getUrl(recordDefinition.name), recordDefinition, options);\n    }\n    delete(recordDefinitionName) {\n        return this.httpClient.delete(this.getUrl(recordDefinitionName));\n    }\n    rename(oldRecordDefinitionName, newRecordDefinitionName) {\n        return this.renameCommand.execute({\n            name: oldRecordDefinitionName,\n            newName: newRecordDefinitionName\n        });\n    }\n    revertCustomization(recordDefinitionName) {\n        return this.revertCustomizationCommand.execute({ recordDefinitionName });\n    }\n    getUrl(recordDefinitionName) {\n        return recordDefinitionName\n            ? `/api/rx/application/record/recorddefinition/${encodeURIComponent(recordDefinitionName)}`\n            : '/api/rx/application/record/recorddefinition';\n    }\n    setOptionsByIdProperty(fieldDefinition) {\n        fieldDefinition.optionsById = reduce(fieldDefinition.optionNamesById, (optionsById, optionName, optionId) => {\n            optionsById[optionId] = {\n                id: optionId,\n                label: optionName\n            };\n            return optionsById;\n        }, {});\n    }\n    buildFieldDefinitionsByIdMap(recordDefinition) {\n        return reduce(recordDefinition.fieldDefinitions, (fieldDefinitionsById, fieldDefinition) => {\n            this.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, fieldDefinition.id);\n            return fieldDefinitionsById;\n        }, {});\n    }\n    addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field) {\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n            this.setOptionsByIdProperty(fieldDefinition);\n        }\n        fieldDefinitionsById[field] = fieldDefinition;\n    }\n    setFieldDefinitionsToOptional(recordDefinition) {\n        recordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n            if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n                fieldDefinition.fieldOption = RX_RECORD_DEFINITION.fieldOptions.optional;\n            }\n        });\n        return recordDefinition;\n    }\n    isSelectionFieldDefinition(fieldDefinition) {\n        return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.resourceType) === RX_RECORD_DEFINITION.resourceTypes.selection;\n    }\n    applyLocalization(recordDefinition) {\n        recordDefinition.fieldDefinitions\n            .filter(this.isSelectionFieldDefinition)\n            .forEach((fieldDefinition) => {\n            const localizableStringsForField = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n            fieldDefinition.optionLabelsById = mapValues(defaults(fieldDefinition.optionLabelsById, fieldDefinition.optionNamesById), (stringGuid, optionId) => get(localizableStringsForField, stringGuid, fieldDefinition.optionNamesById[optionId]));\n        });\n    }\n    isRegularRecord(recordDefinition) {\n        return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType;\n    }\n    isExternalRecord(recordDefinition) {\n        return (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n            !this.isCustomRecord(recordDefinition));\n    }\n    isJoinRecord(recordDefinition) {\n        return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType;\n    }\n    isCustomRecord(recordDefinition) {\n        return (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n            recordDefinition.type === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom);\n    }\n    isAutomaticIndex(index) {\n        return (index.unique && size(index.indexFieldIds) === 1 && index.indexFieldIds[0] === RX_RECORD_DEFINITION.coreFieldIds.id);\n    }\n}\nRxRecordDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionService, deps: [{ token: i1.HttpClient }, { token: i2.RxCommandFactoryService }, { token: i3.RxGuidService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.RxCommandFactoryService }, { type: i3.RxGuidService }]; } });\n\nconst recordDefinitionDataPageQuery$1 = 'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionDataPageQuery';\nclass RxRecordDefinitionDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, recordDefinitionDataPageQuery$1);\n        this.injector = injector;\n    }\n}\nRxRecordDefinitionDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordDefinitionDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxRecordDefinitionCacheService {\n    constructor(rxAssociationDefinitionDataPageService, rxAssociationNodeTreeDataPageService, rxRecordDefinitionService) {\n        this.rxAssociationDefinitionDataPageService = rxAssociationDefinitionDataPageService;\n        this.rxAssociationNodeTreeDataPageService = rxAssociationNodeTreeDataPageService;\n        this.rxRecordDefinitionService = rxRecordDefinitionService;\n        this.consumers = new Set();\n        this.recordDefinitions = new Map();\n        this.recordAssociationDefinitions = new Map();\n        this.recordAssociationTrees = new Map();\n    }\n    getRecordAssociationDefinitions(recordDefinitionNames) {\n        recordDefinitionNames = castArray(recordDefinitionNames);\n        const requestedAssociationDefinitions = [];\n        recordDefinitionNames.forEach((recordDefinitionName) => {\n            if (!this.recordAssociationDefinitions.has(recordDefinitionName)) {\n                const recordAssociationDefinition$ = this.rxAssociationDefinitionDataPageService\n                    .getRecordAssociationDefinitions(recordDefinitionName)\n                    .pipe(map$1((result) => fromPairs([[recordDefinitionName, result[0].data]])), shareReplay(1));\n                this.recordAssociationDefinitions.set(recordDefinitionName, recordAssociationDefinition$);\n            }\n            requestedAssociationDefinitions.push(this.recordAssociationDefinitions.get(recordDefinitionName));\n        });\n        return forkJoin(requestedAssociationDefinitions).pipe(map$1((recordAssociationDefinitionData) => {\n            return assign({}, ...recordAssociationDefinitionData);\n        }));\n    }\n    getRecordAssociationTree(recordDefinitionName) {\n        if (!this.recordAssociationTrees.has(recordDefinitionName)) {\n            this.recordAssociationTrees.set(recordDefinitionName, this.rxAssociationNodeTreeDataPageService\n                .get({\n                params: {\n                    startIndex: 0,\n                    pageSize: -1,\n                    depth: 2,\n                    recorddefinition: recordDefinitionName\n                }\n            })\n                .pipe(map$1((dataPage) => dataPage.data), shareReplay(1)));\n        }\n        return this.recordAssociationTrees.get(recordDefinitionName);\n    }\n    getRecordAssociationTrees(recordDefinitionNames) {\n        return forkJoin(recordDefinitionNames.map((recordDefinitionName) => this.getRecordAssociationTree(recordDefinitionName)));\n    }\n    getRecordDefinition(recordDefinitionName, options) {\n        if (!this.recordDefinitions.has(recordDefinitionName)) {\n            const recordDefinition$ = this.rxRecordDefinitionService.get(recordDefinitionName, options).pipe(shareReplay(1));\n            this.recordDefinitions.set(recordDefinitionName, recordDefinition$);\n        }\n        return this.recordDefinitions.get(recordDefinitionName);\n    }\n    getRecordDefinitions(recordDefinitionNames, options) {\n        return forkJoin(recordDefinitionNames.map((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName, options)));\n    }\n    registerConsumer(consumerDestroy$) {\n        this.consumers.add(consumerDestroy$);\n        consumerDestroy$.subscribe(() => {\n            this.consumers.delete(consumerDestroy$);\n            if (isEmpty(this.consumers)) {\n                this.clearCache();\n            }\n        });\n    }\n    clearCache() {\n        this.recordDefinitions.clear();\n        this.recordAssociationDefinitions.clear();\n    }\n}\nRxRecordDefinitionCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionCacheService, deps: [{ token: i1$1.RxAssociationDefinitionDataPageService }, { token: i1$1.RxAssociationNodeTreeDataPageService }, { token: RxRecordDefinitionService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordDefinitionCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionCacheService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxAssociationDefinitionDataPageService }, { type: i1$1.RxAssociationNodeTreeDataPageService }, { type: RxRecordDefinitionService }]; } });\n\nconst recordDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.record.datapage.RecordDefinitionInheritanceDataPageQuery';\nclass RxRecordDefinitionInheritanceDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, recordDefinitionDataPageQuery);\n        this.injector = injector;\n    }\n}\nRxRecordDefinitionInheritanceDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionInheritanceDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordDefinitionInheritanceDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionInheritanceDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionInheritanceDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RecordInstanceValidation {\n    constructor() {\n        this.fieldValidatorsByType = {\n            'com.bmc.arsys.rx.standardlib.record.CharacterFieldDefinition': null,\n            'com.bmc.arsys.rx.standardlib.record.IntegerFieldDefinition': [\n                this.minValidator,\n                this.maxValidator,\n                this.isNaNValidator\n            ],\n            'com.bmc.arsys.rx.standardlib.record.DateTimeFieldDefinition': null,\n            'com.bmc.arsys.rx.standardlib.record.SelectionFieldDefinition': null,\n            'com.bmc.arsys.rx.standardlib.record.DecimalFieldDefinition': [\n                this.minValidator,\n                this.maxValidator,\n                this.isNaNValidator\n            ],\n            'com.bmc.arsys.rx.standardlib.record.RealFieldDefinition': [\n                this.minValidator,\n                this.maxValidator,\n                this.isNaNValidator\n            ],\n            'com.bmc.arsys.rx.standardlib.record.TimeOnlyFieldDefinition': null,\n            'com.bmc.arsys.rx.standardlib.record.DateOnlyFieldDefinition': null\n        };\n    }\n    validate(recordInstance, recordDefinition) {\n        this.fieldDefinitions = recordDefinition.fieldDefinitions;\n        this.fieldInstances = recordInstance.fieldInstances;\n        const errors = Object.keys(this.fieldInstances).reduce((result, fieldId) => {\n            const fieldErrors = this.validateFieldInstance(this.fieldInstances[fieldId], this.fieldInstances[fieldId].value);\n            if (fieldErrors) {\n                result[fieldId] = fieldErrors;\n            }\n            return result;\n        }, {});\n        return isEmpty(errors) ? null : errors;\n    }\n    validateSingleField(fieldId, value) {\n        return this.validateFieldInstance(this.fieldInstances[fieldId], value);\n    }\n    validateFieldInstance(fieldInstance, value) {\n        let errors = {};\n        if (fieldInstance) {\n            const fieldValidators = this.getValidatorsForFieldInstance(fieldInstance);\n            const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n            errors = fieldValidators.reduce((result, validator) => {\n                const validatorResponse = validator.call(this, value, fieldDefinition);\n                if (validatorResponse) {\n                    result = Object.assign(Object.assign({}, result), validatorResponse);\n                }\n                return result;\n            }, {});\n        }\n        return errors;\n    }\n    getValidatorsForFieldInstance(fieldInstance) {\n        const validators = [];\n        if (fieldInstance) {\n            const fieldDefinition = this.getFieldDefinition(fieldInstance.id);\n            const fieldType = fieldDefinition.resourceType;\n            if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n                validators.push(this.isRequired);\n            }\n            if (this.fieldValidatorsByType[fieldType]) {\n                validators.push(...this.fieldValidatorsByType[fieldType]);\n            }\n        }\n        return validators;\n    }\n    getFieldDefinition(fieldId) {\n        return this.fieldDefinitions.find((definition) => definition.id === fieldId);\n    }\n    isRequired(value) {\n        if (isNil(value) || value === '') {\n            return { required: 'Value is required' };\n        }\n        else {\n            return null;\n        }\n    }\n    isNaNValidator(value) {\n        return isNaN(value) ? { nan: `Value cannot be NaN` } : null;\n    }\n    minValidator(value, fieldDefinition) {\n        const minError = { min: `Minimum value is ${fieldDefinition.minValue}` };\n        if (BigNumber.isBigNumber(value) || isFinite$1(value) || this.isFiniteNumberString(value)) {\n            return new BigNumber(value).isLessThan(fieldDefinition.minValue) ? minError : null;\n        }\n        else {\n            return null;\n        }\n    }\n    maxValidator(value, fieldDefinition) {\n        const maxError = { max: `Maximum value is ${fieldDefinition.maxValue}` };\n        if (BigNumber.isBigNumber(value) || isFinite$1(value) || this.isFiniteNumberString(value)) {\n            return new BigNumber(value).isGreaterThan(fieldDefinition.maxValue) ? maxError : null;\n        }\n        else {\n            return null;\n        }\n    }\n    isFiniteNumberString(value) {\n        return isString(value) && value.trim() !== '' && isFinite$1(Number(value));\n    }\n}\n\nclass RecordInstance {\n    constructor(recordDefinition, recordInstance, injector) {\n        this.recordDefinition = recordDefinition;\n        this.injector = injector;\n        this.fieldValueChangedSubject = new Subject();\n        this.validation$ = new BehaviorSubject(null);\n        this.fieldValueChanged$ = this.fieldValueChangedSubject.asObservable();\n        this.rxLogService = this.injector.get(RxLogService);\n        this.rxLocalizationService = this.injector.get(RxLocalizationService);\n        this.rxStringService = this.injector.get(RxStringService);\n        this.rxNumberUtilsService = this.injector.get(RxNumberUtilsService);\n        this.validationService = new RecordInstanceValidation();\n        this.prepareRecordInstance(recordInstance);\n        this.originalData = cloneDeep(recordInstance);\n        Object.assign(this, recordInstance);\n        this.validate();\n    }\n    prepareRecordInstance(recordInstance) {\n        // convert numeric field instance values from string to BigNumber instance\n        this.recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => includes([\n            RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ], fieldDefinition.resourceType))\n            .forEach((fieldDefinition) => {\n            const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n            if (fieldInstance && fieldInstance.value) {\n                fieldInstance.value = new BigNumber(fieldInstance.value);\n            }\n        });\n        // update decimal field definition min and max numbers based on the precision\n        this.recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.decimal.resourceType)\n            .forEach((fieldDefinition) => {\n            // According to the backend side, min and max number must be based on the precision. E.g when:\n            // - precision is 1, safe number will be 1e27 - 0.1 = 99999999999999999999999999.9\n            // - precision is 3, safe number will be 1e25 - 0.001 = 999999999999999999999999.999\n            const base = new BigNumber(0.1).pow(fieldDefinition.precision);\n            const safeRangeNumber = new BigNumber(1e28).multipliedBy(base).minus(base);\n            fieldDefinition.maxValue = new BigNumber(fieldDefinition.maxValue);\n            fieldDefinition.minValue = new BigNumber(fieldDefinition.minValue);\n            if (fieldDefinition.maxValue.isGreaterThanOrEqualTo(safeRangeNumber)) {\n                fieldDefinition.maxValue = safeRangeNumber;\n            }\n            if (fieldDefinition.minValue.isLessThanOrEqualTo(safeRangeNumber.negated())) {\n                fieldDefinition.minValue = safeRangeNumber.negated();\n            }\n        });\n        // convert boolean and selection field instance values from string to number\n        this.recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => includes([RX_RECORD_DEFINITION.dataTypes.boolean.resourceType, RX_RECORD_DEFINITION.dataTypes.selection.resourceType], fieldDefinition.resourceType))\n            .forEach((fieldDefinition) => {\n            const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n            if (fieldInstance && fieldInstance.value) {\n                fieldInstance.value = toNumber(fieldInstance.value);\n            }\n        });\n        // add default value for localized character field component\n        this.recordDefinition.fieldDefinitions\n            .filter((fieldDefinition) => RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType === fieldDefinition.resourceType)\n            .forEach((fieldDefinition) => {\n            const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n            const currentLocaleCode = this.rxLocalizationService.currentLocale;\n            const defaultLocaleCode = 'en-US';\n            if (fieldInstance && !fieldInstance.value && fieldInstance.valueByLocale) {\n                fieldInstance.value =\n                    fieldInstance.valueByLocale[currentLocaleCode] || fieldInstance.valueByLocale[defaultLocaleCode];\n            }\n        });\n        // set placeholder value for password fields\n        RX_RECORD_DEFINITION.passwordFieldIds.forEach((passwordFieldId) => {\n            const passwordFieldInstance = recordInstance.fieldInstances[passwordFieldId];\n            if (passwordFieldInstance) {\n                passwordFieldInstance.value = '********';\n            }\n        });\n    }\n    getFieldValue(fieldId, associatedRecordPath) {\n        const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n        return get(fieldInstance, 'value', null);\n    }\n    setFieldValue(fieldId, value, associatedRecordPath) {\n        const recordInstance = this.getRecordInstance(associatedRecordPath);\n        const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n        const fieldDefinition = find(recordInstance.recordDefinition.fieldDefinitions, { id: fieldId });\n        let newValue = isUndefined(value) ? null : value;\n        if (fieldInstance) {\n            switch (fieldDefinition.resourceType) {\n                case RX_RECORD_DEFINITION.dataTypes.character.resourceType:\n                case RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType:\n                    if (!isNull(newValue)) {\n                        if (!isString(newValue)) {\n                            newValue = String(newValue);\n                        }\n                        else if (this.rxStringService.isEmptySafe(newValue)) {\n                            newValue = null;\n                        }\n                    }\n                    break;\n                case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n                case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n                case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n                    if (!isNull(newValue)) {\n                        if (this.rxNumberUtilsService.isFiniteOrNumberString(newValue)) {\n                            newValue = new BigNumber(value);\n                        }\n                        else {\n                            this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n                            newValue = isNaN(value) ? value : null;\n                        }\n                    }\n                    break;\n                case RX_RECORD_DEFINITION.dataTypes.selection.resourceType:\n                case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType:\n                    if (!isNull(newValue)) {\n                        if (!this.rxStringService.isEmptySafe(newValue) && isFinite(Number(newValue))) {\n                            newValue = Number(newValue);\n                        }\n                        else {\n                            this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n                            newValue = null;\n                        }\n                    }\n                    break;\n                case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n                    if (value instanceof File) {\n                        newValue = value.name;\n                        set(fieldInstance, 'file', value);\n                    }\n                    else {\n                        if (!isNull(newValue)) {\n                            this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n                        }\n                        newValue = null;\n                        delete fieldInstance.file;\n                    }\n                    break;\n            }\n            set(fieldInstance, 'value', newValue);\n            this.validate();\n            recordInstance.fieldValueChangedSubject.next({\n                fieldId,\n                value: fieldInstance.value\n            });\n        }\n    }\n    getFieldProp(fieldId, prop, associatedRecordPath) {\n        const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n        return get(fieldInstance, prop);\n    }\n    setFieldProp(fieldId, prop, value, associatedRecordPath) {\n        const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n        set(fieldInstance, prop, value);\n    }\n    getFieldInstance(fieldId, associatedRecordPath) {\n        if (associatedRecordPath) {\n            return get(this.getRecordInstance(associatedRecordPath), ['fieldInstances', fieldId]);\n        }\n        else {\n            return this.fieldInstances[fieldId];\n        }\n    }\n    getRecordInstance(associatedRecordPath) {\n        return associatedRecordPath ? get(this, ['associationInstances', ...associatedRecordPath]) : this;\n    }\n    isFieldValueChanged(fieldId, newValue, associatedRecordPath) {\n        const fieldDefinition = find(this.getRecordInstance(associatedRecordPath).recordDefinition.fieldDefinitions, {\n            id: fieldId\n        });\n        const value = this.getFieldValue(fieldId, associatedRecordPath);\n        switch (fieldDefinition.resourceType) {\n            case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n                return value !== (newValue instanceof File ? newValue.name : newValue);\n            case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n            case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n            case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n                return !new BigNumber(value).eq(newValue);\n            default:\n                return value !== newValue;\n        }\n    }\n    revertFieldInstances() {\n        this.fieldInstances = cloneDeep(this.originalData.fieldInstances);\n        this.validate();\n        forEach(this.getExtensionRecords(), (recordInstance) => recordInstance.revertFieldInstances());\n    }\n    reset() {\n        Object.assign(this, cloneDeep(this.originalData));\n        this.associationInstances = null;\n        this.validate();\n    }\n    getOriginalRecordInstance() {\n        return new RecordInstance(this.recordDefinition, this.originalData, this.injector);\n    }\n    validate() {\n        const errors = this.validationService.validate(this, this.recordDefinition);\n        this.validation$.next(errors);\n    }\n    validateSingleField(fieldId, value, associatedRecordPath) {\n        let result = {};\n        if (associatedRecordPath) {\n            const associatedRecordInstance = this.getRecordInstance(associatedRecordPath);\n            if (associatedRecordInstance) {\n                result = associatedRecordInstance.validationService.validateSingleField(fieldId, value);\n            }\n        }\n        else {\n            result = this.validationService.validateSingleField(fieldId, value);\n        }\n        return result;\n    }\n    getExtensionRecords() {\n        return reduce(this.associationInstances, (result, value, key) => {\n            forEach(value, (associationRecords, nodeSide) => {\n                result.push(...associationRecords.extensions);\n            });\n            return result;\n        }, []);\n    }\n    isDeletedOrPendingAssociations() {\n        return some(this.associationInstances, (value) => {\n            return some(value, (associationRecords, nodeSide) => {\n                return Boolean(associationRecords.deleted.length || associationRecords.pending.length);\n            });\n        });\n    }\n    logIncorrectFieldValueWarning(value, fieldDefinition) {\n        const fieldTypeName = find(RX_RECORD_DEFINITION.dataTypes, {\n            resourceType: fieldDefinition.resourceType\n        }).displayName;\n        this.rxLogService.warning(`${value} cannot be assigned to ${fieldTypeName} field.`);\n    }\n    prepareForBulkEdit() {\n        forEach(this.fieldInstances, (fieldInstance) => {\n            fieldInstance.value = null;\n            if (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance) {\n                forOwn(fieldInstance.valueByLocale, (value, key) => {\n                    fieldInstance.valueByLocale[key] = null;\n                });\n            }\n        });\n        this.originalData.fieldInstances = cloneDeep(this.fieldInstances);\n        this.validate();\n    }\n}\n\nconst RX_RECORD_INSTANCE = {\n    association: {\n        operationResourceTypes: {\n            associate: 'com.bmc.arsys.rx.services.association.domain.AssociateOperation',\n            disassociate: 'com.bmc.arsys.rx.services.association.domain.DisassociateOperation',\n            createAndAssociate: 'com.bmc.arsys.rx.services.association.domain.CreateAndAssociateOperation',\n            update: 'com.bmc.arsys.rx.services.association.domain.UpdateOperation'\n        }\n    },\n    dataPageQuery: 'com.bmc.arsys.rx.application.record.datapage.RecordInstanceDataPageQuery'\n};\n\nclass RxRecordInstanceDataPageService extends DataPage {\n    constructor(injector, rxLogService) {\n        super(injector, RX_RECORD_INSTANCE.dataPageQuery);\n        this.injector = injector;\n        this.rxLogService = rxLogService;\n    }\n    get(dataPageRequestConfiguration = {}) {\n        this.rxLogService.warning('RxRecordInstanceDataPageService: The get() method is deprecated. Use post() instead.');\n        return super.get(dataPageRequestConfiguration);\n    }\n}\nRxRecordInstanceDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceDataPageService, deps: [{ token: i0.Injector }, { token: i2.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordInstanceDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i2.RxLogService }]; } });\n\nclass RxRecordInstanceUtilsService {\n    constructor(rxRecordInstanceDataPageService, rxLogService) {\n        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;\n        this.rxLogService = rxLogService;\n        this.displayFieldsCache = {};\n    }\n    convertFromDataPageRowToPlainRecordInstance(dataPageRow) {\n        return {\n            id: dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id],\n            fieldInstances: transform(dataPageRow, (result, value, key) => {\n                result[key] = {\n                    id: toNumber(key),\n                    value: value\n                };\n            }, {})\n        };\n    }\n    escapeTextWildcards(value) {\n        // escape double quotes with double quotes, e.g. replace \"textInQuotes\" with \"\"textInQuotes\"\"\n        // escape wildcards with backslash, e.g. replace `search%And_` with `search\\%And\\_`\n        return value.replace(/\"/g, '\"\"').replace(/[%_]/g, '\\\\$&');\n    }\n    isFieldValueEqual(value, other) {\n        if (value instanceof BigNumber || other instanceof BigNumber) {\n            return new BigNumber(value).eq(new BigNumber(other));\n        }\n        else {\n            return isEqual(value, other);\n        }\n    }\n    isNoRecordFoundError(error) {\n        return error instanceof HttpErrorResponse && get(error, 'error[0].messageNumber') === 302;\n    }\n    getFieldValues(recordDefinitionName, recordInstanceIds, fieldIds) {\n        const queryExpression = map(recordInstanceIds, (recordInstanceId) => `'${RX_RECORD_DEFINITION.coreFieldIds.id}'=\"${recordInstanceId}\"`).join(' OR ');\n        const params = {\n            recorddefinition: recordDefinitionName,\n            propertySelection: fieldIds.join(','),\n            queryExpression,\n            pageSize: -1,\n            startIndex: 0\n        };\n        const serializedParams = JSON.stringify(params);\n        if (this.displayFieldsCache[serializedParams]) {\n            return of(this.displayFieldsCache[serializedParams]);\n        }\n        return this.rxRecordInstanceDataPageService.post({ params }).pipe(shareReplay(1), map$1((result) => {\n            this.displayFieldsCache[serializedParams] = result.data;\n            return result.data;\n        }));\n    }\n    // This method parses content-disposition header and returns decoded file name, for example:\n    // 'attachment; filename*=UTF-8\\'\\'foo+bar.jpg' will become 'foo bar.jpg'\n    // Additional notes:\n    // 1. returns empty string if failed to parse content-disposition\n    // 2. '+'  symbols will be replaced with '%20' which will then be evaluated to spaces after decoding\n    tryParseContentDisposition(contentDisposition) {\n        try {\n            let fileName = contentDisposition.match(/(?:attachment; filename\\*=UTF-8'')(.*)/)[1];\n            fileName = fileName.replace(/\\+/g, '%20');\n            return decodeURIComponent(fileName);\n        }\n        catch (e) {\n            this.rxLogService.warning(`Cannot parse content-disposition response header: ${contentDisposition}`);\n            return '';\n        }\n    }\n}\nRxRecordInstanceUtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUtilsService, deps: [{ token: RxRecordInstanceDataPageService }, { token: i2.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordInstanceUtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUtilsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUtilsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxRecordInstanceDataPageService }, { type: i2.RxLogService }]; } });\n\nclass RxRecordInstanceService {\n    constructor(httpClient, rxRecordDefinitionCacheService, rxRecordInstanceUtilsService, injector, ngZone) {\n        this.httpClient = httpClient;\n        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n        this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n        this.injector = injector;\n        this.ngZone = ngZone;\n        this.path = '/api/rx/application/record/recordinstance';\n    }\n    get(recordDefinitionName, recordInstanceId) {\n        return this.getRecordInstance(recordDefinitionName, recordInstanceId);\n    }\n    getNew(recordDefinitionName) {\n        return this.getRecordInstance(recordDefinitionName, '0');\n    }\n    getEmpty(recordDefinitionName) {\n        return this.getNew(recordDefinitionName).pipe(tap((recordInstance) => recordInstance.prepareForBulkEdit()));\n    }\n    save(recordInstance, options) {\n        return this.httpClient.put(`${this.path}/${encodeURIComponent(recordInstance.recordDefinitionName)}/${encodeURIComponent(recordInstance.id)}`, this.prepareRecordInstance(recordInstance), options);\n    }\n    delete(recordDefinitionName, recordInstanceId) {\n        return this.httpClient.delete(`${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`);\n    }\n    prepareAttachments(fieldInstances, isAssociation = false) {\n        const attachedFiles = filter(fieldInstances, (fieldInstance) => Boolean(fieldInstance.file)).map((attachment) => {\n            const keyPrefix = isAssociation ? `${fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value}/` : '';\n            return {\n                key: `${keyPrefix}${attachment.id}`,\n                file: attachment.file\n            };\n        });\n        this.cleanAttachmentFiles(fieldInstances);\n        return attachedFiles;\n    }\n    // There should not be any files in record instance JSON so we are cleaning it\n    cleanAttachmentFiles(fieldInstances) {\n        filter(fieldInstances, (fieldInstance) => has(fieldInstance, 'file')).forEach((fieldInstanceWithFile) => {\n            if (fieldInstanceWithFile.file) {\n                delete fieldInstances[fieldInstanceWithFile.id];\n            }\n            else {\n                delete fieldInstances[fieldInstanceWithFile.id].file;\n            }\n        });\n    }\n    create(recordInstance) {\n        return this.httpClient\n            .post(this.path, this.prepareRecordInstance(recordInstance), {\n            observe: 'response',\n            responseType: 'text'\n        })\n            .pipe(map$1((res) => {\n            let result = {};\n            const locationHeader = res.headers.get('location');\n            if (locationHeader) {\n                result = {\n                    id: locationHeader.substr(locationHeader.lastIndexOf('/') + 1),\n                    url: locationHeader\n                };\n            }\n            return result;\n        }));\n    }\n    getRecordInstance(recordDefinitionName, recordInstanceId) {\n        return forkJoin([\n            this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName),\n            this.getRecordInstanceData(recordDefinitionName, recordInstanceId)\n        ]).pipe(map$1(([recordDefinition, recordInstanceData]) => new RecordInstance(recordDefinition, recordInstanceData, this.injector)));\n    }\n    getRecordInstanceData(recordDefinitionName, recordInstanceId) {\n        return this.httpClient.get(`${this.path}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}`);\n    }\n    prepareRecordInstance(recordInstance) {\n        const modifiedFieldInstances = {};\n        const recordInstanceFormData = new FormData();\n        Object.keys(recordInstance.originalData.fieldInstances).forEach((fieldIdKey) => {\n            const fieldId = Number(fieldIdKey);\n            const fieldInstance = recordInstance.fieldInstances[fieldId];\n            const originalFieldInstance = recordInstance.originalData.fieldInstances[fieldId];\n            if (isString(fieldInstance.value)) {\n                fieldInstance.value = trim(fieldInstance.value);\n            }\n            if (isUndefined(originalFieldInstance) ||\n                (fieldInstance.value === null && originalFieldInstance.value !== null) ||\n                (fieldInstance.value !== null && originalFieldInstance.value === null) ||\n                (fieldInstance.value !== null &&\n                    originalFieldInstance.value !== null &&\n                    !(isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n                    String(fieldInstance.value) !== originalFieldInstance.value) ||\n                ((isNumber(fieldInstance.value) || BigNumber.isBigNumber(fieldInstance.value)) &&\n                    !new BigNumber(fieldInstance.value).isEqualTo(originalFieldInstance.value)) ||\n                (fieldId === RX_RECORD_DEFINITION.coreFieldIds.modifiedDate && fieldInstance.value !== null) ||\n                (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance &&\n                    !isEqual(originalFieldInstance.valueByLocale, fieldInstance.valueByLocale))) {\n                modifiedFieldInstances[fieldId] = fieldInstance;\n            }\n        });\n        const preparedRecordInstance = {\n            id: recordInstance.id,\n            resourceType: recordInstance.resourceType,\n            displayId: recordInstance.displayId,\n            recordDefinitionName: recordInstance.recordDefinitionName,\n            permittedGroupsBySecurityLabels: recordInstance.permittedGroupsBySecurityLabels,\n            permittedUsersBySecurityLabels: recordInstance.permittedUsersBySecurityLabels,\n            permittedRolesBySecurityLabels: recordInstance.permittedRolesBySecurityLabels,\n            fieldInstances: modifiedFieldInstances\n        };\n        let attachedFiles = this.prepareAttachments(preparedRecordInstance.fieldInstances);\n        const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n        // We have to use FormData if we have attachments or associated data\n        if (!isEmpty(attachedFiles) || !isEmpty(associationInstances)) {\n            recordInstanceFormData.append('recordInstance', JSON.stringify(preparedRecordInstance));\n            if (!isEmpty(associationInstances)) {\n                filter(associationInstances, 'recordInstances').forEach((associationConfig) => {\n                    forEach(associationConfig.recordInstances, (instance) => {\n                        attachedFiles = attachedFiles.concat(this.prepareAttachments(instance.fieldInstances, true));\n                    });\n                });\n                recordInstanceFormData.append('associationOperations', JSON.stringify(associationInstances));\n            }\n            attachedFiles.forEach((attachment) => {\n                recordInstanceFormData.append(attachment.key, attachment.file, attachment.file.name);\n            });\n            return recordInstanceFormData;\n        }\n        else {\n            return preparedRecordInstance;\n        }\n    }\n    getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId) {\n        return `${RX_RECORD_DEFINITION.recordInstanceAttachment}/${encodeURIComponent(recordDefinitionName)}/${encodeURIComponent(recordInstanceId)}/${fieldId}`;\n    }\n    downloadAttachment(recordDefinitionName, fieldId, recordInstanceId, fileName) {\n        this.httpClient\n            .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n            .subscribe((fileStream) => {\n            if (fileStream) {\n                const file = new Blob([fileStream], {\n                    type: fileStream.type\n                });\n                this.ngZone.runOutsideAngular(() => {\n                    saveAs(file, fileName);\n                });\n            }\n        });\n    }\n    getAttachment(recordDefinitionName, fieldId, recordInstanceId) {\n        return this.httpClient\n            .get(this.getAttachmentDownloadUrl(recordDefinitionName, fieldId, recordInstanceId), { responseType: 'blob' })\n            .pipe(map$1((fileStream) => {\n            return new Blob([fileStream], {\n                type: fileStream.type\n            });\n        }));\n    }\n    prepareAssociationInstancesForSaving(associationInstances) {\n        const associationPayload = transform(associationInstances, (result, associationInstance, associationDefinitionName) => {\n            forEach(associationInstance, (associationGroups, key) => {\n                const nodeSide = key.split(':')[0];\n                const newAssociations = remove(associationGroups.pending, 'isNewInstance');\n                if (!isEmpty(associationGroups.pending)) {\n                    values(groupBy(associationGroups.pending, (instance) => JSON.stringify(instance.rolesConfig))).forEach((instancesGroup) => {\n                        result.push(assign({\n                            associationDefinitionName: associationDefinitionName,\n                            recordInstanceIds: map(instancesGroup, 'id'),\n                            nodeSide,\n                            resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n                        }, instancesGroup[0].rolesConfig));\n                    });\n                }\n                if (!isEmpty(newAssociations)) {\n                    values(groupBy(newAssociations, (instance) => JSON.stringify(instance.rolesConfig))).forEach((instancesGroup) => {\n                        result.push(assign({\n                            associationDefinitionName: associationDefinitionName,\n                            recordInstances: map(newAssociations, (newAssociation) => pick(newAssociation, ['fieldInstances', 'recordDefinitionName'])),\n                            nodeSide,\n                            resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                        }, instancesGroup[0].rolesConfig));\n                    });\n                }\n                if (!isEmpty(associationGroups.deleted)) {\n                    result.push({\n                        associationDefinitionName: associationDefinitionName,\n                        recordInstanceIds: map(associationGroups.deleted, 'id'),\n                        nodeSide,\n                        resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.disassociate\n                    });\n                }\n                if (!isEmpty(associationGroups.extensions)) {\n                    const extensionRecordInstance = associationGroups.extensions[0];\n                    result.push({\n                        associationDefinitionName: associationDefinitionName,\n                        recordInstances: [this.prepareAssociatedRecordInstanceForSaving(extensionRecordInstance)],\n                        nodeSide,\n                        resourceType: extensionRecordInstance.isNewInstance\n                            ? RX_RECORD_INSTANCE.association.operationResourceTypes.createAndAssociate\n                            : RX_RECORD_INSTANCE.association.operationResourceTypes.update\n                    });\n                }\n            });\n        }, []);\n        return sortBy(associationPayload, (associationData) => {\n            // DISASSOCIATE operations must be at the beginning\n            return associationData.operation === 'ASSOCIATE';\n        });\n    }\n    prepareAssociatedRecordInstanceForSaving(recordInstance) {\n        const recordInstanceClone = this.prepareRecordInstance(recordInstance);\n        recordInstanceClone.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id] =\n            recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id];\n        // todo ychubar fix typings\n        delete recordInstanceClone.isNewInstance;\n        return recordInstanceClone;\n    }\n    createInstanceFromDataPageRow(dataPageRow, recordDefinition) {\n        const plainRecordInstance = this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(dataPageRow);\n        plainRecordInstance.recordDefinitionName = recordDefinition.name;\n        forEach(plainRecordInstance.fieldInstances, (fieldInstance, fieldId) => {\n            const fieldDefinition = find(recordDefinition.fieldDefinitions, { id: Number(fieldId) }) || {};\n            if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) {\n                fieldInstance.resourceType = RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance;\n            }\n            // normalize record instance fields\n            if (!isNull(fieldInstance.value)) {\n                if (isNumber(fieldInstance.value) &&\n                    includes([RX_RECORD_DEFINITION.resourceTypes.boolean, RX_RECORD_DEFINITION.resourceTypes.selection], fieldDefinition.resourceType)) {\n                    fieldInstance.value = String(fieldInstance.value);\n                }\n            }\n        });\n        return new RecordInstance(recordDefinition, plainRecordInstance, this.injector);\n    }\n}\nRxRecordInstanceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceService, deps: [{ token: i1.HttpClient }, { token: RxRecordDefinitionCacheService }, { token: RxRecordInstanceUtilsService }, { token: i0.Injector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordInstanceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: RxRecordDefinitionCacheService }, { type: RxRecordInstanceUtilsService }, { type: i0.Injector }, { type: i0.NgZone }]; } });\n\nclass RxRecordInstanceUpdateService {\n    constructor(rxRecordInstanceService, rxUtilityModalsService) {\n        this.rxRecordInstanceService = rxRecordInstanceService;\n        this.rxUtilityModalsService = rxUtilityModalsService;\n    }\n    execute(recordInstance) {\n        return this.rxRecordInstanceService\n            .save(recordInstance)\n            .pipe(catchError((error) => this.handleModifiedInstanceError(error, recordInstance)));\n    }\n    handleModifiedInstanceError(error, recordInstance) {\n        if (error.status === RX_ERROR_HANDLING.optimisticLockErrorHttpStatus) {\n            return from(this.rxUtilityModalsService.confirmExternalChange(error.error[0].messageText)).pipe(switchMap((isConfirmed) => {\n                if (isConfirmed) {\n                    return this.rxRecordInstanceService.save(recordInstance, {\n                        headers: {\n                            'Override-Optimistic-Lock': 'true'\n                        }\n                    });\n                }\n                else {\n                    return throwError(error);\n                }\n            }));\n        }\n        else {\n            return throwError(error);\n        }\n    }\n}\nRxRecordInstanceUpdateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUpdateService, deps: [{ token: RxRecordInstanceService }, { token: i2$1.RxUtilityModalsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordInstanceUpdateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUpdateService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordInstanceUpdateService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxRecordInstanceService }, { type: i2$1.RxUtilityModalsService }]; } });\n\nclass RxFieldDefinitionService {\n    constructor(rxOverlayService) {\n        this.rxOverlayService = rxOverlayService;\n    }\n    isSystemField(fieldDefinition) {\n        return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.fieldOption) === RX_RECORD_DEFINITION.fieldOptions.system;\n    }\n    isRequiredField(fieldDefinition) {\n        return (fieldDefinition === null || fieldDefinition === void 0 ? void 0 : fieldDefinition.fieldOption) === RX_RECORD_DEFINITION.fieldOptions.required;\n    }\n    isPassword(fieldDefinition) {\n        return includes(RX_RECORD_DEFINITION.passwordFieldIds, fieldDefinition.id);\n    }\n    isSecured(fieldDefinition) {\n        return fieldDefinition.shouldPersistHashed || fieldDefinition.shouldPersistEncrypted;\n    }\n    isReadOnly(fieldDefinition) {\n        return this.isSystemField(fieldDefinition) || this.isInheritedField(fieldDefinition);\n    }\n    isInheritedField(fieldDefinition) {\n        return fieldDefinition.hasOwnProperty('isInherited') && fieldDefinition.isInherited;\n    }\n    isPropertiesCustomizationEnabled(fieldDefinition) {\n        return (this.isTransient(fieldDefinition) ||\n            this.rxOverlayService.isCustomizationEnabled('allowOtherPropertiesOverlay', fieldDefinition));\n    }\n    isTransient(fieldDefinition) {\n        return isUndefined(fieldDefinition.lastUpdateTime);\n    }\n    isOverlayMode(fieldDefinition) {\n        const overlayGroupId = fieldDefinition.overlayGroupId;\n        const overlayDescriptor = fieldDefinition.overlayDescriptor || { parentOverlayGroupId: null };\n        return (this.rxOverlayService.getOverlayOperation(overlayGroupId, overlayDescriptor.parentOverlayGroupId) !==\n            RX_OVERLAY.operationTypes.createdInThisOverlayGroup);\n    }\n    // Is field ID in a range reserved by BMC\n    isReservedField(fieldDefinition, skipValidate = false) {\n        // if (isNumber(fieldDefinition.id)) {\n        if (!skipValidate) {\n            return this.isExternalRecordField(fieldDefinition)\n                ? includes(RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds, fieldDefinition.id)\n                : fieldDefinition.id <= RX_RECORD_DEFINITION.AR_MAX_RESERVED_FIELD_ID;\n        }\n        else {\n            return false;\n        }\n    }\n    isPermissionsCustomizationEnabled(fieldDefinition) {\n        return (this.isTransient(fieldDefinition) ||\n            this.rxOverlayService.isCustomizationEnabled('allowPermissionsOverlay', fieldDefinition));\n    }\n    isSortable(fieldDefinition) {\n        // Records cannot be sorted by a field with unlimited length (maxLength = 0), or by a field longer than 1000 characters.\n        // This applies to character and localized character fields.\n        // Sorting is allowed for fields with unspecified length.\n        return (!isNumber(fieldDefinition.maxLength) ||\n            inRange(fieldDefinition.maxLength, 1, RX_RECORD_DEFINITION.sortableCharacterFieldMaxLength + 1));\n    }\n    isSearchable(fieldDefinition, recordDefinition) {\n        return (includes([RX_RECORD_DEFINITION.dataTypes.character.resourceType, RX_RECORD_DEFINITION.dataTypes.attachment.resourceType], fieldDefinition.resourceType) &&\n            !this.isPassword(fieldDefinition) &&\n            !this.isSecured(fieldDefinition) &&\n            !this.isReadOnly(fieldDefinition) &&\n            this.isPropertiesCustomizationEnabled(fieldDefinition));\n    }\n    isJoinedField(fieldDefinition) {\n        return this.isJoinRecordField(fieldDefinition) && !this.isCoreField(fieldDefinition);\n    }\n    isCoreField(fieldDefinition) {\n        let coreFieldIds = RX_RECORD_DEFINITION.arCoreFieldIds;\n        if (this.isJoinRecordField(fieldDefinition)) {\n            coreFieldIds = RX_RECORD_DEFINITION.joinRecordDefinitionCoreFieldIds;\n        }\n        else if (this.isExternalRecordField(fieldDefinition)) {\n            coreFieldIds = RX_RECORD_DEFINITION.externalRecordDefinitionCoreFieldIds;\n        }\n        return includes(coreFieldIds, fieldDefinition.id);\n    }\n    isExternalRecordField(fieldDefinition) {\n        return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.externalFieldMapping;\n    }\n    canBeAssociatedDisplayField(fieldDefinition) {\n        return ((this.isReservedField(fieldDefinition) || !this.isTransient(fieldDefinition)) &&\n            (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character ||\n                fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter) &&\n            RX_RECORD_DEFINITION.coreFieldIds.id !== fieldDefinition.id);\n    }\n    isJoinRecordField(fieldDefinition) {\n        return get(fieldDefinition, 'fieldMapping.resourceType') === RX_RECORD_DEFINITION.joinFieldMapping;\n    }\n    isDataProviderIdField(fieldDefinition, recordDefinition) {\n        const isCustomRecordDefinition = (recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.type) === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom;\n        return isCustomRecordDefinition && fieldDefinition.id === RX_RECORD_DEFINITION.specialFieldIds.dataProviderId;\n    }\n    isFieldInUserOverlay(fieldDefinition) {\n        return (!fieldDefinition.lastUpdateTime ||\n            this.rxOverlayService.getUserDefaultOverlayGroupId() === fieldDefinition.overlayGroupId);\n    }\n}\nRxFieldDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxFieldDefinitionService, deps: [{ token: i2.RxOverlayService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxFieldDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxFieldDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxFieldDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i2.RxOverlayService }]; } });\n\nclass RxLocaleService {\n    constructor(rxRecordInstanceDataPageService) {\n        this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;\n    }\n    getLocales() {\n        if (!this.locales) {\n            this.locales = this.rxRecordInstanceDataPageService\n                .post({\n                params: {\n                    recorddefinition: RX_RECORD_DEFINITION.supportedSystemLocales.recordDefinitionName,\n                    propertySelection: [\n                        RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId,\n                        RX_RECORD_DEFINITION.supportedSystemLocales.codeFieldId\n                    ].join(','),\n                    sortBy: RX_RECORD_DEFINITION.supportedSystemLocales.nameFieldId\n                }\n            })\n                .pipe(shareReplay(1));\n        }\n        return this.locales;\n    }\n}\nRxLocaleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLocaleService, deps: [{ token: RxRecordInstanceDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxLocaleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLocaleService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLocaleService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxRecordInstanceDataPageService }]; } });\n\nclass RxRecordDefinitionResourceTypePipe {\n    transform(value) {\n        var _a;\n        const resourceType = RX_RECORD_DEFINITION.resourceTypesByFullName[value];\n        return ((_a = RX_RECORD_DEFINITION.dataTypes[resourceType]) === null || _a === void 0 ? void 0 : _a.displayName) || '';\n    }\n}\nRxRecordDefinitionResourceTypePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\nRxRecordDefinitionResourceTypePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipe, name: \"rxRecordDefinitionResourceType\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'rxRecordDefinitionResourceType'\n                }]\n        }] });\n\nclass RxRecordDefinitionResourceTypePipeModule {\n}\nRxRecordDefinitionResourceTypePipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxRecordDefinitionResourceTypePipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipeModule, declarations: [RxRecordDefinitionResourceTypePipe], exports: [RxRecordDefinitionResourceTypePipe] });\nRxRecordDefinitionResourceTypePipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionResourceTypePipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxRecordDefinitionResourceTypePipe],\n                    exports: [RxRecordDefinitionResourceTypePipe]\n                }]\n        }] });\n\nclass RxRecordDefinitionFieldOptionPipe {\n    constructor(translateService) {\n        this.translateService = translateService;\n    }\n    transform(value) {\n        let fieldOption;\n        if (value === RX_RECORD_DEFINITION.fieldOptions.required) {\n            fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label');\n        }\n        else if (value === RX_RECORD_DEFINITION.fieldOptions.optional) {\n            fieldOption = this.translateService.instant('com.bmc.arsys.rx.client.common.no.label');\n        }\n        else if (value === RX_RECORD_DEFINITION.fieldOptions.system) {\n            fieldOption = `${this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label')} (${this.translateService.instant('com.bmc.arsys.rx.client.field-definition.type.system.label')})`;\n        }\n        return fieldOption;\n    }\n}\nRxRecordDefinitionFieldOptionPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipe, deps: [{ token: i1$2.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });\nRxRecordDefinitionFieldOptionPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipe, name: \"rxRecordDefinitionFieldOption\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'rxRecordDefinitionFieldOption'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.TranslateService }]; } });\n\nclass RxRecordDefinitionFieldOptionPipeModule {\n}\nRxRecordDefinitionFieldOptionPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxRecordDefinitionFieldOptionPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipeModule, declarations: [RxRecordDefinitionFieldOptionPipe], exports: [RxRecordDefinitionFieldOptionPipe] });\nRxRecordDefinitionFieldOptionPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordDefinitionFieldOptionPipeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxRecordDefinitionFieldOptionPipe],\n                    exports: [RxRecordDefinitionFieldOptionPipe]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArchiveType, AssociationSelectionType, RX_RECORD_DEFINITION, RX_RECORD_INSTANCE, RecordFieldOption, RecordInstance, RxFieldDefinitionService, RxLocaleService, RxRecordDefinitionCacheService, RxRecordDefinitionDataPageService, RxRecordDefinitionFieldOptionPipe, RxRecordDefinitionFieldOptionPipeModule, RxRecordDefinitionInheritanceDataPageService, RxRecordDefinitionResourceTypePipe, RxRecordDefinitionResourceTypePipeModule, RxRecordDefinitionService, RxRecordInstanceDataPageService, RxRecordInstanceService, RxRecordInstanceUpdateService, RxRecordInstanceUtilsService, UploaderService };\n//# sourceMappingURL=helix-platform-record-api.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}