{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Component, HostListener, Input, ViewChild } from '@angular/core';\nimport * as i1$1 from '@helix/platform/view/api';\nimport { ApplyGridFilterMode, RecordGridNamedFilterOptionKey, OpenViewActionModalSize, OpenViewActionType, OpenViewActionLaunchBehavior, RxViewDefinitionCacheService, ViewComponentPropertyType, RowDataItemIdFieldName, RX_VIEW_DEFINITION, RxViewComponentType, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport * as i1$4 from '@helix/platform/shared/api';\nimport { Tooltip, RX_APPLICATION, RxDefinitionNameService, RX_ERROR_HANDLING, RX_ADMINISTRATION, ExpressionOperatorGroup, RX_DESIGNER } from '@helix/platform/shared/api';\nimport * as i1 from '@helix/platform/utils';\nimport { RxError } from '@helix/platform/utils';\nimport { EMPTY, throwError, merge, of, combineLatest, from, forkJoin, concat, isObservable, defer, ReplaySubject } from 'rxjs';\nimport * as i3$3 from '@helix/platform/view/designer';\nimport { RxViewDesignerActionModel, ViewDesignerFacade, RxViewActionExpressionConfigurator, RxViewDataDictionaryService } from '@helix/platform/view/designer';\nimport { ExpressionFormControlComponent, RadioFormControlComponent, ValidationFormControlComponent, MessageType, RxDefinitionPickerComponent, RxDefinitionPickerType, SelectFormControlComponent, TextFormControlComponent, SwitchFormControlComponent, ValueAccessor, DefinitionPickerOrExpressionFormControlComponent, RxIframeModule } from '@helix/platform/shared/components';\nimport { first, withLatestFrom, pluck, takeUntil, distinctUntilChanged, skip, map, filter, switchMap, take, catchError, switchMapTo, mapTo, shareReplay, tap, defaultIfEmpty } from 'rxjs/operators';\nimport * as i2 from '@helix/platform/view/components';\nimport { RxRecordGridDesignUtilsService, RxRecordGridFilterSelectHelperService, RX_RECORD_GRID, RecordGridFilterSelectControlComponent, RecordEditorMode, ContainerRowWrap, RxAssociationEditingMode } from '@helix/platform/view/components';\nimport * as i4 from '@helix/platform/record/api';\nimport { RxRecordDefinitionCacheService, RX_RECORD_DEFINITION, RX_RECORD_INSTANCE } from '@helix/platform/record/api';\nimport { omit, includes, transform, isObject, defaults, flow, map as map$1, flatten, compact, uniq, get, isFunction, isArray, some, isEmpty, castArray, noop, forEach, forIn, isNull, values, has, pick, filter as filter$1, assign, isNil, isEqual, last, reduce, keys, sortBy, cloneDeep } from 'lodash';\nimport * as i1$3 from '@helix/platform/association/api';\nimport { RX_ASSOCIATED_RECORD_NODE_SIDES, RX_ASSOCIATION_DEFINITION, RxAssociationDefinitionService, RxAssociatedRecordNodeSide } from '@helix/platform/association/api';\nimport * as i2$1 from '@angular/router';\nimport * as i1$2 from '@bmc-ux/adapt-angular';\nimport { DismissReasons, DockedPanelDirection, AdaptDockedPanelModule, AdaptIconModule, AdaptRxTextareaModule, AdaptRxCheckboxModule, AdaptRxLabelModule, AdaptTreeModule, AdaptDropdownModule } from '@bmc-ux/adapt-angular';\nimport * as i3 from '@helix/platform/view/runtime';\nimport { RuntimeViewModalComponent, RuntimeViewModule } from '@helix/platform/view/runtime';\nimport * as i2$3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4$1 from '@ngx-translate/core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport * as i2$2 from '@helix/platform/ui-kit';\nimport { RX_MODAL } from '@helix/platform/ui-kit';\nimport * as i3$1 from '@angular/forms';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3$2 from '@helix/platform/process/api';\nimport { RxProcessDefinitionCacheService, RX_PROCESS_DEFINITION, RxProcessApiModule } from '@helix/platform/process/api';\nimport * as i4$2 from '@angular/platform-browser';\nfunction ResultModalComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelement(1, \"adapt-rx-textarea\", 9);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"label\", i0.ɵɵpipeBind1(2, 2, \"com.bmc.arsys.rx.client.common.messages.label\"));\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.data.details);\n  }\n}\nfunction ProcessDesignerFrameComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = [\"dropdownButton\"];\nfunction RxProcessDesignerElementPickerComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵlistener(\"click\", function RxProcessDesignerElementPickerComponent_span_6_Template_span_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clearDefinition($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nconst RxApplyGridFilterActionName = 'rxApplyGridFilterAction';\nclass RxApplyGridFilterViewActionService {\n  execute(params) {\n    if (params.targetApi) {\n      if (params.targetApi.applyFilters) {\n        params.targetApi.applyFilters(params.filters, params.mode);\n        return EMPTY;\n      } else {\n        throwError(new RxError(`${RxApplyGridFilterActionName}: target component does not support applyFilters API.`));\n      }\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxApplyGridFilterAction: component is not specified.'));\n    }\n  }\n}\nRxApplyGridFilterViewActionService.ɵfac = function RxApplyGridFilterViewActionService_Factory(t) {\n  return new (t || RxApplyGridFilterViewActionService)();\n};\nRxApplyGridFilterViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxApplyGridFilterViewActionService,\n  factory: RxApplyGridFilterViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxApplyGridFilterViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RxApplyGridFilterViewActionDesignModelClass extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n    this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n    this.rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n    this.rxRecordGridFilterSelectHelperService = this.injector.get(RxRecordGridFilterSelectHelperService);\n    // set initial filters select value from child filter components\n    this.sandbox.children$.pipe(first(), withLatestFrom(this.sandbox.actionProperties$.pipe(pluck('filters'))), takeUntil(this.sandbox.destroyed$)).subscribe(([filterComponents, filtersJson]) => {\n      const basicFilters = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponents);\n      this.sandbox.updateActionProperties({\n        filterValue: {\n          basicFilters,\n          filtersJson\n        }\n      });\n    });\n    const filterValue$ = this.sandbox.actionProperties$.pipe(pluck('filterValue'), distinctUntilChanged());\n    // set filters data on filter select change\n    filterValue$.pipe(skip(1), takeUntil(this.sandbox.destroyed$)).subscribe(({\n      filtersJson,\n      basicFilters\n    }) => {\n      const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(basicFilters);\n      this.sandbox.setChildren(filterPayloads);\n      this.sandbox.updateActionProperties({\n        filters: filtersJson\n      });\n    });\n    const mode$ = this.sandbox.actionProperties$.pipe(pluck('mode'), distinctUntilChanged());\n    const targetApi$ = this.sandbox.actionProperties$.pipe(pluck('targetApi'), distinctUntilChanged());\n    const gridGuid$ = targetApi$.pipe(map(RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression));\n    // reset filters after grid change or when clear mode is selected\n    merge(gridGuid$.pipe(skip(1)), mode$.pipe(filter(mode => mode === ApplyGridFilterMode.Clear))).pipe(takeUntil(this.sandbox.destroyed$)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        filterValue: {\n          basicFilters: null,\n          filtersJson: null\n        }\n      });\n    });\n    const gridProperties$ = gridGuid$.pipe(switchMap(guid => guid ? this.viewDesignerFacade.getComponent(guid) : of(null)), map(item => (item === null || item === void 0 ? void 0 : item.type) === RX_RECORD_GRID.type ? item.data : null));\n    const recordDefinition$ = gridProperties$.pipe(map(item => {\n      var _a;\n      return (_a = item === null || item === void 0 ? void 0 : item.recordDefinitionName) !== null && _a !== void 0 ? _a : null;\n    }), switchMap(recordDefinitionName => recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)));\n    const gridColumns$ = gridProperties$.pipe(map(gridData => {\n      var _a;\n      return (_a = gridData === null || gridData === void 0 ? void 0 : gridData.columns) !== null && _a !== void 0 ? _a : [];\n    }));\n    const recordDefinitionFiltered$ = recordDefinition$.pipe(withLatestFrom(gridColumns$), map(([recordDefinition, columns]) => {\n      const fieldIds = columns.filter(col => col.filterable).map(col => col.fieldId);\n      return recordDefinition ? Object.assign(Object.assign({}, recordDefinition), {\n        fieldDefinitions: recordDefinition.fieldDefinitions.filter(definition => fieldIds.includes(String(definition.id)))\n      }) : null;\n    }));\n    const namedFilterOptionsMap$ = gridColumns$.pipe(map(columns => this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(columns)));\n    combineLatest([recordDefinitionFiltered$, mode$]).pipe(withLatestFrom(namedFilterOptionsMap$, gridColumns$), takeUntil(this.sandbox.destroyed$)).subscribe(([[recordDefinition, mode], namedFilterOptions, columns]) => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns));\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      targetApi: null,\n      mode: ApplyGridFilterMode.Append,\n      filterValue: {\n        filtersJson: null,\n        basicFilters: null\n      }\n    }, initialProperties);\n  }\n  getPropertiesByName() {\n    return omit(super.getPropertiesByName(), 'filterValue');\n  }\n  getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns) {\n    const tooltip = new Tooltip('<b>Begin</b><p>Begin a batch of filter updates.</p><br><b>Append</b><p>Applied filters are added with the AND operator; existing filters for the specified fields are removed.</p><br><b>Remove</b><p>Existing filters are removed if they match the applied filters.</p><br><b>Overwrite</b><p>All existing filters are replaced with the applied filters.</p><br><b>Merge</b><p>Existing filters with a range of values are replaced with the matching applied filters; existing filters for the other fields are combined with the matching applied filters using the OR operator; applied filters for new fields are added with the AND operator.</p><br><b>Clear</b><p>All existing filters are removed.</p><br><b>End</b><p>Apply all pending filter updates executed in a batch.</p>');\n    tooltip.maxWidth = 310;\n    const controls = [{\n      name: 'targetApi',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Record grid',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators(),\n        isRequired: true\n      }\n    }, {\n      name: 'mode',\n      component: RadioFormControlComponent,\n      options: {\n        label: 'Mode',\n        tooltip,\n        items: [{\n          label: 'Begin',\n          value: ApplyGridFilterMode.Begin\n        }, {\n          label: 'Append',\n          value: ApplyGridFilterMode.Append\n        }, {\n          label: 'Remove',\n          value: ApplyGridFilterMode.Remove\n        }, {\n          label: 'Overwrite',\n          value: ApplyGridFilterMode.Overwrite\n        }, {\n          label: 'Merge',\n          value: ApplyGridFilterMode.Merge\n        }, {\n          label: 'Clear',\n          value: ApplyGridFilterMode.Clear\n        }, {\n          label: 'End',\n          value: ApplyGridFilterMode.End\n        }]\n      }\n    }];\n    const filterSelectControl = {\n      name: 'filterValue',\n      component: RecordGridFilterSelectControlComponent,\n      options: {\n        primaryRecordDefinition: recordDefinition,\n        selectedFieldIds: columns.map(column => column.fieldId),\n        namedFilterOptions,\n        anchorDisabled: !recordDefinition\n      }\n    };\n    const emptyFilterMessageControl = {\n      name: 'emptyFilterMessage',\n      component: ValidationFormControlComponent,\n      options: {\n        text: 'Record grid expression required to define a filter.',\n        messageType: MessageType.Error,\n        customStyle: {\n          'margin-top': '-1rem'\n        }\n      }\n    };\n    if (!includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], mode)) {\n      controls.push(filterSelectControl);\n      if (!recordDefinition) {\n        controls.push(emptyFilterMessageControl);\n      }\n    }\n    return controls;\n  }\n  static extractGuidFromExpression(val) {\n    var _a;\n    const matches = val === null || val === void 0 ? void 0 : val.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n    return (_a = matches && matches[1]) !== null && _a !== void 0 ? _a : null;\n  }\n}\nclass RxApplyGridFilterViewActionDefinitionAdapterService {\n  constructor(rxJsonParserService, rxRecordGridFilterHelperService) {\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;\n  }\n  adaptDefinition({\n    componentDefinitions,\n    propertiesByName\n  }) {\n    const recordGridFilters = componentDefinitions.map(definition => {\n      let value = definition.propertiesByName.value;\n      const parsedValue = this.rxJsonParserService.tryParseJson(value);\n      if (parsedValue && parsedValue[RecordGridNamedFilterOptionKey]) {\n        value = parsedValue;\n      }\n      return {\n        guid: definition.guid,\n        fieldId: definition.propertiesByName.fieldId,\n        value\n      };\n    });\n    // @ts-ignore - converting type\n    propertiesByName.filters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(propertiesByName.filters, recordGridFilters);\n  }\n}\nRxApplyGridFilterViewActionDefinitionAdapterService.ɵfac = function RxApplyGridFilterViewActionDefinitionAdapterService_Factory(t) {\n  return new (t || RxApplyGridFilterViewActionDefinitionAdapterService)(i0.ɵɵinject(i1.RxJsonParserService), i0.ɵɵinject(i2.RxRecordGridFilterHelperService));\n};\nRxApplyGridFilterViewActionDefinitionAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxApplyGridFilterViewActionDefinitionAdapterService,\n  factory: RxApplyGridFilterViewActionDefinitionAdapterService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxApplyGridFilterViewActionDefinitionAdapterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxJsonParserService\n    }, {\n      type: i2.RxRecordGridFilterHelperService\n    }];\n  }, null);\n})();\nclass ApplyGridFilterViewActionModule {\n  constructor(rxViewActionRegistryService, rxApplyGridFilterViewActionService, rxApplyGridFilterViewActionDefinitionAdapterService, rxViewActionDefinitionAdapterRegistryService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxApplyGridFilterViewActionService = rxApplyGridFilterViewActionService;\n    this.rxApplyGridFilterViewActionDefinitionAdapterService = rxApplyGridFilterViewActionDefinitionAdapterService;\n    this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n    this.rxViewActionRegistryService.register({\n      name: RxApplyGridFilterActionName,\n      label: 'Apply grid filter',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: rxApplyGridFilterViewActionService,\n      designModel: RxApplyGridFilterViewActionDesignModelClass,\n      parameters: [{\n        name: 'targetApi',\n        label: 'Record grid',\n        isRequired: true,\n        enableExpressionEvaluation: true\n      }, {\n        name: 'mode',\n        label: 'Mode'\n      }, {\n        name: 'filters'\n      }]\n    });\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(RxApplyGridFilterActionName, this.rxApplyGridFilterViewActionDefinitionAdapterService);\n  }\n}\nApplyGridFilterViewActionModule.ɵfac = function ApplyGridFilterViewActionModule_Factory(t) {\n  return new (t || ApplyGridFilterViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxApplyGridFilterViewActionService), i0.ɵɵinject(RxApplyGridFilterViewActionDefinitionAdapterService), i0.ɵɵinject(i1$1.RxViewActionDefinitionAdapterRegistryService));\n};\nApplyGridFilterViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ApplyGridFilterViewActionModule\n});\nApplyGridFilterViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplyGridFilterViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxApplyGridFilterViewActionService\n    }, {\n      type: RxApplyGridFilterViewActionDefinitionAdapterService\n    }, {\n      type: i1$1.RxViewActionDefinitionAdapterRegistryService\n    }];\n  }, null);\n})();\nconst RX_OPEN_VIEW = {\n  actionName: 'rxOpenViewAction',\n  modalSize: OpenViewActionModalSize,\n  type: OpenViewActionType,\n  launchBehavior: OpenViewActionLaunchBehavior\n};\nclass RxOpenViewActionService {\n  constructor(adaptDockedPanelService, adaptModalService, router, rxRuntimeViewUtilsService, rxViewActionUtilsService) {\n    this.adaptDockedPanelService = adaptDockedPanelService;\n    this.adaptModalService = adaptModalService;\n    this.router = router;\n    this.rxRuntimeViewUtilsService = rxRuntimeViewUtilsService;\n    this.rxViewActionUtilsService = rxViewActionUtilsService;\n  }\n  execute(params) {\n    const inputParams = transform(params.viewParams, (result, value, key) => {\n      result[key] = isObject(value) ? JSON.stringify(value) : String(value !== null && value !== void 0 ? value : '');\n    }, {});\n    return this.rxRuntimeViewUtilsService.isViewCancellable(params.viewDefinitionName).pipe(switchMap(isViewCancellable => {\n      let runtimeViewApi;\n      const modalData = {\n        configuration: {\n          viewDefinitionName: params.viewDefinitionName,\n          inputParams: inputParams,\n          onRegisterApi(api) {\n            runtimeViewApi = api;\n          }\n        },\n        title: params.presentation.title,\n        notification: params.presentation.notification,\n        isCancellable: isViewCancellable\n      };\n      const modalConfig = {\n        beforeDismiss: reason => {\n          // determine if the view is being closed programmatically,\n          // i.e. via executing the Close View action.\n          const isCloseViewAction = !Object.values(DismissReasons).includes(reason);\n          // do not close modal/blade when user clicked on backdrop except when view is cancellable\n          if (!isCloseViewAction && (reason !== DismissReasons.BACKDROP_CLICK || isViewCancellable)) {\n            runtimeViewApi.cancel().pipe(take(1), catchError(error => error ? throwError(error) : EMPTY)).subscribe();\n          }\n          // only allow to close view if dismiss is triggered by close view action with act as cancel\n          return isCloseViewAction;\n        },\n        blockKeyboard: !isViewCancellable,\n        content: RuntimeViewModalComponent,\n        size: params.presentation.modalSize,\n        data: modalData\n      };\n      switch (params.presentation.type) {\n        case RX_OPEN_VIEW.type.FullWidth:\n          {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n        case RX_OPEN_VIEW.type.CenteredModal:\n          {\n            return this.adaptModalService.open(modalConfig);\n          }\n        case RX_OPEN_VIEW.type.DockedLeftModal:\n          {\n            return this.adaptDockedPanelService.open(defaults({\n              direction: DockedPanelDirection.LEFT\n            }, modalConfig));\n          }\n        case RX_OPEN_VIEW.type.DockedRightModal:\n          {\n            return this.adaptDockedPanelService.open(defaults({\n              direction: DockedPanelDirection.RIGHT\n            }, modalConfig));\n          }\n        default:\n          {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n      }\n    }));\n  }\n  openFullWidth(launchBehavior, viewDefinitionName, inputParams) {\n    const url = this.rxViewActionUtilsService.generateViewUrl(viewDefinitionName, inputParams);\n    if (launchBehavior === RX_OPEN_VIEW.launchBehavior.NewWindow) {\n      window.open(`${window.location.pathname}#${url}`);\n      return throwError(null);\n    } else {\n      return from(this.router.navigateByUrl(url)).pipe(switchMapTo(throwError(null)));\n    }\n  }\n}\nRxOpenViewActionService.ɵfac = function RxOpenViewActionService_Factory(t) {\n  return new (t || RxOpenViewActionService)(i0.ɵɵinject(i1$2.AdaptDockedPanelService), i0.ɵɵinject(i1$2.AdaptModalService), i0.ɵɵinject(i2$1.Router), i0.ɵɵinject(i3.RxRuntimeViewUtilsService), i0.ɵɵinject(i1$1.RxViewActionUtilsService));\n};\nRxOpenViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxOpenViewActionService,\n  factory: RxOpenViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxOpenViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.AdaptDockedPanelService\n    }, {\n      type: i1$2.AdaptModalService\n    }, {\n      type: i2$1.Router\n    }, {\n      type: i3.RxRuntimeViewUtilsService\n    }, {\n      type: i1$1.RxViewActionUtilsService\n    }];\n  }, null);\n})();\nclass RxAssociateViewActionService {\n  constructor(rxAssociationInstanceService, rxOpenViewActionService, rxAssociationDefinitionService, rxLogService, rxViewActionUtilsService) {\n    this.rxAssociationInstanceService = rxAssociationInstanceService;\n    this.rxOpenViewActionService = rxOpenViewActionService;\n    this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n    this.rxLogService = rxLogService;\n    this.rxViewActionUtilsService = rxViewActionUtilsService;\n  }\n  execute(params) {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxAssociateAction: Associated Record ID is not defined.'));\n    }\n    return forkJoin([this.getInstanceIds(params), this.rxAssociationDefinitionService.get(params.associationDefinitionName)]).pipe(switchMap(([instanceIds, associationDefinition]) => {\n      let nodeAIds = [];\n      let nodeBIds = [];\n      if (instanceIds.length) {\n        if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n          nodeAIds = instanceIds;\n          nodeBIds = [params.associatedRecordId];\n        } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n          nodeAIds = [params.associatedRecordId];\n          nodeBIds = instanceIds;\n        }\n        if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value) {\n          nodeAIds = nodeAIds[0];\n          nodeBIds = nodeBIds[0];\n        } else if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value) {\n          nodeAIds = nodeAIds[0];\n        }\n        return this.rxAssociationInstanceService.associateRecords(params.associationDefinitionName, nodeAIds, nodeBIds, params.useDefaultRoles, params.nodeARole, params.nodeBRole).pipe(mapTo(instanceIds));\n      }\n      return of(instanceIds);\n    }));\n  }\n  getInstanceIds(params) {\n    return this.rxOpenViewActionService.execute({\n      presentation: {\n        modalSize: RX_OPEN_VIEW.modalSize.Large,\n        type: RX_OPEN_VIEW.type.DockedRightModal\n      },\n      viewDefinitionName: params.viewDefinitionName,\n      viewParams: null\n    }).pipe(map(output => {\n      const instanceIds = flow(outs => map$1(outs, out => this.rxViewActionUtilsService.extractRecordIds(out)), flatten, compact, uniq)(output);\n      this.rxLogService.debug(`RxAssociateAction: associating ${instanceIds.length} record(s)`);\n      return instanceIds;\n    }));\n  }\n}\nRxAssociateViewActionService.ɵfac = function RxAssociateViewActionService_Factory(t) {\n  return new (t || RxAssociateViewActionService)(i0.ɵɵinject(i1$3.RxAssociationInstanceService), i0.ɵɵinject(RxOpenViewActionService), i0.ɵɵinject(i1$3.RxAssociationDefinitionService), i0.ɵɵinject(i1$4.RxLogService), i0.ɵɵinject(i1$1.RxViewActionUtilsService));\n};\nRxAssociateViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociateViewActionService,\n  factory: RxAssociateViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociateViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$3.RxAssociationInstanceService\n    }, {\n      type: RxOpenViewActionService\n    }, {\n      type: i1$3.RxAssociationDefinitionService\n    }, {\n      type: i1$4.RxLogService\n    }, {\n      type: i1$1.RxViewActionUtilsService\n    }];\n  }, null);\n})();\nclass RxOpenViewDefinitionAdapterService {\n  constructor() {\n    this.modalSizeMap = {\n      small: RX_OPEN_VIEW.modalSize.Small,\n      medium: RX_OPEN_VIEW.modalSize.Medium,\n      large: RX_OPEN_VIEW.modalSize.Large\n    };\n  }\n  adaptDefinition(viewComponentDefinition) {\n    const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n    if (propertiesByName.name === RX_OPEN_VIEW.actionName) {\n      const modalSize = propertiesByName.presentation.modalSize;\n      if (this.modalSizeMap[modalSize]) {\n        propertiesByName.presentation.modalSize = this.modalSizeMap[modalSize];\n      }\n    }\n  }\n}\nRxOpenViewDefinitionAdapterService.ɵfac = function RxOpenViewDefinitionAdapterService_Factory(t) {\n  return new (t || RxOpenViewDefinitionAdapterService)();\n};\nRxOpenViewDefinitionAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxOpenViewDefinitionAdapterService,\n  factory: RxOpenViewDefinitionAdapterService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxOpenViewDefinitionAdapterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst RX_OPEN_VIEW_MODAL_SIZE_OPTIONS = [{\n  id: OpenViewActionModalSize.Xsmall,\n  name: 'Extra Small (450 px)'\n}, {\n  id: OpenViewActionModalSize.Small,\n  name: 'Small (650 px)'\n}, {\n  id: OpenViewActionModalSize.Medium,\n  name: 'Medium (800 px)'\n}, {\n  id: OpenViewActionModalSize.Large,\n  name: 'Large (1024 px)'\n}, {\n  id: OpenViewActionModalSize.Xlarge,\n  name: 'Extra Large (1200 px)'\n}, {\n  id: OpenViewActionModalSize.Xxlarge,\n  name: 'Extra Extra Large (1600 px)'\n}, {\n  id: OpenViewActionModalSize.FullSize,\n  name: 'Full Size'\n}];\nconst RX_OPEN_VIEW_TYPE_OPTIONS = [{\n  id: OpenViewActionType.FullWidth,\n  name: 'Full width'\n}, {\n  id: OpenViewActionType.CenteredModal,\n  name: 'Centered modal'\n}, {\n  id: OpenViewActionType.DockedLeftModal,\n  name: 'Docked left modal'\n}, {\n  id: OpenViewActionType.DockedRightModal,\n  name: 'Docked right modal'\n}];\nconst RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS = [{\n  id: OpenViewActionLaunchBehavior.NewWindow,\n  name: 'Open in a new tab'\n}, {\n  id: OpenViewActionLaunchBehavior.SameWindow,\n  name: 'Open in the same tab'\n}];\nclass RxOpenViewModelHelperService {\n  getOpenViewInspector(inputParams, presentationType, presentationModalSize, expressionConfigurator) {\n    const viewInputControls = inputParams.map(param => ({\n      name: `viewParams.${param.name}`,\n      component: ExpressionFormControlComponent,\n      options: {\n        label: param.name,\n        dataDictionary$: expressionConfigurator.getDataDictionary(param.name),\n        operators: expressionConfigurator.getOperators(param.name)\n      }\n    }));\n    const isFullWidthType = presentationType === OpenViewActionType.FullWidth;\n    const isCenteredModalWithFullSize = presentationType === OpenViewActionType.CenteredModal && presentationModalSize === OpenViewActionModalSize.FullSize;\n    return [{\n      name: 'viewDefinitionName',\n      component: RxDefinitionPickerComponent,\n      options: {\n        label: 'View',\n        required: true,\n        definitionType: RxDefinitionPickerType.View\n      }\n    }, ...viewInputControls, {\n      name: 'presentation.type',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Presentation',\n        tooltip: new Tooltip('Select how to display the view in the application.'),\n        options: RX_OPEN_VIEW_TYPE_OPTIONS,\n        sortAlphabetically: false\n      }\n    }, ...(isFullWidthType ? [{\n      name: 'presentation.launchBehavior',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Launch behavior',\n        options: RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n        sortAlphabetically: true\n      }\n    }] : [{\n      name: 'presentation.modalSize',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Size',\n        options: presentationType === OpenViewActionType.CenteredModal ? RX_OPEN_VIEW_MODAL_SIZE_OPTIONS : RX_OPEN_VIEW_MODAL_SIZE_OPTIONS.filter(option => option.id !== OpenViewActionModalSize.FullSize),\n        sortAlphabetically: false\n      }\n    }, ...(isCenteredModalWithFullSize ? [] : [{\n      name: 'presentation.title',\n      component: TextFormControlComponent,\n      options: {\n        label: 'Title'\n      }\n    }])])];\n  }\n}\nRxOpenViewModelHelperService.ɵfac = function RxOpenViewModelHelperService_Factory(t) {\n  return new (t || RxOpenViewModelHelperService)();\n};\nRxOpenViewModelHelperService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxOpenViewModelHelperService,\n  factory: RxOpenViewModelHelperService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxOpenViewModelHelperService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RxOpenViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.sandbox = sandbox;\n    this.rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n    this.rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n    const viewDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('viewDefinitionName'), distinctUntilChanged());\n    const presentationType$ = this.sandbox.actionProperties$.pipe(pluck('presentation.type'), distinctUntilChanged());\n    const presentationModalSize$ = this.sandbox.actionProperties$.pipe(pluck('presentation.modalSize'), distinctUntilChanged());\n    combineLatest([viewDefinitionName$, presentationType$, presentationModalSize$]).pipe(switchMap(([viewDefinitionName, presentationType, presentationModalSize]) => this.getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize))).subscribe(config => this.sandbox.setActionPropertyEditorConfig(config));\n    viewDefinitionName$.pipe(switchMap(viewDefinitionName => this.getViewOutputParams(viewDefinitionName))).subscribe(outputParams => {\n      this.sandbox.setActionOutputDataDictionary(outputParams.map(({\n        name\n      }) => ({\n        label: name,\n        expression: this.getOutputExpressionForPropertyPath(name)\n      })));\n    });\n    presentationType$.pipe(skip(1)).subscribe(presentationType => {\n      let props = this.sandbox.getActionProperties();\n      if (presentationType === OpenViewActionType.FullWidth) {\n        props['presentation.launchBehavior'] = OpenViewActionLaunchBehavior.SameWindow;\n        props = omit(props, ['presentation.modalSize', 'presentation.title']);\n      } else {\n        props = omit(props, ['presentation.launchBehavior']);\n        if (!props['presentation.modalSize'] || this.sandbox.getActionPropertyValue('presentation.modalSize') === OpenViewActionModalSize.FullSize) {\n          props['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n        }\n      }\n      this.sandbox.setActionProperties(props);\n    });\n    presentationModalSize$.pipe(skip(1)).subscribe(presentationModalSize => {\n      if (presentationModalSize === OpenViewActionModalSize.FullSize) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['presentation.title']));\n      }\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      viewDefinitionName: null,\n      'presentation.type': OpenViewActionType.FullWidth,\n      'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow\n    }, initialProperties);\n  }\n  getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize) {\n    return this.getViewInputParams(viewDefinitionName).pipe(map(inputParams => this.rxOpenViewModelHelperService.getOpenViewInspector(inputParams, presentationType, presentationModalSize, this.expressionConfigurator)));\n  }\n  getViewInputParams(viewDefinitionName) {\n    return viewDefinitionName ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams')) : of([]);\n  }\n  getViewOutputParams(viewDefinitionName) {\n    return viewDefinitionName ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('outputParams')) : of([]);\n  }\n}\nclass OpenViewActionModule {\n  constructor(rxViewActionDefinitionAdapterRegistryService, openViewDefinitionAdapterService, rxViewActionRegistryService, rxOpenViewActionService) {\n    this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n    this.openViewDefinitionAdapterService = openViewDefinitionAdapterService;\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxOpenViewActionService = rxOpenViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: RX_OPEN_VIEW.actionName,\n      label: 'Open view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxOpenViewActionService,\n      designModel: RxOpenViewActionDesignModel,\n      parameters: [{\n        name: 'viewDefinitionName',\n        label: 'View',\n        isRequired: true\n      }, {\n        name: 'viewParams',\n        enableExpressionEvaluation: true\n      }, {\n        name: 'presentation',\n        attributes: [{\n          name: 'title',\n          localizable: true\n        }]\n      }]\n    });\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(RX_OPEN_VIEW.actionName, this.openViewDefinitionAdapterService);\n  }\n}\nOpenViewActionModule.ɵfac = function OpenViewActionModule_Factory(t) {\n  return new (t || OpenViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionDefinitionAdapterRegistryService), i0.ɵɵinject(RxOpenViewDefinitionAdapterService), i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxOpenViewActionService));\n};\nOpenViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: OpenViewActionModule,\n  imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule]\n});\nOpenViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RuntimeViewModule, AdaptDockedPanelModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OpenViewActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionDefinitionAdapterRegistryService\n    }, {\n      type: RxOpenViewDefinitionAdapterService\n    }, {\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxOpenViewActionService\n    }];\n  }, null);\n})();\nclass RxAssociateViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n    this.rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n    this.rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('recordDefinitionName'), distinctUntilChanged());\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('associationDefinitionName'), distinctUntilChanged());\n    const associationNameOptions$ = recordDefinitionName$.pipe(switchMap(recordDefinitionName => recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(map(associationDefinitions => associationDefinitions[recordDefinitionName].map(recordDefinition => ({\n      id: recordDefinition.name,\n      name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n    })))) : of([])));\n    const associationDefinition$ = associationDefinitionName$.pipe(switchMap(associationDefinitionName => associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)), shareReplay(1));\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(map(association => association ? association.nodeAId === association.nodeBId : false));\n    const isManyToManyAssociation$ = associationDefinition$.pipe(map(association => association ? association.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value : false));\n    const useDefaultRoles$ = this.sandbox.actionProperties$.pipe(pluck('useDefaultRoles'), map(Boolean), distinctUntilChanged());\n    useDefaultRoles$.pipe(distinctUntilChanged(), skip(1)).subscribe(useDefaultRoles => {\n      if (useDefaultRoles) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['nodeARole', 'nodeBRole']));\n      }\n    });\n    const associationRoleOptions$ = associationDefinition$.pipe(map(association => association ? [{\n      id: RxAssociatedRecordNodeSide.NodeA,\n      name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n    }, {\n      id: RxAssociatedRecordNodeSide.NodeB,\n      name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n    }] : []));\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n    associationDefinition$.pipe(\n    // skip initial props set\n    skip(1), withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)).subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n      if (associationDefinition && !isSymmetricalAssociation) {\n        const associationDefinitionRole = recordDefinitionName === associationDefinition.nodeAId ? RxAssociatedRecordNodeSide.NodeA : RxAssociatedRecordNodeSide.NodeB;\n        this.sandbox.updateActionProperties({\n          associationDefinitionRole\n        });\n      } else {\n        this.sandbox.updateActionProperties({\n          associationDefinitionRole: null\n        });\n      }\n    });\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$, useDefaultRoles$]).pipe(withLatestFrom(isSymmetricalAssociation$, isManyToManyAssociation$)).subscribe(([[recordDefinitionName, associationNameOptions, associationRoleOptions, useDefaultRoles], isSymmetricalAssociation, isManyToManyAssociation]) => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation, isManyToManyAssociation, useDefaultRoles));\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      viewDefinitionName: null\n    }, initialProperties);\n  }\n  getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation, isManyToManyAssociation, useDefaultRoles) {\n    return [{\n      name: 'recordDefinitionName',\n      component: RxDefinitionPickerComponent,\n      options: {\n        label: 'Record definition to associate',\n        definitionType: RxDefinitionPickerType.StandardDataRecord,\n        required: true\n      }\n    }, ...(recordDefinitionName ? [{\n      name: 'associationDefinitionName',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Association to use',\n        options: associationNameOptions,\n        required: true\n      }\n    }, {\n      name: 'associationDefinitionRole',\n      component: SelectFormControlComponent,\n      isDisabled: !isSymmetricalAssociation,\n      options: {\n        label: 'Associated record node side',\n        required: true,\n        options: associationRoleOptions\n      }\n    }, {\n      name: 'associatedRecordId',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Associated record ID',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators(),\n        isRequired: true\n      }\n    }, {\n      name: 'viewDefinitionName',\n      component: RxDefinitionPickerComponent,\n      options: {\n        label: 'View for selecting or creating associated records',\n        required: true,\n        definitionType: RxDefinitionPickerType.View\n      }\n    }, ...(isManyToManyAssociation ? [{\n      name: 'useDefaultRoles',\n      component: SwitchFormControlComponent,\n      options: {\n        label: 'Use default roles'\n      }\n    }, ...(isManyToManyAssociation && useDefaultRoles ? [] : [{\n      name: 'nodeARole',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'First record role',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators()\n      }\n    }, {\n      name: 'nodeBRole',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Second record role',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators()\n      }\n    }])] : [])] : [])];\n  }\n}\nclass AssociateViewActionModule {\n  constructor(rxViewActionRegistryService, rxAssociateViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxAssociateViewActionService = rxAssociateViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxAssociateAction',\n      label: 'Associate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxAssociateViewActionService,\n      designModel: RxAssociateViewActionDesignModel,\n      parameters: [{\n        name: 'recordDefinitionName',\n        label: 'Record definition to associate',\n        isRequired: true,\n        type: ViewComponentPropertyType.String\n      }, {\n        name: 'associationDefinitionName',\n        label: 'Association to use',\n        isRequired: true\n      }, {\n        name: 'associationDefinitionRole',\n        label: 'Associated record node side',\n        isRequired: true\n      }, {\n        name: 'associatedRecordId',\n        label: 'Associated record ID',\n        enableExpressionEvaluation: true,\n        isRequired: true\n      }, {\n        name: 'viewDefinitionName',\n        label: 'View for selecting or creating associated records',\n        isRequired: true,\n        type: ViewComponentPropertyType.String\n      }, {\n        name: 'useDefaultRoles'\n      }, {\n        name: 'nodeARole',\n        enableExpressionEvaluation: true\n      }, {\n        name: 'nodeBRole',\n        enableExpressionEvaluation: true\n      }]\n    });\n  }\n}\nAssociateViewActionModule.ɵfac = function AssociateViewActionModule_Factory(t) {\n  return new (t || AssociateViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxAssociateViewActionService));\n};\nAssociateViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AssociateViewActionModule,\n  imports: [OpenViewActionModule]\n});\nAssociateViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[OpenViewActionModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AssociateViewActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OpenViewActionModule]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxAssociateViewActionService\n    }];\n  }, null);\n})();\nclass RxAvcAssociateActionService {\n  constructor(rxGuidService, rxOpenViewActionService, rxStringService, rxRecordInstanceUtilsService) {\n    this.rxGuidService = rxGuidService;\n    this.rxOpenViewActionService = rxOpenViewActionService;\n    this.rxStringService = rxStringService;\n    this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n  }\n  execute(params) {\n    return this.rxOpenViewActionService.execute({\n      viewDefinitionName: params.viewDefinitionName,\n      viewParams: null,\n      presentation: {\n        modalSize: OpenViewActionModalSize.Large,\n        type: OpenViewActionType.DockedRightModal\n      }\n    }).pipe(tap(output => {\n      const recordInstances = flow(outputs => map$1(outputs, outputsItem => this.extractRecordInstance(outputsItem)), flatten, compact, uniq)(output);\n      params.associationViewComponent.associate(recordInstances);\n    }), switchMapTo(EMPTY));\n  }\n  extractRecordInstance(source) {\n    let recordInstanceFields = [];\n    // for record grid\n    if (isFunction(source.getSelectedRows)) {\n      recordInstanceFields = map$1(source.getSelectedRows(), this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n      // for record grid row\n    } else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n      recordInstanceFields.push(this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(source));\n      // for selected rows\n    } else if (isArray(source) && some(source, isObject)) {\n      recordInstanceFields = map$1(source, this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n      // for existing record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && source.id) {\n      recordInstanceFields.push(source);\n      // for new record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && !source.id) {\n      const dummyId = this.rxGuidService.generate();\n      source.id = dummyId;\n      source.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value = dummyId;\n      source.isNewInstance = true;\n      recordInstanceFields.push(source);\n    }\n    return recordInstanceFields;\n  }\n}\nRxAvcAssociateActionService.ɵfac = function RxAvcAssociateActionService_Factory(t) {\n  return new (t || RxAvcAssociateActionService)(i0.ɵɵinject(i1.RxGuidService), i0.ɵɵinject(RxOpenViewActionService), i0.ɵɵinject(i1.RxStringService), i0.ɵɵinject(i4.RxRecordInstanceUtilsService));\n};\nRxAvcAssociateActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAvcAssociateActionService,\n  factory: RxAvcAssociateActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAvcAssociateActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxGuidService\n    }, {\n      type: RxOpenViewActionService\n    }, {\n      type: i1.RxStringService\n    }, {\n      type: i4.RxRecordInstanceUtilsService\n    }];\n  }, null);\n})();\nclass AvcAssociateActionModule {\n  constructor(rxViewActionRegistryService, rxAvcAssociateActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxAvcAssociateActionService = rxAvcAssociateActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxAvcAssociate',\n      label: 'Avc associate',\n      bundleId: RX_APPLICATION.platformBundleId,\n      hidden: true,\n      service: this.rxAvcAssociateActionService,\n      parameters: [{\n        name: 'viewDefinitionName'\n      }, {\n        name: 'associationViewComponent',\n        enableExpressionEvaluation: true\n      }]\n    });\n  }\n}\nAvcAssociateActionModule.ɵfac = function AvcAssociateActionModule_Factory(t) {\n  return new (t || AvcAssociateActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxAvcAssociateActionService));\n};\nAvcAssociateActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AvcAssociateActionModule,\n  imports: [CommonModule]\n});\nAvcAssociateActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AvcAssociateActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxAvcAssociateActionService\n    }];\n  }, null);\n})();\nclass RxCloseViewActionService {\n  execute(params) {\n    return params.actAsCancel ? params.viewApi.cancel() : EMPTY.pipe(tap({\n      complete() {\n        params.viewApi.close();\n      }\n    }));\n  }\n}\nRxCloseViewActionService.ɵfac = function RxCloseViewActionService_Factory(t) {\n  return new (t || RxCloseViewActionService)();\n};\nRxCloseViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxCloseViewActionService,\n  factory: RxCloseViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxCloseViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass CloseViewActionModule {\n  constructor(rxViewActionRegistryService, rxCloseViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxCloseViewActionService = rxCloseViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxCloseViewAction',\n      label: 'Close view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxCloseViewActionService,\n      parameters: [{\n        name: 'viewApi',\n        enableExpressionEvaluation: true,\n        defaultValue: '${view.api}'\n      }, {\n        name: 'actAsCancel',\n        label: 'Act as cancel',\n        editor: SwitchFormControlComponent,\n        type: ViewComponentPropertyType.Boolean,\n        designType: ViewComponentPropertyType.Boolean\n      }]\n    });\n  }\n}\nCloseViewActionModule.ɵfac = function CloseViewActionModule_Factory(t) {\n  return new (t || CloseViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxCloseViewActionService));\n};\nCloseViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CloseViewActionModule\n});\nCloseViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxCloseViewActionService\n    }];\n  }, null);\n})();\nclass RxDeleteRecordsViewActionService {\n  constructor(rxLogService, rxModalService, translateService, rxNotificationService, rxRecordInstanceService, rxViewActionUtilsService, rxStringService) {\n    this.rxLogService = rxLogService;\n    this.rxModalService = rxModalService;\n    this.translateService = translateService;\n    this.rxNotificationService = rxNotificationService;\n    this.rxRecordInstanceService = rxRecordInstanceService;\n    this.rxViewActionUtilsService = rxViewActionUtilsService;\n    this.rxStringService = rxStringService;\n  }\n  execute(params) {\n    if (isEmpty(params.recordDefinitionName) && params.records && isFunction(params.records.getRecordDefinitionName)) {\n      params.recordDefinitionName = params.records.getRecordDefinitionName();\n    }\n    if (this.rxStringService.isNonEmptyString(params.recordDefinitionName)) {\n      let records = [];\n      if (params.records) {\n        if (isFunction(params.records.getSelectedRows)) {\n          records = castArray(params.records.getSelectedRows());\n        } else {\n          records = castArray(params.records);\n        }\n      }\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);\n      if (recordIds.length) {\n        const message = recordIds.length === 1 ? 'com.bmc.arsys.rx.client.view-actions.delete-record.confirmation-dialog.message' : 'com.bmc.arsys.rx.client.view-actions.delete-records.confirmation-dialog.message';\n        return from(this.rxModalService.confirm({\n          title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message: this.translateService.instant(message, {\n            count: recordIds.length\n          })\n        })).pipe(switchMap(res => {\n          if (res) {\n            const deleteObservables = recordIds.map(recordId => this.rxRecordInstanceService.delete(params.recordDefinitionName, recordId));\n            return forkJoin(deleteObservables).pipe(tap(() => {\n              this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-actions.delete-records.records-deleted.message'));\n            }), switchMapTo(isFunction(params.records.refresh) ? params.records.refresh() : EMPTY));\n          } else {\n            return throwError(null);\n          }\n        }));\n      } else {\n        this.rxLogService.debug('rxDeleteRecordsAction: no records to delete.');\n        return EMPTY;\n      }\n    } else {\n      return throwError(new RxError('rxDeleteRecordsAction: Record Definition Name is not defined.'));\n    }\n  }\n}\nRxDeleteRecordsViewActionService.ɵfac = function RxDeleteRecordsViewActionService_Factory(t) {\n  return new (t || RxDeleteRecordsViewActionService)(i0.ɵɵinject(i1$4.RxLogService), i0.ɵɵinject(i2$2.RxModalService), i0.ɵɵinject(i4$1.TranslateService), i0.ɵɵinject(i1$4.RxNotificationService), i0.ɵɵinject(i4.RxRecordInstanceService), i0.ɵɵinject(i1$1.RxViewActionUtilsService), i0.ɵɵinject(i1.RxStringService));\n};\nRxDeleteRecordsViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxDeleteRecordsViewActionService,\n  factory: RxDeleteRecordsViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxDeleteRecordsViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$4.RxLogService\n    }, {\n      type: i2$2.RxModalService\n    }, {\n      type: i4$1.TranslateService\n    }, {\n      type: i1$4.RxNotificationService\n    }, {\n      type: i4.RxRecordInstanceService\n    }, {\n      type: i1$1.RxViewActionUtilsService\n    }, {\n      type: i1.RxStringService\n    }];\n  }, null);\n})();\nclass DeleteRecordsViewActionModule {\n  constructor(rxViewActionRegistryService, rxDeleteRecordsViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxDeleteRecordsViewActionService = rxDeleteRecordsViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxDeleteRecordsAction',\n      label: 'Delete records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDeleteRecordsViewActionService,\n      parameters: [{\n        name: 'records',\n        label: 'Records',\n        enableExpressionEvaluation: true,\n        isRequired: true,\n        editor: ExpressionFormControlComponent,\n        tooltip: new Tooltip(`Build an expression that evaluates to one of the following:<br>\n            1) Record grid<br>\n            2) A collection of record instances or<br>\n            3) A collection of record instance IDs. <br>For options 2 and 3, select a record definition in the field below.`)\n      }, {\n        name: 'recordDefinitionName',\n        label: 'Record definition',\n        type: ViewComponentPropertyType.String,\n        editor: RxDefinitionPickerComponent,\n        editorOptions: {\n          definitionType: RxDefinitionPickerType.StandardDataRecord\n        },\n        defaultValue: null\n      }]\n    });\n  }\n}\nDeleteRecordsViewActionModule.ɵfac = function DeleteRecordsViewActionModule_Factory(t) {\n  return new (t || DeleteRecordsViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxDeleteRecordsViewActionService));\n};\nDeleteRecordsViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DeleteRecordsViewActionModule\n});\nDeleteRecordsViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DeleteRecordsViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxDeleteRecordsViewActionService\n    }];\n  }, null);\n})();\nclass RxDisassociateViewActionService {\n  constructor(rxLogService, rxViewActionUtilsService, rxAssociationDefinitionService, rxAssociationInstanceService) {\n    this.rxLogService = rxLogService;\n    this.rxViewActionUtilsService = rxViewActionUtilsService;\n    this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n    this.rxAssociationInstanceService = rxAssociationInstanceService;\n  }\n  execute(params) {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxDisassociateAction: Associated Record ID is not defined.'));\n    }\n    const instanceIds = this.rxViewActionUtilsService.extractRecordIds(params.disassociatedRecordIds);\n    this.rxLogService.debug(`RxDisassociateAction: disassociating ${instanceIds.length} record(s)`);\n    if (instanceIds.length) {\n      return this.rxAssociationDefinitionService.get(params.associationDefinitionName).pipe(switchMap(() => {\n        let nodeAIds,\n          nodeBIds = [];\n        if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n          nodeAIds = instanceIds;\n          nodeBIds = [params.associatedRecordId];\n        } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n          nodeAIds = [params.associatedRecordId];\n          nodeBIds = instanceIds;\n        }\n        return this.rxAssociationInstanceService.disassociateRecords(params.associationDefinitionName, nodeAIds, nodeBIds).pipe(mapTo(instanceIds));\n      }));\n    } else {\n      return of([]);\n    }\n  }\n}\nRxDisassociateViewActionService.ɵfac = function RxDisassociateViewActionService_Factory(t) {\n  return new (t || RxDisassociateViewActionService)(i0.ɵɵinject(i1$4.RxLogService), i0.ɵɵinject(i1$1.RxViewActionUtilsService), i0.ɵɵinject(i1$3.RxAssociationDefinitionService), i0.ɵɵinject(i1$3.RxAssociationInstanceService));\n};\nRxDisassociateViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxDisassociateViewActionService,\n  factory: RxDisassociateViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxDisassociateViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$4.RxLogService\n    }, {\n      type: i1$1.RxViewActionUtilsService\n    }, {\n      type: i1$3.RxAssociationDefinitionService\n    }, {\n      type: i1$3.RxAssociationInstanceService\n    }];\n  }, null);\n})();\nclass RxDisassociateViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n    this.rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n    this.rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('recordDefinitionName'), distinctUntilChanged());\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('associationDefinitionName'), distinctUntilChanged());\n    const associationNameOptions$ = recordDefinitionName$.pipe(switchMap(recordDefinitionName => recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(map(associationDefinitions => associationDefinitions[recordDefinitionName].map(recordDefinition => ({\n      id: recordDefinition.name,\n      name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n    })))) : of([])));\n    const associationDefinition$ = associationDefinitionName$.pipe(switchMap(associationDefinitionName => associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)), shareReplay(1));\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(map(association => association ? association.nodeAId === association.nodeBId : false));\n    const associationRoleOptions$ = associationDefinition$.pipe(map(association => association ? [{\n      id: RxAssociatedRecordNodeSide.NodeA,\n      name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n    }, {\n      id: RxAssociatedRecordNodeSide.NodeB,\n      name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n    }] : []));\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n    associationDefinition$.pipe(\n    // skip initial props set\n    skip(1), withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)).subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n      if (associationDefinition && !isSymmetricalAssociation) {\n        const associationDefinitionRole = recordDefinitionName === associationDefinition.nodeAId ? RxAssociatedRecordNodeSide.NodeA : RxAssociatedRecordNodeSide.NodeB;\n        this.sandbox.updateActionProperties({\n          associationDefinitionRole\n        });\n      } else {\n        this.sandbox.updateActionProperties({\n          associationDefinitionRole: null\n        });\n      }\n    });\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$]).pipe(withLatestFrom(isSymmetricalAssociation$)).subscribe(([[recordDefinitionName, associationNameOptions, associationRoleOptions], isSymmetricalAssociation]) => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation));\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      disassociatedRecordIds: null\n    }, initialProperties);\n  }\n  getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation) {\n    return [{\n      name: 'recordDefinitionName',\n      component: RxDefinitionPickerComponent,\n      options: {\n        label: 'Record definition to disassociate',\n        definitionType: RxDefinitionPickerType.StandardDataRecord,\n        required: true\n      }\n    }, ...(recordDefinitionName ? [{\n      name: 'associationDefinitionName',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Association to use',\n        options: associationNameOptions,\n        required: true\n      }\n    }, {\n      name: 'associationDefinitionRole',\n      component: SelectFormControlComponent,\n      isDisabled: !isSymmetricalAssociation,\n      options: {\n        label: 'Associated record node side',\n        required: true,\n        options: associationRoleOptions\n      }\n    }, {\n      name: 'associatedRecordId',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Associated record ID',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators(),\n        isRequired: true\n      }\n    }, {\n      name: 'disassociatedRecordIds',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Records to disassociate',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators(),\n        isRequired: true\n      }\n    }] : [])];\n  }\n}\nclass DisassociateViewActionModule {\n  constructor(rxViewActionRegistryService, rxDisassociateViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxDisassociateViewActionService = rxDisassociateViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxDisassociateAction',\n      label: 'Disassociate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDisassociateViewActionService,\n      designModel: RxDisassociateViewActionDesignModel,\n      parameters: [{\n        name: 'recordDefinitionName',\n        label: 'Record definition to disassociate',\n        isRequired: true,\n        type: ViewComponentPropertyType.String\n      }, {\n        name: 'associationDefinitionName',\n        label: 'Association to use',\n        isRequired: true\n      }, {\n        name: 'associationDefinitionRole',\n        label: 'Associated record node side',\n        isRequired: true\n      }, {\n        name: 'associatedRecordId',\n        label: 'Associated record ID',\n        enableExpressionEvaluation: true,\n        isRequired: true\n      }, {\n        name: 'disassociatedRecordIds',\n        label: 'Records to disassociate',\n        enableExpressionEvaluation: true,\n        isRequired: true\n      }]\n    });\n  }\n}\nDisassociateViewActionModule.ɵfac = function DisassociateViewActionModule_Factory(t) {\n  return new (t || DisassociateViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxDisassociateViewActionService));\n};\nDisassociateViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DisassociateViewActionModule\n});\nDisassociateViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DisassociateViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxDisassociateViewActionService\n    }];\n  }, null);\n})();\nclass ResultModalComponent {\n  constructor(activeModelRef) {\n    this.activeModelRef = activeModelRef;\n    this.data = this.activeModelRef.getData();\n  }\n  close() {\n    this.activeModelRef.close();\n  }\n  hasActionResultDetails(data) {\n    return ['warningCount', 'errorCount', 'infoCount', 'successCount'].some(prop => data.summary[prop]);\n  }\n}\nResultModalComponent.ɵfac = function ResultModalComponent_Factory(t) {\n  return new (t || ResultModalComponent)(i0.ɵɵdirectiveInject(i1$2.ActiveModalRef));\n};\nResultModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ResultModalComponent,\n  selectors: [[\"rx-edit-records-result-modal\"]],\n  decls: 18,\n  vars: 19,\n  consts: [[1, \"modal-body\"], [1, \"mb-2\"], [1, \"mr-1\", \"text-success-icon\", 3, \"name\"], [1, \"mr-1\", \"text-warning-icon\", 3, \"name\"], [1, \"mr-1\", \"text-danger-icon\", 3, \"name\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"btn-sm\", 3, \"click\"], [1, \"mt-2\"], [\"readonly\", \"\", \"rows\", \"15\", 1, \"resize-none\", 3, \"label\", \"ngModel\"]],\n  template: function ResultModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"adapt-icon\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵpipe(4, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵelement(6, \"adapt-icon\", 3);\n      i0.ɵɵtext(7);\n      i0.ɵɵpipe(8, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\");\n      i0.ɵɵelement(10, \"adapt-icon\", 4);\n      i0.ɵɵtext(11);\n      i0.ɵɵpipe(12, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, ResultModalComponent_div_13_Template, 3, 4, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 6);\n      i0.ɵɵelementStart(15, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function ResultModalComponent_Template_button_click_15_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(16);\n      i0.ɵɵpipe(17, \"translate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"name\", \"check_circle\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(4, 11, \"com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-successfully.label\"), \": \", ctx.data.summary.successCount, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"name\", \"exclamation_circle\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(8, 13, \"com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-with-warnings.label\"), \": \", ctx.data.summary.warningCount, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"name\", \"exclamation_triangle\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate2(\" \", i0.ɵɵpipeBind1(12, 15, \"com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.update-failures.label\"), \": \", ctx.data.summary.errorCount, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasActionResultDetails(ctx.data) && ctx.data.details);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(17, 17, \"com.bmc.arsys.rx.client.common.close.label\"), \" \");\n    }\n  },\n  directives: [i1$2.AdaptIconComponent, i2$3.NgIf, i1$2.AdaptRxTextareaComponent, i3$1.NgControlStatus, i3$1.NgModel],\n  pipes: [i4$1.TranslatePipe],\n  styles: [\"[_nghost-%COMP%]     .resize-none{resize:none}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResultModalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-edit-records-result-modal',\n      styleUrls: ['./result-modal.scss'],\n      templateUrl: './result-modal.html'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.ActiveModalRef\n    }];\n  }, null);\n})();\nclass RxEditRecordsDataService {\n  constructor(adaptModalService, translateService, rxCommandFactoryService) {\n    this.adaptModalService = adaptModalService;\n    this.translateService = translateService;\n    this.rxCommandFactoryService = rxCommandFactoryService;\n    this.resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n    this.editRecordsCommand = this.rxCommandFactoryService.forResourceType(this.resourceType);\n  }\n  editRecords(preparedRecordData) {\n    return this.editRecordsCommand.execute(preparedRecordData);\n  }\n  showActionResults(actionResults) {\n    return this.adaptModalService.open({\n      size: 'sm',\n      title: this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.title'),\n      data: actionResults,\n      content: ResultModalComponent\n    }).catch(noop);\n  }\n  runAction(recordInstanceIds, recordInstance) {\n    const preparedRecordData = this.prepareRecordData(recordInstanceIds, recordInstance);\n    const formData = new FormData();\n    formData.append('commandInstance', JSON.stringify(preparedRecordData.commandInstance));\n    forEach(preparedRecordData.attachments, attachment => {\n      formData.append(attachment.key, attachment.file);\n    });\n    Object.keys(preparedRecordData || {}).map(item => {\n      if (item !== 'commandInstance' && item !== 'attachments') {\n        formData.append(item, JSON.stringify(preparedRecordData[item]));\n      }\n    });\n    return this.editRecords(formData).pipe(map(response => this.prepareActionResults(response, preparedRecordData)), switchMap(actionResults => {\n      return from(Promise.resolve(this.showActionResults(actionResults)));\n    }));\n  }\n  cleanUnchangedFields(recordInstance) {\n    return forIn(recordInstance.fieldInstances, (field, key) => {\n      if (isNull(field.value)) {\n        delete recordInstance.fieldInstances[key];\n      }\n    });\n  }\n  prepareFiles(fields, keyPrefix) {\n    return values(fields).filter(field => has(field, 'file')).map(attachment => ({\n      key: keyPrefix ? keyPrefix + '/' + attachment.id : attachment.id,\n      file: attachment.file\n    }));\n  }\n  cleanFiles(fields) {\n    Object.keys(fields).map((key, index) => {\n      fields[key].hasOwnProperty('file') ? delete fields[key] : delete fields[key].file;\n    });\n    return fields;\n  }\n  prepareAssociationInstancesForSaving(associationInstances) {\n    return transform(associationInstances, (result, associationInstance, associationDefinitionName) => {\n      forEach(associationInstance, (associationGroups, role) => {\n        if (!isEmpty(associationGroups.pending)) {\n          result.push({\n            associationDefinitionName: associationDefinitionName,\n            recordInstanceIds: map$1(associationGroups.pending, 'id'),\n            nodeSide: role,\n            resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n          });\n        }\n      });\n    }, []);\n  }\n  prepareRecordData(recordInstanceIds, recordInstance) {\n    const record = pick(recordInstance, ['resourceType', 'recordDefinitionName', 'fieldInstances']);\n    const resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n    record.fieldInstances = this.cleanUnchangedFields(record);\n    const attachments = this.prepareFiles(record.fieldInstances);\n    record.fieldInstances = this.cleanFiles(record.fieldInstances);\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n    const data = {\n      shouldOverrideOptimisticLock: false,\n      commandInstance: {\n        resourceType\n      },\n      recordInstanceIds: recordInstanceIds,\n      recordInstance: record,\n      attachments: attachments\n    };\n    if (!isEmpty(associationInstances)) {\n      data.associationOperations = associationInstances.map(associationInstance => Object.assign(Object.assign({}, associationInstance), {\n        nodeSide: associationInstance.nodeSide.split(':')[0]\n      }));\n    }\n    return data;\n  }\n  prepareActionResults(response, requestData) {\n    const newLine = '\\n';\n    const updatedInstanceIdsCount = requestData.recordInstanceIds.length;\n    const detailsMessageLabel = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.details.record-instance-id.label');\n    const summary = {\n      successCount: 0,\n      errorCount: 0,\n      warningCount: 0,\n      infoCount: 0\n    };\n    let details;\n    if (!isEmpty(response)) {\n      summary.errorCount = filter$1(response, messages => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.error])).length;\n      summary.warningCount = filter$1(response, messages => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.warning])).length;\n      summary.infoCount = filter$1(response, messages => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.info])).length;\n      summary.successCount = filter$1(response, messages => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.success])).length;\n      details = map$1(response, (messages, recordInstanceId) => {\n        const recordInstanceIdMessageHeader = detailsMessageLabel + ': ' + recordInstanceId;\n        const messageText = values(messages).map(this.convertMessageToString).join(', ');\n        return recordInstanceIdMessageHeader + newLine + messageText;\n      }).join(newLine + newLine);\n    } else {\n      details = '';\n    }\n    summary.successCount = updatedInstanceIdsCount - summary.errorCount - summary.warningCount;\n    return {\n      summary,\n      details\n    };\n  }\n  convertMessageToString(message) {\n    return `${message.messageType}: ${values([message.messageText, message.appendedText]).join(' ')}`;\n  }\n}\nRxEditRecordsDataService.ɵfac = function RxEditRecordsDataService_Factory(t) {\n  return new (t || RxEditRecordsDataService)(i0.ɵɵinject(i1$2.AdaptModalService), i0.ɵɵinject(i4$1.TranslateService), i0.ɵɵinject(i1$4.RxCommandFactoryService));\n};\nRxEditRecordsDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxEditRecordsDataService,\n  factory: RxEditRecordsDataService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxEditRecordsDataService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.AdaptModalService\n    }, {\n      type: i4$1.TranslateService\n    }, {\n      type: i1$4.RxCommandFactoryService\n    }];\n  }, null);\n})();\nclass RxEditRecordsViewBuilder {\n  constructor(rxGuidService, rxDefaultRecordEditorInputType, rxFieldDefinitionService, translateService, rxSystemConfigurationService) {\n    this.rxGuidService = rxGuidService;\n    this.rxDefaultRecordEditorInputType = rxDefaultRecordEditorInputType;\n    this.rxFieldDefinitionService = rxFieldDefinitionService;\n    this.translateService = translateService;\n    this.rxSystemConfigurationService = rxSystemConfigurationService;\n  }\n  getViewDefinition(recordDefinitionName, columnDescriptors) {\n    const closeButtonId = this.rxGuidService.generate(),\n      containerId = this.rxGuidService.generate(),\n      recordEditorId = this.rxGuidService.generate(),\n      recordInstanceId = null,\n      saveButtonId = this.rxGuidService.generate(),\n      viewDefinitionId = this.rxGuidService.generate(),\n      recordEditorComponentDefinitions = this.getComponentDefinitions(columnDescriptors, recordEditorId);\n    return {\n      guid: viewDefinitionId,\n      layout: JSON.stringify({\n        outlets: [{\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [{\n            children: [recordEditorId]\n          }]\n        }, {\n          name: 'footer',\n          height: 60,\n          columns: [{\n            children: [containerId]\n          }]\n        }]\n      }),\n      outputParams: [{\n        name: 'recordInstance',\n        source: '${view.components.' + recordEditorId + '.recordInstance}'\n      }],\n      inputParams: [],\n      componentDefinitions: [{\n        resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n        guid: recordEditorId,\n        type: RxViewComponentType.RecordEditor,\n        propertiesByName: {\n          recordInstanceId: `${recordInstanceId}`,\n          mode: RecordEditorMode.BulkEdit,\n          recordDefinitionName: recordDefinitionName,\n          styles: 'p-0 border-0'\n        },\n        componentDefinitions: recordEditorComponentDefinitions,\n        layout: JSON.stringify({\n          outlets: [{\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [{\n              children: recordEditorComponentDefinitions.map(componentDefinition => componentDefinition.guid)\n            }]\n          }]\n        })\n      }, {\n        resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n        guid: containerId,\n        type: RxViewComponentType.ButtonBar,\n        propertiesByName: {\n          alignment: 'right',\n          hidden: '0'\n        },\n        layout: JSON.stringify({\n          outlets: [{\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [{\n              children: [saveButtonId, closeButtonId]\n            }]\n          }]\n        }),\n        componentDefinitions: [{\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: closeButtonId,\n          type: RxViewComponentType.ActionButton,\n          propertiesByName: {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label'),\n            style: 'secondary',\n            size: 'default'\n          },\n          componentDefinitions: [{\n            resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n            guid: this.rxGuidService.generate(),\n            type: RxViewComponentType.Action,\n            propertiesByName: {\n              viewApi: '${view.api}',\n              name: 'rxCloseViewAction',\n              actAsCancel: 'true'\n            }\n          }]\n        }, {\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: saveButtonId,\n          type: RxViewComponentType.ActionButton,\n          propertiesByName: {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n            style: 'primary',\n            disabled: 'NOT${view.components.' + recordEditorId + '.canSave}',\n            size: 'default'\n          },\n          componentDefinitions: [{\n            resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n            guid: this.rxGuidService.generate(),\n            type: RxViewComponentType.Action,\n            propertiesByName: {\n              viewApi: '${view.api}',\n              name: 'rxCloseViewAction',\n              actAsCancel: 'false'\n            }\n          }]\n        }]\n      }]\n    };\n  }\n  getComponentDefinitions(columnDescriptors, recordEditorId) {\n    const submitterMode = this.rxSystemConfigurationService.getConfigurationSync('Submitter-Mode');\n    if (submitterMode === RX_ADMINISTRATION.submitterModes.locked) {\n      columnDescriptors = columnDescriptors.filter(columnDescriptor => Number(columnDescriptor.fieldId) !== RX_RECORD_DEFINITION.coreFieldIds.createdBy);\n    }\n    const fieldContainerComponentDefinitions = this.getFieldContainerComponentDefinitions(columnDescriptors, recordEditorId);\n    return [{\n      resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n      guid: this.rxGuidService.generate(),\n      type: RxViewComponentType.Container,\n      propertiesByName: {\n        rowWrap: ContainerRowWrap.Sm,\n        columnCount: '1'\n      },\n      componentDefinitions: fieldContainerComponentDefinitions,\n      layout: JSON.stringify({\n        outlets: [{\n          name: RX_VIEW_DEFINITION.defaultOutletName,\n          columns: [{\n            children: fieldContainerComponentDefinitions.map(componentDefinition => componentDefinition.guid)\n          }]\n        }]\n      })\n    }];\n  }\n  getFieldContainerComponentDefinitions(columnDescriptors, recordEditorId) {\n    return columnDescriptors.filter(columnDescriptor => !this.rxFieldDefinitionService.isSystemField(columnDescriptor.fieldDefinition)).map(columnDescriptor => {\n      let resourceType, componentType;\n      const isAssociated = Boolean(columnDescriptor.associationDescriptor);\n      if (isAssociated) {\n        resourceType = RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n        componentType = RxViewComponentType.Association;\n      } else {\n        resourceType = RX_VIEW_DEFINITION.resourceTypes.viewComponent;\n        componentType = this.rxDefaultRecordEditorInputType.getFieldTypeByFieldDefinition(columnDescriptor.fieldDefinition);\n      }\n      const componentDefinition = {\n        resourceType: resourceType,\n        guid: this.rxGuidService.generate(),\n        type: componentType,\n        propertiesByName: {\n          fieldId: columnDescriptor.fieldDefinition.id,\n          recordDefinition: '${view.components.' + recordEditorId + '.recordDefinition}',\n          recordInstance: '${view.components.' + recordEditorId + '.recordInstance}',\n          label: columnDescriptor.title,\n          fieldOption: RX_RECORD_DEFINITION.fieldOptions.optional\n        }\n      };\n      if (isAssociated) {\n        componentDefinition.componentDefinitions = [];\n        assign(componentDefinition.propertiesByName, {\n          associatedRecordNodeSide: columnDescriptor.associationDescriptor.nodeSide,\n          editingMode: RxAssociationEditingMode.Dropdown,\n          associationDefinitionName: columnDescriptor.associationDescriptor.associationDefinition.name,\n          recordDefinitionName: columnDescriptor.associationDescriptor.recordDefinitionName\n        });\n      }\n      return componentDefinition;\n    }).reduce((fieldContainerComponentDefinitions, fieldComponentDefinition, index, fieldComponentDefinitions) => {\n      if (index % 2 === 0) {\n        fieldContainerComponentDefinitions.push({\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: this.rxGuidService.generate(),\n          type: RxViewComponentType.Container,\n          propertiesByName: {\n            rowWrap: ContainerRowWrap.Sm,\n            columnCount: '2'\n          },\n          componentDefinitions: fieldComponentDefinitions.slice(index, index + 2),\n          layout: JSON.stringify({\n            outlets: [{\n              name: RX_VIEW_DEFINITION.defaultOutletName,\n              columns: [{\n                children: [fieldComponentDefinition.guid],\n                span: '6'\n              }, {\n                children: fieldComponentDefinitions.length > index + 1 ? [fieldComponentDefinitions[index + 1].guid] : [],\n                span: '6'\n              }]\n            }]\n          })\n        });\n      }\n      return fieldContainerComponentDefinitions;\n    }, []);\n  }\n}\nRxEditRecordsViewBuilder.ɵfac = function RxEditRecordsViewBuilder_Factory(t) {\n  return new (t || RxEditRecordsViewBuilder)(i0.ɵɵinject(i1.RxGuidService), i0.ɵɵinject(i2.RxDefaultRecordEditorInputType), i0.ɵɵinject(i4.RxFieldDefinitionService), i0.ɵɵinject(i4$1.TranslateService), i0.ɵɵinject(i1$4.RxSystemConfigurationService));\n};\nRxEditRecordsViewBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxEditRecordsViewBuilder,\n  factory: RxEditRecordsViewBuilder.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxEditRecordsViewBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxGuidService\n    }, {\n      type: i2.RxDefaultRecordEditorInputType\n    }, {\n      type: i4.RxFieldDefinitionService\n    }, {\n      type: i4$1.TranslateService\n    }, {\n      type: i1$4.RxSystemConfigurationService\n    }];\n  }, null);\n})();\nclass RxEditRecordsViewActionService {\n  constructor(rxEditRecordsViewBuilder, rxEditRecordsDataService, rxLogService, rxRecordGridUtilsService, translateService, rxDefinitionNameService, openViewAction, rxViewActionUtilsService) {\n    this.rxEditRecordsViewBuilder = rxEditRecordsViewBuilder;\n    this.rxEditRecordsDataService = rxEditRecordsDataService;\n    this.rxLogService = rxLogService;\n    this.rxRecordGridUtilsService = rxRecordGridUtilsService;\n    this.translateService = translateService;\n    this.rxDefinitionNameService = rxDefinitionNameService;\n    this.openViewAction = openViewAction;\n    this.rxViewActionUtilsService = rxViewActionUtilsService;\n  }\n  execute(params) {\n    let {\n      recordDefinitionName\n    } = params;\n    if (isNil(params.records)) {\n      return throwError(new RxError('rxEditRecordsAction: no records to edit.'));\n    }\n    if (isEmpty(recordDefinitionName) && isFunction(params.records.getRecordDefinitionName)) {\n      recordDefinitionName = params.records.getRecordDefinitionName();\n    }\n    if (recordDefinitionName) {\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(params.records);\n      if (recordIds.length) {\n        return from(this.rxRecordGridUtilsService.getColumnDescriptors(recordDefinitionName, params.records)).pipe(switchMap(columnDescriptors => {\n          const localizedViewTitle = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.view.title', {\n            recordDefinitionName: this.rxDefinitionNameService.getDisplayName(recordDefinitionName)\n          });\n          const localizedViewNotification = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.view.notification');\n          return this.openViewAction.execute({\n            presentation: {\n              modalSize: RX_OPEN_VIEW.modalSize.Large,\n              title: localizedViewTitle,\n              notification: localizedViewNotification,\n              type: RX_OPEN_VIEW.type.DockedRightModal\n            },\n            viewDefinitionName: this.rxEditRecordsViewBuilder.getViewDefinition(recordDefinitionName, columnDescriptors),\n            viewParams: null\n          }).pipe(switchMap(viewOutput => viewOutput && viewOutput.recordInstance ? this.rxEditRecordsDataService.runAction(recordIds, viewOutput.recordInstance).pipe(switchMap(() => isFunction(params.records.refresh) ? params.records.refresh() : EMPTY)) : EMPTY));\n        }));\n      } else {\n        this.rxLogService.debug('rxEditRecordsAction: no records to edit.');\n      }\n    } else {\n      this.rxLogService.error('rxEditRecordsAction: Record Definition Name is not defined.');\n    }\n    return EMPTY;\n  }\n}\nRxEditRecordsViewActionService.ɵfac = function RxEditRecordsViewActionService_Factory(t) {\n  return new (t || RxEditRecordsViewActionService)(i0.ɵɵinject(RxEditRecordsViewBuilder), i0.ɵɵinject(RxEditRecordsDataService), i0.ɵɵinject(i1$4.RxLogService), i0.ɵɵinject(i2.RxRecordGridUtilsService), i0.ɵɵinject(i4$1.TranslateService), i0.ɵɵinject(i1$4.RxDefinitionNameService), i0.ɵɵinject(RxOpenViewActionService), i0.ɵɵinject(i1$1.RxViewActionUtilsService));\n};\nRxEditRecordsViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxEditRecordsViewActionService,\n  factory: RxEditRecordsViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxEditRecordsViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxEditRecordsViewBuilder\n    }, {\n      type: RxEditRecordsDataService\n    }, {\n      type: i1$4.RxLogService\n    }, {\n      type: i2.RxRecordGridUtilsService\n    }, {\n      type: i4$1.TranslateService\n    }, {\n      type: i1$4.RxDefinitionNameService\n    }, {\n      type: RxOpenViewActionService\n    }, {\n      type: i1$1.RxViewActionUtilsService\n    }];\n  }, null);\n})();\nclass EditRecordsViewActionModule {\n  constructor(rxViewActionRegistryService, rxEditRecordsActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxEditRecordsActionService = rxEditRecordsActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxEditRecordsAction',\n      label: 'Edit records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxEditRecordsActionService,\n      parameters: [{\n        name: 'records',\n        label: 'Records',\n        isRequired: true,\n        tooltip: new Tooltip(`Build an expression that evaluates to one of the following:<br>\n            1) Record Grid;<br>\n            2) A collection of Record Instances, or<br>\n            3) A collection of Record Instance IDs. <br>For options 2 and 3, select a Record Definition in the field below.`),\n        enableExpressionEvaluation: true,\n        editor: ExpressionFormControlComponent\n      }, {\n        name: 'recordDefinitionName',\n        label: 'Record definition',\n        type: ViewComponentPropertyType.String,\n        editor: RxDefinitionPickerComponent,\n        editorOptions: {\n          definitionType: RxDefinitionPickerType.StandardDataRecord\n        },\n        defaultValue: null\n      }]\n    });\n  }\n}\nEditRecordsViewActionModule.ɵfac = function EditRecordsViewActionModule_Factory(t) {\n  return new (t || EditRecordsViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxEditRecordsViewActionService));\n};\nEditRecordsViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EditRecordsViewActionModule,\n  declarations: [ResultModalComponent],\n  imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule]\n});\nEditRecordsViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EditRecordsViewActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule],\n      declarations: [ResultModalComponent],\n      entryComponents: [ResultModalComponent]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxEditRecordsViewActionService\n    }];\n  }, null);\n})();\nclass RxLaunchProcessViewActionDesignManagerService {\n  constructor(rxProcessDefinitionService, rxViewActionRegistryService, rxViewExpressionValidatorService) {\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxViewExpressionValidatorService = rxViewExpressionValidatorService;\n  }\n  validate(properties, propertyName) {\n    if (properties.processDefinitionName) {\n      return this.rxProcessDefinitionService.get(properties.processDefinitionName).pipe(switchMap(processDefinition => combineLatest([this.validateInputParams(properties, propertyName, processDefinition.inputParams), this.validateInputParamExpressions(properties, propertyName, processDefinition.inputParams)])), map(flatten));\n    } else {\n      return of([]);\n    }\n  }\n  validateInputParamExpressions(actionParams, issuePropertyName, processInputParams) {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n    const issues = processInputParams.filter(processInputParam => actionParams[`actionProcessInputParams.${processInputParam.name}`]).map(processInputParam => this.rxViewExpressionValidatorService.validate(actionParams[`actionProcessInputParams.${processInputParam.name}`], issuePropertyName, actionDescriptor.label).pipe(map(issues => issues.map(issue => Object.assign(Object.assign({}, issue), {\n      description: `${actionDescriptor.label} action: ${issue.description}`\n    })))));\n    return combineLatest(issues).pipe(defaultIfEmpty([]), map(flatten));\n  }\n  validateInputParams(actionParams, issuePropertyName, processInputParams) {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n    const validationIssues = [];\n    forEach(processInputParams, processInputParam => {\n      const actionParamName = `actionProcessInputParams.${processInputParam.name}`;\n      if (processInputParam.fieldOption === 'REQUIRED' && isEmpty(actionParams[actionParamName])) {\n        validationIssues.push({\n          type: 'error',\n          description: `${actionDescriptor.label}: ${processInputParam.name} cannot be blank.`,\n          propertyName: issuePropertyName\n        });\n      }\n    });\n    return of(validationIssues);\n  }\n}\nRxLaunchProcessViewActionDesignManagerService.ɵfac = function RxLaunchProcessViewActionDesignManagerService_Factory(t) {\n  return new (t || RxLaunchProcessViewActionDesignManagerService)(i0.ɵɵinject(i3$2.RxProcessDefinitionService), i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(i3$3.RxViewExpressionValidatorService));\n};\nRxLaunchProcessViewActionDesignManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchProcessViewActionDesignManagerService,\n  factory: RxLaunchProcessViewActionDesignManagerService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchProcessViewActionDesignManagerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i3$2.RxProcessDefinitionService\n    }, {\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: i3$3.RxViewExpressionValidatorService\n    }];\n  }, null);\n})();\nclass RxLaunchProcessViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.rxProcessDefinitionCacheService = this.injector.get(RxProcessDefinitionCacheService);\n    this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n    this.defaultProps = {\n      processDefinitionName: null,\n      waitForProcessCompletion: false\n    };\n    const processDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('processDefinitionName'), distinctUntilChanged());\n    processDefinitionName$.pipe(skip(1)).subscribe(processDefinitionName => {\n      this.sandbox.setActionProperties({\n        processDefinitionName,\n        waitForProcessCompletion: false\n      });\n    });\n    processDefinitionName$.pipe(switchMap(processDefinitionName => processDefinitionName ? this.rxProcessDefinitionCacheService.getProcessDefinition(processDefinitionName) : of(null))).subscribe(processDefinition => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(processDefinition)));\n    this.sandbox.actionProperties$.pipe(map(props => [props.processDefinitionName, props.waitForProcessCompletion]), distinctUntilChanged(isEqual), switchMap(([processDefinitionName, waitForProcessCompletion]) => this.getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion))).subscribe(dataDictionary => this.sandbox.setActionOutputDataDictionary(dataDictionary));\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      processDefinitionName: null,\n      waitForProcessCompletion: false\n    }, initialProperties);\n  }\n  getActionEditorConfig(processDefinition) {\n    return [{\n      name: 'processDefinitionName',\n      component: RxDefinitionPickerComponent,\n      options: {\n        label: 'Process to start',\n        definitionType: RxDefinitionPickerType.Process,\n        required: true\n      }\n    }, {\n      name: 'waitForProcessCompletion',\n      component: SwitchFormControlComponent,\n      isDisabled: processDefinition ? !processDefinition.synchronous : true,\n      options: {\n        label: 'Wait for process completion',\n        tooltip: new Tooltip('If a process runs synchronously, it is possible to get output data from the process once the process completes. Enable Wait for completion in order to define an output map for the selected process.')\n      }\n    }, ...(processDefinition ? map$1(processDefinition.inputParams, param => ({\n      name: `actionProcessInputParams.${param.name}`,\n      component: ExpressionFormControlComponent,\n      options: {\n        label: param.name,\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators(),\n        isRequired: param.fieldOption === 'REQUIRED'\n      }\n    })) : [])];\n  }\n  getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion) {\n    return waitForProcessCompletion ? this.rxProcessDefinitionCacheService.getOutputParams(processDefinitionName).pipe(switchMap(outputParams => forkJoin(outputParams.map(param => {\n      let dataDictionary;\n      if (param.fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n        const recordInstanceParam = param;\n        dataDictionary = this.rxRecordDefinitionCacheService.getRecordDefinition(recordInstanceParam.recordDefinitionName).pipe(map(recordDefinition => ({\n          label: recordInstanceParam.name,\n          expression: this.getOutputExpressionForPropertyPath(recordInstanceParam.name),\n          children: map$1(recordDefinition.fieldDefinitions, fieldDefinition => ({\n            label: fieldDefinition.name,\n            expression: this.getOutputExpressionForPropertyPath(`${recordInstanceParam.name}.${fieldDefinition.id}`)\n          }))\n        })));\n      } else {\n        dataDictionary = of({\n          label: param.name,\n          expression: this.getOutputExpressionForPropertyPath(param.name)\n        });\n      }\n      return dataDictionary;\n    })))) : of([]);\n  }\n}\nclass RxLaunchProcessViewActionService {\n  constructor(rxJsonParserService, rxLogService, rxProcessDefinitionCacheService, rxRecordDefinitionCacheService, rxProcessInstanceCommandsService, rxProcessInstanceService, rxRecordInstanceService) {\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxLogService = rxLogService;\n    this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n    this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n    this.rxProcessInstanceCommandsService = rxProcessInstanceCommandsService;\n    this.rxProcessInstanceService = rxProcessInstanceService;\n    this.rxRecordInstanceService = rxRecordInstanceService;\n  }\n  execute(params) {\n    let processId;\n    let processDefinitionOutputParams;\n    return this.rxProcessInstanceCommandsService.start(params.processDefinitionName, params.actionProcessInputParams).pipe(switchMap(res => {\n      if (params.waitForProcessCompletion) {\n        const location = res.headers.get('location');\n        processId = location ? last(location.split('/')) : null;\n        return this.rxProcessDefinitionCacheService.getOutputParams(params.processDefinitionName);\n      } else {\n        return of(null);\n      }\n    }), switchMap(plainOutputParams => {\n      if (!isEmpty(plainOutputParams)) {\n        processDefinitionOutputParams = plainOutputParams.reduce((outputParams, value) => {\n          outputParams[value.name] = value;\n          return outputParams;\n        }, {});\n        return this.rxProcessInstanceService.get(params.processDefinitionName, `${processId}/processOutputVariables`);\n      } else {\n        return of(null);\n      }\n    }), switchMap(processOutputVariables => {\n      const outputResult = {};\n      forEach(processOutputVariables, (variableValue, variableName) => {\n        if (processDefinitionOutputParams[variableName].fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n          const recordInstanceOutputData = this.rxJsonParserService.tryParseJson(variableValue);\n          if (recordInstanceOutputData && recordInstanceOutputData.recordDefinitionName && recordInstanceOutputData.id) {\n            outputResult[variableName] = this.rxRecordInstanceService.get(recordInstanceOutputData.recordDefinitionName, recordInstanceOutputData.id).pipe(map(recordInstance => reduce(recordInstance.fieldInstances, (result, fieldInstance) => {\n              result[fieldInstance.id] = fieldInstance.value;\n              return result;\n            }, {})));\n          } else {\n            this.rxLogService.warning('rxLaunchProcessAction: unknown format for record instance as output data for process');\n          }\n        } else {\n          outputResult[variableName] = of(variableValue);\n        }\n      });\n      return forkJoin(outputResult);\n    }));\n  }\n}\nRxLaunchProcessViewActionService.ɵfac = function RxLaunchProcessViewActionService_Factory(t) {\n  return new (t || RxLaunchProcessViewActionService)(i0.ɵɵinject(i1.RxJsonParserService), i0.ɵɵinject(i1$4.RxLogService), i0.ɵɵinject(i3$2.RxProcessDefinitionCacheService), i0.ɵɵinject(i4.RxRecordDefinitionCacheService), i0.ɵɵinject(i3$2.RxProcessInstanceCommandsService), i0.ɵɵinject(i3$2.RxProcessInstanceService), i0.ɵɵinject(i4.RxRecordInstanceService));\n};\nRxLaunchProcessViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchProcessViewActionService,\n  factory: RxLaunchProcessViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchProcessViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxJsonParserService\n    }, {\n      type: i1$4.RxLogService\n    }, {\n      type: i3$2.RxProcessDefinitionCacheService\n    }, {\n      type: i4.RxRecordDefinitionCacheService\n    }, {\n      type: i3$2.RxProcessInstanceCommandsService\n    }, {\n      type: i3$2.RxProcessInstanceService\n    }, {\n      type: i4.RxRecordInstanceService\n    }];\n  }, null);\n})();\nclass LaunchProcessViewActionModule {\n  constructor(rxViewActionRegistryService, rxLaunchProcessViewActionService, rxLaunchProcessViewActionDesignManagerService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxLaunchProcessViewActionService = rxLaunchProcessViewActionService;\n    this.rxLaunchProcessViewActionDesignManagerService = rxLaunchProcessViewActionDesignManagerService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessAction',\n      label: 'Launch process',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessViewActionService,\n      designManager: this.rxLaunchProcessViewActionDesignManagerService,\n      designModel: RxLaunchProcessViewActionDesignModel,\n      parameters: [{\n        name: 'processDefinitionName',\n        label: 'Process to start',\n        type: ViewComponentPropertyType.String,\n        isRequired: true\n      }, {\n        name: 'waitForProcessCompletion',\n        type: ViewComponentPropertyType.Boolean,\n        designType: ViewComponentPropertyType.Boolean\n      }, {\n        name: 'actionProcessInputParams',\n        label: 'Input map',\n        enableExpressionEvaluation: true\n      }]\n    });\n  }\n}\nLaunchProcessViewActionModule.ɵfac = function LaunchProcessViewActionModule_Factory(t) {\n  return new (t || LaunchProcessViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxLaunchProcessViewActionService), i0.ɵɵinject(RxLaunchProcessViewActionDesignManagerService));\n};\nLaunchProcessViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LaunchProcessViewActionModule\n});\nLaunchProcessViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxLaunchProcessViewActionDesignManagerService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaunchProcessViewActionModule, [{\n    type: NgModule,\n    args: [{\n      providers: [RxLaunchProcessViewActionDesignManagerService]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxLaunchProcessViewActionService\n    }, {\n      type: RxLaunchProcessViewActionDesignManagerService\n    }];\n  }, null);\n})();\nclass RxLaunchUrlViewActionService {\n  execute(params) {\n    if (params.url) {\n      window.open(params.url, RX_LAUNCH_BEHAVIOR[params.launchBehavior].target);\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxLaunchUrlAction: URL is not specified.'));\n    }\n  }\n}\nRxLaunchUrlViewActionService.ɵfac = function RxLaunchUrlViewActionService_Factory(t) {\n  return new (t || RxLaunchUrlViewActionService)();\n};\nRxLaunchUrlViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchUrlViewActionService,\n  factory: RxLaunchUrlViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchUrlViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RxLaunchUrlViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      url: null,\n      launchBehavior: RX_LAUNCH_BEHAVIOR.newWindow.value\n    }, initialProperties);\n  }\n  getActionEditorConfig() {\n    return [{\n      name: 'url',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'URL',\n        isRequired: true,\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators()\n      }\n    }, {\n      name: 'launchBehavior',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Launch behavior',\n        options: map$1(RX_LAUNCH_BEHAVIOR, value => ({\n          name: value.content,\n          id: value.value\n        })),\n        sortAlphabetically: false\n      }\n    }];\n  }\n}\nclass RxLaunchUrlViewActionDefinitionAdapterService {\n  adaptDefinition(viewComponentDefinition) {\n    var _a;\n    const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n    propertiesByName.launchBehavior = (_a = propertiesByName.launchBehavior) !== null && _a !== void 0 ? _a : RX_LAUNCH_BEHAVIOR.newWindow.value;\n  }\n}\nRxLaunchUrlViewActionDefinitionAdapterService.ɵfac = function RxLaunchUrlViewActionDefinitionAdapterService_Factory(t) {\n  return new (t || RxLaunchUrlViewActionDefinitionAdapterService)();\n};\nRxLaunchUrlViewActionDefinitionAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchUrlViewActionDefinitionAdapterService,\n  factory: RxLaunchUrlViewActionDefinitionAdapterService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchUrlViewActionDefinitionAdapterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass LaunchUrlViewActionModule {\n  constructor(rxViewActionDefinitionAdapterRegistryService, rxViewActionRegistryService, rxLaunchUrlViewActionService, rxLaunchUrlActionDefinitionAdapterService) {\n    this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxLaunchUrlViewActionService = rxLaunchUrlViewActionService;\n    this.rxLaunchUrlActionDefinitionAdapterService = rxLaunchUrlActionDefinitionAdapterService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchUrlAction',\n      label: 'Launch URL',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchUrlViewActionService,\n      designModel: RxLaunchUrlViewActionDesignModel,\n      parameters: [{\n        name: 'url',\n        label: 'URL',\n        enableExpressionEvaluation: true,\n        isRequired: true\n      }, {\n        name: 'launchBehavior',\n        label: 'Launch behavior'\n      }]\n    });\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter('rxLaunchUrlAction', this.rxLaunchUrlActionDefinitionAdapterService);\n  }\n}\nLaunchUrlViewActionModule.ɵfac = function LaunchUrlViewActionModule_Factory(t) {\n  return new (t || LaunchUrlViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionDefinitionAdapterRegistryService), i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxLaunchUrlViewActionService), i0.ɵɵinject(RxLaunchUrlViewActionDefinitionAdapterService));\n};\nLaunchUrlViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LaunchUrlViewActionModule\n});\nLaunchUrlViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaunchUrlViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionDefinitionAdapterRegistryService\n    }, {\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxLaunchUrlViewActionService\n    }, {\n      type: RxLaunchUrlViewActionDefinitionAdapterService\n    }];\n  }, null);\n})();\nclass RxRefreshViewActionService {\n  execute(params) {\n    if (params.component) {\n      return isFunction(params.component.refresh) ? params.component.refresh() : throwError(new RxError('rxRefreshAction: target component does not support refresh API.'));\n    } else {\n      return throwError(new RxError('rxRefreshAction: component is not specified.'));\n    }\n  }\n}\nRxRefreshViewActionService.ɵfac = function RxRefreshViewActionService_Factory(t) {\n  return new (t || RxRefreshViewActionService)();\n};\nRxRefreshViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRefreshViewActionService,\n  factory: RxRefreshViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRefreshViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RefreshViewActionModule {\n  constructor(rxViewActionRegistryService, rxRefreshViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxRefreshViewActionService = rxRefreshViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxRefreshAction',\n      label: 'Refresh',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxRefreshViewActionService,\n      parameters: [{\n        name: 'component',\n        label: 'View/Component',\n        enableExpressionEvaluation: true,\n        isRequired: true,\n        editor: ExpressionFormControlComponent\n      }]\n    });\n  }\n}\nRefreshViewActionModule.ɵfac = function RefreshViewActionModule_Factory(t) {\n  return new (t || RefreshViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxRefreshViewActionService));\n};\nRefreshViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RefreshViewActionModule\n});\nRefreshViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RefreshViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxRefreshViewActionService\n    }];\n  }, null);\n})();\nclass RxSaveViewActionService {\n  execute(params) {\n    if (isFunction(params.targetApi.save)) {\n      const closeAfterSave$ = isFunction(params.viewApi.close) ? EMPTY.pipe(tap({\n        complete() {\n          params.viewApi.close();\n        }\n      })) : throwError(new RxError('rxSaveAction: target view does not support close API.'));\n      return concat(params.targetApi.save(params.closeAfterSave), params.closeAfterSave ? closeAfterSave$ : EMPTY);\n    } else {\n      return throwError(new RxError('rxSaveAction: target view/component does not support save API.'));\n    }\n  }\n}\nRxSaveViewActionService.ɵfac = function RxSaveViewActionService_Factory(t) {\n  return new (t || RxSaveViewActionService)();\n};\nRxSaveViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxSaveViewActionService,\n  factory: RxSaveViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxSaveViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass SaveViewActionModule {\n  constructor(rxViewActionRegistryService, rxSaveViewActionService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxSaveViewActionService = rxSaveViewActionService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxSaveAction',\n      label: 'Save',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSaveViewActionService,\n      parameters: [{\n        name: 'targetApi',\n        label: 'View/Component',\n        editor: ExpressionFormControlComponent,\n        isRequired: true,\n        enableExpressionEvaluation: true\n      }, {\n        name: 'closeAfterSave',\n        label: 'Close after save',\n        editor: SwitchFormControlComponent,\n        type: ViewComponentPropertyType.Boolean,\n        designType: ViewComponentPropertyType.Boolean\n      }, {\n        name: 'viewApi',\n        enableExpressionEvaluation: true,\n        defaultValue: '${view.api}'\n      }]\n    });\n  }\n}\nSaveViewActionModule.ɵfac = function SaveViewActionModule_Factory(t) {\n  return new (t || SaveViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxSaveViewActionService));\n};\nSaveViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SaveViewActionModule\n});\nSaveViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SaveViewActionModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxSaveViewActionService\n    }];\n  }, null);\n})();\nclass RxSetPropertyViewActionService {\n  execute(params) {\n    let executionResult = throwError(new RxError('rxSetPropertyAction: component is not specified.'));\n    if (params.componentApi && isFunction(params.componentApi.setProperty) && params.propertyPath) {\n      // Extract <Path> from  ${view.components.<ID>.<Path>}\n      const matches = params.propertyPath.match(/^\\$\\{view\\.components\\.[0-9a-z-]+\\.(.+)}$/);\n      if (matches && matches[1]) {\n        executionResult = params.componentApi.setProperty(matches[1], params.propertyValue);\n      }\n    }\n    return isObservable(executionResult) ? executionResult : EMPTY;\n  }\n}\nRxSetPropertyViewActionService.ɵfac = function RxSetPropertyViewActionService_Factory(t) {\n  return new (t || RxSetPropertyViewActionService)();\n};\nRxSetPropertyViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxSetPropertyViewActionService,\n  factory: RxSetPropertyViewActionService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxSetPropertyViewActionService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass RxSetPropertyViewActionExpressionConfigurator extends RxViewActionExpressionConfigurator {\n  constructor(injector, actionType, actionGuid) {\n    super(injector, actionType, actionGuid);\n    this.configureForProperty({\n      propertyPath: 'propertyPath',\n      dataDictionary$: injector.get(RxViewDataDictionaryService).settablePropertiesDataDictionary$,\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.MathClient)\n    });\n  }\n}\nclass RxSetPropertyViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.expressionConfigurator = new RxSetPropertyViewActionExpressionConfigurator(this.injector, this.sandbox.descriptor.name, this.guid);\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig()));\n    this.sandbox.actionProperties$.pipe(pluck('propertyPath'), distinctUntilChanged()).subscribe(propertyPath => {\n      let componentApi = null;\n      if (propertyPath && propertyPath.length) {\n        // Extract <ID> from ${view.components.<ID>.<Path>}\n        const matches = propertyPath.match(/\\${view\\.components\\.([0-9a-z-]+)\\..+}/);\n        if (matches && matches[1]) {\n          componentApi = `\\${view.components.${matches[1]}.api}`;\n        }\n      }\n      this.sandbox.updateActionProperties({\n        componentApi\n      });\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      componentApi: null,\n      propertyPath: null,\n      propertyValue: null\n    }, initialProperties);\n  }\n  getActionEditorConfig() {\n    return [{\n      name: 'propertyPath',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Property path',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyPath'),\n        operators: this.expressionConfigurator.getOperators('propertyPath'),\n        isRequired: true\n      }\n    }, {\n      name: 'propertyValue',\n      component: ExpressionFormControlComponent,\n      options: {\n        label: 'Property value',\n        dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyValue'),\n        operators: this.expressionConfigurator.getOperators('propertyValue')\n      }\n    }];\n  }\n}\nclass RxSetPropertyViewActionDesignManagerService {\n  validate(actionProperties, propertyName) {\n    return of(actionProperties.propertyPath && !/\\${view\\.components\\.([0-9a-z-]+)\\..+}/.test(actionProperties.propertyPath) ? [{\n      type: 'error',\n      description: 'Set property action: Property path is invalid.',\n      propertyName\n    }] : []);\n  }\n}\nRxSetPropertyViewActionDesignManagerService.ɵfac = function RxSetPropertyViewActionDesignManagerService_Factory(t) {\n  return new (t || RxSetPropertyViewActionDesignManagerService)();\n};\nRxSetPropertyViewActionDesignManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxSetPropertyViewActionDesignManagerService,\n  factory: RxSetPropertyViewActionDesignManagerService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxSetPropertyViewActionDesignManagerService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass SetPropertyViewActionModule {\n  constructor(rxViewActionRegistryService, rxSetPropertyViewActionService, rxSetPropertyViewActionDesignManagerService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxSetPropertyViewActionService = rxSetPropertyViewActionService;\n    this.rxSetPropertyViewActionDesignManagerService = rxSetPropertyViewActionDesignManagerService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxSetPropertyAction',\n      label: 'Set property',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSetPropertyViewActionService,\n      designModel: RxSetPropertyViewActionDesignModel,\n      designManager: rxSetPropertyViewActionDesignManagerService,\n      parameters: [{\n        name: 'componentApi',\n        label: 'Component API',\n        enableExpressionEvaluation: true\n      }, {\n        name: 'propertyPath',\n        label: 'Property path',\n        isRequired: true\n      }, {\n        name: 'propertyValue',\n        enableExpressionEvaluation: true\n      }]\n    });\n  }\n}\nSetPropertyViewActionModule.ɵfac = function SetPropertyViewActionModule_Factory(t) {\n  return new (t || SetPropertyViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxSetPropertyViewActionService), i0.ɵɵinject(RxSetPropertyViewActionDesignManagerService));\n};\nSetPropertyViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SetPropertyViewActionModule\n});\nSetPropertyViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SetPropertyViewActionModule, [{\n    type: NgModule,\n    args: [{\n      providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxSetPropertyViewActionService\n    }, {\n      type: RxSetPropertyViewActionDesignManagerService\n    }];\n  }, null);\n})();\nclass ProcessDesignerFrameComponent {\n  constructor(rxApplicationLoaderService, rxBundleCacheService, rxJsonParserService, rxProcessDefinitionCacheService, domSanitizer, activeModalRef, rxUtilityModalsService) {\n    this.rxApplicationLoaderService = rxApplicationLoaderService;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n    this.domSanitizer = domSanitizer;\n    this.activeModalRef = activeModalRef;\n    this.rxUtilityModalsService = rxUtilityModalsService;\n    this.isProcessDesignerLoadingInProgress = true;\n    this.isDefinitionDirty = false;\n    this.context = activeModalRef;\n    const data = this.context.getData();\n    localStorage.setItem('ProcessDesignerPaletteElements', data.paletteElements);\n    this.iframeSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(`/com.bmc.arsys.rx.innovationstudio/index.html#/app/bundle/${this.rxBundleCacheService.bundleId}/iprocess/${data.processDefinitionName ? data.processDefinitionName : ''}`);\n  }\n  onMessage(event) {\n    if (event.data) {\n      const message = this.rxJsonParserService.tryParseJson(event.data);\n      if (message) {\n        switch (message.messageType) {\n          case RX_DESIGNER.messageTypes.designerLoaded:\n            {\n              this.isProcessDesignerLoadingInProgress = false;\n              break;\n            }\n          case RX_DESIGNER.messageTypes.afterSave:\n            {\n              this.isDefinitionDirty = false;\n              break;\n            }\n          case RX_DESIGNER.messageTypes.definitionStatusChanged:\n            {\n              this.isDefinitionDirty = message.payload.isDirty;\n              break;\n            }\n          case RX_DESIGNER.messageTypes.closeDesigner:\n            {\n              if (message.payload.processDefinitionName) {\n                if (this.isDefinitionDirty) {\n                  this.rxUtilityModalsService.confirmUnsavedChanges().then(isConfirmed => {\n                    if (isConfirmed) {\n                      this.closeProcessDesigner(message.payload.processDefinitionName);\n                    }\n                  });\n                } else {\n                  this.closeProcessDesigner(message.payload.processDefinitionName);\n                }\n              } else {\n                if (this.isDefinitionDirty) {\n                  this.rxUtilityModalsService.confirmUnsavedChanges().then(isConfirmed => {\n                    if (isConfirmed) {\n                      this.context.dismiss(DismissReasons.CLOSE_BTN);\n                    }\n                  });\n                } else {\n                  this.context.dismiss(DismissReasons.CLOSE_BTN);\n                }\n              }\n              break;\n            }\n        }\n      }\n    }\n  }\n  closeProcessDesigner(processDefinitionName) {\n    this.rxProcessDefinitionCacheService.clearCache([processDefinitionName]);\n    this.context.close({\n      processDefinitionName\n    });\n  }\n}\nProcessDesignerFrameComponent.ɵfac = function ProcessDesignerFrameComponent_Factory(t) {\n  return new (t || ProcessDesignerFrameComponent)(i0.ɵɵdirectiveInject(i1$4.RxApplicationLoaderService), i0.ɵɵdirectiveInject(i1$4.RxBundleCacheService), i0.ɵɵdirectiveInject(i1.RxJsonParserService), i0.ɵɵdirectiveInject(i3$2.RxProcessDefinitionCacheService), i0.ɵɵdirectiveInject(i4$2.DomSanitizer), i0.ɵɵdirectiveInject(i1$2.ActiveModalRef), i0.ɵɵdirectiveInject(i2$2.RxUtilityModalsService));\n};\nProcessDesignerFrameComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ProcessDesignerFrameComponent,\n  selectors: [[\"rx-process-designer-frame\"]],\n  hostBindings: function ProcessDesignerFrameComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"message\", function ProcessDesignerFrameComponent_message_HostBindingHandler($event) {\n        return ctx.onMessage($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[\"id\", \"rx-application-loader-container\", \"class\", \"position-absolute w-100\", 4, \"ngIf\"], [1, \"h-100\", 3, \"src\"], [\"id\", \"rx-application-loader-container\", 1, \"position-absolute\", \"w-100\"], [1, \"rx-application-loader\"]],\n  template: function ProcessDesignerFrameComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ProcessDesignerFrameComponent_div_0_Template, 2, 0, \"div\", 0);\n      i0.ɵɵelement(1, \"iframe\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isProcessDesignerLoadingInProgress);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"src\", ctx.iframeSrc, i0.ɵɵsanitizeResourceUrl);\n    }\n  },\n  directives: [i2$3.NgIf],\n  styles: [\"[_nghost-%COMP%]{height:100vh}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerFrameComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-process-designer-frame',\n      templateUrl: './process-designer-frame.component.html',\n      styleUrls: ['./process-designer-frame.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: i1$4.RxApplicationLoaderService\n    }, {\n      type: i1$4.RxBundleCacheService\n    }, {\n      type: i1.RxJsonParserService\n    }, {\n      type: i3$2.RxProcessDefinitionCacheService\n    }, {\n      type: i4$2.DomSanitizer\n    }, {\n      type: i1$2.ActiveModalRef\n    }, {\n      type: i2$2.RxUtilityModalsService\n    }];\n  }, {\n    onMessage: [{\n      type: HostListener,\n      args: ['window:message', ['$event']]\n    }]\n  });\n})();\nclass RxLaunchProcessDesignerActionService {\n  constructor(adaptModalService, rxProcessDefinitionCacheService) {\n    this.adaptModalService = adaptModalService;\n    this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n  }\n  execute(parameters) {\n    return parameters.processDefinitionName ? this.rxProcessDefinitionCacheService.getProcessDefinition(parameters.processDefinitionName).pipe(switchMap(() => this.openModal(parameters))) : defer(() => from(this.openModal(parameters)));\n  }\n  openModal(parameters) {\n    return this.adaptModalService.open({\n      content: ProcessDesignerFrameComponent,\n      size: OpenViewActionModalSize.FullSize,\n      data: parameters\n    });\n  }\n}\nRxLaunchProcessDesignerActionService.ɵfac = function RxLaunchProcessDesignerActionService_Factory(t) {\n  return new (t || RxLaunchProcessDesignerActionService)(i0.ɵɵinject(i1$2.AdaptModalService), i0.ɵɵinject(i3$2.RxProcessDefinitionCacheService));\n};\nRxLaunchProcessDesignerActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchProcessDesignerActionService,\n  factory: RxLaunchProcessDesignerActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchProcessDesignerActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.AdaptModalService\n    }, {\n      type: i3$2.RxProcessDefinitionCacheService\n    }];\n  }, null);\n})();\nclass RxProcessDesignerElementPickerComponent extends ValueAccessor {\n  constructor(rxDesignerStencilBuilder, rxJsonParserService, rxProcessElementsService, renderer, translateService) {\n    super();\n    this.rxDesignerStencilBuilder = rxDesignerStencilBuilder;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxProcessElementsService = rxProcessElementsService;\n    this.renderer = renderer;\n    this.translateService = translateService;\n    this.selection = [];\n    this.destroyed$ = new ReplaySubject(1);\n  }\n  ngOnInit() {\n    const paletteElementsControl = this.innerValue;\n    this.selectedPaletteElements = paletteElementsControl === '*' ? '*' : this.rxJsonParserService.tryParseJson(paletteElementsControl, null);\n    this.rxDesignerStencilBuilder.buildElementsTree(this.rxProcessElementsService.getProcessElements(), RX_PROCESS_DEFINITION.standardProcessElementGroups).pipe(take(1)).subscribe(processElementsTree => {\n      forEach(processElementsTree, group => {\n        var _a;\n        group.expanded = true;\n        group.allChildElementsSelected = true;\n        if ((_a = this.selectedPaletteElements) === null || _a === void 0 ? void 0 : _a.length) {\n          forEach(group.children, element => {\n            if (this.selectedPaletteElements === '*' || some(this.selectedPaletteElements, selectedPaletteElement => isEqual(selectedPaletteElement, element.value))) {\n              this.selection.push(element);\n            } else {\n              group.allChildElementsSelected = false;\n            }\n          });\n          if (group.allChildElementsSelected) {\n            this.selection.push(group);\n          }\n        }\n      });\n      this.processElementsTree = [{\n        label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.all-elements.label'),\n        expanded: true,\n        children: processElementsTree\n      }];\n      this.stencilElements = flatten(map$1(processElementsTree, 'children'));\n      if (this.selectedPaletteElements === '*') {\n        this.selection.push(...this.processElementsTree);\n        this.selectedPaletteElements = map$1(this.stencilElements, 'value');\n      }\n      this.updatePickerFakeInputValue();\n    });\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n  onSelectionChange() {\n    this.selectedPaletteElements = this.selection.filter(node => !node.children).map(node => node.value);\n    if (this.selectedPaletteElements.length === 0) {\n      this.selectedPaletteElements = null;\n      this.value = null;\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.value = '*';\n    } else {\n      this.value = JSON.stringify(this.selectedPaletteElements);\n    }\n    this.updatePickerFakeInputValue();\n  }\n  updatePickerFakeInputValue() {\n    if (isEmpty(this.selectedPaletteElements)) {\n      this.selectedPaletteElementsByLabel = '';\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.all.label');\n    } else if (this.selectedPaletteElements.length === 1) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.process-designer.one-element-selected.label');\n    } else {\n      this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.process-designer.many-elements-selected.label', {\n        count: this.selectedPaletteElements.length\n      });\n    }\n  }\n  clearDefinition(e) {\n    e.stopPropagation();\n    this.selection = [];\n    this.selectedPaletteElements = null;\n    this.selectedPaletteElementsByLabel = '';\n    this.value = null;\n  }\n  setDropdownWidth() {\n    setTimeout(() => {\n      const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);\n      // 2px - border\n      this.dropdownWidth = Math.max(dropdownButton.clientWidth) + 2;\n    });\n  }\n}\nRxProcessDesignerElementPickerComponent.ɵfac = function RxProcessDesignerElementPickerComponent_Factory(t) {\n  return new (t || RxProcessDesignerElementPickerComponent)(i0.ɵɵdirectiveInject(i1$4.RxDesignerStencilBuilder), i0.ɵɵdirectiveInject(i1.RxJsonParserService), i0.ɵɵdirectiveInject(i3$2.RxProcessElementsService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i4$1.TranslateService));\n};\nRxProcessDesignerElementPickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RxProcessDesignerElementPickerComponent,\n  selectors: [[\"rx-process-designer-element-picker\"]],\n  viewQuery: function RxProcessDesignerElementPickerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownButton = _t.first);\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: RxProcessDesignerElementPickerComponent,\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 8,\n  consts: [[3, \"label\"], [\"adaptDropdown\", \"\", \"appendToBody\", \"true\", \"autoClose\", \"outside\", \"placement\", \"bottom-left\", 1, \"dropdown\", 3, \"onOpen\"], [\"adaptDropdownToggle\", \"\", \"rx-id\", \"toggle-button\", \"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"d-flex\", \"text-center\", \"w-100\"], [\"dropdownButton\", \"\"], [1, \"rx-selected-item\", \"text-left\", \"flex-grow-1\"], [\"rx-id\", \"clear-button\", \"class\", \"d-icon-cross_adapt btn-link\", 3, \"click\", 4, \"ngIf\"], [\"adaptDropdownMenu\", \"\", 1, \"dropdown-menu\", \"px-3\"], [3, \"value\", \"selectionMode\", \"selection\", \"selectionChange\"], [\"rx-id\", \"clear-button\", 1, \"d-icon-cross_adapt\", \"btn-link\", 3, \"click\"]],\n  template: function RxProcessDesignerElementPickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"adapt-rx-control-label\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵlistener(\"onOpen\", function RxProcessDesignerElementPickerComponent_Template_div_onOpen_1_listener() {\n        return ctx.setDropdownWidth();\n      });\n      i0.ɵɵelementStart(2, \"button\", 2, 3);\n      i0.ɵɵelementStart(4, \"span\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, RxProcessDesignerElementPickerComponent_span_6_Template, 1, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 6);\n      i0.ɵɵelementStart(8, \"adapt-tree\", 7);\n      i0.ɵɵlistener(\"selectionChange\", function RxProcessDesignerElementPickerComponent_Template_adapt_tree_selectionChange_8_listener($event) {\n        return ctx.selection = $event;\n      })(\"selectionChange\", function RxProcessDesignerElementPickerComponent_Template_adapt_tree_selectionChange_8_listener() {\n        return ctx.onSelectionChange();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"label\", ctx.options.label);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.selectedPaletteElementsByLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dropdownWidth, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"value\", ctx.processElementsTree)(\"selectionMode\", \"checkbox\")(\"selection\", ctx.selection);\n    }\n  },\n  directives: [i1$2.AdaptRxControlLabelComponent, i1$2.AdaptDropdownDirective, i1$2.AdaptDropdownToggleDirective, i2$3.NgIf, i1$2.AdaptDropdownMenuDirective, i1$2.AdaptTreeComponent],\n  styles: [\"[_ngcontent-%COMP%]:root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-selected-item[_ngcontent-%COMP%]{min-height:20px}span[rx-id=clear-button][_ngcontent-%COMP%]{cursor:pointer;margin-right:5px}span[rx-id=clear-button][_ngcontent-%COMP%]:not(:hover){color:#313538}.dropdown-menu[_ngcontent-%COMP%]{height:400px}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDesignerElementPickerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-process-designer-element-picker',\n      templateUrl: './process-designer-element-picker.component.html',\n      styleUrls: ['./process-designer-element-picker.component.scss'],\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: RxProcessDesignerElementPickerComponent,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i1$4.RxDesignerStencilBuilder\n    }, {\n      type: i1.RxJsonParserService\n    }, {\n      type: i3$2.RxProcessElementsService\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i4$1.TranslateService\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    dropdownButton: [{\n      type: ViewChild,\n      args: ['dropdownButton', {\n        static: true\n      }]\n    }]\n  });\n})();\nclass ProcessDesignerElementPickerModule {}\nProcessDesignerElementPickerModule.ɵfac = function ProcessDesignerElementPickerModule_Factory(t) {\n  return new (t || ProcessDesignerElementPickerModule)();\n};\nProcessDesignerElementPickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ProcessDesignerElementPickerModule,\n  declarations: [RxProcessDesignerElementPickerComponent],\n  imports: [CommonModule, FormsModule, AdaptRxCheckboxModule, i1$2.AdaptDropdownModule, AdaptRxLabelModule, AdaptTreeModule],\n  exports: [RxProcessDesignerElementPickerComponent]\n});\nProcessDesignerElementPickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, AdaptRxCheckboxModule, AdaptDropdownModule.forRoot(), AdaptRxLabelModule, AdaptTreeModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProcessDesignerElementPickerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxProcessDesignerElementPickerComponent],\n      exports: [RxProcessDesignerElementPickerComponent],\n      entryComponents: [RxProcessDesignerElementPickerComponent],\n      imports: [CommonModule, FormsModule, AdaptRxCheckboxModule, AdaptDropdownModule.forRoot(), AdaptRxLabelModule, AdaptTreeModule]\n    }]\n  }], null, null);\n})();\nclass LaunchProcessDesignerActionDesignModelClass extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.sandbox = sandbox;\n    this.translateService = this.injector.get(TranslateService);\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n      this.sandbox.setActionOutputDataDictionary([{\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n        expression: this.getOutputExpressionForPropertyPath('processDefinitionName')\n      }]);\n    });\n  }\n  static getInitialProperties(initialProperties) {\n    return Object.assign({\n      processDefinitionName: null,\n      paletteElements: null\n    }, initialProperties);\n  }\n  getActionEditorConfig() {\n    return [{\n      name: 'processDefinitionName',\n      component: DefinitionPickerOrExpressionFormControlComponent,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n        definitionType: RxDefinitionPickerType.Process,\n        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n        operators: this.expressionConfigurator.getOperators()\n      }\n    }, {\n      name: 'paletteElements',\n      component: RxProcessDesignerElementPickerComponent,\n      options: {\n        label: 'Available palette elements'\n      }\n    }];\n  }\n}\nclass RxLaunchProcessDesignerExpressionEvaluatorService {\n  constructor(rxDefaultExpressionEvaluatorService) {\n    this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n  }\n  evaluate(expression, data) {\n    let evaluatedExpression = expression;\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(expression, data);\n    }\n    return evaluatedExpression;\n  }\n  parseExpression(expression) {\n    let parsedExpression;\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      parsedExpression = this.rxDefaultExpressionEvaluatorService.parseExpression(expression);\n    }\n    return parsedExpression;\n  }\n}\nRxLaunchProcessDesignerExpressionEvaluatorService.ɵfac = function RxLaunchProcessDesignerExpressionEvaluatorService_Factory(t) {\n  return new (t || RxLaunchProcessDesignerExpressionEvaluatorService)(i0.ɵɵinject(i1$1.RxDefaultExpressionEvaluatorService));\n};\nRxLaunchProcessDesignerExpressionEvaluatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxLaunchProcessDesignerExpressionEvaluatorService,\n  factory: RxLaunchProcessDesignerExpressionEvaluatorService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxLaunchProcessDesignerExpressionEvaluatorService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.RxDefaultExpressionEvaluatorService\n    }];\n  }, null);\n})();\nclass LaunchProcessDesignerActionModule {\n  constructor(rxViewActionRegistryService, rxLaunchProcessDesignerActionService, rxLaunchProcessDesignerExpressionActionEvaluatorService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxLaunchProcessDesignerActionService = rxLaunchProcessDesignerActionService;\n    this.rxLaunchProcessDesignerExpressionActionEvaluatorService = rxLaunchProcessDesignerExpressionActionEvaluatorService;\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessDesignerAction',\n      label: 'Launch process designer',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessDesignerActionService,\n      designModel: LaunchProcessDesignerActionDesignModelClass,\n      parameters: [{\n        name: 'processDefinitionName',\n        label: 'Process definition name',\n        type: ViewComponentPropertyType.String,\n        enableExpressionEvaluation: true,\n        evaluatorService: this.rxLaunchProcessDesignerExpressionActionEvaluatorService\n      }, {\n        name: 'paletteElements',\n        label: 'Available palette elements',\n        type: ViewComponentPropertyType.String\n      }]\n    });\n  }\n}\nLaunchProcessDesignerActionModule.ɵfac = function LaunchProcessDesignerActionModule_Factory(t) {\n  return new (t || LaunchProcessDesignerActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxLaunchProcessDesignerActionService), i0.ɵɵinject(RxLaunchProcessDesignerExpressionEvaluatorService));\n};\nLaunchProcessDesignerActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LaunchProcessDesignerActionModule,\n  declarations: [ProcessDesignerFrameComponent],\n  imports: [CommonModule, RxProcessApiModule, RxIframeModule]\n});\nLaunchProcessDesignerActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxLaunchProcessDesignerExpressionEvaluatorService],\n  imports: [[CommonModule, RxProcessApiModule, RxIframeModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaunchProcessDesignerActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RxProcessApiModule, RxIframeModule],\n      declarations: [ProcessDesignerFrameComponent],\n      entryComponents: [ProcessDesignerFrameComponent],\n      providers: [RxLaunchProcessDesignerExpressionEvaluatorService]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxLaunchProcessDesignerActionService\n    }, {\n      type: RxLaunchProcessDesignerExpressionEvaluatorService\n    }];\n  }, null);\n})();\nclass RxUnknownViewActionService {\n  execute() {\n    return EMPTY;\n  }\n}\nRxUnknownViewActionService.ɵfac = function RxUnknownViewActionService_Factory(t) {\n  return new (t || RxUnknownViewActionService)();\n};\nRxUnknownViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxUnknownViewActionService,\n  factory: RxUnknownViewActionService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxUnknownViewActionService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass RxUnknownViewActionDesignManager {\n  validate(actionProperties, propertyName) {\n    return of([{\n      type: 'error',\n      description: `Unknown action: ${actionProperties.name}`,\n      propertyName\n    }]);\n  }\n}\nRxUnknownViewActionDesignManager.ɵfac = function RxUnknownViewActionDesignManager_Factory(t) {\n  return new (t || RxUnknownViewActionDesignManager)();\n};\nRxUnknownViewActionDesignManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxUnknownViewActionDesignManager,\n  factory: RxUnknownViewActionDesignManager.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxUnknownViewActionDesignManager, [{\n    type: Injectable\n  }], null, null);\n})();\nclass RxUnknownViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(injector, sandbox) {\n    super(injector, sandbox);\n    this.injector = injector;\n    this.sandbox = sandbox;\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(actionProperties => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(actionProperties));\n    });\n  }\n  getActionEditorConfig(actionProperties) {\n    return keys(actionProperties).map(propertyName => ({\n      name: propertyName,\n      component: TextFormControlComponent,\n      isDisabled: true,\n      options: {\n        label: propertyName\n      }\n    }));\n  }\n}\nclass UnknownViewActionModule {\n  constructor(rxViewActionRegistryService, rxUnknownViewActionService, rxUnknownViewActionDesignManager) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxUnknownViewActionService = rxUnknownViewActionService;\n    this.rxUnknownViewActionDesignManager = rxUnknownViewActionDesignManager;\n    this.rxViewActionRegistryService.register({\n      name: 'rxUnknownViewAction',\n      label: 'Unknown',\n      bundleId: RX_APPLICATION.platformBundleId,\n      designModel: RxUnknownViewActionDesignModel,\n      designManager: this.rxUnknownViewActionDesignManager,\n      service: this.rxUnknownViewActionService,\n      parameters: [],\n      hidden: true\n    });\n  }\n}\nUnknownViewActionModule.ɵfac = function UnknownViewActionModule_Factory(t) {\n  return new (t || UnknownViewActionModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxUnknownViewActionService), i0.ɵɵinject(RxUnknownViewActionDesignManager));\n};\nUnknownViewActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UnknownViewActionModule\n});\nUnknownViewActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UnknownViewActionModule, [{\n    type: NgModule,\n    args: [{\n      providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxUnknownViewActionService\n    }, {\n      type: RxUnknownViewActionDesignManager\n    }];\n  }, null);\n})();\nclass ViewActionsModule {}\nViewActionsModule.ɵfac = function ViewActionsModule_Factory(t) {\n  return new (t || ViewActionsModule)();\n};\nViewActionsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ViewActionsModule,\n  imports: [ApplyGridFilterViewActionModule, AssociateViewActionModule, AvcAssociateActionModule, CloseViewActionModule, DeleteRecordsViewActionModule, DisassociateViewActionModule, EditRecordsViewActionModule, LaunchProcessViewActionModule, LaunchProcessDesignerActionModule, LaunchUrlViewActionModule, OpenViewActionModule, RefreshViewActionModule, SaveViewActionModule, SetPropertyViewActionModule, UnknownViewActionModule]\n});\nViewActionsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ApplyGridFilterViewActionModule, AssociateViewActionModule, AvcAssociateActionModule, CloseViewActionModule, DeleteRecordsViewActionModule, DisassociateViewActionModule, EditRecordsViewActionModule, LaunchProcessViewActionModule, LaunchProcessDesignerActionModule, LaunchUrlViewActionModule, OpenViewActionModule, RefreshViewActionModule, SaveViewActionModule, SetPropertyViewActionModule, UnknownViewActionModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewActionsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ApplyGridFilterViewActionModule, AssociateViewActionModule, AvcAssociateActionModule, CloseViewActionModule, DeleteRecordsViewActionModule, DisassociateViewActionModule, EditRecordsViewActionModule, LaunchProcessViewActionModule, LaunchProcessDesignerActionModule, LaunchUrlViewActionModule, OpenViewActionModule, RefreshViewActionModule, SaveViewActionModule, SetPropertyViewActionModule, UnknownViewActionModule]\n    }]\n  }], null, null);\n})();\nclass RxApplyGridFilterViewActionDesignManagerService {\n  constructor(viewDesignerFacade, rxRecordGridDesignUtilsService, rxRecordGridFilterHelperService) {\n    this.viewDesignerFacade = viewDesignerFacade;\n    this.rxRecordGridDesignUtilsService = rxRecordGridDesignUtilsService;\n    this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;\n    const applyGridFilterActions$ = this.viewDesignerFacade.getComponentsByType(RxViewComponentType.Action).pipe(map(components => components.filter(comp => comp.data.name === RxApplyGridFilterActionName)), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n    const gridGuids$ = applyGridFilterActions$.pipe(map(actions => actions.map(action => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(action.data.targetApi))), map(guids => sortBy(uniq(compact(guids)))), filter(guids => Boolean(guids.length)), distinctUntilChanged((a, b) => isEqual(a, b)), shareReplay({\n      refCount: true,\n      bufferSize: 1\n    }));\n    const updateActionFiltersOnGridColumnsChange$ = gridGuids$.pipe(switchMap(gridGuids => {\n      const actionsToUpdate$ = gridGuids.map(gridGuid => this.getActionsToUpdate(gridGuid, applyGridFilterActions$));\n      return merge(...actionsToUpdate$);\n    }));\n    const clearFiltersOnGridDefinitionChange$ = gridGuids$.pipe(switchMap(gridGuids => {\n      const actionsToUpdate$ = gridGuids.map(gridGuid => this.getGridDefinitionChanges(gridGuid).pipe(skip(1), map(() => gridGuid), withLatestFrom(applyGridFilterActions$), map(([guid, actions]) => {\n        const affectedActions = actions.filter(action => action.data.targetApi.includes(guid));\n        return affectedActions.map(actionComponent => {\n          const updatedActionComponent = cloneDeep(actionComponent);\n          updatedActionComponent.data.filters = null;\n          return {\n            component: updatedActionComponent,\n            children: []\n          };\n        });\n      })));\n      return merge(...actionsToUpdate$);\n    }));\n    merge(clearFiltersOnGridDefinitionChange$, updateActionFiltersOnGridColumnsChange$).subscribe(components => {\n      components.forEach(item => {\n        this.viewDesignerFacade.updateComponentProperties(item.component.guid, item.component.data);\n        this.viewDesignerFacade.setChildren(item.component.guid, item.children);\n      });\n    });\n  }\n  getActionsToUpdate(gridGuid, applyGridFilterActions$) {\n    return this.getGridColumnChanges(gridGuid).pipe(skip(1), withLatestFrom(applyGridFilterActions$), switchMap(([gridData, actions]) => {\n      // getting actions bound to changed grid\n      const affectedActions = actions.filter(action => action.data.targetApi.includes(gridData.guid));\n      const actionsWithFilters$ = affectedActions.map(action => this.viewDesignerFacade.getChildComponents(action.guid).pipe(map(filterComponents => Object.assign(Object.assign({}, cloneDeep(action)), {\n        children: filterComponents\n      })), take(1)));\n      return forkJoin(actionsWithFilters$).pipe(map(actionComponents => {\n        const gridColumnIds = gridData.columns.map(col => col.fieldId);\n        return actionComponents.reduce((result, actionComponent) => {\n          const componentsToUpdate = this.getUpdatedFilterComponents(omit(actionComponent, 'children'), actionComponent.children, gridColumnIds);\n          return componentsToUpdate ? result.concat(componentsToUpdate) : result;\n        }, []);\n      }));\n    }));\n  }\n  getGridColumnChanges(guid) {\n    return this.viewDesignerFacade.getComponentPropertyValue(guid, 'columns').pipe(filter(columns => Array.isArray(columns)), map(columns => ({\n      guid,\n      columns: columns.map(col => ({\n        fieldId: col.fieldId,\n        namedFilterOptions: col.namedFilterOptions\n      }))\n    })), distinctUntilChanged(isEqual));\n  }\n  getGridDefinitionChanges(guid) {\n    return this.viewDesignerFacade.getComponentPropertyValue(guid, 'recordDefinitionName').pipe(distinctUntilChanged());\n  }\n  getUpdatedFilterComponents(component, filterComponents, gridColumnIds) {\n    const filterComponentsForColumns = filterComponents.filter(item => gridColumnIds.includes(item.data.fieldId));\n    if (filterComponentsForColumns.length !== filterComponents.length) {\n      const updatedFilterComponents = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponentsForColumns);\n      const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(component.data.filters, updatedFilterComponents);\n      // updating filters JSON after column remove\n      component.data.filters = newFilterData ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), updatedFilterComponents) : null;\n      return {\n        component,\n        children: filterComponentsForColumns\n      };\n    }\n    return null;\n  }\n  validate(actionProperties, propertyName) {\n    const filterValidation = !actionProperties.filters && !includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], actionProperties.mode) ? {\n      type: 'error',\n      description: 'Apply grid filter action: Filter is required',\n      propertyName\n    } : null;\n    return of(actionProperties.targetApi).pipe(map(targetApi => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(targetApi)), switchMap(guid => guid ? this.viewDesignerFacade.getComponent(guid) : of(null)), take(1), map(item => {\n      const issues = [];\n      if (actionProperties.targetApi && (item === null || item === void 0 ? void 0 : item.type) !== RX_RECORD_GRID.type) {\n        issues.push({\n          type: 'error',\n          description: 'Apply grid filter action: Record grid expression must point to a record grid.',\n          propertyName\n        });\n      }\n      if (actionProperties.targetApi && !issues.length && filterValidation) {\n        issues.push(filterValidation);\n      }\n      return issues;\n    }));\n  }\n}\nRxApplyGridFilterViewActionDesignManagerService.ɵfac = function RxApplyGridFilterViewActionDesignManagerService_Factory(t) {\n  return new (t || RxApplyGridFilterViewActionDesignManagerService)(i0.ɵɵinject(i3$3.ViewDesignerFacade), i0.ɵɵinject(i2.RxRecordGridDesignUtilsService), i0.ɵɵinject(i2.RxRecordGridFilterHelperService));\n};\nRxApplyGridFilterViewActionDesignManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxApplyGridFilterViewActionDesignManagerService,\n  factory: RxApplyGridFilterViewActionDesignManagerService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxApplyGridFilterViewActionDesignManagerService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i3$3.ViewDesignerFacade\n    }, {\n      type: i2.RxRecordGridDesignUtilsService\n    }, {\n      type: i2.RxRecordGridFilterHelperService\n    }];\n  }, null);\n})();\nclass ApplyGridFilterViewActionDesignModule {\n  constructor(rxViewActionRegistryService, rxApplyGridFilterViewActionDesignManagerService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxApplyGridFilterViewActionDesignManagerService = rxApplyGridFilterViewActionDesignManagerService;\n    this.rxViewActionRegistryService.registerDesignManager(RxApplyGridFilterActionName, rxApplyGridFilterViewActionDesignManagerService);\n  }\n}\nApplyGridFilterViewActionDesignModule.ɵfac = function ApplyGridFilterViewActionDesignModule_Factory(t) {\n  return new (t || ApplyGridFilterViewActionDesignModule)(i0.ɵɵinject(i1$1.RxViewActionRegistryService), i0.ɵɵinject(RxApplyGridFilterViewActionDesignManagerService));\n};\nApplyGridFilterViewActionDesignModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ApplyGridFilterViewActionDesignModule\n});\nApplyGridFilterViewActionDesignModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxApplyGridFilterViewActionDesignManagerService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApplyGridFilterViewActionDesignModule, [{\n    type: NgModule,\n    args: [{\n      providers: [RxApplyGridFilterViewActionDesignManagerService]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxViewActionRegistryService\n    }, {\n      type: RxApplyGridFilterViewActionDesignManagerService\n    }];\n  }, null);\n})();\nclass ViewActionsDesignModule {}\nViewActionsDesignModule.ɵfac = function ViewActionsDesignModule_Factory(t) {\n  return new (t || ViewActionsDesignModule)();\n};\nViewActionsDesignModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ViewActionsDesignModule,\n  imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule]\n});\nViewActionsDesignModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ViewActionsModule, ApplyGridFilterViewActionDesignModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewActionsDesignModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplyGridFilterViewActionModule, AssociateViewActionModule, AvcAssociateActionModule, CloseViewActionModule, DeleteRecordsViewActionModule, DisassociateViewActionModule, EditRecordsViewActionModule, LaunchProcessDesignerActionModule, LaunchProcessViewActionModule, LaunchUrlViewActionModule, OpenViewActionModule, ProcessDesignerElementPickerModule, RX_OPEN_VIEW, RefreshViewActionModule, RxApplyGridFilterActionName, RxApplyGridFilterViewActionService, RxAssociateViewActionService, RxAvcAssociateActionService, RxCloseViewActionService, RxDeleteRecordsViewActionService, RxDisassociateViewActionService, RxEditRecordsViewActionService, RxLaunchProcessDesignerActionService, RxLaunchProcessViewActionService, RxLaunchUrlViewActionService, RxOpenViewActionService, RxOpenViewModelHelperService, RxProcessDesignerElementPickerComponent, RxRefreshViewActionService, RxSaveViewActionService, RxSetPropertyViewActionService, RxUnknownViewActionDesignManager, RxUnknownViewActionService, SaveViewActionModule, SetPropertyViewActionModule, UnknownViewActionModule, ViewActionsDesignModule, ViewActionsModule };\n//# sourceMappingURL=helix-platform-view-actions.js.map","map":{"version":3,"names":["i0","Injectable","NgModule","Component","HostListener","Input","ViewChild","i1$1","ApplyGridFilterMode","RecordGridNamedFilterOptionKey","OpenViewActionModalSize","OpenViewActionType","OpenViewActionLaunchBehavior","RxViewDefinitionCacheService","ViewComponentPropertyType","RowDataItemIdFieldName","RX_VIEW_DEFINITION","RxViewComponentType","RX_LAUNCH_BEHAVIOR","i1$4","Tooltip","RX_APPLICATION","RxDefinitionNameService","RX_ERROR_HANDLING","RX_ADMINISTRATION","ExpressionOperatorGroup","RX_DESIGNER","i1","RxError","EMPTY","throwError","merge","of","combineLatest","from","forkJoin","concat","isObservable","defer","ReplaySubject","i3$3","RxViewDesignerActionModel","ViewDesignerFacade","RxViewActionExpressionConfigurator","RxViewDataDictionaryService","ExpressionFormControlComponent","RadioFormControlComponent","ValidationFormControlComponent","MessageType","RxDefinitionPickerComponent","RxDefinitionPickerType","SelectFormControlComponent","TextFormControlComponent","SwitchFormControlComponent","ValueAccessor","DefinitionPickerOrExpressionFormControlComponent","RxIframeModule","first","withLatestFrom","pluck","takeUntil","distinctUntilChanged","skip","map","filter","switchMap","take","catchError","switchMapTo","mapTo","shareReplay","tap","defaultIfEmpty","i2","RxRecordGridDesignUtilsService","RxRecordGridFilterSelectHelperService","RX_RECORD_GRID","RecordGridFilterSelectControlComponent","RecordEditorMode","ContainerRowWrap","RxAssociationEditingMode","i4","RxRecordDefinitionCacheService","RX_RECORD_DEFINITION","RX_RECORD_INSTANCE","omit","includes","transform","isObject","defaults","flow","map$1","flatten","compact","uniq","get","isFunction","isArray","some","isEmpty","castArray","noop","forEach","forIn","isNull","values","has","pick","filter$1","assign","isNil","isEqual","last","reduce","keys","sortBy","cloneDeep","i1$3","RX_ASSOCIATED_RECORD_NODE_SIDES","RX_ASSOCIATION_DEFINITION","RxAssociationDefinitionService","RxAssociatedRecordNodeSide","i2$1","i1$2","DismissReasons","DockedPanelDirection","AdaptDockedPanelModule","AdaptIconModule","AdaptRxTextareaModule","AdaptRxCheckboxModule","AdaptRxLabelModule","AdaptTreeModule","AdaptDropdownModule","i3","RuntimeViewModalComponent","RuntimeViewModule","i2$3","CommonModule","i4$1","TranslateModule","TranslateService","i2$2","RX_MODAL","i3$1","FormsModule","NG_VALUE_ACCESSOR","i3$2","RxProcessDefinitionCacheService","RX_PROCESS_DEFINITION","RxProcessApiModule","i4$2","ResultModalComponent_div_13_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵpipe","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵpropertyInterpolate","ɵɵpipeBind1","ɵɵproperty","data","details","ProcessDesignerFrameComponent_div_0_Template","_c0","RxProcessDesignerElementPickerComponent_span_6_Template","_r3","ɵɵgetCurrentView","ɵɵlistener","RxProcessDesignerElementPickerComponent_span_6_Template_span_click_0_listener","$event","ɵɵrestoreView","ctx_r2","clearDefinition","RxApplyGridFilterActionName","RxApplyGridFilterViewActionService","execute","params","targetApi","applyFilters","filters","mode","ɵfac","RxApplyGridFilterViewActionService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","RxApplyGridFilterViewActionDesignModelClass","constructor","injector","sandbox","viewDesignerFacade","rxRecordDefinitionCacheService","rxRecordGridDesignUtilsService","rxRecordGridFilterSelectHelperService","children$","pipe","actionProperties$","destroyed$","subscribe","filterComponents","filtersJson","basicFilters","getBasicRecordGridFiltersFromChildData","updateActionProperties","filterValue","filterValue$","filterPayloads","getGridFilterComponentPayloads","setChildren","mode$","targetApi$","gridGuid$","extractGuidFromExpression","Clear","gridProperties$","guid","getComponent","item","recordDefinition$","_a","recordDefinitionName","getRecordDefinition","gridColumns$","gridData","columns","recordDefinitionFiltered$","recordDefinition","fieldIds","col","filterable","fieldId","Object","fieldDefinitions","definition","String","id","namedFilterOptionsMap$","getNamedFilterOptionsFromColumns","namedFilterOptions","setActionPropertyEditorConfig","getActionEditorConfig","getInitialProperties","initialProperties","Append","getPropertiesByName","tooltip","maxWidth","controls","name","component","options","label","dataDictionary$","expressionConfigurator","getDataDictionary","operators","getOperators","isRequired","items","value","Begin","Remove","Overwrite","Merge","End","filterSelectControl","primaryRecordDefinition","selectedFieldIds","column","anchorDisabled","emptyFilterMessageControl","text","messageType","Error","customStyle","push","val","matches","match","RxApplyGridFilterViewActionDefinitionAdapterService","rxJsonParserService","rxRecordGridFilterHelperService","adaptDefinition","componentDefinitions","propertiesByName","recordGridFilters","parsedValue","tryParseJson","getRecordGridFilterDataFromPredefinedFilter","RxApplyGridFilterViewActionDefinitionAdapterService_Factory","ɵɵinject","RxJsonParserService","RxRecordGridFilterHelperService","ApplyGridFilterViewActionModule","rxViewActionRegistryService","rxApplyGridFilterViewActionService","rxApplyGridFilterViewActionDefinitionAdapterService","rxViewActionDefinitionAdapterRegistryService","register","bundleId","platformBundleId","service","designModel","parameters","enableExpressionEvaluation","registerRuntimeAdapter","ApplyGridFilterViewActionModule_Factory","RxViewActionRegistryService","RxViewActionDefinitionAdapterRegistryService","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","RX_OPEN_VIEW","actionName","modalSize","launchBehavior","RxOpenViewActionService","adaptDockedPanelService","adaptModalService","router","rxRuntimeViewUtilsService","rxViewActionUtilsService","inputParams","viewParams","result","key","JSON","stringify","isViewCancellable","viewDefinitionName","runtimeViewApi","modalData","configuration","onRegisterApi","api","title","presentation","notification","isCancellable","modalConfig","beforeDismiss","reason","isCloseViewAction","BACKDROP_CLICK","cancel","error","blockKeyboard","content","size","FullWidth","openFullWidth","CenteredModal","open","DockedLeftModal","direction","LEFT","DockedRightModal","RIGHT","url","generateViewUrl","NewWindow","window","location","pathname","navigateByUrl","RxOpenViewActionService_Factory","AdaptDockedPanelService","AdaptModalService","Router","RxRuntimeViewUtilsService","RxViewActionUtilsService","RxAssociateViewActionService","rxAssociationInstanceService","rxOpenViewActionService","rxAssociationDefinitionService","rxLogService","associatedRecordId","getInstanceIds","associationDefinitionName","instanceIds","associationDefinition","nodeAIds","nodeBIds","length","associationDefinitionRole","nodeA","nodeB","cardinality","oneToOne","oneToMany","associateRecords","useDefaultRoles","nodeARole","nodeBRole","Large","output","outs","out","extractRecordIds","debug","RxAssociateViewActionService_Factory","RxAssociationInstanceService","RxLogService","RxOpenViewDefinitionAdapterService","modalSizeMap","small","Small","medium","Medium","large","viewComponentDefinition","RxOpenViewDefinitionAdapterService_Factory","RX_OPEN_VIEW_MODAL_SIZE_OPTIONS","Xsmall","Xlarge","Xxlarge","FullSize","RX_OPEN_VIEW_TYPE_OPTIONS","RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS","SameWindow","RxOpenViewModelHelperService","getOpenViewInspector","presentationType","presentationModalSize","viewInputControls","param","isFullWidthType","isCenteredModalWithFullSize","required","definitionType","View","sortAlphabetically","option","RxOpenViewModelHelperService_Factory","RxOpenViewActionDesignModel","rxViewDefinitionCacheService","rxOpenViewModelHelperService","viewDefinitionName$","presentationType$","presentationModalSize$","config","getViewOutputParams","outputParams","setActionOutputDataDictionary","expression","getOutputExpressionForPropertyPath","props","getActionProperties","getActionPropertyValue","setActionProperties","getViewInputParams","getViewDefinition","OpenViewActionModule","openViewDefinitionAdapterService","attributes","localizable","OpenViewActionModule_Factory","imports","RxAssociateViewActionDesignModel","rxDefinitionNameService","recordDefinitionName$","associationDefinitionName$","associationNameOptions$","getRecordAssociationDefinitions","associationDefinitions","getDisplayName","associationDefinition$","isSymmetricalAssociation$","association","nodeAId","nodeBId","isManyToManyAssociation$","manyToMany","useDefaultRoles$","Boolean","associationRoleOptions$","NodeA","nodeAName","defaultName","NodeB","nodeBName","isSymmetricalAssociation","associationNameOptions","associationRoleOptions","isManyToManyAssociation","StandardDataRecord","isDisabled","AssociateViewActionModule","rxAssociateViewActionService","AssociateViewActionModule_Factory","RxAvcAssociateActionService","rxGuidService","rxStringService","rxRecordInstanceUtilsService","recordInstances","outputs","outputsItem","extractRecordInstance","associationViewComponent","associate","source","recordInstanceFields","getSelectedRows","convertFromDataPageRowToPlainRecordInstance","isNonEmptyString","fieldInstances","dummyId","generate","coreFieldIds","isNewInstance","RxAvcAssociateActionService_Factory","RxGuidService","RxStringService","RxRecordInstanceUtilsService","AvcAssociateActionModule","rxAvcAssociateActionService","hidden","AvcAssociateActionModule_Factory","RxCloseViewActionService","actAsCancel","viewApi","complete","close","RxCloseViewActionService_Factory","CloseViewActionModule","rxCloseViewActionService","defaultValue","editor","designType","CloseViewActionModule_Factory","RxDeleteRecordsViewActionService","rxModalService","translateService","rxNotificationService","rxRecordInstanceService","records","getRecordDefinitionName","recordIds","message","confirm","instant","modalStyle","modalStyles","warning","count","res","deleteObservables","recordId","delete","addSuccessMessage","refresh","RxDeleteRecordsViewActionService_Factory","RxModalService","RxNotificationService","RxRecordInstanceService","DeleteRecordsViewActionModule","rxDeleteRecordsViewActionService","editorOptions","DeleteRecordsViewActionModule_Factory","RxDisassociateViewActionService","disassociatedRecordIds","disassociateRecords","RxDisassociateViewActionService_Factory","RxDisassociateViewActionDesignModel","DisassociateViewActionModule","rxDisassociateViewActionService","DisassociateViewActionModule_Factory","ResultModalComponent","activeModelRef","getData","hasActionResultDetails","prop","summary","ResultModalComponent_Factory","ɵɵdirectiveInject","ActiveModalRef","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","consts","template","ResultModalComponent_Template","ɵɵtext","ɵɵtemplate","ResultModalComponent_Template_button_click_15_listener","ɵɵtextInterpolate2","successCount","warningCount","errorCount","ɵɵtextInterpolate1","directives","AdaptIconComponent","NgIf","AdaptRxTextareaComponent","NgControlStatus","NgModel","pipes","TranslatePipe","styles","selector","styleUrls","templateUrl","RxEditRecordsDataService","rxCommandFactoryService","resourceType","editRecordsCommand","forResourceType","editRecords","preparedRecordData","showActionResults","actionResults","catch","runAction","recordInstanceIds","recordInstance","prepareRecordData","formData","FormData","append","commandInstance","attachments","attachment","file","response","prepareActionResults","Promise","resolve","cleanUnchangedFields","field","prepareFiles","fields","keyPrefix","cleanFiles","index","hasOwnProperty","prepareAssociationInstancesForSaving","associationInstances","associationInstance","associationGroups","role","pending","nodeSide","operationResourceTypes","record","shouldOverrideOptimisticLock","associationOperations","split","requestData","newLine","updatedInstanceIdsCount","detailsMessageLabel","infoCount","messages","messageTypes","info","success","recordInstanceId","recordInstanceIdMessageHeader","messageText","convertMessageToString","join","appendedText","RxEditRecordsDataService_Factory","RxCommandFactoryService","RxEditRecordsViewBuilder","rxDefaultRecordEditorInputType","rxFieldDefinitionService","rxSystemConfigurationService","columnDescriptors","closeButtonId","containerId","recordEditorId","saveButtonId","viewDefinitionId","recordEditorComponentDefinitions","getComponentDefinitions","layout","outlets","defaultOutletName","children","height","resourceTypes","containerViewComponent","RecordEditor","BulkEdit","componentDefinition","ButtonBar","alignment","ActionButton","style","viewComponent","Action","disabled","submitterMode","getConfigurationSync","submitterModes","locked","columnDescriptor","Number","createdBy","fieldContainerComponentDefinitions","getFieldContainerComponentDefinitions","Container","rowWrap","Sm","columnCount","isSystemField","fieldDefinition","componentType","isAssociated","associationDescriptor","Association","getFieldTypeByFieldDefinition","fieldOption","fieldOptions","optional","associatedRecordNodeSide","editingMode","Dropdown","fieldComponentDefinition","fieldComponentDefinitions","slice","span","RxEditRecordsViewBuilder_Factory","RxDefaultRecordEditorInputType","RxFieldDefinitionService","RxSystemConfigurationService","RxEditRecordsViewActionService","rxEditRecordsViewBuilder","rxEditRecordsDataService","rxRecordGridUtilsService","openViewAction","getColumnDescriptors","localizedViewTitle","localizedViewNotification","viewOutput","RxEditRecordsViewActionService_Factory","RxRecordGridUtilsService","EditRecordsViewActionModule","rxEditRecordsActionService","EditRecordsViewActionModule_Factory","declarations","entryComponents","RxLaunchProcessViewActionDesignManagerService","rxProcessDefinitionService","rxViewExpressionValidatorService","validate","properties","propertyName","processDefinitionName","processDefinition","validateInputParams","validateInputParamExpressions","actionParams","issuePropertyName","processInputParams","actionDescriptor","issues","processInputParam","issue","description","validationIssues","actionParamName","RxLaunchProcessViewActionDesignManagerService_Factory","RxProcessDefinitionService","RxViewExpressionValidatorService","RxLaunchProcessViewActionDesignModel","rxProcessDefinitionCacheService","defaultProps","waitForProcessCompletion","processDefinitionName$","getProcessDefinition","getActionOutputDataDictionary","dataDictionary","Process","synchronous","getOutputParams","fieldTypeName","processVariableTypes","recordInstanceParam","RxLaunchProcessViewActionService","rxProcessInstanceCommandsService","rxProcessInstanceService","processId","processDefinitionOutputParams","start","actionProcessInputParams","headers","plainOutputParams","processOutputVariables","outputResult","variableValue","variableName","recordInstanceOutputData","fieldInstance","RxLaunchProcessViewActionService_Factory","RxProcessInstanceCommandsService","RxProcessInstanceService","LaunchProcessViewActionModule","rxLaunchProcessViewActionService","rxLaunchProcessViewActionDesignManagerService","designManager","LaunchProcessViewActionModule_Factory","providers","RxLaunchUrlViewActionService","target","RxLaunchUrlViewActionService_Factory","RxLaunchUrlViewActionDesignModel","newWindow","RxLaunchUrlViewActionDefinitionAdapterService","RxLaunchUrlViewActionDefinitionAdapterService_Factory","LaunchUrlViewActionModule","rxLaunchUrlViewActionService","rxLaunchUrlActionDefinitionAdapterService","LaunchUrlViewActionModule_Factory","RxRefreshViewActionService","RxRefreshViewActionService_Factory","RefreshViewActionModule","rxRefreshViewActionService","RefreshViewActionModule_Factory","RxSaveViewActionService","save","closeAfterSave$","closeAfterSave","RxSaveViewActionService_Factory","SaveViewActionModule","rxSaveViewActionService","SaveViewActionModule_Factory","RxSetPropertyViewActionService","executionResult","componentApi","setProperty","propertyPath","propertyValue","RxSetPropertyViewActionService_Factory","RxSetPropertyViewActionExpressionConfigurator","actionType","actionGuid","configureForProperty","settablePropertiesDataDictionary$","getOperatorRowsByGroup","MathClient","RxSetPropertyViewActionDesignModel","descriptor","RxSetPropertyViewActionDesignManagerService","actionProperties","test","RxSetPropertyViewActionDesignManagerService_Factory","SetPropertyViewActionModule","rxSetPropertyViewActionService","rxSetPropertyViewActionDesignManagerService","SetPropertyViewActionModule_Factory","ProcessDesignerFrameComponent","rxApplicationLoaderService","rxBundleCacheService","domSanitizer","activeModalRef","rxUtilityModalsService","isProcessDesignerLoadingInProgress","isDefinitionDirty","context","localStorage","setItem","paletteElements","iframeSrc","bypassSecurityTrustResourceUrl","onMessage","event","designerLoaded","afterSave","definitionStatusChanged","payload","isDirty","closeDesigner","confirmUnsavedChanges","then","isConfirmed","closeProcessDesigner","dismiss","CLOSE_BTN","clearCache","ProcessDesignerFrameComponent_Factory","RxApplicationLoaderService","RxBundleCacheService","DomSanitizer","RxUtilityModalsService","hostBindings","ProcessDesignerFrameComponent_HostBindings","ProcessDesignerFrameComponent_message_HostBindingHandler","ɵɵresolveWindow","ProcessDesignerFrameComponent_Template","ɵɵsanitizeResourceUrl","RxLaunchProcessDesignerActionService","openModal","RxLaunchProcessDesignerActionService_Factory","RxProcessDesignerElementPickerComponent","rxDesignerStencilBuilder","rxProcessElementsService","renderer","selection","ngOnInit","paletteElementsControl","innerValue","selectedPaletteElements","buildElementsTree","getProcessElements","standardProcessElementGroups","processElementsTree","group","expanded","allChildElementsSelected","element","selectedPaletteElement","stencilElements","updatePickerFakeInputValue","ngOnDestroy","next","onSelectionChange","node","selectedPaletteElementsByLabel","e","stopPropagation","setDropdownWidth","setTimeout","dropdownButton","selectRootElement","nativeElement","dropdownWidth","Math","max","clientWidth","RxProcessDesignerElementPickerComponent_Factory","RxDesignerStencilBuilder","RxProcessElementsService","Renderer2","viewQuery","RxProcessDesignerElementPickerComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","inputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵɵInheritDefinitionFeature","RxProcessDesignerElementPickerComponent_Template","RxProcessDesignerElementPickerComponent_Template_div_onOpen_1_listener","RxProcessDesignerElementPickerComponent_Template_adapt_tree_selectionChange_8_listener","ɵɵtextInterpolate","ɵɵstyleProp","AdaptRxControlLabelComponent","AdaptDropdownDirective","AdaptDropdownToggleDirective","AdaptDropdownMenuDirective","AdaptTreeComponent","static","ProcessDesignerElementPickerModule","ProcessDesignerElementPickerModule_Factory","exports","forRoot","LaunchProcessDesignerActionDesignModelClass","RxLaunchProcessDesignerExpressionEvaluatorService","rxDefaultExpressionEvaluatorService","evaluate","evaluatedExpression","validFullDefinitionName","parseExpression","parsedExpression","RxLaunchProcessDesignerExpressionEvaluatorService_Factory","RxDefaultExpressionEvaluatorService","LaunchProcessDesignerActionModule","rxLaunchProcessDesignerActionService","rxLaunchProcessDesignerExpressionActionEvaluatorService","evaluatorService","LaunchProcessDesignerActionModule_Factory","RxUnknownViewActionService","RxUnknownViewActionService_Factory","RxUnknownViewActionDesignManager","RxUnknownViewActionDesignManager_Factory","RxUnknownViewActionDesignModel","UnknownViewActionModule","rxUnknownViewActionService","rxUnknownViewActionDesignManager","UnknownViewActionModule_Factory","ViewActionsModule","ViewActionsModule_Factory","RxApplyGridFilterViewActionDesignManagerService","applyGridFilterActions$","getComponentsByType","components","comp","refCount","bufferSize","gridGuids$","actions","action","guids","a","b","updateActionFiltersOnGridColumnsChange$","gridGuids","actionsToUpdate$","gridGuid","getActionsToUpdate","clearFiltersOnGridDefinitionChange$","getGridDefinitionChanges","affectedActions","actionComponent","updatedActionComponent","updateComponentProperties","getGridColumnChanges","actionsWithFilters$","getChildComponents","actionComponents","gridColumnIds","componentsToUpdate","getUpdatedFilterComponents","getComponentPropertyValue","Array","filterComponentsForColumns","updatedFilterComponents","newFilterData","denormalizeFilterString","filterValidation","RxApplyGridFilterViewActionDesignManagerService_Factory","ApplyGridFilterViewActionDesignModule","rxApplyGridFilterViewActionDesignManagerService","registerDesignManager","ApplyGridFilterViewActionDesignModule_Factory","ViewActionsDesignModule","ViewActionsDesignModule_Factory"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-view-actions.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Component, HostListener, Input, ViewChild } from '@angular/core';\nimport * as i1$1 from '@helix/platform/view/api';\nimport { ApplyGridFilterMode, RecordGridNamedFilterOptionKey, OpenViewActionModalSize, OpenViewActionType, OpenViewActionLaunchBehavior, RxViewDefinitionCacheService, ViewComponentPropertyType, RowDataItemIdFieldName, RX_VIEW_DEFINITION, RxViewComponentType, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport * as i1$4 from '@helix/platform/shared/api';\nimport { Tooltip, RX_APPLICATION, RxDefinitionNameService, RX_ERROR_HANDLING, RX_ADMINISTRATION, ExpressionOperatorGroup, RX_DESIGNER } from '@helix/platform/shared/api';\nimport * as i1 from '@helix/platform/utils';\nimport { RxError } from '@helix/platform/utils';\nimport { EMPTY, throwError, merge, of, combineLatest, from, forkJoin, concat, isObservable, defer, ReplaySubject } from 'rxjs';\nimport * as i3$3 from '@helix/platform/view/designer';\nimport { RxViewDesignerActionModel, ViewDesignerFacade, RxViewActionExpressionConfigurator, RxViewDataDictionaryService } from '@helix/platform/view/designer';\nimport { ExpressionFormControlComponent, RadioFormControlComponent, ValidationFormControlComponent, MessageType, RxDefinitionPickerComponent, RxDefinitionPickerType, SelectFormControlComponent, TextFormControlComponent, SwitchFormControlComponent, ValueAccessor, DefinitionPickerOrExpressionFormControlComponent, RxIframeModule } from '@helix/platform/shared/components';\nimport { first, withLatestFrom, pluck, takeUntil, distinctUntilChanged, skip, map, filter, switchMap, take, catchError, switchMapTo, mapTo, shareReplay, tap, defaultIfEmpty } from 'rxjs/operators';\nimport * as i2 from '@helix/platform/view/components';\nimport { RxRecordGridDesignUtilsService, RxRecordGridFilterSelectHelperService, RX_RECORD_GRID, RecordGridFilterSelectControlComponent, RecordEditorMode, ContainerRowWrap, RxAssociationEditingMode } from '@helix/platform/view/components';\nimport * as i4 from '@helix/platform/record/api';\nimport { RxRecordDefinitionCacheService, RX_RECORD_DEFINITION, RX_RECORD_INSTANCE } from '@helix/platform/record/api';\nimport { omit, includes, transform, isObject, defaults, flow, map as map$1, flatten, compact, uniq, get, isFunction, isArray, some, isEmpty, castArray, noop, forEach, forIn, isNull, values, has, pick, filter as filter$1, assign, isNil, isEqual, last, reduce, keys, sortBy, cloneDeep } from 'lodash';\nimport * as i1$3 from '@helix/platform/association/api';\nimport { RX_ASSOCIATED_RECORD_NODE_SIDES, RX_ASSOCIATION_DEFINITION, RxAssociationDefinitionService, RxAssociatedRecordNodeSide } from '@helix/platform/association/api';\nimport * as i2$1 from '@angular/router';\nimport * as i1$2 from '@bmc-ux/adapt-angular';\nimport { DismissReasons, DockedPanelDirection, AdaptDockedPanelModule, AdaptIconModule, AdaptRxTextareaModule, AdaptRxCheckboxModule, AdaptRxLabelModule, AdaptTreeModule, AdaptDropdownModule } from '@bmc-ux/adapt-angular';\nimport * as i3 from '@helix/platform/view/runtime';\nimport { RuntimeViewModalComponent, RuntimeViewModule } from '@helix/platform/view/runtime';\nimport * as i2$3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4$1 from '@ngx-translate/core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport * as i2$2 from '@helix/platform/ui-kit';\nimport { RX_MODAL } from '@helix/platform/ui-kit';\nimport * as i3$1 from '@angular/forms';\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i3$2 from '@helix/platform/process/api';\nimport { RxProcessDefinitionCacheService, RX_PROCESS_DEFINITION, RxProcessApiModule } from '@helix/platform/process/api';\nimport * as i4$2 from '@angular/platform-browser';\n\nconst RxApplyGridFilterActionName = 'rxApplyGridFilterAction';\n\nclass RxApplyGridFilterViewActionService {\n    execute(params) {\n        if (params.targetApi) {\n            if (params.targetApi.applyFilters) {\n                params.targetApi.applyFilters(params.filters, params.mode);\n                return EMPTY;\n            }\n            else {\n                throwError(new RxError(`${RxApplyGridFilterActionName}: target component does not support applyFilters API.`));\n            }\n            return EMPTY;\n        }\n        else {\n            return throwError(new RxError('rxApplyGridFilterAction: component is not specified.'));\n        }\n    }\n}\nRxApplyGridFilterViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxApplyGridFilterViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RxApplyGridFilterViewActionDesignModelClass extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n        this.rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n        this.rxRecordGridFilterSelectHelperService = this.injector.get(RxRecordGridFilterSelectHelperService);\n        // set initial filters select value from child filter components\n        this.sandbox.children$\n            .pipe(first(), withLatestFrom(this.sandbox.actionProperties$.pipe(pluck('filters'))), takeUntil(this.sandbox.destroyed$))\n            .subscribe(([filterComponents, filtersJson]) => {\n            const basicFilters = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponents);\n            this.sandbox.updateActionProperties({\n                filterValue: {\n                    basicFilters,\n                    filtersJson\n                }\n            });\n        });\n        const filterValue$ = this.sandbox.actionProperties$.pipe(pluck('filterValue'), distinctUntilChanged());\n        // set filters data on filter select change\n        filterValue$.pipe(skip(1), takeUntil(this.sandbox.destroyed$)).subscribe(({ filtersJson, basicFilters }) => {\n            const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(basicFilters);\n            this.sandbox.setChildren(filterPayloads);\n            this.sandbox.updateActionProperties({\n                filters: filtersJson\n            });\n        });\n        const mode$ = this.sandbox.actionProperties$.pipe(pluck('mode'), distinctUntilChanged());\n        const targetApi$ = this.sandbox.actionProperties$.pipe(pluck('targetApi'), distinctUntilChanged());\n        const gridGuid$ = targetApi$.pipe(map(RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression));\n        // reset filters after grid change or when clear mode is selected\n        merge(gridGuid$.pipe(skip(1)), mode$.pipe(filter((mode) => mode === ApplyGridFilterMode.Clear)))\n            .pipe(takeUntil(this.sandbox.destroyed$))\n            .subscribe(() => {\n            this.sandbox.updateActionProperties({\n                filterValue: {\n                    basicFilters: null,\n                    filtersJson: null\n                }\n            });\n        });\n        const gridProperties$ = gridGuid$.pipe(switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))), map((item) => ((item === null || item === void 0 ? void 0 : item.type) === RX_RECORD_GRID.type ? item.data : null)));\n        const recordDefinition$ = gridProperties$.pipe(map((item) => { var _a; return (_a = item === null || item === void 0 ? void 0 : item.recordDefinitionName) !== null && _a !== void 0 ? _a : null; }), switchMap((recordDefinitionName) => recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)));\n        const gridColumns$ = gridProperties$.pipe(map((gridData) => { var _a; return (_a = gridData === null || gridData === void 0 ? void 0 : gridData.columns) !== null && _a !== void 0 ? _a : []; }));\n        const recordDefinitionFiltered$ = recordDefinition$.pipe(withLatestFrom(gridColumns$), map(([recordDefinition, columns]) => {\n            const fieldIds = columns.filter((col) => col.filterable).map((col) => col.fieldId);\n            return recordDefinition\n                ? Object.assign(Object.assign({}, recordDefinition), { fieldDefinitions: recordDefinition.fieldDefinitions.filter((definition) => fieldIds.includes(String(definition.id))) }) : null;\n        }));\n        const namedFilterOptionsMap$ = gridColumns$.pipe(map((columns) => this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(columns)));\n        combineLatest([recordDefinitionFiltered$, mode$])\n            .pipe(withLatestFrom(namedFilterOptionsMap$, gridColumns$), takeUntil(this.sandbox.destroyed$))\n            .subscribe(([[recordDefinition, mode], namedFilterOptions, columns]) => {\n            this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns));\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ targetApi: null, mode: ApplyGridFilterMode.Append, filterValue: {\n                filtersJson: null,\n                basicFilters: null\n            } }, initialProperties);\n    }\n    getPropertiesByName() {\n        return omit(super.getPropertiesByName(), 'filterValue');\n    }\n    getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns) {\n        const tooltip = new Tooltip('<b>Begin</b><p>Begin a batch of filter updates.</p><br><b>Append</b><p>Applied filters are added with the AND operator; existing filters for the specified fields are removed.</p><br><b>Remove</b><p>Existing filters are removed if they match the applied filters.</p><br><b>Overwrite</b><p>All existing filters are replaced with the applied filters.</p><br><b>Merge</b><p>Existing filters with a range of values are replaced with the matching applied filters; existing filters for the other fields are combined with the matching applied filters using the OR operator; applied filters for new fields are added with the AND operator.</p><br><b>Clear</b><p>All existing filters are removed.</p><br><b>End</b><p>Apply all pending filter updates executed in a batch.</p>');\n        tooltip.maxWidth = 310;\n        const controls = [\n            {\n                name: 'targetApi',\n                component: ExpressionFormControlComponent,\n                options: {\n                    label: 'Record grid',\n                    dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                    operators: this.expressionConfigurator.getOperators(),\n                    isRequired: true\n                }\n            },\n            {\n                name: 'mode',\n                component: RadioFormControlComponent,\n                options: {\n                    label: 'Mode',\n                    tooltip,\n                    items: [\n                        { label: 'Begin', value: ApplyGridFilterMode.Begin },\n                        { label: 'Append', value: ApplyGridFilterMode.Append },\n                        { label: 'Remove', value: ApplyGridFilterMode.Remove },\n                        { label: 'Overwrite', value: ApplyGridFilterMode.Overwrite },\n                        { label: 'Merge', value: ApplyGridFilterMode.Merge },\n                        { label: 'Clear', value: ApplyGridFilterMode.Clear },\n                        { label: 'End', value: ApplyGridFilterMode.End }\n                    ]\n                }\n            }\n        ];\n        const filterSelectControl = {\n            name: 'filterValue',\n            component: RecordGridFilterSelectControlComponent,\n            options: {\n                primaryRecordDefinition: recordDefinition,\n                selectedFieldIds: columns.map((column) => column.fieldId),\n                namedFilterOptions,\n                anchorDisabled: !recordDefinition\n            }\n        };\n        const emptyFilterMessageControl = {\n            name: 'emptyFilterMessage',\n            component: ValidationFormControlComponent,\n            options: {\n                text: 'Record grid expression required to define a filter.',\n                messageType: MessageType.Error,\n                customStyle: { 'margin-top': '-1rem' }\n            }\n        };\n        if (!includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], mode)) {\n            controls.push(filterSelectControl);\n            if (!recordDefinition) {\n                controls.push(emptyFilterMessageControl);\n            }\n        }\n        return controls;\n    }\n    static extractGuidFromExpression(val) {\n        var _a;\n        const matches = val === null || val === void 0 ? void 0 : val.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n        return (_a = (matches && matches[1])) !== null && _a !== void 0 ? _a : null;\n    }\n}\n\nclass RxApplyGridFilterViewActionDefinitionAdapterService {\n    constructor(rxJsonParserService, rxRecordGridFilterHelperService) {\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;\n    }\n    adaptDefinition({ componentDefinitions, propertiesByName }) {\n        const recordGridFilters = componentDefinitions.map((definition) => {\n            let value = definition.propertiesByName.value;\n            const parsedValue = this.rxJsonParserService.tryParseJson(value);\n            if (parsedValue && parsedValue[RecordGridNamedFilterOptionKey]) {\n                value = parsedValue;\n            }\n            return {\n                guid: definition.guid,\n                fieldId: definition.propertiesByName.fieldId,\n                value\n            };\n        });\n        // @ts-ignore - converting type\n        propertiesByName.filters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(propertiesByName.filters, recordGridFilters);\n    }\n}\nRxApplyGridFilterViewActionDefinitionAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDefinitionAdapterService, deps: [{ token: i1.RxJsonParserService }, { token: i2.RxRecordGridFilterHelperService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxApplyGridFilterViewActionDefinitionAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDefinitionAdapterService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDefinitionAdapterService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxJsonParserService }, { type: i2.RxRecordGridFilterHelperService }]; } });\n\nclass ApplyGridFilterViewActionModule {\n    constructor(rxViewActionRegistryService, rxApplyGridFilterViewActionService, rxApplyGridFilterViewActionDefinitionAdapterService, rxViewActionDefinitionAdapterRegistryService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxApplyGridFilterViewActionService = rxApplyGridFilterViewActionService;\n        this.rxApplyGridFilterViewActionDefinitionAdapterService = rxApplyGridFilterViewActionDefinitionAdapterService;\n        this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n        this.rxViewActionRegistryService.register({\n            name: RxApplyGridFilterActionName,\n            label: 'Apply grid filter',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: rxApplyGridFilterViewActionService,\n            designModel: RxApplyGridFilterViewActionDesignModelClass,\n            parameters: [\n                {\n                    name: 'targetApi',\n                    label: 'Record grid',\n                    isRequired: true,\n                    enableExpressionEvaluation: true\n                },\n                {\n                    name: 'mode',\n                    label: 'Mode'\n                },\n                {\n                    name: 'filters'\n                }\n            ]\n        });\n        rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(RxApplyGridFilterActionName, this.rxApplyGridFilterViewActionDefinitionAdapterService);\n    }\n}\nApplyGridFilterViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxApplyGridFilterViewActionService }, { token: RxApplyGridFilterViewActionDefinitionAdapterService }, { token: i1$1.RxViewActionDefinitionAdapterRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });\nApplyGridFilterViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionModule });\nApplyGridFilterViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxApplyGridFilterViewActionService }, { type: RxApplyGridFilterViewActionDefinitionAdapterService }, { type: i1$1.RxViewActionDefinitionAdapterRegistryService }]; } });\n\nconst RX_OPEN_VIEW = {\n    actionName: 'rxOpenViewAction',\n    modalSize: OpenViewActionModalSize,\n    type: OpenViewActionType,\n    launchBehavior: OpenViewActionLaunchBehavior\n};\n\nclass RxOpenViewActionService {\n    constructor(adaptDockedPanelService, adaptModalService, router, rxRuntimeViewUtilsService, rxViewActionUtilsService) {\n        this.adaptDockedPanelService = adaptDockedPanelService;\n        this.adaptModalService = adaptModalService;\n        this.router = router;\n        this.rxRuntimeViewUtilsService = rxRuntimeViewUtilsService;\n        this.rxViewActionUtilsService = rxViewActionUtilsService;\n    }\n    execute(params) {\n        const inputParams = transform(params.viewParams, (result, value, key) => {\n            result[key] = isObject(value) ? JSON.stringify(value) : String(value !== null && value !== void 0 ? value : '');\n        }, {});\n        return this.rxRuntimeViewUtilsService.isViewCancellable(params.viewDefinitionName).pipe(switchMap((isViewCancellable) => {\n            let runtimeViewApi;\n            const modalData = {\n                configuration: {\n                    viewDefinitionName: params.viewDefinitionName,\n                    inputParams: inputParams,\n                    onRegisterApi(api) {\n                        runtimeViewApi = api;\n                    }\n                },\n                title: params.presentation.title,\n                notification: params.presentation.notification,\n                isCancellable: isViewCancellable\n            };\n            const modalConfig = {\n                beforeDismiss: (reason) => {\n                    // determine if the view is being closed programmatically,\n                    // i.e. via executing the Close View action.\n                    const isCloseViewAction = !Object.values(DismissReasons).includes(reason);\n                    // do not close modal/blade when user clicked on backdrop except when view is cancellable\n                    if (!isCloseViewAction && (reason !== DismissReasons.BACKDROP_CLICK || isViewCancellable)) {\n                        runtimeViewApi\n                            .cancel()\n                            .pipe(take(1), catchError((error) => (error ? throwError(error) : EMPTY)))\n                            .subscribe();\n                    }\n                    // only allow to close view if dismiss is triggered by close view action with act as cancel\n                    return isCloseViewAction;\n                },\n                blockKeyboard: !isViewCancellable,\n                content: RuntimeViewModalComponent,\n                size: params.presentation.modalSize,\n                data: modalData\n            };\n            switch (params.presentation.type) {\n                case RX_OPEN_VIEW.type.FullWidth: {\n                    return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n                }\n                case RX_OPEN_VIEW.type.CenteredModal: {\n                    return this.adaptModalService.open(modalConfig);\n                }\n                case RX_OPEN_VIEW.type.DockedLeftModal: {\n                    return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.LEFT }, modalConfig));\n                }\n                case RX_OPEN_VIEW.type.DockedRightModal: {\n                    return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.RIGHT }, modalConfig));\n                }\n                default: {\n                    return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n                }\n            }\n        }));\n    }\n    openFullWidth(launchBehavior, viewDefinitionName, inputParams) {\n        const url = this.rxViewActionUtilsService.generateViewUrl(viewDefinitionName, inputParams);\n        if (launchBehavior === RX_OPEN_VIEW.launchBehavior.NewWindow) {\n            window.open(`${window.location.pathname}#${url}`);\n            return throwError(null);\n        }\n        else {\n            return from(this.router.navigateByUrl(url)).pipe(switchMapTo(throwError(null)));\n        }\n    }\n}\nRxOpenViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewActionService, deps: [{ token: i1$2.AdaptDockedPanelService }, { token: i1$2.AdaptModalService }, { token: i2$1.Router }, { token: i3.RxRuntimeViewUtilsService }, { token: i1$1.RxViewActionUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxOpenViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.AdaptDockedPanelService }, { type: i1$2.AdaptModalService }, { type: i2$1.Router }, { type: i3.RxRuntimeViewUtilsService }, { type: i1$1.RxViewActionUtilsService }]; } });\n\nclass RxAssociateViewActionService {\n    constructor(rxAssociationInstanceService, rxOpenViewActionService, rxAssociationDefinitionService, rxLogService, rxViewActionUtilsService) {\n        this.rxAssociationInstanceService = rxAssociationInstanceService;\n        this.rxOpenViewActionService = rxOpenViewActionService;\n        this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n        this.rxLogService = rxLogService;\n        this.rxViewActionUtilsService = rxViewActionUtilsService;\n    }\n    execute(params) {\n        if (!params.associatedRecordId) {\n            return throwError(new RxError('rxAssociateAction: Associated Record ID is not defined.'));\n        }\n        return forkJoin([\n            this.getInstanceIds(params),\n            this.rxAssociationDefinitionService.get(params.associationDefinitionName)\n        ]).pipe(switchMap(([instanceIds, associationDefinition]) => {\n            let nodeAIds = [];\n            let nodeBIds = [];\n            if (instanceIds.length) {\n                if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n                    nodeAIds = instanceIds;\n                    nodeBIds = [params.associatedRecordId];\n                }\n                else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n                    nodeAIds = [params.associatedRecordId];\n                    nodeBIds = instanceIds;\n                }\n                if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value) {\n                    nodeAIds = nodeAIds[0];\n                    nodeBIds = nodeBIds[0];\n                }\n                else if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value) {\n                    nodeAIds = nodeAIds[0];\n                }\n                return this.rxAssociationInstanceService\n                    .associateRecords(params.associationDefinitionName, nodeAIds, nodeBIds, params.useDefaultRoles, params.nodeARole, params.nodeBRole)\n                    .pipe(mapTo(instanceIds));\n            }\n            return of(instanceIds);\n        }));\n    }\n    getInstanceIds(params) {\n        return this.rxOpenViewActionService\n            .execute({\n            presentation: {\n                modalSize: RX_OPEN_VIEW.modalSize.Large,\n                type: RX_OPEN_VIEW.type.DockedRightModal\n            },\n            viewDefinitionName: params.viewDefinitionName,\n            viewParams: null\n        })\n            .pipe(map((output) => {\n            const instanceIds = flow((outs) => map$1(outs, (out) => this.rxViewActionUtilsService.extractRecordIds(out)), flatten, compact, uniq)(output);\n            this.rxLogService.debug(`RxAssociateAction: associating ${instanceIds.length} record(s)`);\n            return instanceIds;\n        }));\n    }\n}\nRxAssociateViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociateViewActionService, deps: [{ token: i1$3.RxAssociationInstanceService }, { token: RxOpenViewActionService }, { token: i1$3.RxAssociationDefinitionService }, { token: i1$4.RxLogService }, { token: i1$1.RxViewActionUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociateViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociateViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociateViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$3.RxAssociationInstanceService }, { type: RxOpenViewActionService }, { type: i1$3.RxAssociationDefinitionService }, { type: i1$4.RxLogService }, { type: i1$1.RxViewActionUtilsService }]; } });\n\nclass RxOpenViewDefinitionAdapterService {\n    constructor() {\n        this.modalSizeMap = {\n            small: RX_OPEN_VIEW.modalSize.Small,\n            medium: RX_OPEN_VIEW.modalSize.Medium,\n            large: RX_OPEN_VIEW.modalSize.Large\n        };\n    }\n    adaptDefinition(viewComponentDefinition) {\n        const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n        if (propertiesByName.name === RX_OPEN_VIEW.actionName) {\n            const modalSize = propertiesByName.presentation.modalSize;\n            if (this.modalSizeMap[modalSize]) {\n                propertiesByName.presentation.modalSize = this.modalSizeMap[modalSize];\n            }\n        }\n    }\n}\nRxOpenViewDefinitionAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewDefinitionAdapterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxOpenViewDefinitionAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewDefinitionAdapterService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewDefinitionAdapterService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nconst RX_OPEN_VIEW_MODAL_SIZE_OPTIONS = [\n    {\n        id: OpenViewActionModalSize.Xsmall,\n        name: 'Extra Small (450 px)'\n    },\n    {\n        id: OpenViewActionModalSize.Small,\n        name: 'Small (650 px)'\n    },\n    {\n        id: OpenViewActionModalSize.Medium,\n        name: 'Medium (800 px)'\n    },\n    {\n        id: OpenViewActionModalSize.Large,\n        name: 'Large (1024 px)'\n    },\n    {\n        id: OpenViewActionModalSize.Xlarge,\n        name: 'Extra Large (1200 px)'\n    },\n    {\n        id: OpenViewActionModalSize.Xxlarge,\n        name: 'Extra Extra Large (1600 px)'\n    },\n    {\n        id: OpenViewActionModalSize.FullSize,\n        name: 'Full Size'\n    }\n];\nconst RX_OPEN_VIEW_TYPE_OPTIONS = [\n    {\n        id: OpenViewActionType.FullWidth,\n        name: 'Full width'\n    },\n    {\n        id: OpenViewActionType.CenteredModal,\n        name: 'Centered modal'\n    },\n    {\n        id: OpenViewActionType.DockedLeftModal,\n        name: 'Docked left modal'\n    },\n    {\n        id: OpenViewActionType.DockedRightModal,\n        name: 'Docked right modal'\n    }\n];\nconst RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS = [\n    {\n        id: OpenViewActionLaunchBehavior.NewWindow,\n        name: 'Open in a new tab'\n    },\n    {\n        id: OpenViewActionLaunchBehavior.SameWindow,\n        name: 'Open in the same tab'\n    }\n];\n\nclass RxOpenViewModelHelperService {\n    getOpenViewInspector(inputParams, presentationType, presentationModalSize, expressionConfigurator) {\n        const viewInputControls = inputParams.map((param) => ({\n            name: `viewParams.${param.name}`,\n            component: ExpressionFormControlComponent,\n            options: {\n                label: param.name,\n                dataDictionary$: expressionConfigurator.getDataDictionary(param.name),\n                operators: expressionConfigurator.getOperators(param.name)\n            }\n        }));\n        const isFullWidthType = presentationType === OpenViewActionType.FullWidth;\n        const isCenteredModalWithFullSize = presentationType === OpenViewActionType.CenteredModal &&\n            presentationModalSize === OpenViewActionModalSize.FullSize;\n        return [\n            {\n                name: 'viewDefinitionName',\n                component: RxDefinitionPickerComponent,\n                options: {\n                    label: 'View',\n                    required: true,\n                    definitionType: RxDefinitionPickerType.View\n                }\n            },\n            ...viewInputControls,\n            {\n                name: 'presentation.type',\n                component: SelectFormControlComponent,\n                options: {\n                    label: 'Presentation',\n                    tooltip: new Tooltip('Select how to display the view in the application.'),\n                    options: RX_OPEN_VIEW_TYPE_OPTIONS,\n                    sortAlphabetically: false\n                }\n            },\n            ...(isFullWidthType\n                ? [\n                    {\n                        name: 'presentation.launchBehavior',\n                        component: SelectFormControlComponent,\n                        options: {\n                            label: 'Launch behavior',\n                            options: RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n                            sortAlphabetically: true\n                        }\n                    }\n                ]\n                : [\n                    {\n                        name: 'presentation.modalSize',\n                        component: SelectFormControlComponent,\n                        options: {\n                            label: 'Size',\n                            options: presentationType === OpenViewActionType.CenteredModal\n                                ? RX_OPEN_VIEW_MODAL_SIZE_OPTIONS\n                                : RX_OPEN_VIEW_MODAL_SIZE_OPTIONS.filter((option) => option.id !== OpenViewActionModalSize.FullSize),\n                            sortAlphabetically: false\n                        }\n                    },\n                    ...(isCenteredModalWithFullSize\n                        ? []\n                        : [\n                            {\n                                name: 'presentation.title',\n                                component: TextFormControlComponent,\n                                options: {\n                                    label: 'Title'\n                                }\n                            }\n                        ])\n                ])\n        ];\n    }\n}\nRxOpenViewModelHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewModelHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxOpenViewModelHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewModelHelperService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOpenViewModelHelperService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RxOpenViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.sandbox = sandbox;\n        this.rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n        this.rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n        const viewDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('viewDefinitionName'), distinctUntilChanged());\n        const presentationType$ = this.sandbox.actionProperties$.pipe(pluck('presentation.type'), distinctUntilChanged());\n        const presentationModalSize$ = this.sandbox.actionProperties$.pipe(pluck('presentation.modalSize'), distinctUntilChanged());\n        combineLatest([viewDefinitionName$, presentationType$, presentationModalSize$])\n            .pipe(switchMap(([viewDefinitionName, presentationType, presentationModalSize]) => this.getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize)))\n            .subscribe((config) => this.sandbox.setActionPropertyEditorConfig(config));\n        viewDefinitionName$\n            .pipe(switchMap((viewDefinitionName) => this.getViewOutputParams(viewDefinitionName)))\n            .subscribe((outputParams) => {\n            this.sandbox.setActionOutputDataDictionary(outputParams.map(({ name }) => ({\n                label: name,\n                expression: this.getOutputExpressionForPropertyPath(name)\n            })));\n        });\n        presentationType$.pipe(skip(1)).subscribe((presentationType) => {\n            let props = this.sandbox.getActionProperties();\n            if (presentationType === OpenViewActionType.FullWidth) {\n                props['presentation.launchBehavior'] = OpenViewActionLaunchBehavior.SameWindow;\n                props = omit(props, ['presentation.modalSize', 'presentation.title']);\n            }\n            else {\n                props = omit(props, ['presentation.launchBehavior']);\n                if (!props['presentation.modalSize'] ||\n                    this.sandbox.getActionPropertyValue('presentation.modalSize') === OpenViewActionModalSize.FullSize) {\n                    props['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n                }\n            }\n            this.sandbox.setActionProperties(props);\n        });\n        presentationModalSize$.pipe(skip(1)).subscribe((presentationModalSize) => {\n            if (presentationModalSize === OpenViewActionModalSize.FullSize) {\n                this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['presentation.title']));\n            }\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ viewDefinitionName: null, 'presentation.type': OpenViewActionType.FullWidth, 'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow }, initialProperties);\n    }\n    getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize) {\n        return this.getViewInputParams(viewDefinitionName).pipe(map((inputParams) => this.rxOpenViewModelHelperService.getOpenViewInspector(inputParams, presentationType, presentationModalSize, this.expressionConfigurator)));\n    }\n    getViewInputParams(viewDefinitionName) {\n        return viewDefinitionName\n            ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams'))\n            : of([]);\n    }\n    getViewOutputParams(viewDefinitionName) {\n        return viewDefinitionName\n            ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('outputParams'))\n            : of([]);\n    }\n}\n\nclass OpenViewActionModule {\n    constructor(rxViewActionDefinitionAdapterRegistryService, openViewDefinitionAdapterService, rxViewActionRegistryService, rxOpenViewActionService) {\n        this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n        this.openViewDefinitionAdapterService = openViewDefinitionAdapterService;\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxOpenViewActionService = rxOpenViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: RX_OPEN_VIEW.actionName,\n            label: 'Open view',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxOpenViewActionService,\n            designModel: RxOpenViewActionDesignModel,\n            parameters: [\n                {\n                    name: 'viewDefinitionName',\n                    label: 'View',\n                    isRequired: true\n                },\n                {\n                    name: 'viewParams',\n                    enableExpressionEvaluation: true\n                },\n                {\n                    name: 'presentation',\n                    attributes: [\n                        {\n                            name: 'title',\n                            localizable: true\n                        }\n                    ]\n                }\n            ]\n        });\n        rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(RX_OPEN_VIEW.actionName, this.openViewDefinitionAdapterService);\n    }\n}\nOpenViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: OpenViewActionModule, deps: [{ token: i1$1.RxViewActionDefinitionAdapterRegistryService }, { token: RxOpenViewDefinitionAdapterService }, { token: i1$1.RxViewActionRegistryService }, { token: RxOpenViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nOpenViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: OpenViewActionModule, imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule] });\nOpenViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: OpenViewActionModule, imports: [[CommonModule, RuntimeViewModule, AdaptDockedPanelModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: OpenViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionDefinitionAdapterRegistryService }, { type: RxOpenViewDefinitionAdapterService }, { type: i1$1.RxViewActionRegistryService }, { type: RxOpenViewActionService }]; } });\n\nclass RxAssociateViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n        this.rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n        this.rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n        const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('recordDefinitionName'), distinctUntilChanged());\n        const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('associationDefinitionName'), distinctUntilChanged());\n        const associationNameOptions$ = recordDefinitionName$.pipe(switchMap((recordDefinitionName) => recordDefinitionName\n            ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(map((associationDefinitions) => associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                id: recordDefinition.name,\n                name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n            }))))\n            : of([])));\n        const associationDefinition$ = associationDefinitionName$.pipe(switchMap((associationDefinitionName) => associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)), shareReplay(1));\n        const isSymmetricalAssociation$ = associationDefinition$.pipe(map((association) => (association ? association.nodeAId === association.nodeBId : false)));\n        const isManyToManyAssociation$ = associationDefinition$.pipe(map((association) => association ? association.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value : false));\n        const useDefaultRoles$ = this.sandbox.actionProperties$.pipe(pluck('useDefaultRoles'), map(Boolean), distinctUntilChanged());\n        useDefaultRoles$.pipe(distinctUntilChanged(), skip(1)).subscribe((useDefaultRoles) => {\n            if (useDefaultRoles) {\n                this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['nodeARole', 'nodeBRole']));\n            }\n        });\n        const associationRoleOptions$ = associationDefinition$.pipe(map((association) => association\n            ? [\n                {\n                    id: RxAssociatedRecordNodeSide.NodeA,\n                    name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n                },\n                {\n                    id: RxAssociatedRecordNodeSide.NodeB,\n                    name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n                }\n            ]\n            : []));\n        // skip initial props set\n        recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n            this.sandbox.updateActionProperties({\n                associationDefinitionName: null,\n                associationDefinitionRole: null\n            });\n        });\n        associationDefinition$\n            .pipe(\n        // skip initial props set\n        skip(1), withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$))\n            .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n            if (associationDefinition && !isSymmetricalAssociation) {\n                const associationDefinitionRole = recordDefinitionName === associationDefinition.nodeAId\n                    ? RxAssociatedRecordNodeSide.NodeA\n                    : RxAssociatedRecordNodeSide.NodeB;\n                this.sandbox.updateActionProperties({\n                    associationDefinitionRole\n                });\n            }\n            else {\n                this.sandbox.updateActionProperties({\n                    associationDefinitionRole: null\n                });\n            }\n        });\n        combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$, useDefaultRoles$])\n            .pipe(withLatestFrom(isSymmetricalAssociation$, isManyToManyAssociation$))\n            .subscribe(([[recordDefinitionName, associationNameOptions, associationRoleOptions, useDefaultRoles], isSymmetricalAssociation, isManyToManyAssociation]) => {\n            this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation, isManyToManyAssociation, useDefaultRoles));\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ recordDefinitionName: null, associationDefinitionName: null, associationDefinitionRole: null, associatedRecordId: null, viewDefinitionName: null }, initialProperties);\n    }\n    getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation, isManyToManyAssociation, useDefaultRoles) {\n        return [\n            {\n                name: 'recordDefinitionName',\n                component: RxDefinitionPickerComponent,\n                options: {\n                    label: 'Record definition to associate',\n                    definitionType: RxDefinitionPickerType.StandardDataRecord,\n                    required: true\n                }\n            },\n            ...(recordDefinitionName\n                ? [\n                    {\n                        name: 'associationDefinitionName',\n                        component: SelectFormControlComponent,\n                        options: {\n                            label: 'Association to use',\n                            options: associationNameOptions,\n                            required: true\n                        }\n                    },\n                    {\n                        name: 'associationDefinitionRole',\n                        component: SelectFormControlComponent,\n                        isDisabled: !isSymmetricalAssociation,\n                        options: {\n                            label: 'Associated record node side',\n                            required: true,\n                            options: associationRoleOptions\n                        }\n                    },\n                    {\n                        name: 'associatedRecordId',\n                        component: ExpressionFormControlComponent,\n                        options: {\n                            label: 'Associated record ID',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators(),\n                            isRequired: true\n                        }\n                    },\n                    {\n                        name: 'viewDefinitionName',\n                        component: RxDefinitionPickerComponent,\n                        options: {\n                            label: 'View for selecting or creating associated records',\n                            required: true,\n                            definitionType: RxDefinitionPickerType.View\n                        }\n                    },\n                    ...(isManyToManyAssociation\n                        ? [\n                            {\n                                name: 'useDefaultRoles',\n                                component: SwitchFormControlComponent,\n                                options: {\n                                    label: 'Use default roles'\n                                }\n                            },\n                            ...(isManyToManyAssociation && useDefaultRoles\n                                ? []\n                                : [\n                                    {\n                                        name: 'nodeARole',\n                                        component: ExpressionFormControlComponent,\n                                        options: {\n                                            label: 'First record role',\n                                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                                            operators: this.expressionConfigurator.getOperators()\n                                        }\n                                    },\n                                    {\n                                        name: 'nodeBRole',\n                                        component: ExpressionFormControlComponent,\n                                        options: {\n                                            label: 'Second record role',\n                                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                                            operators: this.expressionConfigurator.getOperators()\n                                        }\n                                    }\n                                ])\n                        ]\n                        : [])\n                ]\n                : [])\n        ];\n    }\n}\n\nclass AssociateViewActionModule {\n    constructor(rxViewActionRegistryService, rxAssociateViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxAssociateViewActionService = rxAssociateViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxAssociateAction',\n            label: 'Associate records',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxAssociateViewActionService,\n            designModel: RxAssociateViewActionDesignModel,\n            parameters: [\n                {\n                    name: 'recordDefinitionName',\n                    label: 'Record definition to associate',\n                    isRequired: true,\n                    type: ViewComponentPropertyType.String\n                },\n                {\n                    name: 'associationDefinitionName',\n                    label: 'Association to use',\n                    isRequired: true\n                },\n                {\n                    name: 'associationDefinitionRole',\n                    label: 'Associated record node side',\n                    isRequired: true\n                },\n                {\n                    name: 'associatedRecordId',\n                    label: 'Associated record ID',\n                    enableExpressionEvaluation: true,\n                    isRequired: true\n                },\n                {\n                    name: 'viewDefinitionName',\n                    label: 'View for selecting or creating associated records',\n                    isRequired: true,\n                    type: ViewComponentPropertyType.String\n                },\n                {\n                    name: 'useDefaultRoles'\n                },\n                {\n                    name: 'nodeARole',\n                    enableExpressionEvaluation: true\n                },\n                {\n                    name: 'nodeBRole',\n                    enableExpressionEvaluation: true\n                }\n            ]\n        });\n    }\n}\nAssociateViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AssociateViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxAssociateViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nAssociateViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AssociateViewActionModule, imports: [OpenViewActionModule] });\nAssociateViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AssociateViewActionModule, imports: [[OpenViewActionModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AssociateViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OpenViewActionModule]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxAssociateViewActionService }]; } });\n\nclass RxAvcAssociateActionService {\n    constructor(rxGuidService, rxOpenViewActionService, rxStringService, rxRecordInstanceUtilsService) {\n        this.rxGuidService = rxGuidService;\n        this.rxOpenViewActionService = rxOpenViewActionService;\n        this.rxStringService = rxStringService;\n        this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n    }\n    execute(params) {\n        return this.rxOpenViewActionService\n            .execute({\n            viewDefinitionName: params.viewDefinitionName,\n            viewParams: null,\n            presentation: {\n                modalSize: OpenViewActionModalSize.Large,\n                type: OpenViewActionType.DockedRightModal\n            }\n        })\n            .pipe(tap((output) => {\n            const recordInstances = flow((outputs) => map$1(outputs, (outputsItem) => this.extractRecordInstance(outputsItem)), flatten, compact, uniq)(output);\n            params.associationViewComponent.associate(recordInstances);\n        }), switchMapTo(EMPTY));\n    }\n    extractRecordInstance(source) {\n        let recordInstanceFields = [];\n        // for record grid\n        if (isFunction(source.getSelectedRows)) {\n            recordInstanceFields = map$1(source.getSelectedRows(), this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n            // for record grid row\n        }\n        else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n            recordInstanceFields.push(this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(source));\n            // for selected rows\n        }\n        else if (isArray(source) && some(source, isObject)) {\n            recordInstanceFields = map$1(source, this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n            // for existing record instance\n        }\n        else if (isObject(source) && isObject(source.fieldInstances) && source.id) {\n            recordInstanceFields.push(source);\n            // for new record instance\n        }\n        else if (isObject(source) && isObject(source.fieldInstances) && !source.id) {\n            const dummyId = this.rxGuidService.generate();\n            source.id = dummyId;\n            source.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value = dummyId;\n            source.isNewInstance = true;\n            recordInstanceFields.push(source);\n        }\n        return recordInstanceFields;\n    }\n}\nRxAvcAssociateActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAvcAssociateActionService, deps: [{ token: i1.RxGuidService }, { token: RxOpenViewActionService }, { token: i1.RxStringService }, { token: i4.RxRecordInstanceUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAvcAssociateActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAvcAssociateActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAvcAssociateActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxGuidService }, { type: RxOpenViewActionService }, { type: i1.RxStringService }, { type: i4.RxRecordInstanceUtilsService }]; } });\n\nclass AvcAssociateActionModule {\n    constructor(rxViewActionRegistryService, rxAvcAssociateActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxAvcAssociateActionService = rxAvcAssociateActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxAvcAssociate',\n            label: 'Avc associate',\n            bundleId: RX_APPLICATION.platformBundleId,\n            hidden: true,\n            service: this.rxAvcAssociateActionService,\n            parameters: [\n                {\n                    name: 'viewDefinitionName'\n                },\n                {\n                    name: 'associationViewComponent',\n                    enableExpressionEvaluation: true\n                }\n            ]\n        });\n    }\n}\nAvcAssociateActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AvcAssociateActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxAvcAssociateActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nAvcAssociateActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AvcAssociateActionModule, imports: [CommonModule] });\nAvcAssociateActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AvcAssociateActionModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AvcAssociateActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxAvcAssociateActionService }]; } });\n\nclass RxCloseViewActionService {\n    execute(params) {\n        return params.actAsCancel\n            ? params.viewApi.cancel()\n            : EMPTY.pipe(tap({\n                complete() {\n                    params.viewApi.close();\n                }\n            }));\n    }\n}\nRxCloseViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCloseViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxCloseViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCloseViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCloseViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass CloseViewActionModule {\n    constructor(rxViewActionRegistryService, rxCloseViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxCloseViewActionService = rxCloseViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxCloseViewAction',\n            label: 'Close view',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxCloseViewActionService,\n            parameters: [\n                {\n                    name: 'viewApi',\n                    enableExpressionEvaluation: true,\n                    defaultValue: '${view.api}'\n                },\n                {\n                    name: 'actAsCancel',\n                    label: 'Act as cancel',\n                    editor: SwitchFormControlComponent,\n                    type: ViewComponentPropertyType.Boolean,\n                    designType: ViewComponentPropertyType.Boolean\n                }\n            ]\n        });\n    }\n}\nCloseViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: CloseViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxCloseViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nCloseViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: CloseViewActionModule });\nCloseViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: CloseViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: CloseViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxCloseViewActionService }]; } });\n\nclass RxDeleteRecordsViewActionService {\n    constructor(rxLogService, rxModalService, translateService, rxNotificationService, rxRecordInstanceService, rxViewActionUtilsService, rxStringService) {\n        this.rxLogService = rxLogService;\n        this.rxModalService = rxModalService;\n        this.translateService = translateService;\n        this.rxNotificationService = rxNotificationService;\n        this.rxRecordInstanceService = rxRecordInstanceService;\n        this.rxViewActionUtilsService = rxViewActionUtilsService;\n        this.rxStringService = rxStringService;\n    }\n    execute(params) {\n        if (isEmpty(params.recordDefinitionName) &&\n            params.records &&\n            isFunction(params.records.getRecordDefinitionName)) {\n            params.recordDefinitionName = params.records.getRecordDefinitionName();\n        }\n        if (this.rxStringService.isNonEmptyString(params.recordDefinitionName)) {\n            let records = [];\n            if (params.records) {\n                if (isFunction(params.records.getSelectedRows)) {\n                    records = castArray(params.records.getSelectedRows());\n                }\n                else {\n                    records = castArray(params.records);\n                }\n            }\n            const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);\n            if (recordIds.length) {\n                const message = recordIds.length === 1\n                    ? 'com.bmc.arsys.rx.client.view-actions.delete-record.confirmation-dialog.message'\n                    : 'com.bmc.arsys.rx.client.view-actions.delete-records.confirmation-dialog.message';\n                return from(this.rxModalService.confirm({\n                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n                    modalStyle: RX_MODAL.modalStyles.warning,\n                    message: this.translateService.instant(message, { count: recordIds.length })\n                })).pipe(switchMap((res) => {\n                    if (res) {\n                        const deleteObservables = recordIds.map((recordId) => this.rxRecordInstanceService.delete(params.recordDefinitionName, recordId));\n                        return forkJoin(deleteObservables).pipe(tap(() => {\n                            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.view-actions.delete-records.records-deleted.message'));\n                        }), switchMapTo(isFunction(params.records.refresh)\n                            ? params.records.refresh()\n                            : EMPTY));\n                    }\n                    else {\n                        return throwError(null);\n                    }\n                }));\n            }\n            else {\n                this.rxLogService.debug('rxDeleteRecordsAction: no records to delete.');\n                return EMPTY;\n            }\n        }\n        else {\n            return throwError(new RxError('rxDeleteRecordsAction: Record Definition Name is not defined.'));\n        }\n    }\n}\nRxDeleteRecordsViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeleteRecordsViewActionService, deps: [{ token: i1$4.RxLogService }, { token: i2$2.RxModalService }, { token: i4$1.TranslateService }, { token: i1$4.RxNotificationService }, { token: i4.RxRecordInstanceService }, { token: i1$1.RxViewActionUtilsService }, { token: i1.RxStringService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxDeleteRecordsViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeleteRecordsViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeleteRecordsViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$4.RxLogService }, { type: i2$2.RxModalService }, { type: i4$1.TranslateService }, { type: i1$4.RxNotificationService }, { type: i4.RxRecordInstanceService }, { type: i1$1.RxViewActionUtilsService }, { type: i1.RxStringService }]; } });\n\nclass DeleteRecordsViewActionModule {\n    constructor(rxViewActionRegistryService, rxDeleteRecordsViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxDeleteRecordsViewActionService = rxDeleteRecordsViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxDeleteRecordsAction',\n            label: 'Delete records',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxDeleteRecordsViewActionService,\n            parameters: [\n                {\n                    name: 'records',\n                    label: 'Records',\n                    enableExpressionEvaluation: true,\n                    isRequired: true,\n                    editor: ExpressionFormControlComponent,\n                    tooltip: new Tooltip(`Build an expression that evaluates to one of the following:<br>\n            1) Record grid<br>\n            2) A collection of record instances or<br>\n            3) A collection of record instance IDs. <br>For options 2 and 3, select a record definition in the field below.`)\n                },\n                {\n                    name: 'recordDefinitionName',\n                    label: 'Record definition',\n                    type: ViewComponentPropertyType.String,\n                    editor: RxDefinitionPickerComponent,\n                    editorOptions: {\n                        definitionType: RxDefinitionPickerType.StandardDataRecord\n                    },\n                    defaultValue: null\n                }\n            ]\n        });\n    }\n}\nDeleteRecordsViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DeleteRecordsViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxDeleteRecordsViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nDeleteRecordsViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DeleteRecordsViewActionModule });\nDeleteRecordsViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DeleteRecordsViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DeleteRecordsViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxDeleteRecordsViewActionService }]; } });\n\nclass RxDisassociateViewActionService {\n    constructor(rxLogService, rxViewActionUtilsService, rxAssociationDefinitionService, rxAssociationInstanceService) {\n        this.rxLogService = rxLogService;\n        this.rxViewActionUtilsService = rxViewActionUtilsService;\n        this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n        this.rxAssociationInstanceService = rxAssociationInstanceService;\n    }\n    execute(params) {\n        if (!params.associatedRecordId) {\n            return throwError(new RxError('rxDisassociateAction: Associated Record ID is not defined.'));\n        }\n        const instanceIds = this.rxViewActionUtilsService.extractRecordIds(params.disassociatedRecordIds);\n        this.rxLogService.debug(`RxDisassociateAction: disassociating ${instanceIds.length} record(s)`);\n        if (instanceIds.length) {\n            return this.rxAssociationDefinitionService.get(params.associationDefinitionName).pipe(switchMap(() => {\n                let nodeAIds, nodeBIds = [];\n                if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n                    nodeAIds = instanceIds;\n                    nodeBIds = [params.associatedRecordId];\n                }\n                else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n                    nodeAIds = [params.associatedRecordId];\n                    nodeBIds = instanceIds;\n                }\n                return this.rxAssociationInstanceService\n                    .disassociateRecords(params.associationDefinitionName, nodeAIds, nodeBIds)\n                    .pipe(mapTo(instanceIds));\n            }));\n        }\n        else {\n            return of([]);\n        }\n    }\n}\nRxDisassociateViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDisassociateViewActionService, deps: [{ token: i1$4.RxLogService }, { token: i1$1.RxViewActionUtilsService }, { token: i1$3.RxAssociationDefinitionService }, { token: i1$3.RxAssociationInstanceService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxDisassociateViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDisassociateViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDisassociateViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$4.RxLogService }, { type: i1$1.RxViewActionUtilsService }, { type: i1$3.RxAssociationDefinitionService }, { type: i1$3.RxAssociationInstanceService }]; } });\n\nclass RxDisassociateViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n        this.rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n        this.rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n        const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('recordDefinitionName'), distinctUntilChanged());\n        const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('associationDefinitionName'), distinctUntilChanged());\n        const associationNameOptions$ = recordDefinitionName$.pipe(switchMap((recordDefinitionName) => recordDefinitionName\n            ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(map((associationDefinitions) => associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                id: recordDefinition.name,\n                name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n            }))))\n            : of([])));\n        const associationDefinition$ = associationDefinitionName$.pipe(switchMap((associationDefinitionName) => associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)), shareReplay(1));\n        const isSymmetricalAssociation$ = associationDefinition$.pipe(map((association) => (association ? association.nodeAId === association.nodeBId : false)));\n        const associationRoleOptions$ = associationDefinition$.pipe(map((association) => association\n            ? [\n                {\n                    id: RxAssociatedRecordNodeSide.NodeA,\n                    name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n                },\n                {\n                    id: RxAssociatedRecordNodeSide.NodeB,\n                    name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n                }\n            ]\n            : []));\n        // skip initial props set\n        recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n            this.sandbox.updateActionProperties({\n                associationDefinitionName: null,\n                associationDefinitionRole: null\n            });\n        });\n        associationDefinition$\n            .pipe(\n        // skip initial props set\n        skip(1), withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$))\n            .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n            if (associationDefinition && !isSymmetricalAssociation) {\n                const associationDefinitionRole = recordDefinitionName === associationDefinition.nodeAId\n                    ? RxAssociatedRecordNodeSide.NodeA\n                    : RxAssociatedRecordNodeSide.NodeB;\n                this.sandbox.updateActionProperties({\n                    associationDefinitionRole\n                });\n            }\n            else {\n                this.sandbox.updateActionProperties({\n                    associationDefinitionRole: null\n                });\n            }\n        });\n        combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$])\n            .pipe(withLatestFrom(isSymmetricalAssociation$))\n            .subscribe(([[recordDefinitionName, associationNameOptions, associationRoleOptions], isSymmetricalAssociation]) => {\n            this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation));\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ recordDefinitionName: null, associationDefinitionName: null, associationDefinitionRole: null, associatedRecordId: null, disassociatedRecordIds: null }, initialProperties);\n    }\n    getActionEditorConfig(recordDefinitionName, associationNameOptions, associationRoleOptions, isSymmetricalAssociation) {\n        return [\n            {\n                name: 'recordDefinitionName',\n                component: RxDefinitionPickerComponent,\n                options: {\n                    label: 'Record definition to disassociate',\n                    definitionType: RxDefinitionPickerType.StandardDataRecord,\n                    required: true\n                }\n            },\n            ...(recordDefinitionName\n                ? [\n                    {\n                        name: 'associationDefinitionName',\n                        component: SelectFormControlComponent,\n                        options: {\n                            label: 'Association to use',\n                            options: associationNameOptions,\n                            required: true\n                        }\n                    },\n                    {\n                        name: 'associationDefinitionRole',\n                        component: SelectFormControlComponent,\n                        isDisabled: !isSymmetricalAssociation,\n                        options: {\n                            label: 'Associated record node side',\n                            required: true,\n                            options: associationRoleOptions\n                        }\n                    },\n                    {\n                        name: 'associatedRecordId',\n                        component: ExpressionFormControlComponent,\n                        options: {\n                            label: 'Associated record ID',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators(),\n                            isRequired: true\n                        }\n                    },\n                    {\n                        name: 'disassociatedRecordIds',\n                        component: ExpressionFormControlComponent,\n                        options: {\n                            label: 'Records to disassociate',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators(),\n                            isRequired: true\n                        }\n                    }\n                ]\n                : [])\n        ];\n    }\n}\n\nclass DisassociateViewActionModule {\n    constructor(rxViewActionRegistryService, rxDisassociateViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxDisassociateViewActionService = rxDisassociateViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxDisassociateAction',\n            label: 'Disassociate records',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxDisassociateViewActionService,\n            designModel: RxDisassociateViewActionDesignModel,\n            parameters: [\n                {\n                    name: 'recordDefinitionName',\n                    label: 'Record definition to disassociate',\n                    isRequired: true,\n                    type: ViewComponentPropertyType.String\n                },\n                {\n                    name: 'associationDefinitionName',\n                    label: 'Association to use',\n                    isRequired: true\n                },\n                {\n                    name: 'associationDefinitionRole',\n                    label: 'Associated record node side',\n                    isRequired: true\n                },\n                {\n                    name: 'associatedRecordId',\n                    label: 'Associated record ID',\n                    enableExpressionEvaluation: true,\n                    isRequired: true\n                },\n                {\n                    name: 'disassociatedRecordIds',\n                    label: 'Records to disassociate',\n                    enableExpressionEvaluation: true,\n                    isRequired: true\n                }\n            ]\n        });\n    }\n}\nDisassociateViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DisassociateViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxDisassociateViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nDisassociateViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DisassociateViewActionModule });\nDisassociateViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DisassociateViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: DisassociateViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxDisassociateViewActionService }]; } });\n\nclass ResultModalComponent {\n    constructor(activeModelRef) {\n        this.activeModelRef = activeModelRef;\n        this.data = this.activeModelRef.getData();\n    }\n    close() {\n        this.activeModelRef.close();\n    }\n    hasActionResultDetails(data) {\n        return ['warningCount', 'errorCount', 'infoCount', 'successCount'].some((prop) => data.summary[prop]);\n    }\n}\nResultModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ResultModalComponent, deps: [{ token: i1$2.ActiveModalRef }], target: i0.ɵɵFactoryTarget.Component });\nResultModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: ResultModalComponent, selector: \"rx-edit-records-result-modal\", ngImport: i0, template: \"<div class=\\\"modal-body\\\">\\n  <div class=\\\"mb-2\\\">\\n    <adapt-icon [name]=\\\"'check_circle'\\\" class=\\\"mr-1 text-success-icon\\\"></adapt-icon>\\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-successfully.label' |\\n    translate}}: {{data.summary.successCount}}\\n  </div>\\n\\n  <div class=\\\"mb-2\\\">\\n    <adapt-icon [name]=\\\"'exclamation_circle'\\\" class=\\\"mr-1 text-warning-icon\\\"></adapt-icon>\\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-with-warnings.label' | translate\\n    }}: {{data.summary.warningCount}}\\n  </div>\\n\\n  <div>\\n    <adapt-icon [name]=\\\"'exclamation_triangle'\\\" class=\\\"mr-1 text-danger-icon\\\"></adapt-icon>\\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.update-failures.label' | translate }}:\\n    {{data.summary.errorCount}}\\n  </div>\\n\\n  <div class=\\\"mt-2\\\" *ngIf=\\\"hasActionResultDetails(data) && data.details\\\">\\n    <adapt-rx-textarea\\n      class=\\\"resize-none\\\"\\n      label=\\\"{{'com.bmc.arsys.rx.client.common.messages.label' | translate }}\\\"\\n      readonly\\n      rows=\\\"15\\\"\\n      [ngModel]=\\\"data.details\\\"\\n    >\\n    </adapt-rx-textarea>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n  <button class=\\\"btn btn-secondary btn-sm\\\" (click)=\\\"close()\\\" type=\\\"button\\\">\\n    {{'com.bmc.arsys.rx.client.common.close.label' | translate}}\\n  </button>\\n</div>\\n\", styles: [\":host ::ng-deep .resize-none{resize:none}\\n\"], components: [{ type: i1$2.AdaptIconComponent, selector: \"adapt-icon\", inputs: [\"name\", \"classList\", \"description\", \"testID\"] }, { type: i1$2.AdaptRxTextareaComponent, selector: \"adapt-rx-textarea\", inputs: [\"rows\", \"maxRows\", \"autocomplete\", \"placeholder\", \"size\", \"showValidState\", \"showValidStateIcon\", \"showInvalidStateIcon\", \"validStateMessage\", \"disabledStyleForReadonlyState\"] }], directives: [{ type: i2$3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3$1.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3$1.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], pipes: { \"translate\": i4$1.TranslatePipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ResultModalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-edit-records-result-modal',\n                    styleUrls: ['./result-modal.scss'],\n                    templateUrl: './result-modal.html'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.ActiveModalRef }]; } });\n\nclass RxEditRecordsDataService {\n    constructor(adaptModalService, translateService, rxCommandFactoryService) {\n        this.adaptModalService = adaptModalService;\n        this.translateService = translateService;\n        this.rxCommandFactoryService = rxCommandFactoryService;\n        this.resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n        this.editRecordsCommand = this.rxCommandFactoryService.forResourceType(this.resourceType);\n    }\n    editRecords(preparedRecordData) {\n        return this.editRecordsCommand.execute(preparedRecordData);\n    }\n    showActionResults(actionResults) {\n        return this.adaptModalService\n            .open({\n            size: 'sm',\n            title: this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.title'),\n            data: actionResults,\n            content: ResultModalComponent\n        })\n            .catch(noop);\n    }\n    runAction(recordInstanceIds, recordInstance) {\n        const preparedRecordData = this.prepareRecordData(recordInstanceIds, recordInstance);\n        const formData = new FormData();\n        formData.append('commandInstance', JSON.stringify(preparedRecordData.commandInstance));\n        forEach(preparedRecordData.attachments, (attachment) => {\n            formData.append(attachment.key, attachment.file);\n        });\n        Object.keys(preparedRecordData || {}).map((item) => {\n            if (item !== 'commandInstance' && item !== 'attachments') {\n                formData.append(item, JSON.stringify(preparedRecordData[item]));\n            }\n        });\n        return this.editRecords(formData).pipe(map((response) => this.prepareActionResults(response, preparedRecordData)), switchMap((actionResults) => {\n            return from(Promise.resolve(this.showActionResults(actionResults)));\n        }));\n    }\n    cleanUnchangedFields(recordInstance) {\n        return forIn(recordInstance.fieldInstances, (field, key) => {\n            if (isNull(field.value)) {\n                delete recordInstance.fieldInstances[key];\n            }\n        });\n    }\n    prepareFiles(fields, keyPrefix) {\n        return values(fields)\n            .filter((field) => has(field, 'file'))\n            .map((attachment) => ({\n            key: keyPrefix ? keyPrefix + '/' + attachment.id : attachment.id,\n            file: attachment.file\n        }));\n    }\n    cleanFiles(fields) {\n        Object.keys(fields).map((key, index) => {\n            fields[key].hasOwnProperty('file') ? delete fields[key] : delete fields[key].file;\n        });\n        return fields;\n    }\n    prepareAssociationInstancesForSaving(associationInstances) {\n        return transform(associationInstances, (result, associationInstance, associationDefinitionName) => {\n            forEach(associationInstance, (associationGroups, role) => {\n                if (!isEmpty(associationGroups.pending)) {\n                    result.push({\n                        associationDefinitionName: associationDefinitionName,\n                        recordInstanceIds: map$1(associationGroups.pending, 'id'),\n                        nodeSide: role,\n                        resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n                    });\n                }\n            });\n        }, []);\n    }\n    prepareRecordData(recordInstanceIds, recordInstance) {\n        const record = pick(recordInstance, ['resourceType', 'recordDefinitionName', 'fieldInstances']);\n        const resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n        record.fieldInstances = this.cleanUnchangedFields(record);\n        const attachments = this.prepareFiles(record.fieldInstances);\n        record.fieldInstances = this.cleanFiles(record.fieldInstances);\n        const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n        const data = {\n            shouldOverrideOptimisticLock: false,\n            commandInstance: { resourceType },\n            recordInstanceIds: recordInstanceIds,\n            recordInstance: record,\n            attachments: attachments\n        };\n        if (!isEmpty(associationInstances)) {\n            data.associationOperations = associationInstances.map((associationInstance) => (Object.assign(Object.assign({}, associationInstance), { nodeSide: associationInstance.nodeSide.split(':')[0] })));\n        }\n        return data;\n    }\n    prepareActionResults(response, requestData) {\n        const newLine = '\\n';\n        const updatedInstanceIdsCount = requestData.recordInstanceIds.length;\n        const detailsMessageLabel = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.details.record-instance-id.label');\n        const summary = {\n            successCount: 0,\n            errorCount: 0,\n            warningCount: 0,\n            infoCount: 0\n        };\n        let details;\n        if (!isEmpty(response)) {\n            summary.errorCount = filter$1(response, (messages) => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.error])).length;\n            summary.warningCount = filter$1(response, (messages) => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.warning])).length;\n            summary.infoCount = filter$1(response, (messages) => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.info])).length;\n            summary.successCount = filter$1(response, (messages) => some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.success])).length;\n            details = map$1(response, (messages, recordInstanceId) => {\n                const recordInstanceIdMessageHeader = detailsMessageLabel + ': ' + recordInstanceId;\n                const messageText = values(messages).map(this.convertMessageToString).join(', ');\n                return recordInstanceIdMessageHeader + newLine + messageText;\n            }).join(newLine + newLine);\n        }\n        else {\n            details = '';\n        }\n        summary.successCount = updatedInstanceIdsCount - summary.errorCount - summary.warningCount;\n        return { summary, details };\n    }\n    convertMessageToString(message) {\n        return `${message.messageType}: ${values([message.messageText, message.appendedText]).join(' ')}`;\n    }\n}\nRxEditRecordsDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsDataService, deps: [{ token: i1$2.AdaptModalService }, { token: i4$1.TranslateService }, { token: i1$4.RxCommandFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxEditRecordsDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsDataService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsDataService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.AdaptModalService }, { type: i4$1.TranslateService }, { type: i1$4.RxCommandFactoryService }]; } });\n\nclass RxEditRecordsViewBuilder {\n    constructor(rxGuidService, rxDefaultRecordEditorInputType, rxFieldDefinitionService, translateService, rxSystemConfigurationService) {\n        this.rxGuidService = rxGuidService;\n        this.rxDefaultRecordEditorInputType = rxDefaultRecordEditorInputType;\n        this.rxFieldDefinitionService = rxFieldDefinitionService;\n        this.translateService = translateService;\n        this.rxSystemConfigurationService = rxSystemConfigurationService;\n    }\n    getViewDefinition(recordDefinitionName, columnDescriptors) {\n        const closeButtonId = this.rxGuidService.generate(), containerId = this.rxGuidService.generate(), recordEditorId = this.rxGuidService.generate(), recordInstanceId = null, saveButtonId = this.rxGuidService.generate(), viewDefinitionId = this.rxGuidService.generate(), recordEditorComponentDefinitions = this.getComponentDefinitions(columnDescriptors, recordEditorId);\n        return {\n            guid: viewDefinitionId,\n            layout: JSON.stringify({\n                outlets: [\n                    {\n                        name: RX_VIEW_DEFINITION.defaultOutletName,\n                        columns: [\n                            {\n                                children: [recordEditorId]\n                            }\n                        ]\n                    },\n                    {\n                        name: 'footer',\n                        height: 60,\n                        columns: [\n                            {\n                                children: [containerId]\n                            }\n                        ]\n                    }\n                ]\n            }),\n            outputParams: [\n                {\n                    name: 'recordInstance',\n                    source: '${view.components.' + recordEditorId + '.recordInstance}'\n                }\n            ],\n            inputParams: [],\n            componentDefinitions: [\n                {\n                    resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                    guid: recordEditorId,\n                    type: RxViewComponentType.RecordEditor,\n                    propertiesByName: {\n                        recordInstanceId: `${recordInstanceId}`,\n                        mode: RecordEditorMode.BulkEdit,\n                        recordDefinitionName: recordDefinitionName,\n                        styles: 'p-0 border-0'\n                    },\n                    componentDefinitions: recordEditorComponentDefinitions,\n                    layout: JSON.stringify({\n                        outlets: [\n                            {\n                                name: RX_VIEW_DEFINITION.defaultOutletName,\n                                columns: [\n                                    {\n                                        children: recordEditorComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                                    }\n                                ]\n                            }\n                        ]\n                    })\n                },\n                {\n                    resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                    guid: containerId,\n                    type: RxViewComponentType.ButtonBar,\n                    propertiesByName: {\n                        alignment: 'right',\n                        hidden: '0'\n                    },\n                    layout: JSON.stringify({\n                        outlets: [\n                            {\n                                name: RX_VIEW_DEFINITION.defaultOutletName,\n                                columns: [\n                                    {\n                                        children: [saveButtonId, closeButtonId]\n                                    }\n                                ]\n                            }\n                        ]\n                    }),\n                    componentDefinitions: [\n                        {\n                            resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                            guid: closeButtonId,\n                            type: RxViewComponentType.ActionButton,\n                            propertiesByName: {\n                                label: this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label'),\n                                style: 'secondary',\n                                size: 'default'\n                            },\n                            componentDefinitions: [\n                                {\n                                    resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                                    guid: this.rxGuidService.generate(),\n                                    type: RxViewComponentType.Action,\n                                    propertiesByName: {\n                                        viewApi: '${view.api}',\n                                        name: 'rxCloseViewAction',\n                                        actAsCancel: 'true'\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                            guid: saveButtonId,\n                            type: RxViewComponentType.ActionButton,\n                            propertiesByName: {\n                                label: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n                                style: 'primary',\n                                disabled: 'NOT${view.components.' + recordEditorId + '.canSave}',\n                                size: 'default'\n                            },\n                            componentDefinitions: [\n                                {\n                                    resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                                    guid: this.rxGuidService.generate(),\n                                    type: RxViewComponentType.Action,\n                                    propertiesByName: {\n                                        viewApi: '${view.api}',\n                                        name: 'rxCloseViewAction',\n                                        actAsCancel: 'false'\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        };\n    }\n    getComponentDefinitions(columnDescriptors, recordEditorId) {\n        const submitterMode = this.rxSystemConfigurationService.getConfigurationSync('Submitter-Mode');\n        if (submitterMode === RX_ADMINISTRATION.submitterModes.locked) {\n            columnDescriptors = columnDescriptors.filter((columnDescriptor) => Number(columnDescriptor.fieldId) !== RX_RECORD_DEFINITION.coreFieldIds.createdBy);\n        }\n        const fieldContainerComponentDefinitions = this.getFieldContainerComponentDefinitions(columnDescriptors, recordEditorId);\n        return [\n            {\n                resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                guid: this.rxGuidService.generate(),\n                type: RxViewComponentType.Container,\n                propertiesByName: {\n                    rowWrap: ContainerRowWrap.Sm,\n                    columnCount: '1'\n                },\n                componentDefinitions: fieldContainerComponentDefinitions,\n                layout: JSON.stringify({\n                    outlets: [\n                        {\n                            name: RX_VIEW_DEFINITION.defaultOutletName,\n                            columns: [\n                                {\n                                    children: fieldContainerComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                                }\n                            ]\n                        }\n                    ]\n                })\n            }\n        ];\n    }\n    getFieldContainerComponentDefinitions(columnDescriptors, recordEditorId) {\n        return columnDescriptors\n            .filter((columnDescriptor) => !this.rxFieldDefinitionService.isSystemField(columnDescriptor.fieldDefinition))\n            .map((columnDescriptor) => {\n            let resourceType, componentType;\n            const isAssociated = Boolean(columnDescriptor.associationDescriptor);\n            if (isAssociated) {\n                resourceType = RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n                componentType = RxViewComponentType.Association;\n            }\n            else {\n                resourceType = RX_VIEW_DEFINITION.resourceTypes.viewComponent;\n                componentType = this.rxDefaultRecordEditorInputType.getFieldTypeByFieldDefinition(columnDescriptor.fieldDefinition);\n            }\n            const componentDefinition = {\n                resourceType: resourceType,\n                guid: this.rxGuidService.generate(),\n                type: componentType,\n                propertiesByName: {\n                    fieldId: columnDescriptor.fieldDefinition.id,\n                    recordDefinition: '${view.components.' + recordEditorId + '.recordDefinition}',\n                    recordInstance: '${view.components.' + recordEditorId + '.recordInstance}',\n                    label: columnDescriptor.title,\n                    fieldOption: RX_RECORD_DEFINITION.fieldOptions.optional\n                }\n            };\n            if (isAssociated) {\n                componentDefinition.componentDefinitions = [];\n                assign(componentDefinition.propertiesByName, {\n                    associatedRecordNodeSide: columnDescriptor.associationDescriptor.nodeSide,\n                    editingMode: RxAssociationEditingMode.Dropdown,\n                    associationDefinitionName: columnDescriptor.associationDescriptor.associationDefinition.name,\n                    recordDefinitionName: columnDescriptor.associationDescriptor.recordDefinitionName\n                });\n            }\n            return componentDefinition;\n        })\n            .reduce((fieldContainerComponentDefinitions, fieldComponentDefinition, index, fieldComponentDefinitions) => {\n            if (index % 2 === 0) {\n                fieldContainerComponentDefinitions.push({\n                    resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                    guid: this.rxGuidService.generate(),\n                    type: RxViewComponentType.Container,\n                    propertiesByName: {\n                        rowWrap: ContainerRowWrap.Sm,\n                        columnCount: '2'\n                    },\n                    componentDefinitions: fieldComponentDefinitions.slice(index, index + 2),\n                    layout: JSON.stringify({\n                        outlets: [\n                            {\n                                name: RX_VIEW_DEFINITION.defaultOutletName,\n                                columns: [\n                                    {\n                                        children: [fieldComponentDefinition.guid],\n                                        span: '6'\n                                    },\n                                    {\n                                        children: fieldComponentDefinitions.length > index + 1\n                                            ? [fieldComponentDefinitions[index + 1].guid]\n                                            : [],\n                                        span: '6'\n                                    }\n                                ]\n                            }\n                        ]\n                    })\n                });\n            }\n            return fieldContainerComponentDefinitions;\n        }, []);\n    }\n}\nRxEditRecordsViewBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewBuilder, deps: [{ token: i1.RxGuidService }, { token: i2.RxDefaultRecordEditorInputType }, { token: i4.RxFieldDefinitionService }, { token: i4$1.TranslateService }, { token: i1$4.RxSystemConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxEditRecordsViewBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewBuilder, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxGuidService }, { type: i2.RxDefaultRecordEditorInputType }, { type: i4.RxFieldDefinitionService }, { type: i4$1.TranslateService }, { type: i1$4.RxSystemConfigurationService }]; } });\n\nclass RxEditRecordsViewActionService {\n    constructor(rxEditRecordsViewBuilder, rxEditRecordsDataService, rxLogService, rxRecordGridUtilsService, translateService, rxDefinitionNameService, openViewAction, rxViewActionUtilsService) {\n        this.rxEditRecordsViewBuilder = rxEditRecordsViewBuilder;\n        this.rxEditRecordsDataService = rxEditRecordsDataService;\n        this.rxLogService = rxLogService;\n        this.rxRecordGridUtilsService = rxRecordGridUtilsService;\n        this.translateService = translateService;\n        this.rxDefinitionNameService = rxDefinitionNameService;\n        this.openViewAction = openViewAction;\n        this.rxViewActionUtilsService = rxViewActionUtilsService;\n    }\n    execute(params) {\n        let { recordDefinitionName } = params;\n        if (isNil(params.records)) {\n            return throwError(new RxError('rxEditRecordsAction: no records to edit.'));\n        }\n        if (isEmpty(recordDefinitionName) && isFunction(params.records.getRecordDefinitionName)) {\n            recordDefinitionName = params.records.getRecordDefinitionName();\n        }\n        if (recordDefinitionName) {\n            const recordIds = this.rxViewActionUtilsService.extractRecordIds(params.records);\n            if (recordIds.length) {\n                return from(this.rxRecordGridUtilsService.getColumnDescriptors(recordDefinitionName, params.records)).pipe(switchMap((columnDescriptors) => {\n                    const localizedViewTitle = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.view.title', { recordDefinitionName: this.rxDefinitionNameService.getDisplayName(recordDefinitionName) });\n                    const localizedViewNotification = this.translateService.instant('com.bmc.arsys.rx.client.view-actions.edit-records.view.notification');\n                    return this.openViewAction\n                        .execute({\n                        presentation: {\n                            modalSize: RX_OPEN_VIEW.modalSize.Large,\n                            title: localizedViewTitle,\n                            notification: localizedViewNotification,\n                            type: RX_OPEN_VIEW.type.DockedRightModal\n                        },\n                        viewDefinitionName: this.rxEditRecordsViewBuilder.getViewDefinition(recordDefinitionName, columnDescriptors),\n                        viewParams: null\n                    })\n                        .pipe(switchMap((viewOutput) => viewOutput && viewOutput.recordInstance\n                        ? this.rxEditRecordsDataService\n                            .runAction(recordIds, viewOutput.recordInstance)\n                            .pipe(switchMap(() => isFunction(params.records.refresh)\n                            ? params.records.refresh()\n                            : EMPTY))\n                        : EMPTY));\n                }));\n            }\n            else {\n                this.rxLogService.debug('rxEditRecordsAction: no records to edit.');\n            }\n        }\n        else {\n            this.rxLogService.error('rxEditRecordsAction: Record Definition Name is not defined.');\n        }\n        return EMPTY;\n    }\n}\nRxEditRecordsViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewActionService, deps: [{ token: RxEditRecordsViewBuilder }, { token: RxEditRecordsDataService }, { token: i1$4.RxLogService }, { token: i2.RxRecordGridUtilsService }, { token: i4$1.TranslateService }, { token: i1$4.RxDefinitionNameService }, { token: RxOpenViewActionService }, { token: i1$1.RxViewActionUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxEditRecordsViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxEditRecordsViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxEditRecordsViewBuilder }, { type: RxEditRecordsDataService }, { type: i1$4.RxLogService }, { type: i2.RxRecordGridUtilsService }, { type: i4$1.TranslateService }, { type: i1$4.RxDefinitionNameService }, { type: RxOpenViewActionService }, { type: i1$1.RxViewActionUtilsService }]; } });\n\nclass EditRecordsViewActionModule {\n    constructor(rxViewActionRegistryService, rxEditRecordsActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxEditRecordsActionService = rxEditRecordsActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxEditRecordsAction',\n            label: 'Edit records',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxEditRecordsActionService,\n            parameters: [\n                {\n                    name: 'records',\n                    label: 'Records',\n                    isRequired: true,\n                    tooltip: new Tooltip(`Build an expression that evaluates to one of the following:<br>\n            1) Record Grid;<br>\n            2) A collection of Record Instances, or<br>\n            3) A collection of Record Instance IDs. <br>For options 2 and 3, select a Record Definition in the field below.`),\n                    enableExpressionEvaluation: true,\n                    editor: ExpressionFormControlComponent\n                },\n                {\n                    name: 'recordDefinitionName',\n                    label: 'Record definition',\n                    type: ViewComponentPropertyType.String,\n                    editor: RxDefinitionPickerComponent,\n                    editorOptions: {\n                        definitionType: RxDefinitionPickerType.StandardDataRecord\n                    },\n                    defaultValue: null\n                }\n            ]\n        });\n    }\n}\nEditRecordsViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: EditRecordsViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxEditRecordsViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nEditRecordsViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: EditRecordsViewActionModule, declarations: [ResultModalComponent], imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule] });\nEditRecordsViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: EditRecordsViewActionModule, imports: [[CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: EditRecordsViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule],\n                    declarations: [ResultModalComponent],\n                    entryComponents: [ResultModalComponent]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxEditRecordsViewActionService }]; } });\n\nclass RxLaunchProcessViewActionDesignManagerService {\n    constructor(rxProcessDefinitionService, rxViewActionRegistryService, rxViewExpressionValidatorService) {\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxViewExpressionValidatorService = rxViewExpressionValidatorService;\n    }\n    validate(properties, propertyName) {\n        if (properties.processDefinitionName) {\n            return this.rxProcessDefinitionService.get(properties.processDefinitionName).pipe(switchMap((processDefinition) => combineLatest([\n                this.validateInputParams(properties, propertyName, processDefinition.inputParams),\n                this.validateInputParamExpressions(properties, propertyName, processDefinition.inputParams)\n            ])), map(flatten));\n        }\n        else {\n            return of([]);\n        }\n    }\n    validateInputParamExpressions(actionParams, issuePropertyName, processInputParams) {\n        const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n        const issues = processInputParams\n            .filter((processInputParam) => actionParams[`actionProcessInputParams.${processInputParam.name}`])\n            .map((processInputParam) => this.rxViewExpressionValidatorService\n            .validate(actionParams[`actionProcessInputParams.${processInputParam.name}`], issuePropertyName, actionDescriptor.label)\n            .pipe(map((issues) => issues.map((issue) => (Object.assign(Object.assign({}, issue), { description: `${actionDescriptor.label} action: ${issue.description}` }))))));\n        return combineLatest(issues).pipe(defaultIfEmpty([]), map(flatten));\n    }\n    validateInputParams(actionParams, issuePropertyName, processInputParams) {\n        const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n        const validationIssues = [];\n        forEach(processInputParams, (processInputParam) => {\n            const actionParamName = `actionProcessInputParams.${processInputParam.name}`;\n            if (processInputParam.fieldOption === 'REQUIRED' && isEmpty(actionParams[actionParamName])) {\n                validationIssues.push({\n                    type: 'error',\n                    description: `${actionDescriptor.label}: ${processInputParam.name} cannot be blank.`,\n                    propertyName: issuePropertyName\n                });\n            }\n        });\n        return of(validationIssues);\n    }\n}\nRxLaunchProcessViewActionDesignManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionDesignManagerService, deps: [{ token: i3$2.RxProcessDefinitionService }, { token: i1$1.RxViewActionRegistryService }, { token: i3$3.RxViewExpressionValidatorService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchProcessViewActionDesignManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionDesignManagerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionDesignManagerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i3$2.RxProcessDefinitionService }, { type: i1$1.RxViewActionRegistryService }, { type: i3$3.RxViewExpressionValidatorService }]; } });\n\nclass RxLaunchProcessViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.rxProcessDefinitionCacheService = this.injector.get(RxProcessDefinitionCacheService);\n        this.rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n        this.defaultProps = {\n            processDefinitionName: null,\n            waitForProcessCompletion: false\n        };\n        const processDefinitionName$ = this.sandbox.actionProperties$.pipe(pluck('processDefinitionName'), distinctUntilChanged());\n        processDefinitionName$.pipe(skip(1)).subscribe((processDefinitionName) => {\n            this.sandbox.setActionProperties({\n                processDefinitionName,\n                waitForProcessCompletion: false\n            });\n        });\n        processDefinitionName$\n            .pipe(switchMap((processDefinitionName) => processDefinitionName\n            ? this.rxProcessDefinitionCacheService.getProcessDefinition(processDefinitionName)\n            : of(null)))\n            .subscribe((processDefinition) => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(processDefinition)));\n        this.sandbox.actionProperties$\n            .pipe(map((props) => [props.processDefinitionName, props.waitForProcessCompletion]), distinctUntilChanged(isEqual), switchMap(([processDefinitionName, waitForProcessCompletion]) => this.getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion)))\n            .subscribe((dataDictionary) => this.sandbox.setActionOutputDataDictionary(dataDictionary));\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ processDefinitionName: null, waitForProcessCompletion: false }, initialProperties);\n    }\n    getActionEditorConfig(processDefinition) {\n        return [\n            {\n                name: 'processDefinitionName',\n                component: RxDefinitionPickerComponent,\n                options: {\n                    label: 'Process to start',\n                    definitionType: RxDefinitionPickerType.Process,\n                    required: true\n                }\n            },\n            {\n                name: 'waitForProcessCompletion',\n                component: SwitchFormControlComponent,\n                isDisabled: processDefinition ? !processDefinition.synchronous : true,\n                options: {\n                    label: 'Wait for process completion',\n                    tooltip: new Tooltip('If a process runs synchronously, it is possible to get output data from the process once the process completes. Enable Wait for completion in order to define an output map for the selected process.')\n                }\n            },\n            ...(processDefinition\n                ? map$1(processDefinition.inputParams, (param) => ({\n                    name: `actionProcessInputParams.${param.name}`,\n                    component: ExpressionFormControlComponent,\n                    options: {\n                        label: param.name,\n                        dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                        operators: this.expressionConfigurator.getOperators(),\n                        isRequired: param.fieldOption === 'REQUIRED'\n                    }\n                }))\n                : [])\n        ];\n    }\n    getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion) {\n        return waitForProcessCompletion\n            ? this.rxProcessDefinitionCacheService.getOutputParams(processDefinitionName).pipe(switchMap((outputParams) => forkJoin(outputParams.map((param) => {\n                let dataDictionary;\n                if (param.fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n                    const recordInstanceParam = param;\n                    dataDictionary = this.rxRecordDefinitionCacheService\n                        .getRecordDefinition(recordInstanceParam.recordDefinitionName)\n                        .pipe(map((recordDefinition) => ({\n                        label: recordInstanceParam.name,\n                        expression: this.getOutputExpressionForPropertyPath(recordInstanceParam.name),\n                        children: map$1(recordDefinition.fieldDefinitions, (fieldDefinition) => ({\n                            label: fieldDefinition.name,\n                            expression: this.getOutputExpressionForPropertyPath(`${recordInstanceParam.name}.${fieldDefinition.id}`)\n                        }))\n                    })));\n                }\n                else {\n                    dataDictionary = of({\n                        label: param.name,\n                        expression: this.getOutputExpressionForPropertyPath(param.name)\n                    });\n                }\n                return dataDictionary;\n            }))))\n            : of([]);\n    }\n}\n\nclass RxLaunchProcessViewActionService {\n    constructor(rxJsonParserService, rxLogService, rxProcessDefinitionCacheService, rxRecordDefinitionCacheService, rxProcessInstanceCommandsService, rxProcessInstanceService, rxRecordInstanceService) {\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxLogService = rxLogService;\n        this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n        this.rxProcessInstanceCommandsService = rxProcessInstanceCommandsService;\n        this.rxProcessInstanceService = rxProcessInstanceService;\n        this.rxRecordInstanceService = rxRecordInstanceService;\n    }\n    execute(params) {\n        let processId;\n        let processDefinitionOutputParams;\n        return this.rxProcessInstanceCommandsService\n            .start(params.processDefinitionName, params.actionProcessInputParams)\n            .pipe(switchMap((res) => {\n            if (params.waitForProcessCompletion) {\n                const location = res.headers.get('location');\n                processId = location ? last(location.split('/')) : null;\n                return this.rxProcessDefinitionCacheService.getOutputParams(params.processDefinitionName);\n            }\n            else {\n                return of(null);\n            }\n        }), switchMap((plainOutputParams) => {\n            if (!isEmpty(plainOutputParams)) {\n                processDefinitionOutputParams = plainOutputParams.reduce((outputParams, value) => {\n                    outputParams[value.name] = value;\n                    return outputParams;\n                }, {});\n                return this.rxProcessInstanceService.get(params.processDefinitionName, `${processId}/processOutputVariables`);\n            }\n            else {\n                return of(null);\n            }\n        }), switchMap((processOutputVariables) => {\n            const outputResult = {};\n            forEach(processOutputVariables, (variableValue, variableName) => {\n                if (processDefinitionOutputParams[variableName].fieldTypeName ===\n                    RX_PROCESS_DEFINITION.processVariableTypes.record) {\n                    const recordInstanceOutputData = this.rxJsonParserService.tryParseJson(variableValue);\n                    if (recordInstanceOutputData &&\n                        recordInstanceOutputData.recordDefinitionName &&\n                        recordInstanceOutputData.id) {\n                        outputResult[variableName] = this.rxRecordInstanceService\n                            .get(recordInstanceOutputData.recordDefinitionName, recordInstanceOutputData.id)\n                            .pipe(map((recordInstance) => reduce(recordInstance.fieldInstances, (result, fieldInstance) => {\n                            result[fieldInstance.id] = fieldInstance.value;\n                            return result;\n                        }, {})));\n                    }\n                    else {\n                        this.rxLogService.warning('rxLaunchProcessAction: unknown format for record instance as output data for process');\n                    }\n                }\n                else {\n                    outputResult[variableName] = of(variableValue);\n                }\n            });\n            return forkJoin(outputResult);\n        }));\n    }\n}\nRxLaunchProcessViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionService, deps: [{ token: i1.RxJsonParserService }, { token: i1$4.RxLogService }, { token: i3$2.RxProcessDefinitionCacheService }, { token: i4.RxRecordDefinitionCacheService }, { token: i3$2.RxProcessInstanceCommandsService }, { token: i3$2.RxProcessInstanceService }, { token: i4.RxRecordInstanceService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchProcessViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxJsonParserService }, { type: i1$4.RxLogService }, { type: i3$2.RxProcessDefinitionCacheService }, { type: i4.RxRecordDefinitionCacheService }, { type: i3$2.RxProcessInstanceCommandsService }, { type: i3$2.RxProcessInstanceService }, { type: i4.RxRecordInstanceService }]; } });\n\nclass LaunchProcessViewActionModule {\n    constructor(rxViewActionRegistryService, rxLaunchProcessViewActionService, rxLaunchProcessViewActionDesignManagerService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxLaunchProcessViewActionService = rxLaunchProcessViewActionService;\n        this.rxLaunchProcessViewActionDesignManagerService = rxLaunchProcessViewActionDesignManagerService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxLaunchProcessAction',\n            label: 'Launch process',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxLaunchProcessViewActionService,\n            designManager: this.rxLaunchProcessViewActionDesignManagerService,\n            designModel: RxLaunchProcessViewActionDesignModel,\n            parameters: [\n                {\n                    name: 'processDefinitionName',\n                    label: 'Process to start',\n                    type: ViewComponentPropertyType.String,\n                    isRequired: true\n                },\n                {\n                    name: 'waitForProcessCompletion',\n                    type: ViewComponentPropertyType.Boolean,\n                    designType: ViewComponentPropertyType.Boolean\n                },\n                {\n                    name: 'actionProcessInputParams',\n                    label: 'Input map',\n                    enableExpressionEvaluation: true\n                }\n            ]\n        });\n    }\n}\nLaunchProcessViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxLaunchProcessViewActionService }, { token: RxLaunchProcessViewActionDesignManagerService }], target: i0.ɵɵFactoryTarget.NgModule });\nLaunchProcessViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessViewActionModule });\nLaunchProcessViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessViewActionModule, providers: [RxLaunchProcessViewActionDesignManagerService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [RxLaunchProcessViewActionDesignManagerService]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxLaunchProcessViewActionService }, { type: RxLaunchProcessViewActionDesignManagerService }]; } });\n\nclass RxLaunchUrlViewActionService {\n    execute(params) {\n        if (params.url) {\n            window.open(params.url, RX_LAUNCH_BEHAVIOR[params.launchBehavior].target);\n            return EMPTY;\n        }\n        else {\n            return throwError(new RxError('rxLaunchUrlAction: URL is not specified.'));\n        }\n    }\n}\nRxLaunchUrlViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchUrlViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RxLaunchUrlViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ url: null, launchBehavior: RX_LAUNCH_BEHAVIOR.newWindow.value }, initialProperties);\n    }\n    getActionEditorConfig() {\n        return [\n            {\n                name: 'url',\n                component: ExpressionFormControlComponent,\n                options: {\n                    label: 'URL',\n                    isRequired: true,\n                    dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                    operators: this.expressionConfigurator.getOperators()\n                }\n            },\n            {\n                name: 'launchBehavior',\n                component: SelectFormControlComponent,\n                options: {\n                    label: 'Launch behavior',\n                    options: map$1(RX_LAUNCH_BEHAVIOR, (value) => ({\n                        name: value.content,\n                        id: value.value\n                    })),\n                    sortAlphabetically: false\n                }\n            }\n        ];\n    }\n}\n\nclass RxLaunchUrlViewActionDefinitionAdapterService {\n    adaptDefinition(viewComponentDefinition) {\n        var _a;\n        const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n        propertiesByName.launchBehavior = (_a = propertiesByName.launchBehavior) !== null && _a !== void 0 ? _a : RX_LAUNCH_BEHAVIOR.newWindow.value;\n    }\n}\nRxLaunchUrlViewActionDefinitionAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionDefinitionAdapterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchUrlViewActionDefinitionAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionDefinitionAdapterService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchUrlViewActionDefinitionAdapterService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass LaunchUrlViewActionModule {\n    constructor(rxViewActionDefinitionAdapterRegistryService, rxViewActionRegistryService, rxLaunchUrlViewActionService, rxLaunchUrlActionDefinitionAdapterService) {\n        this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxLaunchUrlViewActionService = rxLaunchUrlViewActionService;\n        this.rxLaunchUrlActionDefinitionAdapterService = rxLaunchUrlActionDefinitionAdapterService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxLaunchUrlAction',\n            label: 'Launch URL',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxLaunchUrlViewActionService,\n            designModel: RxLaunchUrlViewActionDesignModel,\n            parameters: [\n                {\n                    name: 'url',\n                    label: 'URL',\n                    enableExpressionEvaluation: true,\n                    isRequired: true\n                },\n                {\n                    name: 'launchBehavior',\n                    label: 'Launch behavior'\n                }\n            ]\n        });\n        rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter('rxLaunchUrlAction', this.rxLaunchUrlActionDefinitionAdapterService);\n    }\n}\nLaunchUrlViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchUrlViewActionModule, deps: [{ token: i1$1.RxViewActionDefinitionAdapterRegistryService }, { token: i1$1.RxViewActionRegistryService }, { token: RxLaunchUrlViewActionService }, { token: RxLaunchUrlViewActionDefinitionAdapterService }], target: i0.ɵɵFactoryTarget.NgModule });\nLaunchUrlViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchUrlViewActionModule });\nLaunchUrlViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchUrlViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchUrlViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionDefinitionAdapterRegistryService }, { type: i1$1.RxViewActionRegistryService }, { type: RxLaunchUrlViewActionService }, { type: RxLaunchUrlViewActionDefinitionAdapterService }]; } });\n\nclass RxRefreshViewActionService {\n    execute(params) {\n        if (params.component) {\n            return isFunction(params.component.refresh)\n                ? params.component.refresh()\n                : throwError(new RxError('rxRefreshAction: target component does not support refresh API.'));\n        }\n        else {\n            return throwError(new RxError('rxRefreshAction: component is not specified.'));\n        }\n    }\n}\nRxRefreshViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRefreshViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxRefreshViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRefreshViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRefreshViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RefreshViewActionModule {\n    constructor(rxViewActionRegistryService, rxRefreshViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxRefreshViewActionService = rxRefreshViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxRefreshAction',\n            label: 'Refresh',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxRefreshViewActionService,\n            parameters: [\n                {\n                    name: 'component',\n                    label: 'View/Component',\n                    enableExpressionEvaluation: true,\n                    isRequired: true,\n                    editor: ExpressionFormControlComponent\n                }\n            ]\n        });\n    }\n}\nRefreshViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RefreshViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxRefreshViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nRefreshViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RefreshViewActionModule });\nRefreshViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RefreshViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RefreshViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxRefreshViewActionService }]; } });\n\nclass RxSaveViewActionService {\n    execute(params) {\n        if (isFunction(params.targetApi.save)) {\n            const closeAfterSave$ = isFunction(params.viewApi.close)\n                ? EMPTY.pipe(tap({\n                    complete() {\n                        params.viewApi.close();\n                    }\n                }))\n                : throwError(new RxError('rxSaveAction: target view does not support close API.'));\n            return concat(params.targetApi.save(params.closeAfterSave), params.closeAfterSave ? closeAfterSave$ : EMPTY);\n        }\n        else {\n            return throwError(new RxError('rxSaveAction: target view/component does not support save API.'));\n        }\n    }\n}\nRxSaveViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSaveViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxSaveViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSaveViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSaveViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass SaveViewActionModule {\n    constructor(rxViewActionRegistryService, rxSaveViewActionService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxSaveViewActionService = rxSaveViewActionService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxSaveAction',\n            label: 'Save',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxSaveViewActionService,\n            parameters: [\n                {\n                    name: 'targetApi',\n                    label: 'View/Component',\n                    editor: ExpressionFormControlComponent,\n                    isRequired: true,\n                    enableExpressionEvaluation: true\n                },\n                {\n                    name: 'closeAfterSave',\n                    label: 'Close after save',\n                    editor: SwitchFormControlComponent,\n                    type: ViewComponentPropertyType.Boolean,\n                    designType: ViewComponentPropertyType.Boolean\n                },\n                {\n                    name: 'viewApi',\n                    enableExpressionEvaluation: true,\n                    defaultValue: '${view.api}'\n                }\n            ]\n        });\n    }\n}\nSaveViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SaveViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxSaveViewActionService }], target: i0.ɵɵFactoryTarget.NgModule });\nSaveViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SaveViewActionModule });\nSaveViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SaveViewActionModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SaveViewActionModule, decorators: [{\n            type: NgModule\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxSaveViewActionService }]; } });\n\nclass RxSetPropertyViewActionService {\n    execute(params) {\n        let executionResult = throwError(new RxError('rxSetPropertyAction: component is not specified.'));\n        if (params.componentApi && isFunction(params.componentApi.setProperty) && params.propertyPath) {\n            // Extract <Path> from  ${view.components.<ID>.<Path>}\n            const matches = params.propertyPath.match(/^\\$\\{view\\.components\\.[0-9a-z-]+\\.(.+)}$/);\n            if (matches && matches[1]) {\n                executionResult = params.componentApi.setProperty(matches[1], params.propertyValue);\n            }\n        }\n        return isObservable(executionResult) ? executionResult : EMPTY;\n    }\n}\nRxSetPropertyViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxSetPropertyViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionService, decorators: [{\n            type: Injectable\n        }] });\n\nclass RxSetPropertyViewActionExpressionConfigurator extends RxViewActionExpressionConfigurator {\n    constructor(injector, actionType, actionGuid) {\n        super(injector, actionType, actionGuid);\n        this.configureForProperty({\n            propertyPath: 'propertyPath',\n            dataDictionary$: injector.get(RxViewDataDictionaryService).settablePropertiesDataDictionary$,\n            operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.MathClient)\n        });\n    }\n}\n\nclass RxSetPropertyViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.expressionConfigurator = new RxSetPropertyViewActionExpressionConfigurator(this.injector, this.sandbox.descriptor.name, this.guid);\n        this.sandbox.actionProperties$\n            .pipe(take(1))\n            .subscribe(() => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig()));\n        this.sandbox.actionProperties$.pipe(pluck('propertyPath'), distinctUntilChanged()).subscribe((propertyPath) => {\n            let componentApi = null;\n            if (propertyPath && propertyPath.length) {\n                // Extract <ID> from ${view.components.<ID>.<Path>}\n                const matches = propertyPath.match(/\\${view\\.components\\.([0-9a-z-]+)\\..+}/);\n                if (matches && matches[1]) {\n                    componentApi = `\\${view.components.${matches[1]}.api}`;\n                }\n            }\n            this.sandbox.updateActionProperties({\n                componentApi\n            });\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ componentApi: null, propertyPath: null, propertyValue: null }, initialProperties);\n    }\n    getActionEditorConfig() {\n        return [\n            {\n                name: 'propertyPath',\n                component: ExpressionFormControlComponent,\n                options: {\n                    label: 'Property path',\n                    dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyPath'),\n                    operators: this.expressionConfigurator.getOperators('propertyPath'),\n                    isRequired: true\n                }\n            },\n            {\n                name: 'propertyValue',\n                component: ExpressionFormControlComponent,\n                options: {\n                    label: 'Property value',\n                    dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyValue'),\n                    operators: this.expressionConfigurator.getOperators('propertyValue')\n                }\n            }\n        ];\n    }\n}\n\nclass RxSetPropertyViewActionDesignManagerService {\n    validate(actionProperties, propertyName) {\n        return of(actionProperties.propertyPath && !/\\${view\\.components\\.([0-9a-z-]+)\\..+}/.test(actionProperties.propertyPath)\n            ? [\n                {\n                    type: 'error',\n                    description: 'Set property action: Property path is invalid.',\n                    propertyName\n                }\n            ]\n            : []);\n    }\n}\nRxSetPropertyViewActionDesignManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionDesignManagerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxSetPropertyViewActionDesignManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionDesignManagerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxSetPropertyViewActionDesignManagerService, decorators: [{\n            type: Injectable\n        }] });\n\nclass SetPropertyViewActionModule {\n    constructor(rxViewActionRegistryService, rxSetPropertyViewActionService, rxSetPropertyViewActionDesignManagerService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxSetPropertyViewActionService = rxSetPropertyViewActionService;\n        this.rxSetPropertyViewActionDesignManagerService = rxSetPropertyViewActionDesignManagerService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxSetPropertyAction',\n            label: 'Set property',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxSetPropertyViewActionService,\n            designModel: RxSetPropertyViewActionDesignModel,\n            designManager: rxSetPropertyViewActionDesignManagerService,\n            parameters: [\n                {\n                    name: 'componentApi',\n                    label: 'Component API',\n                    enableExpressionEvaluation: true\n                },\n                {\n                    name: 'propertyPath',\n                    label: 'Property path',\n                    isRequired: true\n                },\n                {\n                    name: 'propertyValue',\n                    enableExpressionEvaluation: true\n                }\n            ]\n        });\n    }\n}\nSetPropertyViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SetPropertyViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxSetPropertyViewActionService }, { token: RxSetPropertyViewActionDesignManagerService }], target: i0.ɵɵFactoryTarget.NgModule });\nSetPropertyViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SetPropertyViewActionModule });\nSetPropertyViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SetPropertyViewActionModule, providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: SetPropertyViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxSetPropertyViewActionService }, { type: RxSetPropertyViewActionDesignManagerService }]; } });\n\nclass ProcessDesignerFrameComponent {\n    constructor(rxApplicationLoaderService, rxBundleCacheService, rxJsonParserService, rxProcessDefinitionCacheService, domSanitizer, activeModalRef, rxUtilityModalsService) {\n        this.rxApplicationLoaderService = rxApplicationLoaderService;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n        this.domSanitizer = domSanitizer;\n        this.activeModalRef = activeModalRef;\n        this.rxUtilityModalsService = rxUtilityModalsService;\n        this.isProcessDesignerLoadingInProgress = true;\n        this.isDefinitionDirty = false;\n        this.context = activeModalRef;\n        const data = this.context.getData();\n        localStorage.setItem('ProcessDesignerPaletteElements', data.paletteElements);\n        this.iframeSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(`/com.bmc.arsys.rx.innovationstudio/index.html#/app/bundle/${this.rxBundleCacheService.bundleId}/iprocess/${data.processDefinitionName ? data.processDefinitionName : ''}`);\n    }\n    onMessage(event) {\n        if (event.data) {\n            const message = this.rxJsonParserService.tryParseJson(event.data);\n            if (message) {\n                switch (message.messageType) {\n                    case RX_DESIGNER.messageTypes.designerLoaded: {\n                        this.isProcessDesignerLoadingInProgress = false;\n                        break;\n                    }\n                    case RX_DESIGNER.messageTypes.afterSave: {\n                        this.isDefinitionDirty = false;\n                        break;\n                    }\n                    case RX_DESIGNER.messageTypes.definitionStatusChanged: {\n                        this.isDefinitionDirty = message.payload.isDirty;\n                        break;\n                    }\n                    case RX_DESIGNER.messageTypes.closeDesigner: {\n                        if (message.payload.processDefinitionName) {\n                            if (this.isDefinitionDirty) {\n                                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                                    if (isConfirmed) {\n                                        this.closeProcessDesigner(message.payload.processDefinitionName);\n                                    }\n                                });\n                            }\n                            else {\n                                this.closeProcessDesigner(message.payload.processDefinitionName);\n                            }\n                        }\n                        else {\n                            if (this.isDefinitionDirty) {\n                                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                                    if (isConfirmed) {\n                                        this.context.dismiss(DismissReasons.CLOSE_BTN);\n                                    }\n                                });\n                            }\n                            else {\n                                this.context.dismiss(DismissReasons.CLOSE_BTN);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    closeProcessDesigner(processDefinitionName) {\n        this.rxProcessDefinitionCacheService.clearCache([processDefinitionName]);\n        this.context.close({ processDefinitionName });\n    }\n}\nProcessDesignerFrameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerFrameComponent, deps: [{ token: i1$4.RxApplicationLoaderService }, { token: i1$4.RxBundleCacheService }, { token: i1.RxJsonParserService }, { token: i3$2.RxProcessDefinitionCacheService }, { token: i4$2.DomSanitizer }, { token: i1$2.ActiveModalRef }, { token: i2$2.RxUtilityModalsService }], target: i0.ɵɵFactoryTarget.Component });\nProcessDesignerFrameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: ProcessDesignerFrameComponent, selector: \"rx-process-designer-frame\", host: { listeners: { \"window:message\": \"onMessage($event)\" } }, ngImport: i0, template: \"<div id=\\\"rx-application-loader-container\\\" class=\\\"position-absolute w-100\\\" *ngIf=\\\"isProcessDesignerLoadingInProgress\\\">\\n  <div class=\\\"rx-application-loader\\\"></div>\\n</div>\\n\\n<iframe [src]=\\\"iframeSrc\\\" class=\\\"h-100\\\"></iframe>\\n\", styles: [\":host{height:100vh}\\n\"], directives: [{ type: i2$3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerFrameComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-process-designer-frame',\n                    templateUrl: './process-designer-frame.component.html',\n                    styleUrls: ['./process-designer-frame.component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: i1$4.RxApplicationLoaderService }, { type: i1$4.RxBundleCacheService }, { type: i1.RxJsonParserService }, { type: i3$2.RxProcessDefinitionCacheService }, { type: i4$2.DomSanitizer }, { type: i1$2.ActiveModalRef }, { type: i2$2.RxUtilityModalsService }]; }, propDecorators: { onMessage: [{\n                type: HostListener,\n                args: ['window:message', ['$event']]\n            }] } });\n\nclass RxLaunchProcessDesignerActionService {\n    constructor(adaptModalService, rxProcessDefinitionCacheService) {\n        this.adaptModalService = adaptModalService;\n        this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n    }\n    execute(parameters) {\n        return parameters.processDefinitionName\n            ? this.rxProcessDefinitionCacheService\n                .getProcessDefinition(parameters.processDefinitionName)\n                .pipe(switchMap(() => this.openModal(parameters)))\n            : defer(() => from(this.openModal(parameters)));\n    }\n    openModal(parameters) {\n        return this.adaptModalService.open({\n            content: ProcessDesignerFrameComponent,\n            size: OpenViewActionModalSize.FullSize,\n            data: parameters\n        });\n    }\n}\nRxLaunchProcessDesignerActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerActionService, deps: [{ token: i1$2.AdaptModalService }, { token: i3$2.RxProcessDefinitionCacheService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchProcessDesignerActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.AdaptModalService }, { type: i3$2.RxProcessDefinitionCacheService }]; } });\n\nclass RxProcessDesignerElementPickerComponent extends ValueAccessor {\n    constructor(rxDesignerStencilBuilder, rxJsonParserService, rxProcessElementsService, renderer, translateService) {\n        super();\n        this.rxDesignerStencilBuilder = rxDesignerStencilBuilder;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxProcessElementsService = rxProcessElementsService;\n        this.renderer = renderer;\n        this.translateService = translateService;\n        this.selection = [];\n        this.destroyed$ = new ReplaySubject(1);\n    }\n    ngOnInit() {\n        const paletteElementsControl = this.innerValue;\n        this.selectedPaletteElements =\n            paletteElementsControl === '*' ? '*' : this.rxJsonParserService.tryParseJson(paletteElementsControl, null);\n        this.rxDesignerStencilBuilder\n            .buildElementsTree(this.rxProcessElementsService.getProcessElements(), RX_PROCESS_DEFINITION.standardProcessElementGroups)\n            .pipe(take(1))\n            .subscribe((processElementsTree) => {\n            forEach(processElementsTree, (group) => {\n                var _a;\n                group.expanded = true;\n                group.allChildElementsSelected = true;\n                if ((_a = this.selectedPaletteElements) === null || _a === void 0 ? void 0 : _a.length) {\n                    forEach(group.children, (element) => {\n                        if (this.selectedPaletteElements === '*' ||\n                            some(this.selectedPaletteElements, (selectedPaletteElement) => isEqual(selectedPaletteElement, element.value))) {\n                            this.selection.push(element);\n                        }\n                        else {\n                            group.allChildElementsSelected = false;\n                        }\n                    });\n                    if (group.allChildElementsSelected) {\n                        this.selection.push(group);\n                    }\n                }\n            });\n            this.processElementsTree = [\n                {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.all-elements.label'),\n                    expanded: true,\n                    children: processElementsTree\n                }\n            ];\n            this.stencilElements = flatten(map$1(processElementsTree, 'children'));\n            if (this.selectedPaletteElements === '*') {\n                this.selection.push(...this.processElementsTree);\n                this.selectedPaletteElements = map$1(this.stencilElements, 'value');\n            }\n            this.updatePickerFakeInputValue();\n        });\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n    onSelectionChange() {\n        this.selectedPaletteElements = this.selection.filter((node) => !node.children).map((node) => node.value);\n        if (this.selectedPaletteElements.length === 0) {\n            this.selectedPaletteElements = null;\n            this.value = null;\n        }\n        else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n            this.value = '*';\n        }\n        else {\n            this.value = JSON.stringify(this.selectedPaletteElements);\n        }\n        this.updatePickerFakeInputValue();\n    }\n    updatePickerFakeInputValue() {\n        if (isEmpty(this.selectedPaletteElements)) {\n            this.selectedPaletteElementsByLabel = '';\n        }\n        else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n            this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.all.label');\n        }\n        else if (this.selectedPaletteElements.length === 1) {\n            this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.process-designer.one-element-selected.label');\n        }\n        else {\n            this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.process-designer.many-elements-selected.label', {\n                count: this.selectedPaletteElements.length\n            });\n        }\n    }\n    clearDefinition(e) {\n        e.stopPropagation();\n        this.selection = [];\n        this.selectedPaletteElements = null;\n        this.selectedPaletteElementsByLabel = '';\n        this.value = null;\n    }\n    setDropdownWidth() {\n        setTimeout(() => {\n            const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);\n            // 2px - border\n            this.dropdownWidth = Math.max(dropdownButton.clientWidth) + 2;\n        });\n    }\n}\nRxProcessDesignerElementPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDesignerElementPickerComponent, deps: [{ token: i1$4.RxDesignerStencilBuilder }, { token: i1.RxJsonParserService }, { token: i3$2.RxProcessElementsService }, { token: i0.Renderer2 }, { token: i4$1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });\nRxProcessDesignerElementPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RxProcessDesignerElementPickerComponent, selector: \"rx-process-designer-element-picker\", inputs: { options: \"options\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: RxProcessDesignerElementPickerComponent,\n            multi: true\n        }\n    ], viewQueries: [{ propertyName: \"dropdownButton\", first: true, predicate: [\"dropdownButton\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<adapt-rx-control-label [label]=\\\"options.label\\\"></adapt-rx-control-label>\\n\\n<div\\n  adaptDropdown\\n  appendToBody=\\\"true\\\"\\n  autoClose=\\\"outside\\\"\\n  class=\\\"dropdown\\\"\\n  placement=\\\"bottom-left\\\"\\n  (onOpen)=\\\"setDropdownWidth()\\\"\\n>\\n  <button\\n    adaptDropdownToggle\\n    class=\\\"btn btn-secondary d-flex text-center w-100\\\"\\n    rx-id=\\\"toggle-button\\\"\\n    type=\\\"button\\\"\\n    #dropdownButton\\n  >\\n    <span class=\\\"rx-selected-item text-left flex-grow-1\\\">{{ selectedPaletteElementsByLabel }}</span>\\n\\n    <span rx-id=\\\"clear-button\\\" class=\\\"d-icon-cross_adapt btn-link\\\" (click)=\\\"clearDefinition($event)\\\" *ngIf=\\\"value\\\">\\n    </span>\\n  </button>\\n\\n  <div class=\\\"dropdown-menu px-3\\\" [style.width.px]=\\\"dropdownWidth\\\" adaptDropdownMenu>\\n    <adapt-tree\\n      [value]=\\\"processElementsTree\\\"\\n      [selectionMode]=\\\"'checkbox'\\\"\\n      [(selection)]=\\\"selection\\\"\\n      (selectionChange)=\\\"onSelectionChange()\\\"\\n    ></adapt-tree>\\n  </div>\\n</div>\\n\", styles: [\":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.rx-selected-item{min-height:20px}span[rx-id=clear-button]{cursor:pointer;margin-right:5px}span[rx-id=clear-button]:not(:hover){color:#313538}.dropdown-menu{height:400px}\\n\"], components: [{ type: i1$2.AdaptRxControlLabelComponent, selector: \"adapt-rx-control-label\", inputs: [\"for\", \"id\", \"label\", \"subLabel\", \"requiredLabel\", \"showRequiredLabel\", \"tooltip\", \"testID\"] }, { type: i1$2.AdaptDropdownDirective, selector: \"adapt-dropdown, [adaptDropdown]\", inputs: [\"autoClose\", \"customClass\", \"closeOnEscape\", \"placement\", \"animationPlacement\", \"holdFocusInMenu\", \"holdFocusOnOpen\", \"autoFocusFirst\", \"restoreFocusAfterClose\", \"focusNextElementAfterClose\", \"appendToBody\", \"appendTo\", \"positionTo\", \"anchorPositionTrackingIntervalMs\", \"enableAnchorPositionTracking\", \"recalculatePositionOnElementResize\", \"setMobileState\", \"mobileView\"], outputs: [\"onOpen\", \"onClose\", \"anchorPositionChange\", \"popupAnimationDone\"], exportAs: [\"adaptDropdown\"] }, { type: i1$2.AdaptTreeComponent, selector: \"adapt-tree\", inputs: [\"value\", \"filter\", \"texts\", \"filterBtnClearText\", \"filterPlaceholder\", \"testID\", \"lazy\", \"lazyLoading\", \"trim\", \"wrap\", \"selectAllButton\", \"deselectAllButton\", \"treeScrollHeight\", \"adaptRadarDisableEventSending\", \"draggableScope\", \"droppableScope\", \"draggableNodes\", \"droppableNodes\", \"validateDrop\"], outputs: [\"onNodeDrop\", \"lazyLoad\"] }], directives: [{ type: i1$2.AdaptDropdownToggleDirective, selector: \"[adaptDropdownToggle]\", inputs: [\"showCaret\", \"dropdownTogglerType\"] }, { type: i2$3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1$2.AdaptDropdownMenuDirective, selector: \"[adaptDropdownMenu]\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDesignerElementPickerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-process-designer-element-picker',\n                    templateUrl: './process-designer-element-picker.component.html',\n                    styleUrls: ['./process-designer-element-picker.component.scss'],\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: RxProcessDesignerElementPickerComponent,\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$4.RxDesignerStencilBuilder }, { type: i1.RxJsonParserService }, { type: i3$2.RxProcessElementsService }, { type: i0.Renderer2 }, { type: i4$1.TranslateService }]; }, propDecorators: { options: [{\n                type: Input\n            }], dropdownButton: [{\n                type: ViewChild,\n                args: ['dropdownButton', { static: true }]\n            }] } });\n\nclass ProcessDesignerElementPickerModule {\n}\nProcessDesignerElementPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerElementPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nProcessDesignerElementPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerElementPickerModule, declarations: [RxProcessDesignerElementPickerComponent], imports: [CommonModule,\n        FormsModule,\n        AdaptRxCheckboxModule, i1$2.AdaptDropdownModule, AdaptRxLabelModule,\n        AdaptTreeModule], exports: [RxProcessDesignerElementPickerComponent] });\nProcessDesignerElementPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerElementPickerModule, imports: [[\n            CommonModule,\n            FormsModule,\n            AdaptRxCheckboxModule,\n            AdaptDropdownModule.forRoot(),\n            AdaptRxLabelModule,\n            AdaptTreeModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ProcessDesignerElementPickerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxProcessDesignerElementPickerComponent],\n                    exports: [RxProcessDesignerElementPickerComponent],\n                    entryComponents: [RxProcessDesignerElementPickerComponent],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        AdaptRxCheckboxModule,\n                        AdaptDropdownModule.forRoot(),\n                        AdaptRxLabelModule,\n                        AdaptTreeModule\n                    ]\n                }]\n        }] });\n\nclass LaunchProcessDesignerActionDesignModelClass extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.sandbox = sandbox;\n        this.translateService = this.injector.get(TranslateService);\n        this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => {\n            this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n            this.sandbox.setActionOutputDataDictionary([\n                {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n                    expression: this.getOutputExpressionForPropertyPath('processDefinitionName')\n                }\n            ]);\n        });\n    }\n    static getInitialProperties(initialProperties) {\n        return Object.assign({ processDefinitionName: null, paletteElements: null }, initialProperties);\n    }\n    getActionEditorConfig() {\n        return [\n            {\n                name: 'processDefinitionName',\n                component: DefinitionPickerOrExpressionFormControlComponent,\n                options: {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n                    definitionType: RxDefinitionPickerType.Process,\n                    dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                    operators: this.expressionConfigurator.getOperators()\n                }\n            },\n            {\n                name: 'paletteElements',\n                component: RxProcessDesignerElementPickerComponent,\n                options: {\n                    label: 'Available palette elements'\n                }\n            }\n        ];\n    }\n}\n\nclass RxLaunchProcessDesignerExpressionEvaluatorService {\n    constructor(rxDefaultExpressionEvaluatorService) {\n        this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n    }\n    evaluate(expression, data) {\n        let evaluatedExpression = expression;\n        if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n            evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(expression, data);\n        }\n        return evaluatedExpression;\n    }\n    parseExpression(expression) {\n        let parsedExpression;\n        if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n            parsedExpression = this.rxDefaultExpressionEvaluatorService.parseExpression(expression);\n        }\n        return parsedExpression;\n    }\n}\nRxLaunchProcessDesignerExpressionEvaluatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerExpressionEvaluatorService, deps: [{ token: i1$1.RxDefaultExpressionEvaluatorService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxLaunchProcessDesignerExpressionEvaluatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerExpressionEvaluatorService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxLaunchProcessDesignerExpressionEvaluatorService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.RxDefaultExpressionEvaluatorService }]; } });\n\nclass LaunchProcessDesignerActionModule {\n    constructor(rxViewActionRegistryService, rxLaunchProcessDesignerActionService, rxLaunchProcessDesignerExpressionActionEvaluatorService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxLaunchProcessDesignerActionService = rxLaunchProcessDesignerActionService;\n        this.rxLaunchProcessDesignerExpressionActionEvaluatorService = rxLaunchProcessDesignerExpressionActionEvaluatorService;\n        this.rxViewActionRegistryService.register({\n            name: 'rxLaunchProcessDesignerAction',\n            label: 'Launch process designer',\n            bundleId: RX_APPLICATION.platformBundleId,\n            service: this.rxLaunchProcessDesignerActionService,\n            designModel: LaunchProcessDesignerActionDesignModelClass,\n            parameters: [\n                {\n                    name: 'processDefinitionName',\n                    label: 'Process definition name',\n                    type: ViewComponentPropertyType.String,\n                    enableExpressionEvaluation: true,\n                    evaluatorService: this.rxLaunchProcessDesignerExpressionActionEvaluatorService\n                },\n                {\n                    name: 'paletteElements',\n                    label: 'Available palette elements',\n                    type: ViewComponentPropertyType.String\n                }\n            ]\n        });\n    }\n}\nLaunchProcessDesignerActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessDesignerActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxLaunchProcessDesignerActionService }, { token: RxLaunchProcessDesignerExpressionEvaluatorService }], target: i0.ɵɵFactoryTarget.NgModule });\nLaunchProcessDesignerActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessDesignerActionModule, declarations: [ProcessDesignerFrameComponent], imports: [CommonModule, RxProcessApiModule, RxIframeModule] });\nLaunchProcessDesignerActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessDesignerActionModule, providers: [RxLaunchProcessDesignerExpressionEvaluatorService], imports: [[CommonModule, RxProcessApiModule, RxIframeModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: LaunchProcessDesignerActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RxProcessApiModule, RxIframeModule],\n                    declarations: [ProcessDesignerFrameComponent],\n                    entryComponents: [ProcessDesignerFrameComponent],\n                    providers: [RxLaunchProcessDesignerExpressionEvaluatorService]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxLaunchProcessDesignerActionService }, { type: RxLaunchProcessDesignerExpressionEvaluatorService }]; } });\n\nclass RxUnknownViewActionService {\n    execute() {\n        return EMPTY;\n    }\n}\nRxUnknownViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxUnknownViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionService, decorators: [{\n            type: Injectable\n        }] });\n\nclass RxUnknownViewActionDesignManager {\n    validate(actionProperties, propertyName) {\n        return of([\n            {\n                type: 'error',\n                description: `Unknown action: ${actionProperties.name}`,\n                propertyName\n            }\n        ]);\n    }\n}\nRxUnknownViewActionDesignManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionDesignManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxUnknownViewActionDesignManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionDesignManager });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxUnknownViewActionDesignManager, decorators: [{\n            type: Injectable\n        }] });\n\nclass RxUnknownViewActionDesignModel extends RxViewDesignerActionModel {\n    constructor(injector, sandbox) {\n        super(injector, sandbox);\n        this.injector = injector;\n        this.sandbox = sandbox;\n        this.sandbox.actionProperties$.pipe(take(1)).subscribe((actionProperties) => {\n            this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(actionProperties));\n        });\n    }\n    getActionEditorConfig(actionProperties) {\n        return keys(actionProperties).map((propertyName) => ({\n            name: propertyName,\n            component: TextFormControlComponent,\n            isDisabled: true,\n            options: {\n                label: propertyName\n            }\n        }));\n    }\n}\n\nclass UnknownViewActionModule {\n    constructor(rxViewActionRegistryService, rxUnknownViewActionService, rxUnknownViewActionDesignManager) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxUnknownViewActionService = rxUnknownViewActionService;\n        this.rxUnknownViewActionDesignManager = rxUnknownViewActionDesignManager;\n        this.rxViewActionRegistryService.register({\n            name: 'rxUnknownViewAction',\n            label: 'Unknown',\n            bundleId: RX_APPLICATION.platformBundleId,\n            designModel: RxUnknownViewActionDesignModel,\n            designManager: this.rxUnknownViewActionDesignManager,\n            service: this.rxUnknownViewActionService,\n            parameters: [],\n            hidden: true\n        });\n    }\n}\nUnknownViewActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UnknownViewActionModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxUnknownViewActionService }, { token: RxUnknownViewActionDesignManager }], target: i0.ɵɵFactoryTarget.NgModule });\nUnknownViewActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UnknownViewActionModule });\nUnknownViewActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UnknownViewActionModule, providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UnknownViewActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxUnknownViewActionService }, { type: RxUnknownViewActionDesignManager }]; } });\n\nclass ViewActionsModule {\n}\nViewActionsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nViewActionsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsModule, imports: [ApplyGridFilterViewActionModule,\n        AssociateViewActionModule,\n        AvcAssociateActionModule,\n        CloseViewActionModule,\n        DeleteRecordsViewActionModule,\n        DisassociateViewActionModule,\n        EditRecordsViewActionModule,\n        LaunchProcessViewActionModule,\n        LaunchProcessDesignerActionModule,\n        LaunchUrlViewActionModule,\n        OpenViewActionModule,\n        RefreshViewActionModule,\n        SaveViewActionModule,\n        SetPropertyViewActionModule,\n        UnknownViewActionModule] });\nViewActionsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsModule, imports: [[\n            ApplyGridFilterViewActionModule,\n            AssociateViewActionModule,\n            AvcAssociateActionModule,\n            CloseViewActionModule,\n            DeleteRecordsViewActionModule,\n            DisassociateViewActionModule,\n            EditRecordsViewActionModule,\n            LaunchProcessViewActionModule,\n            LaunchProcessDesignerActionModule,\n            LaunchUrlViewActionModule,\n            OpenViewActionModule,\n            RefreshViewActionModule,\n            SaveViewActionModule,\n            SetPropertyViewActionModule,\n            UnknownViewActionModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        ApplyGridFilterViewActionModule,\n                        AssociateViewActionModule,\n                        AvcAssociateActionModule,\n                        CloseViewActionModule,\n                        DeleteRecordsViewActionModule,\n                        DisassociateViewActionModule,\n                        EditRecordsViewActionModule,\n                        LaunchProcessViewActionModule,\n                        LaunchProcessDesignerActionModule,\n                        LaunchUrlViewActionModule,\n                        OpenViewActionModule,\n                        RefreshViewActionModule,\n                        SaveViewActionModule,\n                        SetPropertyViewActionModule,\n                        UnknownViewActionModule\n                    ]\n                }]\n        }] });\n\nclass RxApplyGridFilterViewActionDesignManagerService {\n    constructor(viewDesignerFacade, rxRecordGridDesignUtilsService, rxRecordGridFilterHelperService) {\n        this.viewDesignerFacade = viewDesignerFacade;\n        this.rxRecordGridDesignUtilsService = rxRecordGridDesignUtilsService;\n        this.rxRecordGridFilterHelperService = rxRecordGridFilterHelperService;\n        const applyGridFilterActions$ = this.viewDesignerFacade\n            .getComponentsByType(RxViewComponentType.Action)\n            .pipe(map((components) => components.filter((comp) => comp.data.name === RxApplyGridFilterActionName)), shareReplay({ refCount: true, bufferSize: 1 }));\n        const gridGuids$ = applyGridFilterActions$.pipe(map((actions) => actions.map((action) => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(action.data.targetApi))), map((guids) => sortBy(uniq(compact(guids)))), filter((guids) => Boolean(guids.length)), distinctUntilChanged((a, b) => isEqual(a, b)), shareReplay({ refCount: true, bufferSize: 1 }));\n        const updateActionFiltersOnGridColumnsChange$ = gridGuids$.pipe(switchMap((gridGuids) => {\n            const actionsToUpdate$ = gridGuids.map((gridGuid) => this.getActionsToUpdate(gridGuid, applyGridFilterActions$));\n            return merge(...actionsToUpdate$);\n        }));\n        const clearFiltersOnGridDefinitionChange$ = gridGuids$.pipe(switchMap((gridGuids) => {\n            const actionsToUpdate$ = gridGuids.map((gridGuid) => this.getGridDefinitionChanges(gridGuid).pipe(skip(1), map(() => gridGuid), withLatestFrom(applyGridFilterActions$), map(([guid, actions]) => {\n                const affectedActions = actions.filter((action) => action.data.targetApi.includes(guid));\n                return affectedActions.map((actionComponent) => {\n                    const updatedActionComponent = cloneDeep(actionComponent);\n                    updatedActionComponent.data.filters = null;\n                    return {\n                        component: updatedActionComponent,\n                        children: []\n                    };\n                });\n            })));\n            return merge(...actionsToUpdate$);\n        }));\n        merge(clearFiltersOnGridDefinitionChange$, updateActionFiltersOnGridColumnsChange$).subscribe((components) => {\n            components.forEach((item) => {\n                this.viewDesignerFacade.updateComponentProperties(item.component.guid, item.component.data);\n                this.viewDesignerFacade.setChildren(item.component.guid, item.children);\n            });\n        });\n    }\n    getActionsToUpdate(gridGuid, applyGridFilterActions$) {\n        return this.getGridColumnChanges(gridGuid).pipe(skip(1), withLatestFrom(applyGridFilterActions$), switchMap(([gridData, actions]) => {\n            // getting actions bound to changed grid\n            const affectedActions = actions.filter((action) => action.data.targetApi.includes(gridData.guid));\n            const actionsWithFilters$ = affectedActions.map((action) => this.viewDesignerFacade.getChildComponents(action.guid).pipe(map((filterComponents) => (Object.assign(Object.assign({}, cloneDeep(action)), { children: filterComponents }))), take(1)));\n            return forkJoin(actionsWithFilters$).pipe(map((actionComponents) => {\n                const gridColumnIds = gridData.columns.map((col) => col.fieldId);\n                return actionComponents.reduce((result, actionComponent) => {\n                    const componentsToUpdate = this.getUpdatedFilterComponents(omit(actionComponent, 'children'), actionComponent.children, gridColumnIds);\n                    return componentsToUpdate ? result.concat(componentsToUpdate) : result;\n                }, []);\n            }));\n        }));\n    }\n    getGridColumnChanges(guid) {\n        return this.viewDesignerFacade\n            .getComponentPropertyValue(guid, 'columns')\n            .pipe(filter((columns) => Array.isArray(columns)), map((columns) => ({\n            guid,\n            columns: columns.map((col) => ({\n                fieldId: col.fieldId,\n                namedFilterOptions: col.namedFilterOptions\n            }))\n        })), distinctUntilChanged(isEqual));\n    }\n    getGridDefinitionChanges(guid) {\n        return this.viewDesignerFacade.getComponentPropertyValue(guid, 'recordDefinitionName').pipe(distinctUntilChanged());\n    }\n    getUpdatedFilterComponents(component, filterComponents, gridColumnIds) {\n        const filterComponentsForColumns = filterComponents.filter((item) => gridColumnIds.includes(item.data.fieldId));\n        if (filterComponentsForColumns.length !== filterComponents.length) {\n            const updatedFilterComponents = this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponentsForColumns);\n            const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(component.data.filters, updatedFilterComponents);\n            // updating filters JSON after column remove\n            component.data.filters = newFilterData\n                ? this.rxRecordGridFilterHelperService.denormalizeFilterString(JSON.stringify(newFilterData), updatedFilterComponents)\n                : null;\n            return {\n                component,\n                children: filterComponentsForColumns\n            };\n        }\n        return null;\n    }\n    validate(actionProperties, propertyName) {\n        const filterValidation = !actionProperties.filters &&\n            !includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], actionProperties.mode)\n            ? {\n                type: 'error',\n                description: 'Apply grid filter action: Filter is required',\n                propertyName\n            }\n            : null;\n        return of(actionProperties.targetApi).pipe(map((targetApi) => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(targetApi)), switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))), take(1), map((item) => {\n            const issues = [];\n            if (actionProperties.targetApi && (item === null || item === void 0 ? void 0 : item.type) !== RX_RECORD_GRID.type) {\n                issues.push({\n                    type: 'error',\n                    description: 'Apply grid filter action: Record grid expression must point to a record grid.',\n                    propertyName\n                });\n            }\n            if (actionProperties.targetApi && !issues.length && filterValidation) {\n                issues.push(filterValidation);\n            }\n            return issues;\n        }));\n    }\n}\nRxApplyGridFilterViewActionDesignManagerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDesignManagerService, deps: [{ token: i3$3.ViewDesignerFacade }, { token: i2.RxRecordGridDesignUtilsService }, { token: i2.RxRecordGridFilterHelperService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxApplyGridFilterViewActionDesignManagerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDesignManagerService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxApplyGridFilterViewActionDesignManagerService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i3$3.ViewDesignerFacade }, { type: i2.RxRecordGridDesignUtilsService }, { type: i2.RxRecordGridFilterHelperService }]; } });\n\nclass ApplyGridFilterViewActionDesignModule {\n    constructor(rxViewActionRegistryService, rxApplyGridFilterViewActionDesignManagerService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxApplyGridFilterViewActionDesignManagerService = rxApplyGridFilterViewActionDesignManagerService;\n        this.rxViewActionRegistryService.registerDesignManager(RxApplyGridFilterActionName, rxApplyGridFilterViewActionDesignManagerService);\n    }\n}\nApplyGridFilterViewActionDesignModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionDesignModule, deps: [{ token: i1$1.RxViewActionRegistryService }, { token: RxApplyGridFilterViewActionDesignManagerService }], target: i0.ɵɵFactoryTarget.NgModule });\nApplyGridFilterViewActionDesignModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionDesignModule });\nApplyGridFilterViewActionDesignModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionDesignModule, providers: [RxApplyGridFilterViewActionDesignManagerService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ApplyGridFilterViewActionDesignModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [RxApplyGridFilterViewActionDesignManagerService]\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxViewActionRegistryService }, { type: RxApplyGridFilterViewActionDesignManagerService }]; } });\n\nclass ViewActionsDesignModule {\n}\nViewActionsDesignModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsDesignModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nViewActionsDesignModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsDesignModule, imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule] });\nViewActionsDesignModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsDesignModule, imports: [[ViewActionsModule, ApplyGridFilterViewActionDesignModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionsDesignModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplyGridFilterViewActionModule, AssociateViewActionModule, AvcAssociateActionModule, CloseViewActionModule, DeleteRecordsViewActionModule, DisassociateViewActionModule, EditRecordsViewActionModule, LaunchProcessDesignerActionModule, LaunchProcessViewActionModule, LaunchUrlViewActionModule, OpenViewActionModule, ProcessDesignerElementPickerModule, RX_OPEN_VIEW, RefreshViewActionModule, RxApplyGridFilterActionName, RxApplyGridFilterViewActionService, RxAssociateViewActionService, RxAvcAssociateActionService, RxCloseViewActionService, RxDeleteRecordsViewActionService, RxDisassociateViewActionService, RxEditRecordsViewActionService, RxLaunchProcessDesignerActionService, RxLaunchProcessViewActionService, RxLaunchUrlViewActionService, RxOpenViewActionService, RxOpenViewModelHelperService, RxProcessDesignerElementPickerComponent, RxRefreshViewActionService, RxSaveViewActionService, RxSetPropertyViewActionService, RxUnknownViewActionDesignManager, RxUnknownViewActionService, SaveViewActionModule, SetPropertyViewActionModule, UnknownViewActionModule, ViewActionsDesignModule, ViewActionsModule };\n//# sourceMappingURL=helix-platform-view-actions.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}